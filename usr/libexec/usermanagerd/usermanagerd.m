id sub_100003DD4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t vars8;

  v0 = objc_opt_new();
  v1 = (void *)qword_1000E3F90;
  qword_1000E3F90 = v0;

  v2 = (void *)qword_1000E3F90;

  return [v2 setSwitchState:0];
}

void sub_100003E74(id a1)
{
  qword_1000E3FA0 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___RDServer];

  _objc_release_x1();
}

void sub_100003F10(id a1)
{
  qword_1000E3FB0 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___BDKeybagd];

  _objc_release_x1();
}

void sub_1000040F0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pid];
  id v7 = +[NSNumber numberWithInt:v2];
  v3 = [*(id *)(a1 + 40) pidsToClients];
  v4 = [v3 objectForKeyedSubscript:v7];

  if (v4)
  {
    NSLog(@"We already have a client for pid: %d", v2);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    v6 = [*(id *)(a1 + 40) pidsToClients];
    [v6 setObject:v5 forKeyedSubscript:v7];
  }
}

void sub_100004258(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pid];
  v3 = [*(id *)(a1 + 40) _clientForPID:v2];

  if (v3)
  {
    if ([*(id *)(a1 + 32) hasUserSwitchTasks])
    {
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      v4 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = sub_100055404(1);
        if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
          v5 &= ~1u;
        }
        if (v5)
        {
          v6 = *(void **)(a1 + 32);
          id v7 = v4;
          v8 = [v6 userSwitchTasks];
          int v14 = 138412546;
          v15 = v8;
          __int16 v16 = 1024;
          int v17 = (int)v2;
          LODWORD(v13) = 18;
          v12 = &v14;
          v9 = (char *)_os_log_send_and_compose_impl();

          if (v9) {
            sub_100055434(v9);
          }
        }
        else
        {
          v9 = 0;
        }
        free(v9);
      }
    }
    v10 = [*(id *)(a1 + 40) pidsToClients:v12, v13];
    v11 = +[NSNumber numberWithInt:v2];
    [v10 setObject:0 forKeyedSubscript:v11];

    if ([*(id *)(a1 + 40) switchState] == 1) {
      [*(id *)(a1 + 40) _checkIfWeShouldSwitchUser:dword_1000E42C8 == 3];
    }
  }
}

void sub_10000450C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pid];
  id v7 = +[NSNumber numberWithInt:v2];
  v3 = [*(id *)(a1 + 40) pidsToClients];
  v4 = [v3 objectForKeyedSubscript:v7];

  if (v4)
  {
    NSLog(@"We already have a client for pid: %d", v2);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    v6 = [*(id *)(a1 + 40) pidsToClients];
    [v6 setObject:v5 forKeyedSubscript:v7];
  }
}

void sub_100004674(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pid];
  v3 = [*(id *)(a1 + 40) _clientForPID:v2];

  if (v3)
  {
    id v5 = [*(id *)(a1 + 40) pidsToClients];
    v4 = +[NSNumber numberWithInt:v2];
    [v5 setObject:0 forKeyedSubscript:v4];
  }
}

void sub_100004C5C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  v3 = sub_1000186EC(qword_1000E4318);
  v4 = [v3 pathForPID:*(unsigned int *)(a1 + 48) error:0];

  if (qword_1000E3FE8 != -1) {
    dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
  }
  id v5 = (id)qword_1000E3FE0;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = sub_100055404(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = v6 & 0xFFFFFFFE;
    }
    if (v7)
    {
      v8 = (const char *)_os_log_send_and_compose_impl();
      v9 = (char *)v8;
      if (v8) {
        sub_100055434(v8);
      }
    }
    else
    {
      v9 = 0;
    }
    free(v9);
  }

  if (!v2) {
    goto LABEL_29;
  }
  if ([*(id *)(a1 + 32) switchState])
  {
    v10 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:16 userInfo:0];
  }
  else
  {
    v10 = 0;
  }
  (*(void (**)(void, void *))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v10);
  if (!v10)
  {
    [v2 setStakeholderIsRegistered:1];
    [v2 setSwitchStakeHolderKind:0];
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    v11 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v12 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v12 & 0xFFFFFFFE;
      }
      if (v13)
      {
        int v14 = (const char *)_os_log_send_and_compose_impl();
        v15 = (char *)v14;
        if (v14) {
          sub_100055434(v14);
        }
      }
      else
      {
        v15 = 0;
      }
      free(v15);
    }

LABEL_29:
    v10 = 0;
  }
}

void sub_100005000(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  if (v2)
  {
    v3 = sub_1000186EC(qword_1000E4318);
    v4 = [v3 pathForPID:*(unsigned int *)(a1 + 48) error:0];

    if (qword_1000E3FE8 != -1) {
      dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
    }
    id v5 = (id)qword_1000E3FE0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = 0;
      unsigned int v6 = sub_100055404(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
        int v8 = *(_DWORD *)(a1 + 48);
        LODWORD(v26) = 67109378;
        HIDWORD(v26) = v8;
        __int16 v27 = 2114;
        v28 = v4;
        LODWORD(v25) = 18;
        v24 = &v26;
        v9 = (const char *)_os_log_send_and_compose_impl();
        v10 = (char *)v9;
        if (v9) {
          sub_100055434(v9);
        }
      }
      else
      {
        v10 = 0;
      }
      free(v10);
    }

    if (![*(id *)(a1 + 32) switchState] || dword_1000E42C8 == 3)
    {
      [v2 setCriticalStakeHolder:1 v24, v25];
      [v2 setSwitchStakeHolderKind:1];
      int v17 = 0;
    }
    else
    {
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      v11 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = 0;
        int v12 = sub_100055404(1);
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          v12 &= ~1u;
        }
        if (v12)
        {
          unsigned int v13 = *(void **)(a1 + 32);
          int v14 = v11;
          unsigned int v15 = [v13 switchState];
          LODWORD(v29) = 67109120;
          HIDWORD(v29) = v15;
          __int16 v16 = (char *)_os_log_send_and_compose_impl();

          if (v16) {
            sub_100055434(v16);
          }
        }
        else
        {
          __int16 v16 = 0;
        }
        free(v16);
      }

      int v17 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:16 userInfo:0];
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    if (!v17)
    {
      [v2 setStakeholderIsRegistered:1];
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      v18 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = 0;
        unsigned int v19 = sub_100055404(1);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v20 = v19;
        }
        else {
          unsigned int v20 = v19 & 0xFFFFFFFE;
        }
        if (v20)
        {
          int v21 = *(_DWORD *)(a1 + 48);
          LODWORD(v29) = 67109120;
          HIDWORD(v29) = v21;
          v22 = (const char *)_os_log_send_and_compose_impl();
          v23 = (char *)v22;
          if (v22) {
            sub_100055434(v22);
          }
        }
        else
        {
          v23 = 0;
        }
        free(v23);
      }
    }
  }
}

void sub_1000054C0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  if (!v2) {
    goto LABEL_35;
  }
  v3 = sub_1000186EC(qword_1000E4318);
  v4 = [v3 pathForPID:*(unsigned int *)(a1 + 48) error:0];

  if (qword_1000E3FE8 != -1) {
    dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
  }
  id v5 = (id)qword_1000E3FE0;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = 0;
    unsigned int v6 = sub_100055404(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = v6 & 0xFFFFFFFE;
    }
    if (v7)
    {
      int v8 = *(_DWORD *)(a1 + 48);
      LODWORD(v24) = 67109378;
      HIDWORD(v24) = v8;
      __int16 v25 = 2114;
      uint64_t v26 = v4;
      LODWORD(v23) = 18;
      v22 = &v24;
      v9 = (const char *)_os_log_send_and_compose_impl();
      v10 = (char *)v9;
      if (v9) {
        sub_100055434(v9);
      }
    }
    else
    {
      v10 = 0;
    }
    free(v10);
  }

  if ([v2 hasEntitlement:@"com.apple.mobile.keybagd.UserManager.bubblepop"])
  {
    if (![*(id *)(a1 + 32) switchState])
    {
      int v12 = 0;
      goto LABEL_18;
    }
    uint64_t v11 = 16;
  }
  else
  {
    uint64_t v11 = 1;
  }
  int v12 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v11, 0, v22, v23);
LABEL_18:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  if (!v12)
  {
    [v2 setStakeholderIsRegistered:1];
    [v2 setBubblePopstakeholderIsRegistered:1];
    [v2 setSwitchStakeHolderKind:3];
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v13 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = 0;
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        int v16 = *(_DWORD *)(a1 + 48);
        LODWORD(v27) = 67109120;
        HIDWORD(v27) = v16;
        int v17 = (const char *)_os_log_send_and_compose_impl();
        v18 = (char *)v17;
        if (v17) {
          sub_100055434(v17);
        }
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

    unsigned int v19 = [*(id *)(a1 + 32) bubbleStakeHolder];

    unsigned int v20 = *(void **)(a1 + 32);
    if (v19)
    {
      int v21 = [v20 bubbleStakeHolder];
      [v21 bubbleShouldPop];
    }
    else
    {
      [v20 _broadcastBubbleDidPop];
    }
  }

LABEL_35:
}

void sub_100005B7C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 56)];
  if (v2)
  {
    v3 = sub_1000186EC(qword_1000E4318);
    v4 = [v3 pathForPID:*(unsigned int *)(a1 + 56) error:0];

    if (qword_1000E3FE8 != -1) {
      dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
    }
    id v5 = (id)qword_1000E3FE0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v37 = 0;
      unsigned int v6 = sub_100055404(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
        int v8 = *(_DWORD *)(a1 + 56);
        uint64_t v9 = *(void *)(a1 + 40);
        LODWORD(v32) = 67109634;
        HIDWORD(v32) = v8;
        __int16 v33 = 2114;
        v34 = v4;
        __int16 v35 = 2114;
        uint64_t v36 = v9;
        LODWORD(v31) = 28;
        v30 = &v32;
        v10 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      free(v11);
    }

    if (([v2 hasEntitlement:@"com.apple.mobile.keybagd.UserManager.sync"] & 1) == 0)
    {
      NSErrorDomain v12 = NSPOSIXErrorDomain;
      uint64_t v13 = 1;
      goto LABEL_17;
    }
    if ([*(id *)(a1 + 32) switchState])
    {
LABEL_15:
      NSErrorDomain v12 = NSPOSIXErrorDomain;
      uint64_t v13 = 16;
LABEL_17:
      unsigned int v14 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v12, v13, 0, v30, v31);
LABEL_18:
      (*(void (**)(void, void *))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v14);

      goto LABEL_19;
    }
    unsigned int v15 = sub_100018600(qword_1000E4318);
    if (sub_1000192C0((uint64_t)v15))
    {
      int v16 = sub_100018600(qword_1000E4318);
      if (sub_10001935C((uint64_t)v16) == 502)
      {

LABEL_34:
        [v2 setMachServiceName:*(void *)(a1 + 40), v30, v31];
        sub_100034CF4(*(const __CFString **)(a1 + 40));
        [v2 setStakeholderIsRegistered:1];
        [v2 setSwitchStakeHolderKind:2];
        if (qword_1000E3FD8 != -1) {
          dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
        }
        uint64_t v24 = (id)qword_1000E3FD0;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v32 = 0;
          unsigned int v25 = sub_100055404(1);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v26 = v25;
          }
          else {
            unsigned int v26 = v25 & 0xFFFFFFFE;
          }
          if (v26)
          {
            int v27 = *(_DWORD *)(a1 + 56);
            LODWORD(v37) = 67109120;
            HIDWORD(v37) = v27;
            v28 = (const char *)_os_log_send_and_compose_impl();
            uint64_t v29 = (char *)v28;
            if (v28) {
              sub_100055434(v28);
            }
          }
          else
          {
            uint64_t v29 = 0;
          }
          free(v29);
        }

        unsigned int v14 = 0;
        goto LABEL_18;
      }
      unsigned __int8 v23 = [*(id *)(a1 + 32) inLoginSession];

      if ((v23 & 1) == 0) {
        goto LABEL_34;
      }
    }
    else
    {
      unsigned int v17 = [*(id *)(a1 + 32) inLoginSession];

      if (!v17) {
        goto LABEL_34;
      }
    }
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    v18 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = 0;
      unsigned int v19 = sub_100055404(1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v20 = v19;
      }
      else {
        unsigned int v20 = v19 & 0xFFFFFFFE;
      }
      if (v20)
      {
        LOWORD(v37) = 0;
        LODWORD(v31) = 2;
        v30 = &v37;
        int v21 = (const char *)_os_log_send_and_compose_impl();
        v22 = (char *)v21;
        if (v21) {
          sub_100055434(v21);
        }
      }
      else
      {
        v22 = 0;
      }
      free(v22);
    }

    goto LABEL_15;
  }
LABEL_19:
}

void sub_100006078(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  v3 = sub_1000186EC(qword_1000E4318);
  v4 = [v3 pathForPID:*(unsigned int *)(a1 + 48) error:0];

  if (qword_1000E3FE8 != -1) {
    dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
  }
  id v5 = (id)qword_1000E3FE0;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v40 = 0;
    unsigned int v6 = sub_100055404(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = v6 & 0xFFFFFFFE;
    }
    if (v7)
    {
      int v8 = *(_DWORD *)(a1 + 48);
      LODWORD(v37) = 67109378;
      HIDWORD(v37) = v8;
      __int16 v38 = 2114;
      v39 = v4;
      LODWORD(v36) = 18;
      __int16 v35 = &v37;
      uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
      v10 = (char *)v9;
      if (v9) {
        sub_100055434(v9);
      }
    }
    else
    {
      v10 = 0;
    }
    free(v10);
  }

  if (v2)
  {
    uint64_t v11 = [v2 machServiceName];

    if (v11)
    {
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      NSErrorDomain v12 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v37 = 0;
        unsigned int v13 = sub_100055404(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v14 = v13;
        }
        else {
          unsigned int v14 = v13 & 0xFFFFFFFE;
        }
        if (v14)
        {
          LOWORD(v40) = 0;
          LODWORD(v36) = 2;
          __int16 v35 = &v40;
          unsigned int v15 = (const char *)_os_log_send_and_compose_impl();
          int v16 = (char *)v15;
          if (v15) {
            sub_100055434(v15);
          }
        }
        else
        {
          int v16 = 0;
        }
        free(v16);
      }

      if ((*(void *)(a1 + 40) | 2) == 2)
      {
        unsigned int v17 = [v2 machServiceName];
        sub_10003578C(v17);

        uint64_t v11 = 0;
      }
      else
      {
        if (qword_1000E3FD8 != -1) {
          dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
        }
        v18 = (id)qword_1000E3FD0;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v37 = 0;
          unsigned int v19 = sub_100055404(1);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v20 = v19;
          }
          else {
            unsigned int v20 = v19 & 0xFFFFFFFE;
          }
          if (v20)
          {
            LOWORD(v40) = 0;
            LODWORD(v36) = 2;
            __int16 v35 = &v40;
            int v21 = (const char *)_os_log_send_and_compose_impl();
            v22 = (char *)v21;
            if (v21) {
              sub_100055434(v21);
            }
          }
          else
          {
            v22 = 0;
          }
          free(v22);
        }

        unsigned __int8 v23 = [v2 machServiceName];
        sub_100034CF4(v23);

        uint64_t v11 = [*(id *)(a1 + 32) fetchUserSyncTaskList];
        if ([v11 count]) {
          sub_100035DC4(v11);
        }
      }
    }
    if (objc_msgSend(v2, "bubblePopstakeholderIsRegistered", v35, v36)) {
      sub_10001BEC4();
    }
    [v2 setStakeholderIsRegistered:0];
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v24 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v37 = 0;
      unsigned int v25 = sub_100055404(1);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v26 = v25;
      }
      else {
        unsigned int v26 = v25 & 0xFFFFFFFE;
      }
      if (v26)
      {
        LOWORD(v40) = 0;
        int v27 = (const char *)_os_log_send_and_compose_impl();
        v28 = (char *)v27;
        if (v27) {
          sub_100055434(v27);
        }
      }
      else
      {
        v28 = 0;
      }
      free(v28);
    }

    [*(id *)(a1 + 32) _checkIfWeShouldSwitchUser:0];
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v29 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v37 = 0;
      unsigned int v30 = sub_100055404(1);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v31 = v30;
      }
      else {
        unsigned int v31 = v30 & 0xFFFFFFFE;
      }
      if (v31)
      {
        int v32 = *(_DWORD *)(a1 + 48);
        LODWORD(v40) = 67109120;
        HIDWORD(v40) = v32;
        __int16 v33 = (const char *)_os_log_send_and_compose_impl();
        v34 = (char *)v33;
        if (v33) {
          sub_100055434(v33);
        }
      }
      else
      {
        v34 = 0;
      }
      free(v34);
    }
  }
}

void sub_100006658(id a1)
{
  v1 = (void *)qword_1000E3FC0;
  qword_1000E3FC0 = (uint64_t)&off_1000D93A8;
}

void sub_1000067C4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 80)];
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  v3 = &kUMUserSessionShortNameKey;
  v4 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v70 = 0;
    unsigned int v5 = sub_100055404(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = v5 & 0xFFFFFFFE;
    }
    if (v6)
    {
      LOWORD(v68[0]) = 0;
      LODWORD(v62) = 2;
      v60 = v68;
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      int v8 = 0;
    }
    free(v8);
  }

  if (([v2 hasEntitlement:@"com.apple.mkb.usersession.switch"] & 1) != 0
    || (_os_feature_enabled_impl() & 1) != 0)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:1 userInfo:0];
  }
  if (objc_msgSend(*(id *)(a1 + 32), "inLogoutProcess", v60, v62))
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    v10 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v70 = 0;
      unsigned int v11 = sub_100055404(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v12 = v11;
      }
      else {
        unsigned int v12 = v11 & 0xFFFFFFFE;
      }
      if (v12)
      {
        LOWORD(v68[0]) = 0;
        LODWORD(v63) = 2;
        v61 = v68;
        unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v14 = (char *)v13;
        if (v13) {
          sub_100055434(v13);
        }
      }
      else
      {
        unsigned int v14 = 0;
      }
      free(v14);
    }

    uint64_t v20 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:16 userInfo:0];

    uint64_t v9 = (void *)v20;
    goto LABEL_39;
  }
  if (!sub_10001C514())
  {
LABEL_39:
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    int v21 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v68[0] = 0;
      int v22 = sub_100055404(1);
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
        v22 &= ~1u;
      }
      if (v22)
      {
        unsigned __int8 v23 = v21;
        int v24 = sub_10001D20C();
        LODWORD(v70) = 67109376;
        HIDWORD(v70) = v24;
        __int16 v71 = 1024;
        int v72 = dword_1000E42C8;
        LODWORD(v63) = 14;
        v61 = &v70;
        unsigned int v25 = (char *)_os_log_send_and_compose_impl();

        if (v25) {
          sub_100055434(v25);
        }
      }
      else
      {
        unsigned int v25 = 0;
      }
      free(v25);
    }

    int v26 = sub_10001D20C();
    int v27 = sub_1000885F0(*(const __CFDictionary **)(a1 + 40), kUMUserSessionIDKey);
    uint64_t v28 = *(void *)(a1 + 72);
    uint64_t v29 = *(void (**)(uint64_t, void *))(v28 + 16);
    if (v26 != v27 || dword_1000E42C8 == 1)
    {
      v29(v28, v9);
      if (!v9)
      {
        if (*(void *)(a1 + 48))
        {
          if (qword_1000E3FD8 != -1) {
            dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
          }
          unsigned int v30 = (id)qword_1000E3FD0;
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v70 = 0;
            unsigned int v31 = sub_100055404(1);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v32 = v31;
            }
            else {
              unsigned int v32 = v31 & 0xFFFFFFFE;
            }
            if (v32)
            {
              LOWORD(v68[0]) = 0;
              LODWORD(v63) = 2;
              v61 = v68;
              __int16 v33 = (const char *)_os_log_send_and_compose_impl();
              v34 = (char *)v33;
              if (v33) {
                sub_100055434(v33);
              }
            }
            else
            {
              v34 = 0;
            }
            free(v34);
          }

          uint64_t v36 = objc_opt_new();
          uint64_t v37 = [*(id *)(a1 + 32) _allowlistedPreferencesKeys];
          long long v64 = 0u;
          long long v65 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          id v38 = *(id *)(a1 + 48);
          id v39 = [v38 countByEnumeratingWithState:&v64 objects:v69 count:16];
          if (v39)
          {
            id v40 = v39;
            uint64_t v41 = *(void *)v65;
            do
            {
              for (i = 0; i != v40; i = (char *)i + 1)
              {
                if (*(void *)v65 != v41) {
                  objc_enumerationMutation(v38);
                }
                uint64_t v43 = *(void *)(*((void *)&v64 + 1) + 8 * i);
                if (objc_msgSend(v37, "containsObject:", v43, v61, v63, (void)v64))
                {
                  v44 = [*(id *)(a1 + 48) objectForKeyedSubscript:v43];
                  [v36 setObject:v44 forKeyedSubscript:v43];
                }
              }
              id v40 = [v38 countByEnumeratingWithState:&v64 objects:v69 count:16];
            }
            while (v40);
          }

          if ([v36 count])
          {
            sub_10002221C(*(const __CFDictionary **)(a1 + 40));
            v45 = (__CFString *)objc_claimAutoreleasedReturnValue();
            if (v45)
            {
              _CFPreferencesWriteUserPreferencesWithCorrectOwner();
              CFPreferencesSetMultiple((CFDictionaryRef)v36, 0, kCFPreferencesAnyApplication, v45, kCFPreferencesAnyHost);
              v3 = &kUMUserSessionShortNameKey;
            }
            else
            {
              v3 = &kUMUserSessionShortNameKey;
              if (qword_1000E3FD8 != -1) {
                dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
              }
              v50 = (id)qword_1000E3FD0;
              if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v70 = 0;
                unsigned int v51 = sub_100055404(1);
                if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v52 = v51;
                }
                else {
                  unsigned int v52 = v51 & 0xFFFFFFFE;
                }
                if (v52)
                {
                  LOWORD(v68[0]) = 0;
                  v53 = (const char *)_os_log_send_and_compose_impl();
                  v54 = (char *)v53;
                  if (v53) {
                    sub_100055434(v53);
                  }
                }
                else
                {
                  v54 = 0;
                }
                free(v54);
              }
            }
          }
          else
          {
            v3 = &kUMUserSessionShortNameKey;
            if (qword_1000E3FD8 != -1) {
              dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
            }
            v45 = (__CFString *)(id)qword_1000E3FD0;
            if (os_log_type_enabled((os_log_t)v45, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v70 = 0;
              unsigned int v46 = sub_100055404(1);
              if (os_log_type_enabled((os_log_t)v45, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v47 = v46;
              }
              else {
                unsigned int v47 = v46 & 0xFFFFFFFE;
              }
              if (v47)
              {
                LOWORD(v68[0]) = 0;
                v48 = (const char *)_os_log_send_and_compose_impl();
                v49 = (char *)v48;
                if (v48) {
                  sub_100055434(v48);
                }
              }
              else
              {
                v49 = 0;
              }
              free(v49);
            }
          }
        }
        if (qword_1000E3FD8 != -1) {
          dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
        }
        v55 = v3[506];
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v70 = 0;
          unsigned int v56 = sub_100055404(1);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v57 = v56;
          }
          else {
            unsigned int v57 = v56 & 0xFFFFFFFE;
          }
          if (v57)
          {
            LOWORD(v68[0]) = 0;
            v58 = (const char *)_os_log_send_and_compose_impl();
            v59 = (char *)v58;
            if (v58) {
              sub_100055434(v58);
            }
          }
          else
          {
            v59 = 0;
          }
          free(v59);
        }

        sub_10002ED18(*(const __CFDictionary **)(a1 + 40), *(void *)(a1 + 56), *(const __CFData **)(a1 + 64));
        uint64_t v9 = 0;
      }
    }
    else
    {
      v29(v28, 0);
    }
    goto LABEL_116;
  }
  if (qword_1000E3FE8 != -1) {
    dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
  }
  unsigned int v15 = (id)qword_1000E3FE0;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    uint64_t v70 = 0;
    unsigned int v16 = sub_100055404(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = v16 & 0xFFFFFFFE;
    }
    if (v17)
    {
      LOWORD(v68[0]) = 0;
      v18 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v19 = (char *)v18;
      if (v18) {
        sub_100055434(v18);
      }
    }
    else
    {
      unsigned int v19 = 0;
    }
    free(v19);
  }

  uint64_t v35 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:37 userInfo:0];

  uint64_t v9 = (void *)v35;
LABEL_116:
}

void sub_100007230(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      LOWORD(v31[0]) = 0;
      LODWORD(v30) = 2;
      uint64_t v29 = v31;
      unsigned int v6 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v7 = (char *)v6;
      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    free(v7);
  }

  if ([v2 hasEntitlement:@"com.apple.mkb.usersession.loginwindow"])
  {
    int v8 = 0;
  }
  else
  {
    int v8 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:1 userInfo:0];
  }
  if (objc_msgSend(*(id *)(a1 + 32), "inLogoutProcess", v29, v30) && dword_1000E42C8 != 1)
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v9 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = sub_100055404(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        v31[0] = 67109120;
        v31[1] = dword_1000E42C8;
        unsigned int v12 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v13 = (char *)v12;
        if (v12) {
          sub_100055434(v12);
        }
      }
      else
      {
        unsigned int v13 = 0;
      }
      free(v13);
    }

    uint64_t v19 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:16 userInfo:0];

    int v8 = (void *)v19;
    goto LABEL_39;
  }
  if (!sub_10001C514())
  {
LABEL_39:
    int v20 = sub_10001D20C();
    uint64_t v21 = *(void *)(a1 + 40);
    int v22 = *(void (**)(uint64_t, void *))(v21 + 16);
    if (v20 == 502)
    {
      v22(v21, 0);
    }
    else
    {
      v22(v21, v8);
      if (!v8)
      {
        if (qword_1000E3FD8 != -1) {
          dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
        }
        unsigned __int8 v23 = (id)qword_1000E3FD0;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v24 = sub_100055404(1);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v25 = v24;
          }
          else {
            unsigned int v25 = v24 & 0xFFFFFFFE;
          }
          if (v25)
          {
            LOWORD(v31[0]) = 0;
            int v26 = (const char *)_os_log_send_and_compose_impl();
            int v27 = (char *)v26;
            if (v26) {
              sub_100055434(v26);
            }
          }
          else
          {
            int v27 = 0;
          }
          free(v27);
        }

        sub_10002F3BC();
        int v8 = 0;
      }
    }
    goto LABEL_57;
  }
  if (qword_1000E3FE8 != -1) {
    dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
  }
  unsigned int v14 = (id)qword_1000E3FE0;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    unsigned int v15 = sub_100055404(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      unsigned int v16 = v15;
    }
    else {
      unsigned int v16 = v15 & 0xFFFFFFFE;
    }
    if (v16)
    {
      LOWORD(v31[0]) = 0;
      unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
      v18 = (char *)v17;
      if (v17) {
        sub_100055434(v17);
      }
    }
    else
    {
      v18 = 0;
    }
    free(v18);
  }

  uint64_t v28 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:37 userInfo:0];

  int v8 = (void *)v28;
LABEL_57:
}

void sub_1000077B4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      LOWORD(v39) = 0;
      LODWORD(v38) = 2;
      uint64_t v37 = &v39;
      unsigned int v6 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v7 = (char *)v6;
      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    free(v7);
  }

  if (![v2 hasEntitlement:@"com.apple.mkb.usersession.loginwindow"])
  {
    uint64_t v14 = 1;
    goto LABEL_37;
  }
  if (([*(id *)(a1 + 32) inLogoutProcess] & 1) != 0
    || sub_10001D20C() == 502)
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    int v8 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = sub_100055404(1);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        v9 &= ~1u;
      }
      if (v9)
      {
        unsigned int v10 = *(void **)(a1 + 32);
        unsigned int v11 = v8;
        unsigned int v12 = [v10 inLogoutProcess];
        int v39 = 67109120;
        int v40 = v12;
        LODWORD(v38) = 8;
        uint64_t v37 = &v39;
        unsigned int v13 = (char *)_os_log_send_and_compose_impl();

        if (v13) {
          sub_100055434(v13);
        }
      }
      else
      {
        unsigned int v13 = 0;
      }
      free(v13);
    }

    uint64_t v14 = 16;
LABEL_37:
    int v20 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v14, 0, v37, v38);
    if (v20) {
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  if (!sub_10001C514())
  {
LABEL_38:
    if (sub_10001D20C() != 502)
    {
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      int v22 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v23 = sub_100055404(1);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v24 = v23;
        }
        else {
          unsigned int v24 = v23 & 0xFFFFFFFE;
        }
        if (v24)
        {
          LOWORD(v39) = 0;
          unsigned int v25 = (const char *)_os_log_send_and_compose_impl();
          int v26 = (char *)v25;
          if (v25) {
            sub_100055434(v25);
          }
        }
        else
        {
          int v26 = 0;
        }
        free(v26);
      }

      if (sub_10002F40C())
      {
        if (qword_1000E3FD8 != -1) {
          dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
        }
        int v27 = (id)qword_1000E3FD0;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v28 = sub_100055404(1);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v29 = v28;
          }
          else {
            unsigned int v29 = v28 & 0xFFFFFFFE;
          }
          if (v29)
          {
            int v39 = 67109120;
            int v40 = dword_1000E42C8;
            uint64_t v30 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v31 = (char *)v30;
            if (v30) {
              sub_100055434(v30);
            }
          }
          else
          {
            unsigned int v31 = 0;
          }
          free(v31);
        }

        int v20 = 0;
      }
      else
      {
        if (qword_1000E3FD8 != -1) {
          dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
        }
        unsigned int v32 = (id)qword_1000E3FD0;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v33 = sub_100055404(1);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v34 = v33;
          }
          else {
            unsigned int v34 = v33 & 0xFFFFFFFE;
          }
          if (v34)
          {
            int v39 = 67109120;
            int v40 = dword_1000E42C8;
            uint64_t v35 = (const char *)_os_log_send_and_compose_impl();
            uint64_t v36 = (char *)v35;
            if (v35) {
              sub_100055434(v35);
            }
          }
          else
          {
            uint64_t v36 = 0;
          }
          free(v36);
        }

        int v20 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
      }
      uint64_t v21 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
      goto LABEL_78;
    }
    int v20 = 0;
LABEL_40:
    uint64_t v21 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
LABEL_78:
    v21();
    goto LABEL_79;
  }
  if (qword_1000E3FE8 != -1) {
    dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
  }
  unsigned int v15 = (id)qword_1000E3FE0;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    unsigned int v16 = sub_100055404(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = v16 & 0xFFFFFFFE;
    }
    if (v17)
    {
      LOWORD(v39) = 0;
      v18 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v19 = (char *)v18;
      if (v18) {
        sub_100055434(v18);
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    free(v19);
  }

  int v20 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:37 userInfo:0];
LABEL_79:
}

void sub_100008320(uint64_t a1)
{
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  id v2 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      unsigned int v5 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  if ([*(id *)(a1 + 32) inLogoutProcess])
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v7 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9)
      {
        unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
      }
      else
      {
        unsigned int v11 = 0;
      }
      free(v11);
    }

    +[NSError errorWithDomain:NSPOSIXErrorDomain code:16 userInfo:0];
  }
  else
  {
    sub_10002A8A0();
  }
}

void sub_1000085DC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v46 = 0;
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      LOWORD(v45) = 0;
      LODWORD(v44) = 2;
      uint64_t v43 = &v45;
      unsigned int v6 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v7 = (char *)v6;
      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    free(v7);
  }

  if ([v2 hasEntitlement:@"com.apple.mkb.usersession.loginwindow"])
  {
    unsigned int v8 = sub_100018600(qword_1000E4318);
    if (sub_1000192C0((uint64_t)v8))
    {
      unsigned int v9 = sub_100018600(qword_1000E4318);
      int v10 = sub_10001935C((uint64_t)v9);

      if (v10 == 502)
      {
        if (qword_1000E3FD8 != -1) {
          dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
        }
        unsigned int v11 = (id)qword_1000E3FD0;
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_78;
        }
        uint64_t v46 = 0;
        unsigned int v12 = sub_100055404(1);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v13 = v12;
        }
        else {
          unsigned int v13 = v12 & 0xFFFFFFFE;
        }
        if (v13)
        {
          LOWORD(v45) = 0;
          goto LABEL_74;
        }
LABEL_76:
        uint64_t v36 = 0;
LABEL_77:
        free(v36);
        goto LABEL_78;
      }
    }
    else
    {
    }
    if (objc_msgSend(*(id *)(a1 + 32), "inLoginSession", v43, v44))
    {
      int v19 = dword_1000E42CC;
      dword_1000E42CC = 1;
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      int v20 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v45 = 0;
        unsigned int v21 = sub_100055404(1);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v22 = v21;
        }
        else {
          unsigned int v22 = v21 & 0xFFFFFFFE;
        }
        if (v22)
        {
          LODWORD(v46) = 67109376;
          HIDWORD(v46) = v19;
          __int16 v47 = 1024;
          int v48 = dword_1000E42CC;
          unsigned int v23 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v24 = (char *)v23;
          if (v23) {
            sub_100055434(v23);
          }
        }
        else
        {
          unsigned int v24 = 0;
        }
        free(v24);
      }

      sub_10001A7BC();
      if (v19 == dword_1000E42CC)
      {
        if (qword_1000E3FD8 != -1) {
          dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
        }
        unsigned int v28 = (id)qword_1000E3FD0;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v46 = 0;
          unsigned int v29 = sub_100055404(1);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v30 = v29;
          }
          else {
            unsigned int v30 = v29 & 0xFFFFFFFE;
          }
          if (v30)
          {
            LOWORD(v45) = 0;
            unsigned int v31 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v32 = (char *)v31;
            if (v31) {
              sub_100055434(v31);
            }
          }
          else
          {
            unsigned int v32 = 0;
          }
          free(v32);
        }

        CFDictionaryRef v37 = (const __CFDictionary *)sub_100019B40(502);
        if (qword_1000E3FD8 != -1) {
          dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
        }
        uint64_t v38 = (id)qword_1000E3FD0;
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v46 = 0;
          unsigned int v39 = sub_100055404(1);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v40 = v39;
          }
          else {
            unsigned int v40 = v39 & 0xFFFFFFFE;
          }
          if (v40)
          {
            LOWORD(v45) = 0;
            uint64_t v41 = (const char *)_os_log_send_and_compose_impl();
            v42 = (char *)v41;
            if (v41) {
              sub_100055434(v41);
            }
          }
          else
          {
            v42 = 0;
          }
          free(v42);
        }

        sub_10002F4A8(v37, 0);
        goto LABEL_79;
      }
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      unsigned int v11 = (id)qword_1000E3FD0;
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
LABEL_78:

LABEL_79:
        int v27 = 0;
        goto LABEL_80;
      }
      uint64_t v46 = 0;
      unsigned int v33 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v34 = v33;
      }
      else {
        unsigned int v34 = v33 & 0xFFFFFFFE;
      }
      if (!v34) {
        goto LABEL_76;
      }
      LOWORD(v45) = 0;
    }
    else
    {
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      unsigned int v11 = (id)qword_1000E3FD0;
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_78;
      }
      uint64_t v46 = 0;
      unsigned int v25 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v26 = v25;
      }
      else {
        unsigned int v26 = v25 & 0xFFFFFFFE;
      }
      if (!v26) {
        goto LABEL_76;
      }
      LOWORD(v45) = 0;
    }
LABEL_74:
    uint64_t v35 = (const char *)_os_log_send_and_compose_impl();
    uint64_t v36 = (char *)v35;
    if (v35) {
      sub_100055434(v35);
    }
    goto LABEL_77;
  }
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  uint64_t v14 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v46 = 0;
    unsigned int v15 = sub_100055404(1);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v16 = v15;
    }
    else {
      unsigned int v16 = v15 & 0xFFFFFFFE;
    }
    if (v16)
    {
      LOWORD(v45) = 0;
      unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
      v18 = (char *)v17;
      if (v17) {
        sub_100055434(v17);
      }
    }
    else
    {
      v18 = 0;
    }
    free(v18);
  }

  int v27 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:1 userInfo:0];
LABEL_80:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100008DF4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  if (!v2) {
    goto LABEL_35;
  }
  unsigned int v3 = sub_1000186EC(qword_1000E4318);
  unsigned int v4 = [v3 pathForPID:*(unsigned int *)(a1 + 48) error:0];

  if (qword_1000E3FE8 != -1) {
    dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
  }
  unsigned int v5 = (id)qword_1000E3FE0;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = 0;
    unsigned int v6 = sub_100055404(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = v6 & 0xFFFFFFFE;
    }
    if (v7)
    {
      int v8 = *(_DWORD *)(a1 + 48);
      LODWORD(v24) = 67109378;
      HIDWORD(v24) = v8;
      __int16 v25 = 2114;
      unsigned int v26 = v4;
      LODWORD(v23) = 18;
      unsigned int v22 = &v24;
      unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
      int v10 = (char *)v9;
      if (v9) {
        sub_100055434(v9);
      }
    }
    else
    {
      int v10 = 0;
    }
    free(v10);
  }

  if ([v2 hasEntitlement:@"com.apple.mobile.keybagd.UserManager.bubblepop"])
  {
    if (![*(id *)(a1 + 32) switchState])
    {
      unsigned int v12 = 0;
      goto LABEL_18;
    }
    uint64_t v11 = 16;
  }
  else
  {
    uint64_t v11 = 1;
  }
  unsigned int v12 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v11, 0, v22, v23);
LABEL_18:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  if (!v12)
  {
    [v2 setBubblePopstakeholderIsRegistered:1];
    [v2 setSwitchStakeHolderKind:3];
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v13 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = 0;
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        int v16 = *(_DWORD *)(a1 + 48);
        LODWORD(v27) = 67109120;
        HIDWORD(v27) = v16;
        unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
        v18 = (char *)v17;
        if (v17) {
          sub_100055434(v17);
        }
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

    int v19 = [*(id *)(a1 + 32) bubbleStakeHolder];

    int v20 = *(void **)(a1 + 32);
    if (v19)
    {
      unsigned int v21 = [v20 bubbleStakeHolder];
      [v21 bubbleShouldPop];
    }
    else
    {
      [v20 _broadcastBubbleDidPop];
    }
  }

LABEL_35:
}

void sub_1000091E8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  unsigned int v3 = sub_1000186EC(qword_1000E4318);
  unsigned int v4 = [v3 pathForPID:*(unsigned int *)(a1 + 48) error:0];

  if (qword_1000E3FE8 != -1) {
    dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
  }
  unsigned int v5 = (id)qword_1000E3FE0;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = sub_100055404(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = v6 & 0xFFFFFFFE;
    }
    if (v7)
    {
      int v8 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v9 = (char *)v8;
      if (v8) {
        sub_100055434(v8);
      }
    }
    else
    {
      unsigned int v9 = 0;
    }
    free(v9);
  }

  if (v2)
  {
    [v2 setBubblePopstakeholderIsRegistered:0];
    sub_10001BEC4();
  }
  (*(void (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0);
}

void sub_100009460(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  [v2 setBubbleStakeHolder:1];
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      unsigned int v6 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v7 = (char *)v6;
      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    free(v7);
  }

  int v8 = sub_1000317BC(*(_DWORD *)(a1 + 52));
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v9 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = sub_100055404(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = v10 & 0xFFFFFFFE;
    }
    if (v11)
    {
      unsigned int v12 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v13 = (char *)v12;
      if (v12) {
        sub_100055434(v12);
      }
    }
    else
    {
      unsigned int v13 = 0;
    }
    free(v13);
  }

  (*(void (**)(void, void *))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v8);
}

void sub_100009774(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  [v2 setBubbleStakeHolder:1];
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      unsigned int v6 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v7 = (char *)v6;
      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    free(v7);
  }

  sub_100035D60(*(_DWORD *)(a1 + 52), *(const __CFString **)(a1 + 40));
}

void sub_100009920(uint64_t a1)
{
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  id v2 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      int v5 = *(_DWORD *)(a1 + 48);
      v10[0] = 67109120;
      v10[1] = v5;
      LODWORD(v9) = 8;
      int v8 = v10;
      unsigned int v6 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v7 = (char *)v6;
      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    free(v7);
  }

  sub_10002D1BC(*(unsigned int *)(a1 + 48), 1);
  if (*(void *)(a1 + 40) == 1) {
    sub_10001DCD4(*(_DWORD *)(a1 + 48));
  }
  [*(id *)(a1 + 32) _broadcastBubbleDidPop:v8, v9];
  sub_10001BEC4();
}

void sub_100009A94(id a1, RDClient *a2, BOOL *a3)
{
  unsigned int v3 = a2;
  if ([(RDClient *)v3 bubblePopstakeholderIsRegistered]) {
    [(RDClient *)v3 bubbleDidPop];
  }
}

void sub_10000A738(uint64_t a1)
{
  if (qword_1000E3FE8 != -1) {
    dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
  }
  id v2 = (id)qword_1000E3FE0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = sub_100055404(0);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      v3 &= ~1u;
    }
    if (v3)
    {
      unsigned int v4 = *(void **)(a1 + 32);
      int v5 = v2;
      v18 = [v4 logoutTimer];
      unsigned int v6 = (char *)_os_log_send_and_compose_impl();

      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  unsigned int v7 = [*(id *)(a1 + 32) logoutTimer];
  dispatch_source_cancel(v7);

  [*(id *)(a1 + 32) setLogoutTimer:0];
  if ([*(id *)(a1 + 32) switchState] == 1
    && [*(id *)(a1 + 32) switchState] != 2)
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v13 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        int v16 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v17 = (char *)v16;
        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {
        unsigned int v17 = 0;
      }
      free(v17);
    }

    [*(id *)(a1 + 32) _reallySwitchUser:0];
  }
  else
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    int v8 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = sub_100055404(1);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        v9 &= ~1u;
      }
      if (v9)
      {
        unsigned int v10 = *(void **)(a1 + 32);
        unsigned int v11 = v8;
        [v10 switchState];
        unsigned int v12 = (char *)_os_log_send_and_compose_impl();

        if (v12) {
          sub_100055434(v12);
        }
      }
      else
      {
        unsigned int v12 = 0;
      }
      free(v12);
    }
  }
}

void sub_10000AABC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 stakeholderIsRegistered])
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10000AB50;
    v5[3] = &unk_1000D4F98;
    uint64_t v4 = *(void *)(a1 + 32);
    v5[4] = *(void *)(a1 + 40);
    [v3 willSwitchToUser:v4 completionHandler:v5];
  }
}

void sub_10000AB50(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000ABD0;
  block[3] = &unk_1000D4F98;
  block[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)qword_1000E4320, block);
}

id sub_10000ABD0(uint64_t a1)
{
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  id v2 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      int v5 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  return [*(id *)(a1 + 32) _checkIfWeShouldSwitchUser:0];
}

void sub_10000B4B4(uint64_t a1)
{
  if (qword_1000E3FE8 != -1) {
    dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
  }
  id v2 = (id)qword_1000E3FE0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = sub_100055404(0);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      v3 &= ~1u;
    }
    if (v3)
    {
      unsigned int v4 = *(void **)(a1 + 32);
      int v5 = v2;
      v18 = [v4 logoutTimer];
      unsigned int v6 = (char *)_os_log_send_and_compose_impl();

      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  unsigned int v7 = [*(id *)(a1 + 32) logoutTimer];
  dispatch_source_cancel(v7);

  [*(id *)(a1 + 32) setLogoutTimer:0];
  if ([*(id *)(a1 + 32) switchState] == 1)
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    int v8 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v9 = sub_100055404(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v10 = v9;
      }
      else {
        unsigned int v10 = v9 & 0xFFFFFFFE;
      }
      if (v10)
      {
        unsigned int v11 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v12 = (char *)v11;
        if (v11) {
          sub_100055434(v11);
        }
      }
      else
      {
        unsigned int v12 = 0;
      }
      free(v12);
    }

    [*(id *)(a1 + 32) _reallySwitchUser:1];
  }
  else
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v13 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        int v16 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v17 = (char *)v16;
        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {
        unsigned int v17 = 0;
      }
      free(v17);
    }
  }
}

void sub_10000B7F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 stakeholderIsRegistered])
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10000B88C;
    v5[3] = &unk_1000D4F98;
    uint64_t v4 = *(void *)(a1 + 32);
    v5[4] = *(void *)(a1 + 40);
    [v3 willSwitchToUser:v4 completionHandler:v5];
  }
}

void sub_10000B88C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000B90C;
  block[3] = &unk_1000D4F98;
  block[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)qword_1000E4320, block);
}

id sub_10000B90C(uint64_t a1)
{
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  id v2 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      int v5 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  return [*(id *)(a1 + 32) _checkIfWeShouldSwitchUser:1];
}

void sub_10000BDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000BDE8(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  unsigned int v6 = sub_1000186EC(qword_1000E4318);
  unsigned int v7 = [v6 pathForPID:[v5 pid]];

  if ([v5 stakeholderIsRegistered]
    && (([v5 hasUserSwitchTasks] & 1) != 0
     || ([v5 wasToldWillSwitchUser] & 1) == 0))
  {
    if (qword_1000E3FE8 != -1) {
      dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
    }
    unsigned int v13 = (id)qword_1000E3FE0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = sub_100055404(0);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        int v16 = v13;
        [v5 stakeholderIsRegistered];
        [v5 wasToldWillSwitchUser];
        [v5 hasUserSwitchTasks];
        [v5 pid];
        unsigned int v17 = (char *)_os_log_send_and_compose_impl();

        if (v17) {
          sub_100055434(v17);
        }
      }
      else
      {
        unsigned int v17 = 0;
      }
      free(v17);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    *a3 = 1;
  }
  else
  {
    if (qword_1000E3FE8 != -1) {
      dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
    }
    int v8 = (id)qword_1000E3FE0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v9 = sub_100055404(0);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v10 = v9;
      }
      else {
        unsigned int v10 = v9 & 0xFFFFFFFE;
      }
      if (v10)
      {
        unsigned int v11 = v8;
        [v5 stakeholderIsRegistered];
        [v5 wasToldWillSwitchUser];
        [v5 hasUserSwitchTasks];
        [v5 pid];
        unsigned int v12 = (char *)_os_log_send_and_compose_impl();

        if (v12) {
          sub_100055434(v12);
        }
      }
      else
      {
        unsigned int v12 = 0;
      }
      free(v12);
    }
  }
}

void sub_10000CF74(id a1, RDClient *a2, BOOL *a3)
{
  unsigned int v4 = a2;
  id v5 = [(RDClient *)v4 machServiceName];

  if (v5)
  {
    unsigned int v6 = [(RDClient *)v4 userSyncTasks];
    id v7 = [v6 count];

    if (v7)
    {
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      int v8 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = sub_100055404(1);
        if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
          v9 &= ~1u;
        }
        if (v9)
        {
          unsigned int v10 = v8;
          unsigned int v11 = [(RDClient *)v4 machServiceName];
          unsigned int v12 = [(RDClient *)v4 userSyncTasks];
          int v29 = 138412546;
          *(void *)unsigned int v30 = v11;
          *(_WORD *)&v30[8] = 2112;
          *(void *)&v30[10] = v12;
          LODWORD(v28) = 22;
          uint64_t v27 = &v29;
          unsigned int v13 = (char *)_os_log_send_and_compose_impl();

          if (v13) {
            sub_100055434(v13);
          }
        }
        else
        {
          unsigned int v13 = 0;
        }
        free(v13);
      }

      int v19 = [(RDClient *)v4 machServiceName];
      sub_100034CF4(v19);
    }
    else
    {
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      unsigned int v14 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = sub_100055404(1);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          v15 &= ~1u;
        }
        if (v15)
        {
          int v16 = v14;
          unsigned int v17 = [(RDClient *)v4 machServiceName];
          int v29 = 138412290;
          *(void *)unsigned int v30 = v17;
          LODWORD(v28) = 12;
          uint64_t v27 = &v29;
          v18 = (char *)_os_log_send_and_compose_impl();

          if (v18) {
            sub_100055434(v18);
          }
        }
        else
        {
          v18 = 0;
        }
        free(v18);
      }

      int v19 = [(RDClient *)v4 machServiceName];
      sub_10003578C(v19);
    }

    sub_10002AA78();
  }
  if ([(RDClient *)v4 stakeholderIsRegistered]
    && [(RDClient *)v4 hasUserSwitchTasks]
    && [(RDClient *)v4 wasToldWillSwitchUser])
  {
    int v20 = sub_1000186EC(qword_1000E4318);
    unsigned int v21 = [v20 pathForPID:-[RDClient pid](v4, "pid")];

    if (qword_1000E3FE8 != -1) {
      dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
    }
    unsigned int v22 = (id)qword_1000E3FE0;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = sub_100055404(0);
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
        v23 &= ~1u;
      }
      if (v23)
      {
        uint64_t v24 = v22;
        unsigned int v25 = [(RDClient *)v4 pid];
        int v29 = 67109378;
        *(_DWORD *)unsigned int v30 = v25;
        *(_WORD *)&v30[4] = 2114;
        *(void *)&v30[6] = v21;
        unsigned int v26 = (char *)_os_log_send_and_compose_impl();

        if (v26) {
          sub_100055434(v26);
        }
      }
      else
      {
        unsigned int v26 = 0;
      }
      free(v26);
    }

    *a3 = 0;
  }
}

void sub_10000D3D0(uint64_t a1)
{
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  id v2 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v35[0] = 0;
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      LOWORD(v34) = 0;
      id v5 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  id v7 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v35[0] = 0;
    unsigned int v8 = sub_100055404(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v9 = v8;
    }
    else {
      unsigned int v9 = v8 & 0xFFFFFFFE;
    }
    if (v9)
    {
      LOWORD(v34) = 0;
      unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v11 = (char *)v10;
      if (v10) {
        sub_100055434(v10);
      }
    }
    else
    {
      unsigned int v11 = 0;
    }
    free(v11);
  }

  [*(id *)(a1 + 32) setSwitchState:0];
  dword_1000E42C8 = 1;
  sub_10001A7BC();
  [*(id *)(a1 + 32) _broadcastDeviceLoginSessionStateDidUpdate];
  unsigned int v12 = [*(id *)(a1 + 32) fastLogoutTimer];

  if (v12)
  {
    if (qword_1000E3FE8 != -1) {
      dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
    }
    unsigned int v13 = (id)qword_1000E3FE0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = 0;
      int v14 = sub_100055404(0);
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        v14 &= ~1u;
      }
      if (v14)
      {
        int v15 = *(void **)(a1 + 32);
        int v16 = v13;
        [v15 fastLogoutTimer];
        *(void *)((char *)v35 + 4) = LODWORD(v35[0]) = 134217984;
        unsigned int v17 = (char *)_os_log_send_and_compose_impl();

        if (v17) {
          sub_100055434(v17);
        }
      }
      else
      {
        unsigned int v17 = 0;
      }
      free(v17);
    }
  }
  else
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    v18 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v35[0] = 0;
      unsigned int v19 = sub_100055404(1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v20 = v19;
      }
      else {
        unsigned int v20 = v19 & 0xFFFFFFFE;
      }
      if (v20)
      {
        LOWORD(v34) = 0;
        unsigned int v21 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v22 = (char *)v21;
        if (v21) {
          sub_100055434(v21);
        }
      }
      else
      {
        unsigned int v22 = 0;
      }
      free(v22);
    }

    dispatch_source_t v23 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)qword_1000E4320);
    [*(id *)(a1 + 32) setFastLogoutTimer:v23];

    if (qword_1000E3FE8 != -1) {
      dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
    }
    uint64_t v24 = (id)qword_1000E3FE0;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = 0;
      int v25 = sub_100055404(0);
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
        v25 &= ~1u;
      }
      if (v25)
      {
        unsigned int v26 = *(void **)(a1 + 32);
        uint64_t v27 = v24;
        [v26 fastLogoutTimer];
        *(void *)((char *)v35 + 4) = LODWORD(v35[0]) = 134217984;
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();

        if (v28) {
          sub_100055434(v28);
        }
      }
      else
      {
        uint64_t v28 = 0;
      }
      free(v28);
    }

    int v29 = [*(id *)(a1 + 32) fastLogoutTimer];
    dispatch_time_t v30 = dispatch_time(0, 300000000000);
    dispatch_source_set_timer(v29, v30, 0xFFFFFFFFFFFFFFFFLL, 0);

    unsigned int v31 = [*(id *)(a1 + 32) fastLogoutTimer];
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10000D9D0;
    handler[3] = &unk_1000D4F98;
    handler[4] = *(void *)(a1 + 32);
    dispatch_source_set_event_handler(v31, handler);

    unsigned int v32 = [*(id *)(a1 + 32) fastLogoutTimer];
    dispatch_activate(v32);
  }
}

void sub_10000D9D0(uint64_t a1)
{
  if (qword_1000E3FE8 != -1) {
    dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
  }
  id v2 = (id)qword_1000E3FE0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = sub_100055404(0);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      v3 &= ~1u;
    }
    if (v3)
    {
      unsigned int v4 = *(void **)(a1 + 32);
      id v5 = v2;
      unsigned int v22 = [v4 fastLogoutTimer];
      unsigned int v6 = (char *)_os_log_send_and_compose_impl();

      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  id v7 = [*(id *)(a1 + 32) fastLogoutTimer];
  dispatch_source_cancel(v7);

  [*(id *)(a1 + 32) setFastLogoutTimer:0];
  if (![*(id *)(a1 + 32) switchState])
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v13 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        int v16 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v17 = (char *)v16;
        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {
        unsigned int v17 = 0;
      }
      free(v17);
    }

    if (sub_10002F3BC() == 1)
    {
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      unsigned int v8 = (id)qword_1000E3FD0;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_51;
      }
      unsigned int v18 = sub_100055404(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v19 = v18;
      }
      else {
        unsigned int v19 = v18 & 0xFFFFFFFE;
      }
      if (!v19) {
        goto LABEL_49;
      }
    }
    else
    {
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      unsigned int v8 = (id)qword_1000E3FD0;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_51;
      }
      unsigned int v20 = sub_100055404(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = v20 & 0xFFFFFFFE;
      }
      if (!v21) {
        goto LABEL_49;
      }
    }
    unsigned int v12 = (void *)_os_log_send_and_compose_impl();
    if (!v12)
    {
LABEL_50:
      free(v12);
      goto LABEL_51;
    }
LABEL_48:
    sub_100055434((const char *)v12);
    goto LABEL_50;
  }
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v8 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = sub_100055404(1);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      v9 &= ~1u;
    }
    if (v9)
    {
      unsigned int v10 = *(void **)(a1 + 32);
      unsigned int v11 = v8;
      [v10 switchState];
      unsigned int v12 = (void *)_os_log_send_and_compose_impl();

      if (!v12) {
        goto LABEL_50;
      }
      goto LABEL_48;
    }
LABEL_49:
    unsigned int v12 = 0;
    goto LABEL_50;
  }
LABEL_51:
}

uint64_t sub_10000DE6C(uint64_t a1)
{
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  id v2 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      id v5 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  CFDictionaryRef v7 = *(const __CFDictionary **)(a1 + 32);
  if (CFDictionaryContainsKey(v7, @"UserSwitchTaskOpqueData"))
  {
    Value = CFDictionaryGetValue(v7, @"UserSwitchTaskOpqueData");
    CFDataRef v9 = (const __CFData *)CFRetain(Value);
    CFDictionaryRemoveValue(v7, @"UserSwitchTaskOpqueData");
  }
  else
  {
    CFDataRef v9 = 0;
  }
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v10 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v11 = sub_100055404(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v12 = v11;
    }
    else {
      unsigned int v12 = v11 & 0xFFFFFFFE;
    }
    if (v12)
    {
      unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v14 = (char *)v13;
      if (v13) {
        sub_100055434(v13);
      }
    }
    else
    {
      unsigned int v14 = 0;
    }
    free(v14);
  }

  return sub_10002F4A8(v7, v9);
}

void sub_10000E174(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 56)];
  if (v2)
  {
    unsigned int v3 = sub_1000186EC(qword_1000E4318);
    unsigned int v4 = [v3 pathForPID:*(unsigned int *)(a1 + 56) error:0];

    if (qword_1000E3FE8 != -1) {
      dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
    }
    id v5 = (id)qword_1000E3FE0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v6 = sub_100055404(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
        unsigned int v8 = (const char *)_os_log_send_and_compose_impl();
        CFDataRef v9 = (char *)v8;
        if (v8) {
          sub_100055434(v8);
        }
      }
      else
      {
        CFDataRef v9 = 0;
      }
      free(v9);
    }

    [v2 addUserSwitchTask:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _broadcastUserSwitchTaskListDidUpdate];
    if (qword_1000E3FE8 != -1) {
      dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
    }
    unsigned int v10 = (id)qword_1000E3FE0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v11 = sub_100055404(0);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v12 = v11;
      }
      else {
        unsigned int v12 = v11 & 0xFFFFFFFE;
      }
      if (v12)
      {
        unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v14 = (char *)v13;
        if (v13) {
          sub_100055434(v13);
        }
      }
      else
      {
        unsigned int v14 = 0;
      }
      free(v14);
    }
  }
  uint64_t v15 = *(void *)(a1 + 48);
  if (v15) {
    (*(void (**)(uint64_t, void))(v15 + 16))(v15, 0);
  }
}

void sub_10000E50C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 56)];
  if (v2)
  {
    unsigned int v3 = sub_1000186EC(qword_1000E4318);
    unsigned int v4 = [v3 pathForPID:*(unsigned int *)(a1 + 56) error:0];

    if (qword_1000E3FE8 != -1) {
      dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
    }
    id v5 = (id)qword_1000E3FE0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = 0;
      unsigned int v6 = sub_100055404(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
        int v8 = *(_DWORD *)(a1 + 56);
        uint64_t v9 = *(void *)(a1 + 40);
        LODWORD(v27) = 67109634;
        HIDWORD(v27) = v8;
        __int16 v28 = 2114;
        int v29 = v4;
        __int16 v30 = 2112;
        uint64_t v31 = v9;
        LODWORD(v25) = 28;
        uint64_t v24 = &v27;
        unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
      }
      else
      {
        unsigned int v11 = 0;
      }
      free(v11);
    }

    if ([v2 removeUserSwitchTask:*(void *)(a1 + 40)])
    {
      [*(id *)(a1 + 32) _broadcastUserSwitchTaskListDidUpdate];
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      unsigned int v12 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = 0;
        unsigned int v13 = sub_100055404(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v14 = v13;
        }
        else {
          unsigned int v14 = v13 & 0xFFFFFFFE;
        }
        if (v14)
        {
          LOWORD(v26) = 0;
          LODWORD(v25) = 2;
          uint64_t v24 = &v26;
          uint64_t v15 = (const char *)_os_log_send_and_compose_impl();
          int v16 = (char *)v15;
          if (v15) {
            sub_100055434(v15);
          }
        }
        else
        {
          int v16 = 0;
        }
        free(v16);
      }

      [*(id *)(a1 + 32) _checkIfWeShouldSwitchUser:dword_1000E42C8 == 3, v24, v25, v26];
      if (qword_1000E3FE8 != -1) {
        dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
      }
      unsigned int v17 = (id)qword_1000E3FE0;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = 0;
        unsigned int v18 = sub_100055404(0);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v19 = v18;
        }
        else {
          unsigned int v19 = v18 & 0xFFFFFFFE;
        }
        if (v19)
        {
          int v20 = *(_DWORD *)(a1 + 56);
          LODWORD(v27) = 67109378;
          HIDWORD(v27) = v20;
          __int16 v28 = 2114;
          int v29 = v4;
          unsigned int v21 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v22 = (char *)v21;
          if (v21) {
            sub_100055434(v21);
          }
        }
        else
        {
          unsigned int v22 = 0;
        }
        free(v22);
      }
    }
  }
  uint64_t v23 = *(void *)(a1 + 48);
  if (v23) {
    (*(void (**)(uint64_t, void))(v23 + 16))(v23, 0);
  }
}

void sub_10000E8D0(id a1, RDClient *a2, BOOL *a3)
{
  unsigned int v3 = a2;
  if ([(RDClient *)v3 stakeholderIsRegistered]
    && [(RDClient *)v3 criticalStakeHolder])
  {
    [(RDClient *)v3 userSwitchTaskListDidUpdate];
  }
}

void sub_10000E930(id a1, RDClient *a2, BOOL *a3)
{
  unsigned int v3 = a2;
  if ([(RDClient *)v3 stakeholderIsRegistered]
    && [(RDClient *)v3 criticalStakeHolder])
  {
    [(RDClient *)v3 deviceLoginSessionStateDidUpdate];
  }
}

void sub_10000EA24(uint64_t a1)
{
  id v2 = objc_opt_new();
  unsigned int v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10000EAE0;
  v5[3] = &unk_1000D5100;
  id v6 = v2;
  id v4 = v2;
  [v3 _enumerateClientsWithBlock:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10000EAE0(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 userSwitchTasks];
  [v2 addObjectsFromArray:v3];
}

void sub_10000EBE4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 userSyncTasks];
  [v2 addObjectsFromArray:v3];
}

void sub_10000ECE8(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 userSwitchTasks];
  [v2 addObjectsFromArray:v3];
}

void sub_10000EE24(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 56)];
  id v3 = v2;
  if (v2)
  {
    id v4 = [v2 machServiceName];

    if (v4)
    {
      id v5 = sub_1000186EC(qword_1000E4318);
      id v6 = [v5 pathForPID:*(unsigned int *)(a1 + 56) error:0];

      if (qword_1000E3FE8 != -1) {
        dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
      }
      unsigned int v7 = (id)qword_1000E3FE0;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v8 = sub_100055404(0);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v9 = v8;
        }
        else {
          unsigned int v9 = v8 & 0xFFFFFFFE;
        }
        if (v9)
        {
          unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v11 = (char *)v10;
          if (v10) {
            sub_100055434(v10);
          }
        }
        else
        {
          unsigned int v11 = 0;
        }
        free(v11);
      }

      [v3 addUserSyncTask:*(void *)(a1 + 40)];
      unsigned int v12 = [v3 userSyncTasks];
      id v13 = [v12 count];

      if (v13 == (id)1)
      {
        if (qword_1000E3FD8 != -1) {
          dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
        }
        unsigned int v14 = (id)qword_1000E3FD0;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v15 = sub_100055404(1);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v16 = v15;
          }
          else {
            unsigned int v16 = v15 & 0xFFFFFFFE;
          }
          if (v16)
          {
            unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v18 = (char *)v17;
            if (v17) {
              sub_100055434(v17);
            }
          }
          else
          {
            unsigned int v18 = 0;
          }
          free(v18);
        }

        unsigned int v19 = [v3 machServiceName];
        sub_100034CF4(v19);
      }
    }
  }
  uint64_t v20 = *(void *)(a1 + 48);
  if (v20) {
    (*(void (**)(uint64_t, void))(v20 + 16))(v20, 0);
  }
}

void sub_10000F1EC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 56)];
  if (v2)
  {
    id v3 = sub_1000186EC(qword_1000E4318);
    id v4 = [v3 pathForPID:*(unsigned int *)(a1 + 56) error:0];

    if (qword_1000E3FE8 != -1) {
      dispatch_once(&qword_1000E3FE8, &stru_1000D5298);
    }
    id v5 = (id)qword_1000E3FE0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v6 = sub_100055404(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
        unsigned int v8 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v9 = (char *)v8;
        if (v8) {
          sub_100055434(v8);
        }
      }
      else
      {
        unsigned int v9 = 0;
      }
      free(v9);
    }

    [v2 removeUserSyncTask:*(void *)(a1 + 40)];
    unsigned int v10 = [v2 userSyncTasks];
    id v11 = [v10 count];

    if (!v11)
    {
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      unsigned int v12 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v13 = sub_100055404(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v14 = v13;
        }
        else {
          unsigned int v14 = v13 & 0xFFFFFFFE;
        }
        if (v14)
        {
          unsigned int v15 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v16 = (char *)v15;
          if (v15) {
            sub_100055434(v15);
          }
        }
        else
        {
          unsigned int v16 = 0;
        }
        free(v16);
      }

      unsigned int v17 = [v2 machServiceName];
      sub_10003578C(v17);
    }
  }
  uint64_t v18 = *(void *)(a1 + 48);
  if (v18) {
    (*(void (**)(uint64_t, void))(v18 + 16))(v18, 0);
  }
}

uint64_t sub_10000F560(uint64_t a1)
{
  +[NSError errorWithDomain:NSPOSIXErrorDomain code:45 userInfo:0];
  objc_claimAutoreleasedReturnValue();
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }

  return _objc_release_x1();
}

uint64_t sub_10000F678(uint64_t a1)
{
  +[NSError errorWithDomain:NSPOSIXErrorDomain code:45 userInfo:0];
  objc_claimAutoreleasedReturnValue();
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }

  return _objc_release_x1();
}

void sub_10000F978(uint64_t a1)
{
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  uint64_t v2 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)v85 = 0;
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      int v5 = *(_DWORD *)(a1 + 72);
      LODWORD(v81) = 67109120;
      HIDWORD(v81) = v5;
      LODWORD(v76) = 8;
      v75 = (unsigned int *)&v81;
      unsigned int v6 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v7 = (char *)v6;
      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    free(v7);
  }

  unsigned int v8 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 72)];
  unsigned int v9 = v8;
  if (v8) {
    unsigned __int8 v10 = [v8 hasEntitlement:@"com.apple.usermanagerd.persona.create"];
  }
  else {
    unsigned __int8 v10 = [*(id *)(a1 + 32) remoteProcessHasBooleanEntitlement:@"com.apple.usermanagerd.persona.create"];
  }
  if (v10)
  {
    if (*(void *)(a1 + 40))
    {
      if (*(void *)(a1 + 64) < 2uLL)
      {
        id v11 = *(id *)(a1 + 48);
        if (*(void *)(a1 + 64) != 1)
        {
LABEL_103:
          LODWORD(v78) = 0;
          unsigned int v79 = -1;
          id v51 = [*(id *)(a1 + 32) asidForClient:v9 withAuid:&v79 withPid:*(unsigned int *)(a1 + 72) withPid:v75 withPid:v76];
          if (qword_1000E3FD8 != -1) {
            dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
          }
          unsigned int v52 = (id)qword_1000E3FD0;
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v81 = 0;
            unsigned int v53 = sub_100055404(1);
            if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v54 = v53;
            }
            else {
              unsigned int v54 = v53 & 0xFFFFFFFE;
            }
            if (v54)
            {
              uint64_t v55 = *(void *)(a1 + 40);
              int v56 = *(_DWORD *)(a1 + 72);
              *(_DWORD *)v85 = 138412802;
              *(void *)&v85[4] = v55;
              *(_WORD *)&v85[12] = 1024;
              *(_DWORD *)&v85[14] = v56;
              *(_WORD *)&v85[18] = 1024;
              *(_DWORD *)&v85[20] = v51;
              unsigned int v57 = (const char *)_os_log_send_and_compose_impl();
              v58 = (char *)v57;
              if (v57) {
                sub_100055434(v57);
              }
            }
            else
            {
              v58 = 0;
            }
            free(v58);
          }

          v59 = sub_100046CF4((uint64_t)v51, v79, *(unsigned int *)(a1 + 76));
          uint64_t v60 = sub_100046F0C(*(void *)(a1 + 40), v11, v59, 1, (unsigned int *)&v78);
          v61 = (void *)v60;
          if (v60 || !v78)
          {
            if (v60)
            {
              if (qword_1000E3FD8 != -1) {
                dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
              }
              long long v67 = (id)qword_1000E3FD0;
              if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v81 = 0;
                unsigned int v68 = sub_100055404(1);
                if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v69 = v68;
                }
                else {
                  unsigned int v69 = v68 & 0xFFFFFFFE;
                }
                if (v69)
                {
                  *(_DWORD *)v85 = 138412290;
                  *(void *)&v85[4] = v61;
                  uint64_t v70 = (const char *)_os_log_send_and_compose_impl();
                  __int16 v71 = (char *)v70;
                  if (v70) {
                    sub_100055434(v70);
                  }
                }
                else
                {
                  __int16 v71 = 0;
                }
                free(v71);
              }

              [*(id *)(a1 + 32) _broadcastPersonaUpdates:v59 withAuid:v79];
            }
            uint64_t v74 = *(void *)(a1 + 56);
            if (v74) {
              (*(void (**)(uint64_t, void *, void))(v74 + 16))(v74, v61, 0);
            }
          }
          else
          {
            if (qword_1000E3FD8 != -1) {
              dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
            }
            uint64_t v62 = (id)qword_1000E3FD0;
            if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)v85 = 0;
              unsigned int v63 = sub_100055404(1);
              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v64 = v63;
              }
              else {
                unsigned int v64 = v63 & 0xFFFFFFFE;
              }
              if (v64)
              {
                LOWORD(v81) = 0;
                long long v65 = (const char *)_os_log_send_and_compose_impl();
                long long v66 = (char *)v65;
                if (v65) {
                  sub_100055434(v65);
                }
              }
              else
              {
                long long v66 = 0;
              }
              free(v66);
            }

            uint64_t v72 = *(void *)(a1 + 56);
            if (v72)
            {
              v73 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:(int)v78 userInfo:0];
              (*(void (**)(uint64_t, void, void *))(v72 + 16))(v72, 0, v73);
            }
          }

          goto LABEL_145;
        }
        *(void *)v85 = 0;
        *(void *)&v85[8] = v85;
        *(void *)&v85[16] = 0x3032000000;
        v86 = sub_1000106A4;
        v87 = sub_1000106B4;
        id v88 = 0;
        uint64_t v81 = 0;
        v82 = &v81;
        uint64_t v83 = 0x2020000000;
        int v84 = 0;
        unsigned int v12 = (__n128 *)ACMContextCreateWithExternalForm([*(id *)(a1 + 48) bytes], (uint64_t)[*(id *)(a1 + 48) length]);
        unsigned int v13 = v12;
        if (v12)
        {
          v77[0] = _NSConcreteStackBlock;
          v77[1] = 3221225472;
          v77[2] = sub_1000106BC;
          v77[3] = &unk_1000D5178;
          v77[4] = &v81;
          v77[5] = v85;
          ACMContextCredentialGetProperty(v12, 0xDu, 0x2BDu, (uint64_t)v77);
          int v14 = ACMContextDelete(v13, 0);
          if (v14)
          {
            if (qword_1000E3FD8 != -1) {
              dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
            }
            unsigned int v15 = (id)qword_1000E3FD0;
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v78 = 0;
              unsigned int v16 = sub_100055404(1);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v17 = v16;
              }
              else {
                unsigned int v17 = v16 & 0xFFFFFFFE;
              }
              if (v17)
              {
                unsigned int v79 = 67109120;
                int v80 = v14;
                LODWORD(v76) = 8;
                v75 = &v79;
                uint64_t v18 = (const char *)_os_log_send_and_compose_impl();
                unsigned int v19 = (char *)v18;
                if (v18) {
                  sub_100055434(v18);
                }
              }
              else
              {
                unsigned int v19 = 0;
              }
              free(v19);
            }
          }
          if (!*((_DWORD *)v82 + 6))
          {
            v49 = v11;
            LOBYTE(v50) = 1;
            id v11 = *(id *)(*(void *)&v85[8] + 40);
LABEL_101:

            goto LABEL_102;
          }
          if (qword_1000E3FD8 != -1) {
            dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
          }
          uint64_t v43 = (id)qword_1000E3FD0;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v78 = 0;
            unsigned int v44 = sub_100055404(1);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v45 = v44;
            }
            else {
              unsigned int v45 = v44 & 0xFFFFFFFE;
            }
            if (v45)
            {
              int v46 = *((_DWORD *)v82 + 6);
              unsigned int v79 = 67109120;
              int v80 = v46;
              LODWORD(v76) = 8;
              v75 = &v79;
              __int16 v47 = (const char *)_os_log_send_and_compose_impl();
              int v48 = (char *)v47;
              if (v47) {
                sub_100055434(v47);
              }
            }
            else
            {
              int v48 = 0;
            }
            free(v48);
          }

          uint64_t v50 = *(void *)(a1 + 56);
          if (v50)
          {
            v49 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
            (*(void (**)(uint64_t, void, void *))(v50 + 16))(v50, 0, v49);
LABEL_100:
            LOBYTE(v50) = 0;
            goto LABEL_101;
          }
        }
        else
        {
          if (qword_1000E3FD8 != -1) {
            dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
          }
          uint64_t v38 = (id)qword_1000E3FD0;
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v78 = 0;
            unsigned int v39 = sub_100055404(1);
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v40 = v39;
            }
            else {
              unsigned int v40 = v39 & 0xFFFFFFFE;
            }
            if (v40)
            {
              LOWORD(v79) = 0;
              LODWORD(v76) = 2;
              v75 = &v79;
              uint64_t v41 = (const char *)_os_log_send_and_compose_impl();
              v42 = (char *)v41;
              if (v41) {
                sub_100055434(v41);
              }
            }
            else
            {
              v42 = 0;
            }
            free(v42);
          }

          uint64_t v50 = *(void *)(a1 + 56);
          if (v50)
          {
            v49 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
            (*(void (**)(uint64_t, void, void *))(v50 + 16))(v50, 0, v49);
            goto LABEL_100;
          }
        }
LABEL_102:
        _Block_object_dispose(&v81, 8);
        _Block_object_dispose(v85, 8);

        if (v50) {
          goto LABEL_103;
        }
LABEL_145:

        goto LABEL_146;
      }
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      uint64_t v31 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)v85 = 0;
        unsigned int v32 = sub_100055404(1);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v33 = v32;
        }
        else {
          unsigned int v33 = v32 & 0xFFFFFFFE;
        }
        if (v33)
        {
          LOWORD(v81) = 0;
          uint64_t v34 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v35 = (char *)v34;
          if (v34) {
            sub_100055434(v34);
          }
        }
        else
        {
          uint64_t v35 = 0;
        }
        free(v35);
      }

      uint64_t v37 = *(void *)(a1 + 56);
      if (v37)
      {
LABEL_64:
        id v11 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
        (*(void (**)(uint64_t, void, id))(v37 + 16))(v37, 0, v11);
        goto LABEL_145;
      }
    }
    else
    {
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      uint64_t v26 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)v85 = 0;
        unsigned int v27 = sub_100055404(1);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v28 = v27;
        }
        else {
          unsigned int v28 = v27 & 0xFFFFFFFE;
        }
        if (v28)
        {
          LOWORD(v81) = 0;
          int v29 = (const char *)_os_log_send_and_compose_impl();
          __int16 v30 = (char *)v29;
          if (v29) {
            sub_100055434(v29);
          }
        }
        else
        {
          __int16 v30 = 0;
        }
        free(v30);
      }

      uint64_t v37 = *(void *)(a1 + 56);
      if (v37) {
        goto LABEL_64;
      }
    }
  }
  else
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v20 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)v85 = 0;
      unsigned int v21 = sub_100055404(1);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v22 = v21;
      }
      else {
        unsigned int v22 = v21 & 0xFFFFFFFE;
      }
      if (v22)
      {
        int v23 = *(_DWORD *)(a1 + 72);
        LODWORD(v81) = 67109120;
        HIDWORD(v81) = v23;
        uint64_t v24 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v25 = (char *)v24;
        if (v24) {
          sub_100055434(v24);
        }
      }
      else
      {
        uint64_t v25 = 0;
      }
      free(v25);
    }

    uint64_t v36 = *(void *)(a1 + 56);
    if (v36)
    {
      id v11 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:1 userInfo:0];
      (*(void (**)(uint64_t, void, id))(v36 + 16))(v36, 0, v11);
      goto LABEL_145;
    }
  }
LABEL_146:
}

void sub_10001065C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000106A4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000106B4(uint64_t a1)
{
}

uint64_t sub_1000106BC(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  if (!*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    uint64_t v2 = result;
    *(void *)(*(void *)(*(void *)(v2 + 40) + 8) + 40) = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:");
    return _objc_release_x1();
  }
  return result;
}

void sub_100010978(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 56)];
  unsigned int v41 = -1;
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v40 = 0;
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      int v6 = *(_DWORD *)(a1 + 56);
      int v42 = 67109120;
      int v43 = v6;
      LODWORD(v39) = 8;
      uint64_t v38 = &v42;
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ([v2 hasEntitlement:@"com.apple.usermanagerd.persona.delete"]) {
      goto LABEL_14;
    }
LABEL_26:
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v18 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v40 = 0;
      unsigned int v19 = sub_100055404(1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v20 = v19;
      }
      else {
        unsigned int v20 = v19 & 0xFFFFFFFE;
      }
      if (v20)
      {
        int v21 = *(_DWORD *)(a1 + 56);
        int v42 = 67109120;
        int v43 = v21;
        LODWORD(v39) = 8;
        uint64_t v38 = &v42;
        unsigned int v22 = (const char *)_os_log_send_and_compose_impl();
        int v23 = (char *)v22;
        if (v22) {
          sub_100055434(v22);
        }
      }
      else
      {
        int v23 = 0;
      }
      free(v23);
    }

    NSErrorDomain v34 = NSPOSIXErrorDomain;
    uint64_t v35 = 1;
    goto LABEL_62;
  }
  if (([*(id *)(a1 + 32) remoteProcessHasBooleanEntitlement:@"com.apple.usermanagerd.persona.delete"] & 1) == 0)goto LABEL_26; {
LABEL_14:
  }
  if (!*(void *)(a1 + 40))
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v24 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v40 = 0;
      unsigned int v25 = sub_100055404(1);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v26 = v25;
      }
      else {
        unsigned int v26 = v25 & 0xFFFFFFFE;
      }
      if (v26)
      {
        LOWORD(v42) = 0;
        LODWORD(v39) = 2;
        uint64_t v38 = &v42;
        unsigned int v27 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v28 = (char *)v27;
        if (v27) {
          sub_100055434(v27);
        }
      }
      else
      {
        unsigned int v28 = 0;
      }
      free(v28);
    }

    NSErrorDomain v34 = NSPOSIXErrorDomain;
    uint64_t v35 = 22;
LABEL_62:
    uint64_t v36 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v34, v35, 0, v38, v39, v40);
    goto LABEL_67;
  }
  id v9 = [*(id *)(a1 + 32) asidForClient:v2 withAuid:&v41 withPid:*(unsigned int *)(a1 + 56)];
  unsigned __int8 v10 = sub_100046CF4((uint64_t)v9, v41, *(unsigned int *)(a1 + 60));
  int v11 = sub_1000470C4(*(const __CFDictionary **)(a1 + 40), v10);
  if (v11)
  {
    int v12 = v11;
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v13 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        int v42 = 67109120;
        int v43 = v12;
        uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v17 = (char *)v16;
        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {
        uint64_t v17 = 0;
      }
      free(v17);
    }

    uint64_t v36 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v12 userInfo:0];
  }
  else
  {
    [*(id *)(a1 + 32) _broadcastPersonaUpdates:v10 withAuid:v41];
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    int v29 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v30 = sub_100055404(1);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v31 = v30;
      }
      else {
        unsigned int v31 = v30 & 0xFFFFFFFE;
      }
      if (v31)
      {
        LOWORD(v42) = 0;
        unsigned int v32 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v33 = (char *)v32;
        if (v32) {
          sub_100055434(v32);
        }
      }
      else
      {
        unsigned int v33 = 0;
      }
      free(v33);
    }

    uint64_t v36 = 0;
  }

LABEL_67:
  uint64_t v37 = *(void *)(a1 + 48);
  if (v37) {
    (*(void (**)(uint64_t, void *))(v37 + 16))(v37, v36);
  }
}

void sub_100011174(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 56)];
  unsigned int v41 = -1;
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v40 = 0;
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      int v6 = *(_DWORD *)(a1 + 56);
      int v42 = 67109120;
      int v43 = v6;
      LODWORD(v39) = 8;
      uint64_t v38 = &v42;
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ([v2 hasEntitlement:@"com.apple.usermanagerd.persona.delete"]) {
      goto LABEL_14;
    }
LABEL_26:
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v18 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v40 = 0;
      unsigned int v19 = sub_100055404(1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v20 = v19;
      }
      else {
        unsigned int v20 = v19 & 0xFFFFFFFE;
      }
      if (v20)
      {
        int v21 = *(_DWORD *)(a1 + 56);
        int v42 = 67109120;
        int v43 = v21;
        LODWORD(v39) = 8;
        uint64_t v38 = &v42;
        unsigned int v22 = (const char *)_os_log_send_and_compose_impl();
        int v23 = (char *)v22;
        if (v22) {
          sub_100055434(v22);
        }
      }
      else
      {
        int v23 = 0;
      }
      free(v23);
    }

    NSErrorDomain v34 = NSPOSIXErrorDomain;
    uint64_t v35 = 1;
    goto LABEL_62;
  }
  if (([*(id *)(a1 + 32) remoteProcessHasBooleanEntitlement:@"com.apple.usermanagerd.persona.delete"] & 1) == 0)goto LABEL_26; {
LABEL_14:
  }
  if (!*(void *)(a1 + 40))
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v24 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v40 = 0;
      unsigned int v25 = sub_100055404(1);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v26 = v25;
      }
      else {
        unsigned int v26 = v25 & 0xFFFFFFFE;
      }
      if (v26)
      {
        LOWORD(v42) = 0;
        LODWORD(v39) = 2;
        uint64_t v38 = &v42;
        unsigned int v27 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v28 = (char *)v27;
        if (v27) {
          sub_100055434(v27);
        }
      }
      else
      {
        unsigned int v28 = 0;
      }
      free(v28);
    }

    NSErrorDomain v34 = NSPOSIXErrorDomain;
    uint64_t v35 = 22;
LABEL_62:
    uint64_t v36 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v34, v35, 0, v38, v39, v40);
    goto LABEL_67;
  }
  id v9 = [*(id *)(a1 + 32) asidForClient:v2 withAuid:&v41 withPid:*(unsigned int *)(a1 + 56)];
  unsigned __int8 v10 = sub_100046CF4((uint64_t)v9, v41, *(unsigned int *)(a1 + 60));
  int v11 = sub_100049618(*(const __CFDictionary **)(a1 + 40), v10);
  if (v11)
  {
    int v12 = v11;
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v13 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        int v42 = 67109120;
        int v43 = v12;
        uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v17 = (char *)v16;
        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {
        uint64_t v17 = 0;
      }
      free(v17);
    }

    uint64_t v36 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v12 userInfo:0];
  }
  else
  {
    [*(id *)(a1 + 32) _broadcastPersonaUpdates:v10 withAuid:v41];
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    int v29 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v30 = sub_100055404(1);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v31 = v30;
      }
      else {
        unsigned int v31 = v30 & 0xFFFFFFFE;
      }
      if (v31)
      {
        LOWORD(v42) = 0;
        unsigned int v32 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v33 = (char *)v32;
        if (v32) {
          sub_100055434(v32);
        }
      }
      else
      {
        unsigned int v33 = 0;
      }
      free(v33);
    }

    uint64_t v36 = 0;
  }

LABEL_67:
  uint64_t v37 = *(void *)(a1 + 48);
  if (v37) {
    (*(void (**)(uint64_t, void *))(v37 + 16))(v37, v36);
  }
}

void sub_10001180C(uint64_t a1)
{
  unsigned int v34 = -1;
  int v35 = 0;
  uint64_t v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v36 = 0;
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      int v6 = *(_DWORD *)(a1 + 48);
      LODWORD(v41) = 67109120;
      HIDWORD(v41) = v6;
      LODWORD(v33) = 8;
      unsigned int v32 = &v41;
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ([v2 hasEntitlement:@"com.apple.usermanagerd.persona.fetch"])
    {
LABEL_14:
      id v9 = [*(id *)(a1 + 32) asidForClient:v2 withAuid:&v34 withPid:*(unsigned int *)(a1 + 48) withPid:v32 withPid:v33];
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      unsigned __int8 v10 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v41 = 0;
        unsigned int v11 = sub_100055404(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
          unsigned int v12 = v11;
        }
        else {
          unsigned int v12 = v11 & 0xFFFFFFFE;
        }
        if (v12)
        {
          int v13 = *(_DWORD *)(a1 + 48);
          LODWORD(v36) = 67109376;
          HIDWORD(v36) = v13;
          __int16 v37 = 1024;
          int v38 = (int)v9;
          unsigned int v14 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v15 = (char *)v14;
          if (v14) {
            sub_100055434(v14);
          }
        }
        else
        {
          unsigned int v15 = 0;
        }
        free(v15);
      }

      unsigned int v22 = sub_100046CF4((uint64_t)v9, v34, *(unsigned int *)(a1 + 52));
      int v23 = sub_100049B90(v22, &v35);
      if (v23)
      {
        uint64_t v24 = 0;
      }
      else
      {
        uint64_t v24 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v35 userInfo:0];
        if (qword_1000E3FD8 != -1) {
          dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
        }
        unsigned int v25 = (id)qword_1000E3FD0;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v41 = 0;
          unsigned int v26 = sub_100055404(1);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v27 = v26;
          }
          else {
            unsigned int v27 = v26 & 0xFFFFFFFE;
          }
          if (v27)
          {
            int v28 = *(_DWORD *)(a1 + 48);
            LODWORD(v36) = 67109632;
            HIDWORD(v36) = v28;
            __int16 v37 = 1024;
            int v38 = (int)v9;
            __int16 v39 = 1024;
            int v40 = v35;
            int v29 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v30 = (char *)v29;
            if (v29) {
              sub_100055434(v29);
            }
          }
          else
          {
            unsigned int v30 = 0;
          }
          free(v30);
        }
      }
      goto LABEL_53;
    }
  }
  else if ([*(id *)(a1 + 32) remoteProcessHasBooleanEntitlement:@"com.apple.usermanagerd.persona.fetch"])
  {
    goto LABEL_14;
  }
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  uint64_t v16 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v36 = 0;
    unsigned int v17 = sub_100055404(1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = v17 & 0xFFFFFFFE;
    }
    if (v18)
    {
      int v19 = *(_DWORD *)(a1 + 48);
      LODWORD(v41) = 67109120;
      HIDWORD(v41) = v19;
      unsigned int v20 = (const char *)_os_log_send_and_compose_impl();
      int v21 = (char *)v20;
      if (v20) {
        sub_100055434(v20);
      }
    }
    else
    {
      int v21 = 0;
    }
    free(v21);
  }

  uint64_t v24 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:1 userInfo:0];
  int v23 = 0;
LABEL_53:
  uint64_t v31 = *(void *)(a1 + 40);
  if (v31) {
    (*(void (**)(uint64_t, void *, void *))(v31 + 16))(v31, v23, v24);
  }
}

void sub_100011DCC(uint64_t a1)
{
  int v31 = 0;
  uint64_t v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v32 = 0;
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      int v6 = *(_DWORD *)(a1 + 48);
      LODWORD(v35) = 67109120;
      HIDWORD(v35) = v6;
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  if (!v2)
  {
    if ([*(id *)(a1 + 32) remoteProcessHasBooleanEntitlement:@"com.apple.usermanagerd.persona.fetch"])goto LABEL_14; {
LABEL_24:
    }
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v15 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = 0;
      unsigned int v16 = sub_100055404(1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
        int v18 = *(_DWORD *)(a1 + 48);
        LODWORD(v35) = 67109120;
        HIDWORD(v35) = v18;
        int v19 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v20 = (char *)v19;
        if (v19) {
          sub_100055434(v19);
        }
      }
      else
      {
        unsigned int v20 = 0;
      }
      free(v20);
    }

    int v23 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:1 userInfo:0];
    goto LABEL_52;
  }
  if (([v2 hasEntitlement:@"com.apple.usermanagerd.persona.fetch"] & 1) == 0) {
    goto LABEL_24;
  }
LABEL_14:
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  id v9 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v32 = 0;
    unsigned int v10 = sub_100055404(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = v10 & 0xFFFFFFFE;
    }
    if (v11)
    {
      int v12 = *(_DWORD *)(a1 + 48);
      LODWORD(v35) = 67109120;
      HIDWORD(v35) = v12;
      int v13 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v14 = (char *)v13;
      if (v13) {
        sub_100055434(v13);
      }
    }
    else
    {
      unsigned int v14 = 0;
    }
    free(v14);
  }

  uint64_t v21 = sub_100049BA4(&v31);
  if (v21)
  {
    unsigned int v22 = (void *)v21;
    int v23 = 0;
    goto LABEL_53;
  }
  int v23 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v31 userInfo:0];
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  uint64_t v24 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v35 = 0;
    unsigned int v25 = sub_100055404(1);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = v25 & 0xFFFFFFFE;
    }
    if (v26)
    {
      int v27 = *(_DWORD *)(a1 + 48);
      LODWORD(v32) = 67109376;
      HIDWORD(v32) = v27;
      __int16 v33 = 1024;
      int v34 = v31;
      int v28 = (const char *)_os_log_send_and_compose_impl();
      int v29 = (char *)v28;
      if (v28) {
        sub_100055434(v28);
      }
    }
    else
    {
      int v29 = 0;
    }
    free(v29);
  }

LABEL_52:
  unsigned int v22 = 0;
LABEL_53:
  uint64_t v30 = *(void *)(a1 + 40);
  if (v30) {
    (*(void (**)(uint64_t, void *, void *))(v30 + 16))(v30, v22, v23);
  }
}

void sub_100012338(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      int v6 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v7 = (char *)v6;
      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    free(v7);
  }

  if (v2)
  {
    if ([v2 hasEntitlement:@"com.apple.usermanagerd.persona.fetch"])
    {
LABEL_14:
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      unsigned int v8 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v9 = sub_100055404(1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
          unsigned int v10 = v9;
        }
        else {
          unsigned int v10 = v9 & 0xFFFFFFFE;
        }
        if (v10)
        {
          unsigned int v11 = (const char *)_os_log_send_and_compose_impl();
          int v12 = (char *)v11;
          if (v11) {
            sub_100055434(v11);
          }
        }
        else
        {
          int v12 = 0;
        }
        free(v12);
      }
      uint64_t v17 = 45;
      goto LABEL_39;
    }
  }
  else if ([*(id *)(a1 + 32) remoteProcessHasBooleanEntitlement:@"com.apple.usermanagerd.persona.fetch"])
  {
    goto LABEL_14;
  }
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v8 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v13 = sub_100055404(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = v13 & 0xFFFFFFFE;
    }
    if (v14)
    {
      unsigned int v15 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v16 = (char *)v15;
      if (v15) {
        sub_100055434(v15);
      }
    }
    else
    {
      unsigned int v16 = 0;
    }
    free(v16);
  }
  uint64_t v17 = 1;
LABEL_39:

  int v18 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v17 userInfo:0];
  uint64_t v19 = *(void *)(a1 + 40);
  if (v19) {
    (*(void (**)(uint64_t, void, void *))(v19 + 16))(v19, 0, v18);
  }
}

void sub_1000127B4(uint64_t a1)
{
  int v47 = 0;
  uint64_t v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 56)];
  unsigned int v46 = -1;
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(void *)int v48 = 0;
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      int v6 = *(_DWORD *)(a1 + 56);
      LODWORD(v53) = 67109120;
      HIDWORD(v53) = v6;
      LODWORD(v45) = 8;
      unsigned int v44 = &v53;
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ([v2 hasEntitlement:@"com.apple.usermanagerd.persona.fetch"]) {
      goto LABEL_14;
    }
LABEL_25:
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v17 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)int v48 = 0;
      unsigned int v18 = sub_100055404(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v19 = v18;
      }
      else {
        unsigned int v19 = v18 & 0xFFFFFFFE;
      }
      if (v19)
      {
        int v20 = *(_DWORD *)(a1 + 56);
        LODWORD(v53) = 67109120;
        HIDWORD(v53) = v20;
        LODWORD(v45) = 8;
        unsigned int v44 = &v53;
        uint64_t v21 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v22 = (char *)v21;
        if (v21) {
          sub_100055434(v21);
        }
      }
      else
      {
        unsigned int v22 = 0;
      }
      free(v22);
    }

    NSErrorDomain v28 = NSPOSIXErrorDomain;
    uint64_t v29 = 1;
    goto LABEL_73;
  }
  if (([*(id *)(a1 + 32) remoteProcessHasBooleanEntitlement:@"com.apple.usermanagerd.persona.fetch"] & 1) == 0)goto LABEL_25; {
LABEL_14:
  }
  if (!*(void *)(a1 + 40))
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    int v23 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(void *)int v48 = 0;
      unsigned int v24 = sub_100055404(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
        unsigned int v25 = v24;
      }
      else {
        unsigned int v25 = v24 & 0xFFFFFFFE;
      }
      if (v25)
      {
        LOWORD(v53) = 0;
        LODWORD(v45) = 2;
        unsigned int v44 = &v53;
        unsigned int v26 = (const char *)_os_log_send_and_compose_impl();
        int v27 = (char *)v26;
        if (v26) {
          sub_100055434(v26);
        }
      }
      else
      {
        int v27 = 0;
      }
      free(v27);
    }

    NSErrorDomain v28 = NSPOSIXErrorDomain;
    uint64_t v29 = 22;
LABEL_73:
    __int16 v37 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v28, v29, 0, v44, v45);
    int v31 = 0;
    goto LABEL_77;
  }
  id v9 = [*(id *)(a1 + 32) asidForClient:v2 withAuid:&v46 withPid:*(unsigned int *)(a1 + 56)];
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v10 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v53 = 0;
    unsigned int v11 = sub_100055404(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      unsigned int v12 = v11;
    }
    else {
      unsigned int v12 = v11 & 0xFFFFFFFE;
    }
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 40);
      int v14 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)int v48 = 138412802;
      *(void *)&v48[4] = v13;
      __int16 v49 = 1024;
      int v50 = v14;
      __int16 v51 = 1024;
      int v52 = (int)v9;
      unsigned int v15 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v16 = (char *)v15;
      if (v15) {
        sub_100055434(v15);
      }
    }
    else
    {
      unsigned int v16 = 0;
    }
    free(v16);
  }

  uint64_t v30 = sub_100046CF4((uint64_t)v9, v46, *(unsigned int *)(a1 + 60));
  int v31 = sub_100049BB4(*(void **)(a1 + 40), v30, &v47);
  if (v31)
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v32 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v53 = 0;
      unsigned int v33 = sub_100055404(1);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
        unsigned int v34 = v33;
      }
      else {
        unsigned int v34 = v33 & 0xFFFFFFFE;
      }
      if (v34)
      {
        *(_DWORD *)int v48 = 138412290;
        *(void *)&v48[4] = v31;
        uint64_t v35 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v36 = (char *)v35;
        if (v35) {
          sub_100055434(v35);
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      free(v36);
    }
    __int16 v37 = 0;
  }
  else
  {
    __int16 v37 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v47 userInfo:0];
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v32 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v53 = 0;
      unsigned int v38 = sub_100055404(1);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
        unsigned int v39 = v38;
      }
      else {
        unsigned int v39 = v38 & 0xFFFFFFFE;
      }
      if (v39)
      {
        int v40 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)int v48 = 138412802;
        *(void *)&v48[4] = v37;
        __int16 v49 = 1024;
        int v50 = v40;
        __int16 v51 = 1024;
        int v52 = (int)v9;
        uint64_t v41 = (const char *)_os_log_send_and_compose_impl();
        int v42 = (char *)v41;
        if (v41) {
          sub_100055434(v41);
        }
      }
      else
      {
        int v42 = 0;
      }
      free(v42);
    }
  }

LABEL_77:
  uint64_t v43 = *(void *)(a1 + 48);
  if (v43) {
    (*(void (**)(uint64_t, void *, void *))(v43 + 16))(v43, v31, v37);
  }
}

void sub_100013100(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 64)];
  HIDWORD(v44) = -1;
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(void *)uint64_t v45 = 0;
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      int v6 = *(_DWORD *)(a1 + 64);
      LODWORD(v48) = 67109120;
      HIDWORD(v48) = v6;
      LODWORD(v44) = 8;
      uint64_t v43 = &v48;
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ([v2 hasEntitlement:@"com.apple.usermanagerd.persona.setbundle"]) {
      goto LABEL_14;
    }
LABEL_25:
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v17 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)uint64_t v45 = 0;
      unsigned int v18 = sub_100055404(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v19 = v18;
      }
      else {
        unsigned int v19 = v18 & 0xFFFFFFFE;
      }
      if (v19)
      {
        int v20 = *(_DWORD *)(a1 + 64);
        LODWORD(v48) = 67109120;
        HIDWORD(v48) = v20;
        LODWORD(v44) = 8;
        uint64_t v43 = &v48;
        uint64_t v21 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v22 = (char *)v21;
        if (v21) {
          sub_100055434(v21);
        }
      }
      else
      {
        unsigned int v22 = 0;
      }
      free(v22);
    }

    NSErrorDomain v28 = NSPOSIXErrorDomain;
    uint64_t v29 = 1;
    goto LABEL_72;
  }
  if (([*(id *)(a1 + 32) remoteProcessHasBooleanEntitlement:@"com.apple.usermanagerd.persona.setbundle"] & 1) == 0)goto LABEL_25; {
LABEL_14:
  }
  if (!*(void *)(a1 + 40))
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    int v23 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)uint64_t v45 = 0;
      unsigned int v24 = sub_100055404(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v25 = v24;
      }
      else {
        unsigned int v25 = v24 & 0xFFFFFFFE;
      }
      if (v25)
      {
        LOWORD(v48) = 0;
        LODWORD(v44) = 2;
        uint64_t v43 = &v48;
        unsigned int v26 = (const char *)_os_log_send_and_compose_impl();
        int v27 = (char *)v26;
        if (v26) {
          sub_100055434(v26);
        }
      }
      else
      {
        int v27 = 0;
      }
      free(v27);
    }

    NSErrorDomain v28 = NSPOSIXErrorDomain;
    uint64_t v29 = 22;
LABEL_72:
    uint64_t v32 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v28, v29, 0, v43, v44, *(void *)v45);
    goto LABEL_77;
  }
  id v9 = [*(id *)(a1 + 32) asidForClient:v2 withAuid:(char *)&v44 + 4 withPid:*(unsigned int *)(a1 + 64)];
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v10 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v48 = 0;
    unsigned int v11 = sub_100055404(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      unsigned int v12 = v11;
    }
    else {
      unsigned int v12 = v11 & 0xFFFFFFFE;
    }
    if (v12)
    {
      int v13 = *(_DWORD *)(a1 + 64);
      uint64_t v14 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t v45 = 67109634;
      *(_DWORD *)&v45[4] = v13;
      *(_WORD *)&v45[8] = 2112;
      *(void *)&v45[10] = v14;
      __int16 v46 = 1024;
      int v47 = (int)v9;
      unsigned int v15 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v16 = (char *)v15;
      if (v15) {
        sub_100055434(v15);
      }
    }
    else
    {
      unsigned int v16 = 0;
    }
    free(v16);
  }

  uint64_t v30 = sub_100046CF4((uint64_t)v9, HIDWORD(v44), *(unsigned int *)(a1 + 68));
  int v31 = sub_100049C24(*(const __CFDictionary **)(a1 + 40), *(const __CFArray **)(a1 + 48), v30);
  if (v31)
  {
    uint64_t v32 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v31 userInfo:0];
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v33 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v48 = 0;
      unsigned int v34 = sub_100055404(1);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v35 = v34;
      }
      else {
        unsigned int v35 = v34 & 0xFFFFFFFE;
      }
      if (v35)
      {
        *(_DWORD *)uint64_t v45 = 138412290;
        *(void *)&v45[4] = v32;
        uint64_t v36 = (const char *)_os_log_send_and_compose_impl();
        __int16 v37 = (char *)v36;
        if (v36) {
          sub_100055434(v36);
        }
      }
      else
      {
        __int16 v37 = 0;
      }
      free(v37);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _broadcastPersonaUpdates:v30 withAuid:HIDWORD(v44)];
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v33 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(void *)uint64_t v45 = 0;
      unsigned int v38 = sub_100055404(1);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
        unsigned int v39 = v38;
      }
      else {
        unsigned int v39 = v38 & 0xFFFFFFFE;
      }
      if (v39)
      {
        LOWORD(v48) = 0;
        int v40 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v41 = (char *)v40;
        if (v40) {
          sub_100055434(v40);
        }
      }
      else
      {
        uint64_t v41 = 0;
      }
      free(v41);
    }
    uint64_t v32 = 0;
  }

LABEL_77:
  uint64_t v42 = *(void *)(a1 + 56);
  if (v42) {
    (*(void (**)(uint64_t, void *))(v42 + 16))(v42, v32);
  }
}

void sub_1000138BC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 56)];
  unsigned int v45 = -1;
  int v46 = 2;
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(void *)int v47 = 0;
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      int v6 = *(_DWORD *)(a1 + 56);
      LODWORD(v52) = 67109120;
      HIDWORD(v52) = v6;
      LODWORD(v44) = 8;
      uint64_t v43 = &v52;
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ([v2 hasEntitlement:@"com.apple.usermanagerd.persona.fetchbundle"]) {
      goto LABEL_14;
    }
LABEL_25:
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v17 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)int v47 = 0;
      unsigned int v18 = sub_100055404(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v19 = v18;
      }
      else {
        unsigned int v19 = v18 & 0xFFFFFFFE;
      }
      if (v19)
      {
        int v20 = *(_DWORD *)(a1 + 56);
        LODWORD(v52) = 67109120;
        HIDWORD(v52) = v20;
        LODWORD(v44) = 8;
        uint64_t v43 = &v52;
        uint64_t v21 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v22 = (char *)v21;
        if (v21) {
          sub_100055434(v21);
        }
      }
      else
      {
        unsigned int v22 = 0;
      }
      free(v22);
    }

    NSErrorDomain v28 = NSPOSIXErrorDomain;
    uint64_t v29 = 1;
    goto LABEL_73;
  }
  if (([*(id *)(a1 + 32) remoteProcessHasBooleanEntitlement:@"com.apple.usermanagerd.persona.fetchbundle"] & 1) == 0)goto LABEL_25; {
LABEL_14:
  }
  if (!*(void *)(a1 + 40))
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    int v23 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)int v47 = 0;
      unsigned int v24 = sub_100055404(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v25 = v24;
      }
      else {
        unsigned int v25 = v24 & 0xFFFFFFFE;
      }
      if (v25)
      {
        LOWORD(v52) = 0;
        LODWORD(v44) = 2;
        uint64_t v43 = &v52;
        unsigned int v26 = (const char *)_os_log_send_and_compose_impl();
        int v27 = (char *)v26;
        if (v26) {
          sub_100055434(v26);
        }
      }
      else
      {
        int v27 = 0;
      }
      free(v27);
    }

    NSErrorDomain v28 = NSPOSIXErrorDomain;
    uint64_t v29 = 22;
LABEL_73:
    __int16 v37 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v28, v29, 0, v43, v44);
    int v31 = 0;
    goto LABEL_77;
  }
  id v9 = [*(id *)(a1 + 32) asidForClient:v2 withAuid:&v45 withPid:*(unsigned int *)(a1 + 56)];
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v10 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v52 = 0;
    unsigned int v11 = sub_100055404(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      unsigned int v12 = v11;
    }
    else {
      unsigned int v12 = v11 & 0xFFFFFFFE;
    }
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 40);
      int v14 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)int v47 = 138412802;
      *(void *)&v47[4] = v13;
      __int16 v48 = 1024;
      int v49 = v14;
      __int16 v50 = 1024;
      int v51 = (int)v9;
      unsigned int v15 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v16 = (char *)v15;
      if (v15) {
        sub_100055434(v15);
      }
    }
    else
    {
      unsigned int v16 = 0;
    }
    free(v16);
  }

  uint64_t v30 = sub_100046CF4((uint64_t)v9, v45, *(unsigned int *)(a1 + 60));
  int v31 = sub_10004A2A8(*(void **)(a1 + 40), v30, &v46);
  if (v31)
  {
    int v46 = 0;
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v32 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v52 = 0;
      unsigned int v33 = sub_100055404(1);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
        unsigned int v34 = v33;
      }
      else {
        unsigned int v34 = v33 & 0xFFFFFFFE;
      }
      if (v34)
      {
        *(_DWORD *)int v47 = 138412290;
        *(void *)&v47[4] = v31;
        unsigned int v35 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v36 = (char *)v35;
        if (v35) {
          sub_100055434(v35);
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      free(v36);
    }
    __int16 v37 = 0;
  }
  else
  {
    __int16 v37 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v46 userInfo:0];
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v32 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v52 = 0;
      unsigned int v38 = sub_100055404(1);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v39 = v38;
      }
      else {
        unsigned int v39 = v38 & 0xFFFFFFFE;
      }
      if (v39)
      {
        *(_DWORD *)int v47 = 138412290;
        *(void *)&v47[4] = v37;
        int v40 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v41 = (char *)v40;
        if (v40) {
          sub_100055434(v40);
        }
      }
      else
      {
        uint64_t v41 = 0;
      }
      free(v41);
    }
  }

LABEL_77:
  uint64_t v42 = *(void *)(a1 + 48);
  if (v42) {
    (*(void (**)(uint64_t, void *, void *))(v42 + 16))(v42, v31, v37);
  }
}

void sub_1000141CC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 56)];
  HIDWORD(v37) = -1;
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(void *)unsigned int v38 = 0;
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      int v6 = *(_DWORD *)(a1 + 56);
      LODWORD(v41) = 67109120;
      HIDWORD(v41) = v6;
      LODWORD(v37) = 8;
      uint64_t v36 = &v41;
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ([v2 hasEntitlement:@"com.apple.usermanagerd.persona.setbundle"])
    {
LABEL_14:
      id v9 = [[*(id *)(a1 + 32) asidForClient:v2 withAuid:(char *)&v37 + 4 withPid:*(unsigned int *)(a1 + 56) withPid:v36 withPid:v37];
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      unsigned int v10 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v41 = 0;
        unsigned int v11 = sub_100055404(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
          unsigned int v12 = v11;
        }
        else {
          unsigned int v12 = v11 & 0xFFFFFFFE;
        }
        if (v12)
        {
          int v13 = *(_DWORD *)(a1 + 56);
          uint64_t v14 = *(void *)(a1 + 40);
          *(_DWORD *)unsigned int v38 = 67109634;
          *(_DWORD *)&v38[4] = v13;
          *(_WORD *)&v38[8] = 2112;
          *(void *)&v38[10] = v14;
          __int16 v39 = 1024;
          int v40 = (int)v9;
          unsigned int v15 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v16 = (char *)v15;
          if (v15) {
            sub_100055434(v15);
          }
        }
        else
        {
          unsigned int v16 = 0;
        }
        free(v16);
      }

      int v23 = sub_100046CF4((uint64_t)v9, HIDWORD(v37), *(unsigned int *)(a1 + 60));
      int v24 = sub_10004A2C0(*(const __CFArray **)(a1 + 40), v23);
      if (v24)
      {
        unsigned int v25 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v24 userInfo:0];
        if (qword_1000E3FD8 != -1) {
          dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
        }
        unsigned int v26 = (id)qword_1000E3FD0;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v41 = 0;
          unsigned int v27 = sub_100055404(1);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v28 = v27;
          }
          else {
            unsigned int v28 = v27 & 0xFFFFFFFE;
          }
          if (v28)
          {
            *(_DWORD *)unsigned int v38 = 138412290;
            *(void *)&v38[4] = v25;
            uint64_t v29 = (const char *)_os_log_send_and_compose_impl();
            uint64_t v30 = (char *)v29;
            if (v29) {
              sub_100055434(v29);
            }
          }
          else
          {
            uint64_t v30 = 0;
          }
          free(v30);
        }
      }
      else
      {
        [*(id *)(a1 + 32) _broadcastPersonaUpdates:v23 withAuid:HIDWORD(v37)];
        if (qword_1000E3FD8 != -1) {
          dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
        }
        unsigned int v26 = (id)qword_1000E3FD0;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          *(void *)unsigned int v38 = 0;
          unsigned int v31 = sub_100055404(1);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
            unsigned int v32 = v31;
          }
          else {
            unsigned int v32 = v31 & 0xFFFFFFFE;
          }
          if (v32)
          {
            LOWORD(v41) = 0;
            unsigned int v33 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v34 = (char *)v33;
            if (v33) {
              sub_100055434(v33);
            }
          }
          else
          {
            unsigned int v34 = 0;
          }
          free(v34);
        }
        unsigned int v25 = 0;
      }

      goto LABEL_63;
    }
  }
  else if ([*(id *)(a1 + 32) remoteProcessHasBooleanEntitlement:@"com.apple.usermanagerd.persona.setbundle"])
  {
    goto LABEL_14;
  }
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  uint64_t v17 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v38 = 0;
    unsigned int v18 = sub_100055404(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v18 & 0xFFFFFFFE;
    }
    if (v19)
    {
      int v20 = *(_DWORD *)(a1 + 56);
      LODWORD(v41) = 67109120;
      HIDWORD(v41) = v20;
      uint64_t v21 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v22 = (char *)v21;
      if (v21) {
        sub_100055434(v21);
      }
    }
    else
    {
      unsigned int v22 = 0;
    }
    free(v22);
  }

  unsigned int v25 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:1 userInfo:0];
LABEL_63:
  uint64_t v35 = *(void *)(a1 + 48);
  if (v35) {
    (*(void (**)(uint64_t, void *))(v35 + 16))(v35, v25);
  }
}

void sub_100014878(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  int v38 = 2;
  unsigned int v39 = -1;
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(void *)int v40 = 0;
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      int v6 = *(_DWORD *)(a1 + 48);
      LODWORD(v41) = 67109120;
      HIDWORD(v41) = v6;
      LODWORD(v37) = 8;
      uint64_t v36 = &v41;
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ([v2 hasEntitlement:@"com.apple.usermanagerd.persona.fetchbundle"])
    {
LABEL_14:
      id v9 = [*(id *)(a1 + 32) asidForClient:v2 withAuid:&v39 withPid:*(unsigned int *)(a1 + 48) withPid:v36 withPid:v37];
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      unsigned int v10 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v41 = 0;
        unsigned int v11 = sub_100055404(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
          unsigned int v12 = v11;
        }
        else {
          unsigned int v12 = v11 & 0xFFFFFFFE;
        }
        if (v12)
        {
          int v13 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)int v40 = 67109376;
          *(_DWORD *)&v40[4] = v13;
          *(_WORD *)&v40[8] = 1024;
          *(_DWORD *)&v40[10] = v9;
          uint64_t v14 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v15 = (char *)v14;
          if (v14) {
            sub_100055434(v14);
          }
        }
        else
        {
          unsigned int v15 = 0;
        }
        free(v15);
      }

      unsigned int v22 = sub_100046CF4((uint64_t)v9, v39, *(unsigned int *)(a1 + 52));
      int v23 = sub_10004A910(v22, &v38);
      if (v23)
      {
        if (qword_1000E3FD8 != -1) {
          dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
        }
        int v24 = (id)qword_1000E3FD0;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v41 = 0;
          unsigned int v25 = sub_100055404(1);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
            unsigned int v26 = v25;
          }
          else {
            unsigned int v26 = v25 & 0xFFFFFFFE;
          }
          if (v26)
          {
            *(_DWORD *)int v40 = 138412290;
            *(void *)&v40[4] = v23;
            unsigned int v27 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v28 = (char *)v27;
            if (v27) {
              sub_100055434(v27);
            }
          }
          else
          {
            unsigned int v28 = 0;
          }
          free(v28);
        }

        uint64_t v29 = 0;
        int v38 = 0;
      }
      else
      {
        uint64_t v29 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v38 userInfo:0];
        if (qword_1000E3FD8 != -1) {
          dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
        }
        uint64_t v30 = (id)qword_1000E3FD0;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v41 = 0;
          unsigned int v31 = sub_100055404(1);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v32 = v31;
          }
          else {
            unsigned int v32 = v31 & 0xFFFFFFFE;
          }
          if (v32)
          {
            *(_DWORD *)int v40 = 138412290;
            *(void *)&v40[4] = v29;
            unsigned int v33 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v34 = (char *)v33;
            if (v33) {
              sub_100055434(v33);
            }
          }
          else
          {
            unsigned int v34 = 0;
          }
          free(v34);
        }
      }
      goto LABEL_64;
    }
  }
  else if ([*(id *)(a1 + 32) remoteProcessHasBooleanEntitlement:@"com.apple.usermanagerd.persona.fetchbundle"])
  {
    goto LABEL_14;
  }
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v16 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)int v40 = 0;
    unsigned int v17 = sub_100055404(1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = v17 & 0xFFFFFFFE;
    }
    if (v18)
    {
      int v19 = *(_DWORD *)(a1 + 48);
      LODWORD(v41) = 67109120;
      HIDWORD(v41) = v19;
      int v20 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v21 = (char *)v20;
      if (v20) {
        sub_100055434(v20);
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    free(v21);
  }

  uint64_t v29 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:1 userInfo:0];
  int v23 = 0;
LABEL_64:
  uint64_t v35 = *(void *)(a1 + 40);
  if (v35) {
    (*(void (**)(uint64_t, void *, void *))(v35 + 16))(v35, v23, v29);
  }
}

void sub_1000150FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) notifyNextPersonaObserver:v3 withUser:*(unsigned int *)(a1 + 40)])
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v4 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = sub_100055404(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v6 = v5;
      }
      else {
        unsigned int v6 = v5 & 0xFFFFFFFE;
      }
      if (v6)
      {
LABEL_17:
        id v9 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v10 = (char *)v9;
        if (v9) {
          sub_100055434(v9);
        }
        goto LABEL_20;
      }
LABEL_19:
      unsigned int v10 = 0;
LABEL_20:
      free(v10);
    }
  }
  else
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v4 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v7 = sub_100055404(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v8 = v7;
      }
      else {
        unsigned int v8 = v7 & 0xFFFFFFFE;
      }
      if (v8) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }
}

void sub_100015704(id a1)
{
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  v1 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v2 = sub_100055404(1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v3 = v2;
    }
    else {
      unsigned int v3 = v2 & 0xFFFFFFFE;
    }
    if (v3)
    {
      unsigned int v4 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v5 = (char *)v4;
      if (v4) {
        sub_100055434(v4);
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    free(v5);
  }
}

void sub_1000157F8(id a1)
{
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  v1 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v2 = sub_100055404(1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v3 = v2;
    }
    else {
      unsigned int v3 = v2 & 0xFFFFFFFE;
    }
    if (v3)
    {
      unsigned int v4 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v5 = (char *)v4;
      if (v4) {
        sub_100055434(v4);
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    free(v5);
  }
}

id sub_1000158EC(uint64_t a1)
{
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v2 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      unsigned int v5 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  return [*(id *)(a1 + 40) invalidate];
}

void sub_100015AE0(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 48)];
  int v28 = -1;
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      unsigned int v6 = *(_DWORD *)(a1 + 48);
      int v29 = 67109120;
      unsigned int v30 = v6;
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  if ([v2 hasEntitlement:@"com.apple.usermanagerd.persona.observer"])
  {
    unsigned int v9 = [*(id *)(a1 + 32) asidForClient:v2 withAuid:&v28 withPid:*(unsigned int *)(a1 + 48)];
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v10 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v11 = sub_100055404(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v12 = v11;
      }
      else {
        unsigned int v12 = v11 & 0xFFFFFFFE;
      }
      if (v12)
      {
        int v29 = 67109120;
        unsigned int v30 = v9;
        int v13 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v14 = (char *)v13;
        if (v13) {
          sub_100055434(v13);
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
      free(v14);
    }

    [v2 setPersonaStakeHolderIsRegistered:1];
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    uint64_t v21 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v22 = sub_100055404(1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v23 = v22;
      }
      else {
        unsigned int v23 = v22 & 0xFFFFFFFE;
      }
      if (v23)
      {
        LOWORD(v29) = 0;
        int v24 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v25 = (char *)v24;
        if (v24) {
          sub_100055434(v24);
        }
      }
      else
      {
        unsigned int v25 = 0;
      }
      free(v25);
    }

    unsigned int v26 = 0;
  }
  else
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v15 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v16 = sub_100055404(1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
        unsigned int v18 = *(_DWORD *)(a1 + 48);
        int v29 = 67109120;
        unsigned int v30 = v18;
        int v19 = (const char *)_os_log_send_and_compose_impl();
        int v20 = (char *)v19;
        if (v19) {
          sub_100055434(v19);
        }
      }
      else
      {
        int v20 = 0;
      }
      free(v20);
    }

    unsigned int v26 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:1 userInfo:0];
  }
  uint64_t v27 = *(void *)(a1 + 40);
  if (v27) {
    (*(void (**)(uint64_t, void *))(v27 + 16))(v27, v26);
  }
}

void sub_100016048(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 56)];
  unsigned int v37 = -1;
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v39 = 0;
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      int v6 = *(_DWORD *)(a1 + 56);
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)int v38 = 67109378;
      *(_DWORD *)&v38[4] = v6;
      *(_WORD *)&v38[8] = 2112;
      *(void *)&v38[10] = v7;
      unsigned int v8 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v9 = (char *)v8;
      if (v8) {
        sub_100055434(v8);
      }
    }
    else
    {
      unsigned int v9 = 0;
    }
    free(v9);
  }

  if ([v2 hasEntitlement:@"com.apple.usermanagerd.persona.observer"])
  {
    id v10 = [*(id *)(a1 + 32) asidForClient:v2 withAuid:&v37 withPid:*(unsigned int *)(a1 + 56)];
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v11 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v39 = 0;
      unsigned int v12 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v12 & 0xFFFFFFFE;
      }
      if (v13)
      {
        uint64_t v14 = *(void *)(a1 + 40);
        *(_DWORD *)int v38 = 138412546;
        *(void *)&v38[4] = v14;
        *(_WORD *)&v38[12] = 1024;
        *(_DWORD *)&v38[14] = v10;
        unsigned int v15 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v16 = (char *)v15;
        if (v15) {
          sub_100055434(v15);
        }
      }
      else
      {
        unsigned int v16 = 0;
      }
      free(v16);
    }

    unsigned int v23 = sub_100046CF4((uint64_t)v10, v37, *(unsigned int *)(a1 + 60));
    if (sub_10004CC44(*(const __CFString **)(a1 + 40), v23))
    {
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      int v24 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)int v38 = 0;
        unsigned int v25 = sub_100055404(1);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v26 = v25;
        }
        else {
          unsigned int v26 = v25 & 0xFFFFFFFE;
        }
        if (v26)
        {
          LOWORD(v39) = 0;
          uint64_t v27 = (const char *)_os_log_send_and_compose_impl();
          int v28 = (char *)v27;
          if (v27) {
            sub_100055434(v27);
          }
        }
        else
        {
          int v28 = 0;
        }
        free(v28);
      }

      uint64_t v35 = 0;
    }
    else
    {
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      int v29 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v39 = 0;
        unsigned int v30 = sub_100055404(1);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v31 = v30;
        }
        else {
          unsigned int v31 = v30 & 0xFFFFFFFE;
        }
        if (v31)
        {
          uint64_t v32 = *(void *)(a1 + 40);
          *(_DWORD *)int v38 = 138412290;
          *(void *)&v38[4] = v32;
          unsigned int v33 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v34 = (char *)v33;
          if (v33) {
            sub_100055434(v33);
          }
        }
        else
        {
          unsigned int v34 = 0;
        }
        free(v34);
      }

      uint64_t v35 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
    }
  }
  else
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v17 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)int v38 = 0;
      unsigned int v18 = sub_100055404(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v19 = v18;
      }
      else {
        unsigned int v19 = v18 & 0xFFFFFFFE;
      }
      if (v19)
      {
        int v20 = *(_DWORD *)(a1 + 56);
        LODWORD(v39) = 67109120;
        HIDWORD(v39) = v20;
        uint64_t v21 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v22 = (char *)v21;
        if (v21) {
          sub_100055434(v21);
        }
      }
      else
      {
        unsigned int v22 = 0;
      }
      free(v22);
    }

    uint64_t v35 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:1 userInfo:0];
  }
  uint64_t v36 = *(void *)(a1 + 48);
  if (v36) {
    (*(void (**)(uint64_t, void *))(v36 + 16))(v36, v35);
  }
}

void sub_1000166D0(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _clientForPID:*(unsigned int *)(a1 + 56)];
  if (qword_1000E3FD8 != -1) {
    dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
  }
  unsigned int v3 = (id)qword_1000E3FD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v31 = 0;
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      int v6 = *(_DWORD *)(a1 + 56);
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)unsigned int v30 = 67109378;
      *(_DWORD *)&v30[4] = v6;
      *(_WORD *)&v30[8] = 2112;
      *(void *)&v30[10] = v7;
      unsigned int v8 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v9 = (char *)v8;
      if (v8) {
        sub_100055434(v8);
      }
    }
    else
    {
      unsigned int v9 = 0;
    }
    free(v9);
  }

  if ([v2 hasEntitlement:@"com.apple.mkb.usersession.loginwindow"])
  {
    int v29 = 0;
    id v10 = sub_10004B678(*(const __CFDictionary **)(a1 + 40), &v29);
    if (v29)
    {
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      unsigned int v11 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)unsigned int v30 = 0;
        unsigned int v12 = sub_100055404(1);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v13 = v12;
        }
        else {
          unsigned int v13 = v12 & 0xFFFFFFFE;
        }
        if (v13)
        {
          LODWORD(v31) = 67109120;
          HIDWORD(v31) = v29;
          uint64_t v14 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v15 = (char *)v14;
          if (v14) {
            sub_100055434(v14);
          }
        }
        else
        {
          unsigned int v15 = 0;
        }
        free(v15);
      }

      uint64_t v27 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v29 userInfo:0];
    }
    else
    {
      if (qword_1000E3FD8 != -1) {
        dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
      }
      unsigned int v22 = (id)qword_1000E3FD0;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = 0;
        unsigned int v23 = sub_100055404(1);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v24 = v23;
        }
        else {
          unsigned int v24 = v23 & 0xFFFFFFFE;
        }
        if (v24)
        {
          *(_DWORD *)unsigned int v30 = 138412290;
          *(void *)&v30[4] = v10;
          unsigned int v25 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v26 = (char *)v25;
          if (v25) {
            sub_100055434(v25);
          }
        }
        else
        {
          unsigned int v26 = 0;
        }
        free(v26);
      }

      uint64_t v27 = 0;
    }
  }
  else
  {
    if (qword_1000E3FD8 != -1) {
      dispatch_once(&qword_1000E3FD8, &stru_1000D5278);
    }
    unsigned int v16 = (id)qword_1000E3FD0;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)unsigned int v30 = 0;
      unsigned int v17 = sub_100055404(1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v18 = v17;
      }
      else {
        unsigned int v18 = v17 & 0xFFFFFFFE;
      }
      if (v18)
      {
        int v19 = *(_DWORD *)(a1 + 56);
        LODWORD(v31) = 67109120;
        HIDWORD(v31) = v19;
        int v20 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v21 = (char *)v20;
        if (v20) {
          sub_100055434(v20);
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      free(v21);
    }

    uint64_t v27 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:1 userInfo:0];
    id v10 = 0;
  }
  uint64_t v28 = *(void *)(a1 + 48);
  if (v28) {
    (*(void (**)(uint64_t, void *, void *))(v28 + 16))(v28, v10, v27);
  }
}

void sub_100016F30(id a1)
{
  qword_1000E3FD0 = (uint64_t)os_log_create(off_1000E33D8, "legacy");

  _objc_release_x1();
}

void sub_100016F78(id a1)
{
  qword_1000E3FE0 = (uint64_t)os_log_create(off_1000E33D8, "user");

  _objc_release_x1();
}

BOOL sub_100017034(id a1, unsigned int *a2)
{
  kern_return_t multiuser_config_flags;
  NSObject *v5;
  unsigned int v6;
  unsigned int v7;
  const char *v8;
  char *v9;

  if (!a2) {
    _os_assumes_log();
  }
  *a2 = 0;
  mach_port_t v3 = mach_host_self();
  multiuser_config_flags = host_get_multiuser_config_flags(v3, a2);
  if (multiuser_config_flags)
  {
    if (qword_1000E3FF8 != -1) {
      dispatch_once(&qword_1000E3FF8, &stru_1000D5338);
    }
    unsigned int v5 = (id)qword_1000E3FF0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = sub_100055404(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
        unsigned int v8 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v9 = (char *)v8;
        if (v8) {
          sub_100055434(v8);
        }
      }
      else
      {
        unsigned int v9 = 0;
      }
      free(v9);
    }
  }
  return multiuser_config_flags == 0;
}

BOOL sub_10001719C(id a1, unsigned int a2)
{
  kern_return_t v4;
  NSObject *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  const char *v10;
  char *v11;

  mach_port_t v3 = mach_host_self();
  unsigned int v4 = host_set_multiuser_config_flags(v3, a2);
  if (v4)
  {
    if (qword_1000E3FF8 != -1) {
      dispatch_once(&qword_1000E3FF8, &stru_1000D5338);
    }
    unsigned int v5 = (id)qword_1000E3FF0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = sub_100055404(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
LABEL_17:
        id v10 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
        goto LABEL_20;
      }
LABEL_19:
      unsigned int v11 = 0;
LABEL_20:
      free(v11);
    }
  }
  else
  {
    if (qword_1000E3FF8 != -1) {
      dispatch_once(&qword_1000E3FF8, &stru_1000D5338);
    }
    unsigned int v5 = (id)qword_1000E3FF0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v8 = sub_100055404(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }

  return v4 == 0;
}

void sub_1000173AC(id a1)
{
  qword_1000E3FF0 = (uint64_t)os_log_create(off_1000E33D8, "sideeffect");

  _objc_release_x1();
}

id sub_1000173F4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = [objc_alloc((Class)NSUUID) initWithUUIDString:v2];

  return v3;
}

id sub_100017454(uint64_t a1, const __CFUUID *a2)
{
  self;
  if (a2)
  {
    id v3 = (__CFString *)CFUUIDCreateString(kCFAllocatorDefault, a2);
    if (!v3) {
      sub_1000B08C8();
    }
    unsigned int v4 = v3;
    unsigned int v5 = sub_1000173F4((uint64_t)NSUUID, v3);
    CFRelease(v4);
  }
  else
  {
    unsigned int v5 = 0;
  }

  return v5;
}

CFUUIDRef sub_1000174D8(void *a1)
{
  if (!a1) {
    return 0;
  }
  v1 = [a1 UUIDString];
  CFUUIDRef v2 = CFUUIDCreateFromString(kCFAllocatorDefault, v1);

  if (!v2) {
    sub_1000B08C8();
  }
  return v2;
}

void sub_100018328(id a1)
{
  qword_1000E4000 = (uint64_t)os_log_create(off_1000E33D8, "sideeffect");

  _objc_release_x1();
}

id sub_100018370(uint64_t a1)
{
  if (a1)
  {
    CFUUIDRef v2 = [@"encrypt" dataUsingEncoding:4];
    id v3 = [v2 mutableCopy];

    [v3 appendData:a1];
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

id sub_1000183E8(void *a1)
{
  if (a1)
  {
    CFUUIDRef v2 = a1;
    id v3 = [@"encrypt" length];
    id v4 = v2;
    a1 = [NSMutableData dataWithBytes:&v3[(void)[v4 bytes]] length:[v4 length]];
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t sub_1000185F4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 48);
  }
  return result;
}

uint64_t sub_100018600(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t sub_1000186E0(uint64_t result)
{
  if (result) {
    return *(void *)(result + 56);
  }
  return result;
}

uint64_t sub_1000186EC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 64);
  }
  return result;
}

uint64_t sub_1000187CC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

uint64_t sub_1000187D8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 80);
  }
  return result;
}

uint64_t sub_100018844(uint64_t result)
{
  if (result) {
    return *(void *)(result + 88);
  }
  return result;
}

uint64_t sub_1000188B0(uint64_t result)
{
  if (result) {
    return *(void *)(result + 96);
  }
  return result;
}

BOOL sub_1000188D0(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 9) != 0;
  }
  return result;
}

uint64_t sub_100018944(uint64_t result)
{
  if (result) {
    return *(void *)(result + 104);
  }
  return result;
}

uint64_t sub_1000189B0(uint64_t result)
{
  if (result) {
    return *(void *)(result + 112);
  }
  return result;
}

uint64_t sub_100018A1C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 120);
  }
  return result;
}

uint64_t sub_100018A88(uint64_t result)
{
  if (result) {
    return *(void *)(result + 128);
  }
  return result;
}

uint64_t sub_100018BEC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 136);
  }
  return result;
}

uint64_t sub_100018BF8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t sub_100018D5C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 144);
  }
  return result;
}

uint64_t sub_100018F60(uint64_t result)
{
  if (result) {
    return *(void *)(result + 152);
  }
  return result;
}

uint64_t sub_100018F6C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

uint64_t sub_100018F78(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

uint64_t sub_100019058(uint64_t result)
{
  if (result) {
    return *(void *)(result + 160);
  }
  return result;
}

void sub_100019074(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

void sub_100019084(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

void sub_100019094(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 32), a2);
  }
}

void sub_1000190A4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 40), a2);
  }
}

void sub_1000190B4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 48), a2);
  }
}

void sub_1000190C4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 56), a2);
  }
}

void sub_1000190D4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 64), a2);
  }
}

void sub_1000190E4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 72), a2);
  }
}

void sub_1000190F4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 80), a2);
  }
}

void sub_100019104(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 88), a2);
  }
}

void sub_100019114(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 96), a2);
  }
}

uint64_t sub_100019124(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 9) = a2;
  }
  return result;
}

void sub_100019130(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 104), a2);
  }
}

void sub_100019140(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 112), a2);
  }
}

void sub_100019150(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 120), a2);
  }
}

void sub_100019160(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 128), a2);
  }
}

void sub_100019170(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 136), a2);
  }
}

void sub_100019180(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 144), a2);
  }
}

void sub_100019190(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 152), a2);
  }
}

void sub_1000191A0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 160), a2);
  }
}

uint64_t sub_1000192C0(uint64_t result)
{
  if (result)
  {
    (*(void (**)(void))(*(void *)(result + 8) + 16))();
    return 0;
  }
  return result;
}

uint64_t sub_100019308(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_100019314(uint64_t result)
{
  if (result)
  {
    (*(uint64_t (**)(void))(*(void *)(result + 8) + 16))();
    return 0;
  }
  return result;
}

uint64_t sub_10001935C(uint64_t result)
{
  if (result)
  {
    int v1 = 0;
    if ((*(unsigned int (**)(void))(*(void *)(result + 8) + 16))()) {
      return v1 & 0x3FFFFFFF;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_1000193A8(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0;
  }
  if (a2 >> 30)
  {
    if (qword_1000E4018 != -1) {
      dispatch_once(&qword_1000E4018, &stru_1000D5388);
    }
    CFUUIDRef v2 = (id)qword_1000E4010;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      unsigned int v3 = sub_100055404(0);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4)
      {
        unsigned int v5 = (const char *)_os_log_send_and_compose_impl();
        int v6 = (char *)v5;
        if (v5) {
          sub_100055434(v5);
        }
      }
      else
      {
        int v6 = 0;
      }
      free(v6);
    }

    return 0;
  }
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 16) + 16);

  return v7();
}

void sub_100019558(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 8);
  }
}

void sub_10001956C(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 16);
  }
}

void sub_1000195C4(id a1)
{
  qword_1000E4010 = (uint64_t)os_log_create(off_1000E33D8, "sideeffect");

  _objc_release_x1();
}

void sub_100019660(id a1)
{
  qword_1000E4020 = objc_alloc_init(UMDProviderSideEffects);

  _objc_release_x1();
}

uint64_t sub_100019810(char *a1, ...)
{
  va_start(va, a1);
  message[0] = 0;
  va_copy((va_list)&message[1], va);
  vasprintf(message, a1, va);
  if (!message[0]) {
    message[0] = a1;
  }
  reboot_np(3072, message[0]);
  uint64_t v2 = abort_with_reason();
  return sub_10001986C(v2);
}

uint64_t sub_10001986C(const char *a1, int a2)
{
  int v21 = a2;
  *(void *)unsigned int v22 = 0;
  unsigned int v3 = getmntinfo((statfs **)v22, 2);
  if (v3)
  {
    unsigned int v4 = v3;
    unsigned int v5 = (const char *)(*(void *)v22 + 2168 * v3 - 2080);
    unsigned int v6 = v4 + 1;
    while ((int)--v6 >= 1)
    {
      uint64_t v7 = v5 - 2168;
      int v8 = strcmp(v5, a1);
      unsigned int v5 = v7;
      if (!v8)
      {
        uint64_t v9 = *((void *)v7 + 266);
        size_t v29 = 14;
        if (sysctlnametomib("vfs.generic.ctlbyfsid", &v30, &v29) != -1)
        {
          int v10 = v29;
          *(&v30 + v29) = 65538;
          int v23 = 0;
          long long v26 = 0u;
          long long v27 = 0u;
          uint64_t v28 = 0;
          *(_DWORD *)unsigned int v22 = 1;
          *(void *)&v22[4] = v9;
          unsigned int v24 = &v21;
          long long v25 = 4uLL;
          if ((sysctl(&v30, v10 + 1, 0, 0, v22, 0x50uLL) & 0x80000000) == 0) {
            return 0;
          }
        }
        int v16 = *__error();
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v13 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_28;
        }
        *(void *)unsigned int v22 = 0;
        unsigned int v17 = sub_100055404(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v18 = v17;
        }
        else {
          unsigned int v18 = v17 & 0xFFFFFFFE;
        }
        if (v18)
        {
          int v30 = 67109120;
          int v31 = v16;
          goto LABEL_24;
        }
        goto LABEL_26;
      }
    }
  }
  int v12 = *__error();
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v13 = (id)qword_1000E4060;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v22 = 0;
    unsigned int v14 = sub_100055404(1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v15 = v14;
    }
    else {
      unsigned int v15 = v14 & 0xFFFFFFFE;
    }
    if (v15)
    {
      int v30 = 67109120;
      int v31 = v12;
LABEL_24:
      int v19 = (const char *)_os_log_send_and_compose_impl();
      int v20 = (char *)v19;
      if (v19) {
        sub_100055434(v19);
      }
    }
    else
    {
LABEL_26:
      int v20 = 0;
    }
    free(v20);
  }
LABEL_28:

  return 0xFFFFFFFFLL;
}

uint64_t sub_100019B40(int a1)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t sub_100019B68(void *a1)
{
  return objc_claimAutoreleasedReturnValue();
}

CFTypeRef sub_100019B90(const __CFString *a1)
{
  CFTypeRef result = (CFTypeRef)qword_1000E42B0;
  if (qword_1000E42B0)
  {
    if (CFArrayGetCount((CFArrayRef)qword_1000E42B0) >= 1)
    {
      CFIndex v3 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42B0, v3);
        if (!ValueAtIndex) {
          break;
        }
        CFDictionaryRef v5 = ValueAtIndex;
        CFTypeID v6 = CFGetTypeID(ValueAtIndex);
        if (v6 != CFDictionaryGetTypeID()) {
          break;
        }
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v5, kUMUserSessionVolumeUUIDKey);
        if (!Value || (CFStringRef v8 = Value, v9 = CFGetTypeID(Value), v9 != CFStringGetTypeID()))
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          int v10 = (id)qword_1000E4060;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v13 = sub_100055404(1);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v14 = v13;
            }
            else {
              unsigned int v14 = v13 & 0xFFFFFFFE;
            }
            if (v14) {
              goto LABEL_25;
            }
LABEL_27:
            int v16 = 0;
            goto LABEL_28;
          }
          goto LABEL_29;
        }
        if (CFEqual(v8, a1)) {
          return CFRetain(v5);
        }
LABEL_30:
        if (CFArrayGetCount((CFArrayRef)qword_1000E42B0) <= ++v3) {
          return 0;
        }
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      int v10 = (id)qword_1000E4060;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v11 = sub_100055404(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v12 = v11;
        }
        else {
          unsigned int v12 = v11 & 0xFFFFFFFE;
        }
        if (!v12) {
          goto LABEL_27;
        }
LABEL_25:
        unsigned int v15 = (const char *)_os_log_send_and_compose_impl();
        int v16 = (char *)v15;
        if (v15) {
          sub_100055434(v15);
        }
LABEL_28:
        free(v16);
      }
LABEL_29:

      goto LABEL_30;
    }
    return 0;
  }
  return result;
}

uint64_t sub_100019E3C()
{
  if (!qword_1000E42B0) {
    return 0;
  }
  int v0 = sub_100056B1C(qword_1000E4038);
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v1 = (id)qword_1000E4060;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v2 = sub_100055404(1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v3 = v2;
    }
    else {
      unsigned int v3 = v2 & 0xFFFFFFFE;
    }
    if (v3)
    {
      unsigned int v4 = (const char *)_os_log_send_and_compose_impl();
      CFDictionaryRef v5 = (char *)v4;
      if (v4) {
        sub_100055434(v4);
      }
    }
    else
    {
      CFDictionaryRef v5 = 0;
    }
    free(v5);
  }

  sub_100056848(qword_1000E4038, v0);
  return objc_claimAutoreleasedReturnValue();
}

CFTypeRef sub_100019FA4()
{
  if (!qword_1000E42B0) {
    return 0;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v0 = (id)qword_1000E4060;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v1 = sub_100055404(1);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v2 = v1;
    }
    else {
      unsigned int v2 = v1 & 0xFFFFFFFE;
    }
    if (v2)
    {
      unsigned int v3 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v4 = (char *)v3;
      if (v3) {
        sub_100055434(v3);
      }
    }
    else
    {
      unsigned int v4 = 0;
    }
    free(v4);
  }

  if (CFArrayGetCount((CFArrayRef)qword_1000E42B0) < 1) {
    return 0;
  }
  CFIndex v5 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42B0, v5);
    if (!ValueAtIndex || (CFDictionaryRef v7 = ValueAtIndex, v8 = CFGetTypeID(ValueAtIndex), v8 != CFDictionaryGetTypeID()))
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFTypeID v9 = (id)qword_1000E4060;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v10 = sub_100055404(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v11 = v10;
        }
        else {
          unsigned int v11 = v10 & 0xFFFFFFFE;
        }
        if (v11)
        {
          unsigned int v12 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v13 = (char *)v12;
          if (v12) {
            sub_100055434(v12);
          }
        }
        else
        {
          unsigned int v13 = 0;
        }
        free(v13);
      }

      goto LABEL_31;
    }
    if (sub_100088734(v7, kUMUserSessionisPrimaryKey)) {
      break;
    }
LABEL_31:
    if (CFArrayGetCount((CFArrayRef)qword_1000E42B0) <= ++v5) {
      return 0;
    }
  }
  CFTypeRef v14 = CFRetain(v7);
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v16 = (id)qword_1000E4060;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v17 = sub_100055404(1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = v17 & 0xFFFFFFFE;
    }
    if (v18)
    {
      int v19 = (const char *)_os_log_send_and_compose_impl();
      int v20 = (char *)v19;
      if (v19) {
        sub_100055434(v19);
      }
    }
    else
    {
      int v20 = 0;
    }
    free(v20);
  }

  return v14;
}

CFTypeRef sub_10001A324(const __CFString *a1)
{
  if (!qword_1000E42B0 || CFArrayGetCount((CFArrayRef)qword_1000E42B0) < 1) {
    return 0;
  }
  CFIndex v2 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42B0, v2);
    if (ValueAtIndex)
    {
      CFDictionaryRef v4 = ValueAtIndex;
      CFTypeID v5 = CFGetTypeID(ValueAtIndex);
      if (v5 == CFDictionaryGetTypeID())
      {
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v4, kUMUserSessionNameKey);
        if (Value)
        {
          CFStringRef v7 = Value;
          CFTypeID v8 = CFGetTypeID(Value);
          if (v8 == CFStringGetTypeID() && CFEqual(v7, a1)) {
            break;
          }
        }
      }
    }
    if (CFArrayGetCount((CFArrayRef)qword_1000E42B0) <= ++v2) {
      return 0;
    }
  }

  return CFRetain(v4);
}

uint64_t sub_10001A428()
{
  uint64_t v4 = 0;
  CFTypeID v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x2020000000;
  v3[3] = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10001A4F4;
  v2[3] = &unk_1000D53D0;
  v2[4] = v3;
  v2[5] = &v4;
  dispatch_sync((dispatch_queue_t)qword_1000E4320, v2);
  uint64_t v0 = v5[3];
  _Block_object_dispose(v3, 8);
  _Block_object_dispose(&v4, 8);
  return v0;
}

void sub_10001A4F4(uint64_t a1)
{
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int valuePtr = 0;
  CFIndex v2 = (id)qword_1000E4060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      CFTypeID v5 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    free(v6);
  }

  if (qword_1000E42B0 && (int Count = CFArrayGetCount((CFArrayRef)qword_1000E42B0), Count >= 1))
  {
    CFTypeID v8 = sub_100088D04();
    CFIndex v9 = 0;
    uint64_t v10 = Count;
    do
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42B0, v9);
      int valuePtr = -1;
      unsigned int v11 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (v11)
      {
        CFTypeID v12 = CFGetTypeID(v11);
        if (v12 == CFDictionaryGetTypeID()) {
          int valuePtr = sub_1000885F0(*(const __CFDictionary **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), kUMUserSessionIDKey);
        }
      }
      CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
      CFArrayAppendValue(v8, v13);
      if (v13) {
        CFRelease(v13);
      }
      ++v9;
    }
    while (v10 != v9);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v8;
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFTypeRef v14 = (id)qword_1000E4060;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = sub_100055404(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = v15 & 0xFFFFFFFE;
      }
      if (v16)
      {
        unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v18 = (char *)v17;
        if (v17) {
          sub_100055434(v17);
        }
      }
      else
      {
        unsigned int v18 = 0;
      }
      free(v18);
    }
  }
}

uint64_t sub_10001A7BC()
{
  uint64_t result = qword_1000E42B0;
  if (qword_1000E42B0)
  {
    int Count = 0;
    uint64_t valuePtr = CFArrayGetCount((CFArrayRef)qword_1000E42B0);
    if (valuePtr)
    {
      unsigned int v1 = sub_100088C68();
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFIndex v2 = (id)qword_1000E4060;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v3 = sub_100055404(1);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v4 = v3;
        }
        else {
          unsigned int v4 = v3 & 0xFFFFFFFE;
        }
        if (v4)
        {
          LOWORD(v84) = 0;
          CFTypeID v5 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v6 = (char *)v5;
          if (v5) {
            sub_100055434(v5);
          }
        }
        else
        {
          uint64_t v6 = 0;
        }
        free(v6);
      }

      CFNumberRef v12 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(v1, @"NUMENT", v12);
      CFRelease(v12);
      CFTypeRef v13 = sub_10008887C((const void *)qword_1000E42B0);
      if (v13)
      {
        CFTypeRef v14 = v13;
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v15 = (id)qword_1000E4060;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v16 = sub_100055404(1);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v17 = v16;
          }
          else {
            unsigned int v17 = v16 & 0xFFFFFFFE;
          }
          if (v17)
          {
            LOWORD(v84) = 0;
            unsigned int v18 = (const char *)_os_log_send_and_compose_impl();
            int v19 = (char *)v18;
            if (v18) {
              sub_100055434(v18);
            }
          }
          else
          {
            int v19 = 0;
          }
          free(v19);
        }

        CFDictionaryAddValue(v1, @"BLOB", v14);
        CFRelease(v14);
      }
      else
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        int v20 = (id)qword_1000E4060;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v21 = sub_100055404(1);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v22 = v21;
          }
          else {
            unsigned int v22 = v21 & 0xFFFFFFFE;
          }
          if (v22)
          {
            LOWORD(v84) = 0;
            int v23 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v24 = (char *)v23;
            if (v23) {
              sub_100055434(v23);
            }
          }
          else
          {
            unsigned int v24 = 0;
          }
          free(v24);
        }

        CFDictionaryAddValue(v1, @"BLOB", 0);
      }
      CFNumberRef v30 = CFNumberCreate(0, kCFNumberIntType, &dword_1000E42C0);
      CFDictionaryAddValue(v1, @"DEVICECONFIG", v30);
      CFRelease(v30);
      CFNumberRef v31 = CFNumberCreate(0, kCFNumberIntType, &dword_1000E3218);
      CFDictionaryAddValue(v1, @"BOOTEDUSER", v31);
      CFRelease(v31);
      if (dword_1000E321C != -1 || qword_1000E42E8)
      {
        CFNumberRef v32 = CFNumberCreate(0, kCFNumberLongLongType, &qword_1000E3228);
        CFDictionaryAddValue(v1, @"APNSID", v32);
        CFRelease(v32);
        if (qword_1000E4050)
        {
          CFDictionaryAddValue(v1, @"VOLUMETYPE", (const void *)qword_1000E4050);
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v33 = (id)qword_1000E4060;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v34 = sub_100055404(1);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v35 = v34;
            }
            else {
              unsigned int v35 = v34 & 0xFFFFFFFE;
            }
            if (v35)
            {
              LOWORD(v84) = 0;
              uint64_t v36 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v37 = (char *)v36;
              if (v36) {
                sub_100055434(v36);
              }
            }
            else
            {
              unsigned int v37 = 0;
            }
            free(v37);
          }
        }
        CFNumberRef v38 = CFNumberCreate(0, kCFNumberIntType, &dword_1000E321C);
        CFDictionaryAddValue(v1, @"MAXUSER", v38);
        CFRelease(v38);
        CFNumberRef v39 = CFNumberCreate(0, kCFNumberLongLongType, &qword_1000E42E8);
        CFDictionaryAddValue(v1, @"MAXUSERSIZE", v39);
        CFRelease(v39);
      }
      if (dword_1000E42C0 != 1)
      {
LABEL_104:
        if (qword_1000E42D8
          && (HIDWORD(valuePtr) = CFArrayGetCount((CFArrayRef)qword_1000E42D8), SHIDWORD(valuePtr) >= 1))
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          uint64_t v52 = (id)qword_1000E4060;
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v53 = sub_100055404(1);
            if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v54 = v53;
            }
            else {
              unsigned int v54 = v53 & 0xFFFFFFFE;
            }
            if (v54)
            {
              int v84 = 67109120;
              int v85 = HIDWORD(valuePtr);
              uint64_t v55 = (const char *)_os_log_send_and_compose_impl();
              int v56 = (char *)v55;
              if (v55) {
                sub_100055434(v55);
              }
            }
            else
            {
              int v56 = 0;
            }
            free(v56);
          }

          CFNumberRef v60 = CFNumberCreate(0, kCFNumberIntType, (char *)&valuePtr + 4);
          CFDictionaryAddValue(v1, @"LRUENT", v60);
          CFRelease(v60);
          CFTypeRef v61 = sub_10008887C((const void *)qword_1000E42D8);
          CFDictionaryAddValue(v1, @"LRUBLOB", v61);
          CFRelease(v61);
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v57 = (id)qword_1000E4060;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v62 = sub_100055404(1);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v63 = v62;
            }
            else {
              unsigned int v63 = v62 & 0xFFFFFFFE;
            }
            if (v63)
            {
              int v84 = 67109120;
              int v85 = HIDWORD(valuePtr);
LABEL_133:
              unsigned int v64 = (const char *)_os_log_send_and_compose_impl();
              long long v65 = (char *)v64;
              if (v64) {
                sub_100055434(v64);
              }
              goto LABEL_136;
            }
            goto LABEL_135;
          }
        }
        else
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v57 = (id)qword_1000E4060;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v58 = sub_100055404(1);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v59 = v58;
            }
            else {
              unsigned int v59 = v58 & 0xFFFFFFFE;
            }
            if (v59)
            {
              LOWORD(v84) = 0;
              goto LABEL_133;
            }
LABEL_135:
            long long v65 = 0;
LABEL_136:
            free(v65);
          }
        }

        CFTypeRef v66 = sub_10008887C(v1);
        if (!v66)
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          v73 = (id)qword_1000E4060;
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v74 = sub_100055404(1);
            if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v75 = v74;
            }
            else {
              unsigned int v75 = v74 & 0xFFFFFFFE;
            }
            if (v75)
            {
              LOWORD(v84) = 0;
              uint64_t v76 = (const char *)_os_log_send_and_compose_impl();
              v77 = (char *)v76;
              if (v76) {
                sub_100055434(v76);
              }
            }
            else
            {
              v77 = 0;
            }
            free(v77);
          }

          goto LABEL_172;
        }
        long long v67 = v66;
        unsigned int v68 = sub_100018F6C(qword_1000E4318);
        unsigned int v69 = [v68 atomicallyWriteData:v67 toPath:@"/private/var//keybags/usersession.kb" error:0];

        if (v69)
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          uint64_t v70 = (id)qword_1000E4060;
          if (!os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_168;
          }
          unsigned int v71 = sub_100055404(1);
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v72 = v71;
          }
          else {
            unsigned int v72 = v71 & 0xFFFFFFFE;
          }
          if (v72)
          {
            LOWORD(v84) = 0;
            goto LABEL_164;
          }
        }
        else
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          uint64_t v70 = (id)qword_1000E4060;
          if (!os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_168;
          }
          unsigned int v78 = sub_100055404(1);
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v79 = v78;
          }
          else {
            unsigned int v79 = v78 & 0xFFFFFFFE;
          }
          if (v79)
          {
            LOWORD(v84) = 0;
LABEL_164:
            int v80 = (const char *)_os_log_send_and_compose_impl();
            uint64_t v81 = (char *)v80;
            if (v80) {
              sub_100055434(v80);
            }
            goto LABEL_167;
          }
        }
        uint64_t v81 = 0;
LABEL_167:
        free(v81);
LABEL_168:

        CFRelease(v67);
LABEL_172:
        CFRelease(v1);
        return 1;
      }
      CFNumberRef v40 = CFNumberCreate(0, kCFNumberIntType, &dword_1000E42C8);
      CFDictionaryAddValue(v1, @"USESSTYPE", v40);
      CFRelease(v40);
      CFNumberRef v41 = CFNumberCreate(0, kCFNumberIntType, &dword_1000E42CC);
      CFDictionaryAddValue(v1, @"LOGINCHECKIN", v41);
      CFRelease(v41);
      if (dword_1000E42F0 >= 1)
      {
        CFNumberRef v42 = CFNumberCreate(0, kCFNumberIntType, &dword_1000E42F0);
        CFDictionaryAddValue(v1, @"DEVICENETWORKBG", v42);
        CFRelease(v42);
      }
      if (qword_1000E42D0 && (int Count = CFArrayGetCount((CFArrayRef)qword_1000E42D0), Count >= 1))
      {
        CFNumberRef v43 = CFNumberCreate(0, kCFNumberIntType, &Count);
        CFDictionaryAddValue(v1, @"SYNCENT", v43);
        CFRelease(v43);
        CFTypeRef v44 = sub_10008887C((const void *)qword_1000E42D0);
        CFDictionaryAddValue(v1, @"SYNCBLOB", v44);
        CFRelease(v44);
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v45 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_103;
        }
        unsigned int v46 = sub_100055404(1);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v47 = v46;
        }
        else {
          unsigned int v47 = v46 & 0xFFFFFFFE;
        }
        if (v47)
        {
          int v84 = 67109120;
          int v85 = Count;
          goto LABEL_99;
        }
      }
      else
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v45 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_103;
        }
        unsigned int v48 = sub_100055404(1);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v49 = v48;
        }
        else {
          unsigned int v49 = v48 & 0xFFFFFFFE;
        }
        if (v49)
        {
          LOWORD(v84) = 0;
LABEL_99:
          __int16 v50 = (const char *)_os_log_send_and_compose_impl();
          int v51 = (char *)v50;
          if (v50) {
            sub_100055434(v50);
          }
          goto LABEL_102;
        }
      }
      int v51 = 0;
LABEL_102:
      free(v51);
LABEL_103:

      goto LABEL_104;
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v7 = (id)qword_1000E4060;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9)
      {
        LOWORD(v84) = 0;
        uint64_t v10 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
      }
      else
      {
        unsigned int v11 = 0;
      }
      free(v11);
    }

    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    long long v25 = (id)qword_1000E4060;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v26 = sub_100055404(1);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v27 = v26;
      }
      else {
        unsigned int v27 = v26 & 0xFFFFFFFE;
      }
      if (v27)
      {
        LOWORD(v84) = 0;
        uint64_t v28 = (const char *)_os_log_send_and_compose_impl();
        size_t v29 = (char *)v28;
        if (v28) {
          sub_100055434(v28);
        }
      }
      else
      {
        size_t v29 = 0;
      }
      free(v29);
    }

    return 0;
  }
  return result;
}

void sub_10001B670()
{
  uint64_t v0 = sub_100059DA4((uint64_t)UMDAPFSSupportVolumeHelper, (void *)qword_1000E4318, byte_1000E4312);
  unsigned int v1 = (void *)qword_1000E4030;
  qword_1000E4030 = v0;

  uint64_t v2 = sub_100056444((uint64_t)UMDUserManager, (void *)qword_1000E4030);
  unsigned int v3 = (void *)qword_1000E4038;
  qword_1000E4038 = v2;

  if (MGGetBoolAnswer())
  {
    LOBYTE(v42) = 1;
    v43[0] = 0;
    if (sub_100080C94(v43, &v42))
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v4 = (id)qword_1000E4060;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)unsigned int v45 = 0;
        unsigned int v5 = sub_100055404(1);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v6 = v5;
        }
        else {
          unsigned int v6 = v5 & 0xFFFFFFFE;
        }
        if (v6)
        {
          LOWORD(v44[0]) = 0;
          uint64_t v7 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v8 = (char *)v7;
          if (v7) {
            sub_100055434(v7);
          }
        }
        else
        {
          unsigned int v8 = 0;
        }
        free(v8);
      }
    }
    if (!(_BYTE)v42)
    {
      byte_1000E4313 = 1;
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v9 = (id)qword_1000E4060;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)unsigned int v45 = 0;
        unsigned int v10 = sub_100055404(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v11 = v10;
        }
        else {
          unsigned int v11 = v10 & 0xFFFFFFFE;
        }
        if (v11)
        {
          LOWORD(v44[0]) = 0;
          CFNumberRef v12 = (const char *)_os_log_send_and_compose_impl();
          CFTypeRef v13 = (char *)v12;
          if (v12) {
            sub_100055434(v12);
          }
        }
        else
        {
          CFTypeRef v13 = 0;
        }
        free(v13);
      }

      CFTypeRef v14 = sub_100019308(qword_1000E4318);
      [v14 setIgnoreIdentityMethods:byte_1000E4313];
    }
  }
  if (!sub_10004008C(1)) {
    goto LABEL_48;
  }
  sub_100019084(qword_1000E4038, (void *)qword_1000E42B0);
  if (qword_1000E42B0 && CFArrayGetCount((CFArrayRef)qword_1000E42B0) >= 1)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v15 = (id)qword_1000E4060;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)CFNumberRef v43 = 0;
      int v16 = sub_100055404(1);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
        v16 &= ~1u;
      }
      if (v16)
      {
        CFArrayRef v17 = (const __CFArray *)qword_1000E42B0;
        unsigned int v18 = v15;
        CFIndex Count = CFArrayGetCount(v17);
        *(_DWORD *)unsigned int v45 = 134217984;
        *(void *)&v45[4] = Count;
        int v20 = (char *)_os_log_send_and_compose_impl();

        if (v20) {
          sub_100055434(v20);
        }
      }
      else
      {
        int v20 = 0;
      }
      free(v20);
    }
  }
  int v21 = dword_1000E42C0;
  if (dword_1000E42C0 == 1 && !dword_1000E42C8)
  {
    if (sub_100056B1C(qword_1000E4038) == 502) {
      int v22 = 1;
    }
    else {
      int v22 = 2;
    }
    dword_1000E42C8 = v22;
LABEL_48:
    int v21 = dword_1000E42C0;
  }
  if (v21 != 1)
  {
    if (qword_1000E4040) {
      sub_1000B09F0();
    }
    uint64_t v23 = sub_100059FF4((uint64_t)UMDPersonaManager, (void *)qword_1000E4038);
    unsigned int v24 = (void *)qword_1000E4040;
    qword_1000E4040 = v23;

    v44[0] = 0;
    if (!sub_10004041C(v44)) {
      sub_1000B08E4(qword_1000E4088 == -1);
    }
    if (qword_1000E4088 != -1) {
      dispatch_once(&qword_1000E4088, &stru_1000D55D8);
    }
    long long v25 = (id)qword_1000E4080;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)unsigned int v45 = 0;
      unsigned int v26 = sub_100055404(0);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v27 = v26;
      }
      else {
        unsigned int v27 = v26 & 0xFFFFFFFE;
      }
      if (v27)
      {
        LOWORD(v43[0]) = 0;
        uint64_t v28 = (const char *)_os_log_send_and_compose_impl();
        size_t v29 = (char *)v28;
        if (v28) {
          sub_100055434(v28);
        }
      }
      else
      {
        size_t v29 = 0;
      }
      free(v29);
    }

    if (qword_1000E4088 != -1) {
      dispatch_once(&qword_1000E4088, &stru_1000D55D8);
    }
    CFNumberRef v30 = (id)qword_1000E4080;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      *(void *)CFNumberRef v43 = 0;
      int v31 = sub_100055404(0);
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
        v31 &= ~1u;
      }
      if (v31)
      {
        uint64_t v32 = qword_1000E4040;
        unsigned int v33 = v30;
        unsigned int v34 = sub_100018F6C(v32);
        *(_DWORD *)unsigned int v45 = 138412290;
        *(void *)&v45[4] = v34;
        unsigned int v35 = (char *)_os_log_send_and_compose_impl();

        if (v35) {
          sub_100055434(v35);
        }
      }
      else
      {
        unsigned int v35 = 0;
      }
      free(v35);
    }

    uint64_t v36 = sub_100018F78(qword_1000E4040);
    sub_100058ADC((uint64_t)v36);
  }
  v44[0] = -1;
  int v42 = -1;
  if (sub_1000576AC(qword_1000E4038, v44, &v42))
  {
    if (qword_1000E4078 != -1) {
      dispatch_once(&qword_1000E4078, &stru_1000D55B8);
    }
    unsigned int v37 = (id)qword_1000E4070;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)CFNumberRef v43 = 0;
      unsigned int v38 = sub_100055404(0);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v39 = v38;
      }
      else {
        unsigned int v39 = v38 & 0xFFFFFFFE;
      }
      if (v39)
      {
        *(_DWORD *)unsigned int v45 = 67109376;
        *(_DWORD *)&v45[4] = v44[0];
        *(_WORD *)&v45[8] = 1024;
        *(_DWORD *)&v45[10] = v42;
        CFNumberRef v40 = (const char *)_os_log_send_and_compose_impl();
        CFNumberRef v41 = (char *)v40;
        if (v40) {
          sub_100055434(v40);
        }
      }
      else
      {
        CFNumberRef v41 = 0;
      }
      free(v41);
    }

    sub_10001BDFC(v44[0], v42);
  }
  else if (dword_1000E42C0 == 1)
  {
    sub_10001BEC4();
  }
}

void sub_10001BDFC(int a1, int a2)
{
  if (!xpc_user_sessions_enabled() || xpc_user_sessions_get_session_uid())
  {
    sub_100019810("UserManagement user switch failed: usermanagerd is not running in the system session");
  }
  else if (byte_1000E4048 != 1)
  {
    byte_1000E4048 = 1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10004E3D0;
    block[3] = &unk_1000D4E28;
    int v5 = a1;
    int v6 = a2;
    dispatch_async((dispatch_queue_t)qword_1000E4330, block);
    return;
  }
  sub_100019810("UserManagement user switch failed: attempt to perform a user switch while already performing a user switch");
  sub_10001BEC4();
}

void sub_10001BEC4()
{
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  uint64_t v0 = (id)qword_1000E4060;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v1 = sub_100055404(1);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v2 = v1;
    }
    else {
      unsigned int v2 = v1 & 0xFFFFFFFE;
    }
    if (v2)
    {
      unsigned int v3 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v4 = (char *)v3;
      if (v3) {
        sub_100055434(v3);
      }
    }
    else
    {
      unsigned int v4 = 0;
    }
    free(v4);
  }

  if (sub_10001D540())
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v5 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_62;
    }
    unsigned int v6 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = v6 & 0xFFFFFFFE;
    }
    if (v7) {
      goto LABEL_40;
    }
LABEL_60:
    int v16 = 0;
LABEL_61:
    free(v16);
LABEL_62:

    return;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v8 = (id)qword_1000E4060;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v9 = sub_100055404(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v10 = v9;
    }
    else {
      unsigned int v10 = v9 & 0xFFFFFFFE;
    }
    if (v10)
    {
      unsigned int v11 = (const char *)_os_log_send_and_compose_impl();
      CFNumberRef v12 = (char *)v11;
      if (v11) {
        sub_100055434(v11);
      }
    }
    else
    {
      CFNumberRef v12 = 0;
    }
    free(v12);
  }

  if (qword_1000E4308)
  {
    if (qword_1000E4078 != -1) {
      dispatch_once(&qword_1000E4078, &stru_1000D55B8);
    }
    int v5 = (id)qword_1000E4070;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_62;
    }
    unsigned int v13 = sub_100055404(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = v13 & 0xFFFFFFFE;
    }
    if (!v14) {
      goto LABEL_60;
    }
    goto LABEL_40;
  }
  if (!qword_1000E42D0) {
    return;
  }
  if (CFArrayGetCount((CFArrayRef)qword_1000E42D0) < 1)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v5 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_62;
    }
    unsigned int v23 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v24 = v23;
    }
    else {
      unsigned int v24 = v23 & 0xFFFFFFFE;
    }
    if (!v24) {
      goto LABEL_60;
    }
LABEL_40:
    unsigned int v15 = (const char *)_os_log_send_and_compose_impl();
    int v16 = (char *)v15;
    if (v15) {
      sub_100055434(v15);
    }
    goto LABEL_61;
  }
  int v17 = sub_10001D5E8();
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v18 = (id)qword_1000E4060;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v19 = sub_100055404(1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = v19 & 0xFFFFFFFE;
    }
    if (v20)
    {
      int v21 = (const char *)_os_log_send_and_compose_impl();
      int v22 = (char *)v21;
      if (v21) {
        sub_100055434(v21);
      }
    }
    else
    {
      int v22 = 0;
    }
    free(v22);
  }

  dispatch_source_t v25 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)qword_1000E4320);
  unsigned int v26 = (void *)qword_1000E4308;
  qword_1000E4308 = (uint64_t)v25;

  if (qword_1000E4078 != -1) {
    dispatch_once(&qword_1000E4078, &stru_1000D55B8);
  }
  unsigned int v27 = (id)qword_1000E4070;
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v28 = sub_100055404(0);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v29 = v28;
    }
    else {
      unsigned int v29 = v28 & 0xFFFFFFFE;
    }
    if (v29)
    {
      CFNumberRef v30 = (const char *)_os_log_send_and_compose_impl();
      int v31 = (char *)v30;
      if (v30) {
        sub_100055434(v30);
      }
    }
    else
    {
      int v31 = 0;
    }
    free(v31);
  }

  uint64_t v32 = qword_1000E4308;
  dispatch_time_t v33 = dispatch_time(0, 1000000000 * v17);
  dispatch_source_set_timer(v32, v33, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_source_set_event_handler((dispatch_source_t)qword_1000E4308, &stru_1000D54E8);
  dispatch_activate((dispatch_object_t)qword_1000E4308);
}

uint64_t sub_10001C514()
{
  return byte_1000E4048;
}

uint64_t sub_10001C540(uint64_t a1, uid_t a2)
{
  int v16 = 0;
  if (!a1)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v8 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_32;
    }
    unsigned int v9 = sub_100055404(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v10 = v9;
    }
    else {
      unsigned int v10 = v9 & 0xFFFFFFFE;
    }
    if (v10)
    {
      LOWORD(v17) = 0;
      goto LABEL_28;
    }
LABEL_30:
    unsigned int v14 = 0;
LABEL_31:
    free(v14);
LABEL_32:

    return 0;
  }
  if (([(id)qword_1000E4030 mountVolumeWithSession:a1 mountPath:@"/private/var/mobile" error:&v16 forPersona:0] & 1) == 0)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v8 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_32;
    }
    unsigned int v11 = sub_100055404(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v12 = v11;
    }
    else {
      unsigned int v12 = v11 & 0xFFFFFFFE;
    }
    if (v12)
    {
      int v17 = 67109120;
      int v18 = v16;
LABEL_28:
      unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v14 = (char *)v13;
      if (v13) {
        sub_100055434(v13);
      }
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v3 = (id)qword_1000E4060;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      LOWORD(v17) = 0;
      unsigned int v6 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v7 = (char *)v6;
      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    free(v7);
  }

  sub_10001C824((uint64_t)"/private/var/mobile", a2, a2);
  return 1;
}

uint64_t sub_10001C824(uint64_t a1, uid_t a2, gid_t a3)
{
  memset(&v54, 0, sizeof(v54));
  bzero(path, 0x400uLL);
  __strlcpy_chk();
  __strlcat_chk();
  if (!stat(path, &v54))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v10 = (id)qword_1000E4060;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v55 = 0;
      unsigned int v11 = sub_100055404(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v12 = v11;
      }
      else {
        unsigned int v12 = v11 & 0xFFFFFFFE;
      }
      if (v12)
      {
        int v56 = 136315138;
        *(void *)unsigned int v57 = path;
        unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v14 = (char *)v13;
        if (v13) {
          sub_100055434(v13);
        }
      }
      else
      {
        unsigned int v14 = 0;
      }
      free(v14);
    }
    uint64_t v15 = 0;
    goto LABEL_109;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v5 = (id)qword_1000E4060;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v55 = 0;
    unsigned int v6 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = v6 & 0xFFFFFFFE;
    }
    if (v7)
    {
      int v56 = 136315138;
      *(void *)unsigned int v57 = path;
      int v53 = 12;
      uint64_t v52 = &v56;
      unsigned int v8 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v9 = (char *)v8;
      if (v8) {
        sub_100055434(v8);
      }
    }
    else
    {
      unsigned int v9 = 0;
    }
    free(v9);
  }

  if (mkpath_np(path, 0x3FFu))
  {
    uint64_t v15 = *__error();
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v10 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_109;
    }
    uint64_t v55 = 0;
    int v16 = sub_100055404(1);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      v16 &= ~1u;
    }
    if (v16)
    {
      int v17 = v10;
      int v18 = strerror(v15);
      int v56 = 136315394;
      *(void *)unsigned int v57 = path;
      *(_WORD *)&v57[8] = 2080;
      *(void *)unsigned int v58 = v18;
      unsigned int v19 = (void *)_os_log_send_and_compose_impl();

      if (!v19) {
        goto LABEL_108;
      }
      goto LABEL_106;
    }
    goto LABEL_107;
  }
  if (chmod(path, 0x3FFu))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v20 = (id)qword_1000E4060;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v55 = 0;
      int v21 = sub_100055404(1);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        v21 &= ~1u;
      }
      if (v21)
      {
        int v22 = v20;
        unsigned int v23 = __error();
        unsigned int v24 = strerror(*v23);
        int v56 = 136315394;
        *(void *)unsigned int v57 = path;
        *(_WORD *)&v57[8] = 2080;
        *(void *)unsigned int v58 = v24;
        int v53 = 22;
        uint64_t v52 = &v56;
        dispatch_source_t v25 = (char *)_os_log_send_and_compose_impl();

        if (v25) {
          sub_100055434(v25);
        }
      }
      else
      {
        dispatch_source_t v25 = 0;
      }
      free(v25);
    }
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v26 = (id)qword_1000E4060;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v55 = 0;
    unsigned int v27 = sub_100055404(1);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v28 = v27;
    }
    else {
      unsigned int v28 = v27 & 0xFFFFFFFE;
    }
    if (v28)
    {
      int v56 = 67109376;
      *(_DWORD *)unsigned int v57 = a2;
      *(_WORD *)&v57[4] = 1024;
      *(_DWORD *)&v57[6] = a3;
      int v53 = 14;
      uint64_t v52 = &v56;
      unsigned int v29 = (const char *)_os_log_send_and_compose_impl();
      CFNumberRef v30 = (char *)v29;
      if (v29) {
        sub_100055434(v29);
      }
    }
    else
    {
      CFNumberRef v30 = 0;
    }
    free(v30);
  }

  if (chown(path, a2, a3))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v31 = (id)qword_1000E4060;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v55 = 0;
      int v32 = sub_100055404(1);
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
        v32 &= ~1u;
      }
      if (v32)
      {
        dispatch_time_t v33 = v31;
        unsigned int v34 = __error();
        unsigned int v35 = strerror(*v34);
        int v56 = 136315394;
        *(void *)unsigned int v57 = path;
        *(_WORD *)&v57[8] = 2080;
        *(void *)unsigned int v58 = v35;
        int v53 = 22;
        uint64_t v52 = &v56;
        uint64_t v36 = (char *)_os_log_send_and_compose_impl();

        if (v36) {
          sub_100055434(v36);
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      free(v36);
    }
  }
  int v37 = open_dprotected_np(path, 0, 0, 1, v52, v53, *(void *)&v54.st_dev, v54.st_ino, *(void *)&v54.st_uid, *(void *)&v54.st_rdev, v54.st_atimespec.tv_sec, v54.st_atimespec.tv_nsec, v54.st_mtimespec.tv_sec, v54.st_mtimespec.tv_nsec, v54.st_ctimespec.tv_sec, v54.st_ctimespec.tv_nsec, v54.st_birthtimespec.tv_sec, v54.st_birthtimespec.tv_nsec, v54.st_size,
          v54.st_blocks,
          *(void *)&v54.st_blksize,
          *(void *)&v54.st_gen,
          v54.st_qspare[0],
          v54.st_qspare[1]);
  if (v37 != -1)
  {
    int v38 = v37;
    if (fcntl(v37, 64, 4))
    {
      uint64_t v15 = *__error();
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v39 = (id)qword_1000E4060;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v55 = 0;
        int v40 = sub_100055404(1);
        if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
          v40 &= ~1u;
        }
        if (v40)
        {
          CFNumberRef v41 = v39;
          int v42 = strerror(v15);
          int v56 = 136315394;
          *(void *)unsigned int v57 = v42;
          *(_WORD *)&v57[8] = 2080;
          *(void *)unsigned int v58 = path;
          CFNumberRef v43 = (char *)_os_log_send_and_compose_impl();

          if (v43) {
            sub_100055434(v43);
          }
        }
        else
        {
          CFNumberRef v43 = 0;
        }
        free(v43);
      }

      if ((v38 & 0x80000000) == 0) {
        goto LABEL_92;
      }
    }
    else
    {
      uint64_t v15 = 0;
      if ((v38 & 0x80000000) == 0) {
LABEL_92:
      }
        close(v38);
    }
    if (!v15) {
      return v15;
    }
LABEL_98:
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v10 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_109;
    }
    uint64_t v55 = 0;
    unsigned int v49 = sub_100055404(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v50 = v49;
    }
    else {
      unsigned int v50 = v49 & 0xFFFFFFFE;
    }
    if (v50)
    {
      int v56 = 136315650;
      *(void *)unsigned int v57 = path;
      *(_WORD *)&v57[8] = 1024;
      *(_DWORD *)unsigned int v58 = 4;
      *(_WORD *)&v58[4] = 1024;
      *(_DWORD *)&v58[6] = v15;
      unsigned int v19 = (void *)_os_log_send_and_compose_impl();
      if (!v19)
      {
LABEL_108:
        free(v19);
LABEL_109:

        return v15;
      }
LABEL_106:
      sub_100055434((const char *)v19);
      goto LABEL_108;
    }
LABEL_107:
    unsigned int v19 = 0;
    goto LABEL_108;
  }
  uint64_t v15 = *__error();
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFTypeRef v44 = (id)qword_1000E4060;
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v55 = 0;
    int v45 = sub_100055404(1);
    if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
      v45 &= ~1u;
    }
    if (v45)
    {
      unsigned int v46 = v44;
      unsigned int v47 = strerror(v15);
      int v56 = 136315394;
      *(void *)unsigned int v57 = v47;
      *(_WORD *)&v57[8] = 2080;
      *(void *)unsigned int v58 = path;
      unsigned int v48 = (char *)_os_log_send_and_compose_impl();

      if (v48) {
        sub_100055434(v48);
      }
    }
    else
    {
      unsigned int v48 = 0;
    }
    free(v48);
  }

  if (v15) {
    goto LABEL_98;
  }
  return v15;
}

uint64_t sub_10001D20C()
{
  return sub_100056B1C(qword_1000E4038);
}

uint64_t sub_10001D218(const char **__argv)
{
  *(void *)uint64_t v15 = 0;
  if (posix_spawn(&v15[1], *__argv, 0, 0, (char *const *)__argv, 0))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v2 = (id)qword_1000E4060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4)
      {
        unsigned int v5 = *__argv;
        int v16 = 136315138;
        int v17 = (void *)v5;
        unsigned int v6 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v7 = (char *)v6;
        if (v6) {
          sub_100055434(v6);
        }
      }
      else
      {
        unsigned int v7 = 0;
      }
      free(v7);
    }
  }
  if (waitpid(v15[1], v15, 0) == -1)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v8 = (id)qword_1000E4060;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = sub_100055404(1);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        v9 &= ~1u;
      }
      if (v9)
      {
        unsigned int v10 = v8;
        unsigned int v11 = __error();
        unsigned int v12 = strerror(*v11);
        int v16 = 136315138;
        int v17 = v12;
        unsigned int v13 = (char *)_os_log_send_and_compose_impl();

        if (v13) {
          sub_100055434(v13);
        }
      }
      else
      {
        unsigned int v13 = 0;
      }
      free(v13);
    }
  }
  if ((v15[0] & 0x7F) != 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return BYTE1(v15[0]);
  }
}

BOOL sub_10001D498()
{
  size_t __len = 1023;
  bzero(__big, 0x400uLL);
  return !sysctlbyname("kern.bootargs", __big, &__len, 0, 0) && strnstr(__big, "usersession_enable", __len) != 0;
}

BOOL sub_10001D540()
{
  size_t __len = 1023;
  bzero(__big, 0x400uLL);
  return !sysctlbyname("kern.bootargs", __big, &__len, 0, 0)
      && strnstr(__big, "stop_auto_bubblelaunch", __len) != 0;
}

uint64_t sub_10001D5E8()
{
  size_t __len = 1023;
  bzero(__big, 0x400uLL);
  if (sysctlbyname("kern.bootargs", __big, &__len, 0, 0)) {
    return 120;
  }
  unsigned int v3 = 0;
  __big[1023] = 0;
  unsigned int v1 = strnstr(__big, "bubblelaunch_delay=", __len);
  uint64_t v0 = 120;
  if (v1)
  {
    if (sscanf(v1, "bubblelaunch_delay=%d", &v3) == 1) {
      return v3;
    }
    else {
      return 120;
    }
  }
  return v0;
}

char *sub_10001D6BC()
{
  size_t __len = 1023;
  bzero(__big, 0x400uLL);
  if (sysctlbyname("kern.bootargs", __big, &__len, 0, 0)) {
    return 0;
  }
  uint64_t result = strnstr(__big, "eds_debug", __len);
  if (result)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v1 = (id)qword_1000E4060;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v2 = sub_100055404(1);
      if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v3 = v2;
      }
      else {
        unsigned int v3 = v2 & 0xFFFFFFFE;
      }
      if (v3)
      {
        unsigned int v4 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v5 = (char *)v4;
        if (v4) {
          sub_100055434(v4);
        }
      }
      else
      {
        unsigned int v5 = 0;
      }
      free(v5);
    }

    return (char *)1;
  }
  return result;
}

uint64_t sub_10001D83C()
{
  int v12 = 0;
  size_t v11 = 4;
  int v10 = 544;
  if (sysctlbyname("security.mac.sandbox.debug_mode", &v12, &v11, &v10, 4uLL))
  {
    int v0 = *__error();
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v1 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_23;
    }
    unsigned int v2 = sub_100055404(1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v3 = v2;
    }
    else {
      unsigned int v3 = v2 & 0xFFFFFFFE;
    }
    if (v3)
    {
      int v13 = 67109120;
      int v14 = v0;
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  int v10 = v12 | 0x220;
  if (sysctlbyname("security.mac.sandbox.debug_mode", 0, 0, &v10, 4uLL))
  {
    int v4 = *__error();
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v1 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_23;
    }
    unsigned int v5 = sub_100055404(1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = v5 & 0xFFFFFFFE;
    }
    if (v6)
    {
      int v13 = 67109120;
      int v14 = v4;
LABEL_19:
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
      goto LABEL_22;
    }
LABEL_21:
    unsigned int v8 = 0;
LABEL_22:
    free(v8);
LABEL_23:

    return 0;
  }
  return 1;
}

void sub_10001DA90()
{
  if (sub_10001D6BC())
  {
    if (sub_10001D83C())
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      int v0 = (id)qword_1000E4060;
      if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v1 = sub_100055404(1);
        if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v2 = v1;
        }
        else {
          unsigned int v2 = v1 & 0xFFFFFFFE;
        }
        if (v2)
        {
LABEL_26:
          unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v8 = (char *)v7;
          if (v7) {
            sub_100055434(v7);
          }
          goto LABEL_29;
        }
LABEL_28:
        unsigned int v8 = 0;
LABEL_29:
        free(v8);
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      int v0 = (id)qword_1000E4060;
      if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v5 = sub_100055404(1);
        if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v6 = v5;
        }
        else {
          unsigned int v6 = v5 & 0xFFFFFFFE;
        }
        if (v6) {
          goto LABEL_26;
        }
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v0 = (id)qword_1000E4060;
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v3 = sub_100055404(1);
      if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4) {
        goto LABEL_26;
      }
      goto LABEL_28;
    }
  }
}

CFNumberRef sub_10001DCD4(int a1)
{
  valuePtr[0] = a1;
  if (qword_1000E42D0) {
    sub_10001DE88(a1);
  }
  else {
    qword_1000E42D0 = (uint64_t)sub_100088D04();
  }
  CFNumberRef result = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, valuePtr);
  if (result)
  {
    unsigned int v3 = result;
    CFArrayAppendValue((CFMutableArrayRef)qword_1000E42D0, result);
    qword_1000E42F8 = CFArrayGetCount((CFArrayRef)qword_1000E42D0);
    CFRelease(v3);
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v4 = (id)qword_1000E4060;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = sub_100055404(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v6 = v5;
      }
      else {
        unsigned int v6 = v5 & 0xFFFFFFFE;
      }
      if (v6)
      {
        valuePtr[1] = 67109378;
        valuePtr[2] = a1;
        __int16 v10 = 2112;
        uint64_t v11 = qword_1000E42D0;
        unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v8 = (char *)v7;
        if (v7) {
          sub_100055434(v7);
        }
      }
      else
      {
        unsigned int v8 = 0;
      }
      free(v8);
    }

    return (CFNumberRef)1;
  }
  return result;
}

uint64_t sub_10001DE88(int a1)
{
  uint64_t result = qword_1000E42D0;
  if (qword_1000E42D0)
  {
    valuePtr[0] = 0;
    if (CFArrayGetCount((CFArrayRef)qword_1000E42D0) < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v3 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42D0, v3);
        if (ValueAtIndex)
        {
          CFNumberRef v5 = ValueAtIndex;
          CFTypeID v6 = CFGetTypeID(ValueAtIndex);
          if (v6 == CFNumberGetTypeID() && CFNumberGetValue(v5, kCFNumberIntType, valuePtr) && valuePtr[0] == a1) {
            break;
          }
        }
        if (CFArrayGetCount((CFArrayRef)qword_1000E42D0) <= ++v3) {
          return 0;
        }
      }
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_1000E42D0, v3);
      qword_1000E42F8 = CFArrayGetCount((CFArrayRef)qword_1000E42D0);
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v8 = (id)qword_1000E4060;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v9 = sub_100055404(1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v10 = v9;
        }
        else {
          unsigned int v10 = v9 & 0xFFFFFFFE;
        }
        if (v10)
        {
          valuePtr[1] = 67109120;
          valuePtr[2] = a1;
          uint64_t v11 = (const char *)_os_log_send_and_compose_impl();
          int v12 = (char *)v11;
          if (v11) {
            sub_100055434(v11);
          }
        }
        else
        {
          int v12 = 0;
        }
        free(v12);
      }

      return 1;
    }
  }
  return result;
}

uint64_t sub_10001E06C(CFDictionaryRef theDict, int a2)
{
  CFIndex v3 = theDict;
  if (theDict
    || (sub_100056848(qword_1000E4038, a2),
        uint64_t result = objc_claimAutoreleasedReturnValue(),
        (CFIndex v3 = (__CFDictionary *)result) != 0))
  {
    if (CFDictionaryContainsKey(v3, kUMUserSessionSyncMachServicesKey)) {
      CFDictionaryRemoveValue(v3, kUMUserSessionSyncMachServicesKey);
    }
    if (CFDictionaryContainsKey(v3, kUMUserSessionSyncTasksKey)) {
      CFDictionaryRemoveValue(v3, kUMUserSessionSyncTasksKey);
    }
    if (CFDictionaryContainsKey(v3, kUMUserSessionDirtyKey)) {
      CFDictionarySetValue(v3, kUMUserSessionDirtyKey, kCFBooleanFalse);
    }
    int v5 = sub_1000885F0(v3, kUMUserSessionIDKey);
    sub_10001DE88(v5);
    if (!theDict) {
      CFRelease(v3);
    }
    return 1;
  }
  return result;
}

CFNumberRef sub_10001E154(int a1)
{
  int valuePtr = a1;
  if (qword_1000E42D8) {
    sub_10001E1E0(a1);
  }
  else {
    qword_1000E42D8 = (uint64_t)sub_100088D04();
  }
  CFNumberRef result = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (result)
  {
    unsigned int v2 = result;
    CFArrayAppendValue((CFMutableArrayRef)qword_1000E42D8, result);
    qword_1000E4300 = CFArrayGetCount((CFArrayRef)qword_1000E42D8);
    CFRelease(v2);
    return (CFNumberRef)1;
  }
  return result;
}

uint64_t sub_10001E1E0(int a1)
{
  uint64_t result = qword_1000E42D8;
  if (qword_1000E42D8)
  {
    int valuePtr = 0;
    if (CFArrayGetCount((CFArrayRef)qword_1000E42D8) < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v3 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42D8, v3);
        if (ValueAtIndex)
        {
          CFNumberRef v5 = ValueAtIndex;
          CFTypeID v6 = CFGetTypeID(ValueAtIndex);
          if (v6 == CFNumberGetTypeID() && CFNumberGetValue(v5, kCFNumberIntType, &valuePtr) && valuePtr == a1) {
            break;
          }
        }
        if (CFArrayGetCount((CFArrayRef)qword_1000E42D8) <= ++v3) {
          return 0;
        }
      }
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_1000E42D8, v3);
      qword_1000E4300 = CFArrayGetCount((CFArrayRef)qword_1000E42D8);
      return 1;
    }
  }
  return result;
}

uint64_t sub_10001E2BC()
{
  if (!qword_1000E42D8) {
    return 0xFFFFFFFFLL;
  }
  CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42D8, 0);
  if (!ValueAtIndex) {
    return 0xFFFFFFFFLL;
  }
  CFNumberRef v1 = ValueAtIndex;
  CFTypeID v2 = CFGetTypeID(ValueAtIndex);
  if (v2 != CFNumberGetTypeID()) {
    return 0xFFFFFFFFLL;
  }
  unsigned int valuePtr = 0;
  if (CFNumberGetValue(v1, kCFNumberIntType, &valuePtr)) {
    return valuePtr;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_10001E338(uint64_t a1, char *a2, gid_t a3)
{
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFTypeID v6 = (id)qword_1000E4060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)int v38 = 0;
    unsigned int v7 = sub_100055404(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = v7 & 0xFFFFFFFE;
    }
    if (v8)
    {
      LOWORD(v41) = 0;
      unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v10 = (char *)v9;
      if (v9) {
        sub_100055434(v9);
      }
    }
    else
    {
      unsigned int v10 = 0;
    }
    free(v10);
  }

  uint64_t v11 = +[UMLManager sharedManager];
  int v12 = +[NSString stringWithCString:a1 encoding:4];
  int v13 = [v12 stringByAppendingString:@"/"];
  uint64_t v36 = a1;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v14 = (id)qword_1000E4060;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = a2;
    uint64_t v41 = 0;
    unsigned int v16 = sub_100055404(1);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = v16 & 0xFFFFFFFE;
    }
    if (v17)
    {
      *(_DWORD *)int v38 = 138412546;
      *(void *)&v38[4] = @"/";
      __int16 v39 = 2112;
      int v40 = v13;
      int v18 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v19 = (char *)v18;
      if (v18) {
        sub_100055434(v18);
      }
    }
    else
    {
      unsigned int v19 = 0;
    }
    a2 = v15;
    free(v19);
  }

  id v37 = 0;
  unsigned __int8 v20 = [v11 createUserLayoutForUserwithUserID:a2 withAKSSetup:1 onUserVolumePath:v13 fromSystemVolumePath:@"/" withError:&v37];
  id v21 = v37;
  int v22 = v21;
  if (v20)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v23 = (id)qword_1000E4060;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = (int)a2;
      *(void *)int v38 = 0;
      unsigned int v25 = sub_100055404(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v26 = v25;
      }
      else {
        unsigned int v26 = v25 & 0xFFFFFFFE;
      }
      if (v26)
      {
        LOWORD(v41) = 0;
        unsigned int v27 = (const char *)_os_log_send_and_compose_impl();
        a2 = (char *)v27;
        if (v27) {
          sub_100055434(v27);
        }
      }
      else
      {
        a2 = 0;
      }
      free(a2);
      LODWORD(a2) = v24;
    }
  }
  else
  {
    int v28 = (int)a2;
    unsigned int v29 = [v21 code];
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v23 = (id)qword_1000E4060;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)int v38 = 0;
      unsigned int v30 = sub_100055404(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v31 = v30;
      }
      else {
        unsigned int v31 = v30 & 0xFFFFFFFE;
      }
      if (v31)
      {
        LODWORD(v41) = 67109120;
        HIDWORD(v41) = v29;
        int v32 = (const char *)_os_log_send_and_compose_impl();
        dispatch_time_t v33 = (char *)v32;
        if (v32) {
          sub_100055434(v32);
        }
      }
      else
      {
        dispatch_time_t v33 = 0;
      }
      free(v33);
    }
    LODWORD(a2) = v28;
  }

  uint64_t v34 = sub_10001C824(v36, (uid_t)a2, a3);
  return v34;
}

uint64_t sub_10001E7D0(char *a1, int a2)
{
  if (!a1) {
    return 22;
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  unsigned int v16 = sub_10001E970;
  unsigned int v17 = &unk_1000D5480;
  int v18 = a2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  int v12 = sub_10001E99C;
  int v13 = &unk_1000D54A0;
  int v14 = a2;
  CFIndex v3 = v15;
  unsigned int v4 = v11;
  v19[0] = a1;
  v19[1] = 0;
  CFNumberRef v5 = fts_open(v19, 84, 0);
  if (v5)
  {
    CFTypeID v6 = v5;
    unsigned int v7 = fts_read(v5);
    if (v7)
    {
      unsigned int v8 = v7;
      do
      {
        int fts_info = v8->fts_info;
        if (fts_info == 8)
        {
          v12((uint64_t)v4, (uint64_t)v8);
        }
        else if (fts_info == 1 && (v16((uint64_t)v3, (uint64_t)v8) & 1) == 0)
        {
          fts_set(v6, v8, 4);
        }
        unsigned int v8 = fts_read(v6);
      }
      while (v8);
    }
    fts_close(v6);
  }

  return 0;
}

uint64_t sub_10001E970(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t sub_10001E99C(uint64_t a1, uint64_t a2)
{
  return lchown(*(const char **)(a2 + 48), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 32));
}

BOOL sub_10001E9B0(int a1)
{
  int v16 = a1;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFTypeID v2 = (id)qword_1000E4060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      int v17 = 67109120;
      int v18 = a1;
      CFNumberRef v5 = (const char *)_os_log_send_and_compose_impl();
      CFTypeID v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      CFTypeID v6 = 0;
    }
    free(v6);
  }

  int v7 = sysctlbyname("net.inet.tcp.recvbg", 0, 0, &v16, 4uLL);
  if (v7)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v8 = (id)qword_1000E4060;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v9 = sub_100055404(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v10 = v9;
      }
      else {
        unsigned int v10 = v9 & 0xFFFFFFFE;
      }
      if (v10)
      {
        int v17 = 67109120;
        int v18 = v7;
        goto LABEL_29;
      }
      goto LABEL_31;
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v8 = (id)qword_1000E4060;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v11 = sub_100055404(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v12 = v11;
      }
      else {
        unsigned int v12 = v11 & 0xFFFFFFFE;
      }
      if (v12)
      {
        int v17 = 67109120;
        int v18 = v16;
LABEL_29:
        int v13 = (const char *)_os_log_send_and_compose_impl();
        int v14 = (char *)v13;
        if (v13) {
          sub_100055434(v13);
        }
        goto LABEL_32;
      }
LABEL_31:
      int v14 = 0;
LABEL_32:
      free(v14);
    }
  }

  return v7 == 0;
}

CFDictionaryRef sub_10001EC90()
{
  CFDictionaryRef v0 = (const __CFDictionary *)MGCopyAnswer();
  CFDictionaryRef v1 = v0;
  if (v0)
  {
    sub_1000886C8(v0, kMGQDiskUsageTotalDiskCapacity);
    sub_1000886C8(v1, kMGQDiskUsageTotalSystemCapacity);
    CFDictionaryRef v1 = (const __CFDictionary *)sub_1000886C8(v1, kMGQDiskUsageTotalDataCapacity);
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFTypeID v2 = (id)qword_1000E4060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4)
      {
        CFNumberRef v5 = (const char *)_os_log_send_and_compose_impl();
        CFTypeID v6 = (char *)v5;
        if (v5) {
          sub_100055434(v5);
        }
      }
      else
      {
        CFTypeID v6 = 0;
      }
      free(v6);
    }
  }
  return v1;
}

uint64_t sub_10001EE44()
{
  memset(&v2, 0, 512);
  strcpy(v1, "/private/var");
  if (statfs(v1, &v2)) {
    return 0;
  }
  else {
    return v2.f_bfree * v2.f_bsize;
  }
}

unint64_t sub_10001EF10(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v7 = (uint64_t)sub_10001EC90() / 0x100000;
  if (!(v7 >> 14))
  {
    unint64_t v8 = v7 - 4096;
    unint64_t v9 = (v7 - 4096) >> 10;
    uint64_t v10 = 4096;
LABEL_5:
    uint64_t v45 = v10;
    unint64_t v11 = 1024;
    goto LABEL_7;
  }
  if (!(v7 >> 15))
  {
    unint64_t v8 = v7 - 0x2000;
    unint64_t v9 = (v7 - 0x2000) >> 10;
    uint64_t v10 = 0x2000;
    goto LABEL_5;
  }
  unint64_t v8 = v7 - 0x4000;
  unint64_t v9 = (v7 - 0x4000) >> 11;
  uint64_t v45 = 0x4000;
  unint64_t v11 = 2048;
LABEL_7:
  if ((int)v9 >= 16)
  {
    if (v8 / 0xF >= v11)
    {
      unint64_t v9 = 15;
      unint64_t v11 = v8 / 0xF;
    }
    else
    {
      unint64_t v9 = v8 / v11;
    }
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v12 = (id)qword_1000E4060;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v13 = sub_100055404(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = v13 & 0xFFFFFFFE;
    }
    if (v14)
    {
      uint64_t v15 = (const char *)_os_log_send_and_compose_impl();
      int v16 = (char *)v15;
      if (v15) {
        sub_100055434(v15);
      }
    }
    else
    {
      int v16 = 0;
    }
    free(v16);
  }

  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v17 = (id)qword_1000E4060;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v18 = sub_100055404(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v18 & 0xFFFFFFFE;
    }
    if (v19)
    {
      unsigned __int8 v20 = (const char *)_os_log_send_and_compose_impl();
      id v21 = (char *)v20;
      if (v20) {
        sub_100055434(v20);
      }
    }
    else
    {
      id v21 = 0;
    }
    free(v21);
  }

  if (a1 == -1)
  {
    unint64_t v27 = v8 / 0x3E8;
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unint64_t v11 = 100 * v27;
    int v28 = (id)qword_1000E4060;
    unsigned int v29 = a2;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v30 = sub_100055404(1);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v31 = v30;
      }
      else {
        unsigned int v31 = v30 & 0xFFFFFFFE;
      }
      if (v31)
      {
        int v32 = (const char *)_os_log_send_and_compose_impl();
        dispatch_time_t v33 = (char *)v32;
        if (v32) {
          sub_100055434(v32);
        }
      }
      else
      {
        dispatch_time_t v33 = 0;
      }
      free(v33);
    }

    unint64_t v9 = 10;
  }
  else if ((int)v9 <= (int)a1)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v29 = a2;
    uint64_t v34 = (id)qword_1000E4060;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v35 = sub_100055404(1);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v36 = v35;
      }
      else {
        unsigned int v36 = v35 & 0xFFFFFFFE;
      }
      if (v36)
      {
        id v37 = (const char *)_os_log_send_and_compose_impl();
        int v38 = (char *)v37;
        if (v37) {
          sub_100055434(v37);
        }
      }
      else
      {
        int v38 = 0;
      }
      free(v38);
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v22 = (id)qword_1000E4060;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v23 = sub_100055404(1);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v24 = v23;
      }
      else {
        unsigned int v24 = v23 & 0xFFFFFFFE;
      }
      if (v24)
      {
        unsigned int v25 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v26 = (char *)v25;
        if (v25) {
          sub_100055434(v25);
        }
      }
      else
      {
        unsigned int v26 = 0;
      }
      free(v26);
    }

    unint64_t v9 = a1;
    unint64_t v11 = v8 / (int)a1;
    unsigned int v29 = a2;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  __int16 v39 = (id)qword_1000E4060;
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v40 = sub_100055404(1);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v41 = v40;
    }
    else {
      unsigned int v41 = v40 & 0xFFFFFFFE;
    }
    if (v41)
    {
      int v42 = (const char *)_os_log_send_and_compose_impl();
      CFNumberRef v43 = (char *)v42;
      if (v42) {
        sub_100055434(v42);
      }
    }
    else
    {
      CFNumberRef v43 = 0;
    }
    free(v43);
  }

  if (v29) {
    *unsigned int v29 = v11;
  }
  if (a3) {
    *a3 = v7;
  }
  if (a4) {
    *a4 = v45;
  }
  return v9;
}

__CFDictionary *sub_10001F5BC(int a1, uint64_t a2)
{
  int valuePtr = 502;
  unsigned int v182 = a1;
  gid_t v180 = 502;
  unint64_t v178 = 0;
  unint64_t v179 = 0;
  uint64_t v177 = 0;
  int v176 = a1;
  if (!a2)
  {
    int v3 = MKBGetDeviceLockState();
    if (v3 != 3)
    {
      int v9 = v3;
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      uint64_t v10 = (id)qword_1000E4060;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)v188 = 0;
        unsigned int v11 = sub_100055404(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v12 = v11;
        }
        else {
          unsigned int v12 = v11 & 0xFFFFFFFE;
        }
        if (v12)
        {
          *(_DWORD *)__str = 67109120;
          int v186 = v9;
          unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v14 = (char *)v13;
          if (v13) {
            sub_100055434(v13);
          }
        }
        else
        {
          unsigned int v14 = 0;
        }
        free(v14);
      }
      goto LABEL_276;
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v4 = (id)qword_1000E4060;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)v188 = 0;
      unsigned int v5 = sub_100055404(1);
      CFTypeID v6 = v4;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v5;
      }
      else {
        unsigned int v7 = v5 & 0xFFFFFFFE;
      }
      if (v7)
      {
        *(_DWORD *)__str = 67109120;
        int v186 = 3;
        unint64_t v8 = (char *)_os_log_send_and_compose_impl();

        if (v8) {
          sub_100055434(v8);
        }
      }
      else
      {

        unint64_t v8 = 0;
      }
      free(v8);
    }
  }
  byte_1000E3220 = 1;
  qword_1000E4050 = (uint64_t)kUMUserSessionAPFSNativeVolume;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  uint64_t v15 = (id)qword_1000E4060;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)v188 = 0;
    unsigned int v16 = sub_100055404(1);
    int v17 = v15;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v18 = v16;
    }
    else {
      unsigned int v18 = v16 & 0xFFFFFFFE;
    }
    if (v18)
    {
      *(_WORD *)__str = 0;
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();

      if (v19) {
        sub_100055434(v19);
      }
    }
    else
    {

      unsigned int v19 = 0;
    }
    free(v19);
  }

  unsigned __int8 v20 = sub_100088C68();
  if (v20)
  {
    CFNumberRef v21 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(v20, kUMUserSessionIDKey, v21);
    if (v21) {
      CFRelease(v21);
    }
    CFNumberRef v22 = CFNumberCreate(0, kCFNumberIntType, &v180);
    CFDictionarySetValue(v20, kUMUserSessionGroupIDKey, v22);
    if (v22) {
      CFRelease(v22);
    }
    CFDictionarySetValue(v20, kUMUserSessionNeedsMountKey, kCFBooleanFalse);
    CFDictionarySetValue(v20, kUMUserSessionTypeKey, kUMUserSessionManagedDevice);
    CFDictionarySetValue(v20, kUMUserSessionForegroundKey, kCFBooleanFalse);
    CFDictionarySetValue(v20, kUMUserSessionDirtyKey, kCFBooleanFalse);
    CFDictionarySetValue(v20, kUMUserSessionDisabledKey, kCFBooleanFalse);
    CFBooleanRef v23 = kCFBooleanTrue;
    CFDictionarySetValue(v20, kUMUserSessionLoginUserKey, kCFBooleanTrue);
    CFDictionarySetValue(v20, kUMUserSessionUserVolumeTypeKey, (const void *)qword_1000E4050);
    CFDictionarySetValue(v20, kUMUserSessionisPrimaryKey, kCFBooleanTrue);
    CFDictionarySetValue(v20, kUMUserSessionisAdminKey, kCFBooleanTrue);
    bzero(__str, 0x400uLL);
    if (valuePtr <= 501) {
      int v24 = valuePtr;
    }
    else {
      int v24 = valuePtr - 501;
    }
    snprintf(__str, 0x400uLL, "euser%d", v24);
    CFStringRef v25 = CFStringCreateWithCString(0, __str, 0x8000100u);
    CFDictionarySetValue(v20, kUMUserSessionShortNameKey, v25);
    if (v25) {
      CFRelease(v25);
    }
    uint64_t v174 = a2;
    CFStringRef v26 = CFStringCreateWithCString(0, "Loginwindow", 0x8000100u);
    CFDictionarySetValue(v20, kUMUserSessionNameKey, v26);
    CFDictionarySetValue(v20, kUMUserSessionFirstNameKey, v26);
    CFDictionarySetValue(v20, kUMUserSessionLastNameKey, v26);
    CFDictionarySetValue(v20, kUMUserSessionDisplayNameKey, v26);
    if (v26) {
      CFRelease(v26);
    }
    [(id)qword_1000E4030 splitUserVolumeEnabled];
    CFUUIDRef v27 = CFUUIDCreate(0);
    uint64_t v10 = sub_100017454((uint64_t)NSUUID, v27);
    CFStringRef v28 = CFUUIDCreateString(0, v27);
    CFDictionarySetValue(v20, kUMUserSessionUUIDKey, v28);
    if (v27) {
      CFRelease(v27);
    }
    if (v28) {
      CFRelease(v28);
    }
    CFUUIDRef v29 = CFUUIDCreate(0);
    CFStringRef v30 = CFUUIDCreateString(0, v29);
    CFDictionarySetValue(v20, kUMUserSessionAlternateDSIDKey, v30);
    if (v29) {
      CFRelease(v29);
    }
    if (v30) {
      CFRelease(v30);
    }
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v32 = CFDateCreate(kCFAllocatorDefault, Current);
    CFDictionarySetValue(v20, kUMUserSessionCreateTimeStampKey, v32);
    CFDictionarySetValue(v20, kUMUserSessionLoginTimeStampKey, v32);
    if (v32) {
      CFRelease(v32);
    }
    qword_1000E3228 = 1001;
    CFNumberRef v33 = CFNumberCreate(0, kCFNumberLongLongType, &qword_1000E3228);
    CFDictionarySetValue(v20, kUMUserSessionAPNSIDKey, v33);
    CFRelease(v33);
    CFUUIDRef v34 = CFUUIDCreate(0);
    CFStringRef v35 = CFUUIDCreateString(0, v34);
    if (v34) {
      CFRelease(v34);
    }
    bzero(buffer, 0x400uLL);
    CFStringGetCString(v35, buffer, 1024, 0x8000100u);
    if (v35) {
      CFRelease(v35);
    }
    bzero(__str, 0x400uLL);
    snprintf(__str, 0x400uLL, "/var/%s", buffer);
    CFStringRef v36 = CFStringCreateWithCString(0, __str, 0x8000100u);
    CFDictionarySetValue(v20, kUMUserSessionLibinfoHomeDirKey, v36);
    if (v36) {
      CFRelease(v36);
    }
    bzero(__str, 0x400uLL);
    snprintf(__str, 0x400uLL, "/private/var/%s", buffer);
    CFStringRef v37 = CFStringCreateWithCString(0, __str, 0x8000100u);
    CFDictionarySetValue(v20, kUMUserSessionHomeDirKey, v37);
    if (v37) {
      CFRelease(v37);
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v38 = (id)qword_1000E4060;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)v188 = 0;
      unsigned int v39 = sub_100055404(1);
      unsigned int v40 = v38;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v41 = v39;
      }
      else {
        unsigned int v41 = v39 & 0xFFFFFFFE;
      }
      if (v41)
      {
        LOWORD(v187[0]) = 0;
        int v42 = (char *)_os_log_send_and_compose_impl();

        if (v42) {
          sub_100055434(v42);
        }
      }
      else
      {

        int v42 = 0;
      }
      free(v42);
    }

    [(id)qword_1000E4030 createVolumeMountsDir:@"/var/Users"];
    if (sub_100021768(__str, (char *)valuePtr, v180))
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFNumberRef v43 = (id)qword_1000E4060;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)v188 = 0;
        unsigned int v44 = sub_100055404(1);
        CFNumberRef v43 = v43;
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v45 = v44;
        }
        else {
          unsigned int v45 = v44 & 0xFFFFFFFE;
        }
        if (v45)
        {
          LOWORD(v187[0]) = 0;
          goto LABEL_93;
        }
        goto LABEL_95;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFNumberRef v43 = (id)qword_1000E4060;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)v188 = 0;
        unsigned int v46 = sub_100055404(1);
        CFNumberRef v43 = v43;
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v47 = v46;
        }
        else {
          unsigned int v47 = v46 & 0xFFFFFFFE;
        }
        if (v47)
        {
          LOWORD(v187[0]) = 0;
LABEL_93:
          unsigned int v48 = (char *)_os_log_send_and_compose_impl();

          if (v48) {
            sub_100055434(v48);
          }
          goto LABEL_96;
        }
LABEL_95:

        unsigned int v48 = 0;
LABEL_96:
        free(v48);
      }
    }

    bzero(__str, 0x400uLL);
    snprintf(__str, 0x400uLL, "/private/var/%s/Library/Preferences", buffer);
    uid_t v49 = valuePtr;
    gid_t v172 = v180;
    strcpy((char *)v187, "/private/var/mobile/Library/Preferences/.GlobalPreferences.plist");
    bzero(v188, 0x400uLL);
    snprintf(v188, 0x400uLL, "%s/.GlobalPreferences.plist", __str);
    int v51 = open((const char *)v187, 0);
    if (v51 == -1)
    {
      int v62 = *__error();
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v63 = (id)qword_1000E4060;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v183 = 0;
        int v64 = sub_100055404(1);
        if (!os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT)) {
          v64 &= ~1u;
        }
        if (v64)
        {
          long long v65 = v50;
          CFTypeRef v66 = v63;
          long long v67 = strerror(v62);
          *(_DWORD *)v189 = 136315394;
          *(void *)&v189[4] = v187;
          *(_WORD *)&v189[12] = 2080;
          v190 = v67;
          unsigned int v68 = (char *)_os_log_send_and_compose_impl();

          if (v68) {
            sub_100055434(v68);
          }
          unsigned int v50 = v65;
        }
        else
        {
          unsigned int v68 = 0;
        }
        free(v68);
      }
    }
    else
    {
      int v52 = v51;
      bzero(v188, 0x400uLL);
      snprintf(v188, 0x400uLL, "%s/.GlobalPreferences.plist", __str);
      int v53 = open(v188, 514, 384);
      if (v53 != -1)
      {
        int v54 = v53;
        v171 = v50;
        vm_size_t v55 = vm_page_size;
        int v56 = malloc_type_malloc(vm_page_size, 0x3E5EBCBuLL);
        if (!v56)
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v57 = (id)qword_1000E4060;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)v189 = 0;
            unsigned int v58 = sub_100055404(1);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v59 = v58;
            }
            else {
              unsigned int v59 = v58 & 0xFFFFFFFE;
            }
            if (v59)
            {
              LOWORD(v183) = 0;
              CFNumberRef v60 = (const char *)_os_log_send_and_compose_impl();
              CFTypeRef v61 = (char *)v60;
              if (v60) {
                sub_100055434(v60);
              }
            }
            else
            {
              CFTypeRef v61 = 0;
            }
            free(v61);
          }
        }
        for (off_t i = 0; ; i += v81)
        {
          ssize_t v80 = pread(v52, v56, v55, i);
          if (!v80) {
            break;
          }
          ssize_t v81 = v80;
          if (v80 == -1)
          {
            __error();
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            int v84 = v171;
            v90 = (id)qword_1000E4060;
            if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_203;
            }
            uint64_t v183 = 0;
            int v91 = sub_100055404(1);
            if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT)) {
              v91 &= ~1u;
            }
            if (v91)
            {
LABEL_175:
              v93 = v90;
              v94 = __error();
              v95 = strerror(*v94);
              *(_DWORD *)v189 = 136315138;
              *(void *)&v189[4] = v95;
              v96 = (char *)_os_log_send_and_compose_impl();

              if (v96) {
                sub_100055434(v96);
              }
LABEL_202:
              free(v96);
              goto LABEL_203;
            }
LABEL_187:
            v96 = 0;
            goto LABEL_202;
          }
          ssize_t v82 = pwrite(v54, v56, v80, i);
          if (v82 == -1)
          {
            __error();
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            int v84 = v171;
            v90 = (id)qword_1000E4060;
            if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_203;
            }
            uint64_t v183 = 0;
            int v92 = sub_100055404(1);
            if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT)) {
              v92 &= ~1u;
            }
            if (v92) {
              goto LABEL_175;
            }
            goto LABEL_187;
          }
          uint64_t v83 = (char *)v82;
          if (v81 != v82)
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            v90 = (id)qword_1000E4060;
            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v183 = 0;
              unsigned int v97 = sub_100055404(1);
              if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v98 = v97;
              }
              else {
                unsigned int v98 = v97 & 0xFFFFFFFE;
              }
              if (v98)
              {
                *(_DWORD *)v189 = 134218240;
                *(void *)&v189[4] = v81;
                *(_WORD *)&v189[12] = 2048;
                v190 = v83;
                v99 = (const char *)_os_log_send_and_compose_impl();
                v96 = (char *)v99;
                if (v99) {
                  sub_100055434(v99);
                }
              }
              else
              {
                v96 = 0;
              }
              int v84 = v171;
              goto LABEL_202;
            }
            int v84 = v171;
LABEL_203:

            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            v100 = (id)qword_1000E4060;
            if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v183 = 0;
              unsigned int v107 = sub_100055404(1);
              if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v108 = v107;
              }
              else {
                unsigned int v108 = v107 & 0xFFFFFFFE;
              }
              if (v108)
              {
                *(_DWORD *)v189 = 136315394;
                *(void *)&v189[4] = v187;
                *(_WORD *)&v189[12] = 2080;
                v190 = v188;
                v109 = (const char *)_os_log_send_and_compose_impl();
                v110 = (char *)v109;
                if (v109) {
                  sub_100055434(v109);
                }
              }
              else
              {
                v110 = 0;
              }
              free(v110);
            }
            int v106 = 0;
            goto LABEL_215;
          }
        }
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        int v84 = v171;
        int v85 = (id)qword_1000E4060;
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v183 = 0;
          unsigned int v86 = sub_100055404(1);
          if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v87 = v86;
          }
          else {
            unsigned int v87 = v86 & 0xFFFFFFFE;
          }
          if (v87)
          {
            *(_DWORD *)v189 = 67109376;
            *(_DWORD *)&v189[4] = v49;
            *(_WORD *)&v189[8] = 1024;
            *(_DWORD *)&v189[10] = v172;
            id v88 = (const char *)_os_log_send_and_compose_impl();
            v89 = (char *)v88;
            if (v88) {
              sub_100055434(v88);
            }
          }
          else
          {
            v89 = 0;
          }
          free(v89);
        }

        if (!chown(v188, v49, v172))
        {
          int v106 = 1;
          goto LABEL_216;
        }
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        v100 = (id)qword_1000E4060;
        if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v183 = 0;
          int v101 = sub_100055404(1);
          if (!os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT)) {
            v101 &= ~1u;
          }
          if (v101)
          {
            v102 = v100;
            v103 = __error();
            v104 = strerror(*v103);
            *(_DWORD *)v189 = 136315394;
            *(void *)&v189[4] = v188;
            *(_WORD *)&v189[12] = 2080;
            v190 = v104;
            v105 = (char *)_os_log_send_and_compose_impl();

            if (v105) {
              sub_100055434(v105);
            }
          }
          else
          {
            v105 = 0;
          }
          free(v105);
        }
        int v106 = 1;
LABEL_215:

LABEL_216:
        close(v52);
        close(v54);
        CFBooleanRef v23 = kCFBooleanTrue;
        if (v106)
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          uint64_t v76 = (id)qword_1000E4060;
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)v188 = 0;
            unsigned int v111 = sub_100055404(1);
            uint64_t v76 = v76;
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v112 = v111;
            }
            else {
              unsigned int v112 = v111 & 0xFFFFFFFE;
            }
            if (v112)
            {
              LOWORD(v187[0]) = 0;
LABEL_225:
              v113 = (char *)_os_log_send_and_compose_impl();

              if (v113) {
                sub_100055434(v113);
              }
              goto LABEL_228;
            }
            goto LABEL_227;
          }
          goto LABEL_229;
        }
LABEL_136:
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        uint64_t v76 = (id)qword_1000E4060;
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)v188 = 0;
          unsigned int v77 = sub_100055404(1);
          uint64_t v76 = v76;
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v78 = v77;
          }
          else {
            unsigned int v78 = v77 & 0xFFFFFFFE;
          }
          if (v78)
          {
            LOWORD(v187[0]) = 0;
            goto LABEL_225;
          }
LABEL_227:

          v113 = 0;
LABEL_228:
          free(v113);
        }
LABEL_229:

        if ([(id)qword_1000E4030 splitUserVolumeEnabled])
        {
          v114 = sub_100019308(qword_1000E4318);
          id v175 = 0;
          unsigned __int8 v115 = [v114 createIdentityWithUUID:v10 passcode:0 existingSession:501 existingSessionPasscode:0 error:&v175];
          v116 = v175;

          if (v115)
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            v117 = (id)qword_1000E4060;
            if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)v188 = 0;
              unsigned int v118 = sub_100055404(1);
              v119 = v117;
              if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v120 = v118;
              }
              else {
                unsigned int v120 = v118 & 0xFFFFFFFE;
              }
              if (v120)
              {
                LOWORD(v187[0]) = 0;
                v121 = (char *)_os_log_send_and_compose_impl();

                if (v121) {
                  sub_100055434(v121);
                }
              }
              else
              {

                v121 = 0;
              }
              free(v121);
            }

            CFDictionarySetValue(v20, kUMUserSessionNeedsCryptoSetupKey, v23);
            goto LABEL_279;
          }
          CFRelease(v20);
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          v129 = (id)qword_1000E4060;
          if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
          {
            v187[0] = 0;
            int v130 = sub_100055404(1);
            v131 = v129;
            if (!os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT)) {
              v130 &= ~1u;
            }
            if (v130)
            {
              id v132 = [v116 code];
              *(_DWORD *)v188 = 134217984;
              *(void *)&v188[4] = v132;
              v133 = (char *)_os_log_send_and_compose_impl();

              if (v133) {
                sub_100055434(v133);
              }
            }
            else
            {

              v133 = 0;
            }
            free(v133);
          }
        }
        else
        {
          int KeybagForUser = MKBUserSessionCreateKeybagForUser();
          if (!KeybagForUser)
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            v116 = (id)qword_1000E4060;
            if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)v188 = 0;
              unsigned int v134 = sub_100055404(1);
              v116 = v116;
              if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v135 = v134;
              }
              else {
                unsigned int v135 = v134 & 0xFFFFFFFE;
              }
              if (v135)
              {
                LOWORD(v187[0]) = 0;
                v136 = (char *)_os_log_send_and_compose_impl();

                if (v136) {
                  sub_100055434(v136);
                }
              }
              else
              {

                v136 = 0;
              }
              free(v136);
            }
LABEL_279:

            CFDictionarySetValue(v20, @"MKBUserSessionFileSystemSet", v23);
            if (v174)
            {
              dword_1000E321C = -1;
              qword_1000E42E8 = v174;
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              v137 = (id)qword_1000E4060;
              if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
              {
                v187[0] = 0;
                unsigned int v138 = sub_100055404(1);
                v139 = v137;
                if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v140 = v138;
                }
                else {
                  unsigned int v140 = v138 & 0xFFFFFFFE;
                }
                if (v140)
                {
                  *(_DWORD *)v188 = 67109376;
                  *(_DWORD *)&v188[4] = v176;
                  *(_WORD *)&v188[8] = 2048;
                  *(void *)&v188[10] = v174;
                  v141 = (char *)_os_log_send_and_compose_impl();

                  if (v141) {
                    sub_100055434(v141);
                  }
                }
                else
                {

                  v141 = 0;
                }
                free(v141);
              }

              *(void *)v188 = v174 << 20;
              CFNumberRef v147 = CFNumberCreate(0, kCFNumberLongLongType, v188);
              CFDictionarySetValue(v20, kUMUserSessionQuotaLimitKey, v147);
              if (v147) {
                CFRelease(v147);
              }
              CFNumberRef v148 = CFNumberCreate(0, kCFNumberLongLongType, v188);
              CFDictionarySetValue(v20, kUMUserSessionEachUserSize, v148);
              if (v148) {
                CFRelease(v148);
              }
              CFNumberRef v149 = CFNumberCreate(0, kCFNumberIntType, &v176);
              v150 = kUMUserSessionTotalUsers;
            }
            else
            {
              int v176 = sub_10001EF10(v182, &v179, &v178, &v177);
              dword_1000E321C = v176;
              qword_1000E42E8 = v179;
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              v142 = (id)qword_1000E4060;
              if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
              {
                v187[0] = 0;
                unsigned int v143 = sub_100055404(1);
                v144 = v142;
                if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v145 = v143;
                }
                else {
                  unsigned int v145 = v143 & 0xFFFFFFFE;
                }
                if (v145)
                {
                  *(_DWORD *)v188 = 67109376;
                  *(_DWORD *)&v188[4] = v176;
                  *(_WORD *)&v188[8] = 2048;
                  *(void *)&v188[10] = v179;
                  v146 = (char *)_os_log_send_and_compose_impl();

                  if (v146) {
                    sub_100055434(v146);
                  }
                }
                else
                {

                  v146 = 0;
                }
                free(v146);
              }

              *(void *)v188 = 0;
              CFNumberRef v151 = CFNumberCreate(0, kCFNumberLongLongType, v188);
              CFDictionarySetValue(v20, kUMUserSessionQuotaLimitKey, v151);
              if (v151) {
                CFRelease(v151);
              }
              *(void *)v188 = 0;
              CFNumberRef v152 = CFNumberCreate(0, kCFNumberLongLongType, v188);
              CFDictionarySetValue(v20, kUMUserSessionQuotaSoftLimitKey, v152);
              if (v152) {
                CFRelease(v152);
              }
              *(void *)v188 = 0;
              CFNumberRef v153 = CFNumberCreate(0, kCFNumberLongLongType, v188);
              CFDictionarySetValue(v20, kUMUserSessionQuotaUsedKey, v153);
              if (v153) {
                CFRelease(v153);
              }
              CFNumberRef v154 = CFNumberCreate(0, kCFNumberIntType, &v182);
              CFDictionarySetValue(v20, kUMUserSessionReqTotalUsers, v154);
              if (v154) {
                CFRelease(v154);
              }
              CFNumberRef v155 = CFNumberCreate(0, kCFNumberIntType, &v176);
              CFDictionarySetValue(v20, kUMUserSessionTotalUsers, v155);
              if (v155) {
                CFRelease(v155);
              }
              CFNumberRef v156 = CFNumberCreate(0, kCFNumberLongLongType, &v179);
              CFDictionarySetValue(v20, kUMUserSessionEachUserSize, v156);
              if (v156) {
                CFRelease(v156);
              }
              CFNumberRef v157 = CFNumberCreate(0, kCFNumberLongLongType, &v178);
              CFDictionarySetValue(v20, kUMUserSessionTotalDataSize, v157);
              if (v157) {
                CFRelease(v157);
              }
              CFNumberRef v149 = CFNumberCreate(0, kCFNumberLongLongType, &v177);
              v150 = kUMUserSessionSystemLoginSize;
            }
            CFDictionarySetValue(v20, v150, v149);
            if (v149) {
              CFRelease(v149);
            }
            sub_100021EF4(v20, 1);
            sub_100021F8C();
            sub_10001A7BC();
            if (qword_1000E4078 != -1) {
              dispatch_once(&qword_1000E4078, &stru_1000D55B8);
            }
            v158 = (id)qword_1000E4070;
            if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)v188 = 0;
              unsigned int v159 = sub_100055404(1);
              v160 = v158;
              if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v161 = v159;
              }
              else {
                unsigned int v161 = v159 & 0xFFFFFFFE;
              }
              if (v161)
              {
                LODWORD(v187[0]) = 67109120;
                HIDWORD(v187[0]) = valuePtr;
                v162 = (char *)_os_log_send_and_compose_impl();

                if (v162) {
                  sub_100055434(v162);
                }
              }
              else
              {

                v162 = 0;
              }
              free(v162);
            }

            if (_SecSystemKeychainTransfer())
            {
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              v163 = (id)qword_1000E4060;
              if (!os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_356;
              }
              *(void *)v188 = 0;
              unsigned int v164 = sub_100055404(1);
              if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v165 = v164;
              }
              else {
                unsigned int v165 = v164 & 0xFFFFFFFE;
              }
              if (v165)
              {
                LOWORD(v187[0]) = 0;
                goto LABEL_352;
              }
            }
            else
            {
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              v163 = (id)qword_1000E4060;
              if (!os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_356;
              }
              *(void *)v188 = 0;
              unsigned int v166 = sub_100055404(1);
              if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v167 = v166;
              }
              else {
                unsigned int v167 = v166 & 0xFFFFFFFE;
              }
              if (v167)
              {
                LOWORD(v187[0]) = 0;
LABEL_352:
                v168 = (const char *)_os_log_send_and_compose_impl();
                v169 = (char *)v168;
                if (v168) {
                  sub_100055434(v168);
                }
                goto LABEL_355;
              }
            }
            v169 = 0;
LABEL_355:
            free(v169);
LABEL_356:

            goto LABEL_357;
          }
          int v123 = KeybagForUser;
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          v124 = (id)qword_1000E4060;
          if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)v188 = 0;
            unsigned int v125 = sub_100055404(1);
            v126 = v124;
            if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v127 = v125;
            }
            else {
              unsigned int v127 = v125 & 0xFFFFFFFE;
            }
            if (v127)
            {
              LODWORD(v187[0]) = 67109120;
              HIDWORD(v187[0]) = v123;
              v128 = (char *)_os_log_send_and_compose_impl();

              if (v128) {
                sub_100055434(v128);
              }
            }
            else
            {

              v128 = 0;
            }
            free(v128);
          }

          CFRelease(v20);
        }
LABEL_276:
        unsigned __int8 v20 = 0;
LABEL_357:

        return v20;
      }
      int v69 = *__error();
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFBooleanRef v23 = kCFBooleanTrue;
      uint64_t v70 = (id)qword_1000E4060;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v183 = 0;
        int v71 = sub_100055404(1);
        if (!os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT)) {
          v71 &= ~1u;
        }
        if (v71)
        {
          v173 = v10;
          unsigned int v72 = v50;
          v73 = v70;
          unsigned int v74 = strerror(v69);
          *(_DWORD *)v189 = 136315394;
          *(void *)&v189[4] = v188;
          *(_WORD *)&v189[12] = 2080;
          v190 = v74;
          unsigned int v75 = (char *)_os_log_send_and_compose_impl();

          if (v75) {
            sub_100055434(v75);
          }
          unsigned int v50 = v72;
          uint64_t v10 = v173;
        }
        else
        {
          unsigned int v75 = 0;
        }
        free(v75);
      }

      close(v52);
    }
    goto LABEL_136;
  }
  return v20;
}

uint64_t sub_100021768(const char *a1, char *a2, gid_t a3)
{
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  memset(&v42, 0, sizeof(v42));
  CFTypeID v6 = (id)qword_1000E4060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v48 = 0;
    unsigned int v7 = sub_100055404(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = v7 & 0xFFFFFFFE;
    }
    if (v8)
    {
      *(_DWORD *)CFNumberRef v43 = 136315138;
      *(void *)&int v43[4] = a1;
      int v9 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v10 = (char *)v9;
      if (v9) {
        sub_100055434(v9);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    free(v10);
  }

  if (!stat(a1, &v42)) {
    goto LABEL_44;
  }
  int v11 = *__error();
  if (v11 != 2)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v17 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_71;
    }
    uint64_t v48 = 0;
    int v18 = sub_100055404(1);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      v18 &= ~1u;
    }
    if (!v18) {
      goto LABEL_69;
    }
    goto LABEL_29;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v12 = (id)qword_1000E4060;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v48 = 0;
    unsigned int v13 = sub_100055404(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = v13 & 0xFFFFFFFE;
    }
    if (v14)
    {
      *(_DWORD *)CFNumberRef v43 = 136315138;
      *(void *)&int v43[4] = a1;
      uint64_t v15 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v16 = (char *)v15;
      if (v15) {
        sub_100055434(v15);
      }
    }
    else
    {
      unsigned int v16 = 0;
    }
    free(v16);
  }

  if ((mkdir(a1, 0x1C0u) & 0x80000000) == 0 || (int v11 = *__error(), v11 == 17))
  {
    if (chown(a1, (uid_t)a2, a3))
    {
      int v22 = *__error();
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFBooleanRef v23 = (id)qword_1000E4060;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v48 = 0;
        int v24 = sub_100055404(1);
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
          v24 &= ~1u;
        }
        if (v24)
        {
          CFStringRef v25 = v23;
          CFStringRef v26 = strerror(v22);
          *(_DWORD *)CFNumberRef v43 = 136315906;
          *(void *)&int v43[4] = a1;
          __int16 v44 = 1024;
          *(_DWORD *)unsigned int v45 = a2;
          *(_WORD *)&v45[4] = 1024;
          *(_DWORD *)&v45[6] = a3;
          __int16 v46 = 2080;
          unsigned int v47 = v26;
          CFUUIDRef v27 = (char *)_os_log_send_and_compose_impl();

          if (v27) {
            sub_100055434(v27);
          }
        }
        else
        {
          CFUUIDRef v27 = 0;
        }
        free(v27);
      }

      rmdir(a1);
      return 0;
    }
LABEL_44:
    sub_10001E338((uint64_t)a1, a2, a3);
    if (![(id)qword_1000E4030 splitUserVolumeEnabled]) {
      return 1;
    }
    CFStringRef v28 = +[NSString stringWithUTF8String:a1];
    CFUUIDRef v29 = sub_100019308(qword_1000E4318);
    id v41 = 0;
    unsigned int v30 = [v29 bootstrapVolumeWithMountPoint:v28 user:a2 error:&v41];
    id v31 = v41;

    if (v30)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFDateRef v32 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_74;
      }
      *(void *)CFNumberRef v43 = 0;
      unsigned int v33 = sub_100055404(1);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v34 = v33;
      }
      else {
        unsigned int v34 = v33 & 0xFFFFFFFE;
      }
      if (v34)
      {
        LOWORD(v48) = 0;
        CFStringRef v35 = (void *)_os_log_send_and_compose_impl();
        if (!v35) {
          goto LABEL_73;
        }
        goto LABEL_62;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFDateRef v32 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_74;
      }
      *(void *)CFNumberRef v43 = 0;
      int v36 = sub_100055404(1);
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
        v36 &= ~1u;
      }
      if (v36)
      {
        CFStringRef v37 = v32;
        unsigned int v38 = [v31 code];
        LODWORD(v48) = 67109120;
        HIDWORD(v48) = v38;
        CFStringRef v35 = (void *)_os_log_send_and_compose_impl();

        if (!v35)
        {
LABEL_73:
          free(v35);
LABEL_74:

          return 1;
        }
LABEL_62:
        sub_100055434((const char *)v35);
        goto LABEL_73;
      }
    }
    CFStringRef v35 = 0;
    goto LABEL_73;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v17 = (id)qword_1000E4060;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v48 = 0;
    int v39 = sub_100055404(1);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      v39 &= ~1u;
    }
    if (!v39)
    {
LABEL_69:
      CFNumberRef v21 = 0;
LABEL_70:
      free(v21);
      goto LABEL_71;
    }
LABEL_29:
    unsigned int v19 = v17;
    unsigned __int8 v20 = strerror(v11);
    *(_DWORD *)CFNumberRef v43 = 136315394;
    *(void *)&int v43[4] = a1;
    __int16 v44 = 2080;
    *(void *)unsigned int v45 = v20;
    CFNumberRef v21 = (void *)_os_log_send_and_compose_impl();

    if (v21) {
      sub_100055434((const char *)v21);
    }
    goto LABEL_70;
  }
LABEL_71:

  return 0;
}

void sub_100021EF4(void *value, int a2)
{
  unsigned int v4 = (__CFArray *)qword_1000E42B0;
  if (!qword_1000E42B0)
  {
    unsigned int v4 = sub_100088D04();
    qword_1000E42B0 = (uint64_t)v4;
  }
  CFArrayAppendValue(v4, value);
  qword_1000E42B8 = CFArrayGetCount((CFArrayRef)qword_1000E42B0);
  if (a2 == 1)
  {
    unsigned int v5 = sub_1000368A0((const __CFDictionary *)value);
    if (v5)
    {
      CFTypeID v6 = v5;
      sub_100036CF0((uint64_t)v5);
      CFRelease(v6);
    }
  }
}

void sub_100021F8C()
{
  if (qword_1000E42B0)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFDictionaryRef v0 = (id)qword_1000E4060;
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v1 = sub_100055404(1);
      if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v2 = v1;
      }
      else {
        unsigned int v2 = v1 & 0xFFFFFFFE;
      }
      if (v2)
      {
        int v3 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v4 = (char *)v3;
        if (v3) {
          sub_100055434(v3);
        }
      }
      else
      {
        unsigned int v4 = 0;
      }
      free(v4);
    }

    if (CFArrayGetCount((CFArrayRef)qword_1000E42B0) >= 1)
    {
      CFIndex v5 = 0;
      do
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42B0, v5);
        if (ValueAtIndex)
        {
          CFTypeID v7 = CFGetTypeID(ValueAtIndex);
          if (v7 == CFDictionaryGetTypeID())
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            unsigned int v8 = (id)qword_1000E4060;
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v9 = sub_100055404(1);
              if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v10 = v9;
              }
              else {
                unsigned int v10 = v9 & 0xFFFFFFFE;
              }
              if (v10)
              {
                int v11 = (const char *)_os_log_send_and_compose_impl();
                unsigned int v12 = (char *)v11;
                if (v11) {
                  sub_100055434(v11);
                }
              }
              else
              {
                unsigned int v12 = 0;
              }
              free(v12);
            }
          }
        }
        ++v5;
      }
      while (CFArrayGetCount((CFArrayRef)qword_1000E42B0) > v5);
    }
  }
}

NSObject *sub_10002221C(const __CFDictionary *a1)
{
  unsigned int v1 = (void *)sub_100022354(a1);
  unsigned int v2 = v1;
  if (v1)
  {
    int v3 = [v1 objectForKeyedSubscript:kUMUserSessionShortNameKey];
    unsigned int v4 = v3;
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v3 = (id)qword_1000E4060;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = sub_100055404(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v6 = v5;
      }
      else {
        unsigned int v6 = v5 & 0xFFFFFFFE;
      }
      if (v6)
      {
        CFTypeID v7 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v8 = (char *)v7;
        if (v7) {
          sub_100055434(v7);
        }
      }
      else
      {
        unsigned int v8 = 0;
      }
      free(v8);
    }
    unsigned int v4 = 0;
  }

  return v4;
}

CFTypeRef sub_100022354(const __CFDictionary *a1)
{
  if (CFDictionaryContainsKey(a1, kUMUserSessionIDKey))
  {
    int v2 = sub_1000885F0(a1, kUMUserSessionIDKey);
    if (v2 != -1)
    {
      sub_100056848(qword_1000E4038, v2);
      return (CFTypeRef)objc_claimAutoreleasedReturnValue();
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v5 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_50;
    }
    unsigned int v6 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = v6 & 0xFFFFFFFE;
    }
    if (v7) {
      goto LABEL_46;
    }
LABEL_48:
    int v17 = 0;
LABEL_49:
    free(v17);
LABEL_50:

    return 0;
  }
  if (CFDictionaryContainsKey(a1, kUMUserSessionAlternateDSIDKey))
  {
    unsigned int v4 = (void *)sub_100088788(a1, kUMUserSessionAlternateDSIDKey);
    if (v4)
    {
      sub_100056538(qword_1000E4038, v4);
      return (CFTypeRef)objc_claimAutoreleasedReturnValue();
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v5 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_50;
    }
    unsigned int v9 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v10 = v9;
    }
    else {
      unsigned int v10 = v9 & 0xFFFFFFFE;
    }
    if (!v10) {
      goto LABEL_48;
    }
    goto LABEL_46;
  }
  if (CFDictionaryContainsKey(a1, kUMUserSessionUUIDKey))
  {
    unsigned int v8 = (void *)sub_100088788(a1, kUMUserSessionUUIDKey);
    if (v8)
    {
      sub_1000566C0(qword_1000E4038, v8);
      return (CFTypeRef)objc_claimAutoreleasedReturnValue();
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v5 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_50;
    }
    unsigned int v12 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = v12 & 0xFFFFFFFE;
    }
    if (!v13) {
      goto LABEL_48;
    }
LABEL_46:
    unsigned int v16 = (const char *)_os_log_send_and_compose_impl();
    int v17 = (char *)v16;
    if (v16) {
      sub_100055434(v16);
    }
    goto LABEL_49;
  }
  if (!CFDictionaryContainsKey(a1, kUMUserSessionNameKey)) {
    return 0;
  }
  CFStringRef v11 = (const __CFString *)sub_100088788(a1, kUMUserSessionNameKey);
  if (!v11)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v5 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_50;
    }
    unsigned int v14 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v15 = v14;
    }
    else {
      unsigned int v15 = v14 & 0xFFFFFFFE;
    }
    if (v15) {
      goto LABEL_46;
    }
    goto LABEL_48;
  }

  return sub_10001A324(v11);
}

uint64_t sub_100022720(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (a4) {
    *a4 = 45;
  }
  return 0;
}

uint64_t sub_100022734(const __CFString *a1, _DWORD *a2)
{
  int v136 = 0;
  if (![(id)qword_1000E4030 splitUserVolumeEnabled])
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v9 = (id)qword_1000E4060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v134 = 0;
      unsigned int v10 = sub_100055404(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        LOWORD(v137) = 0;
        goto LABEL_19;
      }
LABEL_149:
      unsigned int v13 = 0;
LABEL_150:
      free(v13);
    }
LABEL_151:

    int v136 = 0;
    if (!a2) {
      return 1;
    }
LABEL_152:
    *a2 = v136;
    return 1;
  }
  char v135 = 1;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v4 = (id)qword_1000E4060;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v134 = 0;
    unsigned int v5 = sub_100055404(1);
    unsigned int v6 = v4;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v7 = v5;
    }
    else {
      unsigned int v7 = v5 & 0xFFFFFFFE;
    }
    if (v7)
    {
      LOWORD(v137) = 0;
      LODWORD(v131) = 2;
      int v130 = &v137;
      unsigned int v8 = (char *)_os_log_send_and_compose_impl();

      if (v8) {
        sub_100055434(v8);
      }
    }
    else
    {

      unsigned int v8 = 0;
    }
    free(v8);
  }

  int v14 = sub_100080C94(&v136, &v135);
  if (v14)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v15 = (id)qword_1000E4060;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v134 = 0;
      unsigned int v16 = sub_100055404(1);
      unsigned int v15 = v15;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
        LOWORD(v137) = 0;
        LODWORD(v131) = 2;
        int v130 = &v137;
        goto LABEL_41;
      }
      goto LABEL_43;
    }
    goto LABEL_45;
  }
  if (!sub_100023FBC())
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v9 = (id)qword_1000E4060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v134 = 0;
      unsigned int v61 = sub_100055404(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v62 = v61;
      }
      else {
        unsigned int v62 = v61 & 0xFFFFFFFE;
      }
      if (v62)
      {
        LOWORD(v137) = 0;
LABEL_19:
        unsigned int v12 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v13 = (char *)v12;
        if (v12) {
          sub_100055434(v12);
        }
        goto LABEL_150;
      }
      goto LABEL_149;
    }
    goto LABEL_151;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v15 = (id)qword_1000E4060;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v134 = 0;
    unsigned int v18 = sub_100055404(1);
    unsigned int v15 = v15;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v18 & 0xFFFFFFFE;
    }
    if (v19)
    {
      LOWORD(v137) = 0;
      LODWORD(v131) = 2;
      int v130 = &v137;
LABEL_41:
      unsigned __int8 v20 = (char *)_os_log_send_and_compose_impl();

      if (v20) {
        sub_100055434(v20);
      }
      goto LABEL_44;
    }
LABEL_43:

    unsigned __int8 v20 = 0;
LABEL_44:
    free(v20);
  }
LABEL_45:

  uint64_t v21 = sub_100088F04();
  if ((v21 - 1) > 4)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v22 = (id)qword_1000E4060;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v134 = 0;
      unsigned int v25 = sub_100055404(1);
      int v22 = v22;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v26 = v25;
      }
      else {
        unsigned int v26 = v25 & 0xFFFFFFFE;
      }
      if (v26)
      {
        LOWORD(v137) = 0;
        LODWORD(v131) = 2;
        int v130 = &v137;
LABEL_62:
        CFUUIDRef v27 = (char *)_os_log_send_and_compose_impl();

        if (v27) {
          sub_100055434(v27);
        }
        goto LABEL_65;
      }
LABEL_64:

      CFUUIDRef v27 = 0;
LABEL_65:
      free(v27);
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v22 = (id)qword_1000E4060;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v134 = 0;
      unsigned int v23 = sub_100055404(1);
      int v22 = v22;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v24 = v23;
      }
      else {
        unsigned int v24 = v23 & 0xFFFFFFFE;
      }
      if (v24)
      {
        int v137 = 67109120;
        int v138 = v21;
        LODWORD(v131) = 8;
        int v130 = &v137;
        goto LABEL_62;
      }
      goto LABEL_64;
    }
  }

  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFStringRef v28 = (id)qword_1000E4060;
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v134 = 0;
    unsigned int v29 = sub_100055404(1);
    unsigned int v30 = v28;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v31 = v29;
    }
    else {
      unsigned int v31 = v29 & 0xFFFFFFFE;
    }
    if (v31)
    {
      LOWORD(v137) = 0;
      LODWORD(v131) = 2;
      int v130 = &v137;
      CFDateRef v32 = (char *)_os_log_send_and_compose_impl();

      if (v32) {
        sub_100055434(v32);
      }
    }
    else
    {

      CFDateRef v32 = 0;
    }
    free(v32);
  }

  if (v21 == 1)
  {
    sub_100019810("debug panic boot arg umd-migration-debug=1 (before calling transcribe)");
    goto LABEL_285;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v33 = (id)qword_1000E4060;
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v134 = 0;
    unsigned int v34 = sub_100055404(1);
    CFStringRef v35 = v33;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v36 = v34;
    }
    else {
      unsigned int v36 = v34 & 0xFFFFFFFE;
    }
    if (v36)
    {
      LOWORD(v137) = 0;
      LODWORD(v131) = 2;
      int v130 = &v137;
      CFStringRef v37 = (char *)_os_log_send_and_compose_impl();

      if (v37) {
        sub_100055434(v37);
      }
    }
    else
    {

      CFStringRef v37 = 0;
    }
    free(v37);
  }

  if (v14)
  {
    int v136 = 0;
    int v38 = sub_100080D14(&v136);
    BOOL v39 = qword_1000E4068 == -1;
    if (!v38) {
      goto LABEL_288;
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v40 = (id)qword_1000E4060;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v134 = 0;
      unsigned int v41 = sub_100055404(1);
      unsigned int v40 = v40;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v42 = v41;
      }
      else {
        unsigned int v42 = v41 & 0xFFFFFFFE;
      }
      if (v42)
      {
        LOWORD(v137) = 0;
        LODWORD(v131) = 2;
        int v130 = &v137;
        goto LABEL_107;
      }
      goto LABEL_109;
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v40 = (id)qword_1000E4060;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v134 = 0;
      unsigned int v43 = sub_100055404(1);
      unsigned int v40 = v40;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v44 = v43;
      }
      else {
        unsigned int v44 = v43 & 0xFFFFFFFE;
      }
      if (v44)
      {
        LOWORD(v137) = 0;
        LODWORD(v131) = 2;
        int v130 = &v137;
LABEL_107:
        unsigned int v45 = (char *)_os_log_send_and_compose_impl();

        if (v45) {
          sub_100055434(v45);
        }
        goto LABEL_110;
      }
LABEL_109:

      unsigned int v45 = 0;
LABEL_110:
      free(v45);
    }
  }

  if (v21 == 2)
  {
LABEL_285:
    sub_100019810("debug panic boot arg umd-migration-debug=2 (after calling transcribe)", v130, v131);
    goto LABEL_286;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  __int16 v46 = (id)qword_1000E4060;
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v134 = 0;
    unsigned int v47 = sub_100055404(1);
    uint64_t v48 = v46;
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v49 = v47;
    }
    else {
      unsigned int v49 = v47 & 0xFFFFFFFE;
    }
    if (v49)
    {
      LOWORD(v137) = 0;
      LODWORD(v131) = 2;
      int v130 = &v137;
      unsigned int v50 = (char *)_os_log_send_and_compose_impl();

      if (v50) {
        sub_100055434(v50);
      }
    }
    else
    {

      unsigned int v50 = 0;
    }
    free(v50);
  }

  if (sub_10007F4E0())
  {
    bytes[0] = 0;
    CFDataRef v51 = CFDataCreate(kCFAllocatorDefault, bytes, 1);
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v52 = (id)qword_1000E4060;
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v134 = 0;
      unsigned int v53 = sub_100055404(1);
      int v54 = v52;
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v55 = v53;
      }
      else {
        unsigned int v55 = v53 & 0xFFFFFFFE;
      }
      if (v55)
      {
        LOWORD(v137) = 0;
        LODWORD(v131) = 2;
        int v130 = &v137;
        int v56 = (char *)_os_log_send_and_compose_impl();

        if (v56) {
          sub_100055434(v56);
        }
      }
      else
      {

        int v56 = 0;
      }
      free(v56);
    }

    int v136 = 0;
    int v64 = sub_10007FA74(a1, (uint64_t)v51, 1, &v136);
    if (v51) {
      CFRelease(v51);
    }
    BOOL v65 = qword_1000E4068 == -1;
    if (!v64) {
      goto LABEL_299;
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v57 = (id)qword_1000E4060;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v134 = 0;
      unsigned int v66 = sub_100055404(1);
      unsigned int v59 = v57;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v67 = v66;
      }
      else {
        unsigned int v67 = v66 & 0xFFFFFFFE;
      }
      if (v67)
      {
        LOWORD(v137) = 0;
        LODWORD(v131) = 2;
        int v130 = &v137;
LABEL_167:
        unsigned int v68 = (char *)_os_log_send_and_compose_impl();

        if (v68) {
          sub_100055434(v68);
        }
        goto LABEL_170;
      }
      goto LABEL_169;
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v57 = (id)qword_1000E4060;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v134 = 0;
      unsigned int v58 = sub_100055404(1);
      unsigned int v59 = v57;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v60 = v58;
      }
      else {
        unsigned int v60 = v58 & 0xFFFFFFFE;
      }
      if (v60)
      {
        LOWORD(v137) = 0;
        LODWORD(v131) = 2;
        int v130 = &v137;
        goto LABEL_167;
      }
LABEL_169:

      unsigned int v68 = 0;
LABEL_170:
      free(v68);
    }
  }

  if (v21 == 3)
  {
LABEL_286:
    sub_100019810("debug panic boot arg umd-migration-debug=3 (after calling bind of SDV)", v130, v131);
    goto LABEL_287;
  }
  if (dword_1000E42C0 != 1)
  {
    *(_DWORD *)bytes = 0;
    char v132 = 1;
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v74 = (id)qword_1000E4060;
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v134 = 0;
      unsigned int v75 = sub_100055404(1);
      uint64_t v76 = v74;
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v77 = v75;
      }
      else {
        unsigned int v77 = v75 & 0xFFFFFFFE;
      }
      if (v77)
      {
        LOWORD(v137) = 0;
        LODWORD(v131) = 2;
        int v130 = &v137;
        unsigned int v78 = (char *)_os_log_send_and_compose_impl();

        if (v78) {
          sub_100055434(v78);
        }
      }
      else
      {

        unsigned int v78 = 0;
      }
      free(v78);
    }

    if (sub_100080CD4((int *)bytes, &v132))
    {
      int v136 = 0;
      if (!sub_1000810F8(0, &v136))
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        v121 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_334;
        }
        uint64_t v134 = 0;
        unsigned int v125 = sub_100055404(1);
        uint64_t v21 = v121;
        if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v126 = v125;
        }
        else {
          unsigned int v126 = v125 & 0xFFFFFFFE;
        }
        if (v126) {
          goto LABEL_331;
        }

        unsigned int v127 = 0;
        goto LABEL_333;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      int v85 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_234;
      }
      uint64_t v134 = 0;
      unsigned int v86 = sub_100055404(1);
      int v85 = v85;
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v87 = v86;
      }
      else {
        unsigned int v87 = v86 & 0xFFFFFFFE;
      }
      if (v87)
      {
        LOWORD(v137) = 0;
        LODWORD(v131) = 2;
        int v130 = &v137;
        goto LABEL_230;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      int v85 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_234;
      }
      uint64_t v134 = 0;
      unsigned int v88 = sub_100055404(1);
      int v85 = v85;
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v89 = v88;
      }
      else {
        unsigned int v89 = v88 & 0xFFFFFFFE;
      }
      if (v89)
      {
        LOWORD(v137) = 0;
        LODWORD(v131) = 2;
        int v130 = &v137;
LABEL_230:
        v90 = (char *)_os_log_send_and_compose_impl();

        if (v90) {
          sub_100055434(v90);
        }
        goto LABEL_233;
      }
    }

    v90 = 0;
LABEL_233:
    free(v90);
LABEL_234:

    if (v21 == 4) {
      goto LABEL_310;
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v91 = (id)qword_1000E4060;
    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v134 = 0;
      unsigned int v92 = sub_100055404(1);
      v93 = v91;
      if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v94 = v92;
      }
      else {
        unsigned int v94 = v92 & 0xFFFFFFFE;
      }
      if (v94)
      {
        LOWORD(v137) = 0;
        LODWORD(v131) = 2;
        int v130 = &v137;
        v95 = (char *)_os_log_send_and_compose_impl();

        if (v95) {
          sub_100055434(v95);
        }
      }
      else
      {

        v95 = 0;
      }
      free(v95);
    }

    int v136 = 0;
    int v96 = sub_100081A00("/var/mobile", &v136);
    BOOL v97 = qword_1000E4068 == -1;
    if (!v96) {
      goto LABEL_311;
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v79 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_259;
    }
    uint64_t v134 = 0;
    unsigned int v98 = sub_100055404(1);
    ssize_t v81 = v79;
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v99 = v98;
    }
    else {
      unsigned int v99 = v98 & 0xFFFFFFFE;
    }
    if (!v99) {
      goto LABEL_257;
    }
    LOWORD(v137) = 0;
    LODWORD(v131) = 2;
    int v130 = &v137;
LABEL_255:
    v100 = (char *)_os_log_send_and_compose_impl();

    if (v100) {
      sub_100055434(v100);
    }
    goto LABEL_258;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v69 = (id)qword_1000E4060;
  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v134 = 0;
    unsigned int v70 = sub_100055404(1);
    int v71 = v69;
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v72 = v70;
    }
    else {
      unsigned int v72 = v70 & 0xFFFFFFFE;
    }
    if (v72)
    {
      LOWORD(v137) = 0;
      LODWORD(v131) = 2;
      int v130 = &v137;
      v73 = (char *)_os_log_send_and_compose_impl();

      if (v73) {
        sub_100055434(v73);
      }
    }
    else
    {

      v73 = 0;
    }
    free(v73);
  }

  if (!sub_1000820D8(1, &v136))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v79 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_259;
    }
    uint64_t v134 = 0;
    unsigned int v83 = sub_100055404(1);
    ssize_t v81 = v79;
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v84 = v83;
    }
    else {
      unsigned int v84 = v83 & 0xFFFFFFFE;
    }
    if (!v84) {
      goto LABEL_257;
    }
    int v137 = 67109120;
    int v138 = v136;
    LODWORD(v131) = 8;
    int v130 = &v137;
    goto LABEL_255;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v79 = (id)qword_1000E4060;
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v134 = 0;
    unsigned int v80 = sub_100055404(1);
    ssize_t v81 = v79;
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v82 = v80;
    }
    else {
      unsigned int v82 = v80 & 0xFFFFFFFE;
    }
    if (v82)
    {
      LOWORD(v137) = 0;
      LODWORD(v131) = 2;
      int v130 = &v137;
      goto LABEL_255;
    }
LABEL_257:

    v100 = 0;
LABEL_258:
    free(v100);
  }
LABEL_259:

  int v136 = 0;
  if (v21 == 5)
  {
LABEL_287:
    sub_100019810("debug panic boot arg umd-migration-debug=5 (after calling setLastUserOnVolume)", v130, v131);
LABEL_288:
    if (v39) {
      goto LABEL_290;
    }
    while (1)
    {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
LABEL_290:
      unsigned int v111 = (id)qword_1000E4060;
      if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v134 = 0;
        uint64_t v21 = sub_100055404(1);
        BOOL v112 = os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT);
        v113 = 0;
        if (v112) {
          int v114 = v21;
        }
        else {
          int v114 = v21 & 0xFFFFFFFE;
        }
        if (v114)
        {
          int v137 = 67109120;
          int v138 = v136;
          LODWORD(v131) = 8;
          unsigned __int8 v115 = (const char *)_os_log_send_and_compose_impl();
          v113 = 0;
          if (v115)
          {
            uint64_t v21 = (uint64_t)v115;
            sub_100055434(v115);
            v113 = (void *)v21;
          }
        }
        free(v113);
      }

      sub_100019810("VolumeMigration-Step1: APFSVolumeTranscribePFK failed with error:%d, bailing", v136);
LABEL_299:
      if (!v65) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      v116 = (id)qword_1000E4060;
      if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v134 = 0;
        uint64_t v21 = sub_100055404(1);
        BOOL v117 = os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT);
        unsigned int v118 = 0;
        if (v117) {
          int v119 = v21;
        }
        else {
          int v119 = v21 & 0xFFFFFFFE;
        }
        if (v119)
        {
          int v137 = 67109120;
          int v138 = v136;
          LODWORD(v131) = 8;
          unsigned int v120 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v118 = 0;
          if (v120)
          {
            uint64_t v21 = (uint64_t)v120;
            sub_100055434(v120);
            unsigned int v118 = (void *)v21;
          }
        }
        free(v118);
      }

      sub_100019810("VolumeMigration-Step2: APFSVolumeEnableUserProtectionWithOptions failed with %d, bailing", v136);
LABEL_310:
      sub_100019810("debug panic boot arg umd-migration-debug=4 (after calling UserVolume MigrateMediaKey)", v130, v131);
LABEL_311:
      if (!v97) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      v121 = (id)qword_1000E4060;
      if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v134 = 0;
        unsigned int v122 = sub_100055404(1);
        uint64_t v21 = v121;
        if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v123 = v122;
        }
        else {
          unsigned int v123 = v122 & 0xFFFFFFFE;
        }
        if (v123)
        {
          int v137 = 67109120;
          int v138 = v136;
          v128 = (const char *)_os_log_send_and_compose_impl();

          v124 = 0;
          if (v128)
          {
            sub_100055434(v128);
            v124 = (char *)v128;
          }
        }
        else
        {

          v124 = 0;
        }
        free(v124);
      }

      sub_100019810("VolumeMigration-Step4: Setting Last booted User as Primary User failed with error:%d", v136);
LABEL_331:
      int v137 = 67109120;
      int v138 = v136;
      LODWORD(v131) = 8;
      v129 = (const char *)_os_log_send_and_compose_impl();

      unsigned int v127 = 0;
      if (v129)
      {
        sub_100055434(v129);
        unsigned int v127 = (char *)v129;
      }
LABEL_333:
      free(v127);
LABEL_334:

      sub_100019810("VolumeMigration-Step3: Migrating UserVolume Media Key failed with error:%d, bailing", v136);
    }
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v101 = (id)qword_1000E4060;
  if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v134 = 0;
    unsigned int v102 = sub_100055404(1);
    v103 = v101;
    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v104 = v102;
    }
    else {
      unsigned int v104 = v102 & 0xFFFFFFFE;
    }
    if (v104)
    {
      LOWORD(v137) = 0;
      v105 = (char *)_os_log_send_and_compose_impl();

      if (v105) {
        sub_100055434(v105);
      }
    }
    else
    {

      v105 = 0;
    }
    free(v105);
  }

  sub_10002417C();
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v106 = (id)qword_1000E4060;
  if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v134 = 0;
    unsigned int v107 = sub_100055404(1);
    unsigned int v108 = v106;
    if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v109 = v107;
    }
    else {
      unsigned int v109 = v107 & 0xFFFFFFFE;
    }
    if (v109)
    {
      LOWORD(v137) = 0;
      v110 = (char *)_os_log_send_and_compose_impl();

      if (v110) {
        sub_100055434(v110);
      }
    }
    else
    {

      v110 = 0;
    }
    free(v110);
  }

  if (a2) {
    goto LABEL_152;
  }
  return 1;
}

id sub_100023FBC()
{
  CFDictionaryRef v0 = sub_100018F6C(qword_1000E4318);
  id v1 = [v0 fileExistsAtPath:@"/private/var//keybags/umVolumeMigration-inprogress.kb" isDirectory:0];

  if (v1)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v2 = (id)qword_1000E4060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4)
      {
LABEL_17:
        unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v8 = (char *)v7;
        if (v7) {
          sub_100055434(v7);
        }
        goto LABEL_20;
      }
LABEL_19:
      unsigned int v8 = 0;
LABEL_20:
      free(v8);
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v2 = (id)qword_1000E4060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v6 = v5;
      }
      else {
        unsigned int v6 = v5 & 0xFFFFFFFE;
      }
      if (v6) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }

  return v1;
}

id sub_10002417C()
{
  CFDictionaryRef v0 = sub_100018F6C(qword_1000E4318);
  id v1 = [v0 removeFileAtPath:@"/private/var//keybags/umVolumeMigration-inprogress.kb" error:0];

  if (v1)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v2 = (id)qword_1000E4060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4)
      {
LABEL_17:
        unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v8 = (char *)v7;
        if (v7) {
          sub_100055434(v7);
        }
        goto LABEL_20;
      }
LABEL_19:
      unsigned int v8 = 0;
LABEL_20:
      free(v8);
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v2 = (id)qword_1000E4060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v6 = v5;
      }
      else {
        unsigned int v6 = v5 & 0xFFFFFFFE;
      }
      if (v6) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }

  return v1;
}

BOOL sub_10002433C(uint64_t a1)
{
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v2 = (id)qword_1000E4060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      int v17 = 136315138;
      uint64_t v18 = a1;
      unsigned int v5 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  int v16 = 0;
  int v7 = sub_100080A4C(a1, &v16);
  if (v7)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v8 = (id)qword_1000E4060;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v9 = sub_100055404(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v10 = v9;
      }
      else {
        unsigned int v10 = v9 & 0xFFFFFFFE;
      }
      if (v10)
      {
        int v17 = 136315138;
        uint64_t v18 = a1;
        goto LABEL_29;
      }
      goto LABEL_31;
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v8 = (id)qword_1000E4060;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v11 = sub_100055404(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v12 = v11;
      }
      else {
        unsigned int v12 = v11 & 0xFFFFFFFE;
      }
      if (v12)
      {
        int v17 = 136315394;
        uint64_t v18 = a1;
        __int16 v19 = 1024;
        int v20 = v16;
LABEL_29:
        unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
        int v14 = (char *)v13;
        if (v13) {
          sub_100055434(v13);
        }
        goto LABEL_32;
      }
LABEL_31:
      int v14 = 0;
LABEL_32:
      free(v14);
    }
  }

  return v7 != 0;
}

__CFDictionary *sub_100024618(const __CFDictionary *a1, UInt8 *a2, CFIndex a3, int *a4)
{
  uint64_t v335 = 0;
  int v334 = 0;
  if (dword_1000E42C0 != 1 && !_os_feature_enabled_impl())
  {
    int v26 = 45;
LABEL_573:
    int v52 = 0;
    if (a4 && v26)
    {
      int v52 = 0;
      *a4 = v26;
    }
    return v52;
  }
  CFDictionaryRef v8 = (const __CFDictionary *)sub_100022354(a1);
  CFDictionaryRef v9 = v8;
  bytes = a2;
  CFIndex v332 = a3;
  if (!v8)
  {
    if (dword_1000E42C0 == 1)
    {
      CFDictionaryRef v330 = a1;
      if (dword_1000E321C != -1)
      {
        if (!dword_1000E321C || !qword_1000E42B8 || qword_1000E42B8 != dword_1000E321C + 1) {
          goto LABEL_227;
        }
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        uint64_t v21 = (id)qword_1000E4060;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)buffer = 0;
          unsigned int v22 = sub_100055404(1);
          unsigned int v23 = v21;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v24 = v22;
          }
          else {
            unsigned int v24 = v22 & 0xFFFFFFFE;
          }
          if (v24)
          {
            v340.f_bsize = 67109376;
            v340.f_iosize = dword_1000E321C;
            LOWORD(v340.f_blocks) = 2048;
            *(uint64_t *)((char *)&v340.f_blocks + 2) = qword_1000E42B8;
            unsigned int v25 = (char *)_os_log_send_and_compose_impl();

            if (v25) {
              sub_100055434(v25);
            }
          }
          else
          {

            unsigned int v25 = 0;
          }
          free(v25);
        }

        if (sub_1000283A0() == 1)
        {
          if (qword_1000E42B8 == dword_1000E321C + 1)
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            CFDateRef v32 = (id)qword_1000E4060;
            if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_188;
            }
            *(void *)&v340.f_bsize = 0;
            unsigned int v79 = sub_100055404(1);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v80 = v79;
            }
            else {
              unsigned int v80 = v79 & 0xFFFFFFFE;
            }
            if (!v80) {
              goto LABEL_186;
            }
            *(_WORD *)buffer = 0;
            goto LABEL_50;
          }
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          CFDictionaryRef v9 = 0;
          unsigned int v62 = (id)qword_1000E4060;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_201;
          }
          *(void *)&v340.f_bsize = 0;
          unsigned int v83 = sub_100055404(1);
          int v64 = v62;
          if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v84 = v83;
          }
          else {
            unsigned int v84 = v83 & 0xFFFFFFFE;
          }
          if (v84)
          {
            *(_WORD *)buffer = 0;
LABEL_197:
            int v85 = (char *)_os_log_send_and_compose_impl();

            if (v85) {
              sub_100055434(v85);
            }
            goto LABEL_200;
          }
          goto LABEL_199;
        }
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        CFDateRef v32 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_188;
        }
        *(void *)&v340.f_bsize = 0;
        unsigned int v81 = sub_100055404(1);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v82 = v81;
        }
        else {
          unsigned int v82 = v81 & 0xFFFFFFFE;
        }
        if (!v82) {
          goto LABEL_186;
        }
        *(_WORD *)buffer = 0;
        goto LABEL_50;
      }
      if (!qword_1000E42E8) {
        goto LABEL_227;
      }
      memset(&v340, 0, 512);
      strcpy(buffer, "/private/var");
      int v43 = statfs(buffer, &v340);
      if (qword_1000E42B8 == 16)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v44 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_149;
        }
        *(void *)&v340.f_bsize = 0;
        unsigned int v45 = sub_100055404(1);
        unsigned int v44 = v44;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v46 = v45;
        }
        else {
          unsigned int v46 = v45 & 0xFFFFFFFE;
        }
        if (v46)
        {
          *(_WORD *)buffer = 0;
          goto LABEL_106;
        }
      }
      else
      {
        if (v43) {
          unint64_t v58 = 0;
        }
        else {
          unint64_t v58 = (int64_t)(v340.f_bfree * v340.f_bsize) / 0x100000;
        }
        if (qword_1000E42E8 <= v58)
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v62 = (id)qword_1000E4060;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_201;
          }
          *(void *)&v340.f_bsize = 0;
          unsigned int v63 = sub_100055404(1);
          int v64 = v62;
          if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v65 = v63;
          }
          else {
            unsigned int v65 = v63 & 0xFFFFFFFE;
          }
          if (v65)
          {
            *(_WORD *)buffer = 0;
            goto LABEL_197;
          }
          goto LABEL_199;
        }
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v44 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_149;
        }
        *(void *)&v340.f_bsize = 0;
        unsigned int v59 = sub_100055404(1);
        unsigned int v44 = v44;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v60 = v59;
        }
        else {
          unsigned int v60 = v59 & 0xFFFFFFFE;
        }
        if (v60)
        {
          *(_WORD *)buffer = 0;
LABEL_106:
          unsigned int v61 = (char *)_os_log_send_and_compose_impl();

          if (v61) {
            sub_100055434(v61);
          }
          goto LABEL_148;
        }
      }

      unsigned int v61 = 0;
LABEL_148:
      free(v61);
LABEL_149:

      if (sub_1000283A0())
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v62 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_201;
        }
        *(void *)&v340.f_bsize = 0;
        unsigned int v75 = sub_100055404(1);
        int v64 = v62;
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v76 = v75;
        }
        else {
          unsigned int v76 = v75 & 0xFFFFFFFE;
        }
        if (v76)
        {
          *(_WORD *)buffer = 0;
          goto LABEL_197;
        }
LABEL_199:

        int v85 = 0;
LABEL_200:
        free(v85);
LABEL_201:

        goto LABEL_227;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFDateRef v32 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_188;
      }
      *(void *)&v340.f_bsize = 0;
      unsigned int v77 = sub_100055404(1);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v78 = v77;
      }
      else {
        unsigned int v78 = v77 & 0xFFFFFFFE;
      }
      if (!v78) {
        goto LABEL_186;
      }
      *(_WORD *)buffer = 0;
LABEL_50:
      CFStringRef v35 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v36 = (char *)v35;
      if (v35) {
        sub_100055434(v35);
      }
      goto LABEL_187;
    }
    if (_os_feature_enabled_impl())
    {
      if (qword_1000E42B8 < 15)
      {
        CFDictionaryRef v330 = a1;
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v47 = (id)qword_1000E4060;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)&v340.f_bsize = 0;
          unsigned int v48 = sub_100055404(1);
          unsigned int v49 = v47;
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v50 = v48;
          }
          else {
            unsigned int v50 = v48 & 0xFFFFFFFE;
          }
          if (v50)
          {
            *(_DWORD *)buffer = 67109120;
            *(_DWORD *)&buffer[4] = qword_1000E42B8 + 1;
            CFDataRef v51 = (char *)_os_log_send_and_compose_impl();

            if (v51) {
              sub_100055434(v51);
            }
          }
          else
          {

            CFDataRef v51 = 0;
          }
          free(v51);
        }

        if (!dword_1000E42C0)
        {
          dword_1000E42C0 = 2;
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v70 = (id)qword_1000E4060;
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)&v340.f_bsize = 0;
            unsigned int v71 = sub_100055404(1);
            unsigned int v72 = v70;
            if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v73 = v71;
            }
            else {
              unsigned int v73 = v71 & 0xFFFFFFFE;
            }
            if (v73)
            {
              *(_WORD *)buffer = 0;
              unsigned int v74 = (char *)_os_log_send_and_compose_impl();

              if (v74) {
                sub_100055434(v74);
              }
            }
            else
            {

              unsigned int v74 = 0;
            }
            free(v74);
          }

          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v86 = (id)qword_1000E4060;
          if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)&v340.f_bsize = 0;
            unsigned int v87 = sub_100055404(1);
            unsigned int v88 = v86;
            if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v89 = v87;
            }
            else {
              unsigned int v89 = v87 & 0xFFFFFFFE;
            }
            if (v89)
            {
              *(_WORD *)buffer = 0;
              v90 = (char *)_os_log_send_and_compose_impl();

              if (v90) {
                sub_100055434(v90);
              }
            }
            else
            {

              v90 = 0;
            }
            free(v90);
          }

          [(id)qword_1000E4030 createVolumeMountsDir:@"/var/Users"];
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          int v91 = (id)qword_1000E4060;
          if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)&v340.f_bsize = 0;
            unsigned int v92 = sub_100055404(1);
            v93 = v91;
            if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v94 = v92;
            }
            else {
              unsigned int v94 = v92 & 0xFFFFFFFE;
            }
            if (v94)
            {
              *(_WORD *)buffer = 0;
              v95 = (char *)_os_log_send_and_compose_impl();

              if (v95) {
                sub_100055434(v95);
              }
            }
            else
            {

              v95 = 0;
            }
            free(v95);
          }

          UMLSetInternalLogHandlers();
        }
LABEL_227:
        v329 = a4;
        if (dword_1000E42C0 == 2) {
          int v96 = 503;
        }
        else {
          int v96 = 502;
        }
        if (qword_1000E42B0)
        {
          *(_DWORD *)int valuePtr = 0;
          do
          {
            int v97 = v96;
            if (CFArrayGetCount((CFArrayRef)qword_1000E42B0) < 1) {
              break;
            }
            CFIndex v98 = 0;
            char v99 = 0;
            do
            {
              CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42B0, v98);
              CFTypeID v101 = CFGetTypeID(ValueAtIndex);
              if (v101 == CFDictionaryGetTypeID())
              {
                CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, kUMUserSessionIDKey);
                if (Value
                  && (v103 = Value, CFTypeID v104 = CFGetTypeID(Value), v104 == CFNumberGetTypeID())
                  && CFNumberGetValue(v103, kCFNumberIntType, valuePtr))
                {
                  if (*(_DWORD *)valuePtr == v97) {
                    char v99 = 1;
                  }
                }
                else
                {
                  if (qword_1000E4068 != -1) {
                    dispatch_once(&qword_1000E4068, &stru_1000D5598);
                  }
                  v105 = (id)qword_1000E4060;
                  if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
                  {
                    *(void *)&v340.f_bsize = 0;
                    unsigned int v106 = sub_100055404(1);
                    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v107 = v106;
                    }
                    else {
                      unsigned int v107 = v106 & 0xFFFFFFFE;
                    }
                    if (v107)
                    {
                      *(_DWORD *)buffer = 67109120;
                      *(_DWORD *)&buffer[4] = v97;
                      unsigned int v108 = (const char *)_os_log_send_and_compose_impl();
                      unsigned int v109 = (char *)v108;
                      if (v108) {
                        sub_100055434(v108);
                      }
                    }
                    else
                    {
                      unsigned int v109 = 0;
                    }
                    free(v109);
                  }
                }
              }
              ++v98;
            }
            while (CFArrayGetCount((CFArrayRef)qword_1000E42B0) > v98);
            int v96 = v97 + 1;
          }
          while (v99);
        }
        else
        {
          int v97 = v96;
        }
        HIDWORD(v335) = v97;
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        a4 = v329;
        a1 = v330;
        v110 = (id)qword_1000E4060;
        if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)&v340.f_bsize = 0;
          unsigned int v111 = sub_100055404(1);
          BOOL v112 = v110;
          if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v113 = v111;
          }
          else {
            unsigned int v113 = v111 & 0xFFFFFFFE;
          }
          if (v113)
          {
            *(_DWORD *)buffer = 67109120;
            *(_DWORD *)&buffer[4] = HIDWORD(v335);
            int v114 = (char *)_os_log_send_and_compose_impl();

            if (v114) {
              sub_100055434(v114);
            }
          }
          else
          {

            int v114 = 0;
          }
          free(v114);
        }

        int v52 = sub_100088C68();
        CFNumberRef v115 = CFNumberCreate(0, kCFNumberIntType, (char *)&v335 + 4);
        CFDictionarySetValue(v52, kUMUserSessionIDKey, v115);
        CFRelease(v115);
        LODWORD(v335) = HIDWORD(v335);
        CFNumberRef v116 = CFNumberCreate(0, kCFNumberIntType, &v335);
        CFDictionarySetValue(v52, kUMUserSessionGroupIDKey, v116);
        CFRelease(v116);
        CFDictionarySetValue(v52, kUMUserSessionTypeKey, kUMUserSessionManagedDevice);
        ++qword_1000E3228;
        CFNumberRef v117 = CFNumberCreate(0, kCFNumberLongLongType, &qword_1000E3228);
        CFDictionarySetValue(v52, kUMUserSessionAPNSIDKey, v117);
        CFRelease(v117);
        if (dword_1000E42C0 == 1) {
          snprintf((char *)&v340, 0x400uLL, "euser%d");
        }
        else {
          snprintf((char *)&v340, 0x400uLL, "user%d");
        }
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v118 = (id)qword_1000E4060;
        if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)int valuePtr = 0;
          unsigned int v119 = sub_100055404(1);
          unsigned int v120 = v118;
          if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v121 = v119;
          }
          else {
            unsigned int v121 = v119 & 0xFFFFFFFE;
          }
          if (v121)
          {
            *(_DWORD *)buffer = 136315138;
            *(void *)&buffer[4] = &v340;
            LODWORD(v328) = 12;
            v327 = buffer;
            unsigned int v122 = (char *)_os_log_send_and_compose_impl();

            if (v122) {
              sub_100055434(v122);
            }
          }
          else
          {

            unsigned int v122 = 0;
          }
          free(v122);
          a1 = v330;
        }

        CFStringRef v123 = CFStringCreateWithCString(0, (const char *)&v340, 0x8000100u);
        CFDictionarySetValue(v52, kUMUserSessionShortNameKey, v123);
        v124 = kUMUserSessionNameKey;
        CFTypeID TypeID = CFStringGetTypeID();
        if (!sub_1000281F0(v52, a1, v124, TypeID)) {
          CFDictionarySetValue(v52, kUMUserSessionNameKey, v123);
        }
        unsigned int v126 = kUMUserSessionFirstNameKey;
        CFTypeID v127 = CFStringGetTypeID();
        sub_1000281F0(v52, a1, v126, v127);
        v128 = kUMUserSessionLastNameKey;
        CFTypeID v129 = CFStringGetTypeID();
        sub_1000281F0(v52, a1, v128, v129);
        int v130 = kUMUserSessionDisplayNameKey;
        CFTypeID v131 = CFStringGetTypeID();
        sub_1000281F0(v52, a1, v130, v131);
        if (_os_feature_enabled_impl())
        {
          if (!CFDictionaryContainsKey(v52, kUMUserSessionNameKey)) {
            CFDictionarySetValue(v52, kUMUserSessionNameKey, v123);
          }
          if (!CFDictionaryContainsKey(v52, kUMUserSessionDisplayNameKey)) {
            CFDictionarySetValue(v52, kUMUserSessionDisplayNameKey, v123);
          }
        }
        int v132 = CFDictionaryContainsKey(a1, kUMUserSessionLanguageKey);
        v133 = kUMUserSessionLanguageKey;
        if (v132)
        {
          CFTypeID v134 = CFStringGetTypeID();
          sub_1000281F0(v52, a1, v133, v134);
          if (!v123) {
            goto LABEL_291;
          }
        }
        else
        {
          CFDictionarySetValue(v52, kUMUserSessionLanguageKey, @"en_US");
          if (!v123)
          {
LABEL_291:
            if ((_os_feature_enabled_impl() & 1) != 0
              || (char v135 = kUMUserSessionUUIDKey,
                  CFTypeID v136 = CFStringGetTypeID(),
                  !sub_1000281F0(v52, a1, v135, v136)))
            {
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              int v137 = (id)qword_1000E4060;
              if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
              {
                CFDictionaryRef v138 = a1;
                *(void *)buffer = 0;
                unsigned int v139 = sub_100055404(1);
                unsigned int v140 = v137;
                if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v141 = v139;
                }
                else {
                  unsigned int v141 = v139 & 0xFFFFFFFE;
                }
                if (v141)
                {
                  *(_WORD *)int valuePtr = 0;
                  LODWORD(v328) = 2;
                  v327 = valuePtr;
                  v142 = (char *)_os_log_send_and_compose_impl();

                  if (v142) {
                    sub_100055434(v142);
                  }
                }
                else
                {

                  v142 = 0;
                }
                free(v142);
                a1 = v138;
              }

              CFUUIDRef v143 = CFUUIDCreate(0);
              CFStringRef v144 = CFUUIDCreateString(0, v143);
              CFDictionarySetValue(v52, kUMUserSessionUUIDKey, v144);
            }
            if (!CFDictionaryContainsKey(a1, kUMUserSessionAlternateDSIDKey)
              || (unsigned int v145 = kUMUserSessionAlternateDSIDKey,
                  CFTypeID v146 = CFStringGetTypeID(),
                  !sub_1000281F0(v52, a1, v145, v146)))
            {
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              CFNumberRef v147 = (id)qword_1000E4060;
              if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
              {
                CFDictionaryRef v148 = a1;
                *(void *)buffer = 0;
                unsigned int v149 = sub_100055404(1);
                v150 = v147;
                if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v151 = v149;
                }
                else {
                  unsigned int v151 = v149 & 0xFFFFFFFE;
                }
                if (v151)
                {
                  *(_WORD *)int valuePtr = 0;
                  LODWORD(v328) = 2;
                  v327 = valuePtr;
                  CFNumberRef v152 = (char *)_os_log_send_and_compose_impl();

                  if (v152) {
                    sub_100055434(v152);
                  }
                }
                else
                {

                  CFNumberRef v152 = 0;
                }
                free(v152);
                a1 = v148;
              }

              CFUUIDRef v153 = CFUUIDCreate(0);
              CFStringRef v154 = CFUUIDCreateString(0, v153);
              CFDictionarySetValue(v52, kUMUserSessionAlternateDSIDKey, v154);
              if (v153) {
                CFRelease(v153);
              }
              if (v154) {
                CFRelease(v154);
              }
            }
            if (CFDictionaryContainsKey(a1, kUMUserSessionFileInfoKey))
            {
              CFNumberRef v155 = kUMUserSessionFileInfoKey;
              CFTypeID v156 = CFStringGetTypeID();
              sub_1000281F0(v52, a1, v155, v156);
            }
            if (CFDictionaryContainsKey(a1, kUMUserSessionOpaqueDataKey))
            {
              CFNumberRef v157 = kUMUserSessionOpaqueDataKey;
              CFTypeID v158 = CFDataGetTypeID();
              sub_1000281F0(v52, a1, v157, v158);
            }
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            CFDateRef v160 = CFDateCreate(kCFAllocatorDefault, Current);
            CFDictionarySetValue(v52, kUMUserSessionCreateTimeStampKey, v160);
            CFDictionarySetValue(v52, kUMUserSessionLoginTimeStampKey, v160);
            if (v160) {
              CFRelease(v160);
            }
            CFDictionarySetValue(v52, kUMUserSessionForegroundKey, kCFBooleanFalse);
            if (HIDWORD(v335) == 502) {
              CFBooleanRef v161 = kCFBooleanTrue;
            }
            else {
              CFBooleanRef v161 = kCFBooleanFalse;
            }
            CFDictionarySetValue(v52, kUMUserSessionLoginUserKey, v161);
            CFDictionarySetValue(v52, kUMUserSessionDirtyKey, kCFBooleanFalse);
            CFDictionarySetValue(v52, kUMUserSessionDisabledKey, kCFBooleanFalse);
            BOOL v11 = 0;
            goto LABEL_334;
          }
        }
        CFRelease(v123);
        goto LABEL_291;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFUUIDRef v27 = (id)qword_1000E4060;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)&v340.f_bsize = 0;
        unsigned int v28 = sub_100055404(1);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v29 = v28;
        }
        else {
          unsigned int v29 = v28 & 0xFFFFFFFE;
        }
        if (v29)
        {
          *(_WORD *)buffer = 0;
          unsigned int v30 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v31 = (char *)v30;
          if (v30) {
            sub_100055434(v30);
          }
        }
        else
        {
          unsigned int v31 = 0;
        }
        free(v31);
      }

      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v40 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_134;
      }
      *(void *)&v340.f_bsize = 0;
      unsigned int v66 = sub_100055404(1);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v67 = v66;
      }
      else {
        unsigned int v67 = v66 & 0xFFFFFFFE;
      }
      if (v67)
      {
        *(_WORD *)buffer = 0;
LABEL_130:
        unsigned int v68 = (const char *)_os_log_send_and_compose_impl();
        int v69 = (char *)v68;
        if (v68) {
          sub_100055434(v68);
        }
        goto LABEL_133;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v40 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_134;
      }
      *(void *)&v340.f_bsize = 0;
      unsigned int v41 = sub_100055404(1);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v42 = v41;
      }
      else {
        unsigned int v42 = v41 & 0xFFFFFFFE;
      }
      if (v42)
      {
        *(_WORD *)buffer = 0;
        goto LABEL_130;
      }
    }
    int v69 = 0;
LABEL_133:
    free(v69);
LABEL_134:

    int v26 = -12;
    goto LABEL_573;
  }
  unsigned int v10 = sub_100088734(v8, @"MKBUserSessionFileSystemSet");
  BOOL v11 = v10 != 0;
  int v12 = sub_1000885F0(v9, kUMUserSessionIDKey);
  HIDWORD(v335) = v12;
  LODWORD(v335) = sub_1000885F0(v9, kUMUserSessionGroupIDKey);
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v13 = (id)qword_1000E4060;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    CFDictionaryRef v14 = v9;
    unsigned int v15 = a4;
    CFDictionaryRef v16 = a1;
    *(void *)&v340.f_bsize = 0;
    unsigned int v17 = sub_100055404(1);
    uint64_t v18 = v13;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v19 = v17;
    }
    else {
      unsigned int v19 = v17 & 0xFFFFFFFE;
    }
    if (v19)
    {
      *(_DWORD *)buffer = 67109120;
      *(_DWORD *)&buffer[4] = v12;
      LODWORD(v328) = 8;
      v327 = buffer;
      int v20 = (char *)_os_log_send_and_compose_impl();

      if (v20) {
        sub_100055434(v20);
      }
    }
    else
    {

      int v20 = 0;
    }
    a1 = v16;
    free(v20);
    a4 = v15;
    CFDictionaryRef v9 = v14;
  }

  if (sub_100088734(v9, kUMUserSessionDisabledKey))
  {
    CFRelease(v9);
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFDateRef v32 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_188;
    }
    *(void *)&v340.f_bsize = 0;
    unsigned int v33 = sub_100055404(1);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v34 = v33;
    }
    else {
      unsigned int v34 = v33 & 0xFFFFFFFE;
    }
    if (v34)
    {
      *(_DWORD *)buffer = 67109120;
      *(_DWORD *)&buffer[4] = HIDWORD(v335);
      goto LABEL_50;
    }
LABEL_186:
    unsigned int v36 = 0;
LABEL_187:
    free(v36);
LABEL_188:

    int v26 = -4;
    goto LABEL_573;
  }
  if (!CFDictionaryContainsKey(v9, kUMUserSessionLanguageKey))
  {
    int v37 = CFDictionaryContainsKey(a1, kUMUserSessionLanguageKey);
    int v38 = kUMUserSessionLanguageKey;
    if (v37)
    {
      CFTypeID v39 = CFStringGetTypeID();
      sub_1000281F0(v9, a1, v38, v39);
    }
    else
    {
      CFDictionarySetValue(v9, kUMUserSessionLanguageKey, @"en_US");
    }
  }
  if (HIDWORD(v335) == 501)
  {
    int v52 = v9;
    if (v10) {
      goto LABEL_334;
    }
    CFDictionarySetValue(v9, @"MKBUserSessionFileSystemSet", kCFBooleanTrue);
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v53 = (id)qword_1000E4060;
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&v340.f_bsize = 0;
      unsigned int v54 = sub_100055404(1);
      unsigned int v55 = v53;
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v56 = v54;
      }
      else {
        unsigned int v56 = v54 & 0xFFFFFFFE;
      }
      if (v56)
      {
        *(_WORD *)buffer = 0;
        LODWORD(v328) = 2;
        v327 = buffer;
        unsigned int v57 = (char *)_os_log_send_and_compose_impl();

        if (v57) {
          sub_100055434(v57);
        }
      }
      else
      {

        unsigned int v57 = 0;
      }
      free(v57);
    }

    BOOL v11 = 1;
  }
  int v52 = v9;
LABEL_334:
  v162 = sub_100018600(qword_1000E4318);
  int v163 = sub_10001935C((uint64_t)v162);
  int v164 = HIDWORD(v335);

  if (v163 != v164) {
    CFDictionarySetValue(v52, kUMUserSessionForegroundKey, kCFBooleanFalse);
  }
  if (CFDictionaryContainsKey(a1, kUMUserSessionRequiresPasscodeKey)) {
    int v165 = sub_1000885F0(a1, kUMUserSessionRequiresPasscodeKey);
  }
  else {
    int v165 = 60;
  }
  unsigned int v166 = a4;
  int v334 = v165;
  if (!v11)
  {
    CFUUIDRef v169 = CFUUIDCreate(0);
    CFStringRef v170 = CFUUIDCreateString(0, v169);
    if (v169) {
      CFRelease(v169);
    }
    bzero(buffer, 0x400uLL);
    CFStringGetCString(v170, buffer, 1024, 0x8000100u);
    if ((_os_feature_enabled_impl() & 1) != 0 || dword_1000E42C0 == 1 && HIDWORD(v335) != 502)
    {
      LODWORD(v333[0]) = 0;
      if (!objc_msgSend((id)qword_1000E4030, "createVolumeWithSession:size:userName:error:forPersona:userDataVolume:", v52, qword_1000E42E8 << 20, v170, v333, 0, 1, v327, v328))
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        int v176 = (id)qword_1000E4060;
        if (os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)int valuePtr = 0;
          unsigned int v177 = sub_100055404(1);
          unint64_t v178 = v176;
          if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v179 = v177;
          }
          else {
            unsigned int v179 = v177 & 0xFFFFFFFE;
          }
          if (v179)
          {
            LODWORD(v338[0]) = 67109120;
            HIDWORD(v338[0]) = v333[0];
            gid_t v180 = (char *)_os_log_send_and_compose_impl();

            if (v180) {
              sub_100055434(v180);
            }
          }
          else
          {

            gid_t v180 = 0;
          }
          free(v180);
        }

        int v26 = v333[0];
        if (v52) {
          CFRelease(v52);
        }
        if (v170) {
          CFRelease(v170);
        }
        a4 = v166;
        goto LABEL_573;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      v171 = (id)qword_1000E4060;
      if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)int valuePtr = 0;
        unsigned int v172 = sub_100055404(1);
        v173 = v171;
        if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v174 = v172;
        }
        else {
          unsigned int v174 = v172 & 0xFFFFFFFE;
        }
        if (v174)
        {
          LOWORD(v338[0]) = 0;
          id v175 = (char *)_os_log_send_and_compose_impl();

          if (v175) {
            sub_100055434(v175);
          }
        }
        else
        {

          id v175 = 0;
        }
        free(v175);
      }

      bzero(&v340, 0x400uLL);
      if (_os_feature_enabled_impl()) {
        strcpy((char *)&v340, "/var/mobile");
      }
      else {
        snprintf((char *)&v340, 0x400uLL, "/var/Users/%s", buffer);
      }
      CFStringRef v216 = CFStringCreateWithCString(0, (const char *)&v340, 0x8000100u);
      CFDictionarySetValue(v52, kUMUserSessionLibinfoHomeDirKey, v216);
      if (v216) {
        CFRelease(v216);
      }
      bzero(&v340, 0x400uLL);
      snprintf((char *)&v340, 0x400uLL, "/private/var/Users/%s", buffer);
      CFStringRef v217 = CFStringCreateWithCString(0, (const char *)&v340, 0x8000100u);
      CFDictionarySetValue(v52, kUMUserSessionHomeDirKey, v217);
      if (v217) {
        CFRelease(v217);
      }
    }
    if (!CFDictionaryContainsKey(v52, kUMUserSessionUserVolumeTypeKey)) {
      CFDictionarySetValue(v52, kUMUserSessionUserVolumeTypeKey, (const void *)qword_1000E4050);
    }
    if (v170) {
      CFRelease(v170);
    }
    CFDataRef v218 = CFDataCreate(kCFAllocatorDefault, bytes, v332);
    BOOL v219 = sub_1000289D4(v52, (uint64_t)v218);
    if (v218) {
      CFRelease(v218);
    }
    if (v219)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      v220 = (id)qword_1000E4060;
      if (os_log_type_enabled(v220, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)int valuePtr = 0;
        unsigned int v221 = sub_100055404(1);
        v222 = v220;
        if (os_log_type_enabled(v222, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v223 = v221;
        }
        else {
          unsigned int v223 = v221 & 0xFFFFFFFE;
        }
        if (v223)
        {
          LOWORD(v338[0]) = 0;
          v224 = (char *)_os_log_send_and_compose_impl();

          if (v224) {
            sub_100055434(v224);
          }
        }
        else
        {

          v224 = 0;
        }
        free(v224);
      }

      if (!CFDictionaryContainsKey(v52, kUMUserSessionVolumeDeviceNodeKey))
      {
LABEL_518:
        v211 = &qword_1000E4000;
        if (dword_1000E42C0 != 1)
        {
LABEL_581:
          sub_100021768((const char *)&v340, (char *)HIDWORD(v335), v335);
          CFDictionarySetValue(v52, @"MKBUserSessionFileSystemSet", kCFBooleanTrue);
          goto LABEL_585;
        }
        if (v334 >= 1 && (CFNumberRef v240 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v334)) != 0)
        {
          CFNumberRef v241 = v240;
          CFDictionarySetValue(v52, kUMUserSessionRequiresPasscodeKey, v240);
          CFRelease(v241);
        }
        else
        {
          int v334 = 0;
        }
        v242 = sub_100088C68();
        v338[0] = v334;
        CFNumberRef v243 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, v338);
        if (v243)
        {
          CFNumberRef v244 = v243;
          CFDictionarySetValue(v242, @"GracePeriod", v243);
          CFRelease(v244);
        }
        int v245 = sub_1000A3510(-HIDWORD(v335), (uint64_t)bytes, v332, v242);
        if (v242) {
          CFRelease(v242);
        }
        if (v245)
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          v246 = (id)qword_1000E4060;
          if (!os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_580;
          }
          CFDictionaryRef v247 = v9;
          v333[0] = 0;
          unsigned int v248 = sub_100055404(1);
          v246 = v246;
          if (os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v249 = v248;
          }
          else {
            unsigned int v249 = v248 & 0xFFFFFFFE;
          }
          if (v249)
          {
            *(_DWORD *)int valuePtr = 67109632;
            *(_DWORD *)&valuePtr[4] = v334;
            *(_WORD *)&valuePtr[8] = 1024;
            *(_DWORD *)&valuePtr[10] = HIDWORD(v335);
            LOWORD(v337) = 1024;
            *(_DWORD *)((char *)&v337 + 2) = v245;
            v250 = (char *)_os_log_send_and_compose_impl();

            if (v250) {
              sub_100055434(v250);
            }
          }
          else
          {

            v250 = 0;
          }
          CFDictionaryRef v9 = v247;
        }
        else
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          v246 = (id)qword_1000E4060;
          if (!os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_580;
          }
          v333[0] = 0;
          unsigned int v251 = sub_100055404(1);
          v246 = v246;
          if (os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v252 = v251;
          }
          else {
            unsigned int v252 = v251 & 0xFFFFFFFE;
          }
          if (v252)
          {
            *(_DWORD *)int valuePtr = 67109376;
            *(_DWORD *)&valuePtr[4] = HIDWORD(v335);
            *(_WORD *)&valuePtr[8] = 1024;
            *(_DWORD *)&valuePtr[10] = v334;
            v250 = (char *)_os_log_send_and_compose_impl();

            if (v250) {
              sub_100055434(v250);
            }
          }
          else
          {

            v250 = 0;
          }
        }
        free(v250);
LABEL_580:

        v211 = &qword_1000E4000;
        goto LABEL_581;
      }
      if ([(id)qword_1000E4030 mountVolumeWithSession:v52 mountPath:0 error:0 forPersona:0])
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        v230 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_517;
        }
        *(void *)int valuePtr = 0;
        unsigned int v231 = sub_100055404(1);
        v230 = v230;
        if (os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v232 = v231;
        }
        else {
          unsigned int v232 = v231 & 0xFFFFFFFE;
        }
        if (v232)
        {
          LOWORD(v338[0]) = 0;
          goto LABEL_494;
        }
      }
      else
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        v230 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_517;
        }
        *(void *)int valuePtr = 0;
        unsigned int v233 = sub_100055404(1);
        v230 = v230;
        if (os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v234 = v233;
        }
        else {
          unsigned int v234 = v233 & 0xFFFFFFFE;
        }
        if (v234)
        {
          LOWORD(v338[0]) = 0;
LABEL_494:
          v235 = (char *)_os_log_send_and_compose_impl();

          if (v235) {
            sub_100055434(v235);
          }
          goto LABEL_516;
        }
      }

      v235 = 0;
LABEL_516:
      free(v235);
LABEL_517:

      goto LABEL_518;
    }
    LODWORD(v333[0]) = 0;
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v225 = (id)qword_1000E4060;
    if (os_log_type_enabled(v225, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)int valuePtr = 0;
      unsigned int v226 = sub_100055404(1);
      v227 = v225;
      if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v228 = v226;
      }
      else {
        unsigned int v228 = v226 & 0xFFFFFFFE;
      }
      if (v228)
      {
        LOWORD(v338[0]) = 0;
        v229 = (char *)_os_log_send_and_compose_impl();

        if (v229) {
          sub_100055434(v229);
        }
      }
      else
      {

        v229 = 0;
      }
      free(v229);
    }

    a4 = v166;
    if ([(id)qword_1000E4030 deleteVolumeWithSession:v52 error:v333])
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      v196 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_570;
      }
      *(void *)int valuePtr = 0;
      unsigned int v253 = sub_100055404(1);
      v196 = v196;
      if (os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v254 = v253;
      }
      else {
        unsigned int v254 = v253 & 0xFFFFFFFE;
      }
      if (v254)
      {
        LOWORD(v338[0]) = 0;
        goto LABEL_565;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      v196 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_570;
      }
      *(void *)int valuePtr = 0;
      unsigned int v255 = sub_100055404(1);
      v196 = v196;
      if (os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v256 = v255;
      }
      else {
        unsigned int v256 = v255 & 0xFFFFFFFE;
      }
      if (v256)
      {
        LODWORD(v338[0]) = 67109120;
        HIDWORD(v338[0]) = v333[0];
LABEL_565:
        v257 = (const char *)_os_log_send_and_compose_impl();

        if (v257) {
          sub_100055434(v257);
        }
        goto LABEL_568;
      }
    }

    v257 = 0;
LABEL_568:
    v236 = (char *)v257;
    goto LABEL_569;
  }
  if (bytes)
  {
    CFNumberRef v167 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v334);
    if (CFDictionaryContainsKey(v52, kUMUserSessionRequiresPasscodeKey))
    {
      int v168 = sub_1000885F0(v52, kUMUserSessionRequiresPasscodeKey);
      if (v168 != v334)
      {
        if (v334) {
          CFDictionaryReplaceValue(v52, kUMUserSessionRequiresPasscodeKey, v167);
        }
        else {
          CFDictionaryRemoveValue(v52, kUMUserSessionRequiresPasscodeKey);
        }
      }
    }
    else if (v334 >= 1)
    {
      CFDictionarySetValue(v52, kUMUserSessionRequiresPasscodeKey, v167);
    }
    if (v167) {
      CFRelease(v167);
    }
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  v181 = (id)qword_1000E4060;
  if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)int valuePtr = 0;
    unsigned int v182 = sub_100055404(1);
    uint64_t v183 = v181;
    if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v184 = v182;
    }
    else {
      unsigned int v184 = v182 & 0xFFFFFFFE;
    }
    if (v184)
    {
      v185 = "NULL";
      if (v332) {
        BOOL v186 = bytes == 0;
      }
      else {
        BOOL v186 = 1;
      }
      if (!v186) {
        v185 = "SECRET";
      }
      *(_DWORD *)buffer = 136315138;
      *(void *)&buffer[4] = v185;
      v187 = (char *)_os_log_send_and_compose_impl();

      if (v187) {
        sub_100055434(v187);
      }
    }
    else
    {

      v187 = 0;
    }
    free(v187);
  }
  CFDictionaryRef v188 = v9;

  CFDataRef v189 = CFDataCreate(kCFAllocatorDefault, bytes, v332);
  int v190 = sub_100029254(v52, (uint64_t)v189);
  if (v189) {
    CFRelease(v189);
  }
  if (!v190)
  {
    a4 = v166;
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v196 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_570;
    }
    *(void *)buffer = 0;
    unsigned int v197 = sub_100055404(1);
    v198 = v196;
    if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v199 = v197;
    }
    else {
      unsigned int v199 = v197 & 0xFFFFFFFE;
    }
    if (v199)
    {
      *(_WORD *)int valuePtr = 0;
      v200 = (const char *)_os_log_send_and_compose_impl();

      if (v200) {
        sub_100055434(v200);
      }
    }
    else
    {

      v200 = 0;
    }
    v236 = (char *)v200;
LABEL_569:
    free(v236);
LABEL_570:

    if (v52) {
      CFRelease(v52);
    }
    int v26 = 22;
    goto LABEL_573;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  v191 = (id)qword_1000E4060;
  if (os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)buffer = 0;
    unsigned int v192 = sub_100055404(1);
    v193 = v191;
    if (os_log_type_enabled(v193, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v194 = v192;
    }
    else {
      unsigned int v194 = v192 & 0xFFFFFFFE;
    }
    if (v194)
    {
      *(_WORD *)int valuePtr = 0;
      v195 = (char *)_os_log_send_and_compose_impl();

      if (v195) {
        sub_100055434(v195);
      }
    }
    else
    {

      v195 = 0;
    }
    free(v195);
  }

  v201 = sub_100018600(qword_1000E4318);
  if ((sub_1000192C0((uint64_t)v201) & 1) != 0 || HIDWORD(v335) != -1)
  {
    v202 = sub_100018600(qword_1000E4318);
    int v203 = sub_10001935C((uint64_t)v202);
    int v204 = HIDWORD(v335);

    BOOL v186 = v203 == v204;
    CFDictionaryRef v9 = v188;
    if (v186) {
      goto LABEL_418;
    }
    int v210 = CFDictionaryContainsKey(v52, kUMUserSessionVolumeDeviceNodeKey);
    v211 = &qword_1000E4000;
    if (!v210) {
      goto LABEL_585;
    }
    if ([(id)qword_1000E4030 mountVolumeWithSession:v52 mountPath:0 error:0 forPersona:0])
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      v212 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v212, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_584;
      }
      *(void *)buffer = 0;
      unsigned int v213 = sub_100055404(1);
      v214 = v212;
      if (os_log_type_enabled(v214, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v215 = v213;
      }
      else {
        unsigned int v215 = v213 & 0xFFFFFFFE;
      }
      if (v215)
      {
        *(_WORD *)int valuePtr = 0;
        goto LABEL_513;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      v212 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v212, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_584;
      }
      *(void *)buffer = 0;
      unsigned int v237 = sub_100055404(1);
      v214 = v212;
      if (os_log_type_enabled(v214, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v238 = v237;
      }
      else {
        unsigned int v238 = v237 & 0xFFFFFFFE;
      }
      if (v238)
      {
        *(_WORD *)int valuePtr = 0;
LABEL_513:
        v239 = (char *)_os_log_send_and_compose_impl();

        if (v239) {
          sub_100055434(v239);
        }
        goto LABEL_583;
      }
    }

    v239 = 0;
LABEL_583:
    free(v239);
    CFDictionaryRef v9 = v188;
LABEL_584:

    goto LABEL_585;
  }

  CFDictionaryRef v9 = v188;
LABEL_418:
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  v205 = (id)qword_1000E4060;
  if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)buffer = 0;
    unsigned int v206 = sub_100055404(1);
    v207 = v205;
    if (os_log_type_enabled(v207, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v208 = v206;
    }
    else {
      unsigned int v208 = v206 & 0xFFFFFFFE;
    }
    if (v208)
    {
      *(_WORD *)int valuePtr = 0;
      v209 = (char *)_os_log_send_and_compose_impl();

      if (v209) {
        sub_100055434(v209);
      }
    }
    else
    {

      v209 = 0;
    }
    free(v209);
    CFDictionaryRef v9 = v188;
  }

  v211 = &qword_1000E4000;
LABEL_585:
  CFStringRef v259 = (const __CFString *)sub_100088788(v52, kUMUserSessionHomeDirKey);
  sub_10007ED6C(v259, HIDWORD(v335), v335);
  if (*((_DWORD *)v211 + 176) != 1)
  {
    if (!_os_feature_enabled_impl()
      || (sub_100018600(qword_1000E4318),
          v266 = objc_claimAutoreleasedReturnValue(),
          int v267 = sub_10001935C((uint64_t)v266),
          int v268 = HIDWORD(v335),
          v266,
          v267 == v268))
    {
LABEL_674:
      if (v9) {
        return v52;
      }
      goto LABEL_675;
    }
    LODWORD(v338[0]) = 0;
    if ([(id)qword_1000E4030 unmountVolumeWithSession:v52 mountPath:0 error:v338 force:1])
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      v269 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_673;
      }
      *(void *)int valuePtr = 0;
      unsigned int v270 = sub_100055404(1);
      v269 = v269;
      if (os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v271 = v270;
      }
      else {
        unsigned int v271 = v270 & 0xFFFFFFFE;
      }
      if (v271)
      {
        LOWORD(v333[0]) = 0;
        goto LABEL_616;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      v269 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_673;
      }
      *(void *)int valuePtr = 0;
      unsigned int v272 = sub_100055404(1);
      v269 = v269;
      if (os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v273 = v272;
      }
      else {
        unsigned int v273 = v272 & 0xFFFFFFFE;
      }
      if (v273)
      {
        LOWORD(v333[0]) = 0;
LABEL_616:
        v274 = (char *)_os_log_send_and_compose_impl();

        if (v274) {
          sub_100055434(v274);
        }
        goto LABEL_641;
      }
    }

    v274 = 0;
LABEL_641:
    free(v274);
LABEL_673:

    goto LABEL_674;
  }
  if (!byte_1000E3220)
  {
LABEL_663:
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v269 = (id)qword_1000E4060;
    if (os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT))
    {
      CFDictionaryRef v292 = v9;
      v338[0] = 0;
      int v293 = sub_100055404(1);
      v294 = v269;
      if (!os_log_type_enabled(v294, OS_LOG_TYPE_DEFAULT)) {
        v293 &= ~1u;
      }
      if (v293)
      {
        int v295 = byte_1000E3220;
        unsigned int v296 = sub_100088734(v52, kUMUserSessionHasSyncBagKey);
        *(_DWORD *)int valuePtr = 67109376;
        *(_DWORD *)&valuePtr[4] = v295;
        *(_WORD *)&valuePtr[8] = 1024;
        *(_DWORD *)&valuePtr[10] = v296;
        v297 = (char *)_os_log_send_and_compose_impl();

        if (v297) {
          sub_100055434(v297);
        }
      }
      else
      {

        v297 = 0;
      }
      free(v297);
      CFDictionaryRef v9 = v292;
    }
    goto LABEL_673;
  }
  if (sub_100088734(v52, kUMUserSessionHasSyncBagKey) == 1)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v260 = (id)qword_1000E4060;
    if (os_log_type_enabled(v260, OS_LOG_TYPE_DEFAULT))
    {
      CFDictionaryRef v261 = v9;
      *(void *)int valuePtr = 0;
      unsigned int v262 = sub_100055404(1);
      v263 = v260;
      if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v264 = v262;
      }
      else {
        unsigned int v264 = v262 & 0xFFFFFFFE;
      }
      if (v264)
      {
        LOWORD(v338[0]) = 0;
        v265 = (char *)_os_log_send_and_compose_impl();

        if (v265) {
          sub_100055434(v265);
        }
      }
      else
      {

        v265 = 0;
      }
      free(v265);
      CFDictionaryRef v9 = v261;
    }

    if (sub_100088734(v52, kUMUserSessionHasSyncBagKey))
    {
      if (MKBUserSessionVerifySyncBagForUser())
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        v275 = (id)qword_1000E4060;
        if (os_log_type_enabled(v275, OS_LOG_TYPE_DEFAULT))
        {
          CFDictionaryRef v276 = v9;
          *(void *)int valuePtr = 0;
          unsigned int v277 = sub_100055404(1);
          v278 = v275;
          if (os_log_type_enabled(v278, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v279 = v277;
          }
          else {
            unsigned int v279 = v277 & 0xFFFFFFFE;
          }
          if (v279)
          {
            LODWORD(v338[0]) = 67109120;
            HIDWORD(v338[0]) = HIDWORD(v335);
            v280 = (char *)_os_log_send_and_compose_impl();

            if (v280) {
              sub_100055434(v280);
            }
          }
          else
          {

            v280 = 0;
          }
          free(v280);
          CFDictionaryRef v9 = v276;
        }

        CFDictionarySetValue(v52, kUMUserSessionHasSyncBagKey, kCFBooleanFalse);
        goto LABEL_661;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      v281 = (id)qword_1000E4060;
      if (os_log_type_enabled(v281, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)int valuePtr = 0;
        unsigned int v282 = sub_100055404(1);
        if (os_log_type_enabled(v281, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v283 = v282;
        }
        else {
          unsigned int v283 = v282 & 0xFFFFFFFE;
        }
        if (v283)
        {
          LOWORD(v338[0]) = 0;
          v284 = (const char *)_os_log_send_and_compose_impl();
          v285 = (char *)v284;
          if (v284) {
            sub_100055434(v284);
          }
        }
        else
        {
          v285 = 0;
        }
        free(v285);
      }
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v286 = (id)qword_1000E4060;
    if (os_log_type_enabled(v286, OS_LOG_TYPE_DEFAULT))
    {
      CFDictionaryRef v287 = v9;
      *(void *)int valuePtr = 0;
      unsigned int v288 = sub_100055404(1);
      v289 = v286;
      if (os_log_type_enabled(v289, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v290 = v288;
      }
      else {
        unsigned int v290 = v288 & 0xFFFFFFFE;
      }
      if (v290)
      {
        LODWORD(v338[0]) = 67109120;
        HIDWORD(v338[0]) = HIDWORD(v335);
        v291 = (char *)_os_log_send_and_compose_impl();

        if (v291) {
          sub_100055434(v291);
        }
      }
      else
      {

        v291 = 0;
      }
      free(v291);
      CFDictionaryRef v9 = v287;
    }
  }
LABEL_661:
  if (!byte_1000E3220 || sub_100088734(v52, kUMUserSessionHasSyncBagKey)) {
    goto LABEL_663;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  v303 = (id)qword_1000E4060;
  if (os_log_type_enabled(v303, OS_LOG_TYPE_DEFAULT))
  {
    CFDictionaryRef v304 = v9;
    *(void *)int valuePtr = 0;
    unsigned int v305 = sub_100055404(1);
    v306 = v303;
    if (os_log_type_enabled(v306, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v307 = v305;
    }
    else {
      unsigned int v307 = v305 & 0xFFFFFFFE;
    }
    if (v307)
    {
      LODWORD(v338[0]) = 67109120;
      HIDWORD(v338[0]) = HIDWORD(v335);
      v308 = (char *)_os_log_send_and_compose_impl();

      if (v308) {
        sub_100055434(v308);
      }
    }
    else
    {

      v308 = 0;
    }
    free(v308);
    CFDictionaryRef v9 = v304;
  }

  if (sub_100029F9C(v52))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v269 = (id)qword_1000E4060;
    if (os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT))
    {
      CFDictionaryRef v316 = v9;
      *(void *)int valuePtr = 0;
      unsigned int v317 = sub_100055404(1);
      v318 = v269;
      if (os_log_type_enabled(v318, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v319 = v317;
      }
      else {
        unsigned int v319 = v317 & 0xFFFFFFFE;
      }
      if (v319)
      {
        LODWORD(v338[0]) = 67109120;
        HIDWORD(v338[0]) = HIDWORD(v335);
        v320 = (char *)_os_log_send_and_compose_impl();

        if (v320) {
          sub_100055434(v320);
        }
      }
      else
      {

        v320 = 0;
      }
      free(v320);
      CFDictionaryRef v9 = v316;
    }
    goto LABEL_673;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  v321 = (id)qword_1000E4060;
  if (os_log_type_enabled(v321, OS_LOG_TYPE_DEFAULT))
  {
    CFDictionaryRef v322 = v9;
    *(void *)int valuePtr = 0;
    unsigned int v323 = sub_100055404(1);
    v324 = v321;
    if (os_log_type_enabled(v324, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v325 = v323;
    }
    else {
      unsigned int v325 = v323 & 0xFFFFFFFE;
    }
    if (v325)
    {
      LODWORD(v338[0]) = 67109120;
      HIDWORD(v338[0]) = HIDWORD(v335);
      v326 = (char *)_os_log_send_and_compose_impl();

      if (v326) {
        sub_100055434(v326);
      }
    }
    else
    {

      v326 = 0;
    }
    free(v326);
    CFDictionaryRef v9 = v322;
  }

  CFDictionarySetValue(v52, kUMUserSessionHasSyncBagKey, kCFBooleanTrue);
  if (!v9)
  {
LABEL_675:
    sub_100021EF4(v52, 1);
    sub_100058010(qword_1000E4038, v52);
    sub_100021F8C();
    sub_10001A7BC();
    if (qword_1000E4078 != -1) {
      dispatch_once(&qword_1000E4078, &stru_1000D55B8);
    }
    v298 = (id)qword_1000E4070;
    if (os_log_type_enabled(v298, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)int valuePtr = 0;
      unsigned int v299 = sub_100055404(1);
      v300 = v298;
      if (os_log_type_enabled(v300, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v301 = v299;
      }
      else {
        unsigned int v301 = v299 & 0xFFFFFFFE;
      }
      if (v301)
      {
        LODWORD(v338[0]) = 67109120;
        HIDWORD(v338[0]) = HIDWORD(v335);
        v302 = (char *)_os_log_send_and_compose_impl();

        if (v302) {
          sub_100055434(v302);
        }
      }
      else
      {

        v302 = 0;
      }
      free(v302);
    }

    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v309 = (id)qword_1000E4060;
    if (os_log_type_enabled(v309, OS_LOG_TYPE_DEFAULT))
    {
      v338[0] = 0;
      unsigned int v310 = sub_100055404(1);
      v311 = v309;
      if (os_log_type_enabled(v311, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v312 = v310;
      }
      else {
        unsigned int v312 = v310 & 0xFFFFFFFE;
      }
      if (v312)
      {
        *(_DWORD *)int valuePtr = 136315394;
        *(void *)&valuePtr[4] = "loadUserSession";
        *(_WORD *)&valuePtr[12] = 2080;
        uint64_t v337 = kMobileKeyBagUserChangedNotificationToken;
        v313 = (char *)_os_log_send_and_compose_impl();

        if (v313) {
          sub_100055434(v313);
        }
      }
      else
      {

        v313 = 0;
      }
      free(v313);
    }

    v314 = sub_1000186E0(qword_1000E4318);
    v315 = +[NSString stringWithUTF8String:kMobileKeyBagUserChangedNotificationToken];
    [v314 post:v315];
  }
  return v52;
}

uint64_t sub_1000281F0(__CFDictionary *a1, CFDictionaryRef theDict, void *key, uint64_t a4)
{
  uint64_t result = CFDictionaryContainsKey(theDict, key);
  if (result)
  {
    CFNumberRef Value = CFDictionaryGetValue(theDict, key);
    if (CFGetTypeID(Value) == a4)
    {
      if (CFDictionaryContainsKey(a1, key)) {
        CFDictionaryReplaceValue(a1, key, Value);
      }
      else {
        CFDictionarySetValue(a1, key, Value);
      }
      return 1;
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v10 = (id)qword_1000E4060;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v11 = sub_100055404(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v12 = v11;
        }
        else {
          unsigned int v12 = v11 & 0xFFFFFFFE;
        }
        if (v12)
        {
          unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
          CFDictionaryRef v14 = (char *)v13;
          if (v13) {
            sub_100055434(v13);
          }
        }
        else
        {
          CFDictionaryRef v14 = 0;
        }
        free(v14);
      }

      return 0;
    }
  }
  return result;
}

uint64_t sub_1000283A0()
{
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int valuePtr = 0;
  CFDictionaryRef v0 = (id)qword_1000E4060;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v1 = sub_100055404(1);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v2 = v1;
    }
    else {
      unsigned int v2 = v1 & 0xFFFFFFFE;
    }
    if (v2)
    {
      LOWORD(v38) = 0;
      unsigned int v3 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v4 = (char *)v3;
      if (v3) {
        sub_100055434(v3);
      }
    }
    else
    {
      unsigned int v4 = 0;
    }
    free(v4);
  }

  if (!qword_1000E42D8)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v11 = (id)qword_1000E4060;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v12 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v12 & 0xFFFFFFFE;
      }
      if (v13)
      {
        LOWORD(v38) = 0;
        CFDictionaryRef v14 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v15 = (char *)v14;
        if (v14) {
          sub_100055434(v14);
        }
      }
      else
      {
        unsigned int v15 = 0;
      }
      free(v15);
    }

    return 0;
  }
  if (CFArrayGetCount((CFArrayRef)qword_1000E42D8) < 1) {
    return 0;
  }
  CFIndex v5 = 0;
  while (1)
  {
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42D8, v5);
    if (!ValueAtIndex) {
      goto LABEL_21;
    }
    CFNumberRef v7 = ValueAtIndex;
    CFTypeID v8 = CFGetTypeID(ValueAtIndex);
    if (v8 != CFNumberGetTypeID()) {
      goto LABEL_21;
    }
    if (!CFNumberGetValue(v7, kCFNumberIntType, &valuePtr)) {
      goto LABEL_21;
    }
    sub_100056848(qword_1000E4038, valuePtr);
    CFDictionaryRef v9 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    if (!v9) {
      goto LABEL_21;
    }
    CFDictionaryRef v10 = v9;
    if (!sub_100088734(v9, kUMUserSessionDirtyKey)) {
      break;
    }
    CFRelease(v10);
LABEL_21:
    if (CFArrayGetCount((CFArrayRef)qword_1000E42D8) <= ++v5) {
      return 0;
    }
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  uint64_t v18 = (id)qword_1000E4060;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v19 = sub_100055404(1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = v19 & 0xFFFFFFFE;
    }
    if (v20)
    {
      int v38 = 67109120;
      int v39 = valuePtr;
      uint64_t v21 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v22 = (char *)v21;
      if (v21) {
        sub_100055434(v21);
      }
    }
    else
    {
      unsigned int v22 = 0;
    }
    free(v22);
  }

  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v23 = (id)qword_1000E4060;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v24 = sub_100055404(1);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = v24 & 0xFFFFFFFE;
    }
    if (v25)
    {
      int v38 = 67109120;
      int v39 = valuePtr;
      int v26 = (const char *)_os_log_send_and_compose_impl();
      CFUUIDRef v27 = (char *)v26;
      if (v26) {
        sub_100055434(v26);
      }
    }
    else
    {
      CFUUIDRef v27 = 0;
    }
    free(v27);
  }

  if (sub_10002B234((uint64_t)v10) == 1)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v28 = (id)qword_1000E4060;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v29 = sub_100055404(1);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v30 = v29;
      }
      else {
        unsigned int v30 = v29 & 0xFFFFFFFE;
      }
      if (v30)
      {
        int v38 = 67109120;
        int v39 = valuePtr;
        unsigned int v31 = (const char *)_os_log_send_and_compose_impl();
        CFDateRef v32 = (char *)v31;
        if (v31) {
          sub_100055434(v31);
        }
      }
      else
      {
        CFDateRef v32 = 0;
      }
      free(v32);
    }
    uint64_t v16 = 1;
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v28 = (id)qword_1000E4060;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v33 = sub_100055404(1);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v34 = v33;
      }
      else {
        unsigned int v34 = v33 & 0xFFFFFFFE;
      }
      if (v34)
      {
        int v38 = 67109120;
        int v39 = valuePtr;
        CFStringRef v35 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v36 = (char *)v35;
        if (v35) {
          sub_100055434(v35);
        }
      }
      else
      {
        unsigned int v36 = 0;
      }
      free(v36);
    }
    uint64_t v16 = 0;
  }

  CFRelease(v10);
  return v16;
}

BOOL sub_1000289D4(const __CFDictionary *a1, uint64_t a2)
{
  unsigned int v4 = (void *)sub_100088788(a1, kUMUserSessionUUIDKey);
  int v5 = sub_1000885F0(a1, kMKBUserSessionIDKey);
  if (v4)
  {
    int v6 = v5;
    CFNumberRef v7 = sub_1000173F4((uint64_t)NSUUID, v4);
    if (v7)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFTypeID v8 = (id)qword_1000E4060;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)unsigned int v62 = 0;
        unsigned int v9 = sub_100055404(1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v10 = v9;
        }
        else {
          unsigned int v10 = v9 & 0xFFFFFFFE;
        }
        if (v10)
        {
          LOWORD(v61) = 0;
          unsigned int v11 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v12 = (char *)v11;
          if (v11) {
            sub_100055434(v11);
          }
        }
        else
        {
          unsigned int v12 = 0;
        }
        free(v12);
      }

      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v23 = (id)qword_1000E4060;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v61 = 0;
        unsigned int v24 = sub_100055404(1);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v25 = v24;
        }
        else {
          unsigned int v25 = v24 & 0xFFFFFFFE;
        }
        if (v25)
        {
          *(_DWORD *)unsigned int v62 = 138412546;
          *(void *)&v62[4] = v7;
          __int16 v63 = 1024;
          int v64 = v6;
          int v26 = (const char *)_os_log_send_and_compose_impl();
          CFUUIDRef v27 = (char *)v26;
          if (v26) {
            sub_100055434(v26);
          }
        }
        else
        {
          CFUUIDRef v27 = 0;
        }
        free(v27);
      }

      int v28 = _os_feature_enabled_impl();
      unsigned int v29 = sub_100019308(qword_1000E4318);
      unsigned int v30 = v29;
      if (v28)
      {
        unsigned int v60 = 0;
        unsigned __int8 v31 = [v29 createIdentityWithUUID:v7 passcode:0 existingSession:sub_100056B1C(qword_1000E4038) existingSessionPasscode:a2 error:&v60];
        CFDateRef v32 = v60;
      }
      else
      {
        unsigned int v59 = 0;
        unsigned __int8 v31 = [v29 createIdentityWithUUID:v7 passcode:a2 existingSession:502 existingSessionPasscode:0 error:&v59];
        CFDateRef v32 = v59;
      }
      unsigned int v13 = v32;

      if (v31)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v33 = (id)qword_1000E4060;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)unsigned int v62 = 0;
          unsigned int v34 = sub_100055404(1);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v35 = v34;
          }
          else {
            unsigned int v35 = v34 & 0xFFFFFFFE;
          }
          if (v35)
          {
            LOWORD(v61) = 0;
            unsigned int v36 = (const char *)_os_log_send_and_compose_impl();
            int v37 = (char *)v36;
            if (v36) {
              sub_100055434(v36);
            }
          }
          else
          {
            int v37 = 0;
          }
          free(v37);
        }

        if (_os_feature_enabled_impl()) {
          uint64_t v44 = 0;
        }
        else {
          uint64_t v44 = a2;
        }
        int v45 = sub_100029254(a1, v44);
        if (v45)
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v46 = (id)qword_1000E4060;
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)unsigned int v62 = 0;
            unsigned int v47 = sub_100055404(1);
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v48 = v47;
            }
            else {
              unsigned int v48 = v47 & 0xFFFFFFFE;
            }
            if (v48)
            {
              LOWORD(v61) = 0;
              unsigned int v49 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v50 = (char *)v49;
              if (v49) {
                sub_100055434(v49);
              }
            }
            else
            {
              unsigned int v50 = 0;
            }
            free(v50);
          }
        }
        else
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          CFDataRef v51 = (id)qword_1000E4060;
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)unsigned int v62 = 0;
            unsigned int v52 = sub_100055404(1);
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v53 = v52;
            }
            else {
              unsigned int v53 = v52 & 0xFFFFFFFE;
            }
            if (v53)
            {
              LOWORD(v61) = 0;
              unsigned int v54 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v55 = (char *)v54;
              if (v54) {
                sub_100055434(v54);
              }
            }
            else
            {
              unsigned int v55 = 0;
            }
            free(v55);
          }

          unsigned int v46 = sub_100019308(qword_1000E4318);
          unint64_t v58 = v13;
          [v46 deleteIdentity:v7 error:&v58];
          unsigned int v56 = v58;

          unsigned int v13 = v56;
        }
        BOOL v43 = v45 != 0;

        goto LABEL_104;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      int v38 = (id)qword_1000E4060;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v61 = 0;
        int v39 = sub_100055404(1);
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
          v39 &= ~1u;
        }
        if (v39)
        {
          unsigned int v40 = v38;
          id v41 = [v13 code];
          *(_DWORD *)unsigned int v62 = 138412802;
          *(void *)&v62[4] = v7;
          __int16 v63 = 1024;
          int v64 = v6;
          __int16 v65 = 2048;
          id v66 = v41;
          unsigned int v42 = (char *)_os_log_send_and_compose_impl();

          if (v42) {
            sub_100055434(v42);
          }
        }
        else
        {
          unsigned int v42 = 0;
        }
        free(v42);
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      uint64_t v18 = (id)qword_1000E4060;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)unsigned int v62 = 0;
        unsigned int v19 = sub_100055404(1);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v20 = v19;
        }
        else {
          unsigned int v20 = v19 & 0xFFFFFFFE;
        }
        if (v20)
        {
          LOWORD(v61) = 0;
          uint64_t v21 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v22 = (char *)v21;
          if (v21) {
            sub_100055434(v21);
          }
        }
        else
        {
          unsigned int v22 = 0;
        }
        free(v22);
      }

      unsigned int v13 = 0;
    }
    BOOL v43 = 0;
LABEL_104:

    goto LABEL_105;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v13 = (id)qword_1000E4060;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v62 = 0;
    unsigned int v14 = sub_100055404(1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v15 = v14;
    }
    else {
      unsigned int v15 = v14 & 0xFFFFFFFE;
    }
    if (v15)
    {
      LOWORD(v61) = 0;
      uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v17 = (char *)v16;
      if (v16) {
        sub_100055434(v16);
      }
    }
    else
    {
      unsigned int v17 = 0;
    }
    free(v17);
  }
  BOOL v43 = 0;
LABEL_105:

  return v43;
}

uint64_t sub_100029254(const __CFDictionary *a1, uint64_t a2)
{
  unsigned int v4 = (void *)sub_100088788(a1, kUMUserSessionUUIDKey);
  uint64_t v5 = sub_1000885F0(a1, kMKBUserSessionIDKey);
  if (v5 != sub_100056B1C(qword_1000E4038))
  {
    if (v4)
    {
      unsigned int v11 = sub_100088788(a1, kUMUserSessionVolumeDeviceNodeKey);
      if (v11)
      {
        unsigned int v12 = v11;
        uint64_t v13 = sub_1000173F4((uint64_t)NSUUID, v4);
        if (v13)
        {
          unsigned int v14 = v13;
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v15 = (id)qword_1000E4060;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)int v85 = 0;
            unsigned int v16 = sub_100055404(1);
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v17 = v16;
            }
            else {
              unsigned int v17 = v16 & 0xFFFFFFFE;
            }
            if (v17)
            {
              LOWORD(v86) = 0;
              uint64_t v18 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v19 = (char *)v18;
              if (v18) {
                sub_100055434(v18);
              }
            }
            else
            {
              unsigned int v19 = 0;
            }
            free(v19);
          }

          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          int v37 = (id)qword_1000E4060;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)int v85 = 0;
            unsigned int v38 = sub_100055404(1);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v39 = v38;
            }
            else {
              unsigned int v39 = v38 & 0xFFFFFFFE;
            }
            if (v39)
            {
              LODWORD(v86) = 67109120;
              HIDWORD(v86) = v5;
              unsigned int v40 = (const char *)_os_log_send_and_compose_impl();
              id v41 = (char *)v40;
              if (v40) {
                sub_100055434(v40);
              }
            }
            else
            {
              id v41 = 0;
            }
            free(v41);
          }

          unsigned int v42 = sub_100019308(qword_1000E4318);
          id v83 = 0;
          unsigned int v43 = [v42 loginIdentity:v14 intoSession:v5 passcode:a2 error:&v83];
          id v44 = v83;

          if (!v43)
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            unsigned int v50 = (id)qword_1000E4060;
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v86 = 0;
              int v51 = sub_100055404(1);
              if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT)) {
                v51 &= ~1u;
              }
              if (v51)
              {
                unsigned int v52 = v50;
                id v53 = [v44 code];
                *(_DWORD *)int v85 = 134217984;
                *(void *)&v85[4] = v53;
                unsigned int v54 = (char *)_os_log_send_and_compose_impl();

                if (v54) {
                  sub_100055434(v54);
                }
              }
              else
              {
                unsigned int v54 = 0;
              }
              free(v54);
            }

            uint64_t v27 = 0;
            id v26 = v44;
            goto LABEL_67;
          }
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          int v45 = (id)qword_1000E4060;
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)int v85 = 0;
            unsigned int v46 = sub_100055404(1);
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v47 = v46;
            }
            else {
              unsigned int v47 = v46 & 0xFFFFFFFE;
            }
            if (v47)
            {
              LOWORD(v86) = 0;
              unsigned int v48 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v49 = (char *)v48;
              if (v48) {
                sub_100055434(v48);
              }
            }
            else
            {
              unsigned int v49 = 0;
            }
            free(v49);
          }

          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v55 = (id)qword_1000E4060;
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v86 = 0;
            unsigned int v56 = sub_100055404(1);
            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v57 = v56;
            }
            else {
              unsigned int v57 = v56 & 0xFFFFFFFE;
            }
            if (v57)
            {
              *(_DWORD *)int v85 = 138412546;
              *(void *)&v85[4] = v12;
              *(_WORD *)&v85[12] = 1024;
              *(_DWORD *)&v85[14] = v5;
              unint64_t v58 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v59 = (char *)v58;
              if (v58) {
                sub_100055434(v58);
              }
            }
            else
            {
              unsigned int v59 = 0;
            }
            free(v59);
          }

          unsigned int v60 = sub_100019308(qword_1000E4318);
          id v82 = v44;
          unsigned int v61 = [v60 mapVolume:v12 toSession:v5 withPersona:0 error:&v82];
          id v26 = v82;

          if (v61)
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            unsigned int v62 = (id)qword_1000E4060;
            if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)int v85 = 0;
              unsigned int v63 = sub_100055404(1);
              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v64 = v63;
              }
              else {
                unsigned int v64 = v63 & 0xFFFFFFFE;
              }
              if (v64)
              {
                LOWORD(v86) = 0;
                __int16 v65 = (const char *)_os_log_send_and_compose_impl();
                id v66 = (char *)v65;
                if (v65) {
                  sub_100055434(v65);
                }
              }
              else
              {
                id v66 = 0;
              }
              free(v66);
            }

            uint64_t v27 = 1;
            goto LABEL_67;
          }
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v67 = (id)qword_1000E4060;
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v86 = 0;
            int v68 = sub_100055404(1);
            if (!os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT)) {
              v68 &= ~1u;
            }
            if (v68)
            {
              int v69 = v67;
              id v70 = [v26 code];
              *(_DWORD *)int v85 = 134217984;
              *(void *)&v85[4] = v70;
              unsigned int v71 = (char *)_os_log_send_and_compose_impl();

              if (v71) {
                sub_100055434(v71);
              }
            }
            else
            {
              unsigned int v71 = 0;
            }
            free(v71);
          }

          unsigned int v72 = sub_100019308(qword_1000E4318);
          id v81 = 0;
          unsigned int v73 = [v72 unloadIdentityFromSession:v5 error:&v81];
          id v26 = v81;

          if (v73)
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            unsigned int v74 = (id)qword_1000E4060;
            if (!os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_159;
            }
            *(void *)int v85 = 0;
            unsigned int v75 = sub_100055404(1);
            if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v76 = v75;
            }
            else {
              unsigned int v76 = v75 & 0xFFFFFFFE;
            }
            if (v76)
            {
              LOWORD(v86) = 0;
              unsigned int v77 = (void *)_os_log_send_and_compose_impl();
              if (!v77) {
                goto LABEL_158;
              }
              goto LABEL_156;
            }
          }
          else
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            unsigned int v74 = (id)qword_1000E4060;
            if (!os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_159;
            }
            uint64_t v86 = 0;
            int v78 = sub_100055404(1);
            if (!os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT)) {
              v78 &= ~1u;
            }
            if (v78)
            {
              unsigned int v79 = v74;
              id v80 = [v26 code];
              *(_DWORD *)int v85 = 134217984;
              *(void *)&v85[4] = v80;
              unsigned int v77 = (void *)_os_log_send_and_compose_impl();

              if (!v77)
              {
LABEL_158:
                free(v77);
LABEL_159:

                goto LABEL_66;
              }
LABEL_156:
              sub_100055434((const char *)v77);
              goto LABEL_158;
            }
          }
          unsigned int v77 = 0;
          goto LABEL_158;
        }
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v14 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
LABEL_63:
          id v26 = 0;
LABEL_66:
          uint64_t v27 = 0;
LABEL_67:

          goto LABEL_68;
        }
        *(void *)int v85 = 0;
        unsigned int v32 = sub_100055404(1);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v33 = v32;
        }
        else {
          unsigned int v33 = v32 & 0xFFFFFFFE;
        }
        if (v33)
        {
          LOWORD(v86) = 0;
LABEL_59:
          unsigned int v34 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v35 = (char *)v34;
          if (v34) {
            sub_100055434(v34);
          }
          goto LABEL_62;
        }
      }
      else
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v14 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_63;
        }
        *(void *)int v85 = 0;
        unsigned int v22 = sub_100055404(1);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v23 = v22;
        }
        else {
          unsigned int v23 = v22 & 0xFFFFFFFE;
        }
        if (v23)
        {
          LOWORD(v86) = 0;
          goto LABEL_59;
        }
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v14 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_63;
      }
      *(void *)int v85 = 0;
      unsigned int v20 = sub_100055404(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = v20 & 0xFFFFFFFE;
      }
      if (v21)
      {
        LOWORD(v86) = 0;
        goto LABEL_59;
      }
    }
    unsigned int v35 = 0;
LABEL_62:
    free(v35);
    goto LABEL_63;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v6 = (id)qword_1000E4060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)int v85 = 0;
    unsigned int v7 = sub_100055404(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = v7 & 0xFFFFFFFE;
    }
    if (v8)
    {
      LOWORD(v86) = 0;
      unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v10 = (char *)v9;
      if (v9) {
        sub_100055434(v9);
      }
    }
    else
    {
      unsigned int v10 = 0;
    }
    free(v10);
  }

  unsigned int v24 = sub_100019308(qword_1000E4318);
  id v84 = 0;
  unsigned __int8 v25 = [v24 unlockIdentityInSession:v5 passcode:a2 error:&v84];
  id v26 = v84;

  if ((v25 & 1) == 0)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v14 = (id)qword_1000E4060;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v86 = 0;
      int v28 = sub_100055404(1);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        v28 &= ~1u;
      }
      if (v28)
      {
        unsigned int v29 = v14;
        id v30 = [v26 code];
        *(_DWORD *)int v85 = 67109376;
        *(_DWORD *)&v85[4] = -(int)v5;
        *(_WORD *)&v85[8] = 2048;
        *(void *)&v85[10] = v30;
        unsigned __int8 v31 = (char *)_os_log_send_and_compose_impl();

        if (v31) {
          sub_100055434(v31);
        }
      }
      else
      {
        unsigned __int8 v31 = 0;
      }
      free(v31);
    }
    goto LABEL_66;
  }
  uint64_t v27 = 1;
LABEL_68:

  return v27;
}

uint64_t sub_100029F9C(const __CFDictionary *a1)
{
  if (sub_100088734(a1, kUMUserSessionHasSyncBagKey))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v2 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_30;
    }
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
  if (!MKBUserSessionCreateSyncBagForUser())
  {
    CFDictionarySetValue(a1, kUMUserSessionHasSyncBagKey, kCFBooleanTrue);
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v2 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_30;
    }
    unsigned int v11 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v12 = v11;
    }
    else {
      unsigned int v12 = v11 & 0xFFFFFFFE;
    }
    if (v12)
    {
LABEL_9:
      uint64_t v5 = (const char *)_os_log_send_and_compose_impl();
      int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
      goto LABEL_29;
    }
LABEL_28:
    int v6 = 0;
LABEL_29:
    free(v6);
LABEL_30:
    uint64_t v13 = 0;
    goto LABEL_34;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v2 = (id)qword_1000E4060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v7 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = v7 & 0xFFFFFFFE;
    }
    if (v8)
    {
      unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v10 = (char *)v9;
      if (v9) {
        sub_100055434(v9);
      }
    }
    else
    {
      unsigned int v10 = 0;
    }
    free(v10);
  }
  uint64_t v13 = 0xFFFFFFFFLL;
LABEL_34:

  return v13;
}

uint64_t sub_10002A298()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v7 = -1;
  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x2020000000;
  v3[3] = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10002A368;
  v2[3] = &unk_1000D53D0;
  v2[4] = v3;
  v2[5] = &v4;
  dispatch_sync((dispatch_queue_t)qword_1000E4320, v2);
  uint64_t v0 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(v3, 8);
  _Block_object_dispose(&v4, 8);
  return v0;
}

void sub_10002A368(uint64_t a1)
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000E4320);
  if (byte_1000E4048 == 1)
  {
    if (qword_1000E4078 != -1) {
      dispatch_once(&qword_1000E4078, &stru_1000D55B8);
    }
    unsigned int v2 = (id)qword_1000E4070;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      goto LABEL_56;
    }
    unsigned int v3 = sub_100055404(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4) {
      goto LABEL_52;
    }
    goto LABEL_54;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_100056848(qword_1000E4038, 502);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (dword_1000E42C0 == 1)
  {
    if (!v5) {
      sub_1000B0A08();
    }
    goto LABEL_14;
  }
  if (v5)
  {
LABEL_14:
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v6 = (id)qword_1000E4060;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v7 = sub_100055404(1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v8 = v7;
      }
      else {
        unsigned int v8 = v7 & 0xFFFFFFFE;
      }
      if (v8)
      {
        unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v10 = (char *)v9;
        if (v9) {
          sub_100055434(v9);
        }
      }
      else
      {
        unsigned int v10 = 0;
      }
      free(v10);
    }

    goto LABEL_35;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v11 = (id)qword_1000E4060;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v12 = sub_100055404(1);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = v12 & 0xFFFFFFFE;
    }
    if (v13)
    {
      unsigned int v14 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v15 = (char *)v14;
      if (v14) {
        sub_100055434(v14);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    free(v15);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_10001F5BC(-1, 0);
LABEL_35:
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v2 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    unsigned int v21 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = v21 & 0xFFFFFFFE;
    }
    if (v22)
    {
LABEL_52:
      unsigned int v23 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v24 = (char *)v23;
      if (v23) {
        sub_100055434(v23);
      }
      goto LABEL_55;
    }
LABEL_54:
    unsigned int v24 = 0;
LABEL_55:
    free(v24);
LABEL_56:

    return;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v16 = (id)qword_1000E4060;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v17 = sub_100055404(1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = v17 & 0xFFFFFFFE;
    }
    if (v18)
    {
      unsigned int v19 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v20 = (char *)v19;
      if (v19) {
        sub_100055434(v19);
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
    free(v20);
  }

  unsigned __int8 v25 = +[RDServer sharedServer];
  [v25 switchToUser:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];

  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  id v26 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_10002A8A0()
{
  CFDictionaryRef v0 = (const __CFDictionary *)sub_100019E3C();
  if (v0)
  {
    CFDictionaryRef v1 = v0;
    int v2 = sub_1000885F0(v0, kUMUserSessionIDKey);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v4 = CFDateCreate(kCFAllocatorDefault, Current);
    if (v4)
    {
      CFDateRef v5 = v4;
      if (v2 == 502)
      {
        int v6 = sub_1000885F0(v1, kUMUserSessionPreviousLoggedinIDKey);
        if (v6 != -1)
        {
          sub_100056848(qword_1000E4038, v6);
          unsigned int v7 = (__CFDictionary *)objc_claimAutoreleasedReturnValue();
          if (v7)
          {
            unsigned int v8 = v7;
            CFDictionarySetValue(v7, kUMUserSessionLogoutEndTimeKey, v5);
            CFRelease(v8);
          }
        }
      }
      else
      {
        if (CFDictionaryContainsKey(v1, kUMUserSessionFirstLoginEndTimeKey)) {
          unsigned int v9 = kUMUserSessionCachedLoginEndTimeKey;
        }
        else {
          unsigned int v9 = kUMUserSessionFirstLoginEndTimeKey;
        }
        CFDictionarySetValue(v1, v9, v5);
      }
      CFRelease(v5);
    }
    CFRelease(v1);
  }
}

void sub_10002A9C4()
{
  uint64_t v0 = sub_100019E3C();
  if (v0)
  {
    CFDictionaryRef v1 = (__CFDictionary *)v0;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v3 = CFDateCreate(kCFAllocatorDefault, Current);
    if (v3)
    {
      CFDateRef v4 = v3;
      CFDictionarySetValue(v1, kUMUserSessionLogoutStartTimeKey, v3);
      if (CFDictionaryContainsKey(v1, kUMUserSessionLogoutEndTimeKey)) {
        CFDictionaryRemoveValue(v1, kUMUserSessionLogoutEndTimeKey);
      }
      CFRelease(v4);
    }
    CFRelease(v1);
  }
}

void sub_10002AA78()
{
  uint64_t v0 = sub_100056B1C(qword_1000E4038);
  if (v0 == 502)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFDictionaryRef v1 = (id)qword_1000E4060;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v2 = sub_100055404(1);
      if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v3 = v2;
      }
      else {
        unsigned int v3 = v2 & 0xFFFFFFFE;
      }
      if (v3)
      {
        CFDateRef v4 = (const char *)_os_log_send_and_compose_impl();
        CFDateRef v5 = (char *)v4;
        if (v4) {
          sub_100055434(v4);
        }
      }
      else
      {
        CFDateRef v5 = 0;
      }
      free(v5);
    }

    return;
  }
  uint64_t v6 = v0;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v7 = (id)qword_1000E4060;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = sub_100055404(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v9 = v8;
    }
    else {
      unsigned int v9 = v8 & 0xFFFFFFFE;
    }
    if (v9)
    {
      unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v11 = (char *)v10;
      if (v10) {
        sub_100055434(v10);
      }
    }
    else
    {
      unsigned int v11 = 0;
    }
    free(v11);
  }

  CFDictionaryRef v12 = (const __CFDictionary *)sub_100019E3C();
  if (v12)
  {
    CFDictionaryRef v13 = v12;
    if (CFDictionaryContainsKey(v12, kUMUserSessionSyncMachServicesKey)
      || CFDictionaryContainsKey(v13, kUMUserSessionHasSyncBagKey) != 1)
    {
      goto LABEL_49;
    }
    if (sub_10002AE64(v13, v6, 0))
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v14 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_48;
      }
      unsigned int v15 = sub_100055404(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = v15 & 0xFFFFFFFE;
      }
      if (v16) {
        goto LABEL_44;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v14 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_48;
      }
      unsigned int v17 = sub_100055404(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v18 = v17;
      }
      else {
        unsigned int v18 = v17 & 0xFFFFFFFE;
      }
      if (v18)
      {
LABEL_44:
        unsigned int v19 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v20 = (char *)v19;
        if (v19) {
          sub_100055434(v19);
        }
        goto LABEL_47;
      }
    }
    unsigned int v20 = 0;
LABEL_47:
    free(v20);
LABEL_48:

LABEL_49:
    CFRelease(v13);
  }
}

uint64_t sub_10002AE64(const __CFDictionary *a1, uint64_t a2, int a3)
{
  if (sub_100088734(a1, kUMUserSessionHasSyncBagKey))
  {
    if (!a3 || sub_100033F6C(a1, a2))
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      uint64_t v6 = (id)qword_1000E4060;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v14 = sub_100055404(1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v15 = v14;
        }
        else {
          unsigned int v15 = v14 & 0xFFFFFFFE;
        }
        if (v15)
        {
LABEL_28:
          unsigned int v16 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v17 = (char *)v16;
          if (v16) {
            sub_100055434(v16);
          }
          goto LABEL_31;
        }
LABEL_30:
        unsigned int v17 = 0;
LABEL_31:
        free(v17);
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      uint64_t v6 = (id)qword_1000E4060;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = sub_100055404(1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v7 & 0xFFFFFFFE;
        }
        if (v8) {
          goto LABEL_28;
        }
        goto LABEL_30;
      }
    }

    uint64_t result = MKBUserSessionRemoveSyncBagForUser();
    if (result) {
      return result;
    }
    goto LABEL_37;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v9 = (id)qword_1000E4060;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = sub_100055404(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = v10 & 0xFFFFFFFE;
    }
    if (v11)
    {
      CFDictionaryRef v12 = (const char *)_os_log_send_and_compose_impl();
      CFDictionaryRef v13 = (char *)v12;
      if (v12) {
        sub_100055434(v12);
      }
    }
    else
    {
      CFDictionaryRef v13 = 0;
    }
    free(v13);
  }

LABEL_37:
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v19 = (id)qword_1000E4060;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v20 = sub_100055404(1);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v21 = v20;
    }
    else {
      unsigned int v21 = v20 & 0xFFFFFFFE;
    }
    if (v21)
    {
      unsigned int v22 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v23 = (char *)v22;
      if (v22) {
        sub_100055434(v22);
      }
    }
    else
    {
      unsigned int v23 = 0;
    }
    free(v23);
  }

  CFDictionarySetValue(a1, kUMUserSessionHasSyncBagKey, kCFBooleanFalse);
  return 0;
}

uint64_t sub_10002B234(uint64_t result)
{
  if (!result) {
    return result;
  }
  CFDictionaryRef v1 = (const __CFDictionary *)result;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v2 = (id)qword_1000E4060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
    unsigned int v3 = sub_100055404(1);
    CFDateRef v4 = v2;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v5 = v3;
    }
    else {
      unsigned int v5 = v3 & 0xFFFFFFFE;
    }
    if (v5)
    {
      LODWORD(__from.__pn_.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)__from.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v1;
      LODWORD(v163) = 12;
      p_from = &__from;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();

      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {

      uint64_t v6 = 0;
    }
    free(v6);
  }

  unsigned int v7 = sub_100088734(v1, kUMUserSessionForegroundKey);
  unsigned int v8 = sub_100088734(v1, @"MKBUserSessionFileSystemSet");
  uint64_t v9 = sub_1000885F0(v1, kUMUserSessionIDKey);
  unsigned int v10 = sub_100088734(v1, kUMUserSessionDirtyKey);
  unsigned int v11 = sub_100088734(v1, kUMUserSessionisPrimaryKey);
  if (dword_1000E42C0 == 1)
  {
    if (v9 == 502)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFDictionaryRef v12 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_56;
      }
      __from.__pn_.__r_.__value_.__r.__words[0] = 0;
      unsigned int v13 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14)
      {
        LOWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 0;
        goto LABEL_52;
      }
LABEL_54:
      unsigned int v24 = 0;
LABEL_55:
      free(v24);
LABEL_56:

      return 0;
    }
LABEL_43:
    bzero(&__from, 0x400uLL);
    sub_1000887CC(v1, kUMUserSessionHomeDirKey, (char *)&__from, 1024);
    if (v7)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFDictionaryRef v12 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_56;
      }
      __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
      unsigned int v21 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v22 = v21;
      }
      else {
        unsigned int v22 = v21 & 0xFFFFFFFE;
      }
      if (!v22) {
        goto LABEL_54;
      }
      *(_WORD *)int v164 = 0;
      goto LABEL_52;
    }
    if (v10)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned __int8 v25 = (id)qword_1000E4060;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
        unsigned int v26 = sub_100055404(1);
        unsigned __int8 v25 = v25;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v27 = v26;
        }
        else {
          unsigned int v27 = v26 & 0xFFFFFFFE;
        }
        if (v27)
        {
          *(_DWORD *)int v164 = 67109120;
          *(_DWORD *)&v164[4] = v9;
          LODWORD(v163) = 8;
          p_from = (std::__fs::filesystem::path *)v164;
          goto LABEL_76;
        }
        goto LABEL_87;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned __int8 v25 = (id)qword_1000E4060;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
        unsigned int v28 = sub_100055404(1);
        unsigned __int8 v25 = v25;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v29 = v28;
        }
        else {
          unsigned int v29 = v28 & 0xFFFFFFFE;
        }
        if (v29)
        {
          *(_DWORD *)int v164 = 67109120;
          *(_DWORD *)&v164[4] = v9;
          LODWORD(v163) = 8;
          p_from = (std::__fs::filesystem::path *)v164;
LABEL_76:
          id v30 = (char *)_os_log_send_and_compose_impl();

          if (v30) {
            sub_100055434(v30);
          }
          goto LABEL_88;
        }
LABEL_87:

        id v30 = 0;
LABEL_88:
        free(v30);
      }
    }

    sub_10001DE88(v9);
    sub_10001E1E0(v9);
    sub_10002D1BC(v9, 0);
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v36 = (id)qword_1000E4060;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
      unsigned int v37 = sub_100055404(1);
      unsigned int v38 = v36;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v39 = v37;
      }
      else {
        unsigned int v39 = v37 & 0xFFFFFFFE;
      }
      if (v39)
      {
        *(_WORD *)int v164 = 0;
        LODWORD(v163) = 2;
        p_from = (std::__fs::filesystem::path *)v164;
        unsigned int v40 = (char *)_os_log_send_and_compose_impl();

        if (v40) {
          sub_100055434(v40);
        }
      }
      else
      {

        unsigned int v40 = 0;
      }
      free(v40);
    }

    sleep(1u);
    CFDictionarySetValue(v1, kUMUserSessionForegroundKey, kCFBooleanFalse);
    if (!byte_1000E3220 || v9 == 502)
    {
LABEL_183:
      if (!v8) {
        goto LABEL_239;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v72 = (id)qword_1000E4060;
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)int v164 = 0;
        unsigned int v73 = sub_100055404(1);
        unsigned int v74 = v72;
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v75 = v73;
        }
        else {
          unsigned int v75 = v73 & 0xFFFFFFFE;
        }
        if (v75)
        {
          LODWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__str[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)&__from;
          WORD2(__str[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__str[0].__pn_.__r_.__value_.__r.__words[1] + 6) = v9;
          unsigned int v76 = (char *)_os_log_send_and_compose_impl();

          if (v76) {
            sub_100055434(v76);
          }
        }
        else
        {

          unsigned int v76 = 0;
        }
        free(v76);
      }

      if (sub_10002DFE4((const char *)&__from))
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v77 = (id)qword_1000E4060;
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
        {
          __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          unsigned int v78 = sub_100055404(1);
          unsigned int v79 = v77;
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v80 = v78;
          }
          else {
            unsigned int v80 = v78 & 0xFFFFFFFE;
          }
          if (v80)
          {
            *(_WORD *)int v164 = 0;
            id v81 = (char *)_os_log_send_and_compose_impl();

            if (v81) {
              sub_100055434(v81);
            }
          }
          else
          {

            id v81 = 0;
          }
          free(v81);
        }
        goto LABEL_238;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      id v82 = (id)qword_1000E4060;
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
      {
        __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
        unsigned int v83 = sub_100055404(1);
        id v84 = v82;
        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v85 = v83;
        }
        else {
          unsigned int v85 = v83 & 0xFFFFFFFE;
        }
        if (v85)
        {
          *(_WORD *)int v164 = 0;
          uint64_t v86 = (char *)_os_log_send_and_compose_impl();

          if (v86) {
            sub_100055434(v86);
          }
        }
        else
        {

          uint64_t v86 = 0;
        }
        free(v86);
      }

      mkpath_np("/private/var/DELETED", 0x1C0u);
      snprintf((char *)__str, 0x400uLL, "/private/var/DELETED/euser_%d", v9);
      rename(&__from, __str, v87);
      if (v88)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v77 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_238;
        }
        uint64_t v169 = 0;
        int v89 = sub_100055404(1);
        unsigned int v77 = v77;
        if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
          v89 &= ~1u;
        }
        if (v89)
        {
          v90 = __error();
          int v91 = strerror(*v90);
          *(_DWORD *)int v164 = 136315650;
          *(void *)&v164[4] = &__from;
          __int16 v165 = 2080;
          unsigned int v166 = __str;
          __int16 v167 = 2080;
          int v168 = v91;
          goto LABEL_234;
        }
      }
      else
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v77 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_238;
        }
        uint64_t v169 = 0;
        unsigned int v92 = sub_100055404(1);
        unsigned int v77 = v77;
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v93 = v92;
        }
        else {
          unsigned int v93 = v92 & 0xFFFFFFFE;
        }
        if (v93)
        {
          *(_DWORD *)int v164 = 136315394;
          *(void *)&v164[4] = &__from;
          __int16 v165 = 2080;
          unsigned int v166 = __str;
LABEL_234:
          unsigned int v94 = (char *)_os_log_send_and_compose_impl();

          if (v94) {
            sub_100055434(v94);
          }
          goto LABEL_237;
        }
      }

      unsigned int v94 = 0;
LABEL_237:
      free(v94);
LABEL_238:

      CFDictionarySetValue(v1, @"MKBUserSessionFileSystemSet", kCFBooleanFalse);
LABEL_239:
      if (_SecSyncDeleteUserViews())
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        v95 = (id)qword_1000E4060;
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
        {
          __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          unsigned int v96 = sub_100055404(1);
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v97 = v96;
          }
          else {
            unsigned int v97 = v96 & 0xFFFFFFFE;
          }
          if (v97)
          {
            *(_WORD *)int v164 = 0;
            CFIndex v98 = (const char *)_os_log_send_and_compose_impl();
            char v99 = (char *)v98;
            if (v98) {
              sub_100055434(v98);
            }
          }
          else
          {
            char v99 = 0;
          }
          free(v99);
        }

        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        v105 = (id)qword_1000E4060;
        if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
        {
          __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          unsigned int v106 = sub_100055404(1);
          v105 = v105;
          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v107 = v106;
          }
          else {
            unsigned int v107 = v106 & 0xFFFFFFFE;
          }
          if (v107)
          {
            *(_WORD *)int v164 = 0;
            goto LABEL_278;
          }
          goto LABEL_280;
        }
      }
      else
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        v100 = (id)qword_1000E4060;
        if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
        {
          __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          unsigned int v101 = sub_100055404(1);
          if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v102 = v101;
          }
          else {
            unsigned int v102 = v101 & 0xFFFFFFFE;
          }
          if (v102)
          {
            *(_WORD *)int v164 = 0;
            CFNumberRef v103 = (const char *)_os_log_send_and_compose_impl();
            CFTypeID v104 = (char *)v103;
            if (v103) {
              sub_100055434(v103);
            }
          }
          else
          {
            CFTypeID v104 = 0;
          }
          free(v104);
        }

        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        v105 = (id)qword_1000E4060;
        if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
        {
          __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          unsigned int v108 = sub_100055404(1);
          v105 = v105;
          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v109 = v108;
          }
          else {
            unsigned int v109 = v108 & 0xFFFFFFFE;
          }
          if (v109)
          {
            *(_WORD *)int v164 = 0;
LABEL_278:
            v110 = (char *)_os_log_send_and_compose_impl();

            if (v110) {
              sub_100055434(v110);
            }
            goto LABEL_281;
          }
LABEL_280:

          v110 = 0;
LABEL_281:
          free(v110);
        }
      }

      *(void *)int v164 = 0;
      if ([(id)qword_1000E4030 splitUserVolumeEnabled])
      {
        if (sub_10002E478(v1))
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v111 = (id)qword_1000E4060;
          if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
          {
            __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
            unsigned int v112 = sub_100055404(1);
            unsigned int v113 = v111;
            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v114 = v112;
            }
            else {
              unsigned int v114 = v112 & 0xFFFFFFFE;
            }
            if (v114)
            {
              LODWORD(v169) = 67109120;
              HIDWORD(v169) = v9;
              CFNumberRef v115 = (char *)_os_log_send_and_compose_impl();

              if (v115) {
                sub_100055434(v115);
              }
            }
            else
            {

              CFNumberRef v115 = 0;
            }
            free(v115);
          }

          goto LABEL_318;
        }
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v118 = (id)qword_1000E4060;
        if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
        {
          __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          unsigned int v121 = sub_100055404(1);
          unsigned int v118 = v118;
          if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v122 = v121;
          }
          else {
            unsigned int v122 = v121 & 0xFFFFFFFE;
          }
          if (v122)
          {
            LODWORD(v169) = 67109120;
            HIDWORD(v169) = v9;
LABEL_310:
            CFStringRef v123 = (char *)_os_log_send_and_compose_impl();

            if (v123) {
              sub_100055434(v123);
            }
            goto LABEL_313;
          }
          goto LABEL_312;
        }
      }
      else
      {
        int v116 = MKBUserSessionDeleteKeybagForUser();
        if (!v116)
        {
LABEL_318:
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          v124 = (id)qword_1000E4060;
          if (!os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_330;
          }
          __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          unsigned int v125 = sub_100055404(1);
          unsigned int v126 = v124;
          if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v127 = v125;
          }
          else {
            unsigned int v127 = v125 & 0xFFFFFFFE;
          }
          if (v127)
          {
            LOWORD(v169) = 0;
            v128 = (const char *)_os_log_send_and_compose_impl();

            if (v128) {
              sub_100055434(v128);
            }
          }
          else
          {

            v128 = 0;
          }
          CFTypeID v129 = (char *)v128;
LABEL_329:
          free(v129);
LABEL_330:

          goto LABEL_357;
        }
        int v117 = v116;
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v118 = (id)qword_1000E4060;
        if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v169 = 0;
          unsigned int v119 = sub_100055404(1);
          unsigned int v118 = v118;
          if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v120 = v119;
          }
          else {
            unsigned int v120 = v119 & 0xFFFFFFFE;
          }
          if (v120)
          {
            LODWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 67109376;
            HIDWORD(__str[0].__pn_.__r_.__value_.__r.__words[0]) = v9;
            LOWORD(__str[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__str[0].__pn_.__r_.__value_.__r.__words[1] + 2) = v117;
            goto LABEL_310;
          }
LABEL_312:

          CFStringRef v123 = 0;
LABEL_313:
          free(v123);
        }
      }

      return 0;
    }
    if (([(id)qword_1000E4030 splitUserVolumeEnabled] & 1) == 0) {
      MKBUserSessionUnloadKeybagForUser();
    }
    if (objc_msgSend((id)qword_1000E4030, "deleteVolumeWithSession:error:", v1, 0, p_from, v163, *(void *)v164))
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      id v41 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_125;
      }
      __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
      unsigned int v42 = sub_100055404(1);
      id v41 = v41;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v43 = v42;
      }
      else {
        unsigned int v43 = v42 & 0xFFFFFFFE;
      }
      if (v43)
      {
        *(_DWORD *)int v164 = 67109120;
        *(_DWORD *)&v164[4] = v9;
        goto LABEL_121;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      id v41 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_125;
      }
      __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
      unsigned int v44 = sub_100055404(1);
      id v41 = v41;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v45 = v44;
      }
      else {
        unsigned int v45 = v44 & 0xFFFFFFFE;
      }
      if (v45)
      {
        *(_DWORD *)int v164 = 67109120;
        *(_DWORD *)&v164[4] = v9;
LABEL_121:
        unsigned int v46 = (char *)_os_log_send_and_compose_impl();

        if (v46) {
          sub_100055434(v46);
        }
        goto LABEL_124;
      }
    }

    unsigned int v46 = 0;
LABEL_124:
    free(v46);
LABEL_125:

    int v47 = sub_10002AE64(v1, v9, 1);
    if (v47)
    {
      int v48 = v47;
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v49 = (id)qword_1000E4060;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)int v164 = 0;
        unsigned int v50 = sub_100055404(1);
        unsigned int v49 = v49;
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v51 = v50;
        }
        else {
          unsigned int v51 = v50 & 0xFFFFFFFE;
        }
        if (v51)
        {
          LODWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(__str[0].__pn_.__r_.__value_.__r.__words[0]) = v9;
          LOWORD(__str[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__str[0].__pn_.__r_.__value_.__r.__words[1] + 2) = v48;
          unsigned int v52 = (char *)_os_log_send_and_compose_impl();

          if (v52) {
            sub_100055434(v52);
          }
        }
        else
        {

          unsigned int v52 = 0;
        }
        free(v52);
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v49 = (id)qword_1000E4060;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
        unsigned int v53 = sub_100055404(1);
        unsigned int v49 = v49;
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v54 = v53;
        }
        else {
          unsigned int v54 = v53 & 0xFFFFFFFE;
        }
        if (v54)
        {
          *(_WORD *)int v164 = 0;
          unsigned int v55 = (char *)_os_log_send_and_compose_impl();

          if (v55) {
            sub_100055434(v55);
          }
        }
        else
        {

          unsigned int v55 = 0;
        }
        free(v55);
      }
    }

    goto LABEL_183;
  }
  if (v11)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFDictionaryRef v12 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    __from.__pn_.__r_.__value_.__r.__words[0] = 0;
    unsigned int v15 = sub_100055404(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v16 = v15;
    }
    else {
      unsigned int v16 = v15 & 0xFFFFFFFE;
    }
    if (!v16) {
      goto LABEL_54;
    }
    LOWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 0;
    goto LABEL_52;
  }
  unsigned int v17 = sub_100018600(qword_1000E4318);
  int v18 = sub_10001935C((uint64_t)v17);

  if (v18 == v9)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFDictionaryRef v12 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    __from.__pn_.__r_.__value_.__r.__words[0] = 0;
    unsigned int v19 = sub_100055404(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = v19 & 0xFFFFFFFE;
    }
    if (!v20) {
      goto LABEL_54;
    }
    LOWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 0;
LABEL_52:
    unsigned int v23 = (const char *)_os_log_send_and_compose_impl();
    unsigned int v24 = (char *)v23;
    if (v23) {
      sub_100055434(v23);
    }
    goto LABEL_55;
  }
  if (dword_1000E42C0 == 2)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned __int8 v31 = (id)qword_1000E4060;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      __from.__pn_.__r_.__value_.__r.__words[0] = 0;
      unsigned int v32 = sub_100055404(1);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v33 = v32;
      }
      else {
        unsigned int v33 = v32 & 0xFFFFFFFE;
      }
      if (v33)
      {
        LOWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 0;
        unsigned int v34 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v35 = (char *)v34;
        if (v34) {
          sub_100055434(v34);
        }
      }
      else
      {
        unsigned int v35 = 0;
      }
      free(v35);
    }

    if ([(id)qword_1000E4030 deleteVolumeWithSession:v1 error:0])
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v56 = (id)qword_1000E4060;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        __from.__pn_.__r_.__value_.__r.__words[0] = 0;
        unsigned int v57 = sub_100055404(1);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v58 = v57;
        }
        else {
          unsigned int v58 = v57 & 0xFFFFFFFE;
        }
        if (v58)
        {
          LODWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(__str[0].__pn_.__r_.__value_.__r.__words[0]) = v9;
          goto LABEL_166;
        }
        goto LABEL_168;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v56 = (id)qword_1000E4060;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        __from.__pn_.__r_.__value_.__r.__words[0] = 0;
        unsigned int v59 = sub_100055404(1);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v60 = v59;
        }
        else {
          unsigned int v60 = v59 & 0xFFFFFFFE;
        }
        if (v60)
        {
          LODWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(__str[0].__pn_.__r_.__value_.__r.__words[0]) = v9;
LABEL_166:
          unsigned int v61 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v62 = (char *)v61;
          if (v61) {
            sub_100055434(v61);
          }
          goto LABEL_169;
        }
LABEL_168:
        unsigned int v62 = 0;
LABEL_169:
        free(v62);
      }
    }

    unsigned int v63 = (id)sub_100088788(v1, kUMUserSessionUUIDKey);
    unsigned int v64 = sub_100018F6C(qword_1000E4040);
    __int16 v65 = [v64 userPersonas];
    id v66 = [v65 objectForKeyedSubscript:v63];

    if (!v66)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v67 = (id)qword_1000E4060;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
        unsigned int v68 = sub_100055404(1);
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v69 = v68;
        }
        else {
          unsigned int v69 = v68 & 0xFFFFFFFE;
        }
        if (v69)
        {
          LODWORD(__from.__pn_.__r_.__value_.__l.__data_) = 138412290;
          *(std::string::size_type *)((char *)__from.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v63;
          id v70 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v71 = (char *)v70;
          if (v70) {
            sub_100055434(v70);
          }
        }
        else
        {
          unsigned int v71 = 0;
        }
        free(v71);
      }
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v130 = (id)qword_1000E4060;
    if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
    {
      __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
      unsigned int v131 = sub_100055404(1);
      if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v132 = v131;
      }
      else {
        unsigned int v132 = v131 & 0xFFFFFFFE;
      }
      if (v132)
      {
        LODWORD(__from.__pn_.__r_.__value_.__l.__data_) = 138412290;
        *(std::string::size_type *)((char *)__from.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v63;
        v133 = (const char *)_os_log_send_and_compose_impl();
        CFTypeID v134 = (char *)v133;
        if (v133) {
          sub_100055434(v133);
        }
      }
      else
      {
        CFTypeID v134 = 0;
      }
      free(v134);
    }
    do
    {

      if (![v66 count])
      {
        CFUUIDRef v143 = sub_100018F6C(qword_1000E4040);
        CFStringRef v144 = [v143 userPersonas];
        [v144 setObject:0 forKeyedSubscript:v63];

        sub_10005DBE8(qword_1000E4040);
        goto LABEL_357;
      }
      int v130 = [v66 objectAtIndexedSubscript:0];
      int v135 = sub_100047294(v66, (const __CFDictionary *)v130, 1);
    }
    while (!v135);
    int v136 = v135;
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v137 = (id)qword_1000E4060;
    if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
    {
      __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
      unsigned int v138 = sub_100055404(1);
      if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v139 = v138;
      }
      else {
        unsigned int v139 = v138 & 0xFFFFFFFE;
      }
      if (v139)
      {
        unsigned int v140 = v137;
        unsigned int v141 = strerror(v136);
        LODWORD(__from.__pn_.__r_.__value_.__l.__data_) = 138412546;
        *(std::string::size_type *)((char *)__from.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v63;
        WORD2(__from.__pn_.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__from.__pn_.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v141;
        v142 = (char *)_os_log_send_and_compose_impl();

        if (v142) {
          sub_100055434(v142);
        }
      }
      else
      {
        v142 = 0;
      }
      free(v142);
    }

    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v124 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_330;
    }
    __from.__pn_.__r_.__value_.__r.__words[0] = 0;
    unsigned int v158 = sub_100055404(1);
    if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v159 = v158;
    }
    else {
      unsigned int v159 = v158 & 0xFFFFFFFE;
    }
    if (v159)
    {
      LODWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__str[0].__pn_.__r_.__value_.__r.__words[0]) = v9;
      CFDateRef v160 = (const char *)_os_log_send_and_compose_impl();
      CFBooleanRef v161 = v160;
      if (v160) {
        sub_100055434(v160);
      }
    }
    else
    {
      CFBooleanRef v161 = 0;
    }
    CFTypeID v129 = (char *)v161;
    goto LABEL_329;
  }
  if (dword_1000E42C0 == 1) {
    goto LABEL_43;
  }
LABEL_357:
  unsigned int v145 = (void *)sub_100088788(v1, kUMUserSessionShortNameKey);
  sub_1000583A4(qword_1000E4038, v145);
  sub_10002EA7C(v9, 1);
  sub_10001A7BC();
  if (qword_1000E4078 != -1) {
    dispatch_once(&qword_1000E4078, &stru_1000D55B8);
  }
  CFTypeID v146 = (id)qword_1000E4070;
  if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
  {
    __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
    unsigned int v147 = sub_100055404(1);
    CFDictionaryRef v148 = v146;
    if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v149 = v147;
    }
    else {
      unsigned int v149 = v147 & 0xFFFFFFFE;
    }
    if (v149)
    {
      *(_DWORD *)int v164 = 67109120;
      *(_DWORD *)&v164[4] = v9;
      v150 = (char *)_os_log_send_and_compose_impl();

      if (v150) {
        sub_100055434(v150);
      }
    }
    else
    {

      v150 = 0;
    }
    free(v150);
  }

  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v151 = (id)qword_1000E4060;
  if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)int v164 = 0;
    unsigned int v152 = sub_100055404(1);
    CFUUIDRef v153 = v151;
    if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v154 = v152;
    }
    else {
      unsigned int v154 = v152 & 0xFFFFFFFE;
    }
    if (v154)
    {
      LODWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__str[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"removeUserSessionInternal";
      WORD2(__str[0].__pn_.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__str[0].__pn_.__r_.__value_.__r.__words[1] + 6) = kMobileKeyBagUserChangedNotificationToken;
      CFNumberRef v155 = (char *)_os_log_send_and_compose_impl();

      if (v155) {
        sub_100055434(v155);
      }
    }
    else
    {

      CFNumberRef v155 = 0;
    }
    free(v155);
  }

  CFTypeID v156 = sub_1000186E0(qword_1000E4318);
  CFNumberRef v157 = +[NSString stringWithUTF8String:kMobileKeyBagUserChangedNotificationToken];
  [v156 post:v157];

  return 1;
}

uint64_t sub_10002D1BC(uint64_t a1, int a2)
{
  uint64_t v4 = launch_destroy_persona();
  if (v4)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v5 = (id)qword_1000E4060;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v78 = 0;
      unsigned int v6 = sub_100055404(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
        *(_DWORD *)unsigned int v77 = 67109376;
        *(_DWORD *)&v77[4] = a1;
        *(_WORD *)&v77[8] = 1024;
        *(_DWORD *)&v77[10] = v4;
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }
  else
  {
    dword_1000E3224 = -1;
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v5 = (id)qword_1000E4060;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)unsigned int v77 = 0;
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9)
      {
        LODWORD(v78) = 67109120;
        HIDWORD(v78) = a1;
LABEL_18:
        unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
        goto LABEL_21;
      }
LABEL_20:
      unsigned int v11 = 0;
LABEL_21:
      free(v11);
    }
  }

  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFDictionaryRef v12 = (id)qword_1000E4060;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v77 = 0;
    unsigned int v13 = sub_100055404(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = v13 & 0xFFFFFFFE;
    }
    if (v14)
    {
      LODWORD(v78) = 67109120;
      HIDWORD(v78) = a1;
      unsigned int v15 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v16 = (char *)v15;
      if (v15) {
        sub_100055434(v15);
      }
    }
    else
    {
      unsigned int v16 = 0;
    }
    free(v16);
  }

  sub_1000342CC(a1);
  sub_100056848(qword_1000E4038, a1);
  CFDictionaryRef v17 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    CFDictionaryRef v18 = v17;
    if (!CFDictionaryContainsKey(v17, kUMUserSessionVolumeDeviceNodeKey)) {
      goto LABEL_160;
    }
    sub_1000303C0(v18);
    if ([(id)qword_1000E4030 unmountVolumeWithSession:v18 mountPath:0 error:0])
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v19 = (id)qword_1000E4060;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)unsigned int v77 = 0;
        unsigned int v20 = sub_100055404(1);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v21 = v20;
        }
        else {
          unsigned int v21 = v20 & 0xFFFFFFFE;
        }
        if (v21)
        {
          LOWORD(v78) = 0;
          goto LABEL_52;
        }
        goto LABEL_54;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v19 = (id)qword_1000E4060;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)unsigned int v77 = 0;
        unsigned int v22 = sub_100055404(1);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v23 = v22;
        }
        else {
          unsigned int v23 = v22 & 0xFFFFFFFE;
        }
        if (v23)
        {
          LOWORD(v78) = 0;
LABEL_52:
          unsigned int v24 = (const char *)_os_log_send_and_compose_impl();
          unsigned __int8 v25 = (char *)v24;
          if (v24) {
            sub_100055434(v24);
          }
          goto LABEL_55;
        }
LABEL_54:
        unsigned __int8 v25 = 0;
LABEL_55:
        free(v25);
      }
    }

    if (sub_100088734(v18, kUMUserSessionHasSyncBagKey) != 1)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v33 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_159;
      }
      *(void *)unsigned int v77 = 0;
      unsigned int v34 = sub_100055404(1);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v35 = v34;
      }
      else {
        unsigned int v35 = v34 & 0xFFFFFFFE;
      }
      if (v35)
      {
        LODWORD(v78) = 67109120;
        HIDWORD(v78) = a1;
        goto LABEL_155;
      }
      goto LABEL_157;
    }
    unsigned int v26 = sub_100088788(v18, kUMUserSessionVolumeDeviceNodeKey);
    if (!v26)
    {
LABEL_98:
      if (CFDictionaryContainsKey(v18, kUMUserSessionSyncMachServicesKey))
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v46 = (id)qword_1000E4060;
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)unsigned int v77 = 0;
          unsigned int v47 = sub_100055404(1);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v48 = v47;
          }
          else {
            unsigned int v48 = v47 & 0xFFFFFFFE;
          }
          if (v48)
          {
            LODWORD(v78) = 67109120;
            HIDWORD(v78) = a1;
            unsigned int v49 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v50 = (char *)v49;
            if (v49) {
              sub_100055434(v49);
            }
          }
          else
          {
            unsigned int v50 = 0;
          }
          free(v50);
        }

        if (sub_100033F6C(v18, a1))
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v33 = (id)qword_1000E4060;
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_159;
          }
          *(void *)unsigned int v77 = 0;
          unsigned int v56 = sub_100055404(1);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v57 = v56;
          }
          else {
            unsigned int v57 = v56 & 0xFFFFFFFE;
          }
          if (v57)
          {
            LODWORD(v78) = 67109120;
            HIDWORD(v78) = a1;
            goto LABEL_155;
          }
LABEL_157:
          __int16 v65 = 0;
LABEL_158:
          free(v65);
LABEL_159:

LABEL_160:
          if (a2)
          {
            unsigned int v66 = sub_100088734(v18, kUMUserSessionDisabledKey);
            unsigned int v67 = sub_100088734(v18, kUMUserSessionDirtyKey);
            if (v66)
            {
              if (!v67)
              {
                if (qword_1000E4068 != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                unsigned int v68 = (id)qword_1000E4060;
                if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v78 = 0;
                  unsigned int v69 = sub_100055404(1);
                  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v70 = v69;
                  }
                  else {
                    unsigned int v70 = v69 & 0xFFFFFFFE;
                  }
                  if (v70)
                  {
                    *(_DWORD *)unsigned int v77 = 136315394;
                    *(void *)&v77[4] = "unload_syncdomain";
                    *(_WORD *)&v77[12] = 2080;
                    *(void *)&v77[14] = kMobileKeyBagUserChangedNotificationToken;
                    unsigned int v71 = (const char *)_os_log_send_and_compose_impl();
                    unsigned int v72 = (char *)v71;
                    if (v71) {
                      sub_100055434(v71);
                    }
                  }
                  else
                  {
                    unsigned int v72 = 0;
                  }
                  free(v72);
                }

                unsigned int v73 = sub_1000186E0(qword_1000E4318);
                unsigned int v74 = +[NSString stringWithUTF8String:kMobileKeyBagUserChangedNotificationToken];
                [v73 post:v74];
              }
            }
          }
          CFRelease(v18);
          return v4;
        }
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v33 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_159;
        }
        *(void *)unsigned int v77 = 0;
        unsigned int v58 = sub_100055404(1);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v59 = v58;
        }
        else {
          unsigned int v59 = v58 & 0xFFFFFFFE;
        }
        if (!v59) {
          goto LABEL_157;
        }
        LODWORD(v78) = 67109120;
        HIDWORD(v78) = a1;
      }
      else
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v51 = (id)qword_1000E4060;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)unsigned int v77 = 0;
          unsigned int v52 = sub_100055404(1);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v53 = v52;
          }
          else {
            unsigned int v53 = v52 & 0xFFFFFFFE;
          }
          if (v53)
          {
            LODWORD(v78) = 67109120;
            HIDWORD(v78) = a1;
            unsigned int v54 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v55 = (char *)v54;
            if (v54) {
              sub_100055434(v54);
            }
          }
          else
          {
            unsigned int v55 = 0;
          }
          free(v55);
        }

        if (sub_10002AE64(v18, a1, 1))
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v33 = (id)qword_1000E4060;
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_159;
          }
          *(void *)unsigned int v77 = 0;
          unsigned int v60 = sub_100055404(1);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v61 = v60;
          }
          else {
            unsigned int v61 = v60 & 0xFFFFFFFE;
          }
          if (!v61) {
            goto LABEL_157;
          }
          LODWORD(v78) = 67109120;
          HIDWORD(v78) = a1;
        }
        else
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v33 = (id)qword_1000E4060;
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_159;
          }
          *(void *)unsigned int v77 = 0;
          unsigned int v62 = sub_100055404(1);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v63 = v62;
          }
          else {
            unsigned int v63 = v62 & 0xFFFFFFFE;
          }
          if (!v63) {
            goto LABEL_157;
          }
          LODWORD(v78) = 67109120;
          HIDWORD(v78) = a1;
        }
      }
LABEL_155:
      unsigned int v64 = (const char *)_os_log_send_and_compose_impl();
      __int16 v65 = (char *)v64;
      if (v64) {
        sub_100055434(v64);
      }
      goto LABEL_158;
    }
    unsigned int v27 = v26;
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v28 = (id)qword_1000E4060;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v78 = 0;
      unsigned int v29 = sub_100055404(1);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v30 = v29;
      }
      else {
        unsigned int v30 = v29 & 0xFFFFFFFE;
      }
      if (v30)
      {
        *(_DWORD *)unsigned int v77 = 138412546;
        *(void *)&v77[4] = v27;
        *(_WORD *)&v77[12] = 1024;
        *(_DWORD *)&v77[14] = a1;
        unsigned __int8 v31 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v32 = (char *)v31;
        if (v31) {
          sub_100055434(v31);
        }
      }
      else
      {
        unsigned int v32 = 0;
      }
      free(v32);
    }

    unsigned int v36 = sub_100019308(qword_1000E4318);
    id v76 = 0;
    unsigned int v37 = [v36 unmapVolume:v27 error:&v76];
    id v38 = v76;

    if (v37)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v39 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_97;
      }
      *(void *)unsigned int v77 = 0;
      unsigned int v40 = sub_100055404(1);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v41 = v40;
      }
      else {
        unsigned int v41 = v40 & 0xFFFFFFFE;
      }
      if (v41)
      {
        LODWORD(v78) = 67109120;
        HIDWORD(v78) = a1;
        unsigned int v42 = (void *)_os_log_send_and_compose_impl();
        if (!v42) {
          goto LABEL_96;
        }
        goto LABEL_94;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v39 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_97;
      }
      uint64_t v78 = 0;
      int v43 = sub_100055404(1);
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
        v43 &= ~1u;
      }
      if (v43)
      {
        unsigned int v44 = v39;
        id v45 = [v38 code];
        *(_DWORD *)unsigned int v77 = 67109376;
        *(_DWORD *)&v77[4] = a1;
        *(_WORD *)&v77[8] = 2048;
        *(void *)&v77[10] = v45;
        unsigned int v42 = (void *)_os_log_send_and_compose_impl();

        if (!v42)
        {
LABEL_96:
          free(v42);
LABEL_97:

          goto LABEL_98;
        }
LABEL_94:
        sub_100055434((const char *)v42);
        goto LABEL_96;
      }
    }
    unsigned int v42 = 0;
    goto LABEL_96;
  }
  return v4;
}

uint64_t sub_10002DFE4(const char *a1)
{
  unsigned int v2 = removefile_state_alloc();
  int value = 0;
  if (removefile_state_set(v2, 3u, sub_100045B54))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v3 = (id)qword_1000E4060;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = sub_100055404(1);
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
        v4 &= ~1u;
      }
      if (v4)
      {
        unsigned int v5 = v3;
        unsigned int v6 = __error();
        unsigned int v7 = strerror(*v6);
        int v27 = 136315138;
        unsigned int v28 = v7;
        unsigned int v8 = (char *)_os_log_send_and_compose_impl();

        if (v8) {
          sub_100055434(v8);
        }
      }
      else
      {
        unsigned int v8 = 0;
      }
      free(v8);
    }
  }
  if (removefile_state_set(v2, 4u, &value))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v9 = (id)qword_1000E4060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = sub_100055404(1);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        v10 &= ~1u;
      }
      if (v10)
      {
        unsigned int v11 = v9;
        CFDictionaryRef v12 = __error();
        unsigned int v13 = strerror(*v12);
        int v27 = 136315138;
        unsigned int v28 = v13;
        unsigned int v14 = (char *)_os_log_send_and_compose_impl();

        if (v14) {
          sub_100055434(v14);
        }
      }
      else
      {
        unsigned int v14 = 0;
      }
      free(v14);
    }
  }
  if (removefile(a1, v2, 1u))
  {
    int v15 = *__error();
    if (v15 != 2)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v16 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_47;
      }
      int v21 = sub_100055404(1);
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        v21 &= ~1u;
      }
      if (v21)
      {
        unsigned int v19 = v16;
        unsigned int v22 = strerror(v15);
        int v27 = 136315394;
        unsigned int v28 = (void *)a1;
        __int16 v29 = 2080;
        unsigned int v30 = v22;
LABEL_42:
        unsigned int v23 = (char *)_os_log_send_and_compose_impl();

        if (v23) {
          sub_100055434(v23);
        }
        goto LABEL_46;
      }
LABEL_45:
      unsigned int v23 = 0;
LABEL_46:
      free(v23);
LABEL_47:

      uint64_t v24 = 0;
      goto LABEL_48;
    }
  }
  if ((value & 0xFFFFFFFD) != 0)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v16 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v17 = sub_100055404(1);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      v17 &= ~1u;
    }
    if (v17)
    {
      int v18 = value;
      unsigned int v19 = v16;
      unsigned int v20 = strerror(v18);
      int v27 = 136315394;
      unsigned int v28 = (void *)a1;
      __int16 v29 = 2080;
      unsigned int v30 = v20;
      goto LABEL_42;
    }
    goto LABEL_45;
  }
  uint64_t v24 = 1;
LABEL_48:
  removefile_state_free(v2);
  return v24;
}

uint64_t sub_10002E478(const __CFDictionary *a1)
{
  unsigned int v2 = (void *)sub_100088788(a1, kUMUserSessionUUIDKey);
  int v3 = sub_1000885F0(a1, kMKBUserSessionIDKey);
  if (v2)
  {
    int v4 = v3;
    unsigned int v5 = sub_1000173F4((uint64_t)NSUUID, v2);
    if (v5)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v6 = (id)qword_1000E4060;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = 0;
        unsigned int v7 = sub_100055404(1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v7 & 0xFFFFFFFE;
        }
        if (v8)
        {
          LOWORD(v43) = 0;
          unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
          int v10 = (char *)v9;
          if (v9) {
            sub_100055434(v9);
          }
        }
        else
        {
          int v10 = 0;
        }
        free(v10);
      }

      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v20 = (id)qword_1000E4060;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = 0;
        unsigned int v21 = sub_100055404(1);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v22 = v21;
        }
        else {
          unsigned int v22 = v21 & 0xFFFFFFFE;
        }
        if (v22)
        {
          LODWORD(v43) = 67109120;
          HIDWORD(v43) = v4;
          unsigned int v23 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v24 = (char *)v23;
          if (v23) {
            sub_100055434(v23);
          }
        }
        else
        {
          uint64_t v24 = 0;
        }
        free(v24);
      }

      unsigned __int8 v25 = sub_100019308(qword_1000E4318);
      id v39 = 0;
      unsigned __int8 v26 = [v25 deleteIdentity:v5 error:&v39];
      int v15 = v39;

      if (v26)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        int v27 = (id)qword_1000E4060;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v40 = 0;
          unsigned int v28 = sub_100055404(1);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v29 = v28;
          }
          else {
            unsigned int v29 = v28 & 0xFFFFFFFE;
          }
          if (v29)
          {
            LODWORD(v43) = 67109120;
            HIDWORD(v43) = v4;
            unsigned int v30 = (const char *)_os_log_send_and_compose_impl();
            unsigned __int8 v31 = (char *)v30;
            if (v30) {
              sub_100055434(v30);
            }
          }
          else
          {
            unsigned __int8 v31 = 0;
          }
          free(v31);
        }

        uint64_t v37 = 1;
        goto LABEL_73;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v32 = (id)qword_1000E4060;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v43 = 0;
        int v33 = sub_100055404(1);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
          v33 &= ~1u;
        }
        if (v33)
        {
          unsigned int v34 = v32;
          id v35 = [v15 code];
          LODWORD(v40) = 67109376;
          HIDWORD(v40) = v4;
          __int16 v41 = 2048;
          id v42 = v35;
          unsigned int v36 = (char *)_os_log_send_and_compose_impl();

          if (v36) {
            sub_100055434(v36);
          }
        }
        else
        {
          unsigned int v36 = 0;
        }
        free(v36);
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      int v15 = (id)qword_1000E4060;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = 0;
        unsigned int v16 = sub_100055404(1);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v17 = v16;
        }
        else {
          unsigned int v17 = v16 & 0xFFFFFFFE;
        }
        if (v17)
        {
          LOWORD(v43) = 0;
          int v18 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v19 = (char *)v18;
          if (v18) {
            sub_100055434(v18);
          }
        }
        else
        {
          unsigned int v19 = 0;
        }
        free(v19);
      }
    }
    uint64_t v37 = 0;
LABEL_73:

    goto LABEL_74;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v5 = (id)qword_1000E4060;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v40 = 0;
    unsigned int v11 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v12 = v11;
    }
    else {
      unsigned int v12 = v11 & 0xFFFFFFFE;
    }
    if (v12)
    {
      LOWORD(v43) = 0;
      unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v14 = (char *)v13;
      if (v13) {
        sub_100055434(v13);
      }
    }
    else
    {
      unsigned int v14 = 0;
    }
    free(v14);
  }
  uint64_t v37 = 0;
LABEL_74:

  return v37;
}

uint64_t sub_10002EA7C(int a1, int a2)
{
  uint64_t result = qword_1000E42B0;
  if (qword_1000E42B0)
  {
    valuePtr[0] = 0;
    if (CFArrayGetCount((CFArrayRef)qword_1000E42B0) < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v5 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42B0, v5);
        if (ValueAtIndex)
        {
          CFDictionaryRef v7 = ValueAtIndex;
          CFTypeID v8 = CFGetTypeID(ValueAtIndex);
          if (v8 == CFDictionaryGetTypeID())
          {
            CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v7, kUMUserSessionIDKey);
            if (Value)
            {
              CFNumberRef v10 = Value;
              CFTypeID v11 = CFGetTypeID(Value);
              if (v11 == CFNumberGetTypeID() && CFNumberGetValue(v10, kCFNumberIntType, valuePtr) && valuePtr[0] == a1) {
                break;
              }
            }
          }
        }
        if (CFArrayGetCount((CFArrayRef)qword_1000E42B0) <= ++v5) {
          return 0;
        }
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v13 = (id)qword_1000E4060;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v14 = sub_100055404(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v15 = v14;
        }
        else {
          unsigned int v15 = v14 & 0xFFFFFFFE;
        }
        if (v15)
        {
          valuePtr[1] = 67109120;
          valuePtr[2] = a1;
          unsigned int v16 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v17 = (char *)v16;
          if (v16) {
            sub_100055434(v16);
          }
        }
        else
        {
          unsigned int v17 = 0;
        }
        free(v17);
      }

      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_1000E42B0, v5);
      CFIndex Count = CFArrayGetCount((CFArrayRef)qword_1000E42B0);
      qword_1000E42B8 = Count;
      if (!byte_1000E3220 && Count == 1)
      {
        qword_1000E4050 = (uint64_t)kUMUserSessionAPFSNativeVolume;
        byte_1000E3220 = 1;
      }
      if (a2) {
        sub_100036DF0(a1);
      }
      return 1;
    }
  }
  return result;
}

BOOL sub_10002ECD8(const __CFDictionary *a1)
{
  CFTypeRef v1 = sub_100022354(a1);
  int v2 = sub_10002B234((uint64_t)v1);
  if (v1) {
    CFRelease(v1);
  }
  return v2 != 0;
}

uint64_t sub_10002ED18(const __CFDictionary *a1, uint64_t a2, const __CFData *a3)
{
  if (a3)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v6 = (id)qword_1000E4060;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = sub_100055404(1);
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
        v7 &= ~1u;
      }
      if (v7)
      {
        CFTypeID v8 = v6;
        CFDataGetLength(a3);
        unsigned int v9 = (void *)_os_log_send_and_compose_impl();

        if (!v9) {
          goto LABEL_20;
        }
        goto LABEL_18;
      }
      goto LABEL_19;
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v6 = (id)qword_1000E4060;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = sub_100055404(1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        unsigned int v9 = (void *)_os_log_send_and_compose_impl();
        if (!v9)
        {
LABEL_20:
          free(v9);
          goto LABEL_21;
        }
LABEL_18:
        sub_100055434((const char *)v9);
        goto LABEL_20;
      }
LABEL_19:
      unsigned int v9 = 0;
      goto LABEL_20;
    }
  }
LABEL_21:

  sub_10002EF3C(a1, a2, a3);
  return 0;
}

uint64_t sub_10002EF3C(const __CFDictionary *a1, uint64_t a2, const __CFData *a3)
{
  CFDictionaryRef v6 = (const __CFDictionary *)sub_100022354(a1);
  if (v6) {
    goto LABEL_14;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v7 = (id)qword_1000E4060;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v32[0] = 0;
    unsigned int v8 = sub_100055404(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v9 = v8;
    }
    else {
      unsigned int v9 = v8 & 0xFFFFFFFE;
    }
    if (v9)
    {
      LOWORD(v31[0]) = 0;
      LODWORD(v30) = 2;
      unsigned int v29 = v31;
      unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v11 = (char *)v10;
      if (v10) {
        sub_100055434(v10);
      }
    }
    else
    {
      unsigned int v11 = 0;
    }
    free(v11);
  }

  CFDictionaryRef v6 = sub_100024618(a1, 0, 0, 0);
  if (v6)
  {
LABEL_14:
    int v12 = sub_1000885F0(v6, kUMUserSessionIDKey);
    if (dword_1000E42C0 == 1 && v12 == 502) {
      sub_10002A9C4();
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v13 = (id)qword_1000E4060;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v32[0] = 0;
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        LOWORD(v31[0]) = 0;
        LODWORD(v30) = 2;
        unsigned int v29 = v31;
        unsigned int v16 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v17 = (char *)v16;
        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {
        unsigned int v17 = 0;
      }
      free(v17);
    }

    if (a3)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      int v18 = (id)qword_1000E4060;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v31[0] = 0;
        int v19 = sub_100055404(1);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          v19 &= ~1u;
        }
        if (v19)
        {
          unsigned int v20 = v18;
          CFIndex Length = CFDataGetLength(a3);
          LODWORD(v32[0]) = 134217984;
          *(void *)((char *)v32 + 4) = Length;
          LODWORD(v30) = 12;
          unsigned int v29 = v32;
          unsigned int v22 = (char *)_os_log_send_and_compose_impl();

          if (v22) {
            sub_100055434(v22);
          }
        }
        else
        {
          unsigned int v22 = 0;
        }
        free(v22);
      }

      CFDictionarySetValue(v6, @"UserSwitchTaskOpqueData", a3);
    }
    else if (CFDictionaryContainsKey(v6, @"UserSwitchTaskOpqueData"))
    {
      CFDictionaryRemoveValue(v6, @"UserSwitchTaskOpqueData");
    }
    unsigned int v23 = +[RDServer sharedServer];
    [v23 switchToUser:v6 passcodeData:a2];
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v23 = (id)qword_1000E4060;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v32[0] = 0;
      unsigned int v24 = sub_100055404(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v25 = v24;
      }
      else {
        unsigned int v25 = v24 & 0xFFFFFFFE;
      }
      if (v25)
      {
        LOWORD(v31[0]) = 0;
        unsigned __int8 v26 = (const char *)_os_log_send_and_compose_impl();
        int v27 = (char *)v26;
        if (v26) {
          sub_100055434(v26);
        }
      }
      else
      {
        int v27 = 0;
      }
      free(v27);
    }
  }

  return 0;
}

uint64_t sub_10002F3BC()
{
  sub_100056848(qword_1000E4038, 502);
  CFDictionaryRef v0 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  sub_10002EF3C(v0, 0, 0);
  if (v0) {
    CFRelease(v0);
  }
  return 0;
}

id sub_10002F40C()
{
  uint64_t v0 = sub_100056848(qword_1000E4038, 502);
  CFTypeRef v1 = +[RDServer sharedServer];
  id v2 = [v1 LogoutToUser:v0];

  return v2;
}

id sub_10002F468()
{
  uint64_t v0 = +[RDServer sharedServer];
  id v1 = [v0 inLoginSession];

  return v1;
}

uint64_t sub_10002F4A8(const __CFDictionary *a1, const __CFData *a2)
{
  int v4 = sub_100056B1C(qword_1000E4038);
  int v5 = sub_1000885F0(a1, kUMUserSessionIDKey);
  unsigned int v6 = sub_100088734(a1, kUMUserSessionNeedsMountKey);
  int v7 = sub_1000186E0(qword_1000E4318);
  unsigned int v8 = +[NSString stringWithUTF8String:"com.apple.mobile.usermanagerd.foregrounduser_willchange"];
  [v7 post:v8];

  if (dword_1000E42C0 == 1 && v4 != 502 && byte_1000E3220 == 1)
  {
    CFDictionaryRef v9 = (const __CFDictionary *)sub_100019E3C();
    if (v9) {
      sub_1000303C0(v9);
    }
    if (!v6 || v5 == 502)
    {
LABEL_54:
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFDateRef v27 = CFDateCreate(kCFAllocatorDefault, Current);
      if (!v27) {
        goto LABEL_63;
      }
      CFDateRef v28 = v27;
      if (CFDictionaryContainsKey(a1, kUMUserSessionFirstLoginStartTimeKey))
      {
        if (!CFDictionaryContainsKey(a1, kUMUserSessionFirstLoginEndTimeKey))
        {
          CFDictionarySetValue(a1, kUMUserSessionFirstLoginStartTimeKey, v28);
LABEL_62:
          CFRelease(v28);
          goto LABEL_63;
        }
        CFDictionarySetValue(a1, kUMUserSessionCachedLoginStartTimeKey, v28);
        unsigned int v29 = &kUMUserSessionCachedLoginEndTimeKey;
      }
      else
      {
        CFDictionarySetValue(a1, kUMUserSessionFirstLoginStartTimeKey, v28);
        unsigned int v29 = &kUMUserSessionFirstLoginEndTimeKey;
      }
      if (CFDictionaryContainsKey(a1, *v29)) {
        CFDictionaryRemoveValue(a1, *v29);
      }
      goto LABEL_62;
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v10 = (id)qword_1000E4060;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v11 = sub_100055404(1);
      int v12 = v10;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v13 = v11;
      }
      else {
        unsigned int v13 = v11 & 0xFFFFFFFE;
      }
      if (v13)
      {
        unsigned int v14 = (char *)_os_log_send_and_compose_impl();

        if (v14) {
          sub_100055434(v14);
        }
      }
      else
      {

        unsigned int v14 = 0;
      }
      free(v14);
    }

    if ([(id)qword_1000E4030 mountVolumeWithSession:a1 mountPath:0 error:0 forPersona:0])
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v20 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_53;
      }
      unsigned int v21 = sub_100055404(1);
      unsigned int v20 = v20;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v22 = v21;
      }
      else {
        unsigned int v22 = v21 & 0xFFFFFFFE;
      }
      if (v22) {
        goto LABEL_48;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v20 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_53;
      }
      unsigned int v23 = sub_100055404(1);
      unsigned int v20 = v20;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v24 = v23;
      }
      else {
        unsigned int v24 = v23 & 0xFFFFFFFE;
      }
      if (v24)
      {
LABEL_48:
        unsigned int v25 = (char *)_os_log_send_and_compose_impl();

        if (v25) {
          sub_100055434(v25);
        }
        goto LABEL_52;
      }
    }

    unsigned int v25 = 0;
LABEL_52:
    free(v25);
LABEL_53:

    goto LABEL_54;
  }
  if (_os_feature_enabled_impl())
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v15 = (id)qword_1000E4060;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v16 = sub_100055404(1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
        int v18 = (const char *)_os_log_send_and_compose_impl();
        int v19 = (char *)v18;
        if (v18) {
          sub_100055434(v18);
        }
      }
      else
      {
        int v19 = 0;
      }
      free(v19);
    }
  }
LABEL_63:
  sub_10001A7BC();
  if (a2)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v30 = (id)qword_1000E4060;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = sub_100055404(1);
      uint64_t v30 = v30;
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
        v31 &= ~1u;
      }
      if (v31)
      {
        CFDataGetLength(a2);
        goto LABEL_78;
      }
      goto LABEL_80;
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v30 = (id)qword_1000E4060;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v32 = sub_100055404(1);
      uint64_t v30 = v30;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v33 = v32;
      }
      else {
        unsigned int v33 = v32 & 0xFFFFFFFE;
      }
      if (v33)
      {
LABEL_78:
        unsigned int v34 = (char *)_os_log_send_and_compose_impl();

        if (v34) {
          sub_100055434(v34);
        }
        goto LABEL_81;
      }
LABEL_80:

      unsigned int v34 = 0;
LABEL_81:
      free(v34);
    }
  }

  uint64_t v35 = qword_1000E4038;
  int v36 = sub_100056B1C(qword_1000E4038);
  char v37 = sub_100057258(v35, v36, v5);
  if (a2)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    id v38 = (id)qword_1000E4060;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      int v39 = sub_100055404(1);
      uint64_t v40 = v38;
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
        v39 &= ~1u;
      }
      if (v39)
      {
        CFDataGetLength(a2);
        __int16 v41 = (char *)_os_log_send_and_compose_impl();

        if (v41) {
          sub_100055434(v41);
        }
      }
      else
      {

        __int16 v41 = 0;
      }
      free(v41);
    }

    if (sub_1000306A0(a2, (uint64_t)"/private/var//keybags/nextsession_opaque.kb"))
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      id v42 = (id)qword_1000E4060;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v43 = sub_100055404(1);
        unsigned int v44 = v42;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v45 = v43;
        }
        else {
          unsigned int v45 = v43 & 0xFFFFFFFE;
        }
        if (v45)
        {
          unsigned int v46 = (char *)_os_log_send_and_compose_impl();

          if (v46) {
            sub_100055434(v46);
          }
        }
        else
        {

          unsigned int v46 = 0;
        }
        free(v46);
      }
    }
  }
  if (v37)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v47 = (id)qword_1000E4060;
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v48 = sub_100055404(1);
      unsigned int v49 = v47;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v50 = v48;
      }
      else {
        unsigned int v50 = v48 & 0xFFFFFFFE;
      }
      if (v50)
      {
        unsigned int v51 = (char *)_os_log_send_and_compose_impl();

        if (v51) {
          sub_100055434(v51);
        }
      }
      else
      {

        unsigned int v51 = 0;
      }
      free(v51);
    }

    if ((_os_feature_enabled_impl() & 1) == 0 && IOUSBDeviceControllerCreate())
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v57 = (id)qword_1000E4060;
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v58 = sub_100055404(1);
        unsigned int v59 = v57;
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v60 = v58;
        }
        else {
          unsigned int v60 = v58 & 0xFFFFFFFE;
        }
        if (v60)
        {
          unsigned int v61 = (char *)_os_log_send_and_compose_impl();

          if (v61) {
            sub_100055434(v61);
          }
        }
        else
        {

          unsigned int v61 = 0;
        }
        free(v61);
      }
    }
    if (qword_1000E4308)
    {
      if (qword_1000E4078 != -1) {
        dispatch_once(&qword_1000E4078, &stru_1000D55B8);
      }
      unsigned int v63 = (id)qword_1000E4070;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v64 = sub_100055404(0);
        __int16 v65 = v63;
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v66 = v64;
        }
        else {
          unsigned int v66 = v64 & 0xFFFFFFFE;
        }
        if (v66)
        {
          unsigned int v67 = (char *)_os_log_send_and_compose_impl();

          if (v67) {
            sub_100055434(v67);
          }
        }
        else
        {

          unsigned int v67 = 0;
        }
        free(v67);
      }

      dispatch_source_cancel((dispatch_source_t)qword_1000E4308);
      unsigned int v68 = (void *)qword_1000E4308;
      qword_1000E4308 = 0;
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v69 = (id)qword_1000E4060;
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v70 = sub_100055404(1);
      unsigned int v71 = v69;
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v72 = v70;
      }
      else {
        unsigned int v72 = v70 & 0xFFFFFFFE;
      }
      if (v72)
      {
        unsigned int v73 = (char *)_os_log_send_and_compose_impl();

        if (v73) {
          sub_100055434(v73);
        }
      }
      else
      {

        unsigned int v73 = 0;
      }
      free(v73);
    }

    unsigned int v74 = sub_100018600(qword_1000E4318);
    char v75 = sub_1000192C0((uint64_t)v74);
    int v76 = dword_1000E42C0;

    if ((v75 & 1) != 0 || v76 == 2)
    {
      sub_10001BDFC(v4, v5);
    }
    else
    {
      reboot3();
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v77 = (id)qword_1000E4060;
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v78 = sub_100055404(1);
        unsigned int v79 = v77;
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v80 = v78;
        }
        else {
          unsigned int v80 = v78 & 0xFFFFFFFE;
        }
        if (v80)
        {
          id v81 = (char *)_os_log_send_and_compose_impl();

          if (v81) {
            sub_100055434(v81);
          }
        }
        else
        {

          id v81 = 0;
        }
        free(v81);
      }
    }
    return 1;
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v52 = (id)qword_1000E4060;
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v53 = sub_100055404(1);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v54 = v53;
      }
      else {
        unsigned int v54 = v53 & 0xFFFFFFFE;
      }
      if (v54)
      {
        unsigned int v55 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v56 = (char *)v55;
        if (v55) {
          sub_100055434(v55);
        }
      }
      else
      {
        unsigned int v56 = 0;
      }
      free(v56);
    }

    return 0;
  }
}

void sub_1000303C0(const __CFDictionary *a1)
{
  memset(&v22, 0, 512);
  uint64_t v17 = 0;
  uint64_t valuePtr = 0;
  uint64_t v16 = 0;
  int v2 = sub_1000885F0(a1, kUMUserSessionIDKey);
  sub_1000887CC(a1, kUMUserSessionHomeDirKey, v21, 1024);
  if (statfs(v21, &v22))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v3 = (id)qword_1000E4060;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v4 = sub_100055404(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v5 = v4;
      }
      else {
        unsigned int v5 = v4 & 0xFFFFFFFE;
      }
      if (v5)
      {
        int v19 = 67109120;
        int v20 = v2;
        unsigned int v6 = (const char *)_os_log_send_and_compose_impl();
        int v7 = (char *)v6;
        if (v6) {
          sub_100055434(v6);
        }
      }
      else
      {
        int v7 = 0;
      }
      free(v7);
    }
  }
  else
  {
    uint64_t v8 = v22.f_blocks * v22.f_bsize;
    uint64_t v9 = v22.f_bfree * v22.f_bsize;
    uint64_t v17 = v8;
    uint64_t valuePtr = v8;
    if (v8 <= v9) {
      uint64_t v9 = 0;
    }
    uint64_t v16 = v8 - v9;
  }
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  if (v10)
  {
    CFNumberRef v11 = v10;
    CFDictionarySetValue(a1, kUMUserSessionQuotaLimitKey, v10);
    CFRelease(v11);
  }
  CFNumberRef v12 = CFNumberCreate(0, kCFNumberLongLongType, &v17);
  if (v12)
  {
    CFNumberRef v13 = v12;
    CFDictionarySetValue(a1, kUMUserSessionQuotaSoftLimitKey, v12);
    CFRelease(v13);
  }
  CFNumberRef v14 = CFNumberCreate(0, kCFNumberLongLongType, &v16);
  if (v14)
  {
    CFNumberRef v15 = v14;
    CFDictionarySetValue(a1, kUMUserSessionQuotaUsedKey, v14);
    CFRelease(v15);
  }
}

uint64_t sub_1000306A0(const __CFData *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int Length = CFDataGetLength(a1);
  int valuePtr = Length;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v5 = (id)qword_1000E4060;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = v6 & 0xFFFFFFFE;
    }
    if (v7)
    {
      int v34 = 67109120;
      int v35 = Length;
      uint64_t v8 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v9 = (char *)v8;
      if (v8) {
        sub_100055434(v8);
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    free(v9);
  }

  CFNumberRef v11 = sub_100088C68();
  CFNumberRef v12 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(v11, @"BLOBLEN", v12);
  CFRelease(v12);
  CFDictionaryAddValue(v11, @"BLOB", a1);
  CFTypeRef v13 = sub_10008887C(v11);
  if (v13)
  {
    CFNumberRef v14 = v13;
    CFNumberRef v15 = sub_100018F6C(qword_1000E4318);
    uint64_t v16 = +[NSString stringWithUTF8String:a2];
    unsigned int v17 = [v15 atomicallyWriteData:v14 toPath:v16 error:0];

    if (v17)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      int v18 = (id)qword_1000E4060;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v19 = sub_100055404(1);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v20 = v19;
        }
        else {
          unsigned int v20 = v19 & 0xFFFFFFFE;
        }
        if (v20)
        {
          LOWORD(v34) = 0;
          unsigned int v21 = (const char *)_os_log_send_and_compose_impl();
          statfs v22 = (char *)v21;
          if (v21) {
            sub_100055434(v21);
          }
        }
        else
        {
          statfs v22 = 0;
        }
        free(v22);
      }
      uint64_t v10 = 1;
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      int v18 = (id)qword_1000E4060;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v28 = sub_100055404(1);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v29 = v28;
        }
        else {
          unsigned int v29 = v28 & 0xFFFFFFFE;
        }
        if (v29)
        {
          LOWORD(v34) = 0;
          uint64_t v30 = (const char *)_os_log_send_and_compose_impl();
          int v31 = (char *)v30;
          if (v30) {
            sub_100055434(v30);
          }
        }
        else
        {
          int v31 = 0;
        }
        free(v31);
      }
      uint64_t v10 = 0;
    }

    CFRelease(v14);
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v23 = (id)qword_1000E4060;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v24 = sub_100055404(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v25 = v24;
      }
      else {
        unsigned int v25 = v24 & 0xFFFFFFFE;
      }
      if (v25)
      {
        LOWORD(v34) = 0;
        unsigned __int8 v26 = (const char *)_os_log_send_and_compose_impl();
        CFDateRef v27 = (char *)v26;
        if (v26) {
          sub_100055434(v26);
        }
      }
      else
      {
        CFDateRef v27 = 0;
      }
      free(v27);
    }

    uint64_t v10 = 0;
  }
  CFRelease(v11);
  return v10;
}

CFDictionaryRef sub_100030B28(const __CFDictionary *a1)
{
  CFDictionaryRef v1 = (const __CFDictionary *)sub_100022354(a1);
  CFDictionaryRef v2 = v1;
  if (v1)
  {
    if (sub_1000885F0(v1, kUMUserSessionIDKey) != 502)
    {
      uint64_t v36 = 0;
      uint64_t valuePtr = 0;
      uint64_t v35 = 0;
      int v3 = sub_1000885F0(v2, kUMUserSessionIDKey);
      sub_1000887CC(v2, kUMUserSessionHomeDirKey, v40, 1024);
      if (byte_1000E3220)
      {
        if (v3 == sub_100056B1C(qword_1000E4038) || v3 == dword_1000E3224) {
          sub_1000303C0(v2);
        }
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        uint64_t v10 = (id)qword_1000E4060;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v11 = sub_100055404(1);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v12 = v11;
          }
          else {
            unsigned int v12 = v11 & 0xFFFFFFFE;
          }
          if (v12)
          {
            int v38 = 67109120;
            int v39 = v3;
            CFTypeRef v13 = (const char *)_os_log_send_and_compose_impl();
            CFNumberRef v14 = (char *)v13;
            if (v13) {
              sub_100055434(v13);
            }
          }
          else
          {
            CFNumberRef v14 = 0;
          }
          free(v14);
        }

        if (fsctl(v40, 0x40184A03uLL, &v32, 0))
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          uint64_t v16 = (id)qword_1000E4060;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v17 = sub_100055404(1);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v18 = v17;
            }
            else {
              unsigned int v18 = v17 & 0xFFFFFFFE;
            }
            if (v18)
            {
              int v38 = 67109120;
              int v39 = v3;
              unsigned int v19 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v20 = (char *)v19;
              if (v19) {
                sub_100055434(v19);
              }
            }
            else
            {
              unsigned int v20 = 0;
            }
            free(v20);
          }
        }
        else
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v21 = (id)qword_1000E4060;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v22 = sub_100055404(1);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v23 = v22;
            }
            else {
              unsigned int v23 = v22 & 0xFFFFFFFE;
            }
            if (v23)
            {
              int v38 = 67109120;
              int v39 = v3;
              unsigned int v24 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v25 = (char *)v24;
              if (v24) {
                sub_100055434(v24);
              }
            }
            else
            {
              unsigned int v25 = 0;
            }
            free(v25);
          }

          uint64_t v36 = 0;
          uint64_t valuePtr = 0;
          uint64_t v35 = v33;
        }
        CFNumberRef v26 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
        if (v26)
        {
          CFNumberRef v27 = v26;
          CFDictionarySetValue(v2, kUMUserSessionQuotaLimitKey, v26);
          CFRelease(v27);
        }
        CFNumberRef v28 = CFNumberCreate(0, kCFNumberLongLongType, &v36);
        if (v28)
        {
          CFNumberRef v29 = v28;
          CFDictionarySetValue(v2, kUMUserSessionQuotaSoftLimitKey, v28);
          CFRelease(v29);
        }
        CFNumberRef v30 = CFNumberCreate(0, kCFNumberLongLongType, &v35);
        if (v30)
        {
          CFNumberRef v31 = v30;
          CFDictionarySetValue(v2, kUMUserSessionQuotaUsedKey, v30);
          CFRelease(v31);
        }
      }
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v5 = (id)qword_1000E4060;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)uint64_t v40 = 0;
      unsigned int v6 = sub_100055404(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
        LOWORD(v32) = 0;
        uint64_t v8 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v9 = (char *)v8;
        if (v8) {
          sub_100055434(v8);
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
      free(v9);
    }
  }
  return v2;
}

const void *sub_100031054(const __CFDictionary *a1, _DWORD *a2)
{
  CFDictionaryRef v3 = (const __CFDictionary *)sub_100022354(a1);
  if (!v3)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v10 = (id)qword_1000E4060;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v11 = sub_100055404(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v12 = v11;
      }
      else {
        unsigned int v12 = v11 & 0xFFFFFFFE;
      }
      if (v12)
      {
        CFTypeRef v13 = (const char *)_os_log_send_and_compose_impl();
        CFNumberRef v14 = (char *)v13;
        if (v13) {
          sub_100055434(v13);
        }
      }
      else
      {
        CFNumberRef v14 = 0;
      }
      free(v14);
    }

    if (a2)
    {
      uint64_t v16 = 0;
      *a2 = 2;
      return v16;
    }
    return 0;
  }
  CFDictionaryRef v4 = v3;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v5 = (id)qword_1000E4060;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = v6 & 0xFFFFFFFE;
    }
    if (v7)
    {
      uint64_t v8 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v9 = (char *)v8;
      if (v8) {
        sub_100055434(v8);
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    free(v9);
  }

  if (!CFDictionaryContainsKey(v4, kUMUserSessionKeybagOpaqueDataKey)) {
    return 0;
  }
  CFNumberRef Value = CFDictionaryGetValue(v4, kUMUserSessionKeybagOpaqueDataKey);
  uint64_t v16 = Value;
  if (Value) {
    CFRetain(Value);
  }
  return v16;
}

uint64_t sub_1000312B4(const __CFDictionary *a1, const void *a2, _DWORD *a3)
{
  CFDictionaryRef v5 = (const __CFDictionary *)sub_100022354(a1);
  if (v5)
  {
    unsigned int v6 = v5;
    sub_1000885F0(v5, kUMUserSessionIDKey);
    if (a2)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v7 = (id)qword_1000E4060;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v8 = sub_100055404(1);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v9 = v8;
        }
        else {
          unsigned int v9 = v8 & 0xFFFFFFFE;
        }
        if (v9)
        {
          uint64_t v10 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v11 = (char *)v10;
          if (v10) {
            sub_100055434(v10);
          }
        }
        else
        {
          unsigned int v11 = 0;
        }
        free(v11);
      }

      CFDictionarySetValue(v6, kUMUserSessionKeybagOpaqueDataKey, a2);
LABEL_50:
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFNumberRef v27 = (id)qword_1000E4060;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v28 = sub_100055404(1);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v29 = v28;
        }
        else {
          unsigned int v29 = v28 & 0xFFFFFFFE;
        }
        if (v29)
        {
          CFNumberRef v30 = (const char *)_os_log_send_and_compose_impl();
          CFNumberRef v31 = (char *)v30;
          if (v30) {
            sub_100055434(v30);
          }
        }
        else
        {
          CFNumberRef v31 = 0;
        }
        free(v31);
      }

      sub_10001A7BC();
      return 1;
    }
    if (CFDictionaryContainsKey(v6, kUMUserSessionKeybagOpaqueDataKey))
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v17 = (id)qword_1000E4060;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v18 = sub_100055404(1);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v19 = v18;
        }
        else {
          unsigned int v19 = v18 & 0xFFFFFFFE;
        }
        if (v19)
        {
          unsigned int v20 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v21 = (char *)v20;
          if (v20) {
            sub_100055434(v20);
          }
        }
        else
        {
          unsigned int v21 = 0;
        }
        free(v21);
      }

      CFDictionaryRemoveValue(v6, kUMUserSessionKeybagOpaqueDataKey);
      goto LABEL_50;
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v22 = (id)qword_1000E4060;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v23 = sub_100055404(1);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v24 = v23;
      }
      else {
        unsigned int v24 = v23 & 0xFFFFFFFE;
      }
      if (v24)
      {
        unsigned int v25 = (const char *)_os_log_send_and_compose_impl();
        CFNumberRef v26 = (char *)v25;
        if (v25) {
          sub_100055434(v25);
        }
      }
      else
      {
        CFNumberRef v26 = 0;
      }
      free(v26);
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v12 = (id)qword_1000E4060;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14)
      {
        CFNumberRef v15 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v16 = (char *)v15;
        if (v15) {
          sub_100055434(v15);
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      free(v16);
    }

    if (a3) {
      *a3 = 2;
    }
  }
  return 1;
}

CFArrayRef sub_1000317BC(int a1)
{
  sub_100056848(qword_1000E4038, a1);
  CFDictionaryRef v1 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (!v1) {
    return 0;
  }
  CFDictionaryRef v2 = v1;
  if (CFDictionaryContainsKey(v1, kUMUserSessionSyncMachServicesKey)
    && (v3 = CFDictionaryGetValue(v2, kUMUserSessionSyncMachServicesKey), CFTypeID v4 = CFGetTypeID(v3), v4 == CFArrayGetTypeID()))
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v2, kUMUserSessionSyncMachServicesKey);
    CFArrayRef Copy = CFArrayCreateCopy(kCFAllocatorDefault, Value);
  }
  else
  {
    CFArrayRef Copy = 0;
  }
  CFRelease(v2);
  return Copy;
}

__CFDictionary *sub_100031874(const __CFDictionary *a1)
{
  v21[0] = kUMUserSessionNameKey;
  v21[1] = CFStringGetTypeID();
  v21[2] = kUMUserSessionFirstNameKey;
  v21[3] = CFStringGetTypeID();
  v21[4] = kUMUserSessionLastNameKey;
  v21[5] = CFStringGetTypeID();
  v21[6] = kUMUserSessionDisplayNameKey;
  v21[7] = CFStringGetTypeID();
  v21[8] = kUMUserSessionOpaqueDataKey;
  v21[9] = CFDataGetTypeID();
  v21[10] = kUMUserSessionFileInfoKey;
  v21[11] = CFStringGetTypeID();
  v21[12] = kUMUserSessionAuditorKey;
  v21[13] = CFBooleanGetTypeID();
  v21[14] = kUMUserSessionisTransientKey;
  v21[15] = CFBooleanGetTypeID();
  v21[16] = kUMUserSessionCloudLoginTimeStampKey;
  v21[17] = CFDateGetTypeID();
  v21[18] = kUMUserSessionDisabledKey;
  v21[19] = CFBooleanGetTypeID();
  v21[20] = kUMUserSessionLanguageKey;
  v21[21] = CFStringGetTypeID();
  CFDictionaryRef v2 = (__CFDictionary *)sub_100022354(a1);
  if (v2)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFDictionaryRef v3 = (id)qword_1000E4060;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v4 = sub_100055404(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v5 = v4;
      }
      else {
        unsigned int v5 = v4 & 0xFFFFFFFE;
      }
      if (v5)
      {
        unsigned int v6 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v7 = (char *)v6;
        if (v6) {
          sub_100055434(v6);
        }
      }
      else
      {
        unsigned int v7 = 0;
      }
      free(v7);
    }

    for (uint64_t i = 0; i != 22; i += 2)
      sub_1000281F0(v2, a1, (void *)v21[i], v21[i + 1]);
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v14 = (id)qword_1000E4060;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = sub_100055404(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = v15 & 0xFFFFFFFE;
      }
      if (v16)
      {
        unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v18 = (char *)v17;
        if (v17) {
          sub_100055434(v17);
        }
      }
      else
      {
        unsigned int v18 = 0;
      }
      free(v18);
    }

    unsigned int v8 = sub_1000186E0(qword_1000E4318);
    unsigned int v19 = +[NSString stringWithUTF8String:kMobileKeyBagUserChangedNotificationToken];
    [v8 post:v19];
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v8 = (id)qword_1000E4060;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v9 = sub_100055404(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v10 = v9;
      }
      else {
        unsigned int v10 = v9 & 0xFFFFFFFE;
      }
      if (v10)
      {
        unsigned int v11 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v12 = (char *)v11;
        if (v11) {
          sub_100055434(v11);
        }
      }
      else
      {
        unsigned int v12 = 0;
      }
      free(v12);
    }
  }

  return v2;
}

const void *sub_100031CD4(const char *a1)
{
  CFDictionaryRef v1 = (const __CFDictionary *)sub_100088B1C(a1);
  if (!v1) {
    return 0;
  }
  CFDictionaryRef v2 = v1;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFDictionaryRef v3 = (id)qword_1000E4060;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      unsigned int v6 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v7 = (char *)v6;
      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    free(v7);
  }

  unsigned int v8 = sub_100088578(v2, @"BLOB");
  sub_1000885F0(v2, @"BLOBLEN");
  if (v8)
  {
    CFRetain(v8);
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v9 = (id)qword_1000E4060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = sub_100055404(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        unsigned int v12 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v13 = (char *)v12;
        if (v12) {
          sub_100055434(v12);
        }
      }
      else
      {
        unsigned int v13 = 0;
      }
      free(v13);
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v9 = (id)qword_1000E4060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        unsigned int v16 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v17 = (char *)v16;
        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {
        unsigned int v17 = 0;
      }
      free(v17);
    }
    unsigned int v8 = 0;
  }

  CFRelease(v2);
  return v8;
}

uint64_t sub_100031FF8(int a1)
{
  uint64_t v5 = 0;
  unsigned int v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = -1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000320B4;
  v3[3] = &unk_1000D54C8;
  int v4 = a1;
  void v3[4] = &v5;
  dispatch_sync((dispatch_queue_t)qword_1000E4320, v3);
  uint64_t v1 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v1;
}

void sub_1000320B4(uint64_t a1)
{
  if (dword_1000E321C == -1)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v7 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_53;
    }
    unsigned int v8 = sub_100055404(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v9 = v8;
    }
    else {
      unsigned int v9 = v8 & 0xFFFFFFFE;
    }
    if (v9)
    {
LABEL_49:
      unsigned int v23 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v24 = (char *)v23;
      if (v23) {
        sub_100055434(v23);
      }
      goto LABEL_52;
    }
LABEL_51:
    unsigned int v24 = 0;
LABEL_52:
    free(v24);
    goto LABEL_53;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFDictionaryRef v2 = (id)qword_1000E4060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      uint64_t v5 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  int v10 = *(_DWORD *)(a1 + 40);
  if (v10 != -1)
  {
    if (v10 >= 1 && v10 <= dword_1000E321C)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v11 = (id)qword_1000E4060;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v12 = sub_100055404(1);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v13 = v12;
        }
        else {
          unsigned int v13 = v12 & 0xFFFFFFFE;
        }
        if (v13)
        {
          unsigned int v14 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v15 = (char *)v14;
          if (v14) {
            sub_100055434(v14);
          }
        }
        else
        {
          unsigned int v15 = 0;
        }
        free(v15);
      }

      dword_1000E321C = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = dword_1000E321C;
      sub_10001A7BC();
      return;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -1;
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v7 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
LABEL_53:

      return;
    }
    unsigned int v21 = sub_100055404(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = v21 & 0xFFFFFFFE;
    }
    if (v22) {
      goto LABEL_49;
    }
    goto LABEL_51;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = dword_1000E321C;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v16 = (id)qword_1000E4060;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v17 = sub_100055404(1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = v17 & 0xFFFFFFFE;
    }
    if (v18)
    {
      unsigned int v19 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v20 = (char *)v19;
      if (v19) {
        sub_100055434(v19);
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
    free(v20);
  }
}

uint64_t sub_100032580()
{
  return MGGetBoolAnswer();
}

uint64_t sub_10003258C(uint64_t a1)
{
  uint64_t v2 = sub_100056848(qword_1000E4038, a1);
  if (v2)
  {
    CFDictionaryRef v3 = (const __CFDictionary *)v2;
    bzero(&v130, 0x400uLL);
    sub_1000887CC(v3, kUMUserSessionHomeDirKey, (char *)&v130, 1024);
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v4 = (id)qword_1000E4060;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v129[0] = 0;
      unsigned int v5 = sub_100055404(1);
      unsigned int v6 = v4;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v5;
      }
      else {
        unsigned int v7 = v5 & 0xFFFFFFFE;
      }
      if (v7)
      {
        *(_DWORD *)v128 = 67109378;
        *(_DWORD *)&v128[4] = a1;
        *(_WORD *)&v128[8] = 2080;
        *(void *)&v128[10] = &v130;
        LODWORD(v124) = 18;
        CFStringRef v123 = (uint64_t *)v128;
        unsigned int v8 = (char *)_os_log_send_and_compose_impl();

        if (v8) {
          sub_100055434(v8);
        }
      }
      else
      {

        unsigned int v8 = 0;
      }
      free(v8);
    }

    if (sub_100033C80(a1, (const char *)&v130, 0))
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v14 = (id)qword_1000E4060;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)v128 = 0;
        unsigned int v15 = sub_100055404(1);
        unsigned int v14 = v14;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v16 = v15;
        }
        else {
          unsigned int v16 = v15 & 0xFFFFFFFE;
        }
        if (v16)
        {
          LODWORD(v129[0]) = 67109120;
          HIDWORD(v129[0]) = a1;
          LODWORD(v124) = 8;
          CFStringRef v123 = v129;
          goto LABEL_39;
        }
        goto LABEL_41;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v14 = (id)qword_1000E4060;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)v128 = 0;
        unsigned int v17 = sub_100055404(1);
        unsigned int v14 = v14;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v18 = v17;
        }
        else {
          unsigned int v18 = v17 & 0xFFFFFFFE;
        }
        if (v18)
        {
          LODWORD(v129[0]) = 67109120;
          HIDWORD(v129[0]) = a1;
          LODWORD(v124) = 8;
          CFStringRef v123 = v129;
LABEL_39:
          unsigned int v19 = (char *)_os_log_send_and_compose_impl();

          if (v19) {
            sub_100055434(v19);
          }
          goto LABEL_42;
        }
LABEL_41:

        unsigned int v19 = 0;
LABEL_42:
        free(v19);
      }
    }

    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v20 = (id)qword_1000E4060;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)v128 = 0;
      unsigned int v21 = sub_100055404(1);
      unsigned int v22 = v20;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v23 = v21;
      }
      else {
        unsigned int v23 = v21 & 0xFFFFFFFE;
      }
      if (v23)
      {
        LODWORD(v129[0]) = 67109120;
        HIDWORD(v129[0]) = a1;
        LODWORD(v124) = 8;
        CFStringRef v123 = v129;
        unsigned int v24 = (char *)_os_log_send_and_compose_impl();

        if (v24) {
          sub_100055434(v24);
        }
      }
      else
      {

        unsigned int v24 = 0;
      }
      free(v24);
    }

    int v25 = CFDictionaryContainsKey(v3, kUMUserSessionVolumeDeviceNodeKey);
    CFNumberRef v26 = &qword_1000E4000;
    if (!v25)
    {
      BOOL v125 = 0;
      unsigned int v9 = 0;
      uint64_t v32 = 0;
      goto LABEL_66;
    }
    if (![(id)qword_1000E4030 mountVolumeWithSession:v3 mountPath:0 error:0 forPersona:0])
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      __int16 v41 = (id)qword_1000E4060;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)v128 = 0;
        unsigned int v42 = sub_100055404(1);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v43 = v42;
        }
        else {
          unsigned int v43 = v42 & 0xFFFFFFFE;
        }
        if (v43)
        {
          LOWORD(v129[0]) = 0;
          unsigned int v44 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v45 = (char *)v44;
          if (v44) {
            sub_100055434(v44);
          }
        }
        else
        {
          unsigned int v45 = 0;
        }
        free(v45);
      }

      unsigned int v9 = 0;
      uint64_t v35 = 0xFFFFFFFFLL;
      goto LABEL_238;
    }
    BOOL v125 = v25 != 0;
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFNumberRef v27 = (id)qword_1000E4060;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)v128 = 0;
      unsigned int v28 = sub_100055404(1);
      unsigned int v29 = v27;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v30 = v28;
      }
      else {
        unsigned int v30 = v28 & 0xFFFFFFFE;
      }
      if (v30)
      {
        LOWORD(v129[0]) = 0;
        LODWORD(v124) = 2;
        CFStringRef v123 = v129;
        CFNumberRef v31 = (char *)_os_log_send_and_compose_impl();

        if (v31) {
          sub_100055434(v31);
        }
      }
      else
      {

        CFNumberRef v31 = 0;
      }
      free(v31);
    }

    if (sub_100088734(v3, kUMUserSessionHasSyncBagKey) != 1)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v56 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_215;
      }
      *(void *)v128 = 0;
      unsigned int v57 = sub_100055404(1);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v58 = v57;
      }
      else {
        unsigned int v58 = v57 & 0xFFFFFFFE;
      }
      if (v58)
      {
        LODWORD(v129[0]) = 67109120;
        HIDWORD(v129[0]) = a1;
        LODWORD(v124) = 8;
        CFStringRef v123 = v129;
        goto LABEL_211;
      }
LABEL_213:
      unsigned int v87 = 0;
LABEL_214:
      free(v87);
LABEL_215:

      unsigned int v9 = 0;
      uint64_t v35 = 0xFFFFFFFFLL;
      goto LABEL_216;
    }
    if (sub_100088734(v3, kUMUserSessionHasSyncBagKey))
    {
      if (![(id)qword_1000E4030 splitUserVolumeEnabled])
      {
LABEL_202:
        int SyncBagForUser = MKBUserSessionLoadSyncBagForUser();
        if (SyncBagForUser)
        {
LABEL_203:
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v56 = (id)qword_1000E4060;
          if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_215;
          }
          v129[0] = 0;
          unsigned int v84 = sub_100055404(1);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v85 = v84;
          }
          else {
            unsigned int v85 = v84 & 0xFFFFFFFE;
          }
          if (v85)
          {
            *(_DWORD *)v128 = 67109376;
            *(_DWORD *)&v128[4] = a1;
            *(_WORD *)&v128[8] = 1024;
            *(_DWORD *)&v128[10] = SyncBagForUser;
            LODWORD(v124) = 14;
            CFStringRef v123 = (uint64_t *)v128;
LABEL_211:
            uint64_t v86 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v87 = (char *)v86;
            if (v86) {
              sub_100055434(v86);
            }
            goto LABEL_214;
          }
          goto LABEL_213;
        }
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v101 = (id)qword_1000E4060;
        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)v128 = 0;
          unsigned int v102 = sub_100055404(1);
          CFNumberRef v103 = v101;
          if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v104 = v102;
          }
          else {
            unsigned int v104 = v102 & 0xFFFFFFFE;
          }
          if (v104)
          {
            LODWORD(v129[0]) = 67109120;
            HIDWORD(v129[0]) = a1;
            LODWORD(v124) = 8;
            CFStringRef v123 = v129;
            v105 = (char *)_os_log_send_and_compose_impl();

            if (v105) {
              sub_100055434(v105);
            }
          }
          else
          {

            v105 = 0;
          }
          free(v105);
        }

        uint64_t v32 = sub_100088788(v3, kUMUserSessionVolumeDeviceNodeKey);
        if (v32)
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v106 = (id)qword_1000E4060;
          if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
          {
            v129[0] = 0;
            unsigned int v107 = sub_100055404(1);
            unsigned int v108 = v106;
            if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v109 = v107;
            }
            else {
              unsigned int v109 = v107 & 0xFFFFFFFE;
            }
            if (v109)
            {
              *(_DWORD *)v128 = 138412546;
              *(void *)&v128[4] = v32;
              *(_WORD *)&v128[12] = 1024;
              *(_DWORD *)&v128[14] = a1;
              LODWORD(v124) = 18;
              CFStringRef v123 = (uint64_t *)v128;
              v110 = (char *)_os_log_send_and_compose_impl();

              if (v110) {
                sub_100055434(v110);
              }
            }
            else
            {

              v110 = 0;
            }
            free(v110);
          }

          unsigned int v111 = sub_100019308(qword_1000E4318);
          id v127 = 0;
          unsigned int v112 = [v111 mapVolume:v32 toSession:a1 withPersona:0 error:&v127];
          unsigned int v9 = v127;

          if (!v112)
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            unsigned int v118 = (id)qword_1000E4060;
            if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
            {
              v129[0] = 0;
              int v119 = sub_100055404(1);
              unsigned int v120 = v118;
              if (!os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT)) {
                v119 &= ~1u;
              }
              if (v119)
              {
                id v121 = [v9 code];
                *(_DWORD *)v128 = 134217984;
                *(void *)&v128[4] = v121;
                LODWORD(v124) = 12;
                CFStringRef v123 = (uint64_t *)v128;
                unsigned int v122 = (char *)_os_log_send_and_compose_impl();

                if (v122) {
                  sub_100055434(v122);
                }
              }
              else
              {

                unsigned int v122 = 0;
              }
              free(v122);
            }

            BOOL v125 = 1;
            uint64_t v35 = 0xFFFFFFFFLL;
            goto LABEL_172;
          }
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v113 = (id)qword_1000E4060;
          if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)v128 = 0;
            unsigned int v114 = sub_100055404(1);
            CFNumberRef v115 = v113;
            if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v116 = v114;
            }
            else {
              unsigned int v116 = v114 & 0xFFFFFFFE;
            }
            if (v116)
            {
              LOWORD(v129[0]) = 0;
              LODWORD(v124) = 2;
              CFStringRef v123 = v129;
              int v117 = (char *)_os_log_send_and_compose_impl();

              if (v117) {
                sub_100055434(v117);
              }
            }
            else
            {

              int v117 = 0;
            }
            free(v117);
          }

          char v33 = 1;
LABEL_67:
          uint64_t persona = launch_create_persona();
          if (!persona)
          {
            dword_1000E3224 = a1;
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            unsigned int v46 = (id)qword_1000E4060;
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v130 = 0;
              unsigned int v47 = sub_100055404(1);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v48 = v47;
              }
              else {
                unsigned int v48 = v47 & 0xFFFFFFFE;
              }
              if (v48)
              {
                *(_DWORD *)v128 = 67109120;
                *(_DWORD *)&v128[4] = a1;
                unsigned int v49 = (const char *)_os_log_send_and_compose_impl();
                unsigned int v50 = (char *)v49;
                if (v49) {
                  sub_100055434(v49);
                }
              }
              else
              {
                unsigned int v50 = 0;
              }
              free(v50);
            }

            uint64_t v35 = 0;
            goto LABEL_250;
          }
          uint64_t v35 = persona;
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          uint64_t v36 = (id)qword_1000E4060;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)v128 = 0;
            unsigned int v37 = sub_100055404(1);
            int v38 = v36;
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v39 = v37;
            }
            else {
              unsigned int v39 = v37 & 0xFFFFFFFE;
            }
            if (v39)
            {
              LODWORD(v130) = 67109376;
              HIDWORD(v130) = a1;
              __int16 v131 = 1024;
              LODWORD(v132) = v35;
              LODWORD(v124) = 14;
              CFStringRef v123 = &v130;
              uint64_t v40 = (char *)_os_log_send_and_compose_impl();

              if (v40) {
                sub_100055434(v40);
              }
            }
            else
            {

              uint64_t v40 = 0;
            }
            free(v40);
          }

          char v62 = v33 ^ 1;
          if (!v32) {
            char v62 = 1;
          }
          if (v62)
          {
LABEL_171:
            CFNumberRef v26 = &qword_1000E4000;
            if (!v25) {
              goto LABEL_238;
            }
LABEL_172:
            if (sub_100033F6C(v3, a1))
            {
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              int v76 = (id)qword_1000E4060;
              if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v130 = 0;
                unsigned int v77 = sub_100055404(1);
                unsigned int v78 = v76;
                if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v79 = v77;
                }
                else {
                  unsigned int v79 = v77 & 0xFFFFFFFE;
                }
                if (v79)
                {
                  *(_DWORD *)v128 = 67109120;
                  *(_DWORD *)&v128[4] = a1;
                  LODWORD(v124) = 8;
                  CFStringRef v123 = (uint64_t *)v128;
                  goto LABEL_190;
                }
                goto LABEL_192;
              }
            }
            else
            {
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              int v76 = (id)qword_1000E4060;
              if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v130 = 0;
                unsigned int v80 = sub_100055404(1);
                unsigned int v78 = v76;
                if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v81 = v80;
                }
                else {
                  unsigned int v81 = v80 & 0xFFFFFFFE;
                }
                if (v81)
                {
                  *(_DWORD *)v128 = 67109120;
                  *(_DWORD *)&v128[4] = a1;
                  LODWORD(v124) = 8;
                  CFStringRef v123 = (uint64_t *)v128;
LABEL_190:
                  id v82 = (char *)_os_log_send_and_compose_impl();

                  if (v82) {
                    sub_100055434(v82);
                  }
                  goto LABEL_193;
                }
LABEL_192:

                id v82 = 0;
LABEL_193:
                free(v82);
              }
            }

            if (!v125) {
              goto LABEL_238;
            }
LABEL_216:
            if (objc_msgSend((id)v26[6], "unmountVolumeWithSession:mountPath:error:", v3, 0, 0, v123, v124))
            {
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              int v88 = (id)qword_1000E4060;
              if (!os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_237;
              }
              uint64_t v130 = 0;
              unsigned int v89 = sub_100055404(1);
              v90 = v88;
              if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v91 = v89;
              }
              else {
                unsigned int v91 = v89 & 0xFFFFFFFE;
              }
              if (v91)
              {
                *(_WORD *)v128 = 0;
                goto LABEL_233;
              }
            }
            else
            {
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              int v88 = (id)qword_1000E4060;
              if (!os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_237;
              }
              uint64_t v130 = 0;
              unsigned int v92 = sub_100055404(1);
              v90 = v88;
              if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v93 = v92;
              }
              else {
                unsigned int v93 = v92 & 0xFFFFFFFE;
              }
              if (v93)
              {
                *(_WORD *)v128 = 0;
LABEL_233:
                unsigned int v94 = (char *)_os_log_send_and_compose_impl();

                if (v94) {
                  sub_100055434(v94);
                }
                goto LABEL_236;
              }
            }

            unsigned int v94 = 0;
LABEL_236:
            free(v94);
LABEL_237:

LABEL_238:
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            v95 = (id)qword_1000E4060;
            if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v130 = 0;
              unsigned int v96 = sub_100055404(1);
              unsigned int v97 = v95;
              if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v98 = v96;
              }
              else {
                unsigned int v98 = v96 & 0xFFFFFFFE;
              }
              if (v98)
              {
                *(_DWORD *)v128 = 67109120;
                *(_DWORD *)&v128[4] = a1;
                char v99 = (char *)_os_log_send_and_compose_impl();

                if (v99) {
                  sub_100055434(v99);
                }
              }
              else
              {

                char v99 = 0;
              }
              free(v99);
            }

            sub_1000342CC(a1);
LABEL_250:
            CFRelease(v3);
            goto LABEL_251;
          }

          unsigned int v63 = sub_100019308(qword_1000E4318);
          id v126 = 0;
          unsigned int v64 = [v63 unmapVolume:v32 error:&v126];
          unsigned int v9 = v126;

          if (v64)
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            __int16 v65 = (id)qword_1000E4060;
            if (!os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_170;
            }
            uint64_t v130 = 0;
            unsigned int v66 = sub_100055404(1);
            unsigned int v67 = v65;
            if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v68 = v66;
            }
            else {
              unsigned int v68 = v66 & 0xFFFFFFFE;
            }
            if (v68)
            {
              *(_DWORD *)v128 = 67109120;
              *(_DWORD *)&v128[4] = a1;
              LODWORD(v124) = 8;
              CFStringRef v123 = (uint64_t *)v128;
              goto LABEL_153;
            }
          }
          else
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            __int16 v65 = (id)qword_1000E4060;
            if (!os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_170;
            }
            *(void *)v128 = 0;
            int v69 = sub_100055404(1);
            unsigned int v67 = v65;
            if (!os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT)) {
              v69 &= ~1u;
            }
            if (v69)
            {
              id v70 = [v9 code];
              LODWORD(v130) = 67109376;
              HIDWORD(v130) = a1;
              __int16 v131 = 2048;
              id v132 = v70;
              LODWORD(v124) = 18;
              CFStringRef v123 = &v130;
LABEL_153:
              unsigned int v71 = (char *)_os_log_send_and_compose_impl();

              if (v71) {
                sub_100055434(v71);
              }
              goto LABEL_169;
            }
          }

          unsigned int v71 = 0;
LABEL_169:
          free(v71);
LABEL_170:

          goto LABEL_171;
        }
        unsigned int v9 = 0;
LABEL_66:
        char v33 = 0;
        goto LABEL_67;
      }
      if (sub_100046114(v3))
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v51 = (id)qword_1000E4060;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)v128 = 0;
          unsigned int v52 = sub_100055404(1);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v53 = v52;
          }
          else {
            unsigned int v53 = v52 & 0xFFFFFFFE;
          }
          if (v53)
          {
            LOWORD(v129[0]) = 0;
            LODWORD(v124) = 2;
            CFStringRef v123 = v129;
            unsigned int v54 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v55 = (char *)v54;
            if (v54) {
              sub_100055434(v54);
            }
          }
          else
          {
            unsigned int v55 = 0;
          }
          free(v55);
        }

        goto LABEL_202;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v59 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
LABEL_198:

        int SyncBagForUser = -1;
        goto LABEL_203;
      }
      *(void *)v128 = 0;
      unsigned int v72 = sub_100055404(1);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v73 = v72;
      }
      else {
        unsigned int v73 = v72 & 0xFFFFFFFE;
      }
      if (v73)
      {
        LOWORD(v129[0]) = 0;
        LODWORD(v124) = 2;
        CFStringRef v123 = v129;
LABEL_166:
        unsigned int v74 = (const char *)_os_log_send_and_compose_impl();
        char v75 = (char *)v74;
        if (v74) {
          sub_100055434(v74);
        }
        goto LABEL_197;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v59 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_198;
      }
      *(void *)v128 = 0;
      unsigned int v60 = sub_100055404(1);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v61 = v60;
      }
      else {
        unsigned int v61 = v60 & 0xFFFFFFFE;
      }
      if (v61)
      {
        LOWORD(v129[0]) = 0;
        LODWORD(v124) = 2;
        CFStringRef v123 = v129;
        goto LABEL_166;
      }
    }
    char v75 = 0;
LABEL_197:
    free(v75);
    goto LABEL_198;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v9 = (id)qword_1000E4060;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v130 = 0;
    unsigned int v10 = sub_100055404(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = v10 & 0xFFFFFFFE;
    }
    if (v11)
    {
      *(_DWORD *)v128 = 67109120;
      *(_DWORD *)&v128[4] = a1;
      unsigned int v12 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v13 = (char *)v12;
      if (v12) {
        sub_100055434(v12);
      }
    }
    else
    {
      unsigned int v13 = 0;
    }
    free(v13);
  }
  uint64_t v35 = 0xFFFFFFFFLL;
LABEL_251:

  return v35;
}

uint64_t sub_100033C80(uint64_t a1, const char *a2, uint64_t a3)
{
  snprintf(__str, 0x400uLL, "%s/tmp", a2);
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v6 = (id)qword_1000E4060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v7 = sub_100055404(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = v7 & 0xFFFFFFFE;
    }
    if (v8)
    {
      unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v10 = (char *)v9;
      if (v9) {
        sub_100055434(v9);
      }
    }
    else
    {
      unsigned int v10 = 0;
    }
    free(v10);
  }

  uint64_t v11 = sub_10004DE2C(a1, a3, (uint64_t)a2, (uint64_t)__str, 0);
  if (v11)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v12 = (id)qword_1000E4060;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14)
      {
LABEL_28:
        unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v18 = (char *)v17;
        if (v17) {
          sub_100055434(v17);
        }
        goto LABEL_31;
      }
LABEL_30:
      unsigned int v18 = 0;
LABEL_31:
      free(v18);
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v12 = (id)qword_1000E4060;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = v15 & 0xFFFFFFFE;
      }
      if (v16) {
        goto LABEL_28;
      }
      goto LABEL_30;
    }
  }

  return v11;
}

uint64_t sub_100033F6C(const __CFDictionary *a1, uint64_t a2)
{
  if (!sub_100088734(a1, kUMUserSessionHasSyncBagKey))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v9 = (id)qword_1000E4060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = sub_100055404(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        unsigned int v12 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v13 = (char *)v12;
        if (v12) {
          sub_100055434(v12);
        }
      }
      else
      {
        unsigned int v13 = 0;
      }
      free(v13);
    }

    return 0;
  }
  if ([(id)qword_1000E4030 splitUserVolumeEnabled])
  {
    if (sub_10004671C(a1))
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v4 = (id)qword_1000E4060;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v5 = sub_100055404(1);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v6 = v5;
        }
        else {
          unsigned int v6 = v5 & 0xFFFFFFFE;
        }
        if (v6)
        {
          unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v8 = (char *)v7;
          if (v7) {
            sub_100055434(v7);
          }
        }
        else
        {
          unsigned int v8 = 0;
        }
        free(v8);
      }

      return 0;
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v14 = (id)qword_1000E4060;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = sub_100055404(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = v15 & 0xFFFFFFFE;
      }
      if (v16)
      {
        unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v18 = (char *)v17;
        if (v17) {
          sub_100055434(v17);
        }
      }
      else
      {
        unsigned int v18 = 0;
      }
      free(v18);
    }

    return 0xFFFFFFFFLL;
  }
  else
  {
    return _MKBUserSessionUnLoadSyncBagForUser(a1, a2);
  }
}

uint64_t sub_1000342CC(uint64_t a1)
{
  uint64_t v1 = sub_10004DE2C(a1, 0, 0, 0, 1);
  if (v1)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v2 = (id)qword_1000E4060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4)
      {
LABEL_17:
        unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v8 = (char *)v7;
        if (v7) {
          sub_100055434(v7);
        }
        goto LABEL_20;
      }
LABEL_19:
      unsigned int v8 = 0;
LABEL_20:
      free(v8);
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v2 = (id)qword_1000E4060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v6 = v5;
      }
      else {
        unsigned int v6 = v5 & 0xFFFFFFFE;
      }
      if (v6) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }

  return v1;
}

uint64_t sub_100034474(int a1)
{
  uint64_t v2 = MGGetBoolAnswer();
  if (v2)
  {
    if (a1)
    {
      byte_1000E3220 = 1;
      qword_1000E4050 = (uint64_t)kUMUserSessionAPFSNativeVolume;
      valuePtr[0] = 502;
      CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
      unsigned int v4 = sub_100088C68();
      CFDictionarySetValue(v4, kUMUserSessionIDKey, v3);
      sub_100021EF4(v4, 0);
      if (v3) {
        CFRelease(v3);
      }
      if (mkpath_np("/var/Users", 0x1FFu))
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v5 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_101;
        }
        int v6 = sub_100055404(1);
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          v6 &= ~1u;
        }
        if (v6)
        {
          unsigned int v7 = v5;
          unsigned int v8 = __error();
          unsigned int v9 = strerror(*v8);
          *(_DWORD *)__str = 136315138;
          *(void *)&char __str[4] = v9;
          unsigned int v10 = (void *)_os_log_send_and_compose_impl();

          if (!v10) {
            goto LABEL_100;
          }
          goto LABEL_98;
        }
LABEL_99:
        unsigned int v10 = 0;
        goto LABEL_100;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v5 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_101;
      }
      *(void *)__str = 0;
      unsigned int v18 = sub_100055404(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v19 = v18;
      }
      else {
        unsigned int v19 = v18 & 0xFFFFFFFE;
      }
      if (!v19) {
        goto LABEL_99;
      }
    }
    else
    {
      byte_1000E3220 = 0;
      qword_1000E4050 = 0;
      if (qword_1000E42B0) {
        CFArrayRemoveAllValues((CFMutableArrayRef)qword_1000E42B0);
      }
      if (qword_1000E42D0) {
        CFArrayRemoveAllValues((CFMutableArrayRef)qword_1000E42D0);
      }
      if (qword_1000E42D8) {
        CFArrayRemoveAllValues((CFMutableArrayRef)qword_1000E42D8);
      }
      unsigned int v11 = sub_100018F6C(qword_1000E4318);
      unsigned __int8 v12 = [v11 removeFileAtPath:@"/private/var//keybags/usersession.kb" error:0];

      if (v12)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v13 = (id)qword_1000E4060;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)__str = 0;
          unsigned int v14 = sub_100055404(1);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v15 = v14;
          }
          else {
            unsigned int v15 = v14 & 0xFFFFFFFE;
          }
          if (v15)
          {
            unsigned int v16 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v17 = (char *)v16;
            if (v16) {
              sub_100055434(v16);
            }
          }
          else
          {
            unsigned int v17 = 0;
          }
          free(v17);
        }
      }
      else
      {
        perror("unlink of USER_SESSION_BAG_PATH failed with error");
      }
      unsigned int v20 = sub_100018F6C(qword_1000E4318);
      unsigned __int8 v21 = [v20 removeFileAtPath:@"/private/var//keybags/usersyncbag.kb" error:0];

      if (v21)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v22 = (id)qword_1000E4060;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)__str = 0;
          unsigned int v23 = sub_100055404(1);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v24 = v23;
          }
          else {
            unsigned int v24 = v23 & 0xFFFFFFFE;
          }
          if (v24)
          {
            int v25 = (const char *)_os_log_send_and_compose_impl();
            CFNumberRef v26 = (char *)v25;
            if (v25) {
              sub_100055434(v25);
            }
          }
          else
          {
            CFNumberRef v26 = 0;
          }
          free(v26);
        }
      }
      else
      {
        perror("unlink of USER_SYNC_BAG_PATH failed with error");
      }
      CFNumberRef v27 = sub_100018F6C(qword_1000E4318);
      unsigned __int8 v28 = [v27 removeFileAtPath:@"/private/var/keybags/LockoutState.plist" error:0];

      if (v28)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v29 = (id)qword_1000E4060;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)__str = 0;
          unsigned int v30 = sub_100055404(1);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v31 = v30;
          }
          else {
            unsigned int v31 = v30 & 0xFFFFFFFE;
          }
          if (v31)
          {
            uint64_t v32 = (const char *)_os_log_send_and_compose_impl();
            char v33 = (char *)v32;
            if (v32) {
              sub_100055434(v32);
            }
          }
          else
          {
            char v33 = 0;
          }
          free(v33);
        }
      }
      else
      {
        perror("unlink of /private/var/keybags/LockoutState.plist failed with error");
      }
      snprintf(__str, 0x400uLL, "%s%s/%s.kb", "/private/var/", "keybags", "userbag");
      uint64_t v34 = sub_100018F6C(qword_1000E4318);
      uint64_t v35 = +[NSString stringWithUTF8String:__str];
      unsigned __int8 v36 = [v34 removeFileAtPath:v35 error:0];

      if (v36)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v37 = (id)qword_1000E4060;
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v38 = sub_100055404(1);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v39 = v38;
          }
          else {
            unsigned int v39 = v38 & 0xFFFFFFFE;
          }
          if (v39)
          {
            LOWORD(valuePtr[0]) = 0;
            uint64_t v40 = (const char *)_os_log_send_and_compose_impl();
            __int16 v41 = (char *)v40;
            if (v40) {
              sub_100055434(v40);
            }
          }
          else
          {
            __int16 v41 = 0;
          }
          free(v41);
        }
      }
      else
      {
        perror("unlink of userBagPath failed with error");
      }
      if (sub_10002DFE4("/var/Users"))
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v5 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_101;
        }
        unsigned int v42 = sub_100055404(1);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v43 = v42;
        }
        else {
          unsigned int v43 = v42 & 0xFFFFFFFE;
        }
        if (!v43) {
          goto LABEL_99;
        }
        LOWORD(valuePtr[0]) = 0;
      }
      else
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v5 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_101;
        }
        unsigned int v44 = sub_100055404(1);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v45 = v44;
        }
        else {
          unsigned int v45 = v44 & 0xFFFFFFFE;
        }
        if (!v45) {
          goto LABEL_99;
        }
        LOWORD(valuePtr[0]) = 0;
      }
    }
    unsigned int v10 = (void *)_os_log_send_and_compose_impl();
    if (!v10)
    {
LABEL_100:
      free(v10);
LABEL_101:

      return v2;
    }
LABEL_98:
    sub_100055434((const char *)v10);
    goto LABEL_100;
  }
  return v2;
}

void sub_100034CF4(const __CFString *a1)
{
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  uint64_t v2 = (id)qword_1000E4060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      unsigned int v5 = (const char *)_os_log_send_and_compose_impl();
      int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      int v6 = 0;
    }
    free(v6);
  }

  CFDictionaryRef v7 = (const __CFDictionary *)sub_100019E3C();
  if (v7)
  {
    CFDictionaryRef v8 = v7;
    sub_100034E48(v7, a1);
    CFRelease(v8);
  }
}

void sub_100034E48(const __CFDictionary *a1, const __CFString *a2)
{
  sub_1000885F0(a1, kUMUserSessionIDKey);
  if (CFDictionaryContainsKey(a1, kUMUserSessionSyncMachServicesKey)
    && (v4 = CFDictionaryGetValue(a1, kUMUserSessionSyncMachServicesKey), CFTypeID v5 = CFGetTypeID(v4), v5 == CFArrayGetTypeID()))
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, kUMUserSessionSyncMachServicesKey);
    MutableCFArrayRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, Value);
    char v8 = 1;
  }
  else
  {
    MutableCFArrayRef Copy = sub_100088D04();
    char v8 = 0;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v9 = (id)qword_1000E4060;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = sub_100055404(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = v10 & 0xFFFFFFFE;
    }
    if (v11)
    {
      unsigned __int8 v12 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v13 = (char *)v12;
      if (v12) {
        sub_100055434(v12);
      }
    }
    else
    {
      unsigned int v13 = 0;
    }
    free(v13);
  }

  if (CFArrayGetCount(MutableCopy) < 1)
  {
LABEL_22:
    CFArrayAppendValue(MutableCopy, a2);
    if (v8) {
      CFDictionaryReplaceValue(a1, kUMUserSessionSyncMachServicesKey, MutableCopy);
    }
    else {
      CFDictionarySetValue(a1, kUMUserSessionSyncMachServicesKey, MutableCopy);
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v18 = (id)qword_1000E4060;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v19 = sub_100055404(1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v20 = v19;
      }
      else {
        unsigned int v20 = v19 & 0xFFFFFFFE;
      }
      if (v20)
      {
        unsigned __int8 v21 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v22 = (char *)v21;
        if (v21) {
          sub_100055434(v21);
        }
      }
      else
      {
        unsigned int v22 = 0;
      }
      free(v22);
    }

    if (CFArrayGetCount(MutableCopy) >= 1)
    {
      CFDictionarySetValue(a1, kUMUserSessionDirtyKey, kCFBooleanTrue);
      int v23 = sub_1000885F0(a1, kUMUserSessionIDKey);
      sub_10001DCD4(v23);
    }
    sub_10001A7BC();
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v24 = (id)qword_1000E4060;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v25 = sub_100055404(1);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v26 = v25;
      }
      else {
        unsigned int v26 = v25 & 0xFFFFFFFE;
      }
      if (v26)
      {
        CFNumberRef v27 = (const char *)_os_log_send_and_compose_impl();
        unsigned __int8 v28 = (char *)v27;
        if (v27) {
          sub_100055434(v27);
        }
      }
      else
      {
        unsigned __int8 v28 = 0;
      }
      free(v28);
    }

    if (_SecSyncBubbleTransfer())
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v29 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_76;
      }
      unsigned int v30 = sub_100055404(1);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v31 = v30;
      }
      else {
        unsigned int v31 = v30 & 0xFFFFFFFE;
      }
      if (v31) {
        goto LABEL_65;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v29 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_76;
      }
      unsigned int v32 = sub_100055404(1);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v33 = v32;
      }
      else {
        unsigned int v33 = v32 & 0xFFFFFFFE;
      }
      if (v33) {
        goto LABEL_65;
      }
    }
LABEL_74:
    uint64_t v35 = 0;
LABEL_75:
    free(v35);
    goto LABEL_76;
  }
  CFIndex v14 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, v14);
    if (ValueAtIndex)
    {
      CFStringRef v16 = ValueAtIndex;
      CFTypeID v17 = CFGetTypeID(ValueAtIndex);
      if (v17 == CFStringGetTypeID() && CFEqual(v16, a2)) {
        break;
      }
    }
    if (CFArrayGetCount(MutableCopy) <= ++v14) {
      goto LABEL_22;
    }
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v29 = (id)qword_1000E4060;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v36 = sub_100055404(1);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v37 = v36;
    }
    else {
      unsigned int v37 = v36 & 0xFFFFFFFE;
    }
    if (!v37) {
      goto LABEL_74;
    }
LABEL_65:
    uint64_t v34 = (const char *)_os_log_send_and_compose_impl();
    uint64_t v35 = (char *)v34;
    if (v34) {
      sub_100055434(v34);
    }
    goto LABEL_75;
  }
LABEL_76:

  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_1000354C8()
{
  CFDictionaryRef v0 = (const __CFDictionary *)sub_100019E3C();
  if (v0)
  {
    CFDictionaryRef v1 = v0;
    if (!CFDictionaryContainsKey(v0, kUMUserSessionSyncMachServicesKey)) {
      goto LABEL_36;
    }
    sub_1000885F0(v1, kUMUserSessionIDKey);
    if (!CFDictionaryGetValue(v1, kUMUserSessionSyncMachServicesKey)) {
      goto LABEL_36;
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v2 = (id)qword_1000E4060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4)
      {
        CFTypeID v5 = (const char *)_os_log_send_and_compose_impl();
        int v6 = (char *)v5;
        if (v5) {
          sub_100055434(v5);
        }
      }
      else
      {
        int v6 = 0;
      }
      free(v6);
    }

    if (_SecSyncBubbleTransfer())
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFDictionaryRef v7 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_35;
      }
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9) {
        goto LABEL_31;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFDictionaryRef v7 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_35;
      }
      unsigned int v10 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
LABEL_31:
        unsigned __int8 v12 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v13 = (char *)v12;
        if (v12) {
          sub_100055434(v12);
        }
        goto LABEL_34;
      }
    }
    unsigned int v13 = 0;
LABEL_34:
    free(v13);
LABEL_35:

LABEL_36:
    CFRelease(v1);
  }
}

void sub_10003578C(const __CFString *a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)sub_100019E3C();
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    sub_1000357E0(v2, a1);
    CFRelease(v3);
  }
}

void sub_1000357E0(const __CFDictionary *a1, const __CFString *a2)
{
  int v4 = sub_1000885F0(a1, kUMUserSessionIDKey);
  if (CFDictionaryContainsKey(a1, kUMUserSessionSyncMachServicesKey))
  {
    CFArrayRef Value = (void *)CFDictionaryGetValue(a1, kUMUserSessionSyncMachServicesKey);
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)Value))
    {
      if (CFArrayGetCount((CFArrayRef)Value) < 1)
      {
LABEL_10:
        if (CFArrayGetCount((CFArrayRef)Value)) {
          return;
        }
        char v11 = 0;
      }
      else
      {
        CFIndex v7 = 0;
        while (1)
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)Value, v7);
          if (ValueAtIndex)
          {
            CFStringRef v9 = ValueAtIndex;
            CFTypeID v10 = CFGetTypeID(ValueAtIndex);
            if (v10 == CFStringGetTypeID() && CFEqual(v9, a2)) {
              break;
            }
          }
          if (CFArrayGetCount((CFArrayRef)Value) <= ++v7) {
            goto LABEL_10;
          }
        }
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)Value, v7);
        CFRetain(Value);
        if (CFArrayGetCount((CFArrayRef)Value))
        {
LABEL_41:
          sub_10001A7BC();
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v22 = (id)qword_1000E4060;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v23 = sub_100055404(1);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v24 = v23;
            }
            else {
              unsigned int v24 = v23 & 0xFFFFFFFE;
            }
            if (v24)
            {
              unsigned int v25 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v26 = (char *)v25;
              if (v25) {
                sub_100055434(v25);
              }
            }
            else
            {
              unsigned int v26 = 0;
            }
            free(v26);
          }

          if (_SecSyncBubbleTransfer())
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            CFNumberRef v27 = (id)qword_1000E4060;
            if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_72;
            }
            unsigned int v28 = sub_100055404(1);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v29 = v28;
            }
            else {
              unsigned int v29 = v28 & 0xFFFFFFFE;
            }
            if (v29) {
              goto LABEL_68;
            }
          }
          else
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            CFNumberRef v27 = (id)qword_1000E4060;
            if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_72;
            }
            unsigned int v30 = sub_100055404(1);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v31 = v30;
            }
            else {
              unsigned int v31 = v30 & 0xFFFFFFFE;
            }
            if (v31)
            {
LABEL_68:
              unsigned int v32 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v33 = (char *)v32;
              if (v32) {
                sub_100055434(v32);
              }
              goto LABEL_71;
            }
          }
          unsigned int v33 = 0;
LABEL_71:
          free(v33);
LABEL_72:

          if (Value) {
            CFRelease(Value);
          }
          return;
        }
        char v11 = 1;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned __int8 v12 = (id)qword_1000E4060;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v13 = sub_100055404(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v14 = v13;
        }
        else {
          unsigned int v14 = v13 & 0xFFFFFFFE;
        }
        if (v14)
        {
          unsigned int v15 = (const char *)_os_log_send_and_compose_impl();
          CFStringRef v16 = (char *)v15;
          if (v15) {
            sub_100055434(v15);
          }
        }
        else
        {
          CFStringRef v16 = 0;
        }
        free(v16);
      }

      if ((v11 & 1) == 0) {
        CFRetain(Value);
      }
      sub_10001E06C(a1, v4);
      goto LABEL_41;
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFTypeID v17 = (id)qword_1000E4060;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v18 = sub_100055404(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v19 = v18;
      }
      else {
        unsigned int v19 = v18 & 0xFFFFFFFE;
      }
      if (v19)
      {
        unsigned int v20 = (const char *)_os_log_send_and_compose_impl();
        unsigned __int8 v21 = (char *)v20;
        if (v20) {
          sub_100055434(v20);
        }
      }
      else
      {
        unsigned __int8 v21 = 0;
      }
      free(v21);
    }
  }
}

void sub_100035D60(int a1, const __CFString *a2)
{
  sub_100056848(qword_1000E4038, a1);
  CFDictionaryRef v3 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    sub_1000357E0(v3, a2);
    CFRelease(v4);
  }
}

void sub_100035DC4(const void *a1)
{
  CFDictionaryRef v2 = (__CFDictionary *)sub_100019E3C();
  if (CFDictionaryContainsKey(v2, kUMUserSessionSyncTasksKey))
  {
    CFDictionaryReplaceValue(v2, kUMUserSessionSyncTasksKey, a1);
    if (!v2) {
      return;
    }
  }
  else
  {
    CFDictionarySetValue(v2, kUMUserSessionSyncTasksKey, a1);
    if (!v2) {
      return;
    }
  }

  CFRelease(v2);
}

const void *sub_100035E50()
{
  CFDictionaryRef v0 = (const __CFDictionary *)sub_100019E3C();
  if (!v0) {
    return 0;
  }
  CFDictionaryRef v1 = v0;
  if (CFDictionaryContainsKey(v0, @"UserSwitchTaskOpqueData")) {
    CFArrayRef Value = CFDictionaryGetValue(v1, @"UserSwitchTaskOpqueData");
  }
  else {
    CFArrayRef Value = 0;
  }
  CFRelease(v1);
  return Value;
}

void sub_100035EB8(id a1)
{
  if (qword_1000E4078 != -1) {
    dispatch_once(&qword_1000E4078, &stru_1000D55B8);
  }
  CFDictionaryRef v1 = (id)qword_1000E4070;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v2 = sub_100055404(0);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v3 = v2;
    }
    else {
      unsigned int v3 = v2 & 0xFFFFFFFE;
    }
    if (v3)
    {
      CFDictionaryRef v4 = (const char *)_os_log_send_and_compose_impl();
      CFTypeID v5 = (char *)v4;
      if (v4) {
        sub_100055434(v4);
      }
    }
    else
    {
      CFTypeID v5 = 0;
    }
    free(v5);
  }

  dispatch_source_cancel((dispatch_source_t)qword_1000E4308);
  CFTypeID v6 = (void *)qword_1000E4308;
  qword_1000E4308 = 0;

  sub_10003600C();
}

void sub_10003600C()
{
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFDictionaryRef v0 = (id)qword_1000E4060;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v49 = 0;
    unsigned int v1 = sub_100055404(1);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v2 = v1;
    }
    else {
      unsigned int v2 = v1 & 0xFFFFFFFE;
    }
    if (v2)
    {
      LOWORD(valuePtr) = 0;
      unsigned int v3 = (const char *)_os_log_send_and_compose_impl();
      CFDictionaryRef v4 = (char *)v3;
      if (v3) {
        sub_100055434(v3);
      }
    }
    else
    {
      CFDictionaryRef v4 = 0;
    }
    free(v4);
  }

  unsigned int valuePtr = -1;
  if (sub_10001D540())
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFTypeID v5 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_71;
    }
    uint64_t v49 = 0;
    unsigned int v6 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = v6 & 0xFFFFFFFE;
    }
    if (v7) {
      goto LABEL_20;
    }
LABEL_69:
    CFStringRef v9 = 0;
LABEL_70:
    free(v9);
LABEL_71:

    return;
  }
  if (!qword_1000E42D0)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFTypeID v5 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_71;
    }
    uint64_t v49 = 0;
    unsigned int v14 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v15 = v14;
    }
    else {
      unsigned int v15 = v14 & 0xFFFFFFFE;
    }
    if (!v15) {
      goto LABEL_69;
    }
LABEL_20:
    unsigned int v8 = (const char *)_os_log_send_and_compose_impl();
    CFStringRef v9 = (char *)v8;
    if (v8) {
      sub_100055434(v8);
    }
    goto LABEL_70;
  }
  if (!CFArrayGetCount((CFArrayRef)qword_1000E42D0))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFTypeID v5 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_71;
    }
    uint64_t v49 = 0;
    unsigned int v16 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = v16 & 0xFFFFFFFE;
    }
    if (!v17) {
      goto LABEL_69;
    }
    goto LABEL_20;
  }
  CFTypeID v10 = +[RDServer sharedServer];
  unsigned int v11 = [v10 anyBubblePopClients];

  if (v11)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFTypeID v5 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_71;
    }
    uint64_t v49 = 0;
    unsigned int v12 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = v12 & 0xFFFFFFFE;
    }
    if (!v13) {
      goto LABEL_69;
    }
    goto LABEL_20;
  }
  unsigned int v18 = +[RDServer sharedServer];
  unsigned int v19 = [v18 inLogoutProcess];

  if (v19)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFTypeID v5 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_71;
    }
    uint64_t v49 = 0;
    unsigned int v20 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v21 = v20;
    }
    else {
      unsigned int v21 = v20 & 0xFFFFFFFE;
    }
    if (!v21) {
      goto LABEL_69;
    }
    goto LABEL_20;
  }
  unsigned int v22 = sub_100018600(qword_1000E4318);
  if (!sub_1000192C0((uint64_t)v22))
  {
    int v24 = dword_1000E42C8;

    if (v24 != 1) {
      goto LABEL_74;
    }
    goto LABEL_62;
  }
  unsigned int v23 = sub_100018600(qword_1000E4318);
  if (sub_10001935C((uint64_t)v23) == 502)
  {

    goto LABEL_74;
  }
  int v27 = dword_1000E42C8;

  if (v27 == 1)
  {
LABEL_62:
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFTypeID v5 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_71;
    }
    uint64_t v49 = 0;
    unsigned int v25 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = v25 & 0xFFFFFFFE;
    }
    if (!v26) {
      goto LABEL_69;
    }
    goto LABEL_20;
  }
LABEL_74:
  int v28 = sub_100056B1C(qword_1000E4038);
  if (CFArrayGetCount((CFArrayRef)qword_1000E42D0) >= 1)
  {
    for (CFIndex i = 0; CFArrayGetCount((CFArrayRef)qword_1000E42D0) > i; ++i)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42D0, i);
      if (ValueAtIndex)
      {
        CFNumberRef v31 = ValueAtIndex;
        CFTypeID v32 = CFGetTypeID(ValueAtIndex);
        if (v32 == CFNumberGetTypeID())
        {
          if (CFNumberGetValue(v31, kCFNumberIntType, &valuePtr))
          {
            if (valuePtr == v28)
            {
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              unsigned int v33 = (id)qword_1000E4060;
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v49 = 0;
                unsigned int v34 = sub_100055404(1);
                if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v35 = v34;
                }
                else {
                  unsigned int v35 = v34 & 0xFFFFFFFE;
                }
                if (v35)
                {
                  unsigned int v36 = (const char *)_os_log_send_and_compose_impl();
                  unsigned int v37 = (char *)v36;
                  if (v36) {
                    sub_100055434(v36);
                  }
                }
                else
                {
                  unsigned int v37 = 0;
                }
                free(v37);
              }
            }
            else
            {
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              unsigned int v38 = (id)qword_1000E4060;
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v49 = 0;
                unsigned int v39 = sub_100055404(1);
                if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v40 = v39;
                }
                else {
                  unsigned int v40 = v39 & 0xFFFFFFFE;
                }
                if (v40)
                {
                  __int16 v41 = (const char *)_os_log_send_and_compose_impl();
                  unsigned int v42 = (char *)v41;
                  if (v41) {
                    sub_100055434(v41);
                  }
                }
                else
                {
                  unsigned int v42 = 0;
                }
                free(v42);
              }

              if (!sub_10003258C(valuePtr)) {
                return;
              }
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              unsigned int v43 = (id)qword_1000E4060;
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v49 = 0;
                unsigned int v44 = sub_100055404(1);
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v45 = v44;
                }
                else {
                  unsigned int v45 = v44 & 0xFFFFFFFE;
                }
                if (v45)
                {
                  unsigned int v46 = (const char *)_os_log_send_and_compose_impl();
                  unsigned int v47 = (char *)v46;
                  if (v46) {
                    sub_100055434(v46);
                  }
                }
                else
                {
                  unsigned int v47 = 0;
                }
                free(v47);
              }

              sub_10001DE88(valuePtr);
              sub_10001DCD4(valuePtr);
              if (qword_1000E42D0)
              {
                if (CFArrayGetCount((CFArrayRef)qword_1000E42D0) == 1) {
                  return;
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_10003688C()
{
  dword_1000E3224 = -1;
}

__CFDictionary *sub_1000368A0(const __CFDictionary *a1)
{
  if (!a1) {
    return 0;
  }
  unsigned int v2 = sub_100088C68();
  CFArrayRef Value = CFDictionaryGetValue(a1, kUMUserSessionIDKey);
  CFDictionarySetValue(v2, kUMUserSessionIDKey, Value);
  CFDictionaryRef v4 = CFDictionaryGetValue(a1, kUMUserSessionGroupIDKey);
  CFDictionarySetValue(v2, kUMUserSessionGroupIDKey, v4);
  if (!CFDictionaryContainsKey(a1, kUMUserSessionLibinfoHomeDirKey))
  {
    sub_1000885F0(a1, kUMUserSessionIDKey);
    bzero(__str, 0x400uLL);
    if (dword_1000E42C0 == 1) {
      snprintf(__str, 0x400uLL, "/var/euser%d");
    }
    else {
      snprintf(__str, 0x400uLL, "/var/user%d");
    }
    CFStringRef v5 = CFStringCreateWithCString(0, __str, 0x8000100u);
    CFDictionarySetValue(a1, kUMUserSessionLibinfoHomeDirKey, v5);
    if (v5) {
      CFRelease(v5);
    }
  }
  unsigned int v6 = CFDictionaryGetValue(a1, kUMUserSessionLibinfoHomeDirKey);
  CFDictionarySetValue(v2, kUMUserSessionLibinfoHomeDirKey, v6);
  unsigned int v7 = CFDictionaryGetValue(a1, kUMUserSessionShortNameKey);
  CFDictionarySetValue(v2, kUMUserSessionShortNameKey, v7);
  return v2;
}

uint64_t sub_100036A4C(const __CFDictionary *a1, void *a2, int a3)
{
  id v5 = a2;
  if (a1)
  {
    int v6 = sub_1000885F0(a1, kUMUserSessionIDKey);
    int v7 = sub_1000885F0(a1, kUMUserSessionGroupIDKey);
    xpc_dictionary_set_int64(v5, "pw_uid", v6);
    xpc_dictionary_set_int64(v5, "pw_gid", v7);
    bzero(string, 0x400uLL);
    sub_1000887CC(a1, kUMUserSessionLibinfoHomeDirKey, string, 1024);
    xpc_dictionary_set_string(v5, "pw_dir", string);
    bzero(string, 0x400uLL);
    sub_1000887CC(a1, kUMUserSessionShortNameKey, string, 255);
    xpc_dictionary_set_string(v5, "pw_name", string);
    xpc_dictionary_set_string(v5, "pw_shell", "/bin/bash");
    if (a3) {
      unsigned int v8 = "/smx7MYTQIi2M";
    }
    else {
      unsigned int v8 = "*";
    }
    xpc_dictionary_set_string(v5, "pw_passwd", v8);
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t sub_100036BE4(uint64_t result, void *a2)
{
  if (result)
  {
    CFDictionaryRef v2 = (const __CFDictionary *)result;
    unsigned int v3 = kUMUserSessionGroupIDKey;
    id v4 = a2;
    int v5 = sub_1000885F0(v2, v3);
    xpc_dictionary_set_int64(v4, "gr_gid", v5);
    bzero(string, 0x400uLL);
    sub_1000887CC(v2, kUMUserSessionShortNameKey, string, 255);
    xpc_dictionary_set_string(v4, "gr_name", string);
    xpc_object_t v6 = xpc_array_create(0, 0);
    xpc_array_set_string(v6, 0xFFFFFFFFFFFFFFFFLL, string);
    xpc_dictionary_set_value(v4, "gr_members", v6);

    return 1;
  }
  return result;
}

uint64_t sub_100036CF0(uint64_t a1)
{
  uint64_t v4 = 0;
  int v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100036DA4;
  v3[3] = &unk_1000D5510;
  void v3[4] = &v4;
  void v3[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_1000E4328, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100036DA4(uint64_t a1)
{
  CFDictionaryRef v2 = (__CFArray *)qword_1000E42E0;
  if (!qword_1000E42E0)
  {
    CFDictionaryRef v2 = sub_100088D04();
    qword_1000E42E0 = (uint64_t)v2;
  }
  CFArrayAppendValue(v2, *(const void **)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
}

uint64_t sub_100036DF0(int a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100036EA8;
  v3[3] = &unk_1000D54C8;
  int v4 = a1;
  void v3[4] = &v5;
  dispatch_sync((dispatch_queue_t)qword_1000E4328, v3);
  uint64_t v1 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v1;
}

void sub_100036EA8(uint64_t a1)
{
  int valuePtr = 0;
  if (qword_1000E42E0 && CFArrayGetCount((CFArrayRef)qword_1000E42E0) >= 1)
  {
    CFIndex v2 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42E0, v2);
      if (!ValueAtIndex) {
        break;
      }
      CFDictionaryRef v4 = ValueAtIndex;
      CFTypeID v5 = CFGetTypeID(ValueAtIndex);
      if (v5 != CFDictionaryGetTypeID()) {
        break;
      }
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, kUMUserSessionIDKey);
      if (!Value
        || (CFNumberRef v7 = Value, v8 = CFGetTypeID(Value), v8 != CFNumberGetTypeID())
        || !CFNumberGetValue(v7, kCFNumberIntType, &valuePtr))
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        uint64_t v9 = (id)qword_1000E4060;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v12 = sub_100055404(1);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v13 = v12;
          }
          else {
            unsigned int v13 = v12 & 0xFFFFFFFE;
          }
          if (v13)
          {
            int v17 = 67109120;
            int v18 = v2;
            goto LABEL_27;
          }
LABEL_29:
          unsigned int v15 = 0;
          goto LABEL_30;
        }
        goto LABEL_31;
      }
      if (valuePtr == *(_DWORD *)(a1 + 40))
      {
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_1000E42E0, v2);
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
        return;
      }
LABEL_32:
      if (CFArrayGetCount((CFArrayRef)qword_1000E42E0) <= ++v2) {
        return;
      }
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v9 = (id)qword_1000E4060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = sub_100055404(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (!v11) {
        goto LABEL_29;
      }
      LOWORD(v17) = 0;
LABEL_27:
      unsigned int v14 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v15 = (char *)v14;
      if (v14) {
        sub_100055434(v14);
      }
LABEL_30:
      free(v15);
    }
LABEL_31:

    goto LABEL_32;
  }
}

CFTypeRef sub_100037174(int a1)
{
  CFTypeRef result = (CFTypeRef)qword_1000E42E0;
  if (qword_1000E42E0)
  {
    int valuePtr = 0;
    if (CFArrayGetCount((CFArrayRef)qword_1000E42E0) >= 1)
    {
      CFIndex v2 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42E0, v2);
        if (!ValueAtIndex) {
          break;
        }
        CFDictionaryRef v4 = ValueAtIndex;
        CFTypeID v5 = CFGetTypeID(ValueAtIndex);
        if (v5 != CFDictionaryGetTypeID()) {
          break;
        }
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, kUMUserSessionIDKey);
        if (!Value
          || (CFNumberRef v7 = Value, v8 = CFGetTypeID(Value), v8 != CFNumberGetTypeID())
          || !CFNumberGetValue(v7, kCFNumberIntType, &valuePtr))
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          uint64_t v9 = (id)qword_1000E4060;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v12 = sub_100055404(1);
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v13 = v12;
            }
            else {
              unsigned int v13 = v12 & 0xFFFFFFFE;
            }
            if (v13)
            {
              int v18 = 67109120;
              int v19 = v2;
              goto LABEL_27;
            }
LABEL_29:
            unsigned int v15 = 0;
            goto LABEL_30;
          }
          goto LABEL_31;
        }
        if (valuePtr == a1) {
          return CFRetain(v4);
        }
LABEL_32:
        if (CFArrayGetCount((CFArrayRef)qword_1000E42E0) <= ++v2) {
          return 0;
        }
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      uint64_t v9 = (id)qword_1000E4060;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v10 = sub_100055404(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v11 = v10;
        }
        else {
          unsigned int v11 = v10 & 0xFFFFFFFE;
        }
        if (!v11) {
          goto LABEL_29;
        }
        LOWORD(v18) = 0;
LABEL_27:
        unsigned int v14 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v15 = (char *)v14;
        if (v14) {
          sub_100055434(v14);
        }
LABEL_30:
        free(v15);
      }
LABEL_31:

      goto LABEL_32;
    }
    return 0;
  }
  return result;
}

CFTypeRef sub_100037434(const __CFString *a1)
{
  if (!qword_1000E42E0 || CFArrayGetCount((CFArrayRef)qword_1000E42E0) < 1) {
    return 0;
  }
  CFIndex v2 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42E0, v2);
    if (ValueAtIndex)
    {
      CFDictionaryRef v4 = ValueAtIndex;
      CFTypeID v5 = CFGetTypeID(ValueAtIndex);
      if (v5 == CFDictionaryGetTypeID())
      {
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v4, kUMUserSessionShortNameKey);
        if (Value)
        {
          CFStringRef v7 = Value;
          CFTypeID v8 = CFGetTypeID(Value);
          if (v8 == CFStringGetTypeID() && CFEqual(v7, a1)) {
            break;
          }
        }
      }
    }
    if (CFArrayGetCount((CFArrayRef)qword_1000E42E0) <= ++v2) {
      return 0;
    }
  }

  return CFRetain(v4);
}

void sub_100037538(void *a1)
{
  xpc_object_t xarray = a1;
  if (qword_1000E42E0 && CFArrayGetCount((CFArrayRef)qword_1000E42E0) >= 1)
  {
    CFIndex v1 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42E0, v1);
      if (ValueAtIndex)
      {
        CFDictionaryRef v3 = ValueAtIndex;
        CFTypeID v4 = CFGetTypeID(ValueAtIndex);
        if (v4 == CFDictionaryGetTypeID())
        {
          int v5 = sub_1000885F0(v3, kUMUserSessionGroupIDKey);
          if (v5 != -1) {
            xpc_array_set_int64(xarray, 0xFFFFFFFFFFFFFFFFLL, v5);
          }
        }
      }
      ++v1;
    }
    while (CFArrayGetCount((CFArrayRef)qword_1000E42E0) > v1);
  }
}

uint64_t sub_10003760C(void *a1)
{
  id v1 = a1;
  strcpy(string, "systemusers");
  xpc_dictionary_set_int64(v1, "gr_gid", 299);
  xpc_dictionary_set_string(v1, "gr_name", string);
  xpc_object_t v2 = xpc_array_create(0, 0);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aMobile_1);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aIfccd);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aNetworkd_1);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aWireless_1);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aInstalld_0);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aSecurityd_0);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aReportmemoryex);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aAnalyticsd);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aTimed);
  if (qword_1000E42E0 && CFArrayGetCount((CFArrayRef)qword_1000E42E0) >= 1)
  {
    CFIndex v3 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42E0, v3);
      if (ValueAtIndex)
      {
        CFDictionaryRef v5 = ValueAtIndex;
        CFTypeID v6 = CFGetTypeID(ValueAtIndex);
        if (v6 == CFDictionaryGetTypeID())
        {
          bzero(v8, 0x400uLL);
          sub_1000887CC(v5, kUMUserSessionShortNameKey, v8, 1024);
          xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, v8);
        }
      }
      ++v3;
    }
    while (CFArrayGetCount((CFArrayRef)qword_1000E42E0) > v3);
  }
  xpc_dictionary_set_value(v1, "gr_members", v2);

  return 1;
}

uint64_t sub_10003782C(void *a1)
{
  id v1 = a1;
  strcpy(string, "_analyticsusers");
  xpc_dictionary_set_int64(v1, "gr_gid", 250);
  xpc_dictionary_set_string(v1, "gr_name", string);
  xpc_object_t v2 = xpc_array_create(0, 0);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aMobile_1);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aAnalyticsd);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aWireless_1);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aNetworkd_1);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aTimed);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aGpsd);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aReportmemoryex);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aSecurityd_0);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aNearbyd);
  if (qword_1000E42E0 && CFArrayGetCount((CFArrayRef)qword_1000E42E0) >= 1)
  {
    CFIndex v3 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42E0, v3);
      if (ValueAtIndex)
      {
        CFDictionaryRef v5 = ValueAtIndex;
        CFTypeID v6 = CFGetTypeID(ValueAtIndex);
        if (v6 == CFDictionaryGetTypeID())
        {
          bzero(v8, 0x400uLL);
          sub_1000887CC(v5, kUMUserSessionShortNameKey, v8, 1024);
          xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, v8);
        }
      }
      ++v3;
    }
    while (CFArrayGetCount((CFArrayRef)qword_1000E42E0) > v3);
  }
  xpc_dictionary_set_value(v1, "gr_members", v2);

  return 1;
}

void sub_100037A40()
{
  xpc_connection_t mach_service = xpc_connection_create_mach_service("com.apple.system.libinfo.muser", (dispatch_queue_t)qword_1000E4328, 1uLL);
  id v1 = (void *)qword_1000E4058;
  qword_1000E4058 = (uint64_t)mach_service;

  __xpc_connection_set_logging();
  xpc_connection_set_event_handler((xpc_connection_t)qword_1000E4058, &stru_1000D5550);
  xpc_object_t v2 = (_xpc_connection_s *)qword_1000E4058;

  xpc_connection_resume(v2);
}

void sub_100037AB8(id a1, OS_xpc_object *a2)
{
  xpc_object_t v2 = a2;
  __xpc_connection_set_logging();
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100037B58;
  handler[3] = &unk_1000D5578;
  CFDictionaryRef v5 = v2;
  CFIndex v3 = v2;
  xpc_connection_set_event_handler(v3, handler);
  xpc_connection_resume(v3);
}

void sub_100037B58(uint64_t a1, void *a2)
{
  xpc_object_t object = a2;
  CFIndex v3 = xpc_copy_description(object);
  free(v3);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_error)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(object);
    string = xpc_dictionary_get_string(object, "reqtype");
    if (!strcmp(string, "username"))
    {
      CFStringRef v7 = xpc_dictionary_get_string(object, "query");
      if (!strcmp(v7, "mobile"))
      {
        int v19 = dword_1000E42C0;
        uint64_t v20 = sub_100018600(qword_1000E4318);
        unsigned int v21 = (void *)v20;
        if (v19 == 2)
        {
          int v22 = sub_10001935C(v20);
        }
        else if (sub_1000192C0(v20))
        {
          unsigned int v25 = sub_100018600(qword_1000E4318);
          int v22 = sub_10001935C((uint64_t)v25);
        }
        else
        {
          int v22 = -1;
        }

        if (v22 == -1) {
          goto LABEL_52;
        }
        CFDictionaryRef v9 = (const __CFDictionary *)sub_100037174(v22);
        if (!v9) {
          goto LABEL_52;
        }
      }
      else
      {
        CFStringRef v8 = CFStringCreateWithCString(kCFAllocatorDefault, v7, 0x8000100u);
        CFDictionaryRef v9 = (const __CFDictionary *)sub_100037434(v8);
        if (v8) {
          CFRelease(v8);
        }
        if (!v9) {
          goto LABEL_52;
        }
      }
    }
    else
    {
      if (strcmp(string, "uid"))
      {
        if (!strcmp(string, "gid"))
        {
          int int64 = xpc_dictionary_get_int64(object, "query");
          int v15 = int64;
          if (int64 == 250)
          {
            sub_10003782C(reply);
            goto LABEL_52;
          }
          if (int64 != 299)
          {
            if (int64 == 501)
            {
              int v16 = dword_1000E42C0;
              uint64_t v17 = sub_100018600(qword_1000E4318);
              int v18 = (void *)v17;
              if (v16 == 2)
              {
                int v15 = sub_10001935C(v17);
              }
              else if (sub_1000192C0(v17))
              {
                unsigned int v38 = sub_100018600(qword_1000E4318);
                int v15 = sub_10001935C((uint64_t)v38);
              }
              else
              {
                int v15 = -1;
              }
            }
            if (v15 == -1) {
              goto LABEL_52;
            }
            CFDictionaryRef v40 = (const __CFDictionary *)sub_100037174(v15);
            if (!v40) {
              goto LABEL_52;
            }
            CFDictionaryRef v9 = v40;
LABEL_69:
            sub_100036BE4((uint64_t)v9, reply);
            goto LABEL_51;
          }
        }
        else
        {
          if (strcmp(string, "groupname"))
          {
            if (!strcmp(string, "grouplist"))
            {
              int v27 = xpc_dictionary_get_string(object, "query");
              if (v27)
              {
                CFStringRef v28 = CFStringCreateWithCString(kCFAllocatorDefault, v27, 0x8000100u);
                CFDictionaryRef v29 = (const __CFDictionary *)sub_100037434(v28);
                if (v28) {
                  CFRelease(v28);
                }
                if (v29)
                {
                  int v30 = sub_1000885F0(v29, kUMUserSessionGroupIDKey);
                  xpc_object_t v31 = xpc_array_create(0, 0);
                  xpc_array_set_int64(v31, 0xFFFFFFFFFFFFFFFFLL, v30);
                  xpc_array_set_int64(v31, 0xFFFFFFFFFFFFFFFFLL, 250);
                  xpc_array_set_int64(v31, 0xFFFFFFFFFFFFFFFFLL, 299);
                  xpc_dictionary_set_value(reply, "grouplist", v31);
                  CFRelease(v29);
                }
              }
            }
            else if (!strcmp(string, "available"))
            {
              CFTypeID v6 = sub_100018600(qword_1000E4318);
              sub_1000192C0((uint64_t)v6);

              xpc_dictionary_set_BOOL(reply, "available", 1);
            }
            goto LABEL_52;
          }
          unsigned int v23 = xpc_dictionary_get_string(object, "query");
          if (!strcmp(v23, "mobile"))
          {
            int v32 = dword_1000E42C0;
            uint64_t v33 = sub_100018600(qword_1000E4318);
            unsigned int v34 = (void *)v33;
            if (v32 == 2)
            {
              int v35 = sub_10001935C(v33);
            }
            else if (sub_1000192C0(v33))
            {
              unsigned int v39 = sub_100018600(qword_1000E4318);
              int v35 = sub_10001935C((uint64_t)v39);
            }
            else
            {
              int v35 = -1;
            }

            if (v35 == -1) {
              goto LABEL_52;
            }
            CFDictionaryRef v9 = (const __CFDictionary *)sub_100037174(v35);
LABEL_68:
            if (!v9) {
              goto LABEL_52;
            }
            goto LABEL_69;
          }
          if (strcmp(v23, "systemusers"))
          {
            CFStringRef v24 = CFStringCreateWithCString(kCFAllocatorDefault, v23, 0x8000100u);
            CFDictionaryRef v9 = (const __CFDictionary *)sub_100037434(v24);
            if (v24) {
              CFRelease(v24);
            }
            goto LABEL_68;
          }
        }
        sub_10003760C(reply);
LABEL_52:
        unsigned int v37 = xpc_copy_description(reply);
        free(v37);
        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), reply);

        goto LABEL_53;
      }
      int v10 = xpc_dictionary_get_int64(object, "query");
      if (v10 == 501)
      {
        int v11 = dword_1000E42C0;
        uint64_t v12 = sub_100018600(qword_1000E4318);
        unsigned int v13 = (void *)v12;
        if (v11 == 2)
        {
          int v10 = sub_10001935C(v12);
        }
        else if (sub_1000192C0(v12))
        {
          unsigned int v26 = sub_100018600(qword_1000E4318);
          int v10 = sub_10001935C((uint64_t)v26);
        }
        else
        {
          int v10 = -1;
        }
      }
      if (v10 == -1) {
        goto LABEL_52;
      }
      CFDictionaryRef v36 = (const __CFDictionary *)sub_100037174(v10);
      if (!v36) {
        goto LABEL_52;
      }
      CFDictionaryRef v9 = v36;
    }
    sub_100036A4C(v9, reply, 1);
LABEL_51:
    CFRelease(v9);
    goto LABEL_52;
  }
LABEL_53:
}

void sub_1000380C8(char *__format, ...)
{
  va_start(va, __format);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  *(_OWORD *)__str = 0u;
  long long v16 = 0u;
  vsnprintf(__str, 0x80uLL, __format, va);
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  id v1 = (id)qword_1000E4060;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v2 = sub_100055404(1);
    BOOL v3 = os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
    CFTypeID v4 = 0;
    if (v3) {
      unsigned int v5 = v2;
    }
    else {
      unsigned int v5 = v2 & 0xFFFFFFFE;
    }
    if (v5)
    {
      CFTypeID v6 = (const char *)_os_log_send_and_compose_impl();
      CFTypeID v4 = 0;
      if (v6)
      {
        CFStringRef v7 = v6;
        sub_100055434(v6);
        CFTypeID v4 = (char *)v7;
      }
    }
    free(v4);
  }

  sub_100038334("usermanagerd", __str);
  sub_100038334("auto-boot", "false");
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFStringRef v8 = (id)qword_1000E4060;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v9 = sub_100055404(1);
    BOOL v10 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    int v11 = 0;
    if (v10) {
      unsigned int v12 = v9;
    }
    else {
      unsigned int v12 = v9 & 0xFFFFFFFE;
    }
    if (v12)
    {
      unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
      int v11 = 0;
      if (v13)
      {
        unsigned int v14 = v13;
        sub_100055434(v13);
        int v11 = (char *)v14;
      }
    }
    free(v11);
  }

  fprintf(__stdoutp, "UMD:FATAL OTI LOAD ERROR: %s\n", __str);
  fwrite("UMD:REBOOTING INTO RECOVERY MODE.\n", 0x22uLL, 1uLL, __stdoutp);
  reboot(0);
  exit(71);
}

uint64_t sub_100038334(char *cStr, const char *a2)
{
  CFStringRef v3 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  io_registry_entry_t v4 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/options");
  if (v4)
  {
    io_registry_entry_t v5 = v4;
    CFStringRef v6 = CFStringCreateWithCString(0, a2, 0x8000100u);
    if (v6)
    {
      CFStringRef v7 = v6;
      if (IORegistryEntrySetCFProperty(v5, v3, v6))
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        CFStringRef v8 = (id)qword_1000E4060;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v9 = sub_100055404(1);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v10 = v9;
          }
          else {
            unsigned int v10 = v9 & 0xFFFFFFFE;
          }
          if (v10)
          {
            int v11 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v12 = (char *)v11;
            if (v11) {
              sub_100055434(v11);
            }
          }
          else
          {
            unsigned int v12 = 0;
          }
          free(v12);
        }

        uint64_t v23 = 0xFFFFFFFFLL;
      }
      else
      {
        uint64_t v23 = 0;
      }
      CFRelease(v7);
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      long long v18 = (id)qword_1000E4060;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v19 = sub_100055404(1);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v20 = v19;
        }
        else {
          unsigned int v20 = v19 & 0xFFFFFFFE;
        }
        if (v20)
        {
          long long v21 = (const char *)_os_log_send_and_compose_impl();
          long long v22 = (char *)v21;
          if (v21) {
            sub_100055434(v21);
          }
        }
        else
        {
          long long v22 = 0;
        }
        free(v22);
      }

      uint64_t v23 = 0xFFFFFFFFLL;
    }
    IOObjectRelease(v5);
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v13 = (id)qword_1000E4060;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        long long v16 = (const char *)_os_log_send_and_compose_impl();
        long long v17 = (char *)v16;
        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {
        long long v17 = 0;
      }
      free(v17);
    }

    uint64_t v23 = 0xFFFFFFFFLL;
  }
  CFRelease(v3);
  return v23;
}

uint64_t sub_1000386B8()
{
  return sub_100038334("IONVRAM-DELETE-PROPERTY", "usermanagerd");
}

const void *sub_1000386CC(int a1, int a2)
{
  sub_100056848(qword_1000E4038, a1);
  CFStringRef v3 = (__CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    if (qword_1000E4068 == -1)
    {
LABEL_20:
      unsigned int v12 = (id)qword_1000E4060;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v13 = sub_100055404(1);
        BOOL v14 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        unsigned int v15 = 0;
        if (v14) {
          unsigned int v16 = v13;
        }
        else {
          unsigned int v16 = v13 & 0xFFFFFFFE;
        }
        if (v16)
        {
          long long v17 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v15 = 0;
          if (v17)
          {
            long long v18 = v17;
            sub_100055434(v17);
            unsigned int v15 = (char *)v18;
          }
        }
        free(v15);
      }

      sleep(2u);
      sub_100019810("UserManagement early boot task could not Locate primary user session of Update install user");
      goto LABEL_29;
    }
LABEL_62:
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
    goto LABEL_20;
  }
  CFDictionaryRef v4 = v3;
  if (!a2) {
    goto LABEL_16;
  }
  if (!sub_10007B6DC(v3))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v33 = (id)qword_1000E4060;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v34 = sub_100055404(1);
      BOOL v35 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
      CFDictionaryRef v36 = 0;
      if (v35) {
        unsigned int v37 = v34;
      }
      else {
        unsigned int v37 = v34 & 0xFFFFFFFE;
      }
      if (v37)
      {
        unsigned int v38 = (const char *)_os_log_send_and_compose_impl();
        CFDictionaryRef v36 = 0;
        if (v38)
        {
          unsigned int v39 = v38;
          sub_100055434(v38);
          CFDictionaryRef v36 = (char *)v39;
        }
      }
      free(v36);
    }

    sleep(2u);
    sub_100019810("UserManagement early boot task failed to find device Node or volume uuid of UserVolume during update install");
    goto LABEL_62;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  io_registry_entry_t v5 = (id)qword_1000E4060;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = v6 & 0xFFFFFFFE;
    }
    if (v7)
    {
      CFStringRef v8 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v9 = (char *)v8;
      if (v8) {
        sub_100055434(v8);
      }
    }
    else
    {
      unsigned int v9 = 0;
    }
    free(v9);
  }

  sub_10001A7BC();
LABEL_16:
  unsigned int v10 = sub_100088788(v4, kUMUserSessionVolumeDeviceNodeKey);
  CFTypeRef result = sub_100088788(v4, kUMUserSessionVolumeUUIDKey);
  if (!v10)
  {
LABEL_29:
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v19 = (id)qword_1000E4060;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v20 = sub_100055404(1);
      BOOL v21 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      long long v22 = 0;
      if (v21) {
        unsigned int v23 = v20;
      }
      else {
        unsigned int v23 = v20 & 0xFFFFFFFE;
      }
      if (v23)
      {
        CFStringRef v24 = (const char *)_os_log_send_and_compose_impl();
        long long v22 = 0;
        if (v24)
        {
          unsigned int v25 = v24;
          sub_100055434(v24);
          long long v22 = (char *)v25;
        }
      }
      free(v22);
    }

    sleep(2u);
    sub_100019810("UserManagement early boot task missing disknode for the booted user..");
LABEL_40:
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v26 = (id)qword_1000E4060;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v27 = sub_100055404(1);
      BOOL v28 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
      CFDictionaryRef v29 = 0;
      if (v28) {
        unsigned int v30 = v27;
      }
      else {
        unsigned int v30 = v27 & 0xFFFFFFFE;
      }
      if (v30)
      {
        xpc_object_t v31 = (const char *)_os_log_send_and_compose_impl();
        CFDictionaryRef v29 = 0;
        if (v31)
        {
          int v32 = v31;
          sub_100055434(v31);
          CFDictionaryRef v29 = (char *)v32;
        }
      }
      free(v29);
    }

    sleep(2u);
    sub_100019810("UserManagement early boot task missing volumeUUID for the booted user..");
  }
  if (!result) {
    goto LABEL_40;
  }
  return result;
}

id sub_100038BFC()
{
  CFDictionaryRef v0 = [@"VolumeMigrationInProgress" dataUsingEncoding:4];
  id v1 = sub_100018F6C(qword_1000E4318);
  id v2 = [v1 atomicallyWriteData:v0 toPath:@"/private/var//keybags/umVolumeMigration-inprogress.kb" error:0];

  if (v2)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFStringRef v3 = (id)qword_1000E4060;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v4 = sub_100055404(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v5 = v4;
      }
      else {
        unsigned int v5 = v4 & 0xFFFFFFFE;
      }
      if (v5)
      {
LABEL_17:
        CFStringRef v8 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v9 = (char *)v8;
        if (v8) {
          sub_100055434(v8);
        }
        goto LABEL_20;
      }
LABEL_19:
      unsigned int v9 = 0;
LABEL_20:
      free(v9);
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFStringRef v3 = (id)qword_1000E4060;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v6 = sub_100055404(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      if (v7) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }

  return v2;
}

void sub_100038DDC()
{
  char v594 = 1;
  uint64_t v2 = sub_100059DA4((uint64_t)UMDAPFSSupportVolumeHelper, (void *)qword_1000E4318, byte_1000E4312);
  CFStringRef v3 = (void *)qword_1000E4030;
  qword_1000E4030 = v2;

  uint64_t v4 = sub_100056444((uint64_t)UMDUserManager, (void *)qword_1000E4030);
  unsigned int v5 = (void *)qword_1000E4038;
  qword_1000E4038 = v4;

  unsigned int v6 = &qword_1000E4000;
  CFUUIDRef v7 = (const __CFUUID *)&byte_1000E4313;
  if (![(id)qword_1000E4030 splitUserVolumeEnabled])
  {
    CFTypeID v11 = 0;
    int v12 = 0;
    int v13 = 0;
    goto LABEL_95;
  }
  *(_DWORD *)err = 0;
  if (sub_100088F04() == 100)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFStringRef v8 = (id)qword_1000E4060;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v9 = sub_100055404(1);
      uint64_t v0 = v8;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v10 = v9;
      }
      else {
        unsigned int v10 = v9 & 0xFFFFFFFE;
      }
      if (v10)
      {
        LOWORD(uuid[0]) = 0;
        LODWORD(v579) = 2;
        v576 = uuid;
        id v1 = (uint64_t *)_os_log_send_and_compose_impl();

        if (v1) {
          sub_100055434((const char *)v1);
        }
      }
      else
      {

        id v1 = 0;
      }
      free(v1);
    }

    sub_100038BFC();
  }
  if (sub_100088F04() == 101)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    BOOL v14 = (id)qword_1000E4060;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v15 = sub_100055404(1);
      unsigned int v16 = v14;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v17 = v15;
      }
      else {
        unsigned int v17 = v15 & 0xFFFFFFFE;
      }
      if (v17)
      {
        LOWORD(uuid[0]) = 0;
        LODWORD(v579) = 2;
        v576 = uuid;
        id v1 = (uint64_t *)_os_log_send_and_compose_impl();

        if (v1) {
          sub_100055434((const char *)v1);
        }
      }
      else
      {

        id v1 = 0;
      }
      free(v1);
    }

    long long v18 = sub_100018F6C(qword_1000E4318);
    uint64_t v0 = (uint64_t)[v18 removeFileAtPath:@"/private/var//keybags/usersession.kb" error:0];

    if (v0)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v19 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_49;
      }
      value[0] = 0;
      unsigned int v20 = sub_100055404(1);
      unsigned int v19 = v19;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = v20 & 0xFFFFFFFE;
      }
      if (v21)
      {
        LOWORD(uuid[0]) = 0;
        LODWORD(v579) = 2;
        v576 = uuid;
        goto LABEL_45;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v19 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_49;
      }
      value[0] = 0;
      unsigned int v22 = sub_100055404(1);
      unsigned int v19 = v19;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v23 = v22;
      }
      else {
        unsigned int v23 = v22 & 0xFFFFFFFE;
      }
      if (v23)
      {
        LOWORD(uuid[0]) = 0;
        LODWORD(v579) = 2;
        v576 = uuid;
LABEL_45:
        uint64_t v0 = _os_log_send_and_compose_impl();

        if (v0) {
          sub_100055434((const char *)v0);
        }
        goto LABEL_48;
      }
    }

    uint64_t v0 = 0;
LABEL_48:
    free((void *)v0);
LABEL_49:
  }
  if (sub_100080C94((int *)err, &v594))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFStringRef v24 = (id)qword_1000E4060;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v25 = sub_100055404(1);
      uint64_t v0 = v24;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v26 = v25;
      }
      else {
        unsigned int v26 = v25 & 0xFFFFFFFE;
      }
      if (v26)
      {
        LOWORD(uuid[0]) = 0;
        LODWORD(v579) = 2;
        v576 = uuid;
        id v1 = (uint64_t *)_os_log_send_and_compose_impl();

        if (v1) {
          sub_100055434((const char *)v1);
        }
      }
      else
      {

        id v1 = 0;
      }
      free(v1);
    }

    unsigned int v33 = sub_100038BFC();
    BOOL v34 = qword_1000E4068 == -1;
    if (!v33) {
      goto LABEL_1257;
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v27 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_94;
    }
    value[0] = 0;
    unsigned int v35 = sub_100055404(1);
    uint64_t v0 = v27;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v36 = v35;
    }
    else {
      unsigned int v36 = v35 & 0xFFFFFFFE;
    }
    if (v36)
    {
      LOWORD(uuid[0]) = 0;
      LODWORD(v579) = 2;
      v576 = uuid;
LABEL_90:
      id v1 = (uint64_t *)_os_log_send_and_compose_impl();

      if (v1) {
        sub_100055434((const char *)v1);
      }
      goto LABEL_93;
    }
    goto LABEL_92;
  }
  if (sub_100023FBC())
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v27 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_94;
    }
    value[0] = 0;
    unsigned int v28 = sub_100055404(1);
    uint64_t v0 = v27;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v29 = v28;
    }
    else {
      unsigned int v29 = v28 & 0xFFFFFFFE;
    }
    if (v29)
    {
      LOWORD(uuid[0]) = 0;
      LODWORD(v579) = 2;
      v576 = uuid;
      goto LABEL_90;
    }
LABEL_92:

    id v1 = 0;
LABEL_93:
    free(v1);
LABEL_94:

    CFTypeID v11 = 0;
    int v12 = 0;
    int v13 = 1;
    goto LABEL_95;
  }
  if (!v594)
  {
    byte_1000E4313 = 1;
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v30 = (id)qword_1000E4060;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v31 = sub_100055404(1);
      uint64_t v0 = v30;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v32 = v31;
      }
      else {
        unsigned int v32 = v31 & 0xFFFFFFFE;
      }
      if (v32)
      {
        LOWORD(uuid[0]) = 0;
        LODWORD(v579) = 2;
        v576 = uuid;
        id v1 = (uint64_t *)_os_log_send_and_compose_impl();

        if (v1) {
          sub_100055434((const char *)v1);
        }
      }
      else
      {

        id v1 = 0;
      }
      free(v1);
    }

    __int16 v167 = sub_100019308(qword_1000E4318);
    [v167 setIgnoreIdentityMethods:byte_1000E4313];
  }
  char v594 = 1;
  if (sub_100080CD4((int *)err, &v594))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v168 = (id)qword_1000E4060;
    if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v169 = sub_100055404(1);
      uint64_t v0 = v168;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v170 = v169;
      }
      else {
        unsigned int v170 = v169 & 0xFFFFFFFE;
      }
      if (v170)
      {
        LOWORD(uuid[0]) = 0;
        LODWORD(v579) = 2;
        v576 = uuid;
        id v1 = (uint64_t *)_os_log_send_and_compose_impl();

        if (v1) {
          sub_100055434((const char *)v1);
        }
      }
      else
      {

        id v1 = 0;
      }
      free(v1);
    }

    CFTypeID v11 = 0;
    int v13 = 0;
    int v12 = 1;
  }
  else
  {
    int v12 = 0;
    int v13 = 0;
    CFTypeID v11 = *(_DWORD *)err == 2;
  }
LABEL_95:
  if (byte_1000E4313) {
    int v37 = 0;
  }
  else {
    int v37 = v12;
  }
  int v584 = v37;
  if (byte_1000E4313) {
    int v38 = 0;
  }
  else {
    int v38 = v13;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v39 = (id)qword_1000E4060;
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    unsigned int v40 = sub_100055404(1);
    uint64_t v0 = v39;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v41 = v40;
    }
    else {
      unsigned int v41 = v40 & 0xFFFFFFFE;
    }
    if (v41)
    {
      *(_WORD *)err = 0;
      LODWORD(v579) = 2;
      v576 = (CFUUIDRef *)err;
      id v1 = (uint64_t *)_os_log_send_and_compose_impl();

      if (v1) {
        sub_100055434((const char *)v1);
      }
    }
    else
    {

      id v1 = 0;
    }
    free(v1);
  }

  CFUUIDRef v7 = (const __CFUUID *)&qword_1000E4000;
  if (sub_10004008C(0))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v42 = &qword_1000E4000;
    unsigned int v43 = (id)qword_1000E4060;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v44 = sub_100055404(1);
      uint64_t v0 = v43;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v45 = v44;
      }
      else {
        unsigned int v45 = v44 & 0xFFFFFFFE;
      }
      if (v45)
      {
        *(_WORD *)err = 0;
        LODWORD(v579) = 2;
        v576 = (CFUUIDRef *)err;
        id v1 = (uint64_t *)_os_log_send_and_compose_impl();

        if (v1) {
          sub_100055434((const char *)v1);
        }
      }
      else
      {

        id v1 = 0;
      }
      free(v1);
    }

    goto LABEL_142;
  }
  unsigned int v46 = [(id)qword_1000E4030 splitUserVolumeEnabled];
  if ((v12 | v38 ^ 1) == 1 && v46 != 0)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v485 = (id)qword_1000E4060;
    if (os_log_type_enabled(v485, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      uint64_t v0 = sub_100055404(1);
      BOOL v486 = os_log_type_enabled(v485, OS_LOG_TYPE_DEFAULT);
      v487 = 0;
      if (v486) {
        int v488 = v0;
      }
      else {
        int v488 = v0 & 0xFFFFFFFE;
      }
      if (v488)
      {
        *(_WORD *)err = 0;
        v489 = (const char *)_os_log_send_and_compose_impl();
        v487 = 0;
        if (v489)
        {
          uint64_t v0 = (uint64_t)v489;
          sub_100055434(v489);
          v487 = (void *)v0;
        }
      }
      free(v487);
    }

    sleep(2u);
    sub_100019810("UserManagement early boot task Erase Install or normal boot, no UserSessions to Load...");
LABEL_1257:
    if (!v34) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v473 = (id)qword_1000E4060;
    if (os_log_type_enabled(v473, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      uint64_t v0 = sub_100055404(1);
      BOOL v490 = os_log_type_enabled(v473, OS_LOG_TYPE_DEFAULT);
      v491 = 0;
      if (v490) {
        int v492 = v0;
      }
      else {
        int v492 = v0 & 0xFFFFFFFE;
      }
      if (v492)
      {
        LOWORD(uuid[0]) = 0;
        v493 = (const char *)_os_log_send_and_compose_impl();
        v491 = 0;
        if (v493)
        {
          uint64_t v0 = (uint64_t)v493;
          sub_100055434(v493);
          v491 = (void *)v0;
        }
      }
      free(v491);
    }

    sub_100019810("Creating classD marker file in /var/keybags in early boot task failed");
    goto LABEL_1268;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v42 = &qword_1000E4000;
  unsigned int v48 = (id)qword_1000E4060;
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    unsigned int v49 = sub_100055404(1);
    uint64_t v0 = v48;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v50 = v49;
    }
    else {
      unsigned int v50 = v49 & 0xFFFFFFFE;
    }
    if (v50)
    {
      *(_WORD *)err = 0;
      LODWORD(v579) = 2;
      v576 = (CFUUIDRef *)err;
      id v1 = (uint64_t *)_os_log_send_and_compose_impl();

      if (v1) {
        sub_100055434((const char *)v1);
      }
    }
    else
    {

      id v1 = 0;
    }
    free(v1);
  }

  dword_1000E42C0 = 0;
  dword_1000E3218 = 501;
  qword_1000E42B0 = (uint64_t)sub_100088D04();
  sub_10001A7BC();
LABEL_142:
  if (objc_msgSend((id)v42[6], "splitUserVolumeEnabled", v576, v579)
    && dword_1000E42C0 != 1
    && ((v11 ^ 1) & 1) == 0)
  {
    if (qword_1000E4068 == -1)
    {
LABEL_1212:
      v468 = (id)qword_1000E4060;
      if (os_log_type_enabled(v468, OS_LOG_TYPE_DEFAULT))
      {
        value[0] = 0;
        uint64_t v0 = sub_100055404(1);
        BOOL v469 = os_log_type_enabled(v468, OS_LOG_TYPE_DEFAULT);
        v470 = 0;
        if (v469) {
          int v471 = v0;
        }
        else {
          int v471 = v0 & 0xFFFFFFFE;
        }
        if (v471)
        {
          *(_WORD *)err = 0;
          LODWORD(v579) = 2;
          v577 = (void **)err;
          v472 = (const char *)_os_log_send_and_compose_impl();
          v470 = 0;
          if (v472)
          {
            uint64_t v0 = (uint64_t)v472;
            sub_100055434(v472);
            v470 = (void *)v0;
          }
        }
        free(v470);
      }

      sleep(2u);
      sub_100019810("Not shared iPad, missing User Volume cannot be located...");
      goto LABEL_1221;
    }
LABEL_1471:
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
    goto LABEL_1212;
  }
  sub_100019084(qword_1000E4038, (void *)qword_1000E42B0);
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v51 = (id)qword_1000E4060;
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)err = 0;
    int v52 = sub_100055404(1);
    uint64_t v0 = v51;
    if (!os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
      v52 &= ~1u;
    }
    if (v52)
    {
      CFTypeID v11 = sub_100018BF8(qword_1000E4038);
      LODWORD(value[0]) = 138412290;
      *(void **)((char *)value + 4) = (void *)v11;
      LODWORD(v579) = 12;
      v577 = value;
      id v1 = (uint64_t *)_os_log_send_and_compose_impl();

      if (v1) {
        sub_100055434((const char *)v1);
      }
    }
    else
    {

      id v1 = 0;
    }
    free(v1);
  }

  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v53 = (id)qword_1000E4060;
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    unsigned int v54 = sub_100055404(1);
    uint64_t v0 = v53;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v55 = v54;
    }
    else {
      unsigned int v55 = v54 & 0xFFFFFFFE;
    }
    if (v55)
    {
      *(_WORD *)err = 0;
      LODWORD(v579) = 2;
      v577 = (void **)err;
      id v1 = (uint64_t *)_os_log_send_and_compose_impl();

      if (v1) {
        sub_100055434((const char *)v1);
      }
    }
    else
    {

      id v1 = 0;
    }
    free(v1);
  }

  if (dword_1000E42C0 == 1)
  {
    unsigned int v56 = sub_100056848(qword_1000E4038, 502);
    if (v56) {
      goto LABEL_251;
    }
    if (qword_1000E4078 != -1) {
      dispatch_once(&qword_1000E4078, &stru_1000D55B8);
    }
    CFTypeID v11 = (CFTypeID)&qword_1000E4000;
    unsigned int v56 = (id)qword_1000E4070;
    if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
    {
      value[0] = 0;
      unsigned int v57 = sub_100055404(0);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO)) {
        unsigned int v58 = v57;
      }
      else {
        unsigned int v58 = v57 & 0xFFFFFFFE;
      }
      if (v58)
      {
        *(_WORD *)err = 0;
        LODWORD(v579) = 2;
        v577 = (void **)err;
        unsigned int v59 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v60 = (char *)v59;
        if (v59) {
          sub_100055434(v59);
        }
      }
      else
      {
        unsigned int v60 = 0;
      }
      free(v60);
    }

    unsigned int v71 = sub_10001F5BC(-1, 0);
    if (v71)
    {
      unsigned int v56 = v71;
      if (qword_1000E4078 == -1) {
        goto LABEL_204;
      }
    }
    else
    {
      sub_100019810("UserManagement early boot task failed assertion: loginwindowSession != ((void *)0)");
    }
    dispatch_once(&qword_1000E4078, &stru_1000D55B8);
LABEL_204:
    uint64_t v0 = (uint64_t)(id)qword_1000E4070;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v72 = sub_100055404(0);
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v73 = v72;
      }
      else {
        unsigned int v73 = v72 & 0xFFFFFFFE;
      }
      if (v73)
      {
        *(_WORD *)err = 0;
        LODWORD(v579) = 2;
        v577 = (void **)err;
        goto LABEL_246;
      }
      goto LABEL_248;
    }
    goto LABEL_250;
  }
  unsigned int v56 = sub_100056848(qword_1000E4038, 501);
  if (![(id)v42[6] splitUserVolumeEnabled])
  {
    if (v56) {
      goto LABEL_251;
    }
    id v1 = &qword_1000E4000;
    if (qword_1000E4078 != -1) {
      dispatch_once(&qword_1000E4078, &stru_1000D55B8);
    }
    CFTypeID v11 = (CFTypeID)&qword_1000E4000;
    unsigned int v56 = (id)qword_1000E4070;
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
    {
LABEL_238:

      unsigned int v83 = sub_1000512C4(0);
      if (v83)
      {
        unsigned int v56 = v83;
        if (v1[15] == -1) {
          goto LABEL_240;
        }
      }
      else
      {
        sub_100019810("UserManagement early boot task failed assertion: mobileSession != ((void *)0)");
      }
      dispatch_once(&qword_1000E4078, &stru_1000D55B8);
LABEL_240:
      uint64_t v0 = (uint64_t)*(id *)(v11 + 112);
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
      {
        value[0] = 0;
        unsigned int v84 = sub_100055404(0);
        if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v85 = v84;
        }
        else {
          unsigned int v85 = v84 & 0xFFFFFFFE;
        }
        if (v85)
        {
          *(_WORD *)err = 0;
          LODWORD(v579) = 2;
          v577 = (void **)err;
LABEL_246:
          uint64_t v86 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v87 = (char *)v86;
          if (v86) {
            sub_100055434(v86);
          }
          goto LABEL_249;
        }
LABEL_248:
        unsigned int v87 = 0;
LABEL_249:
        free(v87);
      }
LABEL_250:

      goto LABEL_251;
    }
    value[0] = 0;
    unsigned int v67 = sub_100055404(0);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO)) {
      unsigned int v68 = v67;
    }
    else {
      unsigned int v68 = v67 & 0xFFFFFFFE;
    }
    if (v68)
    {
      *(_WORD *)err = 0;
      LODWORD(v579) = 2;
      v577 = (void **)err;
      int v69 = (const char *)_os_log_send_and_compose_impl();
      id v70 = (char *)v69;
      if (v69) {
        sub_100055434(v69);
      }
      goto LABEL_237;
    }
LABEL_236:
    id v70 = 0;
LABEL_237:
    free(v70);
    goto LABEL_238;
  }
  char v61 = v38 ^ 1;
  if (v56) {
    char v61 = 1;
  }
  if ((v61 & 1) == 0)
  {
    id v1 = &qword_1000E4000;
    if (qword_1000E4078 != -1) {
      dispatch_once(&qword_1000E4078, &stru_1000D55B8);
    }
    CFTypeID v11 = (CFTypeID)&qword_1000E4000;
    char v62 = (id)qword_1000E4070;
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v63 = sub_100055404(0);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v64 = v63;
      }
      else {
        unsigned int v64 = v63 & 0xFFFFFFFE;
      }
      if (v64)
      {
        *(_WORD *)err = 0;
        LODWORD(v579) = 2;
        v577 = (void **)err;
        __int16 v65 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v66 = (char *)v65;
        if (v65) {
          sub_100055434(v65);
        }
      }
      else
      {
        unsigned int v66 = 0;
      }
      free(v66);
    }

    unsigned int v56 = sub_1000512C4(1);
    if (qword_1000E4078 != -1) {
      dispatch_once(&qword_1000E4078, &stru_1000D55B8);
    }
    uint64_t v0 = (uint64_t)(id)qword_1000E4070;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v74 = sub_100055404(0);
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v75 = v74;
      }
      else {
        unsigned int v75 = v74 & 0xFFFFFFFE;
      }
      if (v75)
      {
        *(_WORD *)err = 0;
        LODWORD(v579) = 2;
        v577 = (void **)err;
        int v76 = (const char *)_os_log_send_and_compose_impl();
        id v1 = (uint64_t *)v76;
        if (v76) {
          sub_100055434(v76);
        }
      }
      else
      {
        id v1 = 0;
      }
      free(v1);
    }
  }
  if (!v56)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v56 = (id)qword_1000E4060;
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v77 = sub_100055404(1);
      BOOL v78 = os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
      unsigned int v79 = 0;
      if (v78) {
        unsigned int v80 = v77;
      }
      else {
        unsigned int v80 = v77 & 0xFFFFFFFE;
      }
      if (v80)
      {
        *(_WORD *)err = 0;
        LODWORD(v579) = 2;
        v577 = (void **)err;
        unsigned int v81 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v79 = 0;
        if (v81)
        {
          id v82 = v81;
          sub_100055434(v81);
          unsigned int v79 = (char *)v82;
        }
      }
      free(v79);
    }

    sleep(2u);
    sub_100019810("UserManagement early boot task unable to locate Primary user..");
    goto LABEL_236;
  }
LABEL_251:
  CFRelease(v56);
  if ((sub_1000578D4(qword_1000E4038) & 1) == 0)
  {
LABEL_1221:
    sub_100019810("UserManagement early boot task failed to remove nextSession file", v577, v579);
    goto LABEL_1222;
  }
  if (dword_1000E42C0 != 1) {
    goto LABEL_274;
  }
  if (byte_1000E3220 && qword_1000E42B0)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v88 = (id)qword_1000E4060;
    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v89 = sub_100055404(1);
      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v90 = v89;
      }
      else {
        unsigned int v90 = v89 & 0xFFFFFFFE;
      }
      if (v90)
      {
        *(_WORD *)err = 0;
        LODWORD(v579) = 2;
        v577 = (void **)err;
        unsigned int v91 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v0 = (uint64_t)v91;
        if (v91) {
          sub_100055434(v91);
        }
      }
      else
      {
        uint64_t v0 = 0;
      }
      free((void *)v0);
    }

    if (CFArrayGetCount((CFArrayRef)qword_1000E42B0) >= 1)
    {
      CFIndex v92 = 0;
      uint64_t v0 = (uint64_t)kCFBooleanFalse;
      do
      {
        CFDictionaryRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42B0, v92);
        if (ValueAtIndex)
        {
          unsigned int v94 = ValueAtIndex;
          CFTypeID v11 = CFGetTypeID(ValueAtIndex);
          if (v11 == CFDictionaryGetTypeID())
          {
            if (CFDictionaryContainsKey(v94, kUMUserSessionVolumeMountedKey)) {
              CFDictionarySetValue(v94, kUMUserSessionVolumeMountedKey, kCFBooleanFalse);
            }
          }
        }
        ++v92;
      }
      while (CFArrayGetCount((CFArrayRef)qword_1000E42B0) > v92);
    }
  }
  sub_100040298();
  if (dword_1000E42C0 != 1)
  {
LABEL_274:
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v95 = (id)qword_1000E4060;
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v96 = sub_100055404(1);
      uint64_t v0 = v95;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v97 = v96;
      }
      else {
        unsigned int v97 = v96 & 0xFFFFFFFE;
      }
      if (v97)
      {
        *(_WORD *)err = 0;
        LODWORD(v579) = 2;
        v577 = (void **)err;
        unsigned int v98 = (char *)_os_log_send_and_compose_impl();

        if (v98) {
          sub_100055434(v98);
        }
      }
      else
      {

        unsigned int v98 = 0;
      }
      free(v98);
    }

    if (qword_1000E4040)
    {
      sub_100019810("UserManagement early boot task failed assertion: _gPersonaManager == ((void *)0)");
    }
    else
    {
      uint64_t v99 = sub_100059FF4((uint64_t)UMDPersonaManager, (void *)qword_1000E4038);
      v100 = (void *)qword_1000E4040;
      qword_1000E4040 = v99;

      LODWORD(uuid[0]) = 0;
      CFTypeID v11 = (CFTypeID)&qword_1000E4000;
      if (!sub_10004041C(uuid))
      {
        if (qword_1000E4088 != -1) {
          dispatch_once(&qword_1000E4088, &stru_1000D55D8);
        }
        unsigned int v101 = (id)qword_1000E4080;
        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
        {
          value[0] = 0;
          unsigned int v102 = sub_100055404(0);
          uint64_t v0 = v101;
          if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v103 = v102;
          }
          else {
            unsigned int v103 = v102 & 0xFFFFFFFE;
          }
          if (v103)
          {
            *(_DWORD *)err = 67109120;
            *(_DWORD *)&err[4] = uuid[0];
            LODWORD(v579) = 8;
            v577 = (void **)err;
            unsigned int v104 = (char *)_os_log_send_and_compose_impl();

            if (v104) {
              sub_100055434(v104);
            }
          }
          else
          {

            unsigned int v104 = 0;
          }
          free(v104);
        }

        v105 = sub_100018F78(qword_1000E4040);
        sub_100058978((uint64_t)v105, 1);
      }
      if (qword_1000E4088 == -1) {
        goto LABEL_300;
      }
    }
    dispatch_once(&qword_1000E4088, &stru_1000D55D8);
LABEL_300:
    unsigned int v106 = *(id *)(v11 + 128);
    if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v107 = sub_100055404(0);
      uint64_t v0 = v106;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v108 = v107;
      }
      else {
        unsigned int v108 = v107 & 0xFFFFFFFE;
      }
      if (v108)
      {
        *(_WORD *)err = 0;
        LODWORD(v579) = 2;
        v577 = (void **)err;
        unsigned int v109 = (char *)_os_log_send_and_compose_impl();

        if (v109) {
          sub_100055434(v109);
        }
      }
      else
      {

        unsigned int v109 = 0;
      }
      free(v109);
    }

    if (qword_1000E4088 != -1) {
      dispatch_once(&qword_1000E4088, &stru_1000D55D8);
    }
    unsigned int v6 = &qword_1000E4000;
    v110 = *(id *)(v11 + 128);
    if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
    {
      *(void *)err = 0;
      int v111 = sub_100055404(0);
      uint64_t v0 = v110;
      if (!os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEBUG)) {
        v111 &= ~1u;
      }
      if (v111)
      {
        unsigned int v112 = sub_100018F6C(qword_1000E4040);
        LODWORD(value[0]) = 138412290;
        *(void **)((char *)value + 4) = v112;
        LODWORD(v579) = 12;
        v577 = value;
        unsigned int v113 = (char *)_os_log_send_and_compose_impl();

        if (v113) {
          sub_100055434(v113);
        }
      }
      else
      {

        unsigned int v113 = 0;
      }
      free(v113);
    }

    if (sub_100059FD8())
    {
      if (sub_100065660(qword_1000E4040)) {
        sub_100065AE0((id *)qword_1000E4040);
      }
      sub_100065F58(qword_1000E4040);
    }
  }
  LODWORD(v114) = v38 | v584;
  if ((v38 | v584))
  {
    BOOL v115 = 1;
    CFUUIDRef v7 = (const __CFUUID *)&byte_1000E4313;
  }
  else
  {
    CFUUIDRef v7 = (const __CFUUID *)&byte_1000E4313;
    BOOL v115 = byte_1000E4313 != 0;
  }
  if (!objc_msgSend((id)qword_1000E4030, "splitUserVolumeEnabled", v577, v579))
  {
    if (dword_1000E42C0 != 1)
    {
      if ((dword_1000E3218 - 501) <= 0x36
        && (sub_100056848(qword_1000E4038, dword_1000E3218),
            unsigned int v122 = objc_claimAutoreleasedReturnValue(),
            v122,
            v122))
      {
        uint64_t v121 = dword_1000E3218;
      }
      else
      {
        if (qword_1000E4078 != -1) {
          dispatch_once(&qword_1000E4078, &stru_1000D55B8);
        }
        CFStringRef v123 = (id)qword_1000E4070;
        if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
        {
          value[0] = 0;
          unsigned int v124 = sub_100055404(0);
          if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR)) {
            unsigned int v125 = v124;
          }
          else {
            unsigned int v125 = v124 & 0xFFFFFFFE;
          }
          if (v125)
          {
            *(_DWORD *)err = 67109120;
            *(_DWORD *)&err[4] = dword_1000E3218;
            LODWORD(v579) = 8;
            v578 = (void **)err;
            id v126 = (const char *)_os_log_send_and_compose_impl();
            id v127 = (char *)v126;
            if (v126) {
              sub_100055434(v126);
            }
          }
          else
          {
            id v127 = 0;
          }
          free(v127);
        }

        uint64_t v121 = 501;
        dword_1000E3218 = 501;
      }
      goto LABEL_495;
    }
LABEL_339:
    uint64_t v121 = 502;
    goto LABEL_495;
  }
  if (dword_1000E42C0 == 1) {
    goto LABEL_339;
  }
  if (v115)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v116 = (id)qword_1000E4060;
    if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v117 = sub_100055404(1);
      if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v118 = v117;
      }
      else {
        unsigned int v118 = v117 & 0xFFFFFFFE;
      }
      if (v118)
      {
        *(_WORD *)err = 0;
        LODWORD(v579) = 2;
        v578 = (void **)err;
        int v119 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v120 = (char *)v119;
        if (v119) {
          sub_100055434(v119);
        }
      }
      else
      {
        unsigned int v120 = 0;
      }
      free(v120);
    }

    uint64_t v121 = 501;
    goto LABEL_495;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  v128 = (id)qword_1000E4060;
  if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    unsigned int v129 = sub_100055404(1);
    if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v130 = v129;
    }
    else {
      unsigned int v130 = v129 & 0xFFFFFFFE;
    }
    if (v130)
    {
      *(_WORD *)err = 0;
      LODWORD(v579) = 2;
      v578 = (void **)err;
      __int16 v131 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v0 = (uint64_t)v131;
      if (v131) {
        sub_100055434(v131);
      }
    }
    else
    {
      uint64_t v0 = 0;
    }
    free((void *)v0);
  }

  *(void *)err = 0;
  uuid[0] = 0;
  if (!AKSGetLastUser())
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v137 = (id)qword_1000E4060;
    if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v614 = 0;
      int v138 = sub_100055404(1);
      if (!os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT)) {
        v138 &= ~1u;
      }
      if (v138)
      {
        unsigned int v139 = *(__CFError **)err;
        unsigned int v140 = v137;
        int Code = CFErrorGetCode(v139);
        LODWORD(value[0]) = 67109378;
        HIDWORD(value[0]) = Code;
        LOWORD(value[1]) = 2112;
        *(void **)((char *)&value[1] + 2) = *(void **)err;
        LODWORD(v579) = 18;
        v578 = value;
        uint64_t v0 = _os_log_send_and_compose_impl();

        if (v0) {
          sub_100055434((const char *)v0);
        }
        LODWORD(v114) = v38 | v584;
      }
      else
      {
        uint64_t v0 = 0;
      }
      free((void *)v0);
    }

    int v150 = CFErrorGetCode(*(CFErrorRef *)err);
    uint64_t v121 = 0xFFFFFFFFLL;
    goto LABEL_480;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  id v132 = (id)qword_1000E4060;
  if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v614 = 0;
    unsigned int v133 = sub_100055404(1);
    if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v134 = v133;
    }
    else {
      unsigned int v134 = v133 & 0xFFFFFFFE;
    }
    if (v134)
    {
      LODWORD(value[0]) = 138412290;
      *(CFUUIDRef *)((char *)value + 4) = uuid[0];
      LODWORD(v579) = 12;
      v578 = value;
      int v135 = (const char *)_os_log_send_and_compose_impl();
      int v136 = (char *)v135;
      if (v135) {
        sub_100055434(v135);
      }
    }
    else
    {
      int v136 = 0;
    }
    free(v136);
  }

  uint64_t v0 = (uint64_t)CFUUIDCreateString(kCFAllocatorDefault, uuid[0]);
  if (!v0)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v147 = (id)qword_1000E4060;
    if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v148 = sub_100055404(1);
      if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v149 = v148;
      }
      else {
        unsigned int v149 = v148 & 0xFFFFFFFE;
      }
      if (v149)
      {
        LOWORD(v614) = 0;
        LODWORD(v579) = 2;
        v578 = (void **)&v614;
        goto LABEL_431;
      }
LABEL_433:
      CFBooleanRef v161 = 0;
LABEL_434:
      free(v161);
    }
LABEL_435:

    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v162 = (id)qword_1000E4060;
    if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v163 = sub_100055404(1);
      if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v164 = v163;
      }
      else {
        unsigned int v164 = v163 & 0xFFFFFFFE;
      }
      if (v164)
      {
        LOWORD(v614) = 0;
        LODWORD(v579) = 2;
        v578 = (void **)&v614;
        __int16 v165 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v166 = (char *)v165;
        if (v165) {
          sub_100055434(v165);
        }
      }
      else
      {
        unsigned int v166 = 0;
      }
      free(v166);
    }

    uint64_t v121 = 0xFFFFFFFFLL;
    int v150 = 2;
    if (!v0) {
      goto LABEL_480;
    }
    goto LABEL_479;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  v142 = (id)qword_1000E4060;
  if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v614 = 0;
    unsigned int v143 = sub_100055404(1);
    if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v144 = v143;
    }
    else {
      unsigned int v144 = v143 & 0xFFFFFFFE;
    }
    if (v144)
    {
      LODWORD(value[0]) = 138412290;
      *(void **)((char *)value + 4) = (void *)v0;
      LODWORD(v579) = 12;
      v578 = value;
      unsigned int v145 = (const char *)_os_log_send_and_compose_impl();
      CFTypeID v146 = (char *)v145;
      if (v145) {
        sub_100055434(v145);
      }
    }
    else
    {
      CFTypeID v146 = 0;
    }
    free(v146);
  }

  CFTypeRef v151 = sub_100019B90((const __CFString *)v0);
  if (!v151)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v147 = (id)qword_1000E4060;
    if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v158 = sub_100055404(1);
      if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v159 = v158;
      }
      else {
        unsigned int v159 = v158 & 0xFFFFFFFE;
      }
      if (v159)
      {
        LOWORD(v614) = 0;
        LODWORD(v579) = 2;
        v578 = (void **)&v614;
LABEL_431:
        CFDateRef v160 = (const char *)_os_log_send_and_compose_impl();
        CFBooleanRef v161 = (char *)v160;
        if (v160) {
          sub_100055434(v160);
        }
        goto LABEL_434;
      }
      goto LABEL_433;
    }
    goto LABEL_435;
  }
  unsigned int v152 = (void *)v151;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFUUIDRef v153 = (id)qword_1000E4060;
  if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v614 = 0;
    unsigned int v154 = sub_100055404(1);
    if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v155 = v154;
    }
    else {
      unsigned int v155 = v154 & 0xFFFFFFFE;
    }
    if (v155)
    {
      LODWORD(value[0]) = 138412290;
      *(void **)((char *)value + 4) = v152;
      LODWORD(v579) = 12;
      v578 = value;
      CFTypeID v156 = (const char *)_os_log_send_and_compose_impl();
      CFNumberRef v157 = (char *)v156;
      if (v156) {
        sub_100055434(v156);
      }
    }
    else
    {
      CFNumberRef v157 = 0;
    }
    free(v157);
  }

  uint64_t v121 = sub_1000885F0((const __CFDictionary *)v152, kUMUserSessionIDKey);
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  uint64_t v114 = (uint64_t)(id)qword_1000E4060;
  if (os_log_type_enabled((os_log_t)v114, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    unsigned int v171 = sub_100055404(1);
    if (os_log_type_enabled((os_log_t)v114, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v172 = v171;
    }
    else {
      unsigned int v172 = v171 & 0xFFFFFFFE;
    }
    if (v172)
    {
      LODWORD(v614) = 67109120;
      HIDWORD(v614) = v121;
      LODWORD(v579) = 8;
      v578 = (void **)&v614;
      v173 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v174 = (char *)v173;
      if (v173) {
        sub_100055434(v173);
      }
    }
    else
    {
      unsigned int v174 = 0;
    }
    free(v174);
    CFUUIDRef v7 = (const __CFUUID *)&byte_1000E4313;
  }

  CFRelease(v152);
  int v150 = 0;
  LODWORD(v114) = v38 | v584;
LABEL_479:
  CFRelease((CFTypeRef)v0);
LABEL_480:
  if (uuid[0]) {
    CFRelease(uuid[0]);
  }
  if (v121 == -1)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v477 = (id)qword_1000E4060;
    if (os_log_type_enabled(v477, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      uint64_t v0 = sub_100055404(1);
      BOOL v499 = os_log_type_enabled(v477, OS_LOG_TYPE_DEFAULT);
      v500 = 0;
      if (v499) {
        int v501 = v0;
      }
      else {
        int v501 = v0 & 0xFFFFFFFE;
      }
      if (v501)
      {
        *(_DWORD *)err = 67109120;
        *(_DWORD *)&err[4] = v150;
        v502 = (const char *)_os_log_send_and_compose_impl();
        v500 = 0;
        if (v502)
        {
          uint64_t v0 = (uint64_t)v502;
          sub_100055434(v502);
          v500 = (void *)v0;
        }
      }
      free(v500);
    }

    sleep(2u);
    sub_100019810("UserManagement early boot taskfailed to find last booted user with error");
    goto LABEL_1297;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  id v175 = (id)qword_1000E4060;
  if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    unsigned int v176 = sub_100055404(1);
    if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v177 = v176;
    }
    else {
      unsigned int v177 = v176 & 0xFFFFFFFE;
    }
    if (v177)
    {
      *(_DWORD *)err = 67109120;
      *(_DWORD *)&err[4] = v121;
      LODWORD(v579) = 8;
      v578 = (void **)err;
      unint64_t v178 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v179 = (char *)v178;
      if (v178) {
        sub_100055434(v178);
      }
    }
    else
    {
      unsigned int v179 = 0;
    }
    free(v179);
  }

LABEL_495:
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  uint64_t v0 = (uint64_t)(id)qword_1000E4060;
  if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
  {
    int v180 = v38;
    int v181 = v114;
    value[0] = 0;
    unsigned int v182 = sub_100055404(1);
    uint64_t v183 = (id)v0;
    if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v184 = v182;
    }
    else {
      unsigned int v184 = v182 & 0xFFFFFFFE;
    }
    if (v184)
    {
      *(_DWORD *)err = 67109120;
      *(_DWORD *)&err[4] = v121;
      LODWORD(v579) = 8;
      v578 = (void **)err;
      uint64_t v114 = _os_log_send_and_compose_impl();

      if (v114) {
        sub_100055434((const char *)v114);
      }
    }
    else
    {

      uint64_t v114 = 0;
    }
    free((void *)v114);
    LODWORD(v114) = v181;
    int v38 = v180;
  }

  if ([(id)qword_1000E4030 splitUserVolumeEnabled])
  {
    uuid[0] = 0;
    if (v114)
    {
      if (v38)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        uint64_t v0 = (uint64_t)(id)qword_1000E4060;
        if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
        {
          CFUUIDRef v7 = (const __CFUUID *)v121;
          char v185 = v114;
          value[0] = 0;
          unsigned int v186 = sub_100055404(1);
          v187 = (id)v0;
          if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v188 = v186;
          }
          else {
            unsigned int v188 = v186 & 0xFFFFFFFE;
          }
          if (v188)
          {
            *(_WORD *)err = 0;
            LODWORD(v579) = 2;
            v578 = (void **)err;
            uint64_t v114 = _os_log_send_and_compose_impl();

            if (v114) {
              sub_100055434((const char *)v114);
            }
          }
          else
          {

            uint64_t v114 = 0;
          }
          free((void *)v114);
          LOBYTE(v114) = v185;
          uint64_t v121 = (uint64_t)v7;
        }
      }
      if (!v584)
      {
LABEL_554:
        sub_100056848(qword_1000E4038, v121);
        CFDictionaryRef v198 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        if (v198)
        {
          CFDictionaryRef v199 = v198;
          CFStringRef v200 = (const __CFString *)sub_100088788(v198, kUMUserSessionUUIDKey);
          if (!v200
            || (CFStringRef v201 = v200,
                CFUUIDRef v7 = CFUUIDCreateFromString(kCFAllocatorDefault, v200),
                sub_100017454((uint64_t)NSUUID, v7),
                uint64_t v202 = objc_claimAutoreleasedReturnValue(),
                (CFUUIDRef cf = v7) == 0))
          {
LABEL_1222:
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            v473 = (id)qword_1000E4060;
            if (!os_log_type_enabled(v473, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_1271;
            }
            value[0] = 0;
            unsigned int v474 = sub_100055404(1);
            uint64_t v0 = v473;
            if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v475 = v474;
            }
            else {
              unsigned int v475 = v474 & 0xFFFFFFFE;
            }
            if (!v475)
            {

              v476 = 0;
LABEL_1270:
              free(v476);
LABEL_1271:

              sleep(2u);
              sub_100019810("UserManagement early boot task unable to find uuid or create CFUUID of Update install user");
              goto LABEL_1272;
            }
LABEL_1268:
            *(_WORD *)err = 0;
            LODWORD(v579) = 2;
            v578 = (void **)err;
            v494 = (const char *)_os_log_send_and_compose_impl();

            v476 = 0;
            if (v494)
            {
              sub_100055434(v494);
              v476 = (char *)v494;
            }
            goto LABEL_1270;
          }
          uint64_t v0 = v202;
          if (v38)
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            CFUUIDRef v7 = (const __CFUUID *)(id)qword_1000E4060;
            if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)err = 0;
              unsigned int v203 = sub_100055404(1);
              int v204 = v7;
              if (os_log_type_enabled(v204, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v205 = v203;
              }
              else {
                unsigned int v205 = v203 & 0xFFFFFFFE;
              }
              if (v205)
              {
                LODWORD(value[0]) = 138412290;
                *(void **)((char *)value + 4) = cf;
                LODWORD(v579) = 12;
                v578 = value;
                unsigned int v206 = (char *)_os_log_send_and_compose_impl();

                if (v206) {
                  sub_100055434(v206);
                }
              }
              else
              {

                unsigned int v206 = 0;
              }
              free(v206);
            }

            char v218 = AKSIdentityMigrateFirst();
            BOOL v219 = qword_1000E4068 == -1;
            if (v218)
            {
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              v220 = (id)qword_1000E4060;
              if (os_log_type_enabled(v220, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)err = 0;
                unsigned int v221 = sub_100055404(1);
                v222 = v220;
                if (os_log_type_enabled(v222, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v223 = v221;
                }
                else {
                  unsigned int v223 = v221 & 0xFFFFFFFE;
                }
                if (v223)
                {
                  LODWORD(value[0]) = 67109378;
                  HIDWORD(value[0]) = v121;
                  LOWORD(value[1]) = 2112;
                  *(void **)((char *)&value[1] + 2) = cf;
                  LODWORD(v579) = 18;
                  v578 = value;
                  v224 = (char *)_os_log_send_and_compose_impl();

                  if (v224) {
                    sub_100055434(v224);
                  }
                }
                else
                {

                  v224 = 0;
                }
                free(v224);
              }

              id v593 = 0;
              int v225 = sub_1000418A4((void *)v0, v121, &v593);
              CFUUIDRef v7 = (const __CFUUID *)v593;
              if (!v225)
              {
                if (qword_1000E4068 != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                v481 = (id)qword_1000E4060;
                if (!os_log_type_enabled(v481, OS_LOG_TYPE_DEFAULT))
                {
LABEL_1334:

                  int v521 = MGGetBoolAnswer();
                  id v522 = [(__CFUUID *)v7 code];
                  if (v521) {
                    id v522 = (id)sub_100019810("UpdateInstall-FATAL OTI LOAD ERROR:%ld", v522);
                  }
                  sub_1000380C8("UpdateInstall-FATAL OTI LOAD ERROR:%ld", v522);
                }
                *(void *)err = 0;
                int v497 = sub_100055404(1);
                uint64_t v0 = v481;
                if (!os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
                  v497 &= ~1u;
                }
                if (!v497)
                {

                  v498 = 0;
LABEL_1333:
                  free(v498);
                  goto LABEL_1334;
                }
LABEL_1331:
                id v519 = [(__CFUUID *)v7 code];
                LODWORD(value[0]) = 134217984;
                *(void **)((char *)value + 4) = v519;
                v520 = (const char *)_os_log_send_and_compose_impl();

                v498 = 0;
                if (v520)
                {
                  sub_100055434(v520);
                  v498 = (char *)v520;
                }
                goto LABEL_1333;
              }
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              unsigned int v226 = (id)qword_1000E4060;
              if (os_log_type_enabled(v226, OS_LOG_TYPE_DEFAULT))
              {
                value[0] = 0;
                unsigned int v227 = sub_100055404(1);
                unsigned int v228 = v226;
                if (os_log_type_enabled(v228, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v229 = v227;
                }
                else {
                  unsigned int v229 = v227 & 0xFFFFFFFE;
                }
                if (v229)
                {
                  *(_WORD *)err = 0;
                  LODWORD(v579) = 2;
                  v578 = (void **)err;
                  v230 = (char *)_os_log_send_and_compose_impl();

                  if (v230) {
                    sub_100055434(v230);
                  }
                }
                else
                {

                  v230 = 0;
                }
                free(v230);
              }

              sub_100038334("IONVRAM-DELETE-PROPERTY", "usermanagerd");
              CFDataRef v189 = &qword_1000E4000;
              CFUUIDRef v7 = (const __CFUUID *)&byte_1000E4313;
              if (dword_1000E42C0 != 1) {
                goto LABEL_842;
              }
              long long v612 = 0u;
              long long v613 = 0u;
              long long v610 = 0u;
              long long v611 = 0u;
              long long v608 = 0u;
              long long v609 = 0u;
              long long v606 = 0u;
              long long v607 = 0u;
              long long v604 = 0u;
              long long v605 = 0u;
              long long v602 = 0u;
              long long v603 = 0u;
              long long v600 = 0u;
              long long v601 = 0u;
              memset(value, 0, sizeof(value));
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              unsigned int v231 = (id)qword_1000E4060;
              if (os_log_type_enabled(v231, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)err = 0;
                unsigned int v232 = sub_100055404(1);
                unsigned int v233 = v231;
                if (os_log_type_enabled(v233, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v234 = v232;
                }
                else {
                  unsigned int v234 = v232 & 0xFFFFFFFE;
                }
                if (v234)
                {
                  LOWORD(v614) = 0;
                  LODWORD(v579) = 2;
                  v578 = (void **)&v614;
                  v235 = (char *)_os_log_send_and_compose_impl();

                  if (v235) {
                    sub_100055434(v235);
                  }
                }
                else
                {

                  v235 = 0;
                }
                CFDataRef v189 = &qword_1000E4000;
                free(v235);
              }

              if (!sub_10007B434((char *)value, 256))
              {
                if (qword_1000E4068 != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                v274 = (id)qword_1000E4060;
                if (!os_log_type_enabled(v274, OS_LOG_TYPE_DEFAULT))
                {
LABEL_841:

                  CFUUIDRef v7 = (const __CFUUID *)&byte_1000E4313;
                  if (*((_DWORD *)v189 + 176) == 1)
                  {
LABEL_887:
                    CFRelease(cf);
                    CFRelease(v199);
                    if (uuid[0])
                    {
                      CFRelease(uuid[0]);
                      id v268 = 0;
                      uuid[0] = 0;
                    }
                    else
                    {
                      id v268 = 0;
                    }
                    unsigned int v6 = &qword_1000E4000;
                    goto LABEL_1140;
                  }
LABEL_842:
                  if (!CFDictionaryContainsValue(v199, kUMUserSessionKeybagOpaqueDataKey))
                  {
                    value[0] = 0;
                    if (qword_1000E4068 != -1) {
                      dispatch_once(&qword_1000E4068, &stru_1000D5598);
                    }
                    v331 = (id)qword_1000E4060;
                    if (os_log_type_enabled(v331, OS_LOG_TYPE_DEFAULT))
                    {
                      *(void *)err = 0;
                      unsigned int v332 = sub_100055404(1);
                      v333 = v331;
                      if (os_log_type_enabled(v333, OS_LOG_TYPE_DEFAULT)) {
                        unsigned int v334 = v332;
                      }
                      else {
                        unsigned int v334 = v332 & 0xFFFFFFFE;
                      }
                      if (v334)
                      {
                        LOWORD(v614) = 0;
                        LODWORD(v579) = 2;
                        v578 = (void **)&v614;
                        uint64_t v335 = (char *)_os_log_send_and_compose_impl();

                        if (v335) {
                          sub_100055434(v335);
                        }
                      }
                      else
                      {

                        uint64_t v335 = 0;
                      }
                      free(v335);
                    }

                    int v336 = MKBKeyBagCopySystemOpaqueBlob();
                    if (v336)
                    {
                      int v337 = v336;
                      if (qword_1000E4068 != -1) {
                        dispatch_once(&qword_1000E4068, &stru_1000D5598);
                      }
                      v338 = (id)qword_1000E4060;
                      if (os_log_type_enabled(v338, OS_LOG_TYPE_DEFAULT))
                      {
                        *(void *)err = 0;
                        unsigned int v339 = sub_100055404(1);
                        statfs v340 = v338;
                        if (os_log_type_enabled(v340, OS_LOG_TYPE_DEFAULT)) {
                          unsigned int v341 = v339;
                        }
                        else {
                          unsigned int v341 = v339 & 0xFFFFFFFE;
                        }
                        if (v341)
                        {
                          LODWORD(v614) = 67109120;
                          HIDWORD(v614) = v337;
                          LODWORD(v579) = 8;
                          v578 = (void **)&v614;
                          v342 = (char *)_os_log_send_and_compose_impl();

                          if (v342) {
                            sub_100055434(v342);
                          }
                        }
                        else
                        {

                          v342 = 0;
                        }
                        free(v342);
                      }

                      CFDataRef v189 = &qword_1000E4000;
                    }
                    else if (value[0])
                    {
                      CFDictionarySetValue(v199, kUMUserSessionKeybagOpaqueDataKey, value[0]);
                      CFDataRef v189 = &qword_1000E4000;
                      if (qword_1000E4068 != -1) {
                        dispatch_once(&qword_1000E4068, &stru_1000D5598);
                      }
                      v343 = (id)qword_1000E4060;
                      if (os_log_type_enabled(v343, OS_LOG_TYPE_DEFAULT))
                      {
                        *(void *)err = 0;
                        unsigned int v344 = sub_100055404(1);
                        v345 = v343;
                        if (os_log_type_enabled(v345, OS_LOG_TYPE_DEFAULT)) {
                          unsigned int v346 = v344;
                        }
                        else {
                          unsigned int v346 = v344 & 0xFFFFFFFE;
                        }
                        if (v346)
                        {
                          LODWORD(v614) = 67109120;
                          HIDWORD(v614) = v121;
                          LODWORD(v579) = 8;
                          v578 = (void **)&v614;
                          v347 = (char *)_os_log_send_and_compose_impl();

                          if (v347) {
                            sub_100055434(v347);
                          }
                        }
                        else
                        {

                          v347 = 0;
                        }
                        CFDataRef v189 = &qword_1000E4000;
                        free(v347);
                      }

                      sub_10001A7BC();
                      if (value[0]) {
                        CFRelease(value[0]);
                      }
                    }
                    else
                    {
                      CFDataRef v189 = &qword_1000E4000;
                      if (qword_1000E4068 != -1) {
                        dispatch_once(&qword_1000E4068, &stru_1000D5598);
                      }
                      v348 = (id)qword_1000E4060;
                      if (os_log_type_enabled(v348, OS_LOG_TYPE_DEFAULT))
                      {
                        *(void *)err = 0;
                        unsigned int v349 = sub_100055404(1);
                        v350 = v348;
                        if (os_log_type_enabled(v350, OS_LOG_TYPE_DEFAULT)) {
                          unsigned int v351 = v349;
                        }
                        else {
                          unsigned int v351 = v349 & 0xFFFFFFFE;
                        }
                        if (v351)
                        {
                          LOWORD(v614) = 0;
                          LODWORD(v579) = 2;
                          v578 = (void **)&v614;
                          v352 = (char *)_os_log_send_and_compose_impl();

                          if (v352) {
                            sub_100055434(v352);
                          }
                        }
                        else
                        {

                          v352 = 0;
                        }
                        CFDataRef v189 = &qword_1000E4000;
                        free(v352);
                      }
                    }
                    CFUUIDRef v7 = (const __CFUUID *)&byte_1000E4313;
                  }
                  goto LABEL_887;
                }
                *(void *)err = 0;
                unsigned int v275 = sub_100055404(1);
                v274 = v274;
                if (os_log_type_enabled(v274, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v276 = v275;
                }
                else {
                  unsigned int v276 = v275 & 0xFFFFFFFE;
                }
                if (v276)
                {
                  LOWORD(v614) = 0;
                  LODWORD(v579) = 2;
                  v578 = (void **)&v614;
                  unsigned int v277 = (char *)_os_log_send_and_compose_impl();

                  if (v277) {
                    sub_100055434(v277);
                  }
                }
                else
                {

                  unsigned int v277 = 0;
                }
                free(v277);
LABEL_840:
                CFDataRef v189 = &qword_1000E4000;
                goto LABEL_841;
              }
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              v269 = (id)qword_1000E4060;
              if (os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v614 = 0;
                unsigned int v270 = sub_100055404(1);
                unsigned int v271 = v269;
                if (os_log_type_enabled(v271, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v272 = v270;
                }
                else {
                  unsigned int v272 = v270 & 0xFFFFFFFE;
                }
                if (v272)
                {
                  *(_DWORD *)err = 136315138;
                  *(void *)&err[4] = value;
                  LODWORD(v579) = 12;
                  v578 = (void **)err;
                  unsigned int v273 = (char *)_os_log_send_and_compose_impl();

                  if (v273) {
                    sub_100055434(v273);
                  }
                }
                else
                {

                  unsigned int v273 = 0;
                }
                free(v273);
              }

              v274 = +[NSString stringWithUTF8String:value];
              if (!v274)
              {
                if (qword_1000E4068 != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                unsigned int v283 = (id)qword_1000E4060;
                if (os_log_type_enabled(v283, OS_LOG_TYPE_DEFAULT))
                {
                  *(void *)err = 0;
                  unsigned int v284 = sub_100055404(1);
                  unsigned int v283 = v283;
                  if (os_log_type_enabled(v283, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v285 = v284;
                  }
                  else {
                    unsigned int v285 = v284 & 0xFFFFFFFE;
                  }
                  if (v285)
                  {
                    LOWORD(v614) = 0;
                    LODWORD(v579) = 2;
                    v578 = (void **)&v614;
                    v286 = (char *)_os_log_send_and_compose_impl();

                    if (v286) {
                      sub_100055434(v286);
                    }
                  }
                  else
                  {

                    v286 = 0;
                  }
                  free(v286);
                }
                goto LABEL_839;
              }
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              v278 = (id)qword_1000E4060;
              if (os_log_type_enabled(v278, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v614 = 0;
                unsigned int v279 = sub_100055404(1);
                v280 = v278;
                if (os_log_type_enabled(v280, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v281 = v279;
                }
                else {
                  unsigned int v281 = v279 & 0xFFFFFFFE;
                }
                if (v281)
                {
                  *(_DWORD *)err = 138412546;
                  *(void *)&err[4] = v274;
                  __int16 v597 = 1024;
                  int v598 = v121;
                  LODWORD(v579) = 18;
                  v578 = (void **)err;
                  unsigned int v282 = (char *)_os_log_send_and_compose_impl();

                  if (v282) {
                    sub_100055434(v282);
                  }
                }
                else
                {

                  unsigned int v282 = 0;
                }
                free(v282);
              }

              CFDictionaryRef v287 = sub_100019308(qword_1000E4318);
              id v592 = 0;
              unsigned int v288 = [v287 mapVolume:v274 toSession:v121 withPersona:0 error:&v592];
              unsigned int v283 = v592;

              if (v288)
              {
                if (qword_1000E4068 != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                v289 = (id)qword_1000E4060;
                if (!os_log_type_enabled(v289, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_746;
                }
                *(void *)err = 0;
                unsigned int v290 = sub_100055404(1);
                v291 = v289;
                if (os_log_type_enabled(v291, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v292 = v290;
                }
                else {
                  unsigned int v292 = v290 & 0xFFFFFFFE;
                }
                if (v292)
                {
                  LOWORD(v614) = 0;
                  LODWORD(v579) = 2;
                  v578 = (void **)&v614;
                  goto LABEL_742;
                }
              }
              else
              {
                if (qword_1000E4068 != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                v289 = (id)qword_1000E4060;
                if (!os_log_type_enabled(v289, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_746;
                }
                uint64_t v614 = 0;
                int v293 = sub_100055404(1);
                v291 = v289;
                if (!os_log_type_enabled(v291, OS_LOG_TYPE_DEFAULT)) {
                  v293 &= ~1u;
                }
                if (v293)
                {
                  id v294 = [v283 code];
                  *(_DWORD *)err = 134217984;
                  *(void *)&err[4] = v294;
                  LODWORD(v579) = 12;
                  v578 = (void **)err;
LABEL_742:
                  int v295 = (char *)_os_log_send_and_compose_impl();

                  if (v295) {
                    sub_100055434(v295);
                  }
                  goto LABEL_745;
                }
              }

              int v295 = 0;
LABEL_745:
              free(v295);
LABEL_746:

LABEL_839:
              goto LABEL_840;
            }
LABEL_1272:
            if (!v219) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            v481 = (id)qword_1000E4060;
            if (!os_log_type_enabled(v481, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_1330;
            }
            value[0] = 0;
            int v495 = sub_100055404(1);
            uint64_t v0 = v481;
            if (!os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
              v495 &= ~1u;
            }
            if (!v495)
            {

              v496 = 0;
LABEL_1329:
              free(v496);
LABEL_1330:

              sleep(2u);
              sub_100019810("UserManagement early boot task failed to migrate Primary User AKSIdentity during update install");
              goto LABEL_1331;
            }
LABEL_1327:
            int v517 = CFErrorGetCode(uuid[0]);
            *(_DWORD *)err = 67109120;
            *(_DWORD *)&err[4] = v517;
            LODWORD(v579) = 8;
            v578 = (void **)err;
            v518 = (const char *)_os_log_send_and_compose_impl();

            v496 = 0;
            if (v518)
            {
              sub_100055434(v518);
              v496 = (char *)v518;
            }
            goto LABEL_1329;
          }
          if (v584)
          {
            LODWORD(v614) = 0;
            unsigned int v6 = &qword_1000E4000;
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            v207 = (id)qword_1000E4060;
            if (os_log_type_enabled(v207, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)err = 0;
              unsigned int v208 = sub_100055404(1);
              v209 = v207;
              if (os_log_type_enabled(v209, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v210 = v208;
              }
              else {
                unsigned int v210 = v208 & 0xFFFFFFFE;
              }
              if (v210)
              {
                LODWORD(value[0]) = 67109378;
                HIDWORD(value[0]) = v121;
                LOWORD(value[1]) = 2112;
                *(void **)((char *)&value[1] + 2) = cf;
                LODWORD(v579) = 18;
                v578 = value;
                v211 = (char *)_os_log_send_and_compose_impl();

                if (v211) {
                  sub_100055434(v211);
                }
              }
              else
              {

                v211 = 0;
              }
              free(v211);
            }

            id v591 = 0;
            int v236 = sub_1000418A4((void *)v0, v121, &v591);
            CFUUIDRef v7 = (const __CFUUID *)v591;
            BOOL v237 = qword_1000E4068 == -1;
            if (v236)
            {
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              unsigned int v238 = (id)qword_1000E4060;
              if (os_log_type_enabled(v238, OS_LOG_TYPE_DEFAULT))
              {
                value[0] = 0;
                unsigned int v239 = sub_100055404(1);
                CFNumberRef v240 = v238;
                if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v241 = v239;
                }
                else {
                  unsigned int v241 = v239 & 0xFFFFFFFE;
                }
                if (v241)
                {
                  *(_WORD *)err = 0;
                  LODWORD(v579) = 2;
                  v578 = (void **)err;
                  v242 = (char *)_os_log_send_and_compose_impl();

                  if (v242) {
                    sub_100055434(v242);
                  }
                }
                else
                {

                  v242 = 0;
                }
                free(v242);
                unsigned int v6 = &qword_1000E4000;
              }

              sub_100038334("IONVRAM-DELETE-PROPERTY", "usermanagerd");
              CFRelease(v199);
              CFRelease(cf);

              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              CFDataRef v189 = &qword_1000E4000;
              v250 = (id)qword_1000E4060;
              if (os_log_type_enabled(v250, OS_LOG_TYPE_DEFAULT))
              {
                int v251 = v121;
                char v252 = v114;
                value[0] = 0;
                unsigned int v253 = sub_100055404(1);
                unsigned int v254 = v250;
                if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v255 = v253;
                }
                else {
                  unsigned int v255 = v253 & 0xFFFFFFFE;
                }
                if (v255)
                {
                  *(_WORD *)err = 0;
                  LODWORD(v579) = 2;
                  v578 = (void **)err;
                  unsigned int v256 = (char *)_os_log_send_and_compose_impl();

                  if (v256) {
                    sub_100055434(v256);
                  }
                }
                else
                {

                  unsigned int v256 = 0;
                }
                LOBYTE(v114) = v252;
                free(v256);
                LODWORD(v121) = v251;
              }

              CFUUIDRef v7 = (const __CFUUID *)&byte_1000E4313;
              if (sub_1000810F8(1, &v614))
              {
                id v268 = 0;
LABEL_1140:
                if (*((_DWORD *)v189 + 176) != 1)
                {
                  int v447 = (v114 & 1) != 0 || byte_1000E4313 != 0;
                  sub_1000386CC(v121, v447);
                }

                goto LABEL_1146;
              }
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              v512 = (id)qword_1000E4060;
              if (os_log_type_enabled(v512, OS_LOG_TYPE_DEFAULT))
              {
                value[0] = 0;
                unsigned int v513 = sub_100055404(1);
                uint64_t v0 = v512;
                if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v514 = v513;
                }
                else {
                  unsigned int v514 = v513 & 0xFFFFFFFE;
                }
                if (v514)
                {
                  *(_DWORD *)err = 67109120;
                  *(_DWORD *)&err[4] = v614;
                  LODWORD(v579) = 8;
                  v555 = (const char *)_os_log_send_and_compose_impl();

                  v515 = 0;
                  if (v555)
                  {
                    sub_100055434(v555);
                    v515 = (char *)v555;
                  }
                }
                else
                {

                  v515 = 0;
                }
                free(v515);
              }

              sleep(2u);
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              v556 = (id)qword_1000E4060;
              if (os_log_type_enabled(v556, OS_LOG_TYPE_DEFAULT))
              {
                value[0] = 0;
                unsigned int v557 = sub_100055404(1);
                uint64_t v0 = v556;
                if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v558 = v557;
                }
                else {
                  unsigned int v558 = v557 & 0xFFFFFFFE;
                }
                if (v558)
                {
                  *(_WORD *)err = 0;
                  LODWORD(v579) = 2;
                  v560 = (const char *)_os_log_send_and_compose_impl();

                  v559 = 0;
                  if (v560)
                  {
                    sub_100055434(v560);
                    v559 = (char *)v560;
                  }
                }
                else
                {

                  v559 = 0;
                }
                free(v559);
              }

              sub_100019810("UserManagement early boot task APFSVolumeMigrateMediaKey Failed with Error:%d", v614);
LABEL_1427:
              if (!v361) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              v523 = (id)qword_1000E4060;
              if (!os_log_type_enabled(v523, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_1470;
              }
              value[0] = 0;
              unsigned int v561 = sub_100055404(1);
              uint64_t v0 = v523;
              if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v562 = v561;
              }
              else {
                unsigned int v562 = v561 & 0xFFFFFFFE;
              }
              if (!v562)
              {

                v563 = 0;
LABEL_1469:
                free(v563);
LABEL_1470:

                sleep(2u);
                sub_100019810("Failed to unmount 501 User Volume error:%d", v614);
                goto LABEL_1471;
              }
LABEL_1467:
              *(_DWORD *)err = 67109120;
              *(_DWORD *)&err[4] = v614;
              LODWORD(v579) = 8;
              v575 = (const char *)_os_log_send_and_compose_impl();

              v563 = 0;
              if (v575)
              {
                sub_100055434(v575);
                v563 = (char *)v575;
              }
              goto LABEL_1469;
            }
LABEL_1301:
            if (!v237) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            v504 = (id)qword_1000E4060;
            if (os_log_type_enabled(v504, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)err = 0;
              int v505 = sub_100055404(1);
              v506 = v504;
              if (!os_log_type_enabled(v506, OS_LOG_TYPE_DEFAULT)) {
                v505 &= ~1u;
              }
              if (v505)
              {
                id v547 = [(__CFUUID *)v7 code];
                LODWORD(value[0]) = 134217984;
                *(void **)((char *)value + 4) = v547;
                v548 = (const char *)_os_log_send_and_compose_impl();

                v507 = 0;
                if (v548)
                {
                  sub_100055434(v548);
                  v507 = (char *)v548;
                }
              }
              else
              {

                v507 = 0;
              }
              free(v507);
            }

            int v549 = MGGetBoolAnswer();
            id v550 = [(__CFUUID *)v7 code];
            if (v549) {
              id v550 = (id)sub_100019810("EraseInstall-FATAL OTI LOAD ERROR:%ld", v550);
            }
            sub_1000380C8("EraseInstall-FATAL OTI LOAD ERROR:%ld", v550);
          }
          char v212 = v114;
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v213 = (id)qword_1000E4060;
          CFStringRef v581 = v201;
          if (os_log_type_enabled(v213, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)err = 0;
            unsigned int v214 = sub_100055404(1);
            unsigned int v215 = v213;
            if (os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v216 = v214;
            }
            else {
              unsigned int v216 = v214 & 0xFFFFFFFE;
            }
            if (v216)
            {
              LODWORD(value[0]) = 67109378;
              HIDWORD(value[0]) = v121;
              LOWORD(value[1]) = 2112;
              *(void **)((char *)&value[1] + 2) = cf;
              LODWORD(v579) = 18;
              v578 = value;
              CFStringRef v217 = (char *)_os_log_send_and_compose_impl();

              if (v217) {
                sub_100055434(v217);
              }
            }
            else
            {

              CFStringRef v217 = 0;
            }
            free(v217);
            char v212 = v114;
          }

          id v590 = 0;
          int v243 = sub_1000418A4((void *)v0, v121, &v590);
          id v244 = v590;
          if (!v243)
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            v508 = (id)qword_1000E4060;
            if (os_log_type_enabled(v508, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)err = 0;
              int v509 = sub_100055404(1);
              v510 = v508;
              if (!os_log_type_enabled(v510, OS_LOG_TYPE_DEFAULT)) {
                v509 &= ~1u;
              }
              if (v509)
              {
                id v551 = [v244 code];
                LODWORD(value[0]) = 134217984;
                *(void **)((char *)value + 4) = v551;
                v552 = (const char *)_os_log_send_and_compose_impl();

                v511 = 0;
                if (v552)
                {
                  sub_100055434(v552);
                  v511 = (char *)v552;
                }
              }
              else
              {

                v511 = 0;
              }
              free(v511);
            }

            int v553 = MGGetBoolAnswer();
            id v554 = [v244 code];
            if (v553) {
              id v554 = (id)sub_100019810("RegularBoot-FATAL OTI LOAD ERROR:%ld", v554);
            }
            sub_1000380C8("RegularBoot-FATAL OTI LOAD ERROR:%ld", v554);
          }
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          LOBYTE(v114) = v212;
          int v245 = (id)qword_1000E4060;
          if (os_log_type_enabled(v245, OS_LOG_TYPE_DEFAULT))
          {
            value[0] = 0;
            unsigned int v246 = sub_100055404(1);
            CFDictionaryRef v247 = v245;
            if (os_log_type_enabled(v247, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v248 = v246;
            }
            else {
              unsigned int v248 = v246 & 0xFFFFFFFE;
            }
            if (v248)
            {
              *(_WORD *)err = 0;
              LODWORD(v579) = 2;
              v578 = (void **)err;
              unsigned int v249 = (char *)_os_log_send_and_compose_impl();

              if (v249) {
                sub_100055434(v249);
              }
            }
            else
            {

              unsigned int v249 = 0;
            }
            free(v249);
          }

          sub_100038334("IONVRAM-DELETE-PROPERTY", "usermanagerd");
          CFDataRef v189 = &qword_1000E4000;
          if (dword_1000E42C0 == 1)
          {
            CFUUIDRef v7 = (const __CFUUID *)&byte_1000E4313;
            if (sub_100088734(v199, kUMUserSessionNeedsCryptoSetupKey))
            {
              uint64_t v257 = sub_100056848(qword_1000E4038, 501);
              if (v257)
              {
                CFDictionaryRef v258 = (const __CFDictionary *)v257;
                UInt8 bytes = 0;
                LODWORD(v614) = 0;
                CFDataRef v259 = CFDataCreate(kCFAllocatorDefault, &bytes, 1);
                CFStringRef v260 = (const __CFString *)sub_100088788(v258, kUMUserSessionUUIDKey);
                if (v260)
                {
                  CFUUIDRef v261 = CFUUIDCreateFromString(kCFAllocatorDefault, v260);
                  if (v261)
                  {
                    CFUUIDRef v7 = v261;
                    unsigned int v262 = sub_100017454((uint64_t)NSUUID, v261);
                    CFRelease(v7);
                    if (v262)
                    {
                      CFDictionaryRef v582 = v258;
                      if (qword_1000E4068 != -1) {
                        dispatch_once(&qword_1000E4068, &stru_1000D5598);
                      }
                      v263 = (id)qword_1000E4060;
                      if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
                      {
                        value[0] = 0;
                        unsigned int v264 = sub_100055404(1);
                        v265 = v263;
                        if (os_log_type_enabled(v265, OS_LOG_TYPE_DEFAULT)) {
                          unsigned int v266 = v264;
                        }
                        else {
                          unsigned int v266 = v264 & 0xFFFFFFFE;
                        }
                        if (v266)
                        {
                          *(_WORD *)err = 0;
                          LODWORD(v579) = 2;
                          v578 = (void **)err;
                          int v267 = (char *)_os_log_send_and_compose_impl();

                          if (v267) {
                            sub_100055434(v267);
                          }
                        }
                        else
                        {

                          int v267 = 0;
                        }
                        free(v267);
                      }

                      id v588 = 0;
                      CFUUIDRef v7 = (const __CFUUID *)sub_1000418A4(v262, 501, &v588);
                      id v296 = v588;
                      if (v7)
                      {
                        v297 = v296;
                        if (qword_1000E4068 != -1) {
                          dispatch_once(&qword_1000E4068, &stru_1000D5598);
                        }
                        v298 = (id)qword_1000E4060;
                        if (os_log_type_enabled(v298, OS_LOG_TYPE_DEFAULT))
                        {
                          value[0] = 0;
                          unsigned int v299 = sub_100055404(1);
                          CFUUIDRef v7 = v298;
                          if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT)) {
                            unsigned int v300 = v299;
                          }
                          else {
                            unsigned int v300 = v299 & 0xFFFFFFFE;
                          }
                          if (v300)
                          {
                            *(_WORD *)err = 0;
                            LODWORD(v579) = 2;
                            v578 = (void **)err;
                            unsigned int v301 = (char *)_os_log_send_and_compose_impl();

                            if (v301) {
                              sub_100055434(v301);
                            }
                          }
                          else
                          {

                            unsigned int v301 = 0;
                          }
                          free(v301);
                        }

                        if (qword_1000E4068 != -1) {
                          dispatch_once(&qword_1000E4068, &stru_1000D5598);
                        }
                        CFDictionaryRef v302 = v582;
                        v303 = (id)qword_1000E4060;
                        if (os_log_type_enabled(v303, OS_LOG_TYPE_DEFAULT))
                        {
                          value[0] = 0;
                          unsigned int v304 = sub_100055404(1);
                          unsigned int v305 = v303;
                          if (os_log_type_enabled(v305, OS_LOG_TYPE_DEFAULT)) {
                            unsigned int v306 = v304;
                          }
                          else {
                            unsigned int v306 = v304 & 0xFFFFFFFE;
                          }
                          if (v306)
                          {
                            *(_DWORD *)err = 67109120;
                            *(_DWORD *)&err[4] = v121;
                            LODWORD(v579) = 8;
                            v578 = (void **)err;
                            CFUUIDRef v7 = (const __CFUUID *)_os_log_send_and_compose_impl();

                            if (v7) {
                              sub_100055434((const char *)v7);
                            }
                          }
                          else
                          {

                            CFUUIDRef v7 = 0;
                          }
                          CFDictionaryRef v302 = v582;
                          free(v7);
                        }

                        if (AKSIdentityTransferPrimary())
                        {
                          if (qword_1000E4068 != -1) {
                            dispatch_once(&qword_1000E4068, &stru_1000D5598);
                          }
                          unsigned int v307 = (id)qword_1000E4060;
                          if (os_log_type_enabled(v307, OS_LOG_TYPE_DEFAULT))
                          {
                            value[0] = 0;
                            unsigned int v308 = sub_100055404(1);
                            CFUUIDRef v7 = v307;
                            if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT)) {
                              unsigned int v309 = v308;
                            }
                            else {
                              unsigned int v309 = v308 & 0xFFFFFFFE;
                            }
                            if (v309)
                            {
                              *(_WORD *)err = 0;
                              LODWORD(v579) = 2;
                              v578 = (void **)err;
                              unsigned int v310 = (char *)_os_log_send_and_compose_impl();

                              if (v310) {
                                sub_100055434(v310);
                              }
                            }
                            else
                            {

                              unsigned int v310 = 0;
                            }
                            free(v310);
                          }

                          if (qword_1000E4068 != -1) {
                            dispatch_once(&qword_1000E4068, &stru_1000D5598);
                          }
                          v311 = (id)qword_1000E4060;
                          if (os_log_type_enabled(v311, OS_LOG_TYPE_DEFAULT))
                          {
                            value[0] = 0;
                            unsigned int v312 = sub_100055404(1);
                            CFUUIDRef v7 = v311;
                            if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT)) {
                              unsigned int v313 = v312;
                            }
                            else {
                              unsigned int v313 = v312 & 0xFFFFFFFE;
                            }
                            if (v313)
                            {
                              *(_WORD *)err = 0;
                              LODWORD(v579) = 2;
                              v578 = (void **)err;
                              v314 = (char *)_os_log_send_and_compose_impl();

                              if (v314) {
                                sub_100055434(v314);
                              }
                            }
                            else
                            {

                              v314 = 0;
                            }
                            free(v314);
                          }

                          v315 = (void *)sub_100088788(v302, kUMUserSessionVolumeDeviceNodeKey);
                          if (!v315)
                          {
                            if (qword_1000E4068 != -1) {
                              dispatch_once(&qword_1000E4068, &stru_1000D5598);
                            }
                            CFDictionaryRef v322 = (id)qword_1000E4060;
                            if (os_log_type_enabled(v322, OS_LOG_TYPE_DEFAULT))
                            {
                              value[0] = 0;
                              unsigned int v323 = sub_100055404(1);
                              CFDictionaryRef v322 = v322;
                              if (os_log_type_enabled(v322, OS_LOG_TYPE_DEFAULT)) {
                                unsigned int v324 = v323;
                              }
                              else {
                                unsigned int v324 = v323 & 0xFFFFFFFE;
                              }
                              if (v324)
                              {
                                *(_WORD *)err = 0;
                                LODWORD(v579) = 2;
                                v578 = (void **)err;
                                CFUUIDRef v7 = (const __CFUUID *)_os_log_send_and_compose_impl();

                                if (v7) {
                                  sub_100055434((const char *)v7);
                                }
                              }
                              else
                              {

                                CFUUIDRef v7 = 0;
                              }
                              free(v7);
                            }
LABEL_897:

                            if ([(id)qword_1000E4030 isVolumeMountedWithSession:v302 fsid:0])
                            {
                              if (qword_1000E4068 != -1) {
                                dispatch_once(&qword_1000E4068, &stru_1000D5598);
                              }
                              v353 = (id)qword_1000E4060;
                              if (os_log_type_enabled(v353, OS_LOG_TYPE_DEFAULT))
                              {
                                value[0] = 0;
                                unsigned int v354 = sub_100055404(1);
                                CFUUIDRef v7 = v353;
                                if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT)) {
                                  unsigned int v355 = v354;
                                }
                                else {
                                  unsigned int v355 = v354 & 0xFFFFFFFE;
                                }
                                if (v355)
                                {
                                  *(_WORD *)err = 0;
                                  LODWORD(v579) = 2;
                                  v578 = (void **)err;
                                  v356 = (char *)_os_log_send_and_compose_impl();

                                  if (v356) {
                                    sub_100055434(v356);
                                  }
                                }
                                else
                                {

                                  v356 = 0;
                                }
                                free(v356);
                              }

                              unsigned int v360 = [(id)qword_1000E4030 unmountVolumeWithSession:v302 mountPath:@"/private/var/mobile" error:&v614];
                              BOOL v361 = qword_1000E4068 == -1;
                              if (!v360) {
                                goto LABEL_1427;
                              }
                              if (qword_1000E4068 != -1) {
                                dispatch_once(&qword_1000E4068, &stru_1000D5598);
                              }
                              v357 = (id)qword_1000E4060;
                              if (os_log_type_enabled(v357, OS_LOG_TYPE_DEFAULT))
                              {
                                value[0] = 0;
                                unsigned int v362 = sub_100055404(1);
                                v357 = v357;
                                if (os_log_type_enabled(v357, OS_LOG_TYPE_DEFAULT)) {
                                  unsigned int v363 = v362;
                                }
                                else {
                                  unsigned int v363 = v362 & 0xFFFFFFFE;
                                }
                                if (v363)
                                {
                                  *(_WORD *)err = 0;
                                  LODWORD(v579) = 2;
                                  v578 = (void **)err;
LABEL_926:
                                  CFUUIDRef v7 = (const __CFUUID *)_os_log_send_and_compose_impl();

                                  if (v7) {
                                    sub_100055434((const char *)v7);
                                  }
                                  goto LABEL_929;
                                }
                                goto LABEL_928;
                              }
                            }
                            else
                            {
                              if (qword_1000E4068 != -1) {
                                dispatch_once(&qword_1000E4068, &stru_1000D5598);
                              }
                              v357 = (id)qword_1000E4060;
                              if (os_log_type_enabled(v357, OS_LOG_TYPE_DEFAULT))
                              {
                                value[0] = 0;
                                unsigned int v358 = sub_100055404(1);
                                v357 = v357;
                                if (os_log_type_enabled(v357, OS_LOG_TYPE_DEFAULT)) {
                                  unsigned int v359 = v358;
                                }
                                else {
                                  unsigned int v359 = v358 & 0xFFFFFFFE;
                                }
                                if (v359)
                                {
                                  *(_WORD *)err = 0;
                                  LODWORD(v579) = 2;
                                  v578 = (void **)err;
                                  goto LABEL_926;
                                }
LABEL_928:

                                CFUUIDRef v7 = 0;
LABEL_929:
                                free(v7);
                              }
                            }

                            if (qword_1000E4068 != -1) {
                              dispatch_once(&qword_1000E4068, &stru_1000D5598);
                            }
                            v364 = (id)qword_1000E4060;
                            if (os_log_type_enabled(v364, OS_LOG_TYPE_DEFAULT))
                            {
                              value[0] = 0;
                              unsigned int v365 = sub_100055404(1);
                              CFUUIDRef v7 = v364;
                              if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT)) {
                                unsigned int v366 = v365;
                              }
                              else {
                                unsigned int v366 = v365 & 0xFFFFFFFE;
                              }
                              if (v366)
                              {
                                *(_WORD *)err = 0;
                                LODWORD(v579) = 2;
                                v578 = (void **)err;
                                v367 = (char *)_os_log_send_and_compose_impl();

                                if (v367) {
                                  sub_100055434(v367);
                                }
                              }
                              else
                              {

                                v367 = 0;
                              }
                              free(v367);
                            }

                            if ([(id)qword_1000E4030 deleteVolumeWithSession:v302 error:&v614])
                            {
                              if (qword_1000E4068 != -1) {
                                dispatch_once(&qword_1000E4068, &stru_1000D5598);
                              }
                              v368 = (id)qword_1000E4060;
                              if (os_log_type_enabled(v368, OS_LOG_TYPE_DEFAULT))
                              {
                                value[0] = 0;
                                unsigned int v369 = sub_100055404(1);
                                v370 = v368;
                                if (os_log_type_enabled(v370, OS_LOG_TYPE_DEFAULT)) {
                                  unsigned int v371 = v369;
                                }
                                else {
                                  unsigned int v371 = v369 & 0xFFFFFFFE;
                                }
                                if (v371)
                                {
                                  *(_WORD *)err = 0;
                                  LODWORD(v579) = 2;
                                  v578 = (void **)err;
                                  v372 = (char *)_os_log_send_and_compose_impl();

                                  if (v372) {
                                    sub_100055434(v372);
                                  }
                                }
                                else
                                {

                                  v372 = 0;
                                }
                                free(v372);
                              }

                              if (qword_1000E4068 != -1) {
                                dispatch_once(&qword_1000E4068, &stru_1000D5598);
                              }
                              v373 = (id)qword_1000E4060;
                              if (os_log_type_enabled(v373, OS_LOG_TYPE_DEFAULT))
                              {
                                value[0] = 0;
                                unsigned int v374 = sub_100055404(1);
                                v375 = v373;
                                if (os_log_type_enabled(v375, OS_LOG_TYPE_DEFAULT)) {
                                  unsigned int v376 = v374;
                                }
                                else {
                                  unsigned int v376 = v374 & 0xFFFFFFFE;
                                }
                                if (v376)
                                {
                                  *(_WORD *)err = 0;
                                  LODWORD(v579) = 2;
                                  v578 = (void **)err;
                                  v377 = (char *)_os_log_send_and_compose_impl();

                                  if (v377) {
                                    sub_100055434(v377);
                                  }
                                }
                                else
                                {

                                  v377 = 0;
                                }
                                free(v377);
                              }

                              if (qword_1000E4068 != -1) {
                                dispatch_once(&qword_1000E4068, &stru_1000D5598);
                              }
                              v378 = (id)qword_1000E4060;
                              if (os_log_type_enabled(v378, OS_LOG_TYPE_DEFAULT))
                              {
                                *(void *)err = 0;
                                unsigned int v379 = sub_100055404(1);
                                v380 = v378;
                                if (os_log_type_enabled(v380, OS_LOG_TYPE_DEFAULT)) {
                                  unsigned int v381 = v379;
                                }
                                else {
                                  unsigned int v381 = v379 & 0xFFFFFFFE;
                                }
                                if (v381)
                                {
                                  LODWORD(value[0]) = 138412290;
                                  *(void **)((char *)value + 4) = (void *)v581;
                                  LODWORD(v579) = 12;
                                  v578 = value;
                                  v382 = (char *)_os_log_send_and_compose_impl();

                                  if (v382) {
                                    sub_100055434(v382);
                                  }
                                }
                                else
                                {

                                  v382 = 0;
                                }
                                CFDictionaryRef v302 = v582;
                                free(v382);
                              }

                              CFDataRef v580 = v259;
                              if (sub_10007FA74(v581, (uint64_t)v259, 0, (int *)&v614))
                              {
                                if (qword_1000E4068 != -1) {
                                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                                }
                                v383 = (id)qword_1000E4060;
                                if (os_log_type_enabled(v383, OS_LOG_TYPE_DEFAULT))
                                {
                                  value[0] = 0;
                                  unsigned int v384 = sub_100055404(1);
                                  v383 = v383;
                                  if (os_log_type_enabled(v383, OS_LOG_TYPE_DEFAULT)) {
                                    unsigned int v385 = v384;
                                  }
                                  else {
                                    unsigned int v385 = v384 & 0xFFFFFFFE;
                                  }
                                  if (v385)
                                  {
                                    *(_WORD *)err = 0;
                                    LODWORD(v579) = 2;
                                    v578 = (void **)err;
                                    goto LABEL_992;
                                  }
                                  goto LABEL_994;
                                }
                              }
                              else
                              {
                                if (qword_1000E4068 != -1) {
                                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                                }
                                v383 = (id)qword_1000E4060;
                                if (os_log_type_enabled(v383, OS_LOG_TYPE_DEFAULT))
                                {
                                  value[0] = 0;
                                  unsigned int v386 = sub_100055404(1);
                                  v383 = v383;
                                  if (os_log_type_enabled(v383, OS_LOG_TYPE_DEFAULT)) {
                                    unsigned int v387 = v386;
                                  }
                                  else {
                                    unsigned int v387 = v386 & 0xFFFFFFFE;
                                  }
                                  if (v387)
                                  {
                                    *(_DWORD *)err = 67109120;
                                    *(_DWORD *)&err[4] = v614;
                                    LODWORD(v579) = 8;
                                    v578 = (void **)err;
LABEL_992:
                                    v388 = (char *)_os_log_send_and_compose_impl();

                                    if (v388) {
                                      sub_100055434(v388);
                                    }
                                    goto LABEL_995;
                                  }
LABEL_994:

                                  v388 = 0;
LABEL_995:
                                  free(v388);
                                }
                              }

                              if (qword_1000E4068 != -1) {
                                dispatch_once(&qword_1000E4068, &stru_1000D5598);
                              }
                              v389 = (id)qword_1000E4060;
                              if (os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT))
                              {
                                value[0] = 0;
                                unsigned int v390 = sub_100055404(1);
                                v391 = v389;
                                if (os_log_type_enabled(v391, OS_LOG_TYPE_DEFAULT)) {
                                  unsigned int v392 = v390;
                                }
                                else {
                                  unsigned int v392 = v390 & 0xFFFFFFFE;
                                }
                                if (v392)
                                {
                                  *(_WORD *)err = 0;
                                  LODWORD(v579) = 2;
                                  v578 = (void **)err;
                                  v393 = (char *)_os_log_send_and_compose_impl();

                                  if (v393) {
                                    sub_100055434(v393);
                                  }
                                }
                                else
                                {

                                  v393 = 0;
                                }
                                free(v393);
                              }

                              sub_100019308(qword_1000E4318);
                              CFUUIDRef v7 = (const __CFUUID *)objc_claimAutoreleasedReturnValue();
                              id v586 = 0;
                              unsigned int v394 = [(__CFUUID *)v7 unloadIdentityFromSession:501 error:&v586];
                              id v395 = v586;

                              if (v394)
                              {
                                if (qword_1000E4068 != -1) {
                                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                                }
                                v396 = (id)qword_1000E4060;
                                if (os_log_type_enabled(v396, OS_LOG_TYPE_DEFAULT))
                                {
                                  value[0] = 0;
                                  unsigned int v397 = sub_100055404(1);
                                  v396 = v396;
                                  if (os_log_type_enabled(v396, OS_LOG_TYPE_DEFAULT)) {
                                    unsigned int v398 = v397;
                                  }
                                  else {
                                    unsigned int v398 = v397 & 0xFFFFFFFE;
                                  }
                                  if (v398)
                                  {
                                    *(_WORD *)err = 0;
                                    LODWORD(v579) = 2;
                                    v578 = (void **)err;
                                    goto LABEL_1023;
                                  }
                                  goto LABEL_1025;
                                }
                              }
                              else
                              {
                                if (qword_1000E4068 != -1) {
                                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                                }
                                v396 = (id)qword_1000E4060;
                                if (os_log_type_enabled(v396, OS_LOG_TYPE_DEFAULT))
                                {
                                  *(void *)err = 0;
                                  int v399 = sub_100055404(1);
                                  v396 = v396;
                                  if (!os_log_type_enabled(v396, OS_LOG_TYPE_DEFAULT)) {
                                    v399 &= ~1u;
                                  }
                                  if (v399)
                                  {
                                    id v400 = [v395 code];
                                    LODWORD(value[0]) = 134217984;
                                    *(void **)((char *)value + 4) = v400;
                                    LODWORD(v579) = 12;
                                    v578 = value;
LABEL_1023:
                                    CFUUIDRef v7 = (const __CFUUID *)_os_log_send_and_compose_impl();

                                    if (v7) {
                                      sub_100055434((const char *)v7);
                                    }
                                    goto LABEL_1026;
                                  }
LABEL_1025:

                                  CFUUIDRef v7 = 0;
LABEL_1026:
                                  free(v7);
                                }
                              }

                              if (qword_1000E4068 != -1) {
                                dispatch_once(&qword_1000E4068, &stru_1000D5598);
                              }
                              v401 = (id)qword_1000E4060;
                              if (os_log_type_enabled(v401, OS_LOG_TYPE_DEFAULT))
                              {
                                value[0] = 0;
                                unsigned int v402 = sub_100055404(1);
                                CFUUIDRef v7 = v401;
                                if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT)) {
                                  unsigned int v403 = v402;
                                }
                                else {
                                  unsigned int v403 = v402 & 0xFFFFFFFE;
                                }
                                if (v403)
                                {
                                  *(_WORD *)err = 0;
                                  LODWORD(v579) = 2;
                                  v578 = (void **)err;
                                  v404 = (char *)_os_log_send_and_compose_impl();

                                  if (v404) {
                                    sub_100055434(v404);
                                  }
                                }
                                else
                                {

                                  v404 = 0;
                                }
                                free(v404);
                              }

                              v405 = (void *)sub_100088788(v302, kUMUserSessionUUIDKey);
                              if (v405)
                              {
                                v406 = v405;
                                if (qword_1000E4068 != -1) {
                                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                                }
                                v407 = (id)qword_1000E4060;
                                if (os_log_type_enabled(v407, OS_LOG_TYPE_DEFAULT))
                                {
                                  *(void *)err = 0;
                                  unsigned int v408 = sub_100055404(1);
                                  v409 = v407;
                                  if (os_log_type_enabled(v409, OS_LOG_TYPE_DEFAULT)) {
                                    unsigned int v410 = v408;
                                  }
                                  else {
                                    unsigned int v410 = v408 & 0xFFFFFFFE;
                                  }
                                  if (v410)
                                  {
                                    LODWORD(value[0]) = 138412290;
                                    *(void **)((char *)value + 4) = v406;
                                    LODWORD(v579) = 12;
                                    v578 = value;
                                    v411 = (char *)_os_log_send_and_compose_impl();

                                    if (v411) {
                                      sub_100055434(v411);
                                    }
                                  }
                                  else
                                  {

                                    v411 = 0;
                                  }
                                  free(v411);
                                }

                                v412 = sub_1000173F4((uint64_t)NSUUID, v406);
                                v413 = sub_100019308(qword_1000E4318);
                                id v585 = 0;
                                unsigned int v414 = [v413 deleteIdentity:v412 error:&v585];
                                id v268 = v585;

                                if (v414)
                                {
                                  if (qword_1000E4068 != -1) {
                                    dispatch_once(&qword_1000E4068, &stru_1000D5598);
                                  }
                                  v415 = (id)qword_1000E4060;
                                  if (os_log_type_enabled(v415, OS_LOG_TYPE_DEFAULT))
                                  {
                                    value[0] = 0;
                                    unsigned int v416 = sub_100055404(1);
                                    v415 = v415;
                                    if (os_log_type_enabled(v415, OS_LOG_TYPE_DEFAULT)) {
                                      unsigned int v417 = v416;
                                    }
                                    else {
                                      unsigned int v417 = v416 & 0xFFFFFFFE;
                                    }
                                    if (v417)
                                    {
                                      *(_WORD *)err = 0;
                                      LODWORD(v579) = 2;
                                      v578 = (void **)err;
                                      goto LABEL_1077;
                                    }
                                    goto LABEL_1079;
                                  }
                                }
                                else
                                {
                                  if (qword_1000E4068 != -1) {
                                    dispatch_once(&qword_1000E4068, &stru_1000D5598);
                                  }
                                  v418 = (id)qword_1000E4060;
                                  if (os_log_type_enabled(v418, OS_LOG_TYPE_DEFAULT))
                                  {
                                    *(void *)err = 0;
                                    int v419 = sub_100055404(1);
                                    v420 = v418;
                                    if (!os_log_type_enabled(v420, OS_LOG_TYPE_DEFAULT)) {
                                      v419 &= ~1u;
                                    }
                                    if (v419)
                                    {
                                      id v421 = [v268 code];
                                      LODWORD(value[0]) = 134217984;
                                      *(void **)((char *)value + 4) = v421;
                                      LODWORD(v579) = 12;
                                      v578 = value;
                                      v422 = (char *)_os_log_send_and_compose_impl();

                                      if (v422) {
                                        sub_100055434(v422);
                                      }
                                    }
                                    else
                                    {

                                      v422 = 0;
                                    }
                                    free(v422);
                                  }

                                  sleep(2u);
                                  if (qword_1000E4068 != -1) {
                                    dispatch_once(&qword_1000E4068, &stru_1000D5598);
                                  }
                                  v415 = (id)qword_1000E4060;
                                  if (os_log_type_enabled(v415, OS_LOG_TYPE_DEFAULT))
                                  {
                                    value[0] = 0;
                                    unsigned int v423 = sub_100055404(1);
                                    v415 = v415;
                                    if (os_log_type_enabled(v415, OS_LOG_TYPE_DEFAULT)) {
                                      unsigned int v424 = v423;
                                    }
                                    else {
                                      unsigned int v424 = v423 & 0xFFFFFFFE;
                                    }
                                    if (v424)
                                    {
                                      *(_WORD *)err = 0;
                                      LODWORD(v579) = 2;
                                      v578 = (void **)err;
LABEL_1077:
                                      v425 = (char *)_os_log_send_and_compose_impl();

                                      if (v425) {
                                        sub_100055434(v425);
                                      }
                                      goto LABEL_1080;
                                    }
LABEL_1079:

                                    v425 = 0;
LABEL_1080:
                                    free(v425);
                                  }
                                }

                                if (qword_1000E4068 != -1) {
                                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                                }
                                v426 = (id)qword_1000E4060;
                                if (os_log_type_enabled(v426, OS_LOG_TYPE_DEFAULT))
                                {
                                  value[0] = 0;
                                  unsigned int v427 = sub_100055404(1);
                                  v428 = v426;
                                  if (os_log_type_enabled(v428, OS_LOG_TYPE_DEFAULT)) {
                                    unsigned int v429 = v427;
                                  }
                                  else {
                                    unsigned int v429 = v427 & 0xFFFFFFFE;
                                  }
                                  if (v429)
                                  {
                                    *(_WORD *)err = 0;
                                    LODWORD(v579) = 2;
                                    v578 = (void **)err;
                                    v430 = (char *)_os_log_send_and_compose_impl();

                                    if (v430) {
                                      sub_100055434(v430);
                                    }
                                  }
                                  else
                                  {

                                    v430 = 0;
                                  }
                                  free(v430);
                                }

                                CFRelease(v582);
                                sub_10002EA7C(501, 0);
                                sub_10001A7BC();
                                if (qword_1000E4068 != -1) {
                                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                                }
                                v431 = (id)qword_1000E4060;
                                if (os_log_type_enabled(v431, OS_LOG_TYPE_DEFAULT))
                                {
                                  value[0] = 0;
                                  unsigned int v432 = sub_100055404(1);
                                  v433 = v431;
                                  if (os_log_type_enabled(v433, OS_LOG_TYPE_DEFAULT)) {
                                    unsigned int v434 = v432;
                                  }
                                  else {
                                    unsigned int v434 = v432 & 0xFFFFFFFE;
                                  }
                                  if (v434)
                                  {
                                    *(_WORD *)err = 0;
                                    LODWORD(v579) = 2;
                                    v578 = (void **)err;
                                    v435 = (char *)_os_log_send_and_compose_impl();

                                    if (v435) {
                                      sub_100055434(v435);
                                    }
                                  }
                                  else
                                  {

                                    v435 = 0;
                                  }
                                  free(v435);
                                }

                                if (sub_100081A00("/var/Users", (int *)&v614))
                                {
                                  if (qword_1000E4068 != -1) {
                                    dispatch_once(&qword_1000E4068, &stru_1000D5598);
                                  }
                                  v436 = (id)qword_1000E4060;
                                  if (!os_log_type_enabled(v436, OS_LOG_TYPE_DEFAULT)) {
                                    goto LABEL_1135;
                                  }
                                  value[0] = 0;
                                  unsigned int v437 = sub_100055404(1);
                                  v436 = v436;
                                  if (os_log_type_enabled(v436, OS_LOG_TYPE_DEFAULT)) {
                                    unsigned int v438 = v437;
                                  }
                                  else {
                                    unsigned int v438 = v437 & 0xFFFFFFFE;
                                  }
                                  if (v438)
                                  {
                                    *(_WORD *)err = 0;
                                    LODWORD(v579) = 2;
                                    v578 = (void **)err;
                                    goto LABEL_1131;
                                  }
                                }
                                else
                                {
                                  if (qword_1000E4068 != -1) {
                                    dispatch_once(&qword_1000E4068, &stru_1000D5598);
                                  }
                                  v439 = (id)qword_1000E4060;
                                  if (os_log_type_enabled(v439, OS_LOG_TYPE_DEFAULT))
                                  {
                                    value[0] = 0;
                                    unsigned int v440 = sub_100055404(1);
                                    v441 = v439;
                                    if (os_log_type_enabled(v441, OS_LOG_TYPE_DEFAULT)) {
                                      unsigned int v442 = v440;
                                    }
                                    else {
                                      unsigned int v442 = v440 & 0xFFFFFFFE;
                                    }
                                    if (v442)
                                    {
                                      *(_WORD *)err = 0;
                                      LODWORD(v579) = 2;
                                      v578 = (void **)err;
                                      v443 = (char *)_os_log_send_and_compose_impl();

                                      if (v443) {
                                        sub_100055434(v443);
                                      }
                                    }
                                    else
                                    {

                                      v443 = 0;
                                    }
                                    free(v443);
                                  }

                                  if (qword_1000E4068 != -1) {
                                    dispatch_once(&qword_1000E4068, &stru_1000D5598);
                                  }
                                  v436 = (id)qword_1000E4060;
                                  if (!os_log_type_enabled(v436, OS_LOG_TYPE_DEFAULT)) {
                                    goto LABEL_1135;
                                  }
                                  value[0] = 0;
                                  unsigned int v444 = sub_100055404(1);
                                  v436 = v436;
                                  if (os_log_type_enabled(v436, OS_LOG_TYPE_DEFAULT)) {
                                    unsigned int v445 = v444;
                                  }
                                  else {
                                    unsigned int v445 = v444 & 0xFFFFFFFE;
                                  }
                                  if (v445)
                                  {
                                    *(_WORD *)err = 0;
                                    LODWORD(v579) = 2;
                                    v578 = (void **)err;
LABEL_1131:
                                    v446 = (char *)_os_log_send_and_compose_impl();

                                    if (v446) {
                                      sub_100055434(v446);
                                    }
                                    goto LABEL_1134;
                                  }
                                }

                                v446 = 0;
LABEL_1134:
                                free(v446);
LABEL_1135:
                                CFUUIDRef v7 = (const __CFUUID *)&byte_1000E4313;

                                if (v580) {
                                  CFRelease(v580);
                                }

                                CFDictionarySetValue(v199, kUMUserSessionNeedsCryptoSetupKey, kCFBooleanFalse);
                                CFDataRef v189 = &qword_1000E4000;
                                goto LABEL_1138;
                              }
                              if (qword_1000E4068 != -1) {
                                dispatch_once(&qword_1000E4068, &stru_1000D5598);
                              }
                              v523 = (id)qword_1000E4060;
                              if (!os_log_type_enabled(v523, OS_LOG_TYPE_DEFAULT))
                              {
LABEL_1466:

                                sleep(2u);
                                sub_100019810("UserManagement early boot task Unable to find 501 uuid");
                                goto LABEL_1467;
                              }
                              value[0] = 0;
                              unsigned int v544 = sub_100055404(1);
                              uint64_t v0 = v523;
                              if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
                                unsigned int v545 = v544;
                              }
                              else {
                                unsigned int v545 = v544 & 0xFFFFFFFE;
                              }
                              if (!v545)
                              {

                                v546 = 0;
LABEL_1465:
                                free(v546);
                                goto LABEL_1466;
                              }
LABEL_1463:
                              *(_WORD *)err = 0;
                              v574 = (const char *)_os_log_send_and_compose_impl();

                              v546 = 0;
                              if (v574)
                              {
                                sub_100055434(v574);
                                v546 = (char *)v574;
                              }
                              goto LABEL_1465;
                            }
                            if (qword_1000E4068 != -1) {
                              dispatch_once(&qword_1000E4068, &stru_1000D5598);
                            }
                            v523 = (id)qword_1000E4060;
                            if (!os_log_type_enabled(v523, OS_LOG_TYPE_DEFAULT))
                            {
LABEL_1462:

                              sleep(2u);
                              sub_100019810("Failed deletion of 501 User Volume error:%d", v614);
                              goto LABEL_1463;
                            }
                            value[0] = 0;
                            unsigned int v541 = sub_100055404(1);
                            uint64_t v0 = v523;
                            if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
                              unsigned int v542 = v541;
                            }
                            else {
                              unsigned int v542 = v541 & 0xFFFFFFFE;
                            }
                            if (!v542)
                            {

                              v543 = 0;
LABEL_1461:
                              free(v543);
                              goto LABEL_1462;
                            }
LABEL_1459:
                            *(_DWORD *)err = 67109120;
                            *(_DWORD *)&err[4] = v614;
                            v573 = (const char *)_os_log_send_and_compose_impl();

                            v543 = 0;
                            if (v573)
                            {
                              sub_100055434(v573);
                              v543 = (char *)v573;
                            }
                            goto LABEL_1461;
                          }
                          CFDictionaryRef v316 = v315;
                          if (qword_1000E4068 != -1) {
                            dispatch_once(&qword_1000E4068, &stru_1000D5598);
                          }
                          unsigned int v317 = (id)qword_1000E4060;
                          if (os_log_type_enabled(v317, OS_LOG_TYPE_DEFAULT))
                          {
                            *(void *)err = 0;
                            unsigned int v318 = sub_100055404(1);
                            unsigned int v319 = v317;
                            if (os_log_type_enabled(v319, OS_LOG_TYPE_DEFAULT)) {
                              unsigned int v320 = v318;
                            }
                            else {
                              unsigned int v320 = v318 & 0xFFFFFFFE;
                            }
                            if (v320)
                            {
                              LODWORD(value[0]) = 138412290;
                              *(void **)((char *)value + 4) = v316;
                              LODWORD(v579) = 12;
                              v578 = value;
                              v321 = (char *)_os_log_send_and_compose_impl();

                              if (v321) {
                                sub_100055434(v321);
                              }
                            }
                            else
                            {

                              v321 = 0;
                            }
                            free(v321);
                          }

                          sub_100019308(qword_1000E4318);
                          CFUUIDRef v7 = (const __CFUUID *)objc_claimAutoreleasedReturnValue();
                          id v587 = 0;
                          unsigned int v325 = [(__CFUUID *)v7 unmapVolume:v316 error:&v587];
                          CFDictionaryRef v322 = v587;

                          if (v325)
                          {
                            if (qword_1000E4068 != -1) {
                              dispatch_once(&qword_1000E4068, &stru_1000D5598);
                            }
                            v326 = (id)qword_1000E4060;
                            if (!os_log_type_enabled(v326, OS_LOG_TYPE_DEFAULT)) {
                              goto LABEL_836;
                            }
                            value[0] = 0;
                            unsigned int v327 = sub_100055404(1);
                            v326 = v326;
                            if (os_log_type_enabled(v326, OS_LOG_TYPE_DEFAULT)) {
                              unsigned int v328 = v327;
                            }
                            else {
                              unsigned int v328 = v327 & 0xFFFFFFFE;
                            }
                            if (v328)
                            {
                              *(_WORD *)err = 0;
                              LODWORD(v579) = 2;
                              v578 = (void **)err;
                              goto LABEL_832;
                            }
                          }
                          else
                          {
                            if (qword_1000E4068 != -1) {
                              dispatch_once(&qword_1000E4068, &stru_1000D5598);
                            }
                            v326 = (id)qword_1000E4060;
                            if (!os_log_type_enabled(v326, OS_LOG_TYPE_DEFAULT)) {
                              goto LABEL_836;
                            }
                            *(void *)err = 0;
                            int v329 = sub_100055404(1);
                            v326 = v326;
                            if (!os_log_type_enabled(v326, OS_LOG_TYPE_DEFAULT)) {
                              v329 &= ~1u;
                            }
                            if (v329)
                            {
                              id v330 = [v322 code];
                              LODWORD(value[0]) = 134217984;
                              *(void **)((char *)value + 4) = v330;
                              LODWORD(v579) = 12;
                              v578 = value;
LABEL_832:
                              CFUUIDRef v7 = (const __CFUUID *)_os_log_send_and_compose_impl();

                              if (v7) {
                                sub_100055434((const char *)v7);
                              }
                              goto LABEL_835;
                            }
                          }

                          CFUUIDRef v7 = 0;
LABEL_835:
                          free(v7);
LABEL_836:

                          CFDictionaryRef v302 = v582;
                          goto LABEL_897;
                        }
                        if (qword_1000E4068 != -1) {
                          dispatch_once(&qword_1000E4068, &stru_1000D5598);
                        }
                        v523 = (id)qword_1000E4060;
                        if (!os_log_type_enabled(v523, OS_LOG_TYPE_DEFAULT))
                        {
LABEL_1458:

                          sleep(2u);
                          CFIndex v572 = CFErrorGetCode(uuid[0]);
                          sub_100019810("FAILED to transfer Primary from 501 -> 502:with error:%ld", v572);
                          goto LABEL_1459;
                        }
                        value[0] = 0;
                        unsigned int v538 = sub_100055404(1);
                        uint64_t v0 = v523;
                        if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
                          unsigned int v539 = v538;
                        }
                        else {
                          unsigned int v539 = v538 & 0xFFFFFFFE;
                        }
                        if (!v539)
                        {

                          v540 = 0;
LABEL_1457:
                          free(v540);
                          goto LABEL_1458;
                        }
LABEL_1455:
                        *(_WORD *)err = 0;
                        v571 = (const char *)_os_log_send_and_compose_impl();

                        v540 = 0;
                        if (v571)
                        {
                          sub_100055434(v571);
                          v540 = (char *)v571;
                        }
                        goto LABEL_1457;
                      }
                      if (qword_1000E4068 != -1) {
                        dispatch_once(&qword_1000E4068, &stru_1000D5598);
                      }
                      v523 = (id)qword_1000E4060;
                      if (!os_log_type_enabled(v523, OS_LOG_TYPE_DEFAULT))
                      {
LABEL_1454:

                        sleep(2u);
                        CFIndex v570 = CFErrorGetCode(uuid[0]);
                        sub_100019810("FAILED to ensure 501 user Identity is loaded with error:%ld", v570);
                        goto LABEL_1455;
                      }
                      *(void *)err = 0;
                      int v536 = sub_100055404(1);
                      uint64_t v0 = v523;
                      if (!os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
                        v536 &= ~1u;
                      }
                      if (!v536)
                      {

                        v537 = 0;
LABEL_1453:
                        free(v537);
                        goto LABEL_1454;
                      }
LABEL_1451:
                      v568 = (void *)CFErrorGetCode(uuid[0]);
                      LODWORD(value[0]) = 134217984;
                      *(void **)((char *)value + 4) = v568;
                      v569 = (const char *)_os_log_send_and_compose_impl();

                      v537 = 0;
                      if (v569)
                      {
                        sub_100055434(v569);
                        v537 = (char *)v569;
                      }
                      goto LABEL_1453;
                    }
                    if (qword_1000E4068 != -1) {
                      dispatch_once(&qword_1000E4068, &stru_1000D5598);
                    }
                    v523 = (id)qword_1000E4060;
                    if (!os_log_type_enabled(v523, OS_LOG_TYPE_DEFAULT))
                    {
LABEL_1450:

                      sleep(2u);
                      sub_100019810("FAILED to build 501 NSUUID to migrate to 502");
                      goto LABEL_1451;
                    }
                    value[0] = 0;
                    unsigned int v533 = sub_100055404(1);
                    uint64_t v0 = v523;
                    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v534 = v533;
                    }
                    else {
                      unsigned int v534 = v533 & 0xFFFFFFFE;
                    }
                    if (!v534)
                    {

                      v535 = 0;
LABEL_1449:
                      free(v535);
                      goto LABEL_1450;
                    }
LABEL_1447:
                    *(_WORD *)err = 0;
                    v567 = (const char *)_os_log_send_and_compose_impl();

                    v535 = 0;
                    if (v567)
                    {
                      sub_100055434(v567);
                      v535 = (char *)v567;
                    }
                    goto LABEL_1449;
                  }
                  if (qword_1000E4068 != -1) {
                    dispatch_once(&qword_1000E4068, &stru_1000D5598);
                  }
                  v523 = (id)qword_1000E4060;
                  if (!os_log_type_enabled(v523, OS_LOG_TYPE_DEFAULT))
                  {
LABEL_1446:

                    sleep(2u);
                    sub_100019810("FAILED to construct CF501 uuid to migrate to 502");
                    goto LABEL_1447;
                  }
                  value[0] = 0;
                  unsigned int v530 = sub_100055404(1);
                  uint64_t v0 = v523;
                  if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v531 = v530;
                  }
                  else {
                    unsigned int v531 = v530 & 0xFFFFFFFE;
                  }
                  if (!v531)
                  {

                    v532 = 0;
LABEL_1445:
                    free(v532);
                    goto LABEL_1446;
                  }
LABEL_1443:
                  *(_WORD *)err = 0;
                  v566 = (const char *)_os_log_send_and_compose_impl();

                  v532 = 0;
                  if (v566)
                  {
                    sub_100055434(v566);
                    v532 = (char *)v566;
                  }
                  goto LABEL_1445;
                }
                if (qword_1000E4068 != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                v523 = (id)qword_1000E4060;
                if (!os_log_type_enabled(v523, OS_LOG_TYPE_DEFAULT))
                {
LABEL_1442:

                  sleep(2u);
                  sub_100019810("FAILED to locate 501 uuid string to migrate OTI to 502");
                  goto LABEL_1443;
                }
                value[0] = 0;
                unsigned int v527 = sub_100055404(1);
                uint64_t v0 = v523;
                if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v528 = v527;
                }
                else {
                  unsigned int v528 = v527 & 0xFFFFFFFE;
                }
                if (!v528)
                {

                  v529 = 0;
LABEL_1441:
                  free(v529);
                  goto LABEL_1442;
                }
              }
              else
              {
                if (qword_1000E4068 != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                v523 = (id)qword_1000E4060;
                if (os_log_type_enabled(v523, OS_LOG_TYPE_DEFAULT))
                {
                  value[0] = 0;
                  unsigned int v524 = sub_100055404(1);
                  uint64_t v0 = v523;
                  if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v525 = v524;
                  }
                  else {
                    unsigned int v525 = v524 & 0xFFFFFFFE;
                  }
                  if (v525)
                  {
                    *(_WORD *)err = 0;
                    v564 = (const char *)_os_log_send_and_compose_impl();

                    v526 = 0;
                    if (v564)
                    {
                      sub_100055434(v564);
                      v526 = (char *)v564;
                    }
                  }
                  else
                  {

                    v526 = 0;
                  }
                  free(v526);
                }

                sleep(2u);
                sub_100019810("UserManagement early boot task Unable to find 501 session");
              }
              *(_WORD *)err = 0;
              v565 = (const char *)_os_log_send_and_compose_impl();

              v529 = 0;
              if (v565)
              {
                sub_100055434(v565);
                v529 = (char *)v565;
              }
              goto LABEL_1441;
            }
            id v268 = 0;
          }
          else
          {
            id v268 = 0;
            CFUUIDRef v7 = (const __CFUUID *)&byte_1000E4313;
          }
LABEL_1138:
          CFRelease(v199);
          CFRelease(cf);
          unsigned int v6 = &qword_1000E4000;
          if (uuid[0])
          {
            CFRelease(uuid[0]);
            uuid[0] = 0;
          }
          goto LABEL_1140;
        }
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        v477 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v477, OS_LOG_TYPE_DEFAULT))
        {
LABEL_1300:

          sleep(2u);
          sub_100019810("UserManagement early boot task could not Locate primary user session of Update install user");
          goto LABEL_1301;
        }
        value[0] = 0;
        unsigned int v478 = sub_100055404(1);
        uint64_t v0 = v477;
        if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v479 = v478;
        }
        else {
          unsigned int v479 = v478 & 0xFFFFFFFE;
        }
        if (!v479)
        {

          v480 = 0;
LABEL_1299:
          free(v480);
          goto LABEL_1300;
        }
LABEL_1297:
        *(_WORD *)err = 0;
        v503 = (const char *)_os_log_send_and_compose_impl();

        v480 = 0;
        if (v503)
        {
          sub_100055434(v503);
          v480 = (char *)v503;
        }
        goto LABEL_1299;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      uint64_t v0 = (uint64_t)(id)qword_1000E4060;
      if (!os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
      {
LABEL_553:

        goto LABEL_554;
      }
      value[0] = 0;
      unsigned int v195 = sub_100055404(1);
      uint64_t v0 = (uint64_t)(id)v0;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v196 = v195;
      }
      else {
        unsigned int v196 = v195 & 0xFFFFFFFE;
      }
      if (v196)
      {
        *(_WORD *)err = 0;
        LODWORD(v579) = 2;
        v578 = (void **)err;
LABEL_549:
        unsigned int v197 = (char *)_os_log_send_and_compose_impl();

        if (v197) {
          sub_100055434(v197);
        }
        goto LABEL_552;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      uint64_t v0 = (uint64_t)(id)qword_1000E4060;
      if (!os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_553;
      }
      value[0] = 0;
      unsigned int v193 = sub_100055404(1);
      uint64_t v0 = (uint64_t)(id)v0;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v194 = v193;
      }
      else {
        unsigned int v194 = v193 & 0xFFFFFFFE;
      }
      if (v194)
      {
        *(_WORD *)err = 0;
        LODWORD(v579) = 2;
        v578 = (void **)err;
        goto LABEL_549;
      }
    }

    unsigned int v197 = 0;
LABEL_552:
    free(v197);
    goto LABEL_553;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFDataRef v189 = &qword_1000E4000;
  uint64_t v0 = (uint64_t)(id)qword_1000E4060;
  if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    unsigned int v190 = sub_100055404(1);
    uint64_t v0 = (uint64_t)(id)v0;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v191 = v190;
    }
    else {
      unsigned int v191 = v190 & 0xFFFFFFFE;
    }
    if (v191)
    {
      *(_WORD *)err = 0;
      LODWORD(v579) = 2;
      v578 = (void **)err;
      unsigned int v192 = (char *)_os_log_send_and_compose_impl();

      if (v192) {
        sub_100055434(v192);
      }
    }
    else
    {

      unsigned int v192 = 0;
    }
    free(v192);
  }
LABEL_1146:

  if (byte_1000E4313) {
    int v448 = 1;
  }
  else {
    int v448 = v584;
  }
  sub_100041D18(v121, -1, v448, 0);
  if ([(id)qword_1000E4030 splitUserVolumeEnabled] && sub_100088F04() == 100)
  {
    if (v6[13] != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v449 = (id)qword_1000E4060;
    if (os_log_type_enabled(v449, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v450 = sub_100055404(1);
      v451 = v449;
      if (os_log_type_enabled(v451, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v452 = v450;
      }
      else {
        unsigned int v452 = v450 & 0xFFFFFFFE;
      }
      if (v452)
      {
        *(_WORD *)err = 0;
        LODWORD(v579) = 2;
        v578 = (void **)err;
        v453 = (char *)_os_log_send_and_compose_impl();

        if (v453) {
          sub_100055434(v453);
        }
      }
      else
      {

        v453 = 0;
      }
      free(v453);
    }

    v454 = sub_100018F6C(qword_1000E4318);
    uint64_t v0 = (uint64_t)[v454 removeFileAtPath:@"/private/var/mobile/Library/Preferences/com.apple.migration.plist" error:0];

    uint64_t v455 = v6[13];
    if (v0)
    {
      if (v455 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      v456 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v456, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_1183;
      }
      value[0] = 0;
      unsigned int v457 = sub_100055404(1);
      v456 = v456;
      if (os_log_type_enabled(v456, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v458 = v457;
      }
      else {
        unsigned int v458 = v457 & 0xFFFFFFFE;
      }
      if (v458)
      {
        *(_WORD *)err = 0;
        LODWORD(v579) = 2;
        v578 = (void **)err;
        goto LABEL_1179;
      }
    }
    else
    {
      if (v455 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      v456 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v456, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_1183;
      }
      value[0] = 0;
      unsigned int v459 = sub_100055404(1);
      v456 = v456;
      if (os_log_type_enabled(v456, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v460 = v459;
      }
      else {
        unsigned int v460 = v459 & 0xFFFFFFFE;
      }
      if (v460)
      {
        *(_WORD *)err = 0;
        LODWORD(v579) = 2;
        v578 = (void **)err;
LABEL_1179:
        uint64_t v0 = _os_log_send_and_compose_impl();

        if (v0) {
          sub_100055434((const char *)v0);
        }
        goto LABEL_1182;
      }
    }

    uint64_t v0 = 0;
LABEL_1182:
    free((void *)v0);
LABEL_1183:
  }
  if ((v584 & objc_msgSend((id)qword_1000E4030, "splitUserVolumeEnabled", v578, v579)) != 1) {
    goto LABEL_1198;
  }
  LODWORD(uuid[0]) = 0;
  int v461 = sub_100081A00("/var/mobile/", (int *)uuid);
  uint64_t v462 = v6[13];
  if (!v461)
  {
    if (v462 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v481 = (id)qword_1000E4060;
    if (os_log_type_enabled(v481, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      unsigned int v482 = sub_100055404(1);
      uint64_t v0 = v481;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v483 = v482;
      }
      else {
        unsigned int v483 = v482 & 0xFFFFFFFE;
      }
      if (v483)
      {
        *(_DWORD *)err = 67109120;
        *(_DWORD *)&err[4] = uuid[0];
        v516 = (const char *)_os_log_send_and_compose_impl();

        v484 = 0;
        if (v516)
        {
          sub_100055434(v516);
          v484 = (char *)v516;
        }
      }
      else
      {

        v484 = 0;
      }
      free(v484);
    }

    sleep(2u);
    sub_100019810("UserManagement early boot task failed to Set LAST BOOTED USER after Erase Install with error:%d", LODWORD(uuid[0]));
    goto LABEL_1327;
  }
  if (v462 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  v463 = (id)qword_1000E4060;
  if (os_log_type_enabled(v463, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    unsigned int v464 = sub_100055404(1);
    v465 = v463;
    if (os_log_type_enabled(v465, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v466 = v464;
    }
    else {
      unsigned int v466 = v464 & 0xFFFFFFFE;
    }
    if (v466)
    {
      *(_WORD *)err = 0;
      v467 = (char *)_os_log_send_and_compose_impl();

      if (v467) {
        sub_100055434(v467);
      }
    }
    else
    {

      v467 = 0;
    }
    free(v467);
  }

LABEL_1198:
  if (*((_DWORD *)v189 + 176) == 1 || (sub_10001DA90(), *((_DWORD *)v189 + 176) == 1)) {
    sub_100057E04(qword_1000E4038);
  }
}

uint64_t sub_10004008C(int a1)
{
  sub_10004EEB0(a1);
  if (v1)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v2 = (id)qword_1000E4060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4)
      {
        unsigned int v5 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v6 = (char *)v5;
        if (v5) {
          sub_100055434(v5);
        }
      }
      else
      {
        unsigned int v6 = 0;
      }
      free(v6);
    }
    uint64_t v11 = 1;
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v2 = (id)qword_1000E4060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v7 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v8 = v7;
      }
      else {
        unsigned int v8 = v7 & 0xFFFFFFFE;
      }
      if (v8)
      {
        unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v10 = (char *)v9;
        if (v9) {
          sub_100055434(v9);
        }
      }
      else
      {
        unsigned int v10 = 0;
      }
      free(v10);
    }
    uint64_t v11 = 0;
  }

  return v11;
}

void sub_100040298()
{
  if (qword_1000E42B0)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v0 = (id)qword_1000E4060;
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v1 = sub_100055404(1);
      if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v2 = v1;
      }
      else {
        unsigned int v2 = v1 & 0xFFFFFFFE;
      }
      if (v2)
      {
        unsigned int v3 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v4 = (char *)v3;
        if (v3) {
          sub_100055434(v3);
        }
      }
      else
      {
        unsigned int v4 = 0;
      }
      free(v4);
    }

    if (CFArrayGetCount((CFArrayRef)qword_1000E42B0) >= 1)
    {
      CFIndex v5 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42B0, v5);
        if (ValueAtIndex)
        {
          unsigned int v7 = ValueAtIndex;
          CFTypeID v8 = CFGetTypeID(ValueAtIndex);
          if (v8 == CFDictionaryGetTypeID()) {
            CFDictionarySetValue(v7, kUMUserSessionForegroundKey, kCFBooleanFalse);
          }
        }
        ++v5;
      }
      while (CFArrayGetCount((CFArrayRef)qword_1000E42B0) > v5);
    }
  }
}

uint64_t sub_10004041C(_DWORD *a1)
{
  if (a1) {
    *a1 = 0;
  }
  unsigned int v4 = &qword_1000E4000;
  CFIndex v5 = sub_100062308(qword_1000E4040, 0);
  if (v5)
  {
    unsigned int v6 = v5;
    unsigned int v7 = [v5 version];
    if (v7 >= +[UMDPersonaManifest currentVersion])
    {
      unsigned int v15 = v6;
      CFTypeID v8 = [v6 version];
      if (v8 <= +[UMDPersonaManifest currentVersion]) {
        goto LABEL_72;
      }
      sub_100019810("usermanagerd: persona manifest version %u is from the future! Downgrading is not supported.", [v6 version]);
    }
    else
    {
      unsigned int v1 = &qword_1000E4000;
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v2 = &qword_1000E4000;
      CFTypeID v8 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
LABEL_25:

        id v16 = v6;
        unsigned int v17 = +[UMDPersonaManifest manifest];
        if ([v16 generation]) {
          uint64_t v18 = (uint64_t)[v16 generation];
        }
        else {
          uint64_t v18 = 1;
        }
        [v17 setGeneration:v18 v135 v139];
        unsigned int v19 = [v16 users];
        id v20 = [v19 count];

        if (v20 == (id)1)
        {
          unsigned int v21 = [v16 users];
          unsigned int v22 = [v21 anyObject];

          unsigned int v23 = objc_alloc_init(UMDPersonaManifestUser);
          CFStringRef v24 = sub_100018BF8(qword_1000E4038);
          id v25 = [v24 count];

          if (v25 == (id)1)
          {
            unsigned int v26 = sub_100018BF8(qword_1000E4038);
            unsigned int v27 = [v26 objectAtIndexedSubscript:0];
            unsigned int v28 = sub_10008AAF4(v27, (uint64_t)kUMUserSessionUUIDKey);

            if (v28)
            {
              sub_100019084((uint64_t)v23, v28);
              sub_100018600((uint64_t)v22);
              unsigned int v29 = (char *)objc_claimAutoreleasedReturnValue();
              sub_10001956C(v23, v29);

              unsigned int v30 = +[NSSet setWithObject:v23];
              [v17 setUsers:v30];

              id v31 = v17;
              unsigned int v4 = &qword_1000E4000;
            }
            else
            {
              if (qword_1000E4088 != -1) {
                dispatch_once(&qword_1000E4088, &stru_1000D55D8);
              }
              unsigned int v4 = &qword_1000E4000;
              unsigned int v41 = (id)qword_1000E4080;
              if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
              {
                v168[0] = 0;
                unsigned int v42 = sub_100055404(0);
                if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
                  unsigned int v43 = v42;
                }
                else {
                  unsigned int v43 = v42 & 0xFFFFFFFE;
                }
                if (v43)
                {
                  uint64_t v44 = qword_1000E4038;
                  unsigned int v45 = v41;
                  unsigned int v155 = sub_100018BF8(v44);
                  CFUUIDRef v153 = [v155 objectAtIndexedSubscript:0];
                  unsigned int v46 = [v153 objectForKeyedSubscript:kUMUserSessionUUIDKey];
                  *(_DWORD *)unsigned int v169 = 138543362;
                  *(void *)&v169[4] = v46;
                  LODWORD(v139) = 12;
                  int v135 = v169;
                  unsigned int v47 = v45;
                  unsigned int v48 = (char *)_os_log_send_and_compose_impl();

                  if (v48) {
                    sub_100055434(v48);
                  }
                }
                else
                {
                  unsigned int v48 = 0;
                }
                unsigned int v4 = &qword_1000E4000;
                free(v48);
              }

              unsigned int v28 = 0;
              id v31 = 0;
            }
            unsigned int v2 = &qword_1000E4000;
          }
          else
          {
            if (qword_1000E4088 != -1) {
              dispatch_once(&qword_1000E4088, &stru_1000D55D8);
            }
            unsigned int v2 = &qword_1000E4000;
            unsigned int v28 = (id)qword_1000E4080;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              *(void *)unsigned int v169 = 0;
              unsigned int v37 = sub_100055404(0);
              if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
                unsigned int v38 = v37;
              }
              else {
                unsigned int v38 = v37 & 0xFFFFFFFE;
              }
              if (v38)
              {
                LOWORD(v168[0]) = 0;
                LODWORD(v139) = 2;
                int v135 = v168;
                unsigned int v39 = (const char *)_os_log_send_and_compose_impl();
                unsigned int v40 = (char *)v39;
                if (v39) {
                  sub_100055434(v39);
                }
              }
              else
              {
                unsigned int v40 = 0;
              }
              free(v40);
            }
            id v31 = 0;
            unsigned int v4 = &qword_1000E4000;
          }
        }
        else
        {
          if (v1[13] != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v22 = (id)v2[12];
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            v168[0] = 0;
            int v32 = sub_100055404(1);
            if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
              v32 &= ~1u;
            }
            if (v32)
            {
              unsigned int v33 = v22;
              BOOL v34 = [v16 users];
              id v35 = [v34 count];
              *(_DWORD *)unsigned int v169 = 134217984;
              *(void *)&v169[4] = v35;
              LODWORD(v139) = 12;
              int v135 = v169;
              unsigned int v36 = (char *)_os_log_send_and_compose_impl();

              if (v36) {
                sub_100055434(v36);
              }
              unsigned int v4 = &qword_1000E4000;
            }
            else
            {
              unsigned int v36 = 0;
            }
            free(v36);
          }
          id v31 = 0;
        }

        if (v31)
        {
          unsigned int v15 = v31;
          if (sub_100062B84(v4[8], v31, 0))
          {
LABEL_72:
            id v49 = v15;
            if (a1) {
              *a1 = 0;
            }
            unsigned int v143 = v49;
            unsigned int v50 = [v49 version:v135 with:v139];
            if (v50 != +[UMDPersonaManifest currentVersion])
            {
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              unsigned int v59 = (id)qword_1000E4060;
              if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
              {
                v168[0] = 0;
                int v60 = sub_100055404(1);
                if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
                  v60 &= ~1u;
                }
                if (v60)
                {
                  char v61 = v59;
                  unsigned int v62 = [v143 version];
                  unsigned int v63 = +[UMDPersonaManifest currentVersion];
                  *(_DWORD *)unsigned int v169 = 67109376;
                  *(_DWORD *)&v169[4] = v62;
                  *(_WORD *)&v169[8] = 1024;
                  *(_DWORD *)&v169[10] = v63;
                  unsigned int v64 = (char *)_os_log_send_and_compose_impl();

                  if (v64) {
                    sub_100055434(v64);
                  }
                }
                else
                {
                  unsigned int v64 = 0;
                }
                free(v64);
              }

              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              unsigned int v75 = (id)qword_1000E4060;
              if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)unsigned int v169 = 0;
                unsigned int v76 = sub_100055404(1);
                if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v77 = v76;
                }
                else {
                  unsigned int v77 = v76 & 0xFFFFFFFE;
                }
                if (v77)
                {
                  LOWORD(v168[0]) = 0;
                  BOOL v78 = (const char *)_os_log_send_and_compose_impl();
                  unsigned int v79 = (char *)v78;
                  if (v78) {
                    sub_100055434(v78);
                  }
                }
                else
                {
                  unsigned int v79 = 0;
                }
                free(v79);
              }

              uint64_t v74 = 0;
              if (a1) {
                *a1 = 2;
              }
              goto LABEL_214;
            }
            unsigned int v51 = sub_100018F6C(v4[8]);
            int v52 = [v51 userPersonas];
            id v53 = [v52 count];

            if (v53)
            {
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              unsigned int v54 = (id)qword_1000E4060;
              if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)unsigned int v169 = 0;
                unsigned int v55 = sub_100055404(1);
                if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v56 = v55;
                }
                else {
                  unsigned int v56 = v55 & 0xFFFFFFFE;
                }
                if (v56)
                {
                  LOWORD(v168[0]) = 0;
                  LODWORD(v140) = 2;
                  int v136 = v168;
                  unsigned int v57 = (const char *)_os_log_send_and_compose_impl();
                  unsigned int v58 = (char *)v57;
                  if (v57) {
                    sub_100055434(v57);
                  }
                }
                else
                {
                  unsigned int v58 = 0;
                }
                free(v58);
              }
            }
            if (objc_msgSend(v143, "generation", v136, v140))
            {
              id v80 = [v143 generation];
              unsigned int v81 = sub_100018F78(v4[8]);
              sub_100058978((uint64_t)v81, (uint64_t)v80);

              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              id v82 = (id)qword_1000E4060;
              if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_154;
              }
              v168[0] = 0;
              int v83 = sub_100055404(1);
              if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
                v83 &= ~1u;
              }
              if (v83)
              {
                uint64_t v84 = v4[8];
                unsigned int v85 = v82;
                uint64_t v86 = sub_100018F78(v84);
                uint64_t v87 = sub_100058954((uint64_t)v86);
                *(_DWORD *)unsigned int v169 = 134217984;
                *(void *)&v169[4] = v87;
                LODWORD(v141) = 12;
                int v137 = v169;
                int v88 = (void *)_os_log_send_and_compose_impl();

                if (!v88) {
                  goto LABEL_153;
                }
                goto LABEL_151;
              }
            }
            else
            {
              unsigned int v89 = sub_100018F78(v4[8]);
              sub_100058978((uint64_t)v89, 1);

              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              id v82 = (id)qword_1000E4060;
              if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_154;
              }
              *(void *)unsigned int v169 = 0;
              unsigned int v90 = sub_100055404(1);
              if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v91 = v90;
              }
              else {
                unsigned int v91 = v90 & 0xFFFFFFFE;
              }
              if (v91)
              {
                LOWORD(v168[0]) = 0;
                LODWORD(v141) = 2;
                int v137 = v168;
                int v88 = (void *)_os_log_send_and_compose_impl();
                if (!v88)
                {
LABEL_153:
                  free(v88);
LABEL_154:

                  CFIndex v92 = &AKSGetLastUser_ptr;
                  unsigned int v93 = +[NSMutableDictionary dictionary];
                  unsigned int v94 = v143;
                  v95 = [v143 users];
                  id v96 = [v95 count];

                  if (!v96)
                  {
                    if (qword_1000E4068 != -1) {
                      dispatch_once(&qword_1000E4068, &stru_1000D5598);
                    }
                    unsigned int v97 = (id)qword_1000E4060;
                    if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
                    {
                      *(void *)unsigned int v169 = 0;
                      unsigned int v98 = sub_100055404(1);
                      if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT)) {
                        unsigned int v99 = v98;
                      }
                      else {
                        unsigned int v99 = v98 & 0xFFFFFFFE;
                      }
                      if (v99)
                      {
                        LOWORD(v168[0]) = 0;
                        LODWORD(v141) = 2;
                        int v137 = v168;
                        v100 = (const char *)_os_log_send_and_compose_impl();
                        unsigned int v101 = (char *)v100;
                        if (v100) {
                          sub_100055434(v100);
                        }
                      }
                      else
                      {
                        unsigned int v101 = 0;
                      }
                      free(v101);
                    }

                    unsigned int v94 = v143;
                  }
                  long long v164 = 0u;
                  long long v165 = 0u;
                  long long v162 = 0u;
                  long long v163 = 0u;
                  unsigned int v102 = [v94 users:v137, v141];
                  id v147 = [v102 countByEnumeratingWithState:&v162 objects:v169 count:16];
                  if (v147)
                  {
                    uint64_t v103 = 0;
                    uint64_t v144 = *(void *)v163;
                    unsigned int v104 = &qword_1000E4000;
                    unsigned int v145 = v102;
                    CFTypeID v146 = v93;
                    do
                    {
                      uint64_t v105 = 0;
                      do
                      {
                        if (*(void *)v163 != v144) {
                          objc_enumerationMutation(v102);
                        }
                        uint64_t v156 = *(void *)(*((void *)&v162 + 1) + 8 * v105);
                        if (v104[13] != -1) {
                          dispatch_once(&qword_1000E4068, &stru_1000D5598);
                        }
                        uint64_t v148 = v105;
                        unsigned int v106 = (id)qword_1000E4060;
                        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v161 = 0;
                          int v107 = sub_100055404(1);
                          if (!os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG)) {
                            v107 &= ~1u;
                          }
                          if (v107)
                          {
                            uint64_t v108 = v103;
                            unsigned int v109 = v106;
                            v110 = sub_100018BF8(v156);
                            int v111 = [v110 UUIDString];
                            int v166 = 138412290;
                            *(void *)__int16 v167 = v111;
                            LODWORD(v142) = 12;
                            int v138 = &v166;
                            unsigned int v112 = (char *)_os_log_send_and_compose_impl();

                            if (v112) {
                              sub_100055434(v112);
                            }
                            uint64_t v103 = v108;
                            unsigned int v104 = &qword_1000E4000;
                          }
                          else
                          {
                            unsigned int v112 = 0;
                          }
                          free(v112);
                        }

                        unsigned int v152 = +[NSMutableArray array];
                        long long v157 = 0u;
                        long long v158 = 0u;
                        long long v159 = 0u;
                        long long v160 = 0u;
                        sub_100018600(v156);
                        id obj = (id)objc_claimAutoreleasedReturnValue();
                        id v154 = [obj countByEnumeratingWithState:&v157 objects:v168 count:16];
                        if (v154)
                        {
                          uint64_t v151 = *(void *)v158;
                          unsigned int v113 = &qword_1000E4000;
                          do
                          {
                            for (CFIndex i = 0; i != v154; CFIndex i = (char *)i + 1)
                            {
                              if (*(void *)v158 != v151) {
                                objc_enumerationMutation(obj);
                              }
                              uint64_t v115 = *(void *)(*((void *)&v157 + 1) + 8 * i);
                              if (v104[13] != -1) {
                                dispatch_once(&qword_1000E4068, &stru_1000D5598);
                              }
                              unsigned int v116 = (id)v113[12];
                              if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
                              {
                                uint64_t v161 = 0;
                                int v117 = sub_100055404(1);
                                if (!os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT)) {
                                  v117 &= ~1u;
                                }
                                if (v117)
                                {
                                  unsigned int v150 = v103;
                                  unsigned int v118 = v92;
                                  int v119 = v4;
                                  unsigned int v120 = v116;
                                  int v121 = sub_100066D48(v115);
                                  unsigned int v122 = sub_100018BF8(v156);
                                  CFStringRef v123 = [v122 UUIDString];
                                  int v166 = 67109378;
                                  *(_DWORD *)__int16 v167 = v121;
                                  *(_WORD *)&v167[4] = 2112;
                                  *(void *)&v167[6] = v123;
                                  LODWORD(v142) = 18;
                                  int v138 = &v166;
                                  unsigned int v124 = (char *)_os_log_send_and_compose_impl();

                                  if (v124) {
                                    sub_100055434(v124);
                                  }
                                  unsigned int v4 = v119;
                                  CFIndex v92 = v118;
                                  uint64_t v103 = v150;
                                  unsigned int v104 = &qword_1000E4000;
                                  unsigned int v113 = &qword_1000E4000;
                                }
                                else
                                {
                                  unsigned int v124 = 0;
                                }
                                free(v124);
                              }

                              unsigned int v125 = v92[400];
                              id v126 = sub_1000797E4(v115);
                              id v127 = [v125 dictionaryWithDictionary:v126];

                              v128 = sub_100018BF8(v156);
                              unsigned int v129 = [v128 UUIDString];
                              [v127 setObject:v129 forKeyedSubscript:kUMUserPersonaUserODUUIDKey];

                              if (sub_100066BCC(v115) == 4 || sub_100066BCC(v115) == 3) {
                                uint64_t v103 = sub_10005A544(v4[8], v127) | v103;
                              }
                              [v152 addObject:v127, v138, v142];
                            }
                            id v154 = [obj countByEnumeratingWithState:&v157 objects:v168 count:16];
                          }
                          while (v154);
                        }

                        unsigned int v130 = sub_100018BF8(v156);
                        __int16 v131 = [v130 UUIDString];
                        unsigned int v93 = v146;
                        [v146 setObject:v152 forKeyedSubscript:v131];

                        uint64_t v105 = v148 + 1;
                        unsigned int v102 = v145;
                      }
                      while ((id)(v148 + 1) != v147);
                      id v147 = [v145 countByEnumeratingWithState:&v162 objects:v169 count:16];
                    }
                    while (v147);

                    id v132 = sub_100018F6C(v4[8]);
                    [v132 setUserPersonas:v146];

                    if (v103) {
                      sub_10005DBE8(v4[8]);
                    }
                  }
                  else
                  {

                    unsigned int v133 = sub_100018F6C(v4[8]);
                    [v133 setUserPersonas:v93];
                  }
                  uint64_t v74 = 1;
LABEL_214:

                  unsigned int v15 = v143;
                  goto LABEL_215;
                }
LABEL_151:
                sub_100055434((const char *)v88);
                goto LABEL_153;
              }
            }
            int v88 = 0;
            goto LABEL_153;
          }
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          int v69 = (id)v2[12];
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)unsigned int v169 = 0;
            unsigned int v70 = sub_100055404(1);
            if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v71 = v70;
            }
            else {
              unsigned int v71 = v70 & 0xFFFFFFFE;
            }
            if (v71)
            {
              LOWORD(v168[0]) = 0;
              unsigned int v72 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v73 = (char *)v72;
              if (v72) {
                sub_100055434(v72);
              }
            }
            else
            {
              unsigned int v73 = 0;
            }
            free(v73);
          }

          if (!a1) {
            goto LABEL_167;
          }
          goto LABEL_115;
        }
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        int v12 = (id)v2[12];
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)unsigned int v169 = 0;
          unsigned int v65 = sub_100055404(1);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v66 = v65;
          }
          else {
            unsigned int v66 = v65 & 0xFFFFFFFE;
          }
          if (v66)
          {
            LOWORD(v168[0]) = 0;
LABEL_101:
            unsigned int v67 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v68 = (char *)v67;
            if (v67) {
              sub_100055434(v67);
            }
            goto LABEL_113;
          }
          goto LABEL_112;
        }
        goto LABEL_114;
      }
      v168[0] = 0;
      int v9 = sub_100055404(1);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        v9 &= ~1u;
      }
      if (v9)
      {
        unsigned int v10 = v8;
        *(_DWORD *)unsigned int v169 = 67109376;
        *(_DWORD *)&v169[4] = [v6 version];
        *(_WORD *)&v169[8] = 1024;
        *(_DWORD *)&v169[10] = +[UMDPersonaManifest currentVersion];
        LODWORD(v139) = 14;
        int v135 = v169;
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();

        if (v11) {
          sub_100055434(v11);
        }
        goto LABEL_24;
      }
    }
    uint64_t v11 = 0;
LABEL_24:
    free(v11);
    goto LABEL_25;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v12 = (id)qword_1000E4060;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v169 = 0;
    unsigned int v13 = sub_100055404(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = v13 & 0xFFFFFFFE;
    }
    if (v14)
    {
      LOWORD(v168[0]) = 0;
      goto LABEL_101;
    }
LABEL_112:
    unsigned int v68 = 0;
LABEL_113:
    free(v68);
  }
LABEL_114:

  unsigned int v15 = 0;
  if (!a1)
  {
LABEL_167:
    uint64_t v74 = 0;
    goto LABEL_215;
  }
LABEL_115:
  uint64_t v74 = 0;
  *a1 = 2;
LABEL_215:

  return v74;
}

uint64_t sub_1000418A4(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  unsigned int v6 = sub_100019308(qword_1000E4318);
  unsigned int v7 = [v6 isIdentityLoadedIntoSession:a2];

  if (v7)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFTypeID v8 = (id)qword_1000E4060;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v34[0] = 0;
      unsigned int v9 = sub_100055404(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v10 = v9;
      }
      else {
        unsigned int v10 = v9 & 0xFFFFFFFE;
      }
      if (v10)
      {
        LODWORD(v35) = 67109120;
        HIDWORD(v35) = a2;
        uint64_t v11 = (const char *)_os_log_send_and_compose_impl();
        int v12 = (char *)v11;
        if (v11) {
          sub_100055434(v11);
        }
      }
      else
      {
        int v12 = 0;
      }
      free(v12);
    }

    id v18 = 0;
LABEL_46:
    uint64_t v31 = 1;
    goto LABEL_47;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v13 = (id)qword_1000E4060;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v34[0] = 0;
    unsigned int v14 = sub_100055404(1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v15 = v14;
    }
    else {
      unsigned int v15 = v14 & 0xFFFFFFFE;
    }
    if (v15)
    {
      LODWORD(v35) = 67109120;
      HIDWORD(v35) = a2;
      id v16 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v17 = (char *)v16;
      if (v16) {
        sub_100055434(v16);
      }
    }
    else
    {
      unsigned int v17 = 0;
    }
    free(v17);
  }

  unsigned int v19 = sub_100019308(qword_1000E4318);
  id v33 = 0;
  unsigned int v20 = [v19 loadIdentity:v5 intoSession:a2 error:&v33];
  id v18 = v33;

  if (v20)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v21 = (id)qword_1000E4060;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v34[0] = 0;
      unsigned int v22 = sub_100055404(1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v23 = v22;
      }
      else {
        unsigned int v23 = v22 & 0xFFFFFFFE;
      }
      if (v23)
      {
        LOWORD(v35) = 0;
        CFStringRef v24 = (const char *)_os_log_send_and_compose_impl();
        id v25 = (char *)v24;
        if (v24) {
          sub_100055434(v24);
        }
      }
      else
      {
        id v25 = 0;
      }
      free(v25);
    }

    goto LABEL_46;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v26 = (id)qword_1000E4060;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v35 = 0;
    int v27 = sub_100055404(1);
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
      v27 &= ~1u;
    }
    if (v27)
    {
      unsigned int v28 = v26;
      id v29 = [v18 code];
      LODWORD(v34[0]) = 134217984;
      *(void *)((char *)v34 + 4) = v29;
      unsigned int v30 = (char *)_os_log_send_and_compose_impl();

      if (v30) {
        sub_100055434(v30);
      }
    }
    else
    {
      unsigned int v30 = 0;
    }
    free(v30);
  }

  if (a3)
  {
    id v18 = v18;
    uint64_t v31 = 0;
    *a3 = v18;
  }
  else
  {
    uint64_t v31 = 0;
  }
LABEL_47:

  return v31;
}

uint64_t sub_100041D18(unsigned int a1, int a2, int a3, int a4)
{
  int valuePtr = a2;
  if (qword_1000E4078 != -1) {
    dispatch_once(&qword_1000E4078, &stru_1000D55B8);
  }
  unsigned int v9 = (id)qword_1000E4070;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v319 = 0;
    unsigned int v10 = sub_100055404(0);
    uint64_t v11 = v9;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v12 = v10;
    }
    else {
      unsigned int v12 = v10 & 0xFFFFFFFE;
    }
    if (v12)
    {
      v327.st_dev = 67109120;
      *(_DWORD *)&v327.st_mode = a1;
      LODWORD(v307) = 8;
      unsigned int v306 = &v327;
      unsigned int v4 = (uint64_t *)_os_log_send_and_compose_impl();

      if (v4) {
        sub_100055434((const char *)v4);
      }
    }
    else
    {

      unsigned int v4 = 0;
    }
    free(v4);
  }

  if (a1 == -1)
  {
    sub_100019810("UserManagement loading foreground user failed assertion: uid != -1");
  }
  else
  {
    id v5 = &qword_1000E4000;
    unsigned int v13 = sub_100056848(qword_1000E4038, a1);

    if (v13)
    {
      unsigned int v4 = &qword_1000E4000;
      unsigned int v6 = (const void **)&kUMUserSessionHomeDirKey;
      if (dword_1000E42C0 == 1)
      {
        if (qword_1000E4068 == -1) {
          goto LABEL_16;
        }
        goto LABEL_664;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v19 = (id)qword_1000E4060;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)&v327.st_dev = 0;
        unsigned int v20 = sub_100055404(1);
        unsigned int v21 = v19;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v22 = v20;
        }
        else {
          unsigned int v22 = v20 & 0xFFFFFFFE;
        }
        if (v22)
        {
          *(_DWORD *)unsigned int v319 = 67109632;
          *(_DWORD *)&v319[4] = a1;
          *(_WORD *)&v319[8] = 1024;
          *(_DWORD *)&v319[10] = qword_1000E42B8;
          *(_WORD *)&v319[14] = 1024;
          *(_DWORD *)&v319[16] = valuePtr;
          unsigned int v23 = (char *)_os_log_send_and_compose_impl();

          if (v23) {
            sub_100055434(v23);
          }
        }
        else
        {

          unsigned int v23 = 0;
        }
        free(v23);
      }

      sub_100056848(qword_1000E4038, a1);
      CFDictionaryRef v29 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      if (qword_1000E42B8 >= 2)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v30 = (id)qword_1000E4060;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          CFDictionaryRef v31 = v29;
          *(void *)unsigned int v319 = 0;
          unsigned int v32 = sub_100055404(1);
          id v33 = v30;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v34 = v32;
          }
          else {
            unsigned int v34 = v32 & 0xFFFFFFFE;
          }
          if (v34)
          {
            LOWORD(v327.st_dev) = 0;
            uint64_t v35 = (char *)_os_log_send_and_compose_impl();

            if (v35) {
              sub_100055434(v35);
            }
          }
          else
          {

            uint64_t v35 = 0;
          }
          free(v35);
          CFDictionaryRef v29 = v31;
        }
      }
      unsigned int v79 = sub_100018600(qword_1000E4318);
      int v80 = sub_1000193A8((uint64_t)v79, a1);

      unsigned int v81 = &qword_1000E4000;
      if (v80)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        id v82 = (id)qword_1000E4060;
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)unsigned int v319 = 0;
          unsigned int v83 = sub_100055404(1);
          id v82 = v82;
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v84 = v83;
          }
          else {
            unsigned int v84 = v83 & 0xFFFFFFFE;
          }
          if (v84)
          {
            LOWORD(v327.st_dev) = 0;
            goto LABEL_166;
          }
          goto LABEL_169;
        }
      }
      else
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        id v82 = (id)qword_1000E4060;
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)unsigned int v319 = 0;
          unsigned int v85 = sub_100055404(1);
          id v82 = v82;
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v86 = v85;
          }
          else {
            unsigned int v86 = v85 & 0xFFFFFFFE;
          }
          if (v86)
          {
            LOWORD(v327.st_dev) = 0;
LABEL_166:
            uint64_t v87 = (char *)_os_log_send_and_compose_impl();

            if (v87) {
              sub_100055434(v87);
            }
            goto LABEL_170;
          }
LABEL_169:

          uint64_t v87 = 0;
LABEL_170:
          uint64_t v88 = a1;
          free(v87);
LABEL_171:

          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v89 = (id)qword_1000E4060;
          if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
          {
            CFDictionaryRef v90 = v29;
            *(void *)unsigned int v319 = 0;
            unsigned int v91 = sub_100055404(1);
            CFIndex v92 = v89;
            if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v93 = v91;
            }
            else {
              unsigned int v93 = v91 & 0xFFFFFFFE;
            }
            if (v93)
            {
              LOWORD(v327.st_dev) = 0;
              unsigned int v94 = (char *)_os_log_send_and_compose_impl();

              if (v94) {
                sub_100055434(v94);
              }
            }
            else
            {

              unsigned int v94 = 0;
            }
            uint64_t v88 = a1;
            free(v94);
            CFDictionaryRef v29 = v90;
          }

          if (![(id)qword_1000E4030 splitUserVolumeEnabled])
          {
            unsigned int v101 = &qword_1000E4000;
            goto LABEL_654;
          }
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          v95 = (id)qword_1000E4060;
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
          {
            CFDictionaryRef v96 = v29;
            *(void *)unsigned int v319 = 0;
            unsigned int v97 = sub_100055404(1);
            unsigned int v98 = v95;
            if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v99 = v97;
            }
            else {
              unsigned int v99 = v97 & 0xFFFFFFFE;
            }
            if (v99)
            {
              LOWORD(v327.st_dev) = 0;
              v100 = (char *)_os_log_send_and_compose_impl();

              if (v100) {
                sub_100055434(v100);
              }
            }
            else
            {

              v100 = 0;
            }
            uint64_t v88 = a1;
            free(v100);
            CFDictionaryRef v29 = v96;
          }

          sub_10001C540((uint64_t)v29, v88);
          if (dword_1000E42C0)
          {
            unsigned int v102 = 0;
            goto LABEL_231;
          }
          uint64_t v103 = sub_100018F6C(qword_1000E4318);
          uint64_t v104 = v88;
          uint64_t v105 = v103;
          id v313 = 0;
          unsigned int v106 = [v103 fixupPath:@"/private/var/mobile/Library" withMode:493 toUser:v104 group:v104 error:&v313];
          unsigned int v102 = v313;

          if (v106)
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            int v107 = (id)qword_1000E4060;
            if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
            {
              CFDictionaryRef v108 = v29;
              *(void *)unsigned int v319 = 0;
              unsigned int v109 = sub_100055404(1);
              int v107 = v107;
              if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v110 = v109;
              }
              else {
                unsigned int v110 = v109 & 0xFFFFFFFE;
              }
              if (v110)
              {
                LOWORD(v327.st_dev) = 0;
                goto LABEL_215;
              }
              goto LABEL_226;
            }
          }
          else if (v102)
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            int v107 = (id)qword_1000E4060;
            if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
            {
              CFDictionaryRef v108 = v29;
              *(void *)unsigned int v319 = 0;
              unsigned int v111 = sub_100055404(1);
              int v107 = v107;
              if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v112 = v111;
              }
              else {
                unsigned int v112 = v111 & 0xFFFFFFFE;
              }
              if (v112)
              {
                unsigned int v113 = [v102 code];
                v327.st_dev = 67109120;
                *(_DWORD *)&v327.st_mode = v113;
LABEL_215:
                uint64_t v114 = (char *)_os_log_send_and_compose_impl();

                if (v114) {
                  sub_100055434(v114);
                }
                goto LABEL_227;
              }
LABEL_226:

              uint64_t v114 = 0;
LABEL_227:
              uint64_t v88 = a1;
              free(v114);
              CFDictionaryRef v29 = v108;
LABEL_230:

LABEL_231:
              unsigned int v118 = sub_100088788(v29, kUMUserSessionVolumeDeviceNodeKey);
              if (!v118)
              {
                if (qword_1000E4068 != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                unsigned int v101 = &qword_1000E4000;
                unsigned int v124 = (id)qword_1000E4060;
                if (!os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_652;
                }
                *(void *)unsigned int v319 = 0;
                unsigned int v125 = sub_100055404(1);
                if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v126 = v125;
                }
                else {
                  unsigned int v126 = v125 & 0xFFFFFFFE;
                }
                if (v126)
                {
                  LOWORD(v327.st_dev) = 0;
                  id v127 = (const char *)_os_log_send_and_compose_impl();
                  v128 = v127;
                  if (v127) {
                    sub_100055434(v127);
                  }
                }
                else
                {
                  v128 = 0;
                }
                uint64_t v88 = a1;
                int v136 = (char *)v128;
                goto LABEL_651;
              }
              if (a3)
              {
                if (qword_1000E4068 != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                unsigned int v101 = &qword_1000E4000;
                int v119 = &qword_1000E4000;
                unsigned int v120 = (id)qword_1000E4060;
                if (!os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
                {
LABEL_290:

                  if (!a4 || !_os_feature_enabled_impl())
                  {
                    if (v119[13] != -1) {
                      dispatch_once(&qword_1000E4068, &stru_1000D5598);
                    }
                    unsigned int v124 = (id)qword_1000E4060;
                    if (!os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_652;
                    }
                    *(void *)unsigned int v319 = 0;
                    unsigned int v151 = sub_100055404(1);
                    unsigned int v152 = v124;
                    if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v153 = v151;
                    }
                    else {
                      unsigned int v153 = v151 & 0xFFFFFFFE;
                    }
                    if (v153)
                    {
                      LOWORD(v327.st_dev) = 0;
                      goto LABEL_647;
                    }
LABEL_649:

                    unsigned int v299 = 0;
LABEL_650:
                    uint64_t v88 = a1;
                    int v136 = (char *)v299;
LABEL_651:
                    free(v136);
LABEL_652:

                    goto LABEL_653;
                  }
                  memset(v325, 0, sizeof(v325));
                  long long v324 = 0u;
                  long long v323 = 0u;
                  long long v322 = 0u;
                  long long v321 = 0u;
                  long long v320 = 0u;
                  memset(&v319[20], 0, 128);
                  strcpy(v319, "/private/var/mobile");
                  if (v88 == 501)
                  {
LABEL_639:
                    if (v119[13] != -1) {
                      dispatch_once(&qword_1000E4068, &stru_1000D5598);
                    }
                    unsigned int v124 = (id)qword_1000E4060;
                    if (!os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_652;
                    }
                    *(void *)&v327.st_dev = 0;
                    unsigned int v297 = sub_100055404(1);
                    unsigned int v152 = v124;
                    if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v298 = v297;
                    }
                    else {
                      unsigned int v298 = v297 & 0xFFFFFFFE;
                    }
                    if (v298)
                    {
                      LOWORD(v326.st_dev) = 0;
LABEL_647:
                      unsigned int v299 = (const char *)_os_log_send_and_compose_impl();

                      if (v299) {
                        sub_100055434(v299);
                      }
                      goto LABEL_650;
                    }
                    goto LABEL_649;
                  }
                  if (v119[13] != -1) {
                    dispatch_once(&qword_1000E4068, &stru_1000D5598);
                  }
                  CFTypeID v146 = (id)qword_1000E4060;
                  if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
                  {
                    *(void *)&v326.st_dev = 0;
                    unsigned int v147 = sub_100055404(1);
                    uint64_t v148 = v146;
                    if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v149 = v147;
                    }
                    else {
                      unsigned int v149 = v147 & 0xFFFFFFFE;
                    }
                    if (v149)
                    {
                      v327.st_dev = 67109378;
                      uint64_t v88 = a1;
                      *(_DWORD *)&v327.st_mode = a1;
                      LOWORD(v327.st_ino) = 2080;
                      *(__darwin_ino64_t *)((char *)&v327.st_ino + 2) = (__darwin_ino64_t)v319;
                      unsigned int v150 = (char *)_os_log_send_and_compose_impl();

                      if (v150) {
                        sub_100055434(v150);
                      }
                    }
                    else
                    {

                      unsigned int v150 = 0;
                      uint64_t v88 = a1;
                    }
                    free(v150);
                    int v119 = &qword_1000E4000;
                  }

                  int v289 = sub_100033C80(v88, v319, 1);
                  uint64_t v290 = v119[13];
                  if (v289)
                  {
                    if (v290 != -1) {
                      dispatch_once(&qword_1000E4068, &stru_1000D5598);
                    }
                    v291 = (id)qword_1000E4060;
                    if (!os_log_type_enabled(v291, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_638;
                    }
                    *(void *)&v327.st_dev = 0;
                    unsigned int v292 = sub_100055404(1);
                    v291 = v291;
                    if (os_log_type_enabled(v291, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v293 = v292;
                    }
                    else {
                      unsigned int v293 = v292 & 0xFFFFFFFE;
                    }
                    if (v293)
                    {
                      v326.st_dev = 67109120;
                      uint64_t v88 = a1;
                      *(_DWORD *)&v326.st_mode = a1;
                      goto LABEL_634;
                    }
                  }
                  else
                  {
                    if (v290 != -1) {
                      dispatch_once(&qword_1000E4068, &stru_1000D5598);
                    }
                    v291 = (id)qword_1000E4060;
                    if (!os_log_type_enabled(v291, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_638;
                    }
                    *(void *)&v327.st_dev = 0;
                    unsigned int v294 = sub_100055404(1);
                    v291 = v291;
                    if (os_log_type_enabled(v291, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v295 = v294;
                    }
                    else {
                      unsigned int v295 = v294 & 0xFFFFFFFE;
                    }
                    if (v295)
                    {
                      v326.st_dev = 67109120;
                      uint64_t v88 = a1;
                      *(_DWORD *)&v326.st_mode = a1;
LABEL_634:
                      id v296 = (char *)_os_log_send_and_compose_impl();

                      if (v296) {
                        sub_100055434(v296);
                      }
                      goto LABEL_637;
                    }
                  }

                  id v296 = 0;
                  uint64_t v88 = a1;
LABEL_637:
                  free(v296);
LABEL_638:

                  goto LABEL_639;
                }
                *(void *)unsigned int v319 = 0;
                unsigned int v121 = sub_100055404(1);
                unsigned int v120 = v120;
                if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v122 = v121;
                }
                else {
                  unsigned int v122 = v121 & 0xFFFFFFFE;
                }
                if (v122)
                {
                  LOWORD(v327.st_dev) = 0;
                  CFStringRef v123 = (char *)_os_log_send_and_compose_impl();

                  if (v123) {
                    sub_100055434(v123);
                  }
                }
                else
                {

                  CFStringRef v123 = 0;
                }
                uint64_t v88 = a1;
                free(v123);
LABEL_289:
                int v119 = &qword_1000E4000;
                goto LABEL_290;
              }
              unsigned int v129 = v118;
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              unsigned int v130 = (id)qword_1000E4060;
              if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
              {
                CFDictionaryRef v131 = v29;
                *(void *)&v327.st_dev = 0;
                unsigned int v132 = sub_100055404(1);
                unsigned int v133 = v130;
                if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v134 = v132;
                }
                else {
                  unsigned int v134 = v132 & 0xFFFFFFFE;
                }
                if (v134)
                {
                  *(_DWORD *)unsigned int v319 = 138412546;
                  *(void *)&v319[4] = v129;
                  *(_WORD *)&v319[12] = 1024;
                  *(_DWORD *)&v319[14] = a1;
                  int v135 = (char *)_os_log_send_and_compose_impl();

                  if (v135) {
                    sub_100055434(v135);
                  }
                }
                else
                {

                  int v135 = 0;
                }
                CFDictionaryRef v29 = v131;
                free(v135);
              }

              int v137 = sub_100019308(qword_1000E4318);
              id v312 = 0;
              unsigned int v138 = [v137 mapVolume:v129 toSession:a1 withPersona:0 error:&v312];
              unsigned int v120 = v312;

              unsigned int v101 = &qword_1000E4000;
              if (v138)
              {
                if (qword_1000E4068 != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                uint64_t v139 = (id)qword_1000E4060;
                if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
                {
                  CFDictionaryRef v308 = v29;
                  *(void *)unsigned int v319 = 0;
                  unsigned int v140 = sub_100055404(1);
                  uint64_t v139 = v139;
                  if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v141 = v140;
                  }
                  else {
                    unsigned int v141 = v140 & 0xFFFFFFFE;
                  }
                  if (v141)
                  {
                    LOWORD(v327.st_dev) = 0;
                    goto LABEL_283;
                  }
                  goto LABEL_286;
                }
              }
              else
              {
                if (qword_1000E4068 != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                uint64_t v139 = (id)qword_1000E4060;
                if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
                {
                  CFDictionaryRef v308 = v29;
                  *(void *)&v327.st_dev = 0;
                  unsigned int v142 = sub_100055404(1);
                  uint64_t v139 = v139;
                  if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v143 = v142;
                  }
                  else {
                    unsigned int v143 = v142 & 0xFFFFFFFE;
                  }
                  if (v143)
                  {
                    id v144 = [v120 code];
                    *(_DWORD *)unsigned int v319 = 134217984;
                    *(void *)&v319[4] = v144;
LABEL_283:
                    unsigned int v145 = (char *)_os_log_send_and_compose_impl();

                    if (v145) {
                      sub_100055434(v145);
                    }
                    goto LABEL_287;
                  }
LABEL_286:

                  unsigned int v145 = 0;
LABEL_287:
                  uint64_t v88 = a1;
                  free(v145);
                  CFDictionaryRef v29 = v308;
                  goto LABEL_288;
                }
              }
              uint64_t v88 = a1;
LABEL_288:

              goto LABEL_289;
            }
          }
          else
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            int v107 = (id)qword_1000E4060;
            if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)unsigned int v319 = 0;
              unsigned int v115 = sub_100055404(1);
              int v107 = v107;
              if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v116 = v115;
              }
              else {
                unsigned int v116 = v115 & 0xFFFFFFFE;
              }
              if (v116)
              {
                LOWORD(v327.st_dev) = 0;
                int v117 = (char *)_os_log_send_and_compose_impl();

                if (v117) {
                  sub_100055434(v117);
                }
              }
              else
              {

                int v117 = 0;
              }
              uint64_t v88 = a1;
              free(v117);
              unsigned int v102 = 0;
              goto LABEL_230;
            }
            unsigned int v102 = 0;
          }
          uint64_t v88 = a1;
          goto LABEL_230;
        }
      }
      uint64_t v88 = a1;
      goto LABEL_171;
    }
  }
  sub_100019810("UserManagement loading foreground user failed assertion: [_gUserManager userWithUID:uid] != ((void *)0)", v306, v307);
LABEL_664:
  dispatch_once(&qword_1000E4068, &stru_1000D5598);
LABEL_16:
  unsigned int v14 = (id)qword_1000E4060;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v319 = 0;
    unsigned int v15 = sub_100055404(1);
    id v16 = v14;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v17 = v15;
    }
    else {
      unsigned int v17 = v15 & 0xFFFFFFFE;
    }
    if (v17)
    {
      LOWORD(v327.st_dev) = 0;
      LODWORD(v307) = 2;
      unsigned int v306 = &v327;
      id v18 = (char *)_os_log_send_and_compose_impl();

      if (v18) {
        sub_100055434(v18);
      }
    }
    else
    {

      id v18 = 0;
    }
    free(v18);
  }

  if (v4[13] != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFStringRef v24 = (id)qword_1000E4060;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v319 = 0;
    unsigned int v25 = sub_100055404(1);
    unsigned int v26 = v24;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v27 = v25;
    }
    else {
      unsigned int v27 = v25 & 0xFFFFFFFE;
    }
    if (v27)
    {
      v327.st_dev = 67109120;
      *(_DWORD *)&v327.st_mode = a1;
      LODWORD(v307) = 8;
      unsigned int v306 = &v327;
      unsigned int v28 = (char *)_os_log_send_and_compose_impl();

      if (v28) {
        sub_100055434(v28);
      }
    }
    else
    {

      unsigned int v28 = 0;
    }
    free(v28);
  }

  sub_100056848(v5[7], a1);
  CFDictionaryRef v36 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (v4[13] != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v37 = (id)qword_1000E4060;
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)&v327.st_dev = 0;
    unsigned int v38 = sub_100055404(1);
    unsigned int v39 = v37;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v40 = v38;
    }
    else {
      unsigned int v40 = v38 & 0xFFFFFFFE;
    }
    if (v40)
    {
      *(_DWORD *)unsigned int v319 = 67109378;
      *(_DWORD *)&v319[4] = a1;
      *(_WORD *)&v319[8] = 2112;
      *(void *)&v319[10] = v36;
      LODWORD(v307) = 18;
      unsigned int v306 = (stat *)v319;
      unsigned int v41 = (char *)_os_log_send_and_compose_impl();

      if (v41) {
        sub_100055434(v41);
      }
    }
    else
    {

      unsigned int v41 = 0;
    }
    free(v41);
  }

  if (a1 == 502)
  {
    unsigned int v42 = sub_100018F6C(qword_1000E4318);
    [v42 removeFileAtPath:@"/private/var//keybags/nextsession_opaque.kb" error:0];

    unsigned int v43 = sub_100018F6C(qword_1000E4318);
    [v43 removeFileAtPath:@"/private/var//keybags/nextsession_SBD_opaque.kb" error:0];
  }
  gid_t v310 = sub_1000885F0(v36, kUMUserSessionGroupIDKey);
  uint64_t v44 = sub_100018600(qword_1000E4318);
  int v45 = sub_1000193A8((uint64_t)v44, a1);

  uint64_t v46 = v4[13];
  if (v45)
  {
    if (v46 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v47 = (id)qword_1000E4060;
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)unsigned int v319 = 0;
      unsigned int v48 = sub_100055404(1);
      unsigned int v47 = v47;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v49 = v48;
      }
      else {
        unsigned int v49 = v48 & 0xFFFFFFFE;
      }
      if (v49)
      {
        LOWORD(v327.st_dev) = 0;
        LODWORD(v307) = 2;
        unsigned int v306 = &v327;
        goto LABEL_87;
      }
      goto LABEL_89;
    }
  }
  else
  {
    if (v46 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v47 = (id)qword_1000E4060;
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)unsigned int v319 = 0;
      unsigned int v50 = sub_100055404(1);
      unsigned int v47 = v47;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v51 = v50;
      }
      else {
        unsigned int v51 = v50 & 0xFFFFFFFE;
      }
      if (v51)
      {
        LOWORD(v327.st_dev) = 0;
        LODWORD(v307) = 2;
        unsigned int v306 = &v327;
LABEL_87:
        int v52 = (char *)_os_log_send_and_compose_impl();

        if (v52) {
          sub_100055434(v52);
        }
        goto LABEL_90;
      }
LABEL_89:

      int v52 = 0;
LABEL_90:
      free(v52);
    }
  }

  if (v4[13] != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  id v53 = (id)qword_1000E4060;
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v319 = 0;
    unsigned int v54 = sub_100055404(1);
    unsigned int v55 = v53;
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v56 = v54;
    }
    else {
      unsigned int v56 = v54 & 0xFFFFFFFE;
    }
    if (v56)
    {
      v327.st_dev = 67109120;
      *(_DWORD *)&v327.st_mode = a1;
      LODWORD(v307) = 8;
      unsigned int v306 = &v327;
      unsigned int v57 = (char *)_os_log_send_and_compose_impl();

      if (v57) {
        sub_100055434(v57);
      }
    }
    else
    {

      unsigned int v57 = 0;
    }
    free(v57);
    unsigned int v4 = &qword_1000E4000;
  }

  if (a1 == 502) {
    int v58 = 1;
  }
  else {
    int v58 = 2;
  }
  dword_1000E42C8 = v58;
  dword_1000E42CC = 0;
  memset(&v327, 0, sizeof(v327));
  memset(&v326, 0, sizeof(v326));
  if (lstat("/private/var/mobile", &v327))
  {
    if (v4[13] != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v59 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_331;
    }
    *(void *)CFDictionaryRef v316 = 0;
    int v60 = sub_100055404(1);
    if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
      v60 &= ~1u;
    }
    if (v60) {
      goto LABEL_112;
    }
LABEL_329:
    unsigned int v64 = 0;
LABEL_330:
    free(v64);
    goto LABEL_331;
  }
  int v65 = v327.st_mode & 0xF000;
  if (v65 != 0x4000)
  {
    if (v65 == 40960)
    {
      unsigned int v66 = sub_100018F6C(qword_1000E4318);
      unsigned __int8 v67 = [v66 removeFileAtPath:@"/private/var/mobile" error:0];

      if (v67) {
        goto LABEL_332;
      }
      if (v4[13] != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v59 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_331;
      }
      *(void *)unsigned int v319 = 0;
      unsigned int v68 = sub_100055404(1);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v69 = v68;
      }
      else {
        unsigned int v69 = v68 & 0xFFFFFFFE;
      }
      if (!v69) {
        goto LABEL_329;
      }
      *(_WORD *)CFDictionaryRef v316 = 0;
      LODWORD(v307) = 2;
      unsigned int v306 = (stat *)v316;
    }
    else
    {
      if (v4[13] != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v59 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_331;
      }
      *(void *)unsigned int v319 = 0;
      unsigned int v76 = sub_100055404(1);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v77 = v76;
      }
      else {
        unsigned int v77 = v76 & 0xFFFFFFFE;
      }
      if (!v77) {
        goto LABEL_329;
      }
      *(_DWORD *)CFDictionaryRef v316 = 67109120;
      *(_DWORD *)&v316[4] = v327.st_mode;
      LODWORD(v307) = 8;
      unsigned int v306 = (stat *)v316;
    }
    BOOL v78 = (const char *)_os_log_send_and_compose_impl();
    unsigned int v64 = (void *)v78;
    if (v78) {
      sub_100055434(v78);
    }
    goto LABEL_330;
  }
  if (sub_10001986C("/private/var/mobile", 0x80000))
  {
    if (v4[13] != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v70 = (id)qword_1000E4060;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)CFDictionaryRef v316 = 0;
      int v71 = sub_100055404(1);
      if (!os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT)) {
        v71 &= ~1u;
      }
      if (v71)
      {
        unsigned int v72 = v70;
        unsigned int v73 = __error();
        uint64_t v74 = strerror(*v73);
        *(_DWORD *)unsigned int v319 = 136315138;
        *(void *)&v319[4] = v74;
        LODWORD(v307) = 12;
        unsigned int v306 = (stat *)v319;
        unsigned int v75 = (char *)_os_log_send_and_compose_impl();

        if (v75) {
          sub_100055434(v75);
        }
        unsigned int v4 = &qword_1000E4000;
      }
      else
      {
        unsigned int v75 = 0;
      }
      free(v75);
    }
  }
  if (lstat("/private/var/OLDmobile", &v326))
  {
    rename((const std::__fs::filesystem::path *)"/private/var/mobile", (const std::__fs::filesystem::path *)"/private/var/OLDmobile", v154);
    if (!v155) {
      goto LABEL_332;
    }
    if (v4[13] != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v59 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_331;
    }
    *(void *)CFDictionaryRef v316 = 0;
    int v156 = sub_100055404(1);
    if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
      v156 &= ~1u;
    }
    if (!v156) {
      goto LABEL_329;
    }
    goto LABEL_112;
  }
  if (!rmdir("/private/var/mobile")) {
    goto LABEL_332;
  }
  if (v4[13] != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v59 = (id)qword_1000E4060;
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)CFDictionaryRef v316 = 0;
    int v157 = sub_100055404(1);
    if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
      v157 &= ~1u;
    }
    if (!v157) {
      goto LABEL_329;
    }
LABEL_112:
    char v61 = v59;
    unsigned int v62 = __error();
    unsigned int v63 = strerror(*v62);
    *(_DWORD *)unsigned int v319 = 136315138;
    *(void *)&v319[4] = v63;
    LODWORD(v307) = 12;
    unsigned int v306 = (stat *)v319;
    unsigned int v64 = (void *)_os_log_send_and_compose_impl();

    if (v64) {
      sub_100055434((const char *)v64);
    }
    unsigned int v4 = &qword_1000E4000;
    goto LABEL_330;
  }
LABEL_331:

LABEL_332:
  if (mkdir("/private/var/mobile", 0x1FFu))
  {
    if (v4[13] != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    long long v158 = (id)qword_1000E4060;
    if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)CFDictionaryRef v316 = 0;
      int v159 = sub_100055404(1);
      if (!os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT)) {
        v159 &= ~1u;
      }
      if (v159)
      {
        long long v160 = v158;
        uint64_t v161 = __error();
        long long v162 = strerror(*v161);
        *(_DWORD *)unsigned int v319 = 136315138;
        *(void *)&v319[4] = v162;
        LODWORD(v307) = 12;
        unsigned int v306 = (stat *)v319;
        long long v163 = (char *)_os_log_send_and_compose_impl();

        if (v163) {
          sub_100055434(v163);
        }
        unsigned int v4 = &qword_1000E4000;
      }
      else
      {
        long long v163 = 0;
      }
      free(v163);
    }
  }
  int v164 = chown("/private/var/mobile", a1, v310);
  uint64_t v165 = v4[13];
  if (v164)
  {
    if (v165 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v166 = (id)qword_1000E4060;
    if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)CFDictionaryRef v316 = 0;
      int v167 = sub_100055404(1);
      if (!os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT)) {
        v167 &= ~1u;
      }
      if (v167)
      {
        int v168 = v166;
        unsigned int v169 = __error();
        unsigned int v170 = strerror(*v169);
        *(_DWORD *)unsigned int v319 = 67109634;
        *(_DWORD *)&v319[4] = a1;
        *(_WORD *)&v319[8] = 1024;
        *(_DWORD *)&v319[10] = v310;
        *(_WORD *)&v319[14] = 2080;
        *(void *)&v319[16] = v170;
        LODWORD(v307) = 24;
        unsigned int v306 = (stat *)v319;
        unsigned int v171 = (char *)_os_log_send_and_compose_impl();

        if (v171) {
          sub_100055434(v171);
        }
        unsigned int v4 = &qword_1000E4000;
        goto LABEL_365;
      }
LABEL_364:
      unsigned int v171 = 0;
LABEL_365:
      free(v171);
    }
  }
  else
  {
    if (v165 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v166 = (id)qword_1000E4060;
    if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)CFDictionaryRef v316 = 0;
      unsigned int v172 = sub_100055404(1);
      if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v173 = v172;
      }
      else {
        unsigned int v173 = v172 & 0xFFFFFFFE;
      }
      if (v173)
      {
        *(_DWORD *)unsigned int v319 = 67109376;
        *(_DWORD *)&v319[4] = a1;
        *(_WORD *)&v319[8] = 1024;
        *(_DWORD *)&v319[10] = v310;
        LODWORD(v307) = 14;
        unsigned int v306 = (stat *)v319;
        unsigned int v174 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v171 = (char *)v174;
        if (v174) {
          sub_100055434(v174);
        }
        goto LABEL_365;
      }
      goto LABEL_364;
    }
  }

  bzero(v319, 0x400uLL);
  sub_1000887CC(v36, *v6, v319, 1024);
  if (v4[13] != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  id v175 = (id)qword_1000E4060;
  if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v315 = 0;
    unsigned int v176 = sub_100055404(1);
    if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v177 = v176;
    }
    else {
      unsigned int v177 = v176 & 0xFFFFFFFE;
    }
    if (v177)
    {
      *(_DWORD *)CFDictionaryRef v316 = 136315138;
      *(void *)&v316[4] = v319;
      LODWORD(v307) = 12;
      unsigned int v306 = (stat *)v316;
      unint64_t v178 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v179 = (char *)v178;
      if (v178) {
        sub_100055434(v178);
      }
    }
    else
    {
      unsigned int v179 = 0;
    }
    free(v179);
  }

  int v180 = fsctl("/private/var/", 0x2000410FuLL, v319, 0);
  uint64_t v181 = v4[13];
  if (v180)
  {
    int v182 = v180;
    if (v181 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v183 = (id)qword_1000E4060;
    if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v315 = 0;
      int v184 = sub_100055404(1);
      if (!os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT)) {
        v184 &= ~1u;
      }
      if (v184)
      {
        CFDictionaryRef v185 = v36;
        unsigned int v186 = v183;
        v187 = strerror(v182);
        *(_DWORD *)CFDictionaryRef v316 = 67109634;
        *(_DWORD *)&v316[4] = a1;
        *(_WORD *)&v316[8] = 2080;
        *(void *)&v316[10] = v319;
        __int16 v317 = 2080;
        unsigned int v318 = v187;
        LODWORD(v307) = 28;
        unsigned int v306 = (stat *)v316;
        unsigned int v188 = (char *)_os_log_send_and_compose_impl();

        if (v188) {
          sub_100055434(v188);
        }
        CFDictionaryRef v36 = v185;
      }
      else
      {
        unsigned int v188 = 0;
      }
      unsigned int v4 = &qword_1000E4000;
      free(v188);
    }
  }
  else
  {
    if (v181 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFDataRef v189 = (id)qword_1000E4060;
    if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v315 = 0;
      unsigned int v190 = sub_100055404(1);
      if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v191 = v190;
      }
      else {
        unsigned int v191 = v190 & 0xFFFFFFFE;
      }
      if (v191)
      {
        *(_DWORD *)CFDictionaryRef v316 = 67109378;
        *(_DWORD *)&v316[4] = a1;
        *(_WORD *)&v316[8] = 2080;
        *(void *)&v316[10] = v319;
        LODWORD(v307) = 18;
        unsigned int v306 = (stat *)v316;
        unsigned int v192 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v193 = (char *)v192;
        if (v192) {
          sub_100055434(v192);
        }
      }
      else
      {
        unsigned int v193 = 0;
      }
      free(v193);
    }

    sub_100033C80(a1, v319, 1);
  }
  strcpy(v319, "/private/var/DELETED");
  if (!lstat("/private/var/DELETED", &v327))
  {
    int v200 = sub_10002DFE4(v319);
    uint64_t v201 = v4[13];
    if (v200)
    {
      if (v201 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v194 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_433;
      }
      uint64_t v315 = 0;
      unsigned int v202 = sub_100055404(1);
      if (os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v203 = v202;
      }
      else {
        unsigned int v203 = v202 & 0xFFFFFFFE;
      }
      if (!v203) {
        goto LABEL_431;
      }
      *(_DWORD *)CFDictionaryRef v316 = 136315138;
      *(void *)&v316[4] = v319;
      LODWORD(v307) = 12;
      unsigned int v306 = (stat *)v316;
    }
    else
    {
      if (v201 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v194 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_433;
      }
      uint64_t v315 = 0;
      unsigned int v204 = sub_100055404(1);
      if (os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v205 = v204;
      }
      else {
        unsigned int v205 = v204 & 0xFFFFFFFE;
      }
      if (!v205) {
        goto LABEL_431;
      }
      *(_DWORD *)CFDictionaryRef v316 = 136315138;
      *(void *)&v316[4] = v319;
      LODWORD(v307) = 12;
      unsigned int v306 = (stat *)v316;
    }
    unsigned int v206 = (const char *)_os_log_send_and_compose_impl();
    CFDictionaryRef v199 = (char *)v206;
    if (v206) {
      sub_100055434(v206);
    }
    goto LABEL_432;
  }
  if (v4[13] != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v194 = (id)qword_1000E4060;
  if (os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v315 = 0;
    int v195 = sub_100055404(1);
    if (!os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT)) {
      v195 &= ~1u;
    }
    if (v195)
    {
      unsigned int v196 = v194;
      unsigned int v197 = __error();
      CFDictionaryRef v198 = strerror(*v197);
      *(_DWORD *)CFDictionaryRef v316 = 136315138;
      *(void *)&v316[4] = v198;
      LODWORD(v307) = 12;
      unsigned int v306 = (stat *)v316;
      CFDictionaryRef v199 = (char *)_os_log_send_and_compose_impl();

      if (v199) {
        sub_100055434(v199);
      }
      unsigned int v4 = &qword_1000E4000;
      goto LABEL_432;
    }
LABEL_431:
    CFDictionaryRef v199 = 0;
LABEL_432:
    free(v199);
  }
LABEL_433:

  if (v4[13] != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  v207 = (id)qword_1000E4060;
  if (os_log_type_enabled(v207, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v319 = 0;
    unsigned int v208 = sub_100055404(1);
    if (os_log_type_enabled(v207, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v209 = v208;
    }
    else {
      unsigned int v209 = v208 & 0xFFFFFFFE;
    }
    if (v209)
    {
      v327.st_dev = 67109120;
      *(_DWORD *)&v327.st_mode = 2;
      LODWORD(v307) = 8;
      unsigned int v306 = &v327;
      unsigned int v210 = (const char *)_os_log_send_and_compose_impl();
      v211 = (char *)v210;
      if (v210) {
        sub_100055434(v210);
      }
    }
    else
    {
      v211 = 0;
    }
    free(v211);
  }
  unsigned int v309 = v36;

  uint64_t v212 = 0;
  char v213 = 1;
  uint64_t v88 = a1;
  do
  {
    char v214 = v213;
    memset(v319, 0, 144);
    unsigned int v215 = (&off_1000D5420)[6 * v212];
    int v216 = stat(v215, (stat *)v319);
    uint64_t v217 = v4[13];
    if (v216)
    {
      if (v217 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      char v218 = (id)qword_1000E4060;
      if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)&v326.st_dev = 0;
        unsigned int v219 = sub_100055404(1);
        if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v220 = v219;
        }
        else {
          unsigned int v220 = v219 & 0xFFFFFFFE;
        }
        if (v220)
        {
          v327.st_dev = 136315138;
          *(void *)&v327.st_mode = v215;
          LODWORD(v307) = 12;
          unsigned int v306 = &v327;
          unsigned int v221 = (const char *)_os_log_send_and_compose_impl();
          v222 = (char *)v221;
          if (v221) {
            sub_100055434(v221);
          }
        }
        else
        {
          v222 = 0;
        }
        free(v222);
        unsigned int v4 = &qword_1000E4000;
      }

      if (mkpath_np(v215, 0x1EDu))
      {
        if (v4[13] != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v228 = (id)qword_1000E4060;
        if (os_log_type_enabled(v228, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)&v326.st_dev = 0;
          int v229 = sub_100055404(1);
          if (!os_log_type_enabled(v228, OS_LOG_TYPE_DEFAULT)) {
            v229 &= ~1u;
          }
          if (v229)
          {
            v230 = v228;
            unsigned int v231 = __error();
            unsigned int v232 = strerror(*v231);
            v327.st_dev = 136315394;
            *(void *)&v327.st_mode = v215;
            WORD2(v327.st_ino) = 2080;
            *(__darwin_ino64_t *)((char *)&v327.st_ino + 6) = (__darwin_ino64_t)v232;
            LODWORD(v307) = 22;
            unsigned int v306 = &v327;
            unsigned int v233 = (char *)_os_log_send_and_compose_impl();

            if (v233) {
              sub_100055434(v233);
            }
            uint64_t v88 = a1;
          }
          else
          {
            unsigned int v233 = 0;
          }
          free(v233);
          unsigned int v4 = &qword_1000E4000;
        }
      }
    }
    else
    {
      if (v217 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v223 = (id)qword_1000E4060;
      if (os_log_type_enabled(v223, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)&v326.st_dev = 0;
        unsigned int v224 = sub_100055404(1);
        if (os_log_type_enabled(v223, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v225 = v224;
        }
        else {
          unsigned int v225 = v224 & 0xFFFFFFFE;
        }
        if (v225)
        {
          v327.st_dev = 136315138;
          *(void *)&v327.st_mode = v215;
          LODWORD(v307) = 12;
          unsigned int v306 = &v327;
          unsigned int v226 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v227 = (char *)v226;
          if (v226) {
            sub_100055434(v226);
          }
        }
        else
        {
          unsigned int v227 = 0;
        }
        uint64_t v88 = a1;
        free(v227);
        unsigned int v4 = &qword_1000E4000;
      }

      if (*(_DWORD *)&v319[16] != v88 || *(_DWORD *)&v319[20] != v310)
      {
        if (!chown(v215, v88, v310))
        {
          if (v4[13] != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v234 = (id)qword_1000E4060;
          if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)&v326.st_dev = 0;
            unsigned int v235 = sub_100055404(1);
            if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v236 = v235;
            }
            else {
              unsigned int v236 = v235 & 0xFFFFFFFE;
            }
            if (v236)
            {
              BOOL v237 = v234;
              unsigned int v238 = __error();
              unsigned int v239 = strerror(*v238);
              v327.st_dev = 136315394;
              *(void *)&v327.st_mode = v215;
              WORD2(v327.st_ino) = 2080;
              *(__darwin_ino64_t *)((char *)&v327.st_ino + 6) = (__darwin_ino64_t)v239;
              LODWORD(v307) = 22;
              unsigned int v306 = &v327;
              CFNumberRef v240 = (char *)_os_log_send_and_compose_impl();

              if (v240) {
                sub_100055434(v240);
              }
            }
            else
            {
              CFNumberRef v240 = 0;
            }
            uint64_t v88 = a1;
            free(v240);
            unsigned int v4 = &qword_1000E4000;
          }
        }
        sub_10001E7D0(v215, v88);
      }
    }
    char v213 = 0;
    uint64_t v212 = 1;
  }
  while ((v214 & 1) != 0);
  unsigned int v101 = &qword_1000E4000;
  CFDictionaryRef v29 = v309;
  if (v88 == 502)
  {
    CFNumberRef v241 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v241)
    {
      CFNumberRef v242 = v241;
      CFDictionarySetValue(v309, kUMUserSessionPreviousLoggedinIDKey, v241);
      CFRelease(v242);
    }
    CFStringRef v243 = (const __CFString *)sub_100088788(v309, kUMUserSessionHomeDirKey);
    sub_10007ED6C(v243, 0x1F6u, 0x1F6u);
    if (!CFDictionaryContainsKey(v309, kUMUserSessionLanguageKey)) {
      CFDictionarySetValue(v309, kUMUserSessionLanguageKey, @"en_US");
    }
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v245 = CFDateCreate(kCFAllocatorDefault, Current);
  CFDictionaryReplaceValue(v309, kUMUserSessionLoginTimeStampKey, v245);
  if (v245) {
    CFRelease(v245);
  }
  if (objc_msgSend((id)qword_1000E4030, "splitUserVolumeEnabled", v306, v307))
  {
LABEL_506:
    if (v88 != 502)
    {
      if (v4[13] != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v246 = (id)qword_1000E4060;
      if (os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)unsigned int v319 = 0;
        unsigned int v247 = sub_100055404(1);
        unsigned int v248 = v246;
        if (os_log_type_enabled(v248, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v249 = v247;
        }
        else {
          unsigned int v249 = v247 & 0xFFFFFFFE;
        }
        if (v249)
        {
          v327.st_dev = 67109120;
          uint64_t v88 = a1;
          *(_DWORD *)&v327.st_mode = a1;
          v250 = (char *)_os_log_send_and_compose_impl();

          if (v250) {
            sub_100055434(v250);
          }
        }
        else
        {

          v250 = 0;
          uint64_t v88 = a1;
        }
        free(v250);
      }

      sub_10001E154(v88);
    }
    sub_10001E06C(v309, v88);
    if (v4[13] != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    id v268 = (id)qword_1000E4060;
    if (os_log_type_enabled(v268, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)unsigned int v319 = 0;
      unsigned int v269 = sub_100055404(1);
      unsigned int v270 = v268;
      if (os_log_type_enabled(v270, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v271 = v269;
      }
      else {
        unsigned int v271 = v269 & 0xFFFFFFFE;
      }
      if (v271)
      {
        v327.st_dev = 67109120;
        uint64_t v88 = a1;
        *(_DWORD *)&v327.st_mode = a1;
        unsigned int v272 = (char *)_os_log_send_and_compose_impl();

        if (v272) {
          sub_100055434(v272);
        }
      }
      else
      {

        unsigned int v272 = 0;
        uint64_t v88 = a1;
      }
      free(v272);
    }

    CFDictionarySetValue(v309, kUMUserSessionForegroundKey, kCFBooleanTrue);
    sub_10001A7BC();
    sub_100081D1C();
    uint64_t v273 = v4[13];
    if (dword_1000E42F0 < 1)
    {
      if (v273 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v81 = &qword_1000E4000;
      unsigned int v102 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_653;
      }
      *(void *)unsigned int v319 = 0;
      unsigned int v279 = sub_100055404(1);
      unsigned int v102 = v102;
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v280 = v279;
      }
      else {
        unsigned int v280 = v279 & 0xFFFFFFFE;
      }
      if (v280)
      {
        LOWORD(v327.st_dev) = 0;
        unsigned int v281 = (char *)_os_log_send_and_compose_impl();

        if (v281) {
          sub_100055434(v281);
        }
      }
      else
      {

        unsigned int v281 = 0;
      }
      uint64_t v88 = a1;
      goto LABEL_611;
    }
    if (v273 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v274 = (id)qword_1000E4060;
    if (os_log_type_enabled(v274, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)unsigned int v319 = 0;
      unsigned int v275 = sub_100055404(1);
      unsigned int v276 = v274;
      if (os_log_type_enabled(v276, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v277 = v275;
      }
      else {
        unsigned int v277 = v275 & 0xFFFFFFFE;
      }
      if (v277)
      {
        v327.st_dev = 67109120;
        *(_DWORD *)&v327.st_mode = dword_1000E42F0;
        v278 = (char *)_os_log_send_and_compose_impl();

        if (v278) {
          sub_100055434(v278);
        }
      }
      else
      {

        v278 = 0;
      }
      uint64_t v88 = a1;
      free(v278);
    }

    BOOL v282 = sub_10001E9B0(dword_1000E42F0);
    uint64_t v283 = v4[13];
    if (v282)
    {
      if (v283 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v102 = (id)qword_1000E4060;
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)unsigned int v319 = 0;
        unsigned int v284 = sub_100055404(1);
        unsigned int v102 = v102;
        if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v285 = v284;
        }
        else {
          unsigned int v285 = v284 & 0xFFFFFFFE;
        }
        if (v285)
        {
          v327.st_dev = 67109120;
          *(_DWORD *)&v327.st_mode = dword_1000E42F0;
          goto LABEL_599;
        }
        goto LABEL_602;
      }
    }
    else
    {
      if (v283 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v102 = (id)qword_1000E4060;
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)unsigned int v319 = 0;
        unsigned int v286 = sub_100055404(1);
        unsigned int v102 = v102;
        if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v287 = v286;
        }
        else {
          unsigned int v287 = v286 & 0xFFFFFFFE;
        }
        if (v287)
        {
          v327.st_dev = 67109120;
          *(_DWORD *)&v327.st_mode = dword_1000E42F0;
LABEL_599:
          unsigned int v281 = (char *)_os_log_send_and_compose_impl();

          if (v281) {
            sub_100055434(v281);
          }
          goto LABEL_603;
        }
LABEL_602:

        unsigned int v281 = 0;
LABEL_603:
        uint64_t v88 = a1;
        unsigned int v81 = &qword_1000E4000;
LABEL_611:
        free(v281);
        goto LABEL_653;
      }
    }
    unsigned int v81 = &qword_1000E4000;
LABEL_653:

LABEL_654:
    CFStringRef v300 = (const __CFString *)sub_100088788(v29, kUMUserSessionHomeDirKey);
    int v301 = sub_1000825B8(v300, v88, v88);
    if (v301)
    {
      uint64_t v305 = sub_100019810("failed to register the exclaves writable storage: %d\n", v301);
      return sub_100045404(v305);
    }
    else
    {
      if (v29) {
        CFRelease(v29);
      }
      if (*((_DWORD *)v81 + 176) != 1)
      {
        CFDictionaryRef v302 = sub_100056A6C(v101[7], v88);
        uint64_t v303 = v88;
        unsigned int v304 = v302;
        sub_100064278((id *)qword_1000E4040, v302, v303);
      }
      return 1;
    }
  }
  if (v4[13] != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v251 = (id)qword_1000E4060;
  if (os_log_type_enabled(v251, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v319 = 0;
    unsigned int v252 = sub_100055404(1);
    unsigned int v253 = v251;
    if (os_log_type_enabled(v253, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v254 = v252;
    }
    else {
      unsigned int v254 = v252 & 0xFFFFFFFE;
    }
    if (v254)
    {
      v327.st_dev = 67109120;
      uint64_t v88 = a1;
      *(_DWORD *)&v327.st_mode = a1;
      unsigned int v255 = (char *)_os_log_send_and_compose_impl();

      if (v255) {
        sub_100055434(v255);
      }
    }
    else
    {

      unsigned int v255 = 0;
      uint64_t v88 = a1;
    }
    free(v255);
  }

  if (!MKBUserSessionLoadKeybagForUser())
  {
    int v261 = MKBUserSessionUnloadSessionBags();
    if (v261)
    {
      int v262 = v261;
      if (v4[13] != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      v263 = (id)qword_1000E4060;
      if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)unsigned int v319 = 0;
        unsigned int v264 = sub_100055404(1);
        v265 = v263;
        if (os_log_type_enabled(v265, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v266 = v264;
        }
        else {
          unsigned int v266 = v264 & 0xFFFFFFFE;
        }
        if (v266)
        {
          v327.st_dev = 67109120;
          *(_DWORD *)&v327.st_mode = v262;
          int v267 = (char *)_os_log_send_and_compose_impl();

          if (v267) {
            sub_100055434(v267);
          }
        }
        else
        {

          int v267 = 0;
        }
        uint64_t v88 = a1;
        free(v267);
      }
    }
    goto LABEL_506;
  }
  if (v4[13] != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v256 = (id)qword_1000E4060;
  if (os_log_type_enabled(v256, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v319 = 0;
    unsigned int v257 = sub_100055404(1);
    CFDictionaryRef v258 = v256;
    if (os_log_type_enabled(v258, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v259 = v257;
    }
    else {
      unsigned int v259 = v257 & 0xFFFFFFFE;
    }
    if (v259)
    {
      LOWORD(v327.st_dev) = 0;
      CFStringRef v260 = (char *)_os_log_send_and_compose_impl();

      if (v260) {
        sub_100055434(v260);
      }
    }
    else
    {

      CFStringRef v260 = 0;
    }
    free(v260);
  }

  if (v309) {
    CFRelease(v309);
  }
  return 0;
}

uint64_t sub_100045404()
{
  uint64_t v0 = sub_100059DA4((uint64_t)UMDAPFSSupportVolumeHelper, (void *)qword_1000E4318, byte_1000E4312);
  unsigned int v1 = (void *)qword_1000E4030;
  qword_1000E4030 = v0;

  uint64_t v2 = sub_100056444((uint64_t)UMDUserManager, (void *)qword_1000E4030);
  unsigned int v3 = (void *)qword_1000E4038;
  qword_1000E4038 = v2;

  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v4 = (id)qword_1000E4060;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v39 = 0;
    unsigned int v5 = sub_100055404(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = v5 & 0xFFFFFFFE;
    }
    if (v6)
    {
      LOWORD(v37) = 0;
      int v36 = 2;
      uint64_t v35 = (unsigned int *)&v37;
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      CFTypeID v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      CFTypeID v8 = 0;
    }
    free(v8);
  }

  if (!sub_10004008C(0))
  {
    sub_100019810("UserManagement user switch task failed to load user manifest");
LABEL_66:
    sub_1000578D4(qword_1000E4038);
    sub_100019810("UserManagement user switch task next session bag missing or corrupt");
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v9 = (id)qword_1000E4060;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v39 = 0;
    unsigned int v10 = sub_100055404(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = v10 & 0xFFFFFFFE;
    }
    if (v11)
    {
      LOWORD(v37) = 0;
      int v36 = 2;
      uint64_t v35 = (unsigned int *)&v37;
      unsigned int v12 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v13 = (char *)v12;
      if (v12) {
        sub_100055434(v12);
      }
    }
    else
    {
      unsigned int v13 = 0;
    }
    free(v13);
  }

  sub_100019084(qword_1000E4038, (void *)qword_1000E42B0);
  if (dword_1000E42C0 != 1)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v14 = (id)qword_1000E4060;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)unsigned int v39 = 0;
      unsigned int v15 = sub_100055404(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = v15 & 0xFFFFFFFE;
      }
      if (v16)
      {
        LOWORD(v37) = 0;
        int v36 = 2;
        uint64_t v35 = (unsigned int *)&v37;
        unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
        id v18 = (char *)v17;
        if (v17) {
          sub_100055434(v17);
        }
      }
      else
      {
        id v18 = 0;
      }
      free(v18);
    }

    if (qword_1000E4040)
    {
      sub_100019810("UserManagement user switch failed assertion: _gPersonaManager == ((void *)0)");
    }
    else
    {
      uint64_t v19 = sub_100059FF4((uint64_t)UMDPersonaManager, (void *)qword_1000E4038);
      unsigned int v20 = (void *)qword_1000E4040;
      qword_1000E4040 = v19;

      int v38 = 0;
      if (!sub_10004041C(&v38))
      {
LABEL_68:
        unsigned int v33 = sub_100019810("UserManagement user switch task failed to load persona manifest", v35, v36);
        return sub_1000459D4(v33, v34);
      }
      if (qword_1000E4088 == -1) {
        goto LABEL_39;
      }
    }
    dispatch_once(&qword_1000E4088, &stru_1000D55D8);
LABEL_39:
    unsigned int v21 = (id)qword_1000E4080;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)unsigned int v39 = 0;
      unsigned int v22 = sub_100055404(0);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v23 = v22;
      }
      else {
        unsigned int v23 = v22 & 0xFFFFFFFE;
      }
      if (v23)
      {
        LOWORD(v37) = 0;
        int v36 = 2;
        uint64_t v35 = (unsigned int *)&v37;
        CFStringRef v24 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v25 = (char *)v24;
        if (v24) {
          sub_100055434(v24);
        }
      }
      else
      {
        unsigned int v25 = 0;
      }
      free(v25);
    }

    if (qword_1000E4088 != -1) {
      dispatch_once(&qword_1000E4088, &stru_1000D55D8);
    }
    unsigned int v26 = (id)qword_1000E4080;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v37 = 0;
      int v27 = sub_100055404(0);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
        v27 &= ~1u;
      }
      if (v27)
      {
        uint64_t v28 = qword_1000E4040;
        CFDictionaryRef v29 = v26;
        unsigned int v30 = sub_100018F6C(v28);
        v39[0] = 138412290;
        *(void *)&v39[1] = v30;
        int v36 = 12;
        uint64_t v35 = v39;
        CFDictionaryRef v31 = (char *)_os_log_send_and_compose_impl();

        if (v31) {
          sub_100055434(v31);
        }
      }
      else
      {
        CFDictionaryRef v31 = 0;
      }
      free(v31);
    }
  }
  v39[0] = -1;
  LODWORD(v37) = -1;
  if ((sub_1000576AC(qword_1000E4038, &v37, v39) & 1) == 0) {
    goto LABEL_66;
  }
  uint64_t result = sub_1000459D4(v39[0], v37);
  if (result)
  {
    uint64_t result = (uint64_t)sub_1000578D4(qword_1000E4038);
    if ((result & 1) == 0)
    {
      sub_100019810("UserManagement user switch task failed to remove nextSession file");
      goto LABEL_68;
    }
  }
  return result;
}

uint64_t sub_1000459D4(unsigned int a1, uint64_t a2)
{
  if (qword_1000E4078 != -1) {
    dispatch_once(&qword_1000E4078, &stru_1000D55B8);
  }
  unsigned int v4 = (id)qword_1000E4070;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = sub_100055404(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = v5 & 0xFFFFFFFE;
    }
    if (v6)
    {
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      CFTypeID v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      CFTypeID v8 = 0;
    }
    free(v8);
  }

  if (a2 == -1) {
    sub_100019810("UserManagement user switch failed assertion: currentSessionID != -1");
  }
  if (a2 != a1) {
    sub_10005261C(a2);
  }
  return sub_100041D18(a1, a2, 0, 1);
}

uint64_t sub_100045B54(_removefile_state *a1, const char *a2, int *a3)
{
  int dst = 0;
  if (removefile_state_get(a1, 5u, &dst))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v5 = (id)qword_1000E4060;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)unsigned int v33 = 0;
      unsigned int v6 = sub_100055404(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
        v36.st_dev = 136315138;
        *(void *)&v36.st_mode = a2;
        CFTypeID v8 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v9 = (char *)v8;
        if (v8) {
          sub_100055434(v8);
        }
      }
      else
      {
        unsigned int v9 = 0;
      }
      free(v9);
    }

    int dst = 2;
    goto LABEL_23;
  }
  if (dst == 2) {
    goto LABEL_23;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v10 = (id)qword_1000E4060;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v33 = 0;
    int v11 = sub_100055404(1);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      v11 &= ~1u;
    }
    if (v11)
    {
      int v12 = dst;
      unsigned int v13 = v10;
      unsigned int v14 = strerror(v12);
      v36.st_dev = 136315394;
      *(void *)&v36.st_mode = a2;
      WORD2(v36.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v36.st_ino + 6) = (__darwin_ino64_t)v14;
      unsigned int v15 = (char *)_os_log_send_and_compose_impl();

      if (v15) {
        sub_100055434(v15);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    free(v15);
  }

  if (dst != 1) {
    goto LABEL_23;
  }
  memset(&v36, 0, sizeof(v36));
  if (lstat(a2, &v36))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v17 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    int v18 = sub_100055404(1);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      v18 &= ~1u;
    }
    if (v18) {
      goto LABEL_37;
    }
    goto LABEL_47;
  }
  if ((v36.st_flags & 2) == 0)
  {
LABEL_23:
    if (a3 && !*a3) {
      *a3 = dst;
    }
    return 0;
  }
  if (lchflags(a2, v36.st_flags & 0xFFFFFFFD))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v17 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    int v23 = sub_100055404(1);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      v23 &= ~1u;
    }
    if (v23)
    {
LABEL_37:
      uint64_t v19 = v17;
      unsigned int v20 = __error();
      unsigned int v21 = strerror(*v20);
      *(_DWORD *)unsigned int v33 = 136315394;
      *(void *)&v33[4] = a2;
      __int16 v34 = 2080;
      uint64_t v35 = v21;
      unsigned int v22 = (char *)_os_log_send_and_compose_impl();

      if (v22) {
        sub_100055434(v22);
      }
      goto LABEL_48;
    }
LABEL_47:
    unsigned int v22 = 0;
LABEL_48:
    free(v22);
LABEL_49:

    goto LABEL_23;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFStringRef v24 = (id)qword_1000E4060;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v25 = sub_100055404(1);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = v25 & 0xFFFFFFFE;
    }
    if (v26)
    {
      *(_DWORD *)unsigned int v33 = 136315138;
      *(void *)&v33[4] = a2;
      int v27 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v28 = (char *)v27;
      if (v27) {
        sub_100055434(v27);
      }
    }
    else
    {
      uint64_t v28 = 0;
    }
    free(v28);
  }

  CFDictionaryRef v29 = sub_100018F6C(qword_1000E4318);
  unsigned int v30 = +[NSString stringWithUTF8String:a2];
  unsigned __int8 v31 = [v29 removeFileAtPath:v30 error:0];

  if ((v31 & 1) == 0) {
    goto LABEL_23;
  }
  return 0;
}

uint64_t sub_100046114(const __CFDictionary *a1)
{
  uint64_t v2 = (void *)sub_100088788(a1, kUMUserSessionUUIDKey);
  uint64_t v3 = sub_1000885F0(a1, kMKBUserSessionIDKey);
  if (v2)
  {
    uint64_t v4 = v3;
    unsigned int v5 = sub_1000173F4((uint64_t)NSUUID, v2);
    if (v5)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v6 = (id)qword_1000E4060;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = 0;
        unsigned int v7 = sub_100055404(1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v7 & 0xFFFFFFFE;
        }
        if (v8)
        {
          LOWORD(v43) = 0;
          unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v10 = (char *)v9;
          if (v9) {
            sub_100055434(v9);
          }
        }
        else
        {
          unsigned int v10 = 0;
        }
        free(v10);
      }

      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v20 = (id)qword_1000E4060;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = 0;
        unsigned int v21 = sub_100055404(1);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v22 = v21;
        }
        else {
          unsigned int v22 = v21 & 0xFFFFFFFE;
        }
        if (v22)
        {
          LODWORD(v43) = 67109120;
          HIDWORD(v43) = v4;
          int v23 = (const char *)_os_log_send_and_compose_impl();
          CFStringRef v24 = (char *)v23;
          if (v23) {
            sub_100055434(v23);
          }
        }
        else
        {
          CFStringRef v24 = 0;
        }
        free(v24);
      }

      unsigned int v25 = sub_100019308(qword_1000E4318);
      id v39 = 0;
      unsigned __int8 v26 = [v25 loadIdentity:v5 intoSession:v4 error:&v39];
      unsigned int v15 = v39;

      if (v26)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        int v27 = (id)qword_1000E4060;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v40 = 0;
          unsigned int v28 = sub_100055404(1);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v29 = v28;
          }
          else {
            unsigned int v29 = v28 & 0xFFFFFFFE;
          }
          if (v29)
          {
            LODWORD(v43) = 67109120;
            HIDWORD(v43) = v4;
            unsigned int v30 = (const char *)_os_log_send_and_compose_impl();
            unsigned __int8 v31 = (char *)v30;
            if (v30) {
              sub_100055434(v30);
            }
          }
          else
          {
            unsigned __int8 v31 = 0;
          }
          free(v31);
        }

        uint64_t v37 = 1;
        goto LABEL_73;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v32 = (id)qword_1000E4060;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v43 = 0;
        int v33 = sub_100055404(1);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
          v33 &= ~1u;
        }
        if (v33)
        {
          __int16 v34 = v32;
          id v35 = [v15 code];
          LODWORD(v40) = 67109376;
          HIDWORD(v40) = v4;
          __int16 v41 = 2048;
          id v42 = v35;
          stat v36 = (char *)_os_log_send_and_compose_impl();

          if (v36) {
            sub_100055434(v36);
          }
        }
        else
        {
          stat v36 = 0;
        }
        free(v36);
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v15 = (id)qword_1000E4060;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = 0;
        unsigned int v16 = sub_100055404(1);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v17 = v16;
        }
        else {
          unsigned int v17 = v16 & 0xFFFFFFFE;
        }
        if (v17)
        {
          LOWORD(v43) = 0;
          int v18 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v19 = (char *)v18;
          if (v18) {
            sub_100055434(v18);
          }
        }
        else
        {
          uint64_t v19 = 0;
        }
        free(v19);
      }
    }
    uint64_t v37 = 0;
LABEL_73:

    goto LABEL_74;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v5 = (id)qword_1000E4060;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v40 = 0;
    unsigned int v11 = sub_100055404(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v12 = v11;
    }
    else {
      unsigned int v12 = v11 & 0xFFFFFFFE;
    }
    if (v12)
    {
      LOWORD(v43) = 0;
      unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v14 = (char *)v13;
      if (v13) {
        sub_100055434(v13);
      }
    }
    else
    {
      unsigned int v14 = 0;
    }
    free(v14);
  }
  uint64_t v37 = 0;
LABEL_74:

  return v37;
}

id sub_10004671C(const __CFDictionary *a1)
{
  uint64_t v1 = sub_1000885F0(a1, kMKBUserSessionIDKey);
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  uint64_t v2 = (id)qword_1000E4060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = 0;
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      LODWORD(v22) = 67109120;
      HIDWORD(v22) = v1;
      unsigned int v5 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  unsigned int v7 = sub_100019308(qword_1000E4318);
  id v18 = 0;
  id v8 = [v7 unloadIdentityFromSession:v1 error:&v18];
  id v9 = v18;

  if (v8)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v10 = (id)qword_1000E4060;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = 0;
      unsigned int v11 = sub_100055404(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v12 = v11;
      }
      else {
        unsigned int v12 = v11 & 0xFFFFFFFE;
      }
      if (v12)
      {
        LODWORD(v22) = 67109120;
        HIDWORD(v22) = v1;
        unsigned int v13 = (void *)_os_log_send_and_compose_impl();
        if (!v13) {
          goto LABEL_31;
        }
        goto LABEL_29;
      }
      goto LABEL_30;
    }
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v10 = (id)qword_1000E4060;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = 0;
      int v14 = sub_100055404(1);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        v14 &= ~1u;
      }
      if (v14)
      {
        unsigned int v15 = v10;
        id v16 = [v9 code];
        LODWORD(v19) = 67109376;
        HIDWORD(v19) = v1;
        __int16 v20 = 2048;
        id v21 = v16;
        unsigned int v13 = (void *)_os_log_send_and_compose_impl();

        if (!v13)
        {
LABEL_31:
          free(v13);
          goto LABEL_32;
        }
LABEL_29:
        sub_100055434((const char *)v13);
        goto LABEL_31;
      }
LABEL_30:
      unsigned int v13 = 0;
      goto LABEL_31;
    }
  }
LABEL_32:

  return v8;
}

CFArrayRef sub_100046A60(void *a1)
{
  uint64_t v1 = sub_10005C160(qword_1000E4040, a1);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  sub_10005B430((id)qword_1000E4040, 0, v1);
  CFDictionaryRef v3 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    if (CFDictionaryContainsKey(v3, off_1000E32F8) && (CFArrayRef v5 = (const __CFArray *)sub_1000885B4(v4, off_1000E32F8)) != 0) {
      CFArrayRef Copy = CFArrayCreateCopy(kCFAllocatorDefault, v5);
    }
    else {
      CFArrayRef Copy = 0;
    }
    CFRelease(v4);
  }
  else
  {
    CFArrayRef Copy = 0;
  }
  CFRelease(v2);
  return Copy;
}

uint64_t sub_100046B20(uint64_t a1)
{
  uint64_t v2 = sub_100018F6C(qword_1000E4040);

  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  CFDictionaryRef v3 = sub_1000185F4(qword_1000E4318);
  id v13 = 0;
  CFDictionaryRef v4 = [v3 infoForProcessWithPID:a1 error:&v13];
  id v5 = v13;

  if (v4)
  {
    uint64_t v6 = sub_100058F38((uint64_t)v4);
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v7 = (id)qword_1000E4060;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9)
      {
        int v14 = 67109378;
        int v15 = a1;
        __int16 v16 = 2112;
        id v17 = v5;
        unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
      }
      else
      {
        unsigned int v11 = 0;
      }
      free(v11);
    }

    uint64_t v6 = 0xFFFFFFFFLL;
  }

  return v6;
}

__CFString *sub_100046CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef v4 = sub_100018F6C(qword_1000E4040);

  if (v4)
  {
    id v5 = sub_1000185F4(qword_1000E4318);
    id v17 = 0;
    uint64_t v6 = [v5 infoForPersonaWithID:a3 error:&v17];
    id v7 = v17;

    if (v6)
    {
      if (sub_100066D48((uint64_t)v6) == -1)
      {
        unsigned int v10 = @"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF";
      }
      else
      {
        uint64_t v8 = qword_1000E4038;
        int v9 = sub_100066D48((uint64_t)v6);
        sub_100056A6C(v8, v9);
        unsigned int v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      if (qword_1000E4088 != -1) {
        dispatch_once(&qword_1000E4088, &stru_1000D55D8);
      }
      unsigned int v11 = (id)qword_1000E4080;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        unsigned int v12 = sub_100055404(0);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          unsigned int v13 = v12;
        }
        else {
          unsigned int v13 = v12 & 0xFFFFFFFE;
        }
        if (v13)
        {
          int v18 = 67109378;
          int v19 = a3;
          __int16 v20 = 2112;
          id v21 = v7;
          int v14 = (const char *)_os_log_send_and_compose_impl();
          int v15 = (char *)v14;
          if (v14) {
            sub_100055434(v14);
          }
        }
        else
        {
          int v15 = 0;
        }
        free(v15);
      }

      unsigned int v10 = 0;
    }
  }
  else
  {
    unsigned int v10 = 0;
  }

  return v10;
}

uint64_t sub_100046F0C(uint64_t a1, void *a2, void *a3, int a4, unsigned int *a5)
{
  id v9 = a3;
  uint64_t v10 = sub_10005C160(qword_1000E4040, v9);
  if (v10)
  {
    unsigned int v11 = (void *)v10;
    unsigned int v12 = +[NSMutableDictionary dictionaryWithDictionary:a1];
    [v12 setObject:v9 forKeyedSubscript:kUMUserPersonaUserODUUIDKey];
    uint64_t v13 = sub_10005DC38((id *)qword_1000E4040, v11, v12, a2, a4, 0, a5);

    CFRelease(v11);
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v14 = (id)qword_1000E4060;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = sub_100055404(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = v15 & 0xFFFFFFFE;
      }
      if (v16)
      {
        id v17 = (const char *)_os_log_send_and_compose_impl();
        int v18 = (char *)v17;
        if (v17) {
          sub_100055434(v17);
        }
      }
      else
      {
        int v18 = 0;
      }
      free(v18);
    }

    uint64_t v13 = 0;
    if (a5) {
      *a5 = 2;
    }
  }

  return v13;
}

uint64_t sub_1000470C4(const __CFDictionary *a1, void *a2)
{
  CFDictionaryRef v3 = sub_10005C160(qword_1000E4040, a2);
  if (!v3) {
    goto LABEL_8;
  }
  if (CFDictionaryContainsKey(a1, kUMUserPersonaUniqueStringKey))
  {
    uint64_t v4 = qword_1000E4040;
    id v5 = (void *)sub_100088788(a1, kUMUserPersonaUniqueStringKey);
    sub_10005B968(v4, v5, v3);
    CFDictionaryRef v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (!CFDictionaryContainsKey(a1, kUMUserPersonaTypeKey)) {
      goto LABEL_8;
    }
    id v7 = (void *)qword_1000E4040;
    unsigned int v8 = sub_1000885F0(a1, kUMUserPersonaTypeKey);
    sub_10005B430(v7, v8, v3);
    CFDictionaryRef v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  }
  CFDictionaryRef v9 = v6;
  if (v6)
  {
    uint64_t v10 = sub_100047294(v3, v6, 0);
    CFRelease(v3);
    CFRelease(v9);
    return v10;
  }
LABEL_8:
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v12 = (id)qword_1000E4060;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v13 = sub_100055404(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = v13 & 0xFFFFFFFE;
    }
    if (v14)
    {
      unsigned int v15 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v16 = (char *)v15;
      if (v15) {
        sub_100055434(v15);
      }
    }
    else
    {
      unsigned int v16 = 0;
    }
    free(v16);
  }

  if (v3) {
    CFRelease(v3);
  }
  return 22;
}

uint64_t sub_100047294(void *a1, const __CFDictionary *a2, int a3)
{
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  memset(uu, 0, sizeof(uu));
  CFDictionaryRef v6 = (id)qword_1000E4060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)&v216[0] = 0;
    unsigned int v7 = sub_100055404(1);
    unsigned int v8 = v6;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v9 = v7;
    }
    else {
      unsigned int v9 = v7 & 0xFFFFFFFE;
    }
    if (v9)
    {
      *(_DWORD *)in = 138412290;
      *(void *)&in[4] = a2;
      LODWORD(v187) = 12;
      unsigned int v186 = in;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();

      if (v10) {
        sub_100055434(v10);
      }
    }
    else
    {

      uint64_t v10 = 0;
    }
    free(v10);
  }

  unsigned int v11 = (const void *)(int)sub_1000885F0(a2, kUMUserPersonaTypeKey);
  uint64_t v12 = sub_1000885F0(a2, kUMUserPersonaIDKey);
  unsigned int v13 = sub_100088788(a2, kUMUserPersonaUniqueStringKey);
  if ((a3 & 1) == 0 && (v11 | 4) != 6)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v14 = (id)qword_1000E4060;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&v216[0] = 0;
      unsigned int v26 = sub_100055404(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v27 = v26;
      }
      else {
        unsigned int v27 = v26 & 0xFFFFFFFE;
      }
      if (v27)
      {
        *(_DWORD *)in = 134217984;
        *(void *)&in[4] = v11;
        unsigned int v28 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v29 = (char *)v28;
        if (v28) {
          sub_100055434(v28);
        }
      }
      else
      {
        unsigned int v29 = 0;
      }
      free(v29);
    }
    uint64_t v33 = 1;
    goto LABEL_426;
  }
  if (v12 == -1 && v11 != 4)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v14 = (id)qword_1000E4060;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&v216[0] = 0;
      unsigned int v15 = sub_100055404(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = v15 & 0xFFFFFFFE;
      }
      if (v16)
      {
        *(_DWORD *)in = 138412290;
        *(void *)&in[4] = v13;
        id v17 = (const char *)_os_log_send_and_compose_impl();
        int v18 = (char *)v17;
        if (v17) {
          sub_100055434(v17);
        }
      }
      else
      {
        int v18 = 0;
      }
      free(v18);
    }
    uint64_t v33 = 22;
    goto LABEL_426;
  }
  if (!sub_100088734(a2, kUMUserPersonaDisabledKey)) {
    CFDictionarySetValue(a2, kUMUserPersonaDisabledKey, kCFBooleanTrue);
  }
  CFDictionarySetValue(a2, off_1000E3300, kCFBooleanTrue);
  int v19 = sub_100018F78(qword_1000E4040);
  sub_1000589A0((uint64_t)v19);

  sub_10005DBE8(qword_1000E4040);
  CFDictionaryRef theDict = a2;
  if (v11 != 4)
  {
    if (sub_100062DF4(qword_1000E4040, v12))
    {
      id v196 = 0;
      char v20 = sub_10006174C(qword_1000E4040, a2, &v196);
      id v21 = v196;
      unsigned int v14 = v21;
      if ((v20 & 1) == 0)
      {
        uint64_t v33 = (uint64_t)[v21 code];
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        __int16 v34 = (id)qword_1000E4060;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)&v216[0] = 0;
          int v35 = sub_100055404(1);
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
            v35 &= ~1u;
          }
          if (v35)
          {
            stat v36 = v34;
            uint64_t v37 = strerror(v33);
            *(_DWORD *)in = 67109378;
            *(_DWORD *)&in[4] = v12;
            *(_WORD *)&in[8] = 2080;
            *(void *)&in[10] = v37;
            int v38 = (char *)_os_log_send_and_compose_impl();

            if (v38) {
              sub_100055434(v38);
            }
          }
          else
          {
            int v38 = 0;
          }
          free(v38);
        }

        goto LABEL_426;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      uint64_t v22 = (id)qword_1000E4060;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)in = 0;
        unsigned int v23 = sub_100055404(1);
        uint64_t v22 = v22;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v24 = v23;
        }
        else {
          unsigned int v24 = v23 & 0xFFFFFFFE;
        }
        if (v24)
        {
          LODWORD(v216[0]) = 67109120;
          DWORD1(v216[0]) = v12;
          LODWORD(v187) = 8;
          unsigned int v186 = (char *)v216;
          unsigned int v25 = (char *)_os_log_send_and_compose_impl();

          if (v25) {
            sub_100055434(v25);
          }
        }
        else
        {

          unsigned int v25 = 0;
        }
        free(v25);
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      uint64_t v22 = (id)qword_1000E4060;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)in = 0;
        unsigned int v30 = sub_100055404(1);
        uint64_t v22 = v22;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v31 = v30;
        }
        else {
          unsigned int v31 = v30 & 0xFFFFFFFE;
        }
        if (v31)
        {
          LODWORD(v216[0]) = 67109120;
          DWORD1(v216[0]) = v12;
          LODWORD(v187) = 8;
          unsigned int v186 = (char *)v216;
          unsigned int v32 = (char *)_os_log_send_and_compose_impl();

          if (v32) {
            sub_100055434(v32);
          }
        }
        else
        {

          unsigned int v32 = 0;
        }
        free(v32);
      }
      unsigned int v14 = 0;
    }

    if (a3) {
      goto LABEL_81;
    }
    goto LABEL_79;
  }
  unsigned int v14 = 0;
  if ((a3 & 1) == 0)
  {
LABEL_79:
    if (v13)
    {
      id v39 = sub_1000187CC(qword_1000E4318);
      [v39 deleteKeychainItemsForPersonaWithUUID:v13 error:0];
    }
  }
LABEL_81:
  if (!a3) {
    goto LABEL_148;
  }
  int v188 = (int)v11;
  CFDataRef v189 = v13;
  int v190 = v12;
  unsigned int v191 = a1;
  memset(v216, 0, sizeof(v216));
  id v40 = [&off_1000D93C0 countByEnumeratingWithState:v216 objects:in count:16];
  if (!v40) {
    goto LABEL_136;
  }
  id v41 = v40;
  uint64_t v42 = **(void **)&v216[1];
  do
  {
    for (CFIndex i = 0; i != v41; CFIndex i = (char *)i + 1)
    {
      if (**(void **)&v216[1] != v42) {
        objc_enumerationMutation(&off_1000D93C0);
      }
      id v44 = *(id *)(*((void *)&v216[0] + 1) + 8 * i);
      int v45 = sub_1000186EC(qword_1000E4318);
      uint64_t v46 = sub_100018600(qword_1000E4318);
      uint64_t v47 = sub_10001935C((uint64_t)v46);
      id v199 = 0;
      id v48 = [v45 pidForLaunchdJobWithLabel:v44 forUser:v47 error:&v199];
      unsigned int v49 = v199;

      if (v48)
      {
        unsigned int v50 = sub_1000186EC(qword_1000E4318);
        CFDictionaryRef v198 = v49;
        unsigned int v51 = [v50 terminatePID:v48 withReasonNamespace:2 reasonCode:0 reasonString:@"PersonaTermination" error:&v198];
        int v52 = v198;

        if (v51)
        {
          if (qword_1000E4088 != -1) {
            dispatch_once(&qword_1000E4088, &stru_1000D55D8);
          }
          id v53 = (id)qword_1000E4080;
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_INFO)) {
            goto LABEL_128;
          }
          uint64_t v197 = 0;
          unsigned int v54 = sub_100055404(0);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO)) {
            unsigned int v55 = v54;
          }
          else {
            unsigned int v55 = v54 & 0xFFFFFFFE;
          }
          if (v55)
          {
            *(_DWORD *)uint64_t v217 = 138543618;
            *(void *)&v217[4] = v44;
            __int16 v218 = 1024;
            *(_DWORD *)unsigned int v219 = v48;
            LODWORD(v187) = 18;
            unsigned int v186 = v217;
LABEL_115:
            unsigned int v63 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v64 = (char *)v63;
            if (v63) {
              sub_100055434(v63);
            }
LABEL_127:
            free(v64);
LABEL_128:

            unsigned int v49 = v52;
            goto LABEL_134;
          }
        }
        else
        {
          if (qword_1000E4088 != -1) {
            dispatch_once(&qword_1000E4088, &stru_1000D55D8);
          }
          id v53 = (id)qword_1000E4080;
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
            goto LABEL_128;
          }
          uint64_t v197 = 0;
          unsigned int v61 = sub_100055404(0);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
            unsigned int v62 = v61;
          }
          else {
            unsigned int v62 = v61 & 0xFFFFFFFE;
          }
          if (v62)
          {
            *(_DWORD *)uint64_t v217 = 138543874;
            *(void *)&v217[4] = v44;
            __int16 v218 = 1024;
            *(_DWORD *)unsigned int v219 = v48;
            *(_WORD *)&v219[4] = 2114;
            *(void *)&v219[6] = v52;
            LODWORD(v187) = 28;
            unsigned int v186 = v217;
            goto LABEL_115;
          }
        }
        unsigned int v64 = 0;
        goto LABEL_127;
      }
      if (v49)
      {
        if (qword_1000E4088 != -1) {
          dispatch_once(&qword_1000E4088, &stru_1000D55D8);
        }
        unsigned int v56 = (id)qword_1000E4080;
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        {
          CFDictionaryRef v198 = 0;
          unsigned int v57 = sub_100055404(0);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
            unsigned int v58 = v57;
          }
          else {
            unsigned int v58 = v57 & 0xFFFFFFFE;
          }
          if (v58)
          {
            *(_DWORD *)uint64_t v217 = 138543618;
            *(void *)&v217[4] = v44;
            __int16 v218 = 2114;
            *(void *)unsigned int v219 = v49;
            LODWORD(v187) = 22;
            unsigned int v186 = v217;
            unsigned int v59 = (const char *)_os_log_send_and_compose_impl();
            int v60 = (char *)v59;
            if (v59) {
              sub_100055434(v59);
            }
          }
          else
          {
            int v60 = 0;
          }
          free(v60);
        }
      }
      else
      {
        if (qword_1000E4088 != -1) {
          dispatch_once(&qword_1000E4088, &stru_1000D55D8);
        }
        unsigned int v49 = (id)qword_1000E4080;
        if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
        {
          CFDictionaryRef v198 = 0;
          unsigned int v65 = sub_100055404(0);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO)) {
            unsigned int v66 = v65;
          }
          else {
            unsigned int v66 = v65 & 0xFFFFFFFE;
          }
          if (v66)
          {
            *(_DWORD *)uint64_t v217 = 138543362;
            *(void *)&v217[4] = v44;
            LODWORD(v187) = 12;
            unsigned int v186 = v217;
            unsigned __int8 v67 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v68 = (char *)v67;
            if (v67) {
              sub_100055434(v67);
            }
          }
          else
          {
            unsigned int v68 = 0;
          }
          free(v68);
        }
      }
LABEL_134:
    }
    id v41 = [&off_1000D93C0 countByEnumeratingWithState:v216 objects:in count:16];
  }
  while (v41);
LABEL_136:
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v13 = v189;
  LODWORD(v11) = v188;
  unsigned int v69 = (id)qword_1000E4060;
  a1 = v191;
  LODWORD(v12) = v190;
  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)in = 0;
    unsigned int v70 = sub_100055404(1);
    int v71 = v69;
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v72 = v70;
    }
    else {
      unsigned int v72 = v70 & 0xFFFFFFFE;
    }
    if (v72)
    {
      LOWORD(v216[0]) = 0;
      LODWORD(v187) = 2;
      unsigned int v186 = (char *)v216;
      unsigned int v73 = (char *)_os_log_send_and_compose_impl();

      if (v73) {
        sub_100055434(v73);
      }
    }
    else
    {

      unsigned int v73 = 0;
    }
    free(v73);
  }

LABEL_148:
  if ((v11 | 4) != 6) {
    goto LABEL_404;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  uint64_t v74 = (id)qword_1000E4060;
  if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)in = 0;
    unsigned int v75 = sub_100055404(1);
    unsigned int v76 = v74;
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v77 = v75;
    }
    else {
      unsigned int v77 = v75 & 0xFFFFFFFE;
    }
    if (v77)
    {
      LOWORD(v216[0]) = 0;
      LODWORD(v187) = 2;
      unsigned int v186 = (char *)v216;
      BOOL v78 = (char *)_os_log_send_and_compose_impl();

      if (v78) {
        sub_100055434(v78);
      }
    }
    else
    {

      BOOL v78 = 0;
    }
    free(v78);
  }

  if (![(id)qword_1000E4030 isVolumeMountedWithSession:theDict fsid:0]) {
    goto LABEL_216;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v79 = (id)qword_1000E4060;
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)in = 0;
    unsigned int v80 = sub_100055404(1);
    unsigned int v81 = v79;
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v82 = v80;
    }
    else {
      unsigned int v82 = v80 & 0xFFFFFFFE;
    }
    if (v82)
    {
      LOWORD(v216[0]) = 0;
      LODWORD(v187) = 2;
      unsigned int v186 = (char *)v216;
      unsigned int v83 = (char *)_os_log_send_and_compose_impl();

      if (v83) {
        sub_100055434(v83);
      }
    }
    else
    {

      unsigned int v83 = 0;
    }
    free(v83);
  }

  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v84 = (id)qword_1000E4060;
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)in = 0;
    unsigned int v85 = sub_100055404(1);
    unsigned int v86 = v84;
    if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v87 = v85;
    }
    else {
      unsigned int v87 = v85 & 0xFFFFFFFE;
    }
    if (v87)
    {
      LOWORD(v216[0]) = 0;
      LODWORD(v187) = 2;
      unsigned int v186 = (char *)v216;
      uint64_t v88 = (char *)_os_log_send_and_compose_impl();

      if (v88) {
        sub_100055434(v88);
      }
    }
    else
    {

      uint64_t v88 = 0;
    }
    free(v88);
  }

  sub_10006613C(qword_1000E4040, theDict);
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v89 = (id)qword_1000E4060;
  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)in = 0;
    unsigned int v90 = sub_100055404(1);
    unsigned int v91 = v89;
    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v92 = v90;
    }
    else {
      unsigned int v92 = v90 & 0xFFFFFFFE;
    }
    if (v92)
    {
      LOWORD(v216[0]) = 0;
      LODWORD(v187) = 2;
      unsigned int v186 = (char *)v216;
      unsigned int v93 = (char *)_os_log_send_and_compose_impl();

      if (v93) {
        sub_100055434(v93);
      }
    }
    else
    {

      unsigned int v93 = 0;
    }
    free(v93);
  }

  if (![(id)qword_1000E4030 unmountVolumeWithSession:theDict mountPath:0 error:0])
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v94 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_215;
    }
    *(void *)in = 0;
    unsigned int v97 = sub_100055404(1);
    unsigned int v94 = v94;
    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v98 = v97;
    }
    else {
      unsigned int v98 = v97 & 0xFFFFFFFE;
    }
    if (v98)
    {
      LOWORD(v216[0]) = 0;
      LODWORD(v187) = 2;
      unsigned int v186 = (char *)v216;
      goto LABEL_211;
    }
LABEL_213:

    unsigned int v99 = 0;
    goto LABEL_214;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v94 = (id)qword_1000E4060;
  if (!os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_215;
  }
  *(void *)in = 0;
  unsigned int v95 = sub_100055404(1);
  unsigned int v94 = v94;
  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT)) {
    unsigned int v96 = v95;
  }
  else {
    unsigned int v96 = v95 & 0xFFFFFFFE;
  }
  if (!v96) {
    goto LABEL_213;
  }
  LOWORD(v216[0]) = 0;
  LODWORD(v187) = 2;
  unsigned int v186 = (char *)v216;
LABEL_211:
  unsigned int v99 = (char *)_os_log_send_and_compose_impl();

  if (v99) {
    sub_100055434(v99);
  }
LABEL_214:
  free(v99);
LABEL_215:

LABEL_216:
  long long v213 = 0u;
  long long v214 = 0u;
  long long v211 = 0u;
  long long v212 = 0u;
  long long v209 = 0u;
  long long v210 = 0u;
  long long v207 = 0u;
  long long v208 = 0u;
  long long v205 = 0u;
  long long v206 = 0u;
  long long v203 = 0u;
  long long v204 = 0u;
  long long v201 = 0u;
  long long v202 = 0u;
  memset(in, 0, sizeof(in));
  if (!sub_1000887CC(theDict, kUMUserPersonaUniqueStringKey, in, 256))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    v100 = (id)qword_1000E4060;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&v216[0] = 0;
      unsigned int v101 = sub_100055404(1);
      unsigned int v102 = v100;
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v103 = v101;
      }
      else {
        unsigned int v103 = v101 & 0xFFFFFFFE;
      }
      if (v103)
      {
        *(_WORD *)uint64_t v217 = 0;
        LODWORD(v187) = 2;
        unsigned int v186 = v217;
        uint64_t v104 = (char *)_os_log_send_and_compose_impl();

        if (v104) {
          sub_100055434(v104);
        }
      }
      else
      {

        uint64_t v104 = 0;
      }
      free(v104);
    }
  }
  if (uuid_parse(in, uu))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v105 = (id)qword_1000E4060;
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&v216[0] = 0;
      unsigned int v106 = sub_100055404(1);
      int v107 = v105;
      if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v108 = v106;
      }
      else {
        unsigned int v108 = v106 & 0xFFFFFFFE;
      }
      if (v108)
      {
        *(_WORD *)uint64_t v217 = 0;
        LODWORD(v187) = 2;
        unsigned int v186 = v217;
        unsigned int v109 = (char *)_os_log_send_and_compose_impl();

        if (v109) {
          sub_100055434(v109);
        }
      }
      else
      {

        unsigned int v109 = 0;
      }
      free(v109);
    }
  }
  if (!objc_msgSend((id)qword_1000E4030, "splitUserVolumeEnabled", v186, v187))
  {
    unsigned int v115 = sub_100018F78(qword_1000E4318);
    unsigned int v116 = sub_100088788(theDict, kUMUserPersonaUniqueStringKey);
    unsigned int v117 = [v115 removePersonaKeyForUser:0 personaUUID:v116 volumeUUID:CFDictionaryGetValue(theDict, @"MKBUserSessionVolumeUUID")];
    goto LABEL_303;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v110 = (id)qword_1000E4060;
  if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)&v216[0] = 0;
    unsigned int v111 = sub_100055404(1);
    unsigned int v112 = v110;
    if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v113 = v111;
    }
    else {
      unsigned int v113 = v111 & 0xFFFFFFFE;
    }
    if (v113)
    {
      *(_WORD *)uint64_t v217 = 0;
      uint64_t v114 = (char *)_os_log_send_and_compose_impl();

      if (v114) {
        sub_100055434(v114);
      }
    }
    else
    {

      uint64_t v114 = 0;
    }
    free(v114);
  }
  unsigned int v192 = a1;
  int v118 = (int)v11;
  unsigned int v11 = v13;

  unsigned int v115 = sub_100088788(theDict, kUMUserSessionVolumeDeviceNodeKey);
  int v119 = sub_100019308(qword_1000E4318);
  int v195 = v14;
  unsigned int v120 = [v119 unmapVolume:v115 error:&v195];
  unsigned int v121 = v195;

  if (!v120)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFDictionaryRef v122 = theDict;
    CFStringRef v123 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_276;
    }
    *(void *)uint64_t v217 = 0;
    unsigned int v126 = sub_100055404(1);
    CFStringRef v123 = v123;
    if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v127 = v126;
    }
    else {
      unsigned int v127 = v126 & 0xFFFFFFFE;
    }
    if (v127)
    {
      LODWORD(v216[0]) = 138412290;
      *(void *)((char *)v216 + 4) = v121;
      goto LABEL_272;
    }
LABEL_274:

    v128 = 0;
    goto LABEL_275;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFDictionaryRef v122 = theDict;
  CFStringRef v123 = (id)qword_1000E4060;
  if (!os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_276;
  }
  *(void *)&v216[0] = 0;
  unsigned int v124 = sub_100055404(1);
  CFStringRef v123 = v123;
  if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT)) {
    unsigned int v125 = v124;
  }
  else {
    unsigned int v125 = v124 & 0xFFFFFFFE;
  }
  if (!v125) {
    goto LABEL_274;
  }
  *(void *)uint64_t v217 = 67109120;
LABEL_272:
  v128 = (char *)_os_log_send_and_compose_impl();

  if (v128) {
    sub_100055434(v128);
  }
LABEL_275:
  free(v128);
LABEL_276:

  unsigned int v129 = (void *)sub_100088788(v122, kUMUserPersonaUniqueStringKey);
  unsigned int v130 = sub_1000173F4((uint64_t)NSUUID, v129);
  CFDictionaryRef v131 = sub_100019308(qword_1000E4318);
  unsigned int v194 = v121;
  unsigned int v132 = [v131 deletePersonaWithUUID:v130 fromSession:0 error:&v194];
  unsigned int v14 = v194;

  if (v132)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v13 = v11;
    unsigned int v133 = (id)qword_1000E4060;
    LODWORD(v11) = v118;
    if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&v216[0] = 0;
      unsigned int v134 = sub_100055404(1);
      unsigned int v133 = v133;
      if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v135 = v134;
      }
      else {
        unsigned int v135 = v134 & 0xFFFFFFFE;
      }
      a1 = v192;
      if (v135)
      {
        *(_WORD *)uint64_t v217 = 0;
        int v136 = (char *)_os_log_send_and_compose_impl();

        if (v136) {
          sub_100055434(v136);
        }
      }
      else
      {

        int v136 = 0;
      }
      free(v136);
      unsigned int v117 = 0;
      goto LABEL_302;
    }
    unsigned int v117 = 0;
LABEL_297:
    a1 = v192;
    goto LABEL_302;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v13 = v11;
  unsigned int v133 = (id)qword_1000E4060;
  LODWORD(v11) = v118;
  if (!os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v117 = 5;
    goto LABEL_297;
  }
  *(void *)uint64_t v217 = 0;
  unsigned int v137 = sub_100055404(1);
  unsigned int v133 = v133;
  if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT)) {
    unsigned int v138 = v137;
  }
  else {
    unsigned int v138 = v137 & 0xFFFFFFFE;
  }
  if (v138)
  {
    *(void *)&v216[0] = 67109378;
    WORD4(v216[0]) = 2112;
    *(void *)((char *)v216 + 10) = v14;
    uint64_t v139 = (char *)_os_log_send_and_compose_impl();

    if (v139) {
      sub_100055434(v139);
    }
  }
  else
  {

    uint64_t v139 = 0;
  }
  a1 = v192;
  free(v139);
  unsigned int v117 = 5;
LABEL_302:

LABEL_303:
  if (!v117)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v140 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_324;
    }
    *(void *)&v216[0] = 0;
    unsigned int v143 = sub_100055404(1);
    unsigned int v140 = v140;
    if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v144 = v143;
    }
    else {
      unsigned int v144 = v143 & 0xFFFFFFFE;
    }
    if (v144)
    {
      *(_WORD *)uint64_t v217 = 0;
      goto LABEL_320;
    }
LABEL_322:

    unsigned int v145 = 0;
    goto LABEL_323;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v140 = (id)qword_1000E4060;
  if (!os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_324;
  }
  *(void *)&v216[0] = 0;
  unsigned int v141 = sub_100055404(1);
  unsigned int v140 = v140;
  if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT)) {
    unsigned int v142 = v141;
  }
  else {
    unsigned int v142 = v141 & 0xFFFFFFFE;
  }
  if (!v142) {
    goto LABEL_322;
  }
  *(_DWORD *)uint64_t v217 = 67109120;
  *(_DWORD *)&v217[4] = v117;
LABEL_320:
  unsigned int v145 = (char *)_os_log_send_and_compose_impl();

  if (v145) {
    sub_100055434(v145);
  }
LABEL_323:
  free(v145);
LABEL_324:

  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFTypeID v146 = (id)qword_1000E4060;
  if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)&v216[0] = 0;
    unsigned int v147 = sub_100055404(1);
    uint64_t v148 = v146;
    if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v149 = v147;
    }
    else {
      unsigned int v149 = v147 & 0xFFFFFFFE;
    }
    if (v149)
    {
      *(_WORD *)uint64_t v217 = 0;
      unsigned int v150 = (char *)_os_log_send_and_compose_impl();

      if (v150) {
        sub_100055434(v150);
      }
    }
    else
    {

      unsigned int v150 = 0;
    }
    free(v150);
  }

  if (!CFDictionaryContainsKey(theDict, kUMUserSessionVolumeDeviceNodeKey))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    id v154 = (id)qword_1000E4060;
    if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&v216[0] = 0;
      unsigned int v155 = sub_100055404(1);
      int v156 = v154;
      if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v157 = v155;
      }
      else {
        unsigned int v157 = v155 & 0xFFFFFFFE;
      }
      if (v157)
      {
        *(_WORD *)uint64_t v217 = 0;
        long long v158 = (char *)_os_log_send_and_compose_impl();

        if (v158) {
          sub_100055434(v158);
        }
      }
      else
      {

        long long v158 = 0;
      }
      free(v158);
    }

    goto LABEL_404;
  }
  if (![(id)qword_1000E4030 deleteVolumeWithSession:theDict error:0])
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v151 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_366;
    }
    *(void *)&v216[0] = 0;
    unsigned int v159 = sub_100055404(1);
    unsigned int v151 = v151;
    if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v160 = v159;
    }
    else {
      unsigned int v160 = v159 & 0xFFFFFFFE;
    }
    if (v160)
    {
      *(_WORD *)uint64_t v217 = 0;
      goto LABEL_362;
    }
LABEL_364:

    uint64_t v161 = 0;
    goto LABEL_365;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v151 = (id)qword_1000E4060;
  if (!os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_366;
  }
  *(void *)&v216[0] = 0;
  unsigned int v152 = sub_100055404(1);
  unsigned int v151 = v151;
  if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT)) {
    unsigned int v153 = v152;
  }
  else {
    unsigned int v153 = v152 & 0xFFFFFFFE;
  }
  if (!v153) {
    goto LABEL_364;
  }
  *(_WORD *)uint64_t v217 = 0;
LABEL_362:
  uint64_t v161 = (char *)_os_log_send_and_compose_impl();

  if (v161) {
    sub_100055434(v161);
  }
LABEL_365:
  free(v161);
LABEL_366:

  long long v162 = theDict;
  if (!CFDictionaryContainsKey(theDict, kUMUserSessionHomeDirKey)) {
    goto LABEL_400;
  }
  CFStringRef Value = CFDictionaryGetValue(theDict, kUMUserSessionHomeDirKey);
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v164 = (id)qword_1000E4060;
  if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
  {
    int v165 = (int)v11;
    unsigned int v11 = v13;
    *(void *)uint64_t v217 = 0;
    unsigned int v166 = sub_100055404(1);
    int v167 = v164;
    if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v168 = v166;
    }
    else {
      unsigned int v168 = v166 & 0xFFFFFFFE;
    }
    if (v168)
    {
      LODWORD(v216[0]) = 138412290;
      *(void *)((char *)v216 + 4) = Value;
      unsigned int v169 = (char *)_os_log_send_and_compose_impl();

      if (v169) {
        sub_100055434(v169);
      }
    }
    else
    {

      unsigned int v169 = 0;
    }
    free(v169);
    unsigned int v13 = v11;
    LODWORD(v11) = v165;
  }

  unsigned int v170 = sub_100018F6C(qword_1000E4318);
  unsigned int v171 = [v170 removePath:Value error:0];

  if (!v171)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v172 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_399;
    }
    *(void *)&v216[0] = 0;
    unsigned int v175 = sub_100055404(1);
    unsigned int v172 = v172;
    if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v176 = v175;
    }
    else {
      unsigned int v176 = v175 & 0xFFFFFFFE;
    }
    if (v176)
    {
      *(_WORD *)uint64_t v217 = 0;
      goto LABEL_395;
    }
LABEL_397:

    unsigned int v177 = 0;
    goto LABEL_398;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v172 = (id)qword_1000E4060;
  if (!os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_399;
  }
  *(void *)&v216[0] = 0;
  unsigned int v173 = sub_100055404(1);
  unsigned int v172 = v172;
  if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT)) {
    unsigned int v174 = v173;
  }
  else {
    unsigned int v174 = v173 & 0xFFFFFFFE;
  }
  if (!v174) {
    goto LABEL_397;
  }
  *(_WORD *)uint64_t v217 = 0;
LABEL_395:
  unsigned int v177 = (char *)_os_log_send_and_compose_impl();

  if (v177) {
    sub_100055434(v177);
  }
LABEL_398:
  free(v177);
LABEL_399:

  long long v162 = theDict;
LABEL_400:
  CFDictionaryRemoveValue(v162, kUMUserSessionVolumeDeviceNodeKey);
  sub_10005DBE8(qword_1000E4040);
LABEL_404:
  if (v11 == 4)
  {
    sub_10005BEB0(qword_1000E4040, 4, a1);
    if (qword_1000E4088 != -1) {
      dispatch_once(&qword_1000E4088, &stru_1000D55D8);
    }
    unint64_t v178 = (id)qword_1000E4080;
    if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_425;
    }
    *(void *)&v216[0] = 0;
    unsigned int v181 = sub_100055404(1);
    unint64_t v178 = v178;
    if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v182 = v181;
    }
    else {
      unsigned int v182 = v181 & 0xFFFFFFFE;
    }
    if (v182)
    {
      *(_WORD *)uint64_t v217 = 0;
      goto LABEL_421;
    }
LABEL_423:

    uint64_t v183 = 0;
    goto LABEL_424;
  }
  sub_10005BD08(qword_1000E4040, v12, a1);
  if (qword_1000E4088 != -1) {
    dispatch_once(&qword_1000E4088, &stru_1000D55D8);
  }
  unint64_t v178 = (id)qword_1000E4080;
  if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_425;
  }
  *(void *)uint64_t v217 = 0;
  unsigned int v179 = sub_100055404(1);
  unint64_t v178 = v178;
  if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT)) {
    unsigned int v180 = v179;
  }
  else {
    unsigned int v180 = v179 & 0xFFFFFFFE;
  }
  if (!v180) {
    goto LABEL_423;
  }
  LODWORD(v216[0]) = 138412546;
  *(void *)((char *)v216 + 4) = v13;
  WORD6(v216[0]) = 1024;
  *(_DWORD *)((char *)v216 + 14) = v12;
LABEL_421:
  uint64_t v183 = (char *)_os_log_send_and_compose_impl();

  if (v183) {
    sub_100055434(v183);
  }
LABEL_424:
  free(v183);
LABEL_425:

  int v184 = sub_100018F78(qword_1000E4040);
  sub_1000589A0((uint64_t)v184);

  sub_10005DBE8(qword_1000E4040);
  uint64_t v33 = 0;
LABEL_426:

  return v33;
}

uint64_t sub_100049618(const __CFDictionary *a1, void *a2)
{
  CFDictionaryRef v3 = sub_10005C160(qword_1000E4040, a2);
  if (v3)
  {
    if (CFDictionaryContainsKey(a1, kUMUserPersonaUniqueStringKey))
    {
      uint64_t v4 = qword_1000E4040;
      id v5 = (void *)sub_100088788(a1, kUMUserPersonaUniqueStringKey);
      sub_10005B968(v4, v5, v3);
      CFDictionaryRef v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (!CFDictionaryContainsKey(a1, kUMUserPersonaTypeKey)) {
        goto LABEL_17;
      }
      unsigned int v7 = (void *)qword_1000E4040;
      unsigned int v8 = sub_1000885F0(a1, kUMUserPersonaTypeKey);
      sub_10005B430(v7, v8, v3);
      CFDictionaryRef v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    }
    unsigned int v9 = v6;
    if (v6)
    {
      if ((sub_1000885F0(v6, kUMUserPersonaTypeKey) & 0xFFFFFFFB) == 2)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        uint64_t v10 = (id)qword_1000E4060;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v11 = sub_100055404(1);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v12 = v11;
          }
          else {
            unsigned int v12 = v11 & 0xFFFFFFFE;
          }
          if (v12)
          {
            unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v14 = (char *)v13;
            if (v13) {
              sub_100055434(v13);
            }
          }
          else
          {
            unsigned int v14 = 0;
          }
          free(v14);
        }

        if (sub_100088734(v9, kUMUserPersonaDisabledKey))
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v26 = (id)qword_1000E4060;
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v27 = sub_100055404(1);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v28 = v27;
            }
            else {
              unsigned int v28 = v27 & 0xFFFFFFFE;
            }
            if (v28)
            {
              unsigned int v29 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v30 = (char *)v29;
              if (v29) {
                sub_100055434(v29);
              }
            }
            else
            {
              unsigned int v30 = 0;
            }
            free(v30);
          }
        }
        else
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v31 = (id)qword_1000E4060;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v32 = sub_100055404(1);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v33 = v32;
            }
            else {
              unsigned int v33 = v32 & 0xFFFFFFFE;
            }
            if (v33)
            {
              __int16 v34 = (const char *)_os_log_send_and_compose_impl();
              int v35 = (char *)v34;
              if (v34) {
                sub_100055434(v34);
              }
            }
            else
            {
              int v35 = 0;
            }
            free(v35);
          }

          CFDictionarySetValue(v9, kUMUserPersonaDisabledKey, kCFBooleanTrue);
        }
        uint64_t v25 = 0;
      }
      else
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        char v20 = (id)qword_1000E4060;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v21 = sub_100055404(1);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v22 = v21;
          }
          else {
            unsigned int v22 = v21 & 0xFFFFFFFE;
          }
          if (v22)
          {
            unsigned int v23 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v24 = (char *)v23;
            if (v23) {
              sub_100055434(v23);
            }
          }
          else
          {
            unsigned int v24 = 0;
          }
          free(v24);
        }

        uint64_t v25 = 45;
      }
      CFRelease(v3);
      CFDictionaryRef v3 = v9;
LABEL_71:
      CFRelease(v3);
      return v25;
    }
  }
LABEL_17:
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v15 = (id)qword_1000E4060;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v16 = sub_100055404(1);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = v16 & 0xFFFFFFFE;
    }
    if (v17)
    {
      int v18 = (const char *)_os_log_send_and_compose_impl();
      int v19 = (char *)v18;
      if (v18) {
        sub_100055434(v18);
      }
    }
    else
    {
      int v19 = 0;
    }
    free(v19);
  }

  uint64_t v25 = 2;
  if (v3) {
    goto LABEL_71;
  }
  return v25;
}

id sub_100049B90(void *a1, _DWORD *a2)
{
  return sub_10005C1D8(qword_1000E4040, a1, a2);
}

id *sub_100049BA4(_DWORD *a1)
{
  return sub_10005C438((id *)qword_1000E4040, a1);
}

id sub_100049BB4(void *a1, void *a2, _DWORD *a3)
{
  return sub_10005C914((void *)qword_1000E4040, a1, a2, a3);
}

uint64_t sub_100049BCC()
{
  uint64_t v0 = sub_100018F78(qword_1000E4040);
  sub_100058B1C((uint64_t)v0);

  uint64_t v1 = sub_100018F78(qword_1000E4040);
  uint64_t v2 = sub_100058954((uint64_t)v1);

  return v2;
}

uint64_t sub_100049C24(const __CFDictionary *a1, const __CFArray *a2, void *a3)
{
  id v5 = a3;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFDictionaryRef v6 = (id)qword_1000E4060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v7 = sub_100055404(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = v7 & 0xFFFFFFFE;
    }
    if (v8)
    {
      unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v10 = (char *)v9;
      if (v9) {
        sub_100055434(v9);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    free(v10);
  }

  uint64_t v11 = sub_10005C160(qword_1000E4040, v5);
  if (v11)
  {
    unsigned int v12 = (void *)v11;
    if (CFDictionaryContainsKey(a1, kUMUserPersonaUniqueStringKey))
    {
      uint64_t v13 = qword_1000E4040;
      unsigned int v14 = (void *)sub_100088788(a1, kUMUserPersonaUniqueStringKey);
      uint64_t v15 = sub_10005B968(v13, v14, v12);
    }
    else
    {
      if (!CFDictionaryContainsKey(a1, kUMUserPersonaTypeKey))
      {
        uint64_t v24 = 2;
        CFDictionaryRef v18 = (const __CFDictionary *)v12;
        goto LABEL_80;
      }
      unsigned int v16 = (void *)qword_1000E4040;
      unsigned int v17 = sub_1000885F0(a1, kUMUserPersonaTypeKey);
      uint64_t v15 = sub_10005B430(v16, v17, v12);
    }
    CFDictionaryRef v18 = (const __CFDictionary *)v15;
    CFRelease(v12);
    if (v18)
    {
      if (a2)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        int v19 = (id)qword_1000E4060;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v20 = sub_100055404(1);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
            unsigned int v21 = v20;
          }
          else {
            unsigned int v21 = v20 & 0xFFFFFFFE;
          }
          if (v21)
          {
            unsigned int v22 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v23 = (char *)v22;
            if (v22) {
              sub_100055434(v22);
            }
          }
          else
          {
            unsigned int v23 = 0;
          }
          free(v23);
        }

        sub_1000885F0(v18, kUMUserPersonaIDKey);
        if (CFDictionaryContainsKey(v18, kUMUserPersonaBundleIDsKey))
        {
          uint64_t v25 = sub_1000885B4(v18, kUMUserPersonaBundleIDsKey);
          unsigned int v26 = v25;
          if (v25) {
            CFRetain(v25);
          }
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v27 = (id)qword_1000E4060;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v28 = sub_100055404(1);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
              unsigned int v29 = v28;
            }
            else {
              unsigned int v29 = v28 & 0xFFFFFFFE;
            }
            if (v29)
            {
              unsigned int v30 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v31 = (char *)v30;
              if (v30) {
                sub_100055434(v30);
              }
            }
            else
            {
              unsigned int v31 = 0;
            }
            free(v31);
          }

          if (CFArrayGetCount(a2) <= 0)
          {
            if (!v26) {
              goto LABEL_72;
            }
            CFDictionaryRemoveValue(v18, kUMUserPersonaBundleIDsKey);
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            unsigned int v32 = (id)qword_1000E4060;
            if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_71;
            }
            unsigned int v37 = sub_100055404(1);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v38 = v37;
            }
            else {
              unsigned int v38 = v37 & 0xFFFFFFFE;
            }
            if (!v38)
            {
              stat v36 = 0;
              goto LABEL_70;
            }
            int v35 = (const char *)_os_log_send_and_compose_impl();
            stat v36 = (char *)v35;
            if (v35) {
LABEL_68:
            }
              sub_100055434(v35);
LABEL_70:
            free(v36);
LABEL_71:

            goto LABEL_72;
          }
        }
        else
        {
          unsigned int v26 = 0;
          if (CFArrayGetCount(a2) < 1)
          {
LABEL_72:
            id v39 = sub_100018F78(qword_1000E4040);
            sub_1000589A0((uint64_t)v39);

            if (sub_10005DBE8(qword_1000E4040))
            {
              if (!v26) {
                goto LABEL_79;
              }
            }
            else
            {
              if (!v26)
              {
                CFDictionaryRemoveValue(v18, kUMUserPersonaBundleIDsKey);
                goto LABEL_79;
              }
              CFDictionarySetValue(v18, kUMUserPersonaBundleIDsKey, v26);
            }
            CFRelease(v26);
LABEL_79:
            uint64_t v24 = 0;
            goto LABEL_80;
          }
        }
        CFDictionarySetValue(v18, kUMUserPersonaBundleIDsKey, a2);
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v32 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_71;
        }
        unsigned int v33 = sub_100055404(1);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v34 = v33;
        }
        else {
          unsigned int v34 = v33 & 0xFFFFFFFE;
        }
        if (!v34)
        {
          stat v36 = 0;
          goto LABEL_70;
        }
        int v35 = (const char *)_os_log_send_and_compose_impl();
        stat v36 = (char *)v35;
        if (v35) {
          goto LABEL_68;
        }
        goto LABEL_70;
      }
      uint64_t v24 = 22;
LABEL_80:
      CFRelease(v18);
      goto LABEL_81;
    }
  }
  uint64_t v24 = 2;
LABEL_81:

  return v24;
}

id sub_10004A2A8(void *a1, void *a2, _DWORD *a3)
{
  return sub_10005CB94((void *)qword_1000E4040, a1, a2, a3);
}

uint64_t sub_10004A2C0(const __CFArray *a1, void *a2)
{
  id v3 = a2;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  uint64_t v4 = (id)qword_1000E4060;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v5 = sub_100055404(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = v5 & 0xFFFFFFFE;
    }
    if (v6)
    {
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  unsigned int v9 = sub_10005C160(qword_1000E4040, v3);
  if (v9)
  {
    uint64_t v10 = v9;
    sub_10005B430((id)qword_1000E4040, 4u, v9);
    CFDictionaryRef v11 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    CFRelease(v10);
    if (v11)
    {
      if (!a1)
      {
        uint64_t v22 = 22;
        goto LABEL_81;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v12 = (id)qword_1000E4060;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v13 = sub_100055404(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
          unsigned int v14 = v13;
        }
        else {
          unsigned int v14 = v13 & 0xFFFFFFFE;
        }
        if (v14)
        {
          uint64_t v15 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v16 = (char *)v15;
          if (v15) {
            sub_100055434(v15);
          }
        }
        else
        {
          unsigned int v16 = 0;
        }
        free(v16);
      }

      if (CFDictionaryContainsKey(v11, kUMUserPersonaBundleIDsKey))
      {
        unsigned int v23 = sub_1000885B4(v11, kUMUserPersonaBundleIDsKey);
        uint64_t v24 = v23;
        if (v23) {
          CFRetain(v23);
        }
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        uint64_t v25 = (id)qword_1000E4060;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v26 = sub_100055404(1);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
            unsigned int v27 = v26;
          }
          else {
            unsigned int v27 = v26 & 0xFFFFFFFE;
          }
          if (v27)
          {
            unsigned int v28 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v29 = (char *)v28;
            if (v28) {
              sub_100055434(v28);
            }
          }
          else
          {
            unsigned int v29 = 0;
          }
          free(v29);
        }

        if (CFArrayGetCount(a1) <= 0)
        {
          if (!v24)
          {
LABEL_76:
            unsigned int v37 = sub_100018F78(qword_1000E4040);
            sub_1000589A0((uint64_t)v37);

            if (sub_10005DBE8(qword_1000E4040))
            {
              uint64_t v22 = 0;
              if (!v24) {
                goto LABEL_81;
              }
              goto LABEL_80;
            }
            CFDictionarySetValue(v11, kUMUserPersonaBundleIDsKey, v24);
            uint64_t v22 = 12;
            if (v24) {
LABEL_80:
            }
              CFRelease(v24);
LABEL_81:
            CFRelease(v11);
            goto LABEL_82;
          }
          CFDictionaryRemoveValue(v11, kUMUserPersonaBundleIDsKey);
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v30 = (id)qword_1000E4060;
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
LABEL_75:

            goto LABEL_76;
          }
          unsigned int v35 = sub_100055404(1);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v36 = v35;
          }
          else {
            unsigned int v36 = v35 & 0xFFFFFFFE;
          }
          if (v36) {
            goto LABEL_63;
          }
          goto LABEL_73;
        }
      }
      else
      {
        uint64_t v24 = 0;
        if (CFArrayGetCount(a1) < 1) {
          goto LABEL_76;
        }
      }
      CFDictionarySetValue(v11, kUMUserPersonaBundleIDsKey, a1);
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v30 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_75;
      }
      unsigned int v31 = sub_100055404(1);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v32 = v31;
      }
      else {
        unsigned int v32 = v31 & 0xFFFFFFFE;
      }
      if (v32)
      {
LABEL_63:
        unsigned int v33 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v34 = (char *)v33;
        if (v33) {
          sub_100055434(v33);
        }
        goto LABEL_74;
      }
LABEL_73:
      unsigned int v34 = 0;
LABEL_74:
      free(v34);
      goto LABEL_75;
    }
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v17 = (id)qword_1000E4060;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v18 = sub_100055404(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v18 & 0xFFFFFFFE;
    }
    if (v19)
    {
      unsigned int v20 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v21 = (char *)v20;
      if (v20) {
        sub_100055434(v20);
      }
    }
    else
    {
      unsigned int v21 = 0;
    }
    free(v21);
  }

  uint64_t v22 = 2;
LABEL_82:

  return v22;
}

id sub_10004A910(void *a1, _DWORD *a2)
{
  id v3 = a1;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  uint64_t v4 = (id)qword_1000E4060;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v5 = sub_100055404(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = v5 & 0xFFFFFFFE;
    }
    if (v6)
    {
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  unsigned int v9 = (void *)qword_1000E4040;
  unsigned int v13 = kUMUserPersonaTypeKey;
  unsigned int v14 = &off_1000D9450;
  uint64_t v10 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
  CFDictionaryRef v11 = sub_10005CB94(v9, v10, v3, a2);

  return v11;
}

void *sub_10004AAC0(void *a1, void *a2, int *a3)
{
  id v5 = a1;
  unsigned int v6 = sub_10005C160(qword_1000E4040, a2);
  if (!v6)
  {
LABEL_7:
    int v9 = 2;
    if (!a3) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  sub_10005B968(qword_1000E4040, v5, v6);
  CFDictionaryRef v7 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CFRelease(v6);
  if (!v7)
  {
    unsigned int v6 = 0;
    goto LABEL_7;
  }
  if (sub_1000885F0(v7, kUMUserPersonaTypeKey) == 6)
  {
    unsigned int v8 = (void *)sub_100088788(v7, kUMUserSessionVolumeDeviceNodeKey);
    unsigned int v6 = v8;
    if (v8)
    {
      CFRetain(v8);
      int v9 = 0;
    }
    else
    {
      int v9 = 3;
    }
  }
  else
  {
    unsigned int v6 = 0;
    int v9 = 22;
  }
  CFRelease(v7);
  if (a3)
  {
LABEL_12:
    if (!v6 && v9) {
      *a3 = v9;
    }
  }
LABEL_15:

  return v6;
}

uint64_t sub_10004ABC0(void *a1, uint64_t a2, int a3, void *a4, uint64_t a5)
{
  int v54 = 0;
  int v9 = sub_10005C160(qword_1000E4040, a4);
  if (v9
    && (uint64_t v10 = v9,
        sub_10005B968(qword_1000E4040, a1, v9),
        CFDictionaryRef v11 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(),
        CFRelease(v10),
        v11))
  {
    int v12 = sub_1000885F0(v11, kUMUserPersonaIDKey);
    if (CFDictionaryContainsKey(v11, kUMUserPersonaDisabledKey)
      && sub_100088734(v11, kUMUserPersonaDisabledKey))
    {
      unsigned int v13 = 0;
      a5 = 36;
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v18 = (id)qword_1000E4060;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v56 = 0;
        unsigned int v19 = sub_100055404(1);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
          unsigned int v20 = v19;
        }
        else {
          unsigned int v20 = v19 & 0xFFFFFFFE;
        }
        if (v20)
        {
          *(_DWORD *)unsigned int v55 = 67109634;
          *(_DWORD *)&v55[4] = v12;
          *(_WORD *)&v55[8] = 1024;
          *(_DWORD *)&v55[10] = a2;
          *(_WORD *)&v55[14] = 2112;
          *(void *)&v55[16] = a1;
          unsigned int v21 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v22 = (char *)v21;
          if (v21) {
            sub_100055434(v21);
          }
        }
        else
        {
          uint64_t v22 = 0;
        }
        free(v22);
      }

      unsigned int v23 = sub_1000186EC(qword_1000E4318);
      id v53 = 0;
      id v24 = [v23 uniquePIDForPID:a2 error:&v53];
      unsigned int v13 = v53;

      if (v24)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        uint64_t v25 = (id)qword_1000E4060;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v56 = 0;
          unsigned int v26 = sub_100055404(1);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
            unsigned int v27 = v26;
          }
          else {
            unsigned int v27 = v26 & 0xFFFFFFFE;
          }
          if (v27)
          {
            *(_DWORD *)unsigned int v55 = 67109632;
            *(_DWORD *)&v55[4] = v12;
            *(_WORD *)&v55[8] = 1024;
            *(_DWORD *)&v55[10] = a3;
            *(_WORD *)&v55[14] = 2048;
            *(void *)&v55[16] = v24;
            unsigned int v28 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v29 = (char *)v28;
            if (v28) {
              sub_100055434(v28);
            }
          }
          else
          {
            unsigned int v29 = 0;
          }
          free(v29);
        }

        int v35 = mach_voucher_persona_for_originator();
        if (v35)
        {
          int v36 = v35;
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v37 = (id)qword_1000E4060;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            *(void *)unsigned int v55 = 0;
            unsigned int v38 = sub_100055404(1);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
              unsigned int v39 = v38;
            }
            else {
              unsigned int v39 = v38 & 0xFFFFFFFE;
            }
            if (v39)
            {
              LODWORD(v56) = 67109120;
              HIDWORD(v56) = v36;
              id v40 = (const char *)_os_log_send_and_compose_impl();
              id v41 = (char *)v40;
              if (v40) {
                sub_100055434(v40);
              }
            }
            else
            {
              id v41 = 0;
            }
            free(v41);
          }

          a5 = 22;
        }
        else
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          uint64_t v42 = (id)qword_1000E4060;
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
          {
            *(void *)unsigned int v55 = 0;
            unsigned int v43 = sub_100055404(1);
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG)) {
              unsigned int v44 = v43;
            }
            else {
              unsigned int v44 = v43 & 0xFFFFFFFE;
            }
            if (v44)
            {
              LODWORD(v56) = 67109120;
              HIDWORD(v56) = v54;
              int v45 = (const char *)_os_log_send_and_compose_impl();
              uint64_t v46 = (char *)v45;
              if (v45) {
                sub_100055434(v45);
              }
            }
            else
            {
              uint64_t v46 = 0;
            }
            free(v46);
          }

          if (a5)
          {
            *(_DWORD *)a5 = v54;
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            uint64_t v47 = (id)qword_1000E4060;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
            {
              *(void *)unsigned int v55 = 0;
              unsigned int v48 = sub_100055404(1);
              if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
                unsigned int v49 = v48;
              }
              else {
                unsigned int v49 = v48 & 0xFFFFFFFE;
              }
              if (v49)
              {
                LODWORD(v56) = 67109120;
                HIDWORD(v56) = v54;
                unsigned int v50 = (const char *)_os_log_send_and_compose_impl();
                unsigned int v51 = (char *)v50;
                if (v50) {
                  sub_100055434(v50);
                }
              }
              else
              {
                unsigned int v51 = 0;
              }
              free(v51);
            }

            a5 = 0;
          }
        }
      }
      else
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v30 = (id)qword_1000E4060;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v56 = 0;
          unsigned int v31 = sub_100055404(1);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
            unsigned int v32 = v31;
          }
          else {
            unsigned int v32 = v31 & 0xFFFFFFFE;
          }
          if (v32)
          {
            *(_DWORD *)unsigned int v55 = 67109378;
            *(_DWORD *)&v55[4] = a2;
            *(_WORD *)&v55[8] = 2114;
            *(void *)&v55[10] = v13;
            unsigned int v33 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v34 = (char *)v33;
            if (v33) {
              sub_100055434(v33);
            }
          }
          else
          {
            unsigned int v34 = 0;
          }
          free(v34);
        }

        a5 = (uint64_t)[v13 code];
      }
    }
    CFRelease(v11);
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v13 = (id)qword_1000E4060;
    a5 = 2;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v56 = 0;
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        *(_DWORD *)unsigned int v55 = 138412290;
        *(void *)&v55[4] = a1;
        unsigned int v16 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v17 = (char *)v16;
        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {
        unsigned int v17 = 0;
      }
      free(v17);
      a5 = 2;
    }
  }

  return a5;
}

uint64_t sub_10004B378()
{
  return 45;
}

uint64_t sub_10004B380(void *a1)
{
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  uint64_t v2 = (id)qword_1000E4060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      id v5 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  if (sub_100064D54(qword_1000E4040, a1))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFDictionaryRef v7 = (id)qword_1000E4060;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9)
      {
        uint64_t v10 = (const char *)_os_log_send_and_compose_impl();
        CFDictionaryRef v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
      }
      else
      {
        CFDictionaryRef v11 = 0;
      }
      free(v11);
    }
    uint64_t v16 = 0;
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFDictionaryRef v7 = (id)qword_1000E4060;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v12 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v12 & 0xFFFFFFFE;
      }
      if (v13)
      {
        unsigned int v14 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v15 = (char *)v14;
        if (v14) {
          sub_100055434(v14);
        }
      }
      else
      {
        unsigned int v15 = 0;
      }
      free(v15);
    }
    uint64_t v16 = 22;
  }

  return v16;
}

__CFDictionary *sub_10004B678(const __CFDictionary *a1, int *a2)
{
  unsigned int v4 = sub_100018600(qword_1000E4318);
  int v5 = sub_1000192C0((uint64_t)v4);

  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v6 = (id)qword_1000E4060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v7 = sub_100055404(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = v7 & 0xFFFFFFFE;
    }
    if (v8)
    {
      LOWORD(valuePtr) = 0;
      unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v10 = (char *)v9;
      if (v9) {
        sub_100055434(v9);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    free(v10);
  }

  if (MGGetBoolAnswer() && sub_100088734(a1, kUMUserSessionForcedProvisionTypeKey))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFDictionaryRef v11 = (id)qword_1000E4060;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v12 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v12 & 0xFFFFFFFE;
      }
      if (v13)
      {
        LOWORD(valuePtr) = 0;
        goto LABEL_33;
      }
      goto LABEL_44;
    }
    goto LABEL_46;
  }
  unsigned int v14 = (const void *)MGCopyAnswer();
  if (!v14)
  {
LABEL_36:
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v22 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_70;
    }
    unsigned int v23 = sub_100055404(1);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v24 = v23;
    }
    else {
      unsigned int v24 = v23 & 0xFFFFFFFE;
    }
    if (v24)
    {
      LOWORD(valuePtr) = 0;
      goto LABEL_55;
    }
LABEL_68:
    unsigned int v28 = 0;
LABEL_69:
    free(v28);
LABEL_70:

    int v35 = 0;
    int v36 = 45;
LABEL_71:
    if (a2 && v36) {
      *a2 = v36;
    }
    return v35;
  }
  unsigned int v15 = v14;
  CFTypeID v16 = CFGetTypeID(v14);
  if (v16 != CFBooleanGetTypeID())
  {
    CFRelease(v15);
    goto LABEL_36;
  }
  int Value = CFBooleanGetValue((CFBooleanRef)v15);
  CFRelease(v15);
  if (!Value) {
    goto LABEL_36;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFDictionaryRef v11 = (id)qword_1000E4060;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v18 = sub_100055404(1);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v18 & 0xFFFFFFFE;
    }
    if (v19)
    {
      LOWORD(valuePtr) = 0;
LABEL_33:
      unsigned int v20 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v21 = (char *)v20;
      if (v20) {
        sub_100055434(v20);
      }
      goto LABEL_45;
    }
LABEL_44:
    unsigned int v21 = 0;
LABEL_45:
    free(v21);
  }
LABEL_46:

  if (_os_feature_enabled_impl())
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    uint64_t v22 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_70;
    }
    unsigned int v25 = sub_100055404(1);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = v25 & 0xFFFFFFFE;
    }
    if (v26)
    {
      LOWORD(valuePtr) = 0;
LABEL_55:
      unsigned int v27 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v28 = (char *)v27;
      if (v27) {
        sub_100055434(v27);
      }
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  CFStringRef v29 = (const __CFString *)sub_100088788(a1, kUMUserSessionProvisionTypeKey[0]);
  if (CFStringCompare(v29, kUMUserSessionProvisionTypeEducation[0], 0))
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v30 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_295;
    }
    unsigned int v31 = sub_100055404(1);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v32 = v31;
    }
    else {
      unsigned int v32 = v31 & 0xFFFFFFFE;
    }
    if (v32)
    {
      LOWORD(valuePtr) = 0;
      goto LABEL_66;
    }
    goto LABEL_293;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v38 = (id)qword_1000E4060;
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v39 = sub_100055404(1);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v40 = v39;
    }
    else {
      unsigned int v40 = v39 & 0xFFFFFFFE;
    }
    if (v40)
    {
      LOWORD(valuePtr) = 0;
      id v41 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v42 = (char *)v41;
      if (v41) {
        sub_100055434(v41);
      }
    }
    else
    {
      uint64_t v42 = 0;
    }
    free(v42);
  }

  if (CFDictionaryContainsKey(a1, kUMEducationUserSizeKey[0]))
  {
    unint64_t v43 = sub_10008865C(a1, kUMEducationUserSizeKey[0]);
    unint64_t valuePtr = v43;
    unint64_t v44 = v43 >> 20;
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v45 = (id)qword_1000E4060;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v46 = sub_100055404(1);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v47 = v46;
      }
      else {
        unsigned int v47 = v46 & 0xFFFFFFFE;
      }
      if (v47)
      {
        unsigned int v48 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v49 = (char *)v48;
        if (v48) {
          sub_100055434(v48);
        }
      }
      else
      {
        unsigned int v49 = 0;
      }
      free(v49);
    }

    if ((v43 & 0xFFFFFFFFFFF00000) != v43)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      uint64_t v56 = (id)qword_1000E4060;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v57 = sub_100055404(1);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v58 = v57;
        }
        else {
          unsigned int v58 = v57 & 0xFFFFFFFE;
        }
        if (v58)
        {
          unsigned int v59 = (const char *)_os_log_send_and_compose_impl();
          int v60 = (char *)v59;
          if (v59) {
            sub_100055434(v59);
          }
        }
        else
        {
          int v60 = 0;
        }
        free(v60);
      }

      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v30 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_295;
      }
      unsigned int v77 = sub_100055404(1);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v78 = v77;
      }
      else {
        unsigned int v78 = v77 & 0xFFFFFFFE;
      }
      if (v78) {
        goto LABEL_66;
      }
      goto LABEL_293;
    }
    if ((unint64_t)((uint64_t)sub_10001EC90() / 0x100000) >= 0x8000) {
      unint64_t v55 = 2048;
    }
    else {
      unint64_t v55 = 1024;
    }
    if (v44 <= v55)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v61 = (id)qword_1000E4060;
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v62 = sub_100055404(1);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v63 = v62;
        }
        else {
          unsigned int v63 = v62 & 0xFFFFFFFE;
        }
        if (v63)
        {
          unsigned int v64 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v65 = (char *)v64;
          if (v64) {
            sub_100055434(v64);
          }
        }
        else
        {
          unsigned int v65 = 0;
        }
        free(v65);
      }
    }
    else
    {
      unint64_t v55 = v44;
    }
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v79 = (id)qword_1000E4060;
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v80 = sub_100055404(1);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v81 = v80;
      }
      else {
        unsigned int v81 = v80 & 0xFFFFFFFE;
      }
      if (v81)
      {
        unsigned int v82 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v83 = (char *)v82;
        if (v82) {
          sub_100055434(v82);
        }
      }
      else
      {
        unsigned int v83 = 0;
      }
      free(v83);
    }

    if (dword_1000E321C == -1) {
      int v84 = v5;
    }
    else {
      int v84 = 0;
    }
    if (v84 == 1 && qword_1000E42E8)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v85 = (id)qword_1000E4060;
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v86 = sub_100055404(1);
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v87 = v86;
        }
        else {
          unsigned int v87 = v86 & 0xFFFFFFFE;
        }
        if (v87)
        {
          uint64_t v88 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v89 = (char *)v88;
          if (v88) {
            sub_100055434(v88);
          }
        }
        else
        {
          unsigned int v89 = 0;
        }
        free(v89);
      }

      if (qword_1000E42B8 == 1)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v97 = (id)qword_1000E4060;
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v98 = sub_100055404(1);
          if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v99 = v98;
          }
          else {
            unsigned int v99 = v98 & 0xFFFFFFFE;
          }
          if (v99)
          {
            v100 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v101 = (char *)v100;
            if (v100) {
              sub_100055434(v100);
            }
          }
          else
          {
            unsigned int v101 = 0;
          }
          free(v101);
        }

        uint64_t v124 = sub_100056848(qword_1000E4038, 502);
        if (!v124)
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v30 = (id)qword_1000E4060;
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_295;
          }
          unsigned int v127 = sub_100055404(1);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v128 = v127;
          }
          else {
            unsigned int v128 = v127 & 0xFFFFFFFE;
          }
          if (v128) {
            goto LABEL_66;
          }
          goto LABEL_293;
        }
        int v35 = (__CFDictionary *)v124;
        qword_1000E42E8 = v55;
        CFNumberRef v125 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
        if (v125)
        {
          CFNumberRef v126 = v125;
          CFDictionarySetValue(v35, kUMUserSessionQuotaLimitKey, v125);
          CFDictionarySetValue(v35, kUMUserSessionEachUserSize, v126);
          CFRelease(v126);
        }
        sub_10001A7BC();
LABEL_299:
        int v36 = 0;
        goto LABEL_71;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v68 = (id)qword_1000E4060;
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v102 = sub_100055404(1);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v103 = v102;
        }
        else {
          unsigned int v103 = v102 & 0xFFFFFFFE;
        }
        if (v103) {
          goto LABEL_229;
        }
        goto LABEL_231;
      }
    }
    else
    {
      if ((v5 & 1) == 0)
      {
        int v35 = sub_10001F5BC(-1, v55);
        if (v35)
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v92 = (id)qword_1000E4060;
          if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v93 = sub_100055404(1);
            if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v94 = v93;
            }
            else {
              unsigned int v94 = v93 & 0xFFFFFFFE;
            }
            if (v94)
            {
              unsigned int v95 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v96 = (char *)v95;
              if (v95) {
                sub_100055434(v95);
              }
            }
            else
            {
              unsigned int v96 = 0;
            }
            free(v96);
          }

          sub_10002F4A8(v35, 0);
        }
        goto LABEL_299;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v68 = (id)qword_1000E4060;
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v90 = sub_100055404(1);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v91 = v90;
        }
        else {
          unsigned int v91 = v90 & 0xFFFFFFFE;
        }
        if (v91)
        {
LABEL_229:
          uint64_t v104 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v105 = (char *)v104;
          if (v104) {
            sub_100055434(v104);
          }
          goto LABEL_232;
        }
LABEL_231:
        uint64_t v105 = 0;
LABEL_232:
        free(v105);
      }
    }
LABEL_233:

    int v35 = 0;
    int v36 = 16;
    goto LABEL_71;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v50 = (id)qword_1000E4060;
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v51 = sub_100055404(1);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v52 = v51;
    }
    else {
      unsigned int v52 = v51 & 0xFFFFFFFE;
    }
    if (v52)
    {
      LOWORD(valuePtr) = 0;
      id v53 = (const char *)_os_log_send_and_compose_impl();
      int v54 = (char *)v53;
      if (v53) {
        sub_100055434(v53);
      }
    }
    else
    {
      int v54 = 0;
    }
    free(v54);
  }

  unsigned int v66 = sub_100018600(qword_1000E4318);
  int v67 = sub_1000192C0((uint64_t)v66);

  if (v67)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v68 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_233;
    }
    unsigned int v69 = sub_100055404(1);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v70 = v69;
    }
    else {
      unsigned int v70 = v69 & 0xFFFFFFFE;
    }
    if (v70)
    {
      LOWORD(valuePtr) = 0;
      goto LABEL_229;
    }
    goto LABEL_231;
  }
  if (CFDictionaryContainsKey(a1, kUMEducationNumberOfUsersKey[0]))
  {
    int v71 = sub_1000885F0(a1, kUMEducationNumberOfUsersKey[0]);
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v72 = (id)qword_1000E4060;
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v73 = sub_100055404(1);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v74 = v73;
      }
      else {
        unsigned int v74 = v73 & 0xFFFFFFFE;
      }
      if (v74)
      {
        LODWORD(valuePtr) = 67109120;
        HIDWORD(valuePtr) = v71;
        unsigned int v75 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v76 = (char *)v75;
        if (v75) {
          sub_100055434(v75);
        }
      }
      else
      {
        unsigned int v76 = 0;
      }
      free(v76);
    }
  }
  else
  {
    int v71 = -1;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v106 = (id)qword_1000E4060;
  if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v107 = sub_100055404(1);
    if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v108 = v107;
    }
    else {
      unsigned int v108 = v107 & 0xFFFFFFFE;
    }
    if (v108)
    {
      LODWORD(valuePtr) = 67109120;
      HIDWORD(valuePtr) = v71;
      unsigned int v109 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v110 = (char *)v109;
      if (v109) {
        sub_100055434(v109);
      }
    }
    else
    {
      unsigned int v110 = 0;
    }
    free(v110);
  }

  unsigned int v111 = sub_10001F5BC(v71, 0);
  if (!v111)
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v30 = (id)qword_1000E4060;
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_295;
    }
    unsigned int v117 = sub_100055404(1);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v118 = v117;
    }
    else {
      unsigned int v118 = v117 & 0xFFFFFFFE;
    }
    if (v118)
    {
      LOWORD(valuePtr) = 0;
LABEL_66:
      unsigned int v33 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v34 = (char *)v33;
      if (v33) {
        sub_100055434(v33);
      }
      goto LABEL_294;
    }
LABEL_293:
    unsigned int v34 = 0;
LABEL_294:
    free(v34);
LABEL_295:

    int v35 = 0;
    int v36 = 22;
    goto LABEL_71;
  }
  int v35 = v111;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v112 = (id)qword_1000E4060;
  if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v113 = sub_100055404(1);
    if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v114 = v113;
    }
    else {
      unsigned int v114 = v113 & 0xFFFFFFFE;
    }
    if (v114)
    {
      LOWORD(valuePtr) = 0;
      unsigned int v115 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v116 = (char *)v115;
      if (v115) {
        sub_100055434(v115);
      }
    }
    else
    {
      unsigned int v116 = 0;
    }
    free(v116);
  }

  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v119 = (id)qword_1000E4060;
  if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v120 = sub_100055404(1);
    if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v121 = v120;
    }
    else {
      unsigned int v121 = v120 & 0xFFFFFFFE;
    }
    if (v121)
    {
      LOWORD(valuePtr) = 0;
      CFDictionaryRef v122 = (const char *)_os_log_send_and_compose_impl();
      CFStringRef v123 = (char *)v122;
      if (v122) {
        sub_100055434(v122);
      }
    }
    else
    {
      CFStringRef v123 = 0;
    }
    free(v123);
  }

  sub_10002F4A8(v35, 0);
  return v35;
}

BOOL sub_10004CC44(const __CFString *a1, void *a2)
{
  unsigned int v3 = sub_10005C160(qword_1000E4040, a2);
  if (v3)
  {
    unsigned int v4 = v3;
    sub_10005B430((id)qword_1000E4040, 0, v3);
    CFDictionaryRef v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    CFRelease(v4);
    if (v5)
    {
      if (!a1)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        CFTypeID v16 = (id)qword_1000E4060;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v17 = sub_100055404(1);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v18 = v17;
          }
          else {
            unsigned int v18 = v17 & 0xFFFFFFFE;
          }
          if (v18)
          {
            unsigned int v19 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v20 = (char *)v19;
            if (v19) {
              sub_100055434(v19);
            }
          }
          else
          {
            unsigned int v20 = 0;
          }
          free(v20);
        }

        int v39 = 0;
        goto LABEL_91;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v6 = (id)qword_1000E4060;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v7 = sub_100055404(1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v7 & 0xFFFFFFFE;
        }
        if (v8)
        {
          unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v10 = (char *)v9;
          if (v9) {
            sub_100055434(v9);
          }
        }
        else
        {
          uint64_t v10 = 0;
        }
        free(v10);
      }

      if (!CFDictionaryContainsKey(v5, off_1000E32F8)) {
        goto LABEL_56;
      }
      uint64_t v22 = sub_1000885B4(v5, off_1000E32F8);
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v23 = (id)qword_1000E4060;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v24 = sub_100055404(1);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
          unsigned int v25 = v24;
        }
        else {
          unsigned int v25 = v24 & 0xFFFFFFFE;
        }
        if (v25)
        {
          unsigned int v26 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v27 = (char *)v26;
          if (v26) {
            sub_100055434(v26);
          }
        }
        else
        {
          unsigned int v27 = 0;
        }
        free(v27);
      }

      if (v22)
      {
        CFRetain(v22);
        MutableCFArrayRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, (CFArrayRef)v22);
        if (CFArrayGetCount(MutableCopy) >= 1)
        {
          CFIndex v29 = 0;
          while (1)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, v29);
            if (ValueAtIndex)
            {
              CFStringRef v31 = ValueAtIndex;
              CFTypeID v32 = CFGetTypeID(ValueAtIndex);
              if (v32 == CFStringGetTypeID() && CFEqual(v31, a1)) {
                break;
              }
            }
            if (CFArrayGetCount(MutableCopy) <= ++v29) {
              goto LABEL_55;
            }
          }
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          int v45 = (id)qword_1000E4060;
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v46 = sub_100055404(1);
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v47 = v46;
            }
            else {
              unsigned int v47 = v46 & 0xFFFFFFFE;
            }
            if (v47)
            {
              unsigned int v48 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v49 = (char *)v48;
              if (v48) {
                sub_100055434(v48);
              }
            }
            else
            {
              unsigned int v49 = 0;
            }
            free(v49);
          }

          int v39 = 1;
          goto LABEL_88;
        }
LABEL_55:
        CFArrayAppendValue(MutableCopy, a1);
        CFDictionaryReplaceValue(v5, off_1000E32F8, MutableCopy);
        int v33 = 0;
      }
      else
      {
LABEL_56:
        MutableCFArrayRef Copy = sub_100088D04();
        CFArrayAppendValue(MutableCopy, a1);
        CFDictionarySetValue(v5, off_1000E32F8, MutableCopy);
        uint64_t v22 = 0;
        int v33 = 1;
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v34 = (id)qword_1000E4060;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v35 = sub_100055404(1);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v36 = v35;
        }
        else {
          unsigned int v36 = v35 & 0xFFFFFFFE;
        }
        if (v36)
        {
          unsigned int v37 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v38 = (char *)v37;
          if (v37) {
            sub_100055434(v37);
          }
        }
        else
        {
          unsigned int v38 = 0;
        }
        free(v38);
      }

      if (sub_10005DBE8(qword_1000E4040))
      {
        int v39 = 1;
        if (v33)
        {
LABEL_89:
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
LABEL_91:
          CFRelease(v5);
          return v39 != 0;
        }
      }
      else
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v40 = (id)qword_1000E4060;
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v41 = sub_100055404(1);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v42 = v41;
          }
          else {
            unsigned int v42 = v41 & 0xFFFFFFFE;
          }
          if (v42)
          {
            unint64_t v43 = (const char *)_os_log_send_and_compose_impl();
            unint64_t v44 = (char *)v43;
            if (v43) {
              sub_100055434(v43);
            }
          }
          else
          {
            unint64_t v44 = 0;
          }
          free(v44);
        }

        if (v33)
        {
          CFDictionaryRemoveValue(v5, off_1000E32F8);
          int v39 = 0;
          goto LABEL_89;
        }
        CFDictionaryReplaceValue(v5, off_1000E32F8, v22);
        int v39 = 0;
      }
LABEL_88:
      CFRelease(v22);
      goto LABEL_89;
    }
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFDictionaryRef v11 = (id)qword_1000E4060;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v12 = sub_100055404(1);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = v12 & 0xFFFFFFFE;
    }
    if (v13)
    {
      unsigned int v14 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v15 = (char *)v14;
      if (v14) {
        sub_100055434(v14);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    free(v15);
  }

  return 0;
}

CFStringRef sub_10004D418(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v7 = a1;
  if (v7)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      unsigned int v8 = sub_10005C160(qword_1000E4040, v5);
      if (!v8)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v23 = (id)qword_1000E4060;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v24 = sub_100055404(1);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v25 = v24;
          }
          else {
            unsigned int v25 = v24 & 0xFFFFFFFE;
          }
          if (v25)
          {
            unsigned int v26 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v27 = (char *)v26;
            if (v26) {
              sub_100055434(v26);
            }
          }
          else
          {
            unsigned int v27 = 0;
          }
          free(v27);
        }

        CFStringRef v38 = 0;
        *__error() = 2;
        int v39 = 1;
        goto LABEL_79;
      }
      unsigned int v9 = sub_10005B968(qword_1000E4040, v7, v8);
      uint64_t v10 = v9;
      if (!v9)
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        int v33 = (id)qword_1000E4060;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v34 = sub_100055404(1);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v35 = v34;
          }
          else {
            unsigned int v35 = v34 & 0xFFFFFFFE;
          }
          if (v35)
          {
            unsigned int v36 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v37 = (char *)v36;
            if (v36) {
              sub_100055434(v36);
            }
          }
          else
          {
            unsigned int v37 = 0;
          }
          free(v37);
        }

        CFStringRef v38 = 0;
        *__error() = 2;
        int v39 = 1;
        goto LABEL_78;
      }
      CFDictionaryRef v11 = [v9 objectForKeyedSubscript:kUMUserSessionHomeDirKey];
      if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        if (&_sandbox_extension_issue_file_to_process)
        {
          [v11 UTF8String];
          unsigned int v40 = (const char *)sandbox_extension_issue_file_to_process();
          if (v40)
          {
            unsigned int v41 = (char *)v40;
            CFStringRef v42 = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, v40, 0x8000100u, kCFAllocatorDefault);
            if (v42)
            {
              CFStringRef v38 = v42;
              if (qword_1000E4068 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              unint64_t v43 = (id)qword_1000E4060;
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                unsigned int v44 = sub_100055404(1);
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v45 = v44;
                }
                else {
                  unsigned int v45 = v44 & 0xFFFFFFFE;
                }
                if (v45)
                {
                  unsigned int v46 = (const char *)_os_log_send_and_compose_impl();
                  unsigned int v47 = (char *)v46;
                  if (v46) {
                    sub_100055434(v46);
                  }
                }
                else
                {
                  unsigned int v47 = 0;
                }
                free(v47);
              }

              int v39 = 0;
              goto LABEL_74;
            }
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            uint64_t v56 = (id)qword_1000E4060;
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v57 = sub_100055404(1);
              if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v58 = v57;
              }
              else {
                unsigned int v58 = v57 & 0xFFFFFFFE;
              }
              if (v58)
              {
                unsigned int v59 = (const char *)_os_log_send_and_compose_impl();
                int v60 = (char *)v59;
                if (v59) {
                  sub_100055434(v59);
                }
              }
              else
              {
                int v60 = 0;
              }
              free(v60);
            }

            free(v41);
            unsigned int v48 = __error();
            CFStringRef v38 = 0;
            int v49 = 12;
          }
          else
          {
            if (qword_1000E4068 != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            unsigned int v51 = (id)qword_1000E4060;
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v52 = sub_100055404(1);
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v53 = v52;
              }
              else {
                unsigned int v53 = v52 & 0xFFFFFFFE;
              }
              if (v53)
              {
                int v54 = (const char *)_os_log_send_and_compose_impl();
                unint64_t v55 = (char *)v54;
                if (v54) {
                  sub_100055434(v54);
                }
              }
              else
              {
                unint64_t v55 = 0;
              }
              free(v55);
            }

            unsigned int v48 = __error();
            CFStringRef v38 = 0;
            int v49 = 9;
          }
        }
        else
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v12 = (id)qword_1000E4060;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v13 = sub_100055404(1);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v14 = v13;
            }
            else {
              unsigned int v14 = v13 & 0xFFFFFFFE;
            }
            if (v14)
            {
              unsigned int v15 = (const char *)_os_log_send_and_compose_impl();
              CFTypeID v16 = (char *)v15;
              if (v15) {
                sub_100055434(v15);
              }
            }
            else
            {
              CFTypeID v16 = 0;
            }
            free(v16);
          }

          unsigned int v48 = __error();
          CFStringRef v38 = 0;
          int v49 = 5;
        }
      }
      else
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v28 = (id)qword_1000E4060;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v29 = sub_100055404(1);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v30 = v29;
          }
          else {
            unsigned int v30 = v29 & 0xFFFFFFFE;
          }
          if (v30)
          {
            CFStringRef v31 = (const char *)_os_log_send_and_compose_impl();
            CFTypeID v32 = (char *)v31;
            if (v31) {
              sub_100055434(v31);
            }
          }
          else
          {
            CFTypeID v32 = 0;
          }
          free(v32);
        }

        unsigned int v48 = __error();
        CFStringRef v38 = 0;
        int v49 = 2;
      }
      int *v48 = v49;
      int v39 = 1;
LABEL_74:

LABEL_78:
LABEL_79:

      if (v39) {
        CFStringRef v22 = 0;
      }
      else {
        CFStringRef v22 = v38;
      }
      goto LABEL_82;
    }
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v17 = (id)qword_1000E4060;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v18 = sub_100055404(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v18 & 0xFFFFFFFE;
    }
    if (v19)
    {
      unsigned int v20 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v21 = (char *)v20;
      if (v20) {
        sub_100055434(v20);
      }
    }
    else
    {
      unsigned int v21 = 0;
    }
    free(v21);
  }

  *__error() = 22;
  CFStringRef v22 = 0;
LABEL_82:

  return v22;
}

void sub_10004DD9C(id a1)
{
  qword_1000E4060 = (uint64_t)os_log_create(off_1000E33D8, "legacy");

  _objc_release_x1();
}

void sub_10004DDE4(id a1)
{
  qword_1000E4070 = (uint64_t)os_log_create(off_1000E33D8, "user");

  _objc_release_x1();
}

uint64_t sub_10004DE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (&_sandbox_user_state_item_buffer_destroy) {
    BOOL v5 = &_sandbox_user_state_item_buffer_send == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && &_sandbox_set_user_state_item != 0 && &_sandbox_user_state_item_buffer_create != 0)
  {
    sandbox_user_state_item_buffer_create();
    if (a5)
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v14 = (id)qword_1000E4060;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v15 = sub_100055404(1);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v16 = v15;
        }
        else {
          unsigned int v16 = v15 & 0xFFFFFFFE;
        }
        if (v16)
        {
          unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v18 = (char *)v17;
          if (v17) {
            sub_100055434(v17);
          }
        }
        else
        {
          unsigned int v18 = 0;
        }
        free(v18);
      }

      sandbox_set_user_state_item();
      if (sandbox_user_state_item_buffer_send())
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v25 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_67;
        }
        int v26 = sub_100055404(1);
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
          v26 &= ~1u;
        }
        if (v26) {
          goto LABEL_62;
        }
        goto LABEL_65;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v19 = (id)qword_1000E4060;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v20 = sub_100055404(1);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v21 = v20;
        }
        else {
          unsigned int v21 = v20 & 0xFFFFFFFE;
        }
        if (v21)
        {
          CFStringRef v22 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v23 = (char *)v22;
          if (v22) {
            sub_100055434(v22);
          }
        }
        else
        {
          unsigned int v23 = 0;
        }
        free(v23);
      }

      sandbox_set_user_state_item();
      sandbox_set_user_state_item();
      sandbox_set_user_state_item();
      sandbox_set_user_state_item();
      if (sandbox_user_state_item_buffer_send())
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v25 = (id)qword_1000E4060;
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_67;
        }
        int v27 = sub_100055404(1);
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
          v27 &= ~1u;
        }
        if (v27)
        {
LABEL_62:
          unsigned int v28 = v25;
          __error();
          unsigned int v29 = (char *)_os_log_send_and_compose_impl();

          if (v29) {
            sub_100055434(v29);
          }
          goto LABEL_66;
        }
LABEL_65:
        unsigned int v29 = 0;
LABEL_66:
        free(v29);
LABEL_67:

        uint64_t v24 = 0;
        goto LABEL_68;
      }
    }
    uint64_t v24 = 1;
LABEL_68:
    sandbox_user_state_item_buffer_destroy();
    return v24;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v8 = (id)qword_1000E4060;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v9 = sub_100055404(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v10 = v9;
    }
    else {
      unsigned int v10 = v9 & 0xFFFFFFFE;
    }
    if (v10)
    {
      CFDictionaryRef v11 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v12 = (char *)v11;
      if (v11) {
        sub_100055434(v11);
      }
    }
    else
    {
      unsigned int v12 = 0;
    }
    free(v12);
  }

  return 0;
}

void sub_10004E3D0(int32x2_t *a1)
{
  if (qword_1000E4078 != -1) {
    dispatch_once(&qword_1000E4078, &stru_1000D55B8);
  }
  uint64_t v2 = (id)qword_1000E4070;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v36 = 0;
    unsigned int v3 = sub_100055404(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      __int32 v5 = a1[4].i32[0];
      __int32 v6 = a1[4].i32[1];
      LODWORD(v33) = 67109376;
      HIDWORD(v33) = v5;
      __int16 v34 = 1024;
      __int32 v35 = v6;
      id v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  unsigned int v9 = (void *)os_transaction_create();
  if (qword_1000E4078 != -1) {
    dispatch_once(&qword_1000E4078, &stru_1000D55B8);
  }
  unsigned int v10 = (id)qword_1000E4070;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v33 = 0;
    unsigned int v11 = sub_100055404(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v12 = v11;
    }
    else {
      unsigned int v12 = v11 & 0xFFFFFFFE;
    }
    if (v12)
    {
      __int32 v13 = a1[4].i32[0];
      LODWORD(v36) = 67109120;
      HIDWORD(v36) = v13;
      unsigned int v14 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v15 = (char *)v14;
      if (v14) {
        sub_100055434(v14);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    free(v15);
  }

  int active = launch_active_user_logout();
  if (active)
  {
    __int32 v23 = active;
    if (qword_1000E4078 != -1) {
      dispatch_once(&qword_1000E4078, &stru_1000D55B8);
    }
    uint64_t v24 = (id)qword_1000E4070;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = 0;
      unsigned int v25 = sub_100055404(0);
      BOOL v26 = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
      int v27 = 0;
      if (v26) {
        unsigned int v28 = v25;
      }
      else {
        unsigned int v28 = v25 & 0xFFFFFFFE;
      }
      if (v28)
      {
        __int32 v29 = a1[4].i32[0];
        LODWORD(v33) = 67109376;
        HIDWORD(v33) = v29;
        __int16 v34 = 1024;
        __int32 v35 = v23;
        unsigned int v30 = (const char *)_os_log_send_and_compose_impl();
        int v27 = 0;
        if (v30)
        {
          CFStringRef v31 = v30;
          sub_100055434(v30);
          int v27 = (char *)v31;
        }
      }
      free(v27);
    }

    sub_100019810("UserManagement user switch failed: launch_active_user_logout(%d) failed: %d", a1[4].i32[0], v23);
  }
  if (qword_1000E4078 != -1) {
    dispatch_once(&qword_1000E4078, &stru_1000D55B8);
  }
  unsigned int v17 = (id)qword_1000E4070;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v33 = 0;
    unsigned int v18 = sub_100055404(0);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v18 & 0xFFFFFFFE;
    }
    if (v19)
    {
      __int32 v20 = a1[4].i32[0];
      LODWORD(v36) = 67109120;
      HIDWORD(v36) = v20;
      unsigned int v21 = (const char *)_os_log_send_and_compose_impl();
      CFStringRef v22 = (char *)v21;
      if (v21) {
        sub_100055434(v21);
      }
    }
    else
    {
      CFStringRef v22 = 0;
    }
    free(v22);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004E84C;
  block[3] = &unk_1000D4E28;
  void block[4] = vrev64_s32(a1[4]);
  dispatch_sync((dispatch_queue_t)qword_1000E4320, block);
}

void sub_10004E84C(NSObject *a1)
{
  uint64_t v2 = +[RDServer sharedServer];
  [v2 resetStateForUserSwitch];

  if (qword_1000E4308)
  {
    if (qword_1000E4078 != -1) {
      dispatch_once(&qword_1000E4078, &stru_1000D55B8);
    }
    unsigned int v3 = (id)qword_1000E4070;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v4 = sub_100055404(0);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v5 = v4;
      }
      else {
        unsigned int v5 = v4 & 0xFFFFFFFE;
      }
      if (v5)
      {
        __int32 v6 = (const char *)_os_log_send_and_compose_impl();
        id v7 = (char *)v6;
        if (v6) {
          sub_100055434(v6);
        }
      }
      else
      {
        id v7 = 0;
      }
      free(v7);
    }

    dispatch_source_cancel((dispatch_source_t)qword_1000E4308);
    unsigned int v8 = (void *)qword_1000E4308;
    qword_1000E4308 = 0;
  }
  if (!sub_1000459D4(a1[4].isa, HIDWORD(a1[4].isa)))
  {
    if (qword_1000E4078 != -1) {
      dispatch_once(&qword_1000E4078, &stru_1000D55B8);
    }
    a1 = (id)qword_1000E4070;
    if (os_log_type_enabled(a1, OS_LOG_TYPE_ERROR))
    {
      unsigned int v28 = sub_100055404(0);
      BOOL v29 = os_log_type_enabled(a1, OS_LOG_TYPE_ERROR);
      unsigned int v30 = 0;
      if (v29) {
        unsigned int v31 = v28;
      }
      else {
        unsigned int v31 = v28 & 0xFFFFFFFE;
      }
      if (v31)
      {
        CFTypeID v32 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v30 = 0;
        if (v32)
        {
          uint64_t v33 = v32;
          sub_100055434(v32);
          unsigned int v30 = (char *)v33;
        }
      }
      free(v30);
    }

    int active = sub_100019810("UserManagement user switch failed: failed to switch foreground user");
LABEL_63:
    int v34 = active;
    if (v15 != -1) {
      dispatch_once(&qword_1000E4078, &stru_1000D55B8);
    }
    __int32 v35 = (id)qword_1000E4070;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      unsigned int v36 = sub_100055404(0);
      BOOL v37 = os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
      CFStringRef v38 = 0;
      if (v37) {
        unsigned int v39 = v36;
      }
      else {
        unsigned int v39 = v36 & 0xFFFFFFFE;
      }
      if (v39)
      {
        unsigned int v40 = (const char *)_os_log_send_and_compose_impl();
        CFStringRef v38 = 0;
        if (v40)
        {
          unsigned int v41 = v40;
          sub_100055434(v40);
          CFStringRef v38 = (char *)v41;
        }
      }
      free(v38);
    }

    sub_100019810("UserManagement user switch failed: launch_active_user_login(%d) failed: %d", LODWORD(a1[4].isa), v34);
  }
  if (qword_1000E4078 != -1) {
    dispatch_once(&qword_1000E4078, &stru_1000D55B8);
  }
  unsigned int v9 = (id)qword_1000E4070;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = sub_100055404(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = v10 & 0xFFFFFFFE;
    }
    if (v11)
    {
      unsigned int v12 = (const char *)_os_log_send_and_compose_impl();
      __int32 v13 = (char *)v12;
      if (v12) {
        sub_100055434(v12);
      }
    }
    else
    {
      __int32 v13 = 0;
    }
    free(v13);
  }

  int active = launch_active_user_login();
  uint64_t v15 = qword_1000E4078;
  if (active) {
    goto LABEL_63;
  }
  if (qword_1000E4078 != -1) {
    dispatch_once(&qword_1000E4078, &stru_1000D55B8);
  }
  unsigned int v16 = (id)qword_1000E4070;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v17 = sub_100055404(0);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = v17 & 0xFFFFFFFE;
    }
    if (v18)
    {
      unsigned int v19 = (const char *)_os_log_send_and_compose_impl();
      __int32 v20 = (char *)v19;
      if (v19) {
        sub_100055434(v19);
      }
    }
    else
    {
      __int32 v20 = 0;
    }
    free(v20);
  }

  if (qword_1000E4078 != -1) {
    dispatch_once(&qword_1000E4078, &stru_1000D55B8);
  }
  unsigned int v21 = (id)qword_1000E4070;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v22 = sub_100055404(0);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v23 = v22;
    }
    else {
      unsigned int v23 = v22 & 0xFFFFFFFE;
    }
    if (v23)
    {
      uint64_t v24 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v25 = (char *)v24;
      if (v24) {
        sub_100055434(v24);
      }
    }
    else
    {
      unsigned int v25 = 0;
    }
    free(v25);
  }

  sub_1000578D4(qword_1000E4038);
  byte_1000E4048 = 0;
  BOOL v26 = sub_1000186E0(qword_1000E4318);
  int v27 = +[NSString stringWithUTF8String:"com.apple.mobile.usermanagerd.foregrounduser_changed"];
  [v26 post:v27];

  if (dword_1000E42C0 == 1) {
    sub_10001BEC4();
  }
}

void sub_10004EEB0(int a1)
{
  CFDictionaryRef v1 = (const __CFDictionary *)sub_100088B1C("/private/var//keybags/usersession.kb");
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    int valuePtr = 0;
    int v3 = sub_1000885F0(v1, @"NUMENT");
    CFDataRef v4 = (const __CFData *)sub_100088578(v2, @"BLOB");
    unsigned int v5 = &qword_1000E4000;
    if (CFDictionaryContainsKey(v2, @"DEVICECONFIG"))
    {
      int v6 = sub_1000885F0(v2, @"DEVICECONFIG");
      int v7 = v6;
      if (v6 >= 3)
      {
        uint64_t v177 = sub_100019810("usermanagerd: device configuration %d is from the future! Downgrading is not supported.", v6);
        sub_100050EC4(v177, v178);
        return;
      }
      dword_1000E42C0 = v6;
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v8 = (id)qword_1000E4060;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v182[0] = 0;
        unsigned int v9 = sub_100055404(1);
        unsigned int v10 = v8;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v11 = v9;
        }
        else {
          unsigned int v11 = v9 & 0xFFFFFFFE;
        }
        if (v11)
        {
          LODWORD(v183) = 67109120;
          HIDWORD(v183) = dword_1000E42C0;
          unsigned int v12 = (char *)_os_log_send_and_compose_impl();

          if (v12) {
            sub_100055434(v12);
          }
        }
        else
        {

          unsigned int v12 = 0;
        }
        unsigned int v5 = &qword_1000E4000;
        free(v12);
      }

      BOOL v18 = dword_1000E42C0 == 0;
    }
    else
    {
      dword_1000E42C0 = 0;
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      __int32 v13 = (id)qword_1000E4060;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v182[0] = 0;
        unsigned int v14 = sub_100055404(1);
        uint64_t v15 = v13;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v16 = v14;
        }
        else {
          unsigned int v16 = v14 & 0xFFFFFFFE;
        }
        if (v16)
        {
          LODWORD(v183) = 67109120;
          HIDWORD(v183) = dword_1000E42C0;
          unsigned int v17 = (char *)_os_log_send_and_compose_impl();

          if (v17) {
            sub_100055434(v17);
          }
        }
        else
        {

          unsigned int v17 = 0;
        }
        free(v17);
        unsigned int v5 = &qword_1000E4000;
      }

      int v7 = 0;
      BOOL v18 = 1;
    }
    if (CFDictionaryContainsKey(v2, @"BOOTEDUSER"))
    {
      dword_1000E3218 = sub_1000885F0(v2, @"BOOTEDUSER");
      if (v5[13] != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v19 = (id)qword_1000E4060;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v182[0] = 0;
        unsigned int v20 = sub_100055404(1);
        unsigned int v19 = v19;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v21 = v20;
        }
        else {
          unsigned int v21 = v20 & 0xFFFFFFFE;
        }
        if (v21)
        {
          LODWORD(v183) = 67109120;
          HIDWORD(v183) = dword_1000E3218;
          goto LABEL_46;
        }
        goto LABEL_48;
      }
    }
    else
    {
      dword_1000E3218 = 501;
      if (v5[13] != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v19 = (id)qword_1000E4060;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v182[0] = 0;
        unsigned int v22 = sub_100055404(1);
        unsigned int v19 = v19;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v23 = v22;
        }
        else {
          unsigned int v23 = v22 & 0xFFFFFFFE;
        }
        if (v23)
        {
          LODWORD(v183) = 67109120;
          HIDWORD(v183) = dword_1000E3218;
LABEL_46:
          uint64_t v24 = (char *)_os_log_send_and_compose_impl();

          if (v24) {
            sub_100055434(v24);
          }
          goto LABEL_49;
        }
LABEL_48:

        uint64_t v24 = 0;
LABEL_49:
        free(v24);
        unsigned int v5 = &qword_1000E4000;
      }
    }

    qword_1000E3228 = sub_10008865C(v2, @"APNSID");
    if (v5[13] != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v25 = (id)qword_1000E4060;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v183 = 0;
      unsigned int v26 = sub_100055404(1);
      int v27 = v25;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v28 = v26;
      }
      else {
        unsigned int v28 = v26 & 0xFFFFFFFE;
      }
      if (v28)
      {
        LODWORD(v182[0]) = 134217984;
        *(void *)((char *)v182 + 4) = qword_1000E3228;
        BOOL v29 = (char *)_os_log_send_and_compose_impl();

        if (v29) {
          sub_100055434(v29);
        }
      }
      else
      {

        BOOL v29 = 0;
      }
      unsigned int v5 = &qword_1000E4000;
      free(v29);
    }

    if (v3)
    {
      if (qword_1000E42B0 && CFArrayGetCount((CFArrayRef)qword_1000E42B0) >= 1) {
        CFArrayRemoveAllValues((CFMutableArrayRef)qword_1000E42B0);
      }
      CFDictionaryRef v179 = v2;
      BytePtr = (UInt8 *)CFDataGetBytePtr(v4);
      CFIndex Length = CFDataGetLength(v4);
      CFArrayRef v32 = (const __CFArray *)sub_100088924(BytePtr, Length);
      if (v3 < 1)
      {
        int v35 = 0;
        char v34 = 0;
      }
      else
      {
        CFIndex v33 = 0;
        char v34 = 0;
        int v35 = 0;
        uint64_t v36 = v3;
        BOOL v37 = &qword_1000E4000;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v32, v33);
          if (ValueAtIndex)
          {
            CFDictionaryRef v39 = ValueAtIndex;
            CFTypeID v40 = CFGetTypeID(ValueAtIndex);
            if (v40 == CFDictionaryGetTypeID())
            {
              int v41 = sub_1000885F0(v39, kUMUserSessionIDKey);
              int valuePtr = v41;
              int v42 = *((_DWORD *)v37 + 176);
              if (v18 && v41 > 501)
              {
                if (v42 != 1)
                {
                  if (qword_1000E4068 != -1) {
                    dispatch_once(&qword_1000E4068, &stru_1000D5598);
                  }
                  unint64_t v43 = (id)qword_1000E4060;
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                  {
                    v182[0] = 0;
                    unsigned int v44 = sub_100055404(1);
                    unsigned int v45 = v43;
                    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v46 = v44;
                    }
                    else {
                      unsigned int v46 = v44 & 0xFFFFFFFE;
                    }
                    if (v46)
                    {
                      LODWORD(v183) = 67109120;
                      HIDWORD(v183) = valuePtr;
                      unsigned int v47 = (char *)_os_log_send_and_compose_impl();

                      if (v47) {
                        sub_100055434(v47);
                      }
                    }
                    else
                    {

                      unsigned int v47 = 0;
                    }
                    BOOL v37 = &qword_1000E4000;
                    free(v47);
                  }

                  if (![(id)qword_1000E4030 splitUserVolumeEnabled]) {
                    char v34 = 1;
                  }
                  int v7 = 1;
                  int v41 = valuePtr;
                }
                BOOL v18 = 0;
                *((_DWORD *)v37 + 176) = v7;
                int v35 = 1;
                int v42 = v7;
              }
              if (v42 == 1 && v41 == 502 && !CFDictionaryContainsKey(v39, kUMUserSessionisPrimaryKey))
              {
                if (qword_1000E4068 != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                unsigned int v48 = (id)qword_1000E4060;
                if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                {
                  v182[0] = 0;
                  unsigned int v49 = sub_100055404(1);
                  unsigned int v50 = v48;
                  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v51 = v49;
                  }
                  else {
                    unsigned int v51 = v49 & 0xFFFFFFFE;
                  }
                  if (v51)
                  {
                    LOWORD(v183) = 0;
                    unsigned int v52 = (char *)_os_log_send_and_compose_impl();

                    if (v52) {
                      sub_100055434(v52);
                    }
                  }
                  else
                  {

                    unsigned int v52 = 0;
                  }
                  free(v52);
                }

                CFDictionarySetValue(v39, kUMUserSessionisPrimaryKey, kCFBooleanTrue);
                CFDictionarySetValue(v39, kUMUserSessionisAdminKey, kCFBooleanTrue);
                int v35 = 1;
                BOOL v37 = &qword_1000E4000;
              }
              if (v7 == 1 && valuePtr < 502) {
                int v7 = 1;
              }
              else {
                sub_100021EF4(v39, a1);
              }
            }
          }
          ++v33;
        }
        while (v36 != v33);
      }
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFDictionaryRef v2 = v179;
      unsigned int v53 = (id)qword_1000E4060;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v183 = 0;
        unsigned int v54 = sub_100055404(1);
        unint64_t v55 = v53;
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v56 = v54;
        }
        else {
          unsigned int v56 = v54 & 0xFFFFFFFE;
        }
        if (v56)
        {
          LODWORD(v182[0]) = 138412290;
          *(void *)((char *)v182 + 4) = qword_1000E42B0;
          unsigned int v57 = (char *)_os_log_send_and_compose_impl();

          if (v57) {
            sub_100055434(v57);
          }
        }
        else
        {

          unsigned int v57 = 0;
        }
        free(v57);
      }

      if (v32) {
        CFRelease(v32);
      }
      if (v34)
      {
        unsigned int v5 = &qword_1000E4000;
        if (sub_10002EA7C(501, a1))
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v58 = (id)qword_1000E4060;
          if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
          {
            v182[0] = 0;
            unsigned int v59 = sub_100055404(1);
            unsigned int v58 = v58;
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v60 = v59;
            }
            else {
              unsigned int v60 = v59 & 0xFFFFFFFE;
            }
            if (v60)
            {
              LOWORD(v183) = 0;
              unsigned int v61 = (char *)_os_log_send_and_compose_impl();

              if (v61) {
                sub_100055434(v61);
              }
            }
            else
            {

              unsigned int v61 = 0;
            }
            free(v61);
          }
          int v35 = 1;
        }
        else
        {
          if (qword_1000E4068 != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v58 = (id)qword_1000E4060;
          if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
          {
            v182[0] = 0;
            unsigned int v62 = sub_100055404(1);
            unsigned int v58 = v58;
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v63 = v62;
            }
            else {
              unsigned int v63 = v62 & 0xFFFFFFFE;
            }
            if (v63)
            {
              LOWORD(v183) = 0;
              unsigned int v64 = (char *)_os_log_send_and_compose_impl();

              if (v64) {
                sub_100055434(v64);
              }
            }
            else
            {

              unsigned int v64 = 0;
            }
            free(v64);
          }
        }
      }
      else
      {
        unsigned int v5 = &qword_1000E4000;
      }
    }
    else
    {
      int v35 = 0;
    }
    if (CFDictionaryContainsKey(v2, @"MAXUSER"))
    {
      dword_1000E321C = sub_1000885F0(v2, @"MAXUSER");
    }
    else
    {
      int v65 = CFDictionaryContainsKey(v2, @"MAXUSERSIZE");
      dword_1000E321C = -1;
      if (!v65)
      {
        uint64_t v66 = 0;
LABEL_153:
        qword_1000E42E8 = v66;
        int v67 = CFDictionaryContainsKey(v2, @"USESSTYPE");
        if (v67) {
          int v67 = sub_1000885F0(v2, @"USESSTYPE");
        }
        dword_1000E42C8 = v67;
        int v68 = CFDictionaryContainsKey(v2, @"LOGINCHECKIN");
        if (v68) {
          int v68 = sub_1000885F0(v2, @"LOGINCHECKIN");
        }
        dword_1000E42CC = v68;
        if (CFDictionaryContainsKey(v2, @"DEVICENETWORKBG"))
        {
          int v69 = sub_1000885F0(v2, @"DEVICENETWORKBG");
          int v70 = v69 & ~(v69 >> 31);
        }
        else
        {
          int v70 = 0;
        }
        dword_1000E42F0 = v70;
        if (CFDictionaryContainsKey(v2, @"SYNCENT"))
        {
          int v71 = sub_1000885F0(v2, @"SYNCENT");
          if (v71 >= 1)
          {
            CFDataRef v72 = (const __CFData *)sub_100088578(v2, @"SYNCBLOB");
            if (v5[13] != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            unsigned int v73 = (id)qword_1000E4060;
            if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
            {
              v182[0] = 0;
              unsigned int v74 = sub_100055404(1);
              unsigned int v75 = v73;
              if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v76 = v74;
              }
              else {
                unsigned int v76 = v74 & 0xFFFFFFFE;
              }
              if (v76)
              {
                LODWORD(v183) = 67109120;
                HIDWORD(v183) = v71;
                unsigned int v77 = (char *)_os_log_send_and_compose_impl();

                if (v77) {
                  sub_100055434(v77);
                }
              }
              else
              {

                unsigned int v77 = 0;
              }
              unsigned int v5 = &qword_1000E4000;
              free(v77);
            }

            if (qword_1000E42D0 && CFArrayGetCount((CFArrayRef)qword_1000E42D0) >= 1) {
              CFArrayRemoveAllValues((CFMutableArrayRef)qword_1000E42D0);
            }
            unsigned int v87 = (UInt8 *)CFDataGetBytePtr(v72);
            CFIndex v88 = CFDataGetLength(v72);
            CFArrayRef v89 = (const __CFArray *)sub_100088924(v87, v88);
            if (v5[13] != -1) {
              dispatch_once(&qword_1000E4068, &stru_1000D5598);
            }
            unsigned int v90 = (id)qword_1000E4060;
            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v183 = 0;
              unsigned int v91 = sub_100055404(1);
              unsigned int v92 = v90;
              if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v93 = v91;
              }
              else {
                unsigned int v93 = v91 & 0xFFFFFFFE;
              }
              if (v93)
              {
                LODWORD(v182[0]) = 138412290;
                *(void *)((char *)v182 + 4) = v89;
                unsigned int v94 = (char *)_os_log_send_and_compose_impl();

                if (v94) {
                  sub_100055434(v94);
                }
              }
              else
              {

                unsigned int v94 = 0;
              }
              free(v94);
            }

            if (CFArrayGetCount(v89) >= 1)
            {
              CFIndex v95 = 0;
              do
              {
                CFNumberRef v96 = (const __CFNumber *)CFArrayGetValueAtIndex(v89, v95);
                if (v96)
                {
                  CFNumberRef v97 = v96;
                  CFTypeID v98 = CFGetTypeID(v96);
                  if (v98 == CFNumberGetTypeID())
                  {
                    CFNumberGetValue(v97, kCFNumberIntType, &valuePtr);
                    if (valuePtr >= 502) {
                      sub_10001DCD4(valuePtr);
                    }
                  }
                }
                ++v95;
              }
              while (CFArrayGetCount(v89) > v95);
            }
            uint64_t v99 = v5[13];
            if (qword_1000E42D0)
            {
              if (v99 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              v100 = (id)qword_1000E4060;
              if (!os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_234;
              }
              uint64_t v183 = 0;
              unsigned int v101 = sub_100055404(1);
              v100 = v100;
              if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v102 = v101;
              }
              else {
                unsigned int v102 = v101 & 0xFFFFFFFE;
              }
              if (v102)
              {
                LODWORD(v182[0]) = 138412290;
                *(void *)((char *)v182 + 4) = qword_1000E42D0;
                goto LABEL_230;
              }
            }
            else
            {
              if (v99 != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              v100 = (id)qword_1000E4060;
              if (!os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_234;
              }
              v182[0] = 0;
              unsigned int v103 = sub_100055404(1);
              v100 = v100;
              if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v104 = v103;
              }
              else {
                unsigned int v104 = v103 & 0xFFFFFFFE;
              }
              if (v104)
              {
                LOWORD(v183) = 0;
LABEL_230:
                uint64_t v105 = (char *)_os_log_send_and_compose_impl();

                if (v105) {
                  sub_100055434(v105);
                }
                goto LABEL_233;
              }
            }

            uint64_t v105 = 0;
LABEL_233:
            free(v105);
LABEL_234:

            if (v89) {
              CFRelease(v89);
            }
LABEL_242:
            if (CFDictionaryContainsKey(v2, @"LRUENT"))
            {
              int v107 = sub_1000885F0(v2, @"LRUENT");
              if (v107 >= 1)
              {
                CFDataRef v108 = (const __CFData *)sub_100088578(v2, @"LRUBLOB");
                if (v5[13] != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                unsigned int v109 = (id)qword_1000E4060;
                if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
                {
                  v182[0] = 0;
                  unsigned int v110 = sub_100055404(1);
                  unsigned int v111 = v109;
                  if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v112 = v110;
                  }
                  else {
                    unsigned int v112 = v110 & 0xFFFFFFFE;
                  }
                  if (v112)
                  {
                    LODWORD(v183) = 67109120;
                    HIDWORD(v183) = v107;
                    unsigned int v113 = (char *)_os_log_send_and_compose_impl();

                    if (v113) {
                      sub_100055434(v113);
                    }
                  }
                  else
                  {

                    unsigned int v113 = 0;
                  }
                  unsigned int v5 = &qword_1000E4000;
                  free(v113);
                }

                if (qword_1000E42D8 && CFArrayGetCount((CFArrayRef)qword_1000E42D8) >= 1) {
                  CFArrayRemoveAllValues((CFMutableArrayRef)qword_1000E42D8);
                }
                CFStringRef v123 = (UInt8 *)CFDataGetBytePtr(v108);
                CFIndex v124 = CFDataGetLength(v108);
                CFArrayRef v125 = (const __CFArray *)sub_100088924(v123, v124);
                if (v5[13] != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                CFNumberRef v126 = (id)qword_1000E4060;
                if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v183 = 0;
                  unsigned int v127 = sub_100055404(1);
                  unsigned int v128 = v126;
                  if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v129 = v127;
                  }
                  else {
                    unsigned int v129 = v127 & 0xFFFFFFFE;
                  }
                  if (v129)
                  {
                    LODWORD(v182[0]) = 138412290;
                    *(void *)((char *)v182 + 4) = v125;
                    unsigned int v130 = (char *)_os_log_send_and_compose_impl();

                    if (v130) {
                      sub_100055434(v130);
                    }
                  }
                  else
                  {

                    unsigned int v130 = 0;
                  }
                  free(v130);
                }

                if (CFArrayGetCount(v125) >= 1)
                {
                  CFIndex v131 = 0;
                  do
                  {
                    CFNumberRef v132 = (const __CFNumber *)CFArrayGetValueAtIndex(v125, v131);
                    if (v132)
                    {
                      CFNumberRef v133 = v132;
                      CFTypeID v134 = CFGetTypeID(v132);
                      if (v134 == CFNumberGetTypeID())
                      {
                        CFNumberGetValue(v133, kCFNumberIntType, &valuePtr);
                        if (valuePtr >= 502) {
                          sub_10001E154(valuePtr);
                        }
                      }
                    }
                    ++v131;
                  }
                  while (CFArrayGetCount(v125) > v131);
                }
                uint64_t v135 = v5[13];
                if (qword_1000E42D8)
                {
                  if (v135 != -1) {
                    dispatch_once(&qword_1000E4068, &stru_1000D5598);
                  }
                  int v136 = (id)qword_1000E4060;
                  if (!os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_315;
                  }
                  uint64_t v183 = 0;
                  unsigned int v137 = sub_100055404(1);
                  int v136 = v136;
                  if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v138 = v137;
                  }
                  else {
                    unsigned int v138 = v137 & 0xFFFFFFFE;
                  }
                  if (v138)
                  {
                    LODWORD(v182[0]) = 138412290;
                    *(void *)((char *)v182 + 4) = qword_1000E42D8;
                    goto LABEL_311;
                  }
                }
                else
                {
                  if (v135 != -1) {
                    dispatch_once(&qword_1000E4068, &stru_1000D5598);
                  }
                  int v136 = (id)qword_1000E4060;
                  if (!os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_315;
                  }
                  v182[0] = 0;
                  unsigned int v139 = sub_100055404(1);
                  int v136 = v136;
                  if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v140 = v139;
                  }
                  else {
                    unsigned int v140 = v139 & 0xFFFFFFFE;
                  }
                  if (v140)
                  {
                    LOWORD(v183) = 0;
LABEL_311:
                    unsigned int v141 = (char *)_os_log_send_and_compose_impl();

                    if (v141) {
                      sub_100055434(v141);
                    }
                    goto LABEL_314;
                  }
                }

                unsigned int v141 = 0;
LABEL_314:
                free(v141);
LABEL_315:

                if (v125) {
                  CFRelease(v125);
                }
LABEL_323:
                if (CFDictionaryContainsKey(v2, @"VOLUMETYPE"))
                {
                  CFStringRef v143 = (const __CFString *)sub_100088788(v2, @"VOLUMETYPE");
                  uint64_t v144 = v5[13];
                  if (v143)
                  {
                    if (v144 != -1) {
                      dispatch_once(&qword_1000E4068, &stru_1000D5598);
                    }
                    unsigned int v145 = (id)qword_1000E4060;
                    if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
                    {
                      v182[0] = 0;
                      unsigned int v146 = sub_100055404(1);
                      unsigned int v145 = v145;
                      if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT)) {
                        unsigned int v147 = v146;
                      }
                      else {
                        unsigned int v147 = v146 & 0xFFFFFFFE;
                      }
                      if (v147)
                      {
                        LOWORD(v183) = 0;
                        goto LABEL_350;
                      }
                      goto LABEL_352;
                    }
                  }
                  else
                  {
                    if (v144 != -1) {
                      dispatch_once(&qword_1000E4068, &stru_1000D5598);
                    }
                    unsigned int v145 = (id)qword_1000E4060;
                    if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
                    {
                      v182[0] = 0;
                      unsigned int v153 = sub_100055404(1);
                      unsigned int v145 = v145;
                      if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT)) {
                        unsigned int v154 = v153;
                      }
                      else {
                        unsigned int v154 = v153 & 0xFFFFFFFE;
                      }
                      if (v154)
                      {
                        LOWORD(v183) = 0;
LABEL_350:
                        unsigned int v155 = (char *)_os_log_send_and_compose_impl();

                        if (v155) {
                          sub_100055434(v155);
                        }
                        goto LABEL_353;
                      }
LABEL_352:

                      unsigned int v155 = 0;
LABEL_353:
                      free(v155);
                    }
                  }

                  if (CFStringCompare(v143, kUMUserSessionAPFSNativeVolume, 0))
                  {
                    CFComparisonResult v156 = CFStringCompare(v143, kUMUserSessionAPFSConvertedVolume, 0);
                    byte_1000E3220 = 0;
                    if (v156)
                    {
                      qword_1000E4050 = (uint64_t)kUMUserSessionHFSPlusVolume;
                      if (v5[13] != -1) {
                        dispatch_once(&qword_1000E4068, &stru_1000D5598);
                      }
                      unsigned int v157 = (id)qword_1000E4060;
                      if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
                      {
                        v182[0] = 0;
                        unsigned int v158 = sub_100055404(1);
                        unsigned int v157 = v157;
                        if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT)) {
                          unsigned int v159 = v158;
                        }
                        else {
                          unsigned int v159 = v158 & 0xFFFFFFFE;
                        }
                        if (v159)
                        {
                          LOWORD(v183) = 0;
                          goto LABEL_380;
                        }
LABEL_382:

                        int v164 = 0;
LABEL_383:
                        free(v164);
                      }
LABEL_384:

                      CFRelease(v2);
                      if (!v35) {
                        return;
                      }
LABEL_415:
                      sub_10001A7BC();
                      return;
                    }
                    qword_1000E4050 = (uint64_t)kUMUserSessionAPFSConvertedVolume;
                    if (v5[13] != -1) {
                      dispatch_once(&qword_1000E4068, &stru_1000D5598);
                    }
                    unsigned int v157 = (id)qword_1000E4060;
                    if (!os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_384;
                    }
                    v182[0] = 0;
                    unsigned int v162 = sub_100055404(1);
                    unsigned int v157 = v157;
                    if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v163 = v162;
                    }
                    else {
                      unsigned int v163 = v162 & 0xFFFFFFFE;
                    }
                    if (!v163) {
                      goto LABEL_382;
                    }
                    LOWORD(v183) = 0;
                  }
                  else
                  {
                    byte_1000E3220 = 1;
                    qword_1000E4050 = (uint64_t)kUMUserSessionAPFSNativeVolume;
                    if (v5[13] != -1) {
                      dispatch_once(&qword_1000E4068, &stru_1000D5598);
                    }
                    unsigned int v157 = (id)qword_1000E4060;
                    if (!os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_384;
                    }
                    v182[0] = 0;
                    unsigned int v160 = sub_100055404(1);
                    unsigned int v157 = v157;
                    if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v161 = v160;
                    }
                    else {
                      unsigned int v161 = v160 & 0xFFFFFFFE;
                    }
                    if (!v161) {
                      goto LABEL_382;
                    }
                    LOWORD(v183) = 0;
                  }
LABEL_380:
                  int v164 = (void *)_os_log_send_and_compose_impl();

                  if (v164) {
                    sub_100055434((const char *)v164);
                  }
                  goto LABEL_383;
                }
                if (v5[13] != -1) {
                  dispatch_once(&qword_1000E4068, &stru_1000D5598);
                }
                uint64_t v148 = (id)qword_1000E4060;
                if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
                {
                  v182[0] = 0;
                  unsigned int v149 = sub_100055404(1);
                  unsigned int v150 = v148;
                  if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v151 = v149;
                  }
                  else {
                    unsigned int v151 = v149 & 0xFFFFFFFE;
                  }
                  if (v151)
                  {
                    LOWORD(v183) = 0;
                    unsigned int v152 = (char *)_os_log_send_and_compose_impl();

                    if (v152) {
                      sub_100055434(v152);
                    }
                  }
                  else
                  {

                    unsigned int v152 = 0;
                  }
                  free(v152);
                }

                if (byte_1000E3220 == 1)
                {
                  qword_1000E4050 = (uint64_t)kUMUserSessionAPFSNativeVolume;
                  if (v5[13] != -1) {
                    dispatch_once(&qword_1000E4068, &stru_1000D5598);
                  }
                  int v165 = (id)qword_1000E4060;
                  if (!os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_409;
                  }
                  v182[0] = 0;
                  unsigned int v166 = sub_100055404(1);
                  int v165 = v165;
                  if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v167 = v166;
                  }
                  else {
                    unsigned int v167 = v166 & 0xFFFFFFFE;
                  }
                  if (v167)
                  {
                    LOWORD(v183) = 0;
                    goto LABEL_405;
                  }
                }
                else
                {
                  qword_1000E4050 = (uint64_t)kUMUserSessionAPFSConvertedVolume;
                  if (v5[13] != -1) {
                    dispatch_once(&qword_1000E4068, &stru_1000D5598);
                  }
                  int v165 = (id)qword_1000E4060;
                  if (!os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_409;
                  }
                  v182[0] = 0;
                  unsigned int v168 = sub_100055404(1);
                  int v165 = v165;
                  if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v169 = v168;
                  }
                  else {
                    unsigned int v169 = v168 & 0xFFFFFFFE;
                  }
                  if (v169)
                  {
                    LOWORD(v183) = 0;
LABEL_405:
                    unsigned int v170 = (char *)_os_log_send_and_compose_impl();

                    if (v170) {
                      sub_100055434(v170);
                    }
                    goto LABEL_408;
                  }
                }

                unsigned int v170 = 0;
LABEL_408:
                free(v170);
LABEL_409:

                if (qword_1000E42B0)
                {
                  CFIndex Count = CFArrayGetCount((CFArrayRef)qword_1000E42B0);
                  if (Count >= 1)
                  {
                    CFIndex v172 = Count;
                    for (CFIndex i = 0; i != v172; ++i)
                    {
                      unsigned int v174 = CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42B0, i);
                      CFTypeID v175 = CFGetTypeID(v174);
                      CFTypeID TypeID = CFDictionaryGetTypeID();
                      if (v175 != TypeID) {
                        break;
                      }
                      sub_100050EC4(TypeID, (const __CFDictionary *)v174);
                    }
                  }
                }
                CFRelease(v2);
                goto LABEL_415;
              }
              if (v5[13] != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              unsigned int v114 = (id)qword_1000E4060;
              if (!os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
              {
LABEL_322:

                goto LABEL_323;
              }
              v182[0] = 0;
              unsigned int v119 = sub_100055404(1);
              unsigned int v120 = v114;
              if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v121 = v119;
              }
              else {
                unsigned int v121 = v119 & 0xFFFFFFFE;
              }
              if (v121)
              {
                LODWORD(v183) = 67109120;
                HIDWORD(v183) = v107;
                CFDictionaryRef v122 = (const char *)_os_log_send_and_compose_impl();

                if (v122) {
                  sub_100055434(v122);
                }
              }
              else
              {

                CFDictionaryRef v122 = 0;
              }
              unsigned int v142 = (char *)v122;
            }
            else
            {
              if (v5[13] != -1) {
                dispatch_once(&qword_1000E4068, &stru_1000D5598);
              }
              unsigned int v114 = (id)qword_1000E4060;
              if (!os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_322;
              }
              v182[0] = 0;
              unsigned int v115 = sub_100055404(1);
              unsigned int v116 = v114;
              if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v117 = v115;
              }
              else {
                unsigned int v117 = v115 & 0xFFFFFFFE;
              }
              if (v117)
              {
                uint64_t v183 = 67109120;
                unsigned int v118 = (const char *)_os_log_send_and_compose_impl();

                if (v118) {
                  sub_100055434(v118);
                }
              }
              else
              {

                unsigned int v118 = 0;
              }
              unsigned int v142 = (char *)v118;
            }
            free(v142);
            goto LABEL_322;
          }
          if (v5[13] != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v78 = (id)qword_1000E4060;
          if (!os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
          {
LABEL_241:

            goto LABEL_242;
          }
          v182[0] = 0;
          unsigned int v83 = sub_100055404(1);
          int v84 = v78;
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v85 = v83;
          }
          else {
            unsigned int v85 = v83 & 0xFFFFFFFE;
          }
          if (v85)
          {
            LODWORD(v183) = 67109120;
            HIDWORD(v183) = v71;
            unsigned int v86 = (const char *)_os_log_send_and_compose_impl();

            if (v86) {
              sub_100055434(v86);
            }
          }
          else
          {

            unsigned int v86 = 0;
          }
          unsigned int v106 = (char *)v86;
        }
        else
        {
          if (v5[13] != -1) {
            dispatch_once(&qword_1000E4068, &stru_1000D5598);
          }
          unsigned int v78 = (id)qword_1000E4060;
          if (!os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_241;
          }
          v182[0] = 0;
          unsigned int v79 = sub_100055404(1);
          unsigned int v80 = v78;
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v81 = v79;
          }
          else {
            unsigned int v81 = v79 & 0xFFFFFFFE;
          }
          if (v81)
          {
            uint64_t v183 = 67109120;
            unsigned int v82 = (const char *)_os_log_send_and_compose_impl();

            if (v82) {
              sub_100055434(v82);
            }
          }
          else
          {

            unsigned int v82 = 0;
          }
          unsigned int v106 = (char *)v82;
        }
        free(v106);
        goto LABEL_241;
      }
    }
    uint64_t v66 = sub_10008865C(v2, @"MAXUSERSIZE");
    goto LABEL_153;
  }
}

void sub_100050EC4(uint64_t a1, const __CFDictionary *a2)
{
  int v3 = sub_1000885F0(a2, kUMUserSessionIDKey);
  if (!CFDictionaryContainsKey(a2, kUMUserSessionUserVolumeTypeKey)) {
    CFDictionarySetValue(a2, kUMUserSessionUserVolumeTypeKey, (const void *)qword_1000E4050);
  }
  if (byte_1000E3220)
  {
    if (!CFDictionaryContainsKey(a2, kUMUserSessionNeedsMountKey))
    {
      CFDataRef v4 = kUMUserSessionNeedsMountKey;
      if (v3 == 502) {
        unsigned int v5 = &kCFBooleanFalse;
      }
      else {
        unsigned int v5 = &kCFBooleanTrue;
      }
      CFBooleanRef v11 = *v5;
      CFDictionarySetValue(a2, v4, v11);
    }
    return;
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v6 = (id)qword_1000E4060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v22 = 0;
    unsigned int v7 = sub_100055404(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = v7 & 0xFFFFFFFE;
    }
    if (v8)
    {
      LOWORD(v20) = 0;
      unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v10 = (char *)v9;
      if (v9) {
        sub_100055434(v9);
      }
    }
    else
    {
      unsigned int v10 = 0;
    }
    free(v10);
  }

  if (sub_1000887CC(a2, kUMUserSessionHomeDirKey, v22, 1024))
  {
    uint64_t v19 = 1;
    if (fsctl(v22, 0x80084A02uLL, &v19, 0))
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v12 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_44;
      }
      unsigned int v13 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14)
      {
        int v20 = 136315138;
        unsigned int v21 = v22;
        goto LABEL_40;
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v12 = (id)qword_1000E4060;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_44;
      }
      unsigned int v15 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = v15 & 0xFFFFFFFE;
      }
      if (v16)
      {
        int v20 = 136315138;
        unsigned int v21 = v22;
LABEL_40:
        unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
        BOOL v18 = (char *)v17;
        if (v17) {
          sub_100055434(v17);
        }
        goto LABEL_43;
      }
    }
    BOOL v18 = 0;
LABEL_43:
    free(v18);
LABEL_44:
  }
  if (!CFDictionaryContainsKey(a2, kUMUserSessionNeedsMountKey)) {
    CFDictionarySetValue(a2, kUMUserSessionNeedsMountKey, kCFBooleanFalse);
  }
}

__CFDictionary *sub_1000512C4(int a1)
{
  int valuePtr = 501;
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  int v95 = 0;
  CFDictionaryRef v2 = (id)qword_1000E4060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)cStr = 0;
    unsigned int v3 = sub_100055404(1);
    CFDataRef v4 = v2;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v5 = v3;
    }
    else {
      unsigned int v5 = v3 & 0xFFFFFFFE;
    }
    if (v5)
    {
      v97[0] = 0x1F504000100;
      int v6 = (char *)_os_log_send_and_compose_impl();

      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {

      int v6 = 0;
    }
    free(v6);
  }

  unsigned int v7 = sub_100088C68();
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(v7, kUMUserSessionIDKey, v8);
  CFRelease(v8);
  int v95 = valuePtr;
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &v95);
  CFDictionarySetValue(v7, kUMUserSessionGroupIDKey, v9);
  CFRelease(v9);
  CFDictionarySetValue(v7, kUMUserSessionTypeKey, kUMUserSessionOther);
  bzero(&cStr[7], 0x3F9uLL);
  strcpy(cStr, "mobile");
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v10 = (id)qword_1000E4060;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    CFTypeRef cf = 0;
    unsigned int v11 = sub_100055404(1);
    unsigned int v12 = v10;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v13 = v11;
    }
    else {
      unsigned int v13 = v11 & 0xFFFFFFFE;
    }
    if (v13)
    {
      LODWORD(v97[0]) = 136315138;
      *(void *)((char *)v97 + 4) = cStr;
      unsigned int v14 = (char *)_os_log_send_and_compose_impl();

      if (v14) {
        sub_100055434(v14);
      }
    }
    else
    {

      unsigned int v14 = 0;
    }
    free(v14);
  }

  CFStringRef v15 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (v15)
  {
    CFStringRef v16 = v15;
    CFDictionarySetValue(v7, kUMUserSessionShortNameKey, v15);
    CFDictionarySetValue(v7, kUMUserSessionFirstNameKey, v16);
    CFDictionarySetValue(v7, kUMUserSessionLastNameKey, v16);
    CFDictionarySetValue(v7, kUMUserSessionNameKey, v16);
    CFDictionarySetValue(v7, kUMUserSessionDisplayNameKey, v16);
    CFRelease(v16);
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v17 = (id)qword_1000E4060;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v97[0] = 0;
      unsigned int v18 = sub_100055404(1);
      uint64_t v19 = v17;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v20 = v18;
      }
      else {
        unsigned int v20 = v18 & 0xFFFFFFFE;
      }
      if (v20)
      {
        LOWORD(cf) = 0;
        unsigned int v21 = (char *)_os_log_send_and_compose_impl();

        if (v21) {
          sub_100055434(v21);
        }
      }
      else
      {

        unsigned int v21 = 0;
      }
      free(v21);
    }
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v22 = (id)qword_1000E4060;
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v97[0] = 0;
    unsigned int v23 = sub_100055404(1);
    uint64_t v24 = v22;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v25 = v23;
    }
    else {
      unsigned int v25 = v23 & 0xFFFFFFFE;
    }
    if (v25)
    {
      LOWORD(cf) = 0;
      unsigned int v26 = (char *)_os_log_send_and_compose_impl();

      if (v26) {
        sub_100055434(v26);
      }
    }
    else
    {

      unsigned int v26 = 0;
    }
    free(v26);
  }

  CFDictionarySetValue(v7, kUMUserSessionLanguageKey, @"en_US");
  if (a1)
  {
    CFTypeRef cf = 0;
    if (AKSIdentityGetPrimary())
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      int v27 = (id)qword_1000E4060;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        v97[0] = 0;
        unsigned int v28 = sub_100055404(1);
        BOOL v29 = v27;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v30 = v28;
        }
        else {
          unsigned int v30 = v28 & 0xFFFFFFFE;
        }
        if (v30)
        {
          unsigned int v31 = (char *)_os_log_send_and_compose_impl();

          if (v31) {
            sub_100055434(v31);
          }
        }
        else
        {

          unsigned int v31 = 0;
        }
        free(v31);
      }

      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      BOOL v37 = (id)qword_1000E4060;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        v97[0] = 0;
        unsigned int v38 = sub_100055404(1);
        CFDictionaryRef v39 = v37;
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v40 = v38;
        }
        else {
          unsigned int v40 = v38 & 0xFFFFFFFE;
        }
        if (v40)
        {
          int v41 = (char *)_os_log_send_and_compose_impl();

          if (v41) {
            sub_100055434(v41);
          }
        }
        else
        {

          int v41 = 0;
        }
        free(v41);
      }

      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFArrayRef v32 = (id)qword_1000E4060;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        v97[0] = 0;
        unsigned int v42 = sub_100055404(1);
        unint64_t v43 = v32;
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v44 = v42;
        }
        else {
          unsigned int v44 = v42 & 0xFFFFFFFE;
        }
        if (v44)
        {
          unsigned int v45 = (char *)_os_log_send_and_compose_impl();

          if (v45) {
            sub_100055434(v45);
          }
        }
        else
        {

          unsigned int v45 = 0;
        }
        free(v45);
      }
    }
    else
    {
      if (qword_1000E4068 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      CFArrayRef v32 = (id)qword_1000E4060;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        int v33 = sub_100055404(1);
        char v34 = v32;
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
          v33 &= ~1u;
        }
        if (v33)
        {
          CFIndex Code = CFErrorGetCode(0);
          LODWORD(v97[0]) = 134217984;
          *(void *)((char *)v97 + 4) = Code;
          uint64_t v36 = (char *)_os_log_send_and_compose_impl();

          if (v36) {
            sub_100055434(v36);
          }
        }
        else
        {

          uint64_t v36 = 0;
        }
        free(v36);
      }
    }
  }
  CFUUIDRef uuid = CFUUIDCreate(0);
  CFStringRef v46 = CFUUIDCreateString(0, uuid);
  CFDictionarySetValue(v7, kUMUserSessionUUIDKey, v46);
  if (uuid) {
    CFRelease(uuid);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v47 = (id)qword_1000E4060;
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    v97[0] = 0;
    unsigned int v48 = sub_100055404(1);
    unsigned int v49 = v47;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v50 = v48;
    }
    else {
      unsigned int v50 = v48 & 0xFFFFFFFE;
    }
    if (v50)
    {
      LOWORD(cf) = 0;
      unsigned int v51 = (char *)_os_log_send_and_compose_impl();

      if (v51) {
        sub_100055434(v51);
      }
    }
    else
    {

      unsigned int v51 = 0;
    }
    free(v51);
  }

  CFUUIDRef uuida = CFUUIDCreate(0);
  CFStringRef v52 = CFUUIDCreateString(0, uuida);
  CFDictionarySetValue(v7, kUMUserSessionAlternateDSIDKey, v52);
  if (uuida) {
    CFRelease(uuida);
  }
  if (v52) {
    CFRelease(v52);
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v54 = CFDateCreate(kCFAllocatorDefault, Current);
  CFDictionarySetValue(v7, kUMUserSessionCreateTimeStampKey, v54);
  CFDictionarySetValue(v7, kUMUserSessionLoginTimeStampKey, v54);
  if (v54) {
    CFRelease(v54);
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unint64_t v55 = (id)qword_1000E4060;
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
  {
    v97[0] = 0;
    unsigned int v56 = sub_100055404(1);
    unsigned int v57 = v55;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v58 = v56;
    }
    else {
      unsigned int v58 = v56 & 0xFFFFFFFE;
    }
    if (v58)
    {
      LOWORD(cf) = 0;
      unsigned int v59 = (char *)_os_log_send_and_compose_impl();

      if (v59) {
        sub_100055434(v59);
      }
    }
    else
    {

      unsigned int v59 = 0;
    }
    free(v59);
  }

  CFDictionarySetValue(v7, kUMUserSessionLoginUserKey, kCFBooleanFalse);
  CFDictionarySetValue(v7, kUMUserSessionDirtyKey, kCFBooleanFalse);
  CFDictionarySetValue(v7, kUMUserSessionForegroundKey, kCFBooleanTrue);
  CFDictionarySetValue(v7, kUMUserSessionisPrimaryKey, kCFBooleanTrue);
  CFDictionarySetValue(v7, kUMUserSessionisAdminKey, kCFBooleanTrue);
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v60 = (id)qword_1000E4060;
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
  {
    v97[0] = 0;
    unsigned int v61 = sub_100055404(1);
    unsigned int v62 = v60;
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v63 = v61;
    }
    else {
      unsigned int v63 = v61 & 0xFFFFFFFE;
    }
    if (v63)
    {
      LOWORD(cf) = 0;
      unsigned int v64 = (char *)_os_log_send_and_compose_impl();

      if (v64) {
        sub_100055434(v64);
      }
    }
    else
    {

      unsigned int v64 = 0;
    }
    free(v64);
  }

  bzero(&v100, 0x3F4uLL);
  strcpy(cStr, "/var/mobile");
  CFStringRef v65 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (v65)
  {
    CFStringRef v66 = v65;
    CFDictionarySetValue(v7, kUMUserSessionLibinfoHomeDirKey, v65);
    CFRelease(v66);
  }
  else
  {
    if (qword_1000E4068 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    int v67 = (id)qword_1000E4060;
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
    {
      v97[0] = 0;
      unsigned int v68 = sub_100055404(1);
      int v69 = v67;
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v70 = v68;
      }
      else {
        unsigned int v70 = v68 & 0xFFFFFFFE;
      }
      if (v70)
      {
        LOWORD(cf) = 0;
        int v71 = (char *)_os_log_send_and_compose_impl();

        if (v71) {
          sub_100055434(v71);
        }
      }
      else
      {

        int v71 = 0;
      }
      free(v71);
    }
  }
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  CFDataRef v72 = (id)qword_1000E4060;
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
  {
    CFTypeRef cf = 0;
    unsigned int v73 = sub_100055404(1);
    unsigned int v74 = v72;
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v75 = v73;
    }
    else {
      unsigned int v75 = v73 & 0xFFFFFFFE;
    }
    if (v75)
    {
      LODWORD(v97[0]) = 136315138;
      *(void *)((char *)v97 + 4) = cStr;
      unsigned int v76 = (char *)_os_log_send_and_compose_impl();

      if (v76) {
        sub_100055434(v76);
      }
    }
    else
    {

      unsigned int v76 = 0;
    }
    free(v76);
  }

  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v77 = (id)qword_1000E4060;
  if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
  {
    v97[0] = 0;
    unsigned int v78 = sub_100055404(1);
    unsigned int v79 = v77;
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v80 = v78;
    }
    else {
      unsigned int v80 = v78 & 0xFFFFFFFE;
    }
    if (v80)
    {
      LOWORD(cf) = 0;
      unsigned int v81 = (char *)_os_log_send_and_compose_impl();

      if (v81) {
        sub_100055434(v81);
      }
    }
    else
    {

      unsigned int v81 = 0;
    }
    free(v81);
  }

  sub_100021EF4(v7, 0);
  if (qword_1000E4068 != -1) {
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
  }
  unsigned int v82 = (id)qword_1000E4060;
  if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
  {
    v97[0] = 0;
    unsigned int v83 = sub_100055404(1);
    int v84 = v82;
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v85 = v83;
    }
    else {
      unsigned int v85 = v83 & 0xFFFFFFFE;
    }
    if (v85)
    {
      LOWORD(cf) = 0;
      unsigned int v86 = (char *)_os_log_send_and_compose_impl();

      if (v86) {
        sub_100055434(v86);
      }
    }
    else
    {

      unsigned int v86 = 0;
    }
    free(v86);
  }

  sub_10001A7BC();
  if (qword_1000E4078 != -1) {
    dispatch_once(&qword_1000E4078, &stru_1000D55B8);
  }
  unsigned int v87 = (id)qword_1000E4070;
  if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
  {
    v97[0] = 0;
    unsigned int v88 = sub_100055404(1);
    CFArrayRef v89 = v87;
    if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v90 = v88;
    }
    else {
      unsigned int v90 = v88 & 0xFFFFFFFE;
    }
    if (v90)
    {
      LODWORD(cf) = 67109120;
      HIDWORD(cf) = valuePtr;
      unsigned int v91 = (char *)_os_log_send_and_compose_impl();

      if (v91) {
        sub_100055434(v91);
      }
    }
    else
    {

      unsigned int v91 = 0;
    }
    free(v91);
  }

  return v7;
}

void sub_1000525D4(id a1)
{
  qword_1000E4080 = (uint64_t)os_log_create(off_1000E33D8, "persona");

  _objc_release_x1();
}

void sub_10005261C(uint64_t a1)
{
  if (qword_1000E4078 != -1) {
    dispatch_once(&qword_1000E4078, &stru_1000D55B8);
  }
  int v6 = (id)qword_1000E4070;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)&v128.st_dev = 0;
    unsigned int v7 = sub_100055404(0);
    CFDictionaryRef v1 = v6;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = v7 & 0xFFFFFFFE;
    }
    if (v8)
    {
      LODWORD(v127[0]) = 67109120;
      HIDWORD(v127[0]) = a1;
      int v121 = 8;
      unsigned int v120 = v127;
      CFNumberRef v9 = (char *)_os_log_send_and_compose_impl();

      if (v9) {
        sub_100055434(v9);
      }
    }
    else
    {

      CFNumberRef v9 = 0;
    }
    free(v9);
  }

  if (a1 == -1)
  {
    sub_100019810("UserManagement user switch failed assertion: uid != -1");
    goto LABEL_257;
  }
  uint64_t v10 = sub_100056848(qword_1000E4038, a1);
  if (!v10)
  {
LABEL_257:
    sub_100019810("UserManagement user switch failed assertion: oldSession != ((void *)0)", v120, v121);
LABEL_258:
    dispatch_once(&qword_1000E4068, &stru_1000D5598);
    goto LABEL_46;
  }
  int v6 = v10;
  CFDataRef v4 = &qword_1000E4000;
  int v11 = dword_1000E42C0;
  unsigned int v3 = &qword_1000E4000;
  CFDictionaryRef v2 = &qword_1000E4000;
  if (dword_1000E42C0 == 1)
  {
    sub_100040298();
    memset(&v128, 0, sizeof(v128));
    if (!lstat("/private/var/mobile", &v128) && (v128.st_mode & 0xF000) == 0x4000)
    {
      if (sub_10001986C("/private/var/mobile", 0x80000))
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v12 = (id)qword_1000E4060;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v126 = 0;
          int v13 = sub_100055404(1);
          unsigned int v14 = v12;
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
            v13 &= ~1u;
          }
          if (v13)
          {
            CFStringRef v15 = __error();
            CFStringRef v16 = strerror(*v15);
            LODWORD(v127[0]) = 136315138;
            *(void *)((char *)v127 + 4) = v16;
            unsigned int v17 = (char *)_os_log_send_and_compose_impl();

            if (v17) {
              sub_100055434(v17);
            }
          }
          else
          {

            unsigned int v17 = 0;
          }
          free(v17);
        }
      }
      if (rmdir("/private/var/mobile"))
      {
        if (qword_1000E4068 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v18 = (id)qword_1000E4060;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v126 = 0;
          int v19 = sub_100055404(1);
          unsigned int v20 = v18;
          if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
            v19 &= ~1u;
          }
          if (v19)
          {
            unsigned int v21 = __error();
            unsigned int v22 = strerror(*v21);
            LODWORD(v127[0]) = 136315138;
            *(void *)((char *)v127 + 4) = v22;
            unsigned int v23 = (char *)_os_log_send_and_compose_impl();

            if (v23) {
              sub_100055434(v23);
            }
          }
          else
          {

            unsigned int v23 = 0;
          }
          free(v23);
        }
      }
    }
    int v11 = dword_1000E42C0;
  }
  if (v11 == 2) {
    CFDictionaryRef v1 = @"/private/var/mobile";
  }
  else {
    CFDictionaryRef v1 = 0;
  }
  if (qword_1000E4068 != -1) {
    goto LABEL_258;
  }
LABEL_46:
  uint64_t v24 = (id)v2[12];
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)&v128.st_dev = 0;
    unsigned int v25 = sub_100055404(1);
    unsigned int v26 = v24;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v27 = v25;
    }
    else {
      unsigned int v27 = v25 & 0xFFFFFFFE;
    }
    if (v27)
    {
      LOWORD(v127[0]) = 0;
      unsigned int v28 = (char *)_os_log_send_and_compose_impl();

      if (v28) {
        sub_100055434(v28);
      }
    }
    else
    {

      unsigned int v28 = 0;
    }
    free(v28);
  }

  unsigned int v29 = [(id)qword_1000E4030 unmountVolumeWithSession:v6 mountPath:v1 error:0];
  uint64_t v30 = v3[13];
  if (v29)
  {
    if (v30 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v31 = (id)v2[12];
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&v128.st_dev = 0;
      unsigned int v32 = sub_100055404(1);
      unsigned int v31 = v31;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v33 = v32;
      }
      else {
        unsigned int v33 = v32 & 0xFFFFFFFE;
      }
      if (v33)
      {
        LOWORD(v127[0]) = 0;
        goto LABEL_72;
      }
      goto LABEL_74;
    }
  }
  else
  {
    if (v30 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v31 = (id)v2[12];
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&v128.st_dev = 0;
      unsigned int v34 = sub_100055404(1);
      unsigned int v31 = v31;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v35 = v34;
      }
      else {
        unsigned int v35 = v34 & 0xFFFFFFFE;
      }
      if (v35)
      {
        LOWORD(v127[0]) = 0;
LABEL_72:
        uint64_t v36 = (char *)_os_log_send_and_compose_impl();

        if (v36) {
          sub_100055434(v36);
        }
        goto LABEL_75;
      }
LABEL_74:

      uint64_t v36 = 0;
LABEL_75:
      free(v36);
    }
  }

  int v37 = sub_1000342CC(a1);
  uint64_t v38 = v3[13];
  if (v37)
  {
    if (v38 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFDictionaryRef v39 = (id)v2[12];
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&v128.st_dev = 0;
      unsigned int v40 = sub_100055404(1);
      CFDictionaryRef v39 = v39;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v41 = v40;
      }
      else {
        unsigned int v41 = v40 & 0xFFFFFFFE;
      }
      if (v41)
      {
        LODWORD(v127[0]) = 67109120;
        HIDWORD(v127[0]) = a1;
        goto LABEL_93;
      }
      goto LABEL_95;
    }
  }
  else
  {
    if (v38 != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    CFDictionaryRef v39 = (id)v2[12];
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&v128.st_dev = 0;
      unsigned int v42 = sub_100055404(1);
      CFDictionaryRef v39 = v39;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v43 = v42;
      }
      else {
        unsigned int v43 = v42 & 0xFFFFFFFE;
      }
      if (v43)
      {
        LODWORD(v127[0]) = 67109120;
        HIDWORD(v127[0]) = a1;
LABEL_93:
        unsigned int v44 = (char *)_os_log_send_and_compose_impl();

        if (v44) {
          sub_100055434(v44);
        }
        goto LABEL_96;
      }
LABEL_95:

      unsigned int v44 = 0;
LABEL_96:
      free(v44);
    }
  }

  unsigned int v45 = [(id)qword_1000E4030 splitUserVolumeEnabled];
  int v46 = *((_DWORD *)v4 + 176);
  if (a1 != 502 && v45 && v46 == 1)
  {
    unsigned int v47 = sub_100088788((const __CFDictionary *)v6, kUMUserSessionVolumeDeviceNodeKey);
    uint64_t v48 = v3[13];
    if (v47)
    {
      unsigned int v49 = v47;
      if (v48 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v50 = (id)v2[12];
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        v127[0] = 0;
        unsigned int v51 = sub_100055404(1);
        CFStringRef v52 = v50;
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v53 = v51;
        }
        else {
          unsigned int v53 = v51 & 0xFFFFFFFE;
        }
        if (v53)
        {
          v128.st_dev = 138412546;
          *(void *)&v128.st_mode = v49;
          WORD2(v128.st_ino) = 1024;
          *(_DWORD *)((char *)&v128.st_ino + 6) = a1;
          CFDateRef v54 = (char *)_os_log_send_and_compose_impl();

          if (v54) {
            sub_100055434(v54);
          }
        }
        else
        {

          CFDateRef v54 = 0;
        }
        free(v54);
      }

      unsigned int v59 = sub_100019308(qword_1000E4318);
      id v125 = 0;
      unsigned int v60 = [v59 unmapVolume:v49 error:&v125];
      id v61 = v125;

      uint64_t v62 = v3[13];
      if (v60)
      {
        if (v62 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unint64_t v55 = (id)v2[12];
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)&v128.st_dev = 0;
          unsigned int v63 = sub_100055404(1);
          unint64_t v55 = v55;
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v64 = v63;
          }
          else {
            unsigned int v64 = v63 & 0xFFFFFFFE;
          }
          if (v64)
          {
            LOWORD(v127[0]) = 0;
            goto LABEL_137;
          }
          goto LABEL_139;
        }
      }
      else
      {
        if (v62 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unint64_t v55 = (id)v2[12];
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          v127[0] = 0;
          int v65 = sub_100055404(1);
          unint64_t v55 = v55;
          if (!os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT)) {
            v65 &= ~1u;
          }
          if (v65)
          {
            id v66 = [v61 code];
            v128.st_dev = 134217984;
            *(void *)&v128.st_mode = v66;
LABEL_137:
            int v67 = (char *)_os_log_send_and_compose_impl();

            if (v67) {
              sub_100055434(v67);
            }
            goto LABEL_140;
          }
LABEL_139:

          int v67 = 0;
LABEL_140:
          free(v67);
        }
      }
    }
    else
    {
      if (v48 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unint64_t v55 = (id)v2[12];
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)&v128.st_dev = 0;
        unsigned int v56 = sub_100055404(1);
        unint64_t v55 = v55;
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v57 = v56;
        }
        else {
          unsigned int v57 = v56 & 0xFFFFFFFE;
        }
        if (v57)
        {
          LOWORD(v127[0]) = 0;
          unsigned int v58 = (char *)_os_log_send_and_compose_impl();

          if (v58) {
            sub_100055434(v58);
          }
        }
        else
        {

          unsigned int v58 = 0;
        }
        free(v58);
      }
      id v61 = 0;
    }

    if (v3[13] != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v68 = (id)v2[12];
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&v128.st_dev = 0;
      unsigned int v69 = sub_100055404(1);
      unsigned int v70 = v68;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v71 = v69;
      }
      else {
        unsigned int v71 = v69 & 0xFFFFFFFE;
      }
      if (v71)
      {
        LODWORD(v127[0]) = 67109120;
        HIDWORD(v127[0]) = a1;
        CFDataRef v72 = (char *)_os_log_send_and_compose_impl();

        if (v72) {
          sub_100055434(v72);
        }
      }
      else
      {

        CFDataRef v72 = 0;
      }
      free(v72);
    }

    unsigned int v73 = sub_100019308(qword_1000E4318);
    id v124 = v61;
    unsigned int v74 = [v73 unloadIdentityFromSession:a1 error:&v124];
    id v75 = v124;

    uint64_t v76 = v3[13];
    if (v74)
    {
      if (v76 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v77 = (id)v2[12];
      if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_175;
      }
      *(void *)&v128.st_dev = 0;
      unsigned int v78 = sub_100055404(1);
      unsigned int v77 = v77;
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v79 = v78;
      }
      else {
        unsigned int v79 = v78 & 0xFFFFFFFE;
      }
      if (v79)
      {
        LODWORD(v127[0]) = 67109120;
        HIDWORD(v127[0]) = a1;
        goto LABEL_171;
      }
    }
    else
    {
      if (v76 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v77 = (id)v2[12];
      if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_175;
      }
      v127[0] = 0;
      int v80 = sub_100055404(1);
      unsigned int v77 = v77;
      if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
        v80 &= ~1u;
      }
      if (v80)
      {
        id v81 = [v75 code];
        v128.st_dev = 67109376;
        *(_DWORD *)&v128.st_mode = a1;
        LOWORD(v128.st_ino) = 2048;
        *(__darwin_ino64_t *)((char *)&v128.st_ino + 2) = (__darwin_ino64_t)v81;
LABEL_171:
        unsigned int v82 = (char *)_os_log_send_and_compose_impl();

        if (v82) {
          sub_100055434(v82);
        }
        goto LABEL_174;
      }
    }

    unsigned int v82 = 0;
LABEL_174:
    free(v82);
LABEL_175:

    int v46 = *((_DWORD *)v4 + 176);
  }
  if (v46 != 1)
  {
    if (![(id)qword_1000E4030 splitUserVolumeEnabled])
    {
LABEL_254:
      unsigned int v119 = sub_100056A6C(qword_1000E4038, a1);
      sub_100064D54(qword_1000E4040, v119);

      goto LABEL_255;
    }
    unsigned int v83 = sub_100088788((const __CFDictionary *)v6, kUMUserSessionVolumeDeviceNodeKey);
    uint64_t v84 = v3[13];
    if (v83)
    {
      unsigned int v85 = v83;
      if (v84 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v86 = (id)v2[12];
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
      {
        v127[0] = 0;
        unsigned int v87 = sub_100055404(1);
        unsigned int v88 = v86;
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v89 = v87;
        }
        else {
          unsigned int v89 = v87 & 0xFFFFFFFE;
        }
        if (v89)
        {
          v128.st_dev = 138412546;
          *(void *)&v128.st_mode = v85;
          WORD2(v128.st_ino) = 1024;
          *(_DWORD *)((char *)&v128.st_ino + 6) = a1;
          unsigned int v90 = (char *)_os_log_send_and_compose_impl();

          if (v90) {
            sub_100055434(v90);
          }
        }
        else
        {

          unsigned int v90 = 0;
        }
        free(v90);
      }

      int v95 = sub_100019308(qword_1000E4318);
      id v123 = 0;
      unsigned int v96 = [v95 unmapVolume:v85 error:&v123];
      id v97 = v123;

      uint64_t v98 = v3[13];
      if (v96)
      {
        if (v98 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v91 = (id)v2[12];
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)&v128.st_dev = 0;
          unsigned int v99 = sub_100055404(1);
          unsigned int v91 = v91;
          if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v100 = v99;
          }
          else {
            unsigned int v100 = v99 & 0xFFFFFFFE;
          }
          if (v100)
          {
            LOWORD(v127[0]) = 0;
            goto LABEL_215;
          }
          goto LABEL_217;
        }
      }
      else
      {
        if (v98 != -1) {
          dispatch_once(&qword_1000E4068, &stru_1000D5598);
        }
        unsigned int v91 = (id)v2[12];
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          v127[0] = 0;
          int v101 = sub_100055404(1);
          unsigned int v91 = v91;
          if (!os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT)) {
            v101 &= ~1u;
          }
          if (v101)
          {
            id v102 = [v97 code];
            v128.st_dev = 134217984;
            *(void *)&v128.st_mode = v102;
LABEL_215:
            unsigned int v103 = (char *)_os_log_send_and_compose_impl();

            if (v103) {
              sub_100055434(v103);
            }
            goto LABEL_218;
          }
LABEL_217:

          unsigned int v103 = 0;
LABEL_218:
          free(v103);
        }
      }
    }
    else
    {
      if (v84 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v91 = (id)v2[12];
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)&v128.st_dev = 0;
        unsigned int v92 = sub_100055404(1);
        unsigned int v91 = v91;
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v93 = v92;
        }
        else {
          unsigned int v93 = v92 & 0xFFFFFFFE;
        }
        if (v93)
        {
          LOWORD(v127[0]) = 0;
          unsigned int v94 = (char *)_os_log_send_and_compose_impl();

          if (v94) {
            sub_100055434(v94);
          }
        }
        else
        {

          unsigned int v94 = 0;
        }
        free(v94);
      }
      id v97 = 0;
    }

    if (v3[13] != -1) {
      dispatch_once(&qword_1000E4068, &stru_1000D5598);
    }
    unsigned int v104 = (id)v2[12];
    if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&v128.st_dev = 0;
      unsigned int v105 = sub_100055404(1);
      unsigned int v106 = v104;
      if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v107 = v105;
      }
      else {
        unsigned int v107 = v105 & 0xFFFFFFFE;
      }
      if (v107)
      {
        LODWORD(v127[0]) = 67109120;
        HIDWORD(v127[0]) = a1;
        CFDataRef v108 = (char *)_os_log_send_and_compose_impl();

        if (v108) {
          sub_100055434(v108);
        }
      }
      else
      {

        CFDataRef v108 = 0;
      }
      free(v108);
    }

    unsigned int v109 = sub_100019308(qword_1000E4318);
    id v122 = v97;
    unsigned int v110 = [v109 unloadIdentityFromSession:a1 error:&v122];
    id v111 = v122;

    uint64_t v112 = v3[13];
    if (v110)
    {
      if (v112 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v113 = (id)v2[12];
      if (!os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_253;
      }
      *(void *)&v128.st_dev = 0;
      unsigned int v114 = sub_100055404(1);
      unsigned int v113 = v113;
      if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v115 = v114;
      }
      else {
        unsigned int v115 = v114 & 0xFFFFFFFE;
      }
      if (v115)
      {
        LODWORD(v127[0]) = 67109120;
        HIDWORD(v127[0]) = a1;
        goto LABEL_249;
      }
    }
    else
    {
      if (v112 != -1) {
        dispatch_once(&qword_1000E4068, &stru_1000D5598);
      }
      unsigned int v113 = (id)v2[12];
      if (!os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_253;
      }
      v127[0] = 0;
      int v116 = sub_100055404(1);
      unsigned int v113 = v113;
      if (!os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT)) {
        v116 &= ~1u;
      }
      if (v116)
      {
        id v117 = [v111 code];
        v128.st_dev = 67109376;
        *(_DWORD *)&v128.st_mode = a1;
        LOWORD(v128.st_ino) = 2048;
        *(__darwin_ino64_t *)((char *)&v128.st_ino + 2) = (__darwin_ino64_t)v117;
LABEL_249:
        unsigned int v118 = (char *)_os_log_send_and_compose_impl();

        if (v118) {
          sub_100055434(v118);
        }
        goto LABEL_252;
      }
    }

    unsigned int v118 = 0;
LABEL_252:
    free(v118);
LABEL_253:

    goto LABEL_254;
  }
LABEL_255:
  CFRelease(v6);
}

uint64_t sub_100053B08()
{
  return abort_with_reason();
}

void sub_100053BD4(id a1)
{
  qword_1000E4090 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___RDClient];

  _objc_release_x1();
}

void sub_100053C70(id a1)
{
  qword_1000E40A0 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___BDBubbled];

  _objc_release_x1();
}

void sub_100053F18(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v2 = [*(id *)(a1 + 32) xpcConnection];
    NSLog(@"Could not get proxy object for client connection: %@", v2);
  }
}

void sub_100054010(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v2 = [*(id *)(a1 + 32) xpcConnection];
    NSLog(@"Could not get proxy object for client connection: %@", v2);
  }
}

uint64_t sub_100054584(uint64_t a1)
{
  [*(id *)(a1 + 32) setWasToldWillSwitchUser:1];
  if (qword_1000E40B8 != -1) {
    dispatch_once(&qword_1000E40B8, &stru_1000D5660);
  }
  id v2 = (id)qword_1000E40B0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = sub_100055404(1);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      v3 &= ~1u;
    }
    if (v3)
    {
      CFDataRef v4 = *(void **)(a1 + 32);
      unsigned int v5 = v2;
      [v4 pid];
      int v6 = (char *)_os_log_send_and_compose_impl();

      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      int v6 = 0;
    }
    free(v6);
  }

  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v7);
}

uint64_t sub_1000547C8(uint64_t a1)
{
  if (qword_1000E40B8 != -1) {
    dispatch_once(&qword_1000E40B8, &stru_1000D5660);
  }
  id v2 = (id)qword_1000E40B0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = sub_100055404(1);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      v3 &= ~1u;
    }
    if (v3)
    {
      CFDataRef v4 = *(void **)(a1 + 32);
      unsigned int v5 = v2;
      [v4 pid];
      int v6 = (char *)_os_log_send_and_compose_impl();

      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      int v6 = 0;
    }
    free(v6);
  }

  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v7);
}

uint64_t sub_100054B2C(uint64_t a1)
{
  if (qword_1000E40B8 != -1) {
    dispatch_once(&qword_1000E40B8, &stru_1000D5660);
  }
  id v2 = (id)qword_1000E40B0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = sub_100055404(1);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      v3 &= ~1u;
    }
    if (v3)
    {
      CFDataRef v4 = *(void **)(a1 + 32);
      unsigned int v5 = v2;
      [v4 pid];
      int v6 = (char *)_os_log_send_and_compose_impl();

      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      int v6 = 0;
    }
    free(v6);
  }

  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v7);
}

void sub_1000553BC(id a1)
{
  qword_1000E40B0 = (uint64_t)os_log_create(off_1000E33D8, "legacy");

  _objc_release_x1();
}

uint64_t sub_100055404(int a1)
{
  if (a1) {
    unsigned int v1 = 3;
  }
  else {
    unsigned int v1 = 1;
  }
  if (byte_1000E4311) {
    BOOL v2 = byte_1000E4310 == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2) {
    return v1;
  }
  else {
    return 2;
  }
}

void sub_100055434(const char *a1)
{
  if (byte_1000E4310) {
    fprintf(__stdoutp, "UMD_INIT: %s\n", a1);
  }
  uint64_t v2 = qword_1000E40C0;

  sub_10006694C(v2, (uint64_t)a1);
}

uint64_t sub_1000554A0()
{
  if (qword_1000E40D0 != -1) {
    dispatch_once(&qword_1000E40D0, &stru_1000D5680);
  }
  return byte_1000E40C8;
}

void sub_1000554E4(id a1)
{
  size_t __len = 1023;
  bzero(__big, 0x400uLL);
  if (!sysctlbyname("kern.bootargs", __big, &__len, 0, 0))
  {
    if (strnstr(__big, "keybag_initlog", __len)) {
      byte_1000E40C8 = 1;
    }
  }
}

uint64_t start(int a1, uint64_t a2)
{
  uint64_t v4 = +[UMDProviderSideEffects sideEffects];
  unsigned int v5 = (void *)qword_1000E4318;
  qword_1000E4318 = v4;

  UMLSetInternalLogHandlers();
  if (a1 == 2)
  {
    int v6 = *(const char **)(a2 + 8);
    if (!strcmp(v6, "--init"))
    {
      sub_100055958();
    }
    else
    {
      if (strcmp(v6, "--switch")) {
        goto LABEL_4;
      }
      sub_100055DA8();
    }
    exit(0);
  }
LABEL_4:
  os_log_set_client_type();
  _os_log_get_nscf_formatter();
  _os_log_set_nscf_formatter();
  uint64_t v7 = sub_10006673C((uint64_t)UMDRotatingLog, (void *)qword_1000E4318, "/var/logs/usermanagerd.log", (void *)0x100000, 3);
  unsigned int v8 = (void *)qword_1000E40C0;
  qword_1000E40C0 = v7;

  if (qword_1000E40F0 != -1) {
    dispatch_once(&qword_1000E40F0, &stru_1000D56C0);
  }
  CFNumberRef v9 = (id)qword_1000E40E8;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1000E4311) {
      BOOL v10 = byte_1000E4310 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10) {
      int v11 = 1;
    }
    else {
      int v11 = 2;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      int v12 = v11;
    }
    else {
      int v12 = v11 & 2;
    }
    if (v12)
    {
      int v13 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v14 = (char *)v13;
      if (v13) {
        sub_100055434(v13);
      }
    }
    else
    {
      unsigned int v14 = 0;
    }
    free(v14);
  }

  dispatch_queue_t v15 = dispatch_queue_create("com.apple.mobile.keybagd.usermanagerd", 0);
  CFStringRef v16 = (void *)qword_1000E4320;
  qword_1000E4320 = (uint64_t)v15;

  dispatch_queue_t v17 = dispatch_queue_create("com.apple.system.libinfo.muser", 0);
  unsigned int v18 = (void *)qword_1000E4328;
  qword_1000E4328 = (uint64_t)v17;

  dispatch_queue_t v19 = dispatch_queue_create("com.apple.usermanagerd.userswitch", 0);
  unsigned int v20 = (void *)qword_1000E4330;
  qword_1000E4330 = (uint64_t)v19;

  dispatch_queue_t v21 = dispatch_queue_create("com.apple.usermanagerd.volumemigrator", 0);
  unsigned int v22 = (void *)qword_1000E4338;
  qword_1000E4338 = (uint64_t)v21;

  if (sub_1000561B8())
  {
    if (qword_1000E40E0 != -1) {
      dispatch_once(&qword_1000E40E0, &stru_1000D56A0);
    }
    unsigned int v23 = qword_1000E40D8;
    if (os_log_type_enabled((os_log_t)qword_1000E40D8, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      uint64_t v24 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v25 = (char *)v24;
      if (v24) {
        sub_100055434(v24);
      }
      free(v25);
    }
    byte_1000E4312 = 1;
  }
  if (!sub_1000560DC() && (os_variant_uses_ephemeral_storage() & 1) == 0) {
    sub_10001B670();
  }
  fwrite("****** USERMANAGERD SESSION SETUP DONE  ****\n", 0x2DuLL, 1uLL, __stdoutp);
  sub_100087C18();
  sub_1000776E0();
  sub_100087D04();
  sub_100037A40();
  byte_1000E4311 = 1;
  _os_log_set_nscf_formatter();
  openlog("usermanagerd", 1, 24);
  CFRunLoopRun();
  return 0;
}

size_t sub_100055958()
{
  byte_1000E4310 = 1;
  if (sub_1000560DC())
  {
    uint64_t v0 = __stdoutp;
    unsigned int v1 = "****** DIAGNOSTICS MODE ENABLED, SKIP INIT ****\n";
    size_t v2 = 48;
LABEL_5:
    return fwrite(v1, v2, 1uLL, v0);
  }
  if (os_variant_uses_ephemeral_storage())
  {
    uint64_t v0 = __stdoutp;
    unsigned int v1 = "****** DEVICE HAS EPHEMERAL DATA VOLUME, SKIP INIT ****\n";
    size_t v2 = 56;
    goto LABEL_5;
  }
  if (qword_1000E40D0 != -1) {
    dispatch_once(&qword_1000E40D0, &stru_1000D5680);
  }
  if (byte_1000E40C8) {
    uint64_t v4 = "/var/logs/usermanagerd_init.log";
  }
  else {
    uint64_t v4 = "/var/logs/usermanagerd.log";
  }
  uint64_t v5 = sub_10006673C((uint64_t)UMDRotatingLog, (void *)qword_1000E4318, v4, (void *)0x100000, 3);
  int v6 = (void *)qword_1000E40C0;
  qword_1000E40C0 = v5;

  fwrite("****** IN UMD_INIT ****\n", 0x18uLL, 1uLL, __stdoutp);
  dispatch_queue_t v7 = dispatch_queue_create("com.apple.system.libinfo.muser", 0);
  unsigned int v8 = (void *)qword_1000E4328;
  qword_1000E4328 = (uint64_t)v7;

  fwrite("****** STARTING EARLYBOOT SETUP ****\n", 0x25uLL, 1uLL, __stdoutp);
  if (qword_1000E40E0 != -1) {
    dispatch_once(&qword_1000E40E0, &stru_1000D56A0);
  }
  CFNumberRef v9 = (id)qword_1000E40D8;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    BOOL v10 = (const char *)_os_log_send_and_compose_impl();
    int v11 = (char *)v10;
    if (v10) {
      sub_100055434(v10);
    }
    free(v11);
  }

  dispatch_queue_t v12 = dispatch_queue_create("com.apple.system.libinfo.muser", 0);
  int v13 = (void *)qword_1000E4328;
  qword_1000E4328 = (uint64_t)v12;

  if (sub_1000561B8())
  {
    if (qword_1000E40E0 != -1) {
      dispatch_once(&qword_1000E40E0, &stru_1000D56A0);
    }
    unsigned int v14 = (id)qword_1000E40D8;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      dispatch_queue_t v15 = (const char *)_os_log_send_and_compose_impl();
      CFStringRef v16 = (char *)v15;
      if (v15) {
        sub_100055434(v15);
      }
      free(v16);
    }

    byte_1000E4312 = 1;
  }
  sub_100038DDC();
  if (qword_1000E40E0 != -1) {
    dispatch_once(&qword_1000E40E0, &stru_1000D56A0);
  }
  dispatch_queue_t v17 = (id)qword_1000E40D8;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    unsigned int v18 = (const char *)_os_log_send_and_compose_impl();
    dispatch_queue_t v19 = (char *)v18;
    if (v18) {
      sub_100055434(v18);
    }
    free(v19);
  }

  fwrite("****** DONE EARLYBOOT SETUP ****\n", 0x21uLL, 1uLL, __stdoutp);
  return fwrite("****** DONE UMD_INIT ****\n", 0x1AuLL, 1uLL, __stdoutp);
}

void sub_100055DA8()
{
  byte_1000E4311 = 1;
  uint64_t v0 = sub_10006673C((uint64_t)UMDRotatingLog, (void *)qword_1000E4318, "/var/logs/usermanagerd.log", (void *)0x100000, 3);
  unsigned int v1 = (void *)qword_1000E40C0;
  qword_1000E40C0 = v0;

  dispatch_queue_t v2 = dispatch_queue_create("com.apple.system.libinfo.muser", 0);
  int v3 = (void *)qword_1000E4328;
  qword_1000E4328 = (uint64_t)v2;

  if (qword_1000E40F0 != -1) {
    dispatch_once(&qword_1000E40F0, &stru_1000D56C0);
  }
  uint64_t v4 = (id)qword_1000E40E8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1000E4311) {
      BOOL v5 = byte_1000E4310 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5) {
      int v6 = 1;
    }
    else {
      int v6 = 2;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      int v7 = v6;
    }
    else {
      int v7 = v6 & 2;
    }
    if (v7)
    {
      unsigned int v8 = (const char *)_os_log_send_and_compose_impl();
      CFNumberRef v9 = (char *)v8;
      if (v8) {
        sub_100055434(v8);
      }
    }
    else
    {
      CFNumberRef v9 = 0;
    }
    free(v9);
  }

  if (sub_1000561B8())
  {
    if (qword_1000E40E0 != -1) {
      dispatch_once(&qword_1000E40E0, &stru_1000D56A0);
    }
    BOOL v10 = (id)qword_1000E40D8;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      int v11 = (const char *)_os_log_send_and_compose_impl();
      dispatch_queue_t v12 = (char *)v11;
      if (v11) {
        sub_100055434(v11);
      }
      free(v12);
    }

    byte_1000E4312 = 1;
  }
  sub_100045404();
  if (qword_1000E40F0 != -1) {
    dispatch_once(&qword_1000E40F0, &stru_1000D56C0);
  }
  int v13 = (id)qword_1000E40E8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1000E4311) {
      BOOL v14 = byte_1000E4310 == 0;
    }
    else {
      BOOL v14 = 0;
    }
    if (v14) {
      int v15 = 1;
    }
    else {
      int v15 = 2;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      int v16 = v15;
    }
    else {
      int v16 = v15 & 2;
    }
    if (v16)
    {
      dispatch_queue_t v17 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v18 = (char *)v17;
      if (v17) {
        sub_100055434(v17);
      }
    }
    else
    {
      unsigned int v18 = 0;
    }
    free(v18);
  }
}

BOOL sub_1000560DC()
{
  uint64_t v0 = (char *)malloc_type_malloc(0x16uLL, 0x921FBC8DuLL);
  if (v0)
  {
    unsigned int v1 = v0;
    snprintf(v0, 0x16uLL, "%s%s", "IODeviceTree", ":/product");
    io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, v1);
    if (v2)
    {
      io_object_t v3 = v2;
      CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, @"boot-ios-diagnostics", kCFAllocatorDefault, 0);
      if (CFProperty)
      {
        CFRelease(CFProperty);
        int v5 = 1;
      }
      else
      {
        int v5 = 0;
      }
      IOObjectRelease(v3);
    }
    else
    {
      int v5 = -8;
    }
    free(v1);
  }
  else
  {
    int v5 = -5;
  }
  return v5 == 1;
}

BOOL sub_1000561B8()
{
  io_registry_entry_t v0 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/filesystems");
  if (v0)
  {
    io_object_t v1 = v0;
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v0, @"e-apfs", kCFAllocatorDefault, 0);
    BOOL v3 = CFProperty != 0;
    if (CFProperty)
    {
      CFRelease(CFProperty);
      if (qword_1000E40E0 != -1) {
        dispatch_once(&qword_1000E40E0, &stru_1000D56A0);
      }
      uint64_t v4 = (id)qword_1000E40D8;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
    }
    else
    {
      if (qword_1000E40E0 != -1) {
        dispatch_once(&qword_1000E40E0, &stru_1000D56A0);
      }
      uint64_t v4 = (id)qword_1000E40D8;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
    }
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    int v5 = (const char *)_os_log_send_and_compose_impl();
    int v6 = (char *)v5;
    if (v5) {
      sub_100055434(v5);
    }
    free(v6);
LABEL_14:

    IOObjectRelease(v1);
    return v3;
  }
  return 0;
}

void sub_1000563BC(id a1)
{
  qword_1000E40D8 = (uint64_t)os_log_create(off_1000E33D8, "legacy");

  _objc_release_x1();
}

void sub_100056400(id a1)
{
  qword_1000E40E8 = (uint64_t)os_log_create(off_1000E33D8, "default");

  _objc_release_x1();
}

id *sub_100056444(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  BOOL v3 = sub_1000564A4((id *)[UMDUserManager alloc], v2);

  return v3;
}

id *sub_1000564A4(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)UMDUserManager;
    int v5 = (id *)[super init];
    if (!v5) {
      sub_1000B08C8();
    }
    a1 = v5;
    uint64_t v6 = [v4 se];
    id v7 = a1[1];
    a1[1] = (id)v6;

    objc_storeStrong(a1 + 2, a2);
  }

  return a1;
}

id sub_100056538(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v4 = *(id *)(a1 + 24);
    id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v12;
      while (2)
      {
        for (CFIndex i = 0; i != v5; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v4);
          }
          unsigned int v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
          objc_super v9 = [v8 objectForKeyedSubscript:kUMUserSessionAlternateDSIDKey];
          if (v9)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0
              && ([v9 isEqualToString:v3] & 1) != 0)
            {
              id v5 = v8;

              goto LABEL_14;
            }
          }
        }
        id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
LABEL_14:
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_1000566C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v4 = *(id *)(a1 + 24);
    id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v12;
      while (2)
      {
        for (CFIndex i = 0; i != v5; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v4);
          }
          unsigned int v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
          objc_super v9 = [v8 objectForKeyedSubscript:kUMUserSessionUUIDKey];
          if (v9)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0
              && ([v9 isEqualToString:v3] & 1) != 0)
            {
              id v5 = v8;

              goto LABEL_14;
            }
          }
        }
        id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
LABEL_14:
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_100056848(uint64_t a1, int a2)
{
  if (a1)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v3 = *(id *)(a1 + 24);
    id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v13;
      while (2)
      {
        for (CFIndex i = 0; i != v5; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v13 != v6) {
            objc_enumerationMutation(v3);
          }
          unsigned int v8 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          objc_super v9 = [v8 objectForKeyedSubscript:kUMUserSessionIDKey];
          if (v9)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v9 unsignedIntValue] == a2)
            {
              id v10 = v8;

              goto LABEL_14;
            }
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
    id v10 = 0;
LABEL_14:
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

uint64_t sub_1000569C8(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  id v2 = sub_1000566C0(a1, a2);
  id v3 = v2;
  if (v2)
  {
    id v4 = [v2 objectForKeyedSubscript:kUMUserSessionIDKey];
    if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      uint64_t v5 = (uint64_t)[v4 unsignedIntValue];
    }
    else {
      uint64_t v5 = 0xFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v5 = 0xFFFFFFFFLL;
  }

  return v5;
}

id sub_100056A6C(uint64_t a1, int a2)
{
  if (a1)
  {
    id v2 = sub_100056848(a1, a2);
    id v3 = v2;
    if (v2)
    {
      id v4 = [v2 objectForKeyedSubscript:kUMUserSessionUUIDKey];
      if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
        id v5 = v4;
      }
      else {
        id v5 = 0;
      }
    }
    else
    {
      id v5 = 0;
    }
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

uint64_t sub_100056B1C(uint64_t result)
{
  if (result)
  {
    io_object_t v1 = sub_100018600(*(void *)(result + 8));
    uint64_t v2 = sub_10001935C((uint64_t)v1);

    return v2;
  }
  return result;
}

void *sub_100056B60(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    v10[0] = @"BLOB";
    v10[1] = @"BLOBLEN";
    v11[0] = v3;
    id v5 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v3 length]);
    v11[1] = v5;
    uint64_t v6 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:2];
    id v7 = sub_10008ACC0((uint64_t)v6);

    if (!v7) {
      sub_1000B08C8();
    }
    unsigned int v8 = sub_100018F6C(a1[1]);
    a1 = [v8 atomicallyWriteData:v7 toPath:@"/private/var/keybags/nextsession.kb" error:0];
  }
  return a1;
}

NSObject *sub_100056C84(uint64_t a1)
{
  if (a1)
  {
    id v1 = *(id *)(a1 + 8);
    uint64_t v2 = sub_100018F6C((uint64_t)v1);
    id v30 = 0;
    id v3 = [v2 dataWithContentsOfFile:@"/private/var/keybags/nextsession.kb" error:&v30];
    id v4 = v30;

    if (v3)
    {
      id v5 = sub_10008AFE0((uint64_t)v3);
      uint64_t v6 = v5;
      if (!v5)
      {
        if (qword_1000E4100 != -1) {
          dispatch_once(&qword_1000E4100, &stru_1000D5758);
        }
        id v7 = (id)qword_1000E40F8;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          unsigned int v13 = sub_100055404(0);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
            unsigned int v14 = v13;
          }
          else {
            unsigned int v14 = v13 & 0xFFFFFFFE;
          }
          if (v14)
          {
            LOWORD(v31) = 0;
            long long v15 = (const char *)_os_log_send_and_compose_impl();
            int v16 = (char *)v15;
            if (v15) {
              sub_100055434(v15);
            }
          }
          else
          {
            int v16 = 0;
          }
          free(v16);
        }
        goto LABEL_69;
      }
      id v7 = sub_10008AC30(v5, @"BLOB");
      if (v7)
      {
        unsigned int v8 = sub_10008A720(v6, @"BLOBLEN", 0);
        if (v8)
        {
          if ([v7 length] == (id)v8)
          {
            id v7 = v7;
            objc_super v9 = v7;
LABEL_70:

            goto LABEL_71;
          }
          if (qword_1000E4100 != -1) {
            dispatch_once(&qword_1000E4100, &stru_1000D5758);
          }
          unsigned int v20 = (id)qword_1000E40F8;
          if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            goto LABEL_66;
          }
          unsigned int v25 = sub_100055404(0);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            unsigned int v26 = v25;
          }
          else {
            unsigned int v26 = v25 & 0xFFFFFFFE;
          }
          if (v26)
          {
            LOWORD(v31) = 0;
LABEL_59:
            unsigned int v27 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v28 = (char *)v27;
            if (v27) {
              sub_100055434(v27);
            }
            goto LABEL_65;
          }
        }
        else
        {
          if (qword_1000E4100 != -1) {
            dispatch_once(&qword_1000E4100, &stru_1000D5758);
          }
          unsigned int v20 = (id)qword_1000E40F8;
          if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            goto LABEL_66;
          }
          unsigned int v23 = sub_100055404(0);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            unsigned int v24 = v23;
          }
          else {
            unsigned int v24 = v23 & 0xFFFFFFFE;
          }
          if (v24)
          {
            LOWORD(v31) = 0;
            goto LABEL_59;
          }
        }
      }
      else
      {
        if (qword_1000E4100 != -1) {
          dispatch_once(&qword_1000E4100, &stru_1000D5758);
        }
        unsigned int v20 = (id)qword_1000E40F8;
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          goto LABEL_66;
        }
        unsigned int v21 = sub_100055404(0);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          unsigned int v22 = v21;
        }
        else {
          unsigned int v22 = v21 & 0xFFFFFFFE;
        }
        if (v22)
        {
          LOWORD(v31) = 0;
          goto LABEL_59;
        }
      }
      unsigned int v28 = 0;
LABEL_65:
      free(v28);
LABEL_66:

LABEL_69:
      objc_super v9 = 0;
      goto LABEL_70;
    }
    if ([v4 code] == (id)2)
    {
      if (qword_1000E4100 != -1) {
        dispatch_once(&qword_1000E4100, &stru_1000D5758);
      }
      uint64_t v6 = (id)qword_1000E40F8;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_63;
      }
      unsigned int v10 = sub_100055404(0);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        LOWORD(v31) = 0;
        long long v12 = (void *)_os_log_send_and_compose_impl();
        if (!v12) {
          goto LABEL_62;
        }
        goto LABEL_34;
      }
    }
    else
    {
      if (qword_1000E4100 != -1) {
        dispatch_once(&qword_1000E4100, &stru_1000D5758);
      }
      uint64_t v6 = (id)qword_1000E40F8;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        goto LABEL_63;
      }
      int v17 = sub_100055404(0);
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        v17 &= ~1u;
      }
      if (v17)
      {
        unsigned int v18 = v6;
        unsigned int v19 = [v4 code];
        int v31 = 67109120;
        unsigned int v32 = v19;
        long long v12 = (void *)_os_log_send_and_compose_impl();

        if (!v12)
        {
LABEL_62:
          free(v12);
LABEL_63:
          objc_super v9 = 0;
LABEL_71:

          goto LABEL_72;
        }
LABEL_34:
        sub_100055434((const char *)v12);
        goto LABEL_62;
      }
    }
    long long v12 = 0;
    goto LABEL_62;
  }
  objc_super v9 = 0;
LABEL_72:

  return v9;
}

uint64_t sub_100057258(uint64_t a1, int a2, int a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v33[0] = a3;
  v33[1] = a2;
  uint64_t v6 = +[NSData dataWithBytes:v33 length:32];
  id v7 = *(id *)(a1 + 8);
  unsigned int v8 = sub_100019308((uint64_t)v7);
  id v26 = 0;
  objc_super v9 = [v8 dataWrappingDataWithDeviceClassF:v6 error:&v26];
  id v10 = v26;

  if (!v9)
  {
    if (qword_1000E4100 != -1) {
      dispatch_once(&qword_1000E4100, &stru_1000D5758);
    }
    unsigned int v11 = (id)qword_1000E40F8;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_42;
    }
    unsigned int v16 = sub_100055404(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = v16 & 0xFFFFFFFE;
    }
    if (v17)
    {
      int v27 = 67109634;
      int v28 = a2;
      __int16 v29 = 1024;
      int v30 = a3;
      __int16 v31 = 2114;
      id v32 = v10;
      goto LABEL_38;
    }
    goto LABEL_40;
  }
  if (![v9 length])
  {
    if (qword_1000E4100 != -1) {
      dispatch_once(&qword_1000E4100, &stru_1000D5758);
    }
    unsigned int v11 = (id)qword_1000E40F8;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_42;
    }
    unsigned int v18 = sub_100055404(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v18 & 0xFFFFFFFE;
    }
    if (v19) {
      goto LABEL_37;
    }
    goto LABEL_40;
  }
  if (sub_100056B60((void *)a1, v9))
  {
    if (qword_1000E4100 != -1) {
      dispatch_once(&qword_1000E4100, &stru_1000D5758);
    }
    unsigned int v11 = (id)qword_1000E40F8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v12 = sub_100055404(0);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v12 & 0xFFFFFFFE;
      }
      if (v13)
      {
        int v27 = 67109376;
        int v28 = a2;
        __int16 v29 = 1024;
        int v30 = a3;
        unsigned int v14 = (const char *)_os_log_send_and_compose_impl();
        long long v15 = (char *)v14;
        if (v14) {
          sub_100055434(v14);
        }
      }
      else
      {
        long long v15 = 0;
      }
      free(v15);
    }
    uint64_t v24 = 1;
    goto LABEL_43;
  }
  if (qword_1000E4100 != -1) {
    dispatch_once(&qword_1000E4100, &stru_1000D5758);
  }
  unsigned int v11 = (id)qword_1000E40F8;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    unsigned int v20 = sub_100055404(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      unsigned int v21 = v20;
    }
    else {
      unsigned int v21 = v20 & 0xFFFFFFFE;
    }
    if (v21)
    {
LABEL_37:
      int v27 = 67109376;
      int v28 = a2;
      __int16 v29 = 1024;
      int v30 = a3;
LABEL_38:
      unsigned int v22 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v23 = (char *)v22;
      if (v22) {
        sub_100055434(v22);
      }
      goto LABEL_41;
    }
LABEL_40:
    unsigned int v23 = 0;
LABEL_41:
    free(v23);
  }
LABEL_42:
  uint64_t v24 = 0;
LABEL_43:

  return v24;
}

uint64_t sub_1000576AC(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (!a1) {
    return 0;
  }
  *a2 = -1;
  *a3 = -1;
  uint64_t v6 = sub_100056C84(a1);
  if (v6)
  {
    id v7 = *(id *)(a1 + 8);
    unsigned int v8 = sub_100019308((uint64_t)v7);
    id v19 = 0;
    objc_super v9 = [v8 dataUnwrappingDataWithDeviceClassF:v6 error:&v19];
    id v10 = v19;

    if (v9)
    {
      if ([v9 length] == (id)32)
      {
        unsigned int v11 = [v9 bytes];
        *a2 = v11[1];
        *a3 = *v11;
        uint64_t v12 = 1;
LABEL_19:

        goto LABEL_20;
      }
      if (qword_1000E4100 != -1) {
        dispatch_once(&qword_1000E4100, &stru_1000D5758);
      }
      unsigned int v13 = (id)qword_1000E40F8;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v14 = sub_100055404(0);
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          v14 &= ~1u;
        }
        if (v14)
        {
          long long v15 = v13;
          id v16 = [v9 length];
          int v20 = 134217984;
          id v21 = v16;
          unsigned int v17 = (char *)_os_log_send_and_compose_impl();

          if (v17) {
            sub_100055434(v17);
          }
        }
        else
        {
          unsigned int v17 = 0;
        }
        free(v17);
      }
    }
    uint64_t v12 = 0;
    goto LABEL_19;
  }
  uint64_t v12 = 0;
LABEL_20:

  return v12;
}

id sub_1000578D4(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = sub_100018F6C(*(void *)(a1 + 8));
  id v2 = [v1 removeFileAtPath:@"/private/var/keybags/nextsession.kb" error:0];

  if (v2)
  {
    if (qword_1000E4100 != -1) {
      dispatch_once(&qword_1000E4100, &stru_1000D5758);
    }
    id v3 = (id)qword_1000E40F8;
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    unsigned int v4 = sub_100055404(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5) {
      goto LABEL_18;
    }
  }
  else
  {
    if (qword_1000E4100 != -1) {
      dispatch_once(&qword_1000E4100, &stru_1000D5758);
    }
    id v3 = (id)qword_1000E40F8;
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    unsigned int v6 = sub_100055404(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = v6 & 0xFFFFFFFE;
    }
    if (v7)
    {
LABEL_18:
      unsigned int v8 = (const char *)_os_log_send_and_compose_impl();
      objc_super v9 = (char *)v8;
      if (v8) {
        sub_100055434(v8);
      }
      goto LABEL_21;
    }
  }
  objc_super v9 = 0;
LABEL_21:
  free(v9);
LABEL_22:

  return v2;
}

id sub_100057AAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  if (a1)
  {
    int v5 = sub_10008A698(v3, (uint64_t)kUMUserSessionIDKey, (id)0xFFFFFFFFLL);
    if (*__error() == 2) {
      sub_1000B08C8();
    }
    uint64_t v6 = sub_10008A8B8(v4, (uint64_t)kUMUserSessionShortNameKey);
    if (!v6) {
      sub_1000B08C8();
    }
    unsigned int v7 = (void *)v6;
    unsigned int v8 = sub_10008A698(v4, (uint64_t)kUMUserSessionGroupIDKey, (id)0xFFFFFFFFLL);
    if (*__error() == 2) {
      sub_1000B08C8();
    }
    uint64_t v9 = sub_10008A8B8(v4, (uint64_t)kUMUserSessionLibinfoHomeDirKey);
    if (!v9) {
      sub_1000B08C8();
    }
    id v10 = (void *)v9;
    unsigned int v11 = sub_10008A8B8(v4, (uint64_t)kUMUserSessionUUIDKey);
    uint64_t v12 = sub_1000173F4((uint64_t)NSUUID, v11);

    if (!v12) {
      sub_1000B08C8();
    }
    if (v5 != v8) {
      sub_1000B08C8();
    }
    unsigned int v17 = v12;
    unsigned int v13 = +[NSArray arrayWithObjects:&v17 count:1];
    int v14 = +[NSSet setWithArray:v13];

    long long v15 = sub_100082FBC((uint64_t)UMDarwinDirectoryUser, v7, v5, v12, v12, v7, v10, @"/bin/bash", v14);
  }
  else
  {
    long long v15 = 0;
  }

  return v15;
}

id sub_100057CC4(void *a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  if (a1)
  {
    int v5 = sub_10008A698(v3, (uint64_t)kUMUserSessionGroupIDKey, (id)0xFFFFFFFFLL);
    if (*__error() == 2) {
      sub_1000B08C8();
    }
    uint64_t v6 = sub_10008A8B8(v4, (uint64_t)kUMUserSessionShortNameKey);
    if (!v6) {
      sub_1000B08C8();
    }
    unsigned int v7 = (void *)v6;
    uint64_t v8 = sub_10008A8B8(v4, (uint64_t)kUMUserSessionLibinfoHomeDirKey);
    if (!v8) {
      sub_1000B08C8();
    }
    uint64_t v9 = (void *)v8;
    id v10 = sub_10008A8B8(v4, (uint64_t)kUMUserSessionUUIDKey);
    unsigned int v11 = sub_1000173F4((uint64_t)NSUUID, v10);

    if (!v11) {
      sub_1000B08C8();
    }
    a1 = sub_10008381C((uint64_t)UMDarwinDirectoryGroup, v7, v5, v11, v7);
  }

  return a1;
}

void sub_100057E04(uint64_t a1)
{
  if (a1)
  {
    id v2 = sub_100018BF8(*(void *)(a1 + 8));
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100057E98;
    v3[3] = &unk_1000D56E8;
    void v3[4] = a1;
    [v2 initializeLocalUsersAndGroups:v3];
  }
}

void sub_100057E98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [v5 removeAllObjects];
  [v6 removeAllObjects];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  unsigned int v7 = *(void **)(a1 + 32);
  if (v7) {
    unsigned int v7 = (void *)v7[3];
  }
  uint64_t v8 = v7;
  id v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v17;
    do
    {
      for (CFIndex i = 0; i != v10; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v8);
        }
        unsigned int v13 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        int v14 = sub_100057AAC(*(void *)(a1 + 32), v13);
        [v5 addObject:v14, v16];

        long long v15 = sub_100057CC4(*(void **)(a1 + 32), v13);
        [v6 addObject:v15];
      }
      id v10 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v10);
  }
}

void sub_100058010(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  if (a1)
  {
    unsigned int v5 = sub_10008A698(v3, (uint64_t)kUMUserSessionIDKey, (id)0xFFFFFF9BLL);
    if (v5 == -1)
    {
      if (qword_1000E4100 != -1) {
        dispatch_once(&qword_1000E4100, &stru_1000D5758);
      }
      id v6 = (id)qword_1000E40F8;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = 0;
        unsigned int v7 = sub_100055404(0);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v7 & 0xFFFFFFFE;
        }
        if (v8)
        {
          int v22 = 67109120;
          int v23 = -1;
          id v9 = (const char *)_os_log_send_and_compose_impl();
          id v10 = (char *)v9;
          if (v9) {
            sub_100055434(v9);
          }
        }
        else
        {
          id v10 = 0;
        }
        free(v10);
      }
    }
    id v11 = *(id *)(a1 + 8);
    uint64_t v12 = sub_100018BF8((uint64_t)v11);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1000582F8;
    v19[3] = &unk_1000D5710;
    v19[4] = a1;
    id v13 = v4;

    id v20 = v13;
    LOBYTE(v13) = [v12 updateLocalUsersAndGroupsWithError:0 updater:v19];

    if ((v13 & 1) == 0)
    {
      if (qword_1000E4100 != -1) {
        dispatch_once(&qword_1000E4100, &stru_1000D5758);
      }
      int v14 = (id)qword_1000E40F8;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = 0;
        unsigned int v15 = sub_100055404(0);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          unsigned int v16 = v15;
        }
        else {
          unsigned int v16 = v15 & 0xFFFFFFFE;
        }
        if (v16)
        {
          int v22 = 67109120;
          int v23 = v5;
          long long v17 = (const char *)_os_log_send_and_compose_impl();
          long long v18 = (char *)v17;
          if (v17) {
            sub_100055434(v17);
          }
        }
        else
        {
          long long v18 = 0;
        }
        free(v18);
      }
    }
  }
}

void sub_1000582F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v7 = a3;
  id v8 = a2;
  sub_100057AAC(v5, v6);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  id v9 = sub_100057CC4(*(void **)(a1 + 32), *(void **)(a1 + 40));
  [v8 addObject:v10];

  [v7 addObject:v9];
}

void sub_1000583A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = (uint64_t)*(id *)(a1 + 8);
    uint64_t v5 = sub_100018BF8(v4);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10005857C;
    v12[3] = &unk_1000D5738;
    id v6 = v3;

    id v13 = v6;
    LOBYTE(v4) = [v5 updateLocalUsersAndGroupsWithError:0 updater:v12];

    if ((v4 & 1) == 0)
    {
      if (qword_1000E4100 != -1) {
        dispatch_once(&qword_1000E4100, &stru_1000D5758);
      }
      id v7 = (id)qword_1000E40F8;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        unsigned int v8 = sub_100055404(0);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          unsigned int v9 = v8;
        }
        else {
          unsigned int v9 = v8 & 0xFFFFFFFE;
        }
        if (v9)
        {
          int v14 = 138543362;
          id v15 = v6;
          id v10 = (const char *)_os_log_send_and_compose_impl();
          id v11 = (char *)v10;
          if (v10) {
            sub_100055434(v10);
          }
        }
        else
        {
          id v11 = 0;
        }
        free(v11);
      }
    }
  }
}

void sub_10005857C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v7 = [v5 copy];
  id v8 = [v7 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v28;
    do
    {
      for (CFIndex i = 0; i != v9; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v28 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v27 + 1) + 8 * i);
        id v13 = sub_100018600(v12);
        unsigned int v14 = [v13 isEqualToString:*(void *)(a1 + 32)];

        if (v14) {
          [v5 removeObject:v12];
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v27 objects:v32 count:16];
    }
    while (v9);
  }

  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v15 = [v6 copy];
  id v16 = [v15 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v24;
    do
    {
      for (j = 0; j != v17; j = (char *)j + 1)
      {
        if (*(void *)v24 != v18) {
          objc_enumerationMutation(v15);
        }
        uint64_t v20 = *(void *)(*((void *)&v23 + 1) + 8 * (void)j);
        uint64_t v21 = sub_100018600(v20);
        unsigned int v22 = [v21 isEqualToString:*(void *)(a1 + 32)];

        if (v22) {
          [v6 removeObject:v20];
        }
      }
      id v17 = [v15 countByEnumeratingWithState:&v23 objects:v31 count:16];
    }
    while (v17);
  }
}

void sub_1000587CC(id a1)
{
  qword_1000E40F8 = (uint64_t)os_log_create(off_1000E33D8, "user");

  _objc_release_x1();
}

id *sub_100058814(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  id v8 = a2;
  self;
  id v9 = sub_1000588A4((id *)[UMDGeneration alloc], v8, v7, v6);

  return v9;
}

id *sub_1000588A4(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)UMDGeneration;
    uint64_t v10 = (id *)[super init];
    if (!v10) {
      sub_1000B08C8();
    }
    a1 = v10;
    objc_storeStrong(v10 + 3, a4);
    a1[4] = v7;
    a1[5] = v8;
    *((_DWORD *)a1 + 2) = -1;
    a1[2] = 0;
  }

  return a1;
}

uint64_t sub_100058954(uint64_t result)
{
  if (result)
  {
    uint64_t result = *(void *)(result + 16);
    if (!result) {
      sub_1000B08C8();
    }
  }
  return result;
}

uint64_t sub_100058978(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 16)) {
      sub_1000B08C8();
    }
    *(void *)(result + 16) = a2;
  }
  return result;
}

void sub_1000589A0(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if ((unint64_t)(v2 + 1) > 1) {
      uint64_t v3 = v2 + 1;
    }
    else {
      uint64_t v3 = 1;
    }
    *(void *)(a1 + 16) = v3;
    uint64_t v4 = *(id *)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = sub_100055404(0);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v6 = v5;
      }
      else {
        unsigned int v6 = v5 & 0xFFFFFFFE;
      }
      if (v6)
      {
        id v7 = (const char *)_os_log_send_and_compose_impl();
        id v8 = (char *)v7;
        if (v7) {
          sub_100055434(v7);
        }
      }
      else
      {
        id v8 = 0;
      }
      free(v8);
    }

    sub_100058B1C(a1);
    sub_100058DB8(a1);
  }
}

void sub_100058ADC(uint64_t a1)
{
  if (a1)
  {
    sub_100058B1C(a1);
    sub_100058DB8(a1);
  }
}

void sub_100058B1C(uint64_t a1)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) != -1) {
      goto LABEL_4;
    }
    id v2 = *(id *)(a1 + 24);
    uint64_t v3 = sub_1000186E0((uint64_t)v2);
    id v4 = *(id *)(a1 + 32);
    *(_DWORD *)(a1 + 8) = [v3 registerPlain:v4];

    if (*(_DWORD *)(a1 + 8) == -1)
    {
      uint64_t v10 = *(id *)(a1 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        unsigned int v15 = sub_100055404(0);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          unsigned int v16 = v15;
        }
        else {
          unsigned int v16 = v15 & 0xFFFFFFFE;
        }
        if (v16) {
          goto LABEL_22;
        }
        goto LABEL_24;
      }
    }
    else
    {
LABEL_4:
      id v5 = *(id *)(a1 + 24);
      unsigned int v6 = sub_1000186E0((uint64_t)v5);
      uint64_t v7 = sub_100058954(a1);
      uint64_t v8 = *(unsigned int *)(a1 + 8);

      LOBYTE(v7) = [v6 setState:v7 forToken:v8];
      id v9 = *(id *)(a1 + 40);
      uint64_t v10 = v9;
      if (v7)
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          unsigned int v11 = sub_100055404(0);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
            unsigned int v12 = v11;
          }
          else {
            unsigned int v12 = v11 & 0xFFFFFFFE;
          }
          if (v12)
          {
LABEL_22:
            id v17 = (const char *)_os_log_send_and_compose_impl();
            uint64_t v18 = (char *)v17;
            if (v17) {
              sub_100055434(v17);
            }
            goto LABEL_25;
          }
LABEL_24:
          uint64_t v18 = 0;
LABEL_25:
          free(v18);
        }
      }
      else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        unsigned int v13 = sub_100055404(0);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          unsigned int v14 = v13;
        }
        else {
          unsigned int v14 = v13 & 0xFFFFFFFE;
        }
        if (v14) {
          goto LABEL_22;
        }
        goto LABEL_24;
      }
    }
  }
}

void sub_100058DB8(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(id *)(a1 + 24);
    uint64_t v3 = sub_1000186E0((uint64_t)v2);
    unsigned __int8 v4 = [v3 post:*(void *)(a1 + 32)];

    id v5 = *(id *)(a1 + 40);
    unsigned int v6 = v5;
    if (v4)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        unsigned int v7 = sub_100055404(0);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v7 & 0xFFFFFFFE;
        }
        if (v8)
        {
LABEL_14:
          unsigned int v11 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v12 = (char *)v11;
          if (v11) {
            sub_100055434(v11);
          }
          goto LABEL_17;
        }
LABEL_16:
        unsigned int v12 = 0;
LABEL_17:
        free(v12);
      }
    }
    else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      unsigned int v9 = sub_100055404(0);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        unsigned int v10 = v9;
      }
      else {
        unsigned int v10 = v9 & 0xFFFFFFFE;
      }
      if (v10) {
        goto LABEL_14;
      }
      goto LABEL_16;
    }
  }
}

uint64_t sub_100058F38(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 8);
  }
  return result;
}

uint64_t sub_100058F44(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

UMDPersonaManifestEmbedded *sub_100059348(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  if (qword_1000E4110 != -1) {
    dispatch_once(&qword_1000E4110, &stru_1000D5778);
  }
  unsigned __int8 v4 = (id)qword_1000E4108;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v28 = 0;
    unsigned int v5 = sub_100055404(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = v5 & 0xFFFFFFFE;
    }
    if (v6)
    {
      __int16 v27 = 0;
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  unsigned int v9 = [v3 personaSetFromData:v2];
  if (v9)
  {
    unsigned int v10 = objc_alloc_init(UMDPersonaManifestUser);
    sub_10001956C(v10, v9);
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    unsigned int v11 = v9;
    id v12 = [v11 countByEnumeratingWithState:&v23 objects:v29 count:16];
    if (v12)
    {
      uint64_t v13 = *(void *)v24;
      while (2)
      {
        for (CFIndex i = 0; i != v12; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v24 != v13) {
            objc_enumerationMutation(v11);
          }
          uint64_t v15 = *(void *)(*((void *)&v23 + 1) + 8 * i);
          if (sub_100066BCC(v15) == 3)
          {
            id v12 = (id)sub_100018BEC(v15);
            goto LABEL_23;
          }
        }
        id v12 = [v11 countByEnumeratingWithState:&v23 objects:v29 count:16];
        if (v12) {
          continue;
        }
        break;
      }
    }
LABEL_23:

    unsigned int v16 = objc_alloc_init(UMDPersonaManifestEmbedded);
    [(UMDPersonaManifest *)v16 setVersion:0];
    [(UMDPersonaManifest *)v16 setGeneration:v12];
    id v17 = +[NSSet setWithObject:v10];
    [(UMDPersonaManifest *)v16 setUsers:v17];
  }
  else
  {
    if (qword_1000E4110 != -1) {
      dispatch_once(&qword_1000E4110, &stru_1000D5778);
    }
    unsigned int v10 = (UMDPersonaManifestUser *)(id)qword_1000E4108;
    if (os_log_type_enabled(&v10->super, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = 0;
      unsigned int v18 = sub_100055404(0);
      if (os_log_type_enabled(&v10->super, OS_LOG_TYPE_ERROR)) {
        unsigned int v19 = v18;
      }
      else {
        unsigned int v19 = v18 & 0xFFFFFFFE;
      }
      if (v19)
      {
        __int16 v27 = 0;
        uint64_t v20 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v21 = (char *)v20;
        if (v20) {
          sub_100055434(v20);
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      free(v21);
    }
    unsigned int v16 = 0;
  }

  return v16;
}

id sub_1000596AC(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = (objc_class *)self;
  id v4 = objc_alloc_init(v3);
  if (qword_1000E4110 != -1) {
    dispatch_once(&qword_1000E4110, &stru_1000D5778);
  }
  unsigned int v5 = (id)qword_1000E4108;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v31 = 0;
    unsigned int v6 = sub_100055404(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = v6 & 0xFFFFFFFE;
    }
    if (v7)
    {
      __int16 v30 = 0;
      LODWORD(v29) = 2;
      uint64_t v28 = &v30;
      unsigned int v8 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v9 = (char *)v8;
      if (v8) {
        sub_100055434(v8);
      }
    }
    else
    {
      unsigned int v9 = 0;
    }
    free(v9);
  }

  [v4 setVersion:1];
  unsigned int v10 = [v2 objectForKeyedSubscript:@"UsePersonaGenerationID"];
  if (!v10 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    [v4 setGeneration:[v10 unsignedLongValue:v28, v29]];
    unsigned int v11 = [v2 objectForKeyedSubscript:@"UserPersonaDictionary"];
    if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      id v12 = [(objc_class *)v3 userSetFromDict:v11];
      if (v12)
      {
        [v4 setUsers:v12];
        id v13 = v4;
LABEL_54:

        goto LABEL_55;
      }
      if (qword_1000E4110 != -1) {
        dispatch_once(&qword_1000E4110, &stru_1000D5778);
      }
      unsigned int v22 = (id)qword_1000E4108;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = 0;
        unsigned int v23 = sub_100055404(0);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          unsigned int v24 = v23;
        }
        else {
          unsigned int v24 = v23 & 0xFFFFFFFE;
        }
        if (v24)
        {
          __int16 v30 = 0;
          long long v25 = (const char *)_os_log_send_and_compose_impl();
          long long v26 = (char *)v25;
          if (v25) {
            sub_100055434(v25);
          }
        }
        else
        {
          long long v26 = 0;
        }
        free(v26);
      }
    }
    else
    {
      if (qword_1000E4110 != -1) {
        dispatch_once(&qword_1000E4110, &stru_1000D5778);
      }
      id v12 = (id)qword_1000E4108;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = 0;
        unsigned int v14 = sub_100055404(0);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          unsigned int v15 = v14;
        }
        else {
          unsigned int v15 = v14 & 0xFFFFFFFE;
        }
        if (v15)
        {
          __int16 v30 = 0;
          unsigned int v16 = (const char *)_os_log_send_and_compose_impl();
          id v17 = (char *)v16;
          if (v16) {
            sub_100055434(v16);
          }
        }
        else
        {
          id v17 = 0;
        }
        free(v17);
      }
    }
    id v13 = 0;
    goto LABEL_54;
  }
  if (qword_1000E4110 != -1) {
    dispatch_once(&qword_1000E4110, &stru_1000D5778);
  }
  unsigned int v11 = (id)qword_1000E4108;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    uint64_t v31 = 0;
    unsigned int v18 = sub_100055404(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v18 & 0xFFFFFFFE;
    }
    if (v19)
    {
      __int16 v30 = 0;
      uint64_t v20 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v21 = (char *)v20;
      if (v20) {
        sub_100055434(v20);
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    free(v21);
  }
  id v13 = 0;
LABEL_55:

  return v13;
}

void sub_100059D00(id a1)
{
  qword_1000E4108 = (uint64_t)os_log_create(off_1000E33D8, "persona");

  _objc_release_x1();
}

id sub_100059D48(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  id v4 = sub_100059DA4(v3, v2, 0);

  return v4;
}

id *sub_100059DA4(uint64_t a1, void *a2, char a3)
{
  id v4 = a2;
  self;
  unsigned int v5 = sub_100059E14((id *)[UMDAPFSSupportVolumeHelper alloc], v4, a3);

  return v5;
}

id *sub_100059E14(id *a1, void *a2, char a3)
{
  id v5 = a2;
  if (a1)
  {
    unsigned int v6 = sub_100086AA0(a1, v5);
    if (!v6) {
      sub_1000B08C8();
    }
    a1 = v6;

    sub_100079778((uint64_t)a1, a3);
  }

  return a1;
}

id sub_100059F70()
{
  self;
  id v0 = [&off_1000D93D8 mutableCopy];

  return v0;
}

id sub_100059FA4()
{
  self;
  id v0 = [&off_1000D93F0 mutableCopy];

  return v0;
}

uint64_t sub_100059FD8()
{
  return 1;
}

void *sub_100059FF4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = sub_10005A054([UMDPersonaManager alloc], v2);

  return v3;
}

void *sub_10005A054(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)UMDPersonaManager;
    id v4 = [super init];
    if (!v4) {
      sub_1000B08C8();
    }
    a1 = v4;
    objc_storeWeak((id *)v4 + 6, v3);
    uint64_t v5 = sub_100019308((uint64_t)v3);
    unsigned int v6 = (void *)a1[2];
    a1[2] = v5;

    uint64_t v7 = sub_100018600((uint64_t)v3);
    unsigned int v8 = (void *)a1[3];
    a1[3] = v7;

    unsigned int v9 = objc_alloc_init(UMDPersonaState);
    unsigned int v10 = (void *)a1[4];
    a1[4] = v9;

    if (qword_1000E4120 != -1) {
      dispatch_once(&qword_1000E4120, &stru_1000D5798);
    }
    unsigned int v11 = (void *)a1[2];
    id v12 = (id)qword_1000E4118;
    uint64_t v13 = sub_100058814((uint64_t)UMDGeneration, @"com.apple.mobile.usermanagerd.personageneration_changed", v12, v11);
    unsigned int v14 = (void *)a1[5];
    a1[5] = v13;
  }
  return a1;
}

void sub_10005A18C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v2 = a2;
    self;
    id v3 = [&off_1000D93D8 mutableCopy];
    [v2 setObject:v3 forKeyedSubscript:@"UserPersonaBundleIDS"];
  }
}

void sub_10005A20C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v2 = a2;
    self;
    id v3 = [&off_1000D93F0 mutableCopy];
    [v2 setObject:v3 forKeyedSubscript:@"UserPersonaBundleIDS"];
  }
}

uint64_t sub_10005A28C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  if (a1 && v6)
  {
    unsigned int v9 = [v6 objectForKey:@"UserPersonaBundleIDS"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (v9)
      {
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        id v10 = v5;
        id v11 = [v10 countByEnumeratingWithState:&v23 objects:v29 count:16];
        if (v11)
        {
          id v12 = v11;
          char v13 = 0;
          uint64_t v14 = *(void *)v24;
          do
          {
            for (CFIndex i = 0; i != v12; CFIndex i = (char *)i + 1)
            {
              if (*(void *)v24 != v14) {
                objc_enumerationMutation(v10);
              }
              uint64_t v16 = *(void *)(*((void *)&v23 + 1) + 8 * i);
              if (([v9 containsObject:v16] & 1) == 0)
              {
                [v9 addObject:v16];
                char v13 = 1;
              }
            }
            id v12 = [v10 countByEnumeratingWithState:&v23 objects:v29 count:16];
          }
          while (v12);

          if (v13)
          {
            if (qword_1000E4130 != -1) {
              dispatch_once(&qword_1000E4130, &stru_1000D57B8);
            }
            id v17 = (id)qword_1000E4128;
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              int v18 = sub_100055404(1);
              if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
                v18 &= ~1u;
              }
              if (v18)
              {
                unsigned int v19 = v17;
                unsigned int v20 = sub_10008A720(v7, @"UserPersonaType", (id)0xFFFFFFFFLL);
                int v27 = 67109120;
                unsigned int v28 = v20;
                uint64_t v21 = (char *)_os_log_send_and_compose_impl();

                if (v21) {
                  sub_100055434(v21);
                }
              }
              else
              {
                uint64_t v21 = 0;
              }
              free(v21);
            }

            goto LABEL_25;
          }
        }
        else
        {
        }
        uint64_t v8 = 0;
        goto LABEL_28;
      }
    }
    else
    {
    }
    [v7 setObject:v5 forKeyedSubscript:@"UserPersonaBundleIDS"];
    unsigned int v9 = 0;
LABEL_25:
    uint64_t v8 = 1;
LABEL_28:
  }
  return v8;
}

uint64_t sub_10005A544(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    unsigned int v5 = sub_10008A720(v3, @"UserPersonaType", (id)0xFFFFFFFFLL);
    if (v5 == 4)
    {
      id v6 = &off_1000D93D8;
    }
    else
    {
      if (v5 != 3)
      {
        a1 = 0;
        goto LABEL_8;
      }
      id v6 = &off_1000D93F0;
    }
    self;
    id v7 = [v6 mutableCopy];
    a1 = sub_10005A28C(a1, v7, v4);
  }
LABEL_8:

  return a1;
}

uint64_t sub_10005A5F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v8 = v6;
    uint64_t v9 = (uint64_t)[v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v15;
      while (2)
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v8);
          }
          id v12 = [v5 objectForKeyedSubscript:*(void *)(*((void *)&v14 + 1) + 8 * i), (void)v14];

          if (!v12)
          {
            uint64_t v9 = 1;
            goto LABEL_12;
          }
        }
        uint64_t v9 = (uint64_t)[v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t sub_10005A72C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (a1)
  {
    if ((a3 - 3) > 2) {
      a1 = 0;
    }
    else {
      a1 = sub_10005A5F0(a1, v5, off_1000D57D8[a3 - 3]);
    }
  }

  return a1;
}

uint64_t sub_10005A79C(uint64_t result, signed int a2)
{
  if (result)
  {
    if a2 < 7 && ((0x6Du >> a2))
    {
      uint64_t v7 = qword_1000B55C8[a2];
      uint64_t v8 = dword_1000B5600[a2];
      return sub_10005A944(result, v8, v7);
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      id v2 = (id)qword_1000E4128;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v3 = sub_100055404(1);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v4 = v3;
        }
        else {
          unsigned int v4 = v3 & 0xFFFFFFFE;
        }
        if (v4)
        {
          id v5 = (const char *)_os_log_send_and_compose_impl();
          id v6 = (char *)v5;
          if (v5) {
            sub_100055434(v5);
          }
        }
        else
        {
          id v6 = 0;
        }
        free(v6);
      }

      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_10005A944(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 0;
  }
  if (qword_1000E4130 != -1) {
    dispatch_once(&qword_1000E4130, &stru_1000D57B8);
  }
  id v6 = &qword_1000E4000;
  uint64_t v7 = (id)qword_1000E4128;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v8 = sub_100055404(1);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      v8 &= ~1u;
    }
    if (v8)
    {
      id v9 = *(id *)(a1 + 32);
      uint64_t v10 = v7;
      id v11 = [v9 userPersonas];
      [v11 count];
      id v12 = (char *)_os_log_send_and_compose_impl();

      if (v12) {
        sub_100055434(v12);
      }
      id v6 = &qword_1000E4000;
    }
    else
    {
      id v12 = 0;
    }
    free(v12);
  }

  if (a3 + (int)a2 <= a2)
  {
LABEL_16:
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    char v13 = (id)v6[37];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        long long v16 = (const char *)_os_log_send_and_compose_impl();
        long long v17 = (char *)v16;
        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {
        long long v17 = 0;
      }
      free(v17);
    }
    a2 = 0xFFFFFFFFLL;
  }
  else
  {
    while (sub_10005ACC0(a1, a2))
    {
      a2 = (a2 + 1);
      if (!--a3) {
        goto LABEL_16;
      }
    }
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    char v13 = (id)v6[37];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v18 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        unsigned int v19 = v18;
      }
      else {
        unsigned int v19 = v18 & 0xFFFFFFFE;
      }
      if (v19)
      {
        unsigned int v20 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v21 = (char *)v20;
        if (v20) {
          sub_100055434(v20);
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      free(v21);
    }
  }

  return a2;
}

uint64_t sub_10005ACC0(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  unsigned int v4 = [*(id *)(a1 + 32) userPersonas];
  id v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v16;
    while (2)
    {
      int v8 = 0;
      do
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v15 + 1) + 8 * (void)v8);
        id v10 = *(id *)(a1 + 32);
        id v11 = [v10 userPersonas];
        id v12 = [v11 objectForKeyedSubscript:v9];

        LOBYTE(v10) = sub_10005AE2C(a1, a2, v12);
        if (v10)
        {
          uint64_t v13 = 1;
          goto LABEL_12;
        }
        int v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
  uint64_t v13 = 0;
LABEL_12:

  return v13;
}

uint64_t sub_10005AE2C(uint64_t a1, int a2, void *a3)
{
  id v4 = a3;
  if (a1)
  {
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    id v5 = &qword_1000E4000;
    id v6 = (id)qword_1000E4128;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v48 = 0;
      unsigned int v7 = sub_100055404(1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
        unsigned int v8 = v7;
      }
      else {
        unsigned int v8 = v7 & 0xFFFFFFFE;
      }
      if (v8)
      {
        uint64_t v9 = v6;
        *(_DWORD *)unsigned int v45 = 134218240;
        *(void *)&v45[4] = [v4 count];
        __int16 v46 = 1024;
        int v47 = a2;
        id v10 = (char *)_os_log_send_and_compose_impl();

        if (v10) {
          sub_100055434(v10);
        }
      }
      else
      {
        id v10 = 0;
      }
      id v5 = &qword_1000E4000;
      free(v10);
    }

    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id v38 = v4;
    id v11 = v4;
    id v12 = [v11 countByEnumeratingWithState:&v40 objects:v44 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v41;
      while (2)
      {
        long long v15 = 0;
        do
        {
          if (*(void *)v41 != v14) {
            objc_enumerationMutation(v11);
          }
          long long v16 = *(void **)(*((void *)&v40 + 1) + 8 * (void)v15);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            long long v17 = [v16 objectForKeyedSubscript:@"UserPersonaID"];
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              if ([v17 unsignedIntValue] == a2)
              {
                if (qword_1000E4130 != -1) {
                  dispatch_once(&qword_1000E4130, &stru_1000D57B8);
                }
                uint64_t v31 = (id)v5[37];
                if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
                {
                  *(void *)unsigned int v45 = 0;
                  unsigned int v32 = sub_100055404(1);
                  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
                    unsigned int v33 = v32;
                  }
                  else {
                    unsigned int v33 = v32 & 0xFFFFFFFE;
                  }
                  if (v33)
                  {
                    LODWORD(v48) = 67109120;
                    HIDWORD(v48) = a2;
                    uint64_t v34 = (const char *)_os_log_send_and_compose_impl();
                    uint64_t v35 = (char *)v34;
                    if (v34) {
                      sub_100055434(v34);
                    }
                  }
                  else
                  {
                    uint64_t v35 = 0;
                  }
                  free(v35);
                }

                uint64_t v36 = 1;
                goto LABEL_69;
              }
            }
            else
            {
              if (qword_1000E4130 != -1) {
                dispatch_once(&qword_1000E4130, &stru_1000D57B8);
              }
              unsigned int v22 = (id)v5[37];
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                *(void *)unsigned int v45 = 0;
                unsigned int v23 = sub_100055404(1);
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
                  unsigned int v24 = v23;
                }
                else {
                  unsigned int v24 = v23 & 0xFFFFFFFE;
                }
                if (v24)
                {
                  LOWORD(v48) = 0;
                  long long v25 = (const char *)_os_log_send_and_compose_impl();
                  long long v26 = (char *)v25;
                  if (v25) {
                    sub_100055434(v25);
                  }
                }
                else
                {
                  long long v26 = 0;
                }
                free(v26);
                id v5 = &qword_1000E4000;
              }
            }
          }
          else
          {
            if (qword_1000E4130 != -1) {
              dispatch_once(&qword_1000E4130, &stru_1000D57B8);
            }
            long long v17 = (id)v5[37];
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
            {
              *(void *)unsigned int v45 = 0;
              unsigned int v18 = sub_100055404(1);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
                unsigned int v19 = v18;
              }
              else {
                unsigned int v19 = v18 & 0xFFFFFFFE;
              }
              if (v19)
              {
                LOWORD(v48) = 0;
                unsigned int v20 = (const char *)_os_log_send_and_compose_impl();
                uint64_t v21 = (char *)v20;
                if (v20) {
                  sub_100055434(v20);
                }
              }
              else
              {
                uint64_t v21 = 0;
              }
              id v5 = &qword_1000E4000;
              free(v21);
            }
          }

          long long v15 = (char *)v15 + 1;
        }
        while (v13 != v15);
        id v13 = [v11 countByEnumeratingWithState:&v40 objects:v44 count:16];
        if (v13) {
          continue;
        }
        break;
      }
    }

    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    id v11 = (id)v5[37];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(void *)unsigned int v45 = 0;
      unsigned int v27 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
        unsigned int v28 = v27;
      }
      else {
        unsigned int v28 = v27 & 0xFFFFFFFE;
      }
      if (v28)
      {
        LODWORD(v48) = 67109120;
        HIDWORD(v48) = a2;
        uint64_t v29 = (const char *)_os_log_send_and_compose_impl();
        __int16 v30 = (char *)v29;
        if (v29) {
          sub_100055434(v29);
        }
      }
      else
      {
        __int16 v30 = 0;
      }
      free(v30);
      uint64_t v36 = 0;
    }
    else
    {
      uint64_t v36 = 0;
LABEL_69:
      id v4 = v38;
    }
  }
  else
  {
    uint64_t v36 = 0;
  }

  return v36;
}

id sub_10005B430(id a1, unsigned int a2, void *a3)
{
  id v4 = a3;
  if (a1)
  {
    id v5 = &qword_1000E4000;
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    id v6 = &qword_1000E4000;
    unsigned int v7 = (id)qword_1000E4128;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v47 = 0;
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9)
      {
        int v49 = 67109120;
        unsigned int v50 = a2;
        id v10 = (const char *)_os_log_send_and_compose_impl();
        id v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
      }
      else
      {
        id v11 = 0;
      }
      free(v11);
      id v6 = &qword_1000E4000;
    }

    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v12 = v4;
    id v13 = [v12 countByEnumeratingWithState:&v43 objects:v48 count:16];
    if (v13)
    {
      id v14 = v13;
      id v40 = v4;
      uint64_t v15 = *(void *)v44;
      long long v16 = &AKSGetLastUser_ptr;
      uint64_t v41 = *(void *)v44;
      do
      {
        for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v44 != v15) {
            objc_enumerationMutation(v12);
          }
          unsigned int v18 = *(void **)(*((void *)&v43 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            unsigned int v19 = [v18 objectForKeyedSubscript:@"UserPersonaType"];
            objc_opt_class();
            char isKindOfClass = objc_opt_isKindOfClass();
            uint64_t v21 = v5[38];
            if (isKindOfClass)
            {
              if (v21 != -1) {
                dispatch_once(&qword_1000E4130, &stru_1000D57B8);
              }
              unsigned int v22 = (id)v6[37];
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v23 = v16;
                id v24 = v12;
                uint64_t v47 = 0;
                int v25 = sub_100055404(1);
                if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
                  v25 &= ~1u;
                }
                if (v25)
                {
                  long long v26 = v5;
                  unsigned int v27 = v22;
                  unsigned int v28 = [v19 unsignedIntValue];
                  int v49 = 67109120;
                  unsigned int v50 = v28;
                  uint64_t v29 = (char *)_os_log_send_and_compose_impl();

                  if (v29) {
                    sub_100055434(v29);
                  }
                  id v5 = v26;
                  id v6 = &qword_1000E4000;
                }
                else
                {
                  uint64_t v29 = 0;
                }
                free(v29);
                id v12 = v24;
                long long v16 = v23;
                uint64_t v15 = v41;
              }

              if ([v19 unsignedIntValue] == a2)
              {
                a1 = v18;

                goto LABEL_59;
              }
            }
            else
            {
              if (v21 != -1) {
                dispatch_once(&qword_1000E4130, &stru_1000D57B8);
              }
              uint64_t v34 = (id)v6[37];
              if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v47 = 0;
                unsigned int v35 = sub_100055404(1);
                if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
                  unsigned int v36 = v35;
                }
                else {
                  unsigned int v36 = v35 & 0xFFFFFFFE;
                }
                if (v36)
                {
                  LOWORD(v49) = 0;
                  int v37 = (const char *)_os_log_send_and_compose_impl();
                  id v38 = (char *)v37;
                  if (v37) {
                    sub_100055434(v37);
                  }
                }
                else
                {
                  id v38 = 0;
                }
                free(v38);
              }
            }
          }
          else
          {
            if (v5[38] != -1) {
              dispatch_once(&qword_1000E4130, &stru_1000D57B8);
            }
            unsigned int v19 = (id)v6[37];
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v47 = 0;
              unsigned int v30 = sub_100055404(1);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
                unsigned int v31 = v30;
              }
              else {
                unsigned int v31 = v30 & 0xFFFFFFFE;
              }
              if (v31)
              {
                LOWORD(v49) = 0;
                unsigned int v32 = (const char *)_os_log_send_and_compose_impl();
                unsigned int v33 = (char *)v32;
                if (v32) {
                  sub_100055434(v32);
                }
              }
              else
              {
                unsigned int v33 = 0;
              }
              free(v33);
            }
          }
        }
        id v14 = [v12 countByEnumeratingWithState:&v43 objects:v48 count:16];
      }
      while (v14);
      a1 = 0;
LABEL_59:
      id v4 = v40;
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

id sub_10005B968(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = v6;
  id v8 = 0;
  if (a1 && v5)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v9 = v6;
    id v8 = [v9 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v8)
    {
      id v27 = v5;
      uint64_t v10 = *(void *)v31;
      do
      {
        id v11 = 0;
        do
        {
          if (*(void *)v31 != v10) {
            objc_enumerationMutation(v9);
          }
          id v12 = *(void **)(*((void *)&v30 + 1) + 8 * (void)v11);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v13 = [v12 objectForKeyedSubscript:@"UserPersonaUniqueString"];
            objc_opt_class();
            uint64_t v29 = v13;
            if (objc_opt_isKindOfClass())
            {
              id v14 = sub_10008A8B8(v12, @"UserPersonaUniqueString");
              unsigned __int8 v28 = [v14 isEqualToString:v27];

              if (v28)
              {
                id v8 = v12;

                goto LABEL_38;
              }
            }
            else
            {
              if (qword_1000E4130 != -1) {
                dispatch_once(&qword_1000E4130, &stru_1000D57B8);
              }
              uint64_t v21 = (id)qword_1000E4128;
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v22 = sub_100055404(1);
                if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
                  unsigned int v23 = v22;
                }
                else {
                  unsigned int v23 = v22 & 0xFFFFFFFE;
                }
                if (v23)
                {
                  id v24 = (const char *)_os_log_send_and_compose_impl();
                  int v25 = (char *)v24;
                  if (v24) {
                    sub_100055434(v24);
                  }
                }
                else
                {
                  int v25 = 0;
                }
                free(v25);
              }
            }
            uint64_t v15 = v29;
          }
          else
          {
            if (qword_1000E4130 != -1) {
              dispatch_once(&qword_1000E4130, &stru_1000D57B8);
            }
            uint64_t v15 = (id)qword_1000E4128;
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            {
              unsigned int v16 = sub_100055404(1);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
                unsigned int v17 = v16;
              }
              else {
                unsigned int v17 = v16 & 0xFFFFFFFE;
              }
              if (v17)
              {
                unsigned int v18 = v15;
                unsigned int v19 = (const char *)_os_log_send_and_compose_impl();
                unsigned int v20 = (char *)v19;
                if (v19) {
                  sub_100055434(v19);
                }
              }
              else
              {
                unsigned int v18 = v15;
                unsigned int v20 = 0;
              }
              free(v20);
              uint64_t v15 = v18;
            }
          }

          id v11 = (char *)v11 + 1;
        }
        while (v8 != v11);
        id v8 = [v9 countByEnumeratingWithState:&v30 objects:v34 count:16];
      }
      while (v8);
LABEL_38:
      id v5 = v27;
    }
  }

  return v8;
}

id sub_10005BCF0(id result, uint64_t a2, void *a3)
{
  if (result)
  {
    if (a2) {
      return [a3 addObject:a2];
    }
  }
  return result;
}

void sub_10005BD08(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (!a1) {
    goto LABEL_17;
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (!v8) {
    goto LABEL_16;
  }
  id v9 = v8;
  uint64_t v15 = v6;
  uint64_t v10 = *(void *)v17;
LABEL_4:
  uint64_t v11 = 0;
  while (1)
  {
    if (*(void *)v17 != v10) {
      objc_enumerationMutation(v7);
    }
    id v12 = *(void **)(*((void *)&v16 + 1) + 8 * v11);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_11;
    }
    uint64_t v13 = [v12 objectForKeyedSubscript:@"UserPersonaID"];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [v13 unsignedIntValue] == a2) {
      break;
    }

LABEL_11:
    if (v9 == (id)++v11)
    {
      id v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v9) {
        goto LABEL_4;
      }
      id v6 = v15;
      goto LABEL_16;
    }
  }
  id v14 = v12;

  id v6 = v15;
  if (!v14) {
    goto LABEL_17;
  }
  [v7 removeObjectIdenticalTo:v14];
  id v7 = v14;
LABEL_16:

LABEL_17:
}

uint64_t sub_10005BEB0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (!a1)
  {
    uint64_t v14 = 0;
    goto LABEL_30;
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v23 objects:v29 count:16];
  if (!v8)
  {
    uint64_t v14 = 0;
    id v15 = v7;
    goto LABEL_29;
  }
  id v9 = v8;
  unsigned int v22 = v6;
  uint64_t v10 = *(void *)v24;
LABEL_4:
  uint64_t v11 = 0;
  while (1)
  {
    if (*(void *)v24 != v10) {
      objc_enumerationMutation(v7);
    }
    id v12 = *(void **)(*((void *)&v23 + 1) + 8 * v11);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_11;
    }
    uint64_t v13 = [v12 objectForKeyedSubscript:@"UserPersonaType"];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [v13 unsignedIntValue] == a2) {
      break;
    }

LABEL_11:
    if (v9 == (id)++v11)
    {
      id v9 = [v7 countByEnumeratingWithState:&v23 objects:v29 count:16];
      if (v9) {
        goto LABEL_4;
      }
      uint64_t v14 = 0;
      id v15 = v7;
      id v6 = v22;
      goto LABEL_29;
    }
  }
  id v15 = v12;

  if (!v15)
  {
    uint64_t v14 = 0;
    id v6 = v22;
    goto LABEL_30;
  }
  id v6 = v22;
  if (qword_1000E4130 != -1) {
    dispatch_once(&qword_1000E4130, &stru_1000D57B8);
  }
  long long v16 = (id)qword_1000E4128;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v17 = sub_100055404(1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = v17 & 0xFFFFFFFE;
    }
    if (v18)
    {
      int v27 = 67109120;
      int v28 = a2;
      long long v19 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v20 = (char *)v19;
      if (v19) {
        sub_100055434(v19);
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
    free(v20);
  }

  [v7 removeObjectIdenticalTo:v15];
  uint64_t v14 = 1;
LABEL_29:

LABEL_30:
  return v14;
}

id sub_10005C160(uint64_t a1, void *a2)
{
  id v2 = 0;
  if (a1 && a2)
  {
    unsigned int v3 = *(void **)(a1 + 32);
    id v4 = a2;
    id v5 = [v3 userPersonas];
    id v2 = [v5 objectForKeyedSubscript:v4];
  }

  return v2;
}

id sub_10005C1D8(uint64_t a1, void *a2, _DWORD *a3)
{
  if (a1)
  {
    if (a3) {
      *a3 = 0;
    }
    id v4 = sub_10005C160(a1, a2);
    if ([v4 count])
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      id v5 = (id)qword_1000E4128;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v6 = sub_100055404(1);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
          unsigned int v7 = v6;
        }
        else {
          unsigned int v7 = v6 & 0xFFFFFFFE;
        }
        if (v7)
        {
          id v8 = (const char *)_os_log_send_and_compose_impl();
          id v9 = (char *)v8;
          if (v8) {
            sub_100055434(v8);
          }
        }
        else
        {
          id v9 = 0;
        }
        free(v9);
      }

      id v15 = v4;
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      uint64_t v10 = (id)qword_1000E4128;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v11 = sub_100055404(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
          unsigned int v12 = v11;
        }
        else {
          unsigned int v12 = v11 & 0xFFFFFFFE;
        }
        if (v12)
        {
          uint64_t v13 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v14 = (char *)v13;
          if (v13) {
            sub_100055434(v13);
          }
        }
        else
        {
          uint64_t v14 = 0;
        }
        free(v14);
      }

      id v15 = 0;
      if (a3) {
        *a3 = 2;
      }
    }
  }
  else
  {
    id v15 = 0;
  }

  return v15;
}

id *sub_10005C438(id *a1, _DWORD *a2)
{
  id v2 = a1;
  if (a1)
  {
    if (a2) {
      *a2 = 0;
    }
    id v4 = +[NSMutableArray array];
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v5 = [v2[4] userPersonas];
    id v6 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v26;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v26 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v25 + 1) + 8 * i);
          id v11 = v2[4];
          unsigned int v12 = [v11 userPersonas];
          uint64_t v13 = [v12 objectForKeyedSubscript:v10];
          [v4 addObjectsFromArray:v13];
        }
        id v7 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
      }
      while (v7);
    }

    if ([v4 count])
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      uint64_t v14 = (id)qword_1000E4128;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v15 = sub_100055404(1);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          unsigned int v16 = v15;
        }
        else {
          unsigned int v16 = v15 & 0xFFFFFFFE;
        }
        if (v16)
        {
          LODWORD(v29[0]) = 138412290;
          *(void *)((char *)v29 + 4) = v4;
          unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v18 = (char *)v17;
          if (v17) {
            sub_100055434(v17);
          }
        }
        else
        {
          unsigned int v18 = 0;
        }
        free(v18);
      }

      id v2 = v4;
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      long long v19 = (id)qword_1000E4128;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        v29[0] = 0;
        unsigned int v20 = sub_100055404(1);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
          unsigned int v21 = v20;
        }
        else {
          unsigned int v21 = v20 & 0xFFFFFFFE;
        }
        if (v21)
        {
          unsigned int v22 = (const char *)_os_log_send_and_compose_impl();
          long long v23 = (char *)v22;
          if (v22) {
            sub_100055434(v22);
          }
        }
        else
        {
          long long v23 = 0;
        }
        free(v23);
      }

      id v2 = 0;
      if (a2) {
        *a2 = 2;
      }
    }
  }

  return v2;
}

id sub_10005C77C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = sub_10005C160((uint64_t)a1, a3);
    uint64_t v7 = [v5 objectForKeyedSubscript:@"UserPersonaUniqueString"];
    if (v7
      && (uint64_t v8 = (void *)v7,
          [v5 objectForKeyedSubscript:@"UserPersonaUniqueString"],
          id v9 = objc_claimAutoreleasedReturnValue(),
          objc_opt_class(),
          char v10 = objc_opt_isKindOfClass(),
          v9,
          v8,
          (v10 & 1) != 0))
    {
      id v11 = [v5 objectForKeyedSubscript:@"UserPersonaUniqueString"];
      uint64_t v12 = sub_10005B968((uint64_t)a1, v11, v6);
    }
    else
    {
      uint64_t v13 = [v5 objectForKeyedSubscript:@"UserPersonaType"];
      if (!v13
        || (uint64_t v14 = (void *)v13,
            [v5 objectForKeyedSubscript:@"UserPersonaType"],
            unsigned int v15 = objc_claimAutoreleasedReturnValue(),
            objc_opt_class(),
            char isKindOfClass = objc_opt_isKindOfClass(),
            v15,
            v14,
            (isKindOfClass & 1) == 0))
      {
        a1 = 0;
        goto LABEL_10;
      }
      id v11 = [v5 objectForKeyedSubscript:@"UserPersonaType"];
      uint64_t v12 = sub_10005B430(a1, [v11 unsignedLongValue], v6);
    }
    a1 = (void *)v12;

LABEL_10:
  }

  return a1;
}

id sub_10005C914(void *a1, void *a2, void *a3, _DWORD *a4)
{
  id v7 = a2;
  if (a1)
  {
    if (a4) {
      *a4 = 0;
    }
    uint64_t v8 = sub_10005C77C(a1, v7, a3);
    if (v8)
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      id v9 = (id)qword_1000E4128;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v10 = sub_100055404(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
          unsigned int v11 = v10;
        }
        else {
          unsigned int v11 = v10 & 0xFFFFFFFE;
        }
        if (v11)
        {
          uint64_t v12 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v13 = (char *)v12;
          if (v12) {
            sub_100055434(v12);
          }
        }
        else
        {
          uint64_t v13 = 0;
        }
        free(v13);
      }

      id v19 = v8;
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      uint64_t v14 = (id)qword_1000E4128;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v15 = sub_100055404(1);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          unsigned int v16 = v15;
        }
        else {
          unsigned int v16 = v15 & 0xFFFFFFFE;
        }
        if (v16)
        {
          unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v18 = (char *)v17;
          if (v17) {
            sub_100055434(v17);
          }
        }
        else
        {
          unsigned int v18 = 0;
        }
        free(v18);
      }

      if (a4) {
        *a4 = 2;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

id sub_10005CB94(void *a1, void *a2, void *a3, _DWORD *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    if (a4) {
      *a4 = 0;
    }
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    id v9 = (id)qword_1000E4128;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v10 = sub_100055404(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        uint64_t v12 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v13 = (char *)v12;
        if (v12) {
          sub_100055434(v12);
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
      free(v13);
    }

    uint64_t v14 = sub_10005C77C(a1, v7, v8);
    if (!v14)
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v20 = (id)qword_1000E4128;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v21 = sub_100055404(1);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          unsigned int v22 = v21;
        }
        else {
          unsigned int v22 = v21 & 0xFFFFFFFE;
        }
        if (v22)
        {
          long long v23 = (const char *)_os_log_send_and_compose_impl();
          long long v24 = (char *)v23;
          if (v23) {
            sub_100055434(v23);
          }
        }
        else
        {
          long long v24 = 0;
        }
        free(v24);
      }

      uint64_t v41 = 0;
      if (a4) {
        *a4 = 2;
      }
      goto LABEL_81;
    }
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    unsigned int v15 = (id)qword_1000E4128;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v16 = sub_100055404(1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
        unsigned int v18 = (const char *)_os_log_send_and_compose_impl();
        id v19 = (char *)v18;
        if (v18) {
          sub_100055434(v18);
        }
      }
      else
      {
        id v19 = 0;
      }
      free(v19);
    }

    long long v25 = [v14 objectForKeyedSubscript:@"UserPersonaBundleIDS"];
    if (v25)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        unsigned int v36 = (id)qword_1000E4128;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v37 = sub_100055404(1);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v38 = v37;
          }
          else {
            unsigned int v38 = v37 & 0xFFFFFFFE;
          }
          if (v38)
          {
            CFDictionaryRef v39 = (const char *)_os_log_send_and_compose_impl();
            id v40 = (char *)v39;
            if (v39) {
              sub_100055434(v39);
            }
          }
          else
          {
            id v40 = 0;
          }
          free(v40);
        }

        uint64_t v41 = 0;
        if (a4) {
          *a4 = 22;
        }
        goto LABEL_80;
      }
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      long long v26 = (id)qword_1000E4128;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v27 = sub_100055404(1);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
          unsigned int v28 = v27;
        }
        else {
          unsigned int v28 = v27 & 0xFFFFFFFE;
        }
        if (v28)
        {
          uint64_t v29 = (const char *)_os_log_send_and_compose_impl();
          long long v30 = (char *)v29;
          if (v29) {
            sub_100055434(v29);
          }
        }
        else
        {
          long long v30 = 0;
        }
        free(v30);
      }

      id v42 = v25;
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      long long v31 = (id)qword_1000E4128;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v32 = sub_100055404(1);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
          unsigned int v33 = v32;
        }
        else {
          unsigned int v33 = v32 & 0xFFFFFFFE;
        }
        if (v33)
        {
          uint64_t v34 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v35 = (char *)v34;
          if (v34) {
            sub_100055434(v34);
          }
        }
        else
        {
          unsigned int v35 = 0;
        }
        free(v35);
      }

      id v42 = +[NSArray array];
    }
    uint64_t v41 = v42;
LABEL_80:

LABEL_81:
    goto LABEL_82;
  }
  uint64_t v41 = 0;
LABEL_82:

  return v41;
}

void sub_10005D1C0(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      id v5 = [a1[4] userPersonas];
      id v6 = [v5 objectForKeyedSubscript:v4];

      if (!v6)
      {
        id v6 = +[NSMutableArray array];
        id v7 = [a1[4] userPersonas];
        [v7 setObject:v6 forKeyedSubscript:v4];
      }
      id v8 = sub_10005D714(a1, v6, 0, v4);
      if (!v8)
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        id v9 = (id)qword_1000E4128;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v10 = sub_100055404(1);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v11 = v10;
          }
          else {
            unsigned int v11 = v10 & 0xFFFFFFFE;
          }
          if (v11)
          {
            uint64_t v12 = (const char *)_os_log_send_and_compose_impl();
            uint64_t v13 = (char *)v12;
            if (v12) {
              sub_100055434(v12);
            }
          }
          else
          {
            uint64_t v13 = 0;
          }
          free(v13);
        }
      }
      unsigned int v18 = sub_10005D714(a1, v6, 3, v4);

      if (!v18)
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        id v19 = (id)qword_1000E4128;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v20 = sub_100055404(1);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v21 = v20;
          }
          else {
            unsigned int v21 = v20 & 0xFFFFFFFE;
          }
          if (v21)
          {
            unsigned int v22 = (const char *)_os_log_send_and_compose_impl();
            long long v23 = (char *)v22;
            if (v22) {
              sub_100055434(v22);
            }
          }
          else
          {
            long long v23 = 0;
          }
          free(v23);
        }
      }
      long long v24 = sub_10005D714(a1, v6, 5, v4);

      if (!v24)
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        long long v25 = (id)qword_1000E4128;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v26 = sub_100055404(1);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v27 = v26;
          }
          else {
            unsigned int v27 = v26 & 0xFFFFFFFE;
          }
          if (v27)
          {
            unsigned int v28 = (const char *)_os_log_send_and_compose_impl();
            uint64_t v29 = (char *)v28;
            if (v28) {
              sub_100055434(v28);
            }
          }
          else
          {
            uint64_t v29 = 0;
          }
          free(v29);
        }
      }
      long long v30 = sub_10005D714(a1, v6, 4, v4);

      if (!v30)
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        long long v31 = (id)qword_1000E4128;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v32 = sub_100055404(1);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v33 = v32;
          }
          else {
            unsigned int v33 = v32 & 0xFFFFFFFE;
          }
          if (v33)
          {
            uint64_t v34 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v35 = (char *)v34;
            if (v34) {
              sub_100055434(v34);
            }
          }
          else
          {
            unsigned int v35 = 0;
          }
          free(v35);
        }
      }
      sub_10005DBE8((uint64_t)a1);
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      id v6 = (id)qword_1000E4128;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v14 = sub_100055404(1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v15 = v14;
        }
        else {
          unsigned int v15 = v14 & 0xFFFFFFFE;
        }
        if (v15)
        {
          unsigned int v16 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v17 = (char *)v16;
          if (v16) {
            sub_100055434(v16);
          }
        }
        else
        {
          unsigned int v17 = 0;
        }
        free(v17);
      }
    }
  }
}

id *sub_10005D714(id *a1, void *a2, uint64_t a3, void *a4)
{
  id v4 = a1;
  if (a1)
  {
    CFStringRef v33 = @"UserPersonaType";
    id v7 = a4;
    id v8 = a2;
    id v9 = +[NSNumber numberWithUnsignedInt:a3];
    uint64_t v34 = v9;
    unsigned int v10 = +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
    id v11 = [v10 mutableCopy];

    [v11 setObject:v7 forKeyedSubscript:@"UserPersonaUserODUUID"];
    unsigned int v30 = 0;
    sub_10005DC38(v4, v8, v11, 0, 0, 1, &v30);
    id v4 = (id *)objc_claimAutoreleasedReturnValue();

    if (!v4)
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v15 = (id)qword_1000E4128;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v16 = sub_100055404(1);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v17 = v16;
        }
        else {
          unsigned int v17 = v16 & 0xFFFFFFFE;
        }
        if (v17)
        {
          int v31 = 67109120;
          unsigned int v32 = v30;
          unsigned int v18 = (const char *)_os_log_send_and_compose_impl();
          id v19 = (char *)v18;
          if (v18) {
            sub_100055434(v18);
          }
        }
        else
        {
          id v19 = 0;
        }
        free(v19);
      }

      goto LABEL_55;
    }
    switch(a3)
    {
      case 3:
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        uint64_t v12 = (id)qword_1000E4128;
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_51;
        }
        unsigned int v20 = sub_100055404(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v21 = v20;
        }
        else {
          unsigned int v21 = v20 & 0xFFFFFFFE;
        }
        if (!v21) {
          goto LABEL_49;
        }
        LOWORD(v31) = 0;
        break;
      case 5:
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        uint64_t v12 = (id)qword_1000E4128;
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_51;
        }
        unsigned int v22 = sub_100055404(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v23 = v22;
        }
        else {
          unsigned int v23 = v22 & 0xFFFFFFFE;
        }
        if (!v23) {
          goto LABEL_49;
        }
        LOWORD(v31) = 0;
        break;
      case 4:
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        uint64_t v12 = (id)qword_1000E4128;
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_51;
        }
        unsigned int v13 = sub_100055404(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v14 = v13;
        }
        else {
          unsigned int v14 = v13 & 0xFFFFFFFE;
        }
        if (v14)
        {
          LOWORD(v31) = 0;
          break;
        }
LABEL_49:
        unsigned int v27 = 0;
LABEL_50:
        free(v27);
LABEL_51:

        unsigned int v28 = v4;
LABEL_55:

        goto LABEL_56;
      default:
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        uint64_t v12 = (id)qword_1000E4128;
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_51;
        }
        unsigned int v24 = sub_100055404(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v25 = v24;
        }
        else {
          unsigned int v25 = v24 & 0xFFFFFFFE;
        }
        if (!v25) {
          goto LABEL_49;
        }
        LOWORD(v31) = 0;
        break;
    }
    unsigned int v26 = (const char *)_os_log_send_and_compose_impl();
    unsigned int v27 = (char *)v26;
    if (v26) {
      sub_100055434(v26);
    }
    goto LABEL_50;
  }
LABEL_56:

  return v4;
}

uint64_t sub_10005DBE8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    id v2 = sub_1000629B4(result);
    uint64_t v3 = sub_100062B84(v1, v2, 0);

    return v3;
  }
  return result;
}

NSObject *sub_10005DC38(id *a1, void *a2, void *a3, void *a4, int a5, char a6, unsigned int *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  uint64_t v305 = v13;
  if (a1)
  {
    unsigned int v16 = [v14 objectForKeyedSubscript:@"UserPersonaUserODUUID"];

    if (!v16)
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v24 = (id)qword_1000E4128;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)id v313 = 0;
        unsigned int v25 = sub_100055404(1);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v26 = v25;
        }
        else {
          unsigned int v26 = v25 & 0xFFFFFFFE;
        }
        if (v26)
        {
          LOWORD(v316[0]) = 0;
          unsigned int v27 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v28 = (char *)v27;
          if (v27) {
            sub_100055434(v27);
          }
        }
        else
        {
          unsigned int v28 = 0;
        }
        free(v28);
      }
      unsigned int v17 = 0;
      CFStringRef v33 = 0;
      uint64_t v34 = 0;
      unsigned int v35 = 22;
      goto LABEL_458;
    }
    unsigned int v17 = [v14 objectForKeyedSubscript:@"UserPersonaUserODUUID"];
    unsigned int v18 = [v14 objectForKeyedSubscript:@"UserPersonaType"];

    char v300 = a6;
    if (v18)
    {
      switch(sub_10008A698(v14, @"UserPersonaType", (id)0xFFFFFFFFLL))
      {
        case 2u:
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          id v19 = (id)qword_1000E4128;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            int v292 = a5;
            *(void *)id v313 = 0;
            unsigned int v20 = sub_100055404(1);
            unsigned int v21 = v19;
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v22 = v20;
            }
            else {
              unsigned int v22 = v20 & 0xFFFFFFFE;
            }
            if (v22)
            {
              LOWORD(v316[0]) = 0;
              LODWORD(v278) = 2;
              unsigned int v277 = v316;
              unsigned int v23 = (char *)_os_log_send_and_compose_impl();

              if (v23) {
                sub_100055434(v23);
              }
            }
            else
            {

              unsigned int v23 = 0;
            }
            id v13 = v305;
            free(v23);
            a5 = v292;
          }
          id v29 = v15;
          unsigned int v30 = a7;

          unsigned int v304 = sub_10005A944((uint64_t)a1, 2000, 1000);
          unsigned int v32 = 2;
          LODWORD(v18) = 1;
          CFStringRef v31 = @"Enterprise";
          goto LABEL_76;
        case 3u:
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          unsigned int v36 = (id)qword_1000E4128;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            int v293 = a5;
            *(void *)id v313 = 0;
            unsigned int v37 = sub_100055404(1);
            unsigned int v38 = v36;
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v39 = v37;
            }
            else {
              unsigned int v39 = v37 & 0xFFFFFFFE;
            }
            if (v39)
            {
              LOWORD(v316[0]) = 0;
              LODWORD(v278) = 2;
              unsigned int v277 = v316;
              id v40 = (char *)_os_log_send_and_compose_impl();

              if (v40) {
                sub_100055434(v40);
              }
            }
            else
            {

              id v40 = 0;
            }
            id v13 = v305;
            free(v40);
            a5 = v293;
          }
          id v29 = v15;
          unsigned int v30 = a7;

          unsigned int v304 = sub_10005A944((uint64_t)a1, 99, 100);
          LODWORD(v18) = 0;
          unsigned int v32 = 3;
          CFStringRef v31 = @"System";
          goto LABEL_76;
        case 4u:
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          uint64_t v41 = (id)qword_1000E4128;
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          {
            int v294 = a5;
            *(void *)id v313 = 0;
            unsigned int v42 = sub_100055404(1);
            long long v43 = v41;
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v44 = v42;
            }
            else {
              unsigned int v44 = v42 & 0xFFFFFFFE;
            }
            if (v44)
            {
              LOWORD(v316[0]) = 0;
              LODWORD(v278) = 2;
              unsigned int v277 = v316;
              long long v45 = (char *)_os_log_send_and_compose_impl();

              if (v45) {
                sub_100055434(v45);
              }
            }
            else
            {

              long long v45 = 0;
            }
            id v13 = v305;
            free(v45);
            a5 = v294;
          }
          id v29 = v15;
          unsigned int v30 = a7;

          LODWORD(v18) = 0;
          unsigned int v32 = 4;
          unsigned int v304 = 1000;
          CFStringRef v31 = @"Universal";
          goto LABEL_76;
        case 5u:
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          long long v46 = (id)qword_1000E4128;
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            int v295 = a5;
            *(void *)id v313 = 0;
            unsigned int v47 = sub_100055404(1);
            uint64_t v48 = v46;
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v49 = v47;
            }
            else {
              unsigned int v49 = v47 & 0xFFFFFFFE;
            }
            if (v49)
            {
              LOWORD(v316[0]) = 0;
              LODWORD(v278) = 2;
              unsigned int v277 = v316;
              unsigned int v50 = (char *)_os_log_send_and_compose_impl();

              if (v50) {
                sub_100055434(v50);
              }
            }
            else
            {

              unsigned int v50 = 0;
            }
            id v13 = v305;
            free(v50);
            a5 = v295;
          }
          id v29 = v15;
          unsigned int v30 = a7;

          unsigned int v304 = sub_10005A944((uint64_t)a1, 199, 100);
          LODWORD(v18) = 0;
          unsigned int v32 = 5;
          CFStringRef v31 = @"Default";
          goto LABEL_76;
        case 6u:
          id v301 = v15;
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          unsigned int v51 = (id)qword_1000E4128;
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            int v52 = a5;
            *(void *)id v313 = 0;
            unsigned int v53 = sub_100055404(1);
            CFDateRef v54 = v51;
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v55 = v53;
            }
            else {
              unsigned int v55 = v53 & 0xFFFFFFFE;
            }
            if (v55)
            {
              LOWORD(v316[0]) = 0;
              LODWORD(v278) = 2;
              unsigned int v277 = v316;
              unsigned int v56 = (char *)_os_log_send_and_compose_impl();

              if (v56) {
                sub_100055434(v56);
              }
            }
            else
            {

              unsigned int v56 = 0;
            }
            free(v56);
            a5 = v52;
          }
          unsigned int v30 = a7;

          unsigned int v304 = sub_10005A944((uint64_t)a1, 3000, 1000);
          unsigned int v302 = 6;
          CFStringRef v31 = @"Guest";
          goto LABEL_106;
        default:
          id v29 = v15;
          unsigned int v30 = a7;
          unsigned int v304 = sub_10005A944((uint64_t)a1, 1000, 1000);
          LODWORD(v18) = 0;
          unsigned int v32 = 0;
          CFStringRef v31 = @"Personal";
          goto LABEL_76;
      }
    }
    id v29 = v15;
    unsigned int v30 = a7;
    CFStringRef v31 = 0;
    unsigned int v32 = 0;
    unsigned int v304 = 1000;
LABEL_76:
    uint64_t v57 = sub_10005B430(a1, v32, v13);
    if (v57)
    {
      unsigned int v24 = v57;
      uint64_t v303 = v17;
      a7 = v30;
      if (v18)
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        id v15 = v29;
        unsigned int v58 = (id)qword_1000E4128;
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)id v313 = 0;
          unsigned int v59 = sub_100055404(1);
          if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v60 = v59;
          }
          else {
            unsigned int v60 = v59 & 0xFFFFFFFE;
          }
          if (v60)
          {
            LODWORD(v316[0]) = 67109120;
            HIDWORD(v316[0]) = v304;
            id v61 = (const char *)_os_log_send_and_compose_impl();
            uint64_t v62 = (char *)v61;
            if (v61) {
              sub_100055434(v61);
            }
          }
          else
          {
            uint64_t v62 = 0;
          }
          free(v62);
        }
        uint64_t v34 = 0;
        CFStringRef v33 = 0;
        unsigned int v35 = 17;
      }
      else
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        id v15 = v29;
        unsigned int v58 = (id)qword_1000E4128;
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)id v313 = 0;
          unsigned int v63 = sub_100055404(1);
          if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v64 = v63;
          }
          else {
            unsigned int v64 = v63 & 0xFFFFFFFE;
          }
          if (v64)
          {
            LODWORD(v316[0]) = 67109120;
            HIDWORD(v316[0]) = v304;
            int v65 = (const char *)_os_log_send_and_compose_impl();
            id v66 = (char *)v65;
            if (v65) {
              sub_100055434(v65);
            }
          }
          else
          {
            id v66 = 0;
          }
          free(v66);
        }
        uint64_t v34 = 0;
        CFStringRef v33 = 0;
        unsigned int v35 = 16;
      }
      goto LABEL_456;
    }
    unsigned int v302 = v32;
    id v301 = v29;
LABEL_106:
    unsigned int v24 = +[NSMutableDictionary dictionary];
    int v67 = +[NSNumber numberWithUnsignedInt:v302];
    [v24 setObject:v67 forKeyedSubscript:@"UserPersonaType"];

    [v24 setObject:v31 forKeyedSubscript:@"UserPersonaNickName"];
    [v24 setObject:v17 forKeyedSubscript:@"UserPersonaUserODUUID"];
    if (((1 << v302) & 0x45) == 0)
    {
      if (((1 << v302) & 0x28) != 0)
      {
        unsigned int v288 = v30;
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        unsigned int v68 = (id)qword_1000E4128;
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)id v313 = 0;
          unsigned int v69 = sub_100055404(1);
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v70 = v69;
          }
          else {
            unsigned int v70 = v69 & 0xFFFFFFFE;
          }
          if (v70)
          {
            LODWORD(v316[0]) = 67109120;
            HIDWORD(v316[0]) = v304;
            unsigned int v71 = (const char *)_os_log_send_and_compose_impl();
            CFDataRef v72 = (char *)v71;
            if (v71) {
              sub_100055434(v71);
            }
          }
          else
          {
            CFDataRef v72 = 0;
          }
          free(v72);
        }
        uint64_t v303 = v17;

        uint64_t v98 = +[NSNumber numberWithUnsignedInt:v304];
        [v24 setObject:v98 forKeyedSubscript:@"UserPersonaID"];

        uint64_t v290 = +[NSUUID UUID];
        unsigned int v99 = [v290 UUIDString];
        [v24 setObject:v99 forKeyedSubscript:@"UserPersonaUniqueString"];
        id v15 = v301;
        if (v302 == 3)
        {
          sub_10005A20C((uint64_t)a1, v24);
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          unsigned int v100 = (id)qword_1000E4128;
          if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)id v313 = 0;
            unsigned int v101 = sub_100055404(1);
            if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v102 = v101;
            }
            else {
              unsigned int v102 = v101 & 0xFFFFFFFE;
            }
            if (v102)
            {
              LOWORD(v316[0]) = 0;
              unsigned int v103 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v104 = (char *)v103;
              if (v103) {
                sub_100055434(v103);
              }
            }
            else
            {
              unsigned int v104 = 0;
            }
            free(v104);
          }
        }
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        unsigned int v105 = (id)qword_1000E4128;
        if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)id v313 = 0;
          unsigned int v106 = sub_100055404(1);
          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v107 = v106;
          }
          else {
            unsigned int v107 = v106 & 0xFFFFFFFE;
          }
          if (v107)
          {
            LODWORD(v316[0]) = 67109120;
            HIDWORD(v316[0]) = v304;
            CFDataRef v108 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v109 = (char *)v108;
            if (v108) {
              sub_100055434(v108);
            }
          }
          else
          {
            unsigned int v109 = 0;
          }
          free(v109);
        }

        id v312 = 0;
        char v110 = sub_100060B7C((uint64_t)a1, v24, &v312);
        id v111 = v312;
        CFStringRef v33 = v111;
        if ((v110 & 1) == 0)
        {
          unsigned int v35 = [v111 code];
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          id v117 = (id)qword_1000E4128;
          if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
          {
            v316[0] = 0;
            unsigned int v118 = sub_100055404(1);
            if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v119 = v118;
            }
            else {
              unsigned int v119 = v118 & 0xFFFFFFFE;
            }
            if (v119)
            {
              unsigned int v120 = v117;
              unsigned int v121 = [v33 code];
              *(_DWORD *)id v313 = 67109376;
              *(_DWORD *)&v313[4] = v304;
              *(_WORD *)&v313[8] = 1024;
              *(_DWORD *)&v313[10] = v121;
              id v122 = (char *)_os_log_send_and_compose_impl();

              if (v122) {
                sub_100055434(v122);
              }
            }
            else
            {
              id v122 = 0;
            }
            free(v122);
          }

          uint64_t v34 = 0;
          a7 = v288;
          unsigned int v58 = v290;
          goto LABEL_456;
        }
        unsigned int v304 = sub_10008A720(v24, @"UserPersonaID", 0);
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        uint64_t v112 = (id)qword_1000E4128;
        if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)id v313 = 0;
          unsigned int v113 = sub_100055404(1);
          if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v114 = v113;
          }
          else {
            unsigned int v114 = v113 & 0xFFFFFFFE;
          }
          if (v114)
          {
            LODWORD(v316[0]) = 67109120;
            HIDWORD(v316[0]) = v304;
            unsigned int v115 = (const char *)_os_log_send_and_compose_impl();
            int v116 = (char *)v115;
            if (v115) {
              sub_100055434(v115);
            }
          }
          else
          {
            int v116 = 0;
          }
          free(v116);
        }

        uint64_t v34 = 0;
        id v81 = v305;
        unsigned int v17 = v303;
        unsigned int v82 = v290;
LABEL_328:

        if (v24) {
          [v81 addObject:v24];
        }
        if (a5)
        {
          if ((v300 & 1) == 0)
          {
            unsigned int v193 = v34;
            id v194 = a1[5];
            sub_1000589A0((uint64_t)v194);

            uint64_t v34 = v193;
          }
          sub_10005DBE8((uint64_t)a1);
        }
        if (v302 == 4)
        {
          if (qword_1000E4120 != -1) {
            dispatch_once(&qword_1000E4120, &stru_1000D5798);
          }
          int v195 = (id)qword_1000E4118;
          if (!os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_355;
          }
          id v196 = v34;
          v316[0] = 0;
          unsigned int v197 = sub_100055404(1);
          int v195 = v195;
          if (os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v198 = v197;
          }
          else {
            unsigned int v198 = v197 & 0xFFFFFFFE;
          }
          if (v198)
          {
            *(_DWORD *)id v313 = 138412290;
            *(void *)&v313[4] = v17;
            goto LABEL_351;
          }
        }
        else
        {
          if (qword_1000E4120 != -1) {
            dispatch_once(&qword_1000E4120, &stru_1000D5798);
          }
          int v195 = (id)qword_1000E4118;
          if (!os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_355;
          }
          id v196 = v34;
          v316[0] = 0;
          unsigned int v199 = sub_100055404(1);
          int v195 = v195;
          if (os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v200 = v199;
          }
          else {
            unsigned int v200 = v199 & 0xFFFFFFFE;
          }
          if (v200)
          {
            *(_DWORD *)id v313 = 67109378;
            *(_DWORD *)&v313[4] = v304;
            *(_WORD *)&v313[8] = 2112;
            *(void *)&v313[10] = v17;
LABEL_351:
            long long v201 = (char *)_os_log_send_and_compose_impl();

            if (v201) {
              sub_100055434(v201);
            }
            goto LABEL_354;
          }
        }

        long long v201 = 0;
LABEL_354:
        free(v201);
        uint64_t v34 = v196;
LABEL_355:

        sub_100061520((uint64_t)a1);
LABEL_472:
        unsigned int v253 = v24;

        goto LABEL_473;
      }
      if (v302 == 4)
      {
        sub_10005A18C((uint64_t)a1, v24);
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        id v81 = v305;
        unsigned int v82 = (id)qword_1000E4128;
        id v15 = v301;
        if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_176;
        }
        *(void *)id v313 = 0;
        unsigned int v83 = sub_100055404(1);
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v84 = v83;
        }
        else {
          unsigned int v84 = v83 & 0xFFFFFFFE;
        }
        if (v84)
        {
          LOWORD(v316[0]) = 0;
          goto LABEL_143;
        }
      }
      else
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        id v81 = v305;
        unsigned int v82 = (id)qword_1000E4128;
        id v15 = v301;
        if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_176;
        }
        *(void *)id v313 = 0;
        unsigned int v85 = sub_100055404(1);
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v86 = v85;
        }
        else {
          unsigned int v86 = v85 & 0xFFFFFFFE;
        }
        if (v86)
        {
          LODWORD(v316[0]) = 67109120;
          HIDWORD(v316[0]) = v302;
LABEL_143:
          unsigned int v87 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v88 = (char *)v87;
          if (v87) {
            sub_100055434(v87);
          }
          goto LABEL_175;
        }
      }
      unsigned int v88 = 0;
LABEL_175:
      free(v88);
LABEL_176:
      CFStringRef v33 = 0;
      uint64_t v34 = 0;
      goto LABEL_328;
    }
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    unsigned int v73 = (id)qword_1000E4128;
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      int v296 = a5;
      unsigned int v74 = a1;
      id v75 = v14;
      uint64_t v76 = v17;
      *(void *)id v313 = 0;
      unsigned int v77 = sub_100055404(1);
      unsigned int v78 = v73;
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v79 = v77;
      }
      else {
        unsigned int v79 = v77 & 0xFFFFFFFE;
      }
      if (v79)
      {
        LODWORD(v316[0]) = 67109120;
        HIDWORD(v316[0]) = v304;
        int v80 = (char *)_os_log_send_and_compose_impl();

        if (v80) {
          sub_100055434(v80);
        }
      }
      else
      {

        int v80 = 0;
      }
      unsigned int v17 = v76;
      free(v80);
      id v14 = v75;
      a1 = v74;
      a5 = v296;
    }
    int v289 = v30;

    unsigned int v89 = +[NSNumber numberWithUnsignedInt:v304];
    [v24 setObject:v89 forKeyedSubscript:@"UserPersonaID"];

    unsigned int v285 = +[NSUUID UUID];
    unsigned int v284 = [v285 UUIDString];
    -[NSObject setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:");
    uint64_t v303 = v17;
    if ((v302 | 4) == 6)
    {
      unsigned int v90 = +[NSUUID UUID];
      unsigned int v82 = v90;
      id v81 = v305;
      if (v90)
      {
        uint64_t v91 = [v90 UUIDString];
        id v15 = v301;
        if (v91)
        {
          [v24 setObject:v91 forKeyedSubscript:@"MKBUserSessionUUID"];
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          unsigned int v92 = (id)qword_1000E4128;
          if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
          {
            int v297 = a5;
            uint64_t v93 = v91;
            v316[0] = 0;
            unsigned int v94 = sub_100055404(1);
            int v95 = v92;
            if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v96 = v94;
            }
            else {
              unsigned int v96 = v94 & 0xFFFFFFFE;
            }
            if (v96)
            {
              *(_DWORD *)id v313 = 138412290;
              uint64_t v91 = v93;
              *(void *)&v313[4] = v93;
              id v97 = (char *)_os_log_send_and_compose_impl();

              if (v97) {
                sub_100055434(v97);
              }
            }
            else
            {

              id v97 = 0;
              uint64_t v91 = v93;
            }
            id v15 = v301;
            free(v97);
            a5 = v297;
            id v81 = v305;
          }
        }
        +[NSString stringWithFormat:@"%@/%@", @"/private/var/PersonaVolumes", v91];
        v124 = id v123 = (void *)v91;
        [v24 setObject:v124 forKeyedSubscript:@"MKBUserSessionHomeDir"];

        uint64_t v34 = v123;
LABEL_220:
        id v311 = 0;
        int v125 = sub_100060B7C((uint64_t)a1, v24, &v311);
        uint64_t v126 = v311;
        unsigned int v58 = v126;
        v291 = v82;
        unsigned int v287 = v34;
        if (v125)
        {
          unsigned int v304 = sub_10008A720(v24, @"UserPersonaID", 0);
          if ((v302 | 4) != 6)
          {
            if (qword_1000E4130 != -1) {
              dispatch_once(&qword_1000E4130, &stru_1000D57B8);
            }
            unsigned int v142 = (id)qword_1000E4128;
            uint64_t v283 = v142;
            if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)id v313 = 0;
              unsigned int v143 = sub_100055404(1);
              if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v144 = v143;
              }
              else {
                unsigned int v144 = v143 & 0xFFFFFFFE;
              }
              if (v144)
              {
                LOWORD(v316[0]) = 0;
                unsigned int v145 = (const char *)_os_log_send_and_compose_impl();
                unsigned int v146 = (char *)v145;
                if (v145) {
                  sub_100055434(v145);
                }
              }
              else
              {
                unsigned int v146 = 0;
              }
              free(v146);
              uint64_t v34 = v287;
            }
            goto LABEL_327;
          }
          int v282 = v125;
          unsigned int v127 = [v14 objectForKeyedSubscript:@"UserPersonaDisplayName"];
          [v24 setObject:v127 forKeyedSubscript:@"UserPersonaDisplayName"];

          uint64_t v128 = +[NSDate date];
          [v24 setObject:v128 forKeyedSubscript:@"MKBUserSessionCreateTimeStamp"];
          uint64_t v283 = (void *)v128;
          [v24 setObject:v128 forKeyedSubscript:@"MKBUserSessionLoginTimeStamp"];
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          unsigned int v129 = (id)qword_1000E4128;
          if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
          {
            int v130 = a5;
            *(void *)id v313 = 0;
            unsigned int v131 = sub_100055404(1);
            CFNumberRef v132 = v129;
            if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v133 = v131;
            }
            else {
              unsigned int v133 = v131 & 0xFFFFFFFE;
            }
            if (v133)
            {
              LOWORD(v316[0]) = 0;
              CFTypeID v134 = (char *)_os_log_send_and_compose_impl();

              if (v134) {
                sub_100055434(v134);
              }
            }
            else
            {

              CFTypeID v134 = 0;
            }
            a5 = v130;
            free(v134);
            unsigned int v82 = v291;
            id v81 = v305;
          }

          id v148 = a1[3];
          [v148 createVolumeMountsDir:@"/private/var/PersonaVolumes"];

          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          unsigned int v149 = (id)qword_1000E4128;
          if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
          {
            int v150 = a5;
            *(void *)id v313 = 0;
            unsigned int v151 = sub_100055404(1);
            unsigned int v152 = v149;
            if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v153 = v151;
            }
            else {
              unsigned int v153 = v151 & 0xFFFFFFFE;
            }
            if (v153)
            {
              LOWORD(v316[0]) = 0;
              unsigned int v154 = (char *)_os_log_send_and_compose_impl();

              if (v154) {
                sub_100055434(v154);
              }
            }
            else
            {

              unsigned int v154 = 0;
            }
            a5 = v150;
            free(v154);
            unsigned int v82 = v291;
            id v81 = v305;
          }

          unsigned int v310 = 0;
          id v155 = a1[3];
          unsigned int v156 = [v155 createVolumeWithSession:v24 size:0 userName:v287 error:&v310 forPersona:1 userDataVolume:0];

          uint64_t v286 = (uint64_t)a1;
          if (v156)
          {
            if (qword_1000E4130 != -1) {
              dispatch_once(&qword_1000E4130, &stru_1000D57B8);
            }
            unsigned int v157 = (id)qword_1000E4128;
            if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
            {
              int v158 = a5;
              *(void *)id v313 = 0;
              unsigned int v159 = sub_100055404(1);
              unsigned int v160 = v157;
              if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v161 = v159;
              }
              else {
                unsigned int v161 = v159 & 0xFFFFFFFE;
              }
              if (v161)
              {
                LOWORD(v316[0]) = 0;
                unsigned int v162 = (char *)_os_log_send_and_compose_impl();

                if (v162) {
                  sub_100055434(v162);
                }
              }
              else
              {

                unsigned int v162 = 0;
              }
              a5 = v158;
              free(v162);
              unsigned int v82 = v291;
              id v81 = v305;
            }

            id v168 = a1[3];
            unsigned __int8 v169 = [v168 mountVolumeWithSession:v24 mountPath:0 error:0 forPersona:1];

            if ((v169 & 1) == 0)
            {
              if (qword_1000E4130 != -1) {
                dispatch_once(&qword_1000E4130, &stru_1000D57B8);
              }
              unsigned int v176 = (id)qword_1000E4128;
              if (os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)id v313 = 0;
                unsigned int v177 = sub_100055404(1);
                CFDictionaryRef v178 = v176;
                if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v179 = v177;
                }
                else {
                  unsigned int v179 = v177 & 0xFFFFFFFE;
                }
                if (v179)
                {
                  LOWORD(v316[0]) = 0;
                  unsigned int v180 = (char *)_os_log_send_and_compose_impl();

                  if (v180) {
                    sub_100055434(v180);
                  }
                }
                else
                {

                  unsigned int v180 = 0;
                }
                free(v180);
              }
              id v137 = v15;

              int v141 = 0;
              unsigned int v35 = 22;
              goto LABEL_406;
            }
            if (qword_1000E4130 != -1) {
              dispatch_once(&qword_1000E4130, &stru_1000D57B8);
            }
            unsigned int v170 = (id)qword_1000E4128;
            if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
            {
              int v171 = a5;
              *(void *)id v313 = 0;
              unsigned int v172 = sub_100055404(1);
              unsigned int v173 = v170;
              if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v174 = v172;
              }
              else {
                unsigned int v174 = v172 & 0xFFFFFFFE;
              }
              if (v174)
              {
                LOWORD(v316[0]) = 0;
                CFTypeID v175 = (char *)_os_log_send_and_compose_impl();

                if (v175) {
                  sub_100055434(v175);
                }
              }
              else
              {

                CFTypeID v175 = 0;
              }
              a5 = v171;
              free(v175);
              unsigned int v82 = v291;
              id v81 = v305;
            }

            [v24 setObject:0 forKeyedSubscript:@"UserPersonaUserKey"];
            id v181 = a1[3];
            unsigned __int8 v182 = [v181 splitUserVolumeEnabled];

            if (v182)
            {
              uint64_t v183 = sub_1000614F0(a1);
              unsigned int v281 = sub_100056B1C((uint64_t)v183);

              if (qword_1000E4130 != -1) {
                dispatch_once(&qword_1000E4130, &stru_1000D57B8);
              }
              int v184 = (id)qword_1000E4128;
              if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
              {
                v316[0] = 0;
                unsigned int v185 = sub_100055404(1);
                unsigned int v186 = v184;
                if (os_log_type_enabled(v186, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v187 = v185;
                }
                else {
                  unsigned int v187 = v185 & 0xFFFFFFFE;
                }
                if (v187)
                {
                  *(_DWORD *)id v313 = 138412546;
                  *(void *)&v313[4] = v285;
                  *(_WORD *)&v313[12] = 1024;
                  *(_DWORD *)&v313[14] = v281;
                  int v188 = (char *)_os_log_send_and_compose_impl();

                  if (v188) {
                    sub_100055434(v188);
                  }
                }
                else
                {

                  int v188 = 0;
                }
                free(v188);
              }
              int v299 = a5;

              id v202 = a1[2];
              long long v203 = sub_100019308((uint64_t)v202);
              unsigned int v309 = v58;
              unsigned int v204 = [v203 addPersonaWithUUID:v285 toSession:v281 passcode:v15 error:&v309];
              unsigned int v192 = v309;

              if (!v204)
              {
                if (qword_1000E4130 != -1) {
                  dispatch_once(&qword_1000E4130, &stru_1000D57B8);
                }
                long long v210 = (id)qword_1000E4128;
                if (os_log_type_enabled(v210, OS_LOG_TYPE_DEFAULT))
                {
                  v316[0] = 0;
                  unsigned int v211 = sub_100055404(1);
                  long long v212 = v210;
                  if (os_log_type_enabled(v212, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v213 = v211;
                  }
                  else {
                    unsigned int v213 = v211 & 0xFFFFFFFE;
                  }
                  if (v213)
                  {
                    *(_DWORD *)id v313 = 138412546;
                    *(void *)&v313[4] = v285;
                    *(_WORD *)&v313[12] = 2112;
                    *(void *)&v313[14] = v192;
                    long long v214 = (char *)_os_log_send_and_compose_impl();

                    if (v214) {
                      sub_100055434(v214);
                    }
                  }
                  else
                  {

                    long long v214 = 0;
                  }
                  free(v214);
                }

                int v191 = 5;
                goto LABEL_394;
              }
              if (qword_1000E4130 != -1) {
                dispatch_once(&qword_1000E4130, &stru_1000D57B8);
              }
              long long v205 = (id)qword_1000E4128;
              if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)id v313 = 0;
                unsigned int v206 = sub_100055404(1);
                long long v207 = v205;
                if (os_log_type_enabled(v207, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v208 = v206;
                }
                else {
                  unsigned int v208 = v206 & 0xFFFFFFFE;
                }
                if (v208)
                {
                  LOWORD(v316[0]) = 0;
                  long long v209 = (char *)_os_log_send_and_compose_impl();

                  if (v209) {
                    sub_100055434(v209);
                  }
                }
                else
                {

                  long long v209 = 0;
                }
                free(v209);
              }

              uint64_t v215 = sub_10008A8B8(v24, @"MKBUserSessionVolumeDeviceNode");
              if (qword_1000E4130 != -1) {
                dispatch_once(&qword_1000E4130, &stru_1000D57B8);
              }
              int v216 = (id)qword_1000E4128;
              if (os_log_type_enabled(v216, OS_LOG_TYPE_DEFAULT))
              {
                v316[0] = 0;
                unsigned int v217 = sub_100055404(1);
                __int16 v218 = v216;
                if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v219 = v217;
                }
                else {
                  unsigned int v219 = v217 & 0xFFFFFFFE;
                }
                if (v219)
                {
                  *(_DWORD *)id v313 = 138412802;
                  *(void *)&v313[4] = v215;
                  *(_WORD *)&v313[12] = 1024;
                  *(_DWORD *)&v313[14] = v281;
                  *(_WORD *)&v313[18] = 2112;
                  *(void *)&v313[20] = v285;
                  unsigned int v220 = (char *)_os_log_send_and_compose_impl();

                  if (v220) {
                    sub_100055434(v220);
                  }
                }
                else
                {

                  unsigned int v220 = 0;
                }
                free(v220);
              }

              id v255 = a1[2];
              unsigned int v256 = sub_100019308((uint64_t)v255);
              CFDictionaryRef v308 = v192;
              id v280 = (id)v215;
              unsigned int v257 = [v256 mapVolume:v215 toSession:v281 withPersona:v285 error:&v308];
              unsigned int v58 = v308;

              if (v257)
              {
                if (qword_1000E4130 != -1) {
                  dispatch_once(&qword_1000E4130, &stru_1000D57B8);
                }
                a5 = v299;
                CFDataRef v189 = (id)qword_1000E4128;
                unsigned int v82 = v291;
                id v81 = v305;
                if (!os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v34 = v287;
                  unsigned int v298 = 0;
                  goto LABEL_325;
                }
                *(void *)id v313 = 0;
                unsigned int v258 = sub_100055404(1);
                unsigned int v259 = v189;
                if (os_log_type_enabled(v259, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v260 = v258;
                }
                else {
                  unsigned int v260 = v258 & 0xFFFFFFFE;
                }
                unsigned int v279 = v259;
                if (v260)
                {
                  LOWORD(v316[0]) = 0;
                  int v261 = (char *)_os_log_send_and_compose_impl();

                  if (v261) {
                    sub_100055434(v261);
                  }
                }
                else
                {

                  int v261 = 0;
                }
                free(v261);
                unsigned int v298 = 0;
LABEL_524:
                uint64_t v34 = v287;
                CFDataRef v189 = v279;
LABEL_325:

                int v191 = v298;
                if (v298)
                {
                  unsigned int v192 = v58;
LABEL_394:
                  if (qword_1000E4130 != -1) {
                    dispatch_once(&qword_1000E4130, &stru_1000D57B8);
                  }
                  unsigned int v221 = (id)qword_1000E4128;
                  if (os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT))
                  {
                    *(void *)id v313 = 0;
                    unsigned int v222 = sub_100055404(1);
                    unsigned int v223 = v221;
                    if (os_log_type_enabled(v223, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v224 = v222;
                    }
                    else {
                      unsigned int v224 = v222 & 0xFFFFFFFE;
                    }
                    if (v224)
                    {
                      LODWORD(v316[0]) = 67109120;
                      HIDWORD(v316[0]) = v191;
                      unsigned int v225 = (char *)_os_log_send_and_compose_impl();

                      if (v225) {
                        sub_100055434(v225);
                      }
                    }
                    else
                    {

                      unsigned int v225 = 0;
                    }
                    free(v225);
                  }
                  id v137 = v15;

                  unsigned int v35 = 22;
                  int v141 = 1;
                  unsigned int v58 = v192;
LABEL_406:
                  int v147 = 1;
                  goto LABEL_407;
                }
LABEL_327:

                CFStringRef v33 = v58;
                unsigned int v17 = v303;
                goto LABEL_328;
              }
              if (qword_1000E4130 != -1) {
                dispatch_once(&qword_1000E4130, &stru_1000D57B8);
              }
              int v262 = (id)qword_1000E4128;
              if (os_log_type_enabled(v262, OS_LOG_TYPE_DEFAULT))
              {
                v316[0] = 0;
                unsigned int v263 = sub_100055404(1);
                unsigned int v264 = v262;
                if (os_log_type_enabled(v264, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v265 = v263;
                }
                else {
                  unsigned int v265 = v263 & 0xFFFFFFFE;
                }
                if (v265)
                {
                  *(_DWORD *)id v313 = 138413058;
                  *(void *)&v313[4] = v280;
                  *(_WORD *)&v313[12] = 1024;
                  *(_DWORD *)&v313[14] = v281;
                  *(_WORD *)&v313[18] = 2112;
                  *(void *)&v313[20] = v285;
                  __int16 v314 = 2112;
                  uint64_t v315 = v58;
                  unsigned int v266 = (char *)_os_log_send_and_compose_impl();

                  if (v266) {
                    sub_100055434(v266);
                  }
                }
                else
                {

                  unsigned int v266 = 0;
                }
                free(v266);
              }

              id v267 = a1[2];
              id v268 = sub_100019308((uint64_t)v267);
              uint64_t v307 = v58;
              unsigned int v269 = [v268 deletePersonaWithUUID:v285 fromSession:v281 error:&v307];
              unsigned int v270 = v307;

              if (v269)
              {
                if (qword_1000E4130 != -1) {
                  dispatch_once(&qword_1000E4130, &stru_1000D57B8);
                }
                a5 = v299;
                unsigned int v58 = v270;
                CFDataRef v189 = (id)qword_1000E4128;
                unsigned int v82 = v291;
                id v81 = v305;
                if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
                {
                  *(void *)id v313 = 0;
                  unsigned int v271 = sub_100055404(1);
                  unsigned int v272 = v189;
                  if (os_log_type_enabled(v272, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v273 = v271;
                  }
                  else {
                    unsigned int v273 = v271 & 0xFFFFFFFE;
                  }
                  unsigned int v279 = v272;
                  if (v273)
                  {
                    LOWORD(v316[0]) = 0;
                    goto LABEL_519;
                  }
                  goto LABEL_522;
                }
              }
              else
              {
                if (qword_1000E4130 != -1) {
                  dispatch_once(&qword_1000E4130, &stru_1000D57B8);
                }
                a5 = v299;
                unsigned int v58 = v270;
                CFDataRef v189 = (id)qword_1000E4128;
                unsigned int v82 = v291;
                id v81 = v305;
                if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
                {
                  v316[0] = 0;
                  unsigned int v274 = sub_100055404(1);
                  unsigned int v272 = v189;
                  if (os_log_type_enabled(v272, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v275 = v274;
                  }
                  else {
                    unsigned int v275 = v274 & 0xFFFFFFFE;
                  }
                  unsigned int v279 = v272;
                  if (v275)
                  {
                    *(_DWORD *)id v313 = 67109378;
                    *(_DWORD *)&v313[4] = v281;
                    *(_WORD *)&v313[8] = 2112;
                    *(void *)&v313[10] = v58;
LABEL_519:
                    unsigned int v276 = (char *)_os_log_send_and_compose_impl();

                    if (v276) {
                      sub_100055434(v276);
                    }
                    goto LABEL_523;
                  }
LABEL_522:

                  unsigned int v276 = 0;
LABEL_523:
                  free(v276);
                  unsigned int v298 = 5;
                  goto LABEL_524;
                }
              }
              unsigned int v298 = 5;
            }
            else
            {
              id v280 = a1[2];
              CFDataRef v189 = sub_100018F78((uint64_t)v280);
              int v190 = sub_10008A8B8(v24, @"MKBUserSessionHomeDir");
              unsigned int v298 = [v189 createPersonaKeyForUser:0 personaUUID:v284 passcode:v15 homeDir:v190];
            }
            uint64_t v34 = v287;
            goto LABEL_325;
          }
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          unsigned int v163 = (id)qword_1000E4128;
          if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)id v313 = 0;
            unsigned int v164 = sub_100055404(1);
            int v165 = v163;
            if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v166 = v164;
            }
            else {
              unsigned int v166 = v164 & 0xFFFFFFFE;
            }
            if (v166)
            {
              v316[0] = 0x1604000100;
              unsigned int v167 = (char *)_os_log_send_and_compose_impl();

              if (v167) {
                sub_100055434(v167);
              }
            }
            else
            {

              unsigned int v167 = 0;
            }
            free(v167);
          }
          id v137 = v15;

          int v141 = 0;
          int v147 = 0;
          unsigned int v35 = v310;
        }
        else
        {
          uint64_t v286 = (uint64_t)a1;
          unsigned int v35 = [v126 code];
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          uint64_t v135 = (id)qword_1000E4128;
          int v282 = v125;
          uint64_t v283 = v135;
          if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
          {
            v316[0] = 0;
            unsigned int v136 = sub_100055404(1);
            id v137 = v15;
            if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v138 = v136;
            }
            else {
              unsigned int v138 = v136 & 0xFFFFFFFE;
            }
            if (v138)
            {
              *(_DWORD *)id v313 = 67109376;
              *(_DWORD *)&v313[4] = v304;
              *(_WORD *)&v313[8] = 1024;
              *(_DWORD *)&v313[10] = v35;
              unsigned int v139 = (const char *)_os_log_send_and_compose_impl();
              unsigned int v140 = (char *)v139;
              if (v139) {
                sub_100055434(v139);
              }
            }
            else
            {
              unsigned int v140 = 0;
            }
            free(v140);
            int v141 = 0;
          }
          else
          {
            int v141 = 0;
            id v137 = v15;
          }
          int v147 = 0;
        }
LABEL_407:

        if (!v141) {
          goto LABEL_430;
        }
        id v226 = *(id *)(v286 + 24);
        unsigned int v227 = [v226 unmountVolumeWithSession:v24 mountPath:0 error:0];

        if (v227)
        {
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          unsigned int v228 = (id)qword_1000E4128;
          if (!os_log_type_enabled(v228, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_429;
          }
          *(void *)id v313 = 0;
          unsigned int v229 = sub_100055404(1);
          v230 = v228;
          if (os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v231 = v229;
          }
          else {
            unsigned int v231 = v229 & 0xFFFFFFFE;
          }
          if (v231)
          {
            LOWORD(v316[0]) = 0;
            goto LABEL_425;
          }
        }
        else
        {
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          unsigned int v228 = (id)qword_1000E4128;
          if (!os_log_type_enabled(v228, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_429;
          }
          *(void *)id v313 = 0;
          unsigned int v232 = sub_100055404(1);
          v230 = v228;
          if (os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v233 = v232;
          }
          else {
            unsigned int v233 = v232 & 0xFFFFFFFE;
          }
          if (v233)
          {
            LOWORD(v316[0]) = 0;
LABEL_425:
            unsigned int v234 = (char *)_os_log_send_and_compose_impl();

            if (v234) {
              sub_100055434(v234);
            }
            goto LABEL_428;
          }
        }

        unsigned int v234 = 0;
LABEL_428:
        free(v234);
LABEL_429:

LABEL_430:
        if (!v147)
        {
          id v15 = v137;
          uint64_t v34 = v287;
          a7 = v289;
          if (v282)
          {
LABEL_455:
            unsigned int v306 = v58;
            sub_10006174C(v286, v24, &v306);
            CFStringRef v33 = v306;
LABEL_456:

            goto LABEL_457;
          }
LABEL_441:
          CFStringRef v33 = v58;
LABEL_457:
          unsigned int v17 = v303;
LABEL_458:

          unsigned int v24 = 0;
          if (a7 && v35)
          {
            id v244 = a7;
            if (qword_1000E4130 != -1) {
              dispatch_once(&qword_1000E4130, &stru_1000D57B8);
            }
            CFDateRef v245 = (id)qword_1000E4128;
            if (os_log_type_enabled(v245, OS_LOG_TYPE_DEFAULT))
            {
              id v246 = v14;
              id v247 = v15;
              unsigned int v248 = v34;
              *(void *)id v313 = 0;
              unsigned int v249 = sub_100055404(1);
              v250 = v245;
              if (os_log_type_enabled(v250, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v251 = v249;
              }
              else {
                unsigned int v251 = v249 & 0xFFFFFFFE;
              }
              if (v251)
              {
                LODWORD(v316[0]) = 67109120;
                HIDWORD(v316[0]) = v35;
                unsigned int v252 = (char *)_os_log_send_and_compose_impl();

                if (v252) {
                  sub_100055434(v252);
                }
              }
              else
              {

                unsigned int v252 = 0;
              }
              free(v252);
              uint64_t v34 = v248;
              id v15 = v247;
              id v14 = v246;
            }

            unsigned int v24 = 0;
            *id v244 = v35;
          }
          goto LABEL_472;
        }
        id v235 = *(id *)(v286 + 24);
        unsigned int v236 = [v235 deleteVolumeWithSession:v24 error:0];

        if (v236)
        {
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          BOOL v237 = (id)qword_1000E4128;
          id v15 = v137;
          a7 = v289;
          if (os_log_type_enabled(v237, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)id v313 = 0;
            unsigned int v238 = sub_100055404(1);
            unsigned int v239 = v237;
            if (os_log_type_enabled(v239, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v240 = v238;
            }
            else {
              unsigned int v240 = v238 & 0xFFFFFFFE;
            }
            if (v240)
            {
              LOWORD(v316[0]) = 0;
              goto LABEL_450;
            }
            goto LABEL_452;
          }
        }
        else
        {
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          BOOL v237 = (id)qword_1000E4128;
          id v15 = v137;
          a7 = v289;
          if (os_log_type_enabled(v237, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)id v313 = 0;
            unsigned int v241 = sub_100055404(1);
            unsigned int v239 = v237;
            if (os_log_type_enabled(v239, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v242 = v241;
            }
            else {
              unsigned int v242 = v241 & 0xFFFFFFFE;
            }
            if (v242)
            {
              LOWORD(v316[0]) = 0;
LABEL_450:
              CFStringRef v243 = (char *)_os_log_send_and_compose_impl();

              if (v243) {
                sub_100055434(v243);
              }
              goto LABEL_453;
            }
LABEL_452:

            CFStringRef v243 = 0;
LABEL_453:
            free(v243);
          }
        }

        uint64_t v34 = v287;
        if (v282) {
          goto LABEL_455;
        }
        goto LABEL_441;
      }
      uint64_t v34 = 0;
    }
    else
    {
      unsigned int v82 = 0;
      uint64_t v34 = 0;
      id v81 = v305;
    }
    id v15 = v301;
    goto LABEL_220;
  }
  unsigned int v253 = 0;
LABEL_473:

  return v253;
}

uint64_t sub_100060B7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!a1)
  {
    uint64_t v28 = 0;
    goto LABEL_104;
  }
  if (a3) {
    *a3 = 0;
  }
  id v6 = objc_alloc_init(UMKPersonaInfo);
  id v7 = [v5 objectForKeyedSubscript:@"UserPersonaType"];

  if (!v7)
  {
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    unsigned int v17 = (id)qword_1000E4128;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_46;
    }
    unsigned int v18 = sub_100055404(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v18 & 0xFFFFFFFE;
    }
    if (!v19) {
      goto LABEL_44;
    }
LABEL_42:
    unsigned int v26 = (const char *)_os_log_send_and_compose_impl();
    unsigned int v27 = (char *)v26;
    if (v26) {
      sub_100055434(v26);
    }
    goto LABEL_45;
  }
  int v8 = sub_10008A720(v5, @"UserPersonaType", (id)0xFFFFFFFFLL);
  int v9 = sub_100062E8C((uint64_t)UMDPersonaManager, v8);
  sub_100066BD8((uint64_t)v6, v9);
  if (sub_100066BCC((uint64_t)v6) == -1)
  {
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    unsigned int v17 = (id)qword_1000E4128;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_46;
    }
    unsigned int v20 = sub_100055404(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v21 = v20;
    }
    else {
      unsigned int v21 = v20 & 0xFFFFFFFE;
    }
    if (!v21) {
      goto LABEL_44;
    }
    goto LABEL_42;
  }
  unsigned int v10 = [v5 objectForKeyedSubscript:@"UserPersonaID"];

  if (!v10)
  {
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    unsigned int v17 = (id)qword_1000E4128;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_46;
    }
    unsigned int v22 = sub_100055404(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v23 = v22;
    }
    else {
      unsigned int v23 = v22 & 0xFFFFFFFE;
    }
    if (!v23) {
      goto LABEL_44;
    }
    goto LABEL_42;
  }
  int v11 = sub_10008A720(v5, @"UserPersonaID", 0);
  sub_100058F44((uint64_t)v6, v11);
  sub_10008A8B8(v5, @"UserPersonaUniqueString");
  uint64_t v12 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1000778EC(v6, v12);

  id v14 = sub_1000778D8(v6, v13);

  if (!v14)
  {
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    unsigned int v17 = (id)qword_1000E4128;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_46;
    }
    unsigned int v24 = sub_100055404(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = v24 & 0xFFFFFFFE;
    }
    if (v25) {
      goto LABEL_42;
    }
LABEL_44:
    unsigned int v27 = 0;
LABEL_45:
    free(v27);
LABEL_46:

    if (a3)
    {
      +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
      uint64_t v28 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v28 = 0;
    }
    goto LABEL_103;
  }
  id v15 = sub_10008A8B8(v5, @"UserPersonaUserODUUID");
  unsigned int v16 = v15;
  if (v15)
  {
    if ([v15 isEqualToString:@"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF"])
    {
      sub_100066D6C((uint64_t)v6, -1);
    }
    else
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
      int v30 = sub_1000569C8((uint64_t)WeakRetained, v16);
      sub_100066D6C((uint64_t)v6, v30);
    }
  }
  if ((v8 & 0xFFFFFFFB) == 2)
  {
    uint64_t v31 = sub_10008A8B8(v5, @"MKBUserSessionHomeDir");
    if (!v31)
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      id v40 = (id)qword_1000E4128;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v41 = sub_100055404(1);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v42 = v41;
        }
        else {
          unsigned int v42 = v41 & 0xFFFFFFFE;
        }
        if (v42)
        {
          long long v43 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v44 = (char *)v43;
          if (v43) {
            sub_100055434(v43);
          }
        }
        else
        {
          unsigned int v44 = 0;
        }
        free(v44);
      }

      if (a3)
      {
        +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
        unsigned __int8 v48 = 0;
        unsigned int v32 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        unsigned __int8 v48 = 0;
        unsigned int v32 = 0;
      }
      goto LABEL_102;
    }
    unsigned int v32 = (void *)v31;
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    CFStringRef v33 = (id)qword_1000E4128;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      int v34 = sub_100055404(1);
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
        v34 &= ~1u;
      }
      if (v34)
      {
        unsigned int v35 = v33;
        sub_100058F38((uint64_t)v6);
        unsigned int v36 = (char *)_os_log_send_and_compose_impl();

        if (v36) {
          sub_100055434(v36);
        }
      }
      else
      {
        unsigned int v36 = 0;
      }
      free(v36);
    }
  }
  else
  {
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    CFStringRef v33 = (id)qword_1000E4128;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      int v37 = sub_100055404(1);
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
        v37 &= ~1u;
      }
      if (v37)
      {
        unsigned int v38 = v33;
        sub_100058F38((uint64_t)v6);
        unsigned int v39 = (char *)_os_log_send_and_compose_impl();

        if (v39) {
          sub_100055434(v39);
        }
      }
      else
      {
        unsigned int v39 = 0;
      }
      free(v39);
    }
    unsigned int v32 = 0;
  }

  int v45 = sub_100058F38((uint64_t)v6);
  id v46 = *(id *)(a1 + 16);
  unsigned int v47 = sub_1000185F4((uint64_t)v46);
  unsigned __int8 v48 = [v47 allocatePersonaWithInfo:v6 andPath:v32 error:a3];

  if ((v48 & 1) == 0)
  {
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    unsigned int v49 = (id)qword_1000E4128;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v50 = sub_100055404(1);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v51 = v50;
      }
      else {
        unsigned int v51 = v50 & 0xFFFFFFFE;
      }
      if (v51)
      {
        int v52 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v53 = (char *)v52;
        if (v52) {
          sub_100055434(v52);
        }
      }
      else
      {
        unsigned int v53 = 0;
      }
      free(v53);
    }
  }
  if (sub_100058F38((uint64_t)v6) != v45)
  {
    CFDateRef v54 = +[NSNumber numberWithUnsignedInt:sub_100058F38((uint64_t)v6)];
    [v5 setObject:v54 forKeyedSubscript:@"UserPersonaID"];
  }
LABEL_102:

  uint64_t v28 = v48;
LABEL_103:

LABEL_104:
  return v28;
}

id *sub_1000614F0(id *WeakRetained)
{
  if (WeakRetained)
  {
    id WeakRetained = (id *)objc_loadWeakRetained(WeakRetained + 6);
    uint64_t v1 = vars8;
  }
  return WeakRetained;
}

void sub_100061520(uint64_t a1)
{
  if (a1)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v2 = [*(id *)(a1 + 32) userPersonas];
    id v3 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v17;
      do
      {
        id v6 = 0;
        do
        {
          if (*(void *)v17 != v5) {
            objc_enumerationMutation(v2);
          }
          uint64_t v7 = *(void *)(*((void *)&v16 + 1) + 8 * (void)v6);
          if (qword_1000E4130 != -1) {
            dispatch_once(&qword_1000E4130, &stru_1000D57B8);
          }
          int v8 = (id)qword_1000E4128;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v9 = sub_100055404(1);
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
              unsigned int v10 = v9;
            }
            else {
              unsigned int v10 = v9 & 0xFFFFFFFE;
            }
            if (v10)
            {
              int v20 = 138412290;
              uint64_t v21 = v7;
              int v11 = (const char *)_os_log_send_and_compose_impl();
              uint64_t v12 = (char *)v11;
              if (v11) {
                sub_100055434(v11);
              }
            }
            else
            {
              uint64_t v12 = 0;
            }
            free(v12);
          }

          id v13 = *(id *)(a1 + 32);
          id v14 = [v13 userPersonas];
          id v15 = [v14 objectForKeyedSubscript:v7];

          sub_10006529C(a1, v15);
          id v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        id v4 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
      }
      while (v4);
    }
  }
}

uint64_t sub_10006174C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    if (a3) {
      *a3 = 0;
    }
    id v7 = sub_10008A720(v5, @"UserPersonaID", 0);
    if (v7)
    {
      id v8 = v7;
      unsigned int v9 = sub_1000185F4(*(void *)(a1 + 16));
      unsigned __int8 v10 = [v9 deallocatePersonaWithID:v8 error:a3];

      if (v10)
      {
        a1 = 1;
        goto LABEL_33;
      }
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      long long v16 = (id)qword_1000E4128;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v17 = sub_100055404(1);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v18 = v17;
        }
        else {
          unsigned int v18 = v17 & 0xFFFFFFFE;
        }
        if (v18)
        {
          long long v19 = (const char *)_os_log_send_and_compose_impl();
          int v20 = (char *)v19;
          if (v19) {
            sub_100055434(v19);
          }
        }
        else
        {
          int v20 = 0;
        }
        free(v20);
      }
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      int v11 = (id)qword_1000E4128;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v12 = sub_100055404(1);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v13 = v12;
        }
        else {
          unsigned int v13 = v12 & 0xFFFFFFFE;
        }
        if (v13)
        {
          id v14 = (const char *)_os_log_send_and_compose_impl();
          id v15 = (char *)v14;
          if (v14) {
            sub_100055434(v14);
          }
        }
        else
        {
          id v15 = 0;
        }
        free(v15);
      }

      if (a3)
      {
        +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
        a1 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_33;
      }
    }
    a1 = 0;
  }
LABEL_33:

  return a1;
}

void sub_1000619C4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = sub_10005B430(a1, 4u, v5);
    if (v7)
    {
      id v8 = (void *)v7;
      BOOL v9 = 0;
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned __int8 v10 = (id)qword_1000E4128;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v11 = sub_100055404(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v12 = v11;
        }
        else {
          unsigned int v12 = v11 & 0xFFFFFFFE;
        }
        if (v12)
        {
          unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
          id v14 = (char *)v13;
          if (v13) {
            sub_100055434(v13);
          }
        }
        else
        {
          id v14 = 0;
        }
        free(v14);
      }

      uint64_t v15 = sub_10005D714((id *)a1, v5, 4, v6);
      BOOL v9 = v15 != 0;
      if (v15)
      {
        id v8 = (void *)v15;
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        long long v16 = (id)qword_1000E4128;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v17 = sub_100055404(1);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v18 = v17;
          }
          else {
            unsigned int v18 = v17 & 0xFFFFFFFE;
          }
          if (v18)
          {
            long long v19 = (const char *)_os_log_send_and_compose_impl();
            int v20 = (char *)v19;
            if (v19) {
              sub_100055434(v19);
            }
          }
          else
          {
            int v20 = 0;
          }
          free(v20);
        }
      }
      else
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        long long v16 = (id)qword_1000E4128;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v21 = sub_100055404(1);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v22 = v21;
          }
          else {
            unsigned int v22 = v21 & 0xFFFFFFFE;
          }
          if (v22)
          {
            unsigned int v23 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v24 = (char *)v23;
            if (v23) {
              sub_100055434(v23);
            }
          }
          else
          {
            unsigned int v24 = 0;
          }
          free(v24);
        }
        id v8 = 0;
      }
    }
    unsigned int v25 = sub_10005B430(a1, 3u, v5);

    if (!v25)
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v26 = (id)qword_1000E4128;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v27 = sub_100055404(1);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v28 = v27;
        }
        else {
          unsigned int v28 = v27 & 0xFFFFFFFE;
        }
        if (v28)
        {
          id v29 = (const char *)_os_log_send_and_compose_impl();
          int v30 = (char *)v29;
          if (v29) {
            sub_100055434(v29);
          }
        }
        else
        {
          int v30 = 0;
        }
        free(v30);
      }

      uint64_t v31 = sub_10005D714((id *)a1, v5, 3, v6);
      if (v31)
      {
        unsigned int v25 = (void *)v31;
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        unsigned int v32 = (id)qword_1000E4128;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v33 = sub_100055404(1);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v34 = v33;
          }
          else {
            unsigned int v34 = v33 & 0xFFFFFFFE;
          }
          if (v34)
          {
            unsigned int v35 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v36 = (char *)v35;
            if (v35) {
              sub_100055434(v35);
            }
          }
          else
          {
            unsigned int v36 = 0;
          }
          free(v36);
        }
        BOOL v9 = 1;
      }
      else
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        unsigned int v32 = (id)qword_1000E4128;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v37 = sub_100055404(1);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v38 = v37;
          }
          else {
            unsigned int v38 = v37 & 0xFFFFFFFE;
          }
          if (v38)
          {
            unsigned int v39 = (const char *)_os_log_send_and_compose_impl();
            id v40 = (char *)v39;
            if (v39) {
              sub_100055434(v39);
            }
          }
          else
          {
            id v40 = 0;
          }
          free(v40);
        }
        unsigned int v25 = 0;
      }
    }
    unsigned int v41 = sub_10005B430(a1, 5u, v5);

    if (v41)
    {
      if (!v9)
      {
LABEL_129:

        goto LABEL_130;
      }
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v42 = (id)qword_1000E4128;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v43 = sub_100055404(1);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v44 = v43;
        }
        else {
          unsigned int v44 = v43 & 0xFFFFFFFE;
        }
        if (v44)
        {
          int v45 = (const char *)_os_log_send_and_compose_impl();
          id v46 = (char *)v45;
          if (v45) {
            sub_100055434(v45);
          }
        }
        else
        {
          id v46 = 0;
        }
        free(v46);
      }

      uint64_t v47 = sub_10005D714((id *)a1, v5, 5, v6);
      if (v47)
      {
        unsigned int v41 = (void *)v47;
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        unsigned __int8 v48 = (id)qword_1000E4128;
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v49 = sub_100055404(1);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v50 = v49;
          }
          else {
            unsigned int v50 = v49 & 0xFFFFFFFE;
          }
          if (v50)
          {
            unsigned int v51 = (const char *)_os_log_send_and_compose_impl();
            int v52 = (char *)v51;
            if (v51) {
              sub_100055434(v51);
            }
          }
          else
          {
            int v52 = 0;
          }
          free(v52);
        }
      }
      else
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        unsigned int v53 = (id)qword_1000E4128;
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v54 = sub_100055404(1);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v55 = v54;
          }
          else {
            unsigned int v55 = v54 & 0xFFFFFFFE;
          }
          if (v55)
          {
            unsigned int v56 = (const char *)_os_log_send_and_compose_impl();
            uint64_t v57 = (char *)v56;
            if (v56) {
              sub_100055434(v56);
            }
          }
          else
          {
            uint64_t v57 = 0;
          }
          free(v57);
        }

        unsigned int v41 = 0;
        if (!v9) {
          goto LABEL_129;
        }
      }
    }
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    unsigned int v58 = (id)qword_1000E4128;
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v59 = sub_100055404(1);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v60 = v59;
      }
      else {
        unsigned int v60 = v59 & 0xFFFFFFFE;
      }
      if (v60)
      {
        id v61 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v62 = (char *)v61;
        if (v61) {
          sub_100055434(v61);
        }
      }
      else
      {
        uint64_t v62 = 0;
      }
      free(v62);
    }

    sub_10005DBE8((uint64_t)a1);
    goto LABEL_129;
  }
LABEL_130:
}

NSObject *sub_100062308(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (a2) {
      *a2 = 0;
    }
    id v3 = sub_100018F6C(*(void *)(a1 + 16));
    id v4 = [v3 dataWithContentsOfFile:@"/private/var/keybags/persona.kb" error:a2];

    if (v4)
    {
      id v5 = +[UMDPersonaManifest manifestFromData:v4];
      if (v5)
      {
        if (qword_1000E4120 != -1) {
          dispatch_once(&qword_1000E4120, &stru_1000D5798);
        }
        id v6 = (id)qword_1000E4118;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v7 = sub_100055404(0);
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v8 = v7;
          }
          else {
            unsigned int v8 = v7 & 0xFFFFFFFE;
          }
          if (v8)
          {
            BOOL v9 = v6;
            [v5 version];
            [v5 generation];
            unsigned __int8 v10 = [v5 users];
            [v10 count];
            unsigned int v11 = (char *)_os_log_send_and_compose_impl();

            if (v11) {
              sub_100055434(v11);
            }
          }
          else
          {
            unsigned int v11 = 0;
          }
          free(v11);
        }

        id v5 = v5;
        unsigned int v21 = v5;
      }
      else
      {
        if (qword_1000E4120 != -1) {
          dispatch_once(&qword_1000E4120, &stru_1000D5798);
        }
        long long v16 = (id)qword_1000E4118;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          unsigned int v17 = sub_100055404(0);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            unsigned int v18 = v17;
          }
          else {
            unsigned int v18 = v17 & 0xFFFFFFFE;
          }
          if (v18)
          {
            long long v19 = (const char *)_os_log_send_and_compose_impl();
            int v20 = (char *)v19;
            if (v19) {
              sub_100055434(v19);
            }
          }
          else
          {
            int v20 = 0;
          }
          free(v20);
        }

        if (a2)
        {
          *a2 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
        }
        unsigned int v21 = 0;
      }
    }
    else
    {
      if (qword_1000E4120 != -1) {
        dispatch_once(&qword_1000E4120, &stru_1000D5798);
      }
      id v5 = (id)qword_1000E4118;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        unsigned int v12 = sub_100055404(0);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          unsigned int v13 = v12;
        }
        else {
          unsigned int v13 = v12 & 0xFFFFFFFE;
        }
        if (v13)
        {
          id v14 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v15 = (char *)v14;
          if (v14) {
            sub_100055434(v14);
          }
        }
        else
        {
          uint64_t v15 = 0;
        }
        free(v15);
      }
      unsigned int v21 = 0;
    }
  }
  else
  {
    unsigned int v21 = 0;
  }

  return v21;
}

UMDPersonaManifestUser *sub_1000626FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v27 = a3;
  if (a1)
  {
    id v6 = objc_alloc_init(UMDPersonaManifestUser);
    unsigned int v7 = sub_1000173F4((uint64_t)NSUUID, v5);
    unsigned int v26 = v6;
    sub_100019084((uint64_t)v6, v7);

    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    unsigned int v8 = [*(id *)(a1 + 32) asidMap];
    id v9 = [v8 countByEnumeratingWithState:&v32 objects:v37 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v33;
      while (2)
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v33 != v11) {
            objc_enumerationMutation(v8);
          }
          unsigned int v13 = *(void **)(*((void *)&v32 + 1) + 8 * i);
          id v14 = *(id *)(a1 + 32);
          uint64_t v15 = [v14 asidMap];
          long long v16 = [v15 objectForKeyedSubscript:v13];

          LODWORD(v14) = [v5 isEqualToString:v16];
          if (v14)
          {
            sub_100058F44((uint64_t)v26, (int)[v13 intValue]);
            goto LABEL_12;
          }
        }
        id v10 = [v8 countByEnumeratingWithState:&v32 objects:v37 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }
LABEL_12:

    unsigned int v17 = +[NSMutableSet set];
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v18 = v27;
    id v19 = [v18 countByEnumeratingWithState:&v28 objects:v36 count:16];
    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = *(void *)v29;
      do
      {
        for (j = 0; j != v20; j = (char *)j + 1)
        {
          if (*(void *)v29 != v21) {
            objc_enumerationMutation(v18);
          }
          unsigned int v23 = sub_10007928C((uint64_t)UMDPersonaManifestPersona, *(void **)(*((void *)&v28 + 1) + 8 * (void)j));
          sub_100019150((uint64_t)v23, 0);
          [v17 addObject:v23];
        }
        id v20 = [v18 countByEnumeratingWithState:&v28 objects:v36 count:16];
      }
      while (v20);
    }

    unsigned int v24 = v26;
    sub_10001956C(v26, (char *)v17);
  }
  else
  {
    unsigned int v24 = 0;
  }

  return v24;
}

id sub_1000629B4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v15 = +[UMDPersonaManifest manifest];
    [v15 setGeneration:sub_100058954(*(void *)(a1 + 40))];
    id v2 = +[NSMutableSet set];
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v3 = [*(id *)(a1 + 32) userPersonas];
    id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v17;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v6) {
            objc_enumerationMutation(v3);
          }
          unsigned int v8 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          id v9 = *(id *)(a1 + 32);
          id v10 = [v9 userPersonas];
          uint64_t v11 = [v10 objectForKeyedSubscript:v8];
          unsigned int v12 = sub_1000626FC(a1, v8, v11);

          [v2 addObject:v12];
        }
        id v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }
      while (v5);
    }

    unsigned int v13 = v15;
    [v15 setUsers:v2];
  }
  else
  {
    unsigned int v13 = 0;
  }

  return v13;
}

uint64_t sub_100062B84(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (a3) {
      *a3 = 0;
    }
    id v5 = [a2 dataValue];
    if (v5)
    {
      uint64_t v6 = sub_100018F6C(*(void *)(v3 + 16));
      unsigned __int8 v7 = [v6 atomicallyWriteData:v5 toPath:@"/private/var/keybags/persona.kb" error:a3];

      if (v7)
      {
        uint64_t v3 = 1;
LABEL_33:

        return v3;
      }
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v13 = (id)qword_1000E4128;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v14 = sub_100055404(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v15 = v14;
        }
        else {
          unsigned int v15 = v14 & 0xFFFFFFFE;
        }
        if (v15)
        {
          long long v16 = (const char *)_os_log_send_and_compose_impl();
          long long v17 = (char *)v16;
          if (v16) {
            sub_100055434(v16);
          }
        }
        else
        {
          long long v17 = 0;
        }
        free(v17);
      }
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v8 = (id)qword_1000E4128;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v9 = sub_100055404(1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v10 = v9;
        }
        else {
          unsigned int v10 = v9 & 0xFFFFFFFE;
        }
        if (v10)
        {
          uint64_t v11 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v12 = (char *)v11;
          if (v11) {
            sub_100055434(v11);
          }
        }
        else
        {
          unsigned int v12 = 0;
        }
        free(v12);
      }

      if (a3)
      {
        +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
        uint64_t v3 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_33;
      }
    }
    uint64_t v3 = 0;
    goto LABEL_33;
  }
  return v3;
}

BOOL sub_100062DF4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = 0;
  if (a1 && a2 != -1)
  {
    id v4 = *(id *)(a1 + 16);
    id v5 = sub_1000185F4((uint64_t)v4);
    id v9 = 0;
    uint64_t v6 = [v5 infoForPersonaWithID:a2 error:&v9];
    id v7 = v9;

    BOOL v2 = v6 != 0;
  }
  return v2;
}

uint64_t sub_100062E8C(uint64_t a1, int a2)
{
  self;
  uint64_t result = 5;
  switch(a2)
  {
    case 0:
      return result;
    case 1:
    case 4:
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      id v4 = (id)qword_1000E4128;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_26;
      }
      unsigned int v5 = sub_100055404(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v6 = v5;
      }
      else {
        unsigned int v6 = v5 & 0xFFFFFFFE;
      }
      if (!v6) {
        goto LABEL_24;
      }
      goto LABEL_22;
    case 2:
    case 6:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 4;
      break;
    case 5:
      uint64_t result = 6;
      break;
    default:
      if (a2 == 1000)
      {
        uint64_t result = 0;
      }
      else
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        id v4 = (id)qword_1000E4128;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v7 = sub_100055404(1);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v8 = v7;
          }
          else {
            unsigned int v8 = v7 & 0xFFFFFFFE;
          }
          if (v8)
          {
LABEL_22:
            id v9 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v10 = (char *)v9;
            if (v9) {
              sub_100055434(v9);
            }
          }
          else
          {
LABEL_24:
            unsigned int v10 = 0;
          }
          free(v10);
        }
LABEL_26:

        uint64_t result = 0xFFFFFFFFLL;
      }
      break;
  }
  return result;
}

BOOL sub_1000630E4(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  BOOL v2 = [a2 objectForKeyedSubscript:@"MKBUserSessionVolumeDeviceNode"];
  BOOL v3 = v2 != 0;

  return v3;
}

void sub_100063130(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  unsigned int v6 = v5;
  if (a1)
  {
    unsigned int v7 = sub_10008A8B8(v5, @"MKBUserSessionHomeDir");
    if (!v7)
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v8 = (id)qword_1000E4128;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v38[0] = 0;
        unsigned int v16 = sub_100055404(1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v17 = v16;
        }
        else {
          unsigned int v17 = v16 & 0xFFFFFFFE;
        }
        if (v17)
        {
          LOWORD(v39) = 0;
          long long v18 = (const char *)_os_log_send_and_compose_impl();
          long long v19 = (char *)v18;
          if (v18) {
            sub_100055434(v18);
          }
        }
        else
        {
          long long v19 = 0;
        }
        free(v19);
      }
      goto LABEL_62;
    }
    unsigned int v8 = sub_10008A8B8(v6, @"UserPersonaUniqueString");
    if ([*(id *)(a1 + 24) splitUserVolumeEnabled])
    {
      id v9 = sub_1000173F4((uint64_t)NSUUID, v8);
      unsigned int v10 = sub_10008A8B8(v6, @"MKBUserSessionVolumeDeviceNode");
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      uint64_t v11 = (id)qword_1000E4128;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v38[0] = 0;
        unsigned int v12 = sub_100055404(1);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v13 = v12;
        }
        else {
          unsigned int v13 = v12 & 0xFFFFFFFE;
        }
        if (v13)
        {
          LOWORD(v39) = 0;
          unsigned int v14 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v15 = (char *)v14;
          if (v14) {
            sub_100055434(v14);
          }
        }
        else
        {
          unsigned int v15 = 0;
        }
        free(v15);
      }

      id v25 = *(id *)(a1 + 16);
      unsigned int v26 = sub_100019308((uint64_t)v25);
      id v37 = 0;
      unsigned __int8 v27 = [v26 mapVolume:v10 toSession:a3 withPersona:v9 error:&v37];
      unsigned int v22 = v37;

      if ((v27 & 1) == 0)
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        long long v32 = (id)qword_1000E4128;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v39 = 0;
          unsigned int v33 = sub_100055404(1);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v34 = v33;
          }
          else {
            unsigned int v34 = v33 & 0xFFFFFFFE;
          }
          if (v34)
          {
            LODWORD(v38[0]) = 138412290;
            *(void *)((char *)v38 + 4) = v22;
            long long v35 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v36 = (char *)v35;
            if (v35) {
              sub_100055434(v35);
            }
          }
          else
          {
            unsigned int v36 = 0;
          }
          free(v36);
        }

        goto LABEL_61;
      }
    }
    else
    {
      id v20 = sub_100018F78(*(void *)(a1 + 16));
      unsigned int v21 = [v20 setVolumePath:v7 forPersona:v8];

      if (v21)
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        unsigned int v22 = (id)qword_1000E4128;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_61;
        }
        v38[0] = 0;
        unsigned int v23 = sub_100055404(1);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v24 = v23;
        }
        else {
          unsigned int v24 = v23 & 0xFFFFFFFE;
        }
        if (v24)
        {
          LODWORD(v39) = 67109120;
          HIDWORD(v39) = v21;
          goto LABEL_45;
        }
LABEL_56:
        long long v31 = 0;
LABEL_57:
        free(v31);
LABEL_61:

LABEL_62:
        goto LABEL_63;
      }
    }
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    unsigned int v22 = (id)qword_1000E4128;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_61;
    }
    v38[0] = 0;
    unsigned int v28 = sub_100055404(1);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v29 = v28;
    }
    else {
      unsigned int v29 = v28 & 0xFFFFFFFE;
    }
    if (v29)
    {
      LOWORD(v39) = 0;
LABEL_45:
      long long v30 = (const char *)_os_log_send_and_compose_impl();
      long long v31 = (char *)v30;
      if (v30) {
        sub_100055434(v30);
      }
      goto LABEL_57;
    }
    goto LABEL_56;
  }
LABEL_63:
}

uint64_t sub_1000636A8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  unsigned int v6 = v5;
  if (!a1)
  {
    uint64_t v9 = 0;
    goto LABEL_108;
  }
  id v7 = sub_10008A720(v5, @"UserPersonaID", (id)0xFFFFFFFFLL);
  unsigned int v8 = sub_10008A720(v6, @"UserPersonaType", (id)0x3E8);
  if (v8 != 4)
  {
    unsigned int v10 = v8;
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    uint64_t v11 = (id)qword_1000E4128;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v65 = 0;
      unsigned int v12 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v12 & 0xFFFFFFFE;
      }
      if (v13)
      {
        LODWORD(v62) = 67109376;
        HIDWORD(v62) = v7;
        __int16 v63 = 1024;
        unsigned int v64 = v10;
        unsigned int v14 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v15 = (char *)v14;
        if (v14) {
          sub_100055434(v14);
        }
      }
      else
      {
        unsigned int v15 = 0;
      }
      free(v15);
    }

    if (sub_100062DF4(a1, (uint64_t)v7))
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v16 = (id)qword_1000E4128;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v62 = 0;
        unsigned int v17 = sub_100055404(1);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v18 = v17;
        }
        else {
          unsigned int v18 = v17 & 0xFFFFFFFE;
        }
        if (v18)
        {
          LODWORD(v65) = 67109120;
          HIDWORD(v65) = v7;
          long long v19 = (const char *)_os_log_send_and_compose_impl();
          id v20 = (char *)v19;
          if (v19) {
            sub_100055434(v19);
          }
        }
        else
        {
          id v20 = 0;
        }
        free(v20);
      }
      uint64_t v9 = 1;
      goto LABEL_107;
    }
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    unsigned int v21 = (id)qword_1000E4128;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v62 = 0;
      unsigned int v22 = sub_100055404(1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v23 = v22;
      }
      else {
        unsigned int v23 = v22 & 0xFFFFFFFE;
      }
      if (v23)
      {
        LODWORD(v65) = 67109120;
        HIDWORD(v65) = v7;
        unsigned int v24 = (const char *)_os_log_send_and_compose_impl();
        id v25 = (char *)v24;
        if (v24) {
          sub_100055434(v24);
        }
      }
      else
      {
        id v25 = 0;
      }
      free(v25);
    }

    if (!v10)
    {
      unsigned int v26 = [v6 objectForKeyedSubscript:@"UserPersonaObserverService"];

      if (v26)
      {
        [v6 setObject:0 forKeyedSubscript:@"UserPersonaObserverService"];
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        unsigned __int8 v27 = (id)qword_1000E4128;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v62 = 0;
          unsigned int v28 = sub_100055404(1);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
            unsigned int v29 = v28;
          }
          else {
            unsigned int v29 = v28 & 0xFFFFFFFE;
          }
          if (v29)
          {
            LOWORD(v65) = 0;
            long long v30 = (const char *)_os_log_send_and_compose_impl();
            long long v31 = (char *)v30;
            if (v30) {
              sub_100055434(v30);
            }
          }
          else
          {
            long long v31 = 0;
          }
          free(v31);
        }

        sub_10005DBE8(a1);
      }
    }
    id v61 = 0;
    uint64_t v9 = sub_100060B7C(a1, v6, &v61);
    unsigned int v16 = v61;
    if (v9)
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      long long v32 = (id)qword_1000E4128;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v62 = 0;
        unsigned int v33 = sub_100055404(1);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
          unsigned int v34 = v33;
        }
        else {
          unsigned int v34 = v33 & 0xFFFFFFFE;
        }
        if (v34)
        {
          LODWORD(v65) = 67109120;
          HIDWORD(v65) = v7;
          long long v35 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v36 = (char *)v35;
          if (v35) {
            sub_100055434(v35);
          }
        }
        else
        {
          unsigned int v36 = 0;
        }
        free(v36);
      }

      unsigned int v42 = [v6 objectForKeyedSubscript:@"MKBUserSessionVolumeDeviceNode"];

      if (!v42) {
        goto LABEL_107;
      }
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v43 = (id)qword_1000E4128;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v62 = 0;
        unsigned int v44 = sub_100055404(1);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v45 = v44;
        }
        else {
          unsigned int v45 = v44 & 0xFFFFFFFE;
        }
        if (v45)
        {
          LOWORD(v65) = 0;
          id v46 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v47 = (char *)v46;
          if (v46) {
            sub_100055434(v46);
          }
        }
        else
        {
          uint64_t v47 = 0;
        }
        free(v47);
      }

      if ([*(id *)(a1 + 24) mountVolumeWithSession:v6 mountPath:0 error:0 forPersona:1])
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        unsigned __int8 v48 = (id)qword_1000E4128;
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v62 = 0;
          unsigned int v49 = sub_100055404(1);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v50 = v49;
          }
          else {
            unsigned int v50 = v49 & 0xFFFFFFFE;
          }
          if (v50)
          {
            LOWORD(v65) = 0;
            unsigned int v51 = (const char *)_os_log_send_and_compose_impl();
            int v52 = (char *)v51;
            if (v51) {
              sub_100055434(v51);
            }
          }
          else
          {
            int v52 = 0;
          }
          free(v52);
        }

        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        unsigned int v56 = (id)qword_1000E4128;
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v62 = 0;
          unsigned int v57 = sub_100055404(1);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v58 = v57;
          }
          else {
            unsigned int v58 = v57 & 0xFFFFFFFE;
          }
          if (v58)
          {
            LOWORD(v65) = 0;
            unsigned int v59 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v60 = (char *)v59;
            if (v59) {
              sub_100055434(v59);
            }
          }
          else
          {
            unsigned int v60 = 0;
          }
          free(v60);
        }

        sub_100063130(a1, v6, a3);
        goto LABEL_107;
      }
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      id v37 = (id)qword_1000E4128;
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_106;
      }
      uint64_t v62 = 0;
      unsigned int v53 = sub_100055404(1);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v54 = v53;
      }
      else {
        unsigned int v54 = v53 & 0xFFFFFFFE;
      }
      if (v54)
      {
        LOWORD(v65) = 0;
        unsigned int v41 = (void *)_os_log_send_and_compose_impl();
        if (!v41)
        {
LABEL_105:
          free(v41);
LABEL_106:

LABEL_107:
          goto LABEL_108;
        }
LABEL_103:
        sub_100055434((const char *)v41);
        goto LABEL_105;
      }
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      id v37 = (id)qword_1000E4128;
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_106;
      }
      uint64_t v65 = 0;
      int v38 = sub_100055404(1);
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
        v38 &= ~1u;
      }
      if (v38)
      {
        uint64_t v39 = v37;
        unsigned int v40 = [v16 code];
        LODWORD(v62) = 67109376;
        HIDWORD(v62) = v7;
        __int16 v63 = 1024;
        unsigned int v64 = v40;
        unsigned int v41 = (void *)_os_log_send_and_compose_impl();

        if (!v41) {
          goto LABEL_105;
        }
        goto LABEL_103;
      }
    }
    unsigned int v41 = 0;
    goto LABEL_105;
  }
  uint64_t v9 = 1;
LABEL_108:

  return v9;
}

uint64_t sub_100064060(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  unsigned int v6 = v5;
  if (a1)
  {
    if ([v5 count])
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      id v7 = (id)qword_1000E4128;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v24 = 0;
        unsigned int v8 = sub_100055404(1);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
          unsigned int v9 = v8;
        }
        else {
          unsigned int v9 = v8 & 0xFFFFFFFE;
        }
        if (v9)
        {
          __int16 v23 = 0;
          unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v11 = (char *)v10;
          if (v10) {
            sub_100055434(v10);
          }
        }
        else
        {
          uint64_t v11 = 0;
        }
        free(v11);
      }

      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      id v13 = v6;
      id v14 = [v13 countByEnumeratingWithState:&v19 objects:v25 count:16];
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = *(void *)v20;
        LODWORD(v12) = 1;
        do
        {
          for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v20 != v16) {
              objc_enumerationMutation(v13);
            }
            uint64_t v12 = sub_1000636A8(a1, *(void **)(*((void *)&v19 + 1) + 8 * i), a3) & v12;
          }
          id v15 = [v13 countByEnumeratingWithState:&v19 objects:v25 count:16];
        }
        while (v15);
      }
      else
      {
        uint64_t v12 = 1;
      }
    }
    else
    {
      uint64_t v12 = 1;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_100064278(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = a1[4];
    id v7 = [v6 userPersonas];
    unsigned int v8 = [v7 objectForKeyedSubscript:v5];

    if (!v8)
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v9 = (id)qword_1000E4128;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v10 = sub_100055404(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v11 = v10;
        }
        else {
          unsigned int v11 = v10 & 0xFFFFFFFE;
        }
        if (v11)
        {
          uint64_t v12 = (const char *)_os_log_send_and_compose_impl();
          id v13 = (char *)v12;
          if (v12) {
            sub_100055434(v12);
          }
        }
        else
        {
          id v13 = 0;
        }
        free(v13);
      }

      sub_10005D1C0(a1, v5);
    }
    id v14 = a1[4];
    id v15 = [v14 userPersonas];
    uint64_t v16 = [v15 objectForKeyedSubscript:v5];

    if (sub_100064060((uint64_t)a1, v16, a3))
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v17 = (id)qword_1000E4128;
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_35;
      }
      unsigned int v18 = sub_100055404(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v19 = v18;
      }
      else {
        unsigned int v19 = v18 & 0xFFFFFFFE;
      }
      if (v19) {
        goto LABEL_31;
      }
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v17 = (id)qword_1000E4128;
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_35;
      }
      unsigned int v20 = sub_100055404(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = v20 & 0xFFFFFFFE;
      }
      if (v21)
      {
LABEL_31:
        long long v22 = (const char *)_os_log_send_and_compose_impl();
        __int16 v23 = (char *)v22;
        if (v22) {
          sub_100055434(v22);
        }
        goto LABEL_34;
      }
    }
    __int16 v23 = 0;
LABEL_34:
    free(v23);
LABEL_35:

    sub_1000619C4(a1, v16, v5);
  }
}

BOOL sub_1000645CC(uint64_t a1, int a2)
{
  return a1 && a2 == 4;
}

uint64_t sub_1000645DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1)
  {
    uint64_t v19 = 0;
    goto LABEL_94;
  }
  unsigned int v5 = sub_10008A720(v3, @"UserPersonaType", (id)0x3E8);
  id v6 = &qword_1000E4000;
  if (v5 == 4)
  {
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    id v7 = (id)qword_1000E4128;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v47 = 0;
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9)
      {
        LOWORD(v50) = 0;
        unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
      }
      else
      {
        unsigned int v11 = 0;
      }
      free(v11);
    }
    uint64_t v19 = 1;
    goto LABEL_93;
  }
  unsigned int v12 = v5;
  unsigned int v13 = sub_10008A720(v4, @"UserPersonaID", (id)0xFFFFFFFFLL);
  if (qword_1000E4130 != -1) {
    dispatch_once(&qword_1000E4130, &stru_1000D57B8);
  }
  id v14 = (id)qword_1000E4128;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v50 = 0;
    unsigned int v15 = sub_100055404(1);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v16 = v15;
    }
    else {
      unsigned int v16 = v15 & 0xFFFFFFFE;
    }
    if (v16)
    {
      LODWORD(v47) = 67109376;
      HIDWORD(v47) = v13;
      __int16 v48 = 1024;
      unsigned int v49 = v12;
      unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v18 = (char *)v17;
      if (v17) {
        sub_100055434(v17);
      }
    }
    else
    {
      unsigned int v18 = 0;
    }
    free(v18);
  }

  id v46 = 0;
  uint64_t v19 = sub_10006174C(a1, v4, &v46);
  id v7 = v46;
  if (v19)
  {
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    unsigned int v20 = (id)qword_1000E4128;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v47 = 0;
      unsigned int v21 = sub_100055404(1);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v22 = v21;
      }
      else {
        unsigned int v22 = v21 & 0xFFFFFFFE;
      }
      if (v22)
      {
        LODWORD(v50) = 67109120;
        HIDWORD(v50) = v13;
        __int16 v23 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v24 = (void *)v23;
        if (v23) {
          sub_100055434(v23);
        }
        goto LABEL_46;
      }
LABEL_45:
      uint64_t v24 = 0;
LABEL_46:
      free(v24);
    }
  }
  else
  {
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    unsigned int v20 = (id)qword_1000E4128;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v50 = 0;
      int v25 = sub_100055404(1);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        v25 &= ~1u;
      }
      if (v25)
      {
        unsigned int v26 = v20;
        unsigned int v27 = [v7 code];
        LODWORD(v47) = 67109376;
        HIDWORD(v47) = v13;
        __int16 v48 = 1024;
        unsigned int v49 = v27;
        uint64_t v24 = (void *)_os_log_send_and_compose_impl();

        if (v24) {
          sub_100055434((const char *)v24);
        }
        id v6 = &qword_1000E4000;
        goto LABEL_46;
      }
      goto LABEL_45;
    }
  }

  if ((v12 & 0xFFFFFFFB) != 2) {
    goto LABEL_93;
  }
  if (qword_1000E4130 != -1) {
    dispatch_once(&qword_1000E4130, &stru_1000D57B8);
  }
  unsigned int v28 = (id)v6[37];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v47 = 0;
    unsigned int v29 = sub_100055404(1);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v30 = v29;
    }
    else {
      unsigned int v30 = v29 & 0xFFFFFFFE;
    }
    if (v30)
    {
      LOWORD(v50) = 0;
      long long v31 = (const char *)_os_log_send_and_compose_impl();
      long long v32 = (char *)v31;
      if (v31) {
        sub_100055434(v31);
      }
    }
    else
    {
      long long v32 = 0;
    }
    free(v32);
  }

  if (![*(id *)(a1 + 24) isVolumeMountedWithSession:v4 fsid:0]) {
    goto LABEL_93;
  }
  if (qword_1000E4130 != -1) {
    dispatch_once(&qword_1000E4130, &stru_1000D57B8);
  }
  unsigned int v33 = (id)v6[37];
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v47 = 0;
    unsigned int v34 = sub_100055404(1);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v35 = v34;
    }
    else {
      unsigned int v35 = v34 & 0xFFFFFFFE;
    }
    if (v35)
    {
      LOWORD(v50) = 0;
      unsigned int v36 = (const char *)_os_log_send_and_compose_impl();
      id v37 = (char *)v36;
      if (v36) {
        sub_100055434(v36);
      }
    }
    else
    {
      id v37 = 0;
    }
    free(v37);
  }

  if ([*(id *)(a1 + 24) unmountVolumeWithSession:v4 mountPath:0 error:0])
  {
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    int v38 = (id)v6[37];
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_92;
    }
    uint64_t v47 = 0;
    unsigned int v39 = sub_100055404(1);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v40 = v39;
    }
    else {
      unsigned int v40 = v39 & 0xFFFFFFFE;
    }
    if (v40)
    {
      LOWORD(v50) = 0;
      goto LABEL_88;
    }
  }
  else
  {
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    int v38 = (id)v6[37];
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_92;
    }
    uint64_t v47 = 0;
    unsigned int v41 = sub_100055404(1);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v42 = v41;
    }
    else {
      unsigned int v42 = v41 & 0xFFFFFFFE;
    }
    if (v42)
    {
      LOWORD(v50) = 0;
LABEL_88:
      unsigned int v43 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v44 = (char *)v43;
      if (v43) {
        sub_100055434(v43);
      }
      goto LABEL_91;
    }
  }
  unsigned int v44 = 0;
LABEL_91:
  free(v44);
LABEL_92:

LABEL_93:
LABEL_94:

  return v19;
}

uint64_t sub_100064D54(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1)
  {
    uint64_t v34 = 0;
    goto LABEL_69;
  }
  if (qword_1000E4130 != -1) {
    dispatch_once(&qword_1000E4130, &stru_1000D57B8);
  }
  id v4 = (id)qword_1000E4128;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v40 = 0;
    unsigned int v5 = sub_100055404(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = v5 & 0xFFFFFFFE;
    }
    if (v6)
    {
      LODWORD(v42[0]) = 138412290;
      *(void *)((char *)v42 + 4) = v3;
      id v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  id v9 = *(id *)(a1 + 32);
  unsigned int v10 = [v9 userPersonas];
  unsigned int v11 = [v10 objectForKeyedSubscript:v3];

  if (!v11)
  {
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    unsigned int v18 = (id)qword_1000E4128;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_64;
    }
    uint64_t v40 = 0;
    unsigned int v19 = sub_100055404(1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = v19 & 0xFFFFFFFE;
    }
    if (v20)
    {
      LODWORD(v42[0]) = 138412290;
      *(void *)((char *)v42 + 4) = v3;
      goto LABEL_60;
    }
LABEL_62:
    unsigned int v33 = 0;
LABEL_63:
    free(v33);
    goto LABEL_64;
  }
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v12 = v11;
  id v13 = [v12 countByEnumeratingWithState:&v36 objects:v41 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v37;
    int v16 = 1;
    do
    {
      for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v37 != v15) {
          objc_enumerationMutation(v12);
        }
        v16 &= sub_1000645DC(a1, *(void **)(*((void *)&v36 + 1) + 8 * i));
      }
      id v14 = [v12 countByEnumeratingWithState:&v36 objects:v41 count:16];
    }
    while (v14);
  }
  else
  {
    int v16 = 1;
  }

  if (qword_1000E4130 != -1) {
    dispatch_once(&qword_1000E4130, &stru_1000D57B8);
  }
  unsigned int v21 = (id)qword_1000E4128;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v42[0] = 0;
    unsigned int v22 = sub_100055404(1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v23 = v22;
    }
    else {
      unsigned int v23 = v22 & 0xFFFFFFFE;
    }
    if (v23)
    {
      LOWORD(v40) = 0;
      uint64_t v24 = (const char *)_os_log_send_and_compose_impl();
      int v25 = (char *)v24;
      if (v24) {
        sub_100055434(v24);
      }
    }
    else
    {
      int v25 = 0;
    }
    free(v25);
  }

  sub_10005DBE8(a1);
  if (v16)
  {
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    unsigned int v18 = (id)qword_1000E4128;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v42[0] = 0;
      unsigned int v26 = sub_100055404(1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v27 = v26;
      }
      else {
        unsigned int v27 = v26 & 0xFFFFFFFE;
      }
      if (v27)
      {
        LOWORD(v40) = 0;
        unsigned int v28 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v29 = (char *)v28;
        if (v28) {
          sub_100055434(v28);
        }
      }
      else
      {
        unsigned int v29 = 0;
      }
      free(v29);
    }
    uint64_t v34 = 1;
    goto LABEL_68;
  }
  if (qword_1000E4130 != -1) {
    dispatch_once(&qword_1000E4130, &stru_1000D57B8);
  }
  unsigned int v18 = (id)qword_1000E4128;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v42[0] = 0;
    unsigned int v30 = sub_100055404(1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v31 = v30;
    }
    else {
      unsigned int v31 = v30 & 0xFFFFFFFE;
    }
    if (v31)
    {
      LOWORD(v40) = 0;
LABEL_60:
      long long v32 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v33 = (char *)v32;
      if (v32) {
        sub_100055434(v32);
      }
      goto LABEL_63;
    }
    goto LABEL_62;
  }
LABEL_64:
  uint64_t v34 = 0;
LABEL_68:

LABEL_69:
  return v34;
}

void sub_10006529C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v5 = (id)qword_1000E4128;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = 0;
        int v6 = sub_100055404(1);
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          v6 &= ~1u;
        }
        if (v6)
        {
          id v7 = v5;
          *(_DWORD *)unsigned int v31 = 134217984;
          *(void *)&v31[4] = [v4 count];
          unsigned int v8 = (char *)_os_log_send_and_compose_impl();

          if (v8) {
            sub_100055434(v8);
          }
        }
        else
        {
          unsigned int v8 = 0;
        }
        free(v8);
      }

      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      id v9 = v4;
      id v14 = [v9 countByEnumeratingWithState:&v26 objects:v32 count:16];
      if (v14)
      {
        id v15 = v14;
        int v25 = v4;
        int v16 = 0;
        uint64_t v17 = *(void *)v27;
        do
        {
          unsigned int v18 = 0;
          do
          {
            if (*(void *)v27 != v17) {
              objc_enumerationMutation(v9);
            }
            uint64_t v19 = *(void *)(*((void *)&v26 + 1) + 8 * (void)v18);
            if (qword_1000E4130 != -1) {
              dispatch_once(&qword_1000E4130, &stru_1000D57B8);
            }
            unsigned int v20 = (id)qword_1000E4128;
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v30 = 0;
              unsigned int v21 = sub_100055404(1);
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v22 = v21;
              }
              else {
                unsigned int v22 = v21 & 0xFFFFFFFE;
              }
              if (v22)
              {
                *(_DWORD *)unsigned int v31 = 67109378;
                *(_DWORD *)&v31[4] = v16 + v18;
                *(_WORD *)&v31[8] = 2112;
                *(void *)&v31[10] = v19;
                unsigned int v23 = (const char *)_os_log_send_and_compose_impl();
                uint64_t v24 = (char *)v23;
                if (v23) {
                  sub_100055434(v23);
                }
              }
              else
              {
                uint64_t v24 = 0;
              }
              free(v24);
            }

            unsigned int v18 = (char *)v18 + 1;
          }
          while (v15 != v18);
          id v15 = [v9 countByEnumeratingWithState:&v26 objects:v32 count:16];
          v16 += (int)v18;
        }
        while (v15);
        id v4 = v25;
      }
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      id v9 = (id)qword_1000E4128;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)unsigned int v31 = 0;
        unsigned int v10 = sub_100055404(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v11 = v10;
        }
        else {
          unsigned int v11 = v10 & 0xFFFFFFFE;
        }
        if (v11)
        {
          LOWORD(v30) = 0;
          id v12 = (const char *)_os_log_send_and_compose_impl();
          id v13 = (char *)v12;
          if (v12) {
            sub_100055434(v12);
          }
        }
        else
        {
          id v13 = 0;
        }
        free(v13);
      }
    }
  }
}

uint64_t sub_100065660(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = [*(id *)(a1 + 32) userPersonas];
  BOOL v2 = [v1 objectForKeyedSubscript:@"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF"];

  if (v2)
  {
    if ((unint64_t)[v2 count] <= 1)
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      id v3 = (id)qword_1000E4128;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = sub_100055404(1);
        if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
          v4 &= ~1u;
        }
        if (v4)
        {
          unsigned int v5 = v3;
          [v2 count];
          int v6 = (char *)_os_log_send_and_compose_impl();

          if (v6) {
            sub_100055434(v6);
          }
        }
        else
        {
          int v6 = 0;
        }
        free(v6);
      }
      uint64_t v7 = 1;
      goto LABEL_50;
    }
    unsigned int v8 = [v2 objectAtIndexedSubscript:0];
    id v3 = [v8 objectForKeyedSubscript:@"UserPersonaType"];

    id v9 = [v2 objectAtIndexedSubscript:1];
    unsigned int v10 = [v9 objectForKeyedSubscript:@"UserPersonaType"];

    objc_opt_class();
    if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass()))
    {
      unsigned int v11 = [v3 unsignedIntValue];
      unsigned int v12 = [v10 unsignedIntValue];
      if (v11 == 3 || v12 == 3)
      {
        uint64_t v7 = 0;
        if (v11 == 5 || v12 == 5) {
          goto LABEL_49;
        }
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        id v13 = (id)qword_1000E4128;
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
LABEL_48:

          uint64_t v7 = 1;
LABEL_49:

LABEL_50:
          goto LABEL_51;
        }
        unsigned int v20 = sub_100055404(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v21 = v20;
        }
        else {
          unsigned int v21 = v20 & 0xFFFFFFFE;
        }
        if (v21) {
          goto LABEL_32;
        }
      }
      else
      {
        if (qword_1000E4130 != -1) {
          dispatch_once(&qword_1000E4130, &stru_1000D57B8);
        }
        id v13 = (id)qword_1000E4128;
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_48;
        }
        unsigned int v14 = sub_100055404(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v15 = v14;
        }
        else {
          unsigned int v15 = v14 & 0xFFFFFFFE;
        }
        if (v15) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      id v13 = (id)qword_1000E4128;
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_48;
      }
      unsigned int v16 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
LABEL_32:
        unsigned int v18 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v19 = (char *)v18;
        if (v18) {
          sub_100055434(v18);
        }
        goto LABEL_47;
      }
    }
    uint64_t v19 = 0;
LABEL_47:
    free(v19);
    goto LABEL_48;
  }
  uint64_t v7 = 1;
LABEL_51:

  return v7;
}

void sub_100065AE0(id *a1)
{
  if (a1)
  {
    if (qword_1000E4130 != -1) {
      dispatch_once(&qword_1000E4130, &stru_1000D57B8);
    }
    BOOL v2 = (id)qword_1000E4128;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4)
      {
        unsigned int v5 = (const char *)_os_log_send_and_compose_impl();
        int v6 = (char *)v5;
        if (v5) {
          sub_100055434(v5);
        }
      }
      else
      {
        int v6 = 0;
      }
      free(v6);
    }

    uint64_t v7 = [a1[4] userPersonas];
    unsigned int v8 = [v7 objectForKeyedSubscript:@"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF"];

    if (!v8)
    {
      unsigned int v8 = +[NSMutableArray array];
      id v9 = [a1[4] userPersonas];
      [v9 setObject:v8 forKeyedSubscript:@"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF"];
    }
    unsigned int v10 = sub_10005D714(a1, v8, 3, @"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF");
    if (v10)
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v11 = (id)qword_1000E4128;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v12 = sub_100055404(1);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v13 = v12;
        }
        else {
          unsigned int v13 = v12 & 0xFFFFFFFE;
        }
        if (v13) {
          goto LABEL_31;
        }
        goto LABEL_33;
      }
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v11 = (id)qword_1000E4128;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v14 = sub_100055404(1);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v15 = v14;
        }
        else {
          unsigned int v15 = v14 & 0xFFFFFFFE;
        }
        if (v15)
        {
LABEL_31:
          unsigned int v16 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v17 = (char *)v16;
          if (v16) {
            sub_100055434(v16);
          }
          goto LABEL_34;
        }
LABEL_33:
        unsigned int v17 = 0;
LABEL_34:
        free(v17);
      }
    }

    unsigned int v18 = sub_10005D714(a1, v8, 5, @"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF");

    if (v18)
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      uint64_t v19 = (id)qword_1000E4128;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_55;
      }
      unsigned int v20 = sub_100055404(1);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = v20 & 0xFFFFFFFE;
      }
      if (v21) {
        goto LABEL_51;
      }
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      uint64_t v19 = (id)qword_1000E4128;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_55;
      }
      unsigned int v22 = sub_100055404(1);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v23 = v22;
      }
      else {
        unsigned int v23 = v22 & 0xFFFFFFFE;
      }
      if (v23)
      {
LABEL_51:
        uint64_t v24 = (const char *)_os_log_send_and_compose_impl();
        int v25 = (char *)v24;
        if (v24) {
          sub_100055434(v24);
        }
        goto LABEL_54;
      }
    }
    int v25 = 0;
LABEL_54:
    free(v25);
LABEL_55:

    sub_10005DBE8((uint64_t)a1);
  }
}

void sub_100065F58(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = [*(id *)(a1 + 32) userPersonas];
    unsigned int v3 = [v2 objectForKeyedSubscript:@"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF"];

    if (v3)
    {
      if (sub_100064060(a1, v3, 0))
      {
LABEL_24:

        return;
      }
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v4 = (id)qword_1000E4128;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
LABEL_23:

        goto LABEL_24;
      }
      unsigned int v5 = sub_100055404(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v6 = v5;
      }
      else {
        unsigned int v6 = v5 & 0xFFFFFFFE;
      }
      if (v6) {
        goto LABEL_19;
      }
    }
    else
    {
      if (qword_1000E4130 != -1) {
        dispatch_once(&qword_1000E4130, &stru_1000D57B8);
      }
      unsigned int v4 = (id)qword_1000E4128;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
      unsigned int v7 = sub_100055404(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v8 = v7;
      }
      else {
        unsigned int v8 = v7 & 0xFFFFFFFE;
      }
      if (v8)
      {
LABEL_19:
        id v9 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v10 = (char *)v9;
        if (v9) {
          sub_100055434(v9);
        }
        goto LABEL_22;
      }
    }
    unsigned int v10 = 0;
LABEL_22:
    free(v10);
    goto LABEL_23;
  }
}

void sub_10006613C(uint64_t a1, void *a2)
{
  if (a1)
  {
    unsigned int v3 = [a2 objectForKeyedSubscript:@"MKBUserSessionHomeDir"];
    if (v3)
    {
      if (qword_1000E4120 != -1) {
        dispatch_once(&qword_1000E4120, &stru_1000D5798);
      }
      unsigned int v4 = (id)qword_1000E4118;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v41 = 0;
        unsigned int v5 = sub_100055404(0);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
          unsigned int v6 = v5;
        }
        else {
          unsigned int v6 = v5 & 0xFFFFFFFE;
        }
        if (v6)
        {
          *(_DWORD *)unsigned int v43 = 138543362;
          *(void *)&int v43[4] = v3;
          LODWORD(v36) = 12;
          unsigned int v35 = v43;
          unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v8 = (char *)v7;
          if (v7) {
            sub_100055434(v7);
          }
        }
        else
        {
          unsigned int v8 = 0;
        }
        free(v8);
      }

      id v14 = *(id *)(a1 + 16);
      unsigned int v15 = sub_1000186EC((uint64_t)v14);
      id v9 = [v15 pidsUsingVolumeAtPath:v3 error:0];

      if (v9)
      {
        if (qword_1000E4120 != -1) {
          dispatch_once(&qword_1000E4120, &stru_1000D5798);
        }
        unsigned int v16 = (id)qword_1000E4118;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          uint64_t v41 = 0;
          int v17 = sub_100055404(0);
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_INFO)) {
            v17 &= ~1u;
          }
          if (v17)
          {
            unsigned int v18 = v16;
            id v19 = [v9 count];
            *(_DWORD *)unsigned int v43 = 134217984;
            *(void *)&int v43[4] = v19;
            LODWORD(v36) = 12;
            unsigned int v35 = v43;
            unsigned int v20 = (char *)_os_log_send_and_compose_impl();

            if (v20) {
              sub_100055434(v20);
            }
          }
          else
          {
            unsigned int v20 = 0;
          }
          free(v20);
        }

        long long v26 = sub_1000186EC(*(void *)(a1 + 16));
        unsigned int v27 = [v26 currentPID];

        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        id v9 = v9;
        id v28 = [v9 countByEnumeratingWithState:&v37 objects:v42 count:16];
        if (v28)
        {
          id v29 = v28;
          uint64_t v30 = *(void *)v38;
          do
          {
            for (uint64_t i = 0; i != v29; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v38 != v30) {
                objc_enumerationMutation(v9);
              }
              id v32 = [*(id *)(*((void *)&v37 + 1) + 8 * i) intValue:v35, v36, (void)v37];
              if ((v32 & 0x80000000) == 0)
              {
                id v33 = v32;
                if (v32 != v27)
                {
                  uint64_t v34 = sub_1000186EC(*(void *)(a1 + 16));
                  [v34 terminatePID:v33 withReasonNamespace:26 reasonCode:4008636142 reasonString:@"This process has files open on a profile volume that is being uninstalled" error:0];
                }
              }
            }
            id v29 = [v9 countByEnumeratingWithState:&v37 objects:v42 count:16];
          }
          while (v29);
        }
      }
      else
      {
        if (qword_1000E4120 != -1) {
          dispatch_once(&qword_1000E4120, &stru_1000D5798);
        }
        unsigned int v21 = (id)qword_1000E4118;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(void *)unsigned int v43 = 0;
          unsigned int v22 = sub_100055404(0);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
            unsigned int v23 = v22;
          }
          else {
            unsigned int v23 = v22 & 0xFFFFFFFE;
          }
          if (v23)
          {
            LOWORD(v41) = 0;
            uint64_t v24 = (const char *)_os_log_send_and_compose_impl();
            int v25 = (char *)v24;
            if (v24) {
              sub_100055434(v24);
            }
          }
          else
          {
            int v25 = 0;
          }
          free(v25);
        }
      }
    }
    else
    {
      if (qword_1000E4120 != -1) {
        dispatch_once(&qword_1000E4120, &stru_1000D5798);
      }
      id v9 = (id)qword_1000E4118;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(void *)unsigned int v43 = 0;
        unsigned int v10 = sub_100055404(0);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          unsigned int v11 = v10;
        }
        else {
          unsigned int v11 = v10 & 0xFFFFFFFE;
        }
        if (v11)
        {
          LOWORD(v41) = 0;
          unsigned int v12 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v13 = (char *)v12;
          if (v12) {
            sub_100055434(v12);
          }
        }
        else
        {
          unsigned int v13 = 0;
        }
        free(v13);
      }
    }
  }
}

void sub_1000666AC(id a1)
{
  qword_1000E4118 = (uint64_t)os_log_create(off_1000E33D8, "persona");

  _objc_release_x1();
}

void sub_1000666F4(id a1)
{
  qword_1000E4128 = (uint64_t)os_log_create(off_1000E33D8, "legacy");

  _objc_release_x1();
}

id *sub_10006673C(uint64_t a1, void *a2, void *a3, void *a4, int a5)
{
  id v8 = a2;
  self;
  id v9 = sub_1000667C4((id *)[UMDRotatingLog alloc], v8, a3, a4, a5);

  return v9;
}

id *sub_1000667C4(id *a1, void *a2, void *a3, void *a4, int a5)
{
  id v10 = a2;
  if (a1)
  {
    v17.receiver = a1;
    v17.super_class = (Class)UMDRotatingLog;
    unsigned int v11 = (id *)[super init];
    if (!v11) {
      sub_1000B08C8();
    }
    a1 = v11;

    objc_storeStrong(a1 + 3, a2);
    unsigned int v12 = sub_1000186EC((uint64_t)v10);
    *((_DWORD *)a1 + 2) = [v12 currentPID];

    unsigned int v13 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v14 = dispatch_queue_create("com.apple.usermanagerd.RotatingLog", v13);
    id v15 = a1[4];
    a1[4] = v14;

    a1[5] = a3;
    a1[6] = a4;
    *((_DWORD *)a1 + 3) = -1;
    *((_DWORD *)a1 + 4) = a5;
  }

  return a1;
}

void sub_10006694C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    BOOL v2 = *(NSObject **)(a1 + 32);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000669C8;
    v3[3] = &unk_1000D57F8;
    void v3[4] = a1;
    void v3[5] = a2;
    dispatch_sync(v2, v3);
  }
}

void sub_1000669C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    goto LABEL_9;
  }
  if (*(_DWORD *)(v2 + 12) == -1)
  {
    unsigned int v3 = +[NSString stringWithFormat:@"%s.0", *(void *)(v2 + 40)];
    unsigned int v4 = *(void **)(a1 + 32);
    if (v4) {
      unsigned int v4 = (void *)v4[3];
    }
    unsigned int v5 = v4;
    unsigned int v6 = sub_100018F6C((uint64_t)v5);
    unsigned int v7 = [v6 openFileForAppendingAtPath:v3 error:0];
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      *(_DWORD *)(v8 + 12) = v7;
    }

    uint64_t v2 = *(void *)(a1 + 32);
    if (!v2) {
      goto LABEL_9;
    }
  }
  if (*(_DWORD *)(v2 + 12) != -1)
  {
LABEL_9:
    ts.tv_sec = 0;
    ts.tv_nsec = 0;
    timespec_get(&ts, 1);
    memset(&v18, 0, sizeof(v18));
    gmtime_r(&ts.tv_sec, &v18);
    strftime(v20, 0x64uLL, "%F %T", &v18);
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      uint64_t v10 = *(unsigned int *)(v9 + 8);
    }
    else {
      uint64_t v10 = 0;
    }
    unsigned int v11 = +[NSString stringWithFormat:@"%s.%06ldZ [%d] (%p) %s\n", v20, ts.tv_nsec / 1000, v10, pthread_self(), *(void *)(a1 + 40)];
    unsigned int v12 = *(void **)(a1 + 32);
    if (v12) {
      unsigned int v12 = (void *)v12[3];
    }
    unsigned int v13 = v12;
    dispatch_queue_t v14 = sub_100018F6C((uint64_t)v13);
    id v15 = v14;
    uint64_t v16 = *(void *)(a1 + 32);
    if (v16) {
      uint64_t v17 = *(unsigned int *)(v16 + 12);
    }
    else {
      uint64_t v17 = 0;
    }
    [v14 writeToFileWithDescriptor:v17 string:v11 error:0];

    if (sub_100066BE4(*(void *)(a1 + 32))) {
      sub_100066C50(*(void *)(a1 + 32));
    }
  }
}

uint64_t sub_100066BCC(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 12);
  }
  return result;
}

uint64_t sub_100066BD8(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 12) = a2;
  }
  return result;
}

BOOL sub_100066BE4(BOOL result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = sub_100018F6C(*(void *)(result + 24));
    uint64_t v3 = (uint64_t)[v2 sizeOfFileWithDescriptor:*(unsigned int *)(v1 + 12) error:0];

    return (v3 & 0x8000000000000000) == 0 && v3 >= *(void *)(v1 + 48);
  }
  return result;
}

void sub_100066C50(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_100018F6C(*(void *)(a1 + 24));
    [v2 closeFileWithDescriptor:*(unsigned int *)(a1 + 12)];

    *(_DWORD *)(a1 + 12) = -1;
    uint64_t v3 = (*(_DWORD *)(a1 + 16) - 1);
    if ((int)v3 >= 0)
    {
      do
      {
        int v4 = v3;
        unsigned int v5 = +[NSString stringWithFormat:@"%s.%d", *(void *)(a1 + 40), v3];
        unsigned int v6 = +[NSString stringWithFormat:@"%s.%d", *(void *)(a1 + 40), (v4 + 1)];
        unsigned int v7 = sub_100018F6C(*(void *)(a1 + 24));
        [v7 renameFileFromPath:v5 toPath:v6 error:0];

        uint64_t v3 = (v4 - 1);
      }
      while (v4);
    }
  }
}

uint64_t sub_100066D48(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

uint64_t sub_100066D54(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 40) = a2;
  }
  return result;
}

uint64_t sub_100066D60(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 48) = a2;
  }
  return result;
}

uint64_t sub_100066D6C(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_100066EF8()
{
  objc_opt_class();
  qword_1000E4138 = objc_opt_new();

  return _objc_release_x1();
}

void sub_100067A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100067A84(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100067A94(uint64_t a1)
{
}

void sub_100067A9C(uint64_t a1)
{
  int v21 = 0;
  uint64_t v2 = sub_100024618(*(const __CFDictionary **)(a1 + 32), *(UInt8 **)(a1 + 64), *(void *)(a1 + 72), &v21);
  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 40) externalizeUserDictionary:v2];
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
    unsigned int v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
  unsigned int v6 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (v6)
  {
    unsigned int v7 = [v6 objectForKey:kUMUserSessionIDKey];
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v8 = (id)qword_1000E4158;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = sub_100055404(1);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        v9 &= ~1u;
      }
      if (v9)
      {
        uint64_t v10 = v8;
        unsigned int v11 = [v7 intValue];
        int v22 = 67109120;
        int v23 = v11;
        unsigned int v12 = (char *)_os_log_send_and_compose_impl();

        if (v12) {
          sub_100055434(v12);
        }
      }
      else
      {
        unsigned int v12 = 0;
      }
      free(v12);
    }
  }
  if (v21)
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v13 = (id)qword_1000E4158;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        int v22 = 67109120;
        int v23 = v21;
        uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v17 = (char *)v16;
        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {
        uint64_t v17 = 0;
      }
      free(v17);
    }

    uint64_t v18 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v21 userInfo:0];
    uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
    unsigned int v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;
  }
}

void sub_100068170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000681A0(uint64_t a1)
{
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  uint64_t v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      unsigned int v5 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  uint64_t v7 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:45 userInfo:0];
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  int v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_100068CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_100068D58(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v2)
  {
    unsigned int v3 = [v2 objectForKey:kUMUserSessionIDKey];
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v4 = (id)qword_1000E4158;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = sub_100055404(1);
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        v5 &= ~1u;
      }
      if (v5)
      {
        unsigned int v6 = v4;
        [v3 intValue];
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();

        if (v7) {
          sub_100055434(v7);
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
      free(v7);
    }
  }
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  uint64_t v8 = (id)qword_1000E4158;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v9 = sub_100055404(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v10 = v9;
    }
    else {
      unsigned int v10 = v9 & 0xFFFFFFFE;
    }
    if (v10)
    {
      unsigned int v11 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v12 = (char *)v11;
      if (v11) {
        sub_100055434(v11);
      }
    }
    else
    {
      unsigned int v12 = 0;
    }
    free(v12);
  }

  uint64_t v13 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:45 userInfo:0];
  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
  unsigned int v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;
}

void sub_100069950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000699AC(void *a1)
{
  int v9 = 0;
  if ((sub_100022720(a1[4], a1[6], a1[7], &v9) & 1) == 0)
  {
    uint64_t v2 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v9 userInfo:0];
    uint64_t v3 = *(void *)(a1[5] + 8);
    unsigned int v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;
  }
  vm_address_t v5 = a1[8];
  if (v5)
  {
    vm_map_t v6 = mach_task_self_;
    vm_size_t v7 = vm_page_size;
    if (vm_page_size >= a1[7]) {
      vm_size_t v8 = a1[7];
    }
    else {
      vm_size_t v8 = vm_page_size;
    }
    memset_s((void *)a1[8], v8, 0, v8);
    vm_deallocate(v6, v5, v7);
  }
}

void sub_100069FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10006A048(void *a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)sub_100019FA4();
  if (v2)
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v3 = (id)qword_1000E4158;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v4 = sub_100055404(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v5 = v4;
      }
      else {
        unsigned int v5 = v4 & 0xFFFFFFFE;
      }
      if (v5)
      {
        vm_map_t v6 = (const char *)_os_log_send_and_compose_impl();
        vm_size_t v7 = (char *)v6;
        if (v6) {
          sub_100055434(v6);
        }
      }
      else
      {
        vm_size_t v7 = 0;
      }
      free(v7);
    }

    *(void *)(*(void *)(a1[4] + 8) + 24) = sub_100088788(v2, kUMUserSessionUUIDKey);
    if (*(void *)(*(void *)(a1[4] + 8) + 24))
    {
      if (qword_1000E4160 != -1) {
        dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
      }
      uint64_t v13 = (id)qword_1000E4158;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v14 = sub_100055404(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v15 = v14;
        }
        else {
          unsigned int v15 = v14 & 0xFFFFFFFE;
        }
        if (v15)
        {
          uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v17 = (char *)v16;
          if (v16) {
            sub_100055434(v16);
          }
        }
        else
        {
          uint64_t v17 = 0;
        }
        free(v17);
      }

      CFRetain(*(CFTypeRef *)(*(void *)(a1[4] + 8) + 24));
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
    }
    else
    {
      if (qword_1000E4160 != -1) {
        dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
      }
      uint64_t v18 = (id)qword_1000E4158;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v19 = sub_100055404(1);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v20 = v19;
        }
        else {
          unsigned int v20 = v19 & 0xFFFFFFFE;
        }
        if (v20)
        {
          int v21 = (const char *)_os_log_send_and_compose_impl();
          int v22 = (char *)v21;
          if (v21) {
            sub_100055434(v21);
          }
        }
        else
        {
          int v22 = 0;
        }
        free(v22);
      }
    }
    if (*(void *)(*(void *)(a1[4] + 8) + 24)) {
      goto LABEL_63;
    }
  }
  else
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    vm_size_t v8 = (id)qword_1000E4158;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v9 = sub_100055404(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v10 = v9;
      }
      else {
        unsigned int v10 = v9 & 0xFFFFFFFE;
      }
      if (v10)
      {
        unsigned int v11 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v12 = (char *)v11;
        if (v11) {
          sub_100055434(v11);
        }
      }
      else
      {
        unsigned int v12 = 0;
      }
      free(v12);
    }
  }
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  int v23 = (id)qword_1000E4158;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v24 = sub_100055404(1);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = v24 & 0xFFFFFFFE;
    }
    if (v25)
    {
      long long v26 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v27 = (char *)v26;
      if (v26) {
        sub_100055434(v26);
      }
    }
    else
    {
      uint64_t v27 = 0;
    }
    free(v27);
  }

  uint64_t v28 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:2 userInfo:0];
  uint64_t v29 = *(void *)(a1[6] + 8);
  uint64_t v30 = *(void **)(v29 + 40);
  *(void *)(v29 + 40) = v28;

  if (v2) {
LABEL_63:
  }
    CFRelease(v2);
}

void sub_10006A51C(uint64_t a1)
{
  int v19 = 0;
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  CFDictionaryRef v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      LOWORD(v20) = 0;
      unsigned int v5 = (const char *)_os_log_send_and_compose_impl();
      vm_map_t v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      vm_map_t v6 = 0;
    }
    free(v6);
  }

  if (sub_100022734(*(const __CFString **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), &v19))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    vm_size_t v7 = (id)qword_1000E4158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9)
      {
        LOWORD(v20) = 0;
        unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
      }
      else
      {
        unsigned int v11 = 0;
      }
      free(v11);
    }
  }
  else
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v12 = (id)qword_1000E4158;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14)
      {
        int v20 = 67109120;
        int v21 = v19;
        unsigned int v15 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v16 = (char *)v15;
        if (v15) {
          sub_100055434(v15);
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      free(v16);
    }

    uint64_t v17 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v19 userInfo:0];
    uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
    vm_size_t v7 = *(NSObject **)(v18 + 40);
    *(void *)(v18 + 40) = v17;
  }
}

void sub_10006AE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Block_object_dispose((const void *)(v31 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_10006AEB0(uint64_t a1)
{
  int v6 = 0;
  CFDictionaryRef v2 = sub_100046CF4(*(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 68), *(unsigned int *)(a1 + 72));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_10004AAC0(*(void **)(a1 + 32), v2, &v6);
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
  else
  {
    uint64_t v3 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v6 userInfo:0];
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
    unsigned int v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
}

void sub_10006AF6C(void *a1)
{
  HIDWORD(v36) = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v46 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  *(_OWORD *)buffer = 0u;
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  CFDictionaryRef v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v40 = 0;
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      uint64_t v5 = a1[4];
      int v6 = *(char **)(*(void *)(a1[5] + 8) + 24);
      *(_DWORD *)long long v37 = 138412546;
      *(void *)&v37[4] = v5;
      __int16 v38 = 2112;
      long long v39 = v6;
      LODWORD(v36) = 22;
      unsigned int v35 = (uint64_t *)v37;
      vm_size_t v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  if (!CFStringGetCString(*(CFStringRef *)(*(void *)(a1[5] + 8) + 24), buffer, 256, 0x8000100u))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v15 = (id)qword_1000E4158;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v40 = 0;
      unsigned int v16 = sub_100055404(1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
        uint64_t v18 = *(void *)(*(void *)(a1[5] + 8) + 24);
        *(_DWORD *)long long v37 = 138412290;
        *(void *)&v37[4] = v18;
        LODWORD(v36) = 12;
        unsigned int v35 = (uint64_t *)v37;
        int v19 = (const char *)_os_log_send_and_compose_impl();
        int v20 = (char *)v19;
        if (v19) {
          sub_100055434(v19);
        }
      }
      else
      {
        int v20 = 0;
      }
      free(v20);
    }

    NSErrorDomain v31 = NSPOSIXErrorDomain;
    uint64_t v32 = 22;
    goto LABEL_60;
  }
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  unsigned int v9 = (id)qword_1000E4158;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v40 = 0;
    unsigned int v10 = sub_100055404(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = v10 & 0xFFFFFFFE;
    }
    if (v11)
    {
      uint64_t v12 = a1[4];
      *(_DWORD *)long long v37 = 138412546;
      *(void *)&v37[4] = v12;
      __int16 v38 = 2080;
      long long v39 = buffer;
      LODWORD(v36) = 22;
      unsigned int v35 = (uint64_t *)v37;
      unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v14 = (char *)v13;
      if (v13) {
        sub_100055434(v13);
      }
    }
    else
    {
      unsigned int v14 = 0;
    }
    free(v14);
  }

  if (!sub_10002433C((uint64_t)buffer))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    long long v26 = (id)qword_1000E4158;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)long long v37 = 0;
      unsigned int v27 = sub_100055404(1);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v28 = v27;
      }
      else {
        unsigned int v28 = v27 & 0xFFFFFFFE;
      }
      if (v28)
      {
        uint64_t v40 = 67109120;
        LODWORD(v36) = 8;
        unsigned int v35 = &v40;
        uint64_t v29 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v30 = (char *)v29;
        if (v29) {
          sub_100055434(v29);
        }
      }
      else
      {
        uint64_t v30 = 0;
      }
      free(v30);
    }

    NSErrorDomain v31 = NSPOSIXErrorDomain;
    uint64_t v32 = 0;
LABEL_60:
    uint64_t v33 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v31, v32, 0, v35, v36);
    uint64_t v34 = *(void *)(a1[6] + 8);
    int v21 = *(NSObject **)(v34 + 40);
    *(void *)(v34 + 40) = v33;
    goto LABEL_61;
  }
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  int v21 = (id)qword_1000E4158;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)long long v37 = 0;
    unsigned int v22 = sub_100055404(1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v23 = v22;
    }
    else {
      unsigned int v23 = v22 & 0xFFFFFFFE;
    }
    if (v23)
    {
      LOWORD(v40) = 0;
      unsigned int v24 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v25 = (char *)v24;
      if (v24) {
        sub_100055434(v24);
      }
    }
    else
    {
      unsigned int v25 = 0;
    }
    free(v25);
  }
LABEL_61:
}

void sub_10006B8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006B900(uint64_t a1)
{
  if (!sub_10002ECD8(*(const __CFDictionary **)(a1 + 32)))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    CFDictionaryRef v2 = (id)qword_1000E4158;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4)
      {
        uint64_t v5 = (const char *)_os_log_send_and_compose_impl();
        int v6 = (char *)v5;
        if (v5) {
          sub_100055434(v5);
        }
      }
      else
      {
        int v6 = 0;
      }
      free(v6);
    }

    uint64_t v7 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    unsigned int v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
}

void sub_10006BF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10006BF68(uint64_t a1)
{
  CFDictionaryRef v2 = sub_100031CD4("/private/var//keybags/nextsession_opaque.kb");
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (v2)
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v5 = (id)qword_1000E4158;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = sub_100055404(1);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        v6 &= ~1u;
      }
      if (v6)
      {
        uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        uint64_t v8 = v5;
        [v7 length];
        unsigned int v9 = (char *)_os_log_send_and_compose_impl();

        if (v9) {
          sub_100055434(v9);
        }
      }
      else
      {
        unsigned int v9 = 0;
      }
      free(v9);
    }
  }
  else
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v10 = (id)qword_1000E4158;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v11 = sub_100055404(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v12 = v11;
      }
      else {
        unsigned int v12 = v11 & 0xFFFFFFFE;
      }
      if (v12)
      {
        unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v14 = (char *)v13;
        if (v13) {
          sub_100055434(v13);
        }
      }
      else
      {
        unsigned int v14 = 0;
      }
      free(v14);
    }

    uint64_t v15 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:5 userInfo:0];
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v5 = *(NSObject **)(v16 + 40);
    *(void *)(v16 + 40) = v15;
  }
}

void sub_10006C35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_10006C380(uint64_t a1)
{
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  CFDictionaryRef v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      uint64_t v5 = (const char *)_os_log_send_and_compose_impl();
      int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      int v6 = 0;
    }
    free(v6);
  }

  if (unlink("/private/var//keybags/nextsession_opaque.kb"))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *__error();
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v7 = (id)qword_1000E4158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9)
      {
        unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
      }
      else
      {
        unsigned int v11 = 0;
      }
      free(v11);
    }

    uint64_t v17 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:*(int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) userInfo:0];
    uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
    unsigned int v12 = *(NSObject **)(v18 + 40);
    *(void *)(v18 + 40) = v17;
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v12 = (id)qword_1000E4158;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14)
      {
        uint64_t v15 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v16 = (char *)v15;
        if (v15) {
          sub_100055434(v15);
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      free(v16);
    }
  }
}

void sub_10006C87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006C894(uint64_t a1)
{
  if (sub_10001C514())
  {
    if (qword_1000E4170 != -1) {
      dispatch_once(&qword_1000E4170, &stru_1000D5BD0);
    }
    CFDictionaryRef v2 = (id)qword_1000E4168;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      unsigned int v3 = sub_100055404(0);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4)
      {
        uint64_t v5 = (const char *)_os_log_send_and_compose_impl();
        int v6 = (char *)v5;
        if (v5) {
          sub_100055434(v5);
        }
      }
      else
      {
        int v6 = 0;
      }
      free(v6);
    }

    uint64_t v16 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:37 userInfo:0];
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v7 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;
  }
  else
  {
    uint64_t v7 = [*(id *)(a1 + 32) objectForKey:kUMUserSessionIDKey];
    if (sub_10002EF3C(*(const __CFDictionary **)(a1 + 32), 0, *(const __CFData **)(a1 + 40)) == 1)
    {
      if (qword_1000E4160 != -1) {
        dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
      }
      unsigned int v8 = (id)qword_1000E4158;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = sub_100055404(1);
        if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
          v9 &= ~1u;
        }
        if (v9)
        {
          unsigned int v10 = v8;
          [v7 intValue];
          unsigned int v11 = (char *)_os_log_send_and_compose_impl();

          if (v11) {
            sub_100055434(v11);
          }
        }
        else
        {
          unsigned int v11 = 0;
        }
        free(v11);
      }
    }
    else
    {
      if (qword_1000E4160 != -1) {
        dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
      }
      unsigned int v12 = (id)qword_1000E4158;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = sub_100055404(1);
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          v13 &= ~1u;
        }
        if (v13)
        {
          unsigned int v14 = v12;
          [v7 intValue];
          uint64_t v15 = (char *)_os_log_send_and_compose_impl();

          if (v15) {
            sub_100055434(v15);
          }
        }
        else
        {
          uint64_t v15 = 0;
        }
        free(v15);
      }

      uint64_t v18 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
      uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8);
      unsigned int v8 = *(NSObject **)(v19 + 40);
      *(void *)(v19 + 40) = v18;
    }
  }
}

void sub_10006CEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006CED0(uint64_t a1)
{
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  CFDictionaryRef v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      uint64_t v5 = (const char *)_os_log_send_and_compose_impl();
      int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      int v6 = 0;
    }
    free(v6);
  }

  if (sub_1000306A0(*(const __CFData **)(a1 + 32), (uint64_t)"/private/var//keybags/nextsession_SBD_opaque.kb") == 1)
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v7 = (id)qword_1000E4158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9)
      {
LABEL_28:
        uint64_t v15 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v16 = (char *)v15;
        if (v15) {
          sub_100055434(v15);
        }
        goto LABEL_31;
      }
LABEL_30:
      uint64_t v16 = 0;
LABEL_31:
      free(v16);
    }
  }
  else
  {
    uint64_t v10 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:5 userInfo:0];
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
    unsigned int v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;

    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v7 = (id)qword_1000E4158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14) {
        goto LABEL_28;
      }
      goto LABEL_30;
    }
  }
}

void sub_10006D35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10006D380(uint64_t a1)
{
  int v14 = 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sub_1000312B4(*(const __CFDictionary **)(a1 + 32), *(const void **)(a1 + 40), &v14);
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    CFDictionaryRef v2 = (id)qword_1000E4158;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4)
      {
        LOWORD(v15) = 0;
        uint64_t v5 = (const char *)_os_log_send_and_compose_impl();
        int v6 = (char *)v5;
        if (v5) {
          sub_100055434(v5);
        }
      }
      else
      {
        int v6 = 0;
      }
      free(v6);
    }
  }
  else
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v7 = (id)qword_1000E4158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9)
      {
        int v15 = 67109120;
        int v16 = v14;
        uint64_t v10 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      free(v11);
    }

    uint64_t v12 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v14 userInfo:0];
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    CFDictionaryRef v2 = *(NSObject **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
}

void sub_10006D7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10006D810(uint64_t a1)
{
  int v18 = 0;
  CFDictionaryRef v2 = sub_100031054(*(const __CFDictionary **)(a1 + 32), &v18);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v18 == 0;
  }
  if (v5)
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    int v6 = (id)qword_1000E4158;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v7 = sub_100055404(1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v8 = v7;
      }
      else {
        unsigned int v8 = v7 & 0xFFFFFFFE;
      }
      if (v8)
      {
        LOWORD(v19) = 0;
        uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v10 = (char *)v9;
        if (v9) {
          sub_100055434(v9);
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      free(v10);
    }
  }
  else
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v11 = (id)qword_1000E4158;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v12 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v12 & 0xFFFFFFFE;
      }
      if (v13)
      {
        int v19 = 67109120;
        int v20 = v18;
        int v14 = (const char *)_os_log_send_and_compose_impl();
        int v15 = (char *)v14;
        if (v14) {
          sub_100055434(v14);
        }
      }
      else
      {
        int v15 = 0;
      }
      free(v15);
    }

    uint64_t v16 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v18 userInfo:0];
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8);
    int v6 = *(NSObject **)(v17 + 40);
    *(void *)(v17 + 40) = v16;
  }
}

void sub_10006DC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10006DC54(uint64_t a1)
{
  CFDictionaryRef v2 = sub_100031CD4("/private/var//keybags/nextsession_SBD_opaque.kb");
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (v2)
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    BOOL v5 = (id)qword_1000E4158;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = sub_100055404(1);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        v6 &= ~1u;
      }
      if (v6)
      {
        uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        unsigned int v8 = v5;
        [v7 length];
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();

        if (v9) {
          sub_100055434(v9);
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
      free(v9);
    }
  }
  else
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v10 = (id)qword_1000E4158;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v11 = sub_100055404(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v12 = v11;
      }
      else {
        unsigned int v12 = v11 & 0xFFFFFFFE;
      }
      if (v12)
      {
        unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
        int v14 = (char *)v13;
        if (v13) {
          sub_100055434(v13);
        }
      }
      else
      {
        int v14 = 0;
      }
      free(v14);
    }

    uint64_t v15 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:5 userInfo:0];
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
    BOOL v5 = *(NSObject **)(v16 + 40);
    *(void *)(v16 + 40) = v15;
  }
}

void sub_10006E048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_10006E06C(uint64_t a1)
{
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  CFDictionaryRef v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      BOOL v5 = (const char *)_os_log_send_and_compose_impl();
      int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      int v6 = 0;
    }
    free(v6);
  }

  if (unlink("/private/var//keybags/nextsession_SBD_opaque.kb"))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *__error();
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v7 = (id)qword_1000E4158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9)
      {
        uint64_t v10 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
      }
      else
      {
        unsigned int v11 = 0;
      }
      free(v11);
    }

    uint64_t v17 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:*(int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) userInfo:0];
    uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
    unsigned int v12 = *(NSObject **)(v18 + 40);
    *(void *)(v18 + 40) = v17;
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v12 = (id)qword_1000E4158;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14)
      {
        uint64_t v15 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v16 = (char *)v15;
        if (v15) {
          sub_100055434(v15);
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      free(v16);
    }
  }
}

void sub_10006E5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10006E5C4(uint64_t a1)
{
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  CFDictionaryRef v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      BOOL v5 = (const char *)_os_log_send_and_compose_impl();
      int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      int v6 = 0;
    }
    free(v6);
  }

  CFDictionaryRef v7 = sub_100030B28(*(const __CFDictionary **)(a1 + 32));
  if (v7)
  {
    uint64_t v8 = [*(id *)(a1 + 40) externalizeUserDictionary:v7];
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    uint64_t v11 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
    unsigned int v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
}

void sub_10006E9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10006E9E0(uint64_t a1)
{
  CFDictionaryRef v2 = sub_100031874(*(const __CFDictionary **)(a1 + 32));
  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 40) externalizeUserDictionary:v2];
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
    BOOL v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    int v6 = (id)qword_1000E4158;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = sub_100055404(1);
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
        v7 &= ~1u;
      }
      if (v7)
      {
LABEL_17:
        uint64_t v12 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
        uint64_t v13 = v6;
        [v12 intValue];
        unsigned int v14 = (char *)_os_log_send_and_compose_impl();

        if (v14) {
          sub_100055434(v14);
        }
        goto LABEL_20;
      }
LABEL_19:
      unsigned int v14 = 0;
LABEL_20:
      free(v14);
    }
  }
  else
  {
    uint64_t v8 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    int v6 = (id)qword_1000E4158;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = sub_100055404(1);
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
        v11 &= ~1u;
      }
      if (v11) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }
}

void sub_10006EDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10006EDF4(uint64_t a1)
{
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  CFDictionaryRef v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      BOOL v5 = (const char *)_os_log_send_and_compose_impl();
      int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      int v6 = 0;
    }
    free(v6);
  }

  uint64_t v7 = sub_100019E3C();
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = [*(id *)(a1 + 32) externalizeUserDictionary:v7];
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
    int v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }
  else
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v12 = (id)qword_1000E4158;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14)
      {
        uint64_t v15 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v16 = (char *)v15;
        if (v15) {
          sub_100055434(v15);
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      free(v16);
    }

    uint64_t v17 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
    uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v8 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;
  }
}

void sub_10006F3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10006F414(uint64_t a1)
{
  if (sub_10001C514())
  {
    if (qword_1000E4170 != -1) {
      dispatch_once(&qword_1000E4170, &stru_1000D5BD0);
    }
    CFDictionaryRef v2 = (id)qword_1000E4168;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = 0;
      unsigned int v3 = sub_100055404(0);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4)
      {
        __int16 v33 = 0;
        BOOL v5 = (const char *)_os_log_send_and_compose_impl();
        int v6 = (char *)v5;
        if (v5) {
          sub_100055434(v5);
        }
      }
      else
      {
        int v6 = 0;
      }
      free(v6);
    }

    uint64_t v20 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:37 userInfo:0];
    uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8);
    unsigned int v22 = *(void **)(v21 + 40);
    *(void *)(v21 + 40) = v20;

    return;
  }
  uint64_t v7 = sub_100019B40(502);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v9 = (id)qword_1000E4158;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = 0;
      unsigned int v10 = sub_100055404(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        __int16 v33 = 0;
        LODWORD(v32) = 2;
        NSErrorDomain v31 = &v33;
        uint64_t v12 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v13 = (char *)v12;
        if (v12) {
          sub_100055434(v12);
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
      free(v13);
    }

LABEL_54:
    uint64_t v28 = [*(id *)(a1 + 32) externalizeUserDictionary:v8, v31, v32];
    uint64_t v29 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v30 = *(void **)(v29 + 40);
    *(void *)(v29 + 40) = v28;

    return;
  }
  unsigned int v14 = sub_10001F5BC(*(_DWORD *)(a1 + 56), 0);
  if (v14)
  {
    uint64_t v8 = v14;
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v15 = (id)qword_1000E4158;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = 0;
      unsigned int v16 = sub_100055404(1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
        __int16 v33 = 0;
        LODWORD(v32) = 2;
        NSErrorDomain v31 = &v33;
        uint64_t v18 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v19 = (char *)v18;
        if (v18) {
          sub_100055434(v18);
        }
      }
      else
      {
        uint64_t v19 = 0;
      }
      free(v19);
    }

    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v23 = (id)qword_1000E4158;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = 0;
      unsigned int v24 = sub_100055404(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v25 = v24;
      }
      else {
        unsigned int v25 = v24 & 0xFFFFFFFE;
      }
      if (v25)
      {
        __int16 v33 = 0;
        LODWORD(v32) = 2;
        NSErrorDomain v31 = &v33;
        long long v26 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v27 = (char *)v26;
        if (v26) {
          sub_100055434(v26);
        }
      }
      else
      {
        unsigned int v27 = 0;
      }
      free(v27);
    }

    sub_10002F4A8(*(const __CFDictionary **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), 0);
    goto LABEL_54;
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];

  _objc_release_x1();
}

void sub_10006FAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006FB14(uint64_t a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)sub_100019B40(*(_DWORD *)(a1 + 48));
  CFDictionaryRef v3 = v2;
  if (v2)
  {
    CFStringRef v4 = *(const __CFString **)(a1 + 32);
    if (v4)
    {
      sub_100034E48(v2, v4);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
      if (qword_1000E4160 != -1) {
        dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
      }
      BOOL v5 = (id)qword_1000E4158;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = 0;
        unsigned int v6 = sub_100055404(1);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v7 = v6;
        }
        else {
          unsigned int v7 = v6 & 0xFFFFFFFE;
        }
        if (v7)
        {
          LODWORD(v18[0]) = 138412290;
          *(void *)((char *)v18 + 4) = v3;
          LODWORD(v17) = 12;
          unsigned int v16 = v18;
          uint64_t v8 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v9 = (char *)v8;
          if (v8) {
            sub_100055434(v8);
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        free(v9);
      }
    }
    unsigned int v10 = -[__CFDictionary objectForKey:](v3, "objectForKey:", kUMUserSessionIDKey, v16, v17);
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v11 = (id)qword_1000E4158;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v18[0] = 0;
      int v12 = sub_100055404(1);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        v12 &= ~1u;
      }
      if (v12)
      {
        uint64_t v13 = v11;
        unsigned int v14 = [v10 intValue];
        LODWORD(v19) = 67109120;
        HIDWORD(v19) = v14;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();

        if (v15) {
          sub_100055434(v15);
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
      free(v15);
    }
  }
}

void sub_10006FF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006FF3C(uint64_t a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)sub_100019B40(*(_DWORD *)(a1 + 48));
  CFDictionaryRef v3 = v2;
  if (v2)
  {
    CFStringRef v4 = *(const __CFString **)(a1 + 32);
    if (v4)
    {
      sub_1000357E0(v2, v4);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
      if (qword_1000E4160 != -1) {
        dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
      }
      BOOL v5 = (id)qword_1000E4158;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = 0;
        unsigned int v6 = sub_100055404(1);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v7 = v6;
        }
        else {
          unsigned int v7 = v6 & 0xFFFFFFFE;
        }
        if (v7)
        {
          LODWORD(v18[0]) = 138412290;
          *(void *)((char *)v18 + 4) = v3;
          LODWORD(v17) = 12;
          unsigned int v16 = v18;
          uint64_t v8 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v9 = (char *)v8;
          if (v8) {
            sub_100055434(v8);
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        free(v9);
      }
    }
    unsigned int v10 = -[__CFDictionary objectForKey:](v3, "objectForKey:", kUMUserSessionIDKey, v16, v17);
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v11 = (id)qword_1000E4158;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v18[0] = 0;
      int v12 = sub_100055404(1);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        v12 &= ~1u;
      }
      if (v12)
      {
        uint64_t v13 = v11;
        unsigned int v14 = [v10 intValue];
        LODWORD(v19) = 67109120;
        HIDWORD(v19) = v14;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();

        if (v15) {
          sub_100055434(v15);
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
      free(v15);
    }
  }
}

void sub_10007032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100070344(uint64_t a1)
{
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  CFDictionaryRef v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      BOOL v5 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  if (sub_10003258C(*(unsigned int *)(a1 + 40)))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v7 = (id)qword_1000E4158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9)
      {
LABEL_28:
        int v12 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v13 = (char *)v12;
        if (v12) {
          sub_100055434(v12);
        }
        goto LABEL_31;
      }
LABEL_30:
      uint64_t v13 = 0;
LABEL_31:
      free(v13);
    }
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v7 = (id)qword_1000E4158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11) {
        goto LABEL_28;
      }
      goto LABEL_30;
    }
  }
}

void sub_10007078C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000707A4(uint64_t a1)
{
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  CFDictionaryRef v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      BOOL v5 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  if (sub_10002D1BC(*(unsigned int *)(a1 + 40), 1))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v7 = (id)qword_1000E4158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9)
      {
LABEL_28:
        int v12 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v13 = (char *)v12;
        if (v12) {
          sub_100055434(v12);
        }
        goto LABEL_31;
      }
LABEL_30:
      uint64_t v13 = 0;
LABEL_31:
      free(v13);
    }
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v7 = (id)qword_1000E4158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = sub_100055404(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11) {
        goto LABEL_28;
      }
      goto LABEL_30;
    }
  }
}

void sub_100070BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100070C08(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    CFDictionaryRef v2 = (id)qword_1000E4158;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }
  else
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    CFDictionaryRef v2 = (id)qword_1000E4158;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v6 = v5;
      }
      else {
        unsigned int v6 = v5 & 0xFFFFFFFE;
      }
      if (v6)
      {
LABEL_17:
        unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v8 = (char *)v7;
        if (v7) {
          sub_100055434(v7);
        }
        goto LABEL_20;
      }
LABEL_19:
      unsigned int v8 = 0;
LABEL_20:
      free(v8);
    }
  }

  if (sub_100034474(*(unsigned __int8 *)(a1 + 40)))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    if (*(unsigned char *)(a1 + 40))
    {
      if (qword_1000E4160 != -1) {
        dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
      }
      unsigned int v9 = (id)qword_1000E4158;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v10 = sub_100055404(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v11 = v10;
        }
        else {
          unsigned int v11 = v10 & 0xFFFFFFFE;
        }
        if (v11)
        {
LABEL_55:
          uint64_t v18 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v19 = (char *)v18;
          if (v18) {
            sub_100055434(v18);
          }
          goto LABEL_58;
        }
LABEL_57:
        uint64_t v19 = 0;
LABEL_58:
        free(v19);
      }
    }
    else
    {
      if (qword_1000E4160 != -1) {
        dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
      }
      unsigned int v9 = (id)qword_1000E4158;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v14 = sub_100055404(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v15 = v14;
        }
        else {
          unsigned int v15 = v14 & 0xFFFFFFFE;
        }
        if (v15) {
          goto LABEL_55;
        }
        goto LABEL_57;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 40))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v9 = (id)qword_1000E4158;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v12 = sub_100055404(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v12 & 0xFFFFFFFE;
      }
      if (v13) {
        goto LABEL_55;
      }
      goto LABEL_57;
    }
  }
  else
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v9 = (id)qword_1000E4158;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v16 = sub_100055404(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17) {
        goto LABEL_55;
      }
      goto LABEL_57;
    }
  }
}

void sub_1000711AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000711C4(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = dword_1000E3224;
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  uint64_t v1 = (id)qword_1000E4158;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v2 = sub_100055404(1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v3 = v2;
    }
    else {
      unsigned int v3 = v2 & 0xFFFFFFFE;
    }
    if (v3)
    {
      unsigned int v4 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v5 = (char *)v4;
      if (v4) {
        sub_100055434(v4);
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    free(v5);
  }
}

void sub_100071544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100071568(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) objectForKey:kUMUserSessionIDKey];
  unsigned int v3 = (void *)sub_100019B40((int)[v2 intValue]);
  unsigned int v4 = v3;
  if (v3)
  {
    unsigned int v5 = [v3 objectForKey:kUMUserSessionSyncMachServicesKey];
    if (v5)
    {
      if (qword_1000E4160 != -1) {
        dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
      }
      unsigned int v6 = (id)qword_1000E4158;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = sub_100055404(1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v7 & 0xFFFFFFFE;
        }
        if (v8)
        {
          uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v10 = (char *)v9;
          if (v9) {
            sub_100055434(v9);
          }
        }
        else
        {
          unsigned int v10 = 0;
        }
        free(v10);
      }

      uint64_t v14 = +[NSArray arrayWithArray:v5];
      uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
      unsigned int v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = v14;

      *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
      if (qword_1000E4160 != -1) {
        dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
      }
      unsigned int v11 = (id)qword_1000E4158;
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_33;
      }
      unsigned int v17 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v18 = v17;
      }
      else {
        unsigned int v18 = v17 & 0xFFFFFFFE;
      }
      if (v18) {
        goto LABEL_29;
      }
    }
    else
    {
      if (qword_1000E4160 != -1) {
        dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
      }
      unsigned int v11 = (id)qword_1000E4158;
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_33;
      }
      unsigned int v12 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v12 & 0xFFFFFFFE;
      }
      if (v13)
      {
LABEL_29:
        uint64_t v19 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v20 = (char *)v19;
        if (v19) {
          sub_100055434(v19);
        }
        goto LABEL_32;
      }
    }
    uint64_t v20 = 0;
LABEL_32:
    free(v20);
LABEL_33:
  }
}

void sub_100071A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100071A54(uint64_t result)
{
  if (qword_1000E42D0)
  {
    uint64_t v1 = result;
    *(void *)(*(void *)(*(void *)(v1 + 32) + 8) + 40) = +[NSArray arrayWithArray:](NSArray, "arrayWithArray:");
    return _objc_release_x1();
  }
  return result;
}

void sub_100071C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100071C3C(uint64_t a1)
{
  if (qword_1000E42D0)
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v2 = (id)qword_1000E4158;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4)
      {
        unsigned int v5 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v6 = (char *)v5;
        if (v5) {
          sub_100055434(v5);
        }
      }
      else
      {
        unsigned int v6 = 0;
      }
      free(v6);
    }

    if (CFArrayGetCount((CFArrayRef)qword_1000E42D0) >= 1)
    {
      CFArrayRemoveAllValues((CFMutableArrayRef)qword_1000E42D0);
      if (qword_1000E42D0) {
        CFRelease((CFTypeRef)qword_1000E42D0);
      }
      qword_1000E42D0 = 0;
      if (qword_1000E4160 != -1) {
        dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
      }
      unsigned int v7 = (id)qword_1000E4158;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v8 = sub_100055404(1);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v9 = v8;
        }
        else {
          unsigned int v9 = v8 & 0xFFFFFFFE;
        }
        if (v9)
        {
          unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v11 = (char *)v10;
          if (v10) {
            sub_100055434(v10);
          }
        }
        else
        {
          unsigned int v11 = 0;
        }
        free(v11);
      }
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_100072110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100072134(uint64_t a1)
{
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  unsigned int v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      unsigned int v5 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  uint64_t v7 = +[RDServer sharedServer];
  uint64_t v8 = [v7 fetchUserBlockTaskList];
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  unsigned int v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_100072420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100072438(uint64_t result)
{
  if (qword_1000E42D8)
  {
    uint64_t v1 = result;
    *(void *)(*(void *)(*(void *)(v1 + 32) + 8) + 40) = +[NSArray arrayWithArray:](NSArray, "arrayWithArray:");
    return _objc_release_x1();
  }
  return result;
}

void sub_100072618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100072630(uint64_t a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)sub_100019B40(*(_DWORD *)(a1 + 40));
  CFDictionaryRef v3 = v2;
  if (v2) {
    BOOL v4 = byte_1000E3220 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && sub_10007D844(v2, 0, 0, 0) == 1)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v5 = (id)qword_1000E4158;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v6 = sub_100055404(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
        uint64_t v8 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v9 = (char *)v8;
        if (v8) {
          sub_100055434(v8);
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
      free(v9);
    }
  }
}

void sub_100072930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100072948(uint64_t a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)sub_100019B40(*(_DWORD *)(a1 + 40));
  CFDictionaryRef v3 = v2;
  if (v2) {
    BOOL v4 = byte_1000E3220 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && sub_10007F0F4(v2, 0, 0, 0x80000) == 1)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v5 = (id)qword_1000E4158;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v6 = sub_100055404(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
        uint64_t v8 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v9 = (char *)v8;
        if (v8) {
          sub_100055434(v8);
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
      free(v9);
    }
  }
}

void sub_100072CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

id sub_100072CE4(void *a1)
{
  id result = sub_10002F468();
  if (result)
  {
    *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = 0;
  }
  else
  {
    uint64_t v3 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
    uint64_t v4 = *(void *)(a1[6] + 8);
    unsigned int v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    id result = (id)a1[4];
    if (result)
    {
      unsigned int v6 = (uint64_t (*)(void))*((void *)result + 2);
      return (id)v6();
    }
  }
  return result;
}

void sub_100072F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100072F18(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    CFDictionaryRef v2 = (id)qword_1000E4158;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }
  else
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    CFDictionaryRef v2 = (id)qword_1000E4158;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v6 = v5;
      }
      else {
        unsigned int v6 = v5 & 0xFFFFFFFE;
      }
      if (v6)
      {
LABEL_17:
        unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v8 = (char *)v7;
        if (v7) {
          sub_100055434(v7);
        }
        goto LABEL_20;
      }
LABEL_19:
      uint64_t v8 = 0;
LABEL_20:
      free(v8);
    }
  }

  if (sub_10001E9B0(*(_DWORD *)(a1 + 40)))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v9 = (id)qword_1000E4158;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = sub_100055404(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        unsigned int v12 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v13 = (char *)v12;
        if (v12) {
          sub_100055434(v12);
        }
      }
      else
      {
        unsigned int v13 = 0;
      }
      free(v13);
    }

    dword_1000E42F0 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    sub_10001A7BC();
  }
  else
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v14 = (id)qword_1000E4158;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = sub_100055404(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = v15 & 0xFFFFFFFE;
      }
      if (v16)
      {
        unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v18 = (char *)v17;
        if (v17) {
          sub_100055434(v17);
        }
      }
      else
      {
        unsigned int v18 = 0;
      }
      free(v18);
    }
  }
}

void sub_100073798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100073800(uint64_t a1)
{
  CFDictionaryRef v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v8 = (id)qword_1000E4158;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_30;
    }
    unsigned int v9 = sub_100055404(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      unsigned int v10 = v9;
    }
    else {
      unsigned int v10 = v9 & 0xFFFFFFFE;
    }
    if (v10)
    {
LABEL_26:
      unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v14 = (char *)v13;
      if (v13) {
        sub_100055434(v13);
      }
      goto LABEL_29;
    }
LABEL_28:
    uint64_t v14 = 0;
LABEL_29:
    free(v14);
LABEL_30:

    uint64_t v15 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
    unsigned int v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;
    goto LABEL_78;
  }
  if (!*(void *)(a1 + 40))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    uint64_t v8 = (id)qword_1000E4158;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_30;
    }
    unsigned int v11 = sub_100055404(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      unsigned int v12 = v11;
    }
    else {
      unsigned int v12 = v11 & 0xFFFFFFFE;
    }
    if (v12) {
      goto LABEL_26;
    }
    goto LABEL_28;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v2 machPort];
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  unsigned int v3 = (id)qword_1000E4158;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    int v4 = sub_100055404(1);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      v4 &= ~1u;
    }
    if (v4)
    {
      unsigned int v5 = *(void **)(a1 + 32);
      unsigned int v6 = v3;
      [v5 machPort];
      unsigned int v7 = (char *)_os_log_send_and_compose_impl();

      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    free(v7);
  }

  unsigned int v17 = sub_100046CF4(0xFFFFFFFFLL, 0xFFFFFFFFLL, *(unsigned int *)(a1 + 92));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = sub_10004ABC0(*(void **)(a1 + 40), *(unsigned int *)(a1 + 88), (int)[*(id *)(a1 + 32) machPort], v17, *(void *)(*(void *)(a1 + 72) + 8) + 24);
  if (mach_port_deallocate(mach_task_self_, (mach_port_name_t)[*(id *)(a1 + 32) machPort]))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v18 = (id)qword_1000E4158;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v19 = sub_100055404(1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v20 = v19;
      }
      else {
        unsigned int v20 = v19 & 0xFFFFFFFE;
      }
      if (v20)
      {
        uint64_t v21 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v22 = (char *)v21;
        if (v21) {
          sub_100055434(v21);
        }
      }
      else
      {
        unsigned int v22 = 0;
      }
      free(v22);
    }
  }
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v23 = (id)qword_1000E4158;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v24 = sub_100055404(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
        unsigned int v25 = v24;
      }
      else {
        unsigned int v25 = v24 & 0xFFFFFFFE;
      }
      if (v25)
      {
        long long v26 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v27 = (char *)v26;
        if (v26) {
          sub_100055434(v26);
        }
      }
      else
      {
        unsigned int v27 = 0;
      }
      free(v27);
    }

    uint64_t v36 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:*(int *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) userInfo:0];
    uint64_t v37 = *(void *)(*(void *)(a1 + 48) + 8);
    __int16 v33 = *(NSObject **)(v37 + 40);
    *(void *)(v37 + 40) = v36;
    goto LABEL_77;
  }
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    __int16 v33 = (id)qword_1000E4158;
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_77;
    }
    unsigned int v34 = sub_100055404(1);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v35 = v34;
    }
    else {
      unsigned int v35 = v34 & 0xFFFFFFFE;
    }
    if (v35)
    {
LABEL_89:
      long long v43 = (const char *)_os_log_send_and_compose_impl();
      long long v44 = (char *)v43;
      if (v43) {
        sub_100055434(v43);
      }
      goto LABEL_92;
    }
LABEL_91:
    long long v44 = 0;
LABEL_92:
    free(v44);
LABEL_77:

    goto LABEL_78;
  }
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  uint64_t v28 = (id)qword_1000E4158;
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v29 = sub_100055404(1);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
      unsigned int v30 = v29;
    }
    else {
      unsigned int v30 = v29 & 0xFFFFFFFE;
    }
    if (v30)
    {
      NSErrorDomain v31 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v32 = (char *)v31;
      if (v31) {
        sub_100055434(v31);
      }
    }
    else
    {
      uint64_t v32 = 0;
    }
    free(v32);
  }

  __int16 v38 = [[UMPersonaMachPort alloc] initWithMachPort:*(unsigned int *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) options:1];
  uint64_t v39 = *(void *)(*(void *)(a1 + 80) + 8);
  uint64_t v40 = *(void **)(v39 + 40);
  *(void *)(v39 + 40) = v38;

  if (!*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    __int16 v33 = (id)qword_1000E4158;
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_77;
    }
    unsigned int v41 = sub_100055404(1);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v42 = v41;
    }
    else {
      unsigned int v42 = v41 & 0xFFFFFFFE;
    }
    if (v42) {
      goto LABEL_89;
    }
    goto LABEL_91;
  }
LABEL_78:
}

void sub_100074384(uint64_t a1)
{
  int v18 = 0;
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  CFDictionaryRef v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      int v5 = *(_DWORD *)(a1 + 40);
      int v19 = 67109120;
      int v20 = v5;
      unsigned int v6 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v7 = (char *)v6;
      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    free(v7);
  }

  uint64_t v8 = sub_100046CF4(*(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52));
  unsigned int v9 = sub_100049B90(v8, &v18);
  if (v9)
  {
    unsigned int v10 = 0;
  }
  else
  {
    unsigned int v10 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v18 userInfo:0];
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v11 = (id)qword_1000E4158;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v12 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v12 & 0xFFFFFFFE;
      }
      if (v13)
      {
        int v14 = *(_DWORD *)(a1 + 40);
        int v19 = 67109120;
        int v20 = v14;
        uint64_t v15 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v16 = (char *)v15;
        if (v15) {
          sub_100055434(v15);
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      free(v16);
    }
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if (v17) {
    (*(void (**)(uint64_t, void *, void *))(v17 + 16))(v17, v9, v10);
  }
}

void sub_100074970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000749A0(uint64_t a1)
{
  int v19 = 0;
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  CFDictionaryRef v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      int v5 = *(_DWORD *)(a1 + 48);
      int v20 = 67109120;
      int v21 = v5;
      unsigned int v6 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v7 = (char *)v6;
      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    free(v7);
  }

  uint64_t v8 = sub_100049BA4(&v19);
  if (!v8)
  {
    uint64_t v9 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v19 userInfo:0];
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
    unsigned int v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v12 = (id)qword_1000E4158;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14)
      {
        int v15 = *(_DWORD *)(a1 + 48);
        int v20 = 67109120;
        int v21 = v15;
        uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v17 = (char *)v16;
        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {
        uint64_t v17 = 0;
      }
      free(v17);
    }
  }
  uint64_t v18 = *(void *)(a1 + 32);
  if (v18) {
    (*(void (**)(uint64_t, void *, void))(v18 + 16))(v18, v8, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
}

void sub_1000752CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100075304(uint64_t a1)
{
  int v24 = 0;
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  CFDictionaryRef v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      int v5 = *(void **)(a1 + 32);
      int v6 = *(_DWORD *)(a1 + 56);
      int v7 = *(_DWORD *)(a1 + 60);
      int v25 = 138412802;
      long long v26 = v5;
      __int16 v27 = 1024;
      int v28 = v6;
      __int16 v29 = 1024;
      int v30 = v7;
      uint64_t v8 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v9 = (char *)v8;
      if (v8) {
        sub_100055434(v8);
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    free(v9);
  }

  uint64_t v10 = sub_100046CF4(*(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 68));
  unsigned int v11 = sub_100049BB4(*(void **)(a1 + 32), v10, &v24);
  if (v11)
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v12 = (id)qword_1000E4158;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v13 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14)
      {
        int v25 = 138412290;
        long long v26 = v11;
        goto LABEL_29;
      }
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v15 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v24 userInfo:0];
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v12 = (id)qword_1000E4158;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v18 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
        unsigned int v19 = v18;
      }
      else {
        unsigned int v19 = v18 & 0xFFFFFFFE;
      }
      if (v19)
      {
        int v20 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        int v25 = 138412290;
        long long v26 = v20;
LABEL_29:
        int v21 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v22 = (char *)v21;
        if (v21) {
          sub_100055434(v21);
        }
        goto LABEL_32;
      }
LABEL_31:
      unsigned int v22 = 0;
LABEL_32:
      free(v22);
    }
  }

  uint64_t v23 = *(void *)(a1 + 40);
  if (v23) {
    (*(void (**)(uint64_t, void *, void))(v23 + 16))(v23, v11, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  }
}

uint64_t sub_10007589C(uint64_t a1)
{
  sub_100049BCC();
  CFDictionaryRef v2 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v2();
}

void sub_100075CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100075D2C(uint64_t a1)
{
  int v24 = 2;
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  CFDictionaryRef v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      int v5 = *(void **)(a1 + 32);
      int v6 = *(_DWORD *)(a1 + 56);
      int v7 = *(_DWORD *)(a1 + 60);
      int v25 = 138412802;
      long long v26 = v5;
      __int16 v27 = 1024;
      int v28 = v6;
      __int16 v29 = 1024;
      int v30 = v7;
      uint64_t v8 = (const char *)_os_log_send_and_compose_impl();
      uint64_t v9 = (char *)v8;
      if (v8) {
        sub_100055434(v8);
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    free(v9);
  }

  uint64_t v10 = sub_100046CF4(*(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 68));
  unsigned int v11 = sub_10004A2A8(*(void **)(a1 + 32), v10, &v24);
  if (v11)
  {
    int v24 = 0;
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v12 = (id)qword_1000E4158;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14)
      {
        int v25 = 138412290;
        long long v26 = v11;
        goto LABEL_29;
      }
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v15 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v24 userInfo:0];
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v12 = (id)qword_1000E4158;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v18 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v19 = v18;
      }
      else {
        unsigned int v19 = v18 & 0xFFFFFFFE;
      }
      if (v19)
      {
        int v20 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        int v25 = 138412290;
        long long v26 = v20;
LABEL_29:
        int v21 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v22 = (char *)v21;
        if (v21) {
          sub_100055434(v21);
        }
        goto LABEL_32;
      }
LABEL_31:
      unsigned int v22 = 0;
LABEL_32:
      free(v22);
    }
  }

  uint64_t v23 = *(void *)(a1 + 40);
  if (v23) {
    (*(void (**)(uint64_t, void *, void))(v23 + 16))(v23, v11, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  }
}

void sub_1000765E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100076628(uint64_t a1)
{
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  CFDictionaryRef v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      int v5 = (const char *)_os_log_send_and_compose_impl();
      int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      int v6 = 0;
    }
    free(v6);
  }

  int v7 = sub_100046CF4(*(unsigned int *)(a1 + 68), *(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76));
  int v8 = sub_100049C24(*(const __CFDictionary **)(a1 + 32), *(const __CFArray **)(a1 + 40), v7);
  if (v8)
  {
    uint64_t v9 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v8 userInfo:0];
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
    unsigned int v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v12 = (id)qword_1000E4158;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14) {
        goto LABEL_28;
      }
      goto LABEL_30;
    }
  }
  else
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v12 = (id)qword_1000E4158;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = sub_100055404(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = v15 & 0xFFFFFFFE;
      }
      if (v16)
      {
LABEL_28:
        uint64_t v17 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v18 = (char *)v17;
        if (v17) {
          sub_100055434(v17);
        }
        goto LABEL_31;
      }
LABEL_30:
      unsigned int v18 = 0;
LABEL_31:
      free(v18);
    }
  }

  uint64_t v19 = *(void *)(a1 + 48);
  if (v19) {
    (*(void (**)(uint64_t, void))(v19 + 16))(v19, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
  }
}

void sub_100076C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100076CA8(uint64_t a1)
{
  if (qword_1000E4160 != -1) {
    dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
  }
  CFDictionaryRef v2 = (id)qword_1000E4158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      int v5 = (const char *)_os_log_send_and_compose_impl();
      int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      int v6 = 0;
    }
    free(v6);
  }

  int v7 = sub_100046CF4(*(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64));
  if (sub_10004CC44(*(const __CFString **)(a1 + 32), v7))
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    int v8 = (id)qword_1000E4158;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v9 = sub_100055404(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v10 = v9;
      }
      else {
        unsigned int v10 = v9 & 0xFFFFFFFE;
      }
      if (v10)
      {
        unsigned int v11 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v12 = (char *)v11;
        if (v11) {
          sub_100055434(v11);
        }
      }
      else
      {
        unsigned int v12 = 0;
      }
      free(v12);
    }
  }
  else
  {
    if (qword_1000E4160 != -1) {
      dispatch_once(&qword_1000E4160, &stru_1000D5BB0);
    }
    unsigned int v13 = (id)qword_1000E4158;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        unsigned int v16 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v17 = (char *)v16;
        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {
        uint64_t v17 = 0;
      }
      free(v17);
    }

    uint64_t v18 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
    uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8);
    int v8 = *(NSObject **)(v19 + 40);
    *(void *)(v19 + 40) = v18;
  }

  uint64_t v20 = *(void *)(a1 + 40);
  if (v20) {
    (*(void (**)(uint64_t, void))(v20 + 16))(v20, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  }
}

void sub_1000775B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1000775F0(uint64_t a1)
{
  CFDictionaryRef v2 = sub_100046CF4(*(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64));
  unsigned int v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(unsigned int *)(a1 + 100);
  long long v5 = *(_OWORD *)(a1 + 84);
  v11[0] = *(_OWORD *)(a1 + 68);
  v11[1] = v5;
  CFStringRef v6 = sub_10004D418(v3, (uint64_t)v11, v4, v2);
  if (!v6)
  {
    uint64_t v7 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:*__error() userInfo:0];
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    unsigned int v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, CFStringRef, void))(v10 + 16))(v10, v6, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  }
  if (v6) {
    CFRelease(v6);
  }
}

id sub_1000776E0()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = (void *)qword_1000E4150;
  qword_1000E4150 = v0;

  id v2 = [objc_alloc((Class)NSXPCListener) initWithMachServiceName:@"com.apple.mobile.usermanagerd.xpc"];
  unsigned int v3 = (void *)qword_1000E4148;
  qword_1000E4148 = (uint64_t)v2;

  uint64_t v4 = [(id)qword_1000E4148 _xpcConnection];
  __xpc_connection_set_logging();

  [(id)qword_1000E4148 setDelegate:qword_1000E4150];
  long long v5 = (void *)qword_1000E4148;

  return [v5 resume];
}

void sub_100077784(id a1)
{
  qword_1000E4158 = (uint64_t)os_log_create(off_1000E33D8, "legacy");

  _objc_release_x1();
}

void sub_1000777CC(id a1)
{
  qword_1000E4168 = (uint64_t)os_log_create(off_1000E33D8, "user");

  _objc_release_x1();
}

void sub_100077814(id a1)
{
  qword_1000E4178 = (uint64_t)os_log_create(off_1000E33D8, "persona");

  _objc_release_x1();
}

id sub_1000778D8(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 24, 1);
  }
  return result;
}

void sub_1000778EC(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic_copy(a1, newValue, newValue, 24);
  }
}

BOOL sub_100079010(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 8) != 0;
  }
  return result;
}

uint64_t sub_100079024(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 20);
  }
  return result;
}

uint64_t sub_100079030(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 24);
  }
  return result;
}

UMDPersonaManifestPersona *sub_10007928C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  unsigned int v3 = objc_alloc_init(UMDPersonaManifestPersona);
  unsigned int v4 = sub_10008A720(v2, @"UserPersonaType", (id)0xFFFFFFFFLL);
  if (v3) {
    v3->_type = v4;
  }
  if (*__error() == 2)
  {
    if (qword_1000E4190 != -1) {
      dispatch_once(&qword_1000E4190, &stru_1000D5C10);
    }
    long long v5 = (id)qword_1000E4188;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      unsigned int v6 = sub_100055404(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
        uint64_t v8 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v9 = (char *)v8;
        if (v8) {
          sub_100055434(v8);
        }
      }
      else
      {
        unsigned int v9 = 0;
      }
      free(v9);
    }

    __int16 v33 = 0;
  }
  else
  {
    uint64_t v10 = sub_10008AAF4(v2, @"UserPersonaUniqueString");
    sub_100019094((uint64_t)v3, v10);

    unsigned int v11 = sub_10008A720(v2, @"UserPersonaID", 0);
    if (v3)
    {
      v3->_kernelID = v11;
      unsigned int v12 = sub_10008A8B8(v2, @"UserPersonaNickName");
      objc_setProperty_nonatomic_copy(v3, v13, v12, 40);
    }
    else
    {
      unsigned int v12 = sub_10008A8B8(v2, @"UserPersonaNickName");
    }

    unsigned int v15 = sub_10008A948(v2, @"UserPersonaBundleIDS");
    if (v3) {
      objc_setProperty_nonatomic_copy(v3, v14, v15, 48);
    }

    unsigned int v16 = sub_10008A948(v2, @"UserPersonaObserverService");
    uint64_t v18 = v16;
    if (v3)
    {
      objc_setProperty_nonatomic_copy(v3, v17, v16, 56);

      v3->_isDeleting = sub_10008A610(v2, @"UserPersonaOnDeletion");
      v3->_isDisabled = sub_10008A610(v2, @"UserPersonaDisabled");
      uint64_t v19 = sub_10008A8B8(v2, @"UserPersonaDisplayName");
      objc_setProperty_nonatomic_copy(v3, v20, v19, 64);
    }
    else
    {

      sub_10008A610(v2, @"UserPersonaOnDeletion");
      sub_10008A610(v2, @"UserPersonaDisabled");
      uint64_t v19 = sub_10008A8B8(v2, @"UserPersonaDisplayName");
    }

    int v21 = sub_10008ABA0(v2, @"MKBUserSessionCreateTimeStamp");
    sub_1000190E4((uint64_t)v3, v21);

    unsigned int v22 = sub_10008ABA0(v2, @"MKBUserSessionLoginTimeStamp");
    sub_1000190F4((uint64_t)v3, v22);

    uint64_t v23 = sub_10008AAF4(v2, @"MKBUserSessionVolumeUUID");
    sub_100019104((uint64_t)v3, v23);

    int v24 = sub_10008AAF4(v2, @"MKBUserSessionUUID");
    sub_100019114((uint64_t)v3, v24);

    long long v26 = sub_10008A8B8(v2, @"MKBUserSessionHomeDir");
    if (v3) {
      objc_setProperty_nonatomic_copy(v3, v25, v26, 104);
    }

    int v28 = sub_10008A8B8(v2, @"MKBUserSessionVolumeDeviceNode");
    if (v3) {
      objc_setProperty_nonatomic_copy(v3, v27, v28, 112);
    }

    __int16 v29 = sub_10008AAF4(v2, @"UserPersonaUserODUUID");
    sub_100019150((uint64_t)v3, v29);

    unsigned int v30 = sub_10008A720(v2, @"UserPersonaUserUID", 0);
    if (v3)
    {
      v3->_uid = v30;
      v3->_gid = sub_10008A720(v2, @"UserPersonaUserGID", 0);
    }
    else
    {
      sub_10008A720(v2, @"UserPersonaUserGID", 0);
    }
    NSErrorDomain v31 = sub_10008AC30(v2, @"UserPersonaVolumeKey");
    sub_100019160((uint64_t)v3, v31);

    id v32 = sub_10008A830(v2, @"UsePersonaGenerationID", 0);
    if (v3) {
      v3->_generation = (unint64_t)v32;
    }
    __int16 v33 = v3;
  }

  return v33;
}

void sub_10007973C(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 40);
  }
}

void sub_100079750(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 48);
  }
}

void sub_100079764(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 56);
  }
}

uint64_t sub_100079778(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 8) = a2;
  }
  return result;
}

void sub_100079784(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 64);
  }
}

void sub_100079798(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 104);
  }
}

void sub_1000797AC(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 112);
  }
}

uint64_t sub_1000797C0(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 20) = a2;
  }
  return result;
}

uint64_t sub_1000797CC(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_1000797D8(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 136) = a2;
  }
  return result;
}

id sub_1000797E4(uint64_t a1)
{
  if (a1)
  {
    id v2 = +[NSMutableDictionary dictionary];
    unsigned int v3 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 12)];
    [v2 setObject:v3 forKeyedSubscript:@"UserPersonaType"];

    unsigned int v4 = [*(id *)(a1 + 32) UUIDString];
    [v2 setObject:v4 forKeyedSubscript:@"UserPersonaUniqueString"];

    if (*(_DWORD *)(a1 + 16))
    {
      long long v5 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
      [v2 setObject:v5 forKeyedSubscript:@"UserPersonaID"];
    }
    [v2 setObject:*(void *)(a1 + 40) forKeyedSubscript:@"UserPersonaNickName"];
    id v6 = *(id *)(a1 + 48);
    unsigned int v7 = [v6 allObjects];
    uint64_t v8 = [v7 sortedArrayUsingSelector:"compare:"];

    [v2 setObject:v8 forKeyedSubscript:@"UserPersonaBundleIDS"];
    id v9 = *(id *)(a1 + 56);
    uint64_t v10 = [v9 allObjects];
    unsigned int v11 = [v10 sortedArrayUsingSelector:"compare:"];

    [v2 setObject:v11 forKeyedSubscript:@"UserPersonaObserverService"];
    if (*(unsigned char *)(a1 + 8))
    {
      unsigned int v12 = +[NSNumber numberWithBool:1];
      [v2 setObject:v12 forKeyedSubscript:@"UserPersonaOnDeletion"];
    }
    if (*(unsigned char *)(a1 + 9))
    {
      SEL v13 = +[NSNumber numberWithBool:1];
      [v2 setObject:v13 forKeyedSubscript:@"UserPersonaDisabled"];
    }
    [v2 setObject:*(void *)(a1 + 64) forKeyedSubscript:@"UserPersonaDisplayName"];
    [v2 setObject:*(void *)(a1 + 72) forKeyedSubscript:@"MKBUserSessionCreateTimeStamp"];
    [v2 setObject:*(void *)(a1 + 80) forKeyedSubscript:@"MKBUserSessionLoginTimeStamp"];
    unsigned int v14 = [*(id *)(a1 + 88) UUIDString];
    [v2 setObject:v14 forKeyedSubscript:@"MKBUserSessionVolumeUUID"];

    unsigned int v15 = [*(id *)(a1 + 96) UUIDString];
    [v2 setObject:v15 forKeyedSubscript:@"MKBUserSessionUUID"];

    [v2 setObject:*(void *)(a1 + 104) forKeyedSubscript:@"MKBUserSessionHomeDir"];
    [v2 setObject:*(void *)(a1 + 112) forKeyedSubscript:@"MKBUserSessionVolumeDeviceNode"];
    unsigned int v16 = [*(id *)(a1 + 120) UUIDString];
    [v2 setObject:v16 forKeyedSubscript:@"UserPersonaUserODUUID"];

    if (*(_DWORD *)(a1 + 20))
    {
      uint64_t v17 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
      [v2 setObject:v17 forKeyedSubscript:@"UserPersonaUserUID"];
    }
    if (*(_DWORD *)(a1 + 24))
    {
      uint64_t v18 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
      [v2 setObject:v18 forKeyedSubscript:@"UserPersonaUserGID"];
    }
    [v2 setObject:*(void *)(a1 + 128) forKeyedSubscript:@"UserPersonaVolumeKey"];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

void sub_10007B3EC(id a1)
{
  qword_1000E4188 = (uint64_t)os_log_create(off_1000E33D8, "persona");

  _objc_release_x1();
}

BOOL sub_10007B434(char *a1, CFIndex a2)
{
  char v13 = 1;
  BOOL v3 = sub_10007B654("User", a1, a2, 2, &v13);
  if (v3)
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v4 = (id)qword_1000E4198;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = sub_100055404(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v6 = v5;
      }
      else {
        unsigned int v6 = v5 & 0xFFFFFFFE;
      }
      if (v6)
      {
        unsigned int v7 = "TRUE";
        if (!v13) {
          unsigned int v7 = "FALSE";
        }
        *(_DWORD *)unsigned int v14 = 136315394;
        *(void *)&v14[4] = a1;
        __int16 v15 = 2080;
        unsigned int v16 = v7;
        goto LABEL_19;
      }
      goto LABEL_21;
    }
  }
  else
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v4 = (id)qword_1000E4198;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)unsigned int v14 = 0;
      unsigned int v8 = sub_100055404(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9)
      {
LABEL_19:
        uint64_t v10 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
        goto LABEL_22;
      }
LABEL_21:
      unsigned int v11 = 0;
LABEL_22:
      free(v11);
    }
  }

  return v3;
}

BOOL sub_10007B654(const char *a1, char *a2, CFIndex a3, int a4, char *a5)
{
  unsigned int v7 = sub_10007B784(a1, a4, 1, a5);
  if (!v7) {
    return 0;
  }
  unsigned int v8 = v7;
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v7, kUMUserSessionVolumeDeviceNodeKey);
  BOOL v10 = Value != 0;
  if (Value) {
    CFStringGetCString(Value, a2, a3, 0x8000100u);
  }
  CFRelease(v8);
  return v10;
}

__CFDictionary *sub_10007B6DC(__CFDictionary *a1)
{
  id result = sub_10007B784("User", 2, 0, 0);
  if (result)
  {
    CFDictionaryRef v3 = result;
    CFStringRef Value = CFDictionaryGetValue(result, kUMUserSessionVolumeDeviceNodeKey);
    unsigned int v5 = CFDictionaryGetValue(v3, kUMUserSessionVolumeUUIDKey);
    CFDictionarySetValue(a1, kUMUserSessionVolumeDeviceNodeKey, Value);
    CFDictionarySetValue(a1, kUMUserSessionVolumeUUIDKey, v5);
    CFRelease(v3);
    return (__CFDictionary *)1;
  }
  return result;
}

__CFDictionary *sub_10007B784(const char *a1, int a2, int a3, char *a4)
{
  *(void *)existing = 0;
  CFStringRef prefix = 0;
  CFMutableDictionaryRef v86 = 0;
  CFMutableDictionaryRef properties = 0;
  CFMutableDictionaryRef theDict = 0;
  io_registry_entry_t parent = 0;
  unsigned __int16 valuePtr = 0;
  memset(name, 0, 128);
  unsigned int v6 = &qword_1000E4000;
  if (a3)
  {
    int BootDevice = APFSContainerGetBootDevice();
    if (BootDevice)
    {
      int v8 = BootDevice;
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      unsigned int v9 = (id)qword_1000E4198;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_142;
      }
      *(void *)unsigned int v90 = 0;
      unsigned int v10 = sub_100055404(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        LODWORD(v93) = 67109120;
        HIDWORD(v93) = v8;
        goto LABEL_32;
      }
      goto LABEL_140;
    }
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v12 = (id)qword_1000E4198;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v93 = 0;
      unsigned int v13 = sub_100055404(1);
      unsigned int v14 = v12;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v13;
      }
      else {
        unsigned int v15 = v13 & 0xFFFFFFFE;
      }
      if (v15)
      {
        *(_DWORD *)unsigned int v90 = 138412290;
        *(void *)&v90[4] = prefix;
        unsigned int v16 = (char *)_os_log_send_and_compose_impl();

        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {

        unsigned int v16 = 0;
      }
      free(v16);
    }
  }
  CFDictionaryRef v17 = IOServiceMatching("AppleAPFSContainer");
  if (IOServiceGetMatchingServices(kIOMainPortDefault, v17, &existing[1]))
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v9 = (id)qword_1000E4198;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_142;
    }
    *(void *)unsigned int v90 = 0;
    unsigned int v18 = sub_100055404(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v18 & 0xFFFFFFFE;
    }
    if (v19)
    {
      LOWORD(v93) = 0;
LABEL_32:
      SEL v20 = (const char *)_os_log_send_and_compose_impl();
      int v21 = (char *)v20;
      if (v20) {
        sub_100055434(v20);
      }
      goto LABEL_141;
    }
LABEL_140:
    int v21 = 0;
LABEL_141:
    free(v21);
LABEL_142:
    io_object_t v28 = 0;
    io_registry_entry_t v25 = 0;
    unsigned int v22 = 0;
    goto LABEL_143;
  }
  int v78 = a3;
  unsigned int v22 = 0;
  int v23 = 0;
  int v79 = a2;
  do
  {
    io_registry_entry_t v24 = IOIteratorNext(existing[1]);
    if (!v24) {
      goto LABEL_136;
    }
    io_registry_entry_t v25 = v24;
    io_registry_entry_t parent = 0;
    existing[0] = 0;
    if (IORegistryEntryGetParentEntry(v24, "IOService", &parent)
      || IORegistryEntryGetChildIterator(v25, "IOService", existing))
    {
      if (v6[52] != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      unsigned int v9 = (id)qword_1000E4198;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_192;
      }
      *(void *)unsigned int v90 = 0;
      unsigned int v69 = sub_100055404(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v70 = v69;
      }
      else {
        unsigned int v70 = v69 & 0xFFFFFFFE;
      }
      if (v70)
      {
        LOWORD(v93) = 0;
        goto LABEL_186;
      }
LABEL_190:
      unsigned int v74 = 0;
LABEL_191:
      free(v74);
LABEL_192:
      io_object_t v28 = 0;
      goto LABEL_143;
    }
    CFMutableDictionaryRef v86 = 0;
    CFMutableDictionaryRef properties = 0;
    if (IORegistryEntryCreateCFProperties(parent, &properties, kCFAllocatorDefault, 0)
      || IORegistryEntryCreateCFProperties(v25, &v86, kCFAllocatorDefault, 0))
    {
      if (v6[52] != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      unsigned int v9 = (id)qword_1000E4198;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_192;
      }
      *(void *)unsigned int v90 = 0;
      unsigned int v71 = sub_100055404(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v72 = v71;
      }
      else {
        unsigned int v72 = v71 & 0xFFFFFFFE;
      }
      if (v72)
      {
        LOWORD(v93) = 0;
LABEL_186:
        unsigned int v73 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v74 = (char *)v73;
        if (v73) {
          sub_100055434(v73);
        }
        goto LABEL_191;
      }
      goto LABEL_190;
    }
    if (v86)
    {
      CFRelease(v86);
      CFMutableDictionaryRef v86 = 0;
    }
    if (properties)
    {
      CFRelease(properties);
      CFMutableDictionaryRef properties = 0;
    }
    int v80 = v23;
    if (parent)
    {
      IOObjectRelease(parent);
      io_registry_entry_t parent = 0;
    }
    io_object_t v26 = IOIteratorNext(existing[0]);
    BOOL v27 = v26 == 0;
    if (v26)
    {
      io_object_t v28 = v26;
      while (!IOObjectConformsTo(v28, "AppleAPFSVolume"))
      {
        char v30 = 0;
LABEL_126:
        IOObjectRelease(v28);
        if ((v30 & 1) == 0)
        {
          io_object_t v28 = IOIteratorNext(existing[0]);
          BOOL v27 = v28 == 0;
          if (v28) {
            continue;
          }
        }
        goto LABEL_132;
      }
      if (IORegistryEntryCreateCFProperties(v28, &theDict, kCFAllocatorDefault, 0))
      {
        if (v6[52] != -1) {
          dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
        }
        unsigned int v9 = (id)qword_1000E4198;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)unsigned int v90 = 0;
          unsigned int v65 = sub_100055404(1);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v66 = v65;
          }
          else {
            unsigned int v66 = v65 & 0xFFFFFFFE;
          }
          if (v66)
          {
            LOWORD(v93) = 0;
            int v67 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v68 = (char *)v67;
            if (v67) {
              sub_100055434(v67);
            }
          }
          else
          {
            unsigned int v68 = 0;
          }
          free(v68);
        }
LABEL_143:

        goto LABEL_144;
      }
      if (a2
        && (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RoleValue")) != 0
        && (CFNumberGetValue(Value, kCFNumberSInt16Type, &valuePtr), valuePtr != a2)
        || (memset(name, 0, 128), IORegistryEntryGetName(v28, name), strncmp(a1, name, 0x80uLL)))
      {
        char v30 = 0;
        goto LABEL_124;
      }
      CFStringRef v31 = (const __CFString *)CFDictionaryGetValue(theDict, @"BSD Name");
      if (v31 && v78 && prefix)
      {
        if (v6[52] != -1) {
          dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
        }
        id v32 = (id)qword_1000E4198;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v93 = 0;
          unsigned int v33 = sub_100055404(1);
          unsigned int v34 = v32;
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v35 = v33;
          }
          else {
            unsigned int v35 = v33 & 0xFFFFFFFE;
          }
          if (v35)
          {
            *(_DWORD *)unsigned int v90 = 138412546;
            *(void *)&v90[4] = prefix;
            __int16 v91 = 2112;
            CFStringRef v92 = v31;
            uint64_t v36 = (char *)_os_log_send_and_compose_impl();

            if (v36) {
              sub_100055434(v36);
            }
          }
          else
          {

            uint64_t v36 = 0;
          }
          unsigned int v6 = &qword_1000E4000;
          free(v36);
        }

        int HasPrefix = CFStringHasPrefix(v31, prefix);
        uint64_t v38 = v6[52];
        if (HasPrefix)
        {
          if (v38 != -1) {
            dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
          }
          uint64_t v39 = (id)qword_1000E4198;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v93 = 0;
            unsigned int v40 = sub_100055404(1);
            unsigned int v41 = v39;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v42 = v40;
            }
            else {
              unsigned int v42 = v40 & 0xFFFFFFFE;
            }
            if (v42)
            {
              *(_DWORD *)unsigned int v90 = 138412290;
              *(void *)&v90[4] = v31;
              long long v43 = (char *)_os_log_send_and_compose_impl();

              if (v43) {
                sub_100055434(v43);
              }
            }
            else
            {

              long long v43 = 0;
            }
            free(v43);
            unsigned int v6 = &qword_1000E4000;
          }

          goto LABEL_92;
        }
        if (v38 != -1) {
          dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
        }
        long long v44 = (id)qword_1000E4198;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v93 = 0;
          unsigned int v45 = sub_100055404(1);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v46 = v45;
          }
          else {
            unsigned int v46 = v45 & 0xFFFFFFFE;
          }
          if (v46)
          {
            *(_DWORD *)unsigned int v90 = 138412290;
            *(void *)&v90[4] = v31;
            long long v47 = (const char *)_os_log_send_and_compose_impl();
            long long v48 = (char *)v47;
            if (v47) {
              sub_100055434(v47);
            }
          }
          else
          {
            long long v48 = 0;
          }
          free(v48);
          unsigned int v6 = &qword_1000E4000;
        }

        char v30 = 0;
      }
      else
      {
LABEL_92:
        unsigned int v22 = sub_100088C68();
        CFDictionarySetValue(v22, kUMUserSessionVolumeDeviceNodeKey, v31);
        long long v49 = CFDictionaryGetValue(theDict, @"UUID");
        CFDictionarySetValue(v22, kUMUserSessionVolumeUUIDKey, v49);
        if (a4)
        {
          CFBooleanRef v50 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"Encrypted");
          if (!v50
            || (v51 = v50, v52 = CFGetTypeID(v50), v53 = v52 == CFBooleanGetTypeID(), unsigned int v6 = &qword_1000E4000, v53)
            && v51 == kCFBooleanFalse)
          {
            if (v6[52] != -1) {
              dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
            }
            long long v54 = (id)qword_1000E4198;
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)unsigned int v90 = 0;
              unsigned int v55 = sub_100055404(1);
              if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v56 = v55;
              }
              else {
                unsigned int v56 = v55 & 0xFFFFFFFE;
              }
              if (v56)
              {
                LOWORD(v93) = 0;
                unsigned int v57 = (const char *)_os_log_send_and_compose_impl();
                unsigned int v58 = (char *)v57;
                if (v57) {
                  sub_100055434(v57);
                }
              }
              else
              {
                unsigned int v58 = 0;
              }
              free(v58);
            }
            char v63 = 0;
          }
          else
          {
            if (qword_1000E41A0 != -1) {
              dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
            }
            long long v54 = (id)qword_1000E4198;
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)unsigned int v90 = 0;
              unsigned int v59 = sub_100055404(1);
              if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v60 = v59;
              }
              else {
                unsigned int v60 = v59 & 0xFFFFFFFE;
              }
              if (v60)
              {
                LOWORD(v93) = 0;
                id v61 = (const char *)_os_log_send_and_compose_impl();
                uint64_t v62 = (char *)v61;
                if (v61) {
                  sub_100055434(v61);
                }
              }
              else
              {
                uint64_t v62 = 0;
              }
              free(v62);
            }
            char v63 = 1;
          }

          *a4 = v63;
        }
        char v30 = 1;
      }
      a2 = v79;
LABEL_124:
      if (theDict)
      {
        CFRelease(theDict);
        CFMutableDictionaryRef theDict = 0;
      }
      goto LABEL_126;
    }
LABEL_132:
    if (existing[0])
    {
      IOObjectRelease(existing[0]);
      existing[0] = 0;
    }
    IOObjectRelease(v25);
    int v23 = v80 + 1;
  }
  while (v27);
  int v23 = 1;
LABEL_136:
  if (existing[1])
  {
    IOObjectRelease(existing[1]);
    existing[1] = 0;
  }
  if (!v23)
  {
    if (v6[52] != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v9 = (id)qword_1000E4198;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)unsigned int v90 = 0;
      unsigned int v75 = sub_100055404(1);
      unsigned int v9 = v9;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v76 = v75;
      }
      else {
        unsigned int v76 = v75 & 0xFFFFFFFE;
      }
      if (v76)
      {
        LOWORD(v93) = 0;
        unsigned int v77 = (char *)_os_log_send_and_compose_impl();

        if (v77) {
          sub_100055434(v77);
        }
      }
      else
      {

        unsigned int v77 = 0;
      }
      free(v77);
    }
    io_object_t v28 = 0;
    io_registry_entry_t v25 = 0;
    goto LABEL_143;
  }
  io_object_t v28 = 0;
  io_registry_entry_t v25 = 0;
LABEL_144:
  if (prefix)
  {
    CFRelease(prefix);
    CFStringRef prefix = 0;
  }
  if (v86)
  {
    CFRelease(v86);
    CFMutableDictionaryRef v86 = 0;
  }
  if (properties)
  {
    CFRelease(properties);
    CFMutableDictionaryRef properties = 0;
  }
  if (parent)
  {
    IOObjectRelease(parent);
    io_registry_entry_t parent = 0;
  }
  if (existing[0])
  {
    IOObjectRelease(existing[0]);
    existing[0] = 0;
  }
  if (v25) {
    IOObjectRelease(v25);
  }
  if (existing[1])
  {
    IOObjectRelease(existing[1]);
    existing[1] = 0;
  }
  if (v28) {
    IOObjectRelease(v28);
  }
  return v22;
}

uint64_t sub_10007C588(__CFDictionary *a1, uint64_t a2, const __CFString *a3, _DWORD *a4, char a5, int a6)
{
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  *(_OWORD *)__argv = 0u;
  long long v82 = 0u;
  int BootDevice = APFSContainerGetBootDevice();
  if (BootDevice)
  {
    int v13 = BootDevice;
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v14 = (id)qword_1000E4198;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buffer = 0;
      unsigned int v15 = sub_100055404(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = v15 & 0xFFFFFFFE;
      }
      if (v16)
      {
        *(_DWORD *)__str = 67109120;
        *(_DWORD *)&char __str[4] = v13;
        CFDictionaryRef v17 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v18 = (char *)v17;
        if (v17) {
          sub_100055434(v17);
        }
      }
      else
      {
        unsigned int v18 = 0;
      }
      free(v18);
    }

    if (a4)
    {
      uint64_t result = 0;
      *a4 = v13;
      return result;
    }
    return 0;
  }
  CFStringRef v77 = a3;
  strcpy(v79, "/dev/");
  CFStringGetCString(0, &v79[5], 59, 0x8000100u);
  CFRelease(0);
  unsigned int v19 = a1;
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  SEL v20 = (id)qword_1000E4198;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)__str = 0;
    unsigned int v21 = sub_100055404(1);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = v21 & 0xFFFFFFFE;
    }
    if (v22)
    {
      *(_DWORD *)buffer = 138412290;
      *(void *)&buffer[4] = v77;
      int v23 = (const char *)_os_log_send_and_compose_impl();
      io_registry_entry_t v24 = (char *)v23;
      if (v23) {
        sub_100055434(v23);
      }
    }
    else
    {
      io_registry_entry_t v24 = 0;
    }
    free(v24);
  }

  CFStringGetCString(v77, buffer, 256, 0x8000100u);
  if (a5)
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    io_object_t v26 = (id)qword_1000E4198;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)unsigned int v89 = 0;
      unsigned int v27 = sub_100055404(1);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v28 = v27;
      }
      else {
        unsigned int v28 = v27 & 0xFFFFFFFE;
      }
      if (v28)
      {
        *(_DWORD *)__str = 136315138;
        *(void *)&char __str[4] = buffer;
        __int16 v29 = (const char *)_os_log_send_and_compose_impl();
        char v30 = (char *)v29;
        if (v29) {
          sub_100055434(v29);
        }
      }
      else
      {
        char v30 = 0;
      }
      free(v30);
    }

    __argv[0] = "/sbin/newfs_apfs";
    __argv[1] = "-R";
    *(void *)&long long v82 = "e";
    *((void *)&v82 + 1) = "-v";
    int v36 = 5;
    uint64_t v37 = buffer;
    uint64_t v38 = 4;
    uint64_t v39 = v19;
    goto LABEL_55;
  }
  snprintf(__str, 0x100uLL, "%zu", a2);
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  CFStringRef v31 = (id)qword_1000E4198;
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v92 = 0;
    unsigned int v32 = sub_100055404(1);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v33 = v32;
    }
    else {
      unsigned int v33 = v32 & 0xFFFFFFFE;
    }
    if (v33)
    {
      *(_DWORD *)unsigned int v89 = 136315394;
      *(void *)&v89[4] = buffer;
      __int16 v90 = 2080;
      __int16 v91 = __str;
      unsigned int v34 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v35 = (char *)v34;
      if (v34) {
        sub_100055434(v34);
      }
    }
    else
    {
      unsigned int v35 = 0;
    }
    free(v35);
  }

  __argv[0] = "/sbin/newfs_apfs";
  if (a6)
  {
    __argv[1] = "-R";
    *(void *)&long long v82 = "u";
    int v40 = 3;
  }
  else
  {
    int v40 = 1;
  }
  uint64_t v39 = v19;
  __argv[v40] = "-v";
  int v36 = v40 + 2;
  __argv[v40 + 1] = buffer;
  if (a2)
  {
    uint64_t v38 = (v40 + 3);
    __argv[v36] = "-s";
    int v36 = v40 | 4;
    uint64_t v37 = __str;
LABEL_55:
    __argv[v38] = v37;
  }
  __argv[v36] = "-P";
  __argv[v36 + 1] = "-w";
  __argv[v36 + 2] = "-A";
  __argv[v36 + 3] = v79;
  __argv[v36 + 4] = 0;
  int v41 = sub_10001D218((const char **)__argv);
  if (v41)
  {
    int v42 = v41;
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    long long v43 = (id)qword_1000E4198;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)unsigned int v89 = 0;
      unsigned int v44 = sub_100055404(1);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v45 = v44;
      }
      else {
        unsigned int v45 = v44 & 0xFFFFFFFE;
      }
      if (v45)
      {
        LODWORD(v92) = 67109120;
        HIDWORD(v92) = v42;
        unsigned int v46 = (const char *)_os_log_send_and_compose_impl();
        long long v47 = (char *)v46;
        if (v46) {
          sub_100055434(v46);
        }
      }
      else
      {
        long long v47 = 0;
      }
      free(v47);
    }

    if (a4)
    {
      uint64_t result = 0;
      *a4 = v42;
      return result;
    }
    return 0;
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  long long v48 = (id)qword_1000E4198;
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)unsigned int v89 = 0;
    unsigned int v49 = sub_100055404(1);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v50 = v49;
    }
    else {
      unsigned int v50 = v49 & 0xFFFFFFFE;
    }
    if (v50)
    {
      LOWORD(v92) = 0;
      CFBooleanRef v51 = (const char *)_os_log_send_and_compose_impl();
      CFTypeID v52 = (char *)v51;
      if (v51) {
        sub_100055434(v51);
      }
    }
    else
    {
      CFTypeID v52 = 0;
    }
    free(v52);
  }

  BOOL v53 = sub_10007B784(buffer, 0, 0, 0);
  if (!v53)
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    uint64_t v62 = (id)qword_1000E4198;
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v92 = 0;
      unsigned int v63 = sub_100055404(1);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v64 = v63;
      }
      else {
        unsigned int v64 = v63 & 0xFFFFFFFE;
      }
      if (v64)
      {
        *(_DWORD *)unsigned int v89 = 138412290;
        *(void *)&v89[4] = v77;
        unsigned int v65 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v66 = (char *)v65;
        if (v65) {
          sub_100055434(v65);
        }
      }
      else
      {
        unsigned int v66 = 0;
      }
      free(v66);
    }

    return 0;
  }
  CFDictionaryRef v54 = v53;
  CFNumberRef Value = CFDictionaryGetValue(v53, kUMUserSessionVolumeDeviceNodeKey);
  unsigned int v56 = CFDictionaryGetValue(v54, kUMUserSessionVolumeUUIDKey);
  CFDictionarySetValue(v39, kUMUserSessionVolumeDeviceNodeKey, Value);
  CFDictionarySetValue(v39, kUMUserSessionVolumeUUIDKey, v56);
  CFDictionarySetValue(v39, kUMUserSessionNeedsMountKey, kCFBooleanTrue);
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  unsigned int v57 = (id)qword_1000E4198;
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v92 = 0;
    unsigned int v58 = sub_100055404(1);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v59 = v58;
    }
    else {
      unsigned int v59 = v58 & 0xFFFFFFFE;
    }
    if (v59)
    {
      *(_DWORD *)unsigned int v89 = 138412546;
      *(void *)&v89[4] = Value;
      __int16 v90 = 2112;
      __int16 v91 = v56;
      unsigned int v60 = (const char *)_os_log_send_and_compose_impl();
      id v61 = (char *)v60;
      if (v60) {
        sub_100055434(v60);
      }
    }
    else
    {
      id v61 = 0;
    }
    free(v61);
  }

  CFRelease(v54);
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  int v67 = (id)qword_1000E4198;
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v92 = 0;
    unsigned int v68 = sub_100055404(1);
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v69 = v68;
    }
    else {
      unsigned int v69 = v68 & 0xFFFFFFFE;
    }
    if (v69)
    {
      *(_DWORD *)unsigned int v89 = 138412290;
      *(void *)&v89[4] = v77;
      unsigned int v70 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v71 = (char *)v70;
      if (v70) {
        sub_100055434(v70);
      }
    }
    else
    {
      unsigned int v71 = 0;
    }
    free(v71);
  }

  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  unsigned int v72 = (id)qword_1000E4198;
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v92 = 0;
    unsigned int v73 = sub_100055404(1);
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v74 = v73;
    }
    else {
      unsigned int v74 = v73 & 0xFFFFFFFE;
    }
    if (v74)
    {
      *(_DWORD *)unsigned int v89 = 138412290;
      *(void *)&v89[4] = v39;
      unsigned int v75 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v76 = (char *)v75;
      if (v75) {
        sub_100055434(v75);
      }
    }
    else
    {
      unsigned int v76 = 0;
    }
    free(v76);
  }

  return 1;
}

uint64_t sub_10007D0FC(const __CFDictionary *a1, _DWORD *a2)
{
  memset(v23, 0, sizeof(v23));
  sub_1000887CC(a1, kUMUserSessionVolumeDeviceNodeKey, (char *)v23, 256);
  int v4 = sub_10007D464(a1, (char *)v23);
  if (v4)
  {
    if (a2)
    {
      int v5 = v4;
      uint64_t result = 0;
      *a2 = v5;
      return result;
    }
    return 0;
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  unsigned int v7 = (id)qword_1000E4198;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = sub_100055404(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v9 = v8;
    }
    else {
      unsigned int v9 = v8 & 0xFFFFFFFE;
    }
    if (v9)
    {
      unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v11 = (char *)v10;
      if (v10) {
        sub_100055434(v10);
      }
    }
    else
    {
      unsigned int v11 = 0;
    }
    free(v11);
  }

  int v12 = APFSVolumeDelete();
  if (v12)
  {
    if (a2) {
      *a2 = v12;
    }
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    int v13 = (id)qword_1000E4198;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        unsigned int v16 = (const char *)_os_log_send_and_compose_impl();
        CFDictionaryRef v17 = (char *)v16;
        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {
        CFDictionaryRef v17 = 0;
      }
      free(v17);
    }

    return 0;
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  unsigned int v18 = (id)qword_1000E4198;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v19 = sub_100055404(1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = v19 & 0xFFFFFFFE;
    }
    if (v20)
    {
      unsigned int v21 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v22 = (char *)v21;
      if (v21) {
        sub_100055434(v21);
      }
    }
    else
    {
      unsigned int v22 = 0;
    }
    free(v22);
  }

  return 1;
}

uint64_t sub_10007D464(__CFDictionary *a1, char *a2)
{
  if (a2)
  {
    uint64_t BootDevice = APFSContainerGetBootDevice();
    if (BootDevice)
    {
      uint64_t v5 = BootDevice;
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      unsigned int v6 = (id)qword_1000E4198;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)buffer = 0;
        unsigned int v7 = sub_100055404(1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v7 & 0xFFFFFFFE;
        }
        if (v8)
        {
          unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v10 = (char *)v9;
          if (v9) {
            sub_100055434(v9);
          }
        }
        else
        {
          unsigned int v10 = 0;
        }
        free(v10);
      }

      return v5;
    }
    CFStringGetCString(0, buffer, 64, 0x8000100u);
    CFRelease(0);
    if (strstr(a2, buffer)) {
      return 0;
    }
    if (strrchr(a2, 115))
    {
      __strcat_chk();
      strlcpy(a2, buffer, 0x100uLL);
      CFStringRef v16 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
      CFDictionarySetValue(a1, kUMUserSessionVolumeDeviceNodeKey, v16);
      CFRelease(v16);
      return 0;
    }
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v18 = (id)qword_1000E4198;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v19 = sub_100055404(1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v20 = v19;
      }
      else {
        unsigned int v20 = v19 & 0xFFFFFFFE;
      }
      if (v20)
      {
        unsigned int v21 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v22 = (char *)v21;
        if (v21) {
          sub_100055434(v21);
        }
      }
      else
      {
        unsigned int v22 = 0;
      }
      free(v22);
    }

    return 19;
  }
  else
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v11 = (id)qword_1000E4198;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v12 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v12 & 0xFFFFFFFE;
      }
      if (v13)
      {
        *(_DWORD *)buffer = 136315138;
        *(void *)&buffer[4] = "updateAPFSDevWithCurrentBootContainer";
        unsigned int v14 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v15 = (char *)v14;
        if (v14) {
          sub_100055434(v14);
        }
      }
      else
      {
        unsigned int v15 = 0;
      }
      free(v15);
    }

    return 22;
  }
}

uint64_t sub_10007D844(const __CFDictionary *a1, const __CFString *a2, _DWORD *a3, int a4)
{
  memset(v105, 0, sizeof(v105));
  bzero(buffer, 0x400uLL);
  if (a2 && (CFTypeID v8 = CFGetTypeID(a2), v8 == CFStringGetTypeID())) {
    CFStringGetCString(a2, buffer, 1024, 0x8000100u);
  }
  else {
    sub_1000887CC(a1, kUMUserSessionHomeDirKey, buffer, 1024);
  }
  sub_1000887CC(a1, kUMUserSessionVolumeDeviceNodeKey, (char *)v105, 256);
  int v9 = sub_10007D464(a1, (char *)v105);
  if (v9)
  {
    uint64_t v10 = 0;
    if (a3) {
      *a3 = v9;
    }
    return v10;
  }
  if (a4)
  {
    if (byte_1000E4312) {
      dev_t v11 = sub_10001D20C();
    }
    else {
      dev_t v11 = 501;
    }
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v13 = (id)qword_1000E4198;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      __argv[0] = 0;
      unsigned int v17 = sub_100055404(1);
      unsigned int v13 = v13;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v18 = v17;
      }
      else {
        unsigned int v18 = v17 & 0xFFFFFFFE;
      }
      if (v18)
      {
        v95.st_dev = 136315650;
        *(void *)&v95.st_mode = buffer;
        WORD2(v95.st_ino) = 2080;
        *(__darwin_ino64_t *)((char *)&v95.st_ino + 6) = (__darwin_ino64_t)v105;
        HIWORD(v95.st_gid) = 1024;
        v95.st_rdev = v11;
        unsigned int v19 = (char *)_os_log_send_and_compose_impl();

        if (v19) {
          sub_100055434(v19);
        }
      }
      else
      {

        unsigned int v19 = 0;
      }
      free(v19);
    }
    gid_t v12 = v11;
  }
  else
  {
    dev_t v11 = sub_1000885F0(a1, kUMUserSessionIDKey);
    gid_t v12 = sub_1000885F0(a1, kUMUserSessionGroupIDKey);
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v13 = (id)qword_1000E4198;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&v95.st_dev = 0;
      unsigned int v14 = sub_100055404(1);
      unsigned int v13 = v13;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        LODWORD(__argv[0]) = 67109120;
        HIDWORD(__argv[0]) = v11;
        CFStringRef v16 = (char *)_os_log_send_and_compose_impl();

        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {

        CFStringRef v16 = 0;
      }
      free(v16);
    }
  }

  long long v102 = 0u;
  long long v103 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  *(_OWORD *)__argv = 0u;
  long long v97 = 0u;
  memset(&v95, 0, sizeof(v95));
  if (stat(buffer, &v95))
  {
    int v20 = *__error();
    if (v20 != 2)
    {
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      CFStringRef v31 = (id)qword_1000E4198;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        int v32 = sub_100055404(1);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
          v32 &= ~1u;
        }
        if (v32)
        {
          unsigned int v33 = v31;
          strerror(v20);
          unsigned int v34 = (char *)_os_log_send_and_compose_impl();

          if (v34) {
            sub_100055434(v34);
          }
        }
        else
        {
          unsigned int v34 = 0;
        }
        free(v34);
      }

      return 0;
    }
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v21 = (id)qword_1000E4198;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v22 = sub_100055404(1);
      int v23 = v21;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v24 = v22;
      }
      else {
        unsigned int v24 = v22 & 0xFFFFFFFE;
      }
      if (v24)
      {
        io_registry_entry_t v25 = (char *)_os_log_send_and_compose_impl();

        if (v25) {
          sub_100055434(v25);
        }
      }
      else
      {

        io_registry_entry_t v25 = 0;
      }
      free(v25);
    }

    if (mkdir(buffer, 0x1C0u) < 0)
    {
      int v35 = *__error();
      if (v35 != 17)
      {
        if (qword_1000E41A0 != -1) {
          dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
        }
        unsigned int v56 = (id)qword_1000E4198;
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          int v57 = sub_100055404(1);
          if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
            v57 &= ~1u;
          }
          if (v57)
          {
            unsigned int v58 = v56;
            strerror(v35);
            unsigned int v59 = (char *)_os_log_send_and_compose_impl();

            if (v59) {
              sub_100055434(v59);
            }
          }
          else
          {
            unsigned int v59 = 0;
          }
          free(v59);
        }

        if (!a3) {
          return 0;
        }
        goto LABEL_229;
      }
    }
    if (chown(buffer, v11, v12))
    {
      int v36 = *__error();
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      uint64_t v37 = (id)qword_1000E4198;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        int v38 = sub_100055404(1);
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
          v38 &= ~1u;
        }
        if (v38)
        {
          uint64_t v39 = v37;
          strerror(v36);
          int v40 = (char *)_os_log_send_and_compose_impl();

          if (v40) {
            sub_100055434(v40);
          }
        }
        else
        {
          int v40 = 0;
        }
        free(v40);
      }

      rmdir(buffer);
      if (!a3) {
        return 0;
      }
LABEL_229:
      uint64_t v10 = 0;
      *a3 = 22;
      return v10;
    }
  }
  else
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    io_object_t v26 = (id)qword_1000E4198;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v27 = sub_100055404(1);
      unsigned int v28 = v26;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v29 = v27;
      }
      else {
        unsigned int v29 = v27 & 0xFFFFFFFE;
      }
      if (v29)
      {
        char v30 = (char *)_os_log_send_and_compose_impl();

        if (v30) {
          sub_100055434(v30);
        }
      }
      else
      {

        char v30 = 0;
      }
      free(v30);
    }
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  int v41 = (id)qword_1000E4198;
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v42 = sub_100055404(1);
    long long v43 = v41;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v44 = v42;
    }
    else {
      unsigned int v44 = v42 & 0xFFFFFFFE;
    }
    if (v44)
    {
      unsigned int v45 = (char *)_os_log_send_and_compose_impl();

      if (v45) {
        sub_100055434(v45);
      }
    }
    else
    {

      unsigned int v45 = 0;
    }
    free(v45);
  }

  if (sub_10007EB50(a1, 0) != 1)
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    CFBooleanRef v51 = (id)qword_1000E4198;
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v52 = sub_100055404(1);
      BOOL v53 = v51;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v54 = v52;
      }
      else {
        unsigned int v54 = v52 & 0xFFFFFFFE;
      }
      if (v54)
      {
        unsigned int v55 = (char *)_os_log_send_and_compose_impl();

        if (v55) {
          sub_100055434(v55);
        }
      }
      else
      {

        unsigned int v55 = 0;
      }
      free(v55);
    }

    __argv[0] = "/sbin/mount_apfs";
    if (a4)
    {
      int v60 = 1;
    }
    else
    {
      __argv[1] = "-o";
      *(void *)&long long v97 = "nosuid";
      *((void *)&v97 + 1) = "-o";
      *(void *)&long long v98 = "nodev";
      int v60 = 5;
    }
    __argv[v60] = (char *)v105;
    __argv[v60 + 1] = buffer;
    __argv[v60 | 2u] = 0;
    int v61 = sub_10001D218((const char **)__argv);
    if (v61)
    {
      int v62 = v61;
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      unsigned int v63 = (id)qword_1000E4198;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v64 = sub_100055404(1);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v65 = v64;
        }
        else {
          unsigned int v65 = v64 & 0xFFFFFFFE;
        }
        if (v65)
        {
          unsigned int v66 = (const char *)_os_log_send_and_compose_impl();
          int v67 = (char *)v66;
          if (v66) {
            sub_100055434(v66);
          }
        }
        else
        {
          int v67 = 0;
        }
        free(v67);
      }

      if (a3)
      {
        uint64_t v10 = 0;
        *a3 = v62;
        if (!a2) {
          goto LABEL_225;
        }
        goto LABEL_160;
      }
      goto LABEL_159;
    }
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v68 = (id)qword_1000E4198;
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v69 = sub_100055404(1);
      unsigned int v70 = v68;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v71 = v69;
      }
      else {
        unsigned int v71 = v69 & 0xFFFFFFFE;
      }
      if (v71)
      {
        unsigned int v72 = (char *)_os_log_send_and_compose_impl();

        if (v72) {
          sub_100055434(v72);
        }
      }
      else
      {

        unsigned int v72 = 0;
      }
      free(v72);
    }

    if ((a4 & 1) == 0)
    {
      if (CFDictionaryContainsKey(a1, kUMUserSessionVolumeMountedKey)) {
        CFDictionaryReplaceValue(a1, kUMUserSessionVolumeMountedKey, kCFBooleanTrue);
      }
      else {
        CFDictionarySetValue(a1, kUMUserSessionVolumeMountedKey, kCFBooleanTrue);
      }
    }
    if (chown(buffer, v11, v12))
    {
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      int v78 = (id)qword_1000E4198;
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v79 = sub_100055404(1);
        int v78 = v78;
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v80 = v79;
        }
        else {
          unsigned int v80 = v79 & 0xFFFFFFFE;
        }
        if (v80) {
          goto LABEL_194;
        }
        goto LABEL_196;
      }
    }
    else
    {
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      int v78 = (id)qword_1000E4198;
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v81 = sub_100055404(1);
        int v78 = v78;
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v82 = v81;
        }
        else {
          unsigned int v82 = v81 & 0xFFFFFFFE;
        }
        if (v82)
        {
LABEL_194:
          long long v83 = (char *)_os_log_send_and_compose_impl();

          if (v83) {
            sub_100055434(v83);
          }
          goto LABEL_197;
        }
LABEL_196:

        long long v83 = 0;
LABEL_197:
        free(v83);
      }
    }

    if (a2) {
      int v84 = 1;
    }
    else {
      int v84 = a4;
    }
    if (v84) {
      mode_t v85 = 457;
    }
    else {
      mode_t v85 = 448;
    }
    if (chmod(buffer, v85))
    {
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      long long v86 = (id)qword_1000E4198;
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v87 = sub_100055404(1);
        long long v88 = v86;
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v89 = v87;
        }
        else {
          unsigned int v89 = v87 & 0xFFFFFFFE;
        }
        if (v89) {
          goto LABEL_220;
        }
        goto LABEL_222;
      }
    }
    else
    {
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      long long v86 = (id)qword_1000E4198;
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v90 = sub_100055404(1);
        long long v88 = v86;
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v91 = v90;
        }
        else {
          unsigned int v91 = v90 & 0xFFFFFFFE;
        }
        if (v91)
        {
LABEL_220:
          uint64_t v92 = (char *)_os_log_send_and_compose_impl();

          if (v92) {
            sub_100055434(v92);
          }
          goto LABEL_223;
        }
LABEL_222:

        uint64_t v92 = 0;
LABEL_223:
        free(v92);
      }
    }

    uint64_t v10 = 1;
    if (a2) {
      goto LABEL_160;
    }
    goto LABEL_225;
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  unsigned int v46 = (id)qword_1000E4198;
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v47 = sub_100055404(1);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v48 = v47;
    }
    else {
      unsigned int v48 = v47 & 0xFFFFFFFE;
    }
    if (v48)
    {
      unsigned int v49 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v50 = (char *)v49;
      if (v49) {
        sub_100055434(v49);
      }
    }
    else
    {
      unsigned int v50 = 0;
    }
    free(v50);
  }

  if (!a3)
  {
LABEL_159:
    uint64_t v10 = 0;
    if (a2) {
      goto LABEL_160;
    }
LABEL_225:
    CFStringRef v93 = (const __CFString *)sub_100088788(a1, kUMUserSessionHomeDirKey);
    sub_10007ED6C(v93, v11, v12);
    return v10;
  }
  uint64_t v10 = 0;
  *a3 = 17;
  if (!a2) {
    goto LABEL_225;
  }
LABEL_160:
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  unsigned int v73 = (id)qword_1000E4198;
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v74 = sub_100055404(1);
    unsigned int v75 = v73;
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v76 = v74;
    }
    else {
      unsigned int v76 = v74 & 0xFFFFFFFE;
    }
    if (v76)
    {
      CFStringRef v77 = (char *)_os_log_send_and_compose_impl();

      if (v77) {
        sub_100055434(v77);
      }
    }
    else
    {

      CFStringRef v77 = 0;
    }
    free(v77);
  }

  return v10;
}

uint64_t sub_10007EB50(const __CFDictionary *a1, void *a2)
{
  unsigned int v15 = 0;
  uint64_t result = CFDictionaryContainsKey(a1, kUMUserSessionVolumeDeviceNodeKey);
  if (result)
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    *(_OWORD *)__s2 = 0u;
    long long v21 = 0u;
    sub_1000887CC(a1, kUMUserSessionVolumeDeviceNodeKey, __s2, 256);
    if (sub_10007D464(a1, __s2))
    {
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      uint64_t v5 = (id)qword_1000E4198;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v6 = sub_100055404(1);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v7 = v6;
        }
        else {
          unsigned int v7 = v6 & 0xFFFFFFFE;
        }
        if (v7)
        {
          int v16 = 136315394;
          unsigned int v17 = "checkAPFSVolumeMounted";
          __int16 v18 = 2080;
          unsigned int v19 = __s2;
          CFTypeID v8 = (const char *)_os_log_send_and_compose_impl();
          int v9 = (char *)v8;
          if (v8) {
            sub_100055434(v8);
          }
        }
        else
        {
          int v9 = 0;
        }
        free(v9);
      }
    }
    else
    {
      unsigned int v10 = getmntinfo(&v15, 2);
      if (!v10) {
        return 255;
      }
      unsigned int v11 = v10 + 1;
      f_mntfromname = v15[v10 - 1].f_mntfromname;
      while ((int)--v11 >= 1)
      {
        unsigned int v13 = f_mntfromname - 2168;
        unsigned int v14 = strstr(f_mntfromname, __s2);
        f_mntfromname = v13;
        if (v14)
        {
          if (a2) {
            *a2 = *((void *)v13 + 138);
          }
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_10007ED6C(const __CFString *a1, uid_t a2, gid_t a3)
{
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  unsigned int v6 = (id)qword_1000E4198;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)buffer = 0;
    unsigned int v7 = sub_100055404(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = v7 & 0xFFFFFFFE;
    }
    if (v8)
    {
      int v9 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v10 = (char *)v9;
      if (v9) {
        sub_100055434(v9);
      }
    }
    else
    {
      unsigned int v10 = 0;
    }
    free(v10);
  }

  bzero(buffer, 0x400uLL);
  uint64_t result = CFStringGetCString(a1, buffer, 1024, 0x8000100u);
  if (result)
  {
    sub_10007EEEC();
    sub_10001C824((uint64_t)buffer, a2, a3);
    return 1;
  }
  return result;
}

uint64_t sub_10007EEEC()
{
  bzero(v8, 0x400uLL);
  __strlcpy_chk();
  __strlcat_chk();
  if (sub_10002DFE4(v8) == 1)
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    uint64_t v0 = (id)qword_1000E4198;
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v1 = sub_100055404(1);
      if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v2 = v1;
      }
      else {
        unsigned int v2 = v1 & 0xFFFFFFFE;
      }
      if (v2)
      {
LABEL_17:
        uint64_t v5 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v6 = (char *)v5;
        if (v5) {
          sub_100055434(v5);
        }
        goto LABEL_20;
      }
LABEL_19:
      unsigned int v6 = 0;
LABEL_20:
      free(v6);
    }
  }
  else
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    uint64_t v0 = (id)qword_1000E4198;
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = sub_100055404(1);
      if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v4 = v3;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFFFE;
      }
      if (v4) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }

  return 1;
}

uint64_t sub_10007F0F4(const __CFDictionary *a1, const __CFString *a2, _DWORD *a3, int a4)
{
  sub_1000885F0(a1, kUMUserSessionIDKey);
  bzero(buffer, 0x400uLL);
  if (a2 && (CFTypeID v8 = CFGetTypeID(a2), v8 == CFStringGetTypeID())) {
    CFStringGetCString(a2, buffer, 1024, 0x8000100u);
  }
  else {
    sub_1000887CC(a1, kUMUserSessionHomeDirKey, buffer, 1024);
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  int v9 = (id)qword_1000E4198;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = sub_100055404(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = v10 & 0xFFFFFFFE;
    }
    if (v11)
    {
      gid_t v12 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v13 = (char *)v12;
      if (v12) {
        sub_100055434(v12);
      }
    }
    else
    {
      unsigned int v13 = 0;
    }
    free(v13);
  }

  int v14 = sub_10001986C(buffer, a4);
  if (v14)
  {
    int v15 = v14;
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    int v16 = (id)qword_1000E4198;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v17 = sub_100055404(1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v18 = v17;
      }
      else {
        unsigned int v18 = v17 & 0xFFFFFFFE;
      }
      if (v18)
      {
        unsigned int v19 = (const char *)_os_log_send_and_compose_impl();
        int v20 = (char *)v19;
        if (v19) {
          sub_100055434(v19);
        }
      }
      else
      {
        int v20 = 0;
      }
      free(v20);
    }

    uint64_t result = 0;
    if (a3) {
      *a3 = v15;
    }
  }
  else
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    long long v21 = (id)qword_1000E4198;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v22 = sub_100055404(1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v23 = v22;
      }
      else {
        unsigned int v23 = v22 & 0xFFFFFFFE;
      }
      if (v23)
      {
        long long v24 = (const char *)_os_log_send_and_compose_impl();
        long long v25 = (char *)v24;
        if (v24) {
          sub_100055434(v24);
        }
      }
      else
      {
        long long v25 = 0;
      }
      free(v25);
    }

    if (CFDictionaryContainsKey(a1, kUMUserSessionVolumeMountedKey)) {
      CFDictionaryReplaceValue(a1, kUMUserSessionVolumeMountedKey, kCFBooleanFalse);
    }
    else {
      CFDictionarySetValue(a1, kUMUserSessionVolumeMountedKey, kCFBooleanFalse);
    }
    return 1;
  }
  return result;
}

uint64_t sub_10007F4E0()
{
  if (sub_10007F854(v14))
  {
    int VEKState = APFSVolumeGetVEKState();
    if (VEKState == 22)
    {
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      unsigned int v2 = (id)qword_1000E4198;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v3 = sub_100055404(1);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v4 = v3;
        }
        else {
          unsigned int v4 = v3 & 0xFFFFFFFE;
        }
        if (v4)
        {
          uint64_t v5 = (const char *)_os_log_send_and_compose_impl();
          unsigned int v6 = (char *)v5;
          if (v5) {
            sub_100055434(v5);
          }
        }
        else
        {
          unsigned int v6 = 0;
        }
        free(v6);
      }
      uint64_t v1 = 0;
      goto LABEL_38;
    }
    if (VEKState)
    {
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      unsigned int v2 = (id)qword_1000E4198;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_37;
      }
      unsigned int v7 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v8 = v7;
      }
      else {
        unsigned int v8 = v7 & 0xFFFFFFFE;
      }
      if (v8)
      {
LABEL_30:
        unsigned int v11 = (const char *)_os_log_send_and_compose_impl();
        gid_t v12 = (char *)v11;
        if (v11) {
          sub_100055434(v11);
        }
        goto LABEL_36;
      }
    }
    else
    {
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      unsigned int v2 = (id)qword_1000E4198;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_37;
      }
      unsigned int v9 = sub_100055404(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v10 = v9;
      }
      else {
        unsigned int v10 = v9 & 0xFFFFFFFE;
      }
      if (v10) {
        goto LABEL_30;
      }
    }
    gid_t v12 = 0;
LABEL_36:
    free(v12);
LABEL_37:
    uint64_t v1 = 1;
LABEL_38:

    return v1;
  }
  return 0;
}

BOOL sub_10007F854(char *a1)
{
  char v12 = 1;
  BOOL v2 = sub_10007B654("Data", a1, 256, 64, &v12);
  if (v2)
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v3 = (id)qword_1000E4198;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v4 = sub_100055404(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v5 = v4;
      }
      else {
        unsigned int v5 = v4 & 0xFFFFFFFE;
      }
      if (v5)
      {
        unsigned int v6 = "TRUE";
        if (!v12) {
          unsigned int v6 = "FALSE";
        }
        *(_DWORD *)unsigned int v13 = 136315394;
        *(void *)&v13[4] = a1;
        __int16 v14 = 2080;
        int v15 = v6;
        goto LABEL_19;
      }
      goto LABEL_21;
    }
  }
  else
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v3 = (id)qword_1000E4198;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)unsigned int v13 = 0;
      unsigned int v7 = sub_100055404(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v8 = v7;
      }
      else {
        unsigned int v8 = v7 & 0xFFFFFFFE;
      }
      if (v8)
      {
LABEL_19:
        unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v10 = (char *)v9;
        if (v9) {
          sub_100055434(v9);
        }
        goto LABEL_22;
      }
LABEL_21:
      unsigned int v10 = 0;
LABEL_22:
      free(v10);
    }
  }

  return v2;
}

uint64_t sub_10007FA74(const __CFString *a1, uint64_t a2, int a3, int *a4)
{
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  memset(uu, 0, sizeof(uu));
  unsigned int v7 = (id)qword_1000E4198;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)buffer = 0;
    unsigned int v8 = sub_100055404(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v9 = v8;
    }
    else {
      unsigned int v9 = v8 & 0xFFFFFFFE;
    }
    if (v9)
    {
      LOWORD(v52[0]) = 0;
      unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v11 = (char *)v10;
      if (v10) {
        sub_100055434(v10);
      }
    }
    else
    {
      unsigned int v11 = 0;
    }
    free(v11);
  }

  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v55 = 0u;
  if (!CFStringGetCString(a1, buffer, 256, 0x8000100u))
  {
    if (a4) {
      *a4 = 22;
    }
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v17 = (id)qword_1000E4198;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_108;
    }
    *(void *)&v52[0] = 0;
    unsigned int v18 = sub_100055404(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v18 & 0xFFFFFFFE;
    }
    if (!v19) {
      goto LABEL_106;
    }
LABEL_79:
    int v38 = (void *)_os_log_send_and_compose_impl();
    if (!v38)
    {
LABEL_107:
      free(v38);
LABEL_108:

      return 0;
    }
LABEL_80:
    sub_100055434((const char *)v38);
    goto LABEL_107;
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  char v12 = (id)qword_1000E4198;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v13 = sub_100055404(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = v13 & 0xFFFFFFFE;
    }
    if (v14)
    {
      LODWORD(v52[0]) = 136315138;
      *(void *)((char *)v52 + 4) = buffer;
      int v15 = (const char *)_os_log_send_and_compose_impl();
      int v16 = (char *)v15;
      if (v15) {
        sub_100055434(v15);
      }
    }
    else
    {
      int v16 = 0;
    }
    free(v16);
  }

  if (uuid_parse(buffer, uu))
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    int v20 = (id)qword_1000E4198;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&v52[0] = 0;
      unsigned int v21 = sub_100055404(1);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v22 = v21;
      }
      else {
        unsigned int v22 = v21 & 0xFFFFFFFE;
      }
      if (v22)
      {
        unsigned int v23 = (const char *)_os_log_send_and_compose_impl();
        long long v24 = (char *)v23;
        if (v23) {
          sub_100055434(v23);
        }
      }
      else
      {
        long long v24 = 0;
      }
      free(v24);
    }

    if (a4)
    {
      uint64_t result = 0;
      *a4 = 22;
      return result;
    }
    return 0;
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  long long v25 = (id)qword_1000E4198;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)&v52[0] = 0;
    unsigned int v26 = sub_100055404(1);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = v26 & 0xFFFFFFFE;
    }
    if (v27)
    {
      long long v28 = (const char *)_os_log_send_and_compose_impl();
      long long v29 = (char *)v28;
      if (v28) {
        sub_100055434(v28);
      }
    }
    else
    {
      long long v29 = 0;
    }
    free(v29);
  }

  memset(v52, 0, sizeof(v52));
  if (!sub_10007F854((char *)v52))
  {
    if (a4) {
      *a4 = 2;
    }
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v17 = (id)qword_1000E4198;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_108;
    }
    unsigned int v36 = sub_100055404(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v37 = v36;
    }
    else {
      unsigned int v37 = v36 & 0xFFFFFFFE;
    }
    if (!v37) {
      goto LABEL_106;
    }
    goto LABEL_79;
  }
  if (a3)
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    long long v31 = (id)qword_1000E4198;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v32 = sub_100055404(1);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v33 = v32;
      }
      else {
        unsigned int v33 = v32 & 0xFFFFFFFE;
      }
      if (v33)
      {
        long long v34 = (const char *)_os_log_send_and_compose_impl();
        long long v35 = (char *)v34;
        if (v34) {
          sub_100055434(v34);
        }
      }
      else
      {
        long long v35 = 0;
      }
      free(v35);
    }
  }
  else
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    long long v31 = (id)qword_1000E4198;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v39 = sub_100055404(1);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v40 = v39;
      }
      else {
        unsigned int v40 = v39 & 0xFFFFFFFE;
      }
      if (v40)
      {
        int v41 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v42 = (char *)v41;
        if (v41) {
          sub_100055434(v41);
        }
      }
      else
      {
        unsigned int v42 = 0;
      }
      free(v42);
    }
  }

  int v43 = APFSVolumeEnableUserProtectionWithOptions();
  if (v43)
  {
    int v44 = v43;
    if (a4) {
      *a4 = v43;
    }
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v17 = (id)qword_1000E4198;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_108;
    }
    int v45 = sub_100055404(1);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      v45 &= ~1u;
    }
    if (v45)
    {
      unsigned int v46 = v17;
      strerror(v44);
      int v38 = (void *)_os_log_send_and_compose_impl();

      if (!v38) {
        goto LABEL_107;
      }
      goto LABEL_80;
    }
LABEL_106:
    int v38 = 0;
    goto LABEL_107;
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  unsigned int v47 = (id)qword_1000E4198;
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v48 = sub_100055404(1);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v49 = v48;
    }
    else {
      unsigned int v49 = v48 & 0xFFFFFFFE;
    }
    if (v49)
    {
      unsigned int v50 = (const char *)_os_log_send_and_compose_impl();
      CFBooleanRef v51 = (char *)v50;
      if (v50) {
        sub_100055434(v50);
      }
    }
    else
    {
      CFBooleanRef v51 = 0;
    }
    free(v51);
  }

  return 1;
}

uint64_t sub_1000803B0(const char *a1, int a2, unsigned char *a3, int *a4)
{
  char v43 = 0;
  char v42 = 1;
  if (sub_10007B654(a1, v47, 256, a2, &v42))
  {
    if (v42 == 1)
    {
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      unsigned int v8 = (id)qword_1000E4198;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v9 = sub_100055404(1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v10 = v9;
        }
        else {
          unsigned int v10 = v9 & 0xFFFFFFFE;
        }
        if (v10)
        {
          *(_DWORD *)int v44 = 136315394;
          *(void *)&int v44[4] = a1;
          __int16 v45 = 2080;
          unsigned int v46 = v47;
          unsigned int v11 = (const char *)_os_log_send_and_compose_impl();
          char v12 = (char *)v11;
          if (v11) {
            sub_100055434(v11);
          }
        }
        else
        {
          char v12 = 0;
        }
        free(v12);
      }

      int v23 = APFSVolumeNeedsCryptoMigration();
      if (v23)
      {
        int v24 = v23;
        if (a4) {
          *a4 = v23;
        }
        if (qword_1000E41A0 != -1) {
          dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
        }
        unsigned int v18 = (id)qword_1000E4198;
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_71;
        }
        int v25 = sub_100055404(1);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          v25 &= ~1u;
        }
        if (v25)
        {
          unsigned int v26 = v18;
          unsigned int v27 = strerror(v24);
          *(_DWORD *)int v44 = 136315138;
          *(void *)&int v44[4] = v27;
          unsigned int v21 = (void *)_os_log_send_and_compose_impl();

          if (!v21)
          {
LABEL_70:
            free(v21);
            goto LABEL_71;
          }
LABEL_48:
          sub_100055434((const char *)v21);
          goto LABEL_70;
        }
LABEL_69:
        unsigned int v21 = 0;
        goto LABEL_70;
      }
      if (v43)
      {
        if (qword_1000E41A0 != -1) {
          dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
        }
        unsigned int v18 = (id)qword_1000E4198;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)int v44 = 0;
          unsigned int v28 = sub_100055404(1);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v29 = v28;
          }
          else {
            unsigned int v29 = v28 & 0xFFFFFFFE;
          }
          if (v29)
          {
            long long v30 = (const char *)_os_log_send_and_compose_impl();
            long long v31 = (char *)v30;
            if (v30) {
              sub_100055434(v30);
            }
          }
          else
          {
            long long v31 = 0;
          }
          free(v31);
        }
        uint64_t v22 = 1;
        goto LABEL_72;
      }
      if (a4) {
        *a4 = 0;
      }
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      unsigned int v18 = (id)qword_1000E4198;
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
LABEL_71:
        uint64_t v22 = 0;
LABEL_72:

        if (a3) {
          *a3 = v42;
        }
        return v22;
      }
      unsigned int v32 = sub_100055404(1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v33 = v32;
      }
      else {
        unsigned int v33 = v32 & 0xFFFFFFFE;
      }
      if (!v33) {
        goto LABEL_69;
      }
      *(_DWORD *)int v44 = 136315138;
      *(void *)&int v44[4] = a1;
    }
    else
    {
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      unsigned int v18 = (id)qword_1000E4198;
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_71;
      }
      *(void *)int v44 = 0;
      unsigned int v19 = sub_100055404(1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v20 = v19;
      }
      else {
        unsigned int v20 = v19 & 0xFFFFFFFE;
      }
      if (!v20) {
        goto LABEL_69;
      }
    }
    unsigned int v21 = (void *)_os_log_send_and_compose_impl();
    if (!v21) {
      goto LABEL_70;
    }
    goto LABEL_48;
  }
  if (a4) {
    *a4 = 2;
  }
  if (a2 != 2)
  {
    if (qword_1000E41A0 != -1) {
      goto LABEL_88;
    }
    while (1)
    {
      long long v35 = (id)qword_1000E4198;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)int v44 = 0;
        unsigned int v36 = sub_100055404(1);
        BOOL v37 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
        int v38 = 0;
        if (v37) {
          unsigned int v39 = v36;
        }
        else {
          unsigned int v39 = v36 & 0xFFFFFFFE;
        }
        if (v39)
        {
          unsigned int v40 = (const char *)_os_log_send_and_compose_impl();
          int v38 = 0;
          if (v40)
          {
            int v41 = v40;
            sub_100055434(v40);
            int v38 = (char *)v41;
          }
        }
        free(v38);
      }

      sub_100019810("FAILED TO FIND DISKNODE");
LABEL_88:
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  unsigned int v13 = (id)qword_1000E4198;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)int v44 = 0;
    unsigned int v14 = sub_100055404(1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v15 = v14;
    }
    else {
      unsigned int v15 = v14 & 0xFFFFFFFE;
    }
    if (v15)
    {
      int v16 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v17 = (char *)v16;
      if (v16) {
        sub_100055434(v16);
      }
    }
    else
    {
      unsigned int v17 = 0;
    }
    free(v17);
  }

  return 0;
}

uint64_t sub_100080A4C(uint64_t a1, _DWORD *a2)
{
  int v3 = APFSVolumeConvertToUserCrypto();
  if (v3)
  {
    int v4 = v3;
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v5 = (id)qword_1000E4198;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v6 = sub_100055404(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
        unsigned int v8 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v9 = (char *)v8;
        if (v8) {
          sub_100055434(v8);
        }
      }
      else
      {
        unsigned int v9 = 0;
      }
      free(v9);
    }

    uint64_t result = 0;
    if (a2) {
      *a2 = v4;
    }
  }
  else
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v10 = (id)qword_1000E4198;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v11 = sub_100055404(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v12 = v11;
      }
      else {
        unsigned int v12 = v11 & 0xFFFFFFFE;
      }
      if (v12)
      {
        unsigned int v13 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v14 = (char *)v13;
        if (v13) {
          sub_100055434(v13);
        }
      }
      else
      {
        unsigned int v14 = 0;
      }
      free(v14);
    }

    return 1;
  }
  return result;
}

uint64_t sub_100080C94(int *a1, unsigned char *a2)
{
  strcpy(v3, "Data");
  return sub_1000803B0(v3, 64, a2, a1);
}

uint64_t sub_100080CD4(int *a1, unsigned char *a2)
{
  strcpy(v3, "User");
  return sub_1000803B0(v3, 2, a2, a1);
}

uint64_t sub_100080D14(int *a1)
{
  if (!sub_10007F854(v21))
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v7 = (id)qword_1000E4198;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_44;
    }
    unsigned int v8 = sub_100055404(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v9 = v8;
    }
    else {
      unsigned int v9 = v8 & 0xFFFFFFFE;
    }
    if (v9)
    {
      unsigned int v10 = (void *)_os_log_send_and_compose_impl();
      if (!v10) {
        goto LABEL_43;
      }
      goto LABEL_32;
    }
LABEL_42:
    unsigned int v10 = 0;
    goto LABEL_43;
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  BOOL v2 = (id)qword_1000E4198;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = sub_100055404(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = v3 & 0xFFFFFFFE;
    }
    if (v4)
    {
      unsigned int v5 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v6 = (char *)v5;
      if (v5) {
        sub_100055434(v5);
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
    free(v6);
  }

  int v11 = APFSVolumeTranscribePFK();
  if (v11)
  {
    int v12 = v11;
    if (a1) {
      *a1 = v11;
    }
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v7 = (id)qword_1000E4198;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_44;
    }
    int v13 = sub_100055404(1);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      v13 &= ~1u;
    }
    if (v13)
    {
      unsigned int v14 = v7;
      strerror(v12);
      unsigned int v10 = (void *)_os_log_send_and_compose_impl();

      if (!v10)
      {
LABEL_43:
        free(v10);
LABEL_44:
        uint64_t v19 = 0;
        goto LABEL_45;
      }
LABEL_32:
      sub_100055434((const char *)v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  unsigned int v7 = (id)qword_1000E4198;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v15 = sub_100055404(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v16 = v15;
    }
    else {
      unsigned int v16 = v15 & 0xFFFFFFFE;
    }
    if (v16)
    {
      unsigned int v17 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v18 = (char *)v17;
      if (v17) {
        sub_100055434(v17);
      }
    }
    else
    {
      unsigned int v18 = 0;
    }
    free(v18);
  }
  uint64_t v19 = 1;
LABEL_45:

  return v19;
}

uint64_t sub_1000810F8(int a1, _DWORD *a2)
{
  if (!sub_10007B434(v63, 256))
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    int v11 = (id)qword_1000E4198;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)long long v59 = 0;
      unsigned int v12 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v12 & 0xFFFFFFFE;
      }
      if (v13)
      {
        uint64_t v62 = 0x204000100;
        unsigned int v14 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v15 = (char *)v14;
        if (v14) {
          sub_100055434(v14);
        }
      }
      else
      {
        unsigned int v15 = 0;
      }
      free(v15);
    }

    if (!a2) {
      return 0;
    }
    uint64_t result = 0;
    int v26 = 2;
    goto LABEL_44;
  }
  if (!a1)
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v5 = (id)qword_1000E4198;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)long long v59 = 0;
      unsigned int v16 = sub_100055404(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
        LOWORD(v62) = 0;
        unsigned int v18 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v19 = (char *)v18;
        if (v18) {
          sub_100055434(v18);
        }
      }
      else
      {
        uint64_t v19 = 0;
      }
      free(v19);
    }
    goto LABEL_74;
  }
  uint64_t v4 = +[NSString stringWithUTF8String:v63];
  if (!v4)
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v20 = (id)qword_1000E4198;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)long long v59 = 0;
      unsigned int v21 = sub_100055404(1);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v22 = v21;
      }
      else {
        unsigned int v22 = v21 & 0xFFFFFFFE;
      }
      if (v22)
      {
        LOWORD(v62) = 0;
        int v23 = (const char *)_os_log_send_and_compose_impl();
        int v24 = (char *)v23;
        if (v23) {
          sub_100055434(v23);
        }
      }
      else
      {
        int v24 = 0;
      }
      free(v24);
    }

    if (!a2) {
      return 0;
    }
    uint64_t result = 0;
    int v26 = 12;
LABEL_44:
    *a2 = v26;
    return result;
  }
  unsigned int v5 = v4;
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  unsigned int v6 = (id)qword_1000E4198;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v62 = 0;
    unsigned int v7 = sub_100055404(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = v7 & 0xFFFFFFFE;
    }
    if (v8)
    {
      *(_DWORD *)long long v59 = 138412546;
      *(void *)&v59[4] = v5;
      __int16 v60 = 1024;
      int v61 = 501;
      unsigned int v9 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v10 = (char *)v9;
      if (v9) {
        sub_100055434(v9);
      }
    }
    else
    {
      unsigned int v10 = 0;
    }
    free(v10);
  }

  unsigned int v27 = sub_100019308(qword_1000E4318);
  id v58 = 0;
  unsigned int v28 = [v27 mapVolume:v5 toSession:501 withPersona:0 error:&v58];
  id v29 = v58;

  if (!v28)
  {
    unsigned int v35 = [v29 code];
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v36 = (id)qword_1000E4198;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v62 = 0;
      int v37 = sub_100055404(1);
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
        v37 &= ~1u;
      }
      if (v37)
      {
        int v38 = v36;
        id v39 = [v29 code];
        *(_DWORD *)long long v59 = 134217984;
        *(void *)&v59[4] = v39;
        unsigned int v40 = (char *)_os_log_send_and_compose_impl();

        if (v40) {
          sub_100055434(v40);
        }
      }
      else
      {
        unsigned int v40 = 0;
      }
      free(v40);
    }

    if (a2) {
      *a2 = v35;
    }

    return 0;
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  long long v30 = (id)qword_1000E4198;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v62 = 0;
    unsigned int v31 = sub_100055404(1);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v32 = v31;
    }
    else {
      unsigned int v32 = v31 & 0xFFFFFFFE;
    }
    if (v32)
    {
      *(_DWORD *)long long v59 = 138412546;
      *(void *)&v59[4] = v5;
      __int16 v60 = 1024;
      int v61 = 501;
      unsigned int v33 = (const char *)_os_log_send_and_compose_impl();
      long long v34 = (char *)v33;
      if (v33) {
        sub_100055434(v33);
      }
    }
    else
    {
      long long v34 = 0;
    }
    free(v34);
  }

LABEL_74:
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  int v41 = (id)qword_1000E4198;
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v62 = 0;
    unsigned int v42 = sub_100055404(1);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v43 = v42;
    }
    else {
      unsigned int v43 = v42 & 0xFFFFFFFE;
    }
    if (v43)
    {
      *(_DWORD *)long long v59 = 136315138;
      *(void *)&v59[4] = v63;
      int v44 = (const char *)_os_log_send_and_compose_impl();
      __int16 v45 = (char *)v44;
      if (v44) {
        sub_100055434(v44);
      }
    }
    else
    {
      __int16 v45 = 0;
    }
    free(v45);
  }

  int v46 = APFSVolumeMigrateMediaKey();
  if (v46)
  {
    int v47 = v46;
    if (a2) {
      *a2 = v46;
    }
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v48 = (id)qword_1000E4198;
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)long long v59 = 0;
      unsigned int v49 = sub_100055404(1);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v50 = v49;
      }
      else {
        unsigned int v50 = v49 & 0xFFFFFFFE;
      }
      if (v50)
      {
        LODWORD(v62) = 67109120;
        HIDWORD(v62) = v47;
        CFBooleanRef v51 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v52 = (char *)v51;
        if (v51) {
          sub_100055434(v51);
        }
      }
      else
      {
        unsigned int v52 = 0;
      }
      free(v52);
    }

    return 0;
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  BOOL v53 = (id)qword_1000E4198;
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)long long v59 = 0;
    unsigned int v54 = sub_100055404(1);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v55 = v54;
    }
    else {
      unsigned int v55 = v54 & 0xFFFFFFFE;
    }
    if (v55)
    {
      LOWORD(v62) = 0;
      long long v56 = (const char *)_os_log_send_and_compose_impl();
      long long v57 = (char *)v56;
      if (v56) {
        sub_100055434(v56);
      }
    }
    else
    {
      long long v57 = 0;
    }
    free(v57);
  }

  return 1;
}

uint64_t sub_100081A00(const char *a1, int *a2)
{
  int v22 = 2;
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  uint64_t v4 = (id)qword_1000E4198;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = 0;
    unsigned int v5 = sub_100055404(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = v5 & 0xFFFFFFFE;
    }
    if (v6)
    {
      LODWORD(v23[0]) = 136315138;
      *(void *)((char *)v23 + 4) = a1;
      unsigned int v7 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v8 = (char *)v7;
      if (v7) {
        sub_100055434(v7);
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    free(v8);
  }

  int v9 = fsctl(a1, 0x80014A22uLL, &v22, 0);
  if (v9)
  {
    int v10 = v9;
    if (a2) {
      *a2 = v9;
    }
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    int v11 = (id)qword_1000E4198;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v23[0] = 0;
      unsigned int v12 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v12 & 0xFFFFFFFE;
      }
      if (v13)
      {
        LODWORD(v24) = 67109120;
        HIDWORD(v24) = v10;
        unsigned int v14 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v15 = (char *)v14;
        if (v14) {
          sub_100055434(v14);
        }
      }
      else
      {
        unsigned int v15 = 0;
      }
      free(v15);
    }
    uint64_t v20 = 0;
  }
  else
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    int v11 = (id)qword_1000E4198;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v23[0] = 0;
      unsigned int v16 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
        LOWORD(v24) = 0;
        unsigned int v18 = (const char *)_os_log_send_and_compose_impl();
        uint64_t v19 = (char *)v18;
        if (v18) {
          sub_100055434(v18);
        }
      }
      else
      {
        uint64_t v19 = 0;
      }
      free(v19);
    }
    uint64_t v20 = 1;
  }

  return v20;
}

uint64_t sub_100081D1C()
{
  if (qword_1000E42B0) {
    BOOL v0 = 0;
  }
  else {
    BOOL v0 = byte_1000E3220 == 0;
  }
  if (v0) {
    return 0;
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  uint64_t v1 = (id)qword_1000E4198;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v2 = sub_100055404(1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v3 = v2;
    }
    else {
      unsigned int v3 = v2 & 0xFFFFFFFE;
    }
    if (v3)
    {
      uint64_t v4 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v5 = (char *)v4;
      if (v4) {
        sub_100055434(v4);
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    free(v5);
  }

  if (CFArrayGetCount((CFArrayRef)qword_1000E42B0) >= 1)
  {
    for (CFIndex i = 0; CFArrayGetCount((CFArrayRef)qword_1000E42B0) > i; ++i)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E42B0, i);
      if (!ValueAtIndex) {
        continue;
      }
      CFDictionaryRef v9 = ValueAtIndex;
      CFTypeID v10 = CFGetTypeID(ValueAtIndex);
      if (v10 != CFDictionaryGetTypeID() || !CFDictionaryContainsKey(v9, kUMUserSessionVolumeMountedKey)) {
        continue;
      }
      unsigned int v11 = sub_100088734(v9, kUMUserSessionVolumeMountedKey);
      sub_1000885F0(v9, kUMUserSessionIDKey);
      if (sub_100088734(v9, kUMUserSessionForegroundKey) || v11 == 0) {
        continue;
      }
      if (sub_10007F0F4(v9, 0, 0, 0x80000))
      {
        if (qword_1000E41A0 != -1) {
          dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
        }
        unsigned int v13 = (id)qword_1000E4198;
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_46;
        }
        unsigned int v14 = sub_100055404(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v15 = v14;
        }
        else {
          unsigned int v15 = v14 & 0xFFFFFFFE;
        }
        if (v15)
        {
LABEL_42:
          unsigned int v18 = (const char *)_os_log_send_and_compose_impl();
          uint64_t v19 = (char *)v18;
          if (v18) {
            sub_100055434(v18);
          }
          goto LABEL_45;
        }
      }
      else
      {
        if (qword_1000E41A0 != -1) {
          dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
        }
        unsigned int v13 = (id)qword_1000E4198;
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_46;
        }
        unsigned int v16 = sub_100055404(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v17 = v16;
        }
        else {
          unsigned int v17 = v16 & 0xFFFFFFFE;
        }
        if (v17) {
          goto LABEL_42;
        }
      }
      uint64_t v19 = 0;
LABEL_45:
      free(v19);
LABEL_46:
    }
  }
  return 1;
}

uint64_t sub_1000820D8(uint64_t a1, int *a2)
{
  memset(v30, 0, sizeof(v30));
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  unsigned int v3 = (id)qword_1000E4198;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = sub_100055404(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      unsigned int v6 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v7 = (char *)v6;
      if (v6) {
        sub_100055434(v6);
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    free(v7);
  }

  if (!sub_10007B434((char *)v30, 256))
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v13 = (id)qword_1000E4198;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        unsigned int v16 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v17 = (char *)v16;
        if (v16) {
          sub_100055434(v16);
        }
      }
      else
      {
        unsigned int v17 = 0;
      }
      free(v17);
    }
    int v19 = 2;
    goto LABEL_57;
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  unsigned int v8 = (id)qword_1000E4198;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v9 = sub_100055404(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v10 = v9;
    }
    else {
      unsigned int v10 = v9 & 0xFFFFFFFE;
    }
    if (v10)
    {
      unsigned int v11 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v12 = (char *)v11;
      if (v11) {
        sub_100055434(v11);
      }
    }
    else
    {
      unsigned int v12 = 0;
    }
    free(v12);
  }

  int v18 = APFSVolumeDelete();
  if (v18)
  {
    int v19 = v18;
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v13 = (id)qword_1000E4198;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v20 = sub_100055404(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = v20 & 0xFFFFFFFE;
      }
      if (v21)
      {
        int v22 = (const char *)_os_log_send_and_compose_impl();
        int v23 = (char *)v22;
        if (v22) {
          sub_100055434(v22);
        }
      }
      else
      {
        int v23 = 0;
      }
      free(v23);
    }
LABEL_57:

    uint64_t result = 0;
    if (a2) {
      *a2 = v19;
    }
    return result;
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  uint64_t v24 = (id)qword_1000E4198;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v25 = sub_100055404(1);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = v25 & 0xFFFFFFFE;
    }
    if (v26)
    {
      unsigned int v27 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v28 = (char *)v27;
      if (v27) {
        sub_100055434(v27);
      }
    }
    else
    {
      unsigned int v28 = 0;
    }
    free(v28);
  }

  return 1;
}

uint64_t sub_1000825B8(const __CFString *a1, uid_t a2, gid_t a3)
{
  int v38 = 0;
  size_t v37 = 4;
  int v36 = 0;
  memset(&v35, 0, sizeof(v35));
  if (sysctlbyname("kern.exclaves_status", &v38, &v37, 0, 0))
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v6 = (id)qword_1000E4198;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_82;
    }
    *(void *)buffer = 0;
    int v7 = sub_100055404(1);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      v7 &= ~1u;
    }
    if (v7)
    {
      unsigned int v8 = v6;
      int v9 = *__error();
      *(_DWORD *)id v39 = 67109120;
      *(_DWORD *)&v39[4] = v9;
      goto LABEL_9;
    }
LABEL_80:
    unsigned int v10 = 0;
LABEL_81:
    free(v10);
LABEL_82:

    return *__error();
  }
  if (v38 == 1)
  {
    bzero(buffer, 0x400uLL);
    if (a1)
    {
      if (!CFStringGetCString(a1, buffer, 1024, 0x8000100u))
      {
        if (qword_1000E41A0 != -1) {
          dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
        }
        unsigned int v16 = (id)qword_1000E4198;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)id v39 = 0;
          unsigned int v17 = sub_100055404(1);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v18 = v17;
          }
          else {
            unsigned int v18 = v17 & 0xFFFFFFFE;
          }
          if (v18)
          {
            int v19 = (const char *)_os_log_send_and_compose_impl();
            unsigned int v20 = (char *)v19;
            if (v19) {
              sub_100055434(v19);
            }
          }
          else
          {
            unsigned int v20 = 0;
          }
          free(v20);
        }

        return 22;
      }
    }
    else
    {
      strcpy(buffer, "/private/var/mobile");
    }
    __strlcat_chk();
    if (stat(buffer, &v35))
    {
      if (*__error() != 2)
      {
        if (qword_1000E41A0 != -1) {
          dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
        }
        unsigned int v6 = (id)qword_1000E4198;
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_82;
        }
        int v27 = sub_100055404(1);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          v27 &= ~1u;
        }
        if (!v27) {
          goto LABEL_80;
        }
        goto LABEL_79;
      }
      if (mkdir(buffer, 0x1EDu))
      {
        if (qword_1000E41A0 != -1) {
          dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
        }
        unsigned int v6 = (id)qword_1000E4198;
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_82;
        }
        int v26 = sub_100055404(1);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          v26 &= ~1u;
        }
        if (!v26) {
          goto LABEL_80;
        }
        goto LABEL_79;
      }
      if (chown(buffer, a2, a3))
      {
        if (qword_1000E41A0 != -1) {
          dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
        }
        unsigned int v6 = (id)qword_1000E4198;
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_82;
        }
        int v29 = sub_100055404(1);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          v29 &= ~1u;
        }
        if (!v29) {
          goto LABEL_80;
        }
        goto LABEL_79;
      }
    }
    if (!fsctl(buffer, 0x80044119uLL, &v36, 0))
    {
      if (qword_1000E41A0 != -1) {
        dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
      }
      unsigned int v11 = (id)qword_1000E4198;
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_93;
      }
      unsigned int v33 = sub_100055404(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v34 = v33;
      }
      else {
        unsigned int v34 = v33 & 0xFFFFFFFE;
      }
      if (v34)
      {
        *(_DWORD *)id v39 = 136315138;
        *(void *)&v39[4] = buffer;
LABEL_21:
        unsigned int v14 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v15 = (char *)v14;
        if (v14) {
          sub_100055434(v14);
        }
        goto LABEL_92;
      }
LABEL_91:
      unsigned int v15 = 0;
LABEL_92:
      free(v15);
LABEL_93:

      return 0;
    }
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v6 = (id)qword_1000E4198;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_82;
    }
    int v30 = sub_100055404(1);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      v30 &= ~1u;
    }
    if (!v30) {
      goto LABEL_80;
    }
LABEL_79:
    unsigned int v8 = v6;
    unsigned int v31 = __error();
    unsigned int v32 = strerror(*v31);
    *(_DWORD *)id v39 = 136315394;
    *(void *)&v39[4] = buffer;
    __int16 v40 = 2080;
    int v41 = v32;
LABEL_9:
    unsigned int v10 = (void *)_os_log_send_and_compose_impl();

    if (v10) {
      sub_100055434((const char *)v10);
    }
    goto LABEL_81;
  }
  if (v38 == 255)
  {
    if (qword_1000E41A0 != -1) {
      dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
    }
    unsigned int v11 = (id)qword_1000E4198;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_93;
    }
    *(void *)buffer = 0;
    unsigned int v12 = sub_100055404(1);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = v12 & 0xFFFFFFFE;
    }
    if (v13)
    {
      *(_WORD *)id v39 = 0;
      goto LABEL_21;
    }
    goto LABEL_91;
  }
  if (qword_1000E41A0 != -1) {
    dispatch_once(&qword_1000E41A0, &stru_1000D5C30);
  }
  unsigned int v21 = (id)qword_1000E4198;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)buffer = 0;
    unsigned int v22 = sub_100055404(1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v23 = v22;
    }
    else {
      unsigned int v23 = v22 & 0xFFFFFFFE;
    }
    if (v23)
    {
      *(_DWORD *)id v39 = 67109120;
      *(_DWORD *)&v39[4] = v38;
      uint64_t v24 = (const char *)_os_log_send_and_compose_impl();
      unsigned int v25 = (char *)v24;
      if (v24) {
        sub_100055434(v24);
      }
    }
    else
    {
      unsigned int v25 = 0;
    }
    free(v25);
  }

  return 6;
}

void sub_100082E9C(id a1)
{
  qword_1000E4198 = (uint64_t)os_log_create(off_1000E33D8, "legacy");

  _objc_release_x1();
}

id *sub_100082FBC(uint64_t a1, void *a2, int a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v16 = a9;
  id v17 = a8;
  id v18 = a7;
  id v19 = a6;
  id v20 = a5;
  id v21 = a4;
  id v22 = a2;
  self;
  unsigned int v23 = sub_1000830C8((id *)[UMDarwinDirectoryUser alloc], v22, a3, v21, v20, v19, v18, v17, v16);

  return v23;
}

id *sub_1000830C8(id *a1, void *a2, int a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v27 = a2;
  id v26 = a4;
  id v25 = a5;
  id v24 = a6;
  id v23 = a7;
  id v17 = a8;
  id v18 = a9;
  if (a1)
  {
    v28.receiver = a1;
    v28.super_class = (Class)UMDarwinDirectoryUser;
    id v19 = (id)[super init];
    if (!v19) {
      sub_1000B08C8();
    }
    a1 = v19;

    objc_storeStrong(a1 + 2, a2);
    *((_DWORD *)a1 + 2) = a3;
    objc_storeStrong(a1 + 3, a4);
    objc_storeStrong(a1 + 4, a5);
    objc_storeStrong(a1 + 5, a6);
    objc_storeStrong(a1 + 6, a7);
    objc_storeStrong(a1 + 7, a8);
    id v20 = [v18 mutableCopy];
    id v21 = a1[8];
    a1[8] = v20;
  }
  return a1;
}

id *sub_10008381C(uint64_t a1, void *a2, int a3, void *a4, void *a5)
{
  id v8 = a5;
  id v9 = a4;
  id v10 = a2;
  self;
  unsigned int v11 = sub_1000838BC((id *)[UMDarwinDirectoryGroup alloc], v10, a3, v9, v8);

  return v11;
}

id *sub_1000838BC(id *a1, void *a2, int a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  if (a1)
  {
    v18.receiver = a1;
    v18.super_class = (Class)UMDarwinDirectoryGroup;
    unsigned int v12 = (id *)[super init];
    if (!v12) {
      sub_1000B08C8();
    }
    a1 = v12;

    id v13 = [v9 copy];
    id v14 = a1[2];
    a1[2] = v13;

    *((_DWORD *)a1 + 2) = a3;
    objc_storeStrong(a1 + 3, a4);
    id v15 = [v11 copy];
    id v16 = a1[4];
    a1[4] = v15;
  }
  return a1;
}

void sub_100083C68(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 32);
  }
}

void sub_100084554(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_100084B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_100084B34(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100084B44(uint64_t a1)
{
}

void sub_100084B4C(uint64_t a1, void *a2, int a3)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  id v6 = a2;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
}

void sub_100084E08(id a1)
{
  qword_1000E41A8 = (uint64_t)os_log_create(off_1000E33D8, "sideeffect");

  _objc_release_x1();
}

uint64_t sub_100084E50(uint64_t a1, unsigned int a2)
{
  if (a2 >= 9) {
    return 0xFFFFFFFFLL;
  }
  else {
    return a2;
  }
}

uint64_t sub_100084E7C(uint64_t a1, unsigned int a2)
{
  if (a2 >= 9) {
    return 0x7FFFFFFFLL;
  }
  else {
    return a2;
  }
}

id sub_100084EAC(uint64_t a1, _DWORD *a2)
{
  unsigned int v3 = (objc_class *)self;
  id v4 = objc_alloc_init(v3);
  unsigned int v5 = v4;
  if (*a2 != 2)
  {
    if (qword_1000E41C0 != -1) {
      dispatch_once(&qword_1000E41C0, &stru_1000D5C98);
    }
    id v9 = (id)qword_1000E41B8;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_23;
    }
    unsigned int v10 = sub_100055404(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = v10 & 0xFFFFFFFE;
    }
    if (v11) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  sub_100058F44((uint64_t)v4, a2[1]);
  int v6 = sub_100084E50((uint64_t)v3, a2[2]);
  sub_100066BD8((uint64_t)v5, v6);
  if (sub_100066BCC((uint64_t)v5) != -1)
  {
    int v7 = +[NSString stringWithUTF8String:a2 + 22];
    sub_1000778EC(v5, v7);

    sub_100066D6C((uint64_t)v5, a2[86]);
    id v8 = v5;
    goto LABEL_24;
  }
  if (qword_1000E41C0 != -1) {
    dispatch_once(&qword_1000E41C0, &stru_1000D5C98);
  }
  id v9 = (id)qword_1000E41B8;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    unsigned int v12 = sub_100055404(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = v12 & 0xFFFFFFFE;
    }
    if (v13)
    {
LABEL_19:
      id v14 = (const char *)_os_log_send_and_compose_impl();
      id v15 = (char *)v14;
      if (v14) {
        sub_100055434(v14);
      }
      goto LABEL_22;
    }
LABEL_21:
    id v15 = 0;
LABEL_22:
    free(v15);
  }
LABEL_23:

  id v8 = 0;
LABEL_24:

  return v8;
}

double sub_10008513C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    *(_OWORD *)(a2 + 244) = 0u;
    *(_OWORD *)(a2 + 228) = 0u;
    *(_OWORD *)(a2 + 212) = 0u;
    *(_OWORD *)(a2 + 196) = 0u;
    *(_OWORD *)(a2 + 180) = 0u;
    *(_OWORD *)(a2 + 164) = 0u;
    *(_OWORD *)(a2 + 148) = 0u;
    *(_OWORD *)(a2 + 132) = 0u;
    *(_OWORD *)(a2 + 116) = 0u;
    *(_OWORD *)(a2 + 100) = 0u;
    *(_OWORD *)(a2 + 84) = 0u;
    *(_OWORD *)(a2 + 68) = 0u;
    *(_OWORD *)(a2 + 52) = 0u;
    *(_OWORD *)(a2 + 36) = 0u;
    *(_OWORD *)(a2 + 20) = 0u;
    *(_OWORD *)(a2 + 4) = 0u;
    *(void *)(a2 + 340) = 0;
    *(_OWORD *)(a2 + 308) = 0u;
    *(_OWORD *)(a2 + 324) = 0u;
    *(_OWORD *)(a2 + 276) = 0u;
    *(_OWORD *)(a2 + 292) = 0u;
    *(_OWORD *)(a2 + 260) = 0u;
    *(_DWORD *)a2 = 2;
    *(_DWORD *)(a2 + 4) = sub_100058F38((uint64_t)a1);
    unsigned int v4 = sub_100066BCC((uint64_t)a1);
    unsigned int v5 = sub_100084E7C((uint64_t)UMKPersonaInfo, v4);
    *(_DWORD *)(a2 + 8) = v5;
    if (v5 < 9)
    {
      unsigned int v11 = sub_1000778D8(a1, v6);
      unsigned __int8 v12 = [v11 getCString:a2 + 88 maxLength:256 encoding:4];

      if (v12)
      {
        *(_DWORD *)(a2 + 344) = sub_100066D48((uint64_t)a1);
        return result;
      }
      if (qword_1000E41C0 != -1) {
        dispatch_once(&qword_1000E41C0, &stru_1000D5C98);
      }
      int v7 = (id)qword_1000E41B8;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_23;
      }
      int v14 = sub_100055404(0);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        v14 &= ~1u;
      }
      if (v14)
      {
        id v9 = v7;
        id v16 = sub_1000778D8(a1, v15);
        unsigned int v10 = (char *)_os_log_send_and_compose_impl();

LABEL_19:
        if (v10) {
          sub_100055434(v10);
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (qword_1000E41C0 != -1) {
        dispatch_once(&qword_1000E41C0, &stru_1000D5C98);
      }
      int v7 = (id)qword_1000E41B8;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_23;
      }
      int v8 = sub_100055404(0);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        v8 &= ~1u;
      }
      if (v8)
      {
        id v9 = v7;
        sub_100066BCC((uint64_t)a1);
        unsigned int v10 = (char *)_os_log_send_and_compose_impl();
        goto LABEL_19;
      }
    }
    unsigned int v10 = 0;
LABEL_22:
    free(v10);
LABEL_23:

    double result = 0.0;
    *(_OWORD *)(a2 + 332) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    *(_OWORD *)(a2 + 320) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  double result = 0.0;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 332) = 0u;
  return result;
}

void sub_1000869B0(id a1)
{
  qword_1000E41B8 = (uint64_t)os_log_create(off_1000E33D8, "sideeffect");

  _objc_release_x1();
}

void sub_1000869F8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

id *sub_100086AA0(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)UMDVolumeHelper;
    unsigned int v5 = (id *)[super init];
    if (!v5) {
      sub_1000B08C8();
    }
    a1 = v5;

    objc_storeStrong(a1 + 2, a2);
  }

  return a1;
}

void sub_1000873C8(id a1)
{
  qword_1000E41C8 = (uint64_t)os_log_create(off_1000E33D8, "volume");

  _objc_release_x1();
}

void sub_1000874B0()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = (void *)qword_1000E41D8;
  qword_1000E41D8 = v0;

  if (qword_1000E41D8)
  {
    id v2 = [objc_alloc((Class)NSXPCListener) initWithMachServiceName:@"com.apple.mobile.keybagd.UserManager.xpc"];
    [(id)qword_1000E41D8 setXpcListener:v2];

    unsigned int v3 = [(id)qword_1000E41D8 xpcListener];
    id v4 = [v3 _xpcConnection];
    __xpc_connection_set_logging();

    uint64_t v5 = qword_1000E41D8;
    id v6 = [(id)qword_1000E41D8 xpcListener];
    [v6 setDelegate:v5];
  }
}

void sub_100087A98(uint64_t a1)
{
  id v2 = +[RDServer sharedServer];
  [v2 removeClient:*(void *)(a1 + 32)];
}

void sub_100087AF0(uint64_t a1)
{
  id v2 = +[RDServer sharedServer];
  [v2 removeClient:*(void *)(a1 + 32)];
}

void sub_100087B48(uint64_t a1)
{
  id v2 = +[RDServer sharedServer];
  [v2 removeClient:*(void *)(a1 + 32)];
}

void sub_100087BA0(uint64_t a1)
{
  id v2 = +[RDServer sharedServer];
  [v2 removeClient:*(void *)(a1 + 32)];
}

void sub_100087C18()
{
  uint64_t v1 = +[RDXPCListener sharedListener];
  [v1 startListening];
}

id sub_100087D04()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = (void *)qword_1000E41F0;
  qword_1000E41F0 = v0;

  id v2 = [objc_alloc((Class)NSXPCListener) initWithMachServiceName:@"com.apple.mobile.usermanagerd.xpc"];
  unsigned int v3 = (void *)qword_1000E41E8;
  qword_1000E41E8 = (uint64_t)v2;

  id v4 = [(id)qword_1000E41E8 _xpcConnection];
  __xpc_connection_set_logging();

  [(id)qword_1000E41E8 setDelegate:qword_1000E41F0];
  uint64_t v5 = (void *)qword_1000E41E8;

  return [v5 resume];
}

void sub_100087DA8(id a1)
{
  qword_1000E41F8 = (uint64_t)os_log_create(off_1000E33D8, "legacy");

  _objc_release_x1();
}

void sub_100088530(id a1)
{
  qword_1000E4208 = (uint64_t)os_log_create(off_1000E33D8, "sideeffect");

  _objc_release_x1();
}

const void *sub_100088578(const __CFDictionary *a1, const void *a2)
{
  double result = CFDictionaryGetValue(a1, a2);
  if (result)
  {
    unsigned int v3 = result;
    CFTypeID v4 = CFGetTypeID(result);
    if (v4 == CFDataGetTypeID()) {
      return v3;
    }
    else {
      return 0;
    }
  }
  return result;
}

const void *sub_1000885B4(const __CFDictionary *a1, const void *a2)
{
  double result = CFDictionaryGetValue(a1, a2);
  if (result)
  {
    unsigned int v3 = result;
    CFTypeID v4 = CFGetTypeID(result);
    if (v4 == CFArrayGetTypeID()) {
      return v3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000885F0(const __CFDictionary *a1, const void *a2)
{
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFNumberRef v4 = Value;
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberIntType, &valuePtr);
      return valuePtr;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v2;
}

uint64_t sub_10008865C(const __CFDictionary *a1, const void *a2)
{
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFNumberRef v4 = Value;
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberLongLongType, &valuePtr);
      return valuePtr;
    }
    else
    {
      return -1;
    }
  }
  return v2;
}

uint64_t sub_1000886C8(const __CFDictionary *a1, const void *a2)
{
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFNumberRef v4 = Value;
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberSInt64Type, &valuePtr);
      return valuePtr;
    }
    else
    {
      return -1;
    }
  }
  return v2;
}

CFBooleanRef sub_100088734(const __CFDictionary *a1, const void *a2)
{
  CFBooleanRef result = (const __CFBoolean *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFBooleanRef v3 = result;
    CFTypeID v4 = CFGetTypeID(result);
    if (v4 == CFBooleanGetTypeID()) {
      return (const __CFBoolean *)(CFBooleanGetValue(v3) != 0);
    }
    else {
      return 0;
    }
  }
  return result;
}

const void *sub_100088788(const __CFDictionary *a1, const void *a2)
{
  CFNumberRef Value = CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 0;
  }
  CFBooleanRef v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFStringGetTypeID()) {
    return 0;
  }
  return v3;
}

BOOL sub_1000887CC(const __CFDictionary *a1, const void *a2, char *a3, int a4)
{
  CFStringRef v6 = (const __CFString *)sub_100088788(a1, a2);
  return v6 && CFStringGetCString(v6, a3, a4, 0x8000100u);
}

CFTypeRef sub_10008881C(const __CFDictionary *a1, const void *a2)
{
  CFNumberRef Value = CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 0;
  }
  CFBooleanRef v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFDictionaryGetTypeID()) {
    return 0;
  }

  return CFRetain(v3);
}

CFTypeRef sub_10008887C(const void *a1)
{
  uint64_t v2 = CFWriteStreamCreateWithAllocatedBuffers(kCFAllocatorDefault, kCFAllocatorDefault);
  if (!v2) {
    return 0;
  }
  CFBooleanRef v3 = v2;
  if (CFWriteStreamOpen(v2))
  {
    if (CFPropertyListWrite(a1, v3, kCFPropertyListBinaryFormat_v1_0, 0, 0) < 1) {
      CFTypeRef v4 = 0;
    }
    else {
      CFTypeRef v4 = CFWriteStreamCopyProperty(v3, kCFStreamPropertyDataWritten);
    }
    CFWriteStreamClose(v3);
  }
  else
  {
    CFTypeRef v4 = 0;
  }
  CFRelease(v3);
  return v4;
}

CFPropertyListRef sub_100088924(UInt8 *bytes, CFIndex length)
{
  CFPropertyListFormat format = kCFPropertyListBinaryFormat_v1_0;
  uint64_t v2 = CFReadStreamCreateWithBytesNoCopy(kCFAllocatorDefault, bytes, length, kCFAllocatorNull);
  if (v2)
  {
    CFBooleanRef v3 = v2;
    if (CFReadStreamOpen(v2))
    {
      CFPropertyListRef v4 = CFPropertyListCreateWithStream(kCFAllocatorDefault, v3, 0, 2uLL, &format, 0);
      if (!v4) {
        syslog(7, "Could not create object from stream");
      }
      CFReadStreamClose(v3);
    }
    else
    {
      syslog(7, "Could not open the stream");
      CFPropertyListRef v4 = 0;
    }
    CFRelease(v3);
  }
  else
  {
    syslog(7, "Could not create stream for serialized data");
    return 0;
  }
  return v4;
}

const void *sub_100088A04(UInt8 *bytes, CFIndex length)
{
  uint64_t v2 = 0;
  CFPropertyListFormat format = kCFPropertyListBinaryFormat_v1_0;
  if (bytes && length)
  {
    CFPropertyListRef v4 = CFReadStreamCreateWithBytesNoCopy(kCFAllocatorDefault, bytes, length, kCFAllocatorNull);
    if (!v4)
    {
      syslog(7, "Could not create stream from serialized data");
      return 0;
    }
    CFTypeID v5 = v4;
    if (CFReadStreamOpen(v4))
    {
      CFPropertyListRef v6 = CFPropertyListCreateWithStream(kCFAllocatorDefault, v5, length, 2uLL, &format, 0);
      uint64_t v2 = v6;
      if (!v6)
      {
        syslog(7, "Could not create dictionary from stream");
        goto LABEL_9;
      }
      CFTypeID v7 = CFGetTypeID(v6);
      if (v7 == CFDictionaryGetTypeID())
      {
LABEL_9:
        CFReadStreamClose(v5);
        CFRelease(v5);
        return v2;
      }
      CFRelease(v2);
    }
    else
    {
      syslog(7, "Could not open the stream");
    }
    uint64_t v2 = 0;
    goto LABEL_9;
  }
  return v2;
}

const void *sub_100088B1C(const char *a1)
{
  memset(&v13, 0, sizeof(v13));
  int v2 = open(a1, 0);
  if (v2 == -1)
  {
    int v8 = __error();
    id v9 = strerror(*v8);
    syslog(7, "Could not open %s: %s", a1, v9);
    CFPropertyListRef v4 = 0;
    CFPropertyListRef v6 = 0;
    goto LABEL_7;
  }
  int v3 = v2;
  if (fstat(v2, &v13))
  {
    unsigned int v10 = __error();
    unsigned int v11 = strerror(*v10);
    syslog(7, "Could not fstat %s: %s", a1, v11);
    CFPropertyListRef v6 = 0;
    CFPropertyListRef v4 = 0;
    goto LABEL_6;
  }
  CFPropertyListRef v4 = malloc_type_malloc(LODWORD(v13.st_size), 0x772E5F62uLL);
  if (!v4)
  {
    syslog(7, "Could not allocate buffer");
LABEL_12:
    CFPropertyListRef v6 = 0;
    goto LABEL_6;
  }
  ssize_t v5 = read(v3, v4, v13.st_size);
  if (v5 != v13.st_size)
  {
    unsigned __int8 v12 = __error();
    strerror(*v12);
    syslog(7, "Could not read %s: %s");
    goto LABEL_12;
  }
  CFPropertyListRef v6 = sub_100088A04((UInt8 *)v4, v5);
LABEL_6:
  close(v3);
LABEL_7:
  free(v4);
  return v6;
}

CFMutableDictionaryRef sub_100088C68()
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!result)
  {
    syslog(7, "Out of Memory!!! Dying!...so...cold....");
    exit(-1);
  }
  return result;
}

CFMutableDictionaryRef sub_100088CBC(CFDictionaryRef theDict)
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
  if (!result)
  {
    syslog(7, "Out of Memory!!! Dying!...so...cold....");
    exit(-1);
  }
  return result;
}

CFMutableArrayRef sub_100088D04()
{
  CFMutableArrayRef result = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!result)
  {
    syslog(7, "Out of Memory!!! Dying!...so...cold....");
    exit(-1);
  }
  return result;
}

CFStringRef sub_100088D50(char *cStr)
{
  CFStringRef result = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
  if (!result)
  {
    syslog(7, "Out of Memory!!! Dying!...so...cold....");
    exit(-1);
  }
  return result;
}

uint64_t sub_100088D9C(uint32_t *a1)
{
  uint32_t multiuser_flags = 0;
  mach_port_t v2 = mach_host_self();
  uint64_t result = host_get_multiuser_config_flags(v2, &multiuser_flags);
  if (a1)
  {
    if (!result) {
      *a1 = multiuser_flags;
    }
  }
  return result;
}

uint64_t sub_100088DE4(mach_port_name_t name)
{
  mach_port_type_t ptype = 0;
  if (mach_port_type(mach_task_self_, name, &ptype)) {
    return 0;
  }
  else {
    return ptype;
  }
}

void sub_100088E28(mach_port_name_t name)
{
  kern_return_t v2;
  mach_port_type_t v3;
  BOOL v4;
  mach_port_type_t ptype;

  mach_port_type_t ptype = 0;
  mach_port_t v2 = mach_port_type(mach_task_self_, name, &ptype);
  int v3 = ptype;
  if (v2) {
    CFPropertyListRef v4 = 1;
  }
  else {
    CFPropertyListRef v4 = ptype == 0;
  }
  if (v4)
  {
    syslog(7, "Port:%d has NORIGHTS");
    return;
  }
  if ((ptype & 0x10000) != 0)
  {
    syslog(7, "Port:%d has SENDRIGHT", name);
    if ((v3 & 0x20000) == 0)
    {
LABEL_9:
      if ((v3 & 0x40000) == 0) {
        goto LABEL_10;
      }
LABEL_14:
      syslog(7, "Port:%d has SENDONCERIGHT", name);
      if ((v3 & 0x100000) == 0) {
        return;
      }
      goto LABEL_15;
    }
  }
  else if ((ptype & 0x20000) == 0)
  {
    goto LABEL_9;
  }
  syslog(7, "Port:%d has RECEIVERIGHT", name);
  if ((v3 & 0x40000) != 0) {
    goto LABEL_14;
  }
LABEL_10:
  if ((v3 & 0x100000) != 0) {
LABEL_15:
  }
    syslog(7, "Port:%d has DEADNAME");
}

uint64_t sub_100088F04()
{
  size_t __len = 1023;
  bzero(__big, 0x400uLL);
  if (sysctlbyname("kern.bootargs", __big, &__len, 0, 0) || strnstr(__big, "um-migration-debug=0", __len)) {
    return 0;
  }
  if (strnstr(__big, "um-migration-debug=1", __len)) {
    return 1;
  }
  if (strnstr(__big, "um-migration-debug=2", __len)) {
    return 2;
  }
  if (strnstr(__big, "um-migration-debug=3", __len)) {
    return 3;
  }
  if (strnstr(__big, "um-migration-debug=4", __len)) {
    return 4;
  }
  if (strnstr(__big, "um-migration-debug=5", __len)) {
    return 5;
  }
  if (strnstr(__big, "um-migration-debug=100", __len)) {
    return 100;
  }
  if (strnstr(__big, "um-migration-debug=101", __len)) {
    return 101;
  }
  return 0;
}

void sub_1000892D8(uint64_t a1, char a2, void *a3)
{
  id v4 = a3;
  if (a2)
  {
    if (qword_1000E4220 != -1) {
      dispatch_once(&qword_1000E4220, &stru_1000D5D40);
    }
    ssize_t v5 = (id)qword_1000E4218;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v6 = sub_100055404(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
LABEL_17:
        unsigned int v10 = (const char *)_os_log_send_and_compose_impl();
        unsigned int v11 = (char *)v10;
        if (v10) {
          sub_100055434(v10);
        }
        goto LABEL_20;
      }
LABEL_19:
      unsigned int v11 = 0;
LABEL_20:
      free(v11);
    }
  }
  else
  {
    if (qword_1000E4220 != -1) {
      dispatch_once(&qword_1000E4220, &stru_1000D5D40);
    }
    ssize_t v5 = (id)qword_1000E4218;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      unsigned int v8 = sub_100055404(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = v8 & 0xFFFFFFFE;
      }
      if (v9) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }
}

void sub_1000894D4(id a1)
{
  qword_1000E4218 = (uint64_t)os_log_create(off_1000E33D8, "sideeffect");

  _objc_release_x1();
}

id sub_10008951C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  int v3 = [v2 name];
  int v4 = [v2 uid];
  ssize_t v5 = [v2 uuid];
  unsigned int v6 = [v2 primaryGroupUUID];
  unsigned int v7 = [v2 fullName];
  unsigned int v8 = [v2 homeDirectory];
  unsigned int v9 = [v2 shell];
  unsigned int v10 = [v2 memberships];

  unsigned int v11 = sub_100082FBC((uint64_t)UMDarwinDirectoryUser, v3, v4, v5, v6, v7, v8, v9, v10);

  return v11;
}

id sub_10008965C(uint64_t a1)
{
  id v1 = (id)a1;
  if (a1)
  {
    id v2 = sub_100018BF8(a1);
    uint64_t v3 = sub_100058F38((uint64_t)v1);
    int v4 = sub_100018600((uint64_t)v1);
    ssize_t v5 = sub_100018F6C((uint64_t)v1);
    unsigned int v6 = sub_100018F78((uint64_t)v1);
    unsigned int v7 = sub_1000185F4((uint64_t)v1);
    unsigned int v8 = sub_1000186E0((uint64_t)v1);
    unsigned int v9 = sub_1000186EC((uint64_t)v1);
    id v1 = +[DDIUser userWithUUID:v2 uid:v3 name:v4 primaryGroupUUID:v5 fullName:v6 homeDirectory:v7 shell:v8 memberships:v9];
  }

  return v1;
}

id sub_100089788(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = [v2 name];
  int v4 = [v2 gid];
  ssize_t v5 = [v2 uuid];
  unsigned int v6 = [v2 fullName];

  unsigned int v7 = sub_10008381C((uint64_t)UMDarwinDirectoryGroup, v3, v4, v5, v6);

  return v7;
}

id sub_100089850(uint64_t a1)
{
  id v1 = (id)a1;
  if (a1)
  {
    id v2 = sub_100018BF8(a1);
    uint64_t v3 = sub_100058F38((uint64_t)v1);
    int v4 = sub_100018600((uint64_t)v1);
    ssize_t v5 = sub_100018F6C((uint64_t)v1);
    id v1 = +[DDIGroup groupWithUUID:v2 gid:v3 name:v4 fullName:v5];
  }

  return v1;
}

void sub_100089994(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = +[NSMutableArray array];
  unsigned int v8 = +[NSMutableArray array];
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id v9 = v5;
  id v10 = [v9 countByEnumeratingWithState:&v45 objects:v52 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v46;
    do
    {
      stat v13 = 0;
      do
      {
        if (*(void *)v46 != v12) {
          objc_enumerationMutation(v9);
        }
        int v14 = sub_10008951C((uint64_t)UMDarwinDirectoryUser, *(void **)(*((void *)&v45 + 1) + 8 * (void)v13));
        [v7 addObject:v14];

        stat v13 = (char *)v13 + 1;
      }
      while (v11 != v13);
      id v11 = [v9 countByEnumeratingWithState:&v45 objects:v52 count:16];
    }
    while (v11);
  }

  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v15 = v6;
  id v16 = [v15 countByEnumeratingWithState:&v41 objects:v51 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v42;
    do
    {
      id v19 = 0;
      do
      {
        if (*(void *)v42 != v18) {
          objc_enumerationMutation(v15);
        }
        id v20 = sub_100089788((uint64_t)UMDarwinDirectoryGroup, *(void **)(*((void *)&v41 + 1) + 8 * (void)v19));
        [v8 addObject:v20];

        id v19 = (char *)v19 + 1;
      }
      while (v17 != v19);
      id v17 = [v15 countByEnumeratingWithState:&v41 objects:v51 count:16];
    }
    while (v17);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  [v9 removeAllObjects];
  [v15 removeAllObjects];
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v21 = v7;
  id v22 = [v21 countByEnumeratingWithState:&v37 objects:v50 count:16];
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = *(void *)v38;
    do
    {
      id v25 = 0;
      do
      {
        if (*(void *)v38 != v24) {
          objc_enumerationMutation(v21);
        }
        id v26 = sub_10008965C(*(void *)(*((void *)&v37 + 1) + 8 * (void)v25));
        [v9 addObject:v26];

        id v25 = (char *)v25 + 1;
      }
      while (v23 != v25);
      id v23 = [v21 countByEnumeratingWithState:&v37 objects:v50 count:16];
    }
    while (v23);
  }

  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v27 = v8;
  id v28 = [v27 countByEnumeratingWithState:&v33 objects:v49 count:16];
  if (v28)
  {
    id v29 = v28;
    uint64_t v30 = *(void *)v34;
    do
    {
      unsigned int v31 = 0;
      do
      {
        if (*(void *)v34 != v30) {
          objc_enumerationMutation(v27);
        }
        unsigned int v32 = sub_100089850(*(void *)(*((void *)&v33 + 1) + 8 * (void)v31));
        [v15 addObject:v32];

        unsigned int v31 = (char *)v31 + 1;
      }
      while (v29 != v31);
      id v29 = [v27 countByEnumeratingWithState:&v33 objects:v49 count:16];
    }
    while (v29);
  }
}

void sub_100089EF0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  unsigned int v8 = +[NSMutableArray array];
  id v9 = +[NSMutableArray array];
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id v10 = v6;
  id v11 = [v10 countByEnumeratingWithState:&v47 objects:v54 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v48;
    do
    {
      int v14 = 0;
      do
      {
        if (*(void *)v48 != v13) {
          objc_enumerationMutation(v10);
        }
        id v15 = sub_10008951C((uint64_t)UMDarwinDirectoryUser, *(void **)(*((void *)&v47 + 1) + 8 * (void)v14));
        [v8 addObject:v15];

        int v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      id v12 = [v10 countByEnumeratingWithState:&v47 objects:v54 count:16];
    }
    while (v12);
  }

  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v16 = v7;
  id v17 = [v16 countByEnumeratingWithState:&v43 objects:v53 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v44;
    do
    {
      id v20 = 0;
      do
      {
        if (*(void *)v44 != v19) {
          objc_enumerationMutation(v16);
        }
        id v21 = sub_100089788((uint64_t)UMDarwinDirectoryGroup, *(void **)(*((void *)&v43 + 1) + 8 * (void)v20));
        [v9 addObject:v21];

        id v20 = (char *)v20 + 1;
      }
      while (v18 != v20);
      id v18 = [v16 countByEnumeratingWithState:&v43 objects:v53 count:16];
    }
    while (v18);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  if (!*a4)
  {
    [v10 removeAllObjects];
    [v16 removeAllObjects];
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v22 = v8;
    id v23 = [v22 countByEnumeratingWithState:&v39 objects:v52 count:16];
    if (v23)
    {
      id v24 = v23;
      uint64_t v25 = *(void *)v40;
      do
      {
        id v26 = 0;
        do
        {
          if (*(void *)v40 != v25) {
            objc_enumerationMutation(v22);
          }
          id v27 = sub_10008965C(*(void *)(*((void *)&v39 + 1) + 8 * (void)v26));
          [v10 addObject:v27];

          id v26 = (char *)v26 + 1;
        }
        while (v24 != v26);
        id v24 = [v22 countByEnumeratingWithState:&v39 objects:v52 count:16];
      }
      while (v24);
    }

    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v28 = v9;
    id v29 = [v28 countByEnumeratingWithState:&v35 objects:v51 count:16];
    if (v29)
    {
      id v30 = v29;
      uint64_t v31 = *(void *)v36;
      do
      {
        unsigned int v32 = 0;
        do
        {
          if (*(void *)v36 != v31) {
            objc_enumerationMutation(v28);
          }
          long long v33 = sub_100089850(*(void *)(*((void *)&v35 + 1) + 8 * (void)v32));
          [v16 addObject:v33];

          unsigned int v32 = (char *)v32 + 1;
        }
        while (v30 != v32);
        id v30 = [v28 countByEnumeratingWithState:&v35 objects:v51 count:16];
      }
      while (v30);
    }
  }
}

void sub_10008A278(id a1)
{
  qword_1000E4228 = (uint64_t)os_log_create(off_1000E33D8, "user");

  _objc_release_x1();
}

id sub_10008A5AC(void *a1)
{
  if (a1)
  {
    id v1 = sub_1000173F4((uint64_t)NSUUID, a1);
    id v2 = [v1 UUIDString];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id sub_10008A610(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  id v2 = [a1 objectForKey:a2];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v3 = [v2 BOOLValue];
    int v4 = 0;
  }
  else
  {
    id v3 = 0;
    int v4 = 2;
  }
  *__error() = v4;

  return v3;
}

id sub_10008A698(void *a1, uint64_t a2, id a3)
{
  if (!a1) {
    return 0;
  }
  int v4 = [a1 objectForKey:a2];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    a3 = [v4 intValue];
    int v5 = 0;
  }
  else
  {
    int v5 = 2;
  }
  *__error() = v5;

  return a3;
}

id sub_10008A720(void *a1, uint64_t a2, id a3)
{
  if (!a1) {
    return 0;
  }
  int v4 = [a1 objectForKey:a2];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    a3 = [v4 unsignedIntValue];
    int v5 = 0;
  }
  else
  {
    int v5 = 2;
  }
  *__error() = v5;

  return a3;
}

id sub_10008A7A8(void *a1, uint64_t a2, id a3)
{
  if (!a1) {
    return 0;
  }
  int v4 = [a1 objectForKey:a2];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    a3 = [v4 longLongValue];
    int v5 = 0;
  }
  else
  {
    int v5 = 2;
  }
  *__error() = v5;

  return a3;
}

id sub_10008A830(void *a1, uint64_t a2, id a3)
{
  if (!a1) {
    return 0;
  }
  int v4 = [a1 objectForKey:a2];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    a3 = [v4 unsignedLongLongValue];
    int v5 = 0;
  }
  else
  {
    int v5 = 2;
  }
  *__error() = v5;

  return a3;
}

id sub_10008A8B8(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = [a1 objectForKey:a2];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    int v4 = __error();
    if (isKindOfClass)
    {
      int *v4 = 0;
      id v5 = v2;
    }
    else
    {
      id v5 = 0;
      int *v4 = 2;
    }
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_10008A948(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = [a1 objectForKey:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      long long v10 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      id v3 = v2;
      int v4 = (char *)[v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4)
      {
        id v5 = v4;
        uint64_t v6 = *(void *)v11;
        while (2)
        {
          for (CFIndex i = 0; i != v5; ++i)
          {
            if (*(void *)v11 != v6) {
              objc_enumerationMutation(v3);
            }
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              *__error() = 2;

              unsigned int v8 = 0;
              goto LABEL_14;
            }
          }
          id v5 = (char *)[v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
          if (v5) {
            continue;
          }
          break;
        }
      }

      unsigned int v8 = +[NSSet setWithArray:](NSSet, "setWithArray:", v3, v10);
      *__error() = 0;
LABEL_14:
    }
    else
    {
      unsigned int v8 = 0;
      *__error() = 2;
    }
  }
  else
  {
    unsigned int v8 = 0;
  }

  return v8;
}

id sub_10008AAF4(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = [a1 objectForKey:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v3 = sub_1000173F4((uint64_t)NSUUID, v2);
      int v4 = 2 * (v3 == 0);
    }
    else
    {
      id v3 = 0;
      int v4 = 2;
    }
    *__error() = v4;
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

id sub_10008ABA0(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = [a1 objectForKey:a2];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    int v4 = __error();
    if (isKindOfClass)
    {
      int *v4 = 0;
      id v5 = v2;
    }
    else
    {
      id v5 = 0;
      int *v4 = 2;
    }
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_10008AC30(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = [a1 objectForKey:a2];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    int v4 = __error();
    if (isKindOfClass)
    {
      int *v4 = 0;
      id v5 = v2;
    }
    else
    {
      id v5 = 0;
      int *v4 = 2;
    }
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_10008ACC0(uint64_t a1)
{
  if (a1)
  {
    id v9 = 0;
    id v1 = +[NSPropertyListSerialization dataWithPropertyList:a1 format:200 options:0 error:&v9];
    id v2 = v9;
    if (!v1)
    {
      if (qword_1000E4240 != -1) {
        dispatch_once(&qword_1000E4240, &stru_1000D5DD0);
      }
      id v3 = (id)qword_1000E4238;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        unsigned int v4 = sub_100055404(0);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          unsigned int v5 = v4;
        }
        else {
          unsigned int v5 = v4 & 0xFFFFFFFE;
        }
        if (v5)
        {
          int v10 = 138543362;
          id v11 = v2;
          uint64_t v6 = (const char *)_os_log_send_and_compose_impl();
          id v7 = (char *)v6;
          if (v6) {
            sub_100055434(v6);
          }
        }
        else
        {
          id v7 = 0;
        }
        free(v7);
      }
    }
  }
  else
  {
    id v1 = 0;
  }

  return v1;
}

id sub_10008AE50(uint64_t a1)
{
  if (a1)
  {
    id v9 = 0;
    id v1 = +[NSPropertyListSerialization dataWithPropertyList:a1 format:200 options:0 error:&v9];
    id v2 = v9;
    if (!v1)
    {
      if (qword_1000E4240 != -1) {
        dispatch_once(&qword_1000E4240, &stru_1000D5DD0);
      }
      id v3 = (id)qword_1000E4238;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        unsigned int v4 = sub_100055404(0);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          unsigned int v5 = v4;
        }
        else {
          unsigned int v5 = v4 & 0xFFFFFFFE;
        }
        if (v5)
        {
          int v10 = 138412290;
          id v11 = v2;
          uint64_t v6 = (const char *)_os_log_send_and_compose_impl();
          id v7 = (char *)v6;
          if (v6) {
            sub_100055434(v6);
          }
        }
        else
        {
          id v7 = 0;
        }
        free(v7);
      }
    }
  }
  else
  {
    id v1 = 0;
  }

  return v1;
}

id sub_10008AFE0(uint64_t a1)
{
  if (a1)
  {
    id v15 = 0;
    id v1 = +[NSPropertyListSerialization propertyListWithData:a1 options:0 format:0 error:&v15];
    id v2 = v15;
    if (v1)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        if (qword_1000E4240 != -1) {
          dispatch_once(&qword_1000E4240, &stru_1000D5DD0);
        }
        id v3 = (id)qword_1000E4238;
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          v16[0] = 0;
          unsigned int v4 = sub_100055404(0);
          if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
            unsigned int v5 = v4;
          }
          else {
            unsigned int v5 = v4 & 0xFFFFFFFE;
          }
          if (v5)
          {
            uint64_t v6 = (const char *)_os_log_send_and_compose_impl();
            id v7 = (char *)v6;
            if (v6) {
              sub_100055434(v6);
            }
          }
          else
          {
            id v7 = 0;
          }
          free(v7);
        }

        id v13 = 0;
        goto LABEL_29;
      }
    }
    else
    {
      if (qword_1000E4240 != -1) {
        dispatch_once(&qword_1000E4240, &stru_1000D5DD0);
      }
      unsigned int v8 = (id)qword_1000E4238;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        unsigned int v9 = sub_100055404(0);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          unsigned int v10 = v9;
        }
        else {
          unsigned int v10 = v9 & 0xFFFFFFFE;
        }
        if (v10)
        {
          LODWORD(v16[0]) = 138543362;
          *(void *)((char *)v16 + 4) = v2;
          id v11 = (const char *)_os_log_send_and_compose_impl();
          long long v12 = (char *)v11;
          if (v11) {
            sub_100055434(v11);
          }
        }
        else
        {
          long long v12 = 0;
        }
        free(v12);
      }
    }
    id v13 = v1;
LABEL_29:

    goto LABEL_30;
  }
  id v13 = 0;
LABEL_30:

  return v13;
}

id sub_10008B270(uint64_t a1)
{
  if (a1)
  {
    id v15 = 0;
    id v1 = +[NSPropertyListSerialization propertyListWithData:a1 options:0 format:0 error:&v15];
    id v2 = v15;
    if (v1)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        if (qword_1000E4240 != -1) {
          dispatch_once(&qword_1000E4240, &stru_1000D5DD0);
        }
        id v3 = (id)qword_1000E4238;
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          v16[0] = 0;
          unsigned int v4 = sub_100055404(0);
          if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
            unsigned int v5 = v4;
          }
          else {
            unsigned int v5 = v4 & 0xFFFFFFFE;
          }
          if (v5)
          {
            uint64_t v6 = (const char *)_os_log_send_and_compose_impl();
            id v7 = (char *)v6;
            if (v6) {
              sub_100055434(v6);
            }
          }
          else
          {
            id v7 = 0;
          }
          free(v7);
        }

        id v13 = 0;
        goto LABEL_29;
      }
    }
    else
    {
      if (qword_1000E4240 != -1) {
        dispatch_once(&qword_1000E4240, &stru_1000D5DD0);
      }
      unsigned int v8 = (id)qword_1000E4238;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        unsigned int v9 = sub_100055404(0);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          unsigned int v10 = v9;
        }
        else {
          unsigned int v10 = v9 & 0xFFFFFFFE;
        }
        if (v10)
        {
          LODWORD(v16[0]) = 138543362;
          *(void *)((char *)v16 + 4) = v2;
          id v11 = (const char *)_os_log_send_and_compose_impl();
          long long v12 = (char *)v11;
          if (v11) {
            sub_100055434(v11);
          }
        }
        else
        {
          long long v12 = 0;
        }
        free(v12);
      }
    }
    id v13 = v1;
LABEL_29:

    goto LABEL_30;
  }
  id v13 = 0;
LABEL_30:

  return v13;
}

void sub_10008B500(id a1)
{
  qword_1000E4238 = (uint64_t)os_log_create(off_1000E33D8, "default");

  _objc_release_x1();
}

uint64_t acm_explicit_bzero(void *a1, rsize_t __n)
{
  return memset_s(a1, __n, 0, __n);
}

uint64_t acm_get_mem()
{
  return qword_1000E4248;
}

void *acm_mem_alloc_data(size_t size)
{
  uint64_t result = malloc_type_calloc(1uLL, size, 0xCB62F0E9uLL);
  if (result) {
    qword_1000E4250 += size;
  }
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = qword_1000E4250 - __n;
    if (qword_1000E4250 < __n) {
      uint64_t v4 = 0;
    }
    qword_1000E4250 = v4;
  }
}

void *acm_mem_alloc(size_t size)
{
  uint64_t result = malloc_type_calloc(1uLL, size, 0xDB9956F0uLL);
  if (result) {
    qword_1000E4258 += size;
  }
  return result;
}

void acm_mem_free(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = qword_1000E4258 - __n;
    if (qword_1000E4258 < __n) {
      uint64_t v4 = 0;
    }
    qword_1000E4258 = v4;
  }
}

const char *acm_mem_alloc_info(const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2) {
    qword_1000E4248 += a3;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    uint64_t v6 = "NULL";
    if (result) {
      id v7 = result;
    }
    else {
      id v7 = "NULL";
    }
    if (a4) {
      unsigned int v8 = a4;
    }
    else {
      unsigned int v8 = "NULL";
    }
    if (a6) {
      uint64_t v6 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_alloc_info", v7, a2, a3, qword_1000E4248, 0, qword_1000E4250, qword_1000E4258, v8, a5, v6);
  }
  return result;
}

const char *acm_mem_free_info(const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2)
  {
    uint64_t v6 = qword_1000E4248 - a3;
    if (qword_1000E4248 < a3) {
      uint64_t v6 = 0;
    }
    qword_1000E4248 = v6;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    id v7 = "NULL";
    if (result) {
      unsigned int v8 = result;
    }
    else {
      unsigned int v8 = "NULL";
    }
    if (a4) {
      unsigned int v9 = a4;
    }
    else {
      unsigned int v9 = "NULL";
    }
    if (a6) {
      id v7 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_free_info", v8, a2, a3, qword_1000E4248, 0, qword_1000E4250, qword_1000E4258, v9, a5, v7);
  }
  return result;
}

uint64_t GetSerializedVerifyPolicySize(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, _DWORD *a5, unsigned int a6, void *a7)
{
  unsigned int v14 = 0;
  uint64_t result = 4294967293;
  if (a1 && __s1 && a7)
  {
    size_t v12 = strnlen(__s1, 0x81uLL);
    if (v12 > 0x80)
    {
      return 4294967293;
    }
    else
    {
      size_t v13 = v12;
      uint64_t result = sub_10008B888(a5, a6, &v14);
      if (!result) {
        *a7 = v13 + v14 + 26;
      }
    }
  }
  return result;
}

uint64_t sub_10008B888(_DWORD *a1, unsigned int a2, _DWORD *a3)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "getLengthOfParameters");
  }
  if (a3)
  {
    *a3 = 0;
    int v6 = 0;
    if (a2)
    {
      uint64_t v7 = a2;
      while (1)
      {
        uint64_t v8 = sub_10008E86C(a1);
        if (v8) {
          break;
        }
        int v9 = v6 + 8;
        int v10 = a1[4];
        v6 += v10 + 8;
        if (__CFADD__(v10, v9)) {
          goto LABEL_10;
        }
        a1 += 6;
        if (!--v7) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v8;
      unsigned int v12 = 70;
    }
    else
    {
LABEL_9:
      uint64_t v11 = 0;
      *a3 = v6;
      unsigned int v12 = 10;
    }
  }
  else
  {
LABEL_10:
    unsigned int v12 = 70;
    uint64_t v11 = 4294967293;
  }
  if (v12 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "getLengthOfParameters", (int)v11);
  }
  return v11;
}

uint64_t SerializeVerifyPolicy(_OWORD *a1, char *__s1, char a3, uint64_t a4, _DWORD *a5, unsigned int a6, _OWORD *a7, size_t *a8)
{
  unint64_t v21 = 0;
  uint64_t result = 4294967293;
  if (a1)
  {
    if (__s1)
    {
      if (a8)
      {
        if (a7)
        {
          if (a6 <= 0xA && (a5 != 0) == (a6 != 0))
          {
            int v15 = a4;
            uint64_t result = GetSerializedVerifyPolicySize((uint64_t)a1, __s1, 0, a4, a5, a6, &v21);
            if (!result)
            {
              if (*a8 < v21) {
                return 4294967293;
              }
              *a7 = *a1;
              size_t v17 = strnlen(__s1, 0x81uLL);
              if (v17 > 0x80)
              {
                return 4294967293;
              }
              else
              {
                size_t v18 = v17;
                memcpy(a7 + 1, __s1, v17 + 1);
                uint64_t v19 = (char *)a7 + v18;
                v19[17] = a3;
                *(_DWORD *)(v19 + 18) = v15;
                size_t v20 = v18 + 22;
                uint64_t result = sub_10008BAB8((uint64_t)a5, a6, (uint64_t)a7, (uint64_t *)&v20);
                if (!result) {
                  *a8 = v20;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_10008BAB8(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  LODWORD(v6) = a2;
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "serializeParameters");
  }
  unsigned int v8 = 70;
  uint64_t v9 = 4294967293;
  if (a3 && a4)
  {
    uint64_t v10 = *a4;
    *(_DWORD *)(a3 + v10) = v6;
    uint64_t v11 = v10 + 4;
    if (v6)
    {
      uint64_t v6 = v6;
      while (1)
      {
        *(_OWORD *)__src = *(_OWORD *)a1;
        size_t __n = *(void *)(a1 + 16);
        uint64_t v12 = sub_10008E86C(__src);
        if (v12) {
          break;
        }
        size_t v13 = (_DWORD *)(a3 + v11);
        size_t v14 = __n;
        *size_t v13 = __src[0];
        v13[1] = v14;
        v11 += 8;
        if (v14)
        {
          memcpy((void *)(a3 + v11), __src[1], v14);
          v11 += v14;
        }
        a1 += 24;
        if (!--v6) {
          goto LABEL_11;
        }
      }
      uint64_t v9 = v12;
      unsigned int v8 = 70;
    }
    else
    {
LABEL_11:
      uint64_t v9 = 0;
      *a4 = v11;
      unsigned int v8 = 10;
    }
  }
  if (v8 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "serializeParameters", (int)v9);
  }
  return v9;
}

uint64_t DeserializeVerifyPolicy(uint64_t a1, unint64_t a2, _OWORD *a3, void *a4, BOOL *a5, _DWORD *a6, void *a7, _DWORD *a8)
{
  id v28 = 0;
  unsigned int v27 = 0;
  uint64_t v8 = 4294967293;
  unint64_t v9 = a2 - 16;
  if (a2 >= 0x10 && a1 && a3 && a4 && a5 && a6 && a7 && a8)
  {
    *a3 = *(_OWORD *)a1;
    unint64_t v17 = strnlen((const char *)(a1 + 16), a2 - 16);
    if (v17 > 0x80 || v9 <= v17) {
      return 4294967293;
    }
    id v26 = a4;
    unint64_t v18 = v17 + 1;
    uint64_t v19 = acm_mem_alloc_data(v17 + 1);
    acm_mem_alloc_info("<data>", v19, v17 + 1, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 349, "DeserializeVerifyPolicy");
    if (!v19) {
      return 4294967292;
    }
    memcpy(v19, (const void *)(a1 + 16), v17 + 1);
    unint64_t v29 = v17 + 17;
    if (v17 + 17 == a2 || (size_t v20 = a5, v21 = *(unsigned char *)(a1 + v17 + 17) != 0, v29 = v17 + 18, a2 - (v17 + 18) < 4))
    {
      uint64_t v8 = 4294967293;
    }
    else
    {
      unint64_t v25 = v17 + 1;
      id v22 = a8;
      int v23 = *(_DWORD *)(a1 + v17 + 18);
      unint64_t v29 = v17 + 22;
      uint64_t v8 = sub_10008BDF8(a1, a2, &v29, &v28, &v27);
      if (!v8)
      {
        *id v26 = v19;
        *size_t v20 = v21;
        *a6 = v23;
        *a7 = v28;
        _DWORD *v22 = v27;
        return v8;
      }
      unint64_t v18 = v25;
    }
    acm_mem_free_info("<data>", v19, v18, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 378, "DeserializeVerifyPolicy");
    acm_mem_free_data(v19, v18);
    if (v28) {
      Util_SafeDeallocParameters(v28, v27);
    }
  }
  return v8;
}

uint64_t sub_10008BDF8(uint64_t a1, unint64_t a2, unint64_t *a3, void *a4, _DWORD *a5)
{
  uint64_t v10 = &kUMUserSessionShortNameKey;
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "deserializeParameters");
  }
  unsigned int v11 = 70;
  uint64_t v12 = 4294967293;
  if (!a1 || !a3 || !a4 || !a5) {
    goto LABEL_25;
  }
  unint64_t v13 = *a3;
  if (a2 <= *a3)
  {
    LODWORD(v14) = 0;
LABEL_23:
    id v16 = 0;
LABEL_24:
    uint64_t v12 = 0;
    *a4 = v16;
    *a5 = v14;
    unsigned int v11 = 10;
    *a3 = v13;
    goto LABEL_25;
  }
  if (a2 - *a3 < 4 || (uint64_t v14 = *(unsigned int *)(a1 + v13), v14 > 0xA))
  {
    unsigned int v11 = 70;
    uint64_t v12 = 4294967293;
    goto LABEL_25;
  }
  v13 += 4;
  if (!v14) {
    goto LABEL_23;
  }
  int v27 = v14;
  uint64_t v15 = 24 * v14;
  id v16 = (char *)acm_mem_alloc(24 * v14);
  acm_mem_alloc_info("array of ACMParameter", v16, v15, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 194, "deserializeParameters");
  if (!v16)
  {
    unsigned int v11 = 70;
    uint64_t v12 = 4294967292;
    goto LABEL_25;
  }
  id v24 = a4;
  unint64_t v25 = a5;
  id v26 = a3;
  uint64_t v17 = 0;
  while (1)
  {
    unint64_t v18 = &v16[v17];
    *(void *)&v16[v17 + 8] = 0;
    if (a2 - v13 < 8
      || (*(_DWORD *)unint64_t v18 = *(_DWORD *)(a1 + v13), a2 - (v13 + 4) < 4)
      || (uint64_t v19 = &v16[v17],
          size_t v20 = *(unsigned int *)(a1 + v13 + 4),
          *(_DWORD *)&v16[v17 + 16] = v20,
          v13 += 8,
          a2 - v13 < v20))
    {
      unsigned int v11 = 70;
      uint64_t v12 = 4294967293;
      goto LABEL_31;
    }
    uint64_t v21 = sub_10008E86C(&v16[v17]);
    if (v21)
    {
      uint64_t v12 = v21;
      unsigned int v11 = 70;
      goto LABEL_31;
    }
    if (v20) {
      break;
    }
LABEL_20:
    v17 += 24;
    if (v15 == v17)
    {
      uint64_t v10 = &kUMUserSessionShortNameKey;
      a5 = v25;
      a3 = v26;
      a4 = v24;
      LODWORD(v14) = v27;
      goto LABEL_24;
    }
  }
  id v22 = acm_mem_alloc_data(v20);
  acm_mem_alloc_info("<data>", v22, v20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 212, "deserializeParameters");
  *((void *)v18 + 1) = v22;
  if (v22)
  {
    memcpy(v22, (const void *)(a1 + v13), *((unsigned int *)v19 + 4));
    v13 += *((unsigned int *)v19 + 4);
    goto LABEL_20;
  }
  unsigned int v11 = 70;
  uint64_t v12 = 4294967292;
LABEL_31:
  uint64_t v10 = &kUMUserSessionShortNameKey;
LABEL_25:
  if (v11 >= *((unsigned __int8 *)v10 + 1856)) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "deserializeParameters", (int)v12);
  }
  return v12;
}

uint64_t GetSerializedVerifyAclConstraintSize(int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, _DWORD *a9, unsigned int a10, void *a11)
{
  unsigned int v18 = 0;
  uint64_t result = 4294967293;
  if (a3)
  {
    if (a11)
    {
      if (a10 <= 0xA && (a9 != 0) == (a10 != 0))
      {
        uint64_t result = sub_10008B888(a9, a10, &v18);
        if (!result)
        {
          uint64_t v15 = 29;
          if (a1 == 32) {
            uint64_t v15 = 33;
          }
          uint64_t v16 = v15 + a4;
          if (a1 == 32) {
            uint64_t v17 = a6;
          }
          else {
            uint64_t v17 = 0;
          }
          *a11 = v16 + v17 + v18;
        }
      }
    }
  }
  return result;
}

uint64_t SerializeVerifyAclConstraint(int a1, _OWORD *a2, const void *a3, unsigned int a4, const void *a5, unsigned int a6, char a7, int a8, _DWORD *a9, unsigned int a10, uint64_t a11, void *a12)
{
  if (!a3) {
    return 4294967293;
  }
  uint64_t result = 4294967293;
  if (a12) {
    BOOL v14 = a11 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14 && a10 <= 0xA && (a9 != 0) == (a10 != 0))
  {
    unsigned int v31 = 0;
    uint64_t result = sub_10008B888(a9, a10, &v31);
    if (!result)
    {
      uint64_t v21 = 29;
      if (a1 == 32) {
        uint64_t v21 = 33;
      }
      uint64_t v22 = v21 + a4;
      if (a1 == 32) {
        uint64_t v23 = a6;
      }
      else {
        uint64_t v23 = 0;
      }
      if (*a12 < v22 + v23 + (unint64_t)v31)
      {
        return 4294967293;
      }
      else
      {
        int v28 = a8;
        if (a2)
        {
          *(_OWORD *)a11 = *a2;
        }
        else
        {
          *(void *)a11 = 0;
          *(void *)(a11 + 8) = 0;
        }
        *(_DWORD *)(a11 + 16) = a4;
        memcpy((void *)(a11 + 20), a3, a4);
        uint64_t v24 = a4 + 20;
        if (a1 == 32)
        {
          *(_DWORD *)(a11 + v24) = a6;
          uint64_t v25 = a4 + 24;
          memcpy((void *)(a11 + v25), a5, a6);
          uint64_t v24 = v25 + a6;
        }
        uint64_t v26 = a11 + v24;
        *(unsigned char *)uint64_t v26 = a7;
        *(_DWORD *)(v26 + 1) = v28;
        uint64_t v30 = v24 + 5;
        uint64_t result = sub_10008BAB8((uint64_t)a9, a10, a11, &v30);
        if (!result) {
          *a12 = v30;
        }
      }
    }
  }
  return result;
}

uint64_t DeserializeVerifyAclConstraint(int a1, uint64_t a2, unsigned int a3, _OWORD *a4, void *a5, _DWORD *a6, size_t *a7, _DWORD *a8, BOOL *a9, _DWORD *a10, void *a11, _DWORD *a12)
{
  long long v33 = 0;
  unint64_t v34 = 0;
  unsigned int v32 = 0;
  uint64_t v12 = 4294967293;
  if (a2 && a4 && a5 && a6 && a9 && a10 && a11 && a12 && a3 >= 0x10)
  {
    unint64_t v16 = a3;
    *a4 = *(_OWORD *)a2;
    unint64_t v34 = 16;
    if ((a3 & 0xFFFFFFFC) == 0x10)
    {
      uint64_t v12 = 4294967293;
    }
    else
    {
      unint64_t v20 = *(unsigned int *)(a2 + 16);
      unint64_t v34 = 20;
      uint64_t v21 = acm_mem_alloc_data(v20);
      acm_mem_alloc_info("<data>", v21, v20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 532, "DeserializeVerifyAclConstraint");
      if (v21)
      {
        if (v16 - 20 < v20) {
          goto LABEL_24;
        }
        memcpy(v21, (const void *)(a2 + 20), v20);
        unint64_t v22 = v20 + 20;
        unint64_t v34 = v20 + 20;
        unsigned int v31 = a5;
        if (a1 != 32)
        {
          uint64_t v25 = 0;
          LODWORD(v23) = 0;
          goto LABEL_19;
        }
        if (v16 - v22 < 4)
        {
LABEL_24:
          uint64_t v25 = 0;
          LODWORD(v23) = 0;
        }
        else
        {
          size_t v23 = *(unsigned int *)(a2 + v22);
          unint64_t v24 = v20 + 24;
          unint64_t v34 = v20 + 24;
          uint64_t v25 = acm_mem_alloc_data(v23);
          acm_mem_alloc_info("<data>", v25, v23, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 544, "DeserializeVerifyAclConstraint");
          if (!v25)
          {
            uint64_t v12 = 4294967292;
LABEL_26:
            acm_mem_free_info("<data>", v21, v20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 580, "DeserializeVerifyAclConstraint");
            acm_mem_free_data(v21, v20);
            if (v25)
            {
              acm_mem_free_info("<data>", v25, v23, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 583, "DeserializeVerifyAclConstraint");
              acm_mem_free_data(v25, v23);
            }
            goto LABEL_30;
          }
          if (v16 - v24 >= v23)
          {
            memcpy(v25, (const void *)(a2 + v24), v23);
            unint64_t v22 = v24 + v23;
            unint64_t v34 = v24 + v23;
LABEL_19:
            if (v22 != v16)
            {
              BOOL v26 = *(unsigned char *)(a2 + v22) != 0;
              unint64_t v34 = v22 + 1;
              if (v16 - (v22 + 1) >= 4)
              {
                unint64_t v30 = v20;
                int v27 = v23;
                size_t v23 = (size_t)v25;
                int v28 = *(_DWORD *)(a2 + v22 + 1);
                unint64_t v34 = v22 + 5;
                uint64_t v12 = sub_10008BDF8(a2, v16, &v34, &v33, &v32);
                if (!v12)
                {
                  *unsigned int v31 = v21;
                  *a7 = v23;
                  *a8 = v27;
                  *a6 = v30;
                  *a9 = v26;
                  *a10 = v28;
                  *a11 = v33;
                  *a12 = v32;
                  return v12;
                }
                uint64_t v25 = (void *)v23;
                LODWORD(v23) = v27;
                unint64_t v20 = v30;
                goto LABEL_26;
              }
            }
          }
        }
        uint64_t v12 = 4294967293;
        goto LABEL_26;
      }
      uint64_t v12 = 4294967292;
    }
  }
LABEL_30:
  if (v33) {
    Util_SafeDeallocParameters(v33, v32);
  }
  return v12;
}

uint64_t GetSerializedProcessAclSize(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, _DWORD *a7, unsigned int a8, void *a9)
{
  unsigned int v12 = 0;
  uint64_t result = 4294967293;
  if (a2 && a3 && a9 && a8 <= 0xA && (a7 != 0) == (a8 != 0))
  {
    uint64_t result = sub_10008B888(a7, a8, &v12);
    if (!result) {
      *a9 = a3 + (unint64_t)a5 + v12 + 36;
    }
  }
  return result;
}

uint64_t SerializeProcessAcl(_OWORD *a1, const void *a2, unsigned int a3, const void *a4, unsigned int a5, uint64_t a6, _DWORD *a7, unsigned int a8, uint64_t a9, unint64_t *a10)
{
  unint64_t v23 = 0;
  uint64_t result = 4294967293;
  if (a2 && a3)
  {
    BOOL v15 = !a10 || a9 == 0;
    if (!v15 && a8 <= 0xA && (a7 != 0) == (a8 != 0))
    {
      int v17 = a6;
      uint64_t result = GetSerializedProcessAclSize(4294967293, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8, &v23);
      if (!result)
      {
        if (*a10 < v23)
        {
          return 4294967293;
        }
        else
        {
          if (a1)
          {
            *(_OWORD *)a9 = *a1;
          }
          else
          {
            *(void *)a9 = 0;
            *(void *)(a9 + 8) = 0;
          }
          *(_DWORD *)(a9 + 16) = a3;
          memcpy((void *)(a9 + 20), a2, a3);
          *(_DWORD *)(a9 + a3 + 20) = a5;
          uint64_t v21 = a3 + 24;
          if (a5)
          {
            memcpy((void *)(a9 + v21), a4, a5);
            v21 += a5;
          }
          *(_DWORD *)(a9 + v21) = v17;
          unint64_t v22 = v21 + 4;
          uint64_t result = sub_10008BAB8((uint64_t)a7, a8, a9, (uint64_t *)&v22);
          if (!result) {
            *a10 = v22;
          }
        }
      }
    }
  }
  return result;
}

uint64_t DeserializeProcessAcl(uint64_t a1, unsigned int a2, _OWORD *a3, void *a4, _DWORD *a5, void *a6, unsigned int *a7, _DWORD *a8, void *a9, _DWORD *a10)
{
  long long v39 = 0;
  unint64_t v40 = 0;
  unsigned int v38 = 0;
  uint64_t v10 = 4294967293;
  if (a1)
  {
    if (a3)
    {
      unsigned int v11 = a4;
      if (a4)
      {
        unsigned int v12 = a5;
        if (a5)
        {
          unint64_t v13 = a6;
          if (a6)
          {
            BOOL v14 = a7;
            if (a7)
            {
              BOOL v15 = a8;
              if (a8)
              {
                if (a9 && a10 && a2 >= 0x10)
                {
                  unint64_t v17 = a2;
                  *a3 = *(_OWORD *)a1;
                  unint64_t v40 = 16;
                  if ((a2 & 0xFFFFFFFC) == 0x10)
                  {
                    uint64_t v10 = 4294967293;
                  }
                  else
                  {
                    unint64_t v18 = *(unsigned int *)(a1 + 16);
                    unint64_t v40 = 20;
                    uint64_t v19 = acm_mem_alloc_data(v18);
                    acm_mem_alloc_info("<data>", v19, v18, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 722, "DeserializeProcessAcl");
                    if (v19)
                    {
                      if (v17 - 20 < v18
                        || (memcpy(v19, (const void *)(a1 + 20), v18), unint64_t v40 = v18 + 20, v17 - (v18 + 20) < 4))
                      {
                        unsigned int v32 = 0;
                        unsigned int v37 = 0;
                        uint64_t v10 = 4294967293;
                      }
                      else
                      {
                        size_t v20 = *(unsigned int *)(a1 + v18 + 20);
                        unint64_t v21 = v18 + 24;
                        unint64_t v40 = v18 + 24;
                        unsigned int v37 = v20;
                        if (!v20)
                        {
                          long long v36 = 0;
                          goto LABEL_20;
                        }
                        long long v33 = v12;
                        unint64_t v34 = v11;
                        unint64_t v22 = v13;
                        unint64_t v23 = v14;
                        unint64_t v24 = v15;
                        size_t v25 = v20;
                        BOOL v26 = acm_mem_alloc_data(v20);
                        acm_mem_alloc_info("<data>", v26, v25, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 734, "DeserializeProcessAcl");
                        if (v26)
                        {
                          int v27 = v26;
                          unsigned int v11 = v34;
                          if (v17 - v21 >= v25)
                          {
                            long long v36 = v27;
                            memcpy(v27, (const void *)(a1 + v21), v25);
                            v21 += v25;
                            unint64_t v40 = v21;
                            BOOL v15 = v24;
                            BOOL v14 = v23;
                            unint64_t v13 = v22;
                            unsigned int v12 = v33;
LABEL_20:
                            if (v17 - v21 < 4)
                            {
                              uint64_t v10 = 4294967293;
                            }
                            else
                            {
                              unint64_t v35 = v18;
                              int v28 = v19;
                              unint64_t v29 = v15;
                              int v30 = *(_DWORD *)(a1 + v21);
                              unint64_t v40 = v21 + 4;
                              uint64_t v10 = sub_10008BDF8(a1, v17, &v40, &v39, &v38);
                              if (!v10)
                              {
                                void *v11 = v28;
                                _DWORD *v12 = v35;
                                *unint64_t v13 = v36;
                                *BOOL v14 = v37;
                                *unint64_t v29 = v30;
                                *a9 = v39;
                                *a10 = v38;
                                return v10;
                              }
                              uint64_t v19 = v28;
                              unint64_t v18 = v35;
                            }
                            unsigned int v32 = v36;
                            goto LABEL_32;
                          }
                          uint64_t v10 = 4294967293;
                          unsigned int v32 = v27;
                        }
                        else
                        {
                          unsigned int v32 = 0;
                          uint64_t v10 = 4294967292;
                        }
                      }
LABEL_32:
                      acm_mem_free_info("<data>", v19, v18, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 763, "DeserializeProcessAcl");
                      acm_mem_free_data(v19, v18);
                      if (v32)
                      {
                        acm_mem_free_info("<data>", v32, v37, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 766, "DeserializeProcessAcl");
                        acm_mem_free_data(v32, v37);
                      }
                      goto LABEL_34;
                    }
                    uint64_t v10 = 4294967292;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_34:
  if (v39) {
    Util_SafeDeallocParameters(v39, v38);
  }
  return v10;
}

uint64_t GetSerializedRequirementSize(_DWORD *a1, uint64_t *a2)
{
  uint64_t v12 = 0;
  uint64_t result = 4294967293;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  int v5 = *a1;
  if (*a1 > 0x1Cu) {
    return result;
  }
  if (((1 << v5) & 0x1FFCFF4E) != 0)
  {
    uint64_t result = 0;
    *a2 = a1[3] + 16;
    return result;
  }
  if (((1 << v5) & 0x30) == 0)
  {
    if (v5 != 7) {
      return result;
    }
    *a2 = 24;
    uint64_t v9 = a1[5];
    if (v9)
    {
      uint64_t v10 = a1 + 6;
      uint64_t v11 = 24;
      do
      {
        uint64_t result = GetSerializedRequirementSize(*v10, &v12);
        if (result) {
          break;
        }
        v11 += v12;
        *a2 = v11;
        ++v10;
        --v9;
      }
      while (v9);
      return result;
    }
    return 0;
  }
  *a2 = 20;
  uint64_t v6 = a1[4];
  if (!v6) {
    return 0;
  }
  uint64_t v7 = a1 + 5;
  uint64_t v8 = 20;
  while (1)
  {
    uint64_t result = GetSerializedRequirementSize(*v7, &v12);
    if (result) {
      break;
    }
    v8 += v12;
    *a2 = v8;
    ++v7;
    if (!--v6) {
      return 0;
    }
  }
  return result;
}

uint64_t SerializeRequirement(_DWORD *a1, _OWORD *a2, uint64_t *a3)
{
  unint64_t v12 = 0;
  uint64_t result = 4294967293;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = GetSerializedRequirementSize(a1, (uint64_t *)&v12);
        if (!result)
        {
          if (v12 > *a3) {
            return 4294967293;
          }
          *a2 = *(_OWORD *)a1;
          int v7 = *a1;
          uint64_t result = 4294967293;
          if (*a1 <= 0x1Cu)
          {
            if (((1 << v7) & 0x1FFCFF4E) != 0)
            {
              memcpy(a2 + 1, a1 + 4, a1[3]);
              uint64_t v8 = a1[3] + 16;
LABEL_9:
              uint64_t result = 0;
              *a3 = v8;
              return result;
            }
            if (((1 << v7) & 0x30) != 0)
            {
              *((_DWORD *)a2 + 4) = a1[4];
              if (!a1[4])
              {
                uint64_t v8 = 20;
                goto LABEL_9;
              }
              uint64_t v9 = 0;
              uint64_t v8 = 20;
              while (1)
              {
                uint64_t v11 = *a3 - v8;
                uint64_t result = SerializeRequirement(*(void *)&a1[2 * v9 + 5], (char *)a2 + v8, &v11);
                if (result) {
                  break;
                }
                v8 += v11;
                if (++v9 >= (unint64_t)a1[4]) {
                  goto LABEL_9;
                }
              }
            }
            else if (v7 == 7)
            {
              *((void *)a2 + 2) = *((void *)a1 + 2);
              if (!a1[5])
              {
                uint64_t v8 = 24;
                goto LABEL_9;
              }
              uint64_t v10 = 0;
              uint64_t v8 = 24;
              while (1)
              {
                uint64_t v11 = *a3 - v8;
                uint64_t result = SerializeRequirement(*(void *)&a1[2 * v10 + 6], (char *)a2 + v8, &v11);
                if (result) {
                  break;
                }
                v8 += v11;
                if (++v10 >= (unint64_t)a1[5]) {
                  goto LABEL_9;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t DeserializeRequirement(unsigned int *a1, unint64_t a2, void **a3, size_t *a4)
{
  __int dst = 0;
  uint64_t v4 = 4294967293;
  if (a1)
  {
    if (a2 >= 0x10)
    {
      if (a3)
      {
        if (a4)
        {
          unsigned int v9 = *a1;
          if (v9 <= 0x1C)
          {
            if (((1 << v9) & 0x1FFCFF4E) != 0)
            {
              size_t v10 = a1[3] + 16;
              if (v10 > a2) {
                goto LABEL_36;
              }
              uint64_t v11 = Util_AllocRequirement(v9, 0, &__dst);
              if (!v11)
              {
                if (__dst)
                {
                  memcpy(__dst, a1, v10);
LABEL_11:
                  uint64_t v4 = 0;
                  *a4 = v10;
                  *a3 = __dst;
                  return v4;
                }
                return 4294967292;
              }
              goto LABEL_35;
            }
            if (((1 << v9) & 0x30) != 0)
            {
              uint64_t v13 = a1[4];
              if (8 * v13 + 20 > a2) {
                goto LABEL_36;
              }
              uint64_t v11 = Util_AllocRequirement(v9, v13, &__dst);
              if (v11) {
                goto LABEL_35;
              }
              BOOL v14 = __dst;
              if (!__dst) {
                return 4294967292;
              }
              if (*((_DWORD *)__dst + 3) == 84)
              {
                long long v15 = *(_OWORD *)a1;
                *((_DWORD *)__dst + 4) = a1[4];
                *BOOL v14 = v15;
                *((_DWORD *)__dst + 3) = 84;
                if (!a1[4])
                {
                  size_t v10 = 20;
                  goto LABEL_11;
                }
                uint64_t v16 = 0;
                size_t v10 = 20;
                while (1)
                {
                  uint64_t v21 = 0;
                  uint64_t v22 = 0;
                  uint64_t v11 = DeserializeRequirement((char *)a1 + v10, a2 - v10, &v22, &v21);
                  if (v11) {
                    goto LABEL_35;
                  }
                  *(void *)((char *)__dst + 8 * v16 + 20) = v22;
                  v10 += v21;
                  if (++v16 >= (unint64_t)a1[4]) {
                    goto LABEL_11;
                  }
                }
              }
              goto LABEL_39;
            }
            if (v9 == 7)
            {
              uint64_t v17 = a1[5];
              if (8 * v17 + 24 <= a2)
              {
                uint64_t v11 = Util_AllocRequirement(7, v17, &__dst);
                if (!v11)
                {
                  unint64_t v18 = __dst;
                  if (!__dst) {
                    return 4294967292;
                  }
                  if (*((_DWORD *)__dst + 3) != 88)
                  {
LABEL_39:
                    uint64_t v4 = 4294967291;
                    goto LABEL_36;
                  }
                  long long v19 = *(_OWORD *)a1;
                  *((void *)__dst + 2) = *((void *)a1 + 2);
                  _OWORD *v18 = v19;
                  *((_DWORD *)__dst + 3) = 88;
                  if (!a1[5])
                  {
                    size_t v10 = 24;
                    goto LABEL_11;
                  }
                  uint64_t v20 = 0;
                  size_t v10 = 24;
                  while (1)
                  {
                    uint64_t v21 = 0;
                    uint64_t v22 = 0;
                    uint64_t v11 = DeserializeRequirement((char *)a1 + v10, a2 - v10, &v22, &v21);
                    if (v11) {
                      break;
                    }
                    *((void *)__dst + v20 + 3) = v22;
                    v10 += v21;
                    if (++v20 >= (unint64_t)a1[5]) {
                      goto LABEL_11;
                    }
                  }
                }
LABEL_35:
                uint64_t v4 = v11;
              }
            }
          }
        }
      }
    }
  }
LABEL_36:
  if (__dst) {
    Util_DeallocRequirement((int *)__dst);
  }
  return v4;
}

uint64_t GetSerializedCredentialSize(_DWORD *a1, void *a2)
{
  uint64_t result = 4294967293;
  if (a1 && a2 && *a1 <= 0x17u && ((1 << *a1) & 0xFFF7FE) != 0)
  {
    uint64_t result = 0;
    *a2 = a1[7] + 32;
  }
  return result;
}

uint64_t SerializeCredential(unsigned int *__src, void *__dst, size_t *a3)
{
  uint64_t result = 4294967293;
  if (__src && __dst && a3)
  {
    unsigned int v6 = *__src;
    if (*__src <= 0x17 && ((1 << *__src) & 0xFFF7FE) != 0)
    {
      size_t v8 = __src[7] + 32;
      if (v8 <= *a3 && v6 <= 0x17 && ((1 << v6) & 0xFFF7FE) != 0)
      {
        memcpy(__dst, __src, v8);
        uint64_t result = 0;
        *a3 = __src[7] + 32;
      }
    }
  }
  return result;
}

uint64_t DeserializeCredential(unsigned int *a1, unint64_t a2, void **a3, void *a4)
{
  __int dst = 0;
  uint64_t v4 = 4294967293;
  if (a2 >= 0x20 && a1 && a3 && a4)
  {
    unsigned int v8 = *a1;
    uint64_t v10 = a1[7];
    switch(*a1)
    {
      case 1u:
        if (v10 == 28) {
          goto LABEL_7;
        }
        return v4;
      case 2u:
        if (v10 == 136) {
          goto LABEL_7;
        }
        return v4;
      case 3u:
        if (v10 == 305) {
          goto LABEL_7;
        }
        return v4;
      case 4u:
      case 5u:
      case 6u:
      case 8u:
      case 0xEu:
      case 0x10u:
      case 0x13u:
      case 0x16u:
      case 0x17u:
        if (!v10) {
          goto LABEL_7;
        }
        return v4;
      case 7u:
        if (v10 == 56) {
          goto LABEL_7;
        }
        return v4;
      case 9u:
        if (v10 == 24) {
          goto LABEL_7;
        }
        return v4;
      case 0xAu:
        if (v10 == 52) {
          goto LABEL_7;
        }
        return v4;
      case 0xCu:
      case 0xFu:
        if (v10 == 8) {
          goto LABEL_7;
        }
        return v4;
      case 0xDu:
      case 0x15u:
        if (v10 == 132) {
          goto LABEL_7;
        }
        return v4;
      case 0x11u:
        if (v10 == 81) {
          goto LABEL_7;
        }
        return v4;
      case 0x12u:
        if (v10 == 20) {
          goto LABEL_7;
        }
        return v4;
      case 0x14u:
        if (v10 != 32) {
          return v4;
        }
LABEL_7:
        uint64_t v4 = Util_AllocCredential(*a1, &__dst);
        if (v4)
        {
          if (__dst)
          {
LABEL_16:
            Util_DeallocCredential(__dst);
            return v4;
          }
        }
        else
        {
          if (__dst)
          {
            if (*((_DWORD *)__dst + 1) > 3u || *((_DWORD *)__dst + 2) > 0x50u)
            {
              uint64_t v4 = 4294967293;
            }
            else
            {
              uint64_t v4 = 4294967293;
              if (v8 <= 0x17 && ((1 << v8) & 0xFFF7FE) != 0 && v10 + 32 <= a2)
              {
                memcpy(__dst, a1, v10 + 32);
                uint64_t v4 = 0;
                *a3 = __dst;
                *a4 = v10 + 32;
                return v4;
              }
            }
            goto LABEL_16;
          }
          uint64_t v4 = 4294967292;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

uint64_t CopyCredential(uint64_t a1, void **a2)
{
  __int dst = 0;
  uint64_t v2 = 4294967293;
  if (a1 && a2)
  {
    uint64_t v2 = Util_AllocCredential(*(_DWORD *)a1, &__dst);
    if (v2)
    {
      if (__dst) {
        Util_DeallocCredential(__dst);
      }
    }
    else if (__dst)
    {
      memcpy(__dst, (const void *)a1, *(unsigned int *)(a1 + 28) + 32);
      uint64_t v2 = 0;
      *a2 = __dst;
    }
    else
    {
      return 4294967292;
    }
  }
  return v2;
}

uint64_t CompareCredentials(void *__s1, void *__s2, unsigned char *a3)
{
  uint64_t v3 = 4294967293;
  if (__s1)
  {
    uint64_t v4 = __s2;
    if (__s2)
    {
      if (a3)
      {
        unsigned int v6 = __s1;
        if (*(_DWORD *)__s1 == *(_DWORD *)__s2)
        {
          uint64_t v7 = *((unsigned int *)__s1 + 7);
          if (v7 == *((_DWORD *)__s2 + 7))
          {
            uint64_t v3 = 4294967293;
            switch(*(_DWORD *)__s1)
            {
              case 1:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3]) {
                  break;
                }
                uint64_t v13 = (char *)__s1 + 44;
                BOOL v14 = (char *)__s2 + 44;
                goto LABEL_74;
              case 2:
                if (*((_DWORD *)__s1 + 8) != *((_DWORD *)__s2 + 8)) {
                  break;
                }
                size_t v8 = *((unsigned int *)__s1 + 9);
                if (v8 != *((_DWORD *)__s2 + 9)) {
                  break;
                }
                __s2 += 5;
                __s1 += 5;
                goto LABEL_8;
              case 3:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3]) {
                  break;
                }
                uint64_t v13 = (char *)(__s1 + 13);
                BOOL v14 = (char *)(__s2 + 13);
                goto LABEL_74;
              case 4:
              case 5:
              case 6:
              case 8:
              case 0xC:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x16:
              case 0x17:
                size_t v8 = v7 + 32;
                goto LABEL_8;
              case 7:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3]) {
                  break;
                }
                BOOL v9 = sub_10008D68C((unint64_t)(__s1 + 4), 0x20uLL, (unint64_t)(__s2 + 4), 32);
                if (!v9) {
                  goto LABEL_100;
                }
                uint64_t v13 = (char *)(v6 + 8);
                BOOL v14 = (char *)(v4 + 8);
                size_t v21 = 24;
                uint64_t v22 = 24;
                goto LABEL_103;
              case 9:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3]) {
                  break;
                }
                uint64_t v13 = (char *)(__s1 + 5);
                BOOL v14 = (char *)(__s2 + 5);
                goto LABEL_74;
              case 0xA:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3]) {
                  break;
                }
                BOOL v9 = sub_10008D68C((unint64_t)__s1 + 36, 0x10uLL, (unint64_t)__s2 + 36, 16);
                if (!v9) {
                  goto LABEL_100;
                }
                uint64_t v13 = (char *)v6 + 52;
                BOOL v14 = (char *)v4 + 52;
LABEL_74:
                size_t v21 = 16;
                uint64_t v22 = 16;
                goto LABEL_103;
              case 0xD:
                size_t v8 = *((unsigned int *)__s1 + 8);
                if (v8 != *((_DWORD *)__s2 + 8)) {
                  break;
                }
                __s2 = (void *)((char *)__s2 + 36);
                __s1 = (void *)((char *)__s1 + 36);
LABEL_8:
                LOBYTE(v9) = memcmp(__s1, __s2, v8) == 0;
                goto LABEL_100;
              case 0x14:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3]) {
                  break;
                }
                BOOL v14 = (char *)(__s2 + 4);
                uint64_t v13 = (char *)(__s1 + 4);
                size_t v21 = 32;
                uint64_t v22 = 32;
                goto LABEL_103;
              case 0x15:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3]) {
                  break;
                }
                uint64_t v13 = (char *)__s1 + 36;
                BOOL v14 = (char *)__s2 + 36;
                size_t v21 = 128;
                uint64_t v22 = 128;
LABEL_103:
                LOBYTE(v9) = sub_10008D68C((unint64_t)v13, v21, (unint64_t)v14, v22);
                goto LABEL_100;
              default:
                return v3;
            }
          }
        }
        LOBYTE(v9) = 0;
LABEL_100:
        uint64_t v3 = 0;
        *a3 = v9;
      }
    }
  }
  return v3;
}

BOOL sub_10008D68C(unint64_t __s1, size_t __n, unint64_t __s2, uint64_t a4)
{
  if (__n != a4) {
    return 0;
  }
  if (!(__s1 | __s2)) {
    return 1;
  }
  BOOL result = 0;
  BOOL v6 = __s1 == 0;
  if (__s2)
  {
    BOOL v7 = 1;
  }
  else
  {
    BOOL v6 = 0;
    BOOL v7 = __s1 == 0;
  }
  if (v7 && !v6) {
    return memcmp((const void *)__s1, (const void *)__s2, __n) == 0;
  }
  return result;
}

uint64_t GetSerializedAddCredentialSize(uint64_t a1, _DWORD *a2, int a3, void *a4)
{
  if (a1) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = a3 == 2;
  }
  char v5 = !v4;
  uint64_t result = 4294967293;
  if (a4 && a2 && (v5 & 1) == 0 && *a2 <= 0x17u && ((1 << *a2) & 0xFFF7FE) != 0)
  {
    uint64_t result = 0;
    *a4 = a2[7] + 52;
  }
  return result;
}

uint64_t SerializeAddCredential(_OWORD *a1, unsigned int *__src, int a3, uint64_t a4, void *a5)
{
  if (a1) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a3 == 2;
  }
  char v7 = !v6;
  uint64_t result = 4294967293;
  if (a5)
  {
    if (a4)
    {
      if (__src)
      {
        if ((v7 & 1) == 0)
        {
          uint64_t result = 4294967293;
          if (*__src <= 0x17 && ((1 << *__src) & 0xFFF7FE) != 0 && *a5 >= (unint64_t)__src[7] + 52)
          {
            if (a1)
            {
              *(_OWORD *)a4 = *a1;
            }
            else
            {
              *(void *)a4 = 0;
              *(void *)(a4 + 8) = 0;
            }
            uint64_t v13 = *a5 - 16;
            uint64_t result = SerializeCredential(__src, (void *)(a4 + 16), (size_t *)&v13);
            if (!result)
            {
              size_t v12 = v13;
              *(_DWORD *)(v13 + a4 + 16) = a3;
              *a5 = v12 + 20;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t DeserializeAddCredential(uint64_t a1, unint64_t a2, _OWORD *a3, void *a4, _DWORD *a5)
{
  size_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v5 = 4294967293;
  if (a1 && a2 >= 0x34 && a3 && a4 && a5)
  {
    *a3 = *(_OWORD *)a1;
    uint64_t v10 = DeserializeCredential((unsigned int *)(a1 + 16), a2 - 16, (void **)&v12, &v13);
    if (v10)
    {
      uint64_t v5 = v10;
    }
    else if (a2 - (v13 + 16) >= 4)
    {
      uint64_t v5 = 0;
      *a5 = *(_DWORD *)(a1 + v13 + 16);
      *a4 = v12;
      return v5;
    }
  }
  if (v12) {
    Util_DeallocCredential(v12);
  }
  return v5;
}

uint64_t DeserializeAddCredentialType(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result = 4294967293;
  if (a2 >= 0x34 && a1)
  {
    if (a3)
    {
      uint64_t result = 0;
      *a3 = *(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t GetSerializedRemoveCredentialSize(uint64_t a1, _DWORD *a2, int a3, void *a4)
{
  if (a1) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = a3 == 2;
  }
  char v5 = !v4;
  uint64_t result = 4294967293;
  if (a4 && a2 && (v5 & 1) == 0 && *a2 <= 0x17u && ((1 << *a2) & 0xFFF7FE) != 0)
  {
    uint64_t result = 0;
    *a4 = a2[7] + 52;
  }
  return result;
}

uint64_t GetSerializedReplacePassphraseCredentialSize(uint64_t a1, _DWORD *a2, int a3, void *a4)
{
  if (a1) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = a3 == 2;
  }
  char v5 = !v4;
  uint64_t result = 4294967293;
  if (a4 && a2 && (v5 & 1) == 0 && *a2 <= 0x17u && ((1 << *a2) & 0xFFF7FE) != 0)
  {
    uint64_t result = 0;
    *a4 = a2[7] + 52;
  }
  return result;
}

uint64_t SerializeCredentialList(unsigned int **a1, unsigned int a2, unsigned int *a3, void *a4)
{
  if (a2) {
    BOOL v6 = a1 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6 || a3 == 0 || a4 == 0) {
    return 4294967293;
  }
  v16[7] = v4;
  v16[8] = v5;
  *a3 = a2;
  if (a2)
  {
    uint64_t v11 = a1;
    uint64_t v12 = a2;
    uint64_t v13 = 4;
    while (1)
    {
      BOOL v14 = *v11;
      if (!*v11) {
        return 4294967293;
      }
      v16[0] = *a4 - v13;
      uint64_t result = SerializeCredential(v14, (char *)a3 + v13, v16);
      if (result) {
        return result;
      }
      v13 += v16[0];
      ++v11;
      if (!--v12) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    uint64_t v13 = 4;
LABEL_18:
    uint64_t result = 0;
    *a4 = v13;
  }
  return result;
}

uint64_t DeserializeCredentialList(unsigned int *a1, uint64_t a2, void *a3, _DWORD *a4)
{
  uint64_t v15 = 0;
  uint64_t v4 = 4294967293;
  if (a1)
  {
    if (a3)
    {
      if (a4)
      {
        uint64_t v8 = *a1;
        if (v8 <= 0x3E8)
        {
          if (v8)
          {
            uint64_t v10 = (char *)acm_mem_alloc(8 * v8);
            acm_mem_alloc_info("array of ACMCredentialRef", v10, 8 * v8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 1778, "DeserializeCredentialList");
            if (v10)
            {
              uint64_t v11 = 0;
              uint64_t v12 = 4;
              while (1)
              {
                uint64_t v13 = DeserializeCredential((unsigned int *)((char *)a1 + v12), a2 - v12, (void **)&v10[v11], &v15);
                if (v13) {
                  break;
                }
                v12 += v15;
                v11 += 8;
                if (8 * v8 == v11) {
                  goto LABEL_12;
                }
              }
              uint64_t v4 = v13;
              DeallocCredentialList((_DWORD **)v10, v8);
            }
            else
            {
              return 4294967292;
            }
          }
          else
          {
            uint64_t v10 = 0;
LABEL_12:
            uint64_t v4 = 0;
            *a4 = v8;
            *a3 = v10;
          }
        }
      }
    }
  }
  return v4;
}

void DeallocCredentialList(_DWORD **a1, unsigned int a2)
{
  if (a1)
  {
    uint64_t v3 = a2;
    if (a2)
    {
      uint64_t v4 = a1;
      uint64_t v5 = a2;
      do
      {
        if (*v4)
        {
          Util_DeallocCredential(*v4);
          void *v4 = 0;
        }
        ++v4;
        --v5;
      }
      while (v5);
    }
    unint64_t v6 = 8 * v3;
    acm_mem_free_info("array of ACMCredentialRef", a1, v6, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 1816, "DeallocCredentialList");
    acm_mem_free(a1, v6);
  }
}

uint64_t GetSerializedGetContextPropertySize(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3) {
    return 4294967293;
  }
  uint64_t result = 0;
  *a3 = 20;
  return result;
}

__n128 SerializeGetContextProperty(__n128 *a1, unsigned __int32 a2, __n128 *a3, void *a4)
{
  if (a1 && a3 && a4 && *a4 >= 0x14uLL)
  {
    __n128 result = *a1;
    *a3 = *a1;
    a3[1].n128_u32[0] = a2;
    *a4 = 20;
  }
  return result;
}

uint64_t DeserializeGetContextProperty(uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4)
{
  uint64_t result = 4294967293;
  if (a2 >= 0x10 && a1 && a3 && a4)
  {
    *a3 = *(_OWORD *)a1;
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != 0x10)
    {
      uint64_t result = 0;
      *a4 = *(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t LibSer_GetAclAuthMethod_GetSize(uint64_t a1, void *a2)
{
  if (!a2) {
    return 4294967293;
  }
  uint64_t result = 0;
  *a2 = 16;
  return result;
}

__n128 LibSer_GetAclAuthMethod_Serialize(__n128 *a1, __n128 *a2, void *a3)
{
  if (a1 && a2 && a3 && *a3 >= 0x10uLL)
  {
    __n128 result = *a1;
    *a2 = *a1;
    *a3 = 16;
  }
  return result;
}

__n128 LibSer_GetAclAuthMethod_Deserialize(__n128 *a1, unint64_t a2, __n128 *a3)
{
  if (a2 >= 0x10 && a1)
  {
    if (a3)
    {
      __n128 result = *a1;
      *a3 = *a1;
    }
  }
  return result;
}

uint64_t LibSer_ContextCredentialGetProperty_GetSize(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a4) {
    return 4294967293;
  }
  uint64_t result = 0;
  *a4 = 24;
  return result;
}

__n128 LibSer_ContextCredentialGetProperty_Serialize(__n128 *a1, unsigned __int32 a2, unsigned __int32 a3, __n128 *a4, void *a5)
{
  if (a1 && a4 && a5 && *a5 >= 0x18uLL)
  {
    __n128 result = *a1;
    *a4 = *a1;
    a4[1].n128_u32[0] = a2;
    a4[1].n128_u32[1] = a3;
    *a5 = 24;
  }
  return result;
}

__n128 LibSer_ContextCredentialGetProperty_Deserialize(__n128 *a1, unint64_t a2, __n128 *a3, _DWORD *a4, _DWORD *a5)
{
  if (a2 >= 0x18 && a1 && a3 && a4)
  {
    if (a5)
    {
      __n128 result = *a1;
      *a3 = *a1;
      *a4 = a1[1].n128_u32[0];
      *a5 = a1[1].n128_u32[1];
    }
  }
  return result;
}

uint64_t LibSer_GlobalContextCredentialGetProperty_GetSize(void *a1)
{
  if (!a1) {
    return 4294967293;
  }
  uint64_t result = 0;
  *a1 = 8;
  return result;
}

uint64_t LibSer_GlobalContextCredentialGetProperty_Serialize(int a1, int a2, _DWORD *a3, void *a4)
{
  uint64_t result = 4294967293;
  if (a3 && a4 && *a4 >= 8uLL)
  {
    uint64_t result = 0;
    *a3 = a1;
    a3[1] = a2;
    *a4 = 8;
  }
  return result;
}

uint64_t LibSer_GlobalContextCredentialGetProperty_Deserialize(_DWORD *a1, unint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result = 4294967293;
  if (a2 >= 8 && a1 && a3)
  {
    if (a4)
    {
      uint64_t result = 0;
      *a3 = *a1;
      *a4 = a1[1];
    }
  }
  return result;
}

uint64_t LibSer_RemoveCredentialByType_GetSize(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a4) {
    return 4294967293;
  }
  uint64_t result = 0;
  *a4 = 24;
  return result;
}

__n128 LibSer_RemoveCredentialByType_Serialize(__n128 *a1, unsigned __int32 a2, unsigned __int32 a3, __n128 *a4, void *a5)
{
  if (a1 && a4 && a5 && *a5 >= 0x18uLL)
  {
    __n128 result = *a1;
    *a4 = *a1;
    a4[1].n128_u32[0] = a2;
    a4[1].n128_u32[1] = a3;
    *a5 = 24;
  }
  return result;
}

__n128 LibSer_RemoveCredentialByType_Deserialize(__n128 *a1, unint64_t a2, __n128 *a3, _DWORD *a4, _DWORD *a5)
{
  if (a2 >= 0x18 && a1 && a3 && a4)
  {
    if (a5)
    {
      __n128 result = *a1;
      *a3 = *a1;
      *a4 = a1[1].n128_u32[0];
      *a5 = a1[1].n128_u32[1];
    }
  }
  return result;
}

uint64_t LibSer_DeleteContext_GetSize(uint64_t a1, void *a2)
{
  if (!a2) {
    return 4294967293;
  }
  uint64_t result = 0;
  *a2 = 16;
  return result;
}

__n128 LibSer_DeleteContext_Serialize(__n128 *a1, __n128 *a2, void *a3)
{
  if (a1 && a2 && a3 && *a3 >= 0x10uLL)
  {
    __n128 result = *a1;
    *a2 = *a1;
    *a3 = 16;
  }
  return result;
}

__n128 LibSer_DeleteContext_Deserialize(__n128 *a1, unint64_t a2, __n128 *a3)
{
  if (a2 >= 0x10 && a1)
  {
    if (a3)
    {
      __n128 result = *a1;
      *a3 = *a1;
    }
  }
  return result;
}

uint64_t LibSer_StorageAnyCmd_DeserializeCommonFields(uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4)
{
  uint64_t result = 4294967293;
  if (a1 && a2 >= 0x14)
  {
    if (a3) {
      *a3 = *(_OWORD *)a1;
    }
    uint64_t result = 0;
    if (a4) {
      *a4 = *(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t LibSer_StorageSetData_GetSize(uint64_t a1, _DWORD *a2, unsigned int a3, void *a4)
{
  unsigned int v7 = 0;
  if (!a4) {
    return 4294967291;
  }
  uint64_t result = sub_10008B888(a2, a3, &v7);
  if (!result) {
    *a4 = a1 + v7 + 28;
  }
  return result;
}

uint64_t LibSer_StorageSetData_Serialize(_OWORD *a1, int a2, const void *a3, size_t a4, _DWORD *a5, unsigned int a6, uint64_t a7, size_t *a8)
{
  uint64_t result = 4294967293;
  if (a1)
  {
    if (a2)
    {
      if (a7)
      {
        if (a8)
        {
          unsigned int v18 = 0;
          uint64_t result = sub_10008B888(a5, a6, &v18);
          if (!result)
          {
            if (*a8 < a4 + v18 + 28)
            {
              return 4294967293;
            }
            else
            {
              *(_OWORD *)a7 = *a1;
              *(_DWORD *)(a7 + 16) = a2;
              *(_DWORD *)(a7 + 20) = a4;
              memcpy((void *)(a7 + 24), a3, a4);
              size_t v17 = a4 + 24;
              uint64_t result = sub_10008BAB8((uint64_t)a5, a6, a7, (uint64_t *)&v17);
              if (!result) {
                *a8 = v17;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t LibSer_StorageSetData_Deserialize(uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4, void *a5, void *a6, void *a7, _DWORD *a8)
{
  uint64_t v10 = 4294967293;
  if (a1 && a2 >= 0x18 && a6 && a3 && a4 && a5 && a7 && a8)
  {
    v14[1] = v8;
    v14[2] = v9;
    *a3 = *(_OWORD *)a1;
    *a4 = *(_DWORD *)(a1 + 16);
    uint64_t v11 = *(unsigned int *)(a1 + 20);
    v14[0] = 24;
    *a6 = v11;
    if (v11)
    {
      unint64_t v12 = v11 + 24;
      if (v12 > a2) {
        return 4294967293;
      }
      *a5 = a1 + 24;
      v14[0] = v12;
    }
    else
    {
      *a5 = 0;
    }
    return sub_10008BDF8(a1, a2, v14, a7, a8);
  }
  return v10;
}

uint64_t LibSer_StorageGetData_GetSize(_DWORD *a1, unsigned int a2, void *a3)
{
  unsigned int v5 = 0;
  if (!a3) {
    return 4294967291;
  }
  uint64_t result = sub_10008B888(a1, a2, &v5);
  if (!result) {
    *a3 = v5 + 25;
  }
  return result;
}

uint64_t LibSer_StorageGetData_Serialize(_OWORD *a1, int a2, char a3, _DWORD *a4, unsigned int a5, uint64_t a6, void *a7)
{
  uint64_t result = 4294967293;
  if (a1)
  {
    if (a2)
    {
      if (a6)
      {
        if (a7)
        {
          unsigned int v16 = 0;
          uint64_t result = sub_10008B888(a4, a5, &v16);
          if (!result)
          {
            if (*a7 < (unint64_t)v16 + 25)
            {
              return 4294967293;
            }
            else
            {
              *(_OWORD *)a6 = *a1;
              *(_DWORD *)(a6 + 16) = a2;
              *(unsigned char *)(a6 + 20) = a3;
              uint64_t v15 = 21;
              uint64_t result = sub_10008BAB8((uint64_t)a4, a5, a6, &v15);
              if (!result) {
                *a7 = v15;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t LibSer_StorageGetData_Deserialize(uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4, BOOL *a5, void *a6, _DWORD *a7)
{
  uint64_t v9 = 4294967293;
  if (a1 && a2 >= 0x15 && a3 && a4 && a5)
  {
    v11[1] = v7;
    _OWORD v11[2] = v8;
    *a3 = *(_OWORD *)a1;
    *a4 = *(_DWORD *)(a1 + 16);
    *a5 = *(unsigned char *)(a1 + 20) != 0;
    v11[0] = 21;
    return sub_10008BDF8(a1, a2, v11, a6, a7);
  }
  return v9;
}

uint64_t LibSer_GetUnlockSecret_GetSize(_DWORD *a1, unsigned int a2, void *a3)
{
  unsigned int v5 = 0;
  if (!a3) {
    return 4294967291;
  }
  uint64_t result = sub_10008B888(a1, a2, &v5);
  if (!result) {
    *a3 = v5 + 20;
  }
  return result;
}

uint64_t LibSer_GetUnlockSecret_Serialize(_OWORD *a1, _DWORD *a2, unsigned int a3, _OWORD *a4, void *a5)
{
  uint64_t result = 4294967293;
  if (a1)
  {
    if (a4)
    {
      if (a5)
      {
        unsigned int v12 = 0;
        uint64_t result = sub_10008B888(a2, a3, &v12);
        if (!result)
        {
          if (*a5 < (unint64_t)v12 + 20)
          {
            return 4294967293;
          }
          else
          {
            *a4 = *a1;
            uint64_t v11 = 16;
            uint64_t result = sub_10008BAB8((uint64_t)a2, a3, (uint64_t)a4, &v11);
            if (!result) {
              *a5 = v11;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t LibSer_GetUnlockSecret_Deserialize(_OWORD *a1, unint64_t a2, _OWORD *a3, void *a4, _DWORD *a5)
{
  if (!a1) {
    return 4294967293;
  }
  uint64_t result = 4294967293;
  if (a2 >= 0x10 && a3 && a4)
  {
    if (a5)
    {
      v9[1] = v5;
      v9[2] = v6;
      *a3 = *a1;
      v9[0] = 16;
      return sub_10008BDF8((uint64_t)a1, a2, v9, a4, a5);
    }
  }
  return result;
}

uint64_t LibSer_GetUnlockSecretResponse_GetSize(uint64_t a1, void *a2)
{
  if (!a2) {
    return 4294967291;
  }
  uint64_t result = 0;
  *a2 = a1 + 1;
  return result;
}

uint64_t LibSer_GetUnlockSecretResponse_Serialize(void *__src, size_t __n, char a3, unsigned char *a4, void *a5)
{
  uint64_t result = 4294967293;
  if (__src && __n && a4 && a5)
  {
    size_t v9 = __n + 1;
    if (*a5 < __n + 1)
    {
      return 4294967293;
    }
    else
    {
      *a4 = a3;
      memcpy(a4 + 1, __src, __n);
      uint64_t result = 0;
      *a5 = v9;
    }
  }
  return result;
}

uint64_t LibSer_GetUnlockSecretResponse_Deserialize(unsigned char *a1, uint64_t a2, void *a3, void *a4, unsigned char *a5)
{
  uint64_t result = 4294967293;
  if (a2 && a5 && a1 && a3)
  {
    if (a4)
    {
      uint64_t result = 0;
      *a5 = *a1;
      *a3 = a1 + 1;
      *a4 = a2 - 1;
    }
  }
  return result;
}

uint64_t LibSer_SEPControl_GetSize(uint64_t a1, _DWORD *a2, unsigned int a3, void *a4)
{
  unsigned int v7 = 0;
  if (!a4) {
    return 4294967291;
  }
  uint64_t result = sub_10008B888(a2, a3, &v7);
  if (!result) {
    *a4 = a1 + v7 + 24;
  }
  return result;
}

uint64_t LibSer_SEPControl_Serialize(_OWORD *a1, _DWORD *a2, unsigned int a3, const void *a4, size_t a5, uint64_t a6, void *a7)
{
  uint64_t result = 4294967293;
  if (a6)
  {
    if (a7)
    {
      unsigned int v18 = 0;
      uint64_t result = sub_10008B888(a2, a3, &v18);
      if (!result)
      {
        if (*a7 < a5 + v18 + 24)
        {
          return 4294967293;
        }
        else
        {
          if (a1)
          {
            *(_OWORD *)a6 = *a1;
          }
          else
          {
            *(void *)a6 = 0;
            *(void *)(a6 + 8) = 0;
          }
          uint64_t v17 = 16;
          uint64_t result = sub_10008BAB8((uint64_t)a2, a3, a6, &v17);
          if (!result)
          {
            uint64_t v15 = v17;
            *(_DWORD *)(a6 + v17) = a5;
            uint64_t v16 = v15 + 4;
            memcpy((void *)(a6 + v15 + 4), a4, a5);
            uint64_t result = 0;
            *a7 = v16 + a5;
          }
        }
      }
    }
  }
  return result;
}

uint64_t LibSer_SEPControl_Deserialize(_OWORD *a1, unint64_t a2, _OWORD *a3, void *a4, _DWORD *a5, unint64_t *a6, void *a7)
{
  if (!a1) {
    return 4294967293;
  }
  uint64_t result = 4294967293;
  if (a2 >= 0x18 && a7 && a3 && a4 && a5 && a6)
  {
    *a3 = *a1;
    unint64_t v12 = 16;
    uint64_t result = sub_10008BDF8((uint64_t)a1, a2, &v12, a4, a5);
    if (!result)
    {
      unint64_t v11 = (unint64_t)a1 + v12 + 4;
      *a7 = *(unsigned int *)((char *)a1 + v12);
      *a6 = v11;
    }
  }
  return result;
}

uint64_t LibSer_SEPControlResponse_GetSize(uint64_t a1, void *a2)
{
  if (!a2) {
    return 4294967291;
  }
  uint64_t result = 0;
  *a2 = a1 + 4;
  return result;
}

uint64_t LibSer_SEPControlResponse_Serialize(void *__src, size_t __n, _DWORD *a3, uint64_t *a4)
{
  uint64_t result = 4294967293;
  if (a3 && a4)
  {
    uint64_t v8 = __n + 4;
    if (*a4 < __n + 4)
    {
      return 4294967293;
    }
    else
    {
      *a3 = __n;
      if (__src) {
        memcpy(a3 + 1, __src, __n);
      }
      else {
        uint64_t v8 = 4;
      }
      uint64_t result = 0;
      *a4 = v8;
    }
  }
  return result;
}

uint64_t LibSer_SEPControlResponse_Deserialize(unsigned int *a1, unint64_t a2, void *a3, void *a4)
{
  if (!a1) {
    return 4294967293;
  }
  uint64_t result = 4294967293;
  if (a2 >= 4 && a3 && a4)
  {
    uint64_t result = 0;
    unsigned int v7 = *a1;
    unint64_t v6 = a1 + 1;
    *a4 = v7;
    if (!v7) {
      unint64_t v6 = 0;
    }
    *a3 = v6;
  }
  return result;
}

uint64_t sub_10008E86C(_DWORD *a1)
{
  if (!a1) {
    return 4294967293;
  }
  switch(*a1)
  {
    case 0:
    case 0xC:
      if (a1[4]) {
        return 4294967293;
      }
      break;
    case 1:
    case 4:
    case 5:
    case 0xA:
      if (a1[4] != 4) {
        return 4294967293;
      }
      break;
    case 2:
    case 6:
    case 7:
      if (a1[4] != 16) {
        return 4294967293;
      }
      break;
    case 3:
      if ((a1[4] - 1001) < 0xFFFFFC18) {
        return 4294967293;
      }
      break;
    case 8:
    case 9:
      if (a1[4] != 1) {
        return 4294967293;
      }
      break;
    case 0xB:
      if (a1[4] > 0x400u) {
        return 4294967293;
      }
      break;
    default:
      return 4294967293;
  }
  return 0;
}

uint64_t LibCall_ACMKernelControl_Block(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  size_t v5 = v4;
  unsigned int v7 = v6;
  int v9 = v8;
  uint64_t v11 = v10;
  unint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t))v1;
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernelControl_Block");
  }
  uint64_t v17 = 0x2000;
  uint64_t v13 = LibCall_ACMKernelControl(v12, v11, v9, v7, v5, (uint64_t)v18, (uint64_t)&v17);
  if (v3)
  {
    if (v17) {
      BOOL v14 = v18;
    }
    else {
      BOOL v14 = 0;
    }
    (*(void (**)(uint64_t, unsigned char *))(v3 + 16))(v3, v14);
  }
  if (v13) {
    unsigned int v15 = 70;
  }
  else {
    unsigned int v15 = 10;
  }
  if (v15 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernelControl_Block", (int)v13);
  }
  return v13;
}

uint64_t LibCall_ACMSEPControl_Block(uint64_t (*a1)(uint64_t, uint64_t, void, char *, uint64_t, unsigned int *, unint64_t *), uint64_t a2, const void *a3, size_t a4, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSEPControl_Block");
  }
  size_t v20 = 1024;
  uint64_t v16 = LibCall_ACMSEPControl(a1, a2, a3, a4, a5, a6, a7, v21, &v20);
  if (a8)
  {
    if (v20) {
      uint64_t v17 = v21;
    }
    else {
      uint64_t v17 = 0;
    }
    (*(void (**)(uint64_t, unsigned char *))(a8 + 16))(a8, v17);
  }
  if (v16) {
    unsigned int v18 = 70;
  }
  else {
    unsigned int v18 = 10;
  }
  if (v18 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSEPControl_Block", (int)v16);
  }
  return v16;
}

uint64_t LibCall_ACMGlobalContextCredentialGetProperty_Block(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5)
{
  int v9 = (uint64_t (*)(uint64_t, uint64_t, void, int *, uint64_t, unsigned char *, uint64_t *))result;
  if (gACMLoggingLevel <= 0xAu) {
    uint64_t result = printf("%s: %s: called.\n", "ACM", "LibCall_ACMGlobalContextCredentialGetProperty_Block");
  }
  uint64_t v14 = 256;
  if (v9)
  {
    uint64_t v13 = 8;
    uint64_t result = LibSer_GlobalContextCredentialGetProperty_Serialize(a3, a4, &v15, &v13);
    if (result)
    {
LABEL_7:
      uint64_t v10 = result;
      goto LABEL_8;
    }
    if (v13 == 8)
    {
      uint64_t result = v9(a2, 27, 0, &v15, 8, v16, &v14);
      goto LABEL_7;
    }
    uint64_t v10 = 4294967291;
  }
  else
  {
    uint64_t v10 = 4294967293;
  }
LABEL_8:
  if (a5)
  {
    if (v14) {
      uint64_t v11 = v16;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(a5 + 16))(a5, v10, v11);
  }
  if (v10) {
    unsigned int v12 = 70;
  }
  else {
    unsigned int v12 = 10;
  }
  if (v12 >= gACMLoggingLevel) {
    return printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMGlobalContextCredentialGetProperty_Block", (int)v10);
  }
  return result;
}

uint64_t LibCall_ACMContextVerifyPolicy_Block(uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *a4, uint64_t a5)
{
  return LibCall_ACMContextVerifyPolicyWithPreflight_Block(a1, a2, a3, a4, 0, a5);
}

uint64_t LibCall_ACMContextVerifyPolicyWithPreflight_Block(uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, uint64_t a6)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyWithPreflight_Block");
  }
  uint64_t v17 = 0;
  BOOL v16 = 0;
  unsigned int v12 = 70;
  uint64_t v13 = 4294967293;
  if (a3 && __s1 && a6)
  {
    uint64_t v13 = LibCall_ACMContextVerifyPolicyEx(a1, a2, a3, __s1, a5, 0, 0, 0, &v16, &v17);
    uint64_t v14 = v17;
    if (!v13)
    {
      (*(void (**)(uint64_t, BOOL, int *))(a6 + 16))(a6, v16, v17);
      uint64_t v14 = v17;
    }
    if (v14) {
      Util_DeallocRequirement(v14);
    }
    if (v13) {
      unsigned int v12 = 70;
    }
    else {
      unsigned int v12 = 10;
    }
  }
  if (v12 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextVerifyPolicyWithPreflight_Block", (int)v13);
  }
  return v13;
}

int *LibCall_ACMContextVerifyPolicyEx_Block(uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx_Block");
  }
  BOOL v17 = 0;
  unsigned int v18 = 0;
  uint64_t v22 = 0;
  BOOL v21 = 0;
  uint64_t v19 = 4294967293;
  if (a3 && __s1 && a9)
  {
    uint64_t v19 = LibCall_ACMContextVerifyPolicyEx(a1, a2, a3, __s1, a5, a6, a7, a8, &v21, &v22);
    unsigned int v18 = v22;
    BOOL v17 = v21;
  }
  (*(void (**)(uint64_t, uint64_t, BOOL, int *))(a9 + 16))(a9, v19, v17, v18);
  uint64_t result = v22;
  if (v22) {
    uint64_t result = (int *)Util_DeallocRequirement(v22);
  }
  if (gACMLoggingLevel <= 0xAu) {
    return (int *)printf("%s: %s: returning.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx_Block");
  }
  return result;
}

uint64_t LibCall_ACMGlobalContextVerifyPolicy_Block(uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, char *a3, uint64_t a4, _DWORD *a5, unsigned int a6, uint64_t a7)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMGlobalContextVerifyPolicy_Block");
  }
  *(void *)int v15 = 0;
  uint64_t result = LibCall_ACMContextCreate((uint64_t (*)(uint64_t, uint64_t, void, void, void, unsigned char *, uint64_t *))a1, a2, v15, 0, 1);
  if (result)
  {
    if (a7) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(a7 + 16))(a7, result, 0, 0);
    }
  }
  else
  {
    uint64_t result = (uint64_t)LibCall_ACMContextVerifyPolicyEx_Block(a1, a2, *(_OWORD **)v15, a3, a4, a5, a6, 0xFFFFFFFFLL, a7);
  }
  if (*(void *)v15) {
    uint64_t result = LibCall_ACMContextDelete((void (*)(uint64_t, uint64_t, void, void *, uint64_t, void, void))a1, a2, *(void **)v15, 1);
  }
  if (gACMLoggingLevel <= 0xAu) {
    return printf("%s: %s: returning.\n", "ACM", "LibCall_ACMGlobalContextVerifyPolicy_Block");
  }
  return result;
}

uint64_t LibCall_ACMGetEnvironmentVariable_Block(uint64_t (*a1)(uint64_t, uint64_t, void, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, int a3, uint64_t a4)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMGetEnvironmentVariable_Block");
  }
  uint64_t v14 = 128;
  if (!a4)
  {
    unsigned int v12 = 70;
    uint64_t v9 = 4294967293;
    goto LABEL_17;
  }
  if (a3 == 36)
  {
    int v8 = acm_mem_alloc_data(0x800uLL);
    acm_mem_alloc_info("<data>", v8, 2048, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCallBlock.c", 162, "LibCall_ACMGetEnvironmentVariable_Block");
    if (!v8)
    {
      unsigned int v12 = 70;
      uint64_t v9 = 4294967292;
      goto LABEL_17;
    }
    uint64_t v14 = 2048;
    uint64_t v9 = LibCall_ACMGetEnvironmentVariable(a1, a2, 36, (uint64_t)v8, (uint64_t)&v14);
    if (!v9)
    {
      if (v14) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = 0;
      }
      (*(void (**)(uint64_t, void *))(a4 + 16))(a4, v10);
      acm_mem_free_info("<data>", v8, 0x800uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCallBlock.c", 176, "LibCall_ACMGetEnvironmentVariable_Block");
      acm_mem_free_data(v8, 0x800uLL);
LABEL_16:
      unsigned int v12 = 10;
      goto LABEL_17;
    }
    acm_mem_free_info("<data>", v8, 0x800uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCallBlock.c", 176, "LibCall_ACMGetEnvironmentVariable_Block");
    acm_mem_free_data(v8, 0x800uLL);
  }
  else
  {
    uint64_t v9 = LibCall_ACMGetEnvironmentVariable(a1, a2, a3, (uint64_t)v15, (uint64_t)&v14);
    if (!v9)
    {
      if (v14) {
        uint64_t v11 = v15;
      }
      else {
        uint64_t v11 = 0;
      }
      (*(void (**)(uint64_t, unsigned char *))(a4 + 16))(a4, v11);
      goto LABEL_16;
    }
  }
  unsigned int v12 = 70;
LABEL_17:
  if (v12 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMGetEnvironmentVariable_Block", (int)v9);
  }
  return v9;
}

uint64_t LibCall_ACMTRMLoadState_Block()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  size_t v5 = (uint64_t (*)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t))v0;
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMTRMLoadState_Block");
  }
  uint64_t v10 = 0x2000;
  if (v2)
  {
    uint64_t v6 = LibCall_ACMTRMLoadState(v5, v4, (uint64_t)v11, (uint64_t)&v10);
    if (v6)
    {
      unsigned int v8 = 70;
    }
    else
    {
      if (v10) {
        unsigned int v7 = v11;
      }
      else {
        unsigned int v7 = 0;
      }
      (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v7);
      unsigned int v8 = 10;
    }
  }
  else
  {
    unsigned int v8 = 70;
    uint64_t v6 = 4294967293;
  }
  if (v8 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMTRMLoadState_Block", (int)v6);
  }
  return v6;
}

uint64_t LibCall_ACMContextUnloadToImage_Block()
{
  __chkstk_darwin();
  uint64_t v1 = v0;
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextUnloadToImage_Block");
  }
  if (v1)
  {
    uint64_t v2 = LibCall_ACMContextUnloadToImage();
    if (v2)
    {
      unsigned int v3 = 70;
    }
    else
    {
      (*(void (**)(uint64_t, unsigned char *))(v1 + 16))(v1, v5);
      unsigned int v3 = 10;
    }
  }
  else
  {
    unsigned int v3 = 70;
    uint64_t v2 = 4294967293;
  }
  if (v3 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextUnloadToImage_Block", (int)v2);
  }
  return v2;
}

uint64_t LibCall_ACMGetAclAuthMethod_Block(uint64_t result, uint64_t a2, __n128 *a3, uint64_t a4)
{
  unsigned int v7 = (void (*)(uint64_t, uint64_t, void, __n128 *, uint64_t, unsigned char *, uint64_t *, __n128))result;
  if (gACMLoggingLevel <= 0xAu) {
    uint64_t result = printf("%s: %s: called.\n", "ACM", "LibCall_ACMGetAclAuthMethod_Block");
  }
  uint64_t v11 = 256;
  if (v7 && a3 && a4)
  {
    uint64_t v10 = 16;
    __n128 AclAuthMethod_Serialize = LibSer_GetAclAuthMethod_Serialize(a3, &v12, &v10);
    if (!v9 && v10 == 16) {
      v7(a2, 31, 0, &v12, 16, v13, &v11, AclAuthMethod_Serialize);
    }
    goto LABEL_9;
  }
  if (a4) {
LABEL_9:
  }
    uint64_t result = (*(uint64_t (**)(uint64_t))(a4 + 16))(a4);
  if (gACMLoggingLevel <= 0xAu) {
    return printf("%s: %s: returning.\n", "ACM", "LibCall_ACMGetAclAuthMethod_Block");
  }
  return result;
}

uint64_t LibCall_ACMContextVerifyAclConstraint(uint64_t a1, uint64_t a2, _OWORD *a3, const void *a4, uint64_t a5, unsigned __int8 a6, _DWORD *a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  return sub_10008F808(a1, a2, 0xBu, a3, a4, a5, 0, 0, a6, a7, a8, a9, a10);
}

uint64_t sub_10008F808(uint64_t result, uint64_t a2, unsigned __int8 a3, _OWORD *a4, const void *a5, uint64_t a6, const void *a7, unsigned int a8, unsigned __int8 a9, _DWORD *a10, unsigned int a11, unsigned int a12, uint64_t a13)
{
  size_t v20 = (uint64_t (*)(uint64_t, uint64_t, void, void *, size_t, unsigned int *, unint64_t *))result;
  if (gACMLoggingLevel <= 0xAu) {
    uint64_t result = printf("%s: %s: called.\n", "ACM", "verifyAclConstraintForOperationCommandInternal");
  }
  size_t v25 = 0;
  BOOL v24 = 0;
  if (a4 && a5 && a6 && a13)
  {
    uint64_t v21 = verifyAclConstraintInternal(v20, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, &v24, &v25);
    uint64_t v22 = v25;
    BOOL v23 = v24;
  }
  else
  {
    if (!a13) {
      goto LABEL_10;
    }
    uint64_t v22 = 0;
    BOOL v23 = 0;
    uint64_t v21 = 4294967293;
  }
  (*(void (**)(uint64_t, uint64_t, BOOL, int *))(a13 + 16))(a13, v21, v23, v22);
  uint64_t result = (uint64_t)v25;
  if (v25) {
    uint64_t result = Util_DeallocRequirement(v25);
  }
LABEL_10:
  if (gACMLoggingLevel <= 0xAu) {
    return printf("%s: %s: returning.\n", "ACM", "verifyAclConstraintForOperationCommandInternal");
  }
  return result;
}

uint64_t LibCall_ACMContextVerifyAclConstraintForOperation(uint64_t a1, uint64_t a2, _OWORD *a3, const void *a4, uint64_t a5, const void *a6, unsigned int a7, unsigned __int8 a8, _DWORD *a9, unsigned int a10, unsigned int a11, uint64_t a12)
{
  return sub_10008F808(a1, a2, 0x20u, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t Util_GetBitCount(uint64_t a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

BOOL Util_isNullOrZeroMemory(unsigned char *a1, uint64_t a2)
{
  if (!a1) {
    return 1;
  }
  if (*a1) {
    return 0;
  }
  return memcmp(a1, a1 + 1, a2 - 1) == 0;
}

BOOL Util_isNonNullEqualMemory(void *__s1, size_t __n, void *__s2, uint64_t a4)
{
  if (__n != a4) {
    return 0;
  }
  BOOL result = 0;
  if (__s1)
  {
    if (__s2) {
      return memcmp(__s1, __s2, __n) == 0;
    }
  }
  return result;
}

char *Util_hexDumpToStrHelper(char *result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!result && a2) {
    sub_1000912A8();
  }
  if (!a3 && a4) {
    sub_1000912D4();
  }
  if (a2 >= a4) {
    unint64_t v4 = a4;
  }
  else {
    unint64_t v4 = a2;
  }
  if (v4)
  {
    size_t v5 = (unsigned char *)(a3 + 1);
    do
    {
      *(v5 - 1) = a0123456789abcd[(unint64_t)*result >> 4];
      char v6 = *result++;
      *size_t v5 = a0123456789abcd[v6 & 0xF];
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t Util_WriteToBuffer(uint64_t a1, size_t a2, void *a3, void *__src, size_t __n)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "Util_WriteToBuffer");
  }
  if (a3)
  {
    uint64_t v10 = *a3;
    size_t v11 = *a3 + __n;
    if (!__CFADD__(*a3, __n))
    {
      if (a1 && v11 > a2)
      {
        uint64_t v12 = 4294967276;
        goto LABEL_19;
      }
      if (!a1 || !__src || !__n) {
        goto LABEL_12;
      }
      if (!__CFADD__(a1, v10))
      {
        memcpy((void *)(a1 + v10), __src, __n);
LABEL_12:
        uint64_t v12 = 0;
        *a3 = v11;
        unsigned int v13 = 10;
        goto LABEL_13;
      }
    }
    uint64_t v12 = 4294967291;
  }
  else
  {
    uint64_t v12 = 4294967293;
  }
LABEL_19:
  unsigned int v13 = 70;
LABEL_13:
  if (v13 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_WriteToBuffer", (int)v12);
  }
  return v12;
}

uint64_t Util_ReadFromBuffer(uint64_t a1, size_t a2, void *a3, void *__dst, size_t __n)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "Util_ReadFromBuffer");
  }
  uint64_t v10 = 4294967293;
  unsigned int v11 = 70;
  if (a1 && a3)
  {
    uint64_t v12 = *a3;
    size_t v13 = *a3 + __n;
    if (!__CFADD__(*a3, __n))
    {
      if (v13 > a2)
      {
        uint64_t v10 = 4294967276;
        goto LABEL_17;
      }
      if (!__dst || !__n) {
        goto LABEL_11;
      }
      if (!__CFADD__(a1, v12))
      {
        memcpy(__dst, (const void *)(a1 + v12), __n);
LABEL_11:
        uint64_t v10 = 0;
        *a3 = v13;
        unsigned int v11 = 10;
        goto LABEL_12;
      }
    }
    uint64_t v10 = 4294967291;
LABEL_17:
    unsigned int v11 = 70;
  }
LABEL_12:
  if (v11 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_ReadFromBuffer", (int)v10);
  }
  return v10;
}

unint64_t Util_KeybagLockStateToEnvVar(unsigned int a1)
{
  unint64_t v1 = 0x2010103020201uLL >> (8 * a1);
  if (a1 >= 7) {
    LOBYTE(v1) = 1;
  }
  return v1 & 3;
}

void Util_SafeDeallocParameters(unsigned int *a1, unsigned int a2)
{
  if (a1)
  {
    uint64_t v3 = a2;
    if (a2)
    {
      unint64_t v4 = a1 + 4;
      uint64_t v5 = a2;
      do
      {
        char v6 = (void *)*((void *)v4 - 1);
        if (v6)
        {
          unint64_t v7 = *v4;
          acm_mem_free_info("<data>", *((const void **)v4 - 1), v7, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 118, "Util_SafeDeallocParameters");
          acm_mem_free_data(v6, v7);
        }
        v4 += 6;
        --v5;
      }
      while (v5);
    }
    acm_mem_free_info("array of ACMParameter", a1, 24 * v3, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 121, "Util_SafeDeallocParameters");
    acm_mem_free(a1, 24 * v3);
  }
}

uint64_t Util_DeallocCredential(_DWORD *a1)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "Util_DeallocCredential");
  }
  if (a1)
  {
    uint64_t v2 = 4294967293;
    unsigned int v3 = 70;
    switch(*a1)
    {
      case 1:
        unint64_t v4 = "ACMCredential - ACMCredentialDataPasscodeValidated";
        rsize_t v5 = 60;
        char v6 = a1;
        unint64_t v7 = 60;
        int v8 = 144;
        goto LABEL_6;
      case 2:
        unint64_t v4 = "ACMCredential - ACMCredentialDataPassphraseEntered";
        rsize_t v5 = 168;
        char v6 = a1;
        unint64_t v7 = 168;
        int v8 = 136;
        goto LABEL_6;
      case 3:
        unint64_t v4 = "ACMCredential - ACMCredentialDataBiometryMatched";
        rsize_t v5 = 337;
        char v6 = a1;
        unint64_t v7 = 337;
        int v8 = 140;
        goto LABEL_6;
      case 4:
      case 5:
      case 6:
      case 8:
      case 0xE:
      case 0x10:
      case 0x13:
      case 0x16:
      case 0x17:
        unint64_t v4 = "ACMCredential";
        rsize_t v5 = 32;
        char v6 = a1;
        unint64_t v7 = 32;
        int v8 = 189;
        goto LABEL_6;
      case 7:
        unint64_t v4 = "ACMCredential - ACMCredentialDataUserOutputDisplayed";
        rsize_t v5 = 88;
        char v6 = a1;
        unint64_t v7 = 88;
        int v8 = 152;
        goto LABEL_6;
      case 9:
        unint64_t v4 = "ACMCredential - ACMCredentialDataContinuityUnlock";
        rsize_t v5 = 56;
        char v6 = a1;
        unint64_t v7 = 56;
        int v8 = 156;
        goto LABEL_6;
      case 0xA:
        unint64_t v4 = "ACMCredential - ACMCredentialDataPasscodeValidated2";
        rsize_t v5 = 84;
        char v6 = a1;
        unint64_t v7 = 84;
        int v8 = 148;
        goto LABEL_6;
      case 0xC:
      case 0xF:
        unint64_t v4 = "ACMCredential - ACMCredentialDataKextDenyList";
        rsize_t v5 = 40;
        char v6 = a1;
        unint64_t v7 = 40;
        int v8 = 161;
        goto LABEL_6;
      case 0xD:
        unint64_t v4 = "ACMCredential - ACMCredentialDataPassphraseExtractable";
        rsize_t v5 = 164;
        char v6 = a1;
        unint64_t v7 = 164;
        int v8 = 132;
        goto LABEL_6;
      case 0x11:
        unint64_t v4 = "ACMCredential - ACMCredentialDataSecureIntent";
        rsize_t v5 = 113;
        char v6 = a1;
        unint64_t v7 = 113;
        int v8 = 165;
        goto LABEL_6;
      case 0x12:
        unint64_t v4 = "ACMCredential - ACMCredentialDataBiometryMatchAttempted";
        rsize_t v5 = 52;
        char v6 = a1;
        unint64_t v7 = 52;
        int v8 = 169;
        goto LABEL_6;
      case 0x14:
        unint64_t v4 = "ACMCredential - ACMCredentialDataAP";
        rsize_t v5 = 64;
        char v6 = a1;
        unint64_t v7 = 64;
        int v8 = 173;
        goto LABEL_6;
      case 0x15:
        unint64_t v4 = "ACMCredential - ACMCredentialDataSignature";
        rsize_t v5 = 164;
        char v6 = a1;
        unint64_t v7 = 164;
        int v8 = 177;
LABEL_6:
        acm_mem_free_info(v4, v6, v7, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v8, "Util_DeallocCredential");
        acm_mem_free(a1, v5);
        uint64_t v2 = 0;
        unsigned int v3 = 10;
        break;
      default:
        break;
    }
  }
  else
  {
    uint64_t v2 = 4294967293;
    unsigned int v3 = 70;
  }
  if (v3 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_DeallocCredential", (int)v2);
  }
  return v2;
}

uint64_t Util_AllocCredential(int a1, void *a2)
{
  if (!a2) {
    return 4294967293;
  }
  uint64_t result = 4294967293;
  switch(a1)
  {
    case 1:
      rsize_t v5 = acm_mem_alloc(0x3CuLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataPasscodeValidated", v5, 60, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 226, "Util_AllocCredential");
      int v6 = 28;
      goto LABEL_4;
    case 2:
      rsize_t v5 = acm_mem_alloc(0xA8uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataPassphraseEntered", v5, 168, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 216, "Util_AllocCredential");
      int v6 = 136;
      goto LABEL_4;
    case 3:
      rsize_t v5 = acm_mem_alloc(0x151uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataBiometryMatched", v5, 337, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 221, "Util_AllocCredential");
      int v6 = 305;
      goto LABEL_4;
    case 4:
    case 5:
    case 6:
    case 8:
    case 14:
    case 16:
    case 19:
    case 22:
    case 23:
      rsize_t v5 = acm_mem_alloc(0x20uLL);
      acm_mem_alloc_info("ACMCredential", v5, 32, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 280, "Util_AllocCredential");
      int v6 = 0;
      goto LABEL_4;
    case 7:
      rsize_t v5 = acm_mem_alloc(0x58uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataUserOutputDisplayed", v5, 88, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 236, "Util_AllocCredential");
      int v6 = 56;
      goto LABEL_4;
    case 9:
      rsize_t v5 = acm_mem_alloc(0x38uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataContinuityUnlock", v5, 56, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 241, "Util_AllocCredential");
      int v6 = 24;
      goto LABEL_4;
    case 10:
      rsize_t v5 = acm_mem_alloc(0x54uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataPasscodeValidated2", v5, 84, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 231, "Util_AllocCredential");
      int v6 = 52;
      goto LABEL_4;
    case 12:
    case 15:
      rsize_t v5 = acm_mem_alloc(0x28uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataKextDenyList", v5, 40, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 247, "Util_AllocCredential");
      int v6 = 8;
      goto LABEL_4;
    case 13:
      rsize_t v5 = acm_mem_alloc(0xA4uLL);
      unint64_t v7 = "ACMCredential - ACMCredentialDataPassphraseExtractable";
      int v8 = v5;
      int v9 = 211;
      goto LABEL_18;
    case 17:
      rsize_t v5 = acm_mem_alloc(0x71uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataSecureIntent", v5, 113, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 252, "Util_AllocCredential");
      int v6 = 81;
      goto LABEL_4;
    case 18:
      rsize_t v5 = acm_mem_alloc(0x34uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataBiometryMatchAttempted", v5, 52, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 257, "Util_AllocCredential");
      int v6 = 20;
      goto LABEL_4;
    case 20:
      rsize_t v5 = acm_mem_alloc(0x40uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataAP", v5, 64, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 262, "Util_AllocCredential");
      int v6 = 32;
      goto LABEL_4;
    case 21:
      rsize_t v5 = acm_mem_alloc(0xA4uLL);
      unint64_t v7 = "ACMCredential - ACMCredentialDataSignature";
      int v8 = v5;
      int v9 = 267;
LABEL_18:
      acm_mem_alloc_info(v7, v8, 164, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v9, "Util_AllocCredential");
      int v6 = 132;
LABEL_4:
      if (v5)
      {
        uint64_t result = 0;
        *rsize_t v5 = a1;
        v5[1] = 1;
        v5[7] = v6;
        v5[3] = -1;
        *a2 = v5;
      }
      else
      {
        uint64_t result = 4294967292;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t Util_AllocRequirement(int a1, uint64_t a2, void *a3)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "Util_AllocRequirement");
  }
  if (a3)
  {
    uint64_t v6 = 4294967293;
    unsigned int v7 = 70;
    switch(a1)
    {
      case 1:
        int v8 = acm_mem_alloc(0x14uLL);
        unsigned int v11 = "ACMRequirement - ACMRequirementDataPasscodeValidated";
        uint64_t v12 = v8;
        int v13 = 338;
        goto LABEL_49;
      case 2:
        int v8 = acm_mem_alloc(0x14uLL);
        unsigned int v11 = "ACMRequirement - ACMRequirementDataPassphraseEntered";
        uint64_t v12 = v8;
        int v13 = 343;
        goto LABEL_49;
      case 3:
        int v8 = acm_mem_alloc(0xACuLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataBiometryMatched", v8, 172, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 348, "Util_AllocRequirement");
        int v9 = 156;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 4:
        if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6) {
          goto LABEL_53;
        }
        int v8 = acm_mem_alloc(0x64uLL);
        uint64_t v14 = "ACMRequirement - ACMRequirementDataOr";
        int v15 = v8;
        int v16 = 406;
        goto LABEL_28;
      case 5:
        if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6) {
          goto LABEL_53;
        }
        int v8 = acm_mem_alloc(0x64uLL);
        uint64_t v14 = "ACMRequirement - ACMRequirementDataAnd";
        int v15 = v8;
        int v16 = 398;
LABEL_28:
        acm_mem_alloc_info(v14, v15, 100, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v16, "Util_AllocRequirement");
        int v9 = 84;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 18:
      case 19:
      case 22:
      case 23:
      case 27:
      case 28:
        int v8 = acm_mem_alloc(0x10uLL);
        acm_mem_alloc_info("ACMRequirement", v8, 16, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 333, "Util_AllocRequirement");
        int v9 = 0;
        if (v8) {
          goto LABEL_6;
        }
        goto LABEL_50;
      case 7:
        if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6) {
          goto LABEL_53;
        }
        int v8 = acm_mem_alloc(0x68uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataKofN", v8, 104, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 391, "Util_AllocRequirement");
        int v9 = 88;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 8:
        int v8 = acm_mem_alloc(0x410uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataAccessGroups", v8, 1040, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 378, "Util_AllocRequirement");
        int v9 = 1024;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 13:
        int v8 = acm_mem_alloc(0x30uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataUserOutputDisplayed", v8, 48, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 363, "Util_AllocRequirement");
        int v9 = 32;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 16:
      case 17:
        break;
      case 20:
        int v8 = acm_mem_alloc(0x14uLL);
        unsigned int v11 = "ACMRequirement - ACMRequirementDataSecureIntent";
        uint64_t v12 = v8;
        int v13 = 353;
        goto LABEL_49;
      case 21:
        int v8 = acm_mem_alloc(0x14uLL);
        unsigned int v11 = "ACMRequirement - ACMRequirementDataBiometryMatchAttempted";
        uint64_t v12 = v8;
        int v13 = 358;
LABEL_49:
        acm_mem_alloc_info(v11, v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v13, "Util_AllocRequirement");
        int v9 = 4;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 24:
        int v8 = acm_mem_alloc(0x434uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataAP", v8, 1076, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 368, "Util_AllocRequirement");
        int v9 = 1060;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 25:
        int v8 = acm_mem_alloc(0x3BuLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataKeyRef", v8, 59, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 373, "Util_AllocRequirement");
        int v9 = 43;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 26:
        int v8 = acm_mem_alloc(0x2CuLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataRatchet", v8, 44, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 384, "Util_AllocRequirement");
        int v9 = 28;
        if (!v8)
        {
LABEL_50:
          uint64_t v6 = 4294967292;
          goto LABEL_54;
        }
LABEL_6:
        _DWORD *v8 = a1;
        *(void *)(v8 + 1) = 0x100000001;
        v8[3] = v9;
        if ((a1 & 0xFFFFFFFE) == 4)
        {
          v8[4] = a2;
        }
        else if (a1 == 1000)
        {
          v8[13] = a2;
        }
        else if (a1 == 7)
        {
          v8[5] = a2;
        }
        uint64_t v6 = 0;
        *a3 = v8;
        unsigned int v7 = 10;
        break;
      default:
        switch(a1)
        {
          case 1000:
            if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6) {
              goto LABEL_53;
            }
            int v8 = acm_mem_alloc(0x88uLL);
            acm_mem_alloc_info("ACMRequirement - ACMRequirementDataKofNWithAttributes", v8, 136, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 414, "Util_AllocRequirement");
            int v9 = 120;
            if (!v8) {
              goto LABEL_50;
            }
            goto LABEL_6;
          case 1001:
            int v8 = acm_mem_alloc(0xB8uLL);
            acm_mem_alloc_info("ACMRequirement - ACMRequirementDataBiometryMatchedWithAttributes", v8, 184, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 419, "Util_AllocRequirement");
            int v9 = 168;
            if (!v8) {
              goto LABEL_50;
            }
            goto LABEL_6;
          case 1002:
            int v8 = acm_mem_alloc(0x14uLL);
            unsigned int v11 = "ACMRequirement - ACMRequirementDataPushButtonWithAttributes";
            uint64_t v12 = v8;
            int v13 = 424;
            goto LABEL_49;
          case 1003:
            int v8 = acm_mem_alloc(0x14uLL);
            unsigned int v11 = "ACMRequirement - ACMRequirementDataSecureStateWithAttributes";
            uint64_t v12 = v8;
            int v13 = 429;
            goto LABEL_49;
          case 1004:
            int v8 = acm_mem_alloc(0x20uLL);
            acm_mem_alloc_info("ACMRequirement - ACMRequirementDataPasscodeValidatedWithAttributes", v8, 32, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 434, "Util_AllocRequirement");
            int v9 = 16;
            if (!v8) {
              goto LABEL_50;
            }
            goto LABEL_6;
          default:
            goto LABEL_17;
        }
    }
  }
  else
  {
LABEL_53:
    uint64_t v6 = 4294967293;
LABEL_54:
    unsigned int v7 = 70;
  }
LABEL_17:
  if (v7 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_AllocRequirement", (int)v6);
  }
  return v6;
}

uint64_t Util_CreateRequirement(int a1, uint64_t a2)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "Util_CreateRequirement");
  }
  uint64_t v5 = 0;
  Util_AllocRequirement(a1, a2, &v5);
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: returning.\n", "ACM", "Util_CreateRequirement");
  }
  return v5;
}

uint64_t Util_DeallocRequirement(int *a1)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "Util_DeallocRequirement");
  }
  if (!a1)
  {
    uint64_t v7 = 4294967293;
    unsigned int v8 = 70;
    goto LABEL_28;
  }
  int v2 = *a1;
  if (*a1 > 6)
  {
    if (v2 == 7)
    {
      if (a1[5])
      {
        unint64_t v6 = 0;
        do
          Util_DeallocRequirement(*(void *)&a1[2 * v6++ + 6]);
        while (v6 < a1[5]);
      }
    }
    else
    {
      if (v2 != 1000) {
        goto LABEL_25;
      }
      if (a1[13])
      {
        unint64_t v4 = 0;
        do
          Util_DeallocRequirement(*(void *)&a1[2 * v4++ + 14]);
        while (v4 < a1[13]);
      }
    }
  }
  else if (v2 == 4)
  {
    if (a1[4])
    {
      unint64_t v5 = 0;
      do
        Util_DeallocRequirement(*(void *)&a1[2 * v5++ + 5]);
      while (v5 < a1[4]);
    }
  }
  else
  {
    if (v2 != 5) {
      goto LABEL_25;
    }
    if (a1[4])
    {
      unint64_t v3 = 0;
      do
        Util_DeallocRequirement(*(void *)&a1[2 * v3++ + 5]);
      while (v3 < a1[4]);
    }
  }
  int v2 = *a1;
LABEL_25:
  uint64_t v7 = 4294967293;
  unsigned int v8 = 70;
  switch(v2)
  {
    case 1:
      int v9 = "ACMRequirement - ACMRequirementDataPasscodeValidated";
      rsize_t v10 = 20;
      unsigned int v11 = a1;
      unint64_t v12 = 20;
      int v13 = 542;
      goto LABEL_27;
    case 2:
      int v9 = "ACMRequirement - ACMRequirementDataPassphraseEntered";
      rsize_t v10 = 20;
      unsigned int v11 = a1;
      unint64_t v12 = 20;
      int v13 = 546;
      goto LABEL_27;
    case 3:
      int v9 = "ACMRequirement - ACMRequirementDataBiometryMatched";
      rsize_t v10 = 172;
      unsigned int v11 = a1;
      unint64_t v12 = 172;
      int v13 = 550;
      goto LABEL_27;
    case 4:
      int v9 = "ACMRequirement - ACMRequirementDataOr";
      rsize_t v10 = 100;
      unsigned int v11 = a1;
      unint64_t v12 = 100;
      int v13 = 595;
      goto LABEL_27;
    case 5:
      int v9 = "ACMRequirement - ACMRequirementDataAnd";
      rsize_t v10 = 100;
      unsigned int v11 = a1;
      unint64_t v12 = 100;
      int v13 = 589;
      goto LABEL_27;
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 18:
    case 19:
    case 22:
    case 23:
    case 27:
    case 28:
      int v9 = "ACMRequirement";
      rsize_t v10 = 16;
      unsigned int v11 = a1;
      unint64_t v12 = 16;
      int v13 = 538;
      goto LABEL_27;
    case 7:
      int v9 = "ACMRequirement - ACMRequirementDataKofN";
      rsize_t v10 = 104;
      unsigned int v11 = a1;
      unint64_t v12 = 104;
      int v13 = 584;
      goto LABEL_27;
    case 8:
      int v9 = "ACMRequirement - ACMRequirementDataAccessGroups";
      rsize_t v10 = 1040;
      unsigned int v11 = a1;
      unint64_t v12 = 1040;
      int v13 = 574;
      goto LABEL_27;
    case 13:
      int v9 = "ACMRequirement - ACMRequirementDataUserOutputDisplayed";
      rsize_t v10 = 48;
      unsigned int v11 = a1;
      unint64_t v12 = 48;
      int v13 = 562;
      goto LABEL_27;
    case 16:
    case 17:
      break;
    case 20:
      int v9 = "ACMRequirement - ACMRequirementDataSecureIntent";
      rsize_t v10 = 20;
      unsigned int v11 = a1;
      unint64_t v12 = 20;
      int v13 = 554;
      goto LABEL_27;
    case 21:
      int v9 = "ACMRequirement - ACMRequirementDataBiometryMatchAttempted";
      rsize_t v10 = 20;
      unsigned int v11 = a1;
      unint64_t v12 = 20;
      int v13 = 558;
      goto LABEL_27;
    case 24:
      int v9 = "ACMRequirement - ACMRequirementDataAP";
      rsize_t v10 = 1076;
      unsigned int v11 = a1;
      unint64_t v12 = 1076;
      int v13 = 566;
      goto LABEL_27;
    case 25:
      int v9 = "ACMRequirement - ACMRequirementDataKeyRef";
      rsize_t v10 = 59;
      unsigned int v11 = a1;
      unint64_t v12 = 59;
      int v13 = 570;
      goto LABEL_27;
    case 26:
      int v9 = "ACMRequirement - ACMRequirementDataRatchet";
      rsize_t v10 = 44;
      unsigned int v11 = a1;
      unint64_t v12 = 44;
      int v13 = 579;
LABEL_27:
      acm_mem_free_info(v9, v11, v12, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v13, "Util_DeallocRequirement");
      acm_mem_free(a1, v10);
      uint64_t v7 = 0;
      unsigned int v8 = 10;
      break;
    default:
      switch(v2)
      {
        case 1000:
          int v9 = "ACMRequirement - ACMRequirementDataKofNWithAttributes";
          rsize_t v10 = 136;
          unsigned int v11 = a1;
          unint64_t v12 = 136;
          int v13 = 601;
          goto LABEL_27;
        case 1001:
          int v9 = "ACMRequirement - ACMRequirementDataBiometryMatchedWithAttributes";
          rsize_t v10 = 184;
          unsigned int v11 = a1;
          unint64_t v12 = 184;
          int v13 = 605;
          goto LABEL_27;
        case 1002:
          int v9 = "ACMRequirement - ACMRequirementDataPushButtonWithAttributes";
          rsize_t v10 = 20;
          unsigned int v11 = a1;
          unint64_t v12 = 20;
          int v13 = 609;
          goto LABEL_27;
        case 1003:
          int v9 = "ACMRequirement - ACMRequirementDataSecureStateWithAttributes";
          rsize_t v10 = 20;
          unsigned int v11 = a1;
          unint64_t v12 = 20;
          int v13 = 613;
          goto LABEL_27;
        case 1004:
          int v9 = "ACMRequirement - ACMRequirementDataPasscodeValidatedWithAttributes";
          rsize_t v10 = 32;
          unsigned int v11 = a1;
          unint64_t v12 = 32;
          int v13 = 617;
          goto LABEL_27;
        default:
          goto LABEL_28;
      }
  }
LABEL_28:
  if (v8 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_DeallocRequirement", (int)v7);
  }
  return v7;
}

void sub_1000912A8()
{
}

void sub_1000912D4()
{
}

uint64_t ACMContextCreate(uint64_t *a1)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    unsigned int v8 = "ACMLib";
    __int16 v9 = 2080;
    rsize_t v10 = "ACMContextCreate";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v6 = 0;
  uint64_t v2 = LibCall_ACMContextCreate((uint64_t (*)(uint64_t, uint64_t, void, void, void, unsigned char *, uint64_t *))sub_100091534, (uint64_t)&v6, a1, &byte_1000E3741, 1);
  if (v2)
  {
    sub_100096630();
    unsigned int v3 = 70;
  }
  else
  {
    unsigned int v3 = 10;
    if (a1 && byte_1000E3741 <= 0x28u)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = *a1;
        if (*a1) {
          LODWORD(v4) = *(_DWORD *)(v4 + 16);
        }
        *(_DWORD *)buf = 136315650;
        unsigned int v8 = "ACMLib";
        __int16 v9 = 2080;
        rsize_t v10 = "ACMContextCreate";
        __int16 v11 = 1024;
        LODWORD(v12) = v4;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] created.\n", buf, 0x1Cu);
      }
      unsigned int v3 = 10;
    }
  }
  if (v3 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    unsigned int v8 = "ACMLib";
    __int16 v9 = 2080;
    rsize_t v10 = "ACMContextCreate";
    __int16 v11 = 2048;
    uint64_t v12 = (int)v2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v2;
}

uint64_t sub_100091534(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315394;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    uint64_t v21 = "ioKitTransport";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v18, 0x16u);
  }
  if (a1)
  {
    uint64_t v14 = sub_100091D2C();
    unsigned int v15 = 70;
    if (v14)
    {
      uint64_t v16 = v14;
    }
    else
    {
      uint64_t v16 = sub_100091F10(*a1, a2, a3, a4, a5, a6, a7);
      if (v16) {
        unsigned int v15 = 70;
      }
      else {
        unsigned int v15 = 10;
      }
    }
  }
  else
  {
    unsigned int v15 = 70;
    uint64_t v16 = 4294967293;
  }
  if (v15 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315650;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    uint64_t v21 = "ioKitTransport";
    __int16 v22 = 2048;
    uint64_t v23 = (int)v16;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v18, 0x20u);
  }
  return v16;
}

_DWORD *ACMContextCreateWithExternalForm(_OWORD *a1, uint64_t a2)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    rsize_t v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextCreateWithExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v8 = 0;
  uint64_t v4 = LibCall_ACMContextCreateWithExternalForm((uint64_t (*)(uint64_t, uint64_t, void, _OWORD *, uint64_t, void *, uint64_t *))sub_100091534, (uint64_t)&v8, a1, a2, &byte_1000E3741, 1);
  if (v4)
  {
    if (byte_1000E3741 <= 0x28u && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      int v5 = v4[4];
      *(_DWORD *)buf = 136315650;
      rsize_t v10 = "ACMLib";
      __int16 v11 = 2080;
      uint64_t v12 = "ACMContextCreateWithExternalForm";
      __int16 v13 = 1024;
      LODWORD(v14) = v5;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] acquired.\n", buf, 0x1Cu);
    }
    unsigned int v6 = 30;
  }
  else
  {
    sub_100096630();
    unsigned int v6 = 70;
  }
  if (v6 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    rsize_t v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextCreateWithExternalForm";
    __int16 v13 = 2048;
    uint64_t v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, -> ctx = %p.\n", buf, 0x20u);
  }
  return v4;
}

uint64_t ACMContextDelete(_DWORD *a1, int a2)
{
  unsigned int v4 = byte_1000E3741;
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextDelete";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
    unsigned int v4 = byte_1000E3741;
  }
  if (a1 && v4 <= 0x28 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v5 = a1[4];
    unsigned int v6 = "deleted";
    *(_DWORD *)buf = 136315906;
    uint64_t v12 = "ACMLib";
    uint64_t v14 = "ACMContextDelete";
    __int16 v13 = 2080;
    if (a2) {
      unsigned int v6 = "destroyed";
    }
    __int16 v15 = 1024;
    LODWORD(v16[0]) = v5;
    WORD2(v16[0]) = 2080;
    *(void *)((char *)v16 + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] %s.\n", buf, 0x26u);
  }
  rsize_t v10 = a1;
  uint64_t v7 = LibCall_ACMContextDelete((void (*)(uint64_t, uint64_t, void, void *, uint64_t, void, void))sub_100091534, (uint64_t)&v10, a1, a2);
  if (v7) {
    unsigned int v8 = 70;
  }
  else {
    unsigned int v8 = 10;
  }
  if (v8 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextDelete";
    __int16 v15 = 2048;
    v16[0] = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v7;
}

void ACMContextGetExternalForm(const void *a1, uint64_t a2)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "ACMContextGetExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v4, 0x16u);
  }
  if (!a1
    || !a2
    || sub_100091D2C()
    || sub_100091F10((uint64_t)a1, 19, 0, a1, 0x10uLL, 0, 0))
  {
    (*(void (**)(uint64_t, void, void))(a2 + 16))(a2, 0, 0);
  }
  else
  {
    (*(void (**)(uint64_t, const void *, uint64_t))(a2 + 16))(a2, a1, 16);
  }
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "ACMContextGetExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", (uint8_t *)&v4, 0x16u);
  }
}

uint64_t sub_100091D2C()
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    __int16 v9 = "init";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v6, 0x16u);
  }
  if (byte_1000E4264)
  {
    uint64_t v0 = 0;
  }
  else
  {
    CFDictionaryRef v1 = IOServiceMatching("AppleCredentialManager");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      unsigned int v4 = 70;
      uint64_t v0 = 4294967291;
      goto LABEL_10;
    }
    io_object_t v3 = MatchingService;
    uint64_t v0 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_1000E4260);
    if (v0)
    {
      unsigned int v4 = 70;
      goto LABEL_10;
    }
    IOObjectRelease(v3);
    byte_1000E4264 = 1;
  }
  unsigned int v4 = 10;
LABEL_10:
  if (v4 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315650;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    __int16 v9 = "init";
    __int16 v10 = 2048;
    uint64_t v11 = (int)v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v6, 0x20u);
  }
  return v0;
}

uint64_t sub_100091F10(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    size_t v25 = "ACMLib";
    __int16 v26 = 2080;
    int v27 = "performCommand";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size_t inputStructCnt = 0;
  uint64_t v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    __int16 v15 = v14;
    if (!a6 && a7)
    {
      uint64_t v18 = 4294967293;
    }
    else
    {
      if (a7) {
        size_t v16 = *a7;
      }
      else {
        size_t v16 = 0;
      }
      size_t v22 = v16;
      uint64_t v17 = IOConnectCallStructMethod(dword_1000E4260, 0, v14, inputStructCnt, a6, &v22);
      uint64_t v18 = v17;
      if (a1) {
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      }
      if (v17)
      {
        if (byte_1000E3741 <= 0x46u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136316418;
          size_t v25 = "ACMLib";
          __int16 v26 = 2080;
          int v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)unint64_t v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          __int16 v30 = 1024;
          int v31 = v18;
          __int16 v32 = 1024;
          int v33 = v18;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n", buf, 0x2Eu);
        }
      }
      else
      {
        if (byte_1000E3741 <= 0x28u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          size_t v25 = "ACMLib";
          __int16 v26 = 2080;
          int v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)unint64_t v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> ok.\n", buf, 0x22u);
        }
        uint64_t v18 = 0;
        if (a7) {
          *a7 = v22;
        }
      }
    }
    rsize_t v19 = inputStructCnt;
    acm_mem_free_info("<data>", v15, inputStructCnt, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 134, "performCommand");
    acm_mem_free_data(v15, v19);
    if (v18) {
      unsigned int v20 = 70;
    }
    else {
      unsigned int v20 = 10;
    }
  }
  else
  {
    unsigned int v20 = 70;
    uint64_t v18 = 4294967291;
  }
  if (v20 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    size_t v25 = "ACMLib";
    __int16 v26 = 2080;
    int v27 = "performCommand";
    __int16 v28 = 2048;
    *(void *)unint64_t v29 = (int)v18;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v18;
}

uint64_t ACMContextAddCredential(_OWORD *a1, unsigned int *a2)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    int v6 = "ACMLib";
    __int16 v7 = 2080;
    __int16 v8 = "ACMContextAddCredential";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }
  return ACMContextAddCredentialWithScope(a1, a2, 1);
}

uint64_t ACMContextAddCredentialWithScope(_OWORD *a1, unsigned int *a2, int a3)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v18 = "ACMLib";
    __int16 v19 = 2080;
    unsigned int v20 = "ACMContextAddCredentialWithScope";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size_t size = 0;
  if (a1) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a3 == 2;
  }
  char v7 = !v6;
  unsigned int v8 = 70;
  uint64_t v9 = 4294967293;
  if (a2 && (v7 & 1) == 0)
  {
    uint64_t SerializedAddCredentialSize = sub_100091D2C();
    if (SerializedAddCredentialSize
      || (uint64_t SerializedAddCredentialSize = GetSerializedAddCredentialSize((uint64_t)a1, a2, a3, &size),
          SerializedAddCredentialSize))
    {
      uint64_t v9 = SerializedAddCredentialSize;
      unsigned int v8 = 70;
    }
    else
    {
      size_t v11 = size;
      uint64_t v12 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v12, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 325, "ACMContextAddCredentialWithScope");
      if (v12)
      {
        uint64_t v13 = SerializeAddCredential(a1, a2, a3, (uint64_t)v12, &size);
        if (!v13) {
          uint64_t v13 = sub_100091F10((uint64_t)a1, 5, 0, v12, size, 0, 0);
        }
        uint64_t v9 = v13;
        rsize_t v14 = size;
        acm_mem_free_info("<data>", v12, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 338, "ACMContextAddCredentialWithScope");
        acm_mem_free_data(v12, v14);
        if (v9) {
          unsigned int v8 = 70;
        }
        else {
          unsigned int v8 = 10;
        }
      }
      else
      {
        unsigned int v8 = 70;
        uint64_t v9 = 4294967292;
      }
    }
  }
  if (v8 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v18 = "ACMLib";
    __int16 v19 = 2080;
    unsigned int v20 = "ACMContextAddCredentialWithScope";
    __int16 v21 = 2048;
    uint64_t v22 = (int)v9;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v9;
}

uint64_t ACMContextRemoveCredentialsByType(_OWORD *a1, int a2)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    BOOL v6 = "ACMLib";
    __int16 v7 = 2080;
    unsigned int v8 = "ACMContextRemoveCredentialsByType";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }
  return ACMContextRemoveCredentialsByTypeAndScope(a1, a2, 1);
}

uint64_t ACMContextRemoveCredentialsByTypeAndScope(_OWORD *a1, int a2, int a3)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315394;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    rsize_t v14 = "ACMContextRemoveCredentialsByTypeAndScope";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }
  if (a1 || a3 == 2)
  {
    uint64_t v6 = sub_100091D2C();
    if (v6)
    {
      uint64_t v8 = v6;
      unsigned int v9 = 70;
    }
    else
    {
      __int16 v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info("<data>", v7, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 386, "ACMContextRemoveCredentialsByTypeAndScope");
      if (v7)
      {
        if (a1)
        {
          *__int16 v7 = *a1;
        }
        else
        {
          *(void *)__int16 v7 = 0;
          *((void *)v7 + 1) = 0;
        }
        *((_DWORD *)v7 + 4) = a2;
        *((_DWORD *)v7 + 5) = a3;
        uint64_t v8 = sub_100091F10((uint64_t)a1, 9, 0, v7, 0x18uLL, 0, 0);
        acm_mem_free_info("<data>", v7, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 407, "ACMContextRemoveCredentialsByTypeAndScope");
        acm_mem_free_data(v7, 0x18uLL);
        if (v8) {
          unsigned int v9 = 70;
        }
        else {
          unsigned int v9 = 10;
        }
      }
      else
      {
        unsigned int v9 = 70;
        uint64_t v8 = 4294967292;
      }
    }
  }
  else
  {
    unsigned int v9 = 70;
    uint64_t v8 = 4294967293;
  }
  if (v9 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315650;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    rsize_t v14 = "ACMContextRemoveCredentialsByTypeAndScope";
    __int16 v15 = 2048;
    uint64_t v16 = (int)v8;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v11, 0x20u);
  }
  return v8;
}

uint64_t ACMContextRemoveCredentialsByValue(uint64_t a1, _DWORD *a2)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    uint64_t v6 = "ACMLib";
    __int16 v7 = 2080;
    uint64_t v8 = "ACMContextRemoveCredentialsByValue";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }
  return ACMContextRemoveCredentialsByValueAndScope(a1, a2, 1);
}

uint64_t ACMContextRemoveCredentialsByValueAndScope(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v18 = "ACMLib";
    __int16 v19 = 2080;
    unsigned int v20 = "ACMContextRemoveCredentialsByValueAndScope";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size_t size = 0;
  if (a1) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a3 == 2;
  }
  char v7 = !v6;
  unsigned int v8 = 70;
  uint64_t v9 = 4294967293;
  if (a2 && (v7 & 1) == 0)
  {
    uint64_t v10 = sub_100091D2C();
    if (v10 || (uint64_t v10 = GetSerializedRemoveCredentialSize(a1, a2, a3, &size), v10))
    {
      uint64_t v9 = v10;
      unsigned int v8 = 70;
    }
    else
    {
      size_t v11 = size;
      uint64_t v12 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v12, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 457, "ACMContextRemoveCredentialsByValueAndScope");
      if (v12)
      {
        uint64_t v13 = SerializeRemoveCredential(a1, a2, a3, v12, &size);
        if (!v13) {
          uint64_t v13 = sub_100091F10(a1, 6, 0, v12, size, 0, 0);
        }
        uint64_t v9 = v13;
        rsize_t v14 = size;
        acm_mem_free_info("<data>", v12, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 470, "ACMContextRemoveCredentialsByValueAndScope");
        acm_mem_free_data(v12, v14);
        if (v9) {
          unsigned int v8 = 70;
        }
        else {
          unsigned int v8 = 10;
        }
      }
      else
      {
        unsigned int v8 = 70;
        uint64_t v9 = 4294967292;
      }
    }
  }
  if (v8 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v18 = "ACMLib";
    __int16 v19 = 2080;
    unsigned int v20 = "ACMContextRemoveCredentialsByValueAndScope";
    __int16 v21 = 2048;
    uint64_t v22 = (int)v9;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v9;
}

uint64_t ACMContextContainsCredentialType(_OWORD *a1, int a2)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    BOOL v6 = "ACMLib";
    __int16 v7 = 2080;
    unsigned int v8 = "ACMContextContainsCredentialType";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }
  return ACMContextContainsCredentialTypeEx(a1, a2, 0);
}

uint64_t ACMContextContainsCredentialTypeEx(_OWORD *a1, int a2, int a3)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextContainsCredentialTypeEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  int v14 = 0;
  size_t v13 = 4;
  if (a1)
  {
    uint64_t v6 = sub_100091D2C();
    if (v6)
    {
      uint64_t v11 = v6;
      unsigned int v8 = 70;
    }
    else
    {
      __int16 v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info("<data>", v7, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 576, "ACMContextContainsCredentialTypeEx");
      unsigned int v8 = 70;
      if (v7)
      {
        *(_OWORD *)__int16 v7 = *a1;
        v7[4] = a2;
        v7[5] = a3;
        unsigned int v9 = sub_100091F10((uint64_t)a1, 4, 0, v7, 0x18uLL, &v14, &v13);
        if (v14) {
          unsigned int v10 = 0;
        }
        else {
          unsigned int v10 = -7;
        }
        if (v9) {
          uint64_t v11 = v9;
        }
        else {
          uint64_t v11 = v10;
        }
        acm_mem_free_info("<data>", v7, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 590, "ACMContextContainsCredentialTypeEx");
        acm_mem_free_data(v7, 0x18uLL);
        if (v11) {
          unsigned int v8 = 70;
        }
        else {
          unsigned int v8 = 10;
        }
      }
      else
      {
        uint64_t v11 = 4294967292;
      }
    }
  }
  else
  {
    unsigned int v8 = 70;
    uint64_t v11 = 4294967293;
  }
  if (v8 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextContainsCredentialTypeEx";
    __int16 v19 = 2048;
    uint64_t v20 = (int)v11;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v11;
}

uint64_t ACMGlobalContextAddCredential(unsigned int *a1)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    unsigned int v8 = "ACMLib";
    __int16 v9 = 2080;
    unsigned int v10 = "ACMGlobalContextAddCredential";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v6 = 0;
  if (a1)
  {
    uint64_t v2 = ACMContextCreate((uint64_t *)&v6);
    if (!v2) {
      uint64_t v2 = ACMContextAddCredentialWithScope(v6, a1, 2);
    }
    uint64_t v3 = v2;
    if (v6) {
      ACMContextDelete(v6, 1);
    }
    if (v3) {
      unsigned int v4 = 70;
    }
    else {
      unsigned int v4 = 10;
    }
  }
  else
  {
    unsigned int v4 = 70;
    uint64_t v3 = 4294967293;
  }
  if (v4 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    unsigned int v8 = "ACMLib";
    __int16 v9 = 2080;
    unsigned int v10 = "ACMGlobalContextAddCredential";
    __int16 v11 = 2048;
    uint64_t v12 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v3;
}

uint64_t ACMGlobalContextRemoveCredentialsByType(int a1)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    unsigned int v8 = "ACMLib";
    __int16 v9 = 2080;
    unsigned int v10 = "ACMGlobalContextRemoveCredentialsByType";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v6 = 0;
  uint64_t v2 = ACMContextCreate((uint64_t *)&v6);
  if (!v2) {
    uint64_t v2 = ACMContextRemoveCredentialsByTypeAndScope(v6, a1, 2);
  }
  uint64_t v3 = v2;
  if (v6) {
    ACMContextDelete(v6, 1);
  }
  if (v3) {
    unsigned int v4 = 70;
  }
  else {
    unsigned int v4 = 10;
  }
  if (v4 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    unsigned int v8 = "ACMLib";
    __int16 v9 = 2080;
    unsigned int v10 = "ACMGlobalContextRemoveCredentialsByType";
    __int16 v11 = 2048;
    uint64_t v12 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v3;
}

uint64_t ACMContextRemovePassphraseCredentialsByPurposeAndScope(_OWORD *a1, int a2, int a3)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315394;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    int v14 = "ACMContextRemovePassphraseCredentialsByPurposeAndScope";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }
  if (a1 || a3 == 2)
  {
    uint64_t v6 = sub_100091D2C();
    if (v6)
    {
      uint64_t v8 = v6;
      unsigned int v9 = 70;
    }
    else
    {
      __int16 v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info("<data>", v7, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 492, "ACMContextRemovePassphraseCredentialsByPurposeAndScope");
      if (v7)
      {
        if (a1)
        {
          *__int16 v7 = *a1;
        }
        else
        {
          *(void *)__int16 v7 = 0;
          *((void *)v7 + 1) = 0;
        }
        *((_DWORD *)v7 + 4) = a2;
        *((_DWORD *)v7 + 5) = a3;
        uint64_t v8 = sub_100091F10((uint64_t)a1, 16, 0, v7, 0x18uLL, 0, 0);
        acm_mem_free_info("<data>", v7, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 513, "ACMContextRemovePassphraseCredentialsByPurposeAndScope");
        acm_mem_free_data(v7, 0x18uLL);
        if (v8) {
          unsigned int v9 = 70;
        }
        else {
          unsigned int v9 = 10;
        }
      }
      else
      {
        unsigned int v9 = 70;
        uint64_t v8 = 4294967292;
      }
    }
  }
  else
  {
    unsigned int v9 = 70;
    uint64_t v8 = 4294967293;
  }
  if (v9 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315650;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    int v14 = "ACMContextRemovePassphraseCredentialsByPurposeAndScope";
    __int16 v15 = 2048;
    uint64_t v16 = (int)v8;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v11, 0x20u);
  }
  return v8;
}

uint64_t ACMContextReplacePassphraseCredentialsWithScope(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v18 = "ACMLib";
    __int16 v19 = 2080;
    uint64_t v20 = "ACMContextReplacePassphraseCredentialsWithScope";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size_t size = 0;
  if (a1) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a3 == 2;
  }
  char v7 = !v6;
  unsigned int v8 = 70;
  uint64_t v9 = 4294967293;
  if (a2 && (v7 & 1) == 0)
  {
    uint64_t SerializedReplacePassphraseCredentialSize = sub_100091D2C();
    if (SerializedReplacePassphraseCredentialSize
      || (uint64_t SerializedReplacePassphraseCredentialSize = GetSerializedReplacePassphraseCredentialSize(a1, a2, a3, &size),
          SerializedReplacePassphraseCredentialSize))
    {
      uint64_t v9 = SerializedReplacePassphraseCredentialSize;
      unsigned int v8 = 70;
    }
    else
    {
      size_t v11 = size;
      uint64_t v12 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v12, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 538, "ACMContextReplacePassphraseCredentialsWithScope");
      if (v12)
      {
        uint64_t v13 = SerializeReplacePassphraseCredential(a1, a2, a3, v12, &size);
        if (!v13) {
          uint64_t v13 = sub_100091F10(a1, 15, 0, v12, size, 0, 0);
        }
        uint64_t v9 = v13;
        bzero(v12, size);
        rsize_t v14 = size;
        acm_mem_free_info("<data>", v12, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 552, "ACMContextReplacePassphraseCredentialsWithScope");
        acm_mem_free_data(v12, v14);
        if (v9) {
          unsigned int v8 = 70;
        }
        else {
          unsigned int v8 = 10;
        }
      }
      else
      {
        unsigned int v8 = 70;
        uint64_t v9 = 4294967292;
      }
    }
  }
  if (v8 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v18 = "ACMLib";
    __int16 v19 = 2080;
    uint64_t v20 = "ACMContextReplacePassphraseCredentialsWithScope";
    __int16 v21 = 2048;
    uint64_t v22 = (int)v9;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v9;
}

uint64_t ACMContextContainsPassphraseCredentialWithPurpose(_OWORD *a1, int a2, int a3)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextContainsPassphraseCredentialWithPurpose";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  int v14 = 0;
  size_t v13 = 4;
  if (a1)
  {
    uint64_t v6 = sub_100091D2C();
    if (v6)
    {
      uint64_t v11 = v6;
      unsigned int v8 = 70;
    }
    else
    {
      char v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info("<data>", v7, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 614, "ACMContextContainsPassphraseCredentialWithPurpose");
      unsigned int v8 = 70;
      if (v7)
      {
        *(_OWORD *)char v7 = *a1;
        v7[4] = a2;
        v7[5] = a3;
        unsigned int v9 = sub_100091F10((uint64_t)a1, 13, 0, v7, 0x18uLL, &v14, &v13);
        if (v14) {
          unsigned int v10 = 0;
        }
        else {
          unsigned int v10 = -7;
        }
        if (v9) {
          uint64_t v11 = v9;
        }
        else {
          uint64_t v11 = v10;
        }
        acm_mem_free_info("<data>", v7, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 628, "ACMContextContainsPassphraseCredentialWithPurpose");
        acm_mem_free_data(v7, 0x18uLL);
        if (v11) {
          unsigned int v8 = 70;
        }
        else {
          unsigned int v8 = 10;
        }
      }
      else
      {
        uint64_t v11 = 4294967292;
      }
    }
  }
  else
  {
    unsigned int v8 = 70;
    uint64_t v11 = 4294967293;
  }
  if (v8 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextContainsPassphraseCredentialWithPurpose";
    __int16 v19 = 2048;
    uint64_t v20 = (int)v11;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v11;
}

uint64_t ACMContextVerifyPolicy(_OWORD *a1, char *a2, uint64_t a3)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v11 = "ACMLib";
    __int16 v12 = 2080;
    size_t v13 = "ACMContextVerifyPolicy";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  unsigned int v9 = a1;
  uint64_t v6 = LibCall_ACMContextVerifyPolicy_Block((uint64_t (*)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *))sub_100091534, (uint64_t)&v9, a1, a2, a3);
  if (v6) {
    unsigned int v7 = 70;
  }
  else {
    unsigned int v7 = 10;
  }
  if (v7 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v11 = "ACMLib";
    __int16 v12 = 2080;
    size_t v13 = "ACMContextVerifyPolicy";
    __int16 v14 = 2048;
    uint64_t v15 = (int)v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v6;
}

uint64_t ACMContextVerifyPolicyWithPreflight(_OWORD *a1, char *__s1, uint64_t a3, uint64_t a4)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    size_t v13 = "ACMLib";
    __int16 v14 = 2080;
    uint64_t v15 = "ACMContextVerifyPolicyWithPreflight";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v11 = a1;
  uint64_t v8 = LibCall_ACMContextVerifyPolicyWithPreflight_Block((uint64_t (*)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *))sub_100091534, (uint64_t)&v11, a1, __s1, a3, a4);
  if (v8) {
    unsigned int v9 = 70;
  }
  else {
    unsigned int v9 = 10;
  }
  if (v9 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    size_t v13 = "ACMLib";
    __int16 v14 = 2080;
    uint64_t v15 = "ACMContextVerifyPolicyWithPreflight";
    __int16 v16 = 2048;
    uint64_t v17 = (int)v8;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v8;
}

void ACMContextVerifyPolicyEx(_OWORD *a1, char *__s1, uint64_t a3, _DWORD *a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextVerifyPolicyEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  __int16 v14 = a1;
  LibCall_ACMContextVerifyPolicyEx_Block((uint64_t (*)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *))sub_100091534, (uint64_t)&v14, a1, __s1, a3, a4, a5, a6, a7);
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextVerifyPolicyEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

void ACMGlobalContextVerifyPolicy(char *a1, uint64_t a2, _DWORD *a3, unsigned int a4, uint64_t a5)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    size_t v13 = "ACMLib";
    __int16 v14 = 2080;
    uint64_t v15 = "ACMGlobalContextVerifyPolicy";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  *(void *)uint64_t v11 = 0;
  uint64_t v10 = ACMContextCreate((uint64_t *)v11);
  if (v10)
  {
    if (a5) {
      (*(void (**)(uint64_t, uint64_t, void, void))(a5 + 16))(a5, v10, 0, 0);
    }
  }
  else
  {
    ACMContextVerifyPolicyEx(*(_OWORD **)v11, a1, a2, a3, a4, 0xFFFFFFFFLL, a5);
  }
  if (*(void *)v11) {
    ACMContextDelete(*(_DWORD **)v11, 1);
  }
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    size_t v13 = "ACMLib";
    __int16 v14 = 2080;
    uint64_t v15 = "ACMGlobalContextVerifyPolicy";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

uint64_t ACMContextVerifyAclConstraint(_OWORD *a1, const void *a2, uint64_t a3, unsigned __int8 a4, _DWORD *a5, unsigned int a6, unsigned int a7, uint64_t a8)
{
  unsigned int v9 = a1;
  return LibCall_ACMContextVerifyAclConstraint((uint64_t)sub_100091534, (uint64_t)&v9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ACMContextVerifyAclConstraintForOperation(_OWORD *a1, const void *a2, uint64_t a3, const void *a4, unsigned int a5, unsigned __int8 a6, _DWORD *a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  uint64_t v11 = a1;
  return LibCall_ACMContextVerifyAclConstraintForOperation((uint64_t)sub_100091534, (uint64_t)&v11, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t ACMContextGetTrackingNumber(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

uint64_t ACMParseAclAndCopyConstraintCharacteristics(const void *a1, uint64_t a2, uint64_t a3)
{
  size_t __n = 4096;
  size_t size = 0;
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v22 = "ACMLib";
    __int16 v23 = 2080;
    BOOL v24 = "ACMParseAclAndCopyConstraintCharacteristics";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v6 = 4294967293;
  if (!a1 || !a2 || !a3) {
    goto LABEL_28;
  }
  uint64_t SerializedProcessAclSize = sub_100091D2C();
  if (SerializedProcessAclSize
    || (uint64_t SerializedProcessAclSize = GetSerializedProcessAclSize(0, (uint64_t)a1, a2, 0, 0, 0, 0, 0, &size),
        SerializedProcessAclSize))
  {
    uint64_t v6 = SerializedProcessAclSize;
LABEL_28:
    (*(void (**)(uint64_t, uint64_t, void, uint64_t))(a3 + 16))(a3, v6, 0, 4096);
    goto LABEL_19;
  }
  size_t v8 = size;
  unsigned int v9 = acm_mem_alloc_data(size);
  acm_mem_alloc_info("<data>", v9, v8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 744, "ACMParseAclAndCopyConstraintCharacteristics");
  if (!v9)
  {
    uint64_t v6 = 4294967292;
    goto LABEL_28;
  }
  uint64_t v10 = SerializeProcessAcl(0, a1, a2, 0, 0, 0, 0, 0, (uint64_t)v9, &size);
  if (v10)
  {
    uint64_t v6 = v10;
    __int16 v12 = 0;
    __int16 v14 = 0;
    size_t v11 = 4096;
    goto LABEL_15;
  }
  size_t v11 = 4096;
  __int16 v12 = acm_mem_alloc_data(0x1000uLL);
  acm_mem_alloc_info("<data>", v12, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 750, "ACMParseAclAndCopyConstraintCharacteristics");
  if (!v12)
  {
    __int16 v14 = 0;
LABEL_31:
    uint64_t v6 = 4294967292;
    goto LABEL_15;
  }
  uint64_t v13 = sub_100091F10(0, 20, 0, v9, size, v12, &__n);
  size_t v11 = __n;
  if (v13)
  {
    uint64_t v6 = v13;
    __int16 v14 = 0;
    goto LABEL_15;
  }
  __int16 v14 = acm_mem_alloc_data(__n);
  acm_mem_alloc_info("<data>", v14, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 756, "ACMParseAclAndCopyConstraintCharacteristics");
  size_t v11 = __n;
  if (!v14) {
    goto LABEL_31;
  }
  memcpy(v14, v12, __n);
  uint64_t v6 = 0;
  size_t v11 = __n;
LABEL_15:
  (*(void (**)(uint64_t, uint64_t, void *, size_t))(a3 + 16))(a3, v6, v14, v11);
  rsize_t v15 = size;
  acm_mem_free_info("<data>", v9, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 767, "ACMParseAclAndCopyConstraintCharacteristics");
  acm_mem_free_data(v9, v15);
  if (v12)
  {
    acm_mem_free_info("<data>", v12, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 770, "ACMParseAclAndCopyConstraintCharacteristics");
    acm_mem_free_data(v12, 0x1000uLL);
  }
  if (v14)
  {
    rsize_t v16 = __n;
    acm_mem_free_info("<data>", v14, __n, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 773, "ACMParseAclAndCopyConstraintCharacteristics");
    acm_mem_free_data(v14, v16);
  }
LABEL_19:
  if (v6) {
    unsigned int v17 = 70;
  }
  else {
    unsigned int v17 = 10;
  }
  if (v17 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v22 = "ACMLib";
    __int16 v23 = 2080;
    BOOL v24 = "ACMParseAclAndCopyConstraintCharacteristics";
    __int16 v25 = 2048;
    uint64_t v26 = (int)v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v6;
}

uint64_t ACMCredentialGetProperty(int *a1, int a2, uint64_t a3)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v12 = "ACMLib";
    __int16 v13 = 2080;
    __int16 v14 = "ACMCredentialGetProperty";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v6 = 70;
  uint64_t v7 = 4294967293;
  if (a1 && a3)
  {
    uint64_t v7 = LibCall_ACMCredentialGetPropertyData(a1, a2, &v10, &v9);
    if (v7)
    {
      unsigned int v6 = 70;
    }
    else
    {
      (*(void (**)(uint64_t, int *, uint64_t))(a3 + 16))(a3, v10, v9);
      unsigned int v6 = 10;
    }
  }
  if (v6 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    __int16 v12 = "ACMLib";
    __int16 v13 = 2080;
    __int16 v14 = "ACMCredentialGetProperty";
    __int16 v15 = 2048;
    uint64_t v16 = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v7;
}

void ACMRequirementGetSubrequirements(int *a1, uint64_t a2)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    uint64_t v9 = "ACMLib";
    __int16 v10 = 2080;
    size_t v11 = "ACMRequirementGetSubrequirements";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v8, 0x16u);
  }
  if (a1 && a2)
  {
    int v4 = *a1;
    if (*a1 == 4)
    {
      if (a1[4])
      {
        unint64_t v6 = 0;
        do
          (*(void (**)(uint64_t, void))(a2 + 16))(a2, *(void *)&a1[2 * v6++ + 5]);
        while (v6 < a1[4]);
      }
    }
    else if (v4 == 5)
    {
      if (a1[4])
      {
        unint64_t v7 = 0;
        do
          (*(void (**)(uint64_t, void))(a2 + 16))(a2, *(void *)&a1[2 * v7++ + 5]);
        while (v7 < a1[4]);
      }
    }
    else if (v4 == 7 && a1[5])
    {
      unint64_t v5 = 0;
      do
        (*(void (**)(uint64_t, void))(a2 + 16))(a2, *(void *)&a1[2 * v5++ + 6]);
      while (v5 < a1[5]);
    }
  }
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    uint64_t v9 = "ACMLib";
    __int16 v10 = 2080;
    size_t v11 = "ACMRequirementGetSubrequirements";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", (uint8_t *)&v8, 0x16u);
  }
}

uint64_t ACMRequirementGetProperty(int *a1, int a2, uint64_t a3)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v12 = "ACMLib";
    __int16 v13 = 2080;
    __int16 v14 = "ACMRequirementGetProperty";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  unint64_t v9 = 0;
  __int16 v10 = 0;
  unsigned int v6 = 70;
  uint64_t v7 = 4294967293;
  if (a1 && a3)
  {
    uint64_t v7 = LibCall_ACMRequirementGetPropertyData(a1, a2, &v10, &v9);
    if (v7)
    {
      unsigned int v6 = 70;
    }
    else
    {
      (*(void (**)(uint64_t, int *, unint64_t))(a3 + 16))(a3, v10, v9);
      unsigned int v6 = 10;
    }
  }
  if (v6 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    __int16 v12 = "ACMLib";
    __int16 v13 = 2080;
    __int16 v14 = "ACMRequirementGetProperty";
    __int16 v15 = 2048;
    uint64_t v16 = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v7;
}

uint64_t ACMRequirementGetProperties(int *a1, uint64_t a2)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    unint64_t v9 = "ACMLib";
    __int16 v10 = 2080;
    size_t v11 = "ACMRequirementGetProperties";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v8, 0x16u);
  }
  uint64_t v4 = 4294967293;
  unsigned int v5 = 70;
  if (a1 && a2)
  {
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 1, a1, 4);
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 2, a1 + 1, 4);
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 3, a1 + 2, 4);
    uint64_t v4 = 0;
    int v6 = *a1;
    unsigned int v5 = 10;
    switch(*a1)
    {
      case 1:
        goto LABEL_10;
      case 2:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 200, a1 + 4, 4);
        goto LABEL_13;
      case 3:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 100, a1 + 4, 4);
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 300, a1 + 5, 8);
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 302, a1 + 9, 8);
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 301, a1 + 13, 8);
        goto LABEL_13;
      case 4:
      case 5:
      case 6:
        break;
      case 7:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 700, a1 + 4, 4);
        goto LABEL_13;
      default:
        if (v6 != 20 && v6 != 21) {
          break;
        }
LABEL_10:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 100, a1 + 4, 4);
LABEL_13:
        uint64_t v4 = 0;
        unsigned int v5 = 10;
        break;
    }
  }
  if (v5 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315650;
    unint64_t v9 = "ACMLib";
    __int16 v10 = 2080;
    size_t v11 = "ACMRequirementGetProperties";
    __int16 v12 = 2048;
    uint64_t v13 = (int)v4;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v8, 0x20u);
  }
  return v4;
}

void ACMGetAclAuthMethod(__n128 *a1, uint64_t a2)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v6 = "ACMLib";
    __int16 v7 = 2080;
    int v8 = "ACMGetAclAuthMethod";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v4 = a1;
  LibCall_ACMGetAclAuthMethod_Block((uint64_t)sub_100091534, (uint64_t)&v4, a1, a2);
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v6 = "ACMLib";
    __int16 v7 = 2080;
    int v8 = "ACMGetAclAuthMethod";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

uint64_t ACMSetEnvironmentVariable(int a1, const void *a2, size_t a3)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    size_t v11 = "ACMLib";
    __int16 v12 = 2080;
    uint64_t v13 = "ACMSetEnvironmentVariable";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v9 = 0;
  uint64_t v6 = LibCall_ACMSetEnvironmentVariable((uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, void, void))sub_100091534, (uint64_t)&v9, a1, 0, 0, 0, a2, a3);
  if (v6) {
    unsigned int v7 = 70;
  }
  else {
    unsigned int v7 = 10;
  }
  if (v7 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    size_t v11 = "ACMLib";
    __int16 v12 = 2080;
    uint64_t v13 = "ACMSetEnvironmentVariable";
    __int16 v14 = 2048;
    uint64_t v15 = (int)v6;
    __int16 v16 = 1024;
    int v17 = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, var=%u.\n", buf, 0x26u);
  }
  return v6;
}

uint64_t ACMSetEnvironmentVariableWithAccessPolicy(int a1, _OWORD *a2, _OWORD *a3, uint64_t a4, const void *a5, size_t a6)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v17 = "ACMLib";
    __int16 v18 = 2080;
    __int16 v19 = "ACMSetEnvironmentVariableWithAccessPolicy";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v15 = 0;
  uint64_t v12 = LibCall_ACMSetEnvironmentVariable((uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, void, void))sub_100091534, (uint64_t)&v15, a1, a2, a3, a4, a5, a6);
  if (v12) {
    unsigned int v13 = 70;
  }
  else {
    unsigned int v13 = 10;
  }
  if (v13 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    int v17 = "ACMLib";
    __int16 v18 = 2080;
    __int16 v19 = "ACMSetEnvironmentVariableWithAccessPolicy";
    __int16 v20 = 2048;
    uint64_t v21 = (int)v12;
    __int16 v22 = 1024;
    int v23 = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, var=%u.\n", buf, 0x26u);
  }
  return v12;
}

uint64_t ACMGetEnvironmentVariable(int a1, uint64_t a2)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v9 = "ACMLib";
    __int16 v10 = 2080;
    size_t v11 = "ACMGetEnvironmentVariable";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v7 = 0;
  uint64_t v4 = LibCall_ACMGetEnvironmentVariable_Block((uint64_t (*)(uint64_t, uint64_t, void, int *, uint64_t, uint64_t, uint64_t))sub_100091534, (uint64_t)&v7, a1, a2);
  if (v4) {
    unsigned int v5 = 70;
  }
  else {
    unsigned int v5 = 10;
  }
  if (v5 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v9 = "ACMLib";
    __int16 v10 = 2080;
    size_t v11 = "ACMGetEnvironmentVariable";
    __int16 v12 = 2048;
    uint64_t v13 = (int)v4;
    __int16 v14 = 1024;
    int v15 = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, var=%u.\n", buf, 0x26u);
  }
  return v4;
}

uint64_t ACMKernelControl(int a1)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v6 = "ACMLib";
    __int16 v7 = 2080;
    int v8 = "ACMKernelControl";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v2 = LibCall_ACMKernelControl_Block((uint64_t)sub_100091534);
  if (v2) {
    unsigned int v3 = 70;
  }
  else {
    unsigned int v3 = 10;
  }
  if (v3 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v6 = "ACMLib";
    __int16 v7 = 2080;
    int v8 = "ACMKernelControl";
    __int16 v9 = 2048;
    uint64_t v10 = (int)v2;
    __int16 v11 = 1024;
    int v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, code=%u.\n", buf, 0x26u);
  }
  return v2;
}

uint64_t ACMSEPControl(const void *a1, size_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  return LibCall_ACMSEPControl_Block((uint64_t (*)(uint64_t, uint64_t, void, char *, uint64_t, unsigned int *, unint64_t *))sub_100091534, (uint64_t)&v4, a1, a2, 0, 0, 0, a3);
}

uint64_t ACMSEPControlEx(uint64_t a1, _DWORD *a2, unsigned int a3, const void *a4, size_t a5, uint64_t a6)
{
  uint64_t v7 = 0;
  return LibCall_ACMSEPControl_Block((uint64_t (*)(uint64_t, uint64_t, void, char *, uint64_t, unsigned int *, unint64_t *))sub_100091534, (uint64_t)&v7, a4, a5, a1, a2, a3, a6);
}

void ACMGlobalContextCredentialGetProperty(int a1, int a2, uint64_t a3)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v8 = "ACMLib";
    __int16 v9 = 2080;
    uint64_t v10 = "ACMGlobalContextCredentialGetProperty";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v6 = 0;
  LibCall_ACMGlobalContextCredentialGetProperty_Block((uint64_t)sub_100091534, (uint64_t)&v6, a1, a2, a3);
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v8 = "ACMLib";
    __int16 v9 = 2080;
    uint64_t v10 = "ACMGlobalContextCredentialGetProperty";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

void ACMContextCredentialGetProperty(__n128 *a1, unsigned __int32 a2, unsigned __int32 a3, uint64_t a4)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v16 = "ACMLib";
    __int16 v17 = 2080;
    __int16 v18 = "ACMContextCredentialGetProperty";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v10 = 256;
  if (a4)
  {
    __int16 v9 = a1;
    uint64_t v8 = LibCall_ACMContextCredentialGetProperty((uint64_t (*)(uint64_t, uint64_t, void, __n128 *, uint64_t, uint64_t, uint64_t, __n128))sub_100091534, (uint64_t)&v9, a1, a2, a3, (uint64_t)buf, (uint64_t)&v10);
    (*(void (**)(uint64_t, uint64_t, uint8_t *, uint64_t))(a4 + 16))(a4, v8, buf, v10);
  }
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int16 v11 = 136315394;
    int v12 = "ACMLib";
    __int16 v13 = 2080;
    __int16 v14 = "ACMContextCredentialGetProperty";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", v11, 0x16u);
  }
}

uint64_t ACMContextSetData(_OWORD *a1, int a2, const void *a3, size_t a4)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315394;
    int v12 = "ACMLib";
    __int16 v13 = 2080;
    __int16 v14 = "ACMContextSetData";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }
  uint64_t v8 = ACMContextSetDataEx(a1, a2, 0, 0, a3, a4);
  if (v8) {
    unsigned int v9 = 70;
  }
  else {
    unsigned int v9 = 10;
  }
  if (v9 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315650;
    int v12 = "ACMLib";
    __int16 v13 = 2080;
    __int16 v14 = "ACMContextSetData";
    __int16 v15 = 2048;
    uint64_t v16 = (int)v8;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v11, 0x20u);
  }
  return v8;
}

uint64_t ACMContextSetDataEx(_OWORD *a1, int a2, _DWORD *a3, unsigned int a4, const void *a5, size_t a6)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v17 = "ACMLib";
    __int16 v18 = 2080;
    __int16 v19 = "ACMContextSetDataEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  __int16 v15 = a1;
  uint64_t v12 = LibCall_ACMContextSetData((uint64_t (*)(uint64_t, uint64_t, void, void *, size_t, void, void))sub_100091534, (uint64_t)&v15, a1, a2, a3, a4, a5, a6);
  if (v12) {
    unsigned int v13 = 70;
  }
  else {
    unsigned int v13 = 10;
  }
  if (v13 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    __int16 v17 = "ACMLib";
    __int16 v18 = 2080;
    __int16 v19 = "ACMContextSetDataEx";
    __int16 v20 = 2048;
    uint64_t v21 = (int)v12;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v12;
}

uint64_t ACMContextGetData(_OWORD *a1, int a2, uint64_t a3)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    uint64_t v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextGetData";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v9, 0x16u);
  }
  uint64_t Data = ACMContextGetDataEx(a1, a2, 0, 0, a3);
  if (Data) {
    unsigned int v7 = 70;
  }
  else {
    unsigned int v7 = 10;
  }
  if (v7 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315650;
    uint64_t v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextGetData";
    __int16 v13 = 2048;
    uint64_t v14 = (int)Data;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v9, 0x20u);
  }
  return Data;
}

uint64_t ACMContextGetDataEx(_OWORD *a1, int a2, _DWORD *a3, unsigned int a4, uint64_t a5)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int size_4 = 136315394;
    BOOL v24 = "ACMLib";
    __int16 v25 = 2080;
    uint64_t v26 = "ACMContextGetDataEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&size_4, 0x16u);
  }
  unsigned int size = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 4;
  __int16 v19 = a1;
  uint64_t v10 = LibCall_ACMContextGetData((uint64_t (*)(uint64_t, uint64_t, void, void *, size_t, uint64_t, uint64_t))sub_100091534, (uint64_t)&v19, a1, a2, 1, a3, a4, (uint64_t)&size, (uint64_t)&v21);
  if (!v10)
  {
    uint64_t v11 = size;
    if (size)
    {
      uint64_t v12 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v12, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 1199, "ACMContextGetDataEx");
      if (!v12)
      {
        unsigned int v16 = 70;
        uint64_t v14 = 4294967292;
        goto LABEL_15;
      }
      uint64_t v20 = size;
      __int16 v18 = a1;
      uint64_t v13 = LibCall_ACMContextGetData((uint64_t (*)(uint64_t, uint64_t, void, void *, size_t, uint64_t, uint64_t))sub_100091534, (uint64_t)&v18, a1, a2, 0, a3, a4, (uint64_t)v12, (uint64_t)&v20);
      uint64_t v14 = v13;
      if (a5 && !v13) {
        (*(void (**)(uint64_t, void *, uint64_t))(a5 + 16))(a5, v12, v20);
      }
      rsize_t v15 = size;
      acm_mem_free_info("<data>", v12, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 1213, "ACMContextGetDataEx");
      acm_mem_free_data(v12, v15);
      if (v14) {
        goto LABEL_11;
      }
    }
    else if (a5)
    {
      (*(void (**)(uint64_t, void, void))(a5 + 16))(a5, 0, 0);
    }
    uint64_t v14 = 0;
    unsigned int v16 = 10;
    goto LABEL_15;
  }
  uint64_t v14 = v10;
LABEL_11:
  unsigned int v16 = 70;
LABEL_15:
  if (v16 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int size_4 = 136315650;
    BOOL v24 = "ACMLib";
    __int16 v25 = 2080;
    uint64_t v26 = "ACMContextGetDataEx";
    __int16 v27 = 2048;
    uint64_t v28 = (int)v14;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&size_4, 0x20u);
  }
  return v14;
}

uint64_t ACMContextGetDataProperty(_OWORD *a1, unsigned __int16 a2, unsigned __int16 a3, uint64_t a4)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315394;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextGetDataProperty";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }
  uint64_t Data = ACMContextGetData(a1, a2 | (a3 << 16), a4);
  if (Data) {
    unsigned int v9 = 70;
  }
  else {
    unsigned int v9 = 10;
  }
  if (v9 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315650;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextGetDataProperty";
    __int16 v15 = 2048;
    uint64_t v16 = (int)Data;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v11, 0x20u);
  }
  return Data;
}

uint64_t ACMContextGetInfo(long long *a1, int a2, void *a3)
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v11 = "ACMLib";
    __int16 v12 = 2080;
    __int16 v13 = "ACMContextGetInfo";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  unsigned int v9 = a1;
  uint64_t v6 = LibCall_ACMContextGetInfo((uint64_t (*)(uint64_t, uint64_t, void, int *, uint64_t, _OWORD *, unint64_t *))sub_100091534, (uint64_t)&v9, a1, a2, a3);
  if (v6) {
    unsigned int v7 = 70;
  }
  else {
    unsigned int v7 = 10;
  }
  if (v7 >= byte_1000E3741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    int v11 = "ACMLib";
    __int16 v12 = 2080;
    __int16 v13 = "ACMContextGetInfo";
    __int16 v14 = 2048;
    uint64_t v15 = (int)v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v6;
}

uint64_t ACMPing()
{
  uint64_t v1 = 0;
  return LibCall_ACMPing((uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_100091534, (uint64_t)&v1, 29);
}

void sub_100096630()
{
  if (byte_1000E3741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    unsigned int v5 = "ACMLib";
    __int16 v6 = 2080;
    unsigned int v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  if (IOConnectCallScalarMethod(dword_1000E4260, 2u, 0, 0, &output, &outputCnt)) {
    goto LABEL_8;
  }
  unsigned __int8 v0 = output;
  unsigned int v1 = output;
  byte_1000E3741 = output;
  if (output <= 0x1EuLL && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    unsigned int v5 = "ACMLib";
    __int16 v6 = 2080;
    unsigned int v7 = "updateLogLevelFromKext";
    __int16 v8 = 1024;
    int v9 = v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: log level set to %d.\n", buf, 0x1Cu);
LABEL_8:
    unsigned int v1 = byte_1000E3741;
  }
  if (v1 <= 0xA && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    unsigned int v5 = "ACMLib";
    __int16 v6 = 2080;
    unsigned int v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

unsigned char *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, void *a6)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_BuildCommand");
  }
  __int16 v12 = 0;
  if (a5) {
    BOOL v13 = a4 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8)
    {
      __int16 v12 = 0;
    }
    else
    {
      __int16 v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info("<data>", v12, a5 + 8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 22, "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)__int16 v12 = 1396920900;
        void v12[4] = a1;
        v12[5] = a2;
        v12[6] = a3;
        if (a5) {
          memcpy(v12 + 8, a4, a5);
        }
      }
    }
  }
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: returning.\n", "ACM", "LibCall_BuildCommand");
  }
  return v12;
}

uint64_t LibCall_ACMContextCreate(uint64_t (*a1)(uint64_t, uint64_t, void, void, void, unsigned char *, uint64_t *), uint64_t a2, void *a3, unsigned char *a4, int a5)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreate");
  }
  unsigned int v10 = 70;
  uint64_t v11 = 4294967293;
  if (!a1 || !a3) {
    goto LABEL_25;
  }
  __int16 v12 = acm_mem_alloc(0x14uLL);
  acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 50, "LibCall_ACMContextCreate");
  if (!v12)
  {
    unsigned int v10 = 70;
    uint64_t v11 = 4294967292;
    goto LABEL_25;
  }
  memset(v19, 0, sizeof(v19));
  if (a5)
  {
    uint64_t v18 = 21;
    uint64_t v13 = a1(a2, 36, 0, 0, 0, v19, &v18);
    if (!v13)
    {
      if (v18 != 21)
      {
        uint64_t v11 = 4294967291;
        goto LABEL_23;
      }
      uint64_t v11 = 0;
      goto LABEL_20;
    }
    uint64_t v11 = v13;
    if (v13 != -3)
    {
LABEL_23:
      acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 89, "LibCall_ACMContextCreate");
      acm_mem_free(v12, 0x14uLL);
      unsigned int v10 = 70;
      goto LABEL_25;
    }
  }
  uint64_t v18 = 17;
  unsigned int v14 = a1(a2, 1, 0, 0, 0, v19, &v18);
  if (v18 == 17) {
    unsigned int v15 = 0;
  }
  else {
    unsigned int v15 = -5;
  }
  if (v14) {
    uint64_t v11 = v14;
  }
  else {
    uint64_t v11 = v15;
  }
  if (!v14 && v18 == 17)
  {
LABEL_20:
    int v16 = *(_DWORD *)&v19[17];
    *(_OWORD *)__int16 v12 = *(_OWORD *)v19;
    void v12[4] = v16;
    *a3 = v12;
    if (a4) {
      *a4 = v19[16];
    }
  }
  if (v11) {
    goto LABEL_23;
  }
  unsigned int v10 = 10;
LABEL_25:
  if (v10 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreate", (int)v11);
  }
  return v11;
}

_DWORD *LibCall_ACMContextCreateWithExternalForm(uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, uint64_t, void *, uint64_t *), uint64_t a2, _OWORD *a3, uint64_t a4, unsigned char *a5, int a6)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreateWithExternalForm");
  }
  __int16 v12 = 0;
  unsigned int v13 = 70;
  int v14 = -3;
  if (a1 && a3 && a4 == 16)
  {
    memset(v21, 0, 9);
    if (a6)
    {
      uint64_t v20 = 9;
      int v15 = a1(a2, 37, 0, a3, 16, v21, &v20);
      if (!v15)
      {
        if (v20 == 9)
        {
          int v14 = 0;
          goto LABEL_19;
        }
        int v14 = -5;
        goto LABEL_28;
      }
      int v14 = v15;
      if (v15 != -3) {
        goto LABEL_28;
      }
    }
    uint64_t v20 = 5;
    int v16 = a1(a2, 18, 0, a3, 16, v21, &v20);
    if (v20 == 5) {
      int v17 = 0;
    }
    else {
      int v17 = -5;
    }
    if (v16) {
      int v14 = v16;
    }
    else {
      int v14 = v17;
    }
    if (!v16 && v20 == 5)
    {
LABEL_19:
      if (LODWORD(v21[0]))
      {
        __int16 v12 = acm_mem_alloc(0x14uLL);
        acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 128, "LibCall_ACMContextCreateWithExternalForm");
        if (!v12)
        {
          unsigned int v13 = 70;
          int v14 = -4;
          goto LABEL_31;
        }
        int v18 = *(_DWORD *)((char *)v21 + 5);
        *(_OWORD *)__int16 v12 = *a3;
        void v12[4] = v18;
        if (a5) {
          *a5 = BYTE4(v21[0]);
        }
        if (v14)
        {
          acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 147, "LibCall_ACMContextCreateWithExternalForm");
          acm_mem_free(v12, 0x14uLL);
LABEL_29:
          unsigned int v13 = 70;
          goto LABEL_31;
        }
      }
      else
      {
        __int16 v12 = 0;
      }
      goto LABEL_30;
    }
LABEL_28:
    __int16 v12 = 0;
    if (v14) {
      goto LABEL_29;
    }
LABEL_30:
    int v14 = 0;
    unsigned int v13 = 10;
  }
LABEL_31:
  if (v13 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreateWithExternalForm", v14);
  }
  return v12;
}

uint64_t LibCall_ACMContextDelete(void (*a1)(uint64_t, uint64_t, void, void *, uint64_t, void, void), uint64_t a2, void *a3, int a4)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextDelete");
  }
  if (a1 && a3)
  {
    if (a4) {
      a1(a2, 2, 0, a3, 16, 0, 0);
    }
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_7:
    acm_mem_free_info("ACMHandleWithPayload", a3, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 172, "LibCall_ACMContextDelete");
    acm_mem_free(a3, 0x14uLL);
    uint64_t v8 = 0;
    unsigned int v9 = 10;
    goto LABEL_8;
  }
  unsigned int v9 = 70;
  uint64_t v8 = 4294967293;
LABEL_8:
  if (v9 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextDelete", (int)v8);
  }
  return v8;
}

uint64_t LibCall_ACMContexAddCredentialWithScope(uint64_t (*a1)(uint64_t, uint64_t, void, void *, size_t, void, void), uint64_t a2, _OWORD *a3, unsigned int *a4, int a5)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContexAddCredentialWithScope");
  }
  size_t size = 0;
  if (a3) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = a5 == 2;
  }
  char v11 = !v10;
  unsigned int v12 = 70;
  uint64_t v13 = 4294967293;
  if (a4 && (v11 & 1) == 0)
  {
    uint64_t SerializedAddCredentialSize = GetSerializedAddCredentialSize((uint64_t)a3, a4, a5, &size);
    if (SerializedAddCredentialSize)
    {
      uint64_t v13 = SerializedAddCredentialSize;
      unsigned int v12 = 70;
    }
    else
    {
      size_t v15 = size;
      int v16 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v16, v15, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 192, "LibCall_ACMContexAddCredentialWithScope");
      if (v16)
      {
        uint64_t v17 = SerializeAddCredential(a3, a4, a5, (uint64_t)v16, &size);
        if (!v17) {
          uint64_t v17 = a1(a2, 5, 0, v16, size, 0, 0);
        }
        uint64_t v13 = v17;
        rsize_t v18 = size;
        acm_mem_free_info("<data>", v16, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 203, "LibCall_ACMContexAddCredentialWithScope");
        acm_mem_free_data(v16, v18);
        if (v13) {
          unsigned int v12 = 70;
        }
        else {
          unsigned int v12 = 10;
        }
      }
      else
      {
        unsigned int v12 = 70;
        uint64_t v13 = 4294967292;
      }
    }
  }
  if (v12 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContexAddCredentialWithScope", (int)v13);
  }
  return v13;
}

uint64_t LibCall_ACMContexRemoveCredentialsByTypeAndScope(uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, uint64_t, void, void), uint64_t a2, _OWORD *a3, int a4, int a5)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContexRemoveCredentialsByTypeAndScope");
  }
  if (a3 || a5 == 2)
  {
    BOOL v10 = acm_mem_alloc_data(0x18uLL);
    acm_mem_alloc_info("<data>", v10, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 217, "LibCall_ACMContexRemoveCredentialsByTypeAndScope");
    if (v10)
    {
      if (a3)
      {
        _OWORD *v10 = *a3;
      }
      else
      {
        *(void *)BOOL v10 = 0;
        *((void *)v10 + 1) = 0;
      }
      *((_DWORD *)v10 + 4) = a4;
      *((_DWORD *)v10 + 5) = a5;
      uint64_t v11 = a1(a2, 9, 0, v10, 24, 0, 0);
      acm_mem_free_info("<data>", v10, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 233, "LibCall_ACMContexRemoveCredentialsByTypeAndScope");
      acm_mem_free_data(v10, 0x18uLL);
      if (v11) {
        unsigned int v12 = 70;
      }
      else {
        unsigned int v12 = 10;
      }
    }
    else
    {
      unsigned int v12 = 70;
      uint64_t v11 = 4294967292;
    }
  }
  else
  {
    unsigned int v12 = 70;
    uint64_t v11 = 4294967293;
  }
  if (v12 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContexRemoveCredentialsByTypeAndScope", (int)v11);
  }
  return v11;
}

uint64_t LibCall_ACMContextRemoveCredentialsByValueAndScope(uint64_t (*a1)(uint64_t, uint64_t, void, void *, size_t, void, void), uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextRemoveCredentialsByValueAndScope");
  }
  size_t size = 0;
  if (a3) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = a5 == 2;
  }
  char v11 = !v10;
  unsigned int v12 = 70;
  uint64_t v13 = 4294967293;
  if (a4 && (v11 & 1) == 0)
  {
    uint64_t v14 = GetSerializedRemoveCredentialSize(a3, a4, a5, &size);
    if (v14)
    {
      uint64_t v13 = v14;
      unsigned int v12 = 70;
    }
    else
    {
      size_t v15 = size;
      int v16 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v16, v15, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 251, "LibCall_ACMContextRemoveCredentialsByValueAndScope");
      if (v16)
      {
        uint64_t v17 = SerializeRemoveCredential(a3, a4, a5, v16, &size);
        if (!v17) {
          uint64_t v17 = a1(a2, 6, 0, v16, size, 0, 0);
        }
        uint64_t v13 = v17;
        rsize_t v18 = size;
        acm_mem_free_info("<data>", v16, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 264, "LibCall_ACMContextRemoveCredentialsByValueAndScope");
        acm_mem_free_data(v16, v18);
        if (v13) {
          unsigned int v12 = 70;
        }
        else {
          unsigned int v12 = 10;
        }
      }
      else
      {
        unsigned int v12 = 70;
        uint64_t v13 = 4294967292;
      }
    }
  }
  if (v12 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextRemoveCredentialsByValueAndScope", (int)v13);
  }
  return v13;
}

uint64_t LibCall_ACMContextVerifyPolicyAndCopyRequirementEx(uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, BOOL *a9, void *a10)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
  }
  size_t v32 = 0;
  size_t size = 0;
  __int16 v30 = 0;
  unint64_t v31 = 4096;
  unsigned int v18 = 70;
  uint64_t v19 = 4294967293;
  size_t v29 = 0;
  if (a1 && a3 && __s1 && a9)
  {
    if ((a6 != 0) != (a7 != 0))
    {
      unsigned int v18 = 70;
      uint64_t v19 = 4294967293;
    }
    else
    {
      uint64_t SerializedVerifyPolicySize = GetSerializedVerifyPolicySize((uint64_t)a3, __s1, a5, a8, a6, a7, &size);
      if (SerializedVerifyPolicySize)
      {
        uint64_t v19 = SerializedVerifyPolicySize;
        unsigned int v18 = 70;
      }
      else
      {
        size_t v21 = size;
        __int16 v22 = acm_mem_alloc_data(size);
        acm_mem_alloc_info("<data>", v22, v21, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 293, "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
        if (v22)
        {
          size_t v32 = size;
          uint64_t v23 = SerializeVerifyPolicy(a3, __s1, a5, a8, a6, a7, v22, &v32);
          if (v23)
          {
            uint64_t v19 = v23;
            BOOL v24 = 0;
          }
          else
          {
            BOOL v24 = (unsigned int *)acm_mem_alloc_data(0x1000uLL);
            acm_mem_alloc_info("<data>", v24, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 300, "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
            if (v24)
            {
              uint64_t v25 = a1(a2, 3, 0, v22, v32, v24, &v31);
              if (v25)
              {
                uint64_t v19 = v25;
              }
              else
              {
                unint64_t v26 = v31 - 4;
                if (v31 < 4)
                {
                  uint64_t v19 = 4294967291;
                }
                else
                {
                  *a9 = *v24 != 0;
                  if (a10)
                  {
                    uint64_t v19 = DeserializeRequirement(v24 + 1, v26, &v30, &v29);
                    if (!v19) {
                      *a10 = v30;
                    }
                  }
                  else
                  {
                    uint64_t v19 = 0;
                  }
                }
              }
            }
            else
            {
              uint64_t v19 = 4294967292;
            }
          }
          rsize_t v27 = size;
          acm_mem_free_info("<data>", v22, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 324, "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
          acm_mem_free_data(v22, v27);
          if (v24)
          {
            acm_mem_free_info("<data>", v24, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 327, "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
            acm_mem_free_data(v24, 0x1000uLL);
          }
          if (v19) {
            unsigned int v18 = 70;
          }
          else {
            unsigned int v18 = 10;
          }
        }
        else
        {
          unsigned int v18 = 70;
          uint64_t v19 = 4294967292;
        }
      }
    }
  }
  if (v18 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx", (int)v19);
  }
  return v19;
}

uint64_t LibCall_ACMRequirementDelete(uint64_t a1, int *a2)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMRequirementDelete");
  }
  unsigned int v4 = 70;
  uint64_t v5 = 4294967293;
  if (a1 && a2)
  {
    uint64_t v5 = Util_DeallocRequirement(a2);
    if (v5) {
      unsigned int v4 = 70;
    }
    else {
      unsigned int v4 = 10;
    }
  }
  if (v4 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMRequirementDelete", (int)v5);
  }
  return v5;
}

uint64_t LibCall_ACMKernelControl(uint64_t (*a1)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t), uint64_t a2, int a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = a1;
  if (gACMLoggingLevel <= 0xAu) {
    a1 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t))printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernelControl");
  }
  if (!v13) {
    goto LABEL_16;
  }
  BOOL v14 = a5 != 0;
  if (a4) {
    BOOL v14 = a5 - 4097 < 0xFFFFFFFFFFFFF000;
  }
  if (v14)
  {
LABEL_16:
    unsigned int v18 = 70;
    uint64_t v17 = 4294967293;
  }
  else
  {
    uint64_t v20 = (uint64_t)&v20;
    __chkstk_darwin(a1);
    size_t v15 = (_DWORD *)((char *)&v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0));
    _DWORD *v15 = a3;
    int v16 = v15 + 1;
    if (a5)
    {
      memcpy(v15 + 1, a4, a5);
      int v16 = (_DWORD *)((char *)v16 + a5);
    }
    if (v16 != (_DWORD *)((char *)v15 + a5 + 4)) {
      sub_10009B834();
    }
    uint64_t v17 = v13(a2, 26, 0, (char *)&v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0), a5 + 4, a6, a7);
    if (v17) {
      unsigned int v18 = 70;
    }
    else {
      unsigned int v18 = 10;
    }
  }
  if (v18 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernelControl", (int)v17);
  }
  return v17;
}

_DWORD *LibCall_ACMCredentialDelete(_DWORD *a1)
{
  if (a1) {
    return (_DWORD *)Util_DeallocCredential(a1);
  }
  return a1;
}

unsigned int *LibCall_ACMCredentialGetType(unsigned int *result)
{
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

uint64_t LibCall_ACMCredentialSetProperty(int *a1, int a2, _OWORD *__src, size_t __n)
{
  if (!a1) {
    return 4294967293;
  }
  int v4 = __n;
  if ((__src != 0) != (__n != 0)) {
    return 4294967293;
  }
  uint64_t result = 4294967293;
  if (a2 > 399)
  {
    if (a2 > 601)
    {
      if (a2 <= 801)
      {
        if (a2 != 602)
        {
          if (a2 == 701)
          {
            if (__n <= 0x80 && *a1 == 13)
            {
              a1[8] = __n;
              BOOL v14 = a1 + 9;
LABEL_118:
              memcpy(v14, __src, __n);
              return 0;
            }
          }
          else if (a2 == 801 && __n == 16 && *a1 == 17)
          {
            uint64_t result = 0;
            *((_OWORD *)a1 + 2) = *__src;
          }
          return result;
        }
        BOOL v13 = *a1 == 12 || *a1 == 15;
        if (__n != 4 || !v13) {
          return result;
        }
LABEL_79:
        uint64_t result = 0;
        a1[9] = *(_DWORD *)__src;
        return result;
      }
      if (a2 == 802)
      {
        if (__n != 65 || *a1 != 17) {
          return result;
        }
        uint64_t result = 0;
        *((_OWORD *)a1 + 3) = *__src;
        long long v11 = __src[1];
        long long v16 = __src[2];
        long long v17 = __src[3];
        *((unsigned char *)a1 + 112) = *((unsigned char *)__src + 64);
        *((_OWORD *)a1 + 5) = v16;
        *((_OWORD *)a1 + 6) = v17;
        goto LABEL_92;
      }
      if (a2 != 901)
      {
        if (a2 == 1001 && __n <= 0x80 && *a1 == 21)
        {
          memcpy(a1 + 9, __src, __n);
          uint64_t result = 0;
          a1[8] = v4;
        }
        return result;
      }
      if (__n != 32 || *a1 != 20) {
        return result;
      }
    }
    else
    {
      if (a2 > 501)
      {
        switch(a2)
        {
          case 502:
            if (__n == 16 && *a1 == 10)
            {
LABEL_102:
              uint64_t result = 0;
              *(_OWORD *)(a1 + 13) = *__src;
            }
            break;
          case 503:
            if (__n == 16 && *a1 == 10)
            {
              uint64_t result = 0;
              long long v15 = *__src;
LABEL_99:
              *(_OWORD *)(a1 + 17) = v15;
            }
            break;
          case 601:
            BOOL v9 = *a1 == 12 || *a1 == 15;
            BOOL v10 = v9;
            if (__n == 4 && v10)
            {
LABEL_64:
              uint64_t result = 0;
              a1[8] = *(_DWORD *)__src;
            }
            break;
        }
        return result;
      }
      if (a2 != 400)
      {
        if (a2 != 401)
        {
          if (a2 == 501 && __n == 16 && *a1 == 10)
          {
LABEL_16:
            uint64_t result = 0;
            *(_OWORD *)(a1 + 9) = *__src;
          }
          return result;
        }
        if (__n != 24 || *a1 != 7) {
          return result;
        }
        uint64_t result = 0;
        long long v11 = *__src;
        *((void *)a1 + 10) = *((void *)__src + 2);
LABEL_92:
        *((_OWORD *)a1 + 4) = v11;
        return result;
      }
      if (__n != 32 || *a1 != 7) {
        return result;
      }
    }
    uint64_t result = 0;
    long long v18 = __src[1];
    *((_OWORD *)a1 + 2) = *__src;
    *((_OWORD *)a1 + 3) = v18;
    return result;
  }
  if (a2 > 199)
  {
    switch(a2)
    {
      case 300:
        if (__n == 16 && *a1 == 3) {
          goto LABEL_16;
        }
        break;
      case 301:
        if (__n == 32 && *a1 == 3)
        {
          uint64_t result = 0;
          long long v15 = *__src;
          *(_OWORD *)(a1 + 21) = __src[1];
          goto LABEL_99;
        }
        break;
      case 302:
        if (__n == 16 && *a1 == 3) {
          goto LABEL_102;
        }
        break;
      case 303:
        if (__n == 65 && *a1 == 3)
        {
          uint64_t result = 0;
          *(_OWORD *)(a1 + 30) = *__src;
          long long v19 = __src[1];
          long long v20 = __src[2];
          long long v21 = __src[3];
          *((unsigned char *)a1 + 184) = *((unsigned char *)__src + 64);
          *(_OWORD *)(a1 + 42) = v21;
          *(_OWORD *)(a1 + 38) = v20;
          *(_OWORD *)(a1 + 34) = v19;
        }
        break;
      case 304:
        if (__n == 16 && *a1 == 3)
        {
          uint64_t result = 0;
          *(_OWORD *)((char *)a1 + 185) = *__src;
        }
        break;
      case 305:
        if (__n == 4 && *a1 == 3)
        {
          uint64_t result = 0;
          *(int *)((char *)a1 + 201) = *(_DWORD *)__src;
        }
        break;
      case 306:
        if (__n <= 0x80 && *a1 == 3)
        {
          memcpy((char *)a1 + 209, __src, __n);
          uint64_t result = 0;
          *(int *)((char *)a1 + 205) = v4;
        }
        break;
      default:
        if (a2 == 200)
        {
          if (__n <= 0x80 && *a1 == 2)
          {
            a1[9] = __n;
            BOOL v14 = a1 + 10;
            goto LABEL_118;
          }
        }
        else if (a2 == 201 && __n == 4 && *a1 == 2)
        {
          goto LABEL_64;
        }
        break;
    }
    return result;
  }
  if (a2 > 100)
  {
    if (a2 == 101)
    {
      if (__n == 4)
      {
        switch(*a1)
        {
          case 1:
          case 3:
          case 9:
          case 10:
            goto LABEL_64;
          case 2:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
            return result;
          default:
            if (*a1 == 18) {
              goto LABEL_64;
            }
            break;
        }
      }
      return result;
    }
    if (a2 != 102 || __n != 4 || *a1 != 1) {
      return result;
    }
    goto LABEL_79;
  }
  if (a2 == 5)
  {
    if (__n == 4)
    {
      uint64_t result = 0;
      a1[3] = *(_DWORD *)__src;
    }
  }
  else if (a2 == 100 && __n == 16)
  {
    int v7 = *a1;
    if (*a1 > 8)
    {
      if (v7 == 9)
      {
        uint64_t v8 = a1 + 10;
        a1[9] = 16;
      }
      else
      {
        if (v7 != 18) {
          return result;
        }
        uint64_t v8 = a1 + 9;
      }
    }
    else if (v7 == 1)
    {
      uint64_t v8 = a1 + 11;
      a1[10] = 16;
    }
    else
    {
      if (v7 != 3) {
        return result;
      }
      uint64_t v8 = a1 + 26;
      a1[25] = 16;
    }
    uint64_t result = 0;
    _OWORD *v8 = *__src;
  }
  return result;
}

uint64_t LibCall_ACMCredentialGetPropertyData(int *a1, int a2, int **a3, uint64_t *a4)
{
  uint64_t result = 4294967293;
  if (!a1 || !a3 || !a4) {
    return result;
  }
  if (a2 > 399)
  {
    if (a2 > 601)
    {
      if (a2 > 801)
      {
        if (a2 == 802)
        {
          if (*a1 != 17) {
            return result;
          }
          long long v11 = a1 + 12;
LABEL_87:
          uint64_t v12 = 65;
          BOOL v13 = v11;
          uint64_t v14 = 65;
        }
        else
        {
          if (a2 != 901)
          {
            if (a2 != 1001 || *a1 != 21) {
              return result;
            }
            long long v15 = a1 + 9;
            if (Util_isNullOrZeroMemory((unsigned char *)a1 + 36, 128))
            {
              long long v15 = 0;
              uint64_t v10 = 0;
            }
            else
            {
              uint64_t v10 = a1[8];
            }
            uint64_t result = 0;
            *a3 = v15;
LABEL_99:
            *a4 = v10;
            return result;
          }
          if (*a1 != 20) {
            return result;
          }
          long long v11 = a1 + 8;
          uint64_t v12 = 32;
          BOOL v13 = v11;
          uint64_t v14 = 32;
        }
      }
      else
      {
        if (a2 == 602)
        {
          if (*a1 != 15 && *a1 != 12) {
            return result;
          }
          goto LABEL_61;
        }
        if (a2 == 701)
        {
          if (*a1 != 13) {
            return result;
          }
          uint64_t result = 0;
          *a3 = a1 + 9;
          uint64_t v10 = a1[8];
          goto LABEL_99;
        }
        if (a2 != 801 || *a1 != 17) {
          return result;
        }
        long long v11 = a1 + 8;
        uint64_t v12 = 16;
        BOOL v13 = v11;
        uint64_t v14 = 16;
      }
      BOOL isNullOrZeroMemory = Util_isNullOrZeroMemory(v13, v14);
      uint64_t result = 0;
      BOOL v20 = !isNullOrZeroMemory;
      if (isNullOrZeroMemory) {
        long long v21 = 0;
      }
      else {
        long long v21 = (int *)v11;
      }
      if (v20) {
        uint64_t v22 = v12;
      }
      else {
        uint64_t v22 = 0;
      }
      *a3 = v21;
      *a4 = v22;
      return result;
    }
    if (a2 > 501)
    {
      if (a2 == 502)
      {
        if (*a1 != 10) {
          return result;
        }
        BOOL v9 = a1 + 13;
      }
      else
      {
        if (a2 != 503)
        {
          if (a2 != 601 || *a1 != 15 && *a1 != 12) {
            return result;
          }
          goto LABEL_77;
        }
        if (*a1 != 10) {
          return result;
        }
        BOOL v9 = a1 + 17;
      }
LABEL_68:
      *a3 = v9;
      uint64_t result = Util_isNullOrZeroMemory(v9, 16);
      if (result)
      {
        uint64_t result = 0;
        *a4 = 0;
        *a3 = 0;
        return result;
      }
LABEL_70:
      uint64_t v10 = 16;
      goto LABEL_99;
    }
    if (a2 == 400)
    {
      if (*a1 != 7) {
        return result;
      }
      uint64_t result = 0;
      long long v16 = a1 + 8;
LABEL_84:
      *a3 = v16;
      uint64_t v10 = 32;
      goto LABEL_99;
    }
    if (a2 == 401)
    {
      if (*a1 != 7) {
        return result;
      }
      uint64_t result = 0;
      *a3 = a1 + 16;
      uint64_t v10 = 24;
      goto LABEL_99;
    }
    if (a2 != 501 || *a1 != 10) {
      return result;
    }
LABEL_15:
    BOOL v9 = a1 + 9;
    goto LABEL_68;
  }
  if (a2 > 199)
  {
    switch(a2)
    {
      case 300:
        if (*a1 == 3)
        {
          uint64_t result = 0;
          uint64_t v8 = a1 + 9;
          goto LABEL_50;
        }
        break;
      case 301:
        if (*a1 == 3)
        {
          uint64_t result = 0;
          long long v16 = a1 + 17;
          goto LABEL_84;
        }
        break;
      case 302:
        if (*a1 == 3)
        {
          uint64_t result = 0;
          uint64_t v8 = a1 + 13;
          goto LABEL_50;
        }
        break;
      case 303:
        if (*a1 == 3)
        {
          long long v11 = a1 + 30;
          goto LABEL_87;
        }
        break;
      case 304:
        if (*a1 == 3)
        {
          uint64_t result = 0;
          uint64_t v8 = (int *)((char *)a1 + 185);
LABEL_50:
          *a3 = v8;
          goto LABEL_70;
        }
        break;
      case 305:
        if (*a1 == 3)
        {
          uint64_t result = 0;
          long long v17 = (int *)((char *)a1 + 201);
          goto LABEL_97;
        }
        break;
      case 306:
        if (*a1 == 3)
        {
          uint64_t result = 0;
          uint64_t v10 = *(unsigned int *)((char *)a1 + 205);
          uint64_t v23 = (int *)((char *)a1 + 209);
          if (!*(int *)((char *)a1 + 205)) {
            uint64_t v23 = 0;
          }
          *a3 = v23;
          goto LABEL_99;
        }
        break;
      default:
        if (a2 == 200)
        {
          if (*a1 == 2)
          {
            uint64_t result = 0;
            *a3 = a1 + 10;
            uint64_t v10 = a1[9];
            goto LABEL_99;
          }
        }
        else if (a2 == 201 && *a1 == 2)
        {
          goto LABEL_77;
        }
        break;
    }
    return result;
  }
  if (a2 > 99)
  {
    if (a2 != 100)
    {
      if (a2 != 101)
      {
        if (a2 != 102 || *a1 != 1) {
          return result;
        }
LABEL_61:
        uint64_t result = 0;
        long long v17 = a1 + 9;
        goto LABEL_97;
      }
      if (*a1 > 0x12 || ((1 << *a1) & 0x4060A) == 0) {
        return result;
      }
LABEL_77:
      uint64_t result = 0;
      long long v17 = a1 + 8;
LABEL_97:
      *a3 = v17;
LABEL_98:
      uint64_t v10 = 4;
      goto LABEL_99;
    }
    int v18 = *a1;
    if (*a1 <= 8)
    {
      if (v18 == 1)
      {
        BOOL v9 = a1 + 11;
      }
      else
      {
        if (v18 != 3) {
          return result;
        }
        BOOL v9 = a1 + 26;
      }
      goto LABEL_68;
    }
    if (v18 == 9)
    {
      BOOL v9 = a1 + 10;
      goto LABEL_68;
    }
    if (v18 != 18) {
      return result;
    }
    goto LABEL_15;
  }
  switch(a2)
  {
    case 1:
      uint64_t result = 0;
      *a3 = a1 + 4;
      uint64_t v10 = 8;
      goto LABEL_99;
    case 2:
      uint64_t result = 0;
      long long v17 = a1 + 6;
      goto LABEL_97;
    case 3:
      uint64_t result = 0;
      *a3 = a1;
      goto LABEL_98;
    case 4:
      uint64_t result = 0;
      long long v17 = a1 + 1;
      goto LABEL_97;
    case 5:
      uint64_t result = 0;
      long long v17 = a1 + 3;
      goto LABEL_97;
    default:
      return result;
  }
  return result;
}

unsigned int *LibCall_ACMRequirementGetType(unsigned int *result)
{
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

uint64_t LibCall_ACMRequirementGetState(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 4);
  }
  return result;
}

uint64_t LibCall_ACMRequirementGetPriority(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 8);
  }
  return result;
}

uint64_t LibCall_ACMRequirementGetPropertyData(int *a1, int a2, int **a3, unint64_t *a4)
{
  uint64_t v4 = 4294967293;
  if (!a1 || !a3 || !a4) {
    return v4;
  }
  uint64_t v4 = 4294967293;
  if (a2 > 399)
  {
    if (a2 > 600)
    {
      if (a2 == 601)
      {
        if (*a1 == 26)
        {
          if (a1[3] >= 0x1C)
          {
            int v7 = a1 + 7;
LABEL_45:
            *a3 = v7;
            unint64_t v10 = 16;
            goto LABEL_72;
          }
          return 4294967282;
        }
        return 4294967293;
      }
      if (a2 != 602)
      {
        if (a2 != 700) {
          return v4;
        }
        if (*a1 == 7)
        {
LABEL_28:
          uint64_t v8 = a1 + 4;
          goto LABEL_58;
        }
        return 4294967293;
      }
      if (*a1 != 26) {
        return 4294967293;
      }
      if (a1[3] < 0x1C) {
        return 4294967282;
      }
      *a3 = a1 + 4;
      unint64_t v10 = 8;
    }
    else
    {
      if (a2 == 400)
      {
        if (*a1 == 13)
        {
          BOOL v9 = a1 + 4;
LABEL_64:
          *a3 = v9;
          unint64_t v10 = 32;
          goto LABEL_72;
        }
        return 4294967293;
      }
      if (a2 != 500)
      {
        if (a2 != 600) {
          return v4;
        }
        if (*a1 == 26)
        {
          if (a1[3] >= 0x1C)
          {
            uint64_t v8 = a1 + 6;
LABEL_58:
            *a3 = v8;
            goto LABEL_59;
          }
          return 4294967282;
        }
        return 4294967293;
      }
      if (*a1 != 25) {
        return 4294967293;
      }
      *a3 = a1 + 4;
      unint64_t v10 = 43;
    }
LABEL_72:
    uint64_t v4 = 0;
    *a4 = v10;
    return v4;
  }
  if (a2 > 99)
  {
    switch(a2)
    {
      case 300:
        if (*a1 != 3) {
          return 4294967293;
        }
        int v7 = a1 + 5;
        goto LABEL_45;
      case 301:
        if (*a1 != 3) {
          return 4294967293;
        }
        BOOL v9 = a1 + 13;
        goto LABEL_64;
      case 302:
        if (*a1 != 3) {
          return 4294967293;
        }
        int v7 = a1 + 9;
        goto LABEL_45;
      case 303:
        if (*a1 != 3) {
          return 4294967293;
        }
        unint64_t v10 = 0;
        long long v11 = a1 + 21;
        break;
      case 304:
        if (*a1 != 3) {
          return 4294967293;
        }
        if (a1[3] < 0x9C) {
          return 4294967282;
        }
        uint64_t v8 = a1 + 41;
        goto LABEL_58;
      case 305:
        if (*a1 != 3) {
          return 4294967293;
        }
        if (a1[3] < 0x9C) {
          return 4294967282;
        }
        uint64_t v8 = a1 + 42;
        goto LABEL_58;
      case 306:
        if (*a1 != 24) {
          return 4294967293;
        }
        *a3 = a1 + 5;
        unint64_t v10 = a1[4];
        goto LABEL_72;
      case 307:
        if (*a1 != 24) {
          return 4294967293;
        }
        BOOL v9 = a1 + 261;
        goto LABEL_64;
      default:
        if (a2 == 100)
        {
          int v13 = *a1;
          if (*a1 > 19)
          {
            if (v13 == 20 || v13 == 21) {
              goto LABEL_28;
            }
          }
          else if (v13 == 1 || v13 == 3)
          {
            goto LABEL_28;
          }
          return v4;
        }
        if (a2 != 200) {
          return v4;
        }
        if (*a1 != 2) {
          return 4294967293;
        }
        goto LABEL_28;
    }
    while (!Util_isNullOrZeroMemory((unsigned char *)v11 + v10, 16))
    {
      BOOL v12 = v10 >= 0x40;
      v10 += 16;
      if (v12)
      {
        unint64_t v10 = 80;
        goto LABEL_71;
      }
    }
    if (!v10) {
      long long v11 = 0;
    }
LABEL_71:
    *a3 = v11;
    goto LABEL_72;
  }
  switch(a2)
  {
    case 1:
      *a3 = a1;
LABEL_59:
      unint64_t v10 = 4;
      goto LABEL_72;
    case 2:
      uint64_t v8 = a1 + 1;
      goto LABEL_58;
    case 3:
      uint64_t v8 = a1 + 2;
      goto LABEL_58;
  }
  return v4;
}

uint64_t LibCall_ACMPing(uint64_t (*a1)(uint64_t, uint64_t, void, void, void, void, void), uint64_t a2, uint64_t a3)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMPing");
  }
  unsigned int v6 = 70;
  if (a1 && (a3 == 47 || a3 == 29))
  {
    uint64_t v7 = a1(a2, a3, 0, 0, 0, 0, 0);
    if (v7) {
      unsigned int v6 = 70;
    }
    else {
      unsigned int v6 = 10;
    }
  }
  else
  {
    uint64_t v7 = 4294967293;
  }
  if (v6 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMPing", (int)v7);
  }
  return v7;
}

uint64_t LibCall_ACMKernDoubleClickNotify(uint64_t (*a1)(uint64_t, uint64_t, void, void, void, void, void), uint64_t a2)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernDoubleClickNotify");
  }
  unsigned int v4 = 70;
  if (a1)
  {
    uint64_t v5 = a1(a2, 28, 0, 0, 0, 0, 0);
    if (v5) {
      unsigned int v4 = 70;
    }
    else {
      unsigned int v4 = 10;
    }
  }
  else
  {
    uint64_t v5 = 4294967293;
  }
  if (v4 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernDoubleClickNotify", (int)v5);
  }
  return v5;
}

uint64_t LibCall_ACMContextCredentialGetProperty(uint64_t (*a1)(uint64_t, uint64_t, void, __n128 *, uint64_t, uint64_t, uint64_t, __n128), uint64_t a2, __n128 *a3, unsigned __int32 a4, unsigned __int32 a5, uint64_t a6, uint64_t a7)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCredentialGetProperty");
  }
  unsigned int v14 = 70;
  uint64_t v15 = 4294967293;
  if (a1)
  {
    if (a3)
    {
      uint64_t v15 = 4294967293;
      if (a6)
      {
        if (a7)
        {
          uint64_t v19 = 24;
          __n128 Property_Serialize = LibSer_ContextCredentialGetProperty_Serialize(a3, a4, a5, &v20, &v19);
          if (v16)
          {
            uint64_t v15 = v16;
          }
          else if (v19 == 24)
          {
            uint64_t v15 = a1(a2, 33, 0, &v20, 24, a6, a7, Property_Serialize);
            if (!v15)
            {
              unsigned int v14 = 10;
              goto LABEL_11;
            }
          }
          else
          {
            uint64_t v15 = 4294967291;
          }
          unsigned int v14 = 70;
        }
      }
    }
  }
LABEL_11:
  if (v14 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCredentialGetProperty", (int)v15);
  }
  return v15;
}

uint64_t LibCall_ACMGlobalContextCredentialGetProperty(uint64_t (*a1)(uint64_t, uint64_t, void, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMGlobalContextCredentialGetProperty");
  }
  unsigned int v12 = 70;
  uint64_t v13 = 4294967293;
  if (a1 && a5 && a6)
  {
    uint64_t v16 = 8;
    uint64_t Property_Serialize = LibSer_GlobalContextCredentialGetProperty_Serialize(a3, a4, &v17, &v16);
    if (Property_Serialize)
    {
      uint64_t v13 = Property_Serialize;
    }
    else if (v16 == 8)
    {
      uint64_t v13 = a1(a2, 27, 0, &v17, 8, a5, a6);
      if (!v13)
      {
        unsigned int v12 = 10;
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v13 = 4294967291;
    }
    unsigned int v12 = 70;
  }
LABEL_10:
  if (v12 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMGlobalContextCredentialGetProperty", (int)v13);
  }
  return v13;
}

uint64_t LibCall_ACMContextVerifyPolicyEx(uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, BOOL *a9, int **a10)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx");
  }
  unint64_t v31 = 4096;
  size_t size = 0;
  size_t v29 = 0;
  __int16 v30 = 0;
  uint64_t v18 = 4294967293;
  if (!a3 || !__s1 || !a9)
  {
LABEL_18:
    if (!v18) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  uint64_t SerializedVerifyPolicySize = GetSerializedVerifyPolicySize((uint64_t)a3, __s1, a5, a8, a6, a7, &size);
  if (!SerializedVerifyPolicySize)
  {
    size_t v20 = size;
    long long v21 = acm_mem_alloc_data(size);
    acm_mem_alloc_info("<data>", v21, v20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1257, "LibCall_ACMContextVerifyPolicyEx");
    if (v21)
    {
      uint64_t v22 = SerializeVerifyPolicy(a3, __s1, a5, a8, a6, a7, v21, &size);
      if (v22)
      {
        uint64_t v18 = v22;
        uint64_t v23 = 0;
      }
      else
      {
        uint64_t v23 = (unsigned int *)acm_mem_alloc_data(0x1000uLL);
        acm_mem_alloc_info("<data>", v23, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1263, "LibCall_ACMContextVerifyPolicyEx");
        if (v23)
        {
          uint64_t v24 = a1(a2, 3, 0, v21, size, v23, &v31);
          if (v24)
          {
            uint64_t v18 = v24;
          }
          else
          {
            unint64_t v25 = v31 - 4;
            if (v31 < 4)
            {
              uint64_t v18 = 4294967291;
            }
            else
            {
              *a9 = *v23 != 0;
              if (a10)
              {
                uint64_t v18 = DeserializeRequirement(v23 + 1, v25, (void **)&v30, &v29);
                if (!v18) {
                  *a10 = v30;
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
            }
          }
        }
        else
        {
          uint64_t v18 = 4294967292;
        }
      }
      rsize_t v26 = size;
      acm_mem_free_info("<data>", v21, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1288, "LibCall_ACMContextVerifyPolicyEx");
      acm_mem_free_data(v21, v26);
      if (v23)
      {
        acm_mem_free_info("<data>", v23, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1291, "LibCall_ACMContextVerifyPolicyEx");
        acm_mem_free_data(v23, 0x1000uLL);
      }
    }
    else
    {
      uint64_t v18 = 4294967292;
    }
    goto LABEL_18;
  }
  uint64_t v18 = SerializedVerifyPolicySize;
LABEL_19:
  if (v30) {
    Util_DeallocRequirement(v30);
  }
LABEL_21:
  if (v18) {
    unsigned int v27 = 70;
  }
  else {
    unsigned int v27 = 10;
  }
  if (v27 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx", (int)v18);
  }
  return v18;
}

uint64_t LibCall_ACMGlobalContextVerifyPolicyEx(uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, char *a3, uint64_t a4, _DWORD *a5, unsigned int a6, BOOL *a7, int **a8)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMGlobalContextVerifyPolicyEx");
  }
  *(void *)size_t v20 = 0;
  uint64_t v16 = LibCall_ACMContextCreate((uint64_t (*)(uint64_t, uint64_t, void, void, void, unsigned char *, uint64_t *))a1, a2, v20, 0, 1);
  if (!v16) {
    uint64_t v16 = LibCall_ACMContextVerifyPolicyEx(a1, a2, *(_OWORD **)v20, a3, a4, a5, a6, 0xFFFFFFFFLL, a7, a8);
  }
  uint64_t v17 = v16;
  if (*(void *)v20) {
    LibCall_ACMContextDelete((void (*)(uint64_t, uint64_t, void, void *, uint64_t, void, void))a1, a2, *(void **)v20, 1);
  }
  if (v17) {
    unsigned int v18 = 70;
  }
  else {
    unsigned int v18 = 10;
  }
  if (v18 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMGlobalContextVerifyPolicyEx", (int)v17);
  }
  return v17;
}

uint64_t LibCall_ACMGetEnvironmentVariable(uint64_t (*a1)(uint64_t, uint64_t, void, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v12 = a3;
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMGetEnvironmentVariable");
  }
  unsigned int v9 = 70;
  uint64_t v10 = 4294967293;
  if (a1 && a4 && a5)
  {
    uint64_t v10 = a1(a2, 25, 0, &v12, 4, a4, a5);
    if (v10) {
      unsigned int v9 = 70;
    }
    else {
      unsigned int v9 = 10;
    }
  }
  if (v9 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMGetEnvironmentVariable", (int)v10);
  }
  return v10;
}

uint64_t LibCall_ACMSetEnvironmentVariable(uint64_t (*a1)(uint64_t, uint64_t, void, char *, size_t, void, void), uint64_t a2, int a3, _OWORD *a4, _OWORD *a5, uint64_t a6, const void *a7, size_t a8)
{
  uint64_t v15 = a1;
  if (gACMLoggingLevel <= 0xAu) {
    a1 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, void, void))printf("%s: %s: called.\n", "ACM", "LibCall_ACMSetEnvironmentVariable");
  }
  if (v15 && a6 == 16 * (a5 != 0) && (a7 ? (BOOL v16 = a8 - 129 < 0xFFFFFFFFFFFFFF80) : (BOOL v16 = a8 != 0), !v16))
  {
    __chkstk_darwin(a1);
    uint64_t v17 = (char *)&v21 - ((a8 + 59) & 0xFFFFFFFFFFFFFFF0);
    *(_DWORD *)uint64_t v17 = a3;
    *((_DWORD *)v17 + 1) = 2;
    *((_DWORD *)v17 + 2) = a8;
    *(_OWORD *)(v17 + 12) = 0u;
    *(_OWORD *)(v17 + 28) = 0u;
    if (a4) {
      *(_OWORD *)(v17 + 12) = *a4;
    }
    if (a5) {
      *(_OWORD *)(v17 + 28) = *a5;
    }
    if (a8) {
      memcpy(v17 + 44, a7, a8);
    }
    uint64_t v18 = v15(a2, 44, 0, (char *)&v21 - ((a8 + 59) & 0xFFFFFFFFFFFFFFF0), a8 + 44, 0, 0);
    if (v18) {
      unsigned int v19 = 70;
    }
    else {
      unsigned int v19 = 10;
    }
  }
  else
  {
    unsigned int v19 = 70;
    uint64_t v18 = 4294967293;
  }
  if (v19 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSetEnvironmentVariable", (int)v18);
  }
  return v18;
}

uint64_t LibCall_ACMTRMLoadState(uint64_t (*a1)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMTRMLoadState");
  }
  unsigned int v8 = 70;
  uint64_t v9 = 4294967293;
  if (a1 && a3 && a4)
  {
    uint64_t v9 = a1(a2, 38, 0, 0, 0, a3, a4);
    if (v9) {
      unsigned int v8 = 70;
    }
    else {
      unsigned int v8 = 10;
    }
  }
  if (v8 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMTRMLoadState", (int)v9);
  }
  return v9;
}

uint64_t LibCall_ACMTRMSaveState(uint64_t (*a1)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, void), uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMTRMSaveState");
  }
  if (a1)
  {
    BOOL v10 = (unint64_t)(a4 - 8193) < 0xFFFFFFFFFFFFE000;
    if (!a3) {
      BOOL v10 = a4 != 0;
    }
    unsigned int v11 = 70;
    if (!v10)
    {
      if (a5) {
        uint64_t v12 = 43;
      }
      else {
        uint64_t v12 = 39;
      }
      uint64_t v13 = a1(a2, v12, 0, a3, a4, 0, 0);
      if (v13) {
        unsigned int v11 = 70;
      }
      else {
        unsigned int v11 = 10;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v11 = 70;
  }
  uint64_t v13 = 4294967293;
LABEL_13:
  if (v11 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMTRMSaveState", (int)v13);
  }
  return v13;
}

uint64_t LibCall_ACMContextLoadFromImage(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  unsigned int v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  BOOL v10 = (uint64_t (*)(uint64_t, uint64_t, void, char *, uint64_t, _OWORD *, unint64_t *))v1;
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextLoadFromImage");
  }
  unsigned int v11 = 70;
  uint64_t v12 = 4294967293;
  if (v10 && v7 && (unint64_t)(v5 - 4097) >= 0xFFFFFFFFFFFFF000)
  {
    uint64_t v13 = acm_mem_alloc(0x14uLL);
    acm_mem_alloc_info("ACMHandleWithPayload", v13, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1447, "LibCall_ACMContextLoadFromImage");
    if (v13)
    {
      bzero(v21, 0x1005uLL);
      char v20 = 1;
      *(_WORD *)&v21[1] = 6;
      __int16 v22 = v5;
      __memcpy_chk();
      memset(v18, 0, sizeof(v18));
      uint64_t v19 = 0;
      unint64_t v17 = 280;
      uint64_t v14 = v10(v9, 48, 0, &v20, 4102, v18, &v17);
      if (v14)
      {
        uint64_t v12 = v14;
      }
      else if (v17 < 0x18)
      {
        uint64_t v12 = 4294967291;
      }
      else
      {
        if (LOBYTE(v18[0]))
        {
          uint64_t v12 = 0;
          int v15 = DWORD1(v18[1]);
          *(_OWORD *)uint64_t v13 = *(_OWORD *)((char *)v18 + 4);
          v13[4] = v15;
          void *v3 = v13;
          unsigned int v11 = 10;
          goto LABEL_11;
        }
        uint64_t v12 = 4294967280;
      }
      acm_mem_free_info("ACMHandleWithPayload", v13, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1508, "LibCall_ACMContextLoadFromImage");
      acm_mem_free(v13, 0x14uLL);
      unsigned int v11 = 70;
    }
    else
    {
      unsigned int v11 = 70;
      uint64_t v12 = 4294967292;
    }
  }
LABEL_11:
  if (v11 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextLoadFromImage", (int)v12);
  }
  return v12;
}

uint64_t LibCall_ACMContextUnloadToImage()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, void, int *, uint64_t, unsigned char *, int *))v0;
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextUnloadToImage");
  }
  unsigned int v10 = 70;
  uint64_t v11 = 4294967293;
  if (v9 && v4 && v2)
  {
    long long v20 = 0uLL;
    int v19 = 1310721;
    if (v6) {
      long long v20 = *v6;
    }
    else {
      long long v20 = 0uLL;
    }
    bzero(v16, 0x1106uLL);
    *(void *)int v15 = 4358;
    uint64_t v12 = v9(v8, 49, 0, &v19, 20, v16, v15);
    if (v12)
    {
      uint64_t v11 = v12;
LABEL_18:
      unsigned int v10 = 70;
      goto LABEL_14;
    }
    if (*(void *)v15 < 6uLL)
    {
      unsigned int v10 = 70;
      uint64_t v11 = 4294967291;
    }
    else
    {
      if (v16[0])
      {
        uint64_t v14 = v17;
        uint64_t v11 = Util_ReadFromBuffer((uint64_t)v16, *(size_t *)v15, &v14, v4, (unsigned __int16)__n);
        if (!v11)
        {
          *uint64_t v2 = v14 - v17;
          unsigned int v10 = 10;
          goto LABEL_14;
        }
        goto LABEL_18;
      }
      unsigned int v10 = 70;
      uint64_t v11 = 4294967280;
    }
  }
LABEL_14:
  if (v10 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextUnloadToImage", (int)v11);
  }
  return v11;
}

uint64_t LibCall_ACMContextSetData(uint64_t (*a1)(uint64_t, uint64_t, void, void *, size_t, void, void), uint64_t a2, _OWORD *a3, int a4, _DWORD *a5, unsigned int a6, const void *a7, size_t a8)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextSetData");
  }
  size_t size = 0;
  unsigned int v16 = 70;
  uint64_t v17 = 4294967293;
  if (a1 && a3)
  {
    if ((a7 != 0) != (a8 != 0))
    {
      unsigned int v16 = 70;
      uint64_t v17 = 4294967293;
    }
    else if (a8 > 0xE00)
    {
      unsigned int v16 = 70;
      uint64_t v17 = 4294967276;
    }
    else
    {
      uint64_t v18 = LibSer_StorageSetData_GetSize(a8, a5, a6, &size);
      if (v18)
      {
        uint64_t v17 = v18;
        unsigned int v16 = 70;
      }
      else
      {
        size_t v19 = size;
        long long v20 = acm_mem_alloc_data(size);
        acm_mem_alloc_info("<data>", v20, v19, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1593, "LibCall_ACMContextSetData");
        if (v20)
        {
          uint64_t v21 = LibSer_StorageSetData_Serialize(a3, a4, a7, a8, a5, a6, (uint64_t)v20, &size);
          if (!v21) {
            uint64_t v21 = a1(a2, 40, 0, v20, size, 0, 0);
          }
          uint64_t v17 = v21;
          rsize_t v22 = size;
          acm_mem_free_info("<data>", v20, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1605, "LibCall_ACMContextSetData");
          acm_mem_free_data(v20, v22);
          if (v17) {
            unsigned int v16 = 70;
          }
          else {
            unsigned int v16 = 10;
          }
        }
        else
        {
          unsigned int v16 = 70;
          uint64_t v17 = 4294967292;
        }
      }
    }
  }
  if (v16 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextSetData", (int)v17);
  }
  return v17;
}

uint64_t LibCall_ACMContextGetData(uint64_t (*a1)(uint64_t, uint64_t, void, void *, size_t, uint64_t, uint64_t), uint64_t a2, _OWORD *a3, int a4, char a5, _DWORD *a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  if (gACMLoggingLevel <= 0xAu)
  {
    uint64_t v16 = a8;
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextGetData");
    a8 = v16;
  }
  size_t size = 0;
  unsigned int v17 = 70;
  uint64_t v18 = 4294967293;
  if (a1)
  {
    uint64_t v26 = a2;
    if (a3)
    {
      uint64_t v18 = 4294967293;
      if (a8)
      {
        if (a9)
        {
          uint64_t v19 = a8;
          uint64_t v20 = LibSer_StorageGetData_GetSize(a6, a7, &size);
          if (v20)
          {
            uint64_t v18 = v20;
            unsigned int v17 = 70;
          }
          else
          {
            size_t v21 = size;
            rsize_t v22 = acm_mem_alloc_data(size);
            acm_mem_alloc_info("<data>", v22, v21, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1628, "LibCall_ACMContextGetData");
            if (v22)
            {
              uint64_t Data_Serialize = LibSer_StorageGetData_Serialize(a3, a4, a5, a6, a7, (uint64_t)v22, &size);
              if (!Data_Serialize) {
                uint64_t Data_Serialize = a1(v26, 41, 0, v22, size, v19, a9);
              }
              uint64_t v18 = Data_Serialize;
              rsize_t v24 = size;
              acm_mem_free_info("<data>", v22, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1640, "LibCall_ACMContextGetData");
              acm_mem_free_data(v22, v24);
              if (v18) {
                unsigned int v17 = 70;
              }
              else {
                unsigned int v17 = 10;
              }
            }
            else
            {
              unsigned int v17 = 70;
              uint64_t v18 = 4294967292;
            }
          }
        }
      }
    }
  }
  if (v17 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextGetData", (int)v18);
  }
  return v18;
}

uint64_t LibCall_ACMPublishTrustedAccessories(uint64_t (*a1)(uint64_t, uint64_t, void, char *, size_t, void, void), uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v7 = a1;
  if (gACMLoggingLevel <= 0xAu) {
    a1 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, void, void))printf("%s: %s: called.\n", "ACM", "LibCall_ACMPublishTrustedAccessories");
  }
  if (v7)
  {
    if (a3) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = a4 == 0;
    }
    char v9 = !v8;
    unsigned int v10 = 70;
    uint64_t v11 = 4294967293;
    if ((a4 & 0xF) == 0 && a4 <= 0x100 && (v9 & 1) == 0)
    {
      __chkstk_darwin(a1);
      uint64_t v12 = (_DWORD *)((char *)&v14 - ((a4 + 23) & 0xFFFFFFFFFFFFFFF0));
      _DWORD *v12 = 1;
      v12[1] = a4;
      if (a4) {
        memcpy(v12 + 2, a3, a4);
      }
      uint64_t v11 = v7(a2, 45, 0, (char *)&v14 - ((a4 + 23) & 0xFFFFFFFFFFFFFFF0), a4 + 8, 0, 0);
      if (v11) {
        unsigned int v10 = 70;
      }
      else {
        unsigned int v10 = 10;
      }
    }
  }
  else
  {
    unsigned int v10 = 70;
    uint64_t v11 = 4294967293;
  }
  if (v10 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMPublishTrustedAccessories", (int)v11);
  }
  return v11;
}

uint64_t LibCall_ACMContextGetInfo(uint64_t (*a1)(uint64_t, uint64_t, void, int *, uint64_t, _OWORD *, unint64_t *), uint64_t a2, long long *a3, int a4, void *a5)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextGetInfo");
  }
  unsigned int v10 = 70;
  uint64_t v11 = 4294967293;
  if (a3 && a1 && a5)
  {
    int v16 = 1;
    int v18 = a4;
    long long v17 = *a3;
    memset(v15, 0, 140);
    unint64_t v14 = 140;
    uint64_t v12 = a1(a2, 46, 0, &v16, 24, v15, &v14);
    if (v12)
    {
      uint64_t v11 = v12;
    }
    else if (v14 < 0xC)
    {
      uint64_t v11 = 4294967291;
    }
    else
    {
      if (LODWORD(v15[0]))
      {
        uint64_t v11 = 0;
        *a5 = *(void *)((char *)v15 + 4);
        unsigned int v10 = 10;
        goto LABEL_10;
      }
      uint64_t v11 = 4294967281;
    }
    unsigned int v10 = 70;
  }
LABEL_10:
  if (v10 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextGetInfo", (int)v11);
  }
  return v11;
}

uint64_t verifyAclConstraintInternal(uint64_t (*a1)(uint64_t, uint64_t, void, void *, size_t, unsigned int *, unint64_t *), uint64_t a2, uint64_t a3, _OWORD *a4, const void *a5, uint64_t a6, const void *a7, unsigned int a8, unsigned __int8 a9, _DWORD *a10, unsigned int a11, unsigned int a12, BOOL *a13, int **a14)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "verifyAclConstraintInternal");
  }
  size_t v36 = 0;
  unint64_t v34 = 0;
  unint64_t v35 = 4096;
  size_t v33 = 0;
  uint64_t v20 = 4294967293;
  if (!a4 || !a5 || !a6 || !a13)
  {
LABEL_19:
    if (!v20) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  uint64_t SerializedVerifyAclConstraintSize = GetSerializedVerifyAclConstraintSize(a3, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8, a9, a12, a10, a11, &v36);
  if (!SerializedVerifyAclConstraintSize)
  {
    uint64_t v22 = v36;
    uint64_t v23 = acm_mem_alloc_data(v36);
    acm_mem_alloc_info("<data>", v23, v22, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1929, "verifyAclConstraintInternal");
    if (v23)
    {
      uint64_t v24 = SerializeVerifyAclConstraint(a3, a4, a5, a6, a7, a8, a9, a12, a10, a11, (uint64_t)v23, &v36);
      if (v24)
      {
        uint64_t v20 = v24;
        unint64_t v25 = 0;
      }
      else
      {
        unint64_t v25 = (unsigned int *)acm_mem_alloc_data(0x1000uLL);
        acm_mem_alloc_info("<data>", v25, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1935, "verifyAclConstraintInternal");
        if (v25)
        {
          uint64_t v26 = a1(a2, a3, 0, v23, v36, v25, &v35);
          if (v26)
          {
            uint64_t v20 = v26;
          }
          else
          {
            unint64_t v27 = v35 - 4;
            if (v35 < 4)
            {
              uint64_t v20 = 4294967291;
            }
            else
            {
              *a13 = *v25 != 0;
              if (a14)
              {
                uint64_t v20 = DeserializeRequirement(v25 + 1, v27, (void **)&v34, &v33);
                if (!v20) {
                  *a14 = v34;
                }
              }
              else
              {
                uint64_t v20 = 0;
              }
            }
          }
        }
        else
        {
          uint64_t v20 = 4294967292;
        }
      }
      rsize_t v28 = v36;
      acm_mem_free_info("<data>", v23, v36, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1958, "verifyAclConstraintInternal");
      acm_mem_free_data(v23, v28);
      if (v25)
      {
        acm_mem_free_info("<data>", v25, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1961, "verifyAclConstraintInternal");
        acm_mem_free_data(v25, 0x1000uLL);
      }
    }
    else
    {
      uint64_t v20 = 4294967292;
    }
    goto LABEL_19;
  }
  uint64_t v20 = SerializedVerifyAclConstraintSize;
LABEL_20:
  if (v34) {
    Util_DeallocRequirement(v34);
  }
LABEL_22:
  if (v20) {
    unsigned int v29 = 70;
  }
  else {
    unsigned int v29 = 10;
  }
  if (v29 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "verifyAclConstraintInternal", (int)v20);
  }
  return v20;
}

uint64_t LibCall_ACMSecContextProcessAcl(uint64_t (*a1)(uint64_t, uint64_t, void, char *, uint64_t, int *, uint64_t *), uint64_t a2, _OWORD *a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, _DWORD *a8, unsigned int a9, unsigned int a10, _DWORD *a11, BOOL *a12)
{
  return sub_10009A524(a1, a2, 12, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0, 0);
}

uint64_t sub_10009A524(uint64_t (*a1)(uint64_t, uint64_t, void, char *, uint64_t, int *, uint64_t *), uint64_t a2, int a3, _OWORD *a4, unsigned __int8 *a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8, _DWORD *a9, unsigned int a10, unsigned int a11, _DWORD *a12, BOOL *a13, void *a14, unint64_t *a15)
{
  unsigned int v19 = gACMLoggingLevel;
  if (gACMLoggingLevel <= 0xAu)
  {
    printf("%s: %s: called.\n", "ACM", "processAclCommandInternal");
    unsigned int v19 = gACMLoggingLevel;
  }
  if (v19 <= 0x14)
  {
    printf("%s: %s: command = %u.\n", "ACM", "processAclCommandInternal", a3);
    unsigned int v19 = gACMLoggingLevel;
    if (gACMLoggingLevel <= 0x14u)
    {
      printf("%s: %s: context = %p.\n", "ACM", "processAclCommandInternal", a4);
      unsigned int v19 = gACMLoggingLevel;
      if (gACMLoggingLevel <= 0x14u)
      {
        printf("%s: %s: acl = %p, aclCFIndex Length = %zu.\n", "ACM", "processAclCommandInternal", a5, a6);
        unsigned int v19 = gACMLoggingLevel;
        if (gACMLoggingLevel <= 0x14u)
        {
          printf("%s: %s (len=%u): acl:", "ACM", "processAclCommandInternal", a6);
          unsigned int v19 = gACMLoggingLevel;
        }
      }
    }
  }
  if (a6)
  {
    uint64_t v20 = a6;
    size_t v21 = a5;
    do
    {
      if (v19 <= 0x14)
      {
        printf("%02x ", *v21);
        unsigned int v19 = gACMLoggingLevel;
      }
      ++v21;
      --v20;
    }
    while (v20);
  }
  if (v19 < 0x15)
  {
    putchar(10);
    unsigned int v19 = gACMLoggingLevel;
    if (gACMLoggingLevel <= 0x14u)
    {
      printf("%s: %s: operation = %p, operationCFIndex Length = %zu.\n", "ACM", "processAclCommandInternal", a7, a8);
      unsigned int v19 = gACMLoggingLevel;
      if (gACMLoggingLevel <= 0x14u)
      {
        printf("%s: %s (len=%u): operation:", "ACM", "processAclCommandInternal", a8);
        unsigned int v19 = gACMLoggingLevel;
      }
    }
  }
  int v39 = a3;
  if (a8)
  {
    uint64_t v22 = a8;
    uint64_t v23 = a7;
    do
    {
      if (v19 <= 0x14)
      {
        printf("%02x ", *v23);
        unsigned int v19 = gACMLoggingLevel;
      }
      ++v23;
      --v22;
    }
    while (v22);
  }
  if (v19 < 0x15)
  {
    putchar(10);
    if (gACMLoggingLevel <= 0x14u)
    {
      printf("%s: %s: parameters = %p, parameterCFIndex Count = %u.\n", "ACM", "processAclCommandInternal", a9, a10);
      if (gACMLoggingLevel <= 0x14u)
      {
        printf("%s: %s: maxGlobalCredentialAge = %u.\n", "ACM", "processAclCommandInternal", a11);
        if (gACMLoggingLevel <= 0x14u)
        {
          printf("%s: %s: constraintState = %p.\n", "ACM", "processAclCommandInternal", a12);
          if (gACMLoggingLevel <= 0x14u) {
            printf("%s: %s: requirePasscode = %p.\n", "ACM", "processAclCommandInternal", a13);
          }
        }
      }
    }
  }
  if (a7 || a9 || a12)
  {
    if (a5) {
      BOOL v26 = a6 == 0;
    }
    else {
      BOOL v26 = 1;
    }
    int v27 = v26;
    unsigned int v24 = 70;
    uint64_t v25 = 4294967293;
    if (!a7) {
      goto LABEL_79;
    }
    if (!a8) {
      goto LABEL_79;
    }
    if (v27) {
      goto LABEL_79;
    }
    unsigned int v24 = 70;
    uint64_t v25 = 4294967293;
    if ((a9 != 0) != (a10 != 0) || !a12) {
      goto LABEL_79;
    }
    size_t v45 = 0;
    unint64_t v44 = 4096;
    if (gACMLoggingLevel <= 0xAu) {
      printf("%s: %s: called.\n", "ACM", "processAclInternal");
    }
    uint64_t SerializedProcessAclSize = GetSerializedProcessAclSize((uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8, a11, a9, a10, &v45);
    if (SerializedProcessAclSize)
    {
      uint64_t v25 = SerializedProcessAclSize;
      unsigned int v37 = 70;
      goto LABEL_74;
    }
    uint64_t v29 = v45;
    __int16 v30 = acm_mem_alloc_data(v45);
    acm_mem_alloc_info("<data>", v30, v29, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1776, "processAclInternal");
    if (!v30)
    {
      unsigned int v37 = 70;
      uint64_t v25 = 4294967292;
      goto LABEL_74;
    }
    unint64_t v44 = 4096;
    unint64_t v31 = acm_mem_alloc_data(0x1000uLL);
    acm_mem_alloc_info("<data>", v31, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1780, "processAclInternal");
    if (!v31)
    {
      unint64_t v35 = 0;
      unint64_t v34 = 0;
      uint64_t v25 = 4294967292;
      goto LABEL_68;
    }
    uint64_t v32 = SerializeProcessAcl(a4, a5, a6, a7, a8, a11, a9, a10, (uint64_t)v30, &v45);
    if (v32 || (uint64_t v32 = a1(a2, v39, 0, (char *)v30, v45, v31, (uint64_t *)&v44), v32))
    {
      uint64_t v25 = v32;
      unint64_t v34 = 0;
      unint64_t v35 = 0;
      goto LABEL_67;
    }
    unint64_t v33 = v44;
    if (v44 >= 8)
    {
      *a12 = *v31;
      if (a13) {
        *a13 = v31[1] != 0;
      }
      uint64_t v25 = 0;
      unint64_t v34 = 0;
      if (v39 != 30 || !a14)
      {
        unint64_t v35 = 0;
        goto LABEL_67;
      }
      unint64_t v35 = 0;
      if (!a15)
      {
LABEL_67:
        acm_mem_free_info("<data>", v31, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1817, "processAclInternal");
        acm_mem_free_data(v31, 0x1000uLL);
LABEL_68:
        rsize_t v36 = v45;
        acm_mem_free_info("<data>", v30, v45, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1821, "processAclInternal");
        acm_mem_free_data(v30, v36);
        if (v25 && v35)
        {
          acm_mem_free_info("<data>", v35, v34, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1825, "processAclInternal");
          acm_mem_free_data(v35, v34);
          unsigned int v37 = 70;
        }
        else if (v25)
        {
          unsigned int v37 = 70;
        }
        else
        {
          unsigned int v37 = 10;
        }
LABEL_74:
        if (v37 >= gACMLoggingLevel) {
          printf("%s: %s: returning, err = %ld.\n", "ACM", "processAclInternal", (int)v25);
        }
        goto LABEL_76;
      }
      if (v33 >= 0xC)
      {
        unint64_t v34 = v31[2];
        if (v34)
        {
          if (v33 >= v34 + 12)
          {
            unint64_t v35 = acm_mem_alloc_data(v31[2]);
            acm_mem_alloc_info("<data>", v35, v34, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1805, "processAclInternal");
            if (v35)
            {
              memcpy(v35, v31 + 3, v34);
              uint64_t v25 = 0;
              *a14 = v35;
              *a15 = v34;
            }
            else
            {
              uint64_t v25 = 4294967292;
            }
            goto LABEL_67;
          }
          goto LABEL_84;
        }
        unint64_t v34 = 0;
        unint64_t v35 = 0;
        uint64_t v25 = 0;
        goto LABEL_67;
      }
    }
    unint64_t v34 = 0;
LABEL_84:
    unint64_t v35 = 0;
    uint64_t v25 = 4294967291;
    goto LABEL_67;
  }
  if (a4)
  {
    unsigned int v24 = 70;
    uint64_t v25 = 4294967293;
    goto LABEL_79;
  }
  unsigned int v24 = 70;
  uint64_t v25 = 4294967293;
  if (a5 && a13 && a6)
  {
    uint64_t v25 = sub_10009B674(a1, a2, a5, a6, a13);
LABEL_76:
    if (v25) {
      unsigned int v24 = 70;
    }
    else {
      unsigned int v24 = 10;
    }
  }
LABEL_79:
  if (v24 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "processAclCommandInternal", (int)v25);
  }
  return v25;
}

uint64_t LibCall_ACMSecContextProcessAclAndCopyAuthMethod(uint64_t (*a1)(uint64_t, uint64_t, void, char *, uint64_t, int *, uint64_t *), uint64_t a2, _OWORD *a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, _DWORD *a8, unsigned int a9, unsigned int a10, _DWORD *a11, BOOL *a12, void *a13, unint64_t *a14)
{
  return sub_10009A524(a1, a2, 30, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t LibCall_ACMSecContextVerifyAclConstraintAndCopyRequirement(uint64_t (*a1)(uint64_t, uint64_t, void, void *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, const void *a4, uint64_t a5, const void *a6, unsigned int a7, unsigned __int8 a8, _DWORD *a9, unsigned int a10, unsigned int a11, BOOL *a12, int **a13)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSecContextVerifyAclConstraintAndCopyRequirement");
  }
  unsigned int v21 = 70;
  uint64_t v22 = 4294967293;
  if (a3)
  {
    if (a4)
    {
      if (a5)
      {
        unsigned int v21 = 70;
        uint64_t v22 = 4294967293;
        if ((a9 != 0) == (a10 != 0))
        {
          if (a12)
          {
            uint64_t v22 = verifyAclConstraintInternal(a1, a2, 11, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
            if (v22) {
              unsigned int v21 = 70;
            }
            else {
              unsigned int v21 = 10;
            }
          }
        }
      }
    }
  }
  if (v21 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSecContextVerifyAclConstraintAndCopyRequirement", (int)v22);
  }
  return v22;
}

uint64_t LibCall_ACMSecCredentialProviderEnrollmentStateChangedForUser(uint64_t (*a1)(uint64_t, uint64_t, void, char *, uint64_t, void, void), uint64_t a2, const void *a3, unsigned int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, uint64_t a9)
{
  int v16 = a1;
  if (gACMLoggingLevel <= 0xAu) {
    a1 = (uint64_t (*)(uint64_t, uint64_t, void, char *, uint64_t, void, void))printf("%s: %s: called.\n", "ACM", "LibCall_ACMSecCredentialProviderEnrollmentStateChangedForUser");
  }
  BOOL v17 = a4 - 113 < 0xFFFFFF90;
  if (!a3) {
    BOOL v17 = a4 != 0;
  }
  if (v17)
  {
    unsigned int v18 = 70;
    uint64_t v19 = 4294967293;
  }
  else
  {
    unsigned int v18 = 70;
    uint64_t v19 = 4294967293;
    if (a8)
    {
      if (a9 == 16)
      {
        uint64_t v19 = 4294967293;
        if (a5)
        {
          if (a6 == 16)
          {
            uint64_t v20 = a4 + 36;
            __chkstk_darwin(a1);
            uint64_t v22 = (char *)&v24 - ((v21 + 51) & 0x1FFFFFFF0);
            *(_DWORD *)uint64_t v22 = a7;
            *(_OWORD *)(v22 + 4) = *a8;
            *(_OWORD *)(v22 + 20) = *a5;
            if (a3) {
              memcpy(v22 + 36, a3, v21);
            }
            uint64_t v19 = v16(a2, 14, 0, v22, v20, 0, 0);
            if (v19) {
              unsigned int v18 = 70;
            }
            else {
              unsigned int v18 = 10;
            }
          }
        }
      }
    }
  }
  if (v18 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSecCredentialProviderEnrollmentStateChangedForUser", (int)v19);
  }
  return v19;
}

uint64_t LibCall_ACMSecSetBuiltinBiometry(uint64_t (*a1)(uint64_t, uint64_t, void, char *, size_t, void, void), uint64_t a2, char a3)
{
  char v9 = a3;
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSecSetBuiltinBiometry");
  }
  uint64_t v5 = LibCall_ACMSetEnvironmentVariable(a1, a2, 30, 0, 0, 0, &v9, 1uLL);
  uint64_t v6 = v5;
  if (v5) {
    unsigned int v7 = 70;
  }
  else {
    unsigned int v7 = 10;
  }
  if (v7 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSecSetBuiltinBiometry", (int)v5);
  }
  return v6;
}

uint64_t LibCall_ACMSecSetBiometryAvailability(uint64_t (*a1)(uint64_t, uint64_t, void, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, char a3, int a4)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSecSetBiometryAvailability");
  }
  char v15 = 0;
  unint64_t v14 = 1;
  char v13 = 0;
  uint64_t v8 = LibCall_ACMGetEnvironmentVariable(a1, a2, 6, (uint64_t)&v15, (uint64_t)&v14);
  if (v8)
  {
    uint64_t v11 = v8;
    unsigned int v9 = 70;
  }
  else
  {
    unsigned int v9 = 70;
    if (v14 > 1)
    {
      uint64_t v11 = 4294967291;
    }
    else
    {
      char v10 = v15 & ~a3;
      if (a4) {
        char v10 = v15 | a3;
      }
      char v13 = v10;
      uint64_t v11 = LibCall_ACMSetEnvironmentVariable((uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, void, void))a1, a2, 6, 0, 0, 0, &v13, 1uLL);
      if (v11) {
        unsigned int v9 = 70;
      }
      else {
        unsigned int v9 = 10;
      }
    }
  }
  if (v9 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSecSetBiometryAvailability", (int)v11);
  }
  return v11;
}

uint64_t LibCall_ACMSecContextGetUnlockSecret(uint64_t (*a1)(void, void, void, void, void, void, void), uint64_t a2, _OWORD *a3, _DWORD *a4, unsigned int a5, void *a6, size_t *a7, unsigned char *a8)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSecContextGetUnlockSecret");
  }
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = 64;
  uint64_t v24 = 129;
  if (!a3) {
    goto LABEL_18;
  }
  unsigned int v16 = 70;
  uint64_t v17 = 4294967293;
  if (!a6 || !a7 || !a8) {
    goto LABEL_14;
  }
  if ((a4 != 0) != (a5 != 0))
  {
LABEL_18:
    unsigned int v16 = 70;
    uint64_t v17 = 4294967293;
    goto LABEL_14;
  }
  uint64_t UnlockSecret_Serialize = LibSer_GetUnlockSecret_Serialize(a3, a4, a5, v27, &v25);
  if (UnlockSecret_Serialize
    || (uint64_t UnlockSecret_Serialize = a1(a2, 50, 0, v27, v25, v26, &v24), UnlockSecret_Serialize)
    || (size_t __n = 0,
        __src = 0,
        char v21 = 0,
        uint64_t UnlockSecret_Serialize = LibSer_GetUnlockSecretResponse_Deserialize(v26, v24, &__src, &__n, &v21),
        UnlockSecret_Serialize))
  {
    uint64_t v17 = UnlockSecret_Serialize;
  }
  else
  {
    size_t v19 = __n;
    if (*a7 < __n)
    {
      uint64_t v17 = 4294967276;
    }
    else
    {
      if (__src)
      {
        memcpy(a6, __src, __n);
        uint64_t v17 = 0;
        *a7 = v19;
        *a8 = v21;
        unsigned int v16 = 10;
        goto LABEL_14;
      }
      uint64_t v17 = 4294967291;
    }
  }
  unsigned int v16 = 70;
LABEL_14:
  if (v16 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSecContextGetUnlockSecret", (int)v17);
  }
  return v17;
}

uint64_t LibCall_ACMSEPControl(uint64_t (*a1)(uint64_t, uint64_t, void, char *, uint64_t, unsigned int *, unint64_t *), uint64_t a2, const void *a3, size_t a4, uint64_t a5, _DWORD *a6, unsigned int a7, void *a8, size_t *a9)
{
  __int16 v30 = a8;
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSEPControl");
  }
  unint64_t v33 = 1024;
  uint64_t v34 = 0;
  if (!a1) {
    goto LABEL_17;
  }
  BOOL v16 = a4 - 4097 < 0xFFFFFFFFFFFFF000;
  if (!a3) {
    BOOL v16 = a4 != 0;
  }
  if (v16)
  {
LABEL_17:
    unsigned int v25 = 70;
    uint64_t v24 = 4294967293;
    goto LABEL_21;
  }
  uint64_t Size = LibSer_SEPControl_GetSize(a4, a6, a7, &v34);
  if (Size)
  {
LABEL_18:
    uint64_t v24 = Size;
LABEL_25:
    unsigned int v25 = 70;
    goto LABEL_21;
  }
  uint64_t v18 = a5;
  uint64_t v19 = a2;
  uint64_t v20 = (_OWORD *)__chkstk_darwin(v18);
  uint64_t v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = LibSer_SEPControl_Serialize(v20, a6, a7, a3, a4, (uint64_t)v22, &v34);
  if (v23)
  {
    uint64_t v24 = v23;
    goto LABEL_20;
  }
  uint64_t v24 = a1(v19, 51, 0, v22, v34, v35, &v33);
  if (v24)
  {
LABEL_20:
    unsigned int v25 = 70;
    goto LABEL_21;
  }
  unsigned int v25 = 10;
  BOOL v26 = v30;
  if (!v30 || !a9) {
    goto LABEL_21;
  }
  size_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t Size = LibSer_SEPControlResponse_Deserialize(v35, v33, &v32, &v31);
  if (Size) {
    goto LABEL_18;
  }
  size_t v27 = v31;
  if (*a9 < v31)
  {
    uint64_t v24 = 4294967276;
    goto LABEL_25;
  }
  if (v32) {
    memcpy(v26, v32, v31);
  }
  uint64_t v24 = 0;
  *a9 = v27;
  unsigned int v25 = 10;
LABEL_21:
  if (v25 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSEPControl", (int)v24);
  }
  return v24;
}

uint64_t sub_10009B674(uint64_t (*a1)(uint64_t, uint64_t, void, char *, uint64_t, int *, uint64_t *), uint64_t a2, const void *a3, unsigned int a4, unsigned char *a5)
{
  int v19 = 0;
  uint64_t v18 = 4;
  size_t v10 = a4;
  uint64_t v11 = a4 + 4;
  __chkstk_darwin(a1);
  uint64_t v12 = (unsigned int *)((char *)&v17 - ((v10 + 19) & 0x1FFFFFFF0));
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "aclRequiresPasscodeInternal");
  }
  unsigned int v13 = 70;
  uint64_t v14 = 4294967293;
  if (a3 && a5)
  {
    unsigned int *v12 = a4;
    memcpy(v12 + 1, a3, v10);
    uint64_t v15 = a1(a2, 17, 0, (char *)&v17 - ((v10 + 19) & 0x1FFFFFFF0), v11, &v19, &v18);
    if (v15)
    {
      uint64_t v14 = v15;
      unsigned int v13 = 70;
    }
    else if (v18 == 4)
    {
      uint64_t v14 = 0;
      *a5 = 1;
      unsigned int v13 = 10;
    }
    else
    {
      unsigned int v13 = 70;
      uint64_t v14 = 4294967291;
    }
  }
  if (v13 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "aclRequiresPasscodeInternal", (int)v14);
  }
  return v14;
}

void sub_10009B834()
{
  __assert_rtn("LibCall_ACMKernelControl", "LibCall.c", 373, "commandCursor == commandBuffer + sizeof(commandBuffer)");
}

uint64_t sub_10009B860()
{
  uint64_t v0 = ccrng();
  sub_1000AB744(v0 != 0, 22, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  sub_1000AB744(0, 23, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  return v0;
}

uint64_t sub_10009B8D0(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(unsigned int (**)(uint64_t, void, uint64_t))sub_1000AF740();
  uint64_t v5 = sub_1000AF740();
  BOOL v6 = v4(v5, a2, a1) == 0;

  return sub_1000AB744(v6, 31, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
}

uint64_t sub_10009B938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unint64_t a6, void *a7, unint64_t *a8)
{
  uint64_t v42 = a1;
  uint64_t v43 = a3;
  memset(__s, 0, sizeof(__s));
  uint64_t v14 = ccaes_cbc_encrypt_mode();
  __chkstk_darwin(v14);
  uint64_t v44 = (uint64_t)&v37 - v15;
  bzero((char *)&v37 - v15, v15);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v37 - v17;
  bzero((char *)&v37 - v17, v17);
  uint64_t v19 = 0xFFFFFFFFLL;
  if (HIDWORD(a6) || (a6 - 40) < 0xFFFFFFE0) {
    goto LABEL_30;
  }
  unint64_t v40 = &v37;
  long long v41 = a8;
  int v39 = a7;
  if (!a4)
  {
    BOOL v21 = (a2 & 0xFFFFFFFFFFFFFFF7) == 0x10 || a2 == 32;
    if (!v21 || !a8 || *a8 < a6 + 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_31;
    }
    unint64_t v38 = a6 + 8;
    cccbc_init();
    goto LABEL_15;
  }
  if (a8)
  {
    unint64_t v20 = *v41;
    unint64_t v38 = a6 + 8;
    if (v20 >= a6 + 8)
    {
LABEL_15:
      uint64_t v22 = 0;
      unsigned int v23 = a6 >> 3;
      if (a6 >> 3 <= 1) {
        uint64_t v24 = 1;
      }
      else {
        uint64_t v24 = v23;
      }
      do
      {
        uint64_t v25 = *a5++;
        *((void *)&__s[v22++] + 1) = v25;
      }
      while (v24 != v22);
      uint64_t v26 = 0;
      *(void *)&__s[0] = v43;
      uint64_t v27 = 1;
      uint64_t v42 = v23;
      do
      {
        uint64_t v43 = v26;
        uint64_t v28 = 0;
        uint64_t v29 = (uint64_t *)__s;
        do
        {
          if (a4)
          {
            if ((a4(1, &unk_1000E4358, v29, v29, 16) & 1) == 0) {
              goto LABEL_6;
            }
          }
          else
          {
            cccbc_clear_iv();
            sub_1000AC14C(v14, v44, (uint64_t)v18, 0x10uLL);
          }
          uint64_t v30 = *v29;
          v29 += 2;
          unint64_t v31 = v30 ^ bswap64(v27 + v28++);
          *(void *)&__s[v28 % v23] = v31;
        }
        while (v24 != v28);
        uint64_t v26 = v43 + 1;
        v27 += v42;
      }
      while (v43 != 5);
      uint64_t v32 = v39;
      void *v39 = *(void *)&__s[0];
      unint64_t v33 = v32 + 1;
      uint64_t v34 = (uint64_t *)__s + 1;
      do
      {
        uint64_t v35 = *v34;
        v34 += 2;
        *v33++ = v35;
        --v24;
      }
      while (v24);
      uint64_t v19 = 0;
      *long long v41 = v38 & 0xFFFFFFF8;
LABEL_30:
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      if (a4) {
        return v19;
      }
LABEL_31:
      cc_clear();
      return v19;
    }
  }
LABEL_6:
  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10009BC50(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unsigned int a6, void *a7, _DWORD *a8)
{
  unint64_t v11 = *a8;
  uint64_t v9 = sub_10009B938(a1, a2, a3, a4, a5, a6, a7, &v11);
  sub_1000AB744(HIDWORD(v11) == 0, 171, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t sub_10009BCBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void *, unint64_t *, unint64_t *, uint64_t), void *a5, unint64_t a6, void *a7, void *a8)
{
  long long v46 = a5;
  uint64_t v44 = a1;
  memset(__s, 0, sizeof(__s));
  uint64_t v14 = ccaes_cbc_decrypt_mode();
  __chkstk_darwin(v14);
  uint64_t v47 = (uint64_t)&v38 - v15;
  bzero((char *)&v38 - v15, v15);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v38 - v17;
  bzero((char *)&v38 - v17, v17);
  uint64_t v19 = 0xFFFFFFFFLL;
  if (HIDWORD(a6)) {
    goto LABEL_33;
  }
  uint64_t v40 = a3;
  unsigned int v20 = a6 >> 3;
  if ((a6 >> 3) - 6 < 0xFFFFFFFC) {
    goto LABEL_33;
  }
  long long v41 = &v38;
  uint64_t v42 = a8;
  int v39 = a7;
  unint64_t v45 = a6;
  if (!a4)
  {
    BOOL v21 = (a2 & 0xFFFFFFFFFFFFFFF7) == 0x10 || a2 == 32;
    if (!v21 || !a8 || *a8 < a6 - 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_34;
    }
    cccbc_init();
    goto LABEL_15;
  }
  if (a8 && *v42 >= v45 - 8)
  {
LABEL_15:
    *(void *)&__s[0] = *v46;
    uint64_t v22 = v20 - 1;
    if (v20 != 1)
    {
      unsigned int v23 = (void *)__s + 1;
      uint64_t v24 = v46 + 1;
      uint64_t v25 = v20 - 1;
      do
      {
        uint64_t v26 = *v24++;
        void *v23 = v26;
        v23 += 2;
        --v25;
      }
      while (v25);
    }
    int v27 = 6 * v20 - 6;
    LODWORD(v44) = 1 - v20;
    int v28 = 5;
    uint64_t v43 = (unint64_t *)&__s[v20 - 2];
    do
    {
      LODWORD(v46) = v28;
      if (v45 >= 0x10)
      {
        uint64_t v29 = v43;
        int v30 = v22;
        unsigned int v31 = v27;
        do
        {
          *uint64_t v29 = *(void *)&__s[v30 % v22] ^ bswap64(v31);
          if (a4)
          {
            if ((a4(0, &unk_1000E4358, v29, v29, 16) & 1) == 0) {
              goto LABEL_6;
            }
          }
          else
          {
            cccbc_clear_iv();
            sub_1000AC14C(v14, v47, (uint64_t)v18, 0x10uLL);
          }
          --v31;
          v29 -= 2;
          BOOL v32 = __OFSUB__(v30--, 1);
        }
        while (!((v30 < 0) ^ v32 | (v30 == 0)));
      }
      int v28 = v46 - 1;
      v27 += v44;
    }
    while (v46);
    if (*(void *)&__s[0] == v40)
    {
      unint64_t v33 = v39;
      if (v22)
      {
        uint64_t v34 = (uint64_t *)__s + 1;
        uint64_t v35 = v22;
        do
        {
          uint64_t v36 = *v34;
          v34 += 2;
          *v33++ = v36;
          --v35;
        }
        while (v35);
      }
      uint64_t v19 = 0;
      void *v42 = (8 * v22);
    }
    else
    {
      uint64_t v19 = 0xFFFFFFFFLL;
    }
LABEL_33:
    memset_s(__s, 0x40uLL, 0, 0x40uLL);
    if (a4) {
      return v19;
    }
LABEL_34:
    cc_clear();
    return v19;
  }
LABEL_6:
  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10009C024(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(void, void *, unint64_t *, unint64_t *, uint64_t), void *a5, unsigned int a6, void *a7, _DWORD *a8)
{
  uint64_t v11 = *a8;
  uint64_t v9 = sub_10009BCBC(a1, a2, a3, a4, a5, a6, a7, &v11);
  sub_1000AB744(HIDWORD(v11) == 0, 261, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t sub_10009C090(unsigned int a1, _DWORD *a2)
{
  uint64_t v2 = a1 + 15;
  uint64_t v3 = v2 << 31 >> 31;
  BOOL v4 = v3 != v2 || v3 < 0;
  int v5 = v4;
  if (!v4) {
    *a2 = v3 & 0xFFFFFFF8;
  }
  return v5 ^ 1u;
}

uint64_t sub_10009C0BC(unint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a1 >= 0xFFFFFFFFFFFFFFF1;
  BOOL v3 = v2 << 63 >> 63 != v2 || v2 << 63 >> 63 == -1;
  int v4 = v3;
  if (!v3) {
    *a2 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  }
  return v4 ^ 1u;
}

BOOL sub_10009C0EC(unsigned int a1, unsigned int *a2)
{
  unsigned int v2 = a1 - 8;
  BOOL result = a1 > 7;
  *a2 = v2;
  return result;
}

BOOL sub_10009C100(unint64_t a1, unint64_t *a2)
{
  unint64_t v2 = a1 - 8;
  BOOL result = a1 > 7;
  *a2 = v2;
  return result;
}

uint64_t sub_10009C114(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = v1;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v19 = __s;
  *((void *)&v19 + 1) = v23;
  size_t v20 = 4096;
  uint64_t v13 = 3758097090;
  if (v7 && v5)
  {
    mach_port_t v14 = sub_10009C37C();
    if (!v14)
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_new_vek", ":", 179, "", 0, "", "");
      uint64_t v13 = 3758097084;
      goto LABEL_16;
    }
    mach_port_t v15 = v14;
    if (!ccder_blob_encode_body_tl()
      || !sub_1000ADF38(&v19, v9)
      || !sub_1000ADF38(&v19, v11)
      || !sub_1000AE058(&v19, v12)
      || !ccder_blob_encode_tl())
    {
      goto LABEL_14;
    }
    input[0] = *((void *)&v19 + 1);
    input[1] = (uint64_t)v23 - *((void *)&v19 + 1);
    uint64_t v16 = IOConnectCallMethod(v15, 0x4Au, input, 2u, 0, 0, 0, 0, __s, &v20);
    if (v16)
    {
      uint64_t v13 = v16;
      goto LABEL_16;
    }
    *(void *)&long long v18 = __s;
    *((void *)&v18 + 1) = &__s[v20];
    if (!ccder_blob_decode_range() || !sub_1000ADFA8(&v18, 0, v5)) {
      goto LABEL_14;
    }
    if (!v3)
    {
      uint64_t v13 = 0;
      goto LABEL_16;
    }
    uint64_t v13 = 0;
    if ((sub_1000ADD94(&v18, 0, v3) & 1) == 0) {
LABEL_14:
    }
      uint64_t v13 = 3758097098;
  }
LABEL_16:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v13;
}

uint64_t sub_10009C37C()
{
  if (qword_1000E4278 != -1) {
    dispatch_once(&qword_1000E4278, &stru_1000D73E8);
  }
  dispatch_sync((dispatch_queue_t)qword_1000E4280, &stru_1000D7368);
  uint64_t result = dword_1000E4268;
  if (!dword_1000E4268)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStore");
    return dword_1000E4268;
  }
  return result;
}

unint64_t sub_10009C408(char *a1, const void *a2, size_t a3)
{
  unint64_t v3 = (unint64_t)a1;
  if (a1)
  {
    int v6 = open_dprotected_np(a1, 1793, 4, 0, 384);
    if (v6 == -1)
    {
      uint64_t v10 = __error();
      uint64_t v11 = strerror(*v10);
      syslog(3, "could not create file: %s (%s)\n", (const char *)v3, v11);
      return 0;
    }
    else
    {
      int v7 = v6;
      ssize_t v8 = write(v6, a2, a3);
      unint64_t v3 = v8 != -1;
      if (v8 == -1)
      {
        uint64_t v12 = __error();
        uint64_t v13 = strerror(*v12);
        syslog(3, "failed to write restore bag to disk %s\n", v13);
      }
      close(v7);
    }
  }
  return v3;
}

const char *sub_10009C4DC(char *a1, void *a2, off_t *a3)
{
  unint64_t v3 = a1;
  memset(&v14, 0, sizeof(v14));
  if (a1)
  {
    if (!stat(a1, &v14))
    {
      st_size_t size = v14.st_size;
      int v7 = open(v3, 0);
      if (v7 == -1)
      {
        uint64_t v12 = __error();
        uint64_t v13 = strerror(*v12);
        syslog(3, "could not open file: %s (%s)\n", v3, v13);
      }
      else
      {
        int v8 = v7;
        uint64_t v9 = calloc(st_size, 1uLL);
        unint64_t v3 = (const char *)(v9 != 0);
        if (!v9)
        {
LABEL_7:
          close(v8);
          return v3;
        }
        uint64_t v10 = v9;
        if (read(v8, v9, st_size) == st_size)
        {
          *a2 = v10;
          *a3 = st_size;
          goto LABEL_7;
        }
        close(v8);
        free(v10);
      }
    }
    return 0;
  }
  return v3;
}

uint64_t sub_10009C5E8(unsigned int a1, const void *a2)
{
  uint64_t input = a1;
  mach_port_t v3 = sub_10009C37C();
  if (v3) {
    return IOConnectCallMethod(v3, 0x6Cu, &input, 1u, a2, 0x10uLL, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_delete_xart_leak", ":", 268, "", 0, "", "");
  return 3758097084;
}

char *sub_10009C6D0(char *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    v9[0] = result;
    v9[1] = 0;
    uint64_t result = (char *)fts_open(v9, 84, 0);
    if (result)
    {
      int v5 = (FTS *)result;
      int v6 = fts_read((FTS *)result);
      if (v6)
      {
        int v7 = v6;
        do
        {
          int fts_info = v7->fts_info;
          if (fts_info != 6)
          {
            if (fts_info == 1)
            {
              if (a2)
              {
                if (((*(uint64_t (**)(uint64_t, FTSENT *))(a2 + 16))(a2, v7) & 1) == 0) {
                  fts_set(v5, v7, 4);
                }
              }
            }
            else if (a3 && fts_info == 8)
            {
              (*(void (**)(uint64_t, FTSENT *))(a3 + 16))(a3, v7);
            }
          }
          int v7 = fts_read(v5);
        }
        while (v7);
      }
      return (char *)fts_close(v5);
    }
  }
  return result;
}

char *sub_10009C7E0(char *result, int a2)
{
  if (result)
  {
    mach_port_t v3 = result;
    bzero(v8, 0x400uLL);
    uint64_t result = realpath_DARWIN_EXTSN(v3, v8);
    if (result)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 0x40000000;
      v6[2] = sub_10009C8F8;
      v6[3] = &unk_1000D72A8;
      int v7 = a2;
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 0x40000000;
      v4[2] = sub_10009C9B0;
      v4[3] = &unk_1000D72C8;
      int v5 = a2;
      return sub_10009C6D0(v8, (uint64_t)v6, (uint64_t)v4);
    }
  }
  return result;
}

uint64_t sub_10009C8F8(uint64_t a1, uint64_t a2)
{
  int v4 = sub_10009C954(*(const char **)(a2 + 48));
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || v4 == v5) {
    printf(" dir: %s %i\n", *(const char **)(a2 + 48), v4);
  }
  return 1;
}

uint64_t sub_10009C954(const char *a1)
{
  int v1 = open_dprotected_np(a1, 0, 0, 1);
  if (v1 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = v1;
  uint64_t v3 = fcntl(v1, 63);
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  return v3;
}

uint64_t sub_10009C9B0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10009C954(*(const char **)(a2 + 48));
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || result == v5) {
    return printf("file: %s %i\n", *(const char **)(a2 + 48), result);
  }
  return result;
}

uint64_t sub_10009CA08()
{
  io_registry_entry_t v0 = IORegistryEntryFromPath(kIOMasterPortDefault, "IODeviceTree:/filesystems");
  if (v0)
  {
    io_object_t v1 = v0;
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v0, @"e-apfs", kCFAllocatorDefault, 0);
    BOOL v3 = CFProperty != 0;
    if (CFProperty) {
      CFRelease(CFProperty);
    }
    IOObjectRelease(v1);
  }
  else
  {
    BOOL v3 = 0;
  }
  size_t __len = 1023;
  bzero(__big, 0x400uLL);
  if ((byte_1000E4270 & 1) == 0)
  {
    if (!sysctlbyname("kern.bootargs", __big, &__len, 0, 0) && strnstr(__big, "-apfs_shared_datavolume", __len)) {
      byte_1000E4271 = 1;
    }
    byte_1000E4270 = 1;
  }
  unsigned int v4 = byte_1000E4271;
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s ioreg: %d, boot_arg: %d%s\n", "aks", "", "", "", "aks_fs_supports_enhanced_apfs", ":", 437, "", 0, "", v3, byte_1000E4271, "");
  return v3 | v4;
}

uint64_t sub_10009CB8C(const char *a1)
{
  bzero(v4, 0x400uLL);
  bzero(__str, 0x400uLL);
  if (realpath_DARWIN_EXTSN(a1, v4))
  {
    snprintf(__str, 0x400uLL, "%s/mobile", v4);
    sub_10009CC60(v4, (uint64_t)&off_1000D5E88, 35);
    if ((sub_10009CA08() & 1) == 0) {
      sub_10009CC60(__str, (uint64_t)&off_1000D6518, 72);
    }
  }
  return 0;
}

void sub_10009CC60(const char *a1, uint64_t a2, uint64_t a3)
{
  bzero(__str, 0x400uLL);
  memset(&v7, 0, sizeof(v7));
  if (a3)
  {
    uint64_t v6 = a2 + 16;
    do
    {
      snprintf(__str, 0x400uLL, "%s%s", a1, *(const char **)(v6 - 16));
      if (stat(__str, &v7))
      {
        printf("stat failed: %s\n");
      }
      else
      {
        sub_10009C954(__str);
        printf("%s: mode=%o, u/g=%i:%i class=%i%s\n");
      }
      v6 += 48;
      --a3;
    }
    while (a3);
  }
}

uint64_t sub_10009CDA4(const char *a1)
{
  bzero(v3, 0x400uLL);
  if (realpath_DARWIN_EXTSN(a1, v3)) {
    sub_10009CC60(v3, (uint64_t)&off_1000D6518, 72);
  }
  return 0;
}

const char *sub_10009CE2C()
{
  puts("shared allow list:");
  sub_10009CE94("<var>", (uint64_t)&off_1000D5E88, 35);
  puts("user allow list:");

  return sub_10009CE94("<user>", (uint64_t)&off_1000D6518, 72);
}

const char *sub_10009CE94(const char *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    unsigned int v4 = result;
    int v5 = (const char **)(a2 + 16);
    uint64_t v6 = (const char **)(a2 + 16);
    do
    {
      char v7 = *(unsigned char *)v6;
      v6 += 6;
      if (v7) {
        uint64_t result = (const char *)printf("%s%s\n", v4, *(v5 - 2));
      }
      int v5 = v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_10009CF04(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unsigned int v9 = v8;
  uint64_t v10 = v1;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v17 = __s;
  *((void *)&v17 + 1) = &v21;
  size_t v18 = 4096;
  uint64_t v11 = 3758097090;
  if (v5 && v3)
  {
    mach_port_t v12 = sub_10009C37C();
    if (v12)
    {
      mach_port_t v13 = v12;
      if (!ccder_blob_encode_body_tl()
        || !sub_1000ADF38(&v17, v7)
        || !sub_1000AE058(&v17, v10)
        || !ccder_blob_encode_tl())
      {
        goto LABEL_10;
      }
      input[0] = v9;
      input[1] = *((void *)&v17 + 1);
      uint64_t input[2] = (uint64_t)&v21 - *((void *)&v17 + 1);
      uint64_t v14 = IOConnectCallMethod(v13, 0x4Cu, input, 3u, 0, 0, 0, 0, __s, &v18);
      if (v14)
      {
        uint64_t v11 = v14;
        goto LABEL_12;
      }
      *(void *)&long long v16 = __s;
      *((void *)&v16 + 1) = &__s[v18];
      if (!ccder_blob_decode_range() || (uint64_t v11 = 0, (sub_1000ADFA8(&v16, 0, v3) & 1) == 0)) {
LABEL_10:
      }
        uint64_t v11 = 3758097098;
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_new_kek", ":", 508, "", 0, "", "");
      uint64_t v11 = 3758097084;
    }
  }
LABEL_12:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v11;
}

uint64_t sub_10009D144(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v17 = __s;
  *((void *)&v17 + 1) = &v21;
  size_t v18 = 4096;
  uint64_t v11 = 3758097090;
  if (v7 && v5)
  {
    mach_port_t v12 = sub_10009C37C();
    if (!v12)
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_new_sibling_vek", ":", 543, "", 0, "", "");
      uint64_t v11 = 3758097084;
      goto LABEL_15;
    }
    mach_port_t v13 = v12;
    if (!ccder_blob_encode_body_tl()
      || !sub_1000ADF38(&v17, v9)
      || !sub_1000AE058(&v17, v10)
      || !ccder_blob_encode_tl())
    {
      goto LABEL_13;
    }
    input[0] = *((void *)&v17 + 1);
    input[1] = (uint64_t)&v21 - *((void *)&v17 + 1);
    uint64_t v14 = IOConnectCallMethod(v13, 0x63u, input, 2u, 0, 0, 0, 0, __s, &v18);
    if (v14)
    {
      uint64_t v11 = v14;
      goto LABEL_15;
    }
    *(void *)&long long v16 = __s;
    *((void *)&v16 + 1) = &__s[v18];
    if (!ccder_blob_decode_range() || !sub_1000ADFA8(&v16, 0, v5)) {
      goto LABEL_13;
    }
    if (!v3)
    {
      uint64_t v11 = 0;
      goto LABEL_15;
    }
    uint64_t v11 = 0;
    if ((sub_1000ADD94(&v16, 0, v3) & 1) == 0) {
LABEL_13:
    }
      uint64_t v11 = 3758097098;
  }
LABEL_15:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v11;
}

uint64_t sub_10009D398(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = v1;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v19 = __s;
  *((void *)&v19 + 1) = v23;
  size_t v20 = 4096;
  uint64_t v13 = 3758097090;
  if (v9 && v7 && v5 && v3)
  {
    mach_port_t v14 = sub_10009C37C();
    if (v14)
    {
      mach_port_t v15 = v14;
      if (!sub_1000ADF38(&v19, v5)
        || !ccder_blob_encode_body_tl()
        || !sub_1000ADF38(&v19, v9)
        || !sub_1000ADF38(&v19, v11)
        || !sub_1000AE058(&v19, v12)
        || !ccder_blob_encode_tl())
      {
        goto LABEL_14;
      }
      input[0] = *((void *)&v19 + 1);
      input[1] = (uint64_t)v23 - *((void *)&v19 + 1);
      uint64_t v16 = IOConnectCallMethod(v15, 0x4Du, input, 2u, 0, 0, 0, 0, __s, &v20);
      if (v16)
      {
        uint64_t v13 = v16;
        goto LABEL_16;
      }
      *(void *)&long long v18 = __s;
      *((void *)&v18 + 1) = &__s[v20];
      if (!ccder_blob_decode_range() || (uint64_t v13 = 0, (sub_1000ADFA8(&v18, 0, v3) & 1) == 0)) {
LABEL_14:
      }
        uint64_t v13 = 3758097098;
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_rewrap_kek", ":", 582, "", 0, "", "");
      uint64_t v13 = 3758097084;
    }
  }
LABEL_16:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v13;
}

uint64_t sub_10009D5FC(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  long long v19 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  unsigned int v12 = v11;
  uint64_t v13 = v1;
  uint64_t v14 = 3758097098;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v21 = __s;
  *((void *)&v21 + 1) = v25;
  size_t v22 = 4096;
  mach_port_t v15 = sub_10009C37C();
  if (!v15)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_set_protection", ":", 616, "", 0, "", "");
    uint64_t v14 = 3758097084;
    goto LABEL_14;
  }
  mach_port_t v16 = v15;
  if (sub_1000ADF38(&v21, v4)
    && sub_1000ADF38(&v21, v6)
    && sub_1000ADF38(&v21, v8)
    && sub_1000AE058(&v21, v13)
    && ccder_blob_encode_tl())
  {
    input[0] = v12;
    input[1] = v10;
    uint64_t input[2] = *((void *)&v21 + 1);
    uint64_t input[3] = (uint64_t)v25 - *((void *)&v21 + 1);
    uint64_t v17 = IOConnectCallMethod(v16, 0x54u, input, 4u, 0, 0, 0, 0, __s, &v22);
    if (v17)
    {
      uint64_t v14 = v17;
      goto LABEL_14;
    }
    *(void *)&long long v20 = __s;
    *((void *)&v20 + 1) = &__s[v22];
    if (!v22) {
      goto LABEL_13;
    }
    if (!ccder_blob_decode_range()) {
      goto LABEL_14;
    }
    if (!v19)
    {
LABEL_13:
      uint64_t v14 = 0;
      goto LABEL_14;
    }
    uint64_t v14 = 0;
    if ((sub_1000ADFA8(&v20, 0, v19) & 1) == 0) {
      uint64_t v14 = 3758097098;
    }
  }
LABEL_14:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v14;
}

uint64_t sub_10009D84C(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  unsigned int v13 = v12;
  uint64_t v14 = v1;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v21 = __s;
  *((void *)&v21 + 1) = v25;
  size_t v22 = 4096;
  if (!v7)
  {
    uint64_t v18 = 3758097090;
    goto LABEL_15;
  }
  mach_port_t v15 = sub_10009C37C();
  if (!v15)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_unwrap_vek_with_acm", ":", 653, "", 0, "", "");
    uint64_t v18 = 3758097084;
    goto LABEL_15;
  }
  mach_port_t v16 = v15;
  if (!sub_1000ADF38(&v21, v5)
    || !sub_1000ADF38(&v21, v7)
    || !sub_1000ADF38(&v21, v9)
    || !sub_1000ADF38(&v21, v11)
    || !sub_1000AE058(&v21, v14)
    || !ccder_blob_encode_tl())
  {
    goto LABEL_13;
  }
  input[0] = *((void *)&v21 + 1);
  input[1] = (uint64_t)v25 - *((void *)&v21 + 1);
  uint64_t input[2] = v13;
  uint64_t v17 = IOConnectCallMethod(v16, 0x4Bu, input, 3u, 0, 0, 0, 0, __s, &v22);
  if (v17)
  {
    uint64_t v18 = v17;
    goto LABEL_15;
  }
  *(void *)&long long v20 = __s;
  *((void *)&v20 + 1) = &__s[v22];
  if (!ccder_blob_decode_range()) {
    goto LABEL_13;
  }
  if (!v3)
  {
    uint64_t v18 = 0;
    goto LABEL_15;
  }
  uint64_t v18 = 0;
  if ((sub_1000ADD94(&v20, 0, v3) & 1) == 0) {
LABEL_13:
  }
    uint64_t v18 = 3758097098;
LABEL_15:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v18;
}

uint64_t sub_10009DABC(uint64_t a1)
{
  return sub_10009D84C(a1);
}

void sub_10009DAC8(const char *a1, char a2)
{
  if (a1)
  {
    bzero(&v13, 0x878uLL);
    bzero(v12, 0x400uLL);
    if (realpath_DARWIN_EXTSN(a1, v12))
    {
      uint64_t v4 = (char *)malloc(0x818uLL);
      memset_s(v4, 0x818uLL, 0, 0x818uLL);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 0x40000000;
      int v11[2] = sub_10009DD50;
      unint64_t v11[3] = &unk_1000D7328;
      uint8_t v11[4] = v4;
      sub_10009C6D0(v12, (uint64_t)&stru_1000D7308, (uint64_t)v11);
      if (!statfs(v12, &v13))
      {
        if (a2) {
          printf("Free Blocks:%lld blocks of size:%d\n");
        }
        else {
          printf("%lld,%d\n");
        }
      }
      uint64_t v5 = v4 + 340;
      for (uint64_t i = 1; i != 5; ++i)
      {
        if (a2)
        {
          uint64_t v9 = &v4[296 * i];
          printf("%s:\n\tNum files:\t%u,\n\tNum hardlinks:\t%u,\n\tNum compressed:\t%u,\n\tTotal Size:\t%lld,\n\tMin File Size:\t%lld,\n\tMax File Size:\t%lld,\n", off_1000E3748[i], *(_DWORD *)v9, *((_DWORD *)v9 + 2), *((_DWORD *)v9 + 1), *((void *)v9 + 2), *((void *)v9 + 3), *((void *)v9 + 4));
          printf("\tSize Distribution:");
          printf("%i", *((_DWORD *)v9 + 10));
          for (uint64_t j = 0; j != 252; j += 4)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[j]);
          }
        }
        else
        {
          uint64_t v7 = &v4[296 * i];
          printf("%i,%u,%u,%u,%lld,%lld,%lld,", i, *(_DWORD *)v7, *((_DWORD *)v7 + 2), *((_DWORD *)v7 + 1), *((void *)v7 + 2), *((void *)v7 + 3), *((void *)v7 + 4));
          printf("%i", *((_DWORD *)v7 + 10));
          for (uint64_t k = 0; k != 252; k += 4)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[k]);
          }
        }
        putchar(10);
        v5 += 296;
      }
      free(v4);
    }
  }
}

BOOL sub_10009DD48(id a1, _ftsent *a2)
{
  return 1;
}

uint64_t sub_10009DD50(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10009C954(*(const char **)(a2 + 48));
  if ((result - 7) >= 0xFFFFFFFA)
  {
    uint64_t v5 = *(void *)(a2 + 96);
    int64_t v6 = *(void *)(v5 + 96);
    uint64_t v7 = *(void *)(a1 + 32);
    ++*(_DWORD *)(v7 + 296 * result);
    if (*(unsigned __int16 *)(v5 + 6) >= 2u) {
      ++*(_DWORD *)(v7 + 296 * result + 8);
    }
    if ((*(unsigned char *)(v5 + 116) & 0x20) != 0) {
      ++*(_DWORD *)(v7 + 296 * result + 4);
    }
    uint64_t v8 = v7 + 296 * result;
    int64_t v10 = *(void *)(v8 + 32);
    uint64_t v9 = (int64_t *)(v8 + 32);
    *(v9 - 2) += v6;
    if (v6 > v10) {
      int64_t *v9 = v6;
    }
    uint64_t v11 = v7 + 296 * result;
    int64_t v14 = *(void *)(v11 + 24);
    unsigned int v12 = (int64_t *)(v11 + 24);
    int64_t v13 = v14;
    if (v14) {
      BOOL v15 = v6 < v13;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15) {
      int64_t *v12 = v6;
    }
    if (v6) {
      unint64_t v16 = v7 + 296 * result + 4 * (63 - __clz(v6));
    }
    else {
      unint64_t v16 = v7 + 296 * result;
    }
    ++*(_DWORD *)(v16 + 40);
  }
  return result;
}

uint64_t sub_10009DE5C(unsigned int a1, uint64_t a2)
{
  input[0] = 1;
  input[1] = a1;
  uint64_t input[2] = a2;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  mach_port_t v2 = sub_10009C37C();
  if (v2) {
    return IOConnectCallMethod(v2, 0x56u, input, 3u, 0, 0, &output, &outputCnt, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kext_set_options", ":", 820, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10009DF48(unsigned int a1, uint64_t *a2)
{
  uint64_t v2 = 3758097084;
  if (!a2) {
    return 3758097090;
  }
  input[0] = 0;
  input[1] = a1;
  uint64_t input[2] = 0;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  mach_port_t v4 = sub_10009C37C();
  if (v4)
  {
    uint64_t v2 = IOConnectCallMethod(v4, 0x56u, input, 3u, 0, 0, &output, &outputCnt, 0, 0);
    if (!v2) {
      *a2 = output;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kext_get_options", ":", 841, "", 0, "", "");
  }
  return v2;
}

uint64_t sub_10009E060()
{
  mach_port_t v0 = sub_10009C37C();
  if (v0) {
    return IOConnectCallMethod(v0, 0x10u, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_internal_state", ":", 857, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10009E108(unsigned int a1)
{
  mach_port_t v2 = sub_10009C37C();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x86u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_run_internal_test", ":", 871, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10009E1F0(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t v9 = v8;
  int v11 = v10;
  uint64_t v13 = v12;
  unsigned int v15 = v14;
  int v16 = v1;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000;
  mach_port_t v17 = sub_10009C37C();
  if (v17)
  {
    input[0] = v16;
    input[1] = v15;
    uint64_t input[2] = v13;
    uint64_t input[3] = v11;
    if (!v15 || (uint64_t v18 = 3758097090, v5) && v3)
    {
      uint64_t v18 = IOConnectCallMethod(v17, 0x36u, input, 4u, v9, v7, 0, 0, __src, &__count);
      if (!v18 && v15)
      {
        long long v19 = calloc(__count, 1uLL);
        *uint64_t v5 = v19;
        if (v19)
        {
          memcpy(v19, __src, __count);
          uint64_t v18 = 0;
          _DWORD *v3 = __count;
        }
        else
        {
          uint64_t v18 = 3758097085;
        }
      }
    }
  }
  else
  {
    uint64_t v18 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_escrow", ":", 890, "", 0, "", "");
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v18;
}

void sub_10009E3D0(id a1)
{
  if (!dword_1000E4268) {
    dword_1000E4268 = sub_10009EEE0("IOService:/IOResources/AppleKeyStore", "AppleKeyStore");
  }
}

uint64_t sub_10009E410()
{
  if (qword_1000E4278 != -1) {
    dispatch_once(&qword_1000E4278, &stru_1000D73E8);
  }
  dispatch_sync((dispatch_queue_t)qword_1000E4280, &stru_1000D73A8);
  uint64_t result = dword_1000E426C;
  if (!dword_1000E426C)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStoreTest");
    return dword_1000E426C;
  }
  return result;
}

void sub_10009E49C(id a1)
{
  if (!dword_1000E426C) {
    dword_1000E426C = sub_10009EEE0("IOService:/IOResources/AppleKeyStoreTest", "AppleKeyStoreTest");
  }
}

uint64_t sub_10009E4DC(mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  input[0] = a4;
  input[1] = a3;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  bzero(outputStruct, 0x400uLL);
  size_t v19 = 1024;
  uint64_t v11 = IOConnectCallMethod(a1, 0xFu, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v19);
  if (v11) {
    return v11;
  }
  uint64_t v17 = 3758097084;
  if (outputCnt == 1)
  {
    *a7 = output;
    if (sub_1000B07FC(outputStruct, v19, 3u, v12, v13, v14, v15, v16, a5)) {
      return 3758097084;
    }
    else {
      return 0;
    }
  }
  return v17;
}

uint64_t sub_10009E614(mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  input[0] = a4;
  input[1] = a3;
  uint64_t output = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint32_t outputCnt = 3;
  bzero(outputStruct, 0x400uLL);
  size_t v26 = 1024;
  uint64_t v17 = IOConnectCallMethod(a1, 0x13u, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v26);
  if (v17) {
    return v17;
  }
  uint64_t v23 = 3758097084;
  if (outputCnt == 3)
  {
    int v24 = v30;
    *a7 = output;
    *a10 = v24;
    *a13 = v31;
    if (sub_1000B07FC(outputStruct, v26, 5u, v18, v19, v20, v21, v22, a5)) {
      return 3758097084;
    }
    else {
      return 0;
    }
  }
  return v23;
}

uint64_t sub_10009E770(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, size_t *a8)
{
  uint64_t input = a3;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  sub_1000B071C((char **)&inputStructCnt[1], inputStructCnt, 2, a4, a5, a6, (uint64_t)a7, (uint64_t)a8, a2);
  uint64_t v11 = IOConnectCallMethod(a1, 0x14u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, a7, a8);
  free(*(void **)&inputStructCnt[1]);
  return v11;
}

uint64_t sub_10009E830(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, unsigned int a12, void *outputStruct, size_t *a14, _DWORD *a15)
{
  input[0] = a3;
  input[1] = a6;
  uint64_t input[2] = a9;
  uint64_t input[3] = a12;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  sub_1000B071C((char **)&inputStructCnt[1], inputStructCnt, 4, a4, a5, a6, a7, a8, a2);
  uint64_t v16 = IOConnectCallMethod(a1, 0x15u, input, 4u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], &output, &outputCnt, outputStruct, a14);
  if (v16)
  {
    uint64_t v17 = v16;
  }
  else if (outputCnt == 1)
  {
    uint64_t v17 = 0;
    *a15 = output;
  }
  else
  {
    uint64_t v17 = 3758097084;
  }
  free(*(void **)&inputStructCnt[1]);
  return v17;
}

uint64_t sub_10009E944(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  input[0] = a3;
  input[1] = a6;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  size_t outputStructCnt = 1024;
  sub_1000B071C((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, a2);
  uint64_t v15 = IOConnectCallMethod(a1, 0x10u, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, outputStruct, &outputStructCnt);
  if (v15)
  {
    uint64_t v21 = v15;
  }
  else if (sub_1000B07FC(outputStruct, outputStructCnt, 2u, v16, v17, v18, v19, v20, a7))
  {
    uint64_t v21 = 3758097084;
  }
  else
  {
    uint64_t v21 = 0;
  }
  free(*(void **)&inputStructCnt[1]);
  return v21;
}

uint64_t sub_10009EA80(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  input[0] = a3;
  input[1] = a6;
  uint64_t input[2] = a9;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  size_t v25 = 1024;
  sub_1000B071C((char **)&inputStructCnt[1], inputStructCnt, 3, v12, v13, v14, v15, v16, a2);
  uint64_t v17 = IOConnectCallMethod(a1, 0x17u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, outputStruct, &v25);
  if (v17)
  {
    uint64_t v23 = v17;
  }
  else if (sub_1000B07FC(outputStruct, v25, 2u, v18, v19, v20, v21, v22, a10))
  {
    uint64_t v23 = 3758097084;
  }
  else
  {
    uint64_t v23 = 0;
  }
  free(*(void **)&inputStructCnt[1]);
  return v23;
}

uint64_t sub_10009EBCC(mach_port_t a1, void *inputStruct, unsigned int a3)
{
  uint64_t input = a3;
  return IOConnectCallMethod(a1, 0x11u, &input, 1u, inputStruct, 0x10uLL, 0, 0, 0, 0);
}

uint64_t sub_10009EC40(mach_port_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t input = a2;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  sub_1000B071C((char **)&inputStructCnt[1], inputStructCnt, 1, a4, a5, a6, a7, a8, a3);
  uint64_t v9 = IOConnectCallMethod(a1, 0x12u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, 0, 0);
  free(*(void **)&inputStructCnt[1]);
  return v9;
}

uint64_t sub_10009ECF0(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t input = v1;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000;
  mach_port_t v8 = sub_10009C37C();
  if (v8)
  {
    if (v7) {
      size_t v9 = 18;
    }
    else {
      size_t v9 = 0;
    }
    uint64_t v10 = IOConnectCallMethod(v8, 0x5Du, &input, 1u, v7, v9, 0, 0, __src, &__count);
    size_t v11 = __count;
    if (v10)
    {
      uint64_t v13 = v10;
    }
    else if (__count - 32769 < 0xFFFFFFFFFFFF8000)
    {
      uint64_t v13 = 3758097090;
    }
    else
    {
      uint64_t v12 = calloc(__count, 1uLL);
      *uint64_t v5 = v12;
      size_t v11 = __count;
      if (v12)
      {
        size_t *v3 = __count;
        memcpy(v12, __src, v11);
        uint64_t v13 = 0;
        size_t v11 = __count;
      }
      else
      {
        uint64_t v13 = 3758097085;
      }
    }
  }
  else
  {
    uint64_t v13 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_internal_info_for_key", ":", 1246, "", 0, "", "");
    size_t v11 = 0x8000;
  }
  memset_s(__src, v11, 0, v11);
  return v13;
}

void sub_10009EEB4(id a1)
{
  qword_1000E4280 = (uint64_t)dispatch_queue_create("aks-client-queue", 0);
}

uint64_t sub_10009EEE0(char *path, const char *a2)
{
  kern_return_t v5;
  CFDictionaryRef v6;
  io_service_t MatchingService;
  io_object_t v8;
  uint64_t result;
  kern_return_t v10;
  io_connect_t connect;

  connect = 0;
  io_service_t v3 = IORegistryEntryFromPath(kIOMasterPortDefault, path);
  if (!v3 || (v4 = v3, uint64_t v5 = IOServiceOpen(v3, mach_task_self_, 0, &connect), IOObjectRelease(v4), v5))
  {
    int v6 = IOServiceMatching(a2);
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v6);
    if (MatchingService)
    {
      mach_port_t v8 = MatchingService;
      IOServiceOpen(MatchingService, mach_task_self_, 0, &connect);
      IOObjectRelease(v8);
    }
  }
  uint64_t result = connect;
  if (connect)
  {
    uint64_t v10 = IOConnectCallMethod(connect, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    uint64_t result = connect;
    if (v10)
    {
      IOServiceClose(connect);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10009EFD8()
{
  ccder_sizeof_implicit_uint64();
  ccder_sizeof_raw_octet_string();
  ccder_sizeof_raw_octet_string();
  ccder_sizeof_implicit_uint64();

  return ccder_sizeof();
}

uint64_t sub_10009F05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + a3;
  if (!ccder_blob_encode_implicit_uint64()
    || !ccder_blob_encode_implicit_raw_octet_string()
    || !ccder_blob_encode_implicit_raw_octet_string()
    || !ccder_blob_encode_implicit_raw_octet_string()
    || !ccder_blob_encode_implicit_uint64())
  {
    return 4294967273;
  }
  int v3 = ccder_blob_encode_tl();
  uint64_t result = 4294967273;
  if (v3)
  {
    if (a2 == v6) {
      return 0;
    }
    else {
      return 4294967273;
    }
  }
  return result;
}

uint64_t sub_10009F140(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&long long v6 = a1;
  *((void *)&v6 + 1) = a1 + a2;
  if (!ccder_blob_decode_range()
    || !sub_1000AF444(&v6, 0x8000000000000000, a3)
    || !sub_1000ACBA4(&v6, 0x8000000000000001, (uint64_t)(a3 + 1), 16)
    || !sub_1000ACBA4(&v6, 0x8000000000000002, (uint64_t)(a3 + 3), 40)
    || !sub_1000ACBA4(&v6, 0x8000000000000003, (uint64_t)(a3 + 8), 16))
  {
    return 4294967277;
  }
  int v4 = sub_1000AF444(&v6, 0x8000000000000004, a3 + 10);
  uint64_t result = 4294967277;
  if (v4)
  {
    if ((void)v6 == *((void *)&v6 + 1)) {
      return 0;
    }
    else {
      return 4294967277;
    }
  }
  return result;
}

uint64_t sub_10009F220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(__s, 0, sizeof(__s));
  int v9 = 40;
  *(void *)a4 = 0;
  uuid_copy((unsigned __int8 *)(a4 + 8), (const unsigned __int8 *)(a1 + 32));
  *(void *)(a4 + 80) = 1;
  sub_1000AF7F8(a4 + 64, 0x10u);
  ccsha256_di();
  if (j__ccpbkdf2_hmac())
  {
    uint64_t v7 = 4294967286;
  }
  else
  {
    uint64_t v6 = sub_10009BC50((uint64_t)__s, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, (uint64_t *)a1, 0x20u, (void *)(a4 + 24), &v9);
    if (v6)
    {
      uint64_t v7 = v6;
    }
    else if (v9 == 40)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 4294967286;
    }
  }
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v7;
}

uint64_t sub_10009F358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(__s, 0, sizeof(__s));
  int v9 = 32;
  if (*(void *)a1)
  {
    uint64_t v7 = 4294967284;
  }
  else
  {
    ccsha256_di();
    if (j__ccpbkdf2_hmac()) {
      goto LABEL_9;
    }
    uint64_t v6 = sub_10009C024((uint64_t)__s, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, (void *)(a1 + 24), 0x28u, (void *)a4, &v9);
    if (v6)
    {
      uint64_t v7 = v6;
      goto LABEL_8;
    }
    if (v9 != 32)
    {
LABEL_9:
      uint64_t v7 = 4294967286;
    }
    else
    {
      cccurve25519_make_pub();
      if (uuid_compare((const unsigned __int8 *)(a1 + 8), (const unsigned __int8 *)(a4 + 32))) {
        uint64_t v7 = 4294967272;
      }
      else {
        uint64_t v7 = 0;
      }
    }
  }
LABEL_8:
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v7;
}

uint64_t sub_10009F494(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v7 = v6;
  unsigned int v9 = v8;
  unsigned int v11 = v10;
  int v12 = v1;
  uint64_t v13 = 3758097098;
  bzero(v19, 0x1000uLL);
  *(void *)&long long v17 = v19;
  *((void *)&v17 + 1) = &v20;
  mach_port_t v14 = sub_10009C37C();
  if (v14)
  {
    mach_port_t v15 = v14;
    if (sub_1000ADF38(&v17, v3) && ccder_blob_encode_tl())
    {
      input[0] = v12;
      input[1] = v11;
      uint64_t input[2] = v7;
      uint64_t input[3] = v5;
      uint64_t input[4] = v9;
      input[5] = *((void *)&v17 + 1);
      input[6] = (uint64_t)&v20 - *((void *)&v17 + 1);
      return IOConnectCallMethod(v15, 0x21u, input, 7u, 0, 0, 0, 0, 0, 0);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_create_for_bag_and_kek", ":", 50, "", 0, "", "");
    return 3758097084;
  }
  return v13;
}

uint64_t sub_10009F644(uint64_t a1)
{
  return sub_10009F494(a1);
}

uint64_t sub_10009F678(int a1)
{
  return sub_10009F684(a1, 0, 0);
}

uint64_t sub_10009F684(int a1, unsigned int a2, BOOL *a3)
{
  mach_port_t v6 = sub_10009C37C();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t output = 0;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(v6, 0x22u, input, 2u, 0, 0, &output, &outputCnt, 0, 0);
    if (!result)
    {
      uint64_t result = 0;
      if (a3) {
        *a3 = output != 0;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_aks_stash_load", ":", 77, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_10009F7A8(int a1, unsigned char *a2)
{
  BOOL v4 = 0;
  if (!a2) {
    return sub_10009F684(a1, 1u, &v4);
  }
  *a2 = 0;
  uint64_t result = sub_10009F684(a1, 1u, &v4);
  if (!result) {
    *a2 = v4;
  }
  return result;
}

uint64_t sub_10009F804()
{
  mach_port_t v0 = sub_10009C37C();
  if (v0) {
    return IOConnectCallMethod(v0, 0x25u, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_destroy", ":", 125, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10009F8AC(int a1)
{
  mach_port_t v2 = sub_10009C37C();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x24u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_commit", ":", 138, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10009F994(int a1)
{
  mach_port_t v2 = sub_10009C37C();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x33u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_enable", ":", 154, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10009FA7C(int a1)
{
  mach_port_t v2 = sub_10009C37C();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x35u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_persist", ":", 170, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10009FB64(void **a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != 1634431856) {
    return 0xFFFFFFFFLL;
  }
  free(a1[1]);
  free(a1);
  return 0;
}

uint64_t sub_10009FBC4(int a1, uint64_t a2, unint64_t a3, int a4, void ***a5)
{
  mach_port_t v14 = 0;
  if (!a2 && a3) {
    return 0xFFFFFFFFLL;
  }
  if (sub_10009FCCC(a4, &v14) || (unsigned int v9 = calloc(0x20uLL, 1uLL)) == 0)
  {
    uint64_t v12 = 0xFFFFFFFFLL;
  }
  else
  {
    unsigned int v10 = v9;
    int v11 = sub_10009FDB4(v14, a2, a3, (uint64_t)v9);
    uint64_t v12 = 0xFFFFFFFFLL;
    if (a3 <= 0x7FFFFFFE && !v11 && !sub_10009FE5C(a1, a2, a3, (uint64_t)v10, (uint64_t)v14))
    {
      uint64_t v12 = 0;
      if (a5)
      {
        *a5 = v14;
        mach_port_t v14 = 0;
      }
    }
    memset_s(v10, 0x20uLL, 0, 0x20uLL);
    free(v10);
  }
  if (v14) {
    sub_10009FB64(v14);
  }
  return v12;
}

uint64_t sub_10009FCCC(int a1, void *a2)
{
  if ((a1 - 1) > 2 || a2 == 0) {
    return 0xFFFFFFFFLL;
  }
  mach_port_t v6 = calloc(0x20uLL, 1uLL);
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = v6;
  *((void *)v6 + 2) = 20;
  unsigned int v8 = calloc(0x14uLL, 1uLL);
  *((void *)v7 + 1) = v8;
  if (!v8)
  {
LABEL_19:
    free(v7);
    return 0xFFFFFFFFLL;
  }
  *uint64_t v7 = 1634431856;
  v7[6] = a1;
  uint64_t result = CCRandomCopyBytes();
  if (result)
  {
    unsigned int v10 = (void *)*((void *)v7 + 1);
    if (v10) {
      free(v10);
    }
    goto LABEL_19;
  }
  if (a1 == 3) {
    int v9 = 2000;
  }
  else {
    int v9 = 10000000;
  }
  if (a1 == 2) {
    int v9 = 1000;
  }
  v7[1] = v9;
  *a2 = v7;
  return result;
}

uint64_t sub_10009FDB4(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*a1 != 1634431856 || !a2 && a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (a4 && (a1[6] - 4) >= 0xFFFFFFFD)
  {
    ccsha256_di();
    if (ccpbkdf2_hmac()) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10009FE5C(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  rsize_t __n = 0;
  __s = 0;
  uint64_t v10 = 3758097090;
  mach_port_t v14 = 0;
  if ((a2 || !a3) && a4 && a5)
  {
    mach_port_t v11 = sub_10009C37C();
    if (v11)
    {
      mach_port_t v12 = v11;
      if (!sub_1000AD380(&v14, (uint64_t)off_1000E3B10, *(void *)(a5 + 8))
        && !sub_1000AD380(&v14, (uint64_t)off_1000E3B08, a4)
        && !sub_1000AD748(&v14, (uint64_t)off_1000E3B18, *(unsigned int *)(a5 + 4))
        && !sub_1000AD748(&v14, (uint64_t)off_1000E3B20, *(unsigned int *)(a5 + 24))
        && (a3 < 1 || !sub_1000AD380(&v14, (uint64_t)off_1000E37D8, a2))
        && !sub_1000ADC78(&v14)
        && !sub_1000AD030(&v14, &__s, &__n))
      {
        input[0] = a1;
        input[1] = (uint64_t)__s;
        uint64_t input[2] = __n;
        uint64_t v10 = IOConnectCallMethod(v12, 0x1Eu, input, 3u, 0, 0, 0, 0, 0, 0);
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_set_prederived_configuration", ":", 218, "", 0, "", "");
      uint64_t v10 = 3758097084;
    }
  }
  sub_1000AC924(&v14);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v10;
}

uint64_t sub_1000A0088(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  int v4 = v1;
  uint64_t result = (uint64_t)calloc(0x20uLL, 1uLL);
  if (!result) {
    return result;
  }
  uint64_t v6 = result;
  *(_DWORD *)uint64_t result = 1634431856;
  mach_port_t v7 = sub_10009C37C();
  if (!v7)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_get_prederived_configuration", ":", 384, "", 0, "", "");
LABEL_16:
    sub_10009FB64((void **)v6);
    return 0;
  }
  mach_port_t v8 = v7;
  bzero(outputStruct, 0x8000uLL);
  v14[0] = 0x8000;
  uint64_t input = v4;
  if (IOConnectCallMethod(v8, 0x1Fu, &input, 1u, 0, 0, 0, 0, outputStruct, v14) || v14[0] > 0x8000) {
    goto LABEL_16;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  long long v16 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  long long v15 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  v14[1] = (size_t)off_1000E3B10;
  long long v17 = (unint64_t)off_1000E3B18;
  uint64_t v20 = off_1000E3B20;
  sub_1000AC3DC();
  uint64_t v10 = ccder_decode_tl();
  if (v10)
  {
    mach_port_t v11 = (const void *)v10;
    mach_port_t v12 = calloc(*(void *)(v6 + 16), 1uLL);
    *(void *)(v6 + 8) = v12;
    if (!v12)
    {
      int v13 = 0;
      if (!Mutable) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    memcpy(v12, v11, *(void *)(v6 + 16));
    *(_DWORD *)(v6 + 4) = sub_1000AC614();
    *(_DWORD *)(v6 + 24) = sub_1000AC614();
  }
  int v13 = 1;
  if (Mutable) {
LABEL_10:
  }
    CFRelease(Mutable);
LABEL_11:
  if (!v13 || !*(void *)(v6 + 16)) {
    goto LABEL_16;
  }
  uint64_t *v3 = v6;
  return 1;
}

uint64_t sub_1000A0358(int a1, uint64_t a2, int a3, _DWORD *a4)
{
  memset(v9, 0, sizeof(v9));
  if (a3) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  BOOL v5 = v4 || a4 == 0;
  if (v5 || *a4 != 1634431856 || sub_10009FDB4(a4, a2, a3, (uint64_t)v9)) {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v7 = sub_1000A0424(a1, (uint64_t)v9, 32);
  }
  memset_s(v9, 0x20uLL, 0, 0x20uLL);
  return v7;
}

uint64_t sub_1000A0424(int a1, uint64_t a2, int a3)
{
  mach_port_t v6 = sub_10009C37C();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    return IOConnectCallMethod(v6, 0xCu, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unlock_bag", ":", 807, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A0524(int a1, uint64_t a2, int a3, uint64_t a4, int a5, void ***a6)
{
  memset(__s, 0, sizeof(__s));
  memset(v17, 0, sizeof(v17));
  long long v16 = 0;
  if (!a6) {
    goto LABEL_17;
  }
  uint64_t v7 = *a6;
  if (!*a6 || *(_DWORD *)v7 != 1634431856 || !a2 && a3) {
    goto LABEL_17;
  }
  if (!a4 && a5 || sub_10009FDB4(*a6, a2, a3, (uint64_t)__s)) {
    goto LABEL_17;
  }
  int v11 = sub_10009FCCC(*((_DWORD *)v7 + 6), &v16);
  mach_port_t v12 = v16;
  if (v11 || (int v13 = sub_10009FDB4(v16, a4, a5, (uint64_t)v17), v12 = v16, v13))
  {
LABEL_15:
    if (v12) {
      sub_10009FB64(v12);
    }
LABEL_17:
    uint64_t v14 = 0xFFFFFFFFLL;
    goto LABEL_13;
  }
  if (sub_10009FE5C(a1, (uint64_t)__s, 32, (uint64_t)v17, (uint64_t)v16))
  {
    mach_port_t v12 = v16;
    goto LABEL_15;
  }
  sub_10009FB64(v7);
  uint64_t v14 = 0;
  *a6 = v16;
LABEL_13:
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  memset_s(v17, 0x20uLL, 0, 0x20uLL);
  return v14;
}

uint64_t sub_1000A0688(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  return sub_1000A06A0(a1, a2, 0, 0, a3, -1, a4);
}

uint64_t sub_1000A06A0(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5, int a6, _DWORD *a7)
{
  uint64_t v14 = 3758097084;
  mach_port_t v15 = sub_10009C37C();
  if (v15)
  {
    if (a7)
    {
      input[0] = a5;
      input[1] = a6;
      uint64_t input[2] = a1;
      uint64_t input[3] = a2;
      uint64_t input[4] = a3;
      input[5] = a4;
      uint64_t output = 0;
      uint32_t outputCnt = 1;
      uint64_t v14 = IOConnectCallMethod(v15, 2u, input, 6u, 0, 0, &output, &outputCnt, 0, 0);
      if (!v14) {
        *a7 = output;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_create_bag", ":", 187, "", 0, "", "");
  }
  return v14;
}

uint64_t sub_1000A07F8(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return sub_1000A06A0(a1, a2, 0, 0, 2u, a3, a4);
}

uint64_t sub_1000A0810(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return sub_1000A06A0(a3, a4, a1, a2, 2u, a5, a6);
}

uint64_t sub_1000A0838(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return sub_1000A06A0(a1, a2, 0, 0, 0x8000002u, a3, a4);
}

uint64_t sub_1000A0854(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return sub_1000A06A0(a3, a4, a1, a2, 0x8000002u, a5, a6);
}

uint64_t sub_1000A0880()
{
  mach_port_t v0 = sub_10009C37C();
  if (v0) {
    return IOConnectCallMethod(v0, 0x42u, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_invalidate_sync_bags", ":", 544, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A0928(const void *a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10 = 3758097084;
  mach_port_t v11 = sub_10009C37C();
  if (v11)
  {
    if (a1)
    {
      input[0] = a5;
      input[1] = a3;
      uint64_t input[2] = a4;
      return IOConnectCallMethod(v11, 0x43u, input, 3u, a1, a2, 0, 0, 0, 0);
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unlock_with_sync_bag", ":", 557, "", 0, "", "");
  }
  return v10;
}

uint64_t sub_1000A0A4C(const void *a1, int a2, _DWORD *a3)
{
  uint64_t v6 = 3758097084;
  mach_port_t v7 = sub_10009C37C();
  if (v7)
  {
    uint64_t v6 = 3758097090;
    if (a1)
    {
      if (a3)
      {
        uint64_t output = 0;
        uint32_t outputCnt = 1;
        uint64_t v6 = IOConnectCallMethod(v7, 6u, 0, 0, a1, a2, &output, &outputCnt, 0, 0);
        if (!v6) {
          *a3 = output;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_load_bag", ":", 574, "", 0, "", "");
  }
  return v6;
}

uint64_t sub_1000A0B68(const void *a1, int a2)
{
  uint64_t v4 = 3758097084;
  mach_port_t v5 = sub_10009C37C();
  if (v5)
  {
    if (a1) {
      return IOConnectCallMethod(v5, 0x57u, 0, 0, a1, a2, 0, 0, 0, 0);
    }
    return 3758097090;
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_invalidate_bag", ":", 596, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_1000A0C38(int a1)
{
  mach_port_t v2 = sub_10009C37C();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 4u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unload_bag", ":", 612, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A0D20(int a1)
{
  mach_port_t v2 = sub_10009C37C();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x37u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unload_session_bags", ":", 629, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A0E08(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  mach_port_t v5 = v4;
  int v6 = v1;
  mach_port_t v7 = sub_10009C37C();
  if (v7)
  {
    mach_port_t v8 = v7;
    uint64_t result = 3758097090;
    if (v5)
    {
      if (v3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000;
        uint64_t input = v6;
        uint64_t result = IOConnectCallMethod(v8, 3u, &input, 1u, 0, 0, 0, 0, __src, &__count);
        if (!result)
        {
          uint64_t v10 = calloc(__count, 1uLL);
          *mach_port_t v5 = v10;
          if (v10)
          {
            memcpy(v10, __src, __count);
            uint64_t result = 0;
            _DWORD *v3 = __count;
          }
          else
          {
            return 3758097085;
          }
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_save_bag", ":", 646, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_1000A0F98(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, unsigned int a12, _DWORD *a13)
{
  mach_port_t v21 = sub_10009C37C();
  if (v21)
  {
    input[0] = a1;
    input[1] = a11;
    uint64_t input[2] = a10;
    uint64_t input[3] = a2;
    uint64_t input[4] = a3;
    input[5] = a4;
    uint64_t input[6] = a5;
    uint64_t input[7] = a6;
    input[8] = a7;
    input[9] = a8;
    input[10] = a9;
    input[11] = a12;
    uint64_t output = 0;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(v21, 0xFu, input, 0xCu, 0, 0, &output, &outputCnt, 0, 0);
    if (a13)
    {
      if (!result) {
        *a13 = output;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_change_secret_opts", ":", 678, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_1000A110C(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, _DWORD *a12)
{
  return sub_1000A0F98(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0, a12);
}

uint64_t sub_1000A1130(int a1, uint64_t a2, int a3, uint64_t a4, int a5, unsigned int a6, _DWORD *a7)
{
  return sub_1000A0F98(a1, a2, a3, a4, a5, 0, 0, 0, 0, 0xFFu, a6, 0, a7);
}

uint64_t sub_1000A1170(int a1, _OWORD *a2)
{
  uint64_t v4 = 3758097084;
  size_t v7 = 16;
  mach_port_t v5 = sub_10009C37C();
  if (v5)
  {
    if (a2)
    {
      long long outputStruct = 0uLL;
      uint64_t input = a1;
      uint64_t v4 = IOConnectCallMethod(v5, 0x17u, &input, 1u, 0, 0, 0, 0, &outputStruct, &v7);
      if (!v4) {
        *a2 = outputStruct;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_bag_uuid", ":", 729, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_1000A1298(int a1, void *a2, size_t *a3)
{
  return sub_1000A12AC(a1, (uint64_t)&unk_1000B6490, a2, a3);
}

uint64_t sub_1000A12AC(int a1, uint64_t a2, void *a3, size_t *a4)
{
  __int16 v23 = 0;
  memset(__src, 0, sizeof(__src));
  size_t __count = 34;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v8 = sub_10009C37C();
  if (v8)
  {
    uint64_t v14 = 3758097090;
    if (a3 && a4)
    {
      mach_port_t v15 = v8;
      uint64_t input = a1;
      sub_1000B071C((char **)&inputStructCnt[1], inputStructCnt, 1, v9, v10, v11, v12, v13, a2);
      if (*(void *)&inputStructCnt[1])
      {
        uint64_t v16 = IOConnectCallMethod(v15, 0x44u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
        if (v16)
        {
          uint64_t v14 = v16;
        }
        else
        {
          long long v17 = calloc(__count, 1uLL);
          *a3 = v17;
          uint64_t v14 = 3758097085;
          if (v17)
          {
            memcpy(v17, __src, __count);
            uint64_t v14 = 0;
            *a4 = __count;
          }
        }
      }
      else
      {
        uint64_t v14 = 3758097085;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_copy_volume_cookie_persona", ":", 760, "", 0, "", "");
    uint64_t v14 = 3758097084;
  }
  free(*(void **)&inputStructCnt[1]);
  return v14;
}

uint64_t sub_1000A145C(int a1)
{
  mach_port_t v2 = sub_10009C37C();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0xDu, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lock_bag", ":", 790, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A1544(int a1, _DWORD *a2)
{
  uint64_t v4 = 3758097084;
  mach_port_t v5 = sub_10009C37C();
  if (v5)
  {
    if (a2)
    {
      uint64_t output = 0;
      uint64_t input = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(v5, 7u, &input, 1u, 0, 0, &output, &outputCnt, 0, 0);
      if (!v4) {
        *a2 = output;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_lock_state", ":", 824, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_1000A1660(const void *a1, int a2, int a3, int a4, void *a5, int *a6, _DWORD *a7)
{
  uint64_t v14 = 3758097084;
  mach_port_t v15 = sub_10009C37C();
  if (v15)
  {
    uint64_t v14 = 3758097090;
    if (a1 && a5 && a6)
    {
      input[0] = a4;
      input[1] = a3;
      uint64_t output = 0;
      uint32_t outputCnt = 1;
      size_t v18 = *a6;
      uint64_t v16 = IOConnectCallMethod(v15, 0xAu, input, 2u, a1, a2, &output, &outputCnt, a5, &v18);
      if (v16)
      {
        return v16;
      }
      else
      {
        *a6 = v18;
        uint64_t v14 = 0;
        if (a7) {
          *a7 = output;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_wrap_key", ":", 848, "", 0, "", "");
  }
  return v14;
}

uint64_t sub_1000A17CC(const void *a1, int a2, int a3, int a4, void *a5, int *a6)
{
  uint64_t v12 = 3758097084;
  mach_port_t v13 = sub_10009C37C();
  if (v13)
  {
    uint64_t v12 = 3758097090;
    if (a1)
    {
      if (a5)
      {
        if (a6)
        {
          input[0] = a4;
          input[1] = a3;
          size_t v15 = *a6;
          uint64_t v12 = IOConnectCallMethod(v13, 0xBu, input, 2u, a1, a2, 0, 0, a5, &v15);
          if (!v12) {
            *a6 = v15;
          }
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unwrap_key", ":", 877, "", 0, "", "");
  }
  return v12;
}

uint64_t sub_1000A1914(const void *a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t v14 = 3758097084;
  mach_port_t v15 = sub_10009C37C();
  if (v15)
  {
    uint64_t v14 = 3758097090;
    if (a1 && a7)
    {
      input[0] = a3;
      input[1] = a4;
      uint64_t input[2] = a5;
      uint64_t input[3] = a6;
      size_t v17 = 108;
      return IOConnectCallMethod(v15, 0x18u, input, 4u, a1, a2, 0, 0, a7, &v17);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_rewrap_key_for_backup", ":", 901, "", 0, "", "");
  }
  return v14;
}

uint64_t sub_1000A1A58(int a1, _DWORD *a2)
{
  uint64_t v4 = 3758097084;
  mach_port_t v5 = sub_10009C37C();
  if (v5)
  {
    if (a2)
    {
      uint64_t output = 0;
      uint64_t input = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(v5, 0xEu, &input, a1 != 0, 0, 0, &output, &outputCnt, 0, 0);
      if (!v4) {
        *a2 = output;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_system", ":", 922, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_1000A1B78(int a1, int a2, uint64_t a3, int a4)
{
  mach_port_t v8 = sub_10009C37C();
  if (v8)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a4;
    return IOConnectCallMethod(v8, 5u, input, 4u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_system_with_passcode", ":", 950, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A1C80(int a1, int a2)
{
  return sub_1000A1B78(a1, a2, 0, 0);
}

uint64_t sub_1000A1C8C(int a1, uint64_t a2, unsigned int a3)
{
  return sub_1000A1CAC(a1, a2, a3);
}

uint64_t sub_1000A1CA0(int a1, uint64_t a2, unsigned int a3)
{
  return sub_1000A1CAC(a1, a2, a3);
}

uint64_t sub_1000A1CAC(int a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v7 = sub_10009C37C();
  if (v7)
  {
    mach_port_t v13 = v7;
    input[0] = a1;
    input[1] = a3;
    sub_1000B071C((char **)&inputStructCnt[1], inputStructCnt, 3, v8, v9, v10, v11, v12, a2);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v6 = IOConnectCallMethod(v13, 0x41u, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, 0, 0);
      uint64_t v14 = *(void **)&inputStructCnt[1];
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v6 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_keybag_for_volume_with_cookie_persona", ":", 987, "", 0, "", "");
    uint64_t v14 = 0;
  }
  free(v14);
  return v6;
}

uint64_t sub_1000A1E18(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  mach_port_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  uint64_t v11 = 3758097085;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000;
  mach_port_t v12 = sub_10009C37C();
  if (v12)
  {
    mach_port_t v18 = v12;
    input[0] = v9;
    input[1] = v7;
    sub_1000B071C((char **)&inputStructCnt[1], inputStructCnt, 1, v13, v14, v15, v16, v17, v10);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v19 = IOConnectCallMethod(v18, 0x6Eu, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
      if (v19)
      {
        uint64_t v11 = v19;
      }
      else
      {
        uint64_t v20 = calloc(__count, 1uLL);
        *mach_port_t v5 = v20;
        if (v20)
        {
          memcpy(v20, __src, __count);
          uint64_t v11 = 0;
          size_t *v3 = __count;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_enable_volume", ":", 1014, "", 0, "", "");
    uint64_t v11 = 3758097084;
  }
  free(*(void **)&inputStructCnt[1]);
  return v11;
}

uint64_t sub_1000A1FD0(uint64_t a1)
{
  uint64_t v2 = 3758097084;
  uint64_t v13 = 0;
  int v12 = 0;
  mach_port_t v3 = sub_10009C37C();
  if (v3)
  {
    mach_port_t v9 = v3;
    sub_1000B071C(&v13, (unsigned int *)&v12, 1, v4, v5, v6, v7, v8, a1);
    if (v13)
    {
      uint64_t v2 = IOConnectCallMethod(v9, 0x6Fu, 0, 0, v13, v12, 0, 0, 0, 0);
      uint64_t v10 = v13;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v2 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_disable_volume", ":", 1044, "", 0, "", "");
    uint64_t v10 = 0;
  }
  free(v10);
  return v2;
}

uint64_t sub_1000A20D8(uint64_t a1, void *a2)
{
  uint64_t v4 = 3758097084;
  uint64_t v16 = 0;
  int v15 = 0;
  size_t v14 = 16;
  mach_port_t v5 = sub_10009C37C();
  if (v5)
  {
    mach_port_t v11 = v5;
    sub_1000B071C(&v16, (unsigned int *)&v15, 1, v6, v7, v8, v9, v10, a1);
    if (v16)
    {
      uint64_t v4 = IOConnectCallMethod(v11, 0x70u, 0, 0, v16, v15, 0, 0, a2, &v14);
      int v12 = v16;
    }
    else
    {
      int v12 = 0;
      uint64_t v4 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_copy_current_bag_uuid", ":", 1066, "", 0, "", "");
    int v12 = 0;
  }
  free(v12);
  return v4;
}

uint64_t sub_1000A21F0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t v13 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v14 = sub_10009C37C();
  if (v14)
  {
    mach_port_t v20 = v14;
    mach_port_t v21 = 0;
    uint64_t v13 = 3758097090;
    if (a2 && a7)
    {
      input[0] = a4;
      input[1] = a5;
      uint64_t input[2] = a6;
      sub_1000B071C((char **)&inputStructCnt[1], inputStructCnt, 2, v15, v16, v17, v18, v19, a1);
      size_t v23 = 108;
      uint64_t v13 = IOConnectCallMethod(v20, 0x71u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, a7, &v23);
      mach_port_t v21 = *(void **)&inputStructCnt[1];
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_rewrap_key", ":", 1087, "", 0, "", "");
    mach_port_t v21 = 0;
  }
  free(v21);
  return v13;
}

uint64_t sub_1000A2374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, void *outputStruct)
{
  uint64_t v15 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v16 = sub_10009C37C();
  if (v16)
  {
    mach_port_t v22 = v16;
    size_t v23 = 0;
    uint64_t v15 = 3758097090;
    if (a2 && a4 && outputStruct)
    {
      input[0] = a6;
      input[1] = a7;
      uint64_t input[2] = a8;
      sub_1000B071C((char **)&inputStructCnt[1], inputStructCnt, 3, v17, v18, v19, v20, v21, a1);
      size_t v25 = 108;
      uint64_t v15 = IOConnectCallMethod(v22, 0x71u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, outputStruct, &v25);
      size_t v23 = *(void **)&inputStructCnt[1];
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_rewrap_ek", ":", 1113, "", 0, "", "");
    size_t v23 = 0;
  }
  free(v23);
  return v15;
}

uint64_t sub_1000A250C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long __s = 0u;
  long long v16 = 0u;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t v8 = sub_10009F140(a1, a2, v13);
  if (v8)
  {
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = sub_10009F358((uint64_t)v13, a3, a4, (uint64_t)&__s);
    if (!v9)
    {
      long long v10 = v16;
      *a5 = __s;
      a5[1] = v10;
      long long v11 = v18;
      a5[2] = v17;
      a5[3] = v11;
    }
  }
  memset_s(v13, 0x58uLL, 0, 0x58uLL);
  memset_s(&__s, 0x40uLL, 0, 0x40uLL);
  return sub_1000AB690(v9);
}

uint64_t sub_1000A25FC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  uint64_t v4 = sub_10009F140(a1, a2, v6);
  if (!v4) {
    uuid_copy(a3, (const unsigned __int8 *)v6 + 8);
  }
  memset_s(v6, 0x58uLL, 0, 0x58uLL);
  return sub_1000AB690(v4);
}

uint64_t sub_1000A26A8(long long *a1, void *a2, unsigned int a3, void *a4, void *a5)
{
  long long v6 = a1[1];
  long long v12 = *a1;
  long long v13 = v6;
  long long v7 = a1[3];
  long long v14 = a1[2];
  long long v15 = v7;
  unsigned int v10 = *a5;
  int __s = 1;
  uint64_t v8 = sub_1000ABCD0((uint64_t)&__s, 0, 0, a2, a3, a4, &v10);
  *a5 = v10;
  memset_s(&__s, 0x44uLL, 0, 0x44uLL);
  return sub_1000AB690(v8);
}

uint64_t sub_1000A2768(uint64_t a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t v10 = 3758097084;
  mach_port_t v11 = sub_10009C37C();
  if (v11)
  {
    uint64_t v10 = 3758097090;
    if (a2 && a4)
    {
      input[0] = a1;
      input[1] = 64;
      return IOConnectCallMethod(v11, 0x82u, input, 2u, a2, a3, 0, 0, a4, a5);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_unwrap_key", ":", 1193, "", 0, "", "");
  }
  return v10;
}

uint64_t sub_1000A2884(int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t v10 = 3758097084;
  mach_port_t v11 = sub_10009C37C();
  if (v11)
  {
    uint64_t v10 = 3758097090;
    if (a2 && a4)
    {
      uint64_t input = a1;
      return IOConnectCallMethod(v11, 0x81u, &input, 1u, a2, a3, 0, 0, a4, a5);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_wrap_key", ":", 1212, "", 0, "", "");
  }
  return v10;
}

uint64_t sub_1000A29A0(int a1, _DWORD *a2)
{
  uint64_t v4 = 3758097084;
  mach_port_t v5 = sub_10009C37C();
  if (v5)
  {
    if (a2)
    {
      uint64_t output = 0;
      uint64_t input = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(v5, 0x83u, &input, 1u, 0, 0, &output, &outputCnt, 0, 0);
      if (!v4) {
        *a2 = output;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_get_handle", ":", 1231, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_1000A2ABC(int a1, unsigned __int8 *a2)
{
  uint64_t v4 = 3758097084;
  mach_port_t v5 = sub_10009C37C();
  if (v5)
  {
    if (a2)
    {
      uint64_t v10 = 0;
      uint64_t input = a1;
      size_t v8 = 16;
      *(void *)src = 0;
      uint64_t v6 = IOConnectCallMethod(v5, 0x84u, &input, 1u, 0, 0, 0, 0, src, &v8);
      if (v6)
      {
        return v6;
      }
      else if (v8 == 16)
      {
        uuid_copy(a2, src);
        return 0;
      }
      else
      {
        return 3758604298;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_get_uuid", ":", 1253, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_1000A2C04(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _OWORD *a6)
{
  if (a5)
  {
    int v7 = a4;
    int v9 = a2;
    *a5 = -1;
    int v11 = sub_1000A250C((uint64_t)a1, a2, a3, a4, a6);
    if (!v11)
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s Unwrapped DER backup bag%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":", 1302, "", 0, "", "");
      uint64_t v15 = 0;
      goto LABEL_9;
    }
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s Failed to unwrap backup bag as DER: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":", 1290, "", 0, "", v11, "");
    uint64_t v12 = sub_1000A0A4C(a1, v9, a5);
    if (v12)
    {
      uint64_t v15 = v12;
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s Failed to load in-kernel backup bag: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":", 1292, "", 0, "", v12, "");
    }
    else
    {
      int v13 = sub_1000A0088(*a5);
      int v14 = *a5;
      if (v13)
      {
        uint64_t v15 = sub_1000A0358(v14, a3, v7, 0);
        if (!v15) {
          goto LABEL_9;
        }
        fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag with prederived secret: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":");
      }
      else
      {
        uint64_t v15 = sub_1000A0424(v14, a3, v7);
        if (!v15) {
          goto LABEL_9;
        }
        fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":");
      }
    }
  }
  else
  {
    uint64_t v15 = 3758097090;
  }
  if (*a5 != -1)
  {
    sub_1000A0C38(*a5);
    *a5 = -1;
  }
LABEL_9:
  sub_10009FB64(0);
  return v15;
}

uint64_t sub_1000A2E34(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 3758097084;
  uint64_t v19 = 0;
  int v18 = 0;
  mach_port_t v9 = sub_10009C37C();
  if (v9)
  {
    mach_port_t v15 = v9;
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    sub_1000B071C(&v19, (unsigned int *)&v18, 1, v10, v11, v12, v13, v14, a4);
    if (v19)
    {
      uint64_t v8 = IOConnectCallMethod(v15, 0x60u, input, 3u, v19, v18, 0, 0, 0, 0);
      long long v16 = v19;
    }
    else
    {
      long long v16 = 0;
      uint64_t v8 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_create", ":", 1324, "", 0, "", "");
    long long v16 = 0;
  }
  free(v16);
  return v8;
}

uint64_t sub_1000A2F88(int a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v11 = sub_10009C37C();
  if (v11)
  {
    mach_port_t v17 = v11;
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a5;
    sub_1000B071C((char **)&inputStructCnt[1], inputStructCnt, 1, v12, v13, v14, v15, v16, a4);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v10 = IOConnectCallMethod(v17, 0x75u, input, 4u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, 0, 0);
      int v18 = *(void **)&inputStructCnt[1];
    }
    else
    {
      int v18 = 0;
      uint64_t v10 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_create_with_flags", ":", 1346, "", 0, "", "");
    int v18 = 0;
  }
  free(v18);
  return v10;
}

uint64_t sub_1000A30EC(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  mach_port_t v5 = v4;
  int v6 = v1;
  bzero(__src, 0x2000uLL);
  size_t __count = 0x2000;
  uint64_t input = v6;
  uint64_t v7 = 3758097090;
  if (v5 && v3)
  {
    mach_port_t v8 = sub_10009C37C();
    if (v8)
    {
      uint64_t v9 = IOConnectCallMethod(v8, 0x61u, &input, 1u, 0, 0, 0, 0, __src, &__count);
      if (v9)
      {
        uint64_t v7 = v9;
      }
      else
      {
        if (__count)
        {
          uint64_t v10 = calloc(__count, 1uLL);
          *mach_port_t v5 = v10;
          if (!v10)
          {
            uint64_t v7 = 3758097085;
            goto LABEL_10;
          }
          memcpy(v10, __src, __count);
          size_t v11 = __count;
        }
        else
        {
          size_t v11 = 0;
          *mach_port_t v5 = 0;
        }
        uint64_t v7 = 0;
        size_t *v3 = v11;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_list", ":", 1372, "", 0, "", "");
      uint64_t v7 = 3758097084;
    }
  }
LABEL_10:
  memset_s(__src, 0x2000uLL, 0, 0x2000uLL);
  return v7;
}

uint64_t sub_1000A329C(int a1, uint64_t a2)
{
  uint64_t v4 = 3758097084;
  uint64_t v15 = 0;
  int v14 = 0;
  mach_port_t v5 = sub_10009C37C();
  if (v5)
  {
    mach_port_t v11 = v5;
    uint64_t input = a1;
    sub_1000B071C(&v15, (unsigned int *)&v14, 1, v6, v7, v8, v9, v10, a2);
    if (v15)
    {
      uint64_t v4 = IOConnectCallMethod(v11, 0x62u, &input, 1u, v15, v14, 0, 0, 0, 0);
      uint64_t v12 = v15;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v4 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_delete", ":", 1394, "", 0, "", "");
    uint64_t v12 = 0;
  }
  free(v12);
  return v4;
}

uint64_t sub_1000A33DC(int a1, uint64_t a2, int a3, unsigned int a4, void *a5, size_t *a6)
{
  uint64_t v12 = 3758097084;
  mach_port_t v13 = sub_10009C37C();
  if (v13)
  {
    uint64_t v12 = 3758097090;
    if (a5 && a6)
    {
      input[0] = a1;
      input[1] = a4;
      uint64_t input[2] = a2;
      uint64_t input[3] = a3;
      return IOConnectCallMethod(v13, 0x26u, input, 4u, 0, 0, 0, 0, a5, a6);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_auth_token_create", ":", 1415, "", 0, "", "");
  }
  return v12;
}

uint64_t sub_1000A3510(int a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  rsize_t __n = 0;
  int __s = 0;
  uint64_t v7 = 3758097090;
  uint64_t v20 = 0;
  mach_port_t v8 = sub_10009C37C();
  if (v8)
  {
    mach_port_t v9 = v8;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (!sub_1000A384C(a4, @"GracePeriod", TypeID, (uint64_t)off_1000E3930, &v20))
    {
      CFTypeID v11 = CFNumberGetTypeID();
      if (!sub_1000A384C(a4, @"BackOffDelay", v11, (uint64_t)off_1000E3938, &v20))
      {
        CFTypeID v12 = CFNumberGetTypeID();
        if (!sub_1000A384C(a4, @"MaxUnlockAttempts", v12, (uint64_t)off_1000E3940, &v20))
        {
          CFTypeID v13 = CFNumberGetTypeID();
          if (!sub_1000A384C(a4, @"EscrowPasscodePeriod", v13, (uint64_t)off_1000E3948, &v20))
          {
            CFTypeID v14 = CFNumberGetTypeID();
            if (!sub_1000A384C(a4, @"EscrowTokenPeriod", v14, (uint64_t)off_1000E3950, &v20))
            {
              CFTypeID v15 = CFDataGetTypeID();
              if (!sub_1000A384C(a4, @"UserUUID", v15, (uint64_t)off_1000E3B38, &v20))
              {
                CFTypeID v16 = CFDataGetTypeID();
                if (!sub_1000A384C(a4, @"BindKEKToKB", v16, (uint64_t)off_1000E3B78, &v20))
                {
                  CFTypeID v17 = CFBooleanGetTypeID();
                  if (!sub_1000A384C(a4, @"InactivityRebootEnabled", v17, (uint64_t)off_1000E3D50, &v20))
                  {
                    CFTypeID v18 = CFBooleanGetTypeID();
                    if (!sub_1000A384C(a4, @"OnenessAutomaticMode", v18, (uint64_t)off_1000E3D58, &v20)&& !sub_1000ADC78(&v20)&& (!a2 || !sub_1000AD380(&v20, (uint64_t)off_1000E37D8, a2))&& !sub_1000AD030(&v20, &__s, &__n))
                    {
                      input[0] = a1;
                      input[1] = (uint64_t)__s;
                      uint64_t input[2] = __n;
                      uint64_t v7 = IOConnectCallMethod(v9, 0x1Eu, input, 3u, 0, 0, 0, 0, 0, 0);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_configuration", ":", 1488, "", 0, "", "");
    uint64_t v7 = 3758097084;
  }
  sub_1000AC924(&v20);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v7;
}

uint64_t sub_1000A384C(const __CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  int value = 0;
  uint64_t result = CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value);
  if (result)
  {
    if (CFGetTypeID(value) == a3)
    {
      if (CFNumberGetTypeID() == a3)
      {
        uint64_t v10 = 0;
        if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &v10)
          || sub_1000AD748(a5, a4, v10))
        {
          return 0xFFFFFFFFLL;
        }
        return 0;
      }
      if (CFBooleanGetTypeID() == a3)
      {
        CFBooleanGetValue((CFBooleanRef)value);
        if (sub_1000AD5E0(a5, a4)) {
          return 0xFFFFFFFFLL;
        }
      }
      else
      {
        if (CFDataGetTypeID() != a3) {
          return 0xFFFFFFFFLL;
        }
        BytePtr = CFDataGetBytePtr((CFDataRef)value);
        CFDataGetLength((CFDataRef)value);
        if (sub_1000AD380(a5, a4, (uint64_t)BytePtr)) {
          return 0xFFFFFFFFLL;
        }
      }
      return 0;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_1000A3954(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  int v4 = v1;
  uint64_t v5 = 3758097084;
  mach_port_t v6 = sub_10009C37C();
  if (v6)
  {
    if (v3)
    {
      mach_port_t v7 = v6;
      bzero(outputStruct, 0x8000uLL);
      v45[0] = 0x8000;
      uint64_t input = v4;
      uint64_t v8 = IOConnectCallMethod(v7, 0x1Fu, &input, 1u, 0, 0, 0, 0, outputStruct, v45);
      if (v8)
      {
        return v8;
      }
      else if (v45[0] > 0x8000)
      {
        return 3758604298;
      }
      else
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        bzero(v46, 0x250uLL);
        v45[1] = (size_t)off_1000E3930;
        v46[4] = off_1000E3938;
        v46[9] = off_1000E3940;
        v46[14] = off_1000E3948;
        v46[19] = off_1000E3950;
        v46[24] = off_1000E3958;
        v46[29] = off_1000E3B38;
        v46[34] = off_1000E3B70;
        v46[39] = off_1000E3B80;
        v46[44] = off_1000E3B88;
        v46[49] = off_1000E3B90;
        v46[54] = off_1000E3D10;
        v46[59] = off_1000E3D18;
        v46[64] = off_1000E3D48;
        v46[69] = off_1000E3D40;
        sub_1000AC3DC();
        uint64_t v10 = v46[0];
        uint64_t v11 = v46[5];
        uint64_t v12 = v46[10];
        uint64_t v13 = v46[15];
        uint64_t v14 = v46[20];
        uint64_t v15 = v46[25];
        uint64_t v16 = v46[30];
        uint64_t v44 = v3;
        uint64_t v17 = v46[35];
        uint64_t v37 = v46[40];
        uint64_t v38 = v46[45];
        uint64_t v39 = v46[50];
        uint64_t v40 = v46[55];
        uint64_t v41 = v46[60];
        uint64_t v42 = v46[65];
        uint64_t v43 = v46[70];
        CFTypeID TypeID = CFNumberGetTypeID();
        sub_1000A3EDC(Mutable, @"GracePeriod", TypeID, v10);
        CFTypeID v19 = CFNumberGetTypeID();
        sub_1000A3EDC(Mutable, @"BackOffDelay", v19, v11);
        CFTypeID v20 = CFNumberGetTypeID();
        sub_1000A3EDC(Mutable, @"MaxUnlockAttempts", v20, v12);
        CFTypeID v21 = CFNumberGetTypeID();
        sub_1000A3EDC(Mutable, @"EscrowPasscodePeriod", v21, v13);
        CFTypeID v22 = CFNumberGetTypeID();
        sub_1000A3EDC(Mutable, @"EscrowTokenPeriod", v22, v14);
        CFTypeID v23 = CFNumberGetTypeID();
        sub_1000A3EDC(Mutable, @"ConfigFlags", v23, v15);
        CFTypeID v24 = CFDataGetTypeID();
        sub_1000A3EDC(Mutable, @"UserUUID", v24, v16);
        CFTypeID v25 = CFDataGetTypeID();
        sub_1000A3EDC(Mutable, @"GroupUUID", v25, v17);
        CFTypeID v26 = CFNumberGetTypeID();
        sub_1000A3EDC(Mutable, @"RecoveryIterations", v26, v37);
        CFTypeID v27 = CFNumberGetTypeID();
        sub_1000A3EDC(Mutable, @"RecoveryFlags", v27, v38);
        CFTypeID v28 = CFNumberGetTypeID();
        sub_1000A3EDC(Mutable, @"RecoveryTargetIterations", v28, v39);
        CFTypeID v29 = CFBooleanGetTypeID();
        sub_1000A3EDC(Mutable, @"MementoSupported", v29, v40);
        CFTypeID v30 = CFBooleanGetTypeID();
        sub_1000A3EDC(Mutable, @"MementoBlobExists", v30, v41);
        CFTypeID v31 = CFNumberGetTypeID();
        sub_1000A3EDC(Mutable, @"MementoPasscodeGeneration", v31, v42);
        CFTypeID v32 = CFNumberGetTypeID();
        sub_1000A3EDC(Mutable, @"PasscodeGeneration", v32, v43);
        char v33 = sub_1000AC614();
        if ((v33 & 2) != 0) {
          CFBooleanRef v34 = kCFBooleanTrue;
        }
        else {
          CFBooleanRef v34 = kCFBooleanFalse;
        }
        CFDictionarySetValue(Mutable, @"InactivityRebootEnabled", v34);
        if ((v33 & 8) != 0) {
          CFBooleanRef v35 = kCFBooleanTrue;
        }
        else {
          CFBooleanRef v35 = kCFBooleanFalse;
        }
        CFDictionarySetValue(Mutable, @"OnenessAutomaticMode", v35);
        uint64_t v5 = 0;
        const char *v44 = Mutable;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_configuration", ":", 1556, "", 0, "", "");
  }
  return v5;
}

void sub_1000A3EDC(__CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    if (CFNumberGetTypeID() == a3)
    {
      CFIndex valuePtr = sub_1000AC614();
      CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
      if (!v7) {
        return;
      }
LABEL_14:
      CFNumberRef v12 = v7;
      CFDictionaryAddValue(a1, a2, v7);
      CFRelease(v12);
      return;
    }
    if (CFBooleanGetTypeID() == a3)
    {
      int v8 = sub_1000AC8C8();
      mach_port_t v9 = &kCFBooleanTrue;
      if (!v8) {
        mach_port_t v9 = &kCFBooleanFalse;
      }
      CFBooleanRef v10 = *v9;
      CFDictionaryAddValue(a1, a2, v10);
    }
    else if (CFDataGetTypeID() == a3)
    {
      CFIndex valuePtr = 0;
      uint64_t v11 = (const UInt8 *)ccder_decode_tl();
      if (v11)
      {
        CFNumberRef v7 = CFDataCreate(kCFAllocatorDefault, v11, valuePtr);
        goto LABEL_14;
      }
    }
  }
}

uint64_t sub_1000A4024(int a1, unsigned int a2, uint64_t a3)
{
  input[0] = a2;
  input[1] = a3;
  uint64_t input[2] = a1;
  mach_port_t v3 = sub_10009C37C();
  if (v3) {
    return IOConnectCallMethod(v3, 0x1Au, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_hold", ":", 1654, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A4108(int a1, unsigned int a2)
{
  input[0] = a2;
  input[1] = a1;
  mach_port_t v2 = sub_10009C37C();
  if (v2) {
    return IOConnectCallMethod(v2, 0x1Bu, input, 2u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_drop", ":", 1672, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A41E8(int a1, unsigned int a2)
{
  mach_port_t v4 = sub_10009C37C();
  if (v4)
  {
    input[0] = a2;
    input[1] = a1;
    return IOConnectCallMethod(v4, 0x64u, input, 2u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_promote", ":", 1687, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A42D8(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10009C37C();
  if (v1) {
    return IOConnectCallMethod(v1, 0x91u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_oneness_heartbeat", ":", 1707, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A43B4(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10009C37C();
  if (v1) {
    return IOConnectCallMethod(v1, 0x65u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_consume", ":", 1722, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A4490(int a1, uint64_t a2)
{
  uint64_t v15 = 0;
  int v14 = 0;
  mach_port_t v4 = sub_10009C37C();
  if (v4)
  {
    mach_port_t v10 = v4;
    sub_1000B071C((char **)&v15, (unsigned int *)&v14, 3, v5, v6, v7, v8, v9, a2);
    input[0] = a1;
    input[1] = (uint64_t)v15;
    uint64_t input[2] = v14;
    uint64_t v11 = IOConnectCallMethod(v10, 0x12u, input, 3u, 0, 0, 0, 0, 0, 0);
    CFNumberRef v12 = v15;
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_recover_with_escrow_bag", ":", 1739, "", 0, "", "");
    CFNumberRef v12 = 0;
    uint64_t v11 = 3758097084;
  }
  free(v12);
  return v11;
}

uint64_t sub_1000A45F4(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t v8 = (const void *)v1;
  uint64_t v9 = 3758097090;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000;
  mach_port_t v10 = sub_10009C37C();
  if (v10)
  {
    if (v8 && v5 && v3)
    {
      uint64_t v11 = IOConnectCallMethod(v10, 0x29u, 0, 0, v8, v7, 0, 0, __src, &__count);
      if (v11)
      {
        uint64_t v9 = v11;
      }
      else
      {
        CFNumberRef v12 = calloc(__count, 1uLL);
        *uint64_t v5 = v12;
        if (v12)
        {
          memcpy(v12, __src, __count);
          uint64_t v9 = 0;
          _DWORD *v3 = __count;
        }
        else
        {
          uint64_t v9 = 3758097085;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fdr_hmac_data", ":", 1758, "", 0, "", "");
    uint64_t v9 = 3758097084;
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v9;
}

uint64_t sub_1000A4798(int a1, unsigned int a2, _DWORD *a3)
{
  mach_port_t v6 = sub_10009C37C();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t output = 0;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(v6, 0x28u, input, 2u, 0, 0, &output, &outputCnt, 0, 0);
    if (a3)
    {
      if (!result) {
        *a3 = output;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_generation", ":", 1781, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_1000A48B0(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v9 = 3758097084;
  CFTypeID v21 = 0;
  int v20 = 0;
  mach_port_t v10 = sub_10009C37C();
  if (v10)
  {
    mach_port_t v16 = v10;
    if (a2) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = "";
    }
    sub_1000B071C((char **)&v21, (unsigned int *)&v20, 2, v11, v12, v13, v14, v15, (uint64_t)v17);
    if (v21)
    {
      input[0] = a1;
      input[1] = a6;
      uint64_t input[2] = (uint64_t)v21;
      uint64_t input[3] = v20;
      uint64_t v9 = IOConnectCallMethod(v16, 0x2Au, input, 4u, 0, 0, 0, 0, 0, 0);
      CFTypeID v18 = v21;
    }
    else
    {
      CFTypeID v18 = 0;
      uint64_t v9 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_aks_verify_password", ":", 1807, "", 0, "", "");
    CFTypeID v18 = 0;
  }
  free(v18);
  return v9;
}

uint64_t sub_1000A4A3C(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000A48B0(a1, a2, a3, a4, a5, 0);
}

uint64_t sub_1000A4A44(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000A48B0(a1, a2, a3, a4, a5, 1u);
}

uint64_t sub_1000A4A4C(mach_port_t a1, uintptr_t a2)
{
  io_connect_t v4 = sub_10009C37C();
  if (v4)
  {
    return IOConnectSetNotificationPort(v4, 0, a1, a2);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_register_for_notifications", ":", 1840, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A4B08(int a1, int a2, void *a3, size_t *a4)
{
  size_t __count = 256;
  input[0] = a1;
  input[1] = a2;
  uint64_t result = 3758097090;
  if (a3 && a4)
  {
    mach_port_t v7 = sub_10009C37C();
    if (v7)
    {
      memset(__src, 0, sizeof(__src));
      uint64_t result = IOConnectCallMethod(v7, 0x31u, input, 2u, 0, 0, 0, 0, __src, &__count);
      if (!result)
      {
        if (__count > 0x100)
        {
          return 3758604298;
        }
        else
        {
          uint64_t v8 = calloc(__count, 1uLL);
          *a3 = v8;
          if (v8)
          {
            memcpy(v8, __src, __count);
            uint64_t result = 0;
            *a4 = __count;
          }
          else
          {
            return 3758097085;
          }
        }
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_create_signing_key", ":", 1859, "", 0, "", "");
      return 3758097084;
    }
  }
  return result;
}

uint64_t sub_1000A4C9C(uint64_t a1)
{
  size_t __count = 0x8000;
  input[0] = (int)__chkstk_darwin(a1);
  input[1] = v1;
  uint64_t result = 3758097090;
  if (v4)
  {
    mach_port_t v7 = v5;
    if (v5)
    {
      uint64_t v8 = v4;
      size_t v9 = v3;
      mach_port_t v10 = v2;
      mach_port_t v11 = sub_10009C37C();
      if (v11)
      {
        mach_port_t v12 = v11;
        bzero(__src, 0x8000uLL);
        uint64_t result = IOConnectCallMethod(v12, 0x31u, input, 2u, v10, v9, 0, 0, __src, &__count);
        if (!result)
        {
          if (__count > 0x8000)
          {
            return 3758604298;
          }
          else
          {
            uint64_t v13 = calloc(__count, 1uLL);
            void *v8 = v13;
            if (v13)
            {
              memcpy(v13, __src, __count);
              uint64_t result = 0;
              *mach_port_t v7 = __count;
            }
            else
            {
              return 3758097085;
            }
          }
        }
      }
      else
      {
        fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_create_signing_key_with_params", ":", 1881, "", 0, "", "");
        return 3758097084;
      }
    }
  }
  return result;
}

uint64_t sub_1000A4E4C(uint64_t a1)
{
  return sub_1000A4E64(a1);
}

uint64_t sub_1000A4E64(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  uint32_t v7 = v6;
  size_t __count = 15360;
  input[0] = v1;
  input[1] = v8;
  uint64_t input[2] = v9;
  mach_port_t v10 = sub_10009C37C();
  if (v10)
  {
    mach_port_t v11 = v10;
    bzero(__src, 0x3C00uLL);
    uint64_t v12 = IOConnectCallMethod(v11, v7, input, 3u, 0, 0, 0, 0, __src, &__count);
    if (v12)
    {
      return v12;
    }
    else if (__count > 0x3C00)
    {
      return 3758604298;
    }
    else
    {
      uint64_t v13 = 0;
      if (v5 && v3)
      {
        if (__count)
        {
          uint64_t v14 = calloc(__count, 1uLL);
          *uint64_t v5 = v14;
          if (!v14) {
            return 3758097085;
          }
          memcpy(v14, __src, __count);
          size_t v15 = __count;
        }
        else
        {
          size_t v15 = 0;
        }
        uint64_t v13 = 0;
        size_t *v3 = v15;
      }
    }
  }
  else
  {
    uint64_t v13 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "remote_session_operate", ":", 2017, "", 0, "", "");
  }
  return v13;
}

uint64_t sub_1000A5024(int a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, void *a8, size_t *a9)
{
  memset(__src, 0, sizeof(__src));
  size_t __count = 256;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  input[0] = a1;
  input[1] = a2;
  uint64_t v9 = 3758097090;
  uint64_t input[2] = a5;
  if (a8 && a9)
  {
    mach_port_t v12 = sub_10009C37C();
    if (v12)
    {
      mach_port_t v18 = v12;
      sub_1000B071C((char **)&inputStructCnt[1], inputStructCnt, 2, v13, v14, v15, v16, v17, a3);
      if (*(void *)&inputStructCnt[1])
      {
        uint64_t v19 = IOConnectCallMethod(v18, 0x32u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
        if (v19)
        {
          uint64_t v9 = v19;
        }
        else if (__count > 0x100)
        {
          uint64_t v9 = 3758604298;
        }
        else
        {
          int v20 = calloc(__count, 1uLL);
          *a8 = v20;
          uint64_t v9 = 3758097085;
          if (v20)
          {
            memcpy(v20, __src, __count);
            uint64_t v9 = 0;
            *a9 = __count;
          }
        }
      }
      else
      {
        uint64_t v9 = 3758097085;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_sign_signing_key", ":", 1911, "", 0, "", "");
      uint64_t v9 = 3758097084;
    }
  }
  free(*(void **)&inputStructCnt[1]);
  return v9;
}

uint64_t sub_1000A5228(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v10 = 3758097084;
  input[0] = a2;
  input[1] = a1;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v11 = sub_10009C37C();
  if (v11)
  {
    mach_port_t v17 = v11;
    sub_1000B071C((char **)&inputStructCnt[1], inputStructCnt, 3, v12, v13, v14, v15, v16, a3);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v18 = IOConnectCallMethod(v17, 0x2Cu, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], &output, &outputCnt, 0, 0);
      uint64_t v10 = v18;
      if (a9 && !v18) {
        *a9 = output;
      }
    }
    else
    {
      uint64_t v10 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_remote_session", ":", 1938, "", 0, "", "");
  }
  free(*(void **)&inputStructCnt[1]);
  return v10;
}

uint64_t sub_1000A53A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  mach_port_t v17 = 0;
  int __s = 0;
  uint64_t v4 = 3758097084;
  rsize_t __n = 0;
  uint64_t v16 = 0;
  uint64_t v5 = 3758097090;
  rsize_t __smax = 0;
  if (!a3 || !a4) {
    goto LABEL_12;
  }
  int v8 = -536870212;
  *(void *)&long long v19 = a3;
  *((void *)&v19 + 1) = a3 + a4;
  if (!(a3 + a4)) {
    goto LABEL_19;
  }
  uint64_t v16 = 0;
  if ((ccder_blob_decode_range() & 1) == 0)
  {
    int v8 = -536870198;
LABEL_19:
    syslog(3, "error parsing signing key: %d", v8);
    uint64_t v5 = 3758097084;
LABEL_12:
    uint64_t v12 = __s;
    uint64_t v4 = v5;
    goto LABEL_13;
  }
  sub_1000AF444(&v19, 0x8000000000000001, &v16);
  if (v16)
  {
    uint64_t v5 = sub_1000A4E64(a1);
    if (v5) {
      syslog(3, "error: validating v1 local signing key failed: %d");
    }
    goto LABEL_12;
  }
  uint64_t v11 = sub_1000A4B08(a1, 11, &__s, &__n);
  if (v11)
  {
    uint64_t v5 = v11;
    syslog(3, "error: validating (create) v0 local signing key failed: %d", v11);
    goto LABEL_12;
  }
  uint64_t v12 = __s;
  if (__s && __n)
  {
    uint64_t v5 = sub_1000A5024(a1, a2, a3, a4, 11, (uint64_t)__s, __n, &v17, &__smax);
    if (v5) {
      syslog(3, "error: validating (sign) v0 local signing key failed: %d");
    }
    goto LABEL_12;
  }
LABEL_13:
  if (v12)
  {
    memset_s(v12, __n, 0, __n);
    free(__s);
  }
  if (v17)
  {
    memset_s(v17, __smax, 0, __smax);
    free(v17);
  }
  return v4;
}

uint64_t sub_1000A557C(uint64_t a1)
{
  return sub_1000A4E64(a1);
}

uint64_t sub_1000A5594(uint64_t a1)
{
  return sub_1000A4E64(a1);
}

uint64_t sub_1000A55AC(uint64_t a1)
{
  return sub_1000A4E64(a1);
}

uint64_t sub_1000A55C8(uint64_t a1)
{
  return sub_1000A4E64(a1);
}

uint64_t sub_1000A55E0(uint64_t a1)
{
  return sub_1000A4E64(a1);
}

uint64_t sub_1000A55F8(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  int v6 = v1;
  mach_port_t v7 = sub_10009C37C();
  if (v7)
  {
    mach_port_t v8 = v7;
    uint64_t result = 3758097090;
    if (v5)
    {
      if (v3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000;
        input[0] = v6;
        input[1] = 0;
        uint64_t result = IOConnectCallMethod(v8, 0x14u, input, 2u, 0, 0, 0, 0, __src, &__count);
        if (!result)
        {
          if (__count)
          {
            uint64_t v10 = calloc(__count, 1uLL);
            *uint64_t v5 = v10;
            if (v10)
            {
              memcpy(v10, __src, __count);
              uint64_t result = 0;
              _DWORD *v3 = __count;
            }
            else
            {
              return 3758097085;
            }
          }
          else
          {
            return 3758097136;
          }
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drain_backup_keys", ":", 2072, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_1000A5798(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  int v6 = v1;
  mach_port_t v7 = sub_10009C37C();
  if (v7)
  {
    mach_port_t v8 = v7;
    uint64_t result = 3758097090;
    if (v5)
    {
      if (v3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000;
        input[0] = v6;
        input[1] = 1;
        uint64_t result = IOConnectCallMethod(v8, 0x14u, input, 2u, 0, 0, 0, 0, __src, &__count);
        if (!result)
        {
          if (__count)
          {
            if (__ROR8__(0xEF7BDEF7BDEF7BDFLL * __count, 2) > 0x210842108421084uLL)
            {
              return 3758604298;
            }
            else
            {
              uint64_t v10 = calloc(__count, 1uLL);
              *uint64_t v5 = v10;
              if (v10)
              {
                memcpy(v10, __src, __count);
                uint64_t result = 0;
                size_t *v3 = __count / 0x7C;
              }
              else
              {
                return 3758097085;
              }
            }
          }
          else
          {
            return 3758097136;
          }
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drain_backup_keys_info", ":", 2100, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_1000A5994(int a1)
{
  mach_port_t v2 = sub_10009C37C();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x16u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_clear_backup_bag", ":", 2129, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A5A7C(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t v9 = v8;
  int v11 = v10;
  int v12 = v1;
  mach_port_t v13 = sub_10009C37C();
  if (!v13)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_backup_bag", ":", 2146, "", 0, "", "");
    return 3758097084;
  }
  mach_port_t v14 = v13;
  if (v5)
  {
    if (!v3) {
      return 3758097090;
    }
    long long outputStruct = __src;
    p_count = &__count;
    uint64_t v17 = 1;
  }
  else
  {
    p_count = 0;
    long long outputStruct = 0;
    uint64_t v17 = 0;
  }
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000;
  input[0] = v12;
  input[1] = v11;
  uint64_t input[2] = v17;
  uint64_t input[3] = v9;
  uint64_t input[4] = v7;
  uint64_t result = IOConnectCallMethod(v14, 0x15u, input, 5u, 0, 0, 0, 0, outputStruct, p_count);
  if (v5 && !result)
  {
    long long v19 = calloc(__count, 1uLL);
    *uint64_t v5 = v19;
    if (v19)
    {
      memcpy(v19, __src, __count);
      uint64_t result = 0;
      _DWORD *v3 = __count;
    }
    else
    {
      return 3758097085;
    }
  }
  return result;
}

uint64_t sub_1000A5C58(int a1, _DWORD *a2)
{
  uint64_t v4 = 3758097084;
  mach_port_t v5 = sub_10009C37C();
  if (v5)
  {
    if (a2)
    {
      uint64_t output = 0;
      uint64_t input = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(v5, 0x52u, &input, 1u, 0, 0, &output, &outputCnt, 0, 0);
      if (!v4) {
        *a2 = output;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_make_public_backup_bag", ":", 2178, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_1000A5D74(uint64_t a1)
{
  return sub_1000A4E64(a1);
}

uint64_t sub_1000A5D8C()
{
  return sub_1000A4E64(0);
}

uint64_t sub_1000A5DA8(uint64_t a1)
{
  return sub_1000A5DB4(a1);
}

uint64_t sub_1000A5DB4(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint32_t v5 = v4;
  uint64_t input = v1;
  *(void *)mach_port_t v13 = 4096;
  uint64_t v6 = 3758097084;
  int v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long __s = 0u;
  mach_port_t v7 = sub_10009C37C();
  if (v7)
  {
    if (v3)
    {
      mach_port_t v8 = v7;
      bzero(outputStruct, 0x1000uLL);
      uint64_t v9 = IOConnectCallMethod(v8, v5, &input, 1u, 0, 0, 0, 0, outputStruct, (size_t *)v13);
      if (v9)
      {
        return v9;
      }
      else
      {
        uint64_t v6 = 0;
        if (!sub_1000AE360((uint64_t)outputStruct, v13[0], (char *)&__s))
        {
          long long v10 = v17;
          *(_OWORD *)(v3 + 32) = v16;
          *(_OWORD *)(v3 + 48) = v10;
          *(_WORD *)(v3 + 64) = v18;
          long long v11 = v15;
          *(_OWORD *)uint64_t v3 = __s;
          *(_OWORD *)(v3 + 16) = v11;
        }
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_get_device_state", ":", 2224, "", 0, "", "");
  }
  return v6;
}

uint64_t sub_1000A5F50(uint64_t a1)
{
  return sub_1000A5DB4(a1);
}

uint64_t sub_1000A5F5C(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  size_t v5 = v4;
  mach_port_t v7 = v6;
  uint64_t v8 = 3758097084;
  v13[0] = 4096;
  uint64_t input = v1;
  mach_port_t v9 = sub_10009C37C();
  if (v9)
  {
    if (v3)
    {
      mach_port_t v10 = v9;
      bzero(outputStruct, 0x1000uLL);
      memset_s(v3, 0x10uLL, 0, 0x10uLL);
      uint64_t v11 = IOConnectCallMethod(v10, 0x39u, &input, 1u, v7, v5, 0, 0, outputStruct, v13);
      if (v11)
      {
        return v11;
      }
      else
      {
        uint64_t v18 = 0;
        long long v22 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        long long v17 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v23 = 0u;
        uint64_t v24 = 0;
        v13[1] = (size_t)off_1000E3A78;
        long long v16 = (unint64_t)off_1000E3A80;
        int v19 = off_1000E3A88;
        *(void *)&long long v22 = off_1000E3A90;
        sub_1000AC3DC();
        _DWORD *v3 = sub_1000AC614();
        v3[1] = sub_1000AC614();
        v3[2] = sub_1000AC614();
        uint64_t v8 = 0;
        v3[3] = sub_1000AC614();
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_remote_peer_get_state", ":", 2255, "", 0, "", "");
  }
  return v8;
}

uint64_t sub_1000A61D0(int a1, const void *a2, size_t a3)
{
  uint64_t input = a1;
  mach_port_t v5 = sub_10009C37C();
  if (v5) {
    return IOConnectCallMethod(v5, 0x3Au, &input, 1u, a2, a3, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_remote_peer_drop", ":", 2292, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A62BC(int a1, int a2)
{
  uint64_t input = a1;
  mach_port_t v3 = sub_10009C37C();
  if (v3)
  {
    if (a2) {
      uint32_t v4 = 32;
    }
    else {
      uint32_t v4 = 8;
    }
    return IOConnectCallMethod(v3, v4, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lock_device", ":", 2307, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A63B0(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10009C37C();
  if (v1) {
    return IOConnectCallMethod(v1, 0x8Du, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lock_cx", ":", 2327, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A648C(int a1, uint64_t a2, int a3)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t v3 = sub_10009C37C();
  if (v3) {
    return IOConnectCallMethod(v3, 9u, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unlock_device", ":", 2342, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A6570()
{
  mach_port_t v0 = sub_10009C37C();
  if (v0) {
    return IOConnectCallMethod(v0, 0x13u, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_obliterate_class_d", ":", 2355, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A6618(int a1, unsigned int a2, uint64_t a3, unsigned int a4, const void *a5, int a6)
{
  mach_port_t v12 = sub_10009C37C();
  if (v12)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a4;
    return IOConnectCallMethod(v12, 0x3Fu, input, 4u, a5, a6, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_migrate_s_key", ":", 2367, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A6730(int a1, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5, size_t a6, void *a7, size_t *a8)
{
  input[0] = a1;
  input[1] = a4;
  uint64_t input[2] = a2;
  uint64_t input[3] = a3;
  size_t __count = 2048;
  mach_port_t v12 = sub_10009C37C();
  if (v12)
  {
    mach_port_t v13 = v12;
    bzero(__src, 0x800uLL);
    uint64_t v14 = IOConnectCallMethod(v13, 0x3Bu, input, 4u, a5, a6, 0, 0, __src, &__count);
    if (v14)
    {
      return v14;
    }
    else if (__count > 0x800)
    {
      return 3758604298;
    }
    else
    {
      uint64_t v15 = 0;
      if (a7 && a8)
      {
        if (__count)
        {
          long long v16 = calloc(__count, 1uLL);
          *a7 = v16;
          if (!v16) {
            return 3758097085;
          }
          memcpy(v16, __src, __count);
          size_t v17 = __count;
        }
        else
        {
          size_t v17 = 0;
        }
        uint64_t v15 = 0;
        *a8 = v17;
      }
    }
  }
  else
  {
    uint64_t v15 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_register", ":", 2388, "", 0, "", "");
  }
  return v15;
}

uint64_t sub_1000A68E0(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10009C37C();
  if (v1) {
    return IOConnectCallMethod(v1, 0x3Cu, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_unregister", ":", 2412, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A69BC(int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t input = a1;
  size_t __count = 2048;
  mach_port_t v9 = sub_10009C37C();
  if (v9)
  {
    mach_port_t v10 = v9;
    bzero(__src, 0x800uLL);
    uint64_t v11 = IOConnectCallMethod(v10, 0x3Du, &input, 1u, a2, a3, 0, 0, __src, &__count);
    if (v11)
    {
      return v11;
    }
    else if (__count > 0x800)
    {
      return 3758604298;
    }
    else
    {
      uint64_t v12 = 0;
      if (a4 && a5)
      {
        if (__count)
        {
          mach_port_t v13 = calloc(__count, 1uLL);
          *a4 = v13;
          if (!v13) {
            return 3758097085;
          }
          memcpy(v13, __src, __count);
          size_t v14 = __count;
        }
        else
        {
          size_t v14 = 0;
        }
        uint64_t v12 = 0;
        *a5 = v14;
      }
    }
  }
  else
  {
    uint64_t v12 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_request_unlock", ":", 2429, "", 0, "", "");
  }
  return v12;
}

uint64_t sub_1000A6B64(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  uint64_t input = a1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(__src, 0x800uLL);
  size_t __count = 2048;
  sub_1000B071C((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, a2);
  if (!*(void *)&inputStructCnt[1])
  {
    uint64_t v17 = 3758097085;
    goto LABEL_12;
  }
  mach_port_t v15 = sub_10009C37C();
  if (!v15)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_unlock", ":", 2460, "", 0, "", "");
    uint64_t v17 = 3758097084;
    goto LABEL_12;
  }
  uint64_t v16 = IOConnectCallMethod(v15, 0x3Eu, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
  if (v16)
  {
    uint64_t v17 = v16;
    goto LABEL_12;
  }
  if (__count > 0x800)
  {
    uint64_t v17 = 3758604298;
    goto LABEL_12;
  }
  uint64_t v17 = 0;
  if (a6 && a7)
  {
    if (!__count)
    {
      size_t v19 = 0;
      goto LABEL_11;
    }
    uint64_t v18 = calloc(__count, 1uLL);
    *a6 = v18;
    uint64_t v17 = 3758097085;
    if (v18)
    {
      memcpy(v18, __src, __count);
      size_t v19 = __count;
LABEL_11:
      uint64_t v17 = 0;
      *a7 = v19;
    }
  }
LABEL_12:
  free(*(void **)&inputStructCnt[1]);
  return v17;
}

uint64_t sub_1000A6D4C(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 && a4)
  {
    if (sub_1000A6D9C((uint64_t)off_1000E3AA0, 0, a1, a2, a3, a4)) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000A6D9C(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a6 && a3 && a4 && a5 && a3 + a4 > a3)
  {
    sub_1000AC3DC();
    if (a2)
    {
      if (*a6 == 8)
      {
        uint64_t v10 = sub_1000AC614();
        uint64_t result = 0;
        *a5 = v10;
        return result;
      }
      return 0xFFFFFFFFLL;
    }
    uint64_t v11 = ccder_decode_tl();
    if (!v11) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v12 = v11;
    uint64_t result = 0;
    *a5 = v12;
    *a6 = 0;
  }
  return result;
}

uint64_t sub_1000A6ECC(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 && a4)
  {
    if (sub_1000A6D9C((uint64_t)off_1000E3AD0, 0, a1, a2, a3, a4)) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000A6F1C(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = 8;
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0;
  uint64_t result = sub_1000A6D9C((uint64_t)off_1000E3AB8, 1, a1, a2, &v6, &v5);
  if (result) {
    return 0xFFFFFFFFLL;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_1000A6F8C(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = 8;
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0;
  uint64_t result = sub_1000A6D9C((uint64_t)off_1000E3AB0, 1, a1, a2, &v6, &v5);
  if (result) {
    return 0xFFFFFFFFLL;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_1000A6FFC(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10009C37C();
  if (v1) {
    return IOConnectCallMethod(v1, 0x47u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_fail", ":", 2589, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A70D8(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10009C37C();
  if (v1) {
    return IOConnectCallMethod(v1, 0x49u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_set_healthy", ":", 2605, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A71B4(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A71BC(a1, a2, a3, 0x45u);
}

uint64_t sub_1000A71BC(int a1, uint64_t a2, uint64_t a3, uint32_t a4)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t v5 = sub_10009C37C();
  if (v5) {
    return IOConnectCallMethod(v5, a4, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "__aks_se_set_secret", ":", 2621, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A72A8(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A71BC(a1, a2, a3, 0x8Cu);
}

uint64_t sub_1000A72B0(int a1, uint64_t a2, uint64_t a3)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t v3 = sub_10009C37C();
  if (v3) {
    return IOConnectCallMethod(v3, 0x46u, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_recover", ":", 2649, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A7390(int a1, uint64_t a2, uint64_t a3)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t v3 = sub_10009C37C();
  if (v3) {
    return IOConnectCallMethod(v3, 0x69u, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_change_secret_epilogue", ":", 2665, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A7470(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  input[0] = v1;
  input[1] = v4;
  uint64_t input[2] = v5;
  bzero(__s, 0x1000uLL);
  __n[0] = 4096;
  mach_port_t v6 = sub_10009C37C();
  if (!v6)
  {
    uint64_t v9 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_get_reset_token_for_memento_secret", ":", 2683, "", 0, "", "");
    goto LABEL_10;
  }
  uint64_t v7 = IOConnectCallMethod(v6, 0x48u, input, 3u, 0, 0, 0, 0, __s, __n);
  if (v7)
  {
    uint64_t v9 = v7;
    goto LABEL_10;
  }
  if (__n[0] - 4097 < 0xFFFFFFFFFFFFF000)
  {
    uint64_t v9 = 3758604298;
    goto LABEL_10;
  }
  uint64_t v16 = 0;
  long long v15 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  __n[1] = (rsize_t)off_1000E3B28;
  long long v14 = (unint64_t)off_1000E3B30;
  sub_1000AC3DC();
  if ((void)v12)
  {
    ccder_decode_tl();
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  if (!*((void *)&v14 + 1)) {
    goto LABEL_9;
  }
  unint64_t v8 = sub_1000AC614();
  if (v8 > 0xFF) {
    goto LABEL_9;
  }
  uint64_t v9 = 0;
  unsigned char *v3 = v8;
LABEL_10:
  memset_s(__s, __n[0], 0, __n[0]);
  return v9;
}

uint64_t sub_1000A76EC(uint64_t a1)
{
  return sub_1000A7470(a1);
}

uint64_t sub_1000A7700(int a1, const void *a2, size_t a3)
{
  uint64_t input = a1;
  mach_port_t v5 = sub_10009C37C();
  if (v5)
  {
    if (a2) {
      size_t v6 = a3;
    }
    else {
      size_t v6 = 0;
    }
    return IOConnectCallMethod(v5, 0x58u, &input, 1u, a2, v6, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_set_nonce", ":", 2737, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A77F0(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  mach_port_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t input = v1;
  bzero(&__s, 0x1000uLL);
  size_t __n = 4096;
  uint64_t v10 = 3758097090;
  if (v9)
  {
    if (v7)
    {
      uint64_t v10 = 3758097090;
      if (v5)
      {
        if (v3)
        {
          mach_port_t v11 = sub_10009C37C();
          if (v11)
          {
            uint64_t v12 = IOConnectCallMethod(v11, 0x5Au, &input, 1u, 0, 0, 0, 0, &__s, &__n);
            if (v12)
            {
              uint64_t v10 = v12;
            }
            else if (__n - 4097 < 0xFFFFFFFFFFFFF005)
            {
              uint64_t v10 = 3758604298;
            }
            else
            {
              long long v13 = calloc(5uLL, 1uLL);
              *mach_port_t v5 = v13;
              if (v13)
              {
                void *v3 = 5;
                int v14 = __s;
                v13[4] = v20;
                *(_DWORD *)long long v13 = v14;
                long long v15 = calloc(__n - 5, 1uLL);
                void *v9 = v15;
                uint64_t v10 = 3758097085;
                if (v15)
                {
                  size_t v16 = __n;
                  *uint64_t v7 = __n - 5;
                  memcpy(v15, v21, v16);
                  uint64_t v10 = 0;
                }
              }
              else
              {
                uint64_t v10 = 3758097085;
              }
            }
          }
          else
          {
            fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_get_reset_sig", ":", 2759, "", 0, "", "");
            uint64_t v10 = 3758097084;
          }
        }
      }
    }
  }
  memset_s(&__s, __n, 0, __n);
  return v10;
}

uint64_t sub_1000A7A08(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  mach_port_t v5 = v4;
  uint64_t input = v1;
  size_t v6 = 4096;
  bzero(__src, 0x1000uLL);
  size_t __count = 4096;
  uint64_t v7 = 3758097090;
  if (v5 && v3)
  {
    mach_port_t v8 = sub_10009C37C();
    if (v8)
    {
      uint64_t v9 = IOConnectCallMethod(v8, 0x59u, &input, 1u, 0, 0, 0, 0, __src, &__count);
      size_t v6 = __count;
      if (v9)
      {
        uint64_t v7 = v9;
      }
      else if (__count - 4097 < 0xFFFFFFFFFFFFF000)
      {
        uint64_t v7 = 3758604298;
      }
      else
      {
        uint64_t v10 = calloc(__count, 1uLL);
        *mach_port_t v5 = v10;
        size_t v6 = __count;
        if (v10)
        {
          size_t *v3 = __count;
          memcpy(v10, __src, v6);
          uint64_t v7 = 0;
          size_t v6 = __count;
        }
        else
        {
          uint64_t v7 = 3758097085;
        }
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_get_reset_pubkey", ":", 2791, "", 0, "", "");
      size_t v6 = 4096;
      uint64_t v7 = 3758097084;
    }
  }
  memset_s(__src, v6, 0, v6);
  return v7;
}

uint64_t sub_1000A7BD0(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10009C37C();
  if (v1) {
    return IOConnectCallMethod(v1, 0x5Bu, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_delete_reset_token", ":", 2815, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A7CAC(unsigned int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10009C37C();
  if (v1) {
    return IOConnectCallMethod(v1, 0x5Eu, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_support_in_rm", ":", 2832, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A7D88(BOOL *a1)
{
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  mach_port_t v2 = sub_10009C37C();
  if (v2)
  {
    uint64_t result = IOConnectCallMethod(v2, 0x6Bu, 0, 0, 0, 0, &output, &outputCnt, 0, 0);
    if (a1)
    {
      if (!result) {
        *a1 = output != 0;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_support_in_rm_is_set", ":", 2848, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_1000A7E8C()
{
  mach_port_t v0 = sub_10009C37C();
  if (v0) {
    return IOConnectCallMethod(v0, 0x5Fu, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_stage_stash", ":", 2865, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A7F34()
{
  return sub_10009D5FC(0);
}

uint64_t sub_1000A7F54(uint64_t a1)
{
  return sub_10009D84C(a1);
}

uint64_t sub_1000A7F70(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v12 = __s;
  *((void *)&v12 + 1) = &v15;
  *(void *)long long v13 = 4096;
  uint64_t v7 = 3758097090;
  if (v5 && v3)
  {
    mach_port_t v8 = sub_10009C37C();
    if (v8)
    {
      mach_port_t v9 = v8;
      if (sub_1000ADF38(&v12, v5) && sub_1000AE058(&v12, v6))
      {
        uint64_t v7 = 3758097098;
        if (ccder_blob_encode_tl())
        {
          uint64_t v10 = IOConnectCallMethod(v9, 0x55u, 0, 0, *((const void **)&v12 + 1), (size_t)&v15 - *((void *)&v12 + 1), 0, 0, __s, (size_t *)v13);
          if (!v10) {
            uint64_t v10 = sub_1000AE8C8((uint64_t)__s, *(uint64_t *)v13, v3);
          }
          uint64_t v7 = v10;
        }
      }
      else
      {
        uint64_t v7 = 3758097098;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_get_blob_state", ":", 2900, "", 0, "", "");
      uint64_t v7 = 3758097084;
    }
  }
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v7;
}

uint64_t sub_1000A814C(long long *a1)
{
  char v7 = 0;
  uint64_t v5 = &v7;
  uint64_t v6 = 1;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  if (a1)
  {
    long long v3 = *a1;
    uint64_t v4 = *((void *)a1 + 2);
    uint64_t v1 = *((void *)&v3 + 1) | 0x10;
  }
  else
  {
    uint64_t v1 = 16;
  }
  *((void *)&v3 + 1) = v1;
  return sub_1000A7F70((uint64_t)&v3);
}

uint64_t sub_1000A81B8(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  long long v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = 3758097098;
  uint64_t output = 0;
  uint64_t input = v6;
  uint32_t outputCnt = 1;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v10 = __s;
  *((void *)&v10 + 1) = &output;
  if (v3)
  {
    mach_port_t v7 = sub_10009C37C();
    if (v7)
    {
      mach_port_t v8 = v7;
      if (sub_1000AE058(&v10, v4))
      {
        if (ccder_blob_encode_tl())
        {
          uint64_t v5 = IOConnectCallMethod(v8, 0x4Eu, &input, 1u, *((const void **)&v10 + 1), (size_t)&output - *((void *)&v10 + 1), &output, &outputCnt, 0, 0);
          if (!v5) {
            uint64_t *v3 = output;
          }
        }
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_get_size", ":", 2943, "", 0, "", "");
      uint64_t v5 = 3758097084;
    }
  }
  else
  {
    uint64_t v5 = 3758097090;
  }
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v5;
}

uint64_t sub_1000A835C(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  long long v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v1;
  uint64_t input = v9;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v16 = __s;
  *((void *)&v16 + 1) = &input;
  size_t v17 = 4096;
  uint64_t v10 = 3758097090;
  if (v7 && v5)
  {
    mach_port_t v11 = sub_10009C37C();
    if (!v11)
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_import", ":", 2971, "", 0, "", "");
      uint64_t v10 = 3758097084;
      goto LABEL_14;
    }
    mach_port_t v12 = v11;
    if (!ccder_blob_encode_body_tl()
      || !sub_1000ADF38(&v16, v7)
      || !sub_1000AE058(&v16, v8)
      || !ccder_blob_encode_tl())
    {
      goto LABEL_12;
    }
    uint64_t v13 = IOConnectCallMethod(v12, 0x4Fu, &input, 1u, *((const void **)&v16 + 1), (size_t)&input - *((void *)&v16 + 1), 0, 0, __s, &v17);
    if (v13)
    {
      uint64_t v10 = v13;
      goto LABEL_14;
    }
    *(void *)&long long v15 = __s;
    *((void *)&v15 + 1) = &__s[v17];
    if (!ccder_blob_decode_range()) {
      goto LABEL_12;
    }
    if (!v3)
    {
      uint64_t v10 = 0;
      goto LABEL_14;
    }
    uint64_t v10 = 0;
    if ((sub_1000ADFA8(&v15, 0, v3) & 1) == 0) {
LABEL_12:
    }
      uint64_t v10 = 3758097098;
  }
LABEL_14:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v10;
}

uint64_t sub_1000A8594()
{
  return sub_1000A81B8(0);
}

uint64_t sub_1000A85A4()
{
  return sub_1000A81B8(0);
}

uint64_t sub_1000A85B4()
{
  return sub_10009CF04(0);
}

uint64_t sub_1000A85CC()
{
  return sub_10009D398(0);
}

uint64_t sub_1000A85E8()
{
  v1[0] = 0;
  v1[1] = 2;
  v1[2] = 0;
  return sub_10009C114((uint64_t)v1);
}

uint64_t sub_1000A862C(char a1)
{
  uint64_t v1 = 130;
  if ((a1 & 6) == 0) {
    uint64_t v1 = 2;
  }
  v3[0] = 0;
  v3[1] = v1;
  v3[2] = 0;
  return sub_10009C114((uint64_t)v3);
}

uint64_t sub_1000A867C()
{
  return sub_10009D5FC(0);
}

uint64_t sub_1000A869C(uint64_t a1, BOOL *a2)
{
  memset(v4, 0, sizeof(v4));
  uint64_t v10 = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  if (!a2) {
    return 3758097090;
  }
  uint64_t result = sub_1000A7F70((uint64_t)v4);
  if (!result)
  {
    if (v5 == 1)
    {
      uint64_t result = 0;
      *a2 = (DWORD1(v7) & 0x8000000) != 0;
    }
    else
    {
      return 3758604312;
    }
  }
  return result;
}

uint64_t sub_1000A8758()
{
  return sub_10009D5FC(0);
}

uint64_t sub_1000A8778()
{
  return sub_10009D84C(0);
}

uint64_t sub_1000A879C(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  uint64_t v11 = 3758097098;
  bzero(v16, 0x1000uLL);
  bzero(v15, 0x1000uLL);
  *(void *)&long long v14 = v16;
  *((void *)&v14 + 1) = &v17;
  *(void *)&long long v13 = v15;
  *((void *)&v13 + 1) = v16;
  if (sub_1000ADF38(&v14, v9)
    && sub_1000ADF38(&v14, v7)
    && ccder_blob_encode_tl()
    && sub_1000ADF38(&v13, v5)
    && sub_1000ADF38(&v13, v3)
    && ccder_blob_encode_tl())
  {
    return sub_10009D5FC(v10);
  }
  return v11;
}

uint64_t sub_1000A8934(uint64_t a1)
{
  return sub_10009D5FC(a1);
}

uint64_t sub_1000A8950(uint64_t a1)
{
  v2[3] = a1;
  memset(v2, 0, 24);
  return sub_10009D5FC((uint64_t)v2);
}

uint64_t sub_1000A89A4(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  bzero(v8, 0x4000uLL);
  uint64_t result = sub_10009D5FC(v6);
  if (!result)
  {
    if (ccder_decode_sequence_tl() && ccder_decode_tl())
    {
      __memcpy_chk();
      if (v5) {
        *uint64_t v5 = 0;
      }
      if (v3) {
        unsigned char *v3 = 0;
      }
      return 0;
    }
    else
    {
      return 3758097084;
    }
  }
  return result;
}

uint64_t sub_1000A8B04()
{
  return sub_10009D5FC(0);
}

uint64_t sub_1000A8B24(int a1)
{
  uint64_t v1 = 8;
  if (a1) {
    uint64_t v1 = 12;
  }
  uint64_t v4 = 0;
  uint64_t v5 = v1;
  uint64_t v6 = 0;
  uint64_t v2 = sub_10009D5FC((uint64_t)&v4);
  syslog(6, "aks_fv_prot_cmd_stash_kek(%llu) = %d", v5, v2);
  return v2;
}

uint64_t sub_1000A8BA0()
{
  uint64_t v0 = sub_10009D5FC(0);
  syslog(6, "aks_fv_prot_cmd_stash_commit = %d", v0);
  return v0;
}

uint64_t sub_1000A8C00()
{
  uint64_t v0 = sub_10009D5FC(0);
  syslog(6, "aks_fv_prot_cmd_stash_destroy = %d", v0);
  return v0;
}

uint64_t sub_1000A8C60()
{
  return sub_10009D84C(0);
}

uint64_t sub_1000A8C80()
{
  return sub_10009D5FC(0);
}

uint64_t sub_1000A8CA0(uint64_t a1)
{
  unsigned int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = 3758097084;
  uint64_t input = v1;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  if (v5)
  {
    mach_port_t v9 = sub_10009C37C();
    if (v9)
    {
      mach_port_t v15 = v9;
      if (v7) {
        long long v16 = v7;
      }
      else {
        long long v16 = "";
      }
      sub_1000B071C((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, (uint64_t)v16);
      uint64_t v17 = IOConnectCallMethod(v15, 0x50u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
      if (v17)
      {
        uint64_t v8 = v17;
      }
      else
      {
        uint64_t v18 = calloc(__count, 1uLL);
        *uint64_t v5 = v18;
        if (v18)
        {
          memcpy(v18, __src, __count);
          uint64_t v8 = 0;
          void *v3 = (int)__count;
        }
        else
        {
          uint64_t v8 = 3758097085;
        }
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_absinthe_collection", ":", 3220, "", 0, "", "");
    }
  }
  else
  {
    uint64_t v8 = 3758097090;
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  free(*(void **)&inputStructCnt[1]);
  return v8;
}

uint64_t sub_1000A8EA8(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  long long v21 = 0;
  uint64_t input = a1;
  int v20 = 0;
  uint64_t v7 = 3758097090;
  if (a2 && a6 && a7)
  {
    mach_port_t v11 = sub_10009C37C();
    if (v11)
    {
      mach_port_t v17 = v11;
      sub_1000B071C(&v21, (unsigned int *)&v20, 2, v12, v13, v14, v15, v16, a2);
      size_t v19 = *a7;
      uint64_t v7 = IOConnectCallMethod(v17, 0x51u, &input, 1u, v21, v20, 0, 0, a6, &v19);
      if (!v7) {
        *a7 = (int)v19;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_absinthe_generate", ":", 3253, "", 0, "", "");
      uint64_t v7 = 3758097084;
    }
  }
  free(v21);
  return v7;
}

uint64_t sub_1000A9034(unsigned int a1)
{
  input[0] = 0;
  input[1] = a1;
  mach_port_t v1 = sub_10009C37C();
  if (v1) {
    return IOConnectCallMethod(v1, 0x53u, input, 2u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drop_auxiliary_auth_by_uid", ":", 3280, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A9110(int a1)
{
  input[0] = 1;
  input[1] = a1;
  mach_port_t v1 = sub_10009C37C();
  if (v1) {
    return IOConnectCallMethod(v1, 0x53u, input, 2u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drop_auxiliary_auth_by_handle", ":", 3296, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A91F0()
{
  mach_port_t v0 = sub_10009C37C();
  if (v0) {
    return IOConnectCallMethod(v0, 0x5Cu, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lower_iteration_count", ":", 3310, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A9298(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10009C37C();
  if (v1) {
    return IOConnectCallMethod(v1, 0x6Au, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_secret_drop", ":", 3326, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A9374(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && !sub_10009ECF0(0xFFFFFFFFLL)) {
    sub_1000AC680((uint64_t)off_1000E3CB0);
  }
  free(0);
  return 3758097084;
}

uint64_t sub_1000A9440(uint64_t a1)
{
  return sub_10009ECF0(a1);
}

uint64_t sub_1000A9450(uint64_t a1, void *a2)
{
  uint64_t v3 = 3758097084;
  uint64_t v8 = 0;
  mach_port_t v9 = 0;
  uint64_t v7 = 0;
  if (!sub_10009ECF0(a1)
    && sub_1000AC590((uint64_t)off_1000E3D30, (uint64_t)v9, (uint64_t)v9 + v8, (uint64_t)&v7))
  {
    if (a2)
    {
      time_t v4 = time(0);
      uint64_t v3 = 0;
      time_t v5 = v4 - v7;
      if (v4 <= v7) {
        time_t v5 = 0;
      }
      *a2 = v5;
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  free(v9);
  return v3;
}

uint64_t sub_1000A94F8(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v4 = 3758097090;
  uint64_t input = v1;
  bzero(__s, 0x1000uLL);
  rsize_t __n = 4096;
  mach_port_t v5 = sub_10009C37C();
  if (!v5)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_internal_state", ":", 3405, "", 0, "", "");
    uint64_t v4 = 3758097084;
    goto LABEL_11;
  }
  if (!v3)
  {
LABEL_11:
    rsize_t v7 = 4096;
    goto LABEL_9;
  }
  uint64_t v6 = IOConnectCallMethod(v5, 0x8Eu, &input, 1u, 0, 0, 0, 0, __s, &__n);
  rsize_t v7 = __n;
  if (v6)
  {
    uint64_t v4 = v6;
  }
  else if (__n - 4097 >= 0xFFFFFFFFFFFFF000)
  {
    if (sub_1000AE360((uint64_t)__s, __n, v3)) {
      uint64_t v4 = 3758097090;
    }
    else {
      uint64_t v4 = 0;
    }
    rsize_t v7 = __n;
  }
LABEL_9:
  memset_s(__s, v7, 0, v7);
  return v4;
}

uint64_t sub_1000A9678(const void *a1, size_t a2, void *a3, size_t *a4)
{
  uint64_t input = 266;
  uint64_t result = 3758097090;
  if (a3 && a4)
  {
    mach_port_t v9 = sub_10009C37C();
    if (v9)
    {
      size_t v10 = *a4;
      uint64_t result = IOConnectCallMethod(v9, 0x68u, &input, 1u, a1, a2, 0, 0, a3, &v10);
      if (!result) {
        *a4 = (int)v10;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fairplay_wrap", ":", 3431, "", 0, "", "");
      return 3758097084;
    }
  }
  return result;
}

uint64_t sub_1000A97A0(unsigned int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t input = ((unint64_t)a1 << 8) | 1;
  uint64_t result = 3758097090;
  if (a4 && a5)
  {
    mach_port_t v10 = sub_10009C37C();
    if (v10)
    {
      size_t v11 = *a5;
      uint64_t result = IOConnectCallMethod(v10, 0x68u, &input, 1u, a2, a3, 0, 0, a4, &v11);
      if (!result) {
        *a5 = (int)v11;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_fairplay_generate_csk_internal", ":", 3455, "", 0, "", "");
      return 3758097084;
    }
  }
  return result;
}

uint64_t sub_1000A98D0(const void *a1, size_t a2, void *a3, size_t *a4)
{
  return sub_1000A97A0(0, a1, a2, a3, a4);
}

uint64_t sub_1000A98E8(const void *a1, size_t a2, void *a3, size_t *a4)
{
  return sub_1000A97A0(1u, a1, a2, a3, a4);
}

uint64_t sub_1000A9900(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  mach_port_t v5 = v4;
  size_t v7 = v6;
  mach_port_t v9 = v8;
  uint64_t v10 = v1;
  long long v19 = 0u;
  memset(v20, 0, sizeof(v20));
  bzero(__s, 0x4000uLL);
  size_t v16 = 0x4000;
  input[0] = 1;
  input[1] = v10;
  mach_port_t v11 = sub_10009C37C();
  if (v11)
  {
    uint64_t v12 = IOConnectCallMethod(v11, 0x87u, input, 2u, v9, v7, 0, 0, __s, &v16);
    if (v12)
    {
      uint64_t v14 = v12;
    }
    else
    {
      __memcpy_chk();
      void *v3 = 44;
      uint64_t v13 = calloc(0x2CuLL, 1uLL);
      *mach_port_t v5 = v13;
      if (v13)
      {
        __memcpy_chk();
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = 3758097085;
      }
    }
  }
  else
  {
    uint64_t v14 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_bak_get_beacon_internal", ":", 3491, "", 0, "", "");
  }
  memset_s(__s, 0x4000uLL, 0, 0x4000uLL);
  return v14;
}

uint64_t sub_1000A9AD8(int a1, unsigned int a2)
{
  uint64_t v2 = sub_1000A9900(a1 ^ 1u | ((unint64_t)a2 << 16));
  if (v2) {
    return v2;
  }
  else {
    return 3758604312;
  }
}

uint64_t sub_1000A9C1C(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  mach_port_t v5 = v4;
  size_t v7 = v6;
  mach_port_t v9 = v8;
  input[0] = 2;
  input[1] = v1;
  int v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  memset(v27, 0, sizeof(v27));
  bzero(__s, 0x4000uLL);
  size_t v25 = 0x4000;
  mach_port_t v10 = sub_10009C37C();
  if (v10)
  {
    uint64_t v11 = IOConnectCallMethod(v10, 0x87u, input, 2u, 0, 0, 0, 0, __s, &v25);
    if (v11)
    {
      uint64_t v12 = v11;
    }
    else
    {
      uint64_t v12 = 3758097085;
      __memcpy_chk();
      uint64_t v13 = calloc(0x28uLL, 1uLL);
      void *v9 = v13;
      if (v13)
      {
        *size_t v7 = 40;
        long long v14 = *(_OWORD *)&v27[1];
        long long v15 = *(_OWORD *)&v27[3];
        v13[4] = v27[5];
        *(_OWORD *)uint64_t v13 = v14;
        *((_OWORD *)v13 + 1) = v15;
        size_t v16 = calloc(0x91uLL, 1uLL);
        *mach_port_t v5 = v16;
        if (v16)
        {
          uint64_t v12 = 0;
          void *v3 = 145;
          long long v17 = v29;
          *size_t v16 = v28;
          v16[1] = v17;
          long long v18 = v30;
          long long v19 = v31;
          long long v20 = v33;
          v16[4] = v32;
          v16[5] = v20;
          unsigned char v16[2] = v18;
          void v16[3] = v19;
          long long v21 = v34;
          long long v22 = v35;
          long long v23 = v36;
          *((unsigned char *)v16 + 144) = v37;
          v16[7] = v22;
          v16[8] = v23;
          v16[6] = v21;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_bak_get_swizzler_internal", ":", 3551, "", 0, "", "");
    uint64_t v12 = 3758097084;
  }
  memset_s(__s, 0x4000uLL, 0, 0x4000uLL);
  memset_s(v27, 0xC4uLL, 0, 0xC4uLL);
  return v12;
}

uint64_t sub_1000A9E74()
{
  return sub_1000A9C1C(0);
}

uint64_t sub_1000A9E8C(uint64_t a1)
{
  mach_port_t v2 = sub_10009E410();
  if (v2) {
    return IOConnectCallMethod(v2, 0xCu, 0, 0, *(const void **)a1, *(void *)(a1 + 8), 0, 0, 0, 0);
  }
  else {
    return 3758097084;
  }
}

uint64_t sub_1000A9EE8(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v4 = (void *)v1;
  bzero(__src, 0x4000uLL);
  size_t __count = 0x4000;
  mach_port_t v5 = sub_10009C37C();
  if (v5)
  {
    uint64_t v6 = 3758097090;
    if (v4 && v3)
    {
      uint64_t v7 = IOConnectCallMethod(v5, 0x96u, 0, 0, 0, 0, 0, 0, __src, &__count);
      if (v7)
      {
        uint64_t v6 = v7;
      }
      else
      {
        uint64_t v8 = calloc(__count, 1uLL);
        void *v4 = v8;
        if (v8)
        {
          size_t v9 = __count;
          size_t *v3 = __count;
          memcpy(v8, __src, v9);
          uint64_t v6 = 0;
        }
        else
        {
          uint64_t v6 = 3758097085;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_dsme_key", ":", 3600, "", 0, "", "");
    uint64_t v6 = 3758097084;
  }
  memset_s(__src, 0x4000uLL, 0, 0x4000uLL);
  return v6;
}

BOOL sub_1000AA07C(uint64_t a1, uint64_t a2)
{
  return a2 == 4 || a2 == 32;
}

uint64_t sub_1000AA090()
{
  mach_port_t v0 = sub_10009C37C();
  if (v0) {
    return IOConnectCallMethod(v0, 0x73u, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_prewarm_sps", ":", 3627, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000AA138(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 4294967285;
  if (a3 && a4 <= 0x30)
  {
    uint64_t v4 = 3758097084;
    mach_port_t v5 = sub_10009C37C();
    if (v5)
    {
      mach_port_t v6 = v5;
      ccder_sizeof_raw_octet_string();
      ccder_sizeof_uint64();
      ccder_sizeof_raw_octet_string();
      uint64_t v7 = ccder_sizeof();
      size_t v8 = v7;
      __chkstk_darwin(v7);
      mach_port_t v10 = (char *)&v12 - v9;
      bzero((char *)&v12 - v9, v8);
      ccder_encode_raw_octet_string();
      ccder_encode_uint64();
      ccder_encode_raw_octet_string();
      if ((char *)ccder_encode_constructed_tl() == v10) {
        return IOConnectCallMethod(v6, 0x72u, 0, 0, v10, v8, 0, 0, 0, 0);
      }
      else {
        return 3758097090;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_sealed_hashes_set", ":", 3644, "", 0, "", "");
    }
  }
  return v4;
}

uint64_t sub_1000AA350(const void *a1, size_t a2)
{
  mach_port_t v4 = sub_10009C37C();
  if (v4) {
    return IOConnectCallMethod(v4, 0x90u, 0, 0, a1, a2, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_measure_and_seal_cryptex_manifest", ":", 3674, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000AA408()
{
  mach_port_t v0 = sub_10009C37C();
  if (v0) {
    return IOConnectCallMethod(v0, 0x95u, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_seal_cryptex_manifest_lock", ":", 3688, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000AA4B0(int a1, uint64_t a2, uint64_t a3)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t v3 = sub_10009C37C();
  if (v3) {
    return IOConnectCallMethod(v3, 0x85u, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lkgp_recover", ":", 3704, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000AA590(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10009C37C();
  if (v1) {
    return IOConnectCallMethod(v1, 0x8Au, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_memento_efface_blob", ":", 3720, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000AA66C(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  uint64_t input = v1;
  bzero(__s, 0x1000uLL);
  rsize_t __n = 4096;
  mach_port_t v4 = sub_10009C37C();
  if (v4)
  {
    uint64_t v5 = IOConnectCallMethod(v4, 0x8Bu, &input, 1u, 0, 0, 0, 0, __s, &__n);
    rsize_t v6 = __n;
    if (v5)
    {
      uint64_t v7 = v5;
    }
    else
    {
      uint64_t v7 = 3758097090;
      if (__n - 4097 >= 0xFFFFFFFFFFFFF000)
      {
        if (sub_1000AE5D0((uint64_t)__s, __n, v3)) {
          uint64_t v7 = 3758097090;
        }
        else {
          uint64_t v7 = 0;
        }
        rsize_t v6 = __n;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_memento_get_state", ":", 3738, "", 0, "", "");
    uint64_t v7 = 3758097084;
    rsize_t v6 = 4096;
  }
  memset_s(__s, v6, 0, v6);
  return v7;
}

uint64_t sub_1000AA7F0()
{
  mach_port_t v0 = sub_10009C37C();
  if (v0) {
    return IOConnectCallMethod(v0, 0x89u, &input, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_jcop_supports_updated_kud_policy", ":", 3758, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000AA898(uint64_t a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10009C37C();
  if (v1) {
    return IOConnectCallMethod(v1, 0x97u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_cx_window", ":", 3774, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000AA970(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  size_t v6 = 4096;
  if (!v1) {
    return 4294967285;
  }
  mach_port_t v2 = (void *)v1;
  mach_port_t v3 = sub_10009C37C();
  if (v3)
  {
    mach_port_t v4 = v3;
    bzero(outputStruct, 0x1000uLL);
    uint64_t result = IOConnectCallMethod(v4, 0x98u, 0, 0, 0, 0, 0, 0, outputStruct, &v6);
    if (!result)
    {
      if (v6 == 8)
      {
        uint64_t result = 0;
        *mach_port_t v2 = outputStruct[0];
      }
      else
      {
        return 3758604298;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_cx_window", ":", 3791, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_1000AAACC()
{
  return 0;
}

uint64_t sub_1000AAAD8()
{
  return 0;
}

unint64_t sub_1000AAB4C(unsigned int a1)
{
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  return 1000000000 * info.denom * (unint64_t)a1 / info.numer;
}

unint64_t sub_1000AAB98(uint64_t a1)
{
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  return (unint64_t)info.numer * a1 / info.denom;
}

uint64_t sub_1000AABD8()
{
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  return mach_continuous_time() * info.numer / info.denom / 0x3E8;
}

__darwin_time_t sub_1000AAC2C()
{
  v1.tv_sec = 0;
  *(void *)&v1.tv_usec = 0;
  gettimeofday(&v1, 0);
  return v1.tv_sec;
}

uint64_t sub_1000AAC5C(uint64_t a1)
{
  return 1000000 * a1;
}

unint64_t sub_1000AAC6C(uint64_t a1)
{
  return (a1 + 999999) / 0xF4240uLL;
}

void *sub_1000AAC84(unsigned int a1, unsigned int a2)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = v2 << 31 >> 31;
  if (v3 != v2 || v3 < 0)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s overflow%s\n", "aks", "", "", "", "circular_queue_init", ":", 341, "", 0, "", "");
    return 0;
  }
  else
  {
    uint64_t v5 = calloc(0x20uLL, 1uLL);
    size_t v6 = v5;
    if (v5)
    {
      v5[1] = 0;
      size_t v7 = (v3 & 0x1FFFFFFFFLL) * a2;
      *(_DWORD *)uint64_t v5 = a2;
      *((_DWORD *)v5 + 1) = v2;
      size_t v8 = calloc(v7, 1uLL);
      v6[2] = v7;
      v6[3] = v8;
    }
  }
  return v6;
}

uint64_t sub_1000AAD64(_DWORD *a1)
{
  unsigned int v3 = a1[2];
  unsigned int v2 = a1[3];
  uint64_t result = v2 - v3;
  if (v2 < v3) {
    return (result + a1[1]);
  }
  return result;
}

uint64_t sub_1000AAD80(unsigned int *a1, const void *a2)
{
  unsigned int v3 = a1[3];
  unsigned int v4 = (v3 + 1) % a1[1];
  memcpy((void *)(*((void *)a1 + 3) + *a1 * v3), a2, *a1);
  a1[3] = v4;
  if (v4 == a1[2]) {
    a1[2] = (v4 + 1) % a1[1];
  }
  return 0;
}

uint64_t sub_1000AADEC(unsigned int *a1, void *__dst)
{
  unsigned int v2 = a1[2];
  if (v2 == a1[3]) {
    return 0xFFFFFFFFLL;
  }
  if (__dst)
  {
    memcpy(__dst, (const void *)(*((void *)a1 + 3) + *a1 * v2), *a1);
    unsigned int v2 = a1[2];
  }
  memset_s((void *)(*((void *)a1 + 3) + *a1 * v2), *a1, 0, *a1);
  uint64_t result = 0;
  a1[2] = (a1[2] + 1) % a1[1];
  return result;
}

uint64_t sub_1000AAE78(unsigned int *a1, void *__dst)
{
  unsigned int v2 = a1[2];
  if (v2 == a1[3]) {
    return 0xFFFFFFFFLL;
  }
  memcpy(__dst, (const void *)(*((void *)a1 + 3) + *a1 * v2), *a1);
  return 0;
}

uint64_t sub_1000AAEC0(int *a1, void *a2, unsigned int *a3)
{
  unsigned int v7 = a1[2];
  unsigned int v6 = a1[3];
  unsigned int v8 = v6 - v7;
  if (v6 < v7) {
    v8 += a1[1];
  }
  if (!v8) {
    return 0;
  }
  unsigned int v9 = *a1 * v8;
  mach_port_t v10 = (char *)calloc(v9, 1uLL);
  if (!v10) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = v10;
  unsigned int v12 = a1[2];
  unsigned int v13 = a1[3];
  if (v13 <= v12)
  {
    if (v12 <= v13) {
      goto LABEL_13;
    }
    unsigned int v17 = a1[1] - v12;
    memcpy(v10, (const void *)(*((void *)a1 + 3) + *a1 * v12), *a1 * v17);
    if (v8 <= v17) {
      goto LABEL_13;
    }
    mach_port_t v10 = &v11[*a1 * v17];
    long long v14 = (const void *)*((void *)a1 + 3);
    size_t v15 = *a1 * (v8 - v17);
  }
  else
  {
    long long v14 = (const void *)(*((void *)a1 + 3) + *a1 * v12);
    size_t v15 = *a1 * v8;
  }
  memcpy(v10, v14, v15);
LABEL_13:
  unsigned int v18 = a1[1];
  int v19 = *a1;
  a1[2] = (a1[2] + v8) % v18;
  memset_s(*((void **)a1 + 3), v19 * v18, 0, v19 * v18);
  uint64_t result = 0;
  *a2 = v11;
  *a3 = v9;
  return result;
}

uint64_t sub_1000AAFEC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  rsize_t v1 = (*(_DWORD *)a1 * *(_DWORD *)(a1 + 4));
  return memset_s(*(void **)(a1 + 24), v1, 0, v1);
}

void sub_1000AB00C(void *a1)
{
  *((void *)a1 + 1) = 0;
  rsize_t v2 = (*(_DWORD *)a1 * *((_DWORD *)a1 + 1));
  memset_s(*((void **)a1 + 3), v2, 0, v2);
  memset_s(*((void **)a1 + 3), *((void *)a1 + 2), 0, *((void *)a1 + 2));
  free(*((void **)a1 + 3));
  memset_s(a1, 0x20uLL, 0, 0x20uLL);

  free(a1);
}

uint64_t sub_1000AB088(unsigned int a1)
{
  return (a1 >> 5) & 1;
}

BOOL sub_1000AB090(uint8x16_t *a1)
{
  int8x16_t v1 = (int8x16_t)vmovl_high_u8(*a1);
  int8x16_t v2 = (int8x16_t)vmovl_u8(*(uint8x8_t *)a1->i8);
  int8x16_t v3 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8(*(int8x8_t *)v2.i8, *(int8x8_t *)v1.i8), vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL))));
  return vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) != 0;
}

BOOL sub_1000AB0D4(unsigned __int8 *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  int v2 = 0;
  do
  {
    int v3 = *a1++;
    v2 |= v3;
    --a2;
  }
  while (a2);
  return v2 != 0;
}

_DWORD *sub_1000AB100(_DWORD *result)
{
  if (result) {
    return (_DWORD *)(*result != 0);
  }
  return result;
}

uint64_t sub_1000AB114(char a1, int a2)
{
  return a1 & 0x1F | (32 * a2);
}

uint64_t sub_1000AB11C(unsigned int a1)
{
  return (a1 >> 6) & 1;
}

uint64_t sub_1000AB124(int a1)
{
  return a1 & 0xFFFFFFBF;
}

uint64_t sub_1000AB12C(int a1)
{
  return a1 | 0x40u;
}

uint64_t sub_1000AB134(char a1)
{
  char v1 = a1 & 0x1F;
  if ((a1 & 0x1Fu) >= 0x14) {
    char v1 = -1;
  }
  return ((a1 & 0x1Fu) < 0x14) & (0xC3FC0u >> v1);
}

uint64_t sub_1000AB15C(char a1)
{
  if ((a1 & 0x1Fu) > 0x13) {
    return 0xFFFFFFFFLL;
  }
  else {
    return a1 & 0x1F;
  }
}

uint64_t sub_1000AB16C(char a1)
{
  unsigned int v1 = a1 & 0x1F;
  if (v1 > 0x13) {
    unsigned int v1 = -1;
  }
  return (v1 < 0x12) & (0x2E03Eu >> v1);
}

uint64_t sub_1000AB194(char a1)
{
  return a1 & 0xF;
}

BOOL sub_1000AB19C(int a1, int a2)
{
  return ((a2 ^ a1) & 0xF) == 0;
}

uint64_t sub_1000AB1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _cc_cmp_safe(a3, a1, a2);
}

uint64_t sub_1000AB1C0(const char *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  unsigned int v4 = a1;
  char v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)__str = 0u;
  long long v17 = 0u;
  uint64_t v5 = &__stdoutp;
  if (a3 >= 0x41)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s %sdump %s (len = %zd)%s%s\n", "aks", "", "", "", "dump_bytes_internal", ":", 786, "", 0, "", "", a1, a3, "", "");
    unsigned int v4 = "";
  }
  else if (!a3)
  {
    return memset_s(__str, 0x81uLL, 0, 0x81uLL);
  }
  unint64_t v6 = 0;
  unint64_t v15 = v3;
  do
  {
    unsigned int v7 = v5;
    if (v3 - v6 >= 0x40) {
      uint64_t v8 = 64;
    }
    else {
      uint64_t v8 = v3 - v6;
    }
    if (v8)
    {
      unsigned int v9 = (unsigned __int8 *)(a2 + v6);
      mach_port_t v10 = __str;
      uint64_t v11 = v8;
      do
      {
        int v12 = *v9++;
        snprintf(v10, 3uLL, "%02x", v12);
        v10 += 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v5 = v7;
    fprintf(*v7, "%s%s:%s%s%s%s%u:%s%u:%s %s%s%s[%04zu,%04zu): %s%s%s%s\n", "aks", "", "", "", "dump_bytes_internal", ":", 796, "", 0, "", "", v4, "", v6, v8 + v6, "", __str,
      "",
      "");
    v6 += v8;
    unint64_t v3 = v15;
  }
  while (v6 < v15);
  return memset_s(__str, 0x81uLL, 0, 0x81uLL);
}

unsigned char *sub_1000AB3A0(unsigned __int8 *a1, unint64_t a2)
{
  if (a2 >= 0x10) {
    uint64_t v2 = 16;
  }
  else {
    uint64_t v2 = a2;
  }
  if (v2)
  {
    unsigned int v4 = byte_1000E4288;
    uint64_t v5 = v2;
    do
    {
      int v6 = *a1++;
      snprintf(v4, 3uLL, "%02x", v6);
      v4 += 2;
      --v5;
    }
    while (v5);
  }
  byte_1000E4288[2 * v2] = 0;
  return byte_1000E4288;
}

uint64_t sub_1000AB434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(__s, 0, sizeof(__s));
  if (a4 == 3)
  {
    ccsha256_di();
    cchmac();
    uint64_t v5 = 0;
    *(_WORD *)a3 = __s[0];
    *(unsigned char *)(a3 + 2) = BYTE2(__s[0]);
  }
  else
  {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v5;
}

uint64_t sub_1000AB500(const char *a1, uint64_t a2, uint64_t a3)
{
  char v6 = 0;
  __int16 v5 = 0;
  sub_1000AB434(a2, a3, (uint64_t)&v5, 3);
  return sub_1000AB1C0(a1, (uint64_t)&v5, 3uLL);
}

char *sub_1000AB558(char *result, unint64_t a2)
{
  if (a2 >= 2)
  {
    unint64_t v2 = a2 >> 1;
    unint64_t v3 = &result[a2 - 1];
    do
    {
      char v4 = *result;
      *result++ = *v3;
      *v3-- = v4;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1000AB588(unsigned __int8 *a1, unint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v5 = 0xFFFFFFFFLL;
  if ((a2 & 1) == 0)
  {
    char v6 = a1;
    if (a1)
    {
      if (a3 && a4)
      {
        unint64_t v9 = a2 >> 1;
        mach_port_t v10 = calloc(a2 >> 1, 1uLL);
        if (v10)
        {
          if (a2 >= 2)
          {
            if (v9 <= 1) {
              uint64_t v11 = 1;
            }
            else {
              uint64_t v11 = a2 >> 1;
            }
            int v12 = v10;
            do
            {
              int v13 = *v6;
              unsigned int v14 = v13 - 48;
              unsigned int v15 = v13 - 97;
              if ((v13 - 65) >= 6) {
                char v16 = -1;
              }
              else {
                char v16 = v13 - 55;
              }
              char v17 = v13 - 87;
              if (v15 > 5) {
                char v17 = v16;
              }
              if (v14 < 0xA) {
                char v17 = v14;
              }
              char v18 = 16 * v17;
              int v19 = v6[1];
              unsigned int v20 = v19 - 48;
              unsigned int v21 = v19 - 97;
              if ((v19 - 65) >= 6) {
                char v22 = -1;
              }
              else {
                char v22 = v19 - 55;
              }
              char v23 = v19 - 87;
              if (v21 > 5) {
                char v23 = v22;
              }
              if (v20 < 0xA) {
                char v23 = v20;
              }
              *v12++ = v23 | v18;
              v6 += 2;
              --v11;
            }
            while (v11);
          }
          uint64_t v5 = 0;
          *a3 = v10;
          *a4 = v9;
        }
        else
        {
          return 4294967279;
        }
      }
    }
  }
  return v5;
}

uint64_t sub_1000AB690(uint64_t result)
{
  if (result == 0 || result >= 0xFFFFFFDA) {
    return dword_1000B64B0[(int)result + 38];
  }
  return result;
}

uint64_t sub_1000AB6AC(void *a1, uint64_t a2, char a3)
{
  memset_s(a1, 0x10uLL, 0, 0x10uLL);
  if (a3) {
    return 4294967285;
  }
  if (a2 && *(void *)a2 && (size_t v7 = *(void *)(a2 + 8)) != 0)
  {
    uint64_t v8 = calloc(v7, 1uLL);
    if (v8)
    {
      *a1 = v8;
      unint64_t v9 = *(const void **)a2;
      a1[1] = *(void *)(a2 + 8);
      memcpy(v8, v9, *(void *)(a2 + 8));
      return 0;
    }
    else
    {
      return 4294967279;
    }
  }
  else
  {
    uint64_t result = 0;
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

uint64_t sub_1000AB744(uint64_t result, int a2, const char *a3)
{
  if ((result & 1) == 0)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s failed REQUIRE condition (%s:%d)\n%s\n", "aks", "", "", "", "REQUIRE_func", ":", 1047, "", 0, "", a3, a2, "");
    abort();
  }
  return result;
}

uint64_t sub_1000AB7B8(long long *a1, long long *a2)
{
  memset(v14, 0, sizeof(v14));
  sub_1000AF7F8((uint64_t)v14, 0x20u);
  cccurve25519_make_pub();
  long long v8 = 0u;
  long long v9 = 0u;
  int __s = 0x1000000;
  long long v4 = a2[1];
  long long v10 = *a2;
  long long v11 = v4;
  long long v5 = a1[1];
  long long v12 = *a1;
  long long v13 = v5;
  cccurve25519();
  ccsha256_di();
  ccdigest();
  memset_s(&__s, 0x64uLL, 0, 0x64uLL);
  memset_s(v14, 0x20uLL, 0, 0x20uLL);
  return 0;
}

uint64_t sub_1000AB8A4(int *a1, uint64_t (*a2)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), char a3, uint64_t *a4, unsigned int a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v32 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  memset(__s, 0, sizeof(__s));
  uint64_t v8 = 0xFFFFFFFFLL;
  if (!a6 || !a7) {
    goto LABEL_40;
  }
  if (!a1)
  {
LABEL_14:
    if (a2)
    {
      if (sub_10009C090(a5, &v32))
      {
        if (*a7 < v32) {
          goto LABEL_40;
        }
        char v18 = 0;
        unsigned int v19 = 0;
        unsigned int v20 = a2;
        unsigned int v21 = a4;
        goto LABEL_38;
      }
    }
    else
    {
      if ((a3 & 4) != 0)
      {
        if ((a5 & 0xF) != 0 || *a7 < a5) {
          goto LABEL_40;
        }
        unsigned int v32 = a5;
        uint64_t v29 = ccaes_cbc_encrypt_mode();
        sub_1000AC13C(v29, 32, (uint64_t)(a1 + 2), (uint64_t)&unk_1000E4358, a5 & 0xFFFFFFF0);
LABEL_39:
        uint64_t v8 = 0;
        *a7 = v32;
        goto LABEL_40;
      }
      if (sub_10009C090(a5, &v32))
      {
        if (*a7 < v32) {
          goto LABEL_40;
        }
        if ((a3 & 8) != 0)
        {
          ccsha256_di();
          cchkdf();
          char v18 = __s;
        }
        else
        {
          char v18 = a1 + 2;
        }
        unsigned int v19 = 32;
        unsigned int v20 = 0;
        unsigned int v21 = a4;
LABEL_38:
        if (sub_10009BC50((uint64_t)v18, v19, 0xA6A6A6A6A6A6A6A6, v20, v21, a5, (void *)a6, &v32)) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
    }
    uint64_t v8 = 4294967285;
    if ((a3 & 8) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  int v14 = *a1;
  if ((*a1 - 1) >= 2)
  {
    if (v14) {
      goto LABEL_40;
    }
    goto LABEL_14;
  }
  if ((a3 & 4) != 0) {
    unsigned int v15 = 64;
  }
  else {
    unsigned int v15 = 72;
  }
  unsigned int v32 = v15;
  if (!a2 && a5 == 32 && *a7 >= v15)
  {
    if (v14 == 1)
    {
      sub_1000AB7B8((long long *)(a1 + 9), &v34);
    }
    else
    {
      long long v23 = *(_OWORD *)(a1 + 5);
      long long v34 = *(_OWORD *)(a1 + 1);
      long long v35 = v23;
      long long v24 = *(_OWORD *)(a1 + 13);
      long long v36 = *(_OWORD *)(a1 + 9);
      long long v37 = v24;
    }
    if ((a3 & 0x80) == 0)
    {
      long long v25 = v35;
      *(_OWORD *)a6 = v34;
      *(_OWORD *)(a6 + 16) = v25;
      if ((a3 & 4) != 0)
      {
        uint64_t v28 = ccaes_cbc_encrypt_mode();
        sub_1000AC13C(v28, 32, (uint64_t)&v36, (uint64_t)&unk_1000E4358, 0x20uLL);
        goto LABEL_34;
      }
      int v31 = 40;
      if ((a3 & 8) != 0)
      {
        ccsha256_di();
        cchkdf();
        CFTypeID v27 = (void *)(a6 + 32);
        CFTypeID v26 = __s;
      }
      else
      {
        CFTypeID v26 = &v36;
        CFTypeID v27 = (void *)(a6 + 32);
      }
      if (!sub_10009BC50((uint64_t)v26, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, a4, 0x20u, v27, &v31))
      {
LABEL_34:
        uint64_t v8 = 0;
        *a7 = v15;
        if ((a3 & 8) == 0) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
    }
  }
LABEL_40:
  if ((a3 & 8) != 0) {
LABEL_41:
  }
    memset_s(__s, 0x20uLL, 0, 0x20uLL);
LABEL_42:
  memset_s(&v34, 0x40uLL, 0, 0x40uLL);
  return v8;
}

uint64_t sub_1000ABC10(long long *a1, uint64_t a2, long long *a3)
{
  long long v8 = 0u;
  long long v7 = 0u;
  long long v3 = a1[1];
  long long v9 = *a1;
  long long v10 = v3;
  long long v4 = a3[1];
  long long v11 = *a3;
  int __s = 0x1000000;
  long long v12 = v4;
  cccurve25519();
  ccsha256_di();
  ccdigest();
  memset_s(&__s, 0x64uLL, 0, 0x64uLL);
  return 0;
}

uint64_t sub_1000ABCD0(uint64_t a1, uint64_t (*a2)(void, void *, unint64_t *, unint64_t *, uint64_t), char a3, void *a4, unsigned int a5, void *a6, unsigned int *a7)
{
  unsigned int v24 = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v8 = 0xFFFFFFFFLL;
  if (a4 && a5)
  {
    if (!a1) {
      goto LABEL_6;
    }
    if (*(_DWORD *)a1 != 1)
    {
      if (!*(_DWORD *)a1)
      {
LABEL_6:
        if (a5 <= 0x28)
        {
          if (a2)
          {
            if (sub_10009C0EC(a5, &v24) && *a7 >= v24)
            {
              unsigned int v15 = 0;
              unsigned int v16 = 0;
              char v17 = a2;
              goto LABEL_30;
            }
          }
          else if ((a3 & 4) != 0)
          {
            if ((a5 & 0xF) == 0 && *a7 >= a5)
            {
              unsigned int v24 = a5;
              uint64_t v20 = ccaes_cbc_decrypt_mode();
              sub_1000AC13C(v20, 32, a1 + 8, (uint64_t)&unk_1000E4358, a5 & 0xFFFFFFF0);
LABEL_31:
              uint64_t v8 = 0;
              *a7 = v24;
              goto LABEL_35;
            }
          }
          else if (sub_10009C0EC(a5, &v24) && *a7 >= v24)
          {
            if ((a3 & 8) != 0)
            {
              ccsha256_di();
              cchkdf();
              unsigned int v15 = v26;
            }
            else
            {
              unsigned int v15 = (_OWORD *)(a1 + 8);
            }
            unsigned int v16 = 32;
            char v17 = 0;
LABEL_30:
            if (!sub_10009C024((uint64_t)v15, v16, 0xA6A6A6A6A6A6A6A6, v17, a4, a5, a6, &v24)) {
              goto LABEL_31;
            }
            goto LABEL_40;
          }
        }
LABEL_38:
        uint64_t v8 = 4294967285;
        goto LABEL_35;
      }
LABEL_22:
      uint64_t v8 = 0xFFFFFFFFLL;
      goto LABEL_35;
    }
    unsigned int v24 = 32;
    if (*a7 < 0x20) {
      goto LABEL_38;
    }
    memset(__s, 0, sizeof(__s));
    if ((a3 & 4) != 0)
    {
      if (a5 != 64) {
        goto LABEL_38;
      }
      sub_1000ABC10((long long *)a4, a1 + 4, (long long *)(a1 + 36));
      uint64_t v21 = ccaes_cbc_decrypt_mode();
      sub_1000AC13C(v21, 32, (uint64_t)__s, (uint64_t)&unk_1000E4358, 0x20uLL);
    }
    else
    {
      if (a5 != 72) {
        goto LABEL_38;
      }
      sub_1000ABC10((long long *)a4, a1 + 4, (long long *)(a1 + 36));
      if (a3 < 0) {
        goto LABEL_22;
      }
      int v23 = 32;
      if ((a3 & 8) != 0)
      {
        ccsha256_di();
        cchkdf();
        char v18 = a4 + 4;
        unsigned int v19 = v26;
      }
      else
      {
        char v18 = a4 + 4;
        unsigned int v19 = __s;
      }
      if (sub_10009C024((uint64_t)v19, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, v18, 0x28u, a6, &v23))
      {
        memset_s(__s, 0x20uLL, 0, 0x20uLL);
LABEL_40:
        uint64_t v8 = 4294967277;
        goto LABEL_35;
      }
    }
    memset_s(__s, 0x20uLL, 0, 0x20uLL);
    uint64_t v8 = 0;
    *a7 = 32;
  }
LABEL_35:
  if ((a3 & 8) != 0) {
    memset_s(v26, 0x20uLL, 0, 0x20uLL);
  }
  return v8;
}

uint64_t sub_1000AC024(uint64_t a1, void *a2, size_t *a3)
{
  size_t v5 = ((unint64_t)(cczp_bitlen() + 7) >> 2) | 1;
  char v6 = calloc(v5, 1uLL);
  if (!v6) {
    return 4294967279;
  }
  long long v7 = v6;
  ccec_export_pub();
  uint64_t result = 0;
  *a2 = v7;
  *a3 = v5;
  return result;
}

unint64_t sub_1000AC0A4()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

unint64_t sub_1000AC0C8()
{
  return (((unint64_t)(cczp_bitlen() + 7) >> 2) & 0x3FFFFFFFFFFFFFFELL) + 9;
}

unint64_t sub_1000AC0F0()
{
  return ((unint64_t)(cczp_bitlen() + 7) >> 2) | 1;
}

unint64_t sub_1000AC118()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

uint64_t sub_1000AC13C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return _cccbc_one_shot(a1, a2, a3, a4, a5 >> 4);
}