uint64_t sub_100004968()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_1000929B8);
  sub_100006040(v0, (uint64_t)qword_1000929B8);
  static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t CFBBiomeReader.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  return v0;
}

uint64_t CFBBiomeReader.init()()
{
  swift_defaultActor_initialize();
  return v0;
}

uint64_t sub_100004A24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for FBKSInteraction.FeatureDomain();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_10000A840(&qword_100092C70, (void (*)(uint64_t))&type metadata accessor for FBKSInteraction.FeatureDomain), uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_10000A840(&qword_100092C78, (void (*)(uint64_t))&type metadata accessor for FBKSInteraction.FeatureDomain);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

BOOL sub_100004C38(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_100004C50()
{
  Hasher._combine(_:)(*v0);
}

uint64_t sub_100004C90@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_100008580((uint64_t *)&unk_100094200);
  __chkstk_darwin(v4 - 8);
  v6 = (char *)&v27[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    sub_10000A690();
    swift_allocError();
    char v17 = 0;
LABEL_32:
    char *v16 = v17;
    return swift_willThrow();
  }
  v27[0] = 0x6D6165727473;
  v27[1] = 0xE600000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v11 = sub_100025B40((uint64_t)v28), (v12 & 1) != 0))
  {
    sub_10000A7E0(*(void *)(a1 + 56) + 32 * v11, (uint64_t)&v29);
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
  }
  sub_10000A6E4((uint64_t)v28);
  if (!*((void *)&v30 + 1))
  {
    sub_10000A738((uint64_t)&v29, (uint64_t *)&unk_100093910);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    sub_10000A690();
    swift_allocError();
    char v17 = 2;
    goto LABEL_32;
  }
  uint64_t v13 = v27[1];
  uint64_t v31 = v27[0];
  strcpy((char *)v27, "commonMetadata");
  HIBYTE(v27[1]) = -18;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v14 = sub_100025B40((uint64_t)v28), (v15 & 1) != 0))
  {
    sub_10000A7E0(*(void *)(a1 + 56) + 32 * v14, (uint64_t)&v29);
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
  }
  sub_10000A6E4((uint64_t)v28);
  if (!*((void *)&v30 + 1))
  {
    swift_bridgeObjectRelease();
    sub_10000A738((uint64_t)&v29, (uint64_t *)&unk_100093910);
LABEL_22:
    sub_10000A690();
    swift_allocError();
    char v17 = 8;
    goto LABEL_32;
  }
  sub_100008580(&qword_100092C50);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v18 = v27[0];
  strcpy((char *)v27, "evaluationUuid");
  HIBYTE(v27[1]) = -18;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v18 + 16) && (unint64_t v19 = sub_100025B40((uint64_t)v28), (v20 & 1) != 0))
  {
    sub_10000A7E0(*(void *)(v18 + 56) + 32 * v19, (uint64_t)&v29);
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
  }
  sub_10000A6E4((uint64_t)v28);
  if (!*((void *)&v30 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = (uint64_t *)&unk_100093910;
    v22 = (char *)&v29;
    goto LABEL_29;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = (uint64_t *)&unk_100094200;
    v22 = v6;
LABEL_29:
    sub_10000A738((uint64_t)v22, v21);
LABEL_31:
    sub_10000A690();
    swift_allocError();
    char v17 = 4;
    goto LABEL_32;
  }
  v24 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v24(v10, v6, v7);
  uint64_t v25 = type metadata accessor for CFBBiomeReader.Metadata();
  uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v24)((char *)a2 + *(int *)(v25 + 20), v10, v7);
  *a2 = v31;
  a2[1] = v13;
  *(void *)((char *)a2 + *(int *)(v25 + 24)) = v18;
  return result;
}

uint64_t sub_10000515C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v50 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v50 - v12;
  __chkstk_darwin(v11);
  v56 = (char *)&v50 - v14;
  uint64_t v15 = type metadata accessor for CFBBiomeReader.Metadata();
  __chkstk_darwin(v15);
  char v17 = (uint64_t *)((char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a1)
  {
    sub_10000A690();
    swift_allocError();
    *unint64_t v19 = 0;
    swift_willThrow();
    return v15;
  }
  uint64_t v18 = swift_bridgeObjectRetain();
  sub_100004C90(v18, v17);
  if (!v1)
  {
    char v20 = (char *)v17 + *(int *)(v15 + 20);
    uint64_t v53 = v4;
    v21 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v55 = v3;
    v51 = v21;
    uint64_t v52 = v4 + 16;
    ((void (*)(char *, char *))v21)(v56, v20);
    v54 = v17;
    uint64_t v22 = *v17;
    uint64_t v23 = v17[1];
    BOOL v24 = v22 == 0x7478655474786574 && v23 == 0xE800000000000000;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      objc_allocWithZone((Class)BMFeedbackTextToTextEvaluationData);
      id v25 = sub_100007094();
      type metadata accessor for FBKSDonation();
      v26 = v56;
      v51(v13, v56, v55);
      uint64_t v27 = sub_10003F584(v25, v13);
      uint64_t v28 = v53;
      uint64_t v29 = (uint64_t)v54;
    }
    else
    {
      BOOL v30 = v22 == 0x67616D4974786574 && v23 == 0xE900000000000065;
      if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        BOOL v34 = v22 == 0x67616D4974786574 && v23 == 0xEE006567616D4965;
        uint64_t v35 = v55;
        if (!v34 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          swift_bridgeObjectRelease();
          sub_10000A690();
          swift_allocError();
          unsigned char *v40 = 3;
          swift_willThrow();
          (*(void (**)(char *, uint64_t))(v53 + 8))(v56, v35);
          sub_10000A980((uint64_t)v54);
          return v15;
        }
        uint64_t v29 = (uint64_t)v54;
        objc_allocWithZone((Class)BMEvaluationCommonMetadata);
        swift_bridgeObjectRetain();
        id v37 = sub_100007094();
        uint64_t v38 = swift_bridgeObjectRetain();
        uint64_t v39 = sub_100008D00(v38);
        uint64_t v28 = v53;
        uint64_t v42 = v39;
        swift_bridgeObjectRelease();
        if (!v42) {
          sub_1000235F0((uint64_t)_swiftEmptyArrayStorage);
        }
        objc_allocWithZone((Class)BMTextImageContent);
        id v46 = sub_100007094();
        uint64_t v47 = sub_100008D00(a1);
        swift_bridgeObjectRelease();
        if (!v47) {
          sub_1000235F0((uint64_t)_swiftEmptyArrayStorage);
        }
        objc_allocWithZone((Class)BMImageContent);
        id v48 = sub_100007094();
        id v49 = [objc_allocWithZone((Class)BMFeedbackTextImageToImageEvaluationData) initWithCommonMetadata:v37 originalContent:v46 generatedContent:v48];

        type metadata accessor for FBKSDonation();
        v51(v7, v56, v55);
        uint64_t v15 = sub_10004038C(v49, v7);
        v26 = v56;
LABEL_34:
        (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v55);
        sub_10000A980(v29);
        return v15;
      }
      uint64_t v29 = (uint64_t)v54;
      objc_allocWithZone((Class)BMEvaluationCommonMetadata);
      swift_bridgeObjectRetain();
      id v31 = sub_100007094();
      uint64_t v32 = swift_bridgeObjectRetain();
      uint64_t v33 = sub_100008B5C(v32);
      swift_bridgeObjectRelease();
      uint64_t v28 = v53;
      if (!v33) {
        sub_1000235F0((uint64_t)_swiftEmptyArrayStorage);
      }
      objc_allocWithZone((Class)BMTextContent);
      id v36 = sub_100007094();
      uint64_t v41 = sub_100008D00(a1);
      swift_bridgeObjectRelease();
      if (!v41) {
        sub_1000235F0((uint64_t)_swiftEmptyArrayStorage);
      }
      objc_allocWithZone((Class)BMImageContent);
      id v44 = sub_100007094();
      id v45 = [objc_allocWithZone((Class)BMFeedbackTextToImageEvaluationData) initWithCommonMetadata:v31 originalContent:v36 generatedContent:v44];

      type metadata accessor for FBKSDonation();
      v26 = v56;
      v51(v10, v56, v55);
      uint64_t v27 = sub_10003F5C4(v45, v10);
    }
    uint64_t v15 = v27;
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint8_t *CFBBiomeReader.fetchDonation(donationID:database:)(uint64_t a1, uint8_t *a2)
{
  uint64_t v2 = UUID.uuidString.getter();
  uint64_t v4 = v3;
  if (qword_1000929B0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = sub_100006040(v5, (uint64_t)qword_1000929B8);
  swift_bridgeObjectRetain_n();
  id v44 = (uint8_t *)v6;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    v47[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    v47[3] = sub_100007E60(v2, (unint64_t)v4, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Fetching donation with donationID: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v47[0] = 0;
  v47[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(877);
  v10._countAndFlagsBits = 0xD000000000000024;
  v10._object = (void *)0x800000010007BFB0;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0x7478655474786574;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0xD0000000000000D6;
  v12._object = (void *)0x800000010007BFE0;
  String.append(_:)(v12);
  v13._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0xD000000000000026;
  v14._object = (void *)0x800000010007C0C0;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v2;
  v15._object = v4;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0xD00000000000001CLL;
  v16._object = (void *)0x800000010007C0F0;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x67616D4974786574;
  v17._object = (void *)0xE900000000000065;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0xD0000000000000D6;
  v18._object = (void *)0x800000010007BFE0;
  String.append(_:)(v18);
  v19._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0xD000000000000026;
  v20._object = (void *)0x800000010007C0C0;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v2;
  v21._object = v4;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0xD00000000000001CLL;
  v22._object = (void *)0x800000010007C0F0;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x67616D4974786574;
  v23._object = (void *)0xEE006567616D4965;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0xD0000000000000D6;
  v24._object = (void *)0x800000010007BFE0;
  String.append(_:)(v24);
  v25._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0xD000000000000026;
  v26._object = (void *)0x800000010007C0C0;
  String.append(_:)(v26);
  v27._countAndFlagsBits = v2;
  v27._object = v4;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0x494D494C20290A22;
  v28._object = (void *)0xEB00000000312054;
  String.append(_:)(v28);
  uint64_t v29 = a2;
  BOOL v30 = (void *)BMSQLDatabase.execute(query:)();
  swift_bridgeObjectRelease();
  if ([v30 error]) {
    goto LABEL_7;
  }
  if (![v30 next])
  {

    return 0;
  }
  id v31 = [v30 row];
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v33 = 0;
  }
  uint64_t v35 = sub_10000515C(v33);
  if (v45)
  {
    swift_bridgeObjectRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v29 = v44;
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 138412290;
      swift_errorRetain();
      uint64_t v39 = _swift_stdlib_bridgeErrorToNSError();
      v47[0] = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v38 = v39;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Error decoding donation: %@", v29, 0xCu);
      sub_100008580(&qword_100092B40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

LABEL_7:
    swift_willThrow();

    return v29;
  }
  v40 = (void *)v35;
  swift_bridgeObjectRelease();
  id v41 = objc_allocWithZone((Class)BMSQLDatabase);
  uint64_t v29 = v40;
  id v42 = [v41 init];
  v43 = sub_1000091B0();

  if (v43)
  {

    dispatch thunk of FBKSInteraction.firstEvaluation.setter();
  }

  return v29;
}

uint64_t sub_100006040(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t CFBBiomeReader.fetchDonations(count:fromLatest:excludingEvaluationIDs:database:)(int a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 64) = a4;
  *(void *)(v5 + 72) = v4;
  *(void *)(v5 + 56) = a3;
  *(unsigned char *)(v5 + 112) = a2;
  *(_DWORD *)(v5 + 108) = a1;
  uint64_t v6 = type metadata accessor for FBKSInteraction.FeatureDomain();
  *(void *)(v5 + 80) = v6;
  *(void *)(v5 + 88) = *(void *)(v6 - 8);
  *(void *)(v5 + 96) = swift_task_alloc();
  return _swift_task_switch(sub_100006144, v4, 0);
}

uint64_t sub_100006144()
{
  uint64_t v84 = v0;
  uint64_t v1 = (void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = 4412225;
  if (*(unsigned char *)(v0 + 112)) {
    uint64_t v3 = 1129530692;
  }
  uint64_t v78 = v3;
  unint64_t v4 = 0xE300000000000000;
  if (*(unsigned char *)(v0 + 112)) {
    unint64_t v4 = 0xE400000000000000;
  }
  v79 = (void *)v4;
  if (v2)
  {
    int64_t v5 = *(void *)(v2 + 16);
    if (v5)
    {
      v77 = (void *)(v0 + 48);
      swift_bridgeObjectRetain();
      sub_1000085E4(0, v5, 0);
      uint64_t v6 = (void **)(v2 + 40);
      do
      {
        uint64_t v7 = (uint64_t)*(v6 - 1);
        uint64_t v8 = *v6;
        uint64_t v82 = 34;
        unint64_t v83 = 0xE100000000000000;
        swift_bridgeObjectRetain();
        v9._countAndFlagsBits = v7;
        v9._object = v8;
        String.append(_:)(v9);
        v10._countAndFlagsBits = 34;
        v10._object = (void *)0xE100000000000000;
        String.append(_:)(v10);
        swift_bridgeObjectRelease();
        unint64_t v12 = _swiftEmptyArrayStorage[2];
        unint64_t v11 = _swiftEmptyArrayStorage[3];
        if (v12 >= v11 >> 1) {
          sub_1000085E4(v11 > 1, v12 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v12 + 1;
        Swift::String v13 = &_swiftEmptyArrayStorage[2 * v12];
        v13[4] = 34;
        v13[5] = 0xE100000000000000;
        v6 += 2;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
      uint64_t v0 = v80;
      uint64_t v1 = v77;
    }
    *uint64_t v1 = _swiftEmptyArrayStorage;
    sub_100008580(&qword_100092B50);
    sub_100009708();
    uint64_t v14 = BidirectionalCollection<>.joined(separator:)();
    Swift::String v16 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = 0;
    Swift::String v16 = (void *)0xE000000000000000;
  }
  uint64_t v81 = v14;
  if (qword_1000929B0 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100006040(v17, (uint64_t)qword_1000929B8);
  swift_bridgeObjectRetain_n();
  Swift::String v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v82 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315394;
    *(void *)(v0 + 32) = sub_100007E60(0xD000000000000041, 0x800000010007C7E0, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 40) = sub_100007E60(v81, (unint64_t)v16, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s - Will filter out ids: %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  int v76 = *(_DWORD *)(v0 + 108);
  uint64_t v82 = 0;
  unint64_t v83 = 0xE000000000000000;
  _StringGuts.grow(_:)(2283);
  v21._countAndFlagsBits = 0xD00000000000015CLL;
  v21._object = (void *)0x800000010007C110;
  String.append(_:)(v21);
  v22._countAndFlagsBits = v78;
  v22._object = v79;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xD000000000000220;
  v23._object = (void *)0x800000010007C270;
  String.append(_:)(v23);
  v24._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0xD000000000000081;
  v25._object = (void *)0x800000010007C4A0;
  String.append(_:)(v25);
  v26._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0xD000000000000081;
  v27._object = (void *)0x800000010007C4A0;
  String.append(_:)(v27);
  v28._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 0xD00000000000004ALL;
  v29._object = (void *)0x800000010007C530;
  String.append(_:)(v29);
  v30._countAndFlagsBits = v81;
  v30._object = v16;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 0xD000000000000083;
  v31._object = (void *)0x800000010007C580;
  String.append(_:)(v31);
  v32._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0xD00000000000004CLL;
  v33._object = (void *)0x800000010007C610;
  String.append(_:)(v33);
  v34._countAndFlagsBits = v78;
  v34._object = v79;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 0x4D494C202020200ALL;
  v35._object = (void *)0xEB00000000205449;
  String.append(_:)(v35);
  *(_DWORD *)(v0 + 104) = v76;
  v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = 0xD000000000000036;
  v37._object = (void *)0x800000010007C660;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x7478655474786574;
  v38._object = (void *)0xE800000000000000;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0xD0000000000000BELL;
  v39._object = (void *)0x800000010007C6A0;
  String.append(_:)(v39);
  v40._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 0xD00000000000004BLL;
  v41._object = (void *)0x800000010007C760;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 0x67616D4974786574;
  v42._object = (void *)0xE900000000000065;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 0xD0000000000000BELL;
  v43._object = (void *)0x800000010007C6A0;
  String.append(_:)(v43);
  v44._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v45._countAndFlagsBits = 0xD00000000000004BLL;
  v45._object = (void *)0x800000010007C760;
  String.append(_:)(v45);
  v46._countAndFlagsBits = 0x67616D4974786574;
  v46._object = (void *)0xEE006567616D4965;
  String.append(_:)(v46);
  v47._countAndFlagsBits = 0xD0000000000000BELL;
  v47._object = (void *)0x800000010007C6A0;
  String.append(_:)(v47);
  v48._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  v49._countAndFlagsBits = 0xD000000000000027;
  v49._object = (void *)0x800000010007C7B0;
  String.append(_:)(v49);
  uint64_t v50 = (void *)BMSQLDatabase.execute(query:)();
  swift_bridgeObjectRelease();
  if ([v50 error])
  {
    swift_willThrow();

    swift_task_dealloc();
    v51 = *(uint64_t (**)(void))(v0 + 8);
    return v51();
  }
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    uint64_t v82 = swift_slowAlloc();
    *(_DWORD *)uint64_t v55 = 136315138;
    *(void *)(v0 + 24) = sub_100007E60(0xD000000000000041, 0x800000010007C7E0, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "%s - No error occurred", v55, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if ([v50 next])
  {
    v56 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 88) + 8);
    do
    {
      v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = swift_slowAlloc();
        uint64_t v82 = swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 136315138;
        *(void *)(v60 + 4) = sub_100007E60(0xD000000000000041, 0x800000010007C7E0, &v82);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "%s - Will parse row", (uint8_t *)v60, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      id v61 = [v50 row];
      if (v61)
      {
        v62 = v61;
        uint64_t v63 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v63 = 0;
      }
      v64 = (void *)sub_10000515C(v63);
      uint64_t v65 = *(void *)(v0 + 96);
      uint64_t v66 = *(void *)(v0 + 80);
      swift_bridgeObjectRelease();
      id v57 = v64;
      dispatch thunk of FBKSInteraction.featureDomain.getter();

      char v67 = sub_100004A24(v65, (uint64_t)&_swiftEmptySetSingleton);
      (*v56)(v65, v66);
      if ((v67 & 1) == 0)
      {
        v68 = Logger.logObject.getter();
        os_log_type_t v69 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v68, v69))
        {
          uint64_t v70 = swift_slowAlloc();
          uint64_t v82 = swift_slowAlloc();
          *(_DWORD *)uint64_t v70 = 136315138;
          *(void *)(v70 + 4) = sub_100007E60(0xD000000000000041, 0x800000010007C7E0, &v82);
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "%s - FD is allowed, appending", (uint8_t *)v70, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        id v57 = v57;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    while (([v50 next] & 1) != 0);
  }
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v71) {
      goto LABEL_41;
    }
LABEL_43:
    v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v72, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc();
      uint64_t v82 = swift_slowAlloc();
      *(_DWORD *)v74 = 136315138;
      *(void *)(v0 + 16) = sub_100007E60(0xD000000000000041, 0x800000010007C7E0, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "%s - query returned no results", v74, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    goto LABEL_46;
  }
  if (!*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_43;
  }
LABEL_41:

LABEL_46:
  swift_task_dealloc();
  v75 = *(uint64_t (**)(void *))(v0 + 8);
  return v75(_swiftEmptyArrayStorage);
}

void *CFBBiomeReader.fetchDonationIDs(count:fromLatest:excludingEvaluationIDs:database:)(int a1, char a2, uint64_t a3, uint64_t a4)
{
  return sub_1000097AC(a1, a2, a3, a4);
}

Swift::Int sub_100006F94()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100006FDC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

NSObject *CFBBiomeReader.fetchEvaluation(evaluationID:database:)()
{
  return sub_1000091B0();
}

uint64_t CFBBiomeReader.deinit()
{
  swift_defaultActor_destroy();
  return v0;
}

uint64_t CFBBiomeReader.__deallocating_deinit()
{
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t CFBBiomeDonator.unownedExecutor.getter()
{
  return v0;
}

id sub_100007094()
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = 0;
  id v2 = [v0 initWithJSONDictionary:isa error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

void *sub_10000717C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_100007190(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1000071C0(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1000071D4(void *result)
{
  *v1 &= *result;
  return result;
}

void sub_1000071E8(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1000071F0()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_10000723C()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_100007294()
{
  return Hasher._finalize()();
}

uint64_t sub_1000072FC(uint64_t a1, uint64_t a2)
{
  return sub_100007B7C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100007328(uint64_t a1, uint64_t a2)
{
  return sub_100007B7C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100007340(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1000073B8(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100007438@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

id sub_10000747C()
{
  return *v0;
}

uint64_t sub_100007484@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_10000748C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100007498()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_100007508()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100007518(uint64_t a1)
{
  uint64_t v2 = sub_10000A840(&qword_100092D88, type metadata accessor for BGSystemTaskSchedulerError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100007584(uint64_t a1)
{
  uint64_t v2 = sub_10000A840(&qword_100092D88, type metadata accessor for BGSystemTaskSchedulerError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000075F0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A840(&qword_100092D88, type metadata accessor for BGSystemTaskSchedulerError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100007680()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1000076B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A840(&qword_100092D88, type metadata accessor for BGSystemTaskSchedulerError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100007734()
{
  return Hasher._finalize()();
}

void *sub_100007794@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1000077A4(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000077B4(uint64_t a1)
{
  uint64_t v2 = sub_10000A840(&qword_100092E10, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_10000A840(&qword_100092E18, type metadata accessor for FileAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007870@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000078B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000078E4(uint64_t a1)
{
  uint64_t v2 = sub_10000A840(&qword_100092E20, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_10000A840(&qword_100092E28, type metadata accessor for URLResourceKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000079A0(uint64_t a1)
{
  uint64_t v2 = sub_10000A840(&qword_100092DE0, type metadata accessor for BGSystemTaskSchedulerError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100007A0C(uint64_t a1)
{
  uint64_t v2 = sub_10000A840(&qword_100092DE0, type metadata accessor for BGSystemTaskSchedulerError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100007A78(uint64_t a1)
{
  uint64_t v2 = sub_10000A840(&qword_100092D88, type metadata accessor for BGSystemTaskSchedulerError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100007AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000A840(&qword_100092D88, type metadata accessor for BGSystemTaskSchedulerError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_100007B68(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100007B7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100007BC0()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100007C14()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100007C88()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_100007D14(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_100007D24(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_100007D60(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_100007D98(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100007DC0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100007DE8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_100007E60(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_100007E60(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100007F34(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10000A7E0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10000A7E0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000A888((uint64_t)v12);
  return v7;
}

uint64_t sub_100007F34(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1000080F0(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1000080F0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100008188(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100008368(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100008368(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100008188(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100008300(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100008300(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100008580(&qword_100092C80);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100008368(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008580(&qword_100092C80);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  Swift::String v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char **sub_1000084B8(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

void sub_1000084C8(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  int64_t v8 = *a2;
  if (*a2)
  {
    *int64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t sub_100008580(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000085C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100008624(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1000085E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100008864(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100008604(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000089D0(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_100008624(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    Swift::String v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100008580(&qword_100092C98);
  uint64_t v10 = *(void *)(type metadata accessor for FBKSInteraction.AnnotatedContent() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  Swift::String v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for FBKSInteraction.AnnotatedContent() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  Swift::String v18 = (char *)v13 + v17;
  os_log_type_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  Swift::String v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100008864(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008580(&qword_100092C68);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  Swift::String v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000089D0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008580(&qword_100092C58);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_100008580(&qword_100092C60);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100008B5C(uint64_t a1)
{
  if (!a1)
  {
    long long v10 = 0u;
    long long v11 = 0u;
LABEL_10:
    sub_10000A738((uint64_t)&v10, (uint64_t *)&unk_100093910);
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v2 = sub_100025B40((uint64_t)v9), (v3 & 1) != 0))
  {
    sub_10000A7E0(*(void *)(a1 + 56) + 32 * v2, (uint64_t)&v10);
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
  }
  sub_10000A6E4((uint64_t)v9);
  if (!*((void *)&v11 + 1)) {
    goto LABEL_10;
  }
  sub_100008580(&qword_100092C50);
  if (swift_dynamicCast()) {
    return v9[0];
  }
LABEL_11:
  if (qword_1000929B0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100006040(v5, (uint64_t)qword_1000929B8);
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "dictionary is nil or not the right type, will skip", v8, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t sub_100008D00(uint64_t a1)
{
  uint64_t v1 = sub_100008B5C(a1);
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v15 = v1;
    *(void *)&v11[0] = 0x7461446567616D69;
    *((void *)&v11[0] + 1) = 0xE900000000000061;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (*(void *)(v2 + 16) && (unint64_t v3 = sub_100025B40((uint64_t)v12), (v4 & 1) != 0))
    {
      sub_10000A7E0(*(void *)(v2 + 56) + 32 * v3, (uint64_t)&v13);
    }
    else
    {
      long long v13 = 0u;
      long long v14 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_10000A6E4((uint64_t)v12);
    if (*((void *)&v14 + 1))
    {
      if (swift_dynamicCast())
      {
        *(void *)&long long v13 = 0x7461446567616D69;
        *((void *)&v13 + 1) = 0xE900000000000061;
        AnyHashable.init<A>(_:)();
        id v5 = objc_allocWithZone((Class)NSData);
        NSString v6 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v7 = [v5 initWithBase64EncodedString:v6 options:0];

        if (v7)
        {
          *((void *)&v14 + 1) = sub_10000A9DC();
          *(void *)&long long v13 = v7;
          sub_10000AA1C(&v13, v11);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          sub_100027C50(v11, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRelease();
          sub_10000A6E4((uint64_t)v12);
        }
        else
        {
          sub_10007025C((uint64_t)v12, v11);
          sub_10000A6E4((uint64_t)v12);
          sub_10000A738((uint64_t)v11, (uint64_t *)&unk_100093910);
          return v15;
        }
        return v2;
      }
    }
    else
    {
      sub_10000A738((uint64_t)&v13, (uint64_t *)&unk_100093910);
    }
    swift_bridgeObjectRelease();
    sub_10000A690();
    swift_allocError();
    *uint64_t v9 = 7;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_100008F3C(uint64_t a1)
{
  if (a1)
  {
    strcpy((char *)v12, "evaluationUuid");
    HIBYTE(v12[1]) = -18;
    AnyHashable.init<A>(_:)();
    if (*(void *)(a1 + 16) && (unint64_t v2 = sub_100025B40((uint64_t)v13), (v3 & 1) != 0))
    {
      sub_10000A7E0(*(void *)(a1 + 56) + 32 * v2, (uint64_t)&v14);
    }
    else
    {
      long long v14 = 0u;
      long long v15 = 0u;
    }
    sub_10000A6E4((uint64_t)v13);
    if (*((void *)&v15 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v5 = v12[0];
        uint64_t v4 = v12[1];
        strcpy((char *)v12, "userResponse");
        BYTE5(v12[1]) = 0;
        HIWORD(v12[1]) = -5120;
        AnyHashable.init<A>(_:)();
        if (*(void *)(a1 + 16) && (unint64_t v6 = sub_100025B40((uint64_t)v13), (v7 & 1) != 0))
        {
          sub_10000A7E0(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v14);
        }
        else
        {
          long long v14 = 0u;
          long long v15 = 0u;
        }
        sub_10000A6E4((uint64_t)v13);
        if (*((void *)&v15 + 1))
        {
          if (swift_dynamicCast())
          {
            type metadata accessor for FBKSEvaluation();
            return sub_10002A048(v5, v4, v12[0]);
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_10000A738((uint64_t)&v14, (uint64_t *)&unk_100093910);
        }
        sub_10000A92C();
        swift_allocError();
        char v10 = 2;
        goto LABEL_21;
      }
    }
    else
    {
      sub_10000A738((uint64_t)&v14, (uint64_t *)&unk_100093910);
    }
    sub_10000A92C();
    swift_allocError();
    char v10 = 1;
LABEL_21:
    *uint64_t v9 = v10;
    return swift_willThrow();
  }
  sub_10000A92C();
  swift_allocError();
  *uint64_t v8 = 0;
  return swift_willThrow();
}

NSObject *sub_1000091B0()
{
  _StringGuts.grow(_:)(57);
  v1._countAndFlagsBits = 0x2A205443454C4553;
  v1._object = (void *)0xEF22204D4F524620;
  String.append(_:)(v1);
  v2._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._object = (void *)0x800000010007CFD0;
  v3._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v3);
  uint64_t v31 = UUID.uuidString.getter();
  uint64_t v32 = v4;
  unint64_t v30 = sub_10000A8D8();
  uint64_t v5 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  char v7 = v6;
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x2054494D494C2022;
  v9._object = (void *)0xE900000000000031;
  String.append(_:)(v9);
  char v10 = (void *)BMSQLDatabase.execute(query:)();
  swift_bridgeObjectRelease();
  id v11 = [v10 error:v30, v30, v30, 0, 0xE000000000000000, 45, 0xE100000000000000, v31, v32, 0, 0xE000000000000000];
  if (v11)
  {
    uint64_t v12 = v11;
    if (qword_1000929B0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100006040(v13, (uint64_t)qword_1000929B8);
    id v14 = v12;
    long long v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      Swift::String v18 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v17 = 138412290;
      id v19 = v14;
      uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Swift::String v18 = v33;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Error fetching evaluation: %@", v17, 0xCu);
      sub_100008580(&qword_100092B40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  if (![v10 next])
  {

    return 0;
  }
  id v20 = [v10 row];
  if (v20)
  {
    Swift::String v21 = v20;
    uint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v25 = sub_100008F3C(v22);
  if (v0)
  {
    swift_bridgeObjectRelease();
    if (qword_1000929B0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100006040(v26, (uint64_t)qword_1000929B8);
    swift_errorRetain();
    swift_errorRetain();
    Swift::String v23 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v27))
    {
      Swift::String v28 = (uint8_t *)swift_slowAlloc();
      Swift::String v29 = (void *)swift_slowAlloc();
      *(_DWORD *)Swift::String v28 = 138412290;
      swift_errorRetain();
      uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Swift::String v29 = v34;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v27, "Error decoding evaluation: %@", v28, 0xCu);
      sub_100008580(&qword_100092B40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
  }
  else
  {
    Swift::String v23 = v25;

    swift_bridgeObjectRelease();
  }
  return v23;
}

unint64_t sub_100009708()
{
  unint64_t result = qword_100092B58;
  if (!qword_100092B58)
  {
    sub_100009764(&qword_100092B50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100092B58);
  }
  return result;
}

uint64_t sub_100009764(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void *sub_1000097AC(int a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  sub_100008580((uint64_t *)&unk_100094200);
  ((void (*)(void))__chkstk_darwin)();
  v103 = (char *)v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for UUID();
  uint64_t v100 = *(void *)(v104 - 8);
  uint64_t v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  v99 = (char *)v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v98 = (char *)v94 - v13;
  if (a2) {
    uint64_t v14 = 1129530692;
  }
  else {
    uint64_t v14 = 4412225;
  }
  unint64_t v15 = 0xE300000000000000;
  if (a2) {
    unint64_t v15 = 0xE400000000000000;
  }
  v106 = (char *)v15;
  *(void *)&long long v107 = a4;
  LODWORD(v113) = a1;
  *(void *)&long long v105 = v14;
  if (a3)
  {
    int64_t v16 = *(void *)(a3 + 16);
    unint64_t v17 = &_swiftEmptyArrayStorage;
    if (v16)
    {
      uint64_t v102 = v4;
      *(void *)&long long v111 = &_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1000085E4(0, v16, 0);
      unint64_t v17 = (void *)v111;
      v101 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))a3;
      Swift::String v18 = (void **)(a3 + 40);
      do
      {
        uint64_t v19 = (uint64_t)*(v18 - 1);
        id v20 = *v18;
        uint64_t v109 = 34;
        unint64_t v110 = 0xE100000000000000;
        swift_bridgeObjectRetain();
        v21._countAndFlagsBits = v19;
        v21._object = v20;
        String.append(_:)(v21);
        v22._countAndFlagsBits = 34;
        v22._object = (void *)0xE100000000000000;
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        uint64_t v24 = v109;
        unint64_t v23 = v110;
        *(void *)&long long v111 = v17;
        unint64_t v26 = v17[2];
        unint64_t v25 = v17[3];
        if (v26 >= v25 >> 1)
        {
          sub_1000085E4(v25 > 1, v26 + 1, 1);
          unint64_t v17 = (void *)v111;
        }
        v18 += 2;
        v17[2] = v26 + 1;
        os_log_type_t v27 = (char *)&v17[2 * v26];
        *((void *)v27 + 4) = v24;
        *((void *)v27 + 5) = v23;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
      uint64_t v5 = v102;
    }
    uint64_t v109 = (uint64_t)v17;
    sub_100008580(&qword_100092B50);
    sub_100009708();
    uint64_t v28 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = 0;
    unint64_t v30 = (void *)0xE000000000000000;
  }
  uint64_t v31 = v28;
  if (qword_1000929B0 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = sub_100006040(v32, (uint64_t)qword_1000929B8);
  swift_bridgeObjectRetain_n();
  uint64_t v102 = v33;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  v101 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v31;
  if (v36)
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v109 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315394;
    *(void *)&long long v111 = sub_100007E60(0xD000000000000043, 0x800000010007CDA0, &v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&long long v111 = sub_100007E60(v31, (unint64_t)v30, &v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s - Will filter out ids: %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v109 = 0;
  unint64_t v110 = 0xE000000000000000;
  _StringGuts.grow(_:)(1341);
  v38._countAndFlagsBits = 0xD00000000000011ALL;
  v38._object = (void *)0x800000010007C8B0;
  String.append(_:)(v38);
  uint64_t v39 = v105;
  v40._countAndFlagsBits = v105;
  Swift::String v41 = v106;
  v40._object = v106;
  String.append(_:)(v40);
  v42._countAndFlagsBits = 0xD0000000000001ECLL;
  v42._object = (void *)0x800000010007C9D0;
  String.append(_:)(v42);
  v43._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 0xD000000000000071;
  v44._object = (void *)0x800000010007CBC0;
  String.append(_:)(v44);
  v45._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._countAndFlagsBits = 0xD000000000000071;
  v46._object = (void *)0x800000010007CBC0;
  String.append(_:)(v46);
  v47._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._countAndFlagsBits = 0xD000000000000055;
  v48._object = (void *)0x800000010007CC40;
  String.append(_:)(v48);
  *(void *)&long long v111 = 27;
  v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  object = v49._object;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v51._countAndFlagsBits = 0xD000000000000038;
  v51._object = (void *)0x800000010007CCA0;
  String.append(_:)(v51);
  v52._countAndFlagsBits = (uint64_t)v101;
  v52._object = v30;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = 0xD000000000000073;
  v53._object = (void *)0x800000010007CCE0;
  String.append(_:)(v53);
  v54._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._countAndFlagsBits = 0xD00000000000003CLL;
  v55._object = (void *)0x800000010007CD60;
  String.append(_:)(v55);
  v56._countAndFlagsBits = v39;
  v56._object = v41;
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v57._countAndFlagsBits = 0x2054494D494C0ALL;
  v57._object = (void *)0xE700000000000000;
  String.append(_:)(v57);
  LODWORD(v111) = v113;
  v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  os_log_type_t v59 = (void *)BMSQLDatabase.execute(query:)();
  swift_bridgeObjectRelease();
  if ([v59 error])
  {
    swift_willThrow();

    return object;
  }
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc();
    uint64_t v109 = swift_slowAlloc();
    *(_DWORD *)v62 = 136315138;
    *(void *)&long long v111 = sub_100007E60(0xD000000000000043, 0x800000010007CDA0, &v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "%s - No error occurred", v62, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if ([v59 next])
  {
    v101 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
    v96 = (void *)(v100 + 32);
    v95 = (void (**)(char *, char *, uint64_t))(v100 + 16);
    v94[1] = v100 + 8;
    object = &_swiftEmptyArrayStorage;
    *(void *)&long long v63 = 136315138;
    long long v107 = v63;
    unint64_t v113 = 0x800000010007CDA0;
    v106 = (char *)&type metadata for Any + 8;
    *(void *)&long long v63 = 138412290;
    long long v105 = v63;
LABEL_26:
    v97 = object;
    while (1)
    {
      v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = swift_slowAlloc();
        uint64_t v109 = swift_slowAlloc();
        *(_DWORD *)uint64_t v66 = v107;
        *(void *)(v66 + 4) = sub_100007E60(0xD000000000000043, v113, &v109);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "%s - Will parse row", (uint8_t *)v66, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      id v67 = [v59 row];
      if (v67)
      {
        v68 = v67;
        uint64_t v69 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        strcpy(v108, "evaluationUuid");
        v108[15] = -18;
        AnyHashable.init<A>(_:)();
        if (*(void *)(v69 + 16) && (unint64_t v70 = sub_100025B40((uint64_t)&v109), (v71 & 1) != 0))
        {
          sub_10000A7E0(*(void *)(v69 + 56) + 32 * v70, (uint64_t)&v111);
        }
        else
        {
          long long v111 = 0u;
          long long v112 = 0u;
        }
        swift_bridgeObjectRelease();
        sub_10000A6E4((uint64_t)&v109);
        if (!*((void *)&v112 + 1))
        {
          sub_10000A738((uint64_t)&v111, (uint64_t *)&unk_100093910);
LABEL_42:
          char v75 = 4;
          goto LABEL_43;
        }
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_42;
        }
        uint64_t v72 = v5;
        uint64_t v73 = (uint64_t)v103;
        UUID.init(uuidString:)();
        uint64_t v74 = v73;
        swift_bridgeObjectRelease();
        if ((*v101)(v73, 1, v104) != 1)
        {
          uint64_t v82 = v98;
          uint64_t v83 = v74;
          uint64_t v84 = v104;
          v94[0] = *v96;
          ((void (*)(char *, uint64_t, uint64_t))v94[0])(v98, v83, v104);
          (*v95)(v99, v82, v84);
          unint64_t v85 = (unint64_t)v97;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v85 = sub_100077CF0(0, *(void *)(v85 + 16) + 1, 1, v85);
          }
          uint64_t v5 = v72;
          unint64_t v87 = *(void *)(v85 + 16);
          unint64_t v86 = *(void *)(v85 + 24);
          object = (void *)v85;
          if (v87 >= v86 >> 1) {
            object = (void *)sub_100077CF0(v86 > 1, v87 + 1, 1, v85);
          }
          object[2] = v87 + 1;
          uint64_t v88 = v100;
          uint64_t v89 = v104;
          ((void (*)(char *, char *, uint64_t))v94[0])((char *)object+ ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))+ *(void *)(v88 + 72) * v87, v99, v104);
          (*(void (**)(char *, uint64_t))(v88 + 8))(v98, v89);
          if ([v59 next]) {
            goto LABEL_26;
          }
          goto LABEL_52;
        }
        sub_10000A738(v73, (uint64_t *)&unk_100094200);
        char v75 = 5;
      }
      else
      {
        char v75 = 0;
      }
LABEL_43:
      sub_10000A690();
      swift_allocError();
      *int v76 = v75;
      swift_willThrow();
      swift_errorRetain();
      swift_errorRetain();
      v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = swift_slowAlloc();
        uint64_t v80 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v79 = v105;
        swift_errorRetain();
        uint64_t v81 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v79 + 4) = v81;
        *uint64_t v80 = v81;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "Error parsing donation from row: %@", (uint8_t *)v79, 0xCu);
        sub_100008580(&qword_100092B40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v5 = 0;
      if (([v59 next] & 1) == 0)
      {
        object = v97;
        if (v97[2]) {
          goto LABEL_53;
        }
        goto LABEL_55;
      }
    }
  }
  object = &_swiftEmptyArrayStorage;
LABEL_52:
  if (object[2])
  {
LABEL_53:
  }
  else
  {
LABEL_55:
    v97 = object;
    v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v90, v91))
    {
      v92 = (uint8_t *)swift_slowAlloc();
      uint64_t v109 = swift_slowAlloc();
      *(_DWORD *)v92 = 136315138;
      *(void *)&long long v111 = sub_100007E60(0xD000000000000043, 0x800000010007CDA0, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "%s - query returned no results", v92, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return v97;
  }
  return object;
}

uint64_t type metadata accessor for CFBBiomeReader()
{
  return self;
}

unint64_t sub_10000A690()
{
  unint64_t result = qword_100092C48;
  if (!qword_100092C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100092C48);
  }
  return result;
}

uint64_t sub_10000A6E4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10000A738(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100008580(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for CFBBiomeReader.Metadata()
{
  uint64_t result = qword_100092D00;
  if (!qword_100092D00) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10000A7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000A840(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A888(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_10000A8D8()
{
  unint64_t result = qword_100092C88;
  if (!qword_100092C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100092C88);
  }
  return result;
}

unint64_t sub_10000A92C()
{
  unint64_t result = qword_100092C90;
  if (!qword_100092C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100092C90);
  }
  return result;
}

uint64_t sub_10000A980(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CFBBiomeReader.Metadata();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10000A9DC()
{
  unint64_t result = qword_100092CA0;
  if (!qword_100092CA0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100092CA0);
  }
  return result;
}

_OWORD *sub_10000AA1C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t *sub_10000AA2C(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unsigned char *initializeBufferWithCopyOfBuffer for CFBBiomeReader.FetchEvaluationError(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CFBBiomeReader.FetchEvaluationError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CFBBiomeReader.FetchEvaluationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000ABFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CFBBiomeReader.FetchEvaluationError()
{
  return &type metadata for CFBBiomeReader.FetchEvaluationError;
}

uint64_t *sub_10000AC38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    Swift::String v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10000AD40(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

void *sub_10000ADCC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  Swift::String v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10000AE84(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_10000AF44(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_10000AFDC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10000B084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000B098);
}

uint64_t sub_10000B098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10000B148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000B15C);
}

uint64_t sub_10000B15C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10000B204()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CFBBiomeReader.FetchDonationsError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CFBBiomeReader.FetchDonationsError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000B404);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

uint64_t sub_10000B42C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10000B434(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CFBBiomeReader.FetchDonationsError()
{
  return &type metadata for CFBBiomeReader.FetchDonationsError;
}

void type metadata accessor for UNAuthorizationStatus(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for Code(uint64_t a1)
{
}

void type metadata accessor for BGSystemTaskSchedulerError(uint64_t a1)
{
}

void sub_10000B4C4(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10000B50C()
{
  return sub_10000A840(&qword_100092D70, type metadata accessor for BGSystemTaskSchedulerError);
}

uint64_t sub_10000B554()
{
  return sub_10000A840(&qword_100092D78, type metadata accessor for BGSystemTaskSchedulerError);
}

uint64_t sub_10000B59C()
{
  return sub_10000A840(&qword_100092D80, type metadata accessor for Code);
}

uint64_t sub_10000B5E4()
{
  return sub_10000A840(&qword_100092D88, type metadata accessor for BGSystemTaskSchedulerError);
}

uint64_t sub_10000B62C()
{
  return sub_10000A840(&qword_100092D90, type metadata accessor for URLResourceKey);
}

uint64_t sub_10000B674()
{
  return sub_10000A840(&qword_100092D98, type metadata accessor for URLResourceKey);
}

uint64_t sub_10000B6BC()
{
  return sub_10000A840(&qword_100092DA0, type metadata accessor for URLResourceKey);
}

uint64_t sub_10000B704()
{
  return sub_10000A840(&qword_100092DA8, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10000B74C()
{
  return sub_10000A840(&qword_100092DB0, type metadata accessor for FileAttributeKey);
}

unint64_t sub_10000B798()
{
  unint64_t result = qword_100092DB8;
  if (!qword_100092DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100092DB8);
  }
  return result;
}

unint64_t sub_10000B7F0()
{
  unint64_t result = qword_100092DC0;
  if (!qword_100092DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100092DC0);
  }
  return result;
}

uint64_t sub_10000B844()
{
  return sub_10000A840(&qword_100092DC8, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10000B88C()
{
  return sub_10000A840((unint64_t *)&qword_100092DD0, type metadata accessor for CFString);
}

uint64_t sub_10000B8D4()
{
  return sub_10000A840(&qword_100092DD8, type metadata accessor for CFString);
}

uint64_t sub_10000B91C()
{
  return sub_10000A840(&qword_100092DE0, type metadata accessor for BGSystemTaskSchedulerError);
}

uint64_t sub_10000B964()
{
  return sub_10000A840(&qword_100092DE8, type metadata accessor for BGSystemTaskSchedulerError);
}

uint64_t sub_10000B9AC()
{
  return sub_10000A840(&qword_100092DF0, type metadata accessor for BGSystemTaskSchedulerError);
}

uint64_t sub_10000B9F4()
{
  return sub_10000A840(&qword_100092DF8, type metadata accessor for Code);
}

uint64_t sub_10000BA3C()
{
  return sub_10000A840(&qword_100092E00, type metadata accessor for Code);
}

unint64_t sub_10000BA88()
{
  unint64_t result = qword_100092E08;
  if (!qword_100092E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100092E08);
  }
  return result;
}

void sub_10000BB10(void *a1)
{
  uint64_t v2 = v1;
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  [a1 encodeObject:v4 forKey:v5];

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  NSString v7 = String._bridgeToObjectiveC()();
  [a1 encodeObject:isa forKey:v7];

  sub_10000C524(0, (unint64_t *)&unk_100092ED0);
  Class v8 = NSNumber.init(integerLiteral:)(*(void *)(v2 + OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_feedbackId)).super.super.isa;
  NSString v9 = String._bridgeToObjectiveC()();
  [a1 encodeObject:v8 forKey:v9];

  NSString v10 = String._bridgeToObjectiveC()();
  NSString v11 = String._bridgeToObjectiveC()();
  [a1 encodeObject:v10 forKey:v11];
}

id sub_10000BD20(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100008580((uint64_t *)&unk_100093950);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  NSString v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  sub_10000C524(0, &qword_100092EE0);
  uint64_t v14 = v2;
  uint64_t v15 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v15)
  {

LABEL_13:
    type metadata accessor for FeedbackSubmission();
    swift_deallocPartialClassInstance();
    return 0;
  }
  int64_t v16 = (void *)v15;
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  sub_10000C524(0, &qword_100092EE8);
  uint64_t v19 = NSCoder.decodeObject<A>(of:forKey:)();
  uint64_t v37 = v18;
  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_9;
  }
  id v20 = (void *)v19;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::String v21 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v21(v6, v11, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_9:

    swift_bridgeObjectRelease();
    sub_10000C560((uint64_t)v6);
    goto LABEL_13;
  }
  v21(v13, v6, v7);
  sub_10000C524(0, (unint64_t *)&unk_100092ED0);
  uint64_t v22 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v22)
  {

LABEL_12:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    goto LABEL_13;
  }
  unint64_t v23 = (void *)v22;
  uint64_t v24 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v24)
  {

    goto LABEL_12;
  }
  unint64_t v25 = (void *)v24;
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  Swift::String v29 = (uint64_t *)&v14[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_formIdentifier];
  uint64_t v30 = v37;
  *Swift::String v29 = v36;
  v29[1] = v30;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(&v14[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_date], v13, v7);
  id v31 = [v23 integerValue];

  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  *(void *)&v14[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_feedbackId] = v31;
  uint64_t v32 = (uint64_t *)&v14[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_build];
  *uint64_t v32 = v26;
  v32[1] = v28;

  uint64_t v33 = (objc_class *)type metadata accessor for FeedbackSubmission();
  v38.receiver = v14;
  v38.super_class = v33;
  id v34 = [super init];

  return v34;
}

id sub_10000C1D8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FeedbackSubmission();
  return [super dealloc];
}

uint64_t sub_10000C2A8()
{
  return type metadata accessor for FeedbackSubmission();
}

uint64_t type metadata accessor for FeedbackSubmission()
{
  uint64_t result = qword_100092EC0;
  if (!qword_100092EC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10000C2FC()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_10000C3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (objc_class *)type metadata accessor for FeedbackSubmission();
  NSString v11 = (char *)objc_allocWithZone(v10);
  uint64_t v12 = &v11[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_formIdentifier];
  *(void *)uint64_t v12 = a1;
  *((void *)v12 + 1) = a2;
  uint64_t v13 = v11;
  Date.init()();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v13[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_date], v9, v6);
  *(void *)&v13[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_feedbackId] = a3;
  id v14 = [self swVers];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  uint64_t v18 = (uint64_t *)&v13[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_build];
  *uint64_t v18 = v15;
  v18[1] = v17;

  v20.receiver = v13;
  v20.super_class = v10;
  return [super init];
}

uint64_t sub_10000C524(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10000C560(uint64_t a1)
{
  uint64_t v2 = sub_100008580((uint64_t *)&unk_100093950);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000C5C0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_100092F50);
  sub_100006040(v0, (uint64_t)qword_100092F50);
  static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10000C62C()
{
  return 1;
}

Swift::Int sub_10000C634()
{
  return Hasher._finalize()();
}

void sub_10000C678()
{
}

Swift::Int sub_10000C6A0()
{
  return Hasher._finalize()();
}

uint64_t sub_10000C6E0()
{
  static Strings.Daemon.bundleIdentifier.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  char has_internal_diagnostics = os_variant_has_internal_diagnostics();
  uint64_t result = swift_release();
  byte_100092F68 = has_internal_diagnostics;
  return result;
}

uint64_t sub_10000C730()
{
  if (qword_1000929D8 != -1) {
    swift_once();
  }
  if (byte_100092F68 == 1) {
    uint64_t result = static Strings.feedbackInternalBundleIdentifier.getter();
  }
  else {
    uint64_t result = static Strings.fbaBundleIdentifier.getter();
  }
  qword_100092F70 = result;
  *(void *)algn_100092F78 = v1;
  return result;
}

uint64_t sub_10000C79C()
{
  if (qword_1000929D8 != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v0 = 168;
  if (byte_100092F68) {
    uint64_t v0 = 24;
  }
  qword_100092F80 = v0;
  return result;
}

id sub_10000C800()
{
  type metadata accessor for CFBNotificationController();
  swift_allocObject();
  id result = sub_10000F648();
  qword_100096498 = (uint64_t)result;
  return result;
}

id sub_10000C840()
{
  return sub_10000F648();
}

uint64_t sub_10000C874()
{
  v1[25] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[26] = v2;
  v1[27] = *(void *)(v2 - 8);
  v1[28] = swift_task_alloc();
  v1[29] = sub_100008580(&qword_100092FE8);
  v1[30] = swift_task_alloc();
  sub_100008580((uint64_t *)&unk_100093950);
  v1[31] = swift_task_alloc();
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  sub_100008580(&qword_1000938B0);
  v1[34] = swift_task_alloc();
  return _swift_task_switch(sub_10000C9E4, v0, 0);
}

uint64_t sub_10000C9E4()
{
  uint64_t v8 = v0;
  if (qword_1000929D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[35] = sub_100006040(v1, (uint64_t)qword_100092F50);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[24] = sub_100007E60(0xD000000000000012, 0x800000010007D260, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[36] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10000CBD0;
  return sub_10000E63C();
}

uint64_t sub_10000CBD0(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 200);
  *(unsigned char *)(*(void *)v1 + 368) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10000CCE8, v2, 0);
}

uint64_t sub_10000CCE8()
{
  if ((*(unsigned char *)(v0 + 368) & 1) == 0)
  {
    sub_10000FB40();
    swift_allocError();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_5;
  }
  if (static Task<>.isCancelled.getter())
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
LABEL_5:
    return v1();
  }
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 200);
  *(void *)(v0 + 296) = *(void *)(v4 + OBJC_IVAR____TtC9feedbackd25CFBNotificationController_notificationCenter);
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 304) = v5;
  *(unsigned char *)(v5 + 16) = 0;
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
  uint64_t v7 = sub_10000FE5C(&qword_100093000, (void (*)(uint64_t))type metadata accessor for CFBNotificationController);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v4;
  v8[3] = v7;
  v8[4] = v4;
  v8[5] = v5;
  swift_retain_n();
  swift_retain();
  sub_10000E4B4(v3, (uint64_t)&unk_100093008, (uint64_t)v8);
  swift_release();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    NSString v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Will wait on notification permission check", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *(void *)(v0 + 304);
  swift_beginAccess();
  if (*(unsigned char *)(v12 + 16))
  {
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Did finish waiting on notification permission check", v15, 2u);
      swift_slowDealloc();
    }

    id v16 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
    *(void *)(v0 + 328) = v16;
    v17._countAndFlagsBits = 0xD000000000000016;
    v17._object = (void *)0x800000010007D1C0;
    FBKSLocalizedString(key:)(v17);
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 setTitle:v18];

    v19._countAndFlagsBits = 0xD000000000000018;
    v19._object = (void *)0x800000010007D1E0;
    FBKSLocalizedString(key:)(v19);
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 setBody:v20];

    sub_1000235F0((uint64_t)_swiftEmptyArrayStorage);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v16 setUserInfo:isa];

    [v16 setInterruptionLevel:1];
    static Strings.Notification.cfbCategoryIdentifier.getter();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 setCategoryIdentifier:v22];

    id v23 = v16;
    NSString v24 = String._bridgeToObjectiveC()();
    *(void *)(v0 + 336) = [self requestWithIdentifier:v24 content:v23 trigger:0];

    unint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 344) = v25;
    *unint64_t v25 = v0;
    v25[1] = sub_10000D894;
    return sub_10000E63C();
  }
  else
  {
    return _swift_task_switch(sub_10000D280, 0, 0);
  }
}

uint64_t sub_10000D280()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 312) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000D318;
  return static Task<>.sleep(nanoseconds:)(1000000000);
}

uint64_t sub_10000D318()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 320) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 200);
  if (v0) {
    uint64_t v4 = sub_10000D7E4;
  }
  else {
    uint64_t v4 = sub_10000D444;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10000D444()
{
  if (static Task<>.isCancelled.getter())
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = (uint64_t (*)(void))v0[1];
    return v1();
  }
  else
  {
    uint64_t v3 = v0[38];
    swift_beginAccess();
    if (*(unsigned char *)(v3 + 16))
    {
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Did finish waiting on notification permission check", v6, 2u);
        swift_slowDealloc();
      }

      id v7 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
      v0[41] = v7;
      v8._countAndFlagsBits = 0xD000000000000016;
      v8._object = (void *)0x800000010007D1C0;
      FBKSLocalizedString(key:)(v8);
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v7 setTitle:v9];

      v10._countAndFlagsBits = 0xD000000000000018;
      v10._object = (void *)0x800000010007D1E0;
      FBKSLocalizedString(key:)(v10);
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v7 setBody:v11];

      sub_1000235F0((uint64_t)_swiftEmptyArrayStorage);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v7 setUserInfo:isa];

      [v7 setInterruptionLevel:1];
      static Strings.Notification.cfbCategoryIdentifier.getter();
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v7 setCategoryIdentifier:v13];

      id v14 = v7;
      NSString v15 = String._bridgeToObjectiveC()();
      v0[42] = [self requestWithIdentifier:v15 content:v14 trigger:0];

      id v16 = (void *)swift_task_alloc();
      v0[43] = v16;
      void *v16 = v0;
      v16[1] = sub_10000D894;
      return sub_10000E63C();
    }
    else
    {
      return _swift_task_switch(sub_10000D280, 0, 0);
    }
  }
}

uint64_t sub_10000D7E4()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10000D894(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 200);
  *(unsigned char *)(*(void *)v1 + 369) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10000D9AC, v2, 0);
}

uint64_t sub_10000D9AC()
{
  if ((*(unsigned char *)(v0 + 369) & 1) == 0)
  {
    uint64_t v4 = *(void **)(v0 + 328);
    uint64_t v3 = *(void **)(v0 + 336);
    sub_10000FDA0();
    swift_allocError();
    swift_willThrow();

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_5;
  }
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v1 = *(void **)(v0 + 328);

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
LABEL_5:
    return v2();
  }
  uint64_t v6 = *(void *)(v0 + 336);
  id v7 = *(void **)(v0 + 296);
  uint64_t v8 = *(void *)(v0 + 264);
  uint64_t v9 = *(void *)(v0 + 200);
  uint64_t v10 = OBJC_IVAR____TtC9feedbackd25CFBNotificationController_lastNotificationDate;
  *(void *)(v0 + 352) = OBJC_IVAR____TtC9feedbackd25CFBNotificationController_lastNotificationDate;
  uint64_t v11 = v9 + v10;
  swift_beginAccess();
  sub_10000FAD8(v11, v8);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_10000DC20;
  uint64_t v12 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_100031AB4;
  *(void *)(v0 + 104) = &unk_10008E000;
  *(void *)(v0 + 112) = v12;
  [v7 addNotificationRequest:v6 withCompletionHandler:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_10000DC20()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 360) = v2;
  uint64_t v3 = *(void *)(v1 + 200);
  if (v2) {
    uint64_t v4 = sub_10000E160;
  }
  else {
    uint64_t v4 = sub_10000DD40;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10000DD40()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[27];
  uint64_t v5 = v2 + *(int *)(v0[29] + 48);
  sub_10000FAD8(v0[25] + v0[44], v2);
  sub_10000FAD8(v1, v5);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v6(v2, 1, v3) == 1)
  {
    if (v6(v5, 1, v0[26]) == 1)
    {
      sub_10000A738(v0[30], (uint64_t *)&unk_100093950);
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v7 = v0[26];
    sub_10000FAD8(v0[30], v0[32]);
    unsigned int v8 = v6(v5, 1, v7);
    uint64_t v9 = v0[32];
    if (v8 != 1)
    {
      uint64_t v10 = v0[30];
      uint64_t v12 = v0[27];
      uint64_t v11 = v0[28];
      uint64_t v13 = v0[26];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v11, v5, v13);
      sub_10000FE5C(&qword_100093018, (void (*)(uint64_t))&type metadata accessor for Date);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      NSString v15 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v15(v11, v13);
      v15(v9, v13);
      sub_10000A738(v10, (uint64_t *)&unk_100093950);
      if (v14) {
        goto LABEL_11;
      }
      goto LABEL_8;
    }
    (*(void (**)(void, void))(v0[27] + 8))(v0[32], v0[26]);
  }
  sub_10000A738(v0[30], &qword_100092FE8);
LABEL_8:
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v16, v17))
  {
    NSString v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Race condition detected in notification posts count", v18, 2u);
    swift_slowDealloc();
  }

LABEL_11:
  Swift::String v19 = (void *)v0[42];
  id v31 = (void *)v0[41];
  uint64_t v32 = v0[33];
  uint64_t v20 = v0[31];
  uint64_t v21 = v0[27];
  uint64_t v22 = v0[28];
  uint64_t v23 = v0[26];
  uint64_t v24 = v0[25] + v0[44];
  static Date.now.getter();
  id v25 = [self standardUserDefaults];
  Date.timeIntervalSince1970.getter();
  double v27 = v26;
  NSString v28 = String._bridgeToObjectiveC()();
  [v25 setDouble:v28 forKey:v27];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v22, v23);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v20, 0, 1, v23);
  swift_beginAccess();
  sub_10000FDF4(v20, v24);
  swift_endAccess();

  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
  sub_10000A738(v32, (uint64_t *)&unk_100093950);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v29 = (uint64_t (*)(void))v0[1];
  return v29();
}

uint64_t sub_10000E160()
{
  uint64_t v2 = (void *)v0[41];
  uint64_t v1 = (void *)v0[42];
  uint64_t v3 = v0[33];
  swift_willThrow();

  sub_10000A738(v3, (uint64_t *)&unk_100093950);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10000E244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v7 = (void *)swift_task_alloc();
  v5[7] = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10000E2F4;
  v7[24] = a4;
  return _swift_task_switch(sub_10000ED34, a4, 0);
}

uint64_t sub_10000E2F4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 40);
    return _swift_task_switch(sub_10000E438, v6, 0);
  }
}

uint64_t sub_10000E438()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_beginAccess();
  *(unsigned char *)(v1 + 16) = 1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10000E4B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_10000A738(a1, &qword_1000938B0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_10000E63C()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for Calendar.Component();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Calendar();
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  sub_100008580((uint64_t *)&unk_100093950);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v1[14] = v4;
  v1[15] = *(void *)(v4 - 8);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  return _swift_task_switch(sub_10000E810, v0, 0);
}

uint64_t sub_10000E810()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  static Calendar.current.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for Calendar.Component.hour(_:), v3);
  if (qword_1000929E8 != -1) {
    swift_once();
  }
  if (__OFSUB__(0, qword_100092F80))
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[13];
  uint64_t v9 = v0[10];
  uint64_t v8 = v0[11];
  uint64_t v10 = v0[8];
  uint64_t v11 = v0[7];
  uint64_t v36 = v0[6];
  uint64_t v37 = v0[9];
  static Date.now.getter();
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  os_log_type_t v35 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v35(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v36);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v37);
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v12(v7, 1, v5) == 1)
  {
    sub_10000A738(v0[13], (uint64_t *)&unk_100093950);
    if (qword_1000929D0 == -1)
    {
LABEL_6:
      uint64_t v13 = type metadata accessor for Logger();
      sub_100006040(v13, (uint64_t)qword_100092F50);
      char v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        id v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to get interval start for notification limits.", v16, 2u);
        swift_slowDealloc();
      }

      goto LABEL_18;
    }
LABEL_23:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v17 = v0[14];
  uint64_t v18 = v0[12];
  uint64_t v19 = v0[5];
  uint64_t v20 = *(void (**)(void, void, uint64_t))(v0[15] + 32);
  v20(v0[18], v0[13], v17);
  uint64_t v21 = v19 + OBJC_IVAR____TtC9feedbackd25CFBNotificationController_lastNotificationDate;
  swift_beginAccess();
  sub_10000FAD8(v21, v18);
  if (v12(v18, 1, v17) == 1)
  {
    uint64_t v22 = v0[12];
    v35(v0[18], v0[14]);
    sub_10000A738(v22, (uint64_t *)&unk_100093950);
    uint64_t v23 = 1;
    goto LABEL_19;
  }
  v20(v0[16], v0[12], v0[14]);
  sub_10000FE5C(&qword_1000939B0, (void (*)(uint64_t))&type metadata accessor for Date);
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    uint64_t v24 = v0[18];
    uint64_t v25 = v0[14];
    v35(v0[16], v25);
    v35(v24, v25);
    uint64_t v23 = 1;
    goto LABEL_19;
  }
  if (qword_1000929D0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_100006040(v26, (uint64_t)qword_100092F50);
  double v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    Swift::String v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Reached maximum number of notifications for this interval.", v29, 2u);
    swift_slowDealloc();
  }
  uint64_t v30 = v0[18];
  uint64_t v31 = v0[16];
  uint64_t v32 = v0[14];

  v35(v31, v32);
  v35(v30, v32);
LABEL_18:
  uint64_t v23 = 0;
LABEL_19:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = (uint64_t (*)(uint64_t))v0[1];
  return v33(v23);
}

uint64_t sub_10000ED14()
{
  *(void *)(v1 + 192) = v0;
  return _swift_task_switch(sub_10000ED34, v0, 0);
}

uint64_t sub_10000ED34()
{
  uint64_t v1 = *(void **)(v0[24] + OBJC_IVAR____TtC9feedbackd25CFBNotificationController_notificationCenter);
  v0[25] = v1;
  v0[2] = v0;
  v0[7] = v0 + 23;
  v0[3] = sub_10000EE40;
  uint64_t v2 = swift_continuation_init();
  v0[18] = _NSConcreteStackBlock;
  v0[19] = 0x40000000;
  v0[20] = sub_100031B4C;
  v0[21] = &unk_10008DF80;
  v0[22] = v2;
  [v1 getNotificationSettingsWithCompletionHandler:v0 + 18];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10000EE40()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 192);
  return _swift_task_switch(sub_10000EF34, v1, 0);
}

uint64_t sub_10000EF34()
{
  uint64_t v1 = (void *)v0[25];
  v0[26] = v0[23];
  v0[10] = v0;
  v0[15] = v0 + 23;
  v0[11] = sub_10000F03C;
  uint64_t v2 = swift_continuation_init();
  v0[18] = _NSConcreteStackBlock;
  v0[19] = 0x40000000;
  v0[20] = sub_100031BA0;
  v0[21] = &unk_10008DF98;
  v0[22] = v2;
  [v1 requestAuthorizationWithOptions:7 completionHandler:v0 + 18];
  return _swift_continuation_await(v0 + 10);
}

uint64_t sub_10000F03C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 112);
  *(void *)(*v0 + 216) = v2;
  uint64_t v3 = *(void *)(v1 + 192);
  if (v2) {
    uint64_t v4 = sub_10000F5D8;
  }
  else {
    uint64_t v4 = sub_10000F15C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10000F15C()
{
  uint64_t v25 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 184);
  if (qword_1000929D0 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void **)(v0 + 208);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100006040(v3, (uint64_t)qword_100092F50);
  id v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void **)(v0 + 208);
  uint64_t v9 = (SEL *)&unk_100091000;
  if (v7)
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v23 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446722;
    *(void *)(v0 + 144) = [v8 authorizationStatus];
    type metadata accessor for UNAuthorizationStatus(0);
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)(v0 + 144) = sub_100007E60(v11, v12, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v10 + 12) = 1026;
    *(_DWORD *)(v0 + 144) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 18) = 2112;
    *(void *)(v0 + 144) = v8;
    id v13 = v8;
    uint64_t v9 = (SEL *)&unk_100091000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v23 = v8;

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Previous status [%{public}s], authorized? %{BOOL,public}d\nSettings: %@", (uint8_t *)v10, 0x1Cu);
    sub_100008580(&qword_100092B40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  switch((unint64_t)[*(id *)(v0 + 208) v9[389]])
  {
    case 0uLL:
      char v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v14, v15)) {
        goto LABEL_19;
      }
      id v16 = "Notification status is Not Determined";
      goto LABEL_18;
    case 1uLL:
      uint64_t v17 = *(void **)(v0 + 208);
      sub_10000FA84();
      swift_allocError();
      *uint64_t v18 = 5;
      swift_willThrow();

      uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_21;
    case 2uLL:
      char v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v14, v15)) {
        goto LABEL_19;
      }
      id v16 = "Notification status is Authorized";
      goto LABEL_18;
    case 3uLL:
      char v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v14, v15)) {
        goto LABEL_19;
      }
      id v16 = "Notification status is Provisional";
      goto LABEL_18;
    case 4uLL:
      char v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v14, v15)) {
        goto LABEL_19;
      }
      id v16 = "Notification status is Ephemeral";
      goto LABEL_18;
    default:
      char v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        id v16 = "Notification status is Unknown Default";
LABEL_18:
        uint64_t v20 = v14;
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, v16, v21, 2u);
        swift_slowDealloc();
        char v14 = *(NSObject **)(v0 + 208);
      }
      else
      {
LABEL_19:
        uint64_t v20 = *(NSObject **)(v0 + 208);
      }

      uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
LABEL_21:
      return v19();
  }
}

uint64_t sub_10000F5D8()
{
  int v1 = *(void **)(v0 + 208);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

id sub_10000F648()
{
  int v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  os_log_type_t v6 = &v0[OBJC_IVAR____TtC9feedbackd25CFBNotificationController_lastNotificationDate];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = OBJC_IVAR____TtC9feedbackd25CFBNotificationController_notificationCenter;
  uint64_t v9 = qword_1000929E0;
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  sub_10000FA44();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchQoS.QoSClass.userInitiated(_:), v2);
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v11 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v11 initWithBundleIdentifier:v12 queue:v10];

  *(void *)&v1[v8] = v13;
  swift_release();
  char v14 = (objc_class *)type metadata accessor for CFBNotificationController();
  v16.receiver = v1;
  v16.super_class = v14;
  return [super init];
}

uint64_t sub_10000F898()
{
  sub_10000A738(v0 + OBJC_IVAR____TtC9feedbackd25CFBNotificationController_lastNotificationDate, (uint64_t *)&unk_100093950);

  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10000F8F0()
{
  return type metadata accessor for CFBNotificationController();
}

uint64_t type metadata accessor for CFBNotificationController()
{
  uint64_t result = qword_100092FB8;
  if (!qword_100092FB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10000F944()
{
  sub_10000F9EC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10000F9EC()
{
  if (!qword_100092FE0)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100092FE0);
    }
  }
}

unint64_t sub_10000FA44()
{
  unint64_t result = qword_1000939C0;
  if (!qword_1000939C0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000939C0);
  }
  return result;
}

unint64_t sub_10000FA84()
{
  unint64_t result = qword_100093930;
  if (!qword_100093930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100093930);
  }
  return result;
}

uint64_t sub_10000FAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580((uint64_t *)&unk_100093950);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000FB40()
{
  unint64_t result = qword_100092FF0;
  if (!qword_100092FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100092FF0);
  }
  return result;
}

uint64_t sub_10000FB94()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10000FBA4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10000FBEC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10000FCAC;
  return sub_10000E244(a1, v4, v5, v7, v6);
}

uint64_t sub_10000FCAC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_10000FDA0()
{
  unint64_t result = qword_100093010;
  if (!qword_100093010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100093010);
  }
  return result;
}

uint64_t sub_10000FDF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580((uint64_t *)&unk_100093950);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000FE5C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CFBNotificationController.NotificationError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for CFBNotificationController.NotificationError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10000FF94);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10000FFBC()
{
  return 0;
}

ValueMetadata *type metadata accessor for CFBNotificationController.NotificationError()
{
  return &type metadata for CFBNotificationController.NotificationError;
}

unint64_t sub_10000FFD8()
{
  unint64_t result = qword_100093020;
  if (!qword_100093020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100093020);
  }
  return result;
}

uint64_t sub_10001002C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_100093028);
  uint64_t v1 = sub_100006040(v0, (uint64_t)qword_100093028);
  if (qword_100092A40 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100006040(v0, (uint64_t)qword_1000964B8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000100F4()
{
  type metadata accessor for NotificationScheduler();
  uint64_t v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  qword_1000964A8 = v0;
  return result;
}

uint64_t sub_100010130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[10] = a6;
  v7[11] = v6;
  v7[8] = a4;
  v7[9] = a5;
  v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  v7[12] = type metadata accessor for FormLaunchConfiguration();
  v7[13] = swift_task_alloc();
  sub_100008580((uint64_t *)&unk_100093950);
  v7[14] = swift_task_alloc();
  return _swift_task_switch(sub_100010200, v6, 0);
}

uint64_t sub_100010200()
{
  uint64_t v9 = v0;
  if (qword_1000929F8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 120) = sub_100006040(v1, (uint64_t)qword_100093028);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unsigned int v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)unsigned int v4 = 136446210;
    *(void *)(v0 + 32) = sub_100007E60(0xD00000000000002CLL, 0x800000010007D2F0, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (qword_100092A48 != -1) {
    swift_once();
  }
  char v5 = *(unsigned char *)(*(void *)(v0 + 80) + 80);
  *(unsigned char *)(v0 + 160) = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v6;
  void *v6 = v0;
  v6[1] = sub_100010430;
  return sub_100031D8C(v5);
}

uint64_t sub_100010430(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88);
  *(unsigned char *)(*(void *)v1 + 161) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100010548, v2, 0);
}

uint64_t sub_100010548()
{
  if (qword_100092A30 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000964B0;
  return _swift_task_switch(sub_1000105DC, v0, 0);
}

uint64_t sub_1000105DC()
{
  id v1 = [self standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 arrayForKey:v2];

  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = sub_10002E1C8(v5);
    swift_bridgeObjectRelease();
    if (v6) {
      uint64_t v4 = v6;
    }
  }
  *(void *)(v0 + 136) = v4;
  uint64_t v7 = *(void *)(v0 + 88);
  return _swift_task_switch(sub_1000106F8, v7, 0);
}

uint64_t sub_1000106F8()
{
  int v1 = *(unsigned __int8 *)(v0 + 161);
  uint64_t v2 = *(void *)(*(void *)(v0 + 136) + 16);
  swift_bridgeObjectRelease();
  if (v1 != 1 || v2 != 0)
  {
    if ((*(unsigned char *)(v0 + 160) & 1) == 0)
    {
      uint64_t v4 = qword_1000964B0;
      return _swift_task_switch(sub_100010BF4, v4, 0);
    }
    goto LABEL_10;
  }
  if (*(unsigned char *)(v0 + 160))
  {
LABEL_10:
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Used configuration to notify immediately", v7, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100010880;
  uint64_t v9 = *(void *)(v0 + 112);
  uint64_t v10 = *(void *)(v0 + 72);
  uint64_t v11 = *(void *)(v0 + 80);
  uint64_t v12 = *(void *)(v0 + 56);
  uint64_t v13 = *(void *)(v0 + 64);
  uint64_t v14 = *(void *)(v0 + 40);
  uint64_t v15 = *(void *)(v0 + 48);
  return sub_10003584C(v9, v14, v15, v12, v13, v10, v11);
}

uint64_t sub_100010880()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v4 = sub_100010C78;
  }
  else {
    uint64_t v4 = sub_1000109AC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000109AC()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = (int *)v0[12];
  uint64_t v4 = v0[10];
  uint64_t v6 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v8 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v9 = v2 + v3[8];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  sub_10000FAD8(v1, v2 + v3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100013E44(v4);
  Date.init()();
  *(void *)uint64_t v2 = v8;
  *(void *)(v2 + 8) = v7;
  *(void *)(v2 + 16) = v6;
  *(void *)(v2 + 24) = v5;
  long long v11 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)v4;
  *(_OWORD *)(v2 + 48) = v11;
  long long v12 = *(_OWORD *)(v4 + 32);
  long long v13 = *(_OWORD *)(v4 + 48);
  long long v14 = *(_OWORD *)(v4 + 64);
  *(unsigned char *)(v2 + 112) = *(unsigned char *)(v4 + 80);
  *(_OWORD *)(v2 + 80) = v13;
  *(_OWORD *)(v2 + 96) = v14;
  *(_OWORD *)(v2 + 64) = v12;
  *(void *)(v2 + v3[7]) = 0;
  *(void *)(v2 + v3[10]) = 0;
  uint64_t v15 = qword_1000964B0;
  return _swift_task_switch(sub_100010AFC, v15, 0);
}

uint64_t sub_100010AFC()
{
  uint64_t v1 = *(void *)(v0 + 88);
  sub_10002EA38(*(Swift::String **)(v0 + 104));
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100010B70, v1, 0);
}

uint64_t sub_100010B70()
{
  uint64_t v1 = v0[14];
  sub_100013DE8(v0[13]);
  sub_10000A738(v1, (uint64_t *)&unk_100093950);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100010BF4()
{
  sub_10002EBC0(*(void *)(v0 + 80), *(void *)(v0 + 40), *(void **)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100010C78()
{
  long long v11 = v0;
  v0[2] = v0[19];
  swift_errorRetain();
  sub_100008580(&qword_100093940);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    BOOL v3 = os_log_type_enabled(v1, v2);
    unint64_t v4 = v0[6];
    if (v3)
    {
      uint64_t v5 = v0[5];
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      swift_bridgeObjectRetain();
      v0[3] = sub_100007E60(v5, v4, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Posting notification for [%{public}s] was halted because we have already posted the max amount allowed for this interval. Will enqueue notification for later", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    uint64_t v9 = qword_1000964B0;
    return _swift_task_switch(sub_100010F00, v9, 0);
  }
  else
  {
    swift_errorRelease();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100010F00()
{
  uint64_t v1 = *(void *)(v0 + 88);
  sub_10002EBC0(*(void *)(v0 + 80), *(void *)(v0 + 40), *(void **)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100010F78, v1, 0);
}

uint64_t sub_100010F78()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100010FEC()
{
  v1[18] = v0;
  sub_100008580((uint64_t *)&unk_100093950);
  v1[19] = swift_task_alloc();
  sub_100008580((uint64_t *)&unk_100094420);
  v1[20] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for FormItem();
  v1[21] = v2;
  v1[22] = *(void *)(v2 - 8);
  v1[23] = swift_task_alloc();
  sub_100008580(&qword_100093980);
  v1[24] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for FormLaunchConfiguration();
  v1[25] = v3;
  v1[26] = *(void *)(v3 - 8);
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  return _swift_task_switch(sub_1000111C0, v0, 0);
}

uint64_t sub_1000111C0()
{
  uint64_t v8 = v0;
  if (qword_1000929F8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[31] = sub_100006040(v1, (uint64_t)qword_100093028);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)unint64_t v4 = 136446210;
    v0[17] = sub_100007E60(0xD00000000000001ALL, 0x800000010007D2B0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (qword_100092A48 != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)swift_task_alloc();
  v0[32] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000113E4;
  return sub_100031D8C(0);
}

uint64_t sub_1000113E4(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  *(unsigned char *)(*(void *)v1 + 97) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000114FC, v2, 0);
}

uint64_t sub_1000114FC()
{
  if (*(unsigned char *)(v0 + 97) == 1)
  {
    if (qword_100092A30 != -1) {
      swift_once();
    }
    uint64_t v1 = qword_1000964B0;
    return _swift_task_switch(sub_1000116AC, v1, 0);
  }
  else
  {
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Too soon to post another notification. Will not inspect pending queue", v4, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_1000116AC()
{
  uint64_t v1 = *(void *)(v0 + 144);
  *(void *)(v0 + 264) = sub_10002EFAC();
  return _swift_task_switch(sub_100011718, v1, 0);
}

uint64_t sub_100011718()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 272) = v2;
  if (v2)
  {
    *(void *)(v0 + 280) = *(void *)(v1 + 32);
    *(void *)(v0 + 288) = *(void *)(v1 + 40);
    *(unsigned char *)(v0 + 98) = *(unsigned char *)(v1 + 48);
    swift_bridgeObjectRetain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100011888;
    return sub_100031D8C(0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_100011888(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  *(unsigned char *)(*(void *)v1 + 99) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000119A0, v2, 0);
}

uint64_t sub_1000119A0()
{
  if (*(unsigned char *)(v0 + 99))
  {
    uint64_t v2 = *(void *)(v0 + 280);
    uint64_t v1 = *(void *)(v0 + 288);
    *(unsigned char *)(v0 + 100) = *(unsigned char *)(v0 + 98);
    *(void *)(v0 + 304) = v2;
    *(void *)(v0 + 312) = v1;
    uint64_t v3 = qword_1000964B0;
    *(void *)(v0 + 320) = 1;
    *(void *)(v0 + 328) = v3;
    return _swift_task_switch(sub_100011AD8, v3, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_100011AD8()
{
  uint64_t v1 = v0[18];
  sub_10002C7E4(v0[38], v0[39], v0[24]);
  return _swift_task_switch(sub_100011B50, v1, 0);
}

uint64_t sub_100011B50()
{
  uint64_t v25 = v0;
  uint64_t v1 = *(void *)(v0 + 192);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 208) + 48))(v1, 1, *(void *)(v0 + 200)) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t result = sub_10000A738(v1, &qword_100093980);
    unint64_t v3 = *(void *)(v0 + 320);
    if (v3 == *(void *)(v0 + 272))
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
      return v4();
    }
    else
    {
      uint64_t v14 = *(void *)(v0 + 264);
      if (v3 >= *(void *)(v14 + 16))
      {
        __break(1u);
      }
      else
      {
        uint64_t v15 = v14 + 24 * v3;
        *(void *)(v0 + 432) = *(void *)(v15 + 40);
        *(unsigned char *)(v0 + 101) = *(unsigned char *)(v15 + 48);
        *(void *)(v0 + 440) = *(void *)(v15 + 32);
        swift_bridgeObjectRetain();
        objc_super v16 = (void *)swift_task_alloc();
        *(void *)(v0 + 448) = v16;
        void *v16 = v0;
        v16[1] = sub_100013254;
        return sub_100031D8C(0);
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 240);
    uint64_t v6 = *(void *)(v0 + 232);
    sub_100013D20(v1, v5);
    sub_100013D84(v5, v6);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(uint64_t **)(v0 + 232);
    if (v9)
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v12 = *v10;
      unint64_t v13 = v10[1];
      swift_bridgeObjectRetain();
      *(void *)(v11 + 4) = sub_100007E60(v12, v13, &v24);
      swift_bridgeObjectRelease();
      sub_100013DE8((uint64_t)v10);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Found pending notification %s", (uint8_t *)v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100013DE8(*(void *)(v0 + 232));
    }

    uint64_t v17 = *(uint64_t **)(v0 + 240);
    type metadata accessor for SeedPortal();
    *(void *)(v0 + 336) = static SeedPortal.shared.getter();
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    *(void *)(v0 + 344) = v19;
    uint64_t v20 = v17[2];
    uint64_t v21 = v17[3];
    *(void *)(v0 + 352) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v22;
    void *v22 = v0;
    v22[1] = sub_100011EF8;
    uint64_t v23 = *(void *)(v0 + 160);
    return sub_100022160(v23, v18, v19, v20, v21, 0);
  }
  return result;
}

uint64_t sub_100011EF8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 368) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 144);
    uint64_t v4 = sub_1000123AC;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 144);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = sub_10001203C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10001203C()
{
  uint64_t v34 = v0;
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 240);
    uint64_t v5 = *(void *)(v0 + 216);
    sub_10000A738(v3, (uint64_t *)&unk_100094420);
    sub_100013D84(v4, v5);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    BOOL v9 = *(uint64_t **)(v0 + 216);
    if (v8)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v11 = *v9;
      unint64_t v12 = v9[1];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 128) = sub_100007E60(v11, v12, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100013DE8((uint64_t)v9);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Could not authenticate for Form %{public}s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100013DE8(*(void *)(v0 + 216));
    }

    sub_10000FA84();
    *(void *)(v0 + 408) = swift_allocError();
    unsigned char *v26 = 1;
    uint64_t v27 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 416) = v27;
    os_log_type_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 424) = v28;
    *os_log_type_t v28 = v0;
    v28[1] = sub_100012F58;
    char v29 = *(unsigned char *)(v0 + 100);
    uint64_t v30 = *(void *)(v0 + 304);
    uint64_t v31 = *(void *)(v0 + 312);
    uint64_t v32 = *(void *)(v0 + 240);
    return sub_10002CAF4(v32, v29, v30, v31, v27);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 240);
    (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(*(void *)(v0 + 184), v3, v2);
    uint64_t v14 = *(void *)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    *(void *)(v0 + 376) = v15;
    uint64_t v16 = *(void *)(v13 + 16);
    uint64_t v17 = *(void *)(v13 + 24);
    *(void *)(v0 + 384) = v17;
    long long v18 = *(_OWORD *)(v13 + 48);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v13 + 32);
    *(_OWORD *)(v0 + 32) = v18;
    char v19 = *(unsigned char *)(v13 + 112);
    long long v21 = *(_OWORD *)(v13 + 80);
    long long v20 = *(_OWORD *)(v13 + 96);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v13 + 64);
    *(_OWORD *)(v0 + 64) = v21;
    *(_OWORD *)(v0 + 80) = v20;
    *(unsigned char *)(v0 + 96) = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100013E44(v0 + 16);
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 392) = v22;
    void *v22 = v0;
    v22[1] = sub_100012918;
    uint64_t v23 = *(void *)(v0 + 184);
    uint64_t v24 = *(void *)(v0 + 152);
    return sub_10003584C(v24, v14, v15, v16, v17, v23, v0 + 16);
  }
}

uint64_t sub_1000123AC()
{
  uint64_t v27 = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 368);
  *(void *)(v0 + 104) = v1;
  *(void *)(v0 + 456) = v1;
  swift_errorRetain();
  sub_100008580(&qword_100093940);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    swift_bridgeObjectRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    unint64_t v5 = *(void *)(v0 + 312);
    if (v4)
    {
      uint64_t v6 = *(void *)(v0 + 304);
      uint64_t v7 = *(void *)(v0 + 240);
      uint64_t v8 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v8 + 4) = sub_100007E60(v6, v5, &v26);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Posting pending notification [%{public}s] halted because we have already posted the max amount allowed for this interval", (uint8_t *)v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v7 = *(void *)(v0 + 240);

      swift_bridgeObjectRelease_n();
    }
    sub_100013DE8(v7);
    uint64_t result = swift_errorRelease();
    unint64_t v15 = *(void *)(v0 + 320);
    if (v15 == *(void *)(v0 + 272))
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
      return v16();
    }
    else
    {
      uint64_t v23 = *(void *)(v0 + 264);
      if (v15 >= *(void *)(v23 + 16))
      {
        __break(1u);
      }
      else
      {
        uint64_t v24 = v23 + 24 * v15;
        *(void *)(v0 + 432) = *(void *)(v24 + 40);
        *(unsigned char *)(v0 + 101) = *(unsigned char *)(v24 + 48);
        *(void *)(v0 + 440) = *(void *)(v24 + 32);
        swift_bridgeObjectRetain();
        uint64_t v25 = (void *)swift_task_alloc();
        *(void *)(v0 + 448) = v25;
        *uint64_t v25 = v0;
        v25[1] = sub_100013254;
        return sub_100031D8C(0);
      }
    }
  }
  else
  {
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    BOOL v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      unint64_t v12 = (void *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446466;
      *(void *)(v0 + 112) = sub_100007E60(0xD00000000000001ALL, 0x800000010007D2B0, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2114;
      swift_errorRetain();
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 120) = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v12 = v13;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s error: %{public}@", (uint8_t *)v11, 0x16u);
      sub_100008580(&qword_100092B40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v17 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 464) = v17;
    long long v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 472) = v18;
    *long long v18 = v0;
    v18[1] = sub_1000134A8;
    char v19 = *(unsigned char *)(v0 + 100);
    uint64_t v20 = *(void *)(v0 + 304);
    uint64_t v21 = *(void *)(v0 + 312);
    uint64_t v22 = *(void *)(v0 + 240);
    return sub_10002CAF4(v22, v19, v20, v21, v17);
  }
  return result;
}

uint64_t sub_100012918()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 16;
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc();
  sub_100013E9C(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v2 + 144);
  if (v0) {
    unint64_t v5 = sub_100013794;
  }
  else {
    unint64_t v5 = sub_100012A90;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100012A90()
{
  uint64_t v1 = (uint64_t *)v0[30];
  uint64_t v2 = v0[28];
  uint64_t v3 = (int *)v0[25];
  uint64_t v13 = v0[19];
  uint64_t v25 = *v1;
  uint64_t v14 = v1[1];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[5];
  uint64_t v23 = v1[4];
  uint64_t v24 = v1[2];
  uint64_t v6 = v1[7];
  uint64_t v7 = v1[9];
  uint64_t v21 = v1[8];
  uint64_t v22 = v1[6];
  uint64_t v8 = v1[11];
  uint64_t v20 = v1[10];
  __int16 v19 = *((_WORD *)v1 + 48);
  uint64_t v9 = v2 + v3[8];
  char v16 = *((unsigned char *)v1 + 112);
  uint64_t v17 = *(uint64_t *)((char *)v1 + v3[7]);
  uint64_t v18 = v1[13];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v15 = *(uint64_t *)((char *)v1 + v3[10]);
  sub_10000FAD8(v13, v2 + v3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Date.init()();
  *(void *)uint64_t v2 = v25;
  *(void *)(v2 + 8) = v14;
  *(void *)(v2 + 16) = v24;
  *(void *)(v2 + 24) = v4;
  *(void *)(v2 + 32) = v23;
  *(void *)(v2 + 40) = v5;
  *(void *)(v2 + 48) = v22;
  *(void *)(v2 + 56) = v6;
  *(void *)(v2 + 64) = v21;
  *(void *)(v2 + 72) = v7;
  *(void *)(v2 + 80) = v20;
  *(void *)(v2 + 88) = v8;
  *(_WORD *)(v2 + 96) = v19;
  *(void *)(v2 + 104) = v18;
  *(unsigned char *)(v2 + 112) = v16;
  *(void *)(v2 + v3[7]) = v17;
  *(void *)(v2 + v3[10]) = v15;
  uint64_t v11 = qword_1000964B0;
  return _swift_task_switch(sub_100012C74, v11, 0);
}

uint64_t sub_100012C74()
{
  uint64_t v1 = *(void *)(v0 + 144);
  sub_10002EA38(*(Swift::String **)(v0 + 224));
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100012CE8, v1, 0);
}

uint64_t sub_100012CE8()
{
  return _swift_task_switch(sub_100012D08, qword_1000964B0, 0);
}

uint64_t sub_100012D08()
{
  uint64_t v1 = v0[18];
  sub_10002F454(v0[38], v0[39]);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100012D84, v1, 0);
}

uint64_t sub_100012D84()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 152);
  sub_100013DE8(*(void *)(v0 + 224));
  sub_10000A738(v5, (uint64_t *)&unk_100093950);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t result = sub_100013DE8(v1);
  unint64_t v7 = *(void *)(v0 + 320);
  if (v7 == *(void *)(v0 + 272))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 264);
    if (v7 >= *(void *)(v9 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v10 = v9 + 24 * v7;
      *(void *)(v0 + 432) = *(void *)(v10 + 40);
      *(unsigned char *)(v0 + 101) = *(unsigned char *)(v10 + 48);
      *(void *)(v0 + 440) = *(void *)(v10 + 32);
      swift_bridgeObjectRetain();
      uint64_t v11 = (void *)swift_task_alloc();
      *(void *)(v0 + 448) = v11;
      *uint64_t v11 = v0;
      v11[1] = sub_100013254;
      return sub_100031D8C(0);
    }
  }
  return result;
}

uint64_t sub_100012F58()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 416);
  uint64_t v2 = *(void *)(*(void *)v0 + 144);
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  swift_errorRelease();
  return _swift_task_switch(sub_1000130C0, v2, 0);
}

uint64_t sub_1000130C0()
{
  uint64_t result = sub_100013DE8(*(void *)(v0 + 240));
  unint64_t v2 = *(void *)(v0 + 320);
  if (v2 == *(void *)(v0 + 272))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 264);
    if (v2 >= *(void *)(v4 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v5 = v4 + 24 * v2;
      *(void *)(v0 + 432) = *(void *)(v5 + 40);
      *(unsigned char *)(v0 + 101) = *(unsigned char *)(v5 + 48);
      *(void *)(v0 + 440) = *(void *)(v5 + 32);
      swift_bridgeObjectRetain();
      uint64_t v6 = (void *)swift_task_alloc();
      *(void *)(v0 + 448) = v6;
      void *v6 = v0;
      v6[1] = sub_100013254;
      return sub_100031D8C(0);
    }
  }
  return result;
}

uint64_t sub_100013254(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  *(unsigned char *)(*(void *)v1 + 102) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10001336C, v2, 0);
}

uint64_t sub_10001336C()
{
  if (*(unsigned char *)(v0 + 102))
  {
    uint64_t v2 = *(void *)(v0 + 432);
    uint64_t v1 = *(void *)(v0 + 440);
    uint64_t v3 = *(void *)(v0 + 320) + 1;
    *(unsigned char *)(v0 + 100) = *(unsigned char *)(v0 + 101);
    *(void *)(v0 + 304) = v1;
    *(void *)(v0 + 312) = v2;
    uint64_t v4 = qword_1000964B0;
    *(void *)(v0 + 320) = v3;
    *(void *)(v0 + 328) = v4;
    return _swift_task_switch(sub_100011AD8, v4, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_1000134A8()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 464);
  uint64_t v2 = *(void *)(*(void *)v0 + 144);
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return _swift_task_switch(sub_1000135F4, v2, 0);
}

uint64_t sub_1000135F4()
{
  uint64_t v1 = *(void *)(v0 + 240);
  swift_errorRelease();
  uint64_t result = sub_100013DE8(v1);
  unint64_t v3 = *(void *)(v0 + 320);
  if (v3 == *(void *)(v0 + 272))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 264);
    if (v3 >= *(void *)(v5 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v6 = v5 + 24 * v3;
      *(void *)(v0 + 432) = *(void *)(v6 + 40);
      *(unsigned char *)(v0 + 101) = *(unsigned char *)(v6 + 48);
      *(void *)(v0 + 440) = *(void *)(v6 + 32);
      swift_bridgeObjectRetain();
      uint64_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 448) = v7;
      *uint64_t v7 = v0;
      v7[1] = sub_100013254;
      return sub_100031D8C(0);
    }
  }
  return result;
}

uint64_t sub_100013794()
{
  uint64_t v27 = v0;
  (*(void (**)(void, void))(*(void *)(v0 + 176) + 8))(*(void *)(v0 + 184), *(void *)(v0 + 168));
  uint64_t v1 = *(void *)(v0 + 400);
  *(void *)(v0 + 104) = v1;
  *(void *)(v0 + 456) = v1;
  swift_errorRetain();
  sub_100008580(&qword_100093940);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    swift_bridgeObjectRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    unint64_t v5 = *(void *)(v0 + 312);
    if (v4)
    {
      uint64_t v6 = *(void *)(v0 + 304);
      uint64_t v7 = *(void *)(v0 + 240);
      uint64_t v8 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v8 + 4) = sub_100007E60(v6, v5, &v26);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Posting pending notification [%{public}s] halted because we have already posted the max amount allowed for this interval", (uint8_t *)v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v7 = *(void *)(v0 + 240);

      swift_bridgeObjectRelease_n();
    }
    sub_100013DE8(v7);
    uint64_t result = swift_errorRelease();
    unint64_t v15 = *(void *)(v0 + 320);
    if (v15 == *(void *)(v0 + 272))
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      char v16 = *(uint64_t (**)(void))(v0 + 8);
      return v16();
    }
    else
    {
      uint64_t v23 = *(void *)(v0 + 264);
      if (v15 >= *(void *)(v23 + 16))
      {
        __break(1u);
      }
      else
      {
        uint64_t v24 = v23 + 24 * v15;
        *(void *)(v0 + 432) = *(void *)(v24 + 40);
        *(unsigned char *)(v0 + 101) = *(unsigned char *)(v24 + 48);
        *(void *)(v0 + 440) = *(void *)(v24 + 32);
        swift_bridgeObjectRetain();
        uint64_t v25 = (void *)swift_task_alloc();
        *(void *)(v0 + 448) = v25;
        *uint64_t v25 = v0;
        v25[1] = sub_100013254;
        return sub_100031D8C(0);
      }
    }
  }
  else
  {
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = (void *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446466;
      *(void *)(v0 + 112) = sub_100007E60(0xD00000000000001ALL, 0x800000010007D2B0, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2114;
      swift_errorRetain();
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 120) = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v12 = v13;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s error: %{public}@", (uint8_t *)v11, 0x16u);
      sub_100008580(&qword_100092B40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v17 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 464) = v17;
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 472) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_1000134A8;
    char v19 = *(unsigned char *)(v0 + 100);
    uint64_t v20 = *(void *)(v0 + 304);
    uint64_t v21 = *(void *)(v0 + 312);
    uint64_t v22 = *(void *)(v0 + 240);
    return sub_10002CAF4(v22, v19, v20, v21, v17);
  }
  return result;
}

uint64_t type metadata accessor for NotificationScheduler()
{
  return self;
}

uint64_t sub_100013D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FormLaunchConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100013D84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FormLaunchConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100013DE8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FormLaunchConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100013E44(uint64_t a1)
{
  return a1;
}

uint64_t sub_100013E9C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100013EF4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_100093100);
  sub_100006040(v0, (uint64_t)qword_100093100);
  static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100013F58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v5 = sub_100008580(&qword_100093160);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  Swift::String v45 = (void *)((char *)v44 - v9);
  uint64_t v10 = sub_100008580(&qword_100093120);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  char v19 = (char *)v44 - v18;
  sub_100018820(a2, (uint64_t)v12, &qword_100093120);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_10000A738((uint64_t)v12, &qword_100093120);
    if (qword_100092A08 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100006040(v20, (uint64_t)qword_100093100);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No content. Cannot create annotated content", v23, 2u);
      swift_slowDealloc();
    }

    uint64_t v24 = type metadata accessor for FBKSInteraction.AnnotatedContent();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v46, 1, 1, v24);
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, v12, v13);
  if (!*(void *)(a1 + 16)
    || (unint64_t v26 = sub_100025B84(0x4E79616C70736964, 0xEB00000000656D61), (v27 & 1) == 0)
    || (sub_10000A7E0(*(void *)(a1 + 56) + 32 * v26, (uint64_t)v49), (swift_dynamicCast() & 1) == 0))
  {
LABEL_20:
    sub_100018618();
    swift_allocError();
    *uint64_t v34 = 0xD000000000000037;
    v34[1] = 0x800000010007D470;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  }
  if (!*(void *)(a1 + 16)
    || (v28 = v47, unint64_t v29 = sub_100025B84(0x7470697263736564, 0xEB000000006E6F69), (v30 & 1) == 0)
    || (sub_10000A7E0(*(void *)(a1 + 56) + 32 * v29, (uint64_t)v49), (swift_dynamicCast() & 1) == 0))
  {
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if (!*(void *)(a1 + 16)
    || (v44[4] = v47, v44[5] = v48, unint64_t v31 = sub_100025B84(0x656D614E656C6966, 0xE800000000000000), (v32 & 1) == 0)
    || (sub_10000A7E0(*(void *)(a1 + 56) + 32 * v31, (uint64_t)v49), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v44[1] = v47;
  v44[2] = v28;
  v44[3] = v48;
  uint64_t v33 = v50;
  sub_10001460C(a1, v45);
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
    uint64_t v35 = *(void *)(a1 + 16);
    uint64_t v50 = 0;
    if (v35 && (unint64_t v36 = sub_100025B84(0x70756F7267, 0xE500000000000000), (v37 & 1) != 0))
    {
      sub_10000A7E0(*(void *)(a1 + 56) + 32 * v36, (uint64_t)v49);
      int v38 = swift_dynamicCast();
      uint64_t v39 = v47;
      if (!v38) {
        uint64_t v39 = 0;
      }
      v44[0] = v39;
    }
    else
    {
      v44[0] = 0;
    }
    sub_100018820((uint64_t)v45, (uint64_t)v8, &qword_100093160);
    if (*(void *)(a1 + 16))
    {
      unint64_t v40 = sub_100025B84(0x6E6F697469646461, 0xEE006F666E496C61);
      if (v41)
      {
        sub_10000A7E0(*(void *)(a1 + 56) + 32 * v40, (uint64_t)v49);
        sub_100008580(&qword_100093168);
        swift_dynamicCast();
      }
    }
    uint64_t v42 = v46;
    FBKSInteraction.AnnotatedContent.init(payload:displayName:description:fileName:group:iconType:additionalInfo:)();
    sub_10000A738((uint64_t)v45, &qword_100093160);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    uint64_t v43 = type metadata accessor for FBKSInteraction.AnnotatedContent();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 0, 1, v43);
  }
}

uint64_t sub_10001460C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_100025B84(0x657079546E6F6369, 0xE800000000000000), (v5 & 1) != 0))
  {
    sub_10000A7E0(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v11);
    sub_10000AA1C(v11, v12);
    sub_10000A7E0((uint64_t)v12, (uint64_t)v11);
    sub_100008580(&qword_100092C60);
    if (swift_dynamicCast())
    {
      unint64_t v6 = sub_100019EF4(v10);
      swift_bridgeObjectRelease();
      sub_100014794(v6, a2);
      sub_10000A888((uint64_t)v12);
      return swift_bridgeObjectRelease();
    }
    else
    {
      sub_100018618();
      swift_allocError();
      *uint64_t v9 = 0xD000000000000024;
      v9[1] = 0x800000010007D4B0;
      swift_willThrow();
      return sub_10000A888((uint64_t)v12);
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for FBKSInteraction.AnnotatedContent.IconType();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, 1, 1, v8);
  }
}

uint64_t sub_100014794@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (qword_100092A08 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100006040(v4, (uint64_t)qword_100093100);
  swift_bridgeObjectRetain_n();
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    sub_100007E60(0x293A5F2868746977, 0xE800000000000000, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_100008580((uint64_t *)&unk_100093910);
    uint64_t v8 = Dictionary.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    v36[0] = sub_100007E60(v8, v10, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s dictionary: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v11 = sub_100014D34(a1);
  if (!v12)
  {
    uint64_t v17 = type metadata accessor for FBKSInteraction.AnnotatedContent.IconType();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a2, 1, 1, v17);
  }
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (v11 == 0x7261726F706D6574 && v12 == 0xE900000000000079
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (*(void *)(a1 + 16) && (unint64_t v15 = sub_100025B84(v13, v14), (v16 & 1) != 0))
    {
      sub_100018820(*(void *)(a1 + 56) + 32 * v15, (uint64_t)v36, (uint64_t *)&unk_100093910);
    }
    else
    {
      memset(v36, 0, sizeof(v36));
      uint64_t v37 = 1;
    }
    swift_bridgeObjectRelease();
    if (v37 == 1)
    {
      sub_10000A738((uint64_t)v36, &qword_100093170);
    }
    else
    {
      sub_1000187B8((uint64_t)v36, (uint64_t)&v38);
      if (v40)
      {
        sub_100008580(&qword_100093168);
        if (swift_dynamicCast())
        {
          uint64_t v19 = v41;
          if (*(void *)(v41 + 16))
          {
            unint64_t v20 = sub_100025B84(0xD000000000000011, 0x800000010007D510);
            if (v21)
            {
              os_log_type_t v22 = (uint64_t *)(*(void *)(v19 + 56) + 16 * v20);
              uint64_t v24 = *v22;
              uint64_t v23 = v22[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *a2 = v24;
              a2[1] = v23;
              uint64_t v25 = enum case for FBKSInteraction.AnnotatedContent.IconType.temporary(_:);
              uint64_t v26 = type metadata accessor for FBKSInteraction.AnnotatedContent.IconType();
              uint64_t v27 = *(void *)(v26 - 8);
              (*(void (**)(void *, uint64_t, uint64_t))(v27 + 104))(a2, v25, v26);
              return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(a2, 0, 1, v26);
            }
          }
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        sub_10000A738((uint64_t)&v38, (uint64_t *)&unk_100093910);
      }
    }
    uint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    uint64_t v38 = 0xD000000000000024;
    unint64_t v39 = 0x800000010007D4E0;
    swift_bridgeObjectRetain();
    sub_100008580((uint64_t *)&unk_100093910);
    uint64_t v29 = Dictionary.description.getter();
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = v29;
    v32._object = v31;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    uint64_t v33 = v38;
    unint64_t v34 = v39;
    sub_100018618();
    swift_allocError();
    *uint64_t v35 = v33;
    v35[1] = v34;
    return swift_willThrow();
  }
  else
  {
    static FBKSInteraction.AnnotatedContent.IconType.withString(value:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = type metadata accessor for FBKSInteraction.AnnotatedContent.IconType();
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a2, 0, 1, v28);
  }
}

uint64_t sub_100014D34(uint64_t a1)
{
  uint64_t result = sub_100014E68(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = sub_100015210(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_100014DB4(uint64_t a1, unint64_t a2)
{
  sub_10001866C(a1, a2);
  sub_10001501C(a1, a2);
  sub_1000185C0(a1, a2);
  uint64_t v4 = static String._fromUTF8Repairing(_:)();
  swift_release();
  return v4;
}

uint64_t sub_100014E2C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100014E68(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  unint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void *sub_100014F18(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = a3(&v6, a1, v4);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_100014F6C(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = v9 + v13;
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t result = (uint64_t)sub_100014F18(v9, v15, a4);
  if (v4) {
    return v16;
  }
  return result;
}

void *sub_10001501C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = _swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v9)
      {
        if (v9 >= 1)
        {
          sub_100008580(&qword_100092C80);
          unint64_t v8 = (void *)swift_allocObject();
          size_t v12 = j__malloc_size(v8);
          v8[2] = v9;
          v8[3] = 2 * v12 - 64;
        }
        sub_10001866C(a1, a2);
        uint64_t v13 = Data._copyContents(initializing:)();
        sub_1000185C0(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (v13 != v9)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x1000151C8);
        }
      }
      return v8;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v8;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1000151D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100015210(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 16 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

void sub_100015264(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FBKSInteraction.AnnotatedContent();
  uint64_t v189 = *(void *)(v4 - 8);
  uint64_t v190 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v162 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v187 = (char *)&v162 - v8;
  uint64_t v9 = sub_100008580(&qword_100093120);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  v184 = (char *)&v162 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  v180 = (char *)&v162 - v13;
  __chkstk_darwin(v12);
  v183 = (char *)&v162 - v14;
  uint64_t v15 = sub_100008580(&qword_100093118);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  v182 = (char *)&v162 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v186 = (uint64_t)&v162 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v181 = (char *)&v162 - v21;
  __chkstk_darwin(v20);
  uint64_t v185 = (uint64_t)&v162 - v22;
  uint64_t v23 = type metadata accessor for String.Encoding();
  v191 = *(void (***)(char *, void))(v23 - 8);
  uint64_t v192 = v23;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v162 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092A08 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = sub_100006040(v26, (uint64_t)qword_100093100);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  v188 = v7;
  if (v30)
  {
    unint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v179 = v1;
    v196[0] = v32;
    *(_DWORD *)unint64_t v31 = 136446210;
    *(void *)&v195[0] = sub_100007E60(0xD00000000000001CLL, 0x800000010007D450, v196);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%{public}s", v31, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v179;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v33 = dispatch thunk of FBKSInteraction.diagnostics.getter();
  if (v34)
  {
    uint64_t v35 = HIBYTE(v34) & 0xF;
    if ((v34 & 0x2000000000000000) == 0) {
      uint64_t v35 = v33 & 0xFFFFFFFFFFFFLL;
    }
    if (v35)
    {
      static String.Encoding.utf8.getter();
      uint64_t v36 = String.data(using:allowLossyConversion:)();
      unint64_t v38 = v37;
      swift_bridgeObjectRelease();
      v191[1](v25, v192);
      if (v38 >> 60 == 15)
      {
        sub_100018618();
        swift_allocError();
        *unint64_t v39 = 0xD000000000000024;
        v39[1] = 0x800000010007D380;
        swift_willThrow();
        return;
      }
      uint64_t v192 = a1;
      uint64_t v43 = self;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      *(void *)&v195[0] = 0;
      id v45 = [v43 JSONObjectWithData:isa options:0 error:v195];

      id v46 = *(id *)&v195[0];
      if (!v45)
      {
        Swift::String v54 = v46;
        uint64_t v55 = _convertNSErrorToError(_:)();

        swift_willThrow();
        goto LABEL_19;
      }
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_10000A7E0((uint64_t)v196, (uint64_t)v195);
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.debug.getter();
      Swift::String v49 = &type metadata for Any;
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v179 = v36;
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        uint64_t v178 = v27;
        uint64_t v194 = v51;
        *(_DWORD *)uint64_t v50 = 136315138;
        v191 = (void (**)(char *, void))v43;
        sub_10000A7E0((uint64_t)v195, (uint64_t)&v193);
        unint64_t v177 = v38;
        uint64_t v52 = String.init<A>(describing:)();
        v193 = (void *)sub_100007E60(v52, v53, &v194);
        uint64_t v43 = v191;
        Swift::String v49 = &type metadata for Any;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v36 = v179;
        swift_bridgeObjectRelease();
        sub_10000A888((uint64_t)v195);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Annotations %s", v50, 0xCu);
        unint64_t v38 = v177;
        swift_arrayDestroy();
        uint64_t v27 = v178;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10000A888((uint64_t)v195);
      }

      sub_10000A7E0((uint64_t)v196, (uint64_t)v195);
      uint64_t v60 = sub_100008580(&qword_100092C60);
      if (swift_dynamicCast())
      {
        uint64_t v176 = v60;
        os_log_type_t v61 = v193;
        if (v193[2])
        {
          unint64_t v62 = sub_100025B84(0x6E6F6973726576, 0xE700000000000000);
          if (v63)
          {
            sub_10000A7E0(v61[7] + 32 * v62, (uint64_t)v195);
            if ((swift_dynamicCast() & 1) != 0 && v193 == (void *)1)
            {
              unint64_t v177 = v38;
              unint64_t v65 = 0;
              v170 = (void (**)(char *, char *, uint64_t))(v189 + 32);
              v166 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v189 + 48);
              *(void *)&long long v64 = 136315138;
              long long v172 = v64;
              unint64_t v168 = (unint64_t)"generatedContentAnnotation";
              unint64_t v165 = 0x800000010007D360;
              v164 = (char *)&type metadata for Any + 8;
              unint64_t v167 = (unint64_t)"encodeAnnotations(donation:)";
              unint64_t v163 = 0x800000010007D340;
              v175 = v61;
              uint64_t v179 = v36;
              uint64_t v178 = v27;
              v191 = (void (**)(char *, void))v43;
              while (2)
              {
                if (v65 >= 5) {
                  __break(1u);
                }
                unint64_t v76 = v65++;
                switch(*((unsigned char *)&off_10008DD10 + v76 + 32))
                {
                  case 1:
                    if (v61[2])
                    {
                      unint64_t v90 = sub_100025B84(0xD00000000000001ALL, v167 | 0x8000000000000000);
                      if (v91)
                      {
                        sub_10000A7E0(v61[7] + 32 * v90, (uint64_t)v195);
                        if (!swift_dynamicCast())
                        {
                          swift_bridgeObjectRelease();
                          *(void *)&v195[0] = 0;
                          *((void *)&v195[0] + 1) = 0xE000000000000000;
                          _StringGuts.grow(_:)(21);
                          swift_bridgeObjectRelease();
                          sub_100018618();
                          uint64_t v55 = swift_allocError();
                          unint64_t v160 = 0xD00000000000002DLL;
                          v161 = "Could dereference: generatedContentAnnotation";
                          goto LABEL_115;
                        }
                        uint64_t v92 = (uint64_t)v193;
                        swift_bridgeObjectRetain_n();
                        v93 = Logger.logObject.getter();
                        os_log_type_t v94 = static os_log_type_t.debug.getter();
                        if (os_log_type_enabled(v93, v94))
                        {
                          uint64_t v95 = swift_slowAlloc();
                          v174 = (void *)swift_slowAlloc();
                          *(void *)&v195[0] = v174;
                          *(_DWORD *)uint64_t v95 = v172;
                          swift_bridgeObjectRetain();
                          v171 = (char *)&type metadata for Any + 8;
                          unint64_t v96 = v65;
                          v97 = v43;
                          uint64_t v98 = Dictionary.description.getter();
                          uint64_t v99 = v2;
                          unint64_t v101 = v100;
                          swift_bridgeObjectRelease();
                          uint64_t v102 = v98;
                          uint64_t v43 = v97;
                          unint64_t v65 = v96;
                          *(void *)(v95 + 4) = sub_100007E60(v102, v101, (uint64_t *)v195);
                          swift_bridgeObjectRelease_n();
                          uint64_t v2 = v99;
                          uint64_t v36 = v179;
                          swift_bridgeObjectRelease();
                          _os_log_impl((void *)&_mh_execute_header, v93, v94, "generatedAnnotatedContent %s", (uint8_t *)v95, 0xCu);
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          swift_slowDealloc();
                        }
                        else
                        {

                          swift_bridgeObjectRelease_n();
                        }
                        uint64_t v145 = (uint64_t)v184;
                        dispatch thunk of FBKSInteraction.generatedContent.getter();
                        sub_100013F58(v92, v145, v186);
                        if (v2) {
                          goto LABEL_110;
                        }
                        sub_10000A738(v145, &qword_100093120);
                        swift_bridgeObjectRelease();
                        dispatch thunk of FBKSInteraction.generatedAnnotatedContent.setter();
                        uint64_t v152 = (uint64_t)v182;
                        dispatch thunk of FBKSInteraction.generatedAnnotatedContent.getter();
                        int v153 = (*v166)(v152, 1, v190);
                        sub_10000A738(v152, &qword_100093118);
                        if (v153 != 1)
                        {
                          v154 = Logger.logObject.getter();
                          os_log_type_t v155 = static os_log_type_t.debug.getter();
                          if (os_log_type_enabled(v154, v155))
                          {
                            v156 = (uint8_t *)swift_slowAlloc();
                            *(_WORD *)v156 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v154, v155, "Clearing non-annotated generated content", v156, 2u);
                            swift_slowDealloc();
                          }

                          uint64_t v157 = type metadata accessor for FBKSInteraction.Content();
                          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v157 - 8) + 56))(v180, 1, 1, v157);
                          dispatch thunk of FBKSInteraction.generatedContent.setter();
                        }
LABEL_103:
                        Swift::String v49 = &type metadata for Any;
                        goto LABEL_46;
                      }
                    }
                    v131 = Logger.logObject.getter();
                    os_log_type_t v136 = static os_log_type_t.debug.getter();
                    if (!os_log_type_enabled(v131, v136)) {
                      goto LABEL_45;
                    }
                    unint64_t v133 = v65;
                    v134 = v49;
                    uint64_t v137 = swift_slowAlloc();
                    *(void *)&v195[0] = swift_slowAlloc();
                    *(_DWORD *)uint64_t v137 = v172;
                    uint64_t v138 = 0xD00000000000001ALL;
                    unint64_t v139 = v163;
                    goto LABEL_43;
                  case 2:
                    if (v61[2] && (unint64_t v103 = sub_100025B84(0x6E6F436172747865, 0xEC000000746E6574), (v104 & 1) != 0))
                    {
                      sub_10000A7E0(v61[7] + 32 * v103, (uint64_t)v195);
                      sub_100008580(&qword_100093138);
                      if (!swift_dynamicCast())
                      {
                        swift_bridgeObjectRelease();
                        *(void *)&v195[0] = 0;
                        *((void *)&v195[0] + 1) = 0xE000000000000000;
                        _StringGuts.grow(_:)(21);
                        swift_bridgeObjectRelease();
                        sub_100018618();
                        uint64_t v55 = swift_allocError();
                        unint64_t v160 = 0xD00000000000001FLL;
                        v161 = "Could dereference: extraContent";
LABEL_115:
                        unint64_t *v159 = v160;
                        v159[1] = (unint64_t)(v161 - 32) | 0x8000000000000000;
                        swift_willThrow();
                        sub_10000A888((uint64_t)v196);
LABEL_116:
                        unint64_t v38 = v177;
LABEL_19:
                        v196[0] = v55;
                        swift_errorRetain();
                        sub_100008580(&qword_100093940);
                        sub_100018720();
                        if (swift_dynamicCast())
                        {
                          Swift::String v56 = *(void **)&v195[0];
                          if ([*(id *)&v195[0] code] == (id)3840)
                          {
                            swift_errorRelease();
                            Swift::String v57 = Logger.logObject.getter();
                            os_log_type_t v58 = static os_log_type_t.debug.getter();
                            if (os_log_type_enabled(v57, v58))
                            {
                              os_log_type_t v59 = (uint8_t *)swift_slowAlloc();
                              *(_WORD *)os_log_type_t v59 = 0;
                              _os_log_impl((void *)&_mh_execute_header, v57, v58, "Diagnostics string does not contain JSON. Likely not an error", v59, 2u);
                              swift_slowDealloc();
                            }
                            sub_100018760(v36, v38);

                            swift_errorRelease();
                            return;
                          }
                        }
                        swift_errorRelease();
                        swift_errorRetain();
                        swift_errorRetain();
                        unint64_t v70 = Logger.logObject.getter();
                        os_log_type_t v71 = static os_log_type_t.error.getter();
                        if (os_log_type_enabled(v70, v71))
                        {
                          uint64_t v72 = (uint8_t *)swift_slowAlloc();
                          uint64_t v73 = swift_slowAlloc();
                          uint64_t v179 = v36;
                          uint64_t v74 = (void *)v73;
                          *(_DWORD *)uint64_t v72 = 138412290;
                          swift_errorRetain();
                          uint64_t v75 = _swift_stdlib_bridgeErrorToNSError();
                          v196[0] = v75;
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          void *v74 = v75;
                          swift_errorRelease();
                          swift_errorRelease();
                          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Error decoding annotate content: %@", v72, 0xCu);
                          sub_100008580(&qword_100092B40);
                          swift_arrayDestroy();
                          uint64_t v36 = v179;
                          swift_slowDealloc();
                          swift_slowDealloc();
                        }
                        else
                        {
                          swift_errorRelease();
                          swift_errorRelease();
                        }

                        swift_willThrow();
                        sub_100018760(v36, v38);
                        return;
                      }
                      int64_t v105 = v193[2];
                      if (v105)
                      {
                        v171 = (char *)v193;
                        *(void *)&v195[0] = _swiftEmptyArrayStorage;
                        int64_t v169 = v105;
                        sub_1000085C4(0, v105, 0);
                        uint64_t v106 = 0;
                        long long v107 = *(void **)&v195[0];
                        unint64_t v173 = v65;
                        while (1)
                        {
                          v174 = v107;
                          swift_bridgeObjectRetain();
                          Class v108 = Dictionary._bridgeToObjectiveC()().super.isa;
                          v193 = 0;
                          id v109 = [v43 dataWithJSONObject:v108 options:0 error:&v193];

                          unint64_t v110 = v193;
                          if (!v109)
                          {
                            v158 = v110;
                            uint64_t v55 = _convertNSErrorToError(_:)();

                            swift_willThrow();
                            swift_bridgeObjectRelease();
                            swift_release();
                            swift_bridgeObjectRelease();
                            goto LABEL_109;
                          }
                          uint64_t v111 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                          unint64_t v113 = v112;

                          type metadata accessor for JSONDecoder();
                          swift_allocObject();
                          JSONDecoder.init()();
                          sub_100018774(&qword_100093158);
                          v114 = v188;
                          uint64_t v115 = v190;
                          dispatch thunk of JSONDecoder.decode<A>(_:from:)();
                          if (v2) {
                            break;
                          }
                          sub_1000185C0(v111, v113);
                          swift_release();
                          v116 = v114;
                          v117 = *v170;
                          v118 = v187;
                          (*v170)(v187, v116, v115);
                          swift_bridgeObjectRelease();
                          long long v107 = v174;
                          *(void *)&v195[0] = v174;
                          unint64_t v120 = v174[2];
                          unint64_t v119 = v174[3];
                          if (v120 >= v119 >> 1)
                          {
                            sub_1000085C4(v119 > 1, v120 + 1, 1);
                            long long v107 = *(void **)&v195[0];
                          }
                          ++v106;
                          v107[2] = v120 + 1;
                          v117((char *)v107+ ((*(unsigned __int8 *)(v189 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v189 + 80))+ *(void *)(v189 + 72) * v120, v118, v115);
                          uint64_t v43 = v191;
                          Swift::String v49 = &type metadata for Any;
                          unint64_t v65 = v173;
                          if (v169 == v106)
                          {
                            swift_bridgeObjectRelease();
                            uint64_t v36 = v179;
                            os_log_type_t v61 = v175;
                            goto LABEL_105;
                          }
                        }
                        sub_1000185C0(v111, v113);
                        swift_bridgeObjectRelease();
                        swift_release();
                        swift_bridgeObjectRelease();
                        swift_release();
                        uint64_t v55 = v2;
LABEL_109:
                        sub_10000A888((uint64_t)v196);
                        swift_bridgeObjectRelease();
                        unint64_t v38 = v177;
                        uint64_t v36 = v179;
                        goto LABEL_19;
                      }
                      swift_bridgeObjectRelease();
LABEL_105:
                      dispatch thunk of FBKSInteraction.extraContent.setter();
                    }
                    else
                    {
                      v131 = Logger.logObject.getter();
                      os_log_type_t v136 = static os_log_type_t.debug.getter();
                      if (os_log_type_enabled(v131, v136))
                      {
                        unint64_t v133 = v65;
                        v134 = v49;
                        uint64_t v137 = swift_slowAlloc();
                        *(void *)&v195[0] = swift_slowAlloc();
                        *(_DWORD *)uint64_t v137 = v172;
                        uint64_t v138 = 0x6E6F436172747865;
                        unint64_t v139 = 0xEC000000746E6574;
LABEL_43:
                        *(void *)(v137 + 4) = sub_100007E60(v138, v139, (uint64_t *)v195);
                        _os_log_impl((void *)&_mh_execute_header, v131, v136, "%s, is nil will skip", (uint8_t *)v137, 0xCu);
LABEL_44:
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        Swift::String v49 = v134;
                        unint64_t v65 = v133;
                        uint64_t v43 = v191;
                        swift_slowDealloc();
                      }
LABEL_45:

LABEL_46:
                      os_log_type_t v61 = v175;
                    }
LABEL_47:
                    if (v65 != 5) {
                      continue;
                    }
                    sub_100018760(v36, v177);
                    swift_bridgeObjectRelease();
                    break;
                  case 3:
                    if (v61[2])
                    {
                      unint64_t v121 = sub_100025B84(0x74736F6E67616964, 0xEB00000000736369);
                      if (v122)
                      {
                        sub_10000A7E0(v61[7] + 32 * v121, (uint64_t)v195);
                        if (!swift_dynamicCast())
                        {
                          swift_bridgeObjectRelease();
                          *(void *)&v195[0] = 0;
                          *((void *)&v195[0] + 1) = 0xE000000000000000;
                          _StringGuts.grow(_:)(21);
                          swift_bridgeObjectRelease();
                          sub_100018618();
                          uint64_t v55 = swift_allocError();
                          unint64_t v160 = 0xD00000000000001ELL;
                          v161 = "Could dereference: diagnostics";
                          goto LABEL_115;
                        }
                        dispatch thunk of FBKSInteraction.diagnostics.setter();
                        goto LABEL_47;
                      }
                    }
                    v131 = Logger.logObject.getter();
                    os_log_type_t v136 = static os_log_type_t.debug.getter();
                    if (!os_log_type_enabled(v131, v136)) {
                      goto LABEL_45;
                    }
                    unint64_t v133 = v65;
                    v134 = v49;
                    uint64_t v137 = swift_slowAlloc();
                    *(void *)&v195[0] = swift_slowAlloc();
                    *(_DWORD *)uint64_t v137 = v172;
                    uint64_t v138 = 0x74736F6E67616964;
                    unint64_t v139 = 0xEB00000000736369;
                    goto LABEL_43;
                  case 4:
                    unint64_t v173 = v65;
                    swift_bridgeObjectRetain_n();
                    v123 = v61;
                    v124 = Logger.logObject.getter();
                    os_log_type_t v125 = static os_log_type_t.debug.getter();
                    if (os_log_type_enabled(v124, v125))
                    {
                      v126 = (_DWORD *)swift_slowAlloc();
                      v127 = (void *)swift_slowAlloc();
                      v193 = v127;
                      v174 = v126;
                      _DWORD *v126 = v172;
                      uint64_t v128 = v123[2];
                      v171 = (char *)v127;
                      if (v128 && (unint64_t v129 = sub_100025B84(0x6E6F6973726576, 0xE700000000000000), (v130 & 1) != 0)) {
                        sub_10000A7E0(v123[7] + 32 * v129, (uint64_t)v195);
                      }
                      else {
                        memset(v195, 0, sizeof(v195));
                      }
                      sub_100008580((uint64_t *)&unk_100093910);
                      uint64_t v140 = String.init<A>(describing:)();
                      uint64_t v142 = sub_100007E60(v140, v141, (uint64_t *)&v193);
                      v143 = (uint8_t *)v174;
                      *(void *)((char *)v174 + 4) = v142;
                      v144 = v175;
                      swift_bridgeObjectRelease_n();
                      swift_bridgeObjectRelease();
                      _os_log_impl((void *)&_mh_execute_header, v124, v125, "Version %s", v143, 0xCu);
                      Swift::String v49 = &type metadata for Any;
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();

                      os_log_type_t v61 = v144;
                    }
                    else
                    {

                      swift_bridgeObjectRelease_n();
                      os_log_type_t v61 = v123;
                    }
                    unint64_t v65 = v173;
                    goto LABEL_47;
                  default:
                    if (v61[2])
                    {
                      unint64_t v77 = sub_100025B84(0xD000000000000019, v168 | 0x8000000000000000);
                      if (v78)
                      {
                        sub_10000A7E0(v61[7] + 32 * v77, (uint64_t)v195);
                        if (!swift_dynamicCast())
                        {
                          swift_bridgeObjectRelease();
                          *(void *)&v195[0] = 0;
                          *((void *)&v195[0] + 1) = 0xE000000000000000;
                          _StringGuts.grow(_:)(21);
                          swift_bridgeObjectRelease();
                          sub_100018618();
                          uint64_t v55 = swift_allocError();
                          unint64_t v160 = 0xD00000000000002CLL;
                          v161 = "Could dereference: originalContentAnnotation";
                          goto LABEL_115;
                        }
                        uint64_t v79 = (uint64_t)v193;
                        swift_bridgeObjectRetain_n();
                        uint64_t v80 = Logger.logObject.getter();
                        os_log_type_t v81 = static os_log_type_t.debug.getter();
                        if (os_log_type_enabled(v80, v81))
                        {
                          uint64_t v82 = swift_slowAlloc();
                          v174 = (void *)swift_slowAlloc();
                          *(void *)&v195[0] = v174;
                          *(_DWORD *)uint64_t v82 = v172;
                          swift_bridgeObjectRetain();
                          v171 = (char *)&type metadata for Any + 8;
                          unint64_t v83 = v65;
                          uint64_t v84 = v43;
                          uint64_t v85 = Dictionary.description.getter();
                          uint64_t v86 = v2;
                          unint64_t v88 = v87;
                          swift_bridgeObjectRelease();
                          uint64_t v89 = v85;
                          uint64_t v43 = v84;
                          unint64_t v65 = v83;
                          *(void *)(v82 + 4) = sub_100007E60(v89, v88, (uint64_t *)v195);
                          swift_bridgeObjectRelease_n();
                          uint64_t v2 = v86;
                          uint64_t v36 = v179;
                          swift_bridgeObjectRelease();
                          _os_log_impl((void *)&_mh_execute_header, v80, v81, "originalAnnotatedContent %s", (uint8_t *)v82, 0xCu);
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          swift_slowDealloc();
                        }
                        else
                        {

                          swift_bridgeObjectRelease_n();
                        }
                        uint64_t v145 = (uint64_t)v183;
                        dispatch thunk of FBKSInteraction.originalContent.getter();
                        sub_100013F58(v79, v145, v185);
                        if (v2)
                        {
LABEL_110:
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          sub_10000A738(v145, &qword_100093120);
                          sub_10000A888((uint64_t)v196);
                          uint64_t v55 = v2;
                          goto LABEL_116;
                        }
                        sub_10000A738(v145, &qword_100093120);
                        swift_bridgeObjectRelease();
                        dispatch thunk of FBKSInteraction.originalAnnotatedContent.setter();
                        uint64_t v146 = (uint64_t)v181;
                        dispatch thunk of FBKSInteraction.originalAnnotatedContent.getter();
                        int v147 = (*v166)(v146, 1, v190);
                        sub_10000A738(v146, &qword_100093118);
                        if (v147 != 1)
                        {
                          v148 = Logger.logObject.getter();
                          os_log_type_t v149 = static os_log_type_t.debug.getter();
                          if (os_log_type_enabled(v148, v149))
                          {
                            v150 = (uint8_t *)swift_slowAlloc();
                            *(_WORD *)v150 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v148, v149, "Clearing non-annotated original content", v150, 2u);
                            swift_slowDealloc();
                          }

                          uint64_t v151 = type metadata accessor for FBKSInteraction.Content();
                          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v151 - 8) + 56))(v180, 1, 1, v151);
                          dispatch thunk of FBKSInteraction.originalContent.setter();
                        }
                        goto LABEL_103;
                      }
                    }
                    v131 = Logger.logObject.getter();
                    os_log_type_t v132 = static os_log_type_t.debug.getter();
                    if (!os_log_type_enabled(v131, v132)) {
                      goto LABEL_45;
                    }
                    unint64_t v133 = v65;
                    v134 = v49;
                    uint64_t v135 = swift_slowAlloc();
                    *(void *)&v195[0] = swift_slowAlloc();
                    *(_DWORD *)uint64_t v135 = v172;
                    *(void *)(v135 + 4) = sub_100007E60(0xD000000000000019, v165, (uint64_t *)v195);
                    _os_log_impl((void *)&_mh_execute_header, v131, v132, "%s, is nil will skip", (uint8_t *)v135, 0xCu);
                    goto LABEL_44;
                }
                break;
              }
LABEL_37:
              sub_10000A888((uint64_t)v196);
              return;
            }
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v66, v67))
        {
          v68 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v68 = 0;
          uint64_t v69 = "Diagnostics JSON is invalid version, likely not an error";
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v66, v67))
        {
          v68 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v68 = 0;
          uint64_t v69 = "Diagnostics JSON structure is not annotated content. Likely not an error";
LABEL_35:
          _os_log_impl((void *)&_mh_execute_header, v66, v67, v69, v68, 2u);
          swift_slowDealloc();
        }
      }
      sub_100018760(v36, v38);

      goto LABEL_37;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Donation doesn't have diagnostics text", v42, 2u);
    swift_slowDealloc();
  }
}

id sub_100016F8C(uint64_t a1, char a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v4 = JSONEncoder.init()();
  type metadata accessor for FBKSInteraction.AnnotatedContent();
  sub_100018774(&qword_100093128);
  id v5 = (id)v4;
  uint64_t v6 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v2) {
    goto LABEL_9;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  uint64_t v10 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&v16[0] = 0;
  id v5 = [v10 JSONObjectWithData:isa options:0 error:v16];

  if (!v5)
  {
    id v5 = *(id *)&v16[0];
    _convertNSErrorToError(_:)();

LABEL_8:
    swift_willThrow();
    sub_1000185C0(v8, v9);
LABEL_9:
    swift_release();
    return v5;
  }
  id v12 = *(id *)&v16[0];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_100008580(&qword_100092C60);
  if (!swift_dynamicCast())
  {
    sub_100018618();
    swift_allocError();
    *uint64_t v13 = 0;
    v13[1] = 0;
    goto LABEL_8;
  }
  id v5 = v15;
  if (a2)
  {
    sub_100070358(0x64616F6C796170, 0xE700000000000000, v16);
    sub_10000A738((uint64_t)v16, (uint64_t *)&unk_100093910);
    sub_1000185C0(v8, v9);
    swift_release();
    return v15;
  }
  else
  {
    sub_1000185C0(v8, v9);
    swift_release();
  }
  return v5;
}

uint64_t sub_1000171EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v80 = a2;
  uint64_t v5 = sub_100008580(&qword_100093118);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v79 - v9;
  uint64_t v11 = type metadata accessor for FBKSInteraction.AnnotatedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v88 = (char *)v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v86 = (char *)v79 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v79 - v17;
  unint64_t v89 = sub_100023734((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v81 = a1;
  dispatch thunk of FBKSInteraction.originalAnnotatedContent.getter();
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v19(v10, 1, v11) == 1)
  {
    uint64_t v87 = v12;
    sub_10000A738((uint64_t)v10, &qword_100093118);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v18, v10, v11);
    id v20 = sub_100016F8C((uint64_t)v18, 1);
    if (v2)
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
      swift_bridgeObjectRelease();
      return a1;
    }
    id v21 = v20;
    uint64_t v95 = (void *)sub_100008580(&qword_100092C60);
    *(void *)&long long v94 = v21;
    sub_10000AA1C(&v94, v90);
    unint64_t v22 = v89;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v92 = v22;
    sub_100027D9C(v90, 0xD000000000000019, 0x800000010007D360, isUniquelyReferenced_nonNull_native);
    unint64_t v89 = v92;
    swift_bridgeObjectRelease();
    uint64_t v87 = v12;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    uint64_t v3 = 0;
  }
  a1 = v81;
  dispatch thunk of FBKSInteraction.generatedAnnotatedContent.getter();
  if (v19(v8, 1, v11) == 1)
  {
    sub_10000A738((uint64_t)v8, &qword_100093118);
    uint64_t v24 = v87;
  }
  else
  {
    uint64_t v25 = (uint64_t)v86;
    uint64_t v24 = v87;
    (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v86, v8, v11);
    id v26 = sub_100016F8C(v25, 1);
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v11);
LABEL_28:
      swift_bridgeObjectRelease();
      return a1;
    }
    id v27 = v26;
    uint64_t v95 = (void *)sub_100008580(&qword_100092C60);
    *(void *)&long long v94 = v27;
    sub_10000AA1C(&v94, v90);
    unint64_t v28 = v89;
    char v29 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v92 = v28;
    sub_100027D9C(v90, 0xD00000000000001ALL, 0x800000010007D340, v29);
    unint64_t v89 = v92;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v11);
    uint64_t v3 = 0;
  }
  uint64_t v30 = dispatch thunk of FBKSInteraction.extraContent.getter();
  int64_t v31 = *(void *)(v30 + 16);
  if (v31)
  {
    *(void *)&v90[0] = _swiftEmptyArrayStorage;
    sub_100008604(0, v31, 0);
    uint64_t v33 = *(char **)(v24 + 16);
    uint64_t v32 = v24 + 16;
    uint64_t v86 = v33;
    unint64_t v34 = (*(unsigned __int8 *)(v32 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 64);
    v79[1] = v30;
    unint64_t v35 = v30 + v34;
    uint64_t v36 = *(void *)(v32 + 56);
    uint64_t v84 = (void (**)(char *, uint64_t))(v32 - 8);
    uint64_t v85 = v11;
    uint64_t v82 = v36;
    unint64_t v83 = (char *)&type metadata for Any + 8;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v86)(v88, v35, v11);
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      a1 = JSONEncoder.init()();
      sub_100018774(&qword_100093128);
      uint64_t v37 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      if (v3) {
        break;
      }
      uint64_t v39 = v37;
      unint64_t v40 = v38;
      uint64_t v87 = 0;
      os_log_type_t v41 = self;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      *(void *)&long long v94 = 0;
      id v43 = [v41 JSONObjectWithData:isa options:0 error:&v94];

      if (!v43)
      {
        id v49 = (id)v94;
        _convertNSErrorToError(_:)();

LABEL_26:
        swift_willThrow();
        sub_1000185C0(v39, v40);
        break;
      }
      id v44 = (id)v94;
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_100008580(&qword_100092C60);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100018618();
        swift_allocError();
        *uint64_t v50 = 0;
        v50[1] = 0;
        goto LABEL_26;
      }
      unint64_t v45 = v92;
      sub_1000185C0(v39, v40);
      swift_release();
      uint64_t v11 = v85;
      (*v84)(v88, v85);
      id v46 = *(void **)&v90[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100008604(0, v46[2] + 1, 1);
        id v46 = *(void **)&v90[0];
      }
      unint64_t v48 = v46[2];
      unint64_t v47 = v46[3];
      if (v48 >= v47 >> 1)
      {
        sub_100008604(v47 > 1, v48 + 1, 1);
        id v46 = *(void **)&v90[0];
      }
      v46[2] = v48 + 1;
      v46[v48 + 4] = v45;
      v35 += v82;
      --v31;
      uint64_t v3 = v87;
      if (!v31)
      {
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
    }
    swift_release();
    (*v84)(v88, v85);
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_28;
  }
  uint64_t v87 = v3;
  swift_bridgeObjectRelease();
  id v46 = _swiftEmptyArrayStorage;
LABEL_29:
  uint64_t v95 = (void *)sub_100008580(&qword_100093138);
  *(void *)&long long v94 = v46;
  sub_10000AA1C(&v94, v90);
  unint64_t v51 = v89;
  char v52 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v92 = v51;
  sub_100027D9C(v90, 0x6E6F436172747865, 0xEC000000746E6574, v52);
  unint64_t v53 = v92;
  unint64_t v89 = v92;
  swift_bridgeObjectRelease();
  uint64_t v54 = dispatch thunk of FBKSInteraction.diagnostics.getter();
  if (v55)
  {
    uint64_t v95 = &type metadata for String;
    *(void *)&long long v94 = v54;
    *((void *)&v94 + 1) = v55;
    sub_10000AA1C(&v94, v90);
    char v56 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v92 = v53;
    unint64_t v89 = 0x8000000000000000;
    sub_100027D9C(v90, 0x74736F6E67616964, 0xEB00000000736369, v56);
    unint64_t v57 = v92;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100070358(0x74736F6E67616964, 0xEB00000000736369, &v94);
    sub_10000A738((uint64_t)&v94, (uint64_t *)&unk_100093910);
    unint64_t v57 = v89;
  }
  uint64_t v95 = &type metadata for Int;
  *(void *)&long long v94 = 1;
  sub_10000AA1C(&v94, v90);
  char v58 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v92 = v57;
  sub_100027D9C(v90, 0x6E6F6973726576, 0xE700000000000000, v58);
  swift_bridgeObjectRelease();
  os_log_type_t v59 = self;
  Class v60 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)&long long v94 = 0;
  id v61 = [v59 dataWithJSONObject:v60 options:v80 error:&v94];

  id v62 = (id)v94;
  if (v61)
  {
    uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v65 = v64;

    switch(v65 >> 62)
    {
      case 1uLL:
        if (v63 >> 32 < (int)v63) {
          __break(1u);
        }
        sub_10001866C(v63, v65);
        swift_retain();
        uint64_t v74 = v87;
        uint64_t v75 = sub_100014F6C((int)v63, v63 >> 32, v65 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1000151D8);
        if (v74) {
          goto LABEL_55;
        }
        a1 = v75;
        uint64_t v77 = v76;
        sub_1000185C0(v63, v65);
        if (!v77) {
          goto LABEL_43;
        }
        goto LABEL_50;
      case 2uLL:
        uint64_t v68 = v87;
        uint64_t v69 = *(void *)(v63 + 16);
        uint64_t v70 = *(void *)(v63 + 24);
        sub_10001866C(v63, v65);
        swift_retain();
        swift_retain();
        uint64_t v71 = sub_100014F6C(v69, v70, v65 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1000151D8);
        if (v68)
        {
          swift_release();
          swift_release();
          __break(1u);
LABEL_55:
          sub_1000185C0(v63, v65);
          __break(1u);
          JUMPOUT(0x100017E94);
        }
        a1 = v71;
        uint64_t v73 = v72;
        swift_release();
        swift_release();
        if (v73) {
          goto LABEL_50;
        }
LABEL_43:
        unint64_t v92 = v63;
        unint64_t v93 = v65;
        sub_10001866C(v63, v65);
        sub_100008580(&qword_100093140);
        if (swift_dynamicCast())
        {
          sub_1000186C4(v90, (uint64_t)&v94);
          sub_1000186DC(&v94, (uint64_t)v95);
          if (dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter())
          {
            sub_1000186DC(&v94, (uint64_t)v95);
            dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
            sub_1000185C0(v63, v65);
            a1 = *(void *)&v90[0];
            sub_10000A888((uint64_t)&v94);
            goto LABEL_51;
          }
          sub_10000A888((uint64_t)&v94);
        }
        else
        {
          uint64_t v91 = 0;
          memset(v90, 0, sizeof(v90));
          sub_10000A738((uint64_t)v90, &qword_100093148);
        }
        uint64_t v66 = sub_100014DB4(v63, v65);
LABEL_49:
        a1 = v66;
LABEL_50:
        sub_1000185C0(v63, v65);
LABEL_51:
        sub_1000185C0(v63, v65);
        break;
      case 3uLL:
        *(void *)((char *)v90 + 6) = 0;
        *(void *)&v90[0] = 0;
        sub_1000151D8((uint64_t *)&v94);
        sub_1000185C0(v63, v65);
        sub_1000185C0(v63, v65);
        return v94;
      default:
        *(void *)&long long v94 = v63;
        WORD4(v94) = v65;
        BYTE10(v94) = BYTE2(v65);
        BYTE11(v94) = BYTE3(v65);
        BYTE12(v94) = BYTE4(v65);
        BYTE13(v94) = BYTE5(v65);
        uint64_t v66 = static String._fromUTF8Repairing(_:)();
        goto LABEL_49;
    }
  }
  else
  {
    os_log_type_t v67 = v62;
    a1 = _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return a1;
}

void sub_100017EA4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FBKSInteraction.AnnotatedContent();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100008580(&qword_100093118);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v44 - v11;
  uint64_t v13 = sub_100008580(&qword_100093120);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v47 = (char *)&v44 - v17;
  if (qword_100092A08 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v50 = sub_100006040(v18, (uint64_t)qword_100093100);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  unint64_t v48 = v10;
  id v49 = v12;
  if (v21)
  {
    uint64_t v45 = v5;
    unint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    id v44 = v16;
    uint64_t v52 = v23;
    *(_DWORD *)unint64_t v22 = 136446210;
    uint64_t v51 = sub_100007E60(0xD00000000000001CLL, 0x800000010007D320, &v52);
    uint64_t v2 = v1;
    uint64_t v5 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s", v22, 0xCu);
    swift_arrayDestroy();
    uint64_t v16 = v44;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  char v24 = dispatch thunk of FBKSDonation.usesAnnotatedContent.getter();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  if (v24)
  {
    if (v27)
    {
      unint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Writing AnnotatedContent flow to write Donation", v28, 2u);
      swift_slowDealloc();
    }

    sub_1000171EC(a1, 0);
    if (!v2)
    {
      dispatch thunk of FBKSInteraction.diagnostics.setter();
      dispatch thunk of FBKSInteraction.diagnostics.getter();
      if (v29)
      {
        uint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v30, v31))
        {
          id v44 = v16;
          uint64_t v32 = (uint8_t *)swift_slowAlloc();
          uint64_t v45 = v5;
          *(_DWORD *)uint64_t v32 = 134217984;
          uint64_t v52 = String.count.getter();
          uint64_t v16 = v44;
          uint64_t v5 = v45;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "diagnostics JSON string size: %ld", v32, 0xCu);
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease();
        }
      }
      uint64_t v34 = (uint64_t)v49;
      dispatch thunk of FBKSInteraction.originalAnnotatedContent.getter();
      unint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v35(v34, 1, v4))
      {
        sub_10000A738(v34, &qword_100093118);
        uint64_t v36 = type metadata accessor for FBKSInteraction.Content();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v47, 1, 1, v36);
      }
      else
      {
        uint64_t v37 = v46;
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v46, v34, v4);
        sub_10000A738(v34, &qword_100093118);
        unint64_t v38 = v47;
        FBKSInteraction.AnnotatedContent.payload.getter();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v37, v4);
        uint64_t v39 = type metadata accessor for FBKSInteraction.Content();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
      }
      uint64_t v40 = (uint64_t)v48;
      dispatch thunk of FBKSInteraction.originalContent.setter();
      dispatch thunk of FBKSInteraction.generatedAnnotatedContent.getter();
      if (v35(v40, 1, v4))
      {
        sub_10000A738(v40, &qword_100093118);
        uint64_t v41 = type metadata accessor for FBKSInteraction.Content();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v16, 1, 1, v41);
      }
      else
      {
        uint64_t v42 = v46;
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v46, v40, v4);
        sub_10000A738(v40, &qword_100093118);
        FBKSInteraction.AnnotatedContent.payload.getter();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v42, v4);
        uint64_t v43 = type metadata accessor for FBKSInteraction.Content();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v16, 0, 1, v43);
      }
      dispatch thunk of FBKSInteraction.generatedContent.setter();
    }
  }
  else
  {
    if (v27)
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Donation doesn't have annotated content", v33, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000185C0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

unint64_t sub_100018618()
{
  unint64_t result = qword_100093130;
  if (!qword_100093130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100093130);
  }
  return result;
}

uint64_t sub_10001866C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_1000186C4(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *sub_1000186DC(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100018720()
{
  unint64_t result = qword_100093150;
  if (!qword_100093150)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100093150);
  }
  return result;
}

uint64_t sub_100018760(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000185C0(a1, a2);
  }
  return a1;
}

uint64_t sub_100018774(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for FBKSInteraction.AnnotatedContent();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000187B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580((uint64_t *)&unk_100093910);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018820(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100008580(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t destroy for AnnotatedDonationCoder.CoderError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s9feedbackd22AnnotatedDonationCoderV10CoderErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for AnnotatedDonationCoder.CoderError(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AnnotatedDonationCoder.CoderError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for AnnotatedDonationCoder.CoderError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnotatedDonationCoder.CoderError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AnnotatedDonationCoder.CoderError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_100018AB0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100018AC8(void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnotatedDonationCoder.CoderError()
{
  return &type metadata for AnnotatedDonationCoder.CoderError;
}

uint64_t sub_100018AF8()
{
  id v0 = [objc_allocWithZone((Class)type metadata accessor for FBKSLaunchConfiguration()) init];
  swift_bridgeObjectRetain();
  dispatch thunk of FBKSLaunchConfiguration.localizedPromptTitle.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of FBKSLaunchConfiguration.localizedPromptMessage.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewProceedButtonTitle.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewDeclineButtonTitle.setter();
  dispatch thunk of FBKSLaunchConfiguration.skipsPrompt.setter();
  dispatch thunk of FBKSLaunchConfiguration.alwaysLaunchInRemoteAlert.setter();
  FBKSPromptStyle.rawValue.getter();
  uint64_t result = FBKSPromptStyle.init(rawValue:)();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    dispatch thunk of FBKSLaunchConfiguration.promptStyle.setter();
    dispatch thunk of FBKSLaunchConfiguration.notifyImmediately.setter();
    return (uint64_t)v0;
  }
  return result;
}

uint64_t sub_100018BD0@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  sub_100018DE4(v2, (uint64_t)v30);
  sub_100018DE4((uint64_t)v30, (uint64_t)&v31);
  object = v32;
  if (v32)
  {
    uint64_t countAndFlagsBits = v31;
  }
  else
  {
    if (a1)
    {
      unint64_t v8 = 0xD000000000000014;
      unint64_t v9 = 0x800000010007D620;
    }
    else
    {
      unint64_t v9 = 0x800000010007D530;
      unint64_t v8 = 0xD000000000000016;
    }
    Swift::String v10 = FBKSLocalizedString(key:)(*(Swift::String *)&v8);
    uint64_t countAndFlagsBits = v10._countAndFlagsBits;
    object = v10._object;
  }
  sub_100018DE4(v3 + 16, (uint64_t)v29);
  sub_100018DE4((uint64_t)v29, (uint64_t)&v33);
  uint64_t v11 = v34;
  if (v34)
  {
    uint64_t v12 = v33;
    sub_100018E4C((uint64_t)v30);
  }
  else
  {
    sub_100018E4C((uint64_t)v30);
    if (a1)
    {
      unint64_t v13 = 0x800000010007D600;
      unint64_t v14 = 0xD000000000000016;
    }
    else
    {
      unint64_t v14 = 0xD000000000000018;
      unint64_t v13 = 0x800000010007D550;
    }
    Swift::String v15 = FBKSLocalizedString(key:)(*(Swift::String *)&v14);
    uint64_t v12 = v15._countAndFlagsBits;
    uint64_t v11 = v15._object;
  }
  sub_100018DE4(v3 + 32, (uint64_t)v28);
  sub_100018DE4((uint64_t)v28, (uint64_t)&v35);
  uint64_t v16 = v36;
  if (v36)
  {
    uint64_t v17 = v35;
    sub_100018E4C((uint64_t)v29);
  }
  else
  {
    sub_100018E4C((uint64_t)v29);
    if (a1)
    {
      unint64_t v18 = 0xD000000000000028;
      uint64_t v19 = "DEFAULT_SURVEY_ALERT_VIEW_PROCEED_BUTTON";
    }
    else
    {
      unint64_t v18 = 0xD00000000000002ALL;
      uint64_t v19 = "DEFAULT_FEEDBACK_ALERT_VIEW_PROCEED_BUTTON";
    }
    unint64_t v20 = (unint64_t)(v19 - 32) | 0x8000000000000000;
    Swift::String v21 = FBKSLocalizedString(key:)(*(Swift::String *)&v18);
    uint64_t v17 = v21._countAndFlagsBits;
    uint64_t v16 = v21._object;
  }
  sub_100018DE4(v3 + 48, (uint64_t)v27);
  sub_100018DE4((uint64_t)v27, (uint64_t)&v37);
  unint64_t v22 = v38;
  if (v38)
  {
    uint64_t v23 = v37;
    sub_100018E4C((uint64_t)v28);
  }
  else
  {
    sub_100018E4C((uint64_t)v28);
    v24._uint64_t countAndFlagsBits = 0xD000000000000029;
    v24._object = (void *)0x800000010007D5A0;
    Swift::String v25 = FBKSLocalizedString(key:)(v24);
    uint64_t v23 = v25._countAndFlagsBits;
    unint64_t v22 = v25._object;
  }
  uint64_t result = sub_100018E4C((uint64_t)v27);
  *a2 = countAndFlagsBits;
  a2[1] = (uint64_t)object;
  a2[2] = v12;
  a2[3] = (uint64_t)v11;
  a2[4] = v17;
  a2[5] = (uint64_t)v16;
  a2[6] = v23;
  a2[7] = (uint64_t)v22;
  return result;
}

uint64_t sub_100018DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_100093178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018E4C(uint64_t a1)
{
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for SendableLaunchConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for SendableLaunchConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SendableLaunchConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SendableLaunchConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

__n128 initializeWithTake for SendableLaunchConfiguration(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SendableLaunchConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for SendableLaunchConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SendableLaunchConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SendableLaunchConfiguration()
{
  return &type metadata for SendableLaunchConfiguration;
}

uint64_t sub_1000191CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v39[1] = a3;
  uint64_t v5 = type metadata accessor for FBKSForm.Question();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100008580(&qword_100093180);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v47 = (char *)v39 - v13;
  objc_allocWithZone((Class)type metadata accessor for FBKSForm());
  swift_bridgeObjectRetain();
  uint64_t v14 = FBKSForm.init(identifier:)();
  uint64_t v15 = *(void *)(a4 + 64);
  uint64_t v40 = a4 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v42 = v6 + 16;
  uint64_t v43 = v6;
  uint64_t v45 = (uint64_t (**)(char *, uint64_t))(v6 + 8);
  id v46 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
  int64_t v41 = (unint64_t)(v16 + 63) >> 6;
  v39[0] = v41 - 1;
  uint64_t v44 = a4;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v48 = 0;
  unint64_t v20 = (uint64_t *)&unk_100093188;
  while (1)
  {
    if (v18)
    {
      unint64_t v21 = __clz(__rbit64(v18));
      uint64_t v22 = (v18 - 1) & v18;
      uint64_t v23 = (uint64_t)v47;
      unint64_t v24 = v21 | (v48 << 6);
LABEL_7:
      uint64_t v25 = v44;
      (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v12, *(void *)(v44 + 48) + *(void *)(v43 + 72) * v24, v5);
      uint64_t v26 = *(void *)(v25 + 56);
      uint64_t v27 = sub_100008580(v20);
      *(void *)&v12[*(int *)(v27 + 48)] = *(void *)(v26 + 8 * v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v12, 0, 1, v27);
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
    uint64_t v23 = (uint64_t)v47;
    int64_t v28 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v28 < v41)
    {
      unint64_t v29 = *(void *)(v40 + 8 * v28);
      if (v29) {
        goto LABEL_11;
      }
      int64_t v30 = v48 + 2;
      ++v48;
      if (v28 + 1 < v41)
      {
        unint64_t v29 = *(void *)(v40 + 8 * v30);
        if (v29) {
          goto LABEL_14;
        }
        int64_t v48 = v28 + 1;
        if (v28 + 2 < v41)
        {
          unint64_t v29 = *(void *)(v40 + 8 * (v28 + 2));
          if (v29)
          {
            v28 += 2;
            goto LABEL_11;
          }
          int64_t v30 = v28 + 3;
          int64_t v48 = v28 + 2;
          if (v28 + 3 < v41) {
            break;
          }
        }
      }
    }
LABEL_25:
    uint64_t v31 = sub_100008580(v20);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v12, 1, 1, v31);
    uint64_t v22 = 0;
LABEL_26:
    sub_100019684((uint64_t)v12, v23);
    uint64_t v32 = sub_100008580(v20);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v23, 1, v32) == 1)
    {
      swift_release();
      dispatch thunk of FBKSForm.authenticationMethod.setter();
      return v14;
    }
    unint64_t v49 = v22;
    uint64_t v33 = v20;
    uint64_t v34 = v12;
    uint64_t v35 = *(void *)(v23 + *(int *)(v32 + 48));
    uint64_t v36 = v5;
    (*v46)(v8, v23, v5);
    uint64_t v37 = *(void *)(v35 + 16);
    if (v37)
    {
      uint64_t v38 = v35 + 40;
      do
      {
        swift_bridgeObjectRetain();
        dispatch thunk of FBKSForm.prefill(question:answer:)();
        swift_bridgeObjectRelease();
        v38 += 16;
        --v37;
      }
      while (v37);
    }
    swift_bridgeObjectRelease();
    uint64_t v5 = v36;
    uint64_t result = (*v45)(v8, v36);
    uint64_t v12 = v34;
    unint64_t v20 = v33;
    unint64_t v18 = v49;
  }
  unint64_t v29 = *(void *)(v40 + 8 * v30);
  if (v29)
  {
LABEL_14:
    int64_t v28 = v30;
LABEL_11:
    uint64_t v22 = (v29 - 1) & v29;
    unint64_t v24 = __clz(__rbit64(v29)) + (v28 << 6);
    int64_t v48 = v28;
    goto LABEL_7;
  }
  while (1)
  {
    int64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v28 >= v41)
    {
      int64_t v48 = v39[0];
      goto LABEL_25;
    }
    unint64_t v29 = *(void *)(v40 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_11;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100019684(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_100093180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for SendableForm()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SendableForm(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SendableForm(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SendableForm(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for SendableForm(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SendableForm(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SendableForm(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SendableForm()
{
  return &type metadata for SendableForm;
}

uint64_t CFBBiomeDonator.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  CFBBiomeDonator.init()();
  return v0;
}

void *CFBBiomeDonator.init()()
{
  swift_defaultActor_initialize();
  id v1 = [(id)BiomeLibrary() Feedback];
  swift_unknownObjectRelease();
  id v2 = [v1 EvaluationResponse];
  swift_unknownObjectRelease();
  id v3 = [v2 source];

  v0[14] = v3;
  id v4 = [(id)BiomeLibrary() Feedback];
  swift_unknownObjectRelease();
  id v5 = [v4 TextToTextEvaluationData];
  swift_unknownObjectRelease();
  id v6 = [v5 source];

  v0[15] = v6;
  id v7 = [(id)BiomeLibrary() Feedback];
  swift_unknownObjectRelease();
  id v8 = [v7 TextToImageEvaluationData];
  swift_unknownObjectRelease();
  id v9 = [v8 source];

  v0[16] = v9;
  id v10 = [(id)BiomeLibrary() Feedback];
  swift_unknownObjectRelease();
  id v11 = [v10 TextImageToImageEvaluationData];
  swift_unknownObjectRelease();
  id v12 = [v11 source];

  v0[17] = v12;
  return v0;
}

void CFBBiomeDonator.write(donation:)(void *a1)
{
  id v3 = v1;
  sub_100017EA4((uint64_t)a1);
  if (!v2)
  {
    char v5 = sub_1000403CC();
    if (v5)
    {
      if (v5 == 1)
      {
        sub_10000C524(0, &qword_100093198);
        id v6 = sub_100040B18(a1);
        id v7 = (void *)v3[16];
      }
      else
      {
        sub_10000C524(0, &qword_100093190);
        id v6 = sub_100041020(a1);
        id v7 = (void *)v3[17];
      }
    }
    else
    {
      sub_10000C524(0, &qword_1000931A0);
      id v6 = sub_100040ADC(a1);
      id v7 = (void *)v3[15];
    }
    [v7 sendEvent:v6];
  }
}

void CFBBiomeDonator.write(evaluation:)(void *a1)
{
  uint64_t v3 = v1;
  sub_10000C524(0, &qword_1000931A8);
  id v5 = sub_1000414F0(a1);
  if (!v2)
  {
    id v6 = v5;
    [*(id *)(v3 + 112) sendEvent:v5];
  }
}

void CFBBiomeDonator.invalidate(evaluationID:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100008580((uint64_t *)&unk_100094200);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  id v10 = [objc_allocWithZone((Class)BMFeedbackEvaluationResponse) initWithEvaluationUuid:isa userResponse:6];

  [*(id *)(v2 + 112) sendEvent:v10];
}

id *CFBBiomeDonator.deinit()
{
  swift_defaultActor_destroy();
  return v0;
}

uint64_t CFBBiomeDonator.__deallocating_deinit()
{
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for CFBBiomeDonator()
{
  return self;
}

unint64_t sub_100019EF4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100008580(&qword_100093298);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v34 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v33 = (unint64_t)(63 - v3) >> 6;
  id v6 = v47;
  uint64_t v7 = v45;
  uint64_t v8 = &v40;
  id v9 = &v42;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v35 = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v18 = v35 + 1;
  if (__OFADD__(v35, 1)) {
    goto LABEL_35;
  }
  if (v18 >= v33) {
    goto LABEL_32;
  }
  unint64_t v19 = *(void *)(v34 + 8 * v18);
  int64_t v20 = v35 + 1;
  if (!v19)
  {
    int64_t v20 = v35 + 2;
    if (v35 + 2 >= v33) {
      goto LABEL_32;
    }
    unint64_t v19 = *(void *)(v34 + 8 * v20);
    if (!v19)
    {
      int64_t v20 = v35 + 3;
      if (v35 + 3 >= v33) {
        goto LABEL_32;
      }
      unint64_t v19 = *(void *)(v34 + 8 * v20);
      if (!v19)
      {
        int64_t v20 = v35 + 4;
        if (v35 + 4 >= v33) {
          goto LABEL_32;
        }
        unint64_t v19 = *(void *)(v34 + 8 * v20);
        if (!v19)
        {
          int64_t v21 = v35 + 5;
          if (v35 + 5 < v33)
          {
            unint64_t v19 = *(void *)(v34 + 8 * v21);
            if (v19)
            {
              int64_t v20 = v35 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v20 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_36;
              }
              if (v20 >= v33) {
                break;
              }
              unint64_t v19 = *(void *)(v34 + 8 * v20);
              ++v21;
              if (v19) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_10001AF20();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  int64_t v35 = v20;
  uint64_t v36 = (v19 - 1) & v19;
  for (unint64_t i = __clz(__rbit64(v19)) + (v20 << 6); ; unint64_t i = __clz(__rbit64(v5)) | (v35 << 6))
  {
    uint64_t v22 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    sub_10000A7E0(*(void *)(v1 + 56) + 32 * i, (uint64_t)v6);
    *(void *)&long long v46 = v24;
    *((void *)&v46 + 1) = v23;
    long long v44 = v46;
    v45[0] = v47[0];
    v45[1] = v47[1];
    uint64_t v38 = v24;
    uint64_t v39 = v23;
    sub_10000AA1C(v7, &v37);
    swift_bridgeObjectRetain();
    sub_100008580((uint64_t *)&unk_100093910);
    swift_dynamicCast();
    uint64_t v26 = v38;
    uint64_t v25 = v39;
    sub_1000187B8((uint64_t)v8, (uint64_t)v9);
    sub_1000187B8((uint64_t)v9, (uint64_t)v43);
    sub_1000187B8((uint64_t)v43, (uint64_t)v41);
    unint64_t result = sub_100025B84(v26, v25);
    unint64_t v27 = result;
    if (v28)
    {
      uint64_t v11 = v9;
      id v12 = v8;
      uint64_t v13 = v1;
      uint64_t v14 = v7;
      uint64_t v15 = v6;
      uint64_t v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v16 = v26;
      v16[1] = v25;
      id v6 = v15;
      uint64_t v7 = v14;
      uint64_t v1 = v13;
      uint64_t v8 = v12;
      id v9 = v11;
      unint64_t result = sub_10001AF28((uint64_t)v41, v2[7] + 32 * v27);
      unint64_t v5 = v36;
      if (!v36) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v29 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v29 = v26;
    v29[1] = v25;
    unint64_t result = sub_1000187B8((uint64_t)v41, v2[7] + 32 * result);
    uint64_t v30 = v2[2];
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_34;
    }
    v2[2] = v32;
    unint64_t v5 = v36;
    if (!v36) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v36 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10001A294(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100008580(&qword_100093290);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  id v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_10000AA1C(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_10000AA1C(v35, v36);
    sub_10000AA1C(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_10000AA1C(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_10001AF20();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_10001A654(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100008580(&qword_100093288);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  id v6 = &v37;
  uint64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = (char *)&type metadata for Any + 8;
  unint64_t v11 = &type metadata for String;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_10001AF20();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    BOOL v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_10000AA1C(v6, v7);
    sub_10000AA1C(v7, v40);
    sub_10000AA1C(v40, &v38);
    unint64_t result = sub_100025B84(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      unint64_t v12 = v7;
      int64_t v13 = v6;
      uint64_t v14 = v1;
      int64_t v15 = v11;
      int64_t v16 = v10;
      uint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v17 = v35;
      v17[1] = v36;
      uint64_t v10 = v16;
      unint64_t v11 = v15;
      uint64_t v1 = v14;
      id v6 = v13;
      uint64_t v7 = v12;
      int64_t i = v33;
      uint64_t v18 = (_OWORD *)(v2[7] + 32 * v25);
      sub_10000A888((uint64_t)v18);
      unint64_t result = (unint64_t)sub_10000AA1C(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v27 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)sub_10000AA1C(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_10001A9C0(char a1)
{
  unint64_t result = 0xD000000000000048;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      return result;
    case 4:
    case 6:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 5:
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v3._uint64_t countAndFlagsBits = static Strings.fbaBundleIdentifier.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 7:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 8:
      unint64_t result = 0xD00000000000001FLL;
      break;
    default:
      unint64_t result = 0xD000000000000010;
      break;
  }
  return result;
}

unint64_t sub_10001AB10@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10001AC74(*a1);
  *a2 = result;
  return result;
}

void sub_10001AB3C(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10001AB48(uint64_t a1)
{
  unint64_t v2 = sub_10001B0F0();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001AB84(uint64_t a1)
{
  unint64_t v2 = sub_10001B0F0();
  unint64_t v3 = sub_10001B144();
  unint64_t v4 = sub_10000BA88();

  return Error<>._code.getter(a1, v2, v3, v4);
}

unint64_t sub_10001ABE0()
{
  return sub_10001A9C0(*v0);
}

uint64_t sub_10001ABEC()
{
  return *v0;
}

unint64_t sub_10001ABF4()
{
  char v1 = *v0;
  sub_100008580(&qword_1000932B8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10007B630;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v3;
  unint64_t v4 = sub_10001A9C0(v1);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = v5;
  return sub_100023734(inited);
}

unint64_t sub_10001AC74(unint64_t result)
{
  if (result >= 9) {
    return 9;
  }
  return result;
}

id sub_10001AC84(uint64_t a1, unint64_t a2)
{
  if (qword_100092AF0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100006040(v4, (uint64_t)SharedLog);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    sub_100007E60(a1, a2, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_100008580(&qword_100093960);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10007B630;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v9;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_10002386C(inited);
  static Strings.Daemon.errorDomain.getter();
  sub_10001A654(v10);
  swift_bridgeObjectRelease();
  id v11 = objc_allocWithZone((Class)NSError);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v14 = [v11 initWithDomain:v12 code:0 userInfo:isa];

  return v14;
}

uint64_t sub_10001AF20()
{
  return swift_release();
}

uint64_t sub_10001AF28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580((uint64_t *)&unk_100093910);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for FeedbackdError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001B05CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedbackdError()
{
  return &type metadata for FeedbackdError;
}

unint64_t sub_10001B09C()
{
  unint64_t result = qword_1000932A0;
  if (!qword_1000932A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000932A0);
  }
  return result;
}

unint64_t sub_10001B0F0()
{
  unint64_t result = qword_1000932A8;
  if (!qword_1000932A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000932A8);
  }
  return result;
}

unint64_t sub_10001B144()
{
  unint64_t result = qword_1000932B0;
  if (!qword_1000932B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000932B0);
  }
  return result;
}

uint64_t sub_10001B198()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_1000932C0);
  sub_100006040(v0, (uint64_t)qword_1000932C0);
  static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10001B20C()
{
  sub_100008580(&qword_100093308);
  uint64_t v0 = type metadata accessor for FBKSInteraction.FeatureDomain();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10007B7B0;
  unint64_t v5 = v4 + v3;
  unsigned int v6 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v6(v5, enum case for FBKSInteraction.FeatureDomain.mailSummarization(_:), v0);
  v6(v5 + v2, enum case for FBKSInteraction.FeatureDomain.messagesSummarization(_:), v0);
  uint64_t v7 = sub_10001C8A4(v4);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t result = swift_deallocClassInstance();
  qword_1000932D8 = (uint64_t)v7;
  return result;
}

uint64_t sub_10001B348()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FBKSInteraction.FeatureDomain();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
  __chkstk_darwin(v6 - 8);
  int64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001FD64(v1, (uint64_t)v8, type metadata accessor for CFBDonationCheck.Result.Invalid);
  uint64_t v9 = sub_100008580(&qword_1000932E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9) == 1) {
    return 0x676E696C706D6173;
  }
  id v11 = (uint64_t *)&v8[*(int *)(v9 + 48)];
  uint64_t v12 = *v11;
  int64_t v13 = (void *)v11[1];
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
  uint64_t v20 = 0;
  unint64_t v21 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  uint64_t v14 = FBKSInteraction.FeatureDomain.description.getter();
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v20 = v14;
  unint64_t v21 = v16;
  v17._object = (void *)0x800000010007D830;
  v17._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = v12;
  v18._object = v13;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  uint64_t v10 = v20;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v10;
}

uint64_t type metadata accessor for CFBDonationCheck.Result.Invalid(uint64_t a1)
{
  return sub_10001F188(a1, (uint64_t *)&unk_100093428);
}

uint64_t sub_10001B5A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FBKSInteraction.FeatureDomain();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = type metadata accessor for CFBDonationCheck.Result(0);
  __chkstk_darwin(v13 - 8);
  unint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001FD64(v1, (uint64_t)v15, type metadata accessor for CFBDonationCheck.Result);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6) == 1) {
    return 0x64696C6176;
  }
  sub_10001FDCC((uint64_t)v15, (uint64_t)v12);
  sub_10001FD64((uint64_t)v12, (uint64_t)v10, type metadata accessor for CFBDonationCheck.Result.Invalid);
  uint64_t v17 = sub_100008580(&qword_1000932E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v10, 1, v17) == 1)
  {
    uint64_t v16 = 0x676E696C706D6173;
  }
  else
  {
    Swift::String v18 = (uint64_t *)&v10[*(int *)(v17 + 48)];
    uint64_t v19 = *v18;
    uint64_t v20 = (void *)v18[1];
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v10, v2);
    uint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    uint64_t v21 = FBKSInteraction.FeatureDomain.description.getter();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v27 = v21;
    unint64_t v28 = v23;
    v24._object = (void *)0x800000010007D830;
    v24._uint64_t countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v24);
    v25._uint64_t countAndFlagsBits = v19;
    v25._object = v20;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    uint64_t v16 = v27;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  sub_10001E9B4((uint64_t)v12);
  return v16;
}

uint64_t sub_10001B8EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FBKSInteraction.AnnotatedContent();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100008580(&qword_100093118);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of FBKSInteraction.originalAnnotatedContent.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2))
  {
    sub_10000A738((uint64_t)v8, &qword_100093118);
    return dispatch thunk of FBKSInteraction.originalContent.getter();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    sub_10000A738((uint64_t)v8, &qword_100093118);
    FBKSInteraction.AnnotatedContent.payload.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v12, v9);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
  }
}

uint64_t sub_10001BB48(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = type metadata accessor for FBKSInteraction.FeatureDomain();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_10001BC08, 0, 0);
}

uint64_t sub_10001BC08()
{
  uint64_t v36 = v0;
  unint64_t v1 = sub_10001C500(0x20000000000001uLL);
  if (v1 != 0x20000000000000 && (double)v1 * 1.11022302e-16 + 0.0 > 1.0)
  {
    if (qword_100092A10 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100006040(v2, (uint64_t)qword_1000932C0);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Dropping donation due to sampling rate", v5, 2u);
      swift_slowDealloc();
    }
    uint64_t v6 = v0[4];

    uint64_t v7 = sub_100008580(&qword_1000932E0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
    uint64_t v8 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 0, 1, v8);
    goto LABEL_16;
  }
  if (qword_100092A18 != -1) {
    swift_once();
  }
  uint64_t v10 = v0[7];
  uint64_t v9 = v0[8];
  uint64_t v11 = v0[6];
  uint64_t v12 = qword_1000932D8;
  dispatch thunk of FBKSInteraction.featureDomain.getter();
  char v13 = sub_100004A24(v9, v12);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v14(v9, v11);
  if ((v13 & 1) == 0)
  {
    uint64_t v26 = v0[4];
    uint64_t v27 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
LABEL_16:
    swift_task_dealloc();
    unint64_t v28 = (uint64_t (*)(void))v0[1];
    return v28();
  }
  if (qword_100092A10 != -1) {
    swift_once();
  }
  unint64_t v15 = (void *)v0[5];
  uint64_t v16 = type metadata accessor for Logger();
  v0[9] = sub_100006040(v16, (uint64_t)qword_1000932C0);
  id v17 = v15;
  Swift::String v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = v0[8];
    os_log_type_t type = v19;
    uint64_t v21 = v0[6];
    int64_t v33 = (void *)v0[5];
    unint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)unint64_t v22 = 136315138;
    dispatch thunk of FBKSInteraction.featureDomain.getter();
    sub_10001DCF4(&qword_1000932F8, (void (*)(uint64_t))&type metadata accessor for FBKSInteraction.FeatureDomain);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v25 = v24;
    v14(v20, v21);
    v0[3] = sub_100007E60(v23, v25, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v18, type, "Feature domain: %s is contained within domains to check spotlight index dupes, will validate", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v30 = (void *)v0[5];
  }
  int64_t v31 = (void *)swift_task_alloc();
  v0[10] = v31;
  *int64_t v31 = v0;
  v31[1] = sub_10001C10C;
  uint64_t v32 = v0[5];
  return sub_10001D2DC(v32);
}

uint64_t sub_10001C10C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 88) = a1;
  *(void *)(v3 + 96) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_10001C20C, 0, 0);
}

uint64_t sub_10001C20C()
{
  os_log_type_t v19 = v0;
  unint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = v0[11];
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      swift_bridgeObjectRetain();
      v0[2] = sub_100007E60(v4, v1, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Found duplicate donation ID: %s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v11 = v0[11];
    uint64_t v12 = v0[4];
    uint64_t v13 = sub_100008580(&qword_1000932E0);
    uint64_t v14 = (void *)(v12 + *(int *)(v13 + 48));
    dispatch thunk of FBKSInteraction.featureDomain.getter();
    *uint64_t v14 = v11;
    v14[1] = v1;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 0, 1, v13);
    uint64_t v15 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 0, 1, v15);
  }
  else
  {
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, (os_log_type_t)v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, (os_log_type_t)v7, "SpotlightID is not a duplicate", v8, 2u);
      swift_slowDealloc();
    }

    uint64_t v9 = v0[4];
    uint64_t v10 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  }
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

unint64_t sub_10001C500(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    uint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_10001C58C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100008580(&qword_100093318);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    int64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_10001DCF4(&qword_100093320, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_10001DCF4(&qword_100093328, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          unint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        unint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_10001C8A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FBKSInteraction.FeatureDomain();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100008580(&qword_100093310);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    int64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_10001DCF4(&qword_100092C70, (void (*)(uint64_t))&type metadata accessor for FBKSInteraction.FeatureDomain);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_10001DCF4(&qword_100092C78, (void (*)(uint64_t))&type metadata accessor for FBKSInteraction.FeatureDomain);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          unint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        unint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_10001CBBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100008580(&qword_100093300);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FBKSInteraction.StructuredValue();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (void *)((char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v45 = (char *)v43 - v13;
  uint64_t v14 = sub_100008580(&qword_100093120);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)v43 - v18;
  sub_10001B8EC((uint64_t)v43 - v18);
  sub_10001DC8C((uint64_t)v19, (uint64_t)v17);
  uint64_t v20 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v17, 1, v20) == 1)
  {
    sub_10000A738((uint64_t)v17, &qword_100093120);
LABEL_9:
    if (qword_100092A10 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100006040(v27, (uint64_t)qword_1000932C0);
    BOOL v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "donation has no structured content", v30, 2u);
      swift_slowDealloc();
    }

LABEL_14:
    sub_10000A738((uint64_t)v19, &qword_100093120);
    return 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v21 + 88))(v17, v20) != enum case for FBKSInteraction.Content.structured(_:))
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v20);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t))(v21 + 96))(v17, v20);
  uint64_t v22 = v45;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v45, v17, v8);
  char v23 = *(void (**)(uint64_t *, char *, uint64_t))(v9 + 16);
  v23(v12, v22, v8);
  long long v44 = *(unsigned int (**)(uint64_t *, uint64_t))(v9 + 88);
  if (v44(v12, v8) != enum case for FBKSInteraction.StructuredValue.dictionary(_:))
  {
    uint64_t v32 = *(void (**)(uint64_t *, uint64_t))(v9 + 8);
    v32(v12, v8);
    if (qword_100092A10 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100006040(v33, (uint64_t)qword_1000932C0);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "structured content is not a dictionary", v36, 2u);
      swift_slowDealloc();
    }

    v32((uint64_t *)v45, v8);
    goto LABEL_14;
  }
  v43[0] = *(void *)(v9 + 96);
  v43[1] = v9 + 96;
  ((void (*)(uint64_t *, uint64_t))v43[0])(v12, v8);
  uint64_t v24 = *v12;
  if (*(void *)(v24 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v25 = sub_100025B84(a2, a3);
    if (v26)
    {
      v23((uint64_t *)v7, (char *)(*(void *)(v24 + 56) + *(void *)(v9 + 72) * v25), v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10000A738((uint64_t)v7, &qword_100093300);
LABEL_28:
    if (qword_100092A10 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100006040(v39, (uint64_t)qword_1000932C0);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "dictionary is not a string", v42, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v45, v8);
    goto LABEL_14;
  }
  unsigned int v37 = v44((uint64_t *)v7, v8);
  long long v38 = *(void (**)(char *, uint64_t))(v9 + 8);
  if (v37 != enum case for FBKSInteraction.StructuredValue.string(_:))
  {
    v38(v7, v8);
    goto LABEL_28;
  }
  v38(v45, v8);
  sub_10000A738((uint64_t)v19, &qword_100093120);
  ((void (*)(char *, uint64_t))v43[0])(v7, v8);
  return *(void *)v7;
}

uint64_t sub_10001D2DC(uint64_t a1)
{
  v1[17] = a1;
  uint64_t v2 = type metadata accessor for FBKSInteraction.FeatureDomain();
  v1[18] = v2;
  v1[19] = *(void *)(v2 - 8);
  v1[20] = swift_task_alloc();
  return _swift_task_switch(sub_10001D39C, 0, 0);
}

uint64_t sub_10001D39C()
{
  uint64_t v53 = v0;
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 144);
  dispatch thunk of FBKSInteraction.featureDomain.getter();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for FBKSInteraction.FeatureDomain.mailSummarization(_:))
  {
    uint64_t v5 = (void *)0xEF4449746867696CLL;
    uint64_t v6 = 0x746F70536C69616DLL;
  }
  else
  {
    if (v4 != enum case for FBKSInteraction.FeatureDomain.messagesSummarization(_:))
    {
      (*(void (**)(void, void))(*(void *)(v0 + 152) + 8))(*(void *)(v0 + 160), *(void *)(v0 + 144));
      if (qword_100092A10 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_100006040(v20, (uint64_t)qword_1000932C0);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v16, v17)) {
        goto LABEL_19;
      }
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      unint64_t v19 = "donation duplicate key is nil";
      goto LABEL_18;
    }
    uint64_t v6 = 0xD000000000000012;
    uint64_t v5 = (void *)0x800000010007D850;
  }
  uint64_t v7 = sub_10001CBBC(*(void *)(v0 + 136), v6, (uint64_t)v5);
  if (!v8)
  {
    swift_bridgeObjectRelease();
    if (qword_100092A10 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100006040(v15, (uint64_t)qword_1000932C0);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v17)) {
      goto LABEL_19;
    }
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    unint64_t v19 = "donation spotlightID is nil";
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v19, v18, 2u);
    swift_slowDealloc();
LABEL_19:

LABEL_38:
    uint64_t v47 = 0;
    uint64_t v10 = 0;
    goto LABEL_39;
  }
  uint64_t v9 = v7;
  uint64_t v10 = v8;
  if (qword_100092A10 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100006040(v11, (uint64_t)qword_1000932C0);
  swift_bridgeObjectRetain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    v52[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 128) = sub_100007E60(v9, (unint64_t)v10, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Will search for id: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  id v21 = [objc_allocWithZone((Class)BMSQLDatabase) init];
  v52[0] = 0;
  v52[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(255);
  v22._uint64_t countAndFlagsBits = 0xD0000000000000C7;
  v22._object = (void *)0x800000010007D870;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = v6;
  v23._object = v5;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 0xD000000000000023;
  v24._object = (void *)0x800000010007D940;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 0x524548570A290A22;
  v26._object = (void *)0xEE00223D64692045;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = v9;
  v27._object = v10;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = 34;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  os_log_type_t v29 = (void *)BMSQLDatabase.execute(query:)();
  swift_bridgeObjectRelease();
  [v29 next];
  id v30 = [v29 row];
  if (!v30)
  {
    swift_bridgeObjectRelease();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "No duplicate row for spotlightID existed", v42, 2u);
      swift_slowDealloc();
    }

    goto LABEL_38;
  }
  int64_t v31 = v30;
  uint64_t v50 = v29;
  uint64_t v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)(v0 + 88) = 0x746E756F63;
  *(void *)(v0 + 96) = 0xE500000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v32 + 16) && (unint64_t v33 = sub_100025B40(v0 + 16), (v34 & 1) != 0))
  {
    sub_10000A7E0(*(void *)(v32 + 56) + 32 * v33, v0 + 56);
  }
  else
  {
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10000A6E4(v0 + 16);
  if (!*(void *)(v0 + 80))
  {
    swift_bridgeObjectRelease();
    sub_10000A738(v0 + 56, (uint64_t *)&unk_100093910);
    os_log_type_t v35 = v50;
    uint64_t v43 = v21;
LABEL_35:
    long long v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      long long v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "duplicate row count existed, but count didn't exist", v46, 2u);
      swift_slowDealloc();
    }

    goto LABEL_38;
  }
  os_log_type_t v35 = v50;
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v43 = v21;
    goto LABEL_35;
  }
  uint64_t v51 = v9;
  uint64_t v36 = *(void *)(v0 + 104);
  swift_bridgeObjectRetain_n();
  unsigned int v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = swift_slowAlloc();
    v52[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 112) = sub_100007E60(v51, (unint64_t)v10, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v39 + 12) = 2048;
    *(void *)(v0 + 120) = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Duplicate count for spotlightID %s is %ld", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if (v36 <= 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  uint64_t v47 = v51;
LABEL_39:
  swift_task_dealloc();
  int64_t v48 = *(uint64_t (**)(uint64_t, void *))(v0 + 8);
  return v48(v47, v10);
}

uint64_t sub_10001DC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_100093120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001DCF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10001DD3C(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100008580(&qword_100093330);
      uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  uint64_t v7 = (char *)(v3 + 7);
  uint64_t v42 = v5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v10 = __OFADD__(v8++, 1);
      if (v10)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v11 = v9;
      Swift::Int v12 = NSObject._rawHashValue(seed:)(v3[5]);
      uint64_t v13 = -1 << *((unsigned char *)v3 + 32);
      unint64_t v14 = v12 & ~v13;
      unint64_t v15 = v14 >> 6;
      uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
      uint64_t v17 = 1 << v14;
      if (((1 << v14) & v16) != 0)
      {
        sub_10001E094();
        id v18 = *(id *)(v3[6] + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19)
        {
LABEL_11:
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(v3[6] + 8 * v14);
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            goto LABEL_11;
          }
        }
      }
      *(void *)&v7[8 * v15] = v17 | v16;
      *(void *)(v3[6] + 8 * v14) = v11;
      uint64_t v23 = v3[2];
      BOOL v10 = __OFADD__(v23, 1);
      uint64_t v24 = v23 + 1;
      if (v10) {
        goto LABEL_37;
      }
      v3[2] = v24;
LABEL_12:
      if (v8 == v42) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  uint64_t v41 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v41)
  {
    Swift::Int v26 = v3[5];
    id v27 = *(id *)(a1 + 32 + 8 * v25);
    Swift::Int v28 = NSObject._rawHashValue(seed:)(v26);
    uint64_t v29 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
    uint64_t v33 = 1 << v30;
    if (((1 << v30) & v32) != 0)
    {
      sub_10001E094();
      id v34 = *(id *)(v3[6] + 8 * v30);
      char v35 = static NSObject.== infix(_:_:)();

      if (v35) {
        goto LABEL_23;
      }
      uint64_t v36 = ~v29;
      unint64_t v30 = (v30 + 1) & v36;
      unint64_t v31 = v30 >> 6;
      uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
      uint64_t v33 = 1 << v30;
      if ((v32 & (1 << v30)) != 0)
      {
        while (1)
        {
          id v37 = *(id *)(v3[6] + 8 * v30);
          char v38 = static NSObject.== infix(_:_:)();

          if (v38) {
            break;
          }
          unint64_t v30 = (v30 + 1) & v36;
          unint64_t v31 = v30 >> 6;
          uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
          uint64_t v33 = 1 << v30;
          if ((v32 & (1 << v30)) == 0) {
            goto LABEL_31;
          }
        }
LABEL_23:

        uint64_t v5 = v42;
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v5 = v42;
    }
    *(void *)&v7[8 * v31] = v33 | v32;
    *(void *)(v3[6] + 8 * v30) = v27;
    uint64_t v39 = v3[2];
    BOOL v10 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v10) {
      goto LABEL_38;
    }
    v3[2] = v40;
LABEL_24:
    if (++v25 == v5) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

unint64_t sub_10001E094()
{
  unint64_t result = qword_1000939A0;
  if (!qword_1000939A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000939A0);
  }
  return result;
}

uint64_t *sub_10001E0D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v10 = sub_100008580(&qword_1000932E0);
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        memcpy(a1, a2, *(void *)(v8 + 64));
      }
      else
      {
        uint64_t v12 = type metadata accessor for FBKSInteraction.FeatureDomain();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        uint64_t v13 = *(int *)(v10 + 48);
        unint64_t v14 = (uint64_t *)((char *)a1 + v13);
        unint64_t v15 = (uint64_t *)((char *)a2 + v13);
        uint64_t v16 = v15[1];
        *unint64_t v14 = *v15;
        v14[1] = v16;
        uint64_t v17 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v11 + 56);
        swift_bridgeObjectRetain();
        v17(a1, 0, 1, v10);
      }
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10001E2FC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = sub_100008580(&qword_1000932E0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4);
    if (!result)
    {
      uint64_t v5 = type metadata accessor for FBKSInteraction.FeatureDomain();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

char *sub_10001E404(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = sub_100008580(&qword_1000932E0);
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }
    else
    {
      uint64_t v10 = type metadata accessor for FBKSInteraction.FeatureDomain();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      uint64_t v11 = *(int *)(v8 + 48);
      uint64_t v12 = &a1[v11];
      uint64_t v13 = &a2[v11];
      uint64_t v14 = *((void *)v13 + 1);
      *(void *)uint64_t v12 = *(void *)v13;
      *((void *)v12 + 1) = v14;
      unint64_t v15 = *(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
      swift_bridgeObjectRetain();
      v15(a1, 0, 1, v8);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

char *sub_10001E5F0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v14 = sub_100008580(&qword_1000932E0);
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
      int v17 = v16(a1, 1, v14);
      int v18 = v16(a2, 1, v14);
      if (v17)
      {
        if (!v18)
        {
          uint64_t v19 = type metadata accessor for FBKSInteraction.FeatureDomain();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
          uint64_t v20 = *(int *)(v14 + 48);
          id v21 = &a1[v20];
          char v22 = &a2[v20];
          *(void *)id v21 = *(void *)v22;
          *((void *)v21 + 1) = *((void *)v22 + 1);
          uint64_t v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
          swift_bridgeObjectRetain();
          v23(a1, 0, 1, v14);
          return a1;
        }
      }
      else
      {
        if (!v18)
        {
          uint64_t v30 = type metadata accessor for FBKSInteraction.FeatureDomain();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 24))(a1, a2, v30);
          uint64_t v31 = *(int *)(v14 + 48);
          uint64_t v32 = &a1[v31];
          uint64_t v33 = &a2[v31];
          *(void *)uint64_t v32 = *(void *)v33;
          *((void *)v32 + 1) = *((void *)v33 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return a1;
        }
        sub_10000A738((uint64_t)a1, &qword_1000932E0);
      }
      size_t v13 = *(void *)(v7 + 64);
      goto LABEL_8;
    }
    sub_10001E9B4((uint64_t)a1);
LABEL_7:
    size_t v13 = *(void *)(*(void *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v13);
    return a1;
  }
  if (v10) {
    goto LABEL_7;
  }
  uint64_t v11 = sub_100008580(&qword_1000932E0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
  {
    memcpy(a1, a2, *(void *)(v7 + 64));
  }
  else
  {
    uint64_t v24 = type metadata accessor for FBKSInteraction.FeatureDomain();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(a1, a2, v24);
    uint64_t v25 = *(int *)(v11 + 48);
    Swift::Int v26 = &a1[v25];
    id v27 = &a2[v25];
    *(void *)Swift::Int v26 = *(void *)v27;
    *((void *)v26 + 1) = *((void *)v27 + 1);
    Swift::Int v28 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
    swift_bridgeObjectRetain();
    v28(a1, 0, 1, v11);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_10001E9B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_10001EA10(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = sub_100008580(&qword_1000932E0);
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }
    else
    {
      uint64_t v10 = type metadata accessor for FBKSInteraction.FeatureDomain();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

char *sub_10001EBF0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v14 = sub_100008580(&qword_1000932E0);
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
      int v17 = v16(a1, 1, v14);
      int v18 = v16(a2, 1, v14);
      if (v17)
      {
        if (!v18)
        {
          uint64_t v19 = type metadata accessor for FBKSInteraction.FeatureDomain();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(a1, a2, v19);
          *(_OWORD *)&a1[*(int *)(v14 + 48)] = *(_OWORD *)&a2[*(int *)(v14 + 48)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
          return a1;
        }
      }
      else
      {
        if (!v18)
        {
          uint64_t v22 = type metadata accessor for FBKSInteraction.FeatureDomain();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 40))(a1, a2, v22);
          uint64_t v23 = *(int *)(v14 + 48);
          uint64_t v24 = &a1[v23];
          uint64_t v25 = &a2[v23];
          uint64_t v27 = *(void *)v25;
          uint64_t v26 = *((void *)v25 + 1);
          *(void *)uint64_t v24 = v27;
          *((void *)v24 + 1) = v26;
          swift_bridgeObjectRelease();
          return a1;
        }
        sub_10000A738((uint64_t)a1, &qword_1000932E0);
      }
      size_t v13 = *(void *)(v7 + 64);
      goto LABEL_8;
    }
    sub_10001E9B4((uint64_t)a1);
LABEL_7:
    size_t v13 = *(void *)(*(void *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v13);
    return a1;
  }
  if (v10) {
    goto LABEL_7;
  }
  uint64_t v11 = sub_100008580(&qword_1000932E0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
  {
    memcpy(a1, a2, *(void *)(v7 + 64));
  }
  else
  {
    uint64_t v20 = type metadata accessor for FBKSInteraction.FeatureDomain();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(a1, a2, v20);
    *(_OWORD *)&a1[*(int *)(v11 + 48)] = *(_OWORD *)&a2[*(int *)(v11 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_10001EF7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001EF90);
}

uint64_t sub_10001EF90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10001EFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001F010);
}

uint64_t sub_10001F010(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_10001F090(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_10001F0F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t type metadata accessor for CFBDonationCheck.Result(uint64_t a1)
{
  return sub_10001F188(a1, (uint64_t *)&unk_1000933A8);
}

uint64_t sub_10001F188(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001F1C0()
{
  uint64_t result = type metadata accessor for CFBDonationCheck.Result.Invalid(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_10001F238(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_100008580(&qword_1000932E0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v10 = type metadata accessor for FBKSInteraction.FeatureDomain();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      uint64_t v11 = *(int *)(v7 + 48);
      uint64_t v12 = (uint64_t *)((char *)a1 + v11);
      size_t v13 = (uint64_t *)((char *)a2 + v11);
      uint64_t v14 = v13[1];
      *uint64_t v12 = *v13;
      v12[1] = v14;
      uint64_t v15 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
      v15(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10001F3BC(uint64_t a1)
{
  uint64_t v2 = sub_100008580(&qword_1000932E0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for FBKSInteraction.FeatureDomain();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *sub_10001F484(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100008580(&qword_1000932E0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for FBKSInteraction.FeatureDomain();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    uint64_t v9 = *(int *)(v6 + 48);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = *((void *)v11 + 1);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v12;
    size_t v13 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    v13(a1, 0, 1, v6);
  }
  return a1;
}

char *sub_10001F5CC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100008580(&qword_1000932E0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v17 = type metadata accessor for FBKSInteraction.FeatureDomain();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(a1, a2, v17);
      uint64_t v18 = *(int *)(v6 + 48);
      uint64_t v19 = &a1[v18];
      uint64_t v20 = &a2[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      *((void *)v19 + 1) = *((void *)v20 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10000A738((uint64_t)a1, &qword_1000932E0);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for FBKSInteraction.FeatureDomain();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
  uint64_t v12 = *(int *)(v6 + 48);
  size_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)size_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  uint64_t v15 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
  swift_bridgeObjectRetain();
  v15(a1, 0, 1, v6);
  return a1;
}

char *sub_10001F7C4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100008580(&qword_1000932E0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for FBKSInteraction.FeatureDomain();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    *(_OWORD *)&a1[*(int *)(v6 + 48)] = *(_OWORD *)&a2[*(int *)(v6 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

char *sub_10001F900(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100008580(&qword_1000932E0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = type metadata accessor for FBKSInteraction.FeatureDomain();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(a1, a2, v13);
      uint64_t v14 = *(int *)(v6 + 48);
      uint64_t v15 = &a1[v14];
      uint64_t v16 = &a2[v14];
      uint64_t v18 = *(void *)v16;
      uint64_t v17 = *((void *)v16 + 1);
      *(void *)uint64_t v15 = v18;
      *((void *)v15 + 1) = v17;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10000A738((uint64_t)a1, &qword_1000932E0);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for FBKSInteraction.FeatureDomain();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
  *(_OWORD *)&a1[*(int *)(v6 + 48)] = *(_OWORD *)&a2[*(int *)(v6 + 48)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_10001FAD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001FAE8);
}

uint64_t sub_10001FAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_1000932E0);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10001FB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001FB6C);
}

uint64_t sub_10001FB6C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_100008580(&qword_1000932E0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_10001FBF0(uint64_t a1)
{
  uint64_t v2 = sub_100008580(&qword_1000932E0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_10001FC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_1000932E0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t sub_10001FCD0()
{
  uint64_t result = type metadata accessor for FBKSInteraction.FeatureDomain();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_10001FD64(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001FDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for CFBDonationCheck()
{
  return &type metadata for CFBDonationCheck;
}

unint64_t sub_10001FE40()
{
  unint64_t v1 = (uint64_t *)v0;
  uint64_t v2 = sub_100008580((uint64_t *)&unk_100093950);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v44 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v43 = (char *)&v40 - v5;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v41 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v40 = (char *)&v40 - v9;
  sub_100008580(&qword_100093438);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10007B870;
  *(void *)&long long v50 = 0x736572756C696166;
  *((void *)&v50 + 1) = 0xE800000000000000;
  AnyHashable.init<A>(_:)();
  uint64_t v11 = (int *)type metadata accessor for FormLaunchConfiguration();
  uint64_t v12 = *(void *)(v0 + v11[7]);
  *(void *)(inited + 96) = &type metadata for Int;
  *(void *)(inited + 72) = v12;
  *(void *)&long long v50 = 1702125924;
  *((void *)&v50 + 1) = 0xE400000000000000;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 168) = v6;
  sub_100020478((uint64_t *)(inited + 144));
  static Date.now.getter();
  *(void *)&long long v50 = 0x6F43657A6F6F6E73;
  *((void *)&v50 + 1) = 0xEB00000000746E75;
  AnyHashable.init<A>(_:)();
  uint64_t v13 = *(void *)(v0 + v11[10]);
  *(void *)(inited + 240) = &type metadata for Int;
  *(void *)(inited + 216) = v13;
  *(void *)&long long v50 = 0xD000000000000013;
  *((void *)&v50 + 1) = 0x800000010007D970;
  AnyHashable.init<A>(_:)();
  long long v14 = *(_OWORD *)(v0 + 80);
  long long v52 = *(_OWORD *)(v0 + 64);
  long long v53 = v14;
  long long v54 = *(_OWORD *)(v0 + 96);
  char v55 = *(unsigned char *)(v0 + 112);
  long long v15 = *(_OWORD *)(v0 + 48);
  long long v50 = *(_OWORD *)(v0 + 32);
  long long v51 = v15;
  uint64_t v16 = (void *)sub_100018AF8();
  id v17 = [v16 asJSON];

  uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  *(void *)(inited + 312) = &type metadata for Data;
  *(void *)(inited + 288) = v18;
  *(void *)(inited + 296) = v20;
  v49[0] = 1836216166;
  v49[1] = 0xE400000000000000;
  uint64_t v21 = v42;
  AnyHashable.init<A>(_:)();
  uint64_t v22 = (void *)sub_1000191CC(*v1, v1[1], v1[2], v1[3]);
  id v23 = [v22 asJSON];

  uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;

  *(void *)(inited + 384) = &type metadata for Data;
  *(void *)(inited + 360) = v24;
  *(void *)(inited + 368) = v26;
  uint64_t v27 = inited;
  uint64_t v28 = (uint64_t)v43;
  unint64_t v29 = sub_1000235F0(v27);
  sub_10000FAD8((uint64_t)v1 + v11[8], v28);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v30(v28, 1, v6) == 1)
  {
    sub_10000A738(v28, (uint64_t *)&unk_100093950);
  }
  else
  {
    uint64_t v31 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v40, v28, v6);
    *(void *)&long long v47 = 0x75614C7466617264;
    *((void *)&v47 + 1) = 0xEF6574614468636ELL;
    AnyHashable.init<A>(_:)();
    uint64_t v48 = v6;
    uint64_t v32 = sub_100020478((uint64_t *)&v47);
    (*(void (**)(uint64_t *, char *, uint64_t))(v21 + 16))(v32, v31, v6);
    sub_10000AA1C(&v47, v46);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v45 = v29;
    sub_100027C50(v46, (uint64_t)v49, isUniquelyReferenced_nonNull_native);
    unint64_t v29 = v45;
    swift_bridgeObjectRelease();
    sub_10000A6E4((uint64_t)v49);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v31, v6);
  }
  uint64_t v34 = (uint64_t)v1 + v11[9];
  uint64_t v35 = v44;
  sub_10000FAD8(v34, v44);
  if (v30(v35, 1, v6) == 1)
  {
    sub_10000A738(v35, (uint64_t *)&unk_100093950);
  }
  else
  {
    uint64_t v36 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v41, v35, v6);
    *(void *)&long long v47 = 0xD000000000000017;
    *((void *)&v47 + 1) = 0x800000010007D990;
    AnyHashable.init<A>(_:)();
    uint64_t v48 = v6;
    id v37 = sub_100020478((uint64_t *)&v47);
    (*(void (**)(uint64_t *, char *, uint64_t))(v21 + 16))(v37, v36, v6);
    sub_10000AA1C(&v47, v46);
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v45 = v29;
    sub_100027C50(v46, (uint64_t)v49, v38);
    unint64_t v29 = v45;
    swift_bridgeObjectRelease();
    sub_10000A6E4((uint64_t)v49);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v36, v6);
  }
  return v29;
}

uint64_t type metadata accessor for FormLaunchConfiguration()
{
  uint64_t result = qword_100093498;
  if (!qword_100093498) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_100020478(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1000204DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100008580((uint64_t *)&unk_100093950);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v56 - v8;
  unint64_t v76 = 0xD000000000000013;
  unint64_t v77 = 0x800000010007D970;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v10 = sub_100025B40((uint64_t)v78), (v11 & 1) != 0))
  {
    sub_10000A7E0(*(void *)(a1 + 56) + 32 * v10, (uint64_t)&v79);
  }
  else
  {
    long long v79 = 0u;
    long long v80 = 0u;
  }
  sub_10000A6E4((uint64_t)v78);
  if (!*((void *)&v80 + 1)) {
    goto LABEL_29;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_34:
    uint64_t v27 = type metadata accessor for FormLaunchConfiguration();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(a2, 1, 1, v27);
  }
  uint64_t v13 = v76;
  id v12 = (id)v77;
  type metadata accessor for FBKSLaunchConfiguration();
  uint64_t v14 = static FBKSLaunchConfiguration.fromJSON(data:)();
  if (!v14)
  {
LABEL_32:
    uint64_t v25 = v13;
    unint64_t v26 = (unint64_t)v12;
    goto LABEL_33;
  }
  long long v15 = (void *)v14;
  unint64_t v76 = 1836216166;
  unint64_t v77 = 0xE400000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v16 = sub_100025B40((uint64_t)v78), (v17 & 1) != 0))
  {
    sub_10000A7E0(*(void *)(a1 + 56) + 32 * v16, (uint64_t)&v79);
  }
  else
  {
    long long v79 = 0u;
    long long v80 = 0u;
  }
  sub_10000A6E4((uint64_t)v78);
  if (!*((void *)&v80 + 1))
  {
    sub_1000185C0(v13, (unint64_t)v12);

LABEL_29:
    sub_10000A738((uint64_t)&v79, (uint64_t *)&unk_100093910);
    goto LABEL_34;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_1000185C0(v13, (unint64_t)v12);

    goto LABEL_34;
  }
  uint64_t v19 = v76;
  unint64_t v18 = v77;
  unint64_t v76 = 0x6F43657A6F6F6E73;
  unint64_t v77 = 0xEB00000000746E75;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16))
  {
    id v75 = v12;
    unint64_t v20 = sub_100025B40((uint64_t)v78);
    if (v21)
    {
      sub_10000A7E0(*(void *)(a1 + 56) + 32 * v20, (uint64_t)&v79);
    }
    else
    {
      long long v79 = 0u;
      long long v80 = 0u;
    }
    id v12 = v75;
  }
  else
  {
    long long v79 = 0u;
    long long v80 = 0u;
  }
  sub_10000A6E4((uint64_t)v78);
  if (!*((void *)&v80 + 1))
  {
    sub_1000185C0(v13, (unint64_t)v12);

    sub_1000185C0(v19, v18);
    goto LABEL_29;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_1000185C0(v13, (unint64_t)v12);

    uint64_t v25 = v19;
    unint64_t v26 = v18;
LABEL_33:
    sub_1000185C0(v25, v26);
    goto LABEL_34;
  }
  unint64_t v74 = v76;
  id v75 = v15;
  type metadata accessor for FBKSForm();
  uint64_t v73 = static FBKSForm.fromJSON(data:)();
  if (!v73)
  {
    sub_1000185C0(v19, v18);

    goto LABEL_32;
  }
  unint64_t v72 = v18;
  *(void *)&long long v79 = 0x736572756C696166;
  *((void *)&v79 + 1) = 0xE800000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16))
  {
    unint64_t v22 = sub_100025B40((uint64_t)v78);
    id v23 = v75;
    if (v24)
    {
      sub_10000A7E0(*(void *)(a1 + 56) + 32 * v22, (uint64_t)&v79);
    }
    else
    {
      long long v79 = 0u;
      long long v80 = 0u;
    }
  }
  else
  {
    long long v79 = 0u;
    long long v80 = 0u;
    id v23 = v75;
  }
  sub_10000A6E4((uint64_t)v78);
  if (*((void *)&v80 + 1))
  {
    int v29 = swift_dynamicCast();
    unint64_t v30 = v76;
    if (!v29) {
      unint64_t v30 = 0;
    }
    unint64_t v57 = v30;
  }
  else
  {
    sub_10000A738((uint64_t)&v79, (uint64_t *)&unk_100093910);
    unint64_t v57 = 0;
  }
  unint64_t v76 = 0x75614C7466617264;
  unint64_t v77 = 0xEF6574614468636ELL;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v31 = sub_100025B40((uint64_t)v78), (v32 & 1) != 0))
  {
    sub_10000A7E0(*(void *)(a1 + 56) + 32 * v31, (uint64_t)&v79);
  }
  else
  {
    long long v79 = 0u;
    long long v80 = 0u;
  }
  sub_10000A6E4((uint64_t)v78);
  if (*((void *)&v80 + 1))
  {
    uint64_t v33 = type metadata accessor for Date();
    int v34 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v9, v34 ^ 1u, 1, v33);
  }
  else
  {
    sub_10000A738((uint64_t)&v79, (uint64_t *)&unk_100093910);
    uint64_t v35 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v9, 1, 1, v35);
  }
  unint64_t v76 = 0xD000000000000017;
  unint64_t v77 = 0x800000010007D990;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v36 = sub_100025B40((uint64_t)v78), (v37 & 1) != 0))
  {
    sub_10000A7E0(*(void *)(a1 + 56) + 32 * v36, (uint64_t)&v79);
  }
  else
  {
    long long v79 = 0u;
    long long v80 = 0u;
  }
  sub_10000A6E4((uint64_t)v78);
  uint64_t v71 = v19;
  if (*((void *)&v80 + 1))
  {
    uint64_t v38 = type metadata accessor for Date();
    int v39 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v7, v39 ^ 1u, 1, v38);
  }
  else
  {
    sub_10000A738((uint64_t)&v79, (uint64_t *)&unk_100093910);
    uint64_t v40 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v7, 1, 1, v40);
  }
  uint64_t v41 = (void *)v73;
  id v75 = (id)dispatch thunk of FBKSForm.identifier.getter();
  uint64_t v70 = v42;
  uint64_t v69 = dispatch thunk of FBKSForm.authenticationMethod.getter();
  uint64_t v68 = dispatch thunk of FBKSForm.answers.getter();
  uint64_t v67 = dispatch thunk of FBKSLaunchConfiguration.localizedPromptTitle.getter();
  uint64_t v66 = v43;
  uint64_t v65 = dispatch thunk of FBKSLaunchConfiguration.localizedPromptMessage.getter();
  uint64_t v64 = v44;
  uint64_t v63 = dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewProceedButtonTitle.getter();
  uint64_t v62 = v45;
  uint64_t v61 = dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewDeclineButtonTitle.getter();
  uint64_t v60 = v46;
  int v59 = dispatch thunk of FBKSLaunchConfiguration.skipsPrompt.getter();
  int v58 = dispatch thunk of FBKSLaunchConfiguration.alwaysLaunchInRemoteAlert.getter();
  uint64_t v47 = dispatch thunk of FBKSLaunchConfiguration.promptStyle.getter();
  char v48 = dispatch thunk of FBKSLaunchConfiguration.notifyImmediately.getter();
  unint64_t v49 = (int *)type metadata accessor for FormLaunchConfiguration();
  sub_10000FAD8((uint64_t)v9, a2 + v49[8]);
  sub_10000FAD8((uint64_t)v7, a2 + v49[9]);
  Date.init()();
  sub_1000185C0(v13, (unint64_t)v12);

  sub_1000185C0(v71, v72);
  uint64_t v50 = v70;
  *(void *)a2 = v75;
  *(void *)(a2 + 8) = v50;
  uint64_t v51 = v68;
  *(void *)(a2 + 16) = v69;
  *(void *)(a2 + 24) = v51;
  uint64_t v52 = v66;
  *(void *)(a2 + 32) = v67;
  *(void *)(a2 + 40) = v52;
  uint64_t v53 = v64;
  *(void *)(a2 + 48) = v65;
  *(void *)(a2 + 56) = v53;
  uint64_t v54 = v62;
  *(void *)(a2 + 64) = v63;
  *(void *)(a2 + 72) = v54;
  uint64_t v55 = v60;
  *(void *)(a2 + 80) = v61;
  *(void *)(a2 + 88) = v55;
  *(unsigned char *)(a2 + 96) = v59;
  *(unsigned char *)(a2 + 97) = v58;
  *(void *)(a2 + 104) = v47;
  *(unsigned char *)(a2 + 112) = v48;
  *(void *)(a2 + v49[7]) = v57;
  *(void *)(a2 + v49[10]) = v74;
  (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v49 - 1) + 56))(a2, 0, 1, v49);
  sub_10000A738((uint64_t)v7, (uint64_t *)&unk_100093950);
  return sub_10000A738((uint64_t)v9, (uint64_t *)&unk_100093950);
}

void *sub_100020DE8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v9;
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    uint64_t v11 = a2[10];
    uint64_t v12 = a2[11];
    *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
    *(void *)(a1 + 104) = a2[13];
    *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
    uint64_t v13 = a3[6];
    uint64_t v29 = a1 + v13;
    uint64_t v28 = (uint64_t)a2 + v13;
    *(void *)(a1 + 80) = v11;
    *(void *)(a1 + 88) = v12;
    uint64_t v14 = type metadata accessor for Date();
    uint64_t v15 = *(void *)(v14 - 8);
    unint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v29, v28, v14);
    uint64_t v17 = a3[8];
    *(void *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    unint64_t v18 = (char *)v4 + v17;
    uint64_t v19 = (char *)a2 + v17;
    unint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    if (v20((char *)a2 + v17, 1, v14))
    {
      uint64_t v21 = sub_100008580((uint64_t *)&unk_100093950);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      v16((uint64_t)v18, (uint64_t)v19, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
    }
    uint64_t v23 = a3[9];
    char v24 = (char *)v4 + v23;
    uint64_t v25 = (char *)a2 + v23;
    if (v20((char *)a2 + v23, 1, v14))
    {
      uint64_t v26 = sub_100008580((uint64_t *)&unk_100093950);
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      v16((uint64_t)v24, (uint64_t)v25, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v24, 0, 1, v14);
    }
    *(void *)((char *)v4 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  }
  return v4;
}

uint64_t sub_1000210BC(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v11(v4, v5);
  uint64_t v7 = a1 + a2[8];
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v8(v7, 1, v5)) {
    v11(v7, v5);
  }
  uint64_t v9 = a1 + a2[9];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9, 1, v5);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9, v5);
  }
  return result;
}

uint64_t sub_100021228(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v12 = a3[6];
  unint64_t v30 = (void *)(a1 + v12);
  uint64_t v29 = (const void *)(a2 + v12);
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 88) = v11;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(void *, const void *, uint64_t))(v14 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = v14;
  swift_bridgeObjectRetain();
  uint64_t v17 = v15;
  v15(v30, v29, v13);
  uint64_t v18 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v19 = (void *)(a1 + v18);
  unint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v21(a2 + v18, 1, v13))
  {
    uint64_t v22 = sub_100008580((uint64_t *)&unk_100093950);
    memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v17(v19, v20, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v13);
  }
  uint64_t v23 = a3[9];
  char v24 = (void *)(a1 + v23);
  uint64_t v25 = (const void *)(a2 + v23);
  if (v21(a2 + v23, 1, v13))
  {
    uint64_t v26 = sub_100008580((uint64_t *)&unk_100093950);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    v17(v24, v25, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v24, 0, 1, v13);
  }
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1000214B8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v25(v7, v8, v9);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v26 = a3;
  uint64_t v11 = a3[8];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(a1 + v11, 1, v9);
  int v16 = v14((uint64_t)v13, 1, v9);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v12, v13, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
LABEL_6:
    uint64_t v17 = sub_100008580((uint64_t *)&unk_100093950);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v25((uint64_t)v12, (uint64_t)v13, v9);
LABEL_7:
  uint64_t v18 = v26[9];
  uint64_t v19 = (void *)(a1 + v18);
  unint64_t v20 = (const void *)(a2 + v18);
  int v21 = v14(a1 + v18, 1, v9);
  int v22 = v14((uint64_t)v20, 1, v9);
  if (!v21)
  {
    if (!v22)
    {
      v25((uint64_t)v19, (uint64_t)v20, v9);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v19, v9);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v23 = sub_100008580((uint64_t *)&unk_100093950);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v19, v20, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
LABEL_13:
  *(void *)(a1 + v26[10]) = *(void *)(a2 + v26[10]);
  return a1;
}

uint64_t sub_100021870(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 48);
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  v14(v10, v11, v12);
  uint64_t v15 = a3[8];
  uint64_t v25 = a3;
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  int v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v18(a2 + v15, 1, v12))
  {
    uint64_t v19 = sub_100008580((uint64_t *)&unk_100093950);
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    v14((uint64_t)v16, (uint64_t)v17, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  uint64_t v20 = v25[9];
  int v21 = (void *)(a1 + v20);
  int v22 = (const void *)(a2 + v20);
  if (v18(a2 + v20, 1, v12))
  {
    uint64_t v23 = sub_100008580((uint64_t *)&unk_100093950);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    v14((uint64_t)v21, (uint64_t)v22, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, v12);
  }
  *(void *)(a1 + v25[10]) = *(void *)(a2 + v25[10]);
  return a1;
}

uint64_t sub_100021AA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  unint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40);
  v31(v13, v14, v15);
  uint64_t v17 = a3[8];
  char v32 = a3;
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  int v21 = v20(a1 + v17, 1, v15);
  int v22 = v20((uint64_t)v19, 1, v15);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v18, v19, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
LABEL_6:
    uint64_t v23 = sub_100008580((uint64_t *)&unk_100093950);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  v31((uint64_t)v18, (uint64_t)v19, v15);
LABEL_7:
  uint64_t v24 = v32[9];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  int v27 = v20(a1 + v24, 1, v15);
  int v28 = v20((uint64_t)v26, 1, v15);
  if (!v27)
  {
    if (!v28)
    {
      v31((uint64_t)v25, (uint64_t)v26, v15);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v25, v15);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    uint64_t v29 = sub_100008580((uint64_t *)&unk_100093950);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v25, v26, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
LABEL_13:
  *(void *)(a1 + v32[10]) = *(void *)(a2 + v32[10]);
  return a1;
}

uint64_t sub_100021DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100021E00);
}

uint64_t sub_100021E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100008580((uint64_t *)&unk_100093950);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_100021F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100021F44);
}

uint64_t sub_100021F44(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100008580((uint64_t *)&unk_100093950);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_100022074()
{
  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    sub_10000F9EC();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_100022160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v7 + 320) = a6;
  *(void *)(v7 + 128) = a5;
  *(void *)(v7 + 136) = v6;
  *(void *)(v7 + 112) = a3;
  *(void *)(v7 + 120) = a4;
  *(void *)(v7 + 96) = a1;
  *(void *)(v7 + 104) = a2;
  sub_100008580(&qword_1000934F0);
  *(void *)(v7 + 144) = swift_task_alloc();
  *(void *)(v7 + 152) = swift_task_alloc();
  *(void *)(v7 + 160) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for User();
  *(void *)(v7 + 168) = v8;
  *(void *)(v7 + 176) = *(void *)(v8 - 8);
  *(void *)(v7 + 184) = swift_task_alloc();
  *(void *)(v7 + 192) = type metadata accessor for SeedPortal();
  sub_100023530();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v7 + 200) = v10;
  *(void *)(v7 + 208) = v9;
  return _swift_task_switch(sub_1000222A0, v10, v9);
}

uint64_t sub_1000222A0()
{
  uint64_t v8 = v0;
  if (qword_100092AF0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[27] = sub_100006040(v1, (uint64_t)SharedLog);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)unint64_t v4 = 136446210;
    v0[11] = sub_100007E60(0xD00000000000002ELL, 0x800000010007D9B0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (qword_100092B08 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_100096530;
  v0[28] = qword_100096530;
  return _swift_task_switch(sub_100022494, v5, 0);
}

uint64_t sub_100022494()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[19];
  sub_1000755F8();
  uint64_t v5 = v1 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess();
  sub_100023588(v5, v4);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  v0[29] = (uint64_t)v6;
  v0[30] = (v3 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v6(v4, 1, v2) == 1)
  {
    sub_10000A738(v0[19], &qword_1000934F0);
    uint64_t v7 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[22] + 32))(v0[20], v0[19], v0[21]);
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[22] + 56))(v0[20], v7, 1, v0[21]);
  uint64_t v8 = v0[25];
  uint64_t v9 = v0[26];
  return _swift_task_switch(sub_1000225C0, v8, v9);
}

uint64_t sub_1000225C0()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 232))(v2, 1, v1) == 1)
  {
    sub_10000A738(v2, &qword_1000934F0);
LABEL_6:
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1000227C8;
    uint64_t v10 = *(void *)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 120);
    return sub_100075C24(v10, v11);
  }
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0 + 176) + 32))(*(void *)(v0 + 184), v2, v1);
  char v3 = User.isUnauthenticated.getter();
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 168);
  if (v3)
  {
    (*(void (**)(void, void))(v5 + 8))(*(void *)(v0 + 184), *(void *)(v0 + 168));
  }
  else
  {
    uint64_t v7 = FBKSForm.AuthenticationMethod.rawValue.getter();
    uint64_t v8 = FBKSForm.AuthenticationMethod.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    if (v7 == v8) {
      goto LABEL_6;
    }
  }
  *(void *)(v0 + 264) = static SeedPortal.shared.getter();
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of SeedPortal.fetchFormItem(identifier:)
                                                          + async function pointer to dispatch thunk of SeedPortal.fetchFormItem(identifier:));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_1000229A8;
  uint64_t v14 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 112);
  uint64_t v16 = *(void *)(v0 + 96);
  return v17(v16, v14, v15);
}

uint64_t sub_1000227C8()
{
  uint64_t v2 = *v1;
  (*v1)[32] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[25];
    uint64_t v4 = v2[26];
    uint64_t v5 = sub_100022B18;
  }
  else
  {
    sub_10000A738(v2[18], &qword_1000934F0);
    uint64_t v3 = v2[25];
    uint64_t v4 = v2[26];
    uint64_t v5 = sub_1000228EC;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_1000228EC()
{
  v0[33] = static SeedPortal.shared.getter();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of SeedPortal.fetchFormItem(identifier:)
                                                         + async function pointer to dispatch thunk of SeedPortal.fetchFormItem(identifier:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[34] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000229A8;
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[12];
  return v6(v4, v2, v3);
}

uint64_t sub_1000229A8()
{
  uint64_t v2 = (void *)*v1;
  v2[35] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[25];
    uint64_t v4 = v2[26];
    return _swift_task_switch(sub_100022BA4, v3, v4);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v2[1];
    return v5();
  }
}

uint64_t sub_100022B18()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100022BA4()
{
  swift_release();
  uint64_t v1 = (void *)_convertErrorToNSError(_:)();
  *(void *)(v0 + 288) = v1;
  id v2 = [v1 userInfo];
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v3 + 16) && (unint64_t v6 = sub_100025B84(v4, v5), (v7 & 1) != 0))
  {
    sub_10000A7E0(*(void *)(v3 + 56) + 32 * v6, v0 + 16);
  }
  else
  {
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 40))
  {
    sub_10000A738(v0 + 16, (uint64_t *)&unk_100093910);
    goto LABEL_18;
  }
  uint64_t v8 = (uint64_t *)(v0 + 72);
  sub_100008580(&qword_100093500);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_18:
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  uint64_t v9 = *v8;
  if (!((unint64_t)*v8 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_27:
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  if (!v10)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
LABEL_9:
  uint64_t v11 = 0;
  while (1)
  {
    if ((v9 & 0xC000000000000001) != 0) {
      id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v12 = *(id *)(v9 + 8 * v11 + 32);
    }
    uint64_t v13 = v12;
    uint64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    id v15 = [v12 code];

    if (v15 == (id)16) {
      break;
    }
    ++v11;
    if (v14 == v10) {
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Found invalid session error. Will clear out user and try again", v20, 2u);
    swift_slowDealloc();
  }

  int v21 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v21;
  void *v21 = v0;
  v21[1] = sub_100022F04;
  return sub_100075814(1);
}

uint64_t sub_100022F04()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 208);
  uint64_t v3 = *(void *)(v1 + 200);
  return _swift_task_switch(sub_100023024, v3, v2);
}

uint64_t sub_100023024()
{
  uint64_t v16 = v0;
  char v1 = *(unsigned char *)(v0 + 320);
  uint64_t v2 = Logger.logObject.getter();
  if (v1)
  {
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed with invalid session twice in a row", v4, 2u);
      swift_slowDealloc();
    }

    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  else
  {
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      *(void *)(v0 + 80) = sub_100007E60(0xD00000000000002ELL, 0x800000010007D9B0, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v2, v7, "Retrying %{public}s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1000232BC;
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 112);
    uint64_t v12 = *(void *)(v0 + 120);
    uint64_t v13 = *(void *)(v0 + 96);
    uint64_t v14 = *(void *)(v0 + 104);
    return sub_100022160(v13, v14, v11, v12, v10, 1);
  }
}

uint64_t sub_1000232BC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 208);
  uint64_t v4 = *(void *)(v2 + 200);
  if (v0) {
    uint64_t v5 = sub_100023494;
  }
  else {
    uint64_t v5 = sub_1000233F8;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1000233F8()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100023494()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_100023530()
{
  unint64_t result = qword_1000934F8;
  if (!qword_1000934F8)
  {
    type metadata accessor for SeedPortal();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000934F8);
  }
  return result;
}

uint64_t sub_100023588(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_1000934F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000235F0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008580(&qword_100093290);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100018820(v6, (uint64_t)v15, &qword_100093538);
    unint64_t result = sub_100025B40((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_10000AA1C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100023734(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008580(&qword_100093288);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100018820(v6, (uint64_t)&v15, &qword_100093558);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100025B84(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    *long long v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10000AA1C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002386C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008580(&qword_100093530);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100025B84(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    *long long v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100023990(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008580(&qword_100093580);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_100025B84(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    *long long v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100023AAC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008580(&qword_100093540);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100018820(v6, (uint64_t)&v13, &qword_100093548);
    uint64_t v7 = v13;
    unint64_t result = sub_100025C94(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_10000AA1C(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100023BDC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_100093508);
  sub_100006040(v0, (uint64_t)qword_100093508);
  static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100023C50()
{
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      if ((Character.isWhitespace.getter() & 1) == 0)
      {
        v4._uint64_t countAndFlagsBits = countAndFlagsBits;
        v4._object = object;
        String.append(_:)(v4);
      }
      swift_bridgeObjectRelease();
      Swift::String_optional v3 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v3.value._countAndFlagsBits;
      object = v3.value._object;
    }
    while (v3.value._object);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100023D18()
{
  sub_100029EEC();
  Collection<>.trimmingPrefix<A>(_:)();
  sub_100029F40();
  sub_10000A8D8();
  uint64_t v0 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100023E20(uint64_t a1, uint64_t a2, void *a3)
{
  FBKSForm.Question.stringValue.getter();
  uint64_t v36 = sub_100023D18();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 16);
  if (!v7)
  {
    return swift_bridgeObjectRelease();
  }
  sub_10000C524(0, (unint64_t *)&unk_100092ED0);
  swift_bridgeObjectRetain();
  uint64_t v35 = v6;
  sub_100029EEC();
  uint64_t v8 = a2 + 40;
  while (1)
  {
    uint64_t v37 = v7;
    swift_bridgeObjectRetain();
    Collection<>.trimmingPrefix<A>(_:)();
    sub_100029F40();
    sub_10000A8D8();
    uint64_t v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    *(void *)&long long v38 = 1599164753;
    *((void *)&v38 + 1) = 0xE400000000000000;
    v14._uint64_t countAndFlagsBits = v36;
    v14._object = v6;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = 0x5F4141415FLL;
    v15._object = (void *)0xE500000000000000;
    String.append(_:)(v15);
    v16._uint64_t countAndFlagsBits = v11;
    v16._object = v13;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    long long v17 = v38;
    v18.super.super.Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = (void *)*a3;
    int v39 = (void *)*a3;
    int v21 = a3;
    *a3 = 0x8000000000000000;
    unint64_t v23 = sub_100025B84(v17, *((uint64_t *)&v17 + 1));
    uint64_t v24 = v20[2];
    BOOL v25 = (v22 & 1) == 0;
    uint64_t v26 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      break;
    }
    char v27 = v22;
    if (v20[3] >= v26)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        unint64_t v30 = v39;
        if (v22) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_100028AD4();
        unint64_t v30 = v39;
        if (v27) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_1000272C4(v26, isUniquelyReferenced_nonNull_native);
      unint64_t v28 = sub_100025B84(v17, *((uint64_t *)&v17 + 1));
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_22;
      }
      unint64_t v23 = v28;
      unint64_t v30 = v39;
      if (v27)
      {
LABEL_3:
        uint64_t v9 = v30[7];
        uint64_t v10 = 8 * v23;

        *(NSNumber *)(v9 + v10) = v18;
        goto LABEL_4;
      }
    }
    v30[(v23 >> 6) + 8] |= 1 << v23;
    *(_OWORD *)(v30[6] + 16 * v23) = v17;
    *(NSNumber *)(v30[7] + 8 * v23) = v18;
    uint64_t v31 = v30[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_21;
    }
    v30[2] = v33;
    swift_bridgeObjectRetain();
LABEL_4:
    v8 += 16;
    a3 = v21;
    void *v21 = v30;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = v37 - 1;
    uint64_t v6 = v35;
    if (v37 == 1)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1000241B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  uint64_t v52 = sub_100008580(&qword_100093188);
  uint64_t v4 = __chkstk_darwin(v52);
  uint64_t v50 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v51 = (char *)&v48 - v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v48 - v8;
  uint64_t v10 = sub_100008580(&qword_100093588);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v55 = (void *)((char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  Swift::String v14 = (void *)((char *)&v48 - v13);
  unint64_t v15 = sub_100023990((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v16 = -1 << *(unsigned char *)(a3 + 32);
  uint64_t v17 = *(void *)(a3 + 64);
  uint64_t v18 = ~v16;
  uint64_t v19 = -v16;
  uint64_t v62 = a3;
  uint64_t v63 = a3 + 64;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  else {
    uint64_t v20 = -1;
  }
  uint64_t v64 = v18;
  uint64_t v65 = 0;
  uint64_t v66 = v20 & v17;
  uint64_t v67 = 0;
  swift_bridgeObjectRetain();
  long long v48 = xmmword_10007B630;
  for (i = v14; ; Swift::String v14 = i)
  {
    int v21 = v55;
    sub_100024654(v55);
    sub_100029F94((uint64_t)v21, (uint64_t)v14, &qword_100093588);
    uint64_t v22 = sub_100008580(&qword_100093590);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v14, 1, v22) == 1)
    {
      sub_10001AF20();
      return;
    }
    uint64_t v23 = *v14;
    unint64_t v57 = v15;
    uint64_t v58 = v23;
    uint64_t v24 = (char *)v14 + *(int *)(v22 + 48);
    uint64_t v25 = v52;
    uint64_t v26 = *(int *)(v52 + 48);
    uint64_t v27 = *(void *)&v24[v26];
    uint64_t v28 = type metadata accessor for FBKSForm.Question();
    char v29 = *(void **)(v28 - 8);
    unint64_t v30 = (void (*)(char *, char *, uint64_t))v29[4];
    uint64_t v31 = v51;
    v30(v51, v24, v28);
    *(void *)&v31[v26] = v27;
    uint64_t v32 = *(int *)(v25 + 48);
    v30(v9, v31, v28);
    *(void *)&v9[v32] = v27;
    uint64_t v33 = *(int *)(v25 + 48);
    int v34 = (void (*)(char *, char *, uint64_t))v29[2];
    uint64_t v35 = v50;
    v34(v50, v9, v28);
    *(void *)&v35[v33] = v27;
    swift_bridgeObjectRetain();
    uint64_t v56 = FBKSForm.Question.stringValue.getter();
    uint64_t v37 = v36;
    long long v38 = (void (*)(char *, uint64_t))v29[1];
    v38(v35, v28);
    uint64_t v39 = *(int *)(v25 + 48);
    v34(v35, v9, v28);
    *(void *)&v35[v39] = v27;
    v38(v35, v28);
    uint64_t v60 = v53;
    uint64_t v61 = v54;
    swift_bridgeObjectRetain();
    v40._uint64_t countAndFlagsBits = 95;
    v40._object = (void *)0xE100000000000000;
    String.append(_:)(v40);
    if (__OFADD__(v58, 1)) {
      break;
    }
    unint64_t v59 = v58 + 1;
    v41._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    uint64_t v43 = v60;
    uint64_t v42 = v61;
    sub_100008580(&qword_100092C68);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = v48;
    *(void *)(v44 + 32) = v56;
    *(void *)(v44 + 40) = v37;
    uint64_t v60 = v44;
    sub_10002A570(v27);
    unint64_t v59 = v60;
    sub_100008580(&qword_100092B50);
    sub_100009708();
    BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unint64_t v46 = v57;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v59 = v46;
    sub_100027EF0((uint64_t)v45, v43, v42, isUniquelyReferenced_nonNull_native);
    unint64_t v15 = v59;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000A738((uint64_t)v9, &qword_100093188);
  }
  __break(1u);
}

uint64_t sub_100024654@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100008580(&qword_100093590);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FBKSForm.Question();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100008580(&qword_100093180);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_100008580(&qword_100093188);
  uint64_t v14 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *v1;
  uint64_t v19 = v1[1];
  uint64_t v21 = v1[2];
  int64_t v20 = v1[3];
  int64_t v22 = v20;
  unint64_t v23 = v1[4];
  unint64_t v46 = v17;
  uint64_t v47 = v6;
  uint64_t v53 = v21;
  uint64_t v54 = v19;
  if (v23)
  {
    uint64_t v50 = v4;
    int64_t v51 = v20;
    uint64_t v24 = v7;
    uint64_t v48 = v3;
    unint64_t v49 = a1;
    uint64_t v25 = (v23 - 1) & v23;
    unint64_t v26 = __clz(__rbit64(v23)) | (v20 << 6);
LABEL_3:
    uint64_t v27 = v24;
    uint64_t v28 = v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, *(void *)(v18 + 48) + *(void *)(v8 + 72) * v26, v24);
    uint64_t v29 = *(void *)(*(void *)(v28 + 56) + 8 * v26);
    uint64_t v30 = *(int *)(v52 + 48);
    uint64_t v31 = v10;
    uint64_t v32 = v52;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v31, v27);
    *(void *)&v13[v30] = v29;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, v32);
    swift_bridgeObjectRetain();
    uint64_t v3 = v48;
    a1 = v49;
    uint64_t v4 = v50;
    goto LABEL_25;
  }
  int64_t v33 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
LABEL_23:
    int64_t v22 = v15;
    goto LABEL_24;
  }
  int64_t v34 = (unint64_t)(v21 + 64) >> 6;
  if (v33 < v34)
  {
    unint64_t v35 = *(void *)(v19 + 8 * v33);
    if (v35)
    {
LABEL_7:
      uint64_t v24 = v7;
      unint64_t v49 = a1;
      uint64_t v50 = v4;
      uint64_t v48 = v3;
      uint64_t v25 = (v35 - 1) & v35;
      unint64_t v26 = __clz(__rbit64(v35)) + (v33 << 6);
      int64_t v51 = v33;
      goto LABEL_3;
    }
    int64_t v36 = v20 + 2;
    int64_t v22 = v20 + 1;
    if (v20 + 2 < v34)
    {
      unint64_t v35 = *(void *)(v19 + 8 * v36);
      if (v35)
      {
LABEL_10:
        int64_t v33 = v36;
        goto LABEL_7;
      }
      int64_t v22 = v20 + 2;
      if (v20 + 3 < v34)
      {
        unint64_t v35 = *(void *)(v19 + 8 * (v20 + 3));
        if (v35)
        {
          int64_t v33 = v20 + 3;
          goto LABEL_7;
        }
        int64_t v36 = v20 + 4;
        int64_t v22 = v20 + 3;
        if (v20 + 4 < v34)
        {
          unint64_t v35 = *(void *)(v19 + 8 * v36);
          if (v35) {
            goto LABEL_10;
          }
          int64_t v33 = v20 + 5;
          int64_t v22 = v20 + 4;
          if (v20 + 5 < v34)
          {
            unint64_t v35 = *(void *)(v19 + 8 * v33);
            if (v35) {
              goto LABEL_7;
            }
            int64_t v15 = v34 - 1;
            uint64_t v37 = v20 + 6;
            while (v34 != v37)
            {
              unint64_t v35 = *(void *)(v19 + 8 * v37++);
              if (v35)
              {
                int64_t v33 = v37 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  int64_t v51 = v22;
  uint64_t v32 = v52;
  uint64_t v28 = v18;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v13, 1, 1, v52);
  uint64_t v25 = 0;
LABEL_25:
  uint64_t v38 = v54;
  *char v1 = v28;
  v1[1] = v38;
  int64_t v39 = v51;
  v1[2] = v53;
  v1[3] = v39;
  v1[4] = v25;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v32) == 1)
  {
    sub_10000A738((uint64_t)v13, &qword_100093180);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
  }
  else
  {
    uint64_t v41 = (uint64_t)v46;
    sub_100029F94((uint64_t)v13, (uint64_t)v46, &qword_100093188);
    uint64_t v42 = (uint64_t)&v47[*(int *)(v3 + 48)];
    uint64_t v43 = v1[5];
    uint64_t result = sub_100029F94(v41, v42, &qword_100093188);
    if (__OFADD__(v43, 1))
    {
      __break(1u);
    }
    else
    {
      v1[5] = v43 + 1;
      uint64_t v44 = (uint64_t)a1 + *(int *)(v3 + 48);
      *a1 = v43;
      sub_100029F94(v42, v44, &qword_100093188);
      return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
    }
  }
  return result;
}

Swift::OpaquePointer_optional __swiftcall FBKSEvaluation.CAPayload(_:)(Swift::Bool a1)
{
  BOOL v37 = a1;
  uint64_t v1 = sub_100008580(&qword_100093520);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v35 - v5;
  uint64_t v7 = type metadata accessor for FBKSEvaluation.Action();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for FBKSEvaluation.Subject();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (void **)((char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  FBKSEvaluation.subject.getter();
  if ((*(unsigned int (**)(void **, uint64_t))(v12 + 88))(v14, v11) == enum case for FBKSEvaluation.Subject.interaction(_:))
  {
    int64_t v36 = v4;
    (*(void (**)(void **, uint64_t))(v12 + 96))(v14, v11);
    int64_t v15 = *v14;
    unint64_t v16 = FBKSInteraction.CAPayload(_:)();
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v38 = v16;
    sub_100027EF0((uint64_t)isa, 0x656E696C6E497369, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
    int64_t v39 = (void *)v38;
    swift_bridgeObjectRelease();
    FBKSEvaluation.action.getter();
    Class v19 = FBKSEvaluation.Action.caEnumValue()().super.super.isa;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    unint64_t v20 = (unint64_t)v39;
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v38 = v20;
    sub_100027EF0((uint64_t)v19, 0x6E456E6F69746361, 0xEA00000000006D75, v21);
    int64_t v39 = (void *)v38;
    swift_bridgeObjectRelease();
    FBKSEvaluation.formResponse.getter();
    uint64_t v22 = type metadata accessor for FBKSEvaluation.FormResponse();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    if (v24(v6, 1, v22) == 1)
    {
      sub_10000A738((uint64_t)v6, &qword_100093520);
    }
    else
    {
      uint64_t v27 = FBKSEvaluation.FormResponse.answers.getter();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v22);
      unint64_t v38 = sub_100023990((uint64_t)_swiftEmptyArrayStorage);
      __chkstk_darwin(v38);
      *(&v35 - 2) = (uint64_t)&v38;
      sub_1000290A0(v27, (void (*)(char *, uint64_t))sub_100029B88);
      uint64_t v28 = swift_bridgeObjectRelease();
      uint64_t v29 = v38;
      __chkstk_darwin(v28);
      *(&v35 - 2) = (uint64_t)&v39;
      sub_10002930C(v29, (void (*)(uint64_t, uint64_t, id))sub_10002A044);
      swift_bridgeObjectRelease();
    }
    uint64_t v30 = (uint64_t)v36;
    FBKSEvaluation.formResponse.getter();
    if (v24((char *)v30, 1, v22) == 1)
    {

      sub_10000A738(v30, &qword_100093520);
    }
    else
    {
      uint64_t v31 = FBKSEvaluation.FormResponse.answers.getter();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v30, v22);
      sub_1000241B4(0x6E6F697473657571, 0xE800000000000000, v31);
      uint64_t v33 = v32;
      uint64_t v34 = swift_bridgeObjectRelease();
      __chkstk_darwin(v34);
      *(&v35 - 2) = (uint64_t)&v39;
      sub_10002930C(v33, (void (*)(uint64_t, uint64_t, id))sub_100029B6C);
      swift_bridgeObjectRelease();
    }
    unint64_t v26 = v39;
  }
  else
  {
    (*(void (**)(void **, uint64_t))(v12 + 8))(v14, v11);
    unint64_t v26 = 0;
  }
  result.value._rawValue = v26;
  result.is_nil = v25;
  return result;
}

unint64_t FBKSInteraction.CAPayload(_:)()
{
  uint64_t v0 = sub_100008580(&qword_100093120);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v3 = (char *)&v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v61 - v4;
  uint64_t v6 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v63 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v62 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v61 = (char *)&v61 - v9;
  uint64_t v10 = type metadata accessor for FBKSInteraction.FeatureDomain();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = sub_100023990((uint64_t)_swiftEmptyArrayStorage);
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v64 = v14;
  sub_100027EF0((uint64_t)isa, 0x656E696C6E497369, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
  unint64_t v65 = v64;
  swift_bridgeObjectRelease();
  dispatch thunk of FBKSInteraction.featureDomain.getter();
  Class v17 = FBKSInteraction.FeatureDomain.caEnumValue()().super.super.isa;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  unint64_t v18 = v65;
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v64 = v18;
  sub_100027EF0((uint64_t)v17, 0xD000000000000011, 0x800000010007D9E0, v19);
  unint64_t v20 = v64;
  swift_bridgeObjectRelease();
  dispatch thunk of FBKSInteraction.bundleID.getter();
  if (v21)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v64 = v20;
    sub_100027EF0((uint64_t)v22, 0x4449656C646E7562, 0xE800000000000000, v23);
    unint64_t v20 = v64;
    swift_bridgeObjectRelease();
  }
  if (dispatch thunk of FBKSInteraction.prefillQuestions.getter()) {
    swift_bridgeObjectRelease();
  }
  Class v24 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v25 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v64 = v20;
  sub_100027EF0((uint64_t)v24, 0xD000000000000010, 0x800000010007DA00, v25);
  unint64_t v65 = v64;
  swift_bridgeObjectRelease();
  uint64_t v26 = dispatch thunk of FBKSInteraction.prefillQuestions.getter();
  if (v26)
  {
    uint64_t v27 = v26;
    unint64_t v64 = sub_100023990((uint64_t)_swiftEmptyArrayStorage);
    __chkstk_darwin(v64);
    *(&v61 - 2) = (char *)&v64;
    sub_1000290A0(v27, (void (*)(char *, uint64_t))sub_10002A040);
    uint64_t v28 = swift_bridgeObjectRelease();
    uint64_t v29 = v64;
    __chkstk_darwin(v28);
    *(&v61 - 2) = (char *)&v65;
    sub_10002930C(v29, (void (*)(uint64_t, uint64_t, id))sub_10002A044);
    swift_bridgeObjectRelease();
  }
  uint64_t v30 = dispatch thunk of FBKSInteraction.prefillQuestions.getter();
  if (v30)
  {
    sub_1000241B4(0x6C6C6966657270, 0xE700000000000000, v30);
    uint64_t v32 = v31;
    uint64_t v33 = swift_bridgeObjectRelease();
    __chkstk_darwin(v33);
    *(&v61 - 2) = (char *)&v65;
    sub_10002930C(v32, (void (*)(uint64_t, uint64_t, id))sub_10002A044);
    swift_bridgeObjectRelease();
  }
  dispatch thunk of FBKSInteraction.originalContent.getter();
  uint64_t v34 = v63;
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
  if (v35(v5, 1, v6) == 1)
  {
    sub_10000A738((uint64_t)v5, &qword_100093120);
  }
  else
  {
    int64_t v36 = v61;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v61, v5, v6);
    Class v37 = FBKSInteraction.Content.caEnumValue()().super.super.isa;
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v64 = v65;
    unint64_t v65 = 0x8000000000000000;
    uint64_t v39 = (uint64_t)v37;
    uint64_t v34 = v63;
    sub_100027EF0(v39, 0xD000000000000013, 0x800000010007DA60, v38);
    unint64_t v65 = v64;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v6);
  }
  dispatch thunk of FBKSInteraction.generatedContent.getter();
  if (v35(v3, 1, v6) == 1)
  {
    sub_10000A738((uint64_t)v3, &qword_100093120);
  }
  else
  {
    Swift::String v40 = v62;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v62, v3, v6);
    uint64_t v41 = v34;
    Class v42 = FBKSInteraction.Content.caEnumValue()().super.super.isa;
    char v43 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v64 = v65;
    unint64_t v65 = 0x8000000000000000;
    sub_100027EF0((uint64_t)v42, 0xD000000000000014, 0x800000010007DA40, v43);
    unint64_t v65 = v64;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v6);
  }
  dispatch thunk of FBKSInteraction.modelVersion.getter();
  if (v44)
  {
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char v46 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v64 = v65;
    unint64_t v65 = 0x8000000000000000;
    sub_100027EF0((uint64_t)v45, 0x7265566C65646F6DLL, 0xEC0000006E6F6973, v46);
    unint64_t v65 = v64;
    swift_bridgeObjectRelease();
  }
  dispatch thunk of FBKSInteraction.diagnostics.getter();
  if (v47) {
    swift_bridgeObjectRelease();
  }
  Class v48 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v49 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v64 = v65;
  unint64_t v65 = 0x8000000000000000;
  sub_100027EF0((uint64_t)v48, 0x74736F6E67616964, 0xEB00000000736369, v49);
  unint64_t v65 = v64;
  swift_bridgeObjectRelease();
  if (dispatch thunk of FBKSInteraction.auxiliaryMetrics.getter()) {
    swift_bridgeObjectRelease();
  }
  Class v50 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v51 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v64 = v65;
  unint64_t v65 = 0x8000000000000000;
  sub_100027EF0((uint64_t)v50, 0xD000000000000010, 0x800000010007DA20, v51);
  unint64_t v65 = v64;
  swift_bridgeObjectRelease();
  uint64_t v52 = dispatch thunk of FBKSInteraction.auxiliaryMetrics.getter();
  if (v52)
  {
    uint64_t v53 = __chkstk_darwin(v52);
    *(&v61 - 2) = (char *)&v65;
    sub_1000294C4(v53, (void (*)(uint64_t, uint64_t, uint64_t))sub_100029E78);
    swift_bridgeObjectRelease();
  }
  dispatch thunk of FBKSInteraction.isHighPriority.getter();
  Class v54 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v55 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v64 = v65;
  unint64_t v65 = 0x8000000000000000;
  sub_100027EF0((uint64_t)v54, 0x7250686769487369, 0xEE00797469726F69, v55);
  unint64_t v65 = v64;
  swift_bridgeObjectRelease();
  dispatch thunk of FBKSInteraction.sentPresented.getter();
  Class v56 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v64 = v65;
  unint64_t v65 = 0x8000000000000000;
  sub_100027EF0((uint64_t)v56, 0x73657250746E6573, 0xED00006465746E65, v57);
  unint64_t v65 = v64;
  swift_bridgeObjectRelease();
  dispatch thunk of FBKSInteraction.firstEvaluation.getter();
  Class v58 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v59 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v64 = v65;
  unint64_t v65 = 0x8000000000000000;
  sub_100027EF0((uint64_t)v58, 0x6176457473726966, 0xEF6E6F697461756CLL, v59);
  unint64_t v65 = v64;
  swift_bridgeObjectRelease();
  return v65;
}

uint64_t sub_1000259E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  swift_bridgeObjectRetain();
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *a4;
  *a4 = 0x8000000000000000;
  sub_100027EF0((uint64_t)isa, a1, a2, isUniquelyReferenced_nonNull_native);
  *a4 = v10;
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100025A94(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  swift_bridgeObjectRetain();
  id v8 = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *a4;
  *a4 = 0x8000000000000000;
  sub_100027EF0((uint64_t)v8, a1, a2, isUniquelyReferenced_nonNull_native);
  *a4 = v11;
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

unint64_t sub_100025B40(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100025E20(a1, v4);
}

unint64_t sub_100025B84(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100025EE8(a1, a2, v4);
}

unint64_t sub_100025BFC(uint64_t a1)
{
  type metadata accessor for FBKSForm.Question();
  sub_100029FF8(&qword_1000935A0, (void (*)(uint64_t))&type metadata accessor for FBKSForm.Question);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_100025FCC(a1, v2);
}

unint64_t sub_100025C94(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFString(0);
  sub_100029FF8(&qword_100093550, type metadata accessor for CFString);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10002618C(a1, v2);
}

unint64_t sub_100025D48(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_1000262E8(a1, v2);
}

unint64_t sub_100025DDC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100026460(a1, v4);
}

unint64_t sub_100025E20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100029E90(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10000A6E4((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100025EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100025FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for FBKSForm.Question();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    BOOL v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_100029FF8(&qword_1000935A8, (void (*)(uint64_t))&type metadata accessor for FBKSForm.Question);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_10002618C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_100029FF8(&qword_100093550, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1000262E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100026460(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10000C524(0, (unint64_t *)&unk_1000943D0);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_10002657C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100008580(&qword_100093290);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    NSString v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_10000AA1C((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_100029E90(v25, (uint64_t)&v38);
      sub_10000A7E0(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_10000AA1C(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  NSString v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100026894(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100008580(&qword_1000935B0);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    NSString v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    long long v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *long long v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  NSString v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100026BA0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for FBKSForm.Question();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100008580(&qword_100093598);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  Class v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  char v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    char v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_100029FF8(&qword_1000935A0, (void (*)(uint64_t))&type metadata accessor for FBKSForm.Question);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  char v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_100026FC4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100008580(&qword_100093288);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_10000AA1C(v24, v35);
      }
      else
      {
        sub_10000A7E0((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_10000AA1C(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000272C4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100008580(&qword_100093580);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000275D4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for FormLaunchConfiguration();
  uint64_t v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100008580(&qword_100093560);
  int v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  int64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    unint64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    unint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void *)(v42 + 72);
    uint64_t v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      sub_100013D20(v30, (uint64_t)v7);
    }
    else
    {
      sub_100013D84(v30, (uint64_t)v7);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    *unint64_t v19 = v28;
    v19[1] = v27;
    uint64_t result = sub_100013D20((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100027978(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100008580(&qword_100093528);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      swift_retain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

_OWORD *sub_100027C50(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100025B40(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1000282BC();
      goto LABEL_7;
    }
    sub_10002657C(v13, a3 & 1);
    unint64_t v19 = sub_100025B40(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      unint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_100029E90(a2, (uint64_t)v21);
      return sub_1000281D4(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  unint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  sub_10000A888((uint64_t)v17);

  return sub_10000AA1C(a1, v17);
}

_OWORD *sub_100027D9C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100025B84(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000288EC();
      goto LABEL_7;
    }
    sub_100026FC4(v15, a4 & 1);
    unint64_t v21 = sub_100025B84(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    unint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_10000A888((uint64_t)v19);
    return sub_10000AA1C(a1, v19);
  }
LABEL_13:
  sub_100028250(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

void sub_100027EF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100025B84(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100028AD4();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1000272C4(v15, a4 & 1);
  unint64_t v20 = sub_100025B84(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  char v22 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;

  swift_bridgeObjectRetain();
}

id sub_100028060(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100025DDC((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100028EF4();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      id result = (id)swift_release();
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100027978(v12, a3 & 1);
  unint64_t v18 = sub_100025DDC((uint64_t)a2);
  if ((v13 & 1) != (v19 & 1))
  {
LABEL_17:
    sub_10000C524(0, (unint64_t *)&unk_1000943D0);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v18;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v20 = 8 * v9;
  *(void *)(v15[6] + v20) = a2;
  *(void *)(v15[7] + v20) = a1;
  uint64_t v21 = v15[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v15[2] = v23;

  return a2;
}

_OWORD *sub_1000281D4(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  id result = sub_10000AA1C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

_OWORD *sub_100028250(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  long long v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  id result = sub_10000AA1C(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_1000282BC()
{
  uint64_t v1 = v0;
  sub_100008580(&qword_100093290);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_100029E90(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_10000A7E0(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    id result = sub_10000AA1C(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000284A4()
{
  uint64_t v1 = v0;
  sub_100008580(&qword_1000935B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    void *v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100028654()
{
  uint64_t v1 = type metadata accessor for FBKSForm.Question();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008580(&qword_100093598);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *int64_t v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1000288EC()
{
  uint64_t v1 = v0;
  sub_100008580(&qword_100093288);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_10000A7E0(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_10000AA1C(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100028AD4()
{
  uint64_t v1 = v0;
  sub_100008580(&qword_100093580);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100028C88()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FormLaunchConfiguration();
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008580(&qword_100093560);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v27 = v1;
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v28 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v29 + 72) * v16;
    sub_100013D84(*(void *)(v5 + 56) + v21, (uint64_t)v4);
    int64_t v22 = (void *)(*(void *)(v7 + 48) + v17);
    void *v22 = v19;
    v22[1] = v20;
    sub_100013D20((uint64_t)v4, *(void *)(v7 + 56) + v21);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100028EF4()
{
  uint64_t v1 = v0;
  sub_100008580(&qword_100093528);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000290A0(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v4 = sub_100008580(&qword_100093188);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v22 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v23 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v23) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v22 + 8 * v18);
    ++v12;
    if (!v19)
    {
      int64_t v12 = v18 + 1;
      if (v18 + 1 >= v23) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v22 + 8 * v12);
      if (!v19)
      {
        int64_t v12 = v18 + 2;
        if (v18 + 2 >= v23) {
          return swift_release();
        }
        unint64_t v19 = *(void *)(v22 + 8 * v12);
        if (!v19)
        {
          int64_t v12 = v18 + 3;
          if (v18 + 3 >= v23) {
            return swift_release();
          }
          unint64_t v19 = *(void *)(v22 + 8 * v12);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = type metadata accessor for FBKSForm.Question();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v6, v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v16);
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8 * v14);
    *(void *)&v6[*(int *)(v4 + 48)] = v17;
    swift_bridgeObjectRetain();
    a2(v6, v17);
    uint64_t result = sub_10000A738((uint64_t)v6, &qword_100093188);
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v23) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v22 + 8 * v20);
  if (v19)
  {
    int64_t v12 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v12 >= v23) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v22 + 8 * v12);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10002930C(uint64_t a1, void (*a2)(uint64_t, uint64_t, id))
{
  uint64_t v20 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v7) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v20 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v20 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v20 + 8 * v9);
        if (!v18)
        {
          int64_t v9 = v17 + 3;
          if (v17 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v20 + 8 * v9);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v18 - 1) & v18;
    unint64_t v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    int64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = *(void **)(*(void *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    id v16 = v15;
    a2(v13, v14, v16);

    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v7) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v20 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v7) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v20 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000294C4(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v4 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v4 + 8 * v10);
        if (!v18)
        {
          int64_t v10 = v17 + 3;
          if (v17 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v4 + 8 * v10);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
    a2(v14, v15, v16);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v8) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v4 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void _s9feedbackd12CFBAnalyticsV14sendEvaluation_8isInliney15FeedbackService14FBKSEvaluationC_SbtFZ_0(void *a1, char a2)
{
  uint64_t v4 = type metadata accessor for FBKSInteraction.FeatureDomain();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FBKSEvaluation.Subject();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (void **)((char *)v37 - v13);
  FBKSEvaluation.subject.getter();
  if ((*(unsigned int (**)(void **, uint64_t))(v9 + 88))(v14, v8) == enum case for FBKSEvaluation.Subject.interaction(_:))
  {
    (*(void (**)(void **, uint64_t))(v9 + 96))(v14, v8);
    uint64_t v15 = *v14;
    if ((unint64_t)FBKSEvaluation.CAPayload(_:)(a2 & 1))
    {
      NSString v16 = String._bridgeToObjectiveC()();
      sub_10000C524(0, &qword_100093568);
      uint64_t v17 = v5;
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      AnalyticsSendEvent();

      NSString v19 = String._bridgeToObjectiveC()();
      Class v20 = Dictionary._bridgeToObjectiveC()().super.isa;
      AnalyticsSendEvent();

      dispatch thunk of FBKSInteraction.featureDomain.getter();
      FBKSInteraction.FeatureDomain.description.getter();
      uint64_t v21 = sub_100023C50();
      int64_t v23 = v22;
      swift_bridgeObjectRelease();
      v39[0] = 0xD00000000000002ALL;
      v39[1] = 0x800000010007DAF0;
      v24._uint64_t countAndFlagsBits = v21;
      v24._object = v23;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v4);
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class v26 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      AnalyticsSendEvent();
    }
  }
  else
  {
    uint64_t v27 = *(void (**)(void **, uint64_t))(v9 + 8);
    v27(v14, v8);
    if (qword_100092A20 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100006040(v28, (uint64_t)qword_100093508);
    id v29 = a1;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      v37[0] = v27;
      id v33 = (uint8_t *)v32;
      uint64_t v38 = swift_slowAlloc();
      v39[0] = v38;
      *(_DWORD *)id v33 = 136315138;
      v37[1] = v33 + 4;
      FBKSEvaluation.subject.getter();
      uint64_t v34 = FBKSEvaluation.Subject.description.getter();
      unint64_t v36 = v35;
      ((void (*)(char *, uint64_t))v37[0])(v12, v8);
      void v39[2] = sub_100007E60(v34, v36, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unable to send analytics without Interaction: %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_100029B6C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100025A94(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

uint64_t sub_100029B88(uint64_t a1, uint64_t a2)
{
  return sub_100023E20(a1, a2, *(void **)(v2 + 16));
}

void _s9feedbackd12CFBAnalyticsV24sendInteractionPresented_8isInliney15FeedbackService15FBKSInteractionC_SbtFZ_0()
{
  uint64_t v0 = type metadata accessor for FBKSInteraction.FeatureDomain();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v4 = FBKSInteraction.CAPayload(_:)();
  sub_10000C524(0, (unint64_t *)&unk_100092ED0);
  Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17[0] = v4;
  sub_100027EF0((uint64_t)isa, 0x6E456E6F69746361, 0xEA00000000006D75, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  NSString v7 = String._bridgeToObjectiveC()();
  sub_10000C524(0, &qword_100093568);
  swift_bridgeObjectRetain();
  Class v8 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  AnalyticsSendEvent();

  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  Class v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  AnalyticsSendEvent();

  dispatch thunk of FBKSInteraction.featureDomain.getter();
  FBKSInteraction.FeatureDomain.description.getter();
  uint64_t v11 = sub_100023C50();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  v17[0] = 0xD00000000000002ALL;
  v17[1] = 0x800000010007DAF0;
  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v16 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  AnalyticsSendEvent();
}

uint64_t sub_100029E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000259E4(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

ValueMetadata *type metadata accessor for CFBAnalytics()
{
  return &type metadata for CFBAnalytics;
}

uint64_t sub_100029E90(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_100029EEC()
{
  unint64_t result = qword_100093570;
  if (!qword_100093570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100093570);
  }
  return result;
}

unint64_t sub_100029F40()
{
  unint64_t result = qword_100093578;
  if (!qword_100093578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100093578);
  }
  return result;
}

uint64_t sub_100029F94(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100008580(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100029FF8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002A048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100008580(&qword_100093520);
  __chkstk_darwin(v5 - 8);
  uint64_t v28 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FBKSEvaluation.Action();
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v26 = v7;
  __chkstk_darwin(v7);
  uint64_t v27 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FBKSEvaluation.Subject();
  uint64_t v29 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100008580((uint64_t *)&unk_100094200);
  __chkstk_darwin(v12 - 8);
  Swift::String v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t result = __chkstk_darwin(v15);
  NSString v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_10002A4BC((uint64_t)v14);
    sub_10002A51C();
    swift_allocError();
    *Class v20 = 12;
    swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v14, v15);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v11, v19, v15);
    uint64_t v21 = v29;
    (*(void (**)(char *, void, uint64_t))(v29 + 104))(v11, enum case for FBKSEvaluation.Subject.id(_:), v9);
    if ((a3 - 2) >= 6)
    {
      sub_10002A51C();
      swift_allocError();
      *int64_t v23 = 11;
      swift_willThrow();
      Swift::String v24 = *(void (**)(char *, uint64_t))(v21 + 8);
      a1 = v21 + 8;
      v24(v11, v9);
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v25 + 104))(v27, *(unsigned int *)*(&off_10008E368 + (int)a3 - 2), v26);
      uint64_t v22 = type metadata accessor for FBKSEvaluation.FormResponse();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v28, 1, 1, v22);
      a1 = dispatch thunk of FBKSEvaluation.__allocating_init(subject:action:formResponse:)();
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  }
  return a1;
}

uint64_t sub_10002A4BC(uint64_t a1)
{
  uint64_t v2 = sub_100008580((uint64_t *)&unk_100094200);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10002A51C()
{
  unint64_t result = qword_100094220;
  if (!qword_100094220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100094220);
  }
  return result;
}

uint64_t sub_10002A570(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100077F58(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10002A6C4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_1000935B8);
  sub_100006040(v0, (uint64_t)qword_1000935B8);
  static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)();
}

unint64_t sub_10002A734(uint64_t a1, void *a2, char a3)
{
  if (a3)
  {
    unint64_t v8 = 0;
    _StringGuts.grow(_:)(61);
    v5._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
    v5._object = (void *)0x800000010007DE50;
    String.append(_:)(v5);
  }
  else
  {
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    unint64_t v8 = 0xD000000000000026;
  }
  v6._uint64_t countAndFlagsBits = a1;
  v6._object = a2;
  String.append(_:)(v6);
  return v8;
}

unint64_t sub_10002A7F0()
{
  return sub_10002A734(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

unint64_t sub_10002A7FC(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0x4364657472656C61;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10002A89C(char a1)
{
  unint64_t result = 0xD000000000000013;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10002A930()
{
  type metadata accessor for Persistence();
  uint64_t v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  qword_1000964B0 = v0;
  return result;
}

uint64_t sub_10002A96C(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  sub_100008580((uint64_t *)&unk_100093950);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v3[13] = v4;
  v3[14] = *(void *)(v4 - 8);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  sub_100008580(&qword_100093980);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FormLaunchConfiguration();
  v3[23] = v5;
  v3[24] = *(void *)(v5 - 8);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  return _swift_task_switch(sub_10002ABA4, v2, 0);
}

uint64_t sub_10002ABA4()
{
  char v130 = v0;
  uint64_t v1 = self;
  id v2 = [v1 standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 arrayForKey:v3];

  uint64_t v5 = _swiftEmptyArrayStorage;
  if (v4)
  {
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v7 = sub_10002E1C8(v6);
    swift_bridgeObjectRelease();
    if (v7) {
      uint64_t v5 = v7;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v127 = sub_10002F844((uint64_t)v5);
  v0[32] = v127;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v8 = [v1 standardUserDefaults];
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 arrayForKey:v9];

  uint64_t v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = sub_10002E1C8(v12);
    swift_bridgeObjectRelease();
    if (v13) {
      uint64_t v11 = v13;
    }
  }
  swift_bridgeObjectRetain();
  int64_t v14 = (void *)sub_10002F844((uint64_t)v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v15 = [v1 standardUserDefaults];
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v15 arrayForKey:v16];

  uint64_t v18 = _swiftEmptyArrayStorage;
  if (v17)
  {
    uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    Class v20 = sub_10002E1C8(v19);
    swift_bridgeObjectRelease();
    if (v20) {
      uint64_t v18 = v20;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v128 = sub_10002F844((uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v21 = [v1 standardUserDefaults];
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v21 arrayForKey:v22];

  Swift::String v24 = _swiftEmptyArrayStorage;
  if (v23)
  {
    uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v26 = sub_10002E1C8(v25);
    swift_bridgeObjectRelease();
    if (v26) {
      Swift::String v24 = v26;
    }
  }
  uint64_t v27 = v0 + 7;
  swift_bridgeObjectRetain();
  v0[33] = sub_10002F844((uint64_t)v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[34] = type metadata accessor for FBKSSharedPersistence();
  uint64_t v28 = static FBKSSharedPersistence.fbaInboxFormTat(formIdentifier:)();
  v0[35] = v28;
  v129[0] = v127;
  swift_bridgeObjectRetain();
  uint64_t v29 = swift_bridgeObjectRetain();
  sub_10002A570(v29);
  uint64_t v30 = (void *)v128;
  uint64_t v31 = swift_bridgeObjectRetain();
  sub_10002A570(v31);
  unint64_t v32 = *(void *)(v127 + 16);
  if (v32 < 2)
  {
    if (v32 && !v28) {
      goto LABEL_35;
    }
    goto LABEL_21;
  }
  if (qword_100092A28 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_100006040(v33, (uint64_t)qword_1000935B8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  unint64_t v37 = v0[8];
  if (v36)
  {
    uint64_t v38 = *v27;
    uint64_t v39 = swift_slowAlloc();
    v129[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 136446466;
    uint64_t v125 = v28;
    swift_bridgeObjectRetain();
    v0[5] = sub_100007E60(v38, v37, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v39 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v40 = Array.description.getter();
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    v0[6] = sub_100007E60(v40, v42, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Form identifier [%{public}s] found in more than one queue: [%{public}s]", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v27 = v0 + 7;
    swift_slowDealloc();

    uint64_t v30 = (void *)v128;
    if (!v125) {
      goto LABEL_35;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t v30 = (void *)v128;
  if (v28) {
    goto LABEL_21;
  }
LABEL_35:
  v126 = v27;
  if (qword_100092A28 != -1) {
    swift_once();
  }
  uint64_t v66 = type metadata accessor for Logger();
  sub_100006040(v66, (uint64_t)qword_1000935B8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.default.getter();
  BOOL v69 = os_log_type_enabled(v67, v68);
  unint64_t v70 = v0[8];
  if (v69)
  {
    uint64_t v71 = *v126;
    uint64_t v72 = swift_slowAlloc();
    v129[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v72 = 136446466;
    swift_bridgeObjectRetain();
    v0[3] = sub_100007E60(v71, v70, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v72 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v73 = Array.description.getter();
    unint64_t v75 = v74;
    swift_bridgeObjectRelease();
    v0[4] = sub_100007E60(v73, v75, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v30 = (void *)v128;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Form identifier [%{public}s] found in queue: [%{public}s] but not in FBA inbox", (uint8_t *)v72, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
LABEL_22:
  if (v14[2])
  {
    uint64_t v43 = v0[23];
    uint64_t v44 = v0[24];
    uint64_t v45 = v0[22];
    uint64_t v46 = v14[4];
    uint64_t v47 = v14[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_10002C7E4(v46, v47, v45);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v45, 1, v43) != 1)
    {
      uint64_t v59 = v0[31];
      uint64_t v60 = v0[22];
      uint64_t v61 = v0[23];
      uint64_t v62 = v0[18];
      uint64_t v63 = v0[13];
      uint64_t v64 = v0[14];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100013D20(v60, v59);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16))(v62, v59 + *(int *)(v61 + 24), v63);
      id v65 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign());
      uint64_t v124 = FBKSCampaign.init(state:updatedAt:)();
      swift_release();
      goto LABEL_33;
    }
    sub_10000A738(v0[22], &qword_100093980);
    if (!v30[2])
    {
LABEL_25:
      swift_bridgeObjectRelease();
      Class v48 = (void *)v0[32];
      if (v48[2])
      {
        uint64_t v49 = v0[23];
        uint64_t v50 = v0[24];
        uint64_t v51 = v0[20];
        uint64_t v52 = v48[4];
        uint64_t v53 = v48[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_10002C7E4(v52, v53, v51);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v51, 1, v49) != 1)
        {
          uint64_t v78 = v0[28];
          uint64_t v79 = v0[23];
          uint64_t v80 = v0[20];
          uint64_t v81 = v0[18];
          uint64_t v82 = v0[13];
          uint64_t v83 = v0[14];
          swift_bridgeObjectRelease();
          sub_100013D20(v80, v78);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v81, v78 + *(int *)(v79 + 24), v82);
          id v84 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign());
LABEL_44:
          uint64_t v124 = FBKSCampaign.init(state:updatedAt:)();
          swift_release();
          sub_100013DE8(v78);
          goto LABEL_55;
        }
        sub_10000A738(v0[20], &qword_100093980);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      unint64_t v76 = (void *)v0[33];
      if (v0[35])
      {
        swift_retain();
        swift_bridgeObjectRelease();
        FBKSSInboxTat.dateAdded.getter();
        id v77 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign());
        uint64_t v124 = FBKSCampaign.init(state:updatedAt:)();
        swift_release_n();
        goto LABEL_55;
      }
      if (!v76[2])
      {
        swift_bridgeObjectRelease();
LABEL_54:
        uint64_t v124 = 0;
        goto LABEL_55;
      }
      uint64_t v86 = v76[4];
      unint64_t v85 = v76[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (qword_100092A28 != -1) {
        swift_once();
      }
      uint64_t v87 = type metadata accessor for Logger();
      sub_100006040(v87, (uint64_t)qword_1000935B8);
      swift_bridgeObjectRetain_n();
      unint64_t v88 = Logger.logObject.getter();
      os_log_type_t v89 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v88, v89))
      {
        unint64_t v90 = (uint8_t *)swift_slowAlloc();
        v129[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v90 = 136446210;
        swift_bridgeObjectRetain();
        v0[2] = sub_100007E60(v86, v85, v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "Using alerted campaign [%{public}s]", v90, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v91 = v0[23];
      uint64_t v92 = v0[24];
      uint64_t v93 = v0[19];
      sub_10002C53C(v86, v85, v93);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v93, 1, v91) == 1)
      {
        sub_10000A738(v0[19], &qword_100093980);
        goto LABEL_54;
      }
      uint64_t v95 = v0[27];
      uint64_t v96 = v0[23];
      uint64_t v97 = v0[14];
      sub_100013D20(v0[19], v95);
      uint64_t v98 = static FBKSSharedPersistence.fbaInboxFormTat(formIdentifier:)();
      uint64_t v99 = v95 + *(int *)(v96 + 32);
      unint64_t v100 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
      uint64_t v101 = v0[27];
      uint64_t v102 = v0[13];
      if (v98)
      {
        uint64_t v103 = v0[26];
        uint64_t v104 = v0[11];
        sub_10000FAD8(v99, v104);
        sub_100013D84(v101, v103);
        int v105 = (*v100)(v104, 1, v102);
        uint64_t v106 = v0[26];
        if (v105 == 1)
        {
          uint64_t v107 = v0[11];
          (*(void (**)(void, uint64_t, void))(v0[14] + 16))(v0[16], v106 + *(int *)(v0[23] + 24), v0[13]);
          sub_100013DE8(v106);
          sub_10000A738(v107, (uint64_t *)&unk_100093950);
        }
        else
        {
          uint64_t v113 = v0[16];
          uint64_t v114 = v0[13];
          uint64_t v115 = v0[14];
          uint64_t v116 = v0[11];
          sub_100013DE8(v0[26]);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 32))(v113, v116, v114);
        }
        uint64_t v78 = v0[27];
        id v117 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign());
        goto LABEL_44;
      }
      uint64_t v108 = v0[25];
      uint64_t v109 = v0[10];
      sub_10000FAD8(v99, v109);
      sub_100013D84(v101, v108);
      int v110 = (*v100)(v109, 1, v102);
      uint64_t v111 = v0[25];
      if (v110 == 1)
      {
        uint64_t v112 = v0[10];
        (*(void (**)(void, uint64_t, void))(v0[14] + 16))(v0[15], v111 + *(int *)(v0[23] + 24), v0[13]);
        sub_100013DE8(v111);
        sub_10000A738(v112, (uint64_t *)&unk_100093950);
      }
      else
      {
        uint64_t v119 = v0[14];
        uint64_t v118 = v0[15];
        uint64_t v120 = v0[13];
        uint64_t v121 = v0[10];
        sub_100013DE8(v0[25]);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 32))(v118, v121, v120);
      }
      uint64_t v59 = v0[27];
      id v122 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign());
      uint64_t v124 = FBKSCampaign.init(state:updatedAt:)();
LABEL_33:
      sub_100013DE8(v59);
LABEL_55:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      long long v94 = (uint64_t (*)(uint64_t))v0[1];
      return v94(v124);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (!v30[2]) {
      goto LABEL_25;
    }
  }
  uint64_t v54 = v30[4];
  uint64_t v55 = v30[5];
  v0[36] = v55;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Class v56 = (void *)swift_task_alloc();
  v0[37] = v56;
  void *v56 = v0;
  v56[1] = sub_10002BC24;
  uint64_t v57 = v0[21];
  uint64_t v58 = v0[9];
  v56[8] = v55;
  v56[9] = v58;
  v56[6] = v57;
  v56[7] = v54;
  return _swift_task_switch(sub_10002D60C, v58, 0);
}

uint64_t sub_10002BC24()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10002BD50, v1, 0);
}

uint64_t sub_10002BD50()
{
  uint64_t v72 = v0;
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[21];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[24] + 48))(v2, 1, v1) != 1)
  {
    uint64_t v10 = v0[29];
    uint64_t v9 = v0[30];
    uint64_t v11 = v0[13];
    uint64_t v12 = v0[14];
    uint64_t v13 = v0[12];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100013D20(v2, v9);
    sub_10000FAD8(v9 + *(int *)(v1 + 32), v13);
    sub_100013D84(v9, v10);
    int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11);
    uint64_t v15 = v0[29];
    if (v14 == 1)
    {
      uint64_t v16 = v0[12];
      (*(void (**)(void, uint64_t, void))(v0[14] + 16))(v0[17], v15 + *(int *)(v0[23] + 24), v0[13]);
      sub_100013DE8(v15);
      sub_10000A738(v16, (uint64_t *)&unk_100093950);
    }
    else
    {
      uint64_t v17 = v0[17];
      uint64_t v18 = v0[13];
      uint64_t v19 = v0[14];
      uint64_t v20 = v0[12];
      sub_100013DE8(v0[29]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v17, v20, v18);
    }
    uint64_t v21 = v0[30];
    objc_allocWithZone((Class)type metadata accessor for FBKSCampaign());
    goto LABEL_13;
  }
  sub_10000A738(v2, &qword_100093980);
  uint64_t v3 = (void *)v0[32];
  if (v3[2])
  {
    uint64_t v4 = v0[23];
    uint64_t v5 = v0[24];
    uint64_t v6 = v0[20];
    uint64_t v7 = v3[4];
    uint64_t v8 = v3[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_10002C7E4(v7, v8, v6);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) != 1)
    {
      uint64_t v21 = v0[28];
      uint64_t v24 = v0[23];
      uint64_t v25 = v0[20];
      uint64_t v26 = v0[18];
      uint64_t v27 = v0[13];
      uint64_t v28 = v0[14];
      swift_bridgeObjectRelease();
      sub_100013D20(v25, v21);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v26, v21 + *(int *)(v24 + 24), v27);
      id v29 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign());
      goto LABEL_13;
    }
    sub_10000A738(v0[20], &qword_100093980);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  NSString v22 = (void *)v0[33];
  if (v0[35])
  {
    swift_retain();
    swift_bridgeObjectRelease();
    FBKSSInboxTat.dateAdded.getter();
    id v23 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign());
    uint64_t v70 = FBKSCampaign.init(state:updatedAt:)();
    swift_release_n();
    goto LABEL_15;
  }
  if (v22[2])
  {
    uint64_t v34 = v22[4];
    unint64_t v33 = v22[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (qword_100092A28 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100006040(v35, (uint64_t)qword_1000935B8);
    swift_bridgeObjectRetain_n();
    BOOL v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v71 = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136446210;
      swift_bridgeObjectRetain();
      v0[2] = sub_100007E60(v34, v33, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Using alerted campaign [%{public}s]", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v39 = v0[23];
    uint64_t v40 = v0[24];
    uint64_t v41 = v0[19];
    sub_10002C53C(v34, v33, v41);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v41, 1, v39) == 1)
    {
      sub_10000A738(v0[19], &qword_100093980);
      goto LABEL_27;
    }
    uint64_t v42 = v0[27];
    uint64_t v43 = v0[23];
    uint64_t v44 = v0[14];
    sub_100013D20(v0[19], v42);
    uint64_t v45 = static FBKSSharedPersistence.fbaInboxFormTat(formIdentifier:)();
    uint64_t v46 = v42 + *(int *)(v43 + 32);
    uint64_t v47 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
    uint64_t v48 = v0[27];
    uint64_t v49 = v0[13];
    if (!v45)
    {
      uint64_t v55 = v0[25];
      uint64_t v56 = v0[10];
      sub_10000FAD8(v46, v56);
      sub_100013D84(v48, v55);
      int v57 = (*v47)(v56, 1, v49);
      uint64_t v58 = v0[25];
      if (v57 == 1)
      {
        uint64_t v59 = v0[10];
        (*(void (**)(void, uint64_t, void))(v0[14] + 16))(v0[15], v58 + *(int *)(v0[23] + 24), v0[13]);
        sub_100013DE8(v58);
        sub_10000A738(v59, (uint64_t *)&unk_100093950);
      }
      else
      {
        uint64_t v65 = v0[14];
        uint64_t v64 = v0[15];
        uint64_t v66 = v0[13];
        uint64_t v67 = v0[10];
        sub_100013DE8(v0[25]);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v64, v67, v66);
      }
      uint64_t v68 = v0[27];
      id v69 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign());
      uint64_t v70 = FBKSCampaign.init(state:updatedAt:)();
      uint64_t v30 = v68;
      goto LABEL_14;
    }
    uint64_t v50 = v0[26];
    uint64_t v51 = v0[11];
    sub_10000FAD8(v46, v51);
    sub_100013D84(v48, v50);
    int v52 = (*v47)(v51, 1, v49);
    uint64_t v53 = v0[26];
    if (v52 == 1)
    {
      uint64_t v54 = v0[11];
      (*(void (**)(void, uint64_t, void))(v0[14] + 16))(v0[16], v53 + *(int *)(v0[23] + 24), v0[13]);
      sub_100013DE8(v53);
      sub_10000A738(v54, (uint64_t *)&unk_100093950);
    }
    else
    {
      uint64_t v60 = v0[16];
      uint64_t v61 = v0[13];
      uint64_t v62 = v0[14];
      uint64_t v63 = v0[11];
      sub_100013DE8(v0[26]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(v60, v63, v61);
    }
    uint64_t v21 = v0[27];
    objc_allocWithZone((Class)type metadata accessor for FBKSCampaign());
LABEL_13:
    uint64_t v70 = FBKSCampaign.init(state:updatedAt:)();
    swift_release();
    uint64_t v30 = v21;
LABEL_14:
    sub_100013DE8(v30);
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
LABEL_27:
  uint64_t v70 = 0;
LABEL_15:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = (uint64_t (*)(uint64_t))v0[1];
  return v31(v70);
}

uint64_t sub_10002C53C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10002DDD4(a1, a2, a3);
  uint64_t v4 = type metadata accessor for FormLaunchConfiguration();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a3, 0, 1, v4);
}

uint64_t sub_10002C7E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10002DDD4(a1, a2, a3);
  uint64_t v4 = type metadata accessor for FormLaunchConfiguration();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a3, 0, 1, v4);
}

uint64_t sub_10002CAF4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 48) = a4;
  *(void *)(v6 + 56) = a5;
  *(unsigned char *)(v6 + 112) = a2;
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 40) = a3;
  *(void *)(v6 + 64) = type metadata accessor for FormLaunchConfiguration();
  *(void *)(v6 + 72) = swift_task_alloc();
  *(void *)(v6 + 80) = swift_task_alloc();
  return _swift_task_switch(sub_10002CBA0, v5, 0);
}

uint64_t sub_10002CBA0()
{
  uint64_t v48 = v0;
  if (qword_100092A28 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[10];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100006040(v3, (uint64_t)qword_1000935B8);
  sub_100013D84(v1, v2);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (uint64_t *)v0[10];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446466;
    v0[2] = sub_100007E60(0xD000000000000047, 0x800000010007DD80, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2080;
    uint64_t v10 = *v7;
    unint64_t v9 = v7[1];
    swift_bridgeObjectRetain();
    v0[3] = sub_100007E60(v10, v9, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100013DE8((uint64_t)v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s [%s]", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100013DE8(v0[10]);
  }

  uint64_t v11 = v0[8];
  uint64_t v12 = *(void *)(v0[4] + *(int *)(v11 + 28));
  if (qword_100092A90 != -1) {
    swift_once();
  }
  uint64_t v13 = (void *)qword_100094010;
  swift_bridgeObjectRetain();
  id v14 = v13;
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v14 integerForKey:v15];

  swift_bridgeObjectRelease();
  if (v12 >= (uint64_t)v16)
  {
    sub_10002F454(v0[5], v0[6]);
    if (qword_100092A58 != -1) {
      swift_once();
    }
    uint64_t v31 = (void *)v0[4];
    uint64_t v32 = qword_1000964D8;
    v0[11] = qword_1000964D8;
    v0[12] = *v31;
    v0[13] = v31[1];
    return _swift_task_switch(sub_10002D138, v32, 0);
  }
  else
  {
    uint64_t v18 = (int *)v0[8];
    uint64_t v17 = v0[9];
    uint64_t v19 = (uint64_t *)v0[4];
    uint64_t v43 = v19[2];
    uint64_t v44 = *v19;
    uint64_t v33 = v19[1];
    uint64_t v34 = v19[3];
    uint64_t v35 = v19[5];
    uint64_t v41 = v19[6];
    uint64_t v42 = v19[4];
    uint64_t v46 = v11;
    uint64_t v20 = v19[7];
    uint64_t v21 = v19[9];
    uint64_t v39 = v19[10];
    uint64_t v40 = v19[8];
    uint64_t v22 = v19[11];
    __int16 v38 = *((_WORD *)v19 + 48);
    uint64_t v37 = v19[13];
    uint64_t v45 = v12 + 1;
    uint64_t v23 = v17 + v18[8];
    char v36 = *((unsigned char *)v19 + 112);
    uint64_t v24 = type metadata accessor for Date();
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
    v25(v23, 1, 1, v24);
    v25(v17 + v18[9], 1, 1, v24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Date.init()();
    *(void *)uint64_t v17 = v44;
    *(void *)(v17 + 8) = v33;
    *(void *)(v17 + 16) = v43;
    *(void *)(v17 + 24) = v34;
    *(void *)(v17 + 32) = v42;
    *(void *)(v17 + 40) = v35;
    *(void *)(v17 + 48) = v41;
    *(void *)(v17 + 56) = v20;
    *(void *)(v17 + 64) = v40;
    *(void *)(v17 + 72) = v21;
    *(void *)(v17 + 80) = v39;
    *(void *)(v17 + 88) = v22;
    *(_WORD *)(v17 + 96) = v38;
    *(void *)(v17 + 104) = v37;
    *(unsigned char *)(v17 + 112) = v36;
    *(void *)(v17 + *(int *)(v46 + 28)) = v45;
    *(void *)(v17 + v18[10]) = 0;
    id v26 = [self standardUserDefaults];
    sub_10001FE40();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v28 = String._bridgeToObjectiveC()();
    [v26 setObject:isa forKey:v28];

    sub_100013DE8(v17);
    swift_task_dealloc();
    swift_task_dealloc();
    id v29 = (uint64_t (*)(void))v0[1];
    return v29();
  }
}

uint64_t sub_10002D138()
{
  sub_100044608(*(void **)(v0 + 96), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 104));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10002D1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  sub_100008580(&qword_100093980);
  v4[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FormLaunchConfiguration();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  return _swift_task_switch(sub_10002D2A4, v3, 0);
}

uint64_t sub_10002D2A4()
{
  String.append(_:)(*(Swift::String *)(v0 + 24));
  *(void *)(v0 + 80) = 0xD000000000000013;
  *(void *)(v0 + 88) = 0x800000010007DCB0;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10002D388;
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  v1[8] = 0x800000010007DCB0;
  v1[9] = v2;
  v1[6] = v3;
  v1[7] = 0xD000000000000013;
  return _swift_task_switch(sub_10002D60C, v2, 0);
}

uint64_t sub_10002D388()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_10002D498, v1, 0);
}

uint64_t sub_10002D498()
{
  uint64_t v1 = v0[6];
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v0[8] + 48))(v1, 1, v0[7]);
  uint64_t v3 = v0[11];
  if (v2 == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000A738(v1, &qword_100093980);
    uint64_t v4 = sub_100008580((uint64_t *)&unk_1000937C0);
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v6 = v0[9];
    uint64_t v7 = v0[10];
    uint64_t v8 = v0[2];
    sub_100013D20(v1, v6);
    uint64_t v4 = sub_100008580((uint64_t *)&unk_1000937C0);
    unint64_t v9 = (void *)(v8 + *(int *)(v4 + 48));
    sub_100013D20(v6, v8);
    uint64_t v5 = 0;
    *unint64_t v9 = v7;
    v9[1] = v3;
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v0[2], v5, 1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10002D5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  return _swift_task_switch(sub_10002D60C, v3, 0);
}

uint64_t sub_10002D60C()
{
  sub_10002DDD4(v0[7], v0[8], v0[6]);
  uint64_t v1 = v0[6];
  uint64_t v2 = type metadata accessor for FormLaunchConfiguration();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10002D9A4()
{
  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 72);
  sub_100044608(*(void **)(v0 + 80), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 88));
  swift_bridgeObjectRelease();

  swift_errorRelease();
  return _swift_task_switch(sub_10002DA40, v2, 0);
}

uint64_t sub_10002DA40()
{
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = type metadata accessor for FormLaunchConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10002DAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_100093790);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100008580(&qword_100093798);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100008580(&qword_1000937A0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008580(&qword_1000937A8);
  Regex.init(_regexString:version:)();
  v17[0] = a1;
  v17[1] = a2;
  sub_100031838();
  sub_10003188C();
  BidirectionalCollection<>.wholeMatch<A>(of:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    sub_10000A738((uint64_t)v6, &qword_100093790);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    swift_getKeyPath();
    Regex.Match.subscript.getter();
    swift_release();
    uint64_t v15 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  return v15;
}

uint64_t sub_10002DDD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100008580(&qword_100093980);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [self standardUserDefaults];
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 objectForKey:v10];

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_1000187B8((uint64_t)v17, (uint64_t)v18);
  if (!v19)
  {
    sub_10000A738((uint64_t)v18, (uint64_t *)&unk_100093910);
    goto LABEL_9;
  }
  sub_100008580(&qword_100092C50);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    char v13 = 0;
    goto LABEL_10;
  }
  sub_1000204DC(v16[1], (uint64_t)v8);
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for FormLaunchConfiguration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v8, 1, v12) == 1)
  {
    sub_10000A738((uint64_t)v8, &qword_100093980);
    char v13 = 1;
LABEL_10:
    sub_1000317DC();
    swift_allocError();
    *(void *)uint64_t v14 = a1;
    *(void *)(v14 + 8) = a2;
    *(unsigned char *)(v14 + 16) = v13;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return sub_100013D20((uint64_t)v8, a3);
}

uint64_t sub_10002E000(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  NSString v10 = a3 + 7;
  uint64_t v11 = 1;
  while (1)
  {
    if (v3 == v11) {
      return 0;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = v11++;
    v10 += 2;
    if (v13) {
      return result;
    }
  }
  return v9;
}

uint64_t sub_10002E0E8(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_10002E334((uint64_t)v3);
  }
  unint64_t v4 = *((void *)v3 + 2);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      BOOL v7 = &v3[16 * a1];
      uint64_t v8 = *((void *)v7 + 4);
      memmove(v7 + 32, v7 + 48, 16 * v6);
      *((void *)v3 + 2) = v5;
      *uint64_t v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10002E1C8(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v12 = &_swiftEmptyArrayStorage;
  sub_1000085E4(0, v2, 0);
  uint64_t v3 = &_swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_10000A7E0(i, (uint64_t)v11);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000085E4(0, v3[2] + 1, 1);
        uint64_t v3 = v12;
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1)
      {
        sub_1000085E4(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v12;
      }
      v3[2] = v6 + 1;
      BOOL v7 = (char *)&v3[2 * v6];
      *((void *)v7 + 4) = v9;
      *((void *)v7 + 5) = v10;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

uint64_t type metadata accessor for Persistence()
{
  return self;
}

char *sub_10002E334(uint64_t a1)
{
  return sub_100077F58(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_10002E348()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 arrayForKey:v1];

  uint64_t v3 = &_swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v5 = sub_10002E1C8(v4);
    swift_bridgeObjectRelease();
    if (v5) {
      return v5;
    }
  }
  return v3;
}

void sub_10002E4A4(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = (char *)sub_10002E348();
  sub_10002E000(a1, a2, v6);
  if (v7)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v6 = sub_100077F58(0, *((void *)v6 + 2) + 1, 1, v6);
    }
    unint64_t v16 = *((void *)v6 + 2);
    unint64_t v15 = *((void *)v6 + 3);
    if (v16 >= v15 >> 1) {
      unint64_t v6 = sub_100077F58((char *)(v15 > 1), v16 + 1, 1, v6);
    }
    *((void *)v6 + 2) = v16 + 1;
    uint64_t v17 = &v6[16 * v16];
    *((void *)v17 + 4) = a1;
    *((void *)v17 + 5) = a2;
    id v18 = [self standardUserDefaults];
    v19.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 setObject:v19.super.isa forKey:v20];
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_100092A28 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100006040(v8, (uint64_t)qword_1000935B8);
    swift_bridgeObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446722;
      sub_100007E60(0xD000000000000015, 0x800000010007DBF0, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_100007E60(a1, a2, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v11 + 22) = 2082;
      uint64_t v12 = 0xD000000000000013;
      unint64_t v13 = 0x800000010007DBD0;
      switch(a3)
      {
        case 1:
          uint64_t v14 = "pendingNotifications";
          goto LABEL_17;
        case 2:
          uint64_t v14 = "snoozedNotifications";
LABEL_17:
          unint64_t v13 = (unint64_t)(v14 - 32) | 0x8000000000000000;
          uint64_t v12 = 0xD000000000000014;
          break;
        case 3:
          uint64_t v12 = 0xD000000000000010;
          unint64_t v13 = 0x800000010007DB90;
          break;
        default:
          break;
      }
      sub_100007E60(v12, v13, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s key [%{public}s] already present in index [%{public}s]", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

unint64_t sub_10002E92C(Swift::String *a1)
{
  sub_10001FE40();
  String.append(_:)(*a1);
  id v2 = [self standardUserDefaults];
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v4 = String._bridgeToObjectiveC()();
  [v2 setObject:isa forKey:v4];

  sub_10002E4A4(0xD000000000000013, 0x800000010007DCB0, 0);
  return 0xD000000000000013;
}

unint64_t sub_10002EA38(Swift::String *a1)
{
  if (qword_100092A28 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100006040(v2, (uint64_t)qword_1000935B8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 136446210;
    sub_100007E60(0xD000000000000026, 0x800000010007DDD0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return sub_10002E92C(a1);
}

uint64_t sub_10002EBC0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a4;
  uint64_t v9 = type metadata accessor for FormLaunchConfiguration();
  os_log_type_t v10 = (int *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = &v12[v10[10]];
  uint64_t v14 = type metadata accessor for Date();
  unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  v15(&v12[v10[11]], 1, 1, v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100013E44(a1);
  Date.init()();
  *(void *)uint64_t v12 = a2;
  *((void *)v12 + 1) = a3;
  *((void *)v12 + 2) = v29;
  *((void *)v12 + 3) = a5;
  long long v16 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v12 + 4) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v12 + 5) = v16;
  *((_OWORD *)v12 + 6) = *(_OWORD *)(a1 + 64);
  v12[112] = *(unsigned char *)(a1 + 80);
  long long v17 = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v12 + 2) = *(_OWORD *)a1;
  *((_OWORD *)v12 + 3) = v17;
  *(void *)&v12[v10[9]] = 0;
  *(void *)&v12[v10[12]] = 0;
  sub_10001FE40();
  sub_100013DE8((uint64_t)v12);
  uint64_t v31 = 0xD000000000000014;
  unint64_t v32 = 0x800000010007DE00;
  v18._uint64_t countAndFlagsBits = a2;
  v18._object = a3;
  String.append(_:)(v18);
  uint64_t v20 = v31;
  unint64_t v19 = v32;
  if (qword_100092A28 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100006040(v21, (uint64_t)qword_1000935B8);
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136446466;
    uint64_t v30 = sub_100007E60(0xD00000000000002ELL, 0x800000010007DE20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v30 = sub_100007E60(v20, v19, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s [%{public}s]", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v25 = [self standardUserDefaults];
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v27 = String._bridgeToObjectiveC()();
  [v25 setObject:isa forKey:v27];

  sub_10002E4A4(v20, v19, 1);
  return v20;
}

void *sub_10002EFAC()
{
  id v0 = self;
  id v1 = [v0 standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 arrayForKey:v2];

  os_log_type_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v6 = sub_10002E1C8(v5);
    swift_bridgeObjectRelease();
    if (v6) {
      os_log_type_t v4 = v6;
    }
  }
  uint64_t v7 = v4[2];
  if (v7)
  {
    uint64_t v8 = v4 + 5;
    uint64_t v9 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v11 = *(v8 - 1);
      uint64_t v10 = *v8;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = sub_100078068(0, v9[2] + 1, 1, v9);
      }
      unint64_t v13 = v9[2];
      unint64_t v12 = v9[3];
      if (v13 >= v12 >> 1) {
        uint64_t v9 = sub_100078068((void *)(v12 > 1), v13 + 1, 1, v9);
      }
      v8 += 2;
      v9[2] = v13 + 1;
      uint64_t v14 = &v9[3 * v13];
      v14[4] = v11;
      v14[5] = v10;
      *((unsigned char *)v14 + 48) = 0;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  id v15 = [v0 standardUserDefaults];
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v15 arrayForKey:v16];

  Swift::String v18 = _swiftEmptyArrayStorage;
  if (v17)
  {
    uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v20 = sub_10002E1C8(v19);
    swift_bridgeObjectRelease();
    if (v20) {
      Swift::String v18 = v20;
    }
  }
  uint64_t v21 = v18[2];
  if (v21)
  {
    uint64_t v22 = v18 + 5;
    do
    {
      uint64_t v24 = *(v22 - 1);
      uint64_t v23 = *v22;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = sub_100078068(0, v9[2] + 1, 1, v9);
      }
      unint64_t v26 = v9[2];
      unint64_t v25 = v9[3];
      if (v26 >= v25 >> 1) {
        uint64_t v9 = sub_100078068((void *)(v25 > 1), v26 + 1, 1, v9);
      }
      v22 += 2;
      v9[2] = v26 + 1;
      NSString v27 = &v9[3 * v26];
      v27[4] = v24;
      v27[5] = v23;
      *((unsigned char *)v27 + 48) = 1;
      --v21;
    }
    while (v21);
  }
  swift_bridgeObjectRelease();
  return v9;
}

void sub_10002F29C(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = sub_10002E348();
  unint64_t v4 = sub_10002E000(a1, a2, v9);
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10002E0E8(v4);
    swift_bridgeObjectRelease();
    id v6 = [self standardUserDefaults];
    v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v6 setObject:v7.super.isa forKey:v8];
  }
}

void sub_10002F454(uint64_t a1, unint64_t a2)
{
  if (qword_100092A28 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100006040(v4, (uint64_t)qword_1000935B8);
  swift_bridgeObjectRetain_n();
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    NSArray v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)NSArray v7 = 136446210;
    swift_bridgeObjectRetain();
    sub_100007E60(a1, a2, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Removing %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_10002F29C(a1, a2);
  id v8 = [self standardUserDefaults];
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 removeObjectForKey:v9];
}

void sub_10002F670()
{
  if (qword_100092A28 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100006040(v0, (uint64_t)qword_1000935B8);
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)id v3 = 136446210;
    sub_100007E60(0x6C416574656C6564, 0xEF2928617461446CLL, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v4 = [self standardUserDefaults];
  static Strings.Daemon.bundleIdentifier.getter();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 removePersistentDomainForName:v5];
}

uint64_t sub_10002F844(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = result + 40;
    uint64_t v4 = -(uint64_t)v1;
    uint64_t v13 = result + 40;
    unint64_t v14 = *(void *)(result + 16);
    do
    {
      if (v2 <= v1) {
        unint64_t v5 = v1;
      }
      else {
        unint64_t v5 = v2;
      }
      uint64_t v6 = -(uint64_t)v5;
      for (uint64_t i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
      {
        if (v6 + v2 == 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v9 = *(i - 1);
        uint64_t v8 = *i;
        sub_10000A8D8();
        swift_bridgeObjectRetain();
        if (StringProtocol.contains<A>(_:)()) {
          break;
        }
        uint64_t result = swift_bridgeObjectRelease();
        ++v2;
        if (v4 + v2 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = sub_1000085E4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1) {
        uint64_t result = sub_1000085E4(v10 > 1, v11 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v11 + 1;
      unint64_t v12 = (char *)&_swiftEmptyArrayStorage[2 * v11];
      *((void *)v12 + 4) = v9;
      *((void *)v12 + 5) = v8;
      uint64_t v3 = v13;
      unint64_t v1 = v14;
    }
    while (v4 + v2);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

void sub_10002F9D8(uint64_t a1, unint64_t a2)
{
  if (qword_100092A28 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100006040(v4, (uint64_t)qword_1000935B8);
  swift_bridgeObjectRetain_n();
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    NSArray v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)NSArray v7 = 136446210;
    swift_bridgeObjectRetain();
    sub_100007E60(a1, a2, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Removing %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v8 = [self standardUserDefaults];
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 removeObjectForKey:v9];

  sub_10002F29C(a1, a2);
}

void sub_10002FBE0(uint64_t a1, unint64_t a2)
{
  if (qword_100092A28 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100006040(v4, (uint64_t)qword_1000935B8);
  swift_bridgeObjectRetain_n();
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    NSArray v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)NSArray v7 = 136446210;
    swift_bridgeObjectRetain();
    sub_100007E60(a1, a2, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Removing %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_10002F29C(a1, a2);
  id v8 = [self standardUserDefaults];
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 removeObjectForKey:v9];
}

BOOL sub_10002FDE8()
{
  uint64_t v0 = self;
  id v1 = [v0 standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 arrayForKey:v2];

  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    os_log_type_t v6 = sub_10002E1C8(v5);
    swift_bridgeObjectRelease();
    if (v6) {
      uint64_t v4 = v6;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_10002F844((uint64_t)v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v7 + 16);
  swift_bridgeObjectRelease();
  if (v8) {
    return 1;
  }
  id v9 = [v0 standardUserDefaults];
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 arrayForKey:v10];

  unint64_t v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v14 = sub_10002E1C8(v13);
    swift_bridgeObjectRelease();
    if (v14) {
      unint64_t v12 = v14;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_10002F844((uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(v15 + 16);
  swift_bridgeObjectRelease();
  if (v16) {
    return 1;
  }
  id v17 = [v0 standardUserDefaults];
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v17 arrayForKey:v18];

  uint64_t v20 = _swiftEmptyArrayStorage;
  if (v19)
  {
    uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v22 = sub_10002E1C8(v21);
    swift_bridgeObjectRelease();
    if (v22) {
      uint64_t v20 = v22;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_10002F844((uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v23 + 16);
  swift_bridgeObjectRelease();
  if (v24) {
    return 1;
  }
  id v26 = [v0 standardUserDefaults];
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v26 arrayForKey:v27];

  uint64_t v29 = _swiftEmptyArrayStorage;
  if (v28)
  {
    uint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v31 = sub_10002E1C8(v30);
    swift_bridgeObjectRelease();
    if (v31) {
      uint64_t v29 = v31;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = sub_10002F844((uint64_t)v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(v32 + 16);
  swift_bridgeObjectRelease();
  return v33 != 0;
}

uint64_t sub_1000301C8()
{
  uint64_t v0 = self;
  id v1 = (SEL *)&unk_100091000;
  id v2 = [v0 standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 arrayForKey:v3];

  if (v4)
  {
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    os_log_type_t v6 = sub_10002E1C8(v5);
    swift_bridgeObjectRelease();
    if (!v6) {
      os_log_type_t v6 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    os_log_type_t v6 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_10002F844((uint64_t)v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  uint64_t v9 = 0;
LABEL_10:
  NSString v10 = (uint64_t *)(v7 + 32 + 16 * v9);
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  uint64_t v13 = qword_100092A28;
  swift_bridgeObjectRetain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100006040(v14, (uint64_t)qword_1000935B8);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    v96[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v17 + 4) = sub_100007E60(v11, v12, v96);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Removing %{public}s", (uint8_t *)v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v1 = (SEL *)&unk_100091000;
  id v18 = [v0 standardUserDefaults];
  NSString v19 = String._bridgeToObjectiveC()();
  [v18 removeObjectForKey:v19];

  id v20 = [v0 standardUserDefaults];
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 arrayForKey:v21];

  if (v22)
  {
    uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v24 = sub_10002E1C8(v23);
    swift_bridgeObjectRelease();
    if (!v24) {
      uint64_t v24 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    uint64_t v24 = _swiftEmptyArrayStorage;
  }
  ++v9;
  uint64_t v25 = v24[2];
  if (!v25)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  if (v24[4] == v11 && v24[5] == v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    unint64_t v26 = 0;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_25;
  }
  uint64_t v33 = v24 + 7;
  uint64_t v34 = 1;
  do
  {
    if (v25 == v34)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v1 = (SEL *)&unk_100091000;
LABEL_9:
      if (v9 == v8)
      {
        swift_bridgeObjectRelease();
LABEL_40:
        id v37 = [v0 v1[397]];
        NSString v38 = String._bridgeToObjectiveC()();
        id v39 = [v37 arrayForKey:v38];

        uint64_t v40 = _swiftEmptyArrayStorage;
        if (v39)
        {
          uint64_t v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v42 = sub_10002E1C8(v41);
          swift_bridgeObjectRelease();
          if (v42) {
            uint64_t v40 = v42;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v43 = sub_10002F844((uint64_t)v40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v44 = *(void *)(v43 + 16);
        if (v44)
        {
          uint64_t v45 = (unint64_t *)(v43 + 40);
          do
          {
            uint64_t v46 = *(v45 - 1);
            unint64_t v47 = *v45;
            swift_bridgeObjectRetain();
            sub_10002F454(v46, v47);
            swift_bridgeObjectRelease();
            v45 += 2;
            --v44;
          }
          while (v44);
        }
        swift_bridgeObjectRelease();
        id v48 = [v0 v1[397]];
        NSString v49 = String._bridgeToObjectiveC()();
        id v50 = [v48 arrayForKey:v49];

        uint64_t v51 = _swiftEmptyArrayStorage;
        if (v50)
        {
          uint64_t v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v53 = sub_10002E1C8(v52);
          swift_bridgeObjectRelease();
          if (v53) {
            uint64_t v51 = v53;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v54 = sub_10002F844((uint64_t)v51);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v55 = *(void *)(v54 + 16);
        if (v55)
        {
          uint64_t v56 = (unint64_t *)(v54 + 40);
          do
          {
            uint64_t v57 = *(v56 - 1);
            unint64_t v58 = *v56;
            swift_bridgeObjectRetain();
            sub_10002F454(v57, v58);
            swift_bridgeObjectRelease();
            v56 += 2;
            --v55;
          }
          while (v55);
        }
        swift_bridgeObjectRelease();
        id v59 = [v0 v1[397]];
        NSString v60 = String._bridgeToObjectiveC()();
        id v61 = [v59 arrayForKey:v60];

        if (v61)
        {
          uint64_t v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v63 = sub_10002E1C8(v62);
          swift_bridgeObjectRelease();
          if (!v63) {
            uint64_t v63 = _swiftEmptyArrayStorage;
          }
        }
        else
        {
          uint64_t v63 = _swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRetain();
        uint64_t v64 = sub_10002F844((uint64_t)v63);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v65 = *(void *)(v64 + 16);
        if (!v65)
        {
LABEL_89:
          return swift_bridgeObjectRelease();
        }
        uint64_t v66 = 0;
        uint64_t v95 = v64 + 32;
        while (2)
        {
          id v69 = (uint64_t *)(v95 + 16 * v66);
          uint64_t v70 = *v69;
          unint64_t v71 = v69[1];
          uint64_t v72 = qword_100092A28;
          swift_bridgeObjectRetain();
          if (v72 != -1) {
            swift_once();
          }
          uint64_t v73 = type metadata accessor for Logger();
          sub_100006040(v73, (uint64_t)qword_1000935B8);
          swift_bridgeObjectRetain_n();
          unint64_t v74 = Logger.logObject.getter();
          os_log_type_t v75 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v74, v75))
          {
            uint64_t v76 = swift_slowAlloc();
            v96[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v76 = 136446210;
            swift_bridgeObjectRetain();
            *(void *)(v76 + 4) = sub_100007E60(v70, v71, v96);
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v74, v75, "Removing %{public}s", (uint8_t *)v76, 0xCu);
            swift_arrayDestroy();
            id v1 = (SEL *)&unk_100091000;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          id v77 = [v0 v1[397]];
          NSString v78 = String._bridgeToObjectiveC()();
          id v79 = [v77 arrayForKey:v78];

          if (v79)
          {
            uint64_t v80 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v81 = sub_10002E1C8(v80);
            swift_bridgeObjectRelease();
            if (!v81) {
              uint64_t v81 = _swiftEmptyArrayStorage;
            }
            uint64_t v82 = v81[2];
            if (!v82)
            {
LABEL_59:
              swift_bridgeObjectRelease();
LABEL_60:
              ++v66;
              id v67 = [v0 v1[397]];
              NSString v68 = String._bridgeToObjectiveC()();
              [v67 removeObjectForKey:v68];
              swift_bridgeObjectRelease();

              if (v66 == v65) {
                goto LABEL_89;
              }
              continue;
            }
          }
          else
          {
            uint64_t v81 = _swiftEmptyArrayStorage;
            uint64_t v82 = _swiftEmptyArrayStorage[2];
            if (!v82) {
              goto LABEL_59;
            }
          }
          break;
        }
        if (v81[4] == v70 && v81[5] == v71 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          unint64_t v83 = 0;
          if (swift_isUniquelyReferenced_nonNull_native())
          {
LABEL_76:
            unint64_t v84 = v81[2];
            if (v83 >= v84) {
              goto LABEL_93;
            }
            unint64_t v85 = v84 - 1;
            uint64_t v86 = v84 - 1 - v83;
            if (v86 < 0) {
              goto LABEL_94;
            }
            memmove(&v81[2 * v83 + 4], &v81[2 * v83 + 6], 16 * v86);
            v81[2] = v85;
            swift_bridgeObjectRelease();
            id v87 = [v0 v1[397]];
            Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            NSString v89 = String._bridgeToObjectiveC()();
            [v87 setObject:isa forKey:v89];

            goto LABEL_60;
          }
        }
        else
        {
          unint64_t v90 = v81 + 7;
          uint64_t v91 = 1;
          do
          {
            if (v82 == v91)
            {
              swift_bridgeObjectRelease();
              id v1 = (SEL *)&unk_100091000;
              goto LABEL_60;
            }
            unint64_t v83 = v91;
            if (*(v90 - 1) == v70 && *v90 == v71) {
              break;
            }
            char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v91 = v83 + 1;
            v90 += 2;
          }
          while ((v93 & 1) == 0);
          id v1 = (SEL *)&unk_100091000;
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_76;
          }
        }
        uint64_t v81 = sub_10002E334((uint64_t)v81);
        goto LABEL_76;
      }
      goto LABEL_10;
    }
    unint64_t v26 = v34;
    if (*(v33 - 1) == v11 && *v33 == v12) {
      break;
    }
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v34 = v26 + 1;
    v33 += 2;
  }
  while ((v36 & 1) == 0);
  id v1 = (SEL *)&unk_100091000;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_36:
  }
    uint64_t v24 = sub_10002E334((uint64_t)v24);
LABEL_25:
  unint64_t v27 = v24[2];
  if (v26 >= v27)
  {
    __break(1u);
LABEL_93:
    __break(1u);
  }
  else
  {
    unint64_t v28 = v27 - 1;
    uint64_t v29 = v27 - 1 - v26;
    if (v29 >= 0)
    {
      memmove(&v24[2 * v26 + 4], &v24[2 * v26 + 6], 16 * v29);
      _OWORD v24[2] = v28;
      swift_bridgeObjectRelease();
      id v30 = [v0 v1[397]];
      Class v31 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      NSString v32 = String._bridgeToObjectiveC()();
      [v30 setObject:v31 forKey:v32];
      swift_bridgeObjectRelease();

      goto LABEL_9;
    }
  }
LABEL_94:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100030E80(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FormLaunchConfiguration();
  NSString v3 = (int *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v6 = *(void **)(a1 + 8);
  uint64_t v38 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v44 = *(void *)(a1 + 32);
  uint64_t v45 = v7;
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v34 = *(void *)(a1 + 56);
  uint64_t v35 = v9;
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v42 = *(void *)(a1 + 64);
  uint64_t v43 = v10;
  uint64_t v33 = v11;
  uint64_t v12 = *(void *)(a1 + 88);
  uint64_t v41 = *(void *)(a1 + 80);
  int v40 = *(unsigned __int16 *)(a1 + 96);
  uint64_t v39 = *(void *)(a1 + 104);
  uint64_t v13 = v3[9];
  uint64_t v14 = &v5[v3[10]];
  int v36 = *(unsigned __int8 *)(a1 + 112);
  uint64_t v37 = *(void *)(a1 + v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Date.init()();
  uint64_t v15 = type metadata accessor for Date();
  os_log_type_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v14, 0, 1, v15);
  uint64_t v17 = *(void *)(a1 + v3[12]);
  v16(&v5[v3[11]], 1, 1, v15);
  Date.init()();
  uint64_t v18 = v38;
  *(void *)uint64_t v5 = v38;
  *((void *)v5 + 1) = v6;
  *((void *)v5 + 2) = v45;
  *((void *)v5 + 3) = v8;
  uint64_t v19 = v35;
  *((void *)v5 + 4) = v44;
  *((void *)v5 + 5) = v19;
  uint64_t v20 = v34;
  *((void *)v5 + 6) = v43;
  *((void *)v5 + 7) = v20;
  uint64_t v21 = v33;
  *((void *)v5 + 8) = v42;
  *((void *)v5 + 9) = v21;
  *((void *)v5 + 10) = v41;
  *((void *)v5 + 11) = v12;
  *((_WORD *)v5 + 48) = v40;
  *((void *)v5 + 13) = v39;
  v5[112] = v36;
  *(void *)&v5[v3[9]] = v37;
  *(void *)&v5[v3[12]] = v17;
  sub_10001FE40();
  uint64_t v47 = 0xD000000000000010;
  unint64_t v48 = 0x800000010007DB40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22._uint64_t countAndFlagsBits = v18;
  v22._object = v6;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = v47;
  unint64_t v23 = v48;
  if (qword_100092A28 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100006040(v25, (uint64_t)qword_1000935B8);
  swift_bridgeObjectRetain_n();
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136446466;
    uint64_t v46 = sub_100007E60(0xD00000000000002DLL, 0x800000010007DB60, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_100007E60(v24, v23, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s [%{public}s]", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v29 = [self standardUserDefaults];
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v31 = String._bridgeToObjectiveC()();
  [v29 setObject:isa forKey:v31];

  sub_10002E4A4(v24, v23, 3);
  sub_100013DE8((uint64_t)v5);
  return v24;
}

unint64_t sub_100031320(Swift::String *a1)
{
  sub_10001FE40();
  Swift::String v2 = *a1;
  v11[0] = 0xD000000000000014;
  v11[1] = 0x800000010007DCD0;
  String.append(_:)(v2);
  if (qword_100092A28 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100006040(v3, (uint64_t)qword_1000935B8);
  swift_bridgeObjectRetain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    v11[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    sub_100007E60(0xD000000000000025, 0x800000010007DCF0, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2082;
    swift_bridgeObjectRetain();
    sub_100007E60(0xD000000000000014, 0x800000010007DCD0, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s [%{public}s]", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v7 = [self standardUserDefaults];
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  [v7 setObject:isa forKey:v9];

  sub_10002E4A4(0xD000000000000014, 0x800000010007DCD0, 2);
  return 0xD000000000000014;
}

uint64_t sub_1000315D4(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for FormLaunchConfiguration();
  uint64_t v3 = (int *)(v2 - 8);
  __chkstk_darwin(v2);
  os_log_type_t v5 = (Swift::String *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *a1;
  id v7 = (void *)a1[1];
  uint64_t v8 = (void *)a1[3];
  uint64_t v37 = a1[2];
  uint64_t v38 = v6;
  os_log_type_t v27 = v8;
  uint64_t v28 = v7;
  uint64_t v9 = a1[4];
  unint64_t v26 = (void *)a1[5];
  uint64_t v10 = (void *)a1[7];
  uint64_t v35 = a1[6];
  uint64_t v36 = v9;
  uint64_t v11 = a1[8];
  uint64_t v12 = (void *)a1[9];
  uint64_t v13 = (void *)a1[11];
  uint64_t v33 = a1[10];
  uint64_t v34 = v11;
  int v32 = *((unsigned __int16 *)a1 + 48);
  uint64_t v14 = (void *)a1[13];
  uint64_t v15 = v3[9];
  os_log_type_t v16 = (char *)v5 + v3[10];
  int v29 = *((unsigned __int8 *)a1 + 112);
  uint64_t v30 = *(uint64_t *)((char *)a1 + v15);
  NSString v31 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Date.init()();
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  v18(v16, 0, 1, v17);
  uint64_t v19 = *(uint64_t *)((char *)a1 + v3[12]);
  v18((char *)v5 + v3[11], 1, 1, v17);
  Date.init()();
  uint64_t v20 = v28;
  v5->_uint64_t countAndFlagsBits = v38;
  v5->_object = v20;
  uint64_t v21 = v27;
  v5[1]._uint64_t countAndFlagsBits = v37;
  v5[1]._object = v21;
  Swift::String v22 = v26;
  v5[2]._uint64_t countAndFlagsBits = v36;
  v5[2]._object = v22;
  v5[3]._uint64_t countAndFlagsBits = v35;
  v5[3]._object = v10;
  v5[4]._uint64_t countAndFlagsBits = v34;
  v5[4]._object = v12;
  v5[5]._uint64_t countAndFlagsBits = v33;
  v5[5]._object = v13;
  LOWORD(v5[6]._countAndFlagsBits) = v32;
  uint64_t v23 = v30;
  v5[6]._object = v31;
  LOBYTE(v5[7]._countAndFlagsBits) = v29;
  *(uint64_t *)((char *)&v5->_countAndFlagsBits + v3[9]) = v23;
  *(uint64_t *)((char *)&v5->_countAndFlagsBits + v3[12]) = v19;
  sub_10002E92C(v5);
  swift_bridgeObjectRelease();
  return sub_100013DE8((uint64_t)v5);
}

unint64_t sub_1000317DC()
{
  unint64_t result = qword_100093788;
  if (!qword_100093788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100093788);
  }
  return result;
}

uint64_t sub_100031830()
{
  return swift_bridgeObjectRelease();
}

unint64_t sub_100031838()
{
  unint64_t result = qword_1000937B0;
  if (!qword_1000937B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000937B0);
  }
  return result;
}

unint64_t sub_10003188C()
{
  unint64_t result = qword_1000937B8;
  if (!qword_1000937B8)
  {
    sub_100009764(&qword_1000937A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000937B8);
  }
  return result;
}

uint64_t sub_1000318EC()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for Persistence.FetchError()
{
  return sub_100031830();
}

uint64_t _s9feedbackd11PersistenceC10FetchErrorOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1000318EC();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Persistence.FetchError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1000318EC();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_100031830();
  return a1;
}

__n128 initializeWithTake for Persistence.FetchError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for Persistence.FetchError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_100031830();
  return a1;
}

uint64_t getEnumTagSinglePayload for Persistence.FetchError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Persistence.FetchError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100031A90(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100031A98(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Persistence.FetchError()
{
  return &type metadata for Persistence.FetchError;
}

uint64_t sub_100031AB4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_100008580(&qword_100093940);
    uint64_t v4 = swift_allocError();
    *char v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(v7);
  }
}

uint64_t sub_100031B4C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  **(void **)(*(void *)(v2 + 64) + 40) = a2;
  id v3 = a2;

  return _swift_continuation_resume(v2);
}

uint64_t sub_100031BA0(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100008580(&qword_100093940);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(unsigned char **)(*(void *)(v3 + 64) + 40) = a2;
    return _swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_100031C54()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_1000937D0);
  sub_100006040(v0, (uint64_t)qword_1000937D0);
  static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100031CC4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_1000964B8);
  uint64_t v1 = sub_100006040(v0, (uint64_t)qword_1000964B8);
  if (qword_100092A38 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100006040(v0, (uint64_t)qword_1000937D0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100031D8C(char a1)
{
  *(void *)(v2 + 24) = v1;
  *(unsigned char *)(v2 + 32) = a1;
  return _swift_task_switch(sub_100031DB0, 0, 0);
}

uint64_t sub_100031DB0()
{
  uint64_t v22 = v0;
  if (qword_100092A88 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_100093FF8;
  swift_bridgeObjectRetain();
  id v2 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 integerForKey:v3];

  swift_bridgeObjectRelease();
  if (qword_100092A38 != -1) {
    swift_once();
  }
  uint64_t v5 = *(void **)(v0 + 24);
  uint64_t v6 = type metadata accessor for Logger();
  sub_100006040(v6, (uint64_t)qword_1000937D0);
  id v7 = v5;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(char **)(v0 + 24);
  uint64_t v12 = &unk_100093000;
  if (v10)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446722;
    *(void *)(v0 + 16) = sub_100007E60(0xD000000000000029, 0x800000010007E0C0, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2048;
    *(void *)(v0 + 16) = *(void *)&v11[OBJC_IVAR____TtC9feedbackd22NotificationController_notificationPostedInThisIntervalCount];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v13 + 22) = 2048;
    *(void *)(v0 + 16) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s Notifications posted in this interval: %ld. Max allowed: %ld", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v12 = (void *)&unk_100093000;
    swift_slowDealloc();
  }
  else
  {
  }
  if (*(void *)(*(void *)(v0 + 24) + v12[253]) >= (uint64_t)v4)
  {
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Reached maximum number of notifications for this interval.", v17, 2u);
      swift_slowDealloc();
    }
    char v18 = *(unsigned char *)(v0 + 32);

    uint64_t v14 = v18 & 1;
  }
  else
  {
    uint64_t v14 = 1;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v19(v14);
}

id sub_1000320F4()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for NotificationController()) init];
  qword_1000964D0 = (uint64_t)result;
  return result;
}

id sub_100032124()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v0[OBJC_IVAR____TtC9feedbackd22NotificationController_notificationPostedInThisIntervalCount] = 0;
  uint64_t v6 = OBJC_IVAR____TtC9feedbackd22NotificationController_notificationCenter;
  id v7 = v0;
  static Strings.fbaBundleIdentifier.getter();
  sub_10000C524(0, (unint64_t *)&qword_1000939C0);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchQoS.QoSClass.userInitiated(_:), v2);
  uint64_t v8 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v9 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithBundleIdentifier:v10 queue:v8];

  *(void *)&v1[v6] = v11;
  uint64_t v12 = (objc_class *)type metadata accessor for NotificationController();
  v14.receiver = v7;
  v14.super_class = v12;
  return [super init];
}

id sub_100032304()
{
  uint64_t v1 = v0;
  if (qword_100092A38 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100006040(v2, (uint64_t)qword_1000937D0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    sub_100007E60(0xD000000000000018, 0x800000010007E0A0, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationCenter);
  [v6 removeAllPendingNotificationRequests];
  id result = [v6 removeAllDeliveredNotifications];
  *(void *)(v1 + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationPostedInThisIntervalCount) = 0;
  return result;
}

uint64_t sub_1000324BC()
{
  v1[36] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[37] = v2;
  v1[38] = *(void *)(v2 - 8);
  v1[39] = swift_task_alloc();
  v1[40] = swift_task_alloc();
  sub_100008580((uint64_t *)&unk_100093950);
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  sub_100008580(&qword_100093980);
  v1[43] = swift_task_alloc();
  v1[44] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for FormLaunchConfiguration();
  v1[45] = v3;
  v1[46] = *(void *)(v3 - 8);
  v1[47] = swift_task_alloc();
  v1[48] = swift_task_alloc();
  v1[49] = swift_task_alloc();
  return _swift_task_switch(sub_100032684, 0, 0);
}

uint64_t sub_100032684()
{
  uint64_t v1 = *(void **)(v0[36] + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationCenter);
  v0[50] = v1;
  [v1 setDelegate:];
  [v1 setWantsNotificationResponsesDelivered];
  if (qword_100092A30 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)swift_task_alloc();
  v0[51] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10003277C;
  return sub_1000349CC();
}

uint64_t sub_10003277C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 416) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10003287C, 0, 0);
}

uint64_t sub_10003287C()
{
  *(void *)(v0[36] + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationPostedInThisIntervalCount) = v0[52];
  static Strings.Notification.snoozeActionIdentifier.getter();
  v1._uint64_t countAndFlagsBits = 0x657A6F6F6E53;
  v1._object = (void *)0xE600000000000000;
  FBKSLocalizedString(key:)(v1);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v4 = self;
  id v5 = [v4 actionWithIdentifier:v2 title:v3 options:0];
  v0[53] = v5;

  static Strings.Notification.declineActionIdentifier.getter();
  v6._uint64_t countAndFlagsBits = 0x656E696C636544;
  v6._object = (void *)0xE700000000000000;
  FBKSLocalizedString(key:)(v6);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [v4 actionWithIdentifier:v7 title:v8 options:2];
  v0[54] = v9;

  static Strings.Notification.categoryIdentifier.getter();
  sub_100008580(&qword_100093990);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10007B9D0;
  *(void *)(v10 + 32) = v5;
  *(void *)(v10 + 40) = v9;
  uint64_t v26 = v10;
  specialized Array._endMutation()();
  id v11 = v5;
  id v12 = v9;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000C524(0, &qword_100093998);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v15 = Array._bridgeToObjectiveC()().super.isa;
  id v16 = [self categoryWithIdentifier:v13 actions:isa intentIdentifiers:v15 options:0];
  v0[55] = v16;

  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10007B9E0;
  *(void *)(inited + 32) = v16;
  unint64_t v27 = inited;
  specialized Array._endMutation()();
  if (!(v27 >> 62))
  {
    uint64_t v18 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v19 = v16;
    if (!v18) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  id v20 = v16;
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v21) {
LABEL_3:
  }
    sub_10001DD3C(v27);
LABEL_5:
  uint64_t v22 = (void *)v0[50];
  swift_bridgeObjectRelease();
  sub_10000C524(0, (unint64_t *)&qword_1000939A0);
  sub_10003EA94();
  Class v23 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v22 setNotificationCategories:v23];

  v0[2] = v0;
  v0[7] = v0 + 34;
  v0[3] = sub_100032CA8;
  uint64_t v24 = swift_continuation_init();
  v0[20] = _NSConcreteStackBlock;
  v0[21] = 0x40000000;
  v0[22] = sub_10003563C;
  v0[23] = &unk_10008E568;
  v0[24] = v24;
  [v22 getDeliveredNotificationsWithCompletionHandler:v0 + 20];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100032CA8()
{
  return _swift_task_switch(sub_100032D88, 0, 0);
}

uint64_t sub_100032D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = v3;
  unint64_t v4 = v3[34];
  v3[33] = &_swiftEmptySetSingleton;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    a1 = swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    a2 = qword_1000964B0;
    a1 = (uint64_t)sub_100033178;
    a3 = 0;
    return _swift_task_switch(a1, a2, a3);
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v5) {
    goto LABEL_23;
  }
LABEL_3:
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (uint64_t)(v3 + 15);
    uint64_t v24 = v3 + 25;
    Class v23 = v3;
    while (1)
    {
      id v8 = (v4 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v4 + 8 * v6 + 32);
      id v9 = v8;
      id v10 = [v8 request];
      id v11 = [v10 content];

      id v12 = [v11 userInfo];
      uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      v3[29] = 7955819;
      v3[30] = 0xE300000000000000;
      AnyHashable.init<A>(_:)();
      if (!*(void *)(v13 + 16)) {
        goto LABEL_13;
      }
      unint64_t v14 = sub_100025B40(v7);
      if (v15)
      {
        sub_10000A7E0(*(void *)(v13 + 56) + 32 * v14, (uint64_t)v24);
      }
      else
      {
LABEL_13:
        *uint64_t v24 = 0u;
        v24[1] = 0u;
      }
      swift_bridgeObjectRelease();
      sub_10000A6E4(v7);
      if (!v3[28]) {
        break;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_18;
      }
      sub_10003AF90(&v25, v3[31], v3[32]);

      swift_bridgeObjectRelease();
LABEL_6:
      if (v5 == ++v6) {
        goto LABEL_23;
      }
    }
    sub_10000A738((uint64_t)v24, (uint64_t *)&unk_100093910);
LABEL_18:
    if (qword_100092A38 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100006040(v16, (uint64_t)qword_1000937D0);
    id v17 = v9;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412290;
      *(void *)(v20 + 4) = v17;
      void *v21 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Found invalid payload for notification %@", (uint8_t *)v20, 0xCu);
      sub_100008580(&qword_100092B40);
      swift_arrayDestroy();
      NSString v3 = v23;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_6;
  }
  __break(1u);
  return _swift_task_switch(a1, a2, a3);
}

uint64_t sub_100033178()
{
  id v1 = [self standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 arrayForKey:v2];

  unint64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = sub_10002E1C8(v5);
    swift_bridgeObjectRelease();
    if (v6) {
      unint64_t v4 = v6;
    }
  }
  *(void *)(v0 + 448) = v4;
  return _swift_task_switch(sub_100033294, 0, 0);
}

uint64_t sub_100033294()
{
  uint64_t v51 = v0;
  id v1 = *(void **)(v0 + 448);
  uint64_t v2 = v1[2];
  *(void *)(v0 + 456) = v2;
  if (v2)
  {
    *(void *)(v0 + 464) = &_swiftEmptyDictionarySingleton;
    *(void *)(v0 + 472) = 0;
    uint64_t v3 = v1[4];
    *(void *)(v0 + 480) = v3;
    uint64_t v4 = v1[5];
    *(void *)(v0 + 488) = v4;
    swift_bridgeObjectRetain();
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1000338E8;
    uint64_t v6 = *(void *)(v0 + 352);
    return sub_10002D5E8(v6, v3, v4);
  }
  *(void *)(v0 + 504) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = sub_1000356B4(v8);
  uint64_t v10 = v9;
  if (*(void *)(*(void *)(v0 + 264) + 16) <= *(void *)(v9 + 16) >> 3)
  {
    id v50 = (unint64_t *)v9;
    uint64_t v13 = swift_bridgeObjectRetain();
    sub_10003B140(v13);
    swift_bridgeObjectRelease();
    id v12 = v50;
  }
  else
  {
    uint64_t v11 = swift_bridgeObjectRetain();
    id v12 = sub_10003B2E8(v11, v10);
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 512) = v12;
  uint64_t v14 = *(void *)(v0 + 368);
  char v15 = *((unsigned char *)v12 + 32);
  *(unsigned char *)(v0 + 552) = v15;
  uint64_t v16 = -1;
  uint64_t v17 = -1 << v15;
  if (-v17 < 64) {
    uint64_t v16 = ~(-1 << -(char)v17);
  }
  unint64_t v18 = v16 & v12[7];
  if (v18)
  {
    uint64_t v19 = 0;
    unint64_t v20 = __clz(__rbit64(v18));
    uint64_t v21 = (v18 - 1) & v18;
    goto LABEL_12;
  }
  unint64_t v31 = 63 - v17;
  if (v31 <= 0x7F) {
    goto LABEL_47;
  }
  unint64_t v32 = v12[8];
  if (!v32)
  {
    if (v31 >= 0xC0)
    {
      unint64_t v32 = v12[9];
      if (v32)
      {
        uint64_t v19 = 2;
        goto LABEL_18;
      }
      if (v31 >= 0x100)
      {
        unint64_t v32 = v12[10];
        if (v32)
        {
          uint64_t v19 = 3;
          goto LABEL_18;
        }
        if (v31 >= 0x140)
        {
          unint64_t v32 = v12[11];
          if (v32)
          {
            uint64_t v19 = 4;
            goto LABEL_18;
          }
          uint64_t v43 = 0;
          uint64_t v44 = v31 >> 6;
          if (v44 <= 5) {
            uint64_t v44 = 5;
          }
          uint64_t v45 = v44 - 5;
          while (v45 != v43)
          {
            unint64_t v32 = v12[v43++ + 12];
            if (v32)
            {
              uint64_t v19 = v43 + 4;
              goto LABEL_18;
            }
          }
        }
      }
    }
LABEL_47:
    uint64_t v47 = *(void **)(v0 + 432);
    uint64_t v46 = *(void **)(v0 + 440);

    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  uint64_t v19 = 1;
LABEL_18:
  uint64_t v21 = (v32 - 1) & v32;
  unint64_t v20 = __clz(__rbit64(v32)) + (v19 << 6);
LABEL_12:
  *(void *)(v0 + 528) = v21;
  *(void *)(v0 + 520) = v19;
  uint64_t v22 = *(void *)(v0 + 504);
  Class v23 = (uint64_t *)(v12[6] + 16 * v20);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *(void *)(v0 + 536) = v24;
  if (*(void *)(v22 + 16))
  {
    swift_bridgeObjectRetain_n();
    unint64_t v26 = sub_100025B84(v25, v24);
    if (v27)
    {
      uint64_t v28 = *(void *)(v0 + 360);
      uint64_t v29 = *(void *)(v0 + 368);
      uint64_t v30 = *(void *)(v0 + 344);
      sub_100013D84(*(void *)(*(void *)(v0 + 504) + 56) + *(void *)(v29 + 72) * v26, v30);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v30, 0, 1, v28);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 368) + 56))(*(void *)(v0 + 344), 1, 1, *(void *)(v0 + 360));
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v14 + 56))(*(void *)(v0 + 344), 1, 1, *(void *)(v0 + 360));
    swift_bridgeObjectRetain();
  }
  uint64_t v33 = *(void *)(v0 + 344);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 368) + 48))(v33, 1, *(void *)(v0 + 360)) == 1)
  {
    uint64_t v35 = *(void **)(v0 + 432);
    uint64_t v34 = *(void **)(v0 + 440);
    uint64_t v36 = *(void **)(v0 + 424);
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
    sub_10000A738(v33, &qword_100093980);
LABEL_48:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v48 = *(uint64_t (**)(void))(v0 + 8);
    return v48();
  }
  sub_100013D20(v33, *(void *)(v0 + 376));
  if (qword_100092A38 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  sub_100006040(v37, (uint64_t)qword_1000937D0);
  swift_bridgeObjectRetain_n();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    id v50 = (unint64_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v40 + 4) = sub_100007E60(v25, v24, (uint64_t *)&v50);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Found dismissed notification %s. Will put it in snoozed queue", (uint8_t *)v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  NSString v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100094430 + dword_100094430);
  uint64_t v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 544) = v41;
  *uint64_t v41 = v0;
  v41[1] = sub_1000343A8;
  uint64_t v42 = *(void *)(v0 + 376);
  return v49(v42, v25, v24);
}

uint64_t sub_1000338E8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000339E4, 0, 0);
}

uint64_t sub_1000339E4()
{
  uint64_t v90 = v0;
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 352);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 368) + 48))(v2, 1, v1) != 1)
  {
    uint64_t v4 = *(void *)(v0 + 392);
    uint64_t v5 = *(void *)(v0 + 336);
    uint64_t v6 = *(void *)(v0 + 296);
    uint64_t v7 = *(void *)(v0 + 304);
    sub_100013D20(v2, v4);
    sub_10000FAD8(v4 + *(int *)(v1 + 32), v5);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    int v9 = v8(v5, 1, v6);
    uint64_t v10 = *(void *)(v0 + 336);
    if (v9 == 1)
    {
      uint64_t v11 = *(void *)(v0 + 392);
      uint64_t v12 = *(void *)(v0 + 360);
      uint64_t v13 = *(void *)(v0 + 328);
      uint64_t v14 = *(void *)(v0 + 296);
      sub_10000A738(*(void *)(v0 + 336), (uint64_t *)&unk_100093950);
      sub_10000FAD8(v11 + *(int *)(v12 + 36), v13);
      if (v8(v13, 1, v14) == 1)
      {
        sub_10000A738(*(void *)(v0 + 328), (uint64_t *)&unk_100093950);
      }
      else
      {
        uint64_t v14 = *(void *)(v0 + 312);
        uint64_t v15 = *(void *)(v0 + 320);
        uint64_t v16 = *(void *)(v0 + 296);
        uint64_t v17 = *(void *)(v0 + 304);
        (*(void (**)(uint64_t, void, uint64_t))(v17 + 32))(v15, *(void *)(v0 + 328), v16);
        static Date.now.getter();
        sub_10003EB60(&qword_1000939B0, (void (*)(uint64_t))&type metadata accessor for Date);
        char v18 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
        v19(v14, v16);
        v19(v15, v16);
        if ((v18 & 1) == 0)
        {
          sub_100013DE8(*(void *)(v0 + 392));
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
      }
      uint64_t v20 = *(void *)(v0 + 480);
      uint64_t v21 = *(void *)(v0 + 488);
      uint64_t v22 = *(void *)(v0 + 464);
      sub_100013D84(*(void *)(v0 + 392), *(void *)(v0 + 384));
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 280) = v22;
      unint64_t v25 = sub_100025B84(v20, v21);
      uint64_t v26 = *(void *)(v22 + 16);
      BOOL v27 = (v24 & 1) == 0;
      uint64_t v28 = v26 + v27;
      if (__OFADD__(v26, v27))
      {
        __break(1u);
LABEL_75:
        swift_once();
LABEL_49:
        uint64_t v76 = type metadata accessor for Logger();
        sub_100006040(v76, (uint64_t)qword_1000937D0);
        swift_bridgeObjectRetain_n();
        id v77 = Logger.logObject.getter();
        os_log_type_t v78 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v77, v78))
        {
          uint64_t v79 = swift_slowAlloc();
          NSString v89 = (unint64_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v79 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v79 + 4) = sub_100007E60(v14, v25, (uint64_t *)&v89);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v77, v78, "Found dismissed notification %s. Will put it in snoozed queue", (uint8_t *)v79, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        unint64_t v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100094430 + dword_100094430);
        uint64_t v80 = (void *)swift_task_alloc();
        *(void *)(v0 + 544) = v80;
        *uint64_t v80 = v0;
        v80[1] = sub_1000343A8;
        uint64_t v81 = *(void *)(v0 + 376);
        return v88(v81, v14, v25);
      }
      char v29 = v24;
      if (*(void *)(*(void *)(v0 + 464) + 24) >= v28)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100028C88();
        }
      }
      else
      {
        uint64_t v31 = *(void *)(v0 + 480);
        uint64_t v30 = *(void *)(v0 + 488);
        sub_1000275D4(v28, isUniquelyReferenced_nonNull_native);
        unint64_t v32 = sub_100025B84(v31, v30);
        if ((v29 & 1) != (v33 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v25 = v32;
      }
      uint64_t v3 = *(void **)(v0 + 280);
      if (v29)
      {
        sub_10003EAFC(*(void *)(v0 + 384), v3[7] + *(void *)(*(void *)(v0 + 368) + 72) * v25);
      }
      else
      {
        uint64_t v36 = *(void *)(v0 + 480);
        uint64_t v35 = *(void *)(v0 + 488);
        uint64_t v37 = *(void *)(v0 + 384);
        uint64_t v38 = *(void *)(v0 + 368);
        v3[(v25 >> 6) + 8] |= 1 << v25;
        os_log_type_t v39 = (void *)(v3[6] + 16 * v25);
        *os_log_type_t v39 = v36;
        v39[1] = v35;
        uint64_t result = sub_100013D20(v37, v3[7] + *(void *)(v38 + 72) * v25);
        uint64_t v40 = v3[2];
        BOOL v41 = __OFADD__(v40, 1);
        uint64_t v42 = v40 + 1;
        if (v41)
        {
          __break(1u);
          return result;
        }
        v3[2] = v42;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_10000A738(v10, (uint64_t *)&unk_100093950);
      uint64_t v3 = *(void **)(v0 + 464);
    }
    sub_100013DE8(*(void *)(v0 + 392));
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  sub_10000A738(v2, &qword_100093980);
LABEL_3:
  uint64_t v3 = *(void **)(v0 + 464);
LABEL_25:
  uint64_t v43 = *(void *)(v0 + 472) + 1;
  if (v43 == *(void *)(v0 + 456))
  {
    *(void *)(v0 + 504) = v3;
    swift_bridgeObjectRelease();
    uint64_t v44 = swift_bridgeObjectRetain();
    uint64_t v45 = sub_1000356B4(v44);
    uint64_t v46 = v45;
    if (*(void *)(*(void *)(v0 + 264) + 16) <= *(void *)(v45 + 16) >> 3)
    {
      NSString v89 = (unint64_t *)v45;
      uint64_t v54 = swift_bridgeObjectRetain();
      sub_10003B140(v54);
      swift_bridgeObjectRelease();
      unint64_t v48 = v89;
    }
    else
    {
      uint64_t v47 = swift_bridgeObjectRetain();
      unint64_t v48 = sub_10003B2E8(v47, v46);
      swift_bridgeObjectRelease();
    }
    *(void *)(v0 + 512) = v48;
    uint64_t v55 = *(void *)(v0 + 368);
    char v56 = *((unsigned char *)v48 + 32);
    *(unsigned char *)(v0 + 552) = v56;
    uint64_t v57 = -1;
    uint64_t v58 = -1 << v56;
    if (-v58 < 64) {
      uint64_t v57 = ~(-1 << -(char)v58);
    }
    unint64_t v59 = v57 & v48[7];
    if (v59)
    {
      uint64_t v60 = 0;
      unint64_t v61 = __clz(__rbit64(v59));
      uint64_t v62 = (v59 - 1) & v59;
      goto LABEL_36;
    }
    unint64_t v70 = 63 - v58;
    if (v70 > 0x7F)
    {
      unint64_t v71 = v48[8];
      if (v71)
      {
        uint64_t v60 = 1;
LABEL_42:
        uint64_t v62 = (v71 - 1) & v71;
        unint64_t v61 = __clz(__rbit64(v71)) + (v60 << 6);
LABEL_36:
        *(void *)(v0 + 528) = v62;
        *(void *)(v0 + 520) = v60;
        uint64_t v63 = *(void *)(v0 + 504);
        uint64_t v64 = (uint64_t *)(v48[6] + 16 * v61);
        uint64_t v14 = *v64;
        unint64_t v25 = v64[1];
        *(void *)(v0 + 536) = v25;
        if (*(void *)(v63 + 16))
        {
          swift_bridgeObjectRetain_n();
          unint64_t v65 = sub_100025B84(v14, v25);
          if (v66)
          {
            uint64_t v67 = *(void *)(v0 + 360);
            uint64_t v68 = *(void *)(v0 + 368);
            uint64_t v69 = *(void *)(v0 + 344);
            sub_100013D84(*(void *)(*(void *)(v0 + 504) + 56) + *(void *)(v68 + 72) * v65, v69);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v68 + 56))(v69, 0, 1, v67);
          }
          else
          {
            (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 368) + 56))(*(void *)(v0 + 344), 1, 1, *(void *)(v0 + 360));
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          (*(void (**)(void, uint64_t, uint64_t, void))(v55 + 56))(*(void *)(v0 + 344), 1, 1, *(void *)(v0 + 360));
          swift_bridgeObjectRetain();
        }
        uint64_t v72 = *(void *)(v0 + 344);
        if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 368) + 48))(v72, 1, *(void *)(v0 + 360)) == 1)
        {
          unint64_t v74 = *(void **)(v0 + 432);
          uint64_t v73 = *(void **)(v0 + 440);
          os_log_type_t v75 = *(void **)(v0 + 424);
          swift_bridgeObjectRelease();

          swift_release();
          swift_bridgeObjectRelease();
          sub_10000A738(v72, &qword_100093980);
LABEL_71:
          swift_bridgeObjectRelease();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          id v87 = *(uint64_t (**)(void))(v0 + 8);
          return v87();
        }
        sub_100013D20(v72, *(void *)(v0 + 376));
        if (qword_100092A38 == -1) {
          goto LABEL_49;
        }
        goto LABEL_75;
      }
      if (v70 >= 0xC0)
      {
        unint64_t v71 = v48[9];
        if (v71)
        {
          uint64_t v60 = 2;
          goto LABEL_42;
        }
        if (v70 >= 0x100)
        {
          unint64_t v71 = v48[10];
          if (v71)
          {
            uint64_t v60 = 3;
            goto LABEL_42;
          }
          if (v70 >= 0x140)
          {
            unint64_t v71 = v48[11];
            if (v71)
            {
              uint64_t v60 = 4;
              goto LABEL_42;
            }
            uint64_t v82 = 0;
            uint64_t v83 = v70 >> 6;
            if (v83 <= 5) {
              uint64_t v83 = 5;
            }
            uint64_t v84 = v83 - 5;
            while (v84 != v82)
            {
              unint64_t v71 = v48[v82++ + 12];
              if (v71)
              {
                uint64_t v60 = v82 + 4;
                goto LABEL_42;
              }
            }
          }
        }
      }
    }
    uint64_t v86 = *(void **)(v0 + 432);
    unint64_t v85 = *(void **)(v0 + 440);

    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_71;
  }
  *(void *)(v0 + 464) = v3;
  *(void *)(v0 + 472) = v43;
  uint64_t v49 = *(void *)(v0 + 448) + 16 * v43;
  uint64_t v50 = *(void *)(v49 + 32);
  *(void *)(v0 + 480) = v50;
  uint64_t v51 = *(void *)(v49 + 40);
  *(void *)(v0 + 488) = v51;
  swift_bridgeObjectRetain();
  uint64_t v52 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v52;
  *uint64_t v52 = v0;
  v52[1] = sub_1000338E8;
  uint64_t v53 = *(void *)(v0 + 352);
  return sub_10002D5E8(v53, v50, v51);
}

uint64_t sub_1000343A8()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000344C0, 0, 0);
}

uint64_t sub_1000344C0()
{
  uint64_t v36 = v0;
  uint64_t result = sub_100013DE8(*(void *)(v0 + 376));
  unint64_t v2 = *(void *)(v0 + 528);
  int64_t v3 = *(void *)(v0 + 520);
  if (v2)
  {
    uint64_t v4 = (v2 - 1) & v2;
    unint64_t v5 = __clz(__rbit64(v2)) | (v3 << 6);
    uint64_t v6 = *(void *)(v0 + 512);
    goto LABEL_3;
  }
  int64_t v16 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  int64_t v17 = (unint64_t)((1 << *(unsigned char *)(v0 + 552)) + 63) >> 6;
  uint64_t v6 = *(void *)(v0 + 512);
  if (v16 >= v17)
  {
LABEL_33:
    unint64_t v32 = *(void **)(v0 + 432);
    uint64_t v31 = *(void **)(v0 + 440);

    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  uint64_t v18 = v6 + 56;
  unint64_t v19 = *(void *)(v6 + 56 + 8 * v16);
  ++v3;
  if (!v19)
  {
    int64_t v3 = v16 + 1;
    if (v16 + 1 < v17)
    {
      unint64_t v19 = *(void *)(v18 + 8 * v3);
      if (v19) {
        goto LABEL_9;
      }
      int64_t v3 = v16 + 2;
      if (v16 + 2 < v17)
      {
        unint64_t v19 = *(void *)(v18 + 8 * v3);
        if (v19) {
          goto LABEL_9;
        }
        int64_t v30 = v16 + 3;
        if (v30 < v17)
        {
          unint64_t v19 = *(void *)(v18 + 8 * v30);
          if (v19)
          {
            int64_t v3 = v30;
            goto LABEL_9;
          }
          while (1)
          {
            int64_t v3 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              break;
            }
            if (v3 >= v17) {
              goto LABEL_33;
            }
            unint64_t v19 = *(void *)(v18 + 8 * v3);
            ++v30;
            if (v19) {
              goto LABEL_9;
            }
          }
LABEL_38:
          __break(1u);
          return result;
        }
      }
    }
    goto LABEL_33;
  }
LABEL_9:
  uint64_t v4 = (v19 - 1) & v19;
  unint64_t v5 = __clz(__rbit64(v19)) + (v3 << 6);
LABEL_3:
  *(void *)(v0 + 528) = v4;
  *(void *)(v0 + 520) = v3;
  uint64_t v7 = *(void *)(v0 + 504);
  uint64_t v8 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v5);
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *(void *)(v0 + 536) = v9;
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain_n();
    unint64_t v11 = sub_100025B84(v10, v9);
    if (v12)
    {
      uint64_t v13 = *(void *)(v0 + 360);
      uint64_t v14 = *(void *)(v0 + 368);
      uint64_t v15 = *(void *)(v0 + 344);
      sub_100013D84(*(void *)(*(void *)(v0 + 504) + 56) + *(void *)(v14 + 72) * v11, v15);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v15, 0, 1, v13);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 368) + 56))(*(void *)(v0 + 344), 1, 1, *(void *)(v0 + 360));
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 368) + 56))(*(void *)(v0 + 344), 1, 1, *(void *)(v0 + 360));
    swift_bridgeObjectRetain();
  }
  uint64_t v20 = *(void *)(v0 + 344);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 368) + 48))(v20, 1, *(void *)(v0 + 360)) == 1)
  {
    uint64_t v22 = *(void **)(v0 + 432);
    uint64_t v21 = *(void **)(v0 + 440);
    Class v23 = *(void **)(v0 + 424);
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
    sub_10000A738(v20, &qword_100093980);
LABEL_34:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v33 = *(uint64_t (**)(void))(v0 + 8);
    return v33();
  }
  sub_100013D20(v20, *(void *)(v0 + 376));
  if (qword_100092A38 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100006040(v24, (uint64_t)qword_1000937D0);
  swift_bridgeObjectRetain_n();
  unint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v27 + 4) = sub_100007E60(v10, v9, &v35);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Found dismissed notification %s. Will put it in snoozed queue", (uint8_t *)v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100094430 + dword_100094430);
  uint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 544) = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_1000343A8;
  uint64_t v29 = *(void *)(v0 + 376);
  return v34(v29, v10, v9);
}

uint64_t sub_1000349CC()
{
  v1[2] = v0;
  sub_100008580(&qword_100093980);
  v1[3] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for FormLaunchConfiguration();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Calendar.Component();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Calendar();
  v1[10] = v4;
  v1[11] = *(void *)(v4 - 8);
  v1[12] = swift_task_alloc();
  sub_100008580((uint64_t *)&unk_100093950);
  v1[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v1[14] = v5;
  v1[15] = *(void *)(v5 - 8);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  return _swift_task_switch(sub_100034C10, v0, 0);
}

uint64_t sub_100034C10()
{
  if (qword_100092A80 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v4 = (void *)qword_100093FE0;
  swift_bridgeObjectRetain();
  id v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 integerForKey:v6];

  swift_bridgeObjectRelease();
  static Date.now.getter();
  static Calendar.current.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for Calendar.Component.hour(_:), v3);
  if (__OFSUB__(0, v7))
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v8 = v0[15];
  uint64_t v10 = v0[13];
  uint64_t v9 = v0[14];
  uint64_t v12 = v0[11];
  uint64_t v11 = v0[12];
  uint64_t v14 = v0[9];
  uint64_t v13 = v0[10];
  uint64_t v15 = v0[7];
  uint64_t v16 = v0[8];
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  int64_t v17 = (uint64_t (*)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v9);
  if (v17 == 1)
  {
    __break(1u);
    return _swift_task_switch(v17, v18, v19);
  }
  uint64_t v20 = v0[16];
  uint64_t v21 = v0[14];
  uint64_t v22 = v0[15];
  (*(void (**)(void, void, uint64_t))(v22 + 32))(v0[17], v0[13], v21);
  Class v23 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v0[18] = v23;
  v0[19] = (v22 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v23(v20, v21);
  if (qword_100092A30 != -1) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v18 = qword_1000964B0;
  int64_t v17 = sub_100034E60;
  uint64_t v19 = 0;
  return _swift_task_switch(v17, v18, v19);
}

uint64_t sub_100034E60()
{
  id v1 = [self standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 arrayForKey:v2];

  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v6 = sub_10002E1C8(v5);
    swift_bridgeObjectRelease();
    if (v6) {
      uint64_t v4 = v6;
    }
  }
  *(void *)(v0 + 160) = v4;
  uint64_t v7 = *(void *)(v0 + 16);
  return _swift_task_switch(sub_100034F7C, v7, 0);
}

uint64_t sub_100034F7C()
{
  uint64_t result = v0[20];
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    v0[21] = 0;
    v0[22] = v2;
    if (v2 > *(void *)(result + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = result + 16 * v2;
      uint64_t v4 = *(void *)(v3 + 16);
      v0[23] = v4;
      uint64_t v5 = *(void *)(v3 + 24);
      v0[24] = v5;
      swift_bridgeObjectRetain();
      NSString v6 = (void *)swift_task_alloc();
      v0[25] = v6;
      void *v6 = v0;
      v6[1] = sub_10003512C;
      uint64_t v7 = v0[3];
      return sub_10002D5E8(v7, v4, v5);
    }
  }
  else
  {
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[18];
    uint64_t v9 = v0[17];
    uint64_t v10 = v0[14];
    swift_bridgeObjectRelease();
    v8(v9, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11(0);
  }
  return result;
}

uint64_t sub_10003512C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_10003523C, v1, 0);
}

uint64_t sub_10003523C()
{
  os_log_type_t v26 = v0;
  uint64_t v1 = v0[3];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[5] + 48))(v1, 1, v0[4]) != 1)
  {
    uint64_t v9 = v0[6];
    swift_bridgeObjectRelease();
    sub_100013D20(v1, v9);
    sub_10003EB60(&qword_1000939B0, (void (*)(uint64_t))&type metadata accessor for Date);
    char v10 = dispatch thunk of static Comparable.< infix(_:_:)();
    sub_100013DE8(v9);
    uint64_t v3 = v0[21];
    if (v10) {
      goto LABEL_11;
    }
    BOOL v11 = __OFADD__(v3, 1);
    uint64_t v3 = ((char *)v3 + 1);
    if (!v11) {
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_9;
  }
  sub_10000A738(v1, &qword_100093980);
  if (qword_100092A38 != -1) {
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v2 = type metadata accessor for Logger();
    sub_100006040(v2, (uint64_t)qword_1000937D0);
    swift_bridgeObjectRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    unint64_t v6 = v0[24];
    if (v5)
    {
      uint64_t v7 = v0[23];
      uint64_t v8 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446466;
      *(void *)(v8 + 4) = sub_100007E60(0xD00000000000002BLL, 0x800000010007E070, &v25);
      *(_WORD *)(v8 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v8 + 14) = sub_100007E60(v7, v6, &v25);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s no object for key: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
LABEL_9:
      swift_bridgeObjectRelease_n();
    }

    uint64_t v3 = v0[21];
LABEL_11:
    uint64_t v12 = v0[22];
    uint64_t v13 = v12 - 1;
    if (v12 == 1) {
      break;
    }
    v0[21] = v3;
    v0[22] = v13;
    uint64_t v14 = v0[20];
    if (v13 <= *(void *)(v14 + 16))
    {
      uint64_t v15 = (uint64_t *)(v14 + 16 * v12);
      uint64_t v16 = *v15;
      v0[23] = *v15;
      uint64_t v17 = v15[1];
      v0[24] = v17;
      swift_bridgeObjectRetain();
      uint64_t v18 = (void *)swift_task_alloc();
      v0[25] = v18;
      *uint64_t v18 = v0;
      v18[1] = sub_10003512C;
      uint64_t v19 = v0[3];
      return sub_10002D5E8(v19, v16, v17);
    }
    __break(1u);
LABEL_20:
    swift_once();
  }
  uint64_t v21 = v0[17];
  uint64_t v22 = (void (*)(uint64_t, uint64_t))v0[18];
  uint64_t v23 = v0[14];
  swift_bridgeObjectRelease();
  v22(v21, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*))v0[1];
  return v24(v3);
}

uint64_t sub_10003563C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10000C524(0, &qword_100093948);
  **(void **)(*(void *)(v1 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return _swift_continuation_resume(v1);
}

uint64_t sub_1000356B4(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    BOOL v11 = (Swift::Int *)(*(void *)(a1 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_10003AF90(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10003584C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[39] = a7;
  unsigned char v8[40] = v7;
  v8[37] = a3;
  v8[38] = a6;
  v8[35] = a1;
  v8[36] = a2;
  sub_100008580((uint64_t *)&unk_100093950);
  v8[41] = swift_task_alloc();
  return _swift_task_switch(sub_100035914, 0, 0);
}

uint64_t sub_100035914()
{
  uint64_t v9 = v0;
  if (qword_100092A38 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 336) = sub_100006040(v1, (uint64_t)qword_1000937D0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    *(void *)(v0 + 272) = sub_100007E60(0xD000000000000034, 0x800000010007E030, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  char v5 = *(unsigned char *)(*(void *)(v0 + 312) + 80);
  *(unsigned char *)(v0 + 424) = v5;
  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 344) = v6;
  *(void *)uint64_t v6 = v0;
  *(void *)(v6 + 8) = sub_100035B58;
  *(void *)(v6 + 24) = *(void *)(v0 + 320);
  *(unsigned char *)(v6 + 32) = v5;
  return _swift_task_switch(sub_100031DB0, 0, 0);
}

uint64_t sub_100035B58(char a1)
{
  *(unsigned char *)(*(void *)v1 + 425) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100035C84, 0, 0);
}

uint64_t sub_100035C84()
{
  if (*(unsigned char *)(v0 + 425))
  {
    *(void *)(v0 + 352) = *(void *)(*(void *)(v0 + 320)
                                      + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationCenter);
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100035DFC;
    v1[24] = *(void *)(v0 + 320);
    return _swift_task_switch(sub_100038FB0, 0, 0);
  }
  else
  {
    sub_10000FDA0();
    swift_allocError();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_100035DFC()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100035F84, 0, 0);
  }
}

uint64_t sub_100035F84()
{
  uint64_t v35 = v0;
  char v1 = FormItem.isSurvey.getter();
  sub_100018BD0(v1 & 1, v34);
  uint64_t v3 = v34[0];
  uint64_t v2 = v34[1];
  uint64_t v4 = v34[3];
  uint64_t v32 = v34[2];
  uint64_t v6 = v34[4];
  uint64_t v5 = v34[5];
  uint64_t v8 = v34[6];
  uint64_t v7 = v34[7];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v33 = v7;
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    BOOL v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(void *)(v0 + 144) = v3;
    v34[0] = v31;
    *(_DWORD *)BOOL v11 = 136446210;
    *(void *)(v0 + 152) = v2;
    *(void *)(v0 + 160) = v32;
    *(void *)(v0 + 168) = v4;
    *(void *)(v0 + 176) = v6;
    *(void *)(v0 + 184) = v5;
    *(void *)(v0 + 192) = v8;
    *(void *)(v0 + 200) = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100008580(&qword_100093968);
    uint64_t v12 = String.init<A>(describing:)();
    *(void *)(v0 + 264) = sub_100007E60(v12, v13, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Using strings %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void *)(v0 + 312);
  uint64_t v16 = *(void *)(v0 + 288);
  uint64_t v15 = *(void *)(v0 + 296);
  sub_100008580(&qword_100093960);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10007B630;
  strcpy((char *)(inited + 32), "formIdentifier");
  *(unsigned char *)(inited + 47) = -18;
  *(void *)(inited + 48) = v16;
  *(void *)(inited + 56) = v15;
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_10002386C(inited);
  id v19 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  *(void *)(v0 + 368) = v19;
  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 setTitle:v20];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 setBody:v21];

  sub_10001A294(v18);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v19 setUserInfo:isa];

  [v19 setInterruptionLevel:1];
  static Strings.Notification.categoryIdentifier.getter();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 setCategoryIdentifier:v23];

  [v19 setShouldBackgroundDefaultAction:1];
  [v19 setShouldAuthenticateDefaultAction:1];
  id v24 = sub_10003C908(v14);
  *(void *)(v0 + 376) = v24;
  swift_bridgeObjectRetain();
  id v25 = v24;
  id v26 = v19;
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 384) = [self requestWithIdentifier:v27 content:v26 trigger:v25];

  uint64_t v28 = swift_task_alloc();
  *(void *)(v0 + 392) = v28;
  *(void *)uint64_t v28 = v0;
  *(void *)(v28 + 8) = sub_100036508;
  char v29 = *(unsigned char *)(v0 + 424);
  *(void *)(v28 + 24) = *(void *)(v0 + 320);
  *(unsigned char *)(v28 + 32) = v29;
  return _swift_task_switch(sub_100031DB0, 0, 0);
}

uint64_t sub_100036508(char a1)
{
  *(unsigned char *)(*(void *)v1 + 426) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100036634, 0, 0);
}

uint64_t sub_100036634()
{
  if (*(unsigned char *)(v0 + 426))
  {
    uint64_t v1 = *(void *)(v0 + 384);
    uint64_t v2 = *(void *)(v0 + 320);
    uint64_t v3 = OBJC_IVAR____TtC9feedbackd22NotificationController_notificationPostedInThisIntervalCount;
    *(void *)(v0 + 400) = OBJC_IVAR____TtC9feedbackd22NotificationController_notificationPostedInThisIntervalCount;
    uint64_t v4 = *(void **)(v0 + 352);
    *(void *)(v0 + 408) = *(void *)(v2 + v3);
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_100036818;
    uint64_t v5 = swift_continuation_init();
    *(void *)(v0 + 208) = _NSConcreteStackBlock;
    *(void *)(v0 + 216) = 0x40000000;
    *(void *)(v0 + 224) = sub_100031AB4;
    *(void *)(v0 + 232) = &unk_10008E550;
    *(void *)(v0 + 240) = v5;
    [v4 addNotificationRequest:v1 withCompletionHandler:v0 + 208];
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void **)(v0 + 376);
    uint64_t v6 = *(void **)(v0 + 384);
    uint64_t v8 = *(void **)(v0 + 368);
    sub_10000FDA0();
    swift_allocError();
    swift_willThrow();

    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_100036818()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 416) = v1;
  if (v1) {
    uint64_t v2 = sub_100036CC8;
  }
  else {
    uint64_t v2 = sub_100036954;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100036954()
{
  id v1 = *(id *)(v0 + 384);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void **)(v0 + 384);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138543362;
    id v7 = [v4 trigger];
    if (v7) {
      *(void *)(v0 + 248) = v7;
    }
    else {
      *(void *)(v0 + 256) = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v8 = *(void **)(v0 + 384);
    void *v6 = v7;

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Posted notification with trigger [%{public}@]", v5, 0xCu);
    sub_100008580(&qword_100092B40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v2 = *(NSObject **)(v0 + 384);
  }
  uint64_t v10 = *(void *)(v0 + 400);
  uint64_t v9 = *(void *)(v0 + 408);
  uint64_t v11 = *(void *)(v0 + 320);

  if (*(void *)(v11 + v10) != v9)
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Race condition detected in notification posts count", v14, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v15 = *(void *)(v0 + 400);
  uint64_t v16 = *(void *)(v0 + 320);
  uint64_t v17 = *(void *)(v16 + v15);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  uint64_t v20 = *(void *)(v0 + 376);
  *(void *)(v16 + v15) = v19;
  if (v20)
  {
    id v21 = [*(id *)(v0 + 376) nextTriggerDate];
    if (v21)
    {
      uint64_t v22 = v21;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v23 = 1;
    }
    uint64_t v28 = *(void **)(v0 + 376);
    NSString v27 = *(void **)(v0 + 384);
    uint64_t v29 = *(void *)(v0 + 328);
    uint64_t v30 = *(void *)(v0 + 280);

    uint64_t v31 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v29, v23, 1, v31);
    sub_10003EA2C(v29, v30);
  }
  else
  {
    id v24 = *(void **)(v0 + 384);
    uint64_t v25 = *(void *)(v0 + 280);

    uint64_t v26 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  }
  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t sub_100036CC8()
{
  id v1 = (void *)v0[47];
  uint64_t v2 = (void *)v0[48];
  os_log_type_t v3 = (void *)v0[46];
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100036D84(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return _swift_task_switch(sub_100036DA8, 0, 0);
}

uint64_t sub_100036DA8()
{
  id v1 = *(void **)(v0[18] + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationCenter);
  v0[19] = v1;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_100036EB4;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10003563C;
  v0[13] = &unk_10008E538;
  v0[14] = v2;
  [v1 getDeliveredNotificationsWithCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100036EB4()
{
  return _swift_task_switch(sub_100036F94, 0, 0);
}

uint64_t sub_100036F94()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = (void *)v0[17];
  unint64_t v3 = v0[15];
  swift_bridgeObjectRetain();
  unint64_t v4 = (unint64_t)sub_10003D878(v3, v1, v2);
  swift_bridgeObjectRelease();
  if (v4 >> 62)
  {
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v5) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t result = sub_1000085E4(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0)
  {
    __break(1u);
    return result;
  }
  id v21 = v0;
  uint64_t v7 = 0;
  do
  {
    if ((v4 & 0xC000000000000001) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(v4 + 8 * v7 + 32);
    }
    uint64_t v9 = v8;
    id v10 = [v8 request:v21];
    id v11 = [v10 identifier];

    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    unint64_t v16 = _swiftEmptyArrayStorage[2];
    unint64_t v15 = _swiftEmptyArrayStorage[3];
    if (v16 >= v15 >> 1) {
      sub_1000085E4(v15 > 1, v16 + 1, 1);
    }
    ++v7;
    _swiftEmptyArrayStorage[2] = v16 + 1;
    uint64_t v17 = &_swiftEmptyArrayStorage[2 * v16];
    v17[4] = v12;
    v17[5] = v14;
  }
  while (v5 != v7);
  swift_bridgeObjectRelease();
  uint64_t v0 = v21;
LABEL_14:
  BOOL v18 = (void *)v0[19];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v18 removeDeliveredNotificationsWithIdentifiers:isa];

  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_1000371B8(id *a1, uint64_t a2, uint64_t a3)
{
  id v5 = *a1;
  id v6 = [*a1 request];
  id v7 = [v6 content];

  id v8 = [v7 userInfo];
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  strcpy((char *)v41, "formIdentifier");
  HIBYTE(v41[1]) = -18;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v9 + 16) && (unint64_t v10 = sub_100025B40((uint64_t)v42), (v11 & 1) != 0))
  {
    sub_10000A7E0(*(void *)(v9 + 56) + 32 * v10, (uint64_t)&v43);
  }
  else
  {
    long long v43 = 0u;
    long long v44 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10000A6E4((uint64_t)v42);
  if (!*((void *)&v44 + 1))
  {
    sub_10000A738((uint64_t)&v43, (uint64_t *)&unk_100093910);
LABEL_11:
    if (qword_100092A38 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100006040(v20, (uint64_t)qword_1000937D0);
    id v21 = v5;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = (void *)swift_slowAlloc();
      *(_DWORD *)id v24 = 138412290;
      v42[0] = (uint64_t)v21;
      id v26 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v25 = v21;

      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Found invalid payload for notification %@", v24, 0xCu);
      sub_100008580(&qword_100092B40);
      swift_arrayDestroy();
LABEL_27:
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }
LABEL_28:

    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v13 = v41[0];
  uint64_t v12 = v41[1];
  id v14 = [v5 request];
  id v15 = [v14 content];

  id v16 = [v15 userInfo];
  uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v41[0] = 7955819;
  v41[1] = 0xE300000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v17 + 16) && (unint64_t v18 = sub_100025B40((uint64_t)v42), (v19 & 1) != 0))
  {
    sub_10000A7E0(*(void *)(v17 + 56) + 32 * v18, (uint64_t)&v43);
  }
  else
  {
    long long v43 = 0u;
    long long v44 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10000A6E4((uint64_t)v42);
  if (!*((void *)&v44 + 1))
  {
    swift_bridgeObjectRelease();
    sub_10000A738((uint64_t)&v43, (uint64_t *)&unk_100093910);
    goto LABEL_23;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    if (qword_100092A38 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100006040(v29, (uint64_t)qword_1000937D0);
    id v21 = v5;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 138412290;
      v42[0] = (uint64_t)v21;
      id v33 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v32 = v21;

      _os_log_impl((void *)&_mh_execute_header, v22, v30, "Found invalid payload for notification %@", v31, 0xCu);
      sub_100008580(&qword_100092B40);
      swift_arrayDestroy();
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  uint64_t v28 = v41[0];
  unint64_t v27 = v41[1];
  if (v13 != a2 || v12 != a3)
  {
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v36) {
      goto LABEL_32;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRelease();
LABEL_32:
  if (qword_100092A38 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  sub_100006040(v37, (uint64_t)qword_1000937D0);
  swift_bridgeObjectRetain();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    v42[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)&long long v43 = sub_100007E60(v28, v27, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Will remove posted notification for completed form %{public}s", v40, 0xCu);
    uint64_t v34 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    return 1;
  }
  return v34;
}

uint64_t sub_1000378C8(uint64_t a1, uint64_t a2)
{
  v3[34] = a2;
  v3[35] = v2;
  v3[33] = a1;
  type metadata accessor for FormLaunchConfiguration();
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  return _swift_task_switch(sub_10003796C, 0, 0);
}

uint64_t sub_10003796C()
{
  id v14 = v0;
  if (qword_100092A38 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[37];
  uint64_t v2 = v0[33];
  uint64_t v3 = type metadata accessor for Logger();
  v0[38] = sub_100006040(v3, (uint64_t)qword_1000937D0);
  sub_100013D84(v2, v1);
  unint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  id v7 = (uint64_t *)v0[37];
  if (v6)
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)id v8 = 136446210;
    uint64_t v10 = *v7;
    unint64_t v9 = v7[1];
    swift_bridgeObjectRetain();
    v0[30] = sub_100007E60(v10, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100013DE8((uint64_t)v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Will try re-posting notification for [%{public}s]", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100013DE8(v0[37]);
  }

  char v11 = (void *)swift_task_alloc();
  v0[39] = v11;
  *char v11 = v0;
  v11[1] = sub_100037BB4;
  v11[24] = v0[35];
  return _swift_task_switch(sub_100038FB0, 0, 0);
}

uint64_t sub_100037BB4()
{
  *(void *)(*(void *)v1 + 320) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10003831C;
  }
  else {
    uint64_t v2 = sub_100037CC8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100037CC8()
{
  uint64_t v1 = *(void *)(v0 + 280);
  id v2 = [*(id *)(v0 + 272) content];
  *(void *)(v0 + 328) = v2;
  swift_bridgeObjectRetain();
  id v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [self requestWithIdentifier:v4 content:v3 trigger:0];
  *(void *)(v0 + 336) = v5;

  BOOL v6 = *(void **)(v1 + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationCenter);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_100037E60;
  uint64_t v7 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_100031AB4;
  *(void *)(v0 + 104) = &unk_10008E520;
  *(void *)(v0 + 112) = v7;
  [v6 addNotificationRequest:v5 withCompletionHandler:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100037E60()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 344) = v1;
  if (v1) {
    id v2 = sub_10003894C;
  }
  else {
    id v2 = sub_100037F70;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100037F70()
{
  uint64_t v14 = v0;
  sub_100013D84(*(void *)(v0 + 264), *(void *)(v0 + 288));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    char v11 = *(void **)(v0 + 336);
    uint64_t v12 = *(void **)(v0 + 328);
    id v3 = *(uint64_t **)(v0 + 288);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    uint64_t v5 = *v3;
    unint64_t v6 = v3[1];
    swift_bridgeObjectRetain();
    *(void *)(v0 + 256) = sub_100007E60(v5, v6, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100013DE8((uint64_t)v3);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Re-posted notification for form [%{public}s]", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v7 = *(void **)(v0 + 336);
    uint64_t v8 = *(void *)(v0 + 288);

    sub_100013DE8(v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100038150()
{
  sub_100044608(*(void **)(v0 + 376), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 384));
  return _swift_task_switch(sub_1000381BC, 0, 0);
}

uint64_t sub_1000381BC()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100038234()
{
  sub_100044608(*(void **)(v0 + 408), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 416));
  return _swift_task_switch(sub_1000382A0, 0, 0);
}

uint64_t sub_1000382A0()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003831C()
{
  uint64_t v28 = v0;
  uint64_t v1 = *(void *)(v0 + 320);
  *(void *)(v0 + 248) = v1;
  *(void *)(v0 + 352) = v1;
  swift_errorRetain();
  sub_100008580(&qword_100093940);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    int v2 = *(unsigned __int8 *)(v0 + 424);
    uint64_t v3 = Logger.logObject.getter();
    if (v2 == 5)
    {
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        *(_DWORD *)uint64_t v5 = 136446466;
        *(void *)(v0 + 224) = sub_100007E60(0xD000000000000047, 0x800000010007DFC0, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v5 + 12) = 2080;
        unint64_t v6 = sub_10004F8A8(5);
        *(void *)(v0 + 232) = sub_100007E60(v6, v7, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s failed with: %s", (uint8_t *)v5, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
LABEL_9:
        swift_slowDealloc();
      }
    }
    else
    {
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v3, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 136446466;
        *(void *)(v0 + 208) = sub_100007E60(0xD000000000000047, 0x800000010007DFC0, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v15 + 12) = 2080;
        unint64_t v16 = sub_10004F8A8(v2);
        *(void *)(v0 + 216) = sub_100007E60(v16, v17, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v3, v14, "%{public}s failed with: %s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        goto LABEL_9;
      }
    }

    sub_10000FA84();
    swift_allocError();
    *unint64_t v18 = v2;
    *(void *)(v0 + 360) = _convertErrorToNSError(_:)();
    swift_errorRelease();
    if (qword_100092A58 != -1) {
      swift_once();
    }
    char v19 = *(void **)(v0 + 264);
    uint64_t v20 = qword_1000964D8;
    *(void *)(v0 + 368) = qword_1000964D8;
    *(void *)(v0 + 376) = *v19;
    *(void *)(v0 + 384) = v19[1];
    id v21 = sub_100038150;
    goto LABEL_17;
  }
  uint64_t v8 = (uint64_t *)(v0 + 120);
  swift_errorRelease();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446466;
    *(void *)(v0 + 184) = sub_100007E60(0xD000000000000047, 0x800000010007DFC0, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2080;
    *(void *)(v0 + 192) = v1;
    swift_errorRetain();
    uint64_t v12 = String.init<A>(describing:)();
    *(void *)(v0 + 200) = sub_100007E60(v12, v13, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v8 = (uint64_t *)(v0 + 120);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s failed with: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue();
  uint64_t v23 = *(void *)(v0 + 152);
  uint64_t v22 = *(void *)(v0 + 160);
  *(void *)(v0 + 144) = v22;
  id v24 = sub_100020478(v8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v24, v23, v22);
  *(void *)(v0 + 392) = static FBKSError.nsError(anyError:)();
  sub_10000A888((uint64_t)v8);
  if (qword_100092A58 != -1) {
    swift_once();
  }
  uint64_t v25 = *(void **)(v0 + 264);
  uint64_t v20 = qword_1000964D8;
  *(void *)(v0 + 400) = qword_1000964D8;
  *(void *)(v0 + 408) = *v25;
  *(void *)(v0 + 416) = v25[1];
  id v21 = sub_100038234;
LABEL_17:
  return _swift_task_switch(v21, v20, 0);
}

uint64_t sub_10003894C()
{
  uint64_t v30 = v0;
  uint64_t v1 = *(void **)(v0 + 336);
  int v2 = *(void **)(v0 + 328);
  swift_willThrow();

  uint64_t v3 = *(void *)(v0 + 344);
  *(void *)(v0 + 248) = v3;
  *(void *)(v0 + 352) = v3;
  swift_errorRetain();
  sub_100008580(&qword_100093940);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    int v4 = *(unsigned __int8 *)(v0 + 424);
    uint64_t v5 = Logger.logObject.getter();
    if (v4 == 5)
    {
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = swift_slowAlloc();
        v29[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v7 = 136446466;
        *(void *)(v0 + 224) = sub_100007E60(0xD000000000000047, 0x800000010007DFC0, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v7 + 12) = 2080;
        unint64_t v8 = sub_10004F8A8(5);
        *(void *)(v0 + 232) = sub_100007E60(v8, v9, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s failed with: %s", (uint8_t *)v7, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
LABEL_9:
        swift_slowDealloc();
      }
    }
    else
    {
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v5, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        v29[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136446466;
        *(void *)(v0 + 208) = sub_100007E60(0xD000000000000047, 0x800000010007DFC0, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v17 + 12) = 2080;
        unint64_t v18 = sub_10004F8A8(v4);
        *(void *)(v0 + 216) = sub_100007E60(v18, v19, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v5, v16, "%{public}s failed with: %s", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        goto LABEL_9;
      }
    }

    sub_10000FA84();
    swift_allocError();
    *uint64_t v20 = v4;
    *(void *)(v0 + 360) = _convertErrorToNSError(_:)();
    swift_errorRelease();
    if (qword_100092A58 != -1) {
      swift_once();
    }
    id v21 = *(void **)(v0 + 264);
    uint64_t v22 = qword_1000964D8;
    *(void *)(v0 + 368) = qword_1000964D8;
    *(void *)(v0 + 376) = *v21;
    *(void *)(v0 + 384) = v21[1];
    uint64_t v23 = sub_100038150;
    goto LABEL_17;
  }
  os_log_type_t v10 = (uint64_t *)(v0 + 120);
  swift_errorRelease();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    v29[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446466;
    *(void *)(v0 + 184) = sub_100007E60(0xD000000000000047, 0x800000010007DFC0, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2080;
    *(void *)(v0 + 192) = v3;
    swift_errorRetain();
    uint64_t v14 = String.init<A>(describing:)();
    *(void *)(v0 + 200) = sub_100007E60(v14, v15, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_type_t v10 = (uint64_t *)(v0 + 120);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s failed with: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue();
  uint64_t v25 = *(void *)(v0 + 152);
  uint64_t v24 = *(void *)(v0 + 160);
  *(void *)(v0 + 144) = v24;
  id v26 = sub_100020478(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v26, v25, v24);
  *(void *)(v0 + 392) = static FBKSError.nsError(anyError:)();
  sub_10000A888((uint64_t)v10);
  if (qword_100092A58 != -1) {
    swift_once();
  }
  uint64_t v27 = *(void **)(v0 + 264);
  uint64_t v22 = qword_1000964D8;
  *(void *)(v0 + 400) = qword_1000964D8;
  *(void *)(v0 + 408) = *v27;
  *(void *)(v0 + 416) = v27[1];
  uint64_t v23 = sub_100038234;
LABEL_17:
  return _swift_task_switch(v23, v22, 0);
}

uint64_t sub_100038F90()
{
  *(void *)(v1 + 192) = v0;
  return _swift_task_switch(sub_100038FB0, 0, 0);
}

uint64_t sub_100038FB0()
{
  uint64_t v1 = *(void **)(v0[24] + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationCenter);
  v0[25] = v1;
  v0[2] = v0;
  v0[7] = v0 + 23;
  v0[3] = sub_1000390BC;
  uint64_t v2 = swift_continuation_init();
  v0[18] = _NSConcreteStackBlock;
  v0[19] = 0x40000000;
  v0[20] = sub_100031B4C;
  v0[21] = &unk_10008E4F0;
  v0[22] = v2;
  [v1 getNotificationSettingsWithCompletionHandler:v0 + 18];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000390BC()
{
  return _swift_task_switch(sub_10003919C, 0, 0);
}

uint64_t sub_10003919C()
{
  uint64_t v1 = (void *)v0[25];
  v0[26] = v0[23];
  v0[10] = v0;
  v0[15] = v0 + 23;
  v0[11] = sub_1000392A4;
  uint64_t v2 = swift_continuation_init();
  v0[18] = _NSConcreteStackBlock;
  v0[19] = 0x40000000;
  v0[20] = sub_100031BA0;
  v0[21] = &unk_10008E508;
  v0[22] = v2;
  [v1 requestAuthorizationWithOptions:7 completionHandler:v0 + 18];
  return _swift_continuation_await(v0 + 10);
}

uint64_t sub_1000392A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 216) = v1;
  if (v1) {
    uint64_t v2 = sub_10000F5D8;
  }
  else {
    uint64_t v2 = sub_1000393B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000393B4()
{
  uint64_t v25 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 184);
  if (qword_100092A38 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void **)(v0 + 208);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100006040(v3, (uint64_t)qword_1000937D0);
  id v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  unint64_t v8 = *(void **)(v0 + 208);
  unint64_t v9 = (SEL *)&unk_100091000;
  if (v7)
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v23 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446722;
    *(void *)(v0 + 144) = [v8 authorizationStatus];
    type metadata accessor for UNAuthorizationStatus(0);
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)(v0 + 144) = sub_100007E60(v11, v12, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v10 + 12) = 1026;
    *(_DWORD *)(v0 + 144) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 18) = 2112;
    *(void *)(v0 + 144) = v8;
    id v13 = v8;
    unint64_t v9 = (SEL *)&unk_100091000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v23 = v8;

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Previous status [%{public}s], authorized? %{BOOL,public}d\nSettings: %@", (uint8_t *)v10, 0x1Cu);
    sub_100008580(&qword_100092B40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  switch((unint64_t)[*(id *)(v0 + 208) v9[389]])
  {
    case 0uLL:
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v14, v15)) {
        goto LABEL_19;
      }
      os_log_type_t v16 = "Notification status is Not Determined";
      goto LABEL_18;
    case 1uLL:
      uint64_t v17 = *(void **)(v0 + 208);
      sub_10000FA84();
      swift_allocError();
      *unint64_t v18 = 5;
      swift_willThrow();

      unint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_21;
    case 2uLL:
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v14, v15)) {
        goto LABEL_19;
      }
      os_log_type_t v16 = "Notification status is Authorized";
      goto LABEL_18;
    case 3uLL:
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v14, v15)) {
        goto LABEL_19;
      }
      os_log_type_t v16 = "Notification status is Provisional";
      goto LABEL_18;
    case 4uLL:
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v14, v15)) {
        goto LABEL_19;
      }
      os_log_type_t v16 = "Notification status is Ephemeral";
      goto LABEL_18;
    default:
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        os_log_type_t v16 = "Notification status is Unknown Default";
LABEL_18:
        uint64_t v20 = v14;
        id v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, v16, v21, 2u);
        swift_slowDealloc();
        uint64_t v14 = *(NSObject **)(v0 + 208);
      }
      else
      {
LABEL_19:
        uint64_t v20 = *(NSObject **)(v0 + 208);
      }

      unint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
LABEL_21:
      return v19();
  }
}

id sub_100039830()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NotificationController();
  return [super dealloc];
}

uint64_t type metadata accessor for NotificationController()
{
  return self;
}

uint64_t sub_100039898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 88) = v11;
  *(_OWORD *)(v8 + 72) = v10;
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = a8;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 48) = a6;
  *(void *)(v8 + 32) = a4;
  return _swift_task_switch(sub_1000398D4, 0, 0);
}

uint64_t sub_1000398D4()
{
  uint64_t v49 = v0;
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  _StringGuts.grow(_:)(23);
  uint64_t v3 = static Strings.Daemon.bundleIdentifier.getter();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  v48[0] = v3;
  v48[1] = v5;
  v6._object = (void *)0x800000010007DFA0;
  v6._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v6);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v1 && v7 == v2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v9)
  {
LABEL_10:
    id v13 = [*(id *)(v0 + 72) notification];
    id v14 = [v13 request];
    *(void *)(v0 + 96) = v14;

    uint64_t v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100094418 + dword_100094418);
    os_log_type_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v15;
    *os_log_type_t v15 = v0;
    v15[1] = sub_100039F6C;
    uint64_t v16 = *(void *)(v0 + 56);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v18 = *(void *)(v0 + 48);
    return v46(v18, v16, v17, (uint64_t)v14);
  }
  uint64_t v11 = *(void *)(v0 + 32);
  uint64_t v10 = *(void *)(v0 + 40);
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v11 && v12 == v10)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    if (qword_100092A38 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100006040(v21, (uint64_t)qword_1000937D0);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v22, v23)) {
      goto LABEL_19;
    }
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "dismissed notification", v24, 2u);
    goto LABEL_18;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_14;
  }
  uint64_t v27 = *(void *)(v0 + 32);
  uint64_t v26 = *(void *)(v0 + 40);
  if (static Strings.Notification.declineActionIdentifier.getter() == v27 && v28 == v26)
  {
    swift_bridgeObjectRelease();
LABEL_26:
    if (qword_100092A58 != -1) {
      swift_once();
    }
    uint64_t v30 = *(void **)(v0 + 48);
    uint64_t v31 = qword_1000964D8;
    *(void *)(v0 + 112) = qword_1000964D8;
    *(void *)(v0 + 120) = *v30;
    *(void *)(v0 + 128) = v30[1];
    return _swift_task_switch(sub_10003A078, v31, 0);
  }
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v29) {
    goto LABEL_26;
  }
  uint64_t v33 = *(void *)(v0 + 32);
  uint64_t v32 = *(void *)(v0 + 40);
  if (static Strings.Notification.snoozeActionIdentifier.getter() == v33 && v34 == v32)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v35 & 1) == 0)
    {
      if (qword_100092A38 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      sub_100006040(v40, (uint64_t)qword_1000937D0);
      swift_bridgeObjectRetain_n();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      BOOL v42 = os_log_type_enabled(v22, v41);
      unint64_t v43 = *(void *)(v0 + 40);
      if (!v42)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_19;
      }
      uint64_t v45 = *(void *)(v0 + 32);
      uint64_t v44 = swift_slowAlloc();
      v48[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136315394;
      *(void *)(v0 + 16) = sub_100007E60(0xD000000000000025, 0x800000010007DF70, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v44 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 24) = sub_100007E60(v45, v43, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v22, v41, "%s action: %s not handled", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
LABEL_18:
      swift_slowDealloc();
LABEL_19:

      uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
      return v25();
    }
  }
  uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100094430 + dword_100094430);
  char v36 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v36;
  *char v36 = v0;
  v36[1] = sub_10003A1D8;
  uint64_t v37 = *(void *)(v0 + 80);
  uint64_t v38 = *(void *)(v0 + 88);
  uint64_t v39 = *(void *)(v0 + 48);
  return v47(v39, v37, v38);
}

uint64_t sub_100039F6C()
{
  uint64_t v1 = *(void **)(*v0 + 96);
  uint64_t v4 = *v0;
  swift_task_dealloc();

  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t sub_10003A078()
{
  sub_100045730(*(void **)(v0 + 120), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 128));
  return _swift_task_switch(sub_10003A0E4, 0, 0);
}

uint64_t sub_10003A0E4()
{
  if (qword_100092A30 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000964B0;
  return _swift_task_switch(sub_10003A178, v0, 0);
}

uint64_t sub_10003A178()
{
  sub_10002F9D8(v0[7], v0[8]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10003A1D8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10003A450(void *a1, void *a2, void *aBlock, void *a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  id v13 = (uint64_t (*)(id))((char *)&dword_1000938F8 + dword_1000938F8);
  id v8 = a1;
  id v9 = a2;
  id v10 = a4;
  uint64_t v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_10003A534;
  return v13(v9);
}

uint64_t sub_10003A534()
{
  uint64_t v1 = *(void (***)(void))(*v0 + 40);
  uint64_t v2 = *(void **)(*v0 + 32);
  uint64_t v3 = *(void **)(*v0 + 24);
  uint64_t v4 = *(void **)(*v0 + 16);
  uint64_t v7 = *v0;
  swift_task_dealloc();

  v1[2](v1);
  _Block_release(v1);
  uint64_t v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

uint64_t sub_10003A6A4()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10003A6F4()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  Swift::String v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_10003ECD4;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *, void *))((char *)&dword_1000938B8 + dword_1000938B8);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_10003A7B4(uint64_t a1, uint64_t a2, int *a3)
{
  Swift::String v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10003ECD4;
  return v6();
}

uint64_t sub_10003A884()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10003ECD4;
  Swift::String v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1000938C8 + dword_1000938C8);
  return v6(v2, v3, v4);
}

uint64_t sub_10003A944(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10003ECD4;
  return v7();
}

uint64_t sub_10003AA14()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10003AA54(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  Swift::String v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10003ECD4;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1000938D8 + dword_1000938D8);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10003AB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000A738(a1, &qword_1000938B0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10003ACCC(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10003ADA8;
  return v6(a1);
}

uint64_t sub_10003ADA8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10003AEA0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003AED8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000FCAC;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1000938E8 + dword_1000938E8);
  return v6(a1, v4);
}

uint64_t sub_10003AF90(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10003C76C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10003B140(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_10003B758(v12, v13);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v8 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v16;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

unint64_t *sub_10003B2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v36) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v36) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v36) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v36) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_47:
                  sub_10001AF20();
                  return (unint64_t *)v2;
                }
                unint64_t v13 = *(void *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      break;
                    }
                    if (v14 >= v36) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v37 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }
LABEL_49:
                  __break(1u);
                }
                int64_t v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        unint64_t v7 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        int64_t v9 = v14;
      }
      int64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = *(void *)(v2 + 48);
    os_log_type_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        uint64_t v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    char v29 = *(unsigned char *)(v2 + 32);
    unint64_t v30 = (unint64_t)((1 << v29) + 63) >> 6;
    size_t v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_10003BBC8((unint64_t *)((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0)), v30, v2, v21, &v38);
      swift_release();
      sub_10001AF20();
    }
    else
    {
      uint64_t v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_10003BBC8((unint64_t *)v33, v30, v2, v21, &v38);
      swift_release();
      sub_10001AF20();
      swift_slowDealloc();
    }
    return v32;
  }
  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_10003B758(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      int64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10003C140();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_10003C5A4(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_10003B8E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100008580(&qword_1000939B8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *uint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t *sub_10003BBC8(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v38 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v39 = a3 + 56;
  while (2)
  {
    uint64_t v37 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }
        else
        {
          int64_t v13 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_45;
          }
          int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
          int64_t v15 = a5[3];
          if (v13 >= v14) {
            goto LABEL_43;
          }
          uint64_t v16 = a5[1];
          unint64_t v17 = *(void *)(v16 + 8 * v13);
          if (!v17)
          {
            int64_t v15 = v9 + 1;
            if (v9 + 2 >= v14) {
              goto LABEL_43;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              int64_t v13 = v9 + 2;
            }
            else
            {
              int64_t v15 = v9 + 2;
              if (v9 + 3 >= v14) {
                goto LABEL_43;
              }
              unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                int64_t v13 = v9 + 3;
              }
              else
              {
                int64_t v13 = v9 + 4;
                int64_t v15 = v9 + 3;
                if (v9 + 4 >= v14) {
                  goto LABEL_43;
                }
                unint64_t v17 = *(void *)(v16 + 8 * v13);
                if (!v17)
                {
                  int64_t v15 = v14 - 1;
                  int64_t v18 = v9 + 5;
                  while (v14 != v18)
                  {
                    unint64_t v17 = *(void *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      int64_t v13 = v18 - 1;
                      goto LABEL_21;
                    }
                  }
LABEL_43:
                  a5[3] = v15;
                  a5[4] = 0;
                  swift_retain();
                  return (unint64_t *)sub_10003BEA8(v38, a2, v37, a3);
                }
              }
            }
          }
LABEL_21:
          uint64_t v11 = (v17 - 1) & v17;
          unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
          int64_t v9 = v13;
        }
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v39 + 8 * (v24 >> 6))) != 0) {
          break;
        }
LABEL_3:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      }
      uint64_t v27 = *(void *)(a3 + 48);
      uint64_t v28 = (void *)(v27 + 16 * v24);
      BOOL v29 = *v28 == v21 && v28[1] == v20;
      if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v39 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          uint64_t v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_29;
          }
        }
        goto LABEL_3;
      }
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_29:
      unint64_t v30 = v38[v25];
      v38[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v37 - 1;
    if (__OFSUB__(v37, 1))
    {
LABEL_45:
      __break(1u);
      return result;
    }
    if (v37 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_10003BEA8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100008580(&qword_1000939B8);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

void *sub_10003C140()
{
  uint64_t v1 = v0;
  sub_100008580(&qword_1000939B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10003C2F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100008580(&qword_1000939B8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_10003C5A4(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          int64_t v13 = (_OWORD *)(v12 + 16 * v2);
          unint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *int64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

Swift::Int sub_10003C76C(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10003B8E8();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_10003C140();
      goto LABEL_22;
    }
    sub_10003C2F4();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  Swift::Int *v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

id sub_10003C908(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v120 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v113 = (char *)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100008580((uint64_t *)&unk_100093950);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v114 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  Swift::Int v8 = (char *)&v97 - v7;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v121 = *(void *)(v9 - 8);
  uint64_t v122 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v112 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v116 = (char *)&v97 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v97 - v14;
  uint64_t v16 = type metadata accessor for DateComponents();
  uint64_t v119 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v111 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v97 - v19;
  uint64_t v21 = type metadata accessor for Calendar();
  uint64_t v117 = *(void *)(v21 - 8);
  uint64_t v118 = v21;
  __chkstk_darwin(v21);
  v123 = (char *)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v23 = *(unsigned char *)(a1 + 80);
  if (qword_100092AB0 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_100094070;
  swift_bridgeObjectRetain();
  id v25 = (id)v24;
  NSString v26 = String._bridgeToObjectiveC()();
  LOBYTE(v24) = [v25 BOOLForKey:v26];

  swift_bridgeObjectRelease();
  if (v24 & 1) != 0 || (v23)
  {
    if (qword_100092A38 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    sub_100006040(v57, (uint64_t)qword_1000937D0);
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Not using triggers", v60, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v115 = v16;
  static Calendar.current.getter();
  uint64_t v27 = sub_100008580(&qword_100093970);
  uint64_t v28 = v120;
  int v110 = v20;
  uint64_t v29 = *(void *)(v120 + 72);
  uint64_t v30 = *(unsigned __int8 *)(v120 + 80);
  uint64_t v31 = (v30 + 32) & ~v30;
  uint64_t v32 = 2 * v29;
  uint64_t v105 = 3 * v29;
  uint64_t v101 = v27;
  uint64_t v100 = v30 | 7;
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_10007B9F0;
  uint64_t v102 = v31;
  uint64_t v34 = v33 + v31;
  BOOL v35 = *(void (**)(uint64_t))(v28 + 104);
  unsigned int v99 = enum case for Calendar.Component.year(_:);
  v35(v34);
  uint64_t v103 = v29;
  uint64_t v36 = v34 + v29;
  uint64_t v37 = v110;
  unsigned int v98 = enum case for Calendar.Component.month(_:);
  v35(v36);
  uint64_t v104 = v32;
  unsigned int v107 = enum case for Calendar.Component.day(_:);
  uint64_t v106 = v35;
  v35(v34 + v32);
  sub_10001C58C(v33);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  Date.init()();
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v121 + 8);
  uint64_t v109 = v121 + 8;
  uint64_t v108 = v38;
  v38(v15, v122);
  DateComponents.second.setter();
  if (qword_100092AA0 != -1) {
    swift_once();
  }
  uint64_t v39 = (void *)qword_100094040;
  swift_bridgeObjectRetain();
  id v40 = v39;
  NSString v41 = String._bridgeToObjectiveC()();
  [v40 integerForKey:v41];

  swift_bridgeObjectRelease();
  DateComponents.minute.setter();
  if (qword_100092A98 != -1) {
    swift_once();
  }
  unint64_t v42 = (void *)qword_100094028;
  swift_bridgeObjectRetain();
  id v43 = v42;
  NSString v44 = String._bridgeToObjectiveC()();
  [v43 integerForKey:v44];

  swift_bridgeObjectRelease();
  DateComponents.hour.setter();
  uint64_t v45 = v123;
  if ((DateComponents.isValidDate(in:)() & 1) == 0)
  {
    uint64_t v50 = v115;
    if (qword_100092A38 != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    sub_100006040(v61, (uint64_t)qword_1000937D0);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v52, v53)) {
      goto LABEL_25;
    }
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    char v56 = "Invalid date for notification trigger";
    goto LABEL_24;
  }
  Calendar.date(from:)();
  uint64_t v46 = v121;
  uint64_t v47 = v122;
  unint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v121 + 48);
  int v49 = v48(v8, 1, v122);
  uint64_t v50 = v115;
  if (v49 == 1)
  {
    sub_10000A738((uint64_t)v8, (uint64_t *)&unk_100093950);
    if (qword_100092A38 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_100006040(v51, (uint64_t)qword_1000937D0);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.fault.getter();
    BOOL v54 = os_log_type_enabled(v52, v53);
    uint64_t v45 = v123;
    if (!v54) {
      goto LABEL_25;
    }
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    char v56 = "Error generating date for notification trigger";
LABEL_24:
    _os_log_impl((void *)&_mh_execute_header, v52, v53, v56, v55, 2u);
    swift_slowDealloc();
LABEL_25:

    (*(void (**)(char *, uint64_t))(v117 + 8))(v45, v118);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v37, v50);
    return 0;
  }
  uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 32);
  uint64_t v121 = v46 + 32;
  uint64_t v97 = v64;
  v64(v116, (uint64_t)v8, v47);
  Date.init()();
  char v65 = static Date.< infix(_:_:)();
  v108(v15, v47);
  if (v65)
  {
    if (qword_100092A38 != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    sub_100006040(v66, (uint64_t)qword_1000937D0);
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.info.getter();
    BOOL v69 = os_log_type_enabled(v67, v68);
    uint64_t v70 = v107;
    if (v69)
    {
      unint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Will post tomorrow", v71, 2u);
      swift_slowDealloc();
    }

    uint64_t v72 = v113;
    uint64_t v73 = v70;
    unint64_t v74 = v106;
    ((void (*)(char *, uint64_t, uint64_t))v106)(v113, v73, v2);
    uint64_t v75 = (uint64_t)v114;
    Calendar.date(byAdding:value:to:wrappingComponents:)();
    (*(void (**)(char *, uint64_t))(v120 + 8))(v72, v2);
    uint64_t v76 = v122;
    if (v48((char *)v75, 1, v122) == 1)
    {
      sub_10000A738(v75, (uint64_t *)&unk_100093950);
      id v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v79 = 0;
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "Error generating date for notification trigger", v79, 2u);
        swift_slowDealloc();
      }

      v108(v116, v122);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v123, v118);
      (*(void (**)(char *, uint64_t))(v119 + 8))(v37, v115);
      return 0;
    }
    uint64_t v80 = v112;
    v97(v112, v75, v76);
    uint64_t v81 = v103;
    uint64_t v82 = 4 * v103;
    uint64_t v83 = v102;
    uint64_t v84 = swift_allocObject();
    *(_OWORD *)(v84 + 16) = xmmword_10007B870;
    uint64_t v85 = v84 + v83;
    ((void (*)(uint64_t, void, uint64_t))v74)(v85, v99, v2);
    uint64_t v86 = v85 + v81;
    uint64_t v37 = v110;
    ((void (*)(uint64_t, void, uint64_t))v74)(v86, v98, v2);
    ((void (*)(uint64_t, void, uint64_t))v74)(v85 + v104, v107, v2);
    ((void (*)(uint64_t, void, uint64_t))v74)(v85 + v105, enum case for Calendar.Component.hour(_:), v2);
    uint64_t v87 = v85 + v82;
    uint64_t v50 = v115;
    ((void (*)(uint64_t, void, uint64_t))v74)(v87, enum case for Calendar.Component.minute(_:), v2);
    sub_10001C58C(v84);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    unint64_t v88 = v111;
    Calendar.dateComponents(_:from:)();
    swift_bridgeObjectRelease();
    v108(v80, v76);
    (*(void (**)(char *, char *, uint64_t))(v119 + 40))(v37, v88, v50);
  }
  if (qword_100092A38 != -1) {
    swift_once();
  }
  uint64_t v89 = type metadata accessor for Logger();
  sub_100006040(v89, (uint64_t)qword_1000937D0);
  uint64_t v90 = Logger.logObject.getter();
  os_log_type_t v91 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v90, v91))
  {
    uint64_t v92 = (uint8_t *)swift_slowAlloc();
    uint64_t v125 = swift_slowAlloc();
    *(_DWORD *)uint64_t v92 = 136315138;
    swift_beginAccess();
    sub_10003EB60(&qword_100093978, (void (*)(uint64_t))&type metadata accessor for DateComponents);
    uint64_t v93 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v124 = sub_100007E60(v93, v94, &v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "Trigger date %s", v92, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v95 = v123;
  swift_beginAccess();
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  id v62 = [self triggerWithDateMatchingComponents:isa repeats:0];

  v108(v116, v122);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v95, v118);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v37, v50);
  return v62;
}

void *sub_10003D878(unint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v6 = a1;
  uint64_t v19 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      unint64_t v9 = v6 & 0xC000000000000001;
      unint64_t v16 = v6;
      uint64_t v17 = v6 & 0xFFFFFFFFFFFFFF8;
      uint64_t v15 = v7;
      while (v9)
      {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v11 = v10;
        unint64_t v12 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        id v18 = v10;
        char v13 = sub_1000371B8(&v18, a2, (uint64_t)a3);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return a3;
        }
        if (v13)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v7 = v15;
          unint64_t v6 = v16;
        }
        else
        {
        }
        ++v8;
        if (v12 == v7)
        {
          a3 = v19;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)(v17 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_19;
      }
    }
    id v10 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_19:
  a3 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return a3;
}

uint64_t sub_10003DA20(uint64_t a1)
{
  v1[19] = a1;
  sub_100008580(&qword_1000938B0);
  v1[20] = swift_task_alloc();
  sub_100008580(&qword_100093900);
  v1[21] = swift_task_alloc();
  v1[22] = sub_100008580(&qword_100093908);
  v1[23] = swift_task_alloc();
  uint64_t v2 = *(void *)(type metadata accessor for FormLaunchConfiguration() - 8);
  v1[24] = v2;
  v1[25] = *(void *)(v2 + 64);
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  return _swift_task_switch(sub_10003DB88, 0, 0);
}

uint64_t sub_10003DB88()
{
  uint64_t v35 = v0;
  if (qword_100092A38 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 224) = sub_100006040(v2, (uint64_t)qword_1000937D0);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void **)(v0 + 152);
  unint64_t v8 = (SEL *)&unk_100091000;
  uint64_t v33 = v0 + 16;
  if (v6)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446466;
    *(void *)(v0 + 136) = sub_100007E60(0xD000000000000025, 0x800000010007DF70, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2080;
    id v10 = [v7 actionIdentifier];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    *(void *)(v0 + 144) = sub_100007E60(v11, v13, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s action: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v8 = (SEL *)&unk_100091000;
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v14 = *(void **)(v0 + 152);
  id v15 = [v14 notification];
  id v16 = [v15 request];

  id v17 = [v16 content];
  id v18 = [v17 userInfo];

  uint64_t v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v20 = [v14 v8[422]];
  if (!v20)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 232) = v20;
  *(void *)(v0 + 240) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 248) = v21;
  strcpy((char *)(v0 + 88), "formIdentifier");
  *(unsigned char *)(v0 + 103) = -18;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v19 + 16) && (unint64_t v22 = sub_100025B40(v33), (v23 & 1) != 0))
  {
    sub_10000A7E0(*(void *)(v19 + 56) + 32 * v22, v0 + 56);
  }
  else
  {
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10000A6E4(v33);
  if (*(void *)(v0 + 80))
  {
    if (swift_dynamicCast())
    {
      uint64_t v25 = *(void *)(v0 + 104);
      uint64_t v24 = *(void *)(v0 + 112);
      *(void *)(v0 + 256) = v25;
      *(void *)(v0 + 264) = v24;
      if (qword_100092A30 != -1) {
        swift_once();
      }
      NSString v26 = (void *)swift_task_alloc();
      *(void *)(v0 + 272) = v26;
      void *v26 = v0;
      v26[1] = sub_10003E1AC;
      uint64_t v27 = *(void *)(v0 + 168);
      return sub_10002D1B0(v27, v25, v24);
    }

    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
    sub_10000A738(v0 + 56, (uint64_t *)&unk_100093910);
  }
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    *(void *)(v0 + 120) = sub_100007E60(0xD000000000000025, 0x800000010007DF70, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s failed to get form identifier from notification", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t sub_10003E1AC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10003E2A8, 0, 0);
}

uint64_t sub_10003E2A8()
{
  id v40 = v0;
  uint64_t v1 = v0[21];
  uint64_t v2 = sub_100008580((uint64_t *)&unk_1000937C0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    id v3 = (void *)v0[29];
    sub_10000A738(v1, &qword_100093900);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      BOOL v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)BOOL v6 = 136315138;
      v0[16] = sub_100007E60(0xD000000000000025, 0x800000010007DF70, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s no notification data found. Ignoring response", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v37 = v0[31];
    uint64_t v38 = v0[32];
    uint64_t v7 = (void *)v0[29];
    uint64_t v8 = v0[27];
    uint64_t v32 = v0[25];
    uint64_t v9 = v0[23];
    uint64_t v30 = v0[26];
    uint64_t v31 = v0[24];
    uint64_t v10 = v0[22];
    uint64_t v11 = v0[20];
    uint64_t v34 = v0[30];
    uint64_t v35 = (void *)v0[19];
    unint64_t v12 = (uint64_t *)(v1 + *(int *)(v2 + 48));
    uint64_t v36 = v0[33];
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    id v15 = (void *)(v9 + *(int *)(v10 + 48));
    sub_100013D20(v1, v9);
    *id v15 = v14;
    v15[1] = v13;
    id v16 = (uint64_t *)(v9 + *(int *)(v10 + 48));
    uint64_t v17 = *v16;
    uint64_t v33 = v16[1];
    sub_100013D20(v9, v8);
    id v18 = self;
    swift_bridgeObjectRetain();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 logFeedbackdReceivedNotificationResponse:v7 formIdentifier:v19];

    static TaskPriority.utility.getter();
    uint64_t v20 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v11, 0, 1, v20);
    sub_100013D84(v8, v30);
    unint64_t v21 = (*(unsigned __int8 *)(v31 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    unint64_t v22 = (v32 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v24 = (void *)swift_allocObject();
    _OWORD v24[2] = 0;
    v24[3] = 0;
    v24[4] = v34;
    v24[5] = v37;
    sub_100013D20(v30, (uint64_t)v24 + v21);
    uint64_t v25 = (void *)((char *)v24 + v22);
    *uint64_t v25 = v17;
    v25[1] = v33;
    *(void *)((char *)v24 + v23) = v35;
    NSString v26 = (void *)((char *)v24 + ((v23 + 15) & 0xFFFFFFFFFFFFFFF8));
    void *v26 = v38;
    v26[1] = v36;
    id v27 = v35;
    sub_10006DA84(v11, (uint64_t)&unk_100093928, (uint64_t)v24);
    swift_release();
    sub_10000A738(v11, &qword_1000938B0);
    sub_100013DE8(v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = (uint64_t (*)(void))v0[1];
  return v28();
}

uint64_t sub_10003E6B4()
{
  uint64_t v1 = (int *)type metadata accessor for FormLaunchConfiguration();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + ((v2 + 48) & ~v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = v3 + v1[6];
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  uint64_t v8 = v3 + v1[8];
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v9(v8, 1, v5)) {
    v7(v8, v5);
  }
  uint64_t v10 = v3 + v1[9];
  if (!v9(v10, 1, v5)) {
    v7(v10, v5);
  }
  unint64_t v11 = (((v13 + ((v2 + 48) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10003E8D4()
{
  uint64_t v2 = *(void *)(type metadata accessor for FormLaunchConfiguration() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v8 = v0 + v3;
  uint64_t v9 = *(void *)(v0 + v5);
  uint64_t v10 = *(void *)(v0 + v4);
  uint64_t v11 = *(void *)(v0 + v4 + 8);
  unint64_t v12 = (uint64_t *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  id v15 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v15;
  *id v15 = v1;
  v15[1] = sub_10000FCAC;
  v15[10] = v13;
  v15[11] = v14;
  v15[8] = v11;
  v15[9] = v9;
  v15[6] = v8;
  v15[7] = v10;
  v15[4] = v6;
  v15[5] = v7;
  return _swift_task_switch(sub_1000398D4, 0, 0);
}

uint64_t sub_10003EA2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580((uint64_t *)&unk_100093950);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10003EA94()
{
  unint64_t result = qword_1000939A8;
  if (!qword_1000939A8)
  {
    sub_10000C524(255, (unint64_t *)&qword_1000939A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000939A8);
  }
  return result;
}

uint64_t sub_10003EAFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FormLaunchConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003EB60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NotificationController.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10003EC44);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationController.Error()
{
  return &type metadata for NotificationController.Error;
}

unint64_t sub_10003EC80()
{
  unint64_t result = qword_1000939C8;
  if (!qword_1000939C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000939C8);
  }
  return result;
}

uint64_t sub_10003ECD8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_100093A30);
  sub_100006040(v0, (uint64_t)qword_100093A30);
  static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)();
}

CFUserNotificationRef sub_10003ED3C(uint64_t a1, char a2)
{
  sub_100018BD0(a2, &v30);
  uint64_t v2 = v31;
  uint64_t v3 = v33;
  uint64_t v27 = v32;
  uint64_t v28 = v30;
  uint64_t v4 = v35;
  uint64_t v5 = v37;
  uint64_t v25 = v36;
  uint64_t v26 = v34;
  if (qword_100092A50 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100006040(v6, (uint64_t)qword_100093A30);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(void *)error = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v30 = v28;
    uint64_t v31 = v2;
    uint64_t v32 = v27;
    uint64_t v33 = v3;
    uint64_t v34 = v26;
    uint64_t v35 = v4;
    uint64_t v36 = v25;
    uint64_t v37 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100008580(&qword_100093968);
    uint64_t v10 = String.init<A>(describing:)();
    uint64_t v30 = sub_100007E60(v10, v11, (uint64_t *)error);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v12 = v5;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Using strings: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v12 = v5;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  sub_100008580(&qword_100093A50);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10007BAE0;
  if (!kCFUserNotificationAlertHeaderKey)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v14 = (void *)inited;
  *(void *)(inited + 32) = kCFUserNotificationAlertHeaderKey;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CFStringRef v15 = (id)kCFUserNotificationAlertHeaderKey;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14[8] = &type metadata for String;
  v14[5] = v28;
  v14[6] = v2;
  if (!kCFUserNotificationAlertMessageKey)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v14[9] = kCFUserNotificationAlertMessageKey;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CFStringRef v16 = (id)kCFUserNotificationAlertMessageKey;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14[13] = &type metadata for String;
  v14[10] = v27;
  v14[11] = v3;
  if (!kCFUserNotificationDefaultButtonTitleKey)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  v14[14] = kCFUserNotificationDefaultButtonTitleKey;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CFStringRef v17 = (id)kCFUserNotificationDefaultButtonTitleKey;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14[18] = &type metadata for String;
  v14[15] = v26;
  v14[16] = v4;
  if (!kCFUserNotificationAlternateButtonTitleKey) {
    goto LABEL_18;
  }
  v14[19] = kCFUserNotificationAlternateButtonTitleKey;
  CFStringRef v18 = (id)kCFUserNotificationAlternateButtonTitleKey;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14[23] = &type metadata for String;
  v14[20] = v25;
  v14[21] = v12;
  sub_100023AAC((uint64_t)v14);
  error[0] = 0;
  type metadata accessor for CFString(0);
  sub_10003F52C();
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CFUserNotificationRef v20 = CFUserNotificationCreate(0, 0.0, 0, error, isa);

  if (!v20)
  {
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v23 = 67109120;
      swift_beginAccess();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to show CFUserNotification. Error: %d", v23, 8u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v20;
}

uint64_t sub_10003F2A0(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 40) = a2;
  *(void *)(v2 + 32) = a1;
  return _swift_task_switch(sub_10003F334, 0, 0);
}

uint64_t sub_10003F334()
{
  uint64_t v1 = sub_10003ED3C(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  if (v1)
  {
    uint64_t v2 = v1;
    *(void *)(v0 + 16) = 0;
    CFUserNotificationReceiveResponse(v1, 0.0, (CFOptionFlags *)(v0 + 16));
    uint64_t v3 = *(void *)(v0 + 16);
    if (!v3)
    {
      uint64_t v4 = 0;
      goto LABEL_7;
    }
    if (v3 == 1)
    {
      CFUserNotificationCancel(v2);
      uint64_t v4 = 1;
LABEL_7:

      uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v5(v4);
    }
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 24) = v3;
    v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    sub_10001AC84(0xD000000000000023, 0x800000010007E120);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  else
  {
    sub_10001AC84(0xD000000000000023, 0x800000010007E0F0);
    swift_willThrow();
  }
  os_log_type_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

unint64_t sub_10003F52C()
{
  unint64_t result = qword_100092DD0;
  if (!qword_100092DD0)
  {
    type metadata accessor for CFString(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100092DD0);
  }
  return result;
}

uint64_t sub_10003F584(void *a1, void *a2)
{
  return sub_10003F604(a1, a2, (void (*)(void))sub_1000497D8, (void (*)(void))sub_1000497D8);
}

uint64_t sub_10003F5C4(void *a1, void *a2)
{
  return sub_10003F604(a1, a2, (void (*)(void))sub_1000497D8, (void (*)(void))sub_10004A5EC);
}

uint64_t sub_10003F604(id a1, void *a2, void (*a3)(void), void (*a4)(void))
{
  v126 = a4;
  uint64_t v127 = a3;
  uint64_t v8 = sub_100008580((uint64_t *)&unk_100094200);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for FBKSInteraction.FeatureDomain();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (void *)((char *)v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_100008580(&qword_100093120);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v129 = (uint64_t)v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v128 = (uint64_t)v112 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v125 = (char *)v112 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v23 = (unint64_t)v112 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)v112 - v25;
  __chkstk_darwin(v24);
  uint64_t v134 = (uint64_t)v112 - v27;
  uint64_t v28 = type metadata accessor for FBKSForm.Question();
  char v130 = *(char **)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v133 = (uint64_t)v112 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v30 = [a1 commonMetadata];
  if (v30)
  {
    uint64_t v120 = v28;
    uint64_t v122 = v13;
    uint64_t v31 = v30;
    id v32 = [v30 featureDomain];
    if (v32)
    {
      uint64_t v33 = v32;
      uint64_t v116 = v10;
      uint64_t v117 = v4;
      uint64_t v124 = v5;
      uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v118 = v34;

      id v132 = v31;
      id v35 = [v31 prefilledQuestions];
      sub_10000C524(0, &qword_100093A58);
      unint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v36 >> 62) {
        goto LABEL_58;
      }
      uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v135 = (uint64_t)v26;
        unint64_t v121 = v23;
        uint64_t v119 = a2;
        id v123 = a1;
        if (v37)
        {
          unint64_t v23 = v36 & 0xC000000000000001;
          v112[1] = v130 + 16;
          uint64_t v131 = &_swiftEmptyDictionarySingleton;
          uint64_t v38 = (void (**)(uint64_t, uint64_t))(v130 + 8);
          for (unint64_t i = 0; ; unint64_t i = v26)
          {
            while (1)
            {
              if (v23) {
                id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v40 = *(id *)(v36 + 8 * (void)i + 32);
              }
              a2 = v40;
              uint64_t v26 = i + 1;
              if (__OFADD__(i, 1))
              {
                __break(1u);
                goto LABEL_57;
              }
              id v41 = [v40 question];
              if (v41) {
                break;
              }

              ++i;
              if (v26 == (char *)v37) {
                goto LABEL_29;
              }
            }
            unint64_t v42 = v41;
            uint64_t v113 = v38;
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            FBKSForm.Question.init(stringValue:)();
            id v43 = [a2 answer];
            uint64_t v114 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            NSString v44 = v131;
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v136 = (uint64_t)v44;
            unint64_t v47 = sub_100025BFC(v133);
            uint64_t v48 = v44[2];
            BOOL v49 = (v46 & 1) == 0;
            uint64_t v50 = v48 + v49;
            if (__OFADD__(v48, v49)) {
              break;
            }
            char v51 = v46;
            if (v44[3] >= v50)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                sub_100028654();
              }
            }
            else
            {
              sub_100026BA0(v50, isUniquelyReferenced_nonNull_native);
              unint64_t v52 = sub_100025BFC(v133);
              if ((v51 & 1) != (v53 & 1)) {
                goto LABEL_89;
              }
              unint64_t v47 = v52;
            }
            a1 = v123;
            uint64_t v54 = v136;
            uint64_t v131 = (void *)v136;
            if (v51)
            {
              uint64_t v55 = *(void *)(v136 + 56);
              swift_bridgeObjectRelease();
              *(void *)(v55 + 8 * v47) = v114;
            }
            else
            {
              *(void *)(v136 + 8 * (v47 >> 6) + 64) |= 1 << v47;
              (*((void (**)(unint64_t, uint64_t, uint64_t))v130 + 2))(*(void *)(v54 + 48) + *((void *)v130 + 9) * v47, v133, v120);
              char v56 = v131;
              *(void *)(v131[7] + 8 * v47) = v114;
              uint64_t v57 = v56[2];
              BOOL v58 = __OFADD__(v57, 1);
              uint64_t v59 = v57 + 1;
              if (v58) {
                goto LABEL_86;
              }
              v56[2] = v59;
            }
            uint64_t v38 = v113;
            swift_bridgeObjectRelease();
            (*v38)(v133, v120);

            if (v26 == (char *)v37) {
              goto LABEL_29;
            }
          }
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
LABEL_90:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        uint64_t v131 = &_swiftEmptyDictionarySingleton;
LABEL_29:
        swift_bridgeObjectRelease_n();
        id v62 = [v132 auxiliaryAttributes];
        if (!v62)
        {
          uint64_t v133 = (uint64_t)&_swiftEmptyDictionarySingleton;
          uint64_t v87 = v124;
          uint64_t v26 = (char *)v135;
          goto LABEL_62;
        }
        uint64_t v63 = v62;
        id v64 = [v62 attributeDict];

        sub_10000C524(0, &qword_100093A60);
        unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v26 = (char *)v135;
        if (v23 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v65)
          {
LABEL_60:
            uint64_t v133 = (uint64_t)&_swiftEmptyDictionarySingleton;
LABEL_61:
            swift_bridgeObjectRelease_n();
            a1 = v123;
            uint64_t v87 = v124;
LABEL_62:
            uint64_t v13 = (void *)type metadata accessor for FBKSInteraction.Content();
            unint64_t v88 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(v13 - 1) + 56);
            v88(v134, 1, 1, v13);
            id v89 = [a1 originalContent];
            uint64_t v90 = v119;
            if (v89)
            {
              v127();
              if (v87)
              {

                swift_bridgeObjectRelease();
                uint64_t v91 = type metadata accessor for UUID();
                (*(void (**)(void *, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
                goto LABEL_69;
              }
              uint64_t v92 = v134;
              sub_10004077C(v134);
              sub_1000407DC((uint64_t)v26, v92);
            }
            v88(v121, 1, 1, v13);
            if ([a1 generatedContent])
            {
              uint64_t v93 = (uint64_t)v125;
              v126();
              uint64_t v13 = v122;
              if (v87)
              {

                swift_bridgeObjectRelease();
                uint64_t v94 = type metadata accessor for UUID();
                (*(void (**)(void *, uint64_t))(*(void *)(v94 - 8) + 8))(v90, v94);
                sub_10004077C(v121);
LABEL_69:
                sub_10004077C(v134);
                swift_bridgeObjectRelease();
LABEL_82:
                swift_bridgeObjectRelease();
                return (uint64_t)v13;
              }
              uint64_t v95 = v121;
              sub_10004077C(v121);
              sub_1000407DC(v93, v95);
            }
            else
            {
              uint64_t v95 = v121;
              uint64_t v13 = v122;
            }
            uint64_t v124 = v87;
            sub_100049B48(v115, v118, v13);
            id v96 = [v132 bundleId];
            if (v96)
            {
              uint64_t v97 = v96;
              uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              char v130 = v98;
            }
            else
            {
              uint64_t v135 = 0;
              char v130 = 0;
            }
            sub_10001DC8C(v134, v128);
            sub_10001DC8C(v95, v129);
            swift_bridgeObjectRetain();
            id v99 = [v132 modelVersion];
            if (v99)
            {
              uint64_t v100 = v99;
              uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v126 = v102;
              uint64_t v127 = (void (*)(void))v101;
            }
            else
            {
              v126 = 0;
              uint64_t v127 = 0;
            }
            id v103 = [v132 diagnostics];
            if (v103)
            {
              uint64_t v104 = v103;
              static String._unconditionallyBridgeFromObjectiveC(_:)();
            }
            swift_bridgeObjectRetain();
            id v105 = v132;
            [v132 isHighPriority];
            uint64_t v106 = type metadata accessor for UUID();
            uint64_t v107 = *(void *)(v106 - 8);
            uint64_t v108 = v116;
            uint64_t v109 = v119;
            (*(void (**)(char *, void *, uint64_t))(v107 + 16))(v116, v119, v106);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(v108, 0, 1, v106);
            uint64_t v13 = (id)dispatch thunk of FBKSInteraction.__allocating_init(featureDomain:bundleID:prefillQuestions:originalContent:generatedContent:modelVersion:diagnostics:auxiliaryMetrics:isHighPriority:evaluationID:)();
            uint64_t v110 = v124;
            sub_100015264((uint64_t)v13);
            if (v110)
            {

              (*(void (**)(void *, uint64_t))(v107 + 8))(v109, v106);
              sub_10004077C(v121);
              sub_10004077C(v134);

              swift_bridgeObjectRelease();
              goto LABEL_82;
            }

            (*(void (**)(void *, uint64_t))(v107 + 8))(v109, v106);
            sub_10004077C(v121);
            sub_10004077C(v134);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            return (uint64_t)v13;
          }
        }
        else
        {
          uint64_t v65 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v65) {
            goto LABEL_60;
          }
        }
        uint64_t v66 = 0;
        a1 = (id)(v23 & 0xC000000000000001);
        uint64_t v133 = (uint64_t)&_swiftEmptyDictionarySingleton;
LABEL_33:
        uint64_t v67 = v66;
        while (1)
        {
          id v68 = a1 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v23 + 8 * v67 + 32);
          a2 = v68;
          uint64_t v66 = v67 + 1;
          if (__OFADD__(v67, 1)) {
            break;
          }
          id v69 = [v68 name];
          if (v69)
          {
            uint64_t v70 = v69;
            uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v36 = v72;

            id v73 = [a2 value];
            if (v73)
            {
              unint64_t v74 = v73;
              char v130 = (char *)[v73 int64Value];

              uint64_t v75 = v133;
              LODWORD(v120) = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v136 = v75;
              unint64_t v77 = sub_100025B84(v71, v36);
              uint64_t v78 = *(void *)(v75 + 16);
              BOOL v79 = (v76 & 1) == 0;
              uint64_t v80 = v78 + v79;
              if (__OFADD__(v78, v79)) {
                goto LABEL_87;
              }
              if (*(void *)(v75 + 24) >= v80)
              {
                if ((v120 & 1) == 0)
                {
                  LODWORD(v133) = v76;
                  sub_1000284A4();
                  LOBYTE(v76) = v133;
                }
              }
              else
              {
                LODWORD(v133) = v76;
                sub_100026894(v80, v120);
                unint64_t v81 = sub_100025B84(v71, v36);
                int v82 = v76 & 1;
                LOBYTE(v76) = v133;
                if ((v133 & 1) != v82) {
                  goto LABEL_90;
                }
                unint64_t v77 = v81;
              }
              uint64_t v83 = (void *)v136;
              uint64_t v133 = v136;
              if (v76)
              {
                *(void *)(*(void *)(v136 + 56) + 8 * v77) = v130;
              }
              else
              {
                *(void *)(v136 + 8 * (v77 >> 6) + 64) |= 1 << v77;
                uint64_t v84 = (uint64_t *)(v83[6] + 16 * v77);
                *uint64_t v84 = v71;
                v84[1] = v36;
                *(void *)(v83[7] + 8 * v77) = v130;
                uint64_t v85 = v83[2];
                BOOL v58 = __OFADD__(v85, 1);
                uint64_t v86 = v85 + 1;
                if (v58) {
                  goto LABEL_88;
                }
                v83[2] = v86;
                swift_bridgeObjectRetain();
              }
              uint64_t v26 = (char *)v135;

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v66 != v65) {
                goto LABEL_33;
              }
              goto LABEL_61;
            }

            swift_bridgeObjectRelease();
            uint64_t v26 = (char *)v135;
          }
          else
          {
          }
          ++v67;
          if (v66 == v65) {
            goto LABEL_61;
          }
        }
LABEL_57:
        __break(1u);
LABEL_58:
        swift_bridgeObjectRetain_n();
        uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
    }
  }
  sub_10002A51C();
  swift_allocError();
  *uint64_t v60 = 3;
  swift_willThrow();

  uint64_t v61 = type metadata accessor for UUID();
  (*(void (**)(void *, uint64_t))(*(void *)(v61 - 8) + 8))(a2, v61);
  return (uint64_t)v13;
}

uint64_t sub_10004038C(void *a1, void *a2)
{
  return sub_10003F604(a1, a2, (void (*)(void))sub_10004A98C, (void (*)(void))sub_10004A5EC);
}

uint64_t sub_1000403CC()
{
  uint64_t v0 = sub_100008580(&qword_100093120);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v22 - v4;
  uint64_t v6 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v23 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - v10;
  dispatch thunk of FBKSInteraction.originalContent.getter();
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v12(v5, 1, v6) == 1)
  {
    sub_10004077C((uint64_t)v5);
    char v13 = 3;
    uint64_t v14 = v24;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v5, v6);
    uint64_t v15 = v24;
    char v16 = sub_100049100();
    if (v15) {
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    }
    char v13 = v16;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    uint64_t v14 = 0;
  }
  dispatch thunk of FBKSInteraction.generatedContent.getter();
  if (v12(v3, 1, v6) == 1)
  {
    sub_10004077C((uint64_t)v3);
    char v18 = 3;
  }
  else
  {
    uint64_t v19 = v23;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v23, v3, v6);
    char v20 = sub_100049100();
    if (v14) {
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v19, v6);
    }
    char v18 = v20;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  }
  switch(v13)
  {
    case 1:
    case 2:
      if ((v18 | 2) == 3)
      {
        uint64_t result = 2;
      }
      else
      {
LABEL_17:
        sub_10002A51C();
        swift_allocError();
        unsigned char *v21 = 2;
        uint64_t result = swift_willThrow();
      }
      break;
    case 3:
      uint64_t result = 0;
      switch(v18)
      {
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        default:
          return result;
      }
    default:
      uint64_t result = 0;
      switch(v18)
      {
        case 1:
LABEL_16:
          uint64_t result = 1;
          break;
        case 2:
          goto LABEL_17;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t sub_10004077C(uint64_t a1)
{
  uint64_t v2 = sub_100008580(&qword_100093120);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000407DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_100093120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_100040844(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = (void *)sub_100043D3C(v1);
    uint64_t v4 = (uint64_t)result;
    int v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = v1 + 64;
    uint64_t v21 = v1 + 80;
    uint64_t v22 = v1;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(v1 + 32))
    {
      unint64_t v10 = (unint64_t)v4 >> 6;
      if ((*(void *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(v1 + 36) != v6) {
        goto LABEL_23;
      }
      uint64_t v23 = v7;
      swift_bridgeObjectRetain();
      Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      id v12 = [objc_allocWithZone((Class)BMCustomAttributesBasicValue) initWithBoolValue:0 int64Value:isa doubleValue:0 stringValue:0];

      id v13 = objc_allocWithZone((Class)BMCustomAttributesNamedValue);
      swift_bridgeObjectRetain();
      id v14 = v12;
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v13 initWithName:v15 value:v14];
      swift_bridgeObjectRelease();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      uint64_t v1 = v22;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = (void *)specialized ContiguousArray._endMutation()();
      int64_t v9 = 1 << *(unsigned char *)(v22 + 32);
      if (v4 >= v9) {
        goto LABEL_24;
      }
      uint64_t v16 = *(void *)(v8 + 8 * v10);
      if ((v16 & (1 << v4)) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(v22 + 36) != v6) {
        goto LABEL_26;
      }
      unint64_t v17 = v16 & (-2 << (v4 & 0x3F));
      if (v17)
      {
        int64_t v9 = __clz(__rbit64(v17)) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v18 = v10 + 1;
        unint64_t v19 = (unint64_t)(v9 + 63) >> 6;
        if (v10 + 1 < v19)
        {
          unint64_t v20 = *(void *)(v8 + 8 * v18);
          if (v20)
          {
LABEL_18:
            int64_t v9 = __clz(__rbit64(v20)) + (v18 << 6);
          }
          else
          {
            while (v19 - 2 != v10)
            {
              unint64_t v20 = *(void *)(v21 + 8 * v10++);
              if (v20)
              {
                unint64_t v18 = v10 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v7 = v23 + 1;
      uint64_t v4 = v9;
      if (v23 + 1 == v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

void *sub_100040ADC(void *a1)
{
  return sub_100040B54(a1, &qword_100093A70, (uint64_t)BMTextContent_ptr, (uint64_t (*)(char *))sub_10004202C);
}

void *sub_100040B18(void *a1)
{
  return sub_100040B54(a1, &qword_100093A88, (uint64_t)BMImageContent_ptr, (uint64_t (*)(char *))sub_100042690);
}

void *sub_100040B54(void *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v57 = a4;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  uint64_t v5 = sub_100008580(&qword_100093120);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v49 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  id v14 = (char *)&v49 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v49 - v15;
  unint64_t v17 = (void *)type metadata accessor for FBKSInteraction.Content();
  uint64_t v58 = *(v17 - 1);
  uint64_t v18 = __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v49 - v21;
  sub_10000C524(0, &qword_100093A68);
  id v23 = a1;
  uint64_t v24 = v59;
  uint64_t v25 = sub_1000436F0(v23);
  if (!v24)
  {
    uint64_t v59 = 0;
    char v51 = v22;
    unint64_t v52 = v11;
    BOOL v49 = v20;
    uint64_t v50 = v8;
    char v53 = v25;
    id v26 = v23;
    dispatch thunk of FBKSInteraction.originalContent.getter();

    uint64_t v27 = v58;
    uint64_t v28 = *(unsigned int (**)(char *, uint64_t, void *))(v58 + 48);
    uint64_t v29 = v17;
    if (v28(v16, 1, v17) == 1)
    {
      sub_10000A738((uint64_t)v16, &qword_100093120);
      id v30 = 0;
      uint64_t v31 = v27;
    }
    else
    {
      id v32 = v51;
      (*(void (**)(char *, char *, void *))(v27 + 32))(v51, v16, v17);
      sub_10000C524(0, &qword_100093A70);
      uint64_t v31 = v27;
      unint64_t v17 = v14;
      uint64_t v33 = v32;
      (*(void (**)(void *, char *, void *))(v27 + 16))(v17, v32, v29);
      (*(void (**)(void *, void, uint64_t, void *))(v27 + 56))(v17, 0, 1, v29);
      uint64_t v34 = v59;
      id v35 = sub_10004202C((uint64_t)v17);
      if (v34)
      {

        (*(void (**)(char *, void *))(v27 + 8))(v32, v29);
        return v17;
      }
      id v30 = v35;
      uint64_t v59 = 0;
      (*(void (**)(char *, void *))(v27 + 8))(v33, v29);
    }
    id v36 = v26;
    uint64_t v37 = (uint64_t)v52;
    dispatch thunk of FBKSInteraction.generatedContent.getter();

    unsigned int v38 = v28((char *)v37, 1, v29);
    uint64_t v39 = v57;
    if (v38 == 1)
    {
      sub_10000A738(v37, &qword_100093120);
      id v40 = 0;
    }
    else
    {
      uint64_t v41 = v37;
      unint64_t v42 = v49;
      (*(void (**)(char *, uint64_t, void *))(v31 + 32))(v49, v41, v29);
      sub_10000C524(0, v54);
      id v43 = v50;
      (*(void (**)(char *, char *, void *))(v31 + 16))(v50, v42, v29);
      (*(void (**)(char *, void, uint64_t, void *))(v31 + 56))(v43, 0, 1, v29);
      uint64_t v44 = v59;
      uint64_t v45 = v39(v43);
      unint64_t v17 = v56;
      uint64_t v59 = v44;
      if (v44)
      {

        (*(void (**)(char *, void *))(v31 + 8))(v42, v29);
        return v17;
      }
      id v40 = (void *)v45;
      (*(void (**)(char *, void *))(v31 + 8))(v42, v29);
    }
    id v46 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    unint64_t v47 = v53;
    unint64_t v17 = [v46 initWithCommonMetadata:v47 originalContent:v30 generatedContent:v40];

    return v17;
  }

  return v17;
}

char *sub_100041020(void *a1)
{
  uint64_t v2 = sub_100008580(&qword_100093120);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v45 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v45 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v45 - v12;
  uint64_t v14 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v51 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v45 - v18;
  sub_10000C524(0, &qword_100093A68);
  id v20 = a1;
  uint64_t v21 = v52;
  uint64_t v22 = sub_1000436F0(v20);
  if (!v21)
  {
    uint64_t v52 = 0;
    unint64_t v47 = v19;
    uint64_t v48 = v8;
    id v46 = v17;
    BOOL v49 = v5;
    uint64_t v50 = v22;
    id v23 = v20;
    dispatch thunk of FBKSInteraction.originalContent.getter();

    uint64_t v24 = v51;
    uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
    unint64_t v17 = (char *)v14;
    if (v25(v13, 1, v14) == 1)
    {
      sub_10000A738((uint64_t)v13, &qword_100093120);
      id v26 = 0;
    }
    else
    {
      uint64_t v27 = v47;
      (*(void (**)(char *, char *, char *))(v24 + 32))(v47, v13, v17);
      sub_10000C524(0, &qword_100093A90);
      uint64_t v28 = (uint64_t)v11;
      uint64_t v29 = v27;
      (*(void (**)(uint64_t, char *, char *))(v24 + 16))(v28, v27, v17);
      (*(void (**)(uint64_t, void, uint64_t, char *))(v24 + 56))(v28, 0, 1, v17);
      uint64_t v30 = v52;
      uint64_t v31 = sub_100042C48(v28);
      if (v30)
      {

        (*(void (**)(char *, char *))(v24 + 8))(v27, v17);
        return v17;
      }
      id v26 = v31;
      uint64_t v52 = 0;
      (*(void (**)(char *, char *))(v24 + 8))(v29, v17);
    }
    id v32 = v23;
    uint64_t v33 = (uint64_t)v48;
    dispatch thunk of FBKSInteraction.generatedContent.getter();

    unsigned int v34 = v25((char *)v33, 1, (uint64_t)v17);
    uint64_t v35 = (uint64_t)v49;
    if (v34 == 1)
    {
      sub_10000A738(v33, &qword_100093120);
      id v36 = 0;
    }
    else
    {
      uint64_t v37 = v26;
      uint64_t v38 = v51;
      uint64_t v39 = v46;
      (*(void (**)(char *, uint64_t, char *))(v51 + 32))(v46, v33, v17);
      sub_10000C524(0, &qword_100093A88);
      (*(void (**)(uint64_t, char *, char *))(v38 + 16))(v35, v39, v17);
      (*(void (**)(uint64_t, void, uint64_t, char *))(v38 + 56))(v35, 0, 1, v17);
      uint64_t v40 = v52;
      uint64_t v41 = sub_100042690(v35);
      uint64_t v52 = v40;
      if (v40)
      {

        (*(void (**)(char *, char *))(v38 + 8))(v39, v17);
        return v17;
      }
      id v36 = v41;
      (*(void (**)(char *, char *))(v38 + 8))(v39, v17);
      id v26 = v37;
    }
    id v42 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    id v43 = v50;
    unint64_t v17 = (char *)[v42 initWithCommonMetadata:v43 originalContent:v26 generatedContent:v36];

    return v17;
  }

  return v17;
}

id sub_1000414F0(void *a1)
{
  uint64_t v2 = type metadata accessor for FBKSEvaluation.Action();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100008580((uint64_t *)&unk_100094200);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (void **)((char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for FBKSEvaluation.Subject();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void **)((char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v30 = a1;
  FBKSEvaluation.subject.getter();
  int v16 = (*(uint64_t (**)(void **, uint64_t))(v9 + 88))(v11, v8);
  if (v16 == enum case for FBKSEvaluation.Subject.id(_:))
  {
    (*(void (**)(void **, uint64_t))(v9 + 96))(v11, v8);
  }
  else
  {
    if (v16 != enum case for FBKSEvaluation.Subject.interaction(_:))
    {
      sub_10002A51C();
      swift_allocError();
      unsigned char *v21 = 12;
      swift_willThrow();

      uint64_t v22 = *(void (**)(void **, uint64_t))(v9 + 8);
      id v17 = (id)(v9 + 8);
      v22(v11, v8);
      return v17;
    }
    uint64_t v18 = *(void (**)(void **, uint64_t))(v9 + 96);
    id v17 = (id)(v9 + 96);
    v18(v11, v8);
    uint64_t v19 = *v11;
    dispatch thunk of FBKSInteraction.evaluationID.getter();
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12) == 1)
    {
      sub_10000A738((uint64_t)v7, (uint64_t *)&unk_100094200);
      sub_10002A51C();
      swift_allocError();
      *id v20 = 12;
      swift_willThrow();

      return v17;
    }

    uint64_t v11 = v7;
  }
  (*(void (**)(char *, void **, uint64_t))(v13 + 32))(v15, v11, v12);
  id v17 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v23.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v24 = v30;
  FBKSEvaluation.action.getter();
  uint64_t v25 = v29[1];
  uint64_t v26 = sub_100043F58((uint64_t)v4);
  uint64_t v27 = (void (**)(char *, uint64_t))(v13 + 8);
  if (v25)
  {
  }
  else
  {
    id v17 = [v17 initWithEvaluationUuid:v23.super.isa userResponse:v26];
  }
  (*v27)(v15, v12);
  return v17;
}

void (**sub_1000418E4(uint64_t a1))(char *, char *, uint64_t)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void (***)(char *, char *, uint64_t))(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v45 = v8;
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v44((char *)&v39 - v12, a1, v7);
  char v14 = sub_10004B380((uint64_t)v13);
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(a1, v7);
  }
  else
  {
    uint64_t v39 = v6;
    uint64_t v40 = v4;
    uint64_t v42 = v3;
    sub_10004B124(v14);
    id v15 = objc_allocWithZone((Class)BMCustomAttributesBasicValue);
    uint64_t v43 = a1;
    id v16 = v15;
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v18 = [v16 initWithBoolValue:0 int64Value:0 doubleValue:0 stringValue:v17];

    sub_100008580(&qword_100093990);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_10007B9E0;
    id v20 = objc_allocWithZone((Class)BMCustomAttributesNamedValue);
    id v21 = v18;
    NSString v22 = String._bridgeToObjectiveC()();
    id v23 = [v20 initWithName:v22 value:v21];

    id v41 = v21;
    *(void *)(v19 + 32) = v23;
    uint64_t v24 = v43;
    uint64_t v46 = v19;
    specialized Array._endMutation()();
    v44(v11, v24, v7);
    uint64_t v25 = v45;
    uint64_t v26 = v7;
    if ((*(unsigned int (**)(char *, uint64_t))(v45 + 88))(v11, v7) == enum case for FBKSInteraction.Content.file(_:))
    {
      (*(void (**)(char *, uint64_t))(v25 + 96))(v11, v7);
      uint64_t v27 = v25;
      uint64_t v28 = v40;
      uint64_t v29 = v39;
      v40[4](v39, v11, v42);
      URL.lastPathComponent.getter();
      id v30 = objc_allocWithZone((Class)BMCustomAttributesBasicValue);
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v32 = [v30 initWithBoolValue:0 int64Value:0 doubleValue:0 stringValue:v31];

      id v33 = objc_allocWithZone((Class)BMCustomAttributesNamedValue);
      id v34 = v32;
      NSString v35 = String._bridgeToObjectiveC()();
      [v33 initWithName:v35 value:v34];

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      ((void (*)(char *, uint64_t))v28[1])(v29, v42);
      uint64_t v24 = v43;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v7);
      uint64_t v27 = v25;
    }
    id v36 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    sub_10000C524(0, &qword_100093A60);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v4 = (void (**)(char *, char *, uint64_t))[v36 initWithAttributeDict:isa];

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v24, v26);
  }
  return v4;
}

id sub_100041E04()
{
  id v1 = [v0 attributeDict];
  sub_10000C524(0, &qword_100093A60);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = sub_100043DC4(v2, 0x61746E6573657270, 0xEC0000006E6F6974);
  swift_bridgeObjectRelease();
  id v4 = [v3 value];

  if (v4)
  {
    id v5 = [v4 stringValue];

    if (v5)
    {
      id v4 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

id sub_100041F1C()
{
  id v1 = [v0 attributeDict];
  sub_10000C524(0, &qword_100093A60);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = sub_100043DC4(v2, 0x656D614E656C6966, 0xE800000000000000);
  swift_bridgeObjectRelease();
  id v4 = [v3 value];

  if (v4)
  {
    id v5 = [v4 stringValue];

    if (v5)
    {
      id v4 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t *sub_10004202C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v3 - 8);
  uint64_t v40 = type metadata accessor for FBKSInteraction.StructuredValue();
  uint64_t v43 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100008580(&qword_100093120);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  id v15 = (uint64_t *)((char *)&v36 - v14);
  __chkstk_darwin(v13);
  NSString v17 = (char *)&v36 - v16;
  sub_10001DC8C(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    uint64_t v39 = a1;
    uint64_t v41 = v1;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v7, v8);
    uint64_t v19 = *(void (**)(uint64_t *, char *, uint64_t))(v9 + 16);
    v19(v15, v17, v8);
    int v20 = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 88))(v15, v8);
    uint64_t v38 = (void (*)(char *, char *, uint64_t))v19;
    if (v20 != enum case for FBKSInteraction.Content.text(_:)
      && v20 != enum case for FBKSInteraction.Content.sourceCode(_:))
    {
      if (v20 == enum case for FBKSInteraction.Content.structured(_:))
      {
        (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v15, v8);
        uint64_t v21 = v40;
        (*(void (**)(char *, uint64_t *, uint64_t))(v43 + 32))(v42, v15, v40);
        type metadata accessor for JSONEncoder();
        swift_allocObject();
        id v15 = (uint64_t *)JSONEncoder.init()();
        sub_100044168();
        uint64_t v22 = v41;
        uint64_t v23 = dispatch thunk of JSONEncoder.encode<A>(_:)();
        uint64_t v41 = v22;
        if (v22)
        {
          swift_release();
LABEL_8:
          sub_10000A738(v39, &qword_100093120);
          (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v21);
LABEL_15:
          (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
          return v15;
        }
        uint64_t v31 = v23;
        id v15 = v24;
        swift_release();
        static String.Encoding.utf8.getter();
        uint64_t v37 = v15;
        String.init(data:encoding:)();
        if (!v32)
        {
          sub_10002A51C();
          swift_allocError();
          *id v33 = 9;
          swift_willThrow();
          sub_1000185C0(v31, (unint64_t)v37);
          goto LABEL_8;
        }
        sub_1000185C0(v31, (unint64_t)v37);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v21);
LABEL_13:
        id v25 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        NSString v26 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v15 = (uint64_t *)sub_10000C524(0, &qword_100093A78);
        v38(v12, v17, v8);
        uint64_t v27 = v41;
        uint64_t v28 = sub_1000418E4((uint64_t)v12);
        if (!v27)
        {
          id v30 = v28;
          id v15 = (uint64_t *)[v25 initWithText:v26 metadata:v28];

          sub_10000A738(v39, &qword_100093120);
          (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
          return v15;
        }

        sub_10000A738(v39, &qword_100093120);
        goto LABEL_15;
      }
      if (v20 != enum case for FBKSInteraction.Content.notification(_:)
        && v20 != enum case for FBKSInteraction.Content.mailMessage(_:)
        && v20 != enum case for FBKSInteraction.Content.html(_:))
      {
        sub_10002A51C();
        swift_allocError();
        *id v34 = 1;
        swift_willThrow();
        sub_10000A738(v39, &qword_100093120);
        NSString v35 = *(void (**)(char *, uint64_t))(v9 + 8);
        v35(v17, v8);
        v35((char *)v15, v8);
        return v15;
      }
    }
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v15, v8);
    goto LABEL_13;
  }
  id v15 = &qword_100093120;
  sub_10000A738((uint64_t)v7, &qword_100093120);
  sub_10002A51C();
  swift_allocError();
  *id v18 = 3;
  swift_willThrow();
  sub_10000A738(a1, &qword_100093120);
  return v15;
}

uint64_t *sub_100042690(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100008580(&qword_100093120);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v44 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  id v15 = (uint64_t *)((char *)&v40 - v14);
  __chkstk_darwin(v13);
  NSString v17 = (char *)&v40 - v16;
  sub_10001DC8C(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    id v18 = &qword_100093120;
    sub_10000A738((uint64_t)v8, &qword_100093120);
    sub_10002A51C();
    swift_allocError();
    *uint64_t v19 = 3;
    swift_willThrow();
    sub_10000A738(a1, &qword_100093120);
  }
  else
  {
    uint64_t v43 = a1;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v8, v9);
    int v20 = *(void (**)(uint64_t *, char *, uint64_t))(v10 + 16);
    v20(v15, v17, v9);
    int v21 = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 88))(v15, v9);
    uint64_t v41 = (void (*)(char *, char *, uint64_t))v20;
    uint64_t v42 = v17;
    if (v21 == enum case for FBKSInteraction.Content.file(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v15, v9);
      uint64_t v22 = *(void (**)(char *, uint64_t *, uint64_t))(v3 + 32);
      id v18 = (uint64_t *)(v3 + 32);
      v22(v5, v15, v2);
      uint64_t v23 = v46;
      uint64_t v24 = Data.init(contentsOf:options:)();
      NSString v26 = (void (**)(char *, uint64_t))(v18 - 3);
      uint64_t v46 = v23;
      if (v23)
      {
        sub_10000A738(v43, &qword_100093120);
        (*v26)(v5, v2);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v42, v9);
        return v18;
      }
      uint64_t v29 = v24;
      unint64_t v30 = v25;
      (*v26)(v5, v2);
      uint64_t v27 = v29;
      unint64_t v28 = v30;
    }
    else
    {
      if (v21 != enum case for FBKSInteraction.Content.image(_:)
        && v21 != enum case for FBKSInteraction.Content.audio(_:)
        && v21 != enum case for FBKSInteraction.Content.handwriting(_:)
        && v21 != enum case for FBKSInteraction.Content.sketch(_:)
        && v21 != enum case for FBKSInteraction.Content.video(_:)
        && v21 != enum case for FBKSInteraction.Content.emoji(_:))
      {
        sub_10002A51C();
        swift_allocError();
        *uint64_t v39 = 1;
        swift_willThrow();
        sub_10000A738(v43, &qword_100093120);
        id v18 = *(uint64_t **)(v10 + 8);
        ((void (*)(char *, uint64_t))v18)(v17, v9);
        ((void (*)(uint64_t *, uint64_t))v18)(v15, v9);
        return v18;
      }
      (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v15, v9);
      uint64_t v27 = *v15;
      unint64_t v28 = v15[1];
    }
    id v45 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    v31.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v32 = v27;
    id v18 = (uint64_t *)sub_10000C524(0, &qword_100093A78);
    uint64_t v33 = (uint64_t)v44;
    id v34 = v42;
    v41(v44, v42, v9);
    uint64_t v35 = v46;
    uint64_t v36 = sub_1000418E4(v33);
    if (v35)
    {
      sub_1000185C0(v32, v28);
    }
    else
    {
      uint64_t v38 = v36;
      id v18 = (uint64_t *)[v45 initWithImageData:v31.super.isa metadata:v36];

      sub_1000185C0(v32, v28);
    }
    sub_10000A738(v43, &qword_100093120);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v34, v9);
  }
  return v18;
}

uint64_t *sub_100042C48(uint64_t a1)
{
  uint64_t v86 = type metadata accessor for URL();
  uint64_t v84 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v85 = (uint64_t *)((char *)&v73 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v3 - 8);
  int v82 = (uint64_t *)((char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v87 = type metadata accessor for FBKSInteraction.StructuredValue();
  uint64_t v83 = *(void *)(v87 - 8);
  uint64_t v5 = __chkstk_darwin(v87);
  uint64_t v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v73 - v8;
  uint64_t v10 = sub_100008580(&qword_100093120);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  NSString v17 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  int v20 = (uint64_t *)((char *)&v73 - v19);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v73 - v21;
  sub_10001DC8C(a1, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    uint64_t v23 = &qword_100093120;
    sub_10000A738((uint64_t)v12, &qword_100093120);
    sub_10002A51C();
    swift_allocError();
    *uint64_t v24 = 3;
    swift_willThrow();
    sub_10000A738(a1, &qword_100093120);
    return v23;
  }
  uint64_t v75 = v7;
  int v76 = v9;
  uint64_t v25 = v87;
  BOOL v79 = v17;
  uint64_t v80 = (uint64_t *)a1;
  uint64_t v26 = v88;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v22, v12, v13);
  uint64_t v27 = *(void (**)(uint64_t *, char *, uint64_t))(v14 + 16);
  unint64_t v81 = v22;
  v27(v20, v22, v13);
  int v28 = (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 88))(v20, v13);
  uint64_t v29 = v20;
  uint64_t v78 = (void (*)(uint64_t, char *, uint64_t))v27;
  if (v28 == enum case for FBKSInteraction.Content.file(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v20, v13);
    uint64_t v23 = v85;
    uint64_t v30 = v84 + 32;
    uint64_t v31 = v86;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v84 + 32))(v85, v29, v86);
    uint64_t v87 = URL.lastPathComponent.getter();
    uint64_t v32 = Data.init(contentsOf:options:)();
    id v34 = (void (**)(uint64_t *, uint64_t))(v30 - 24);
    if (v26)
    {
      swift_bridgeObjectRelease();
      sub_10000A738((uint64_t)v80, &qword_100093120);
      (*v34)(v23, v31);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v81, v13);
      return v23;
    }
    uint64_t v36 = v32;
    uint64_t v77 = v14;
    uint64_t v84 = v14 + 16;
    uint64_t v85 = (uint64_t *)v33;
    (*v34)(v23, v31);
    uint64_t v38 = v81;
    uint64_t v39 = (uint64_t)v79;
LABEL_12:
    uint64_t v35 = v13;
    uint64_t v37 = v26;
    goto LABEL_13;
  }
  uint64_t v84 = v14 + 16;
  uint64_t v77 = v14;
  if (v28 != enum case for FBKSInteraction.Content.image(_:))
  {
    uint64_t v40 = v81;
    uint64_t v39 = (uint64_t)v79;
    if (v28 != enum case for FBKSInteraction.Content.imageText(_:)
      && v28 != enum case for FBKSInteraction.Content.sketchText(_:))
    {
      if (v28 != enum case for FBKSInteraction.Content.imageStructured(_:))
      {
        if (v28 != enum case for FBKSInteraction.Content.sketchStructured(_:))
        {
          sub_10002A51C();
          uint64_t v23 = (uint64_t *)swift_allocError();
          *uint64_t v63 = 1;
          swift_willThrow();
          sub_10000A738((uint64_t)v80, &qword_100093120);
          id v64 = *(void (**)(char *, uint64_t))(v14 + 8);
          v64(v40, v13);
          v64((char *)v29, v13);
          return v23;
        }
        uint64_t v57 = *(void (**)(uint64_t *, uint64_t))(v14 + 96);
        uint64_t v74 = v13;
        v57(v20, v13);
        uint64_t v58 = *v20;
        uint64_t v85 = (uint64_t *)v20[1];
        uint64_t v86 = v58;
        uint64_t v59 = sub_100008580(&qword_100093A98);
        uint64_t v60 = v83;
        (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v75, (char *)v20 + *(int *)(v59 + 48), v25);
        type metadata accessor for JSONEncoder();
        swift_allocObject();
        uint64_t v23 = (uint64_t *)JSONEncoder.init()();
        sub_100044168();
        uint64_t v61 = dispatch thunk of JSONEncoder.encode<A>(_:)();
        uint64_t v37 = v26;
        if (v26)
        {
          swift_release();
        }
        else
        {
          uint64_t v68 = v61;
          unint64_t v69 = v62;
          swift_release();
          uint64_t v23 = v82;
          static String.Encoding.utf8.getter();
          String.init(data:encoding:)();
          if (v70)
          {
            sub_1000185C0(v68, v69);
            (*(void (**)(char *, uint64_t))(v60 + 8))(v75, v25);
            uint64_t v39 = (uint64_t)v79;
            uint64_t v38 = v40;
            uint64_t v36 = v86;
            uint64_t v35 = v74;
            goto LABEL_13;
          }
          sub_10002A51C();
          swift_allocError();
          unsigned char *v72 = 9;
          swift_willThrow();
          sub_1000185C0(v68, v69);
        }
        sub_1000185C0(v86, (unint64_t)v85);
        sub_10000A738((uint64_t)v80, &qword_100093120);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v75, v25);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v40, v74);
        return v23;
      }
      BOOL v49 = *(void (**)(uint64_t *, uint64_t))(v14 + 96);
      uint64_t v74 = v13;
      v49(v20, v13);
      unint64_t v50 = v20[1];
      uint64_t v86 = *v20;
      sub_100008580(&qword_100093AA0);
      uint64_t v51 = v25;
      uint64_t v52 = v76;
      (*(void (**)(void))(v83 + 32))();
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      sub_100044168();
      uint64_t v53 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      uint64_t v37 = v26;
      if (v26)
      {
        swift_release();
        uint64_t v23 = v80;
        uint64_t v55 = v40;
      }
      else
      {
        uint64_t v65 = v53;
        unint64_t v66 = v54;
        swift_release();
        static String.Encoding.utf8.getter();
        String.init(data:encoding:)();
        if (v67)
        {
          sub_1000185C0(v65, v66);
          (*(void (**)(char *, uint64_t))(v83 + 8))(v52, v51);
          uint64_t v36 = v86;
          uint64_t v39 = (uint64_t)v79;
          uint64_t v35 = v74;
          uint64_t v85 = (uint64_t *)v50;
          uint64_t v38 = v81;
          goto LABEL_13;
        }
        sub_10002A51C();
        swift_allocError();
        *uint64_t v71 = 9;
        swift_willThrow();
        sub_1000185C0(v65, v66);
        uint64_t v23 = v80;
        uint64_t v55 = v81;
      }
      uint64_t v56 = v83;
      sub_1000185C0(v86, v50);
      sub_10000A738((uint64_t)v23, &qword_100093120);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v52, v51);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v55, v74);
      return v23;
    }
    (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v20, v13);
    uint64_t v41 = *v20;
    uint64_t v85 = (uint64_t *)v20[1];
    uint64_t v38 = v40;
    uint64_t v36 = v41;
    goto LABEL_12;
  }
  uint64_t v35 = v13;
  (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v20, v13);
  uint64_t v36 = *v20;
  uint64_t v85 = (uint64_t *)v20[1];
  uint64_t v37 = v26;
  uint64_t v38 = v81;
  uint64_t v39 = (uint64_t)v79;
LABEL_13:
  id v42 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v44 = v36;
  v45.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v23 = (uint64_t *)sub_10000C524(0, &qword_100093A78);
  v78(v39, v38, v35);
  uint64_t v46 = sub_1000418E4(v39);
  if (v37)
  {
    sub_1000185C0(v44, (unint64_t)v85);
  }
  else
  {
    uint64_t v48 = v46;
    uint64_t v23 = (uint64_t *)[v42 initWithText:v43 imageData:v45.super.isa metadata:v46];

    sub_1000185C0(v44, (unint64_t)v85);
  }
  sub_10000A738((uint64_t)v80, &qword_100093120);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v38, v35);
  return v23;
}

void (**sub_1000436F0(void *a1))(char *, uint64_t)
{
  uint64_t v49 = type metadata accessor for FBKSInteraction.FeatureDomain();
  uint64_t v2 = *(void (***)(char *, uint64_t))(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100008580((uint64_t *)&unk_100094200);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v46 - v9;
  id v11 = a1;
  dispatch thunk of FBKSInteraction.donationID.getter();

  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v48 = *(void **)(v12 - 8);
  Class v50 = (Class)v48[6];
  int v13 = ((uint64_t (*)(char *, uint64_t, uint64_t))v50)(v10, 1, v12);
  sub_10000A738((uint64_t)v10, (uint64_t *)&unk_100094200);
  if (v13 == 1)
  {
    sub_10002A51C();
    swift_allocError();
    *uint64_t v14 = 12;
    swift_willThrow();
  }
  else
  {
    unint64_t v47 = v2;
    id v15 = v11;
    uint64_t v16 = dispatch thunk of FBKSInteraction.auxiliaryMetrics.getter();

    if (v16)
    {
      uint64_t v17 = v51;
      sub_100040844(v16);
      uint64_t v51 = v17;
      swift_bridgeObjectRelease();
    }
    id v18 = objc_allocWithZone((Class)BMCustomAttributes);
    sub_10000C524(0, &qword_100093A60);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v20 = [v18 initWithAttributeDict:isa];

    uint64_t v52 = _swiftEmptyArrayStorage;
    id v21 = v15;
    uint64_t v22 = dispatch thunk of FBKSInteraction.prefillQuestions.getter();

    if (v22)
    {
      __chkstk_darwin(v23);
      uint64_t v24 = v51;
      sub_1000290A0(v22, (void (*)(char *, uint64_t))sub_1000441C0);
      uint64_t v51 = v24;
      swift_bridgeObjectRelease();
    }
    uint64_t v25 = v47;
    id v26 = v21;
    dispatch thunk of FBKSInteraction.featureDomain.getter();

    FBKSInteraction.FeatureDomain.description.getter();
    v25[1](v4, v49);
    uint64_t v49 = (uint64_t)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v27 = v26;
    dispatch thunk of FBKSInteraction.bundleID.getter();
    uint64_t v29 = v28;

    if (v29)
    {
      uint64_t v30 = (void (**)(char *, uint64_t))String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v30 = 0;
    }
    id v31 = v27;
    dispatch thunk of FBKSInteraction.donationID.getter();

    int v32 = ((uint64_t (*)(char *, uint64_t, uint64_t))v50)(v8, 1, v12);
    unint64_t v47 = v30;
    if (v32 == 1)
    {
      Class v46 = 0;
    }
    else
    {
      Class v46 = UUID._bridgeToObjectiveC()().super.isa;
      ((void (*)(char *, uint64_t))v48[1])(v8, v12);
    }
    id v33 = v31;
    dispatch thunk of FBKSInteraction.isHighPriority.getter();

    Class v50 = Bool._bridgeToObjectiveC()().super.super.isa;
    id v34 = v33;
    dispatch thunk of FBKSInteraction.diagnostics.getter();
    uint64_t v36 = v35;
    uint64_t v48 = v34;

    if (v36)
    {
      NSString v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v37 = 0;
    }
    id v38 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    sub_10000C524(0, &qword_100093A58);
    swift_bridgeObjectRetain();
    Class v39 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v40 = v20;
    id v42 = (void *)v49;
    Class v41 = v50;
    Class v43 = v46;
    uint64_t v44 = v47;
    uint64_t v2 = (void (**)(char *, uint64_t))[v38 initWithFeatureDomain:v49 bundleId:v47 evaluationUuid:v46 isHighPriority:v50 diagnostics:v37 prefilledQuestions:v39 auxiliaryAttributes:v40 systemBuild:0 modelVersion:0];
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t sub_100043C3C(uint64_t a1, uint64_t a2, void *a3)
{
  FBKSForm.Question.stringValue.getter();
  id v4 = objc_allocWithZone((Class)BMEvaluationCommonMetadataQuestionAnswer);
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 initWithQuestion:v5 answer:isa];

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t sub_100043D3C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void *sub_100043DC4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v6);
      unint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      id v10 = [v7 name];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v8;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_18;
        }
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_21:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100043F58(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FBKSEvaluation.Action();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for FBKSEvaluation.Action.thumbsUp(_:))
  {
    uint64_t v5 = 2;
  }
  else if (v6 == enum case for FBKSEvaluation.Action.thumbsDown(_:))
  {
    uint64_t v5 = 3;
  }
  else if (v6 == enum case for FBKSEvaluation.Action.reportConcern(_:))
  {
    uint64_t v5 = 4;
  }
  else if (v6 == enum case for FBKSEvaluation.Action.skip(_:))
  {
    uint64_t v5 = 5;
  }
  else if (v6 == enum case for FBKSEvaluation.Action.invalidData(_:))
  {
    uint64_t v5 = 6;
  }
  else
  {
    if (v6 != enum case for FBKSEvaluation.Action.contentDeleted(_:))
    {
      sub_10002A51C();
      swift_allocError();
      *unint64_t v8 = 11;
      swift_willThrow();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v9(a1, v2);
      v9(v5, v2);
      return v5;
    }
    uint64_t v5 = 7;
  }
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return v5;
}

unint64_t sub_100044168()
{
  unint64_t result = qword_100093A80;
  if (!qword_100093A80)
  {
    type metadata accessor for FBKSInteraction.StructuredValue();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100093A80);
  }
  return result;
}

uint64_t sub_1000441C0(uint64_t a1, uint64_t a2)
{
  return sub_100043C3C(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1000441C8()
{
  type metadata accessor for LongTermPersistence();
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = v0 + OBJC_IVAR____TtC9feedbackd19LongTermPersistence____lazy_storage___feedbackdDirectory;
  uint64_t v2 = sub_100008580(&qword_100093E40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  qword_1000964D8 = v0;
  return result;
}

uint64_t sub_100044258()
{
  uint64_t v1 = sub_100008580(&qword_100093E40);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092AF0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100006040(v8, (uint64_t)SharedLog);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v25 = v0;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v13 = (void *)swift_slowAlloc();
    uint64_t v24 = v7;
    id v27 = v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    uint64_t v26 = sub_100007E60(0x6C416574656C6564, 0xEF2928617461446CLL, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s", v12, 0xCu);
    swift_arrayDestroy();
    id v7 = v24;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_10004718C(0, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1) {
    return sub_10000A738((uint64_t)v3, &qword_100093E40);
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  id v15 = [self defaultManager];
  URL._bridgeToObjectiveC()(v16);
  id v18 = v17;
  id v27 = 0;
  unsigned int v19 = [v15 removeItemAtURL:v17 error:&v27];

  if (v19)
  {
    id v20 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    id v21 = v27;
    return v20(v7, v4);
  }
  else
  {
    id v22 = v27;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

void sub_100044608(void *a1, uint64_t (*a2)(char *, uint64_t, uint64_t))
{
  uint64_t v3 = v2;
  id v42 = a1;
  uint64_t v5 = sub_100008580(&qword_100093E40);
  __chkstk_darwin(v5 - 8);
  id v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v40 = (uint64_t)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v37 - v12;
  if (qword_100092AF0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_100006040(v14, (uint64_t)SharedLog);
  swift_bridgeObjectRetain_n();
  uint64_t v41 = v15;
  char v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v39 = v3;
    uint64_t v19 = v18;
    NSString v37 = (void *)swift_slowAlloc();
    id v44 = v37;
    *(_DWORD *)uint64_t v19 = 136446466;
    uint64_t v43 = sub_100007E60(0xD00000000000002BLL, 0x800000010007E220, (uint64_t *)&v44);
    id v38 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_100007E60((uint64_t)v42, (unint64_t)a2, (uint64_t *)&v44);
    id v7 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s [%{public}s]", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v20 = (void *)static FBKSError.xpcSafeNSError(error:)();
  id v21 = self;
  id v44 = 0;
  id v22 = [v21 archivedDataWithRootObject:v20 requiringSecureCoding:1 error:&v44];
  id v23 = v44;
  if (v22)
  {
    uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;

    sub_1000479F0(v42, a2, (void *)0x73726F727265, 0xE600000000000000, 1, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {

      sub_1000185C0(v24, v26);
      sub_10000A738((uint64_t)v7, &qword_100093E40);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v7, v8);
      uint64_t v29 = v40;
      sub_100044C5C(v40);
      Data.write(to:options:)();
      sub_1000185C0(v24, v26);

      uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v36(v29, v8);
      v36((uint64_t)v13, v8);
    }
  }
  else
  {
    id v27 = v23;
    uint64_t v28 = _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      id v33 = (uint8_t *)swift_slowAlloc();
      id v44 = (id)swift_slowAlloc();
      *(_DWORD *)id v33 = 136446210;
      uint64_t v43 = v28;
      swift_errorRetain();
      sub_100008580(&qword_100093940);
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v43 = sub_100007E60(v34, v35, (uint64_t *)&v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to save failure to collect: %{public}s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_100044C5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v21 = a1;
  uint64_t v1 = type metadata accessor for URL.DirectoryHint();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [objc_allocWithZone((Class)NSISO8601DateFormatter) init];
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  id v14 = [v12 stringFromDate:isa];

  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  uint64_t v22 = v15;
  uint64_t v23 = v17;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for URL.DirectoryHint.notDirectory(_:), v1);
  sub_10000A8D8();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v20);
}

void sub_100044F30(void *a1, uint64_t (*a2)(char *, uint64_t, uint64_t), void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for URL.DirectoryHint();
  uint64_t v52 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v51 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008580(&qword_100093E40);
  __chkstk_darwin(v10 - 8);
  uint64_t v55 = (uint64_t)v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  Class v50 = (char *)v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v57 = (char *)v48 - v17;
  __chkstk_darwin(v16);
  uint64_t v56 = (char *)v48 - v18;
  if (qword_100092AF0 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = sub_100006040(v19, (uint64_t)SharedLog);
  swift_bridgeObjectRetain_n();
  uint64_t v54 = v20;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    unint64_t v53 = (unint64_t)a1;
    uint64_t v24 = v23;
    unint64_t v25 = (void *)swift_slowAlloc();
    v48[1] = v4;
    v59[0] = v25;
    *(_DWORD *)uint64_t v24 = 136446722;
    uint64_t v49 = a3;
    uint64_t v58 = sub_100007E60(0xD000000000000039, 0x800000010007E1E0, (uint64_t *)v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v58 = sub_100007E60(v53, (unint64_t)a2, (uint64_t *)v59);
    a3 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 22) = 2050;
    uint64_t v58 = (uint64_t)a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s [%{public}s] id: [%{public}ld] ", (uint8_t *)v24, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = (void *)v53;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  id v26 = sub_10000C3A8((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  id v27 = self;
  v59[0] = 0;
  id v28 = [v27 archivedDataWithRootObject:v26 requiringSecureCoding:1 error:v59];
  id v29 = v59[0];
  if (v28)
  {
    uint64_t v49 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v53 = v30;

    uint64_t v31 = v55;
    sub_1000479F0(a1, a2, (void *)0x657474696D627573, 0xE900000000000064, 1, v55);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v31, 1, v12) == 1)
    {

      sub_1000185C0((uint64_t)v49, v53);
      sub_10000A738(v31, &qword_100093E40);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v56, v31, v12);
      v59[0] = a3;
      v59[0] = (id)dispatch thunk of CustomStringConvertible.description.getter();
      v59[1] = v34;
      unint64_t v35 = v51;
      uint64_t v36 = v52;
      uint64_t v37 = v8;
      (*(void (**)(char *, void, uint64_t))(v52 + 104))(v51, enum case for URL.DirectoryHint.notDirectory(_:), v8);
      sub_10000A8D8();
      id v38 = v50;
      URL.appending<A>(path:directoryHint:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v37);
      swift_bridgeObjectRelease();
      URL.appendingPathExtension(_:)();
      uint64_t v39 = *(void (**)(char *, uint64_t))(v13 + 8);
      v39(v38, v12);
      uint64_t v40 = (uint64_t)v49;
      unint64_t v41 = v53;
      Data.write(to:options:)();
      sub_1000185C0(v40, v41);

      v39(v57, v12);
      v39(v56, v12);
    }
  }
  else
  {
    int v32 = v29;
    uint64_t v33 = _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    id v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v42, v43))
    {
      NSData v45 = (uint8_t *)swift_slowAlloc();
      v59[0] = (id)swift_slowAlloc();
      *(_DWORD *)NSData v45 = 136446210;
      uint64_t v58 = v33;
      swift_errorRetain();
      sub_100008580(&qword_100093940);
      uint64_t v46 = String.init<A>(describing:)();
      uint64_t v58 = sub_100007E60(v46, v47, (uint64_t *)v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Failed to save feedback: %{public}s", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_100045730(void *a1, uint64_t (*a2)(char *, uint64_t, uint64_t))
{
  uint64_t v4 = sub_100008580(&qword_100093E40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v23 - v12;
  if (qword_100092AF0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_100006040(v14, (uint64_t)SharedLog);
  swift_bridgeObjectRetain_n();
  v23[1] = v15;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    id v26 = a1;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    unint64_t v25 = v11;
    v28[0] = v20;
    *(_DWORD *)uint64_t v19 = 136446466;
    uint64_t v24 = v8;
    v23[0] = v7;
    uint64_t v27 = sub_100007E60(0xD000000000000025, 0x800000010007E1B0, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_100007E60((uint64_t)v26, (unint64_t)a2, v28);
    uint64_t v7 = v23[0];
    uint64_t v8 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s [%{public}s]", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    uint64_t v11 = v25;
    swift_slowDealloc();
    a1 = v26;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_1000479F0(a1, a2, (void *)0x64656E696C636564, 0xE800000000000000, 1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return sub_10000A738((uint64_t)v6, &qword_100093E40);
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  sub_100044C5C((uint64_t)v11);
  Data.write(to:options:)();
  os_log_type_t v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v11, v7);
  return ((uint64_t (*)(char *, uint64_t))v22)(v13, v7);
}

void *sub_100045C68(void *a1, uint64_t (*a2)(char *, uint64_t, uint64_t))
{
  uint64_t v4 = sub_100008580(&qword_100093BF0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = (void **)((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_100050A18(a1, a2, (void *)0x73726F727265, 0xE600000000000000);
  uint64_t v9 = v8[2];
  if (v9)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v10 = (uint64_t)v8 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v11 = *(void *)(v5 + 72);
    do
    {
      sub_100018820(v10, (uint64_t)v7, &qword_100093BF0);
      sub_100045E2C(v7, &v15);
      sub_10000A738((uint64_t)v7, &qword_100093BF0);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v10 += v11;
      --v9;
    }
    while (v9);
    uint64_t v12 = v16;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return &_swiftEmptyArrayStorage;
  }
  return v12;
}

void sub_100045E2C(void **a1@<X0>, uint64_t *a2@<X8>)
{
  id v38 = a2;
  uint64_t v3 = type metadata accessor for Date();
  __chkstk_darwin(v3 - 8);
  uint64_t v37 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100008580(&qword_100093BF0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (void **)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = v6;
  uint64_t v36 = a1;
  uint64_t v9 = *(int *)(v6 + 48);
  uint64_t v10 = (char *)v8 + v9;
  uint64_t v11 = (char *)a1 + v9;
  uint64_t v12 = *a1;
  *uint64_t v8 = v12;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v34 = v11;
  int v32 = v15;
  v15(v10, v11, v13);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v14 + 8);
  id v17 = v12;
  uint64_t v33 = v16;
  v16(v10, v13);
  id v18 = [v17 userInfo];
  uint64_t v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v19 + 16) && (unint64_t v22 = sub_100025B84(v20, v21), (v23 & 1) != 0))
  {
    sub_10000A7E0(*(void *)(v19 + 56) + 32 * v22, (uint64_t)&v41);
  }
  else
  {
    long long v41 = 0u;
    long long v42 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v42 + 1))
  {
    sub_10000A738((uint64_t)&v41, (uint64_t *)&unk_100093910);
    goto LABEL_9;
  }
  if (!swift_dynamicCast())
  {
LABEL_9:
    uint64_t v30 = 0x6E776F6E6B6E55;
    unint64_t v31 = 0xE700000000000000;
    goto LABEL_10;
  }
  uint64_t v30 = v39;
  unint64_t v31 = v40;
LABEL_10:
  [v17 code];
  id v24 = [v17 domain];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v25 = v34;
  id v26 = (char *)v8 + *(int *)(v35 + 48);
  *uint64_t v8 = *v36;
  v32(v26, v25, v13);
  sub_100046174(v37);
  v33(v26, v13);
  id v27 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaignError());
  uint64_t v28 = FBKSCampaignError.init(code:domain:errorDescription:date:)();

  *id v38 = v28;
}

void sub_100046174(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v51 = a1;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v47 = *(void *)(v3 - 8);
  uint64_t v48 = v3;
  __chkstk_darwin(v3);
  uint64_t v49 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100008580((uint64_t *)&unk_100093950);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v47 - v13;
  *(void *)&long long v56 = URL.lastPathComponent.getter();
  *((void *)&v56 + 1) = v15;
  uint64_t v54 = 0x7473696C702ELL;
  unint64_t v55 = 0xE600000000000000;
  uint64_t v52 = 0;
  unint64_t v53 = 0xE000000000000000;
  sub_10000A8D8();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  id v16 = [objc_allocWithZone((Class)NSISO8601DateFormatter) init];
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v50 = v16;
  id v18 = [v16 dateFromString:v17];

  if (v18)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v19(v14, v8, v5);
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v20(v14, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5) != 1)
    {

      v19(v51, v14, v5);
      return;
    }
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v20(v14, 1, 1, v5);
  }
  sub_10000A738((uint64_t)v14, (uint64_t *)&unk_100093950);
  id v21 = [self defaultManager];
  URL.path.getter();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)&long long v56 = 0;
  id v23 = [v21 attributesOfItemAtPath:v22 error:&v56];

  id v24 = (void *)v56;
  if (v23)
  {
    type metadata accessor for FileAttributeKey(0);
    sub_1000486DC(&qword_100092E10, type metadata accessor for FileAttributeKey);
    uint64_t v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v26 = v24;

    if (*(void *)(v25 + 16))
    {
      id v27 = NSFileCreationDate;
      unint64_t v28 = sub_100025D48((uint64_t)v27);
      uint64_t v29 = v49;
      if (v30)
      {
        sub_10000A7E0(*(void *)(v25 + 56) + 32 * v28, (uint64_t)&v56);
      }
      else
      {
        long long v56 = 0u;
        long long v57 = 0u;
      }
    }
    else
    {
      long long v56 = 0u;
      long long v57 = 0u;
      uint64_t v29 = v49;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v57 + 1))
    {
      int v38 = swift_dynamicCast();
      v20(v12, v38 ^ 1u, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) != 1)
      {

        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v51, v12, v5);
        return;
      }
    }
    else
    {
      sub_10000A738((uint64_t)&v56, (uint64_t *)&unk_100093910);
      v20(v12, 1, 1, v5);
    }
    sub_10000A738((uint64_t)v12, (uint64_t *)&unk_100093950);
    if (qword_100092AF0 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100006040(v39, (uint64_t)SharedLog);
    uint64_t v41 = v47;
    uint64_t v40 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v29, v2, v48);
    long long v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      id v44 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v56 = swift_slowAlloc();
      *(_DWORD *)id v44 = 136446210;
      sub_1000486DC(&qword_100093BF8, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v54 = sub_100007E60(v45, v46, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v40);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Error getting date from url [%{public}s]", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v40);
    }

    Date.init()();
  }
  else
  {
    id v31 = (id)v56;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100092AF0 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100006040(v32, (uint64_t)SharedLog);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 138543362;
      swift_errorRetain();
      uint64_t v37 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&long long v56 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v36 = v37;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Error getting date from url [%{public}@]", v35, 0xCu);
      sub_100008580(&qword_100092B40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    Date.init()();
    swift_errorRelease();
  }
}

uint64_t sub_100046A80(void *a1, uint64_t (*a2)(char *, uint64_t, uint64_t))
{
  uint64_t v4 = sub_100008580(&qword_100093E40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v36 - v12;
  sub_1000479F0(a1, a2, (void *)0x64656E696C636564, 0xE800000000000000, 0, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10000A738((uint64_t)v6, &qword_100093E40);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  uint64_t v14 = self;
  id v15 = [v14 defaultManager];
  id v16 = [v14 defaultManager];
  sub_100008580(&qword_100093BE8);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_10007B630;
  *(void *)(v17 + 32) = NSURLIsDirectoryKey;
  id v18 = NSURLIsDirectoryKey;
  uint64_t v19 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

  swift_bridgeObjectRelease();
  if (!v19)
  {
    if (qword_100092AF0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100006040(v27, (uint64_t)SharedLog);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      char v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)char v30 = 136446210;
      v36[1] = v30 + 4;
      uint64_t v31 = URL.path.getter();
      _OWORD v36[2] = sub_100007E60(v31, v32, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v33 = *(void (**)(char *, uint64_t))(v8 + 8);
      v33(v11, v7);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to read directory [%{public}s]", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v33(v13, v7);
    }
    else
    {

      os_log_type_t v34 = *(void (**)(char *, uint64_t))(v8 + 8);
      v34(v11, v7);
      v34(v13, v7);
    }
    return 0;
  }
  id v20 = [v19 allObjects];
  uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v22 = *(void *)(v21 + 16);
  swift_bridgeObjectRelease();
  if (qword_100092AF0 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100006040(v23, (uint64_t)SharedLog);
  id v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    id v26 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v26 = 134349056;
    uint64_t v37 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Declined count [%{public}ld]", v26, 0xCu);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  return v22;
}

uint64_t sub_100046FCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100008580(&qword_100093BE0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v13[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC9feedbackd19LongTermPersistence____lazy_storage___feedbackdDirectory;
  swift_beginAccess();
  sub_100018820(v9, (uint64_t)v8, &qword_100093BE0);
  uint64_t v10 = sub_100008580(&qword_100093E40);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return sub_100048674((uint64_t)v8, a1);
  }
  sub_10000A738((uint64_t)v8, &qword_100093BE0);
  sub_10004718C(1, a1);
  sub_100018820(a1, (uint64_t)v6, &qword_100093E40);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  sub_10004860C((uint64_t)v6, v9);
  return swift_endAccess();
}

uint64_t sub_10004718C@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  LODWORD(v64) = a1;
  uint64_t v67 = a2;
  uint64_t v2 = type metadata accessor for URL.DirectoryHint();
  uint64_t v63 = *(uint8_t **)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100008580(&qword_100093E40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v65 = (char *)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v61 - v13;
  __chkstk_darwin(v12);
  unint64_t v66 = (char *)v61 - v15;
  id v16 = self;
  id v17 = [v16 defaultManager];
  static Strings.fbaGroupIdentifier.getter();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v19 = [v17 containerURLForSecurityApplicationGroupIdentifier:v18];

  if (!v19)
  {
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v23(v7, 1, 1, v8);
    goto LABEL_5;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v21 = v9 + 32;
  id v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v20(v7, v14, v8);
  unint64_t v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v62(v7, 0, 1, v8);
  uint64_t v22 = v9;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    uint64_t v23 = v62;
LABEL_5:
    sub_10000A738((uint64_t)v7, &qword_100093E40);
    if (qword_100092AF0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100006040(v24, (uint64_t)SharedLog);
    os_log_type_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to lookup container directory", v27, 2u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23)(v67, 1, 1, v8);
  }
  v61[2] = v9 + 56;
  os_log_type_t v29 = v66;
  v20(v66, v7, v8);
  v69[0] = (id)static Strings.Daemon.directoryName.getter();
  v69[1] = v30;
  v61[1] = v21;
  uint64_t v31 = v63;
  (*((void (**)(char *, void, uint64_t))v63 + 13))(v4, enum case for URL.DirectoryHint.isDirectory(_:), v2);
  sub_10000A8D8();
  unint64_t v32 = (void (*)(uint64_t, char *, uint64_t))v20;
  uint64_t v33 = v65;
  URL.appending<A>(path:directoryHint:)();
  (*((void (**)(char *, uint64_t))v31 + 1))(v4, v2);
  swift_bridgeObjectRelease();
  if ((v64 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v29, v8);
    uint64_t v43 = v67;
    v32(v67, v33, v8);
    uint64_t v41 = v43;
    uint64_t v42 = v8;
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v62)(v41, 0, 1, v42);
  }
  id v64 = v32;
  uint64_t v34 = v8;
  uint64_t v35 = v22;
  id v36 = [v16 defaultManager];
  URL.path.getter();
  uint64_t v37 = v33;
  NSString v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v39 = [v36 fileExistsAtPath:v38 isDirectory:0];

  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v66, v34);
    uint64_t v40 = v67;
    v64(v67, v37, v34);
    uint64_t v41 = v40;
    uint64_t v42 = v34;
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v62)(v41, 0, 1, v42);
  }
  id v44 = [v16 defaultManager];
  URL._bridgeToObjectiveC()(v45);
  uint64_t v47 = v46;
  v69[0] = 0;
  unsigned int v48 = [v44 createDirectoryAtURL:v46 withIntermediateDirectories:1 attributes:0 error:v69];

  if (v48)
  {
    uint64_t v49 = *(void (**)(char *, uint64_t))(v35 + 8);
    id v50 = v69[0];
    v49(v66, v34);
  }
  else
  {
    id v51 = v69[0];
    uint64_t v52 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100092AF0 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    sub_100006040(v53, (uint64_t)SharedLog);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v54, v55))
    {
      long long v56 = (uint8_t *)swift_slowAlloc();
      v69[0] = (id)swift_slowAlloc();
      *(_DWORD *)long long v56 = 136446210;
      uint64_t v63 = v56 + 4;
      uint64_t v68 = v52;
      swift_errorRetain();
      sub_100008580(&qword_100093940);
      uint64_t v57 = String.init<A>(describing:)();
      uint64_t v68 = sub_100007E60(v57, v58, (uint64_t *)v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Failed to create feedbackd directory: %{public}s", v56, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v66, v34);
  }
  uint64_t v59 = v62;
  uint64_t v60 = v67;
  v64(v67, v65, v34);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v59)(v60, 0, 1, v34);
}

uint64_t sub_1000479F0@<X0>(void *a1@<X0>, uint64_t (*a2)(char *, uint64_t, uint64_t)@<X1>, void *a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v70 = a5;
  uint64_t v77 = a3;
  unint64_t v78 = a4;
  unint64_t v72 = a1;
  uint64_t v73 = a2;
  uint64_t v79 = a6;
  uint64_t v74 = type metadata accessor for URL.DirectoryHint();
  uint64_t v6 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v71 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v75 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v66 - v13;
  __chkstk_darwin(v12);
  int v76 = (char *)&v66 - v15;
  uint64_t v16 = sub_100008580(&qword_100093E40);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  id v19 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v66 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v66 - v23;
  sub_100046FCC((uint64_t)v22);
  os_log_type_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v26 = v25(v22, 1, v8);
  uint64_t v80 = v24;
  uint64_t v81 = v9;
  if (v26)
  {
    sub_10000A738((uint64_t)v22, &qword_100093E40);
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v27(v24, 1, 1, v8);
  }
  else
  {
    unint64_t v28 = v14;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v14, v22, v8);
    sub_10000A738((uint64_t)v22, &qword_100093E40);
    os_log_type_t v29 = v71;
    uint64_t v30 = v74;
    id v83 = v72;
    uint64_t v84 = (uint64_t (*)(void, void, void))v73;
    LODWORD(v72) = enum case for URL.DirectoryHint.isDirectory(_:);
    unint64_t v69 = *(void (**)(char *))(v6 + 104);
    v69(v71);
    unint64_t v68 = sub_10000A8D8();
    uint64_t v73 = v25;
    URL.appending<A>(path:directoryHint:)();
    uint64_t v67 = *(void (**)(char *, uint64_t))(v6 + 8);
    v67(v29, v30);
    unint64_t v66 = *(void (**)(char *, uint64_t))(v81 + 8);
    v66(v28, v8);
    id v83 = v77;
    uint64_t v84 = (uint64_t (*)(void, void, void))v78;
    ((void (*)(char *, void, uint64_t))v69)(v29, v72, v30);
    uint64_t v9 = v81;
    uint64_t v31 = v76;
    URL.appending<A>(path:directoryHint:)();
    os_log_type_t v25 = v73;
    v67(v29, v30);
    v66(v31, v8);
    uint64_t v24 = v80;
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v27(v80, 0, 1, v8);
  }
  sub_100018820((uint64_t)v24, (uint64_t)v19, &qword_100093E40);
  if (v25(v19, 1, v8) == 1)
  {
    sub_10000A738((uint64_t)v19, &qword_100093E40);
    if (qword_100092AF0 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100006040(v32, (uint64_t)SharedLog);
    unint64_t v33 = v78;
    swift_bridgeObjectRetain_n();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    uint64_t v37 = (uint64_t)v77;
    if (v36)
    {
      NSString v38 = (uint8_t *)swift_slowAlloc();
      id v83 = (id)swift_slowAlloc();
      *(_DWORD *)NSString v38 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v82 = sub_100007E60(v37, v33, (uint64_t *)&v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to get [%{public}s] directory", v38, 0xCu);
      uint64_t v39 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10000A738((uint64_t)v80, &qword_100093E40);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      sub_10000A738((uint64_t)v80, &qword_100093E40);
      uint64_t v39 = 1;
    }
    uint64_t v46 = v79;
  }
  else
  {
    uint64_t v40 = *(void (**)(void))(v9 + 32);
    uint64_t v41 = v75;
    v40();
    uint64_t v42 = self;
    id v43 = [v42 defaultManager];
    URL.path.getter();
    NSString v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned int v45 = [v43 fileExistsAtPath:v44 isDirectory:0];

    if (!v45)
    {
      int v76 = (char *)v8;
      if (v70)
      {
        if (qword_100092AF0 != -1) {
          swift_once();
        }
        uint64_t v47 = type metadata accessor for Logger();
        sub_100006040(v47, (uint64_t)SharedLog);
        unsigned int v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v48, v49))
        {
          id v50 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v50 = 0;
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "URL does not exist. Will create one", v50, 2u);
          swift_slowDealloc();
        }

        id v51 = [v42 defaultManager];
        URL.path.getter();
        NSString v52 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v83 = 0;
        unsigned int v53 = [v51 createDirectoryAtPath:v52 withIntermediateDirectories:1 attributes:0 error:&v83];

        if (v53)
        {
          id v54 = v83;
          sub_10000A738((uint64_t)v80, &qword_100093E40);
          uint64_t v46 = v79;
          uint64_t v8 = (uint64_t)v76;
          ((void (*)(uint64_t, char *, char *))v40)(v79, v41, v76);
          uint64_t v39 = 0;
          return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v27)(v46, v39, 1, v8);
        }
        id v57 = v83;
        uint64_t v58 = _convertNSErrorToError(_:)();

        swift_willThrow();
        unint64_t v59 = v78;
        swift_bridgeObjectRetain();
        swift_errorRetain();
        swift_bridgeObjectRetain();
        swift_errorRetain();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = swift_slowAlloc();
          id v83 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = 136446466;
          swift_bridgeObjectRetain();
          uint64_t v82 = sub_100007E60((uint64_t)v77, v59, (uint64_t *)&v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v62 + 12) = 2082;
          uint64_t v82 = v58;
          swift_errorRetain();
          sub_100008580(&qword_100093940);
          uint64_t v63 = String.init<A>(describing:)();
          uint64_t v82 = sub_100007E60(v63, v64, (uint64_t *)&v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "Failed to create [%{public}s] directory: [%{public}s]", (uint8_t *)v62, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
          swift_bridgeObjectRelease_n();
        }
        swift_errorRelease();
        os_log_type_t v55 = *(void (**)(char *, char *))(v81 + 8);
        long long v56 = v75;
      }
      else
      {
        os_log_type_t v55 = *(void (**)(char *, char *))(v81 + 8);
        long long v56 = v41;
      }
      uint64_t v8 = (uint64_t)v76;
      v55(v56, v76);
      sub_10000A738((uint64_t)v80, &qword_100093E40);
      uint64_t v39 = 1;
      uint64_t v46 = v79;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v27)(v46, v39, 1, v8);
    }
    sub_10000A738((uint64_t)v80, &qword_100093E40);
    uint64_t v46 = v79;
    ((void (*)(uint64_t, char *, uint64_t))v40)(v79, v41, v8);
    uint64_t v39 = 0;
  }
  return ((uint64_t (*)(void, void, void, void))v27)(v46, v39, 1, v8);
}

uint64_t sub_100048478()
{
  sub_10000A738(v0 + OBJC_IVAR____TtC9feedbackd19LongTermPersistence____lazy_storage___feedbackdDirectory, &qword_100093BE0);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000484C0()
{
  return type metadata accessor for LongTermPersistence();
}

uint64_t type metadata accessor for LongTermPersistence()
{
  uint64_t result = qword_100093AD8;
  if (!qword_100093AD8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100048514()
{
  sub_1000485B0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000485B0()
{
  if (!qword_100093AE8)
  {
    sub_100009764(&qword_100093E40);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100093AE8);
    }
  }
}

uint64_t sub_10004860C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_100093BE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100048674(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_100093E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000486DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FeedbackdEntitlements(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for FeedbackdEntitlements(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t *assignWithCopy for FeedbackdEntitlements(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_bridgeObjectRetain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

void *initializeWithTake for FeedbackdEntitlements(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for FeedbackdEntitlements(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeedbackdEntitlements(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FeedbackdEntitlements(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_100048920(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100048938(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for FeedbackdEntitlements()
{
  return &type metadata for FeedbackdEntitlements;
}

uint64_t sub_100048968(void **a1, void **a2)
{
  unsigned int v2 = *a1;
  uint64_t v3 = *a2;
  if (!v2) {
    return !v3;
  }
  if (v2 == (void *)1) {
    return v3 == (void *)1;
  }
  if ((unint64_t)v3 < 2) {
    return 0;
  }
  return sub_100048FD4(v2, v3);
}

uint64_t sub_1000489A8()
{
  if (sub_100048E14())
  {
    if (qword_100092AF0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100006040(v1, (uint64_t)SharedLog);
    id v2 = v0;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      unsigned int v5 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unsigned int v5 = 67240192;
      LODWORD(v23) = [v2 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Client with pid [%{public}d] has admin entitlement", v5, 8u);
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  else
  {
    uint64_t v7 = sub_100048EF0();
    if (v7)
    {
      uint64_t v6 = v7;
      if (qword_100092AF0 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_100006040(v8, (uint64_t)SharedLog);
      id v9 = v0;
      swift_bridgeObjectRetain_n();
      id v10 = v9;
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 67240450;
        [v10 processIdentifier];

        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v13 + 8) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v14 = Array.description.getter();
        unint64_t v16 = v15;
        swift_bridgeObjectRelease();
        sub_100007E60(v14, v16, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Client with pid [%{public}d] is entitled to use forms [%{public}s]", (uint8_t *)v13, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      if (qword_100092AF0 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100006040(v17, (uint64_t)SharedLog);
      id v18 = v0;
      id v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 67240192;
        LODWORD(v23) = [v18 processIdentifier];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Client with pid [%{public}d] is not entitled", v21, 8u);
        swift_slowDealloc();
      }
      else
      {
      }
      return 2;
    }
  }
  return v6;
}

uint64_t sub_100048E14()
{
  static Strings.XPC.adminEntitlement.getter();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 valueForEntitlement:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_1000187B8((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    uint64_t result = swift_dynamicCast();
    if (result) {
      return v4;
    }
  }
  else
  {
    sub_10004909C((uint64_t)v6);
    return 0;
  }
  return result;
}

uint64_t sub_100048EF0()
{
  static Strings.XPC.clientEntitlement.getter();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 valueForEntitlement:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_1000187B8((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_100008580(&qword_100092B50);
    if (swift_dynamicCast()) {
      return v4;
    }
  }
  else
  {
    sub_10004909C((uint64_t)v6);
  }
  return 0;
}

uint64_t sub_100048FD4(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    id v9 = a1 + 7;
    for (unint64_t i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_10004909C(uint64_t a1)
{
  uint64_t v2 = sub_100008580((uint64_t *)&unk_100093910);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100049100()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  char v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t *)((char *)&v26 - v7);
  id v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v26 - v7, v1, v2);
  int v10 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v8, v2);
  if (v10 == enum case for FBKSInteraction.Content.file(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v11 - 8) + 8))(v8, v11);
    return 1;
  }
  if (v10 != enum case for FBKSInteraction.Content._file(_:))
  {
    if (v10 == enum case for FBKSInteraction.Content.text(_:)) {
      goto LABEL_10;
    }
    if (v10 != enum case for FBKSInteraction.Content.image(_:)
      && v10 != enum case for FBKSInteraction.Content.audio(_:)
      && v10 != enum case for FBKSInteraction.Content.handwriting(_:)
      && v10 != enum case for FBKSInteraction.Content.sketch(_:))
    {
      if (v10 == enum case for FBKSInteraction.Content.imageText(_:)
        || v10 == enum case for FBKSInteraction.Content.sketchText(_:))
      {
        (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
        sub_1000185C0(*v8, v8[1]);
        swift_bridgeObjectRelease();
        return 2;
      }
      if (v10 != enum case for FBKSInteraction.Content.video(_:))
      {
        if (v10 == enum case for FBKSInteraction.Content.sourceCode(_:)) {
          goto LABEL_10;
        }
        if (v10 == enum case for FBKSInteraction.Content.structured(_:))
        {
          (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v8, v2);
          return 0;
        }
        if (v10 == enum case for FBKSInteraction.Content.imageStructured(_:))
        {
          (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
          sub_1000185C0(*v8, v8[1]);
          uint64_t v22 = &qword_100093AA0;
LABEL_29:
          uint64_t v23 = (char *)v8 + *(int *)(sub_100008580(v22) + 48);
          uint64_t v24 = type metadata accessor for FBKSInteraction.StructuredValue();
          (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
          return 2;
        }
        if (v10 == enum case for FBKSInteraction.Content.sketchStructured(_:))
        {
          (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
          sub_1000185C0(*v8, v8[1]);
          uint64_t v22 = &qword_100093A98;
          goto LABEL_29;
        }
        if (v10 == enum case for FBKSInteraction.Content.notification(_:)
          || v10 == enum case for FBKSInteraction.Content.mailMessage(_:))
        {
          goto LABEL_10;
        }
        if (v10 != enum case for FBKSInteraction.Content.emoji(_:))
        {
          if (v10 != enum case for FBKSInteraction.Content.html(_:))
          {
            sub_10002A51C();
            swift_allocError();
            *os_log_type_t v25 = 0;
            swift_willThrow();
            return (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v8, v2);
          }
LABEL_10:
          (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
          swift_bridgeObjectRelease();
          return 0;
        }
      }
    }
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    sub_1000185C0(*v8, v8[1]);
    return 1;
  }
  (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
  uint64_t v13 = v8[2];
  unint64_t v14 = v8[3];
  swift_bridgeObjectRelease();
  sub_1000185C0(v13, v14);
  if (qword_100092A60 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100006040(v15, (uint64_t)qword_100093C00);
  v9(v6, v1, v2);
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v28 = v26;
    *(_DWORD *)uint64_t v18 = 136315394;
    sub_10004BE54(&qword_100093C18, (void (*)(uint64_t))&type metadata accessor for FBKSInteraction.Content);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v27 = sub_100007E60(v19, v20, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    *(_WORD *)(v18 + 12) = 2082;
    uint64_t v27 = sub_100007E60(0x28656761726F7473, 0xE900000000000029, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s not supported in %{public}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }

  sub_10002A51C();
  swift_allocError();
  unsigned char *v21 = 14;
  return swift_willThrow();
}

void sub_1000497D8(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (uint64_t *)((char *)&v25 - v10);
  id v12 = [a1 text];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    id v16 = [a1 metadata];
    if (v16 && (os_log_type_t v17 = v16, v25 = a2, v26 = v2, sub_100041E04(), v19 = v18, v17, v19))
    {
      char v20 = 1;
      switch(sub_10004B32C())
      {
        case 0u:

          *uint64_t v11 = v27;
          v11[1] = v15;
          uint64_t v21 = (unsigned int *)&enum case for FBKSInteraction.Content.text(_:);
          goto LABEL_15;
        case 8u:

          *uint64_t v11 = v27;
          v11[1] = v15;
          uint64_t v21 = (unsigned int *)&enum case for FBKSInteraction.Content.sourceCode(_:);
          goto LABEL_15;
        case 9u:
          uint64_t v23 = v26;
          sub_10004AF44();

          if (v23) {
            return;
          }
          (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for FBKSInteraction.Content.structured(_:), v5);
          (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 32))(v11, v9, v5);
          break;
        case 0xCu:

          *uint64_t v11 = v27;
          v11[1] = v15;
          uint64_t v21 = (unsigned int *)&enum case for FBKSInteraction.Content.notification(_:);
          goto LABEL_15;
        case 0xDu:

          *uint64_t v11 = v27;
          v11[1] = v15;
          uint64_t v21 = (unsigned int *)&enum case for FBKSInteraction.Content.mailMessage(_:);
          goto LABEL_15;
        case 0xFu:

          *uint64_t v11 = v27;
          v11[1] = v15;
          uint64_t v21 = (unsigned int *)&enum case for FBKSInteraction.Content.html(_:);
LABEL_15:
          (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v11, *v21, v5);
          break;
        default:
          goto LABEL_7;
      }
      uint64_t v24 = v25;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v6 + 32))(v25, v11, v5);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v5);
    }
    else
    {
      char v20 = 5;
LABEL_7:
      swift_bridgeObjectRelease();
      sub_10002A51C();
      swift_allocError();
      char *v22 = v20;
      swift_willThrow();
    }
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, 1, 1, v5);
  }
}

uint64_t sub_100049B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1 == 0xD000000000000010 && a2 == 0x800000010007E250
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.imageGeneration(_:);
  }
  else if (a1 == 0x432079726F6D654DLL && a2 == 0xEF6E6F6974616572 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.memoryCreation(_:);
  }
  else if (a1 == 0x74697277646E6148 && a2 == 0xEB00000000676E69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.handwriting(_:);
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010007E270 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.systemAssistant(_:);
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010007E290 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
  }
         || a1 == 0x4520656369766544 && a2 == 0xED00007472657078
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.deviceExpert(_:);
  }
  else if (a1 == 0x20676E6974697257 && a2 == 0xED0000736C6F6F54 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.writingTools(_:);
  }
  else if (a1 == 0x6552207472616D53 && a2 == 0xEB00000000796C70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.smartReplies(_:);
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010007E2B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.emojiGeneration(_:);
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010007E2D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.mailSummarization(_:);
  }
  else if (a1 == 0x676948206C69614DLL && a2 == 0xEF73746867696C68 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.mailHighlights(_:);
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000010007E2F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.messagesSummarization(_:);
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x800000010007E310 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.notificationsSummarization(_:);
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000010007E330 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.notificationsHighlights(_:);
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000010007E350 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.notificationsBreakthrough(_:);
  }
  else if (a1 == 0x615020636967614DLL && a2 == 0xEB00000000726570 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.magicPaper(_:);
  }
  else if (a1 == 0x7341207466697753 && a2 == 0xEC00000074736973 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.swiftAssist(_:);
  }
  else if (a1 == 0x4320736F746F6850 && a2 == 0xEE0070756E61656CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.photosCleanup(_:);
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010007E370 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.notesAudioSummary(_:);
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x800000010007E390 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.siriWithChatGPT(_:);
  }
  else if (a1 == 0xD000000000000025 && a2 == 0x800000010007E3B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.writingToolsCompose(_:);
  }
  else if (a1 == 0x6C616E6F73726550 && a2 == 0xEC00000041265120 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.siriPQA(_:);
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010007E3E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.visualIntelligence(_:);
  }
  else if (a1 == 1953719636 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.test(_:);
  }
  else
  {
    *a3 = a1;
    a3[1] = a2;
    uint64_t v6 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.temporary(_:);
  }
  uint64_t v7 = *v6;
  uint64_t v8 = type metadata accessor for FBKSInteraction.FeatureDomain();
  id v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a3, v7, v8);
}

uint64_t sub_10004A5EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = [a1 imageData];
  if (!v8)
  {

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  }
  id v9 = v8;
  uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  id v12 = [a1 metadata];
  if (!v12)
  {
    char v16 = 5;
LABEL_10:
    sub_10002A51C();
    swift_allocError();
    char *v22 = v16;
    swift_willThrow();

    return sub_1000185C0(v30, v11);
  }
  uint64_t v13 = v12;
  uint64_t v28 = a2;
  unint64_t v29 = v11;
  sub_100041E04();
  uint64_t v15 = v14;

  if (!v15)
  {
    char v16 = 5;
LABEL_9:
    unint64_t v11 = v29;
    goto LABEL_10;
  }
  char v16 = 1;
  int v17 = sub_10004B32C() - 1;
  unint64_t v11 = v29;
  switch(v17)
  {
    case 0:

      *uint64_t v7 = v30;
      uint64_t v18 = v7 + 1;
      uint64_t v19 = (unsigned int *)&enum case for FBKSInteraction.Content.image(_:);
      uint64_t v20 = v28;
      goto LABEL_19;
    case 1:

      *uint64_t v7 = v30;
      uint64_t v18 = v7 + 1;
      uint64_t v19 = (unsigned int *)&enum case for FBKSInteraction.Content.audio(_:);
      uint64_t v20 = v28;
      goto LABEL_19;
    case 2:

      *uint64_t v7 = v30;
      uint64_t v18 = v7 + 1;
      uint64_t v19 = (unsigned int *)&enum case for FBKSInteraction.Content.handwriting(_:);
      uint64_t v20 = v28;
      goto LABEL_19;
    case 3:

      *uint64_t v7 = v30;
      uint64_t v18 = v7 + 1;
      uint64_t v19 = (unsigned int *)&enum case for FBKSInteraction.Content.sketch(_:);
      uint64_t v20 = v28;
      goto LABEL_19;
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
      goto LABEL_10;
    case 6:

      *uint64_t v7 = v30;
      uint64_t v18 = v7 + 1;
      uint64_t v19 = (unsigned int *)&enum case for FBKSInteraction.Content.video(_:);
      uint64_t v20 = v28;
      goto LABEL_19;
    case 13:

      *uint64_t v7 = v30;
      uint64_t v18 = v7 + 1;
      uint64_t v19 = (unsigned int *)&enum case for FBKSInteraction.Content.emoji(_:);
      uint64_t v20 = v28;
      goto LABEL_19;
    case 15:
      id v23 = [a1 metadata];
      if (!v23)
      {
        char v16 = 15;
        goto LABEL_10;
      }
      uint64_t v24 = v23;
      id v25 = sub_100041F1C();
      uint64_t v27 = v26;

      if (!v27)
      {
        char v16 = 15;
        goto LABEL_9;
      }

      *uint64_t v7 = v25;
      v7[1] = v27;
      v7[2] = v30;
      uint64_t v18 = v7 + 3;
      uint64_t v19 = (unsigned int *)&enum case for FBKSInteraction.Content._file(_:);
      uint64_t v20 = v28;
      unint64_t v11 = v29;
LABEL_19:
      *uint64_t v18 = v11;
      (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *v19, v4);
      (*(void (**)(uint64_t, void *, uint64_t))(v5 + 32))(v20, v7, v4);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v20, 0, 1, v4);
      break;
    default:
      goto LABEL_9;
  }
  return result;
}

void sub_10004A98C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (uint64_t *)((char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __chkstk_darwin(v7);
  id v12 = (uint64_t *)((char *)&v40 - v11);
  __chkstk_darwin(v10);
  uint64_t v14 = (uint64_t *)((char *)&v40 - v13);
  id v15 = [a1 text];
  if (v15)
  {
    char v16 = v15;
    uint64_t v43 = v6;
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    id v19 = [a1 imageData];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v41 = a2;
      uint64_t v42 = v2;
      uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v46 = v21;

      id v22 = [a1 metadata];
      if (v22 && (v23 = v22, sub_100041E04(), uint64_t v25 = v24, v23, v25))
      {
        switch(sub_10004B32C())
        {
          case 1u:
            swift_bridgeObjectRelease();

            unint64_t v26 = v46;
            *uint64_t v14 = v45;
            v14[1] = v26;
            uint64_t v27 = (unsigned int *)&enum case for FBKSInteraction.Content.image(_:);
            goto LABEL_19;
          case 5u:

            unint64_t v31 = v46;
            *uint64_t v14 = v45;
            v14[1] = v31;
            v14[2] = v44;
            v14[3] = v18;
            uint64_t v27 = (unsigned int *)&enum case for FBKSInteraction.Content.imageText(_:);
            goto LABEL_19;
          case 6u:

            unint64_t v32 = v46;
            *uint64_t v14 = v45;
            v14[1] = v32;
            v14[2] = v44;
            v14[3] = v18;
            uint64_t v27 = (unsigned int *)&enum case for FBKSInteraction.Content.sketchText(_:);
            goto LABEL_19;
          case 0xAu:
            sub_100008580(&qword_100093AA0);
            uint64_t v33 = v45;
            unint64_t v34 = v46;
            *id v12 = v45;
            v12[1] = v34;
            sub_10001866C(v33, v34);
            uint64_t v35 = v42;
            sub_10004AF44();

            sub_1000185C0(v33, v34);
            if (v35) {
              goto LABEL_17;
            }
            uint64_t v36 = v43;
            (*(void (**)(void *, void, uint64_t))(v43 + 104))(v12, enum case for FBKSInteraction.Content.imageStructured(_:), v5);
            (*(void (**)(uint64_t *, void *, uint64_t))(v36 + 32))(v14, v12, v5);
            goto LABEL_20;
          case 0xBu:
            sub_100008580(&qword_100093A98);
            uint64_t v33 = v45;
            unint64_t v34 = v46;
            *id v9 = v45;
            v9[1] = v34;
            sub_10001866C(v33, v34);
            uint64_t v37 = v42;
            sub_10004AF44();

            sub_1000185C0(v33, v34);
            if (v37)
            {
LABEL_17:
              sub_1000185C0(v33, v34);
            }
            else
            {
              uint64_t v36 = v43;
              (*(void (**)(void *, void, uint64_t))(v43 + 104))(v9, enum case for FBKSInteraction.Content.sketchStructured(_:), v5);
              (*(void (**)(uint64_t *, void *, uint64_t))(v36 + 32))(v14, v9, v5);
LABEL_20:
              uint64_t v39 = v41;
              (*(void (**)(uint64_t, uint64_t *, uint64_t))(v36 + 32))(v41, v14, v5);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v39, 0, 1, v5);
            }
            break;
          case 0x10u:

            *uint64_t v14 = v44;
            v14[1] = v18;
            unint64_t v38 = v46;
            v14[2] = v45;
            v14[3] = v38;
            uint64_t v27 = (unsigned int *)&enum case for FBKSInteraction.Content._file(_:);
LABEL_19:
            uint64_t v36 = v43;
            (*(void (**)(uint64_t *, void, uint64_t))(v43 + 104))(v14, *v27, v5);
            goto LABEL_20;
          default:
            swift_bridgeObjectRelease();
            sub_10002A51C();
            swift_allocError();
            char v29 = 1;
            goto LABEL_9;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_10002A51C();
        swift_allocError();
        char v29 = 5;
LABEL_9:
        *uint64_t v28 = v29;
        swift_willThrow();

        sub_1000185C0(v45, v46);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_10002A51C();
      swift_allocError();
      *uint64_t v30 = 8;
      swift_willThrow();
    }
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, 1, 1, v5);
  }
}

uint64_t sub_10004AEDC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_100093C00);
  sub_100006040(v0, (uint64_t)qword_100093C00);
  static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10004AF44()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v4 = String.data(using:allowLossyConversion:)();
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6 >> 60 == 15)
  {
    sub_10002A51C();
    swift_allocError();
    *uint64_t v7 = 9;
    return swift_willThrow();
  }
  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    type metadata accessor for FBKSInteraction.StructuredValue();
    sub_10004BE54((unint64_t *)&unk_100093C20, (void (*)(uint64_t))&type metadata accessor for FBKSInteraction.StructuredValue);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_100018760(v4, v6);
    return swift_release();
  }
}

unint64_t sub_10004B124(char a1)
{
  unint64_t result = 1954047316;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6567616D49;
      break;
    case 2:
      unint64_t result = 0x6F69647541;
      break;
    case 3:
      unint64_t result = 0x74697277646E6148;
      break;
    case 4:
      unint64_t result = 0x686374656B53;
      break;
    case 5:
      unint64_t result = 0x65542B6567616D49;
      break;
    case 6:
      unint64_t result = 0x542B686374656B53;
      break;
    case 7:
      unint64_t result = 0x6F65646956;
      break;
    case 8:
      unint64_t result = 0x6320656372756F53;
      break;
    case 9:
      unint64_t result = 0x7275746375727453;
      break;
    case 10:
      unint64_t result = 0xD000000000000010;
      break;
    case 11:
      unint64_t result = 0xD000000000000011;
      break;
    case 12:
      unint64_t result = 0x6163696669746F4ELL;
      break;
    case 13:
      unint64_t result = 0x73656D206C69614DLL;
      break;
    case 14:
      unint64_t result = 0x696A6F6D45;
      break;
    case 15:
      unint64_t result = 1280136264;
      break;
    case 16:
      unint64_t result = 1701603654;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10004B32C()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x11) {
    return 17;
  }
  else {
    return v0;
  }
}

uint64_t sub_10004B380(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = &v32[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t *)&v32[-v7];
  uint64_t v9 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16);
  v9(&v32[-v7], a1, v2);
  int v10 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v8, v2);
  if (v10 == enum case for FBKSInteraction.Content.file(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v11 - 8) + 8))(v8, v11);
    return 16;
  }
  else if (v10 == enum case for FBKSInteraction.Content._file(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    uint64_t v13 = v8[2];
    unint64_t v14 = v8[3];
    swift_bridgeObjectRelease();
    sub_1000185C0(v13, v14);
    if (qword_100092A60 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100006040(v15, (uint64_t)qword_100093C00);
    v9(v6, a1, v2);
    char v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    int v18 = v17;
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v37 = v35;
      *(_DWORD *)uint64_t v19 = 136315394;
      sub_10004BE54(&qword_100093C18, (void (*)(uint64_t))&type metadata accessor for FBKSInteraction.Content);
      os_log_t v34 = v16;
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v36 = sub_100007E60(v20, v21, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v22 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
      int v33 = v18;
      v22((uint64_t)v6, v2);
      *(_WORD *)(v19 + 12) = 2082;
      uint64_t v36 = sub_100007E60(0x293A5F2874696E69, 0xE800000000000000, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v23 = v34;
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v33, "%s not supported in %{public}s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v22 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
      v22((uint64_t)v6, v2);
    }
    sub_10002A51C();
    swift_allocError();
    *uint64_t v24 = 14;
    swift_willThrow();
    return v22(a1, v2);
  }
  else if (v10 == enum case for FBKSInteraction.Content.text(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (v10 == enum case for FBKSInteraction.Content.image(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    sub_1000185C0(*v8, v8[1]);
    return 1;
  }
  else if (v10 == enum case for FBKSInteraction.Content.audio(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    sub_1000185C0(*v8, v8[1]);
    return 2;
  }
  else if (v10 == enum case for FBKSInteraction.Content.handwriting(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    sub_1000185C0(*v8, v8[1]);
    return 3;
  }
  else if (v10 == enum case for FBKSInteraction.Content.sketch(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    sub_1000185C0(*v8, v8[1]);
    return 4;
  }
  else if (v10 == enum case for FBKSInteraction.Content.imageText(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    sub_1000185C0(*v8, v8[1]);
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (v10 == enum case for FBKSInteraction.Content.sketchText(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    sub_1000185C0(*v8, v8[1]);
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (v10 == enum case for FBKSInteraction.Content.video(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    sub_1000185C0(*v8, v8[1]);
    return 7;
  }
  else if (v10 == enum case for FBKSInteraction.Content.sourceCode(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (v10 == enum case for FBKSInteraction.Content.structured(_:))
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v25(a1, v2);
    v25((uint64_t)v8, v2);
    return 9;
  }
  else if (v10 == enum case for FBKSInteraction.Content.imageStructured(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    sub_1000185C0(*v8, v8[1]);
    unint64_t v26 = (char *)v8 + *(int *)(sub_100008580(&qword_100093AA0) + 48);
    uint64_t v27 = type metadata accessor for FBKSInteraction.StructuredValue();
    (*(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
    return 10;
  }
  else if (v10 == enum case for FBKSInteraction.Content.sketchStructured(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    sub_1000185C0(*v8, v8[1]);
    uint64_t v28 = (char *)v8 + *(int *)(sub_100008580(&qword_100093A98) + 48);
    uint64_t v29 = type metadata accessor for FBKSInteraction.StructuredValue();
    (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8))(v28, v29);
    return 11;
  }
  else if (v10 == enum case for FBKSInteraction.Content.notification(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (v10 == enum case for FBKSInteraction.Content.mailMessage(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (v10 == enum case for FBKSInteraction.Content.emoji(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    sub_1000185C0(*v8, v8[1]);
    return 14;
  }
  else if (v10 == enum case for FBKSInteraction.Content.html(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v8, v2);
    swift_bridgeObjectRelease();
    return 15;
  }
  else
  {
    sub_10002A51C();
    swift_allocError();
    *uint64_t v30 = 6;
    swift_willThrow();
    unint64_t v31 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v31(a1, v2);
    return ((uint64_t (*)(uint64_t *, uint64_t))v31)(v8, v2);
  }
}

uint64_t sub_10004BE54(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004BE9C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_100093C30);
  sub_100006040(v0, (uint64_t)qword_100093C30);
  static Strings.Daemon.loggingSubsystem.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10004BF00(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100008580(&qword_100093940);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

uint64_t sub_10004BFC0(uint64_t a1)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = v1;
  return _swift_task_switch(sub_10004C050, 0, 0);
}

uint64_t sub_10004C050()
{
  uint64_t v26 = v0;
  if (qword_100092A68 != -1) {
    swift_once();
  }
  uint64_t v1 = (unsigned char *)(v0 + 124);
  uint64_t v2 = type metadata accessor for Logger();
  sub_100006040(v2, (uint64_t)qword_100093C30);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    *(void *)(v0 + 72) = sub_100007E60(0xD000000000000019, 0x800000010007E6E0, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s ", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  *uint64_t v1 = 0;
  int v6 = SBSGetScreenLockStatus();
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    BOOL v9 = v6 != 0;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 67240450;
    *(_DWORD *)(v0 + 120) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 8) = 2082;
    swift_beginAccess();
    uint64_t v11 = DarwinBoolean.description.getter();
    *(void *)(v0 + 64) = sub_100007E60(v11, v12, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Is device locked? [%{BOOL,public}d] passcodeRequired [%{public}s]", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  if (*v1)
  {
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Detected race condition with remote alert launching while device is locked.", v15, 2u);
      swift_slowDealloc();
    }

    sub_10000FA84();
    swift_allocError();
    unsigned char *v16 = 8;
    swift_willThrow();
    os_log_type_t v17 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_11;
  }
  uint64_t v19 = *(void *)(v0 + 88);
  id v20 = [objc_allocWithZone((Class)type metadata accessor for RemoteAlertManager()) init];
  unint64_t v21 = *(void **)(v19 + 16);
  *(void *)(v19 + 16) = v20;

  id v22 = *(void **)(v19 + 16);
  *(void *)(v0 + 96) = v22;
  if (!v22)
  {
    os_log_type_t v17 = *(uint64_t (**)(void))(v0 + 8);
LABEL_11:
    return v17();
  }
  id v23 = v22;
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_10004C550;
  _OWORD v24[2] = *(void *)(v0 + 80);
  v24[3] = v23;
  return _swift_task_switch(sub_10004C834, 0, 0);
}

uint64_t sub_10004C550()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10004C728;
  }
  else
  {

    uint64_t v3 = sub_10004C6A0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10004C6A0()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004C728()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004C7B8()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LaunchController()
{
  return self;
}

uint64_t sub_10004C814(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_10004C834, 0, 0);
}

uint64_t sub_10004C834()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = swift_allocObject();
  v0[4] = v2;
  swift_unknownObjectWeakInit();
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  os_log_type_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *os_log_type_t v4 = v0;
  v4[1] = sub_10004C950;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_10004C950()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10004CA8C;
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v2 = sub_10004CA74;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004CA74()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004CA8C()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10004CAF8(uint64_t a1)
{
  uint64_t v2 = sub_100008580(&qword_100093E48);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v6 = (char *)Strong;
    id v7 = objc_allocWithZone((Class)SBSRemoteAlertDefinition);
    NSString v8 = String._bridgeToObjectiveC()();
    NSString v9 = String._bridgeToObjectiveC()();
    id v29 = [v7 initWithServiceName:v8 viewControllerClassName:v9];

    id v10 = [objc_allocWithZone((Class)SBSRemoteAlertConfigurationContext) init];
    id v11 = [self anonymousListener];
    [v11 setDelegate:v6];
    id v12 = [v11 endpoint];
    [v10 setXpcEndpoint:[v12 _endpoint]];
    swift_unknownObjectRelease();
    type metadata accessor for FBKSRemoteAlertRequest();
    sub_10004F858(&qword_100093E50, (void (*)(uint64_t))&type metadata accessor for FBKSRemoteAlertRequest);
    uint64_t v13 = JSONCodable.encode()();
    unint64_t v15 = v14;
    sub_100008580(&qword_100093438);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10007B630;
    id v28 = v11;
    uint64_t v30 = 0x74736575716572;
    unint64_t v31 = 0xE700000000000000;
    sub_10001866C(v13, v15);
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = &type metadata for Data;
    *(void *)(inited + 72) = v13;
    *(void *)(inited + 80) = v15;
    sub_1000235F0(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v10 setUserInfo:isa];

    id v18 = [self newHandleWithDefinition:v29 configurationContext:v10];
    [v18 registerObserver:v6];
    uint64_t v19 = sub_100008580(&qword_100093DD0);
    uint64_t v20 = a1;
    uint64_t v21 = *(void *)(v19 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v4, v20, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v4, 0, 1, v19);
    uint64_t v22 = (uint64_t)&v6[OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_checkedThrowingContinuation];
    swift_beginAccess();
    sub_10004F7B0((uint64_t)v4, v22);
    swift_endAccess();
    id v23 = [objc_allocWithZone((Class)SBSRemoteAlertActivationContext) init];
    [v18 activateWithContext:v23];

    uint64_t v24 = *(void **)&v6[OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_remoteAlertHandle];
    *(void *)&v6[OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_remoteAlertHandle] = v18;
    id v25 = v18;

    id v26 = v28;
    [v28 resume];
    sub_1000185C0(v13, v15);
  }
}

uint64_t sub_10004D170(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100008580(&qword_100093DD0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100008580(&qword_100093E48);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  id v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v21 - v12;
  if (qword_100092A68 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100006040(v14, (uint64_t)qword_100093C30);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v23 = v2;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v24 = v7;
    id v18 = (uint8_t *)v17;
    v26[0] = swift_slowAlloc();
    uint64_t v22 = v5;
    *(_DWORD *)id v18 = 136446210;
    uint64_t v25 = sub_100007E60(0xD000000000000022, 0x800000010007E610, v26);
    uint64_t v5 = v22;
    uint64_t v2 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v7 = v24;
    swift_slowDealloc();
  }

  [a1 unregisterObserver:v2];
  uint64_t v19 = v2
      + OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_checkedThrowingContinuation;
  swift_beginAccess();
  sub_10004F730(v19, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4))
  {
    sub_10000A738((uint64_t)v13, &qword_100093E48);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v13, v4);
    sub_10000A738((uint64_t)v13, &qword_100093E48);
    CheckedContinuation.resume(returning:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v11, 1, 1, v4);
  swift_beginAccess();
  sub_10004F7B0((uint64_t)v11, v19);
  return swift_endAccess();
}

uint64_t sub_10004D58C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100008580(&qword_100093DD0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v42 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100008580(&qword_100093E48);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = ((char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __chkstk_darwin(v10);
  unint64_t v15 = (char *)&v37 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v37 - v16;
  [a1 unregisterObserver:v3];
  id v18 = (void *)&unk_100093000;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100092A68 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100006040(v19, (uint64_t)qword_100093C30);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    uint64_t v41 = v20;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      unint64_t v38 = (void *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v40 = v3;
      v44[0] = v39;
      *(_DWORD *)uint64_t v22 = 136446466;
      uint64_t v43 = sub_100007E60(0xD00000000000002CLL, 0x800000010007E5E0, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2112;
      swift_errorRetain();
      uint64_t v23 = v6;
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v43 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v38 = v24;
      uint64_t v6 = v23;
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v25 = v41;
      _os_log_impl((void *)&_mh_execute_header, v41, v21, "%{public}s Error: %@", (uint8_t *)v22, 0x16u);
      sub_100008580(&qword_100092B40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      uint64_t v3 = v40;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    id v18 = &unk_100093000;
    uint64_t v33 = v3
        + OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_checkedThrowingContinuation;
    swift_beginAccess();
    sub_10004F730(v33, (uint64_t)v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v17, 1, v6))
    {
      swift_errorRelease();
      uint64_t v32 = (uint64_t)v17;
      goto LABEL_15;
    }
    os_log_t v34 = v42;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v42, v17, v6);
    sub_10000A738((uint64_t)v17, &qword_100093E48);
    uint64_t v43 = a2;
    CheckedContinuation.resume(throwing:)();
LABEL_18:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v34, v6);
    goto LABEL_19;
  }
  if (qword_100092A68 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_100006040(v26, (uint64_t)qword_100093C30);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v41 = v12;
    uint64_t v30 = (uint8_t *)v29;
    v44[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136446210;
    uint64_t v43 = sub_100007E60(0xD00000000000002CLL, 0x800000010007E5E0, v44);
    id v18 = &unk_100093000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v12 = v41;
    swift_slowDealloc();
  }

  uint64_t v31 = v3 + v18[419];
  swift_beginAccess();
  sub_10004F730(v31, (uint64_t)v15);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6))
  {
    os_log_t v34 = v42;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v42, v15, v6);
    sub_10000A738((uint64_t)v15, &qword_100093E48);
    CheckedContinuation.resume(returning:)();
    goto LABEL_18;
  }
  uint64_t v32 = (uint64_t)v15;
LABEL_15:
  sub_10000A738(v32, &qword_100093E48);
LABEL_19:
  (*(void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  uint64_t v35 = v3 + v18[419];
  swift_beginAccess();
  sub_10004F7B0((uint64_t)v12, v35);
  return swift_endAccess();
}

id sub_10004DD4C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteAlertManager();
  return [super dealloc];
}

uint64_t sub_10004DDD8()
{
  return type metadata accessor for RemoteAlertManager();
}

uint64_t type metadata accessor for RemoteAlertManager()
{
  uint64_t result = qword_100093DB0;
  if (!qword_100093DB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10004DE2C()
{
  sub_10004DEC4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10004DEC4()
{
  if (!qword_100093DC8)
  {
    sub_100009764(&qword_100093DD0);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100093DC8);
    }
  }
}

void sub_10004DF20()
{
}

void sub_10004DF2C()
{
}

void sub_10004DF38(const char *a1)
{
  if (qword_100092A68 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100006040(v2, (uint64_t)qword_100093C30);
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, a1, v4, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10004E0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[98] = a5;
  v5[97] = a4;
  v5[96] = a3;
  v5[95] = a2;
  v5[94] = a1;
  sub_100008580(&qword_100093E40);
  v5[99] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v5[100] = v6;
  v5[101] = *(void *)(v6 - 8);
  v5[102] = swift_task_alloc();
  v5[103] = swift_task_alloc();
  v5[104] = swift_task_alloc();
  return _swift_task_switch(sub_10004E210, 0, 0);
}

uint64_t sub_10004E210()
{
  uint64_t v78 = v0;
  if (qword_100092A68 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 840) = sub_100006040(v1, (uint64_t)qword_100093C30);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 760);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 752);
    uint64_t v7 = swift_slowAlloc();
    v77[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    *(void *)(v0 + 736) = sub_100007E60(0xD000000000000019, 0x800000010007E580, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 744) = sub_100007E60(v6, v5, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s form %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = *(void *)(v0 + 776);
  uint64_t v9 = *(void *)(v0 + 768);
  uint64_t v10 = *(void *)(v0 + 760);
  uint64_t v11 = *(void *)(v0 + 752);
  unint64_t v12 = sub_1000235F0((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v13 = (void *)sub_1000191CC(v11, v10, v9, v8);
  id v14 = [v13 asFBAURLSchemeWithIsSurvey:FormItem.isSurvey.getter() & 1];

  if (!v14)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 808) + 56))(*(void *)(v0 + 792), 1, 1, *(void *)(v0 + 800));
    goto LABEL_11;
  }
  uint64_t v15 = *(void *)(v0 + 824);
  uint64_t v16 = *(void *)(v0 + 808);
  uint64_t v17 = *(void *)(v0 + 800);
  uint64_t v18 = *(void *)(v0 + 792);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32);
  v19(v18, v15, v17);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v17);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v18, 1, v17) == 1)
  {
LABEL_11:
    uint64_t v33 = *(void *)(v0 + 792);
    swift_bridgeObjectRelease();
    sub_10000A738(v33, &qword_100093E40);
    sub_10001AC84(0xD00000000000001ALL, 0x800000010007E510);
    swift_willThrow();
    goto LABEL_12;
  }
  uint64_t v71 = v12;
  uint64_t v76 = v0 + 120;
  uint64_t v74 = v0 + 160;
  uint64_t v73 = v0 + 280;
  unint64_t v68 = (_OWORD *)(v0 + 320);
  uint64_t v69 = v0 + 200;
  uint64_t v65 = (uint64_t *)(v0 + 384);
  int v70 = (_OWORD *)(v0 + 448);
  unint64_t v66 = (_OWORD *)(v0 + 480);
  uint64_t v67 = v0 + 240;
  uint64_t v20 = *(void *)(v0 + 832);
  os_log_type_t v21 = *(uint64_t **)(v0 + 816);
  unint64_t v72 = (_OWORD *)(v0 + 576);
  uint64_t v75 = (_OWORD *)(v0 + 608);
  uint64_t v22 = *(void *)(v0 + 808);
  uint64_t v23 = *(void *)(v0 + 800);
  v19(v20, *(void *)(v0 + 792), v23);
  unint64_t v64 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 16);
  v64(v21, v20, v23);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v27 = *(void *)(v0 + 816);
  uint64_t v28 = *(void *)(v0 + 808);
  uint64_t v29 = *(void *)(v0 + 800);
  if (v26)
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    v77[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136446210;
    sub_10004F858(&qword_100093BF8, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 728) = sub_100007E60(v31, v32, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Launching FBA with [%{public}s]", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v28 + 8))(*(void *)(v0 + 816), *(void *)(v0 + 800));
  }

  uint64_t v36 = *(void *)(v0 + 832);
  uint64_t v37 = *(void *)(v0 + 800);
  *(void *)(v0 + 688) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 696) = v38;
  AnyHashable.init<A>(_:)();
  *(void *)(v0 + 408) = v37;
  uint64_t v39 = sub_100020478(v65);
  v64(v39, v36, v37);
  sub_10000AA1C(v65, v66);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v77[0] = v71;
  sub_100027C50(v66, v67, isUniquelyReferenced_nonNull_native);
  uint64_t v41 = v77[0];
  swift_bridgeObjectRelease();
  sub_10000A6E4(v67);
  *(void *)(v0 + 704) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 712) = v42;
  AnyHashable.init<A>(_:)();
  *(void *)(v0 + 376) = &type metadata for Int;
  *(void *)(v0 + 352) = 3;
  sub_10000AA1C((_OWORD *)(v0 + 352), v68);
  char v43 = swift_isUniquelyReferenced_nonNull_native();
  v77[0] = v41;
  sub_100027C50(v68, v69, v43);
  uint64_t v44 = v77[0];
  swift_bridgeObjectRelease();
  sub_10000A6E4(v69);
  *(void *)(v0 + 672) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 680) = v45;
  AnyHashable.init<A>(_:)();
  *(void *)(v0 + 440) = &type metadata for Bool;
  *(unsigned char *)(v0 + 416) = 1;
  sub_10000AA1C((_OWORD *)(v0 + 416), v70);
  char v46 = swift_isUniquelyReferenced_nonNull_native();
  v77[0] = v44;
  sub_100027C50(v70, v73, v46);
  uint64_t v47 = v77[0];
  swift_bridgeObjectRelease();
  sub_10000A6E4(v73);
  *(void *)(v0 + 656) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 664) = v48;
  AnyHashable.init<A>(_:)();
  *(void *)(v0 + 568) = &type metadata for Bool;
  *(unsigned char *)(v0 + 544) = 1;
  sub_10000AA1C((_OWORD *)(v0 + 544), v72);
  char v49 = swift_isUniquelyReferenced_nonNull_native();
  v77[0] = v47;
  sub_100027C50(v72, v74, v49);
  uint64_t v50 = v77[0];
  swift_bridgeObjectRelease();
  sub_10000A6E4(v74);
  *(void *)(v0 + 640) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 648) = v51;
  AnyHashable.init<A>(_:)();
  uint64_t v52 = static Strings.Daemon.bundleIdentifier.getter();
  *(void *)(v0 + 536) = &type metadata for String;
  *(void *)(v0 + 512) = v52;
  *(void *)(v0 + 520) = v53;
  sub_10000AA1C((_OWORD *)(v0 + 512), v75);
  char v54 = swift_isUniquelyReferenced_nonNull_native();
  v77[0] = v50;
  sub_100027C50(v75, v76, v54);
  swift_bridgeObjectRelease();
  sub_10000A6E4(v76);
  id v55 = [self serviceWithDefaultShellEndpoint];
  *(void *)(v0 + 848) = v55;
  if (v55)
  {
    long long v56 = v55;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v58 = [self optionsWithDictionary:isa];
    *(void *)(v0 + 856) = v58;

    static Strings.fbaBundleIdentifier.getter();
    NSString v59 = String._bridgeToObjectiveC()();
    *(void *)(v0 + 864) = v59;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 720;
    *(void *)(v0 + 24) = sub_10004ED18;
    uint64_t v60 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_10004BF00;
    *(void *)(v0 + 104) = &unk_10008E6A0;
    *(void *)(v0 + 112) = v60;
    [v56 openApplication:v59 withOptions:v58 completion:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
  uint64_t v61 = *(void *)(v0 + 832);
  uint64_t v62 = *(void *)(v0 + 808);
  uint64_t v63 = *(void *)(v0 + 800);
  swift_bridgeObjectRelease();
  sub_10001AC84(0xD00000000000001BLL, 0x800000010007E530);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_t v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

uint64_t sub_10004ED18()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 872) = v1;
  if (v1) {
    uint64_t v2 = sub_10004EF7C;
  }
  else {
    uint64_t v2 = sub_10004EE28;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004EE28()
{
  uint64_t v1 = *(void **)(v0 + 864);

  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Launched FBA", v4, 2u);
    swift_slowDealloc();
  }
  unint64_t v5 = *(void **)(v0 + 848);
  uint64_t v6 = *(void *)(v0 + 832);
  uint64_t v7 = *(void *)(v0 + 808);
  uint64_t v8 = *(void *)(v0 + 800);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10004EF7C()
{
  uint64_t v1 = (void *)v0[108];
  uint64_t v2 = (void *)v0[107];
  os_log_type_t v3 = (void *)v0[106];
  uint64_t v4 = v0[104];
  uint64_t v5 = v0[101];
  uint64_t v6 = v0[100];
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10004F204(void *a1)
{
  uint64_t v11 = sub_10004DF20;
  uint64_t v12 = 0;
  uint64_t v7 = _NSConcreteStackBlock;
  uint64_t v8 = 1107296256;
  uint64_t v9 = sub_10006DC78;
  uint64_t v10 = &unk_10008E6B8;
  os_log_type_t v3 = _Block_copy(&v7);
  [a1 setInvalidationHandler:v3];
  _Block_release(v3);
  uint64_t v11 = sub_10004DF2C;
  uint64_t v12 = 0;
  uint64_t v7 = _NSConcreteStackBlock;
  uint64_t v8 = 1107296256;
  uint64_t v9 = sub_10006DC78;
  uint64_t v10 = &unk_10008E6E0;
  uint64_t v4 = _Block_copy(&v7);
  [a1 setInterruptionHandler:v4];
  _Block_release(v4);
  [a1 resume];
  id v5 = [self interfaceWithProtocol:&OBJC_PROTOCOL____TtP15FeedbackService33RemoteViewControllerReplyProtocol_];
  [a1 setExportedInterface:v5];

  [a1 setExportedObject:v1];
  return 1;
}

uint64_t sub_10004F3A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_100093DD0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100008580(&qword_100093E48);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092A68 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100006040(v11, (uint64_t)qword_100093C30);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v24 = a2;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v23 = v5;
    v26[0] = v16;
    *(_DWORD *)uint64_t v15 = 136446210;
    uint64_t v25 = sub_100007E60(0xD000000000000035, 0x800000010007E5A0, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s", v15, 0xCu);
    swift_arrayDestroy();
    uint64_t v5 = v23;
    swift_slowDealloc();
    a2 = v24;
    swift_slowDealloc();
  }

  uint64_t v17 = OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_remoteAlertHandle;
  uint64_t v18 = *(void **)(a1
                 + OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_remoteAlertHandle);
  if (v18)
  {
    [v18 unregisterObserver:a1];
    uint64_t v18 = *(void **)(a1 + v17);
  }
  [v18 invalidate];
  uint64_t v19 = a1
      + OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_checkedThrowingContinuation;
  swift_beginAccess();
  sub_10004F730(v19, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4))
  {
    sub_10000A738((uint64_t)v10, &qword_100093E48);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
    sub_10000A738((uint64_t)v10, &qword_100093E48);
    sub_10000FA84();
    uint64_t v20 = swift_allocError();
    unsigned char *v21 = 8;
    uint64_t v25 = v20;
    CheckedContinuation.resume(throwing:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_10004F730(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_100093E48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004F798(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004F7A8()
{
  return swift_release();
}

uint64_t sub_10004F7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_100093E48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004F818()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10004F850(uint64_t a1)
{
}

uint64_t sub_10004F858(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10004F8A8(char a1)
{
  unint64_t result = 0xD000000000000048;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      return result;
    case 4:
    case 6:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 5:
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v3._uint64_t countAndFlagsBits = static Strings.fbaBundleIdentifier.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 7:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 8:
      unint64_t result = 0xD00000000000001FLL;
      break;
    default:
      unint64_t result = 0xD000000000000010;
      break;
  }
  return result;
}

void *sub_10004F9F8(void *a1, uint64_t (*a2)(char *, uint64_t, uint64_t), void *a3, unint64_t a4)
{
  uint64_t v8 = sub_100008580(&qword_100093FC0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (void **)((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v14 = (void **)((char *)&v29 - v13);
  uint64_t v15 = sub_10004FC44(a1, a2, a3, a4);
  uint64_t v16 = v15[2];
  if (v16)
  {
    unint64_t v32 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v17 = (uint64_t)v15 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v18 = *(void *)(v9 + 72);
    uint64_t v29 = v15;
    uint64_t v30 = v18;
    uint64_t v31 = v12;
    do
    {
      sub_100059D80(v17, (uint64_t)v14);
      uint64_t v19 = *(int *)(v8 + 48);
      uint64_t v20 = (char *)v12 + v19;
      os_log_type_t v21 = (char *)v14 + v19;
      uint64_t v22 = *v14;
      *uint64_t v12 = *v14;
      uint64_t v23 = type metadata accessor for URL();
      uint64_t v24 = *(void *)(v23 - 8);
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v20, v21, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v24 + 8);
      id v26 = v22;
      v25(v20, v23);
      sub_10000A738((uint64_t)v14, &qword_100093FC0);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      uint64_t v12 = v31;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v17 += v30;
      --v16;
    }
    while (v16);
    uint64_t v27 = v32;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return &_swiftEmptyArrayStorage;
  }
  return v27;
}

void *sub_10004FC44(void *a1, uint64_t (*a2)(char *, uint64_t, uint64_t), void *a3, unint64_t a4)
{
  uint64_t v108 = sub_100008580(&qword_100093FC0);
  uint64_t v105 = *(void *)(v108 - 8);
  uint64_t v8 = __chkstk_darwin(v108);
  uint64_t v107 = (uint8_t **)((char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v104 = (uint8_t **)((char *)&v94 - v11);
  __chkstk_darwin(v10);
  uint64_t v106 = (uint64_t *)((char *)&v94 - v12);
  uint64_t v13 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v110 = *(void *)(v13 - 8);
  uint64_t v111 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100008580(&qword_100093E40);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  os_log_type_t v21 = (char *)&v94 - v20;
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v112 = (char *)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v114 = (char *)&v94 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v119 = (char *)&v94 - v28;
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v94 - v29;
  uint64_t v31 = a2;
  uint64_t v33 = v32;
  sub_1000479F0(a1, v31, a3, a4, 0, (uint64_t)v21);
  os_log_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v34(v21, 1, v22) != 1)
  {
    uint64_t v117 = v34;
    uint64_t v118 = v33 + 48;
    uint64_t v115 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    uint64_t v116 = v33 + 32;
    v115(v30, v21, v22);
    uint64_t v36 = self;
    id v37 = [v36 defaultManager];
    id v38 = [v36 defaultManager];
    sub_100008580(&qword_100093BE8);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_10007B630;
    *(void *)(v39 + 32) = NSURLIsDirectoryKey;
    uint64_t v40 = NSURLIsDirectoryKey;
    uint64_t v109 = v30;
    uint64_t v41 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

    swift_bridgeObjectRelease();
    if (!v41)
    {
      if (qword_100092AF0 != -1) {
        swift_once();
      }
      uint64_t v81 = type metadata accessor for Logger();
      sub_100006040(v81, (uint64_t)SharedLog);
      uint64_t v82 = v119;
      id v83 = v109;
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v119, v109, v22);
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v84, v85))
      {
        uint64_t v86 = v82;
        uint64_t v87 = (uint8_t *)swift_slowAlloc();
        uint64_t v121 = swift_slowAlloc();
        *(_DWORD *)uint64_t v87 = 136446210;
        uint64_t v88 = v86;
        uint64_t v89 = URL.path.getter();
        uint64_t v123 = sub_100007E60(v89, v90, &v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v91 = *(void (**)(char *, uint64_t))(v33 + 8);
        v91(v88, v22);
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "Failed to read directory [%{public}s]", v87, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v91(v109, v22);
      }
      else
      {

        uint64_t v93 = *(void (**)(char *, uint64_t))(v33 + 8);
        v93(v82, v22);
        v93(v83, v22);
      }
      return &_swiftEmptyArrayStorage;
    }
    NSEnumerator.makeIterator()();
    NSFastEnumerationIterator.next()();
    uint64_t v101 = v33;
    if (!v122)
    {
      uint64_t v35 = &_swiftEmptyArrayStorage;
      goto LABEL_40;
    }
    uint64_t v119 = 0;
    uint64_t v43 = v33;
    uint64_t v44 = (void (**)(char *, void, uint64_t, uint64_t))(v33 + 56);
    uint64_t v113 = (void (**)(char *, uint64_t))(v43 + 8);
    id v99 = (void (**)(void))(v43 + 16);
    uint64_t v35 = &_swiftEmptyArrayStorage;
    *(void *)&long long v42 = 136446210;
    long long v102 = v42;
    uint64_t v45 = v114;
    id v103 = (char *)&type metadata for Any + 8;
    unsigned int v98 = v41;
LABEL_7:
    uint64_t v100 = v35;
    char v46 = v117;
    while (1)
    {
      char v47 = swift_dynamicCast();
      uint64_t v48 = *v44;
      if ((v47 & 1) == 0) {
        break;
      }
      v48(v19, 0, 1, v22);
      if (v46(v19, 1, v22) == 1) {
        goto LABEL_9;
      }
      v115(v45, v19, v22);
      char v49 = v119;
      uint64_t v50 = Data.init(contentsOf:options:)();
      if (v49)
      {
        uint64_t v119 = 0;
        if (qword_100092AF0 != -1) {
          swift_once();
        }
        uint64_t v55 = type metadata accessor for Logger();
        sub_100006040(v55, (uint64_t)SharedLog);
        swift_errorRetain();
        swift_errorRetain();
        long long v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = swift_slowAlloc();
          uint64_t v123 = swift_slowAlloc();
          *(_DWORD *)uint64_t v58 = v102;
          uint64_t v120 = v49;
          swift_errorRetain();
          sub_100008580(&qword_100093940);
          uint64_t v59 = String.init<A>(describing:)();
          *(void *)(v58 + 4) = sub_100007E60(v59, v60, &v123);
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Failed to read item with error: [%{public}s]", (uint8_t *)v58, 0xCu);
          swift_arrayDestroy();
          uint64_t v45 = v114;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        swift_errorRelease();
        (*v113)(v45, v22);
      }
      else
      {
        uint64_t v52 = v50;
        unint64_t v53 = v51;
        sub_10000C524(0, &qword_100093FC8);
        type metadata accessor for FeedbackSubmission();
        uint64_t v54 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
        uint64_t v61 = (void *)v54;
        uint64_t v119 = 0;
        if (v54)
        {
          uint64_t v97 = (char *)v106 + *(int *)(v108 + 48);
          uint64_t *v106 = v54;
          unint64_t v72 = *v99;
          (*v99)();
          uint64_t v73 = v72;
          uint64_t v74 = v108;
          uint64_t v75 = (char *)v104 + *(int *)(v108 + 48);
          *uint64_t v104 = v61;
          ((void (*)(char *, char *, uint64_t))v73)(v75, v97, v22);
          uint64_t v76 = (char *)v107 + *(int *)(v74 + 48);
          *uint64_t v107 = v61;
          v115(v76, v75, v22);
          uint64_t v97 = v61;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v100 = (void *)sub_10007818C(0, v100[2] + 1, 1, (unint64_t)v100);
          }
          unint64_t v78 = v100[2];
          unint64_t v77 = v100[3];
          if (v78 >= v77 >> 1) {
            uint64_t v100 = (void *)sub_10007818C(v77 > 1, v78 + 1, 1, (unint64_t)v100);
          }
          unint64_t v79 = (unint64_t)v100;
          v100[2] = v78 + 1;
          sub_100029F94((uint64_t)v107, v79+ ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80))+ *(void *)(v105 + 72) * v78, &qword_100093FC0);
          uint64_t v80 = v52;
          uint64_t v35 = (void *)v79;
          sub_1000185C0(v80, v53);

          sub_10000A738((uint64_t)v106, &qword_100093FC0);
          uint64_t v45 = v114;
          (*v113)(v114, v22);
          NSFastEnumerationIterator.next()();
          uint64_t v41 = v98;
          if (!v122)
          {
LABEL_40:

            (*(void (**)(char *, uint64_t))(v110 + 8))(v15, v111);
            (*(void (**)(char *, uint64_t))(v101 + 8))(v109, v22);
            return v35;
          }
          goto LABEL_7;
        }
        if (qword_100092AF0 != -1) {
          swift_once();
        }
        uint64_t v62 = type metadata accessor for Logger();
        sub_100006040(v62, (uint64_t)SharedLog);
        ((void (*)(char *, char *, uint64_t))*v99)(v112, v45, v22);
        uint64_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = (uint8_t *)swift_slowAlloc();
          uint64_t v97 = (char *)swift_slowAlloc();
          uint64_t v123 = (uint64_t)v97;
          *(_DWORD *)uint64_t v65 = v102;
          unint64_t v66 = v65;
          uint64_t v94 = v65;
          sub_100059DE8(&qword_100093BF8, (void (*)(uint64_t))&type metadata accessor for URL);
          os_log_t v95 = v63;
          uint64_t v67 = v112;
          uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v66 + 4) = sub_100007E60(v68, v69, &v123);
          swift_bridgeObjectRelease();
          id v96 = *v113;
          v96(v67, v22);
          os_log_t v70 = v95;
          _os_log_impl((void *)&_mh_execute_header, v95, v64, "Failed to decode NSError in [%{public}s]", v94, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v45 = v114;
          swift_slowDealloc();
          sub_1000185C0(v52, v53);

          v96(v45, v22);
        }
        else
        {
          sub_1000185C0(v52, v53);

          uint64_t v71 = *v113;
          (*v113)(v112, v22);
          v71(v45, v22);
        }
      }
      char v46 = v117;
LABEL_10:
      NSFastEnumerationIterator.next()();
      if (!v122)
      {
        uint64_t v41 = v98;
        uint64_t v35 = v100;
        goto LABEL_40;
      }
    }
    v48(v19, 1, 1, v22);
LABEL_9:
    sub_10000A738((uint64_t)v19, &qword_100093E40);
    goto LABEL_10;
  }
  sub_10000A738((uint64_t)v21, &qword_100093E40);
  return &_swiftEmptyArrayStorage;
}

void *sub_100050A18(void *a1, uint64_t (*a2)(char *, uint64_t, uint64_t), void *a3, unint64_t a4)
{
  uint64_t v108 = sub_100008580(&qword_100093BF0);
  uint64_t v105 = *(void *)(v108 - 8);
  uint64_t v8 = __chkstk_darwin(v108);
  uint64_t v107 = (uint8_t **)((char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v104 = (uint8_t **)((char *)&v94 - v11);
  __chkstk_darwin(v10);
  uint64_t v106 = (uint64_t *)((char *)&v94 - v12);
  uint64_t v13 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v110 = *(void *)(v13 - 8);
  uint64_t v111 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100008580(&qword_100093E40);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  os_log_type_t v21 = (char *)&v94 - v20;
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v112 = (char *)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v114 = (char *)&v94 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v119 = (char *)&v94 - v28;
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v94 - v29;
  uint64_t v31 = a2;
  uint64_t v33 = v32;
  sub_1000479F0(a1, v31, a3, a4, 0, (uint64_t)v21);
  os_log_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v34(v21, 1, v22) != 1)
  {
    uint64_t v117 = v34;
    uint64_t v118 = v33 + 48;
    uint64_t v115 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    uint64_t v116 = v33 + 32;
    v115(v30, v21, v22);
    uint64_t v36 = self;
    id v37 = [v36 defaultManager];
    id v38 = [v36 defaultManager];
    sub_100008580(&qword_100093BE8);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_10007B630;
    *(void *)(v39 + 32) = NSURLIsDirectoryKey;
    uint64_t v40 = NSURLIsDirectoryKey;
    uint64_t v109 = v30;
    uint64_t v41 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

    swift_bridgeObjectRelease();
    if (!v41)
    {
      if (qword_100092AF0 != -1) {
        swift_once();
      }
      uint64_t v81 = type metadata accessor for Logger();
      sub_100006040(v81, (uint64_t)SharedLog);
      uint64_t v82 = v119;
      id v83 = v109;
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v119, v109, v22);
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v84, v85))
      {
        uint64_t v86 = v82;
        uint64_t v87 = (uint8_t *)swift_slowAlloc();
        uint64_t v121 = swift_slowAlloc();
        *(_DWORD *)uint64_t v87 = 136446210;
        uint64_t v88 = v86;
        uint64_t v89 = URL.path.getter();
        uint64_t v123 = sub_100007E60(v89, v90, &v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v91 = *(void (**)(char *, uint64_t))(v33 + 8);
        v91(v88, v22);
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "Failed to read directory [%{public}s]", v87, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v91(v109, v22);
      }
      else
      {

        uint64_t v93 = *(void (**)(char *, uint64_t))(v33 + 8);
        v93(v82, v22);
        v93(v83, v22);
      }
      return &_swiftEmptyArrayStorage;
    }
    NSEnumerator.makeIterator()();
    NSFastEnumerationIterator.next()();
    uint64_t v101 = v33;
    if (!v122)
    {
      uint64_t v35 = &_swiftEmptyArrayStorage;
      goto LABEL_40;
    }
    uint64_t v119 = 0;
    uint64_t v43 = v33;
    uint64_t v44 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
    uint64_t v113 = (void (**)(char *, uint64_t))(v43 + 8);
    id v99 = (void (**)(void))(v43 + 16);
    uint64_t v35 = &_swiftEmptyArrayStorage;
    *(void *)&long long v42 = 136446210;
    long long v102 = v42;
    uint64_t v45 = v114;
    id v103 = (char *)&type metadata for Any + 8;
    unsigned int v98 = v41;
LABEL_7:
    uint64_t v100 = v35;
    char v46 = v117;
    while (1)
    {
      char v47 = swift_dynamicCast();
      uint64_t v48 = *v44;
      if ((v47 & 1) == 0) {
        break;
      }
      v48(v19, 0, 1, v22);
      if (v46(v19, 1, v22) == 1) {
        goto LABEL_9;
      }
      v115(v45, v19, v22);
      char v49 = v119;
      uint64_t v50 = Data.init(contentsOf:options:)();
      if (v49)
      {
        uint64_t v119 = 0;
        if (qword_100092AF0 != -1) {
          swift_once();
        }
        uint64_t v55 = type metadata accessor for Logger();
        sub_100006040(v55, (uint64_t)SharedLog);
        swift_errorRetain();
        swift_errorRetain();
        long long v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = swift_slowAlloc();
          uint64_t v123 = swift_slowAlloc();
          *(_DWORD *)uint64_t v58 = v102;
          uint64_t v120 = v49;
          swift_errorRetain();
          sub_100008580(&qword_100093940);
          uint64_t v59 = String.init<A>(describing:)();
          *(void *)(v58 + 4) = sub_100007E60(v59, v60, &v123);
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Failed to read item with error: [%{public}s]", (uint8_t *)v58, 0xCu);
          swift_arrayDestroy();
          uint64_t v45 = v114;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        swift_errorRelease();
        (*v113)(v45, v22);
      }
      else
      {
        uint64_t v52 = v50;
        unint64_t v53 = v51;
        sub_10000C524(0, &qword_100093FC8);
        sub_10000C524(0, (unint64_t *)&qword_100093150);
        uint64_t v54 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
        uint64_t v61 = (void *)v54;
        uint64_t v119 = 0;
        if (v54)
        {
          uint64_t v97 = (char *)v106 + *(int *)(v108 + 48);
          uint64_t *v106 = v54;
          unint64_t v72 = *v99;
          (*v99)();
          uint64_t v73 = v72;
          uint64_t v74 = v108;
          uint64_t v75 = (char *)v104 + *(int *)(v108 + 48);
          *uint64_t v104 = v61;
          ((void (*)(char *, char *, uint64_t))v73)(v75, v97, v22);
          uint64_t v76 = (char *)v107 + *(int *)(v74 + 48);
          *uint64_t v107 = v61;
          v115(v76, v75, v22);
          uint64_t v97 = v61;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v100 = (void *)sub_1000781A0(0, v100[2] + 1, 1, (unint64_t)v100);
          }
          unint64_t v78 = v100[2];
          unint64_t v77 = v100[3];
          if (v78 >= v77 >> 1) {
            uint64_t v100 = (void *)sub_1000781A0(v77 > 1, v78 + 1, 1, (unint64_t)v100);
          }
          unint64_t v79 = (unint64_t)v100;
          v100[2] = v78 + 1;
          sub_100029F94((uint64_t)v107, v79+ ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80))+ *(void *)(v105 + 72) * v78, &qword_100093BF0);
          uint64_t v80 = v52;
          uint64_t v35 = (void *)v79;
          sub_1000185C0(v80, v53);

          sub_10000A738((uint64_t)v106, &qword_100093BF0);
          uint64_t v45 = v114;
          (*v113)(v114, v22);
          NSFastEnumerationIterator.next()();
          uint64_t v41 = v98;
          if (!v122)
          {
LABEL_40:

            (*(void (**)(char *, uint64_t))(v110 + 8))(v15, v111);
            (*(void (**)(char *, uint64_t))(v101 + 8))(v109, v22);
            return v35;
          }
          goto LABEL_7;
        }
        if (qword_100092AF0 != -1) {
          swift_once();
        }
        uint64_t v62 = type metadata accessor for Logger();
        sub_100006040(v62, (uint64_t)SharedLog);
        ((void (*)(char *, char *, uint64_t))*v99)(v112, v45, v22);
        uint64_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = (uint8_t *)swift_slowAlloc();
          uint64_t v97 = (char *)swift_slowAlloc();
          uint64_t v123 = (uint64_t)v97;
          *(_DWORD *)uint64_t v65 = v102;
          unint64_t v66 = v65;
          uint64_t v94 = v65;
          sub_100059DE8(&qword_100093BF8, (void (*)(uint64_t))&type metadata accessor for URL);
          os_log_t v95 = v63;
          uint64_t v67 = v112;
          uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v66 + 4) = sub_100007E60(v68, v69, &v123);
          swift_bridgeObjectRelease();
          id v96 = *v113;
          v96(v67, v22);
          os_log_t v70 = v95;
          _os_log_impl((void *)&_mh_execute_header, v95, v64, "Failed to decode NSError in [%{public}s]", v94, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v45 = v114;
          swift_slowDealloc();
          sub_1000185C0(v52, v53);

          v96(v45, v22);
        }
        else
        {
          sub_1000185C0(v52, v53);

          uint64_t v71 = *v113;
          (*v113)(v112, v22);
          v71(v45, v22);
        }
      }
      char v46 = v117;
LABEL_10:
      NSFastEnumerationIterator.next()();
      if (!v122)
      {
        uint64_t v41 = v98;
        uint64_t v35 = v100;
        goto LABEL_40;
      }
    }
    v48(v19, 1, 1, v22);
LABEL_9:
    sub_10000A738((uint64_t)v19, &qword_100093E40);
    goto LABEL_10;
  }
  sub_10000A738((uint64_t)v21, &qword_100093E40);
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000517FC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_100093E58);
  sub_100006040(v0, (uint64_t)qword_100093E58);
  static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)();
}

void sub_100051860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), void (*a6)(void))
{
  uint64_t v7 = v6;
  uint64_t v111 = a6;
  uint64_t v11 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v11 - 8);
  uint64_t v109 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for FormLaunchConfiguration();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v105 = (int *)v13;
  uint64_t v106 = v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v107 = v16;
  uint64_t v108 = (uint64_t)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v86 - v17;
  if (qword_100092A70 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100006040(v19, (uint64_t)qword_100093E58);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v103 = v7;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v104 = a4;
    uint64_t v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v110 = a5;
    v113[0] = v24;
    uint64_t v102 = a1;
    *(_DWORD *)uint64_t v23 = 136446210;
    uint64_t v112 = sub_100007E60(0xD00000000000003DLL, 0x800000010007E840, v113);
    uint64_t v7 = v103;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s", v23, 0xCu);
    swift_arrayDestroy();
    a5 = v110;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  type metadata accessor for FBKSForm();
  uint64_t v25 = static FBKSForm.fromJSON(data:)();
  if (!v25)
  {
    if (!a5) {
      return;
    }
    id v41 = sub_10001AC84(0xD00000000000001FLL, 0x800000010007E7F0);
    a5();
    goto LABEL_18;
  }
  uint64_t v26 = (void *)v25;
  uint64_t v27 = *(void **)(v7 + 16);
  if (v27)
  {
    if (v27 == (void *)1
      || (swift_bridgeObjectRetain(),
          uint64_t v28 = dispatch thunk of FBKSForm.identifier.getter(),
          char v30 = sub_1000750C8(v28, v29, v27),
          swift_bridgeObjectRelease(),
          sub_10005860C((unint64_t)v27),
          (v30 & 1) == 0))
    {
      id v41 = v26;
      long long v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        v113[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 136446210;
        uint64_t v45 = dispatch thunk of FBKSForm.identifier.getter();
        uint64_t v112 = sub_100007E60(v45, v46, v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Client is not entitled to access form [%{public}s]", v44, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        if (a5)
        {
LABEL_16:
          sub_10000FA84();
          swift_allocError();
          *char v47 = 7;
          uint64_t v48 = (void *)_convertErrorToNSError(_:)();
          a5();

          swift_errorRelease();
          return;
        }
      }
      else
      {

        if (a5) {
          goto LABEL_16;
        }
      }
LABEL_18:

      return;
    }
  }
  type metadata accessor for FBKSLaunchConfiguration();
  uint64_t v31 = static FBKSLaunchConfiguration.fromJSON(data:)();
  if (v31)
  {
    uint64_t v32 = (void *)v31;
    uint64_t v110 = a5;
    uint64_t v33 = v26;
    os_log_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v104 = swift_slowAlloc();
      v113[0] = v104;
      *(_DWORD *)uint64_t v36 = 136446722;
      uint64_t v112 = sub_100007E60(0xD00000000000003DLL, 0x800000010007E840, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2082;
      uint64_t v37 = dispatch thunk of FBKSForm.identifier.getter();
      uint64_t v112 = sub_100007E60(v37, v38, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 22) = 2082;
      dispatch thunk of FBKSForm.authenticationMethod.getter();
      uint64_t v39 = FBKSForm.AuthenticationMethod.description.getter();
      uint64_t v112 = sub_100007E60(v39, v40, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "%{public}s form: [%{public}s] authentication method: [%{public}s]", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      os_log_t v34 = v33;
    }

    uint64_t v92 = v33;
    uint64_t v102 = dispatch thunk of FBKSForm.identifier.getter();
    uint64_t v51 = v50;
    uint64_t v101 = dispatch thunk of FBKSForm.authenticationMethod.getter();
    uint64_t v52 = dispatch thunk of FBKSForm.answers.getter();
    id v91 = v32;
    uint64_t v100 = dispatch thunk of FBKSLaunchConfiguration.localizedPromptTitle.getter();
    uint64_t v95 = v53;
    uint64_t v104 = dispatch thunk of FBKSLaunchConfiguration.localizedPromptMessage.getter();
    uint64_t v94 = v54;
    uint64_t v103 = dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewProceedButtonTitle.getter();
    uint64_t v93 = v55;
    uint64_t v90 = dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewDeclineButtonTitle.getter();
    uint64_t v57 = v56;
    int v96 = dispatch thunk of FBKSLaunchConfiguration.skipsPrompt.getter();
    int v99 = dispatch thunk of FBKSLaunchConfiguration.alwaysLaunchInRemoteAlert.getter();
    uint64_t v98 = dispatch thunk of FBKSLaunchConfiguration.promptStyle.getter();
    int v97 = dispatch thunk of FBKSLaunchConfiguration.notifyImmediately.getter();
    uint64_t v58 = v105;
    uint64_t v59 = &v18[v105[8]];
    uint64_t v60 = type metadata accessor for Date();
    uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56);
    v61(v59, 1, 1, v60);
    v61(&v18[v58[9]], 1, 1, v60);
    uint64_t v89 = v57;
    swift_bridgeObjectRetain();
    uint64_t v62 = v51;
    uint64_t v87 = v51;
    swift_bridgeObjectRetain();
    uint64_t v63 = v52;
    uint64_t v88 = v52;
    swift_bridgeObjectRetain();
    uint64_t v64 = v95;
    swift_bridgeObjectRetain();
    uint64_t v65 = v94;
    swift_bridgeObjectRetain();
    uint64_t v66 = v93;
    swift_bridgeObjectRetain();
    Date.init()();
    *(void *)uint64_t v18 = v102;
    *((void *)v18 + 1) = v62;
    *((void *)v18 + 2) = v101;
    *((void *)v18 + 3) = v63;
    uint64_t v67 = v92;
    *((void *)v18 + 4) = v100;
    *((void *)v18 + 5) = v64;
    *((void *)v18 + 6) = v104;
    *((void *)v18 + 7) = v65;
    *((void *)v18 + 8) = v103;
    *((void *)v18 + 9) = v66;
    uint64_t v68 = v90;
    *((void *)v18 + 10) = v90;
    *((void *)v18 + 11) = v57;
    v18[96] = v96;
    v18[97] = v99;
    *(_DWORD *)(v18 + 98) = v113[0];
    *((_WORD *)v18 + 51) = WORD2(v113[0]);
    *((void *)v18 + 13) = v98;
    v18[112] = v97;
    *(void *)&v18[v58[7]] = 0;
    *(void *)&v18[v58[10]] = 0;
    uint64_t v69 = (uint64_t)v109;
    static TaskPriority.utility.getter();
    uint64_t v70 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v69, 0, 1, v70);
    uint64_t v71 = v108;
    sub_100013D84((uint64_t)v18, v108);
    unint64_t v72 = (*(unsigned __int8 *)(v106 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
    unint64_t v73 = (v107 + v72 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v74 = (void *)swift_allocObject();
    v74[2] = 0;
    v74[3] = 0;
    uint64_t v75 = v87;
    v74[4] = v102;
    v74[5] = v75;
    uint64_t v76 = v88;
    v74[6] = v101;
    v74[7] = v76;
    sub_100013D20(v71, (uint64_t)v74 + v72);
    *(void *)((char *)v74 + v73) = v67;
    unint64_t v77 = (char *)v74 + ((v73 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v78 = v95;
    *(void *)unint64_t v77 = v100;
    *((void *)v77 + 1) = v78;
    uint64_t v79 = v94;
    *((void *)v77 + 2) = v104;
    *((void *)v77 + 3) = v79;
    uint64_t v80 = v93;
    *((void *)v77 + 4) = v103;
    *((void *)v77 + 5) = v80;
    uint64_t v81 = v89;
    *((void *)v77 + 6) = v68;
    *((void *)v77 + 7) = v81;
    v77[64] = v96;
    v77[65] = v99;
    *(_DWORD *)(v77 + 66) = v113[0];
    *((_WORD *)v77 + 35) = WORD2(v113[0]);
    *((void *)v77 + 9) = v98;
    v77[80] = v97;
    uint64_t v82 = (void (**)(void))((char *)v74 + ((v73 + 103) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v83 = (uint64_t)v110;
    uint64_t v84 = v111;
    *uint64_t v82 = v110;
    v82[1] = v84;
    os_log_type_t v85 = v67;
    sub_1000589E0(v83);
    sub_10006DA84(v69, (uint64_t)&unk_100093F60, (uint64_t)v74);

    swift_release();
    sub_10000A738(v69, &qword_1000938B0);
    sub_100013DE8((uint64_t)v18);
  }
  else
  {
    if (a5)
    {
      id v49 = sub_10001AC84(0xD00000000000002ALL, 0x800000010007E810);
      a5();
    }
  }
}

uint64_t sub_1000522DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 280) = v13;
  *(void *)(v8 + 288) = v14;
  *(_OWORD *)(v8 + 264) = v12;
  *(void *)(v8 + 248) = a7;
  *(void *)(v8 + 256) = a8;
  *(void *)(v8 + 232) = a5;
  *(void *)(v8 + 240) = a6;
  *(void *)(v8 + 224) = a4;
  sub_100008580((uint64_t *)&unk_100094420);
  *(void *)(v8 + 296) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for FormItem();
  *(void *)(v8 + 304) = v9;
  *(void *)(v8 + 312) = *(void *)(v9 - 8);
  *(void *)(v8 + 320) = swift_task_alloc();
  *(void *)(v8 + 328) = swift_task_alloc();
  *(void *)(v8 + 336) = swift_task_alloc();
  *(void *)(v8 + 344) = swift_task_alloc();
  *(void *)(v8 + 352) = swift_task_alloc();
  *(void *)(v8 + 360) = swift_task_alloc();
  return _swift_task_switch(sub_10005242C, 0, 0);
}

uint64_t sub_10005242C()
{
  uint64_t v2 = v0[28];
  uint64_t v1 = (void *)v0[29];
  static Strings.Daemon.bundleIdentifier.getter();
  v3._uint64_t countAndFlagsBits = 0x7463656C6C6F632ELL;
  v3._object = (void *)0xE90000000000002ELL;
  String.append(_:)(v3);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v1;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for SeedPortal();
  v0[46] = static SeedPortal.shared.getter();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[47] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10005256C;
  uint64_t v6 = v0[37];
  uint64_t v7 = v0[30];
  uint64_t v8 = v0[31];
  uint64_t v9 = v0[28];
  uint64_t v10 = v0[29];
  return sub_100022160(v6, v9, v10, v7, v8, 0);
}

uint64_t sub_10005256C()
{
  *(void *)(*(void *)v1 + 384) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100053550;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100052688;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100052688()
{
  uint64_t v98 = v0;
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 296);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000A738(v3, (uint64_t *)&unk_100094420);
    if (qword_100092A70 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100006040(v4, (uint64_t)qword_100093E58);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    unint64_t v8 = *(void *)(v0 + 232);
    if (v7)
    {
      uint64_t v9 = *(void *)(v0 + 224);
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v96 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 168) = sub_100007E60(v9, v8, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Form [%s] is not available. Will not proceed.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    if (qword_100092A58 != -1) {
      swift_once();
    }
    uint64_t v28 = *(void **)(v0 + 256);
    uint64_t v29 = qword_1000964D8;
    *(void *)(v0 + 480) = qword_1000964D8;
    *(void *)(v0 + 488) = *v28;
    *(void *)(v0 + 496) = v28[1];
    sub_10000FA84();
    *(void *)(v0 + 504) = swift_allocError();
    *char v30 = 1;
    *(void *)(v0 + 512) = _convertErrorToNSError(_:)();
    return _swift_task_switch(sub_100055304, v29, 0);
  }
  (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 360), v3, v1);
  if (qword_100092A70 != -1) {
    swift_once();
  }
  uint64_t v93 = v0 + 593;
  uint64_t v11 = *(void *)(v0 + 352);
  uint64_t v12 = *(void *)(v0 + 360);
  uint64_t v13 = *(void *)(v0 + 304);
  uint64_t v14 = *(void *)(v0 + 312);
  uint64_t v15 = type metadata accessor for Logger();
  *(void *)(v0 + 392) = sub_100006040(v15, (uint64_t)qword_100093E58);
  uint64_t v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v94(v11, v12, v13);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v19 = *(void *)(v0 + 352);
  uint64_t v20 = *(void *)(v0 + 304);
  uint64_t v21 = *(void *)(v0 + 312);
  if (v18)
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v96 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    sub_100059DE8(&qword_100093F68, (void (*)(uint64_t))&type metadata accessor for FormItem);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 152) = sub_100007E60(v23, v24, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v25(v19, v20);
    os_log_type_t v26 = v17;
    uint64_t v27 = v25;
    _os_log_impl((void *)&_mh_execute_header, v16, v26, "Fetched form [%s]", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v27(v19, v20);
  }

  *(void *)(v0 + 400) = v27;
  uint64_t v31 = *(void *)(v0 + 360);
  uint64_t v32 = *(void *)(v0 + 344);
  uint64_t v33 = *(void *)(v0 + 304);
  uint64_t v34 = FBKSForm.AuthenticationMethod.rawValue.getter();
  uint64_t v35 = FBKSForm.AuthenticationMethod.rawValue.getter();
  v94(v32, v31, v33);
  uint64_t v36 = *(void *)(v0 + 344);
  uint64_t v37 = *(void *)(v0 + 304);
  if (v34 == v35)
  {
    v27(*(void *)(v0 + 344), *(void *)(v0 + 304));
  }
  else
  {
    char v38 = FormItem.isSurvey.getter();
    v27(v36, v37);
    if (v38)
    {
      v94(*(void *)(v0 + 336), *(void *)(v0 + 360), *(void *)(v0 + 304));
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.default.getter();
      BOOL v41 = os_log_type_enabled(v39, v40);
      uint64_t v42 = *(void *)(v0 + 336);
      uint64_t v43 = *(void *)(v0 + 304);
      if (v41)
      {
        uint64_t v92 = v27;
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        uint64_t v96 = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 136315138;
        sub_100059DE8(&qword_100093F68, (void (*)(uint64_t))&type metadata accessor for FormItem);
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 96) = sub_100007E60(v45, v46, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v92(v42, v43);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Making survey [%s] available in FBA inbox", v44, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v27 = v92;
        swift_slowDealloc();
      }
      else
      {
        v27(*(void *)(v0 + 336), *(void *)(v0 + 304));
      }

      type metadata accessor for FBKSSharedPersistence();
      dispatch thunk of FBKSForm.identifier.getter();
      static FBKSSharedPersistence.saveSurveyTatInFBAInbox(formIdentifier:)();
      swift_bridgeObjectRelease();
    }
  }
  sub_100029F94(*(void *)(v0 + 272) + 64, v93, &qword_100094410);
  sub_100029F94(v93, v0 + 594, &qword_100094410);
  if (*(unsigned char *)(v0 + 594))
  {
    char v47 = FormItem.isSurvey.getter();
    uint64_t v48 = *(void *)(v0 + 360);
    uint64_t v49 = *(void *)(v0 + 304);
    if (v47)
    {
      v94(*(void *)(v0 + 328), v48, v49);
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.default.getter();
      BOOL v52 = os_log_type_enabled(v50, v51);
      uint64_t v53 = *(void *)(v0 + 328);
      uint64_t v54 = *(void *)(v0 + 304);
      if (v52)
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        *(_DWORD *)uint64_t v55 = 136315138;
        uint64_t v96 = v56;
        sub_100059DE8(&qword_100093F68, (void (*)(uint64_t))&type metadata accessor for FormItem);
        uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 160) = sub_100007E60(v57, v58, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v27(v53, v54);
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Skipping prompt for form [%s].", v55, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        v27(*(void *)(v0 + 328), *(void *)(v0 + 304));
      }

      uint64_t v67 = *(void (**)(void))(v0 + 280);
      if (v67) {
        v67(0);
      }
LABEL_50:
      v27(*(void *)(v0 + 360), *(void *)(v0 + 304));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v90 = *(uint64_t (**)(void))(v0 + 8);
      return v90();
    }
    v94(*(void *)(v0 + 320), v48, v49);
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    BOOL v61 = os_log_type_enabled(v59, v60);
    uint64_t v62 = *(void *)(v0 + 320);
    uint64_t v63 = *(void *)(v0 + 304);
    if (v61)
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      uint64_t v96 = swift_slowAlloc();
      *(_DWORD *)uint64_t v64 = 136315138;
      sub_100059DE8(&qword_100093F68, (void (*)(uint64_t))&type metadata accessor for FormItem);
      uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 216) = sub_100007E60(v65, v66, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v27(v62, v63);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Skipping prompt is not compatible with feedback form [%s].", v64, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v27(*(void *)(v0 + 320), *(void *)(v0 + 304));
    }
  }
  uint64_t v68 = *(void *)(v0 + 272);
  uint64_t v69 = *(void *)(v68 + 72);
  if (v69 == 1)
  {
    char v77 = FormItem.isSurvey.getter();
    uint64_t v95 = (uint64_t (*)(uint64_t, char))((char *)&dword_100093A48 + dword_100093A48);
    uint64_t v78 = (void *)swift_task_alloc();
    *(void *)(v0 + 424) = v78;
    *uint64_t v78 = v0;
    v78[1] = sub_100053D44;
    uint64_t v79 = *(void *)(v0 + 272);
    return v95(v79, v77 & 1);
  }
  else
  {
    if (v69 != 2)
    {
      sub_100013E44(*(void *)(v0 + 272));
      sub_100013E44(v68);
      uint64_t v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.error.getter();
      BOOL v82 = os_log_type_enabled(v80, v81);
      uint64_t v83 = *(void *)(v0 + 272);
      if (v82)
      {
        uint64_t v84 = (uint8_t *)swift_slowAlloc();
        uint64_t v96 = swift_slowAlloc();
        *(_DWORD *)uint64_t v84 = 136315138;
        *(void *)(v0 + 184) = v69;
        uint64_t v85 = String.init<A>(describing:)();
        *(void *)(v0 + 192) = sub_100007E60(v85, v86, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100013E9C(v83);
        sub_100013E9C(v83);
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "Prompt style not handled %s", v84, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100013E9C(*(void *)(v0 + 272));
        sub_100013E9C(v83);
      }

      uint64_t v87 = *(void (**)(id))(v0 + 280);
      if (v87)
      {
        uint64_t v96 = 0;
        unint64_t v97 = 0xE000000000000000;
        _StringGuts.grow(_:)(27);
        swift_bridgeObjectRelease();
        uint64_t v96 = 0xD000000000000019;
        unint64_t v97 = 0x800000010007E880;
        *(void *)(v0 + 176) = v69;
        v88._uint64_t countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v88);
        swift_bridgeObjectRelease();
        id v89 = sub_10001AC84(v96, v97);
        swift_bridgeObjectRelease();
        v87(v89);
      }
      goto LABEL_50;
    }
    if (qword_100092A00 != -1) {
      swift_once();
    }
    uint64_t v70 = (void *)swift_task_alloc();
    *(void *)(v0 + 408) = v70;
    *uint64_t v70 = v0;
    v70[1] = sub_100053C30;
    uint64_t v71 = *(void *)(v0 + 360);
    uint64_t v72 = *(void *)(v0 + 272);
    uint64_t v73 = *(void *)(v0 + 240);
    uint64_t v74 = *(void *)(v0 + 248);
    uint64_t v76 = *(void *)(v0 + 224);
    uint64_t v75 = *(void *)(v0 + 232);
    return sub_100010130(v76, v75, v73, v74, v71, v72);
  }
}

uint64_t sub_100053550()
{
  uint64_t v32 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 384);
  *(void *)(v0 + 72) = v1;
  *(void *)(v0 + 520) = v1;
  swift_errorRetain();
  sub_100008580(&qword_100093940);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    int v2 = *(unsigned __int8 *)(v0 + 592);
    if (v2 == 5)
    {
      if (qword_100092A70 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_100006040(v3, (uint64_t)qword_100093E58);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v4, v5)) {
        goto LABEL_16;
      }
      uint64_t v6 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      *(void *)(v0 + 104) = sub_100007E60(0xD00000000000003DLL, 0x800000010007E840, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2080;
      unint64_t v7 = sub_10004F8A8(5);
      *(void *)(v0 + 80) = sub_100007E60(v7, v8, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = v4;
      os_log_type_t v10 = v5;
    }
    else
    {
      if (qword_100092A70 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_100006040(v18, (uint64_t)qword_100093E58);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v4, v19)) {
        goto LABEL_16;
      }
      uint64_t v6 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      *(void *)(v0 + 136) = sub_100007E60(0xD00000000000003DLL, 0x800000010007E840, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2080;
      unint64_t v20 = sub_10004F8A8(v2);
      *(void *)(v0 + 144) = sub_100007E60(v20, v21, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = v4;
      os_log_type_t v10 = v19;
    }
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s failed with: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_16:

    sub_10000FA84();
    swift_allocError();
    unsigned char *v22 = v2;
    *(void *)(v0 + 528) = _convertErrorToNSError(_:)();
    swift_errorRelease();
    if (qword_100092A58 != -1) {
      swift_once();
    }
    uint64_t v23 = *(void **)(v0 + 256);
    uint64_t v24 = qword_1000964D8;
    *(void *)(v0 + 536) = qword_1000964D8;
    *(void *)(v0 + 544) = *v23;
    *(void *)(v0 + 552) = v23[1];
    uint64_t v25 = sub_1000553D0;
    goto LABEL_23;
  }
  uint64_t v11 = (uint64_t *)(v0 + 16);
  swift_errorRelease();
  if (qword_100092A70 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100006040(v12, (uint64_t)qword_100093E58);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446466;
    *(void *)(v0 + 112) = sub_100007E60(0xD00000000000003DLL, 0x800000010007E840, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    *(void *)(v0 + 120) = v1;
    swift_errorRetain();
    uint64_t v16 = String.init<A>(describing:)();
    *(void *)(v0 + 128) = sub_100007E60(v16, v17, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s failed with: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue();
  uint64_t v27 = *(void *)(v0 + 48);
  uint64_t v26 = *(void *)(v0 + 56);
  *(void *)(v0 + 40) = v26;
  uint64_t v28 = sub_100020478(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v28, v27, v26);
  *(void *)(v0 + 560) = static FBKSError.nsError(anyError:)();
  sub_10000A888((uint64_t)v11);
  if (qword_100092A58 != -1) {
    swift_once();
  }
  uint64_t v29 = *(void **)(v0 + 256);
  uint64_t v24 = qword_1000964D8;
  *(void *)(v0 + 568) = qword_1000964D8;
  *(void *)(v0 + 576) = *v29;
  *(void *)(v0 + 584) = v29[1];
  uint64_t v25 = sub_100055528;
LABEL_23:
  return _swift_task_switch(v25, v24, 0);
}

uint64_t sub_100053C30()
{
  *(void *)(*(void *)v1 + 416) = v0;
  swift_task_dealloc();
  if (v0) {
    int v2 = sub_100055690;
  }
  else {
    int v2 = sub_100059E50;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100053D44(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 432) = v1;
  swift_task_dealloc();
  if (v1)
  {
    os_log_type_t v5 = sub_1000541EC;
  }
  else
  {
    *(unsigned char *)(v4 + 595) = a1;
    os_log_type_t v5 = sub_100053E6C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100053E6C()
{
  uint64_t v16 = v0;
  char v1 = *(unsigned char *)(v0 + 595);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  int v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 232);
  if (v1)
  {
    if (v4)
    {
      uint64_t v13 = *(void *)(v0 + 224);
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 200) = sub_100007E60(v13, v5, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "User declined [%s].", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    if (qword_100092A58 != -1) {
      swift_once();
    }
    uint64_t v10 = qword_1000964D8;
    *(void *)(v0 + 456) = qword_1000964D8;
    *(void *)(v0 + 464) = dispatch thunk of FBKSForm.identifier.getter();
    *(void *)(v0 + 472) = v11;
    uint64_t v9 = sub_10005528C;
    uint64_t v8 = v10;
  }
  else
  {
    if (v4)
    {
      uint64_t v14 = *(void *)(v0 + 224);
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 208) = sub_100007E60(v14, v5, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "User agreed to [%s]. Will launch feedback", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    if (qword_100092A30 != -1) {
      swift_once();
    }
    uint64_t v8 = qword_1000964B0;
    uint64_t v9 = sub_1000548E0;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_1000541EC()
{
  uint64_t v32 = v0;
  (*(void (**)(void, void))(v0 + 400))(*(void *)(v0 + 360), *(void *)(v0 + 304));
  uint64_t v1 = *(void *)(v0 + 432);
  *(void *)(v0 + 72) = v1;
  *(void *)(v0 + 520) = v1;
  swift_errorRetain();
  sub_100008580(&qword_100093940);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    int v2 = *(unsigned __int8 *)(v0 + 592);
    if (v2 == 5)
    {
      if (qword_100092A70 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_100006040(v3, (uint64_t)qword_100093E58);
      BOOL v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v4, v5)) {
        goto LABEL_16;
      }
      uint64_t v6 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      *(void *)(v0 + 104) = sub_100007E60(0xD00000000000003DLL, 0x800000010007E840, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2080;
      unint64_t v7 = sub_10004F8A8(5);
      *(void *)(v0 + 80) = sub_100007E60(v7, v8, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = v4;
      os_log_type_t v10 = v5;
    }
    else
    {
      if (qword_100092A70 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_100006040(v18, (uint64_t)qword_100093E58);
      BOOL v4 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v4, v19)) {
        goto LABEL_16;
      }
      uint64_t v6 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      *(void *)(v0 + 136) = sub_100007E60(0xD00000000000003DLL, 0x800000010007E840, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2080;
      unint64_t v20 = sub_10004F8A8(v2);
      *(void *)(v0 + 144) = sub_100007E60(v20, v21, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = v4;
      os_log_type_t v10 = v19;
    }
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s failed with: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_16:

    sub_10000FA84();
    swift_allocError();
    unsigned char *v22 = v2;
    *(void *)(v0 + 528) = _convertErrorToNSError(_:)();
    swift_errorRelease();
    if (qword_100092A58 != -1) {
      swift_once();
    }
    uint64_t v23 = *(void **)(v0 + 256);
    uint64_t v24 = qword_1000964D8;
    *(void *)(v0 + 536) = qword_1000964D8;
    *(void *)(v0 + 544) = *v23;
    *(void *)(v0 + 552) = v23[1];
    uint64_t v25 = sub_1000553D0;
    goto LABEL_23;
  }
  uint64_t v11 = (uint64_t *)(v0 + 16);
  swift_errorRelease();
  if (qword_100092A70 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100006040(v12, (uint64_t)qword_100093E58);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446466;
    *(void *)(v0 + 112) = sub_100007E60(0xD00000000000003DLL, 0x800000010007E840, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    *(void *)(v0 + 120) = v1;
    swift_errorRetain();
    uint64_t v16 = String.init<A>(describing:)();
    *(void *)(v0 + 128) = sub_100007E60(v16, v17, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s failed with: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue();
  uint64_t v27 = *(void *)(v0 + 48);
  uint64_t v26 = *(void *)(v0 + 56);
  *(void *)(v0 + 40) = v26;
  uint64_t v28 = sub_100020478(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v28, v27, v26);
  *(void *)(v0 + 560) = static FBKSError.nsError(anyError:)();
  sub_10000A888((uint64_t)v11);
  if (qword_100092A58 != -1) {
    swift_once();
  }
  uint64_t v29 = *(void **)(v0 + 256);
  uint64_t v24 = qword_1000964D8;
  *(void *)(v0 + 568) = qword_1000964D8;
  *(void *)(v0 + 576) = *v29;
  *(void *)(v0 + 584) = v29[1];
  uint64_t v25 = sub_100055528;
LABEL_23:
  return _swift_task_switch(v25, v24, 0);
}

uint64_t sub_1000548E0()
{
  sub_100030E80(v0[32]);
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000943F8
                                                                                    + dword_1000943F8);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[55] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000549A4;
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[31];
  uint64_t v7 = v0[28];
  uint64_t v6 = v0[29];
  return v9(v7, v6, v4, v5, v3, v2);
}

uint64_t sub_1000549A4()
{
  *(void *)(*(void *)v1 + 448) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100054B98;
  }
  else {
    uint64_t v2 = sub_100054AB8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100054AB8()
{
  uint64_t v1 = *(void (**)(void))(v0 + 280);
  if (v1) {
    v1(0);
  }
  (*(void (**)(void, void))(v0 + 400))(*(void *)(v0 + 360), *(void *)(v0 + 304));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100054B98()
{
  uint64_t v32 = v0;
  (*(void (**)(void, void))(v0 + 400))(*(void *)(v0 + 360), *(void *)(v0 + 304));
  uint64_t v1 = *(void *)(v0 + 448);
  *(void *)(v0 + 72) = v1;
  *(void *)(v0 + 520) = v1;
  swift_errorRetain();
  sub_100008580(&qword_100093940);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    int v2 = *(unsigned __int8 *)(v0 + 592);
    if (v2 == 5)
    {
      if (qword_100092A70 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_100006040(v3, (uint64_t)qword_100093E58);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v4, v5)) {
        goto LABEL_16;
      }
      uint64_t v6 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      *(void *)(v0 + 104) = sub_100007E60(0xD00000000000003DLL, 0x800000010007E840, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2080;
      unint64_t v7 = sub_10004F8A8(5);
      *(void *)(v0 + 80) = sub_100007E60(v7, v8, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = v4;
      os_log_type_t v10 = v5;
    }
    else
    {
      if (qword_100092A70 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_100006040(v18, (uint64_t)qword_100093E58);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v4, v19)) {
        goto LABEL_16;
      }
      uint64_t v6 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      *(void *)(v0 + 136) = sub_100007E60(0xD00000000000003DLL, 0x800000010007E840, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2080;
      unint64_t v20 = sub_10004F8A8(v2);
      *(void *)(v0 + 144) = sub_100007E60(v20, v21, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = v4;
      os_log_type_t v10 = v19;
    }
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s failed with: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_16:

    sub_10000FA84();
    swift_allocError();
    unsigned char *v22 = v2;
    *(void *)(v0 + 528) = _convertErrorToNSError(_:)();
    swift_errorRelease();
    if (qword_100092A58 != -1) {
      swift_once();
    }
    uint64_t v23 = *(void **)(v0 + 256);
    uint64_t v24 = qword_1000964D8;
    *(void *)(v0 + 536) = qword_1000964D8;
    *(void *)(v0 + 544) = *v23;
    *(void *)(v0 + 552) = v23[1];
    uint64_t v25 = sub_1000553D0;
    goto LABEL_23;
  }
  uint64_t v11 = (uint64_t *)(v0 + 16);
  swift_errorRelease();
  if (qword_100092A70 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100006040(v12, (uint64_t)qword_100093E58);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446466;
    *(void *)(v0 + 112) = sub_100007E60(0xD00000000000003DLL, 0x800000010007E840, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    *(void *)(v0 + 120) = v1;
    swift_errorRetain();
    uint64_t v16 = String.init<A>(describing:)();
    *(void *)(v0 + 128) = sub_100007E60(v16, v17, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s failed with: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue();
  uint64_t v27 = *(void *)(v0 + 48);
  uint64_t v26 = *(void *)(v0 + 56);
  *(void *)(v0 + 40) = v26;
  uint64_t v28 = sub_100020478(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v28, v27, v26);
  *(void *)(v0 + 560) = static FBKSError.nsError(anyError:)();
  sub_10000A888((uint64_t)v11);
  if (qword_100092A58 != -1) {
    swift_once();
  }
  uint64_t v29 = *(void **)(v0 + 256);
  uint64_t v24 = qword_1000964D8;
  *(void *)(v0 + 568) = qword_1000964D8;
  *(void *)(v0 + 576) = *v29;
  *(void *)(v0 + 584) = v29[1];
  uint64_t v25 = sub_100055528;
LABEL_23:
  return _swift_task_switch(v25, v24, 0);
}

uint64_t sub_10005528C()
{
  sub_100045730(*(void **)(v0 + 464), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 472));
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100059E50, 0, 0);
}

uint64_t sub_100055304()
{
  uint64_t v1 = *(void **)(v0 + 512);
  sub_100044608(*(void **)(v0 + 488), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 496));

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000553D0()
{
  sub_100044608(*(void **)(v0 + 544), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 552));
  return _swift_task_switch(sub_100055444, 0, 0);
}

uint64_t sub_100055444()
{
  uint64_t v1 = *(void (**)(void *))(v0 + 280);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 528);
    id v3 = v2;
    v1(v2);
  }
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100055528()
{
  sub_100044608(*(void **)(v0 + 576), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 584));
  return _swift_task_switch(sub_10005559C, 0, 0);
}

uint64_t sub_10005559C()
{
  uint64_t v1 = (void (*)(void *))v0[35];
  uint64_t v2 = (void *)v0[70];
  if (v1)
  {
    id v3 = v2;
    v1(v2);

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100055690()
{
  uint64_t v32 = v0;
  (*(void (**)(void, void))(v0 + 400))(*(void *)(v0 + 360), *(void *)(v0 + 304));
  uint64_t v1 = *(void *)(v0 + 416);
  *(void *)(v0 + 72) = v1;
  *(void *)(v0 + 520) = v1;
  swift_errorRetain();
  sub_100008580(&qword_100093940);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    int v2 = *(unsigned __int8 *)(v0 + 592);
    if (v2 == 5)
    {
      if (qword_100092A70 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_100006040(v3, (uint64_t)qword_100093E58);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v4, v5)) {
        goto LABEL_16;
      }
      uint64_t v6 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      *(void *)(v0 + 104) = sub_100007E60(0xD00000000000003DLL, 0x800000010007E840, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2080;
      unint64_t v7 = sub_10004F8A8(5);
      *(void *)(v0 + 80) = sub_100007E60(v7, v8, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = v4;
      os_log_type_t v10 = v5;
    }
    else
    {
      if (qword_100092A70 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_100006040(v18, (uint64_t)qword_100093E58);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v4, v19)) {
        goto LABEL_16;
      }
      uint64_t v6 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      *(void *)(v0 + 136) = sub_100007E60(0xD00000000000003DLL, 0x800000010007E840, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2080;
      unint64_t v20 = sub_10004F8A8(v2);
      *(void *)(v0 + 144) = sub_100007E60(v20, v21, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = v4;
      os_log_type_t v10 = v19;
    }
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s failed with: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_16:

    sub_10000FA84();
    swift_allocError();
    unsigned char *v22 = v2;
    *(void *)(v0 + 528) = _convertErrorToNSError(_:)();
    swift_errorRelease();
    if (qword_100092A58 != -1) {
      swift_once();
    }
    uint64_t v23 = *(void **)(v0 + 256);
    uint64_t v24 = qword_1000964D8;
    *(void *)(v0 + 536) = qword_1000964D8;
    *(void *)(v0 + 544) = *v23;
    *(void *)(v0 + 552) = v23[1];
    uint64_t v25 = sub_1000553D0;
    goto LABEL_23;
  }
  uint64_t v11 = (uint64_t *)(v0 + 16);
  swift_errorRelease();
  if (qword_100092A70 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100006040(v12, (uint64_t)qword_100093E58);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446466;
    *(void *)(v0 + 112) = sub_100007E60(0xD00000000000003DLL, 0x800000010007E840, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    *(void *)(v0 + 120) = v1;
    swift_errorRetain();
    uint64_t v16 = String.init<A>(describing:)();
    *(void *)(v0 + 128) = sub_100007E60(v16, v17, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s failed with: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue();
  uint64_t v27 = *(void *)(v0 + 48);
  uint64_t v26 = *(void *)(v0 + 56);
  *(void *)(v0 + 40) = v26;
  uint64_t v28 = sub_100020478(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v28, v27, v26);
  *(void *)(v0 + 560) = static FBKSError.nsError(anyError:)();
  sub_10000A888((uint64_t)v11);
  if (qword_100092A58 != -1) {
    swift_once();
  }
  uint64_t v29 = *(void **)(v0 + 256);
  uint64_t v24 = qword_1000964D8;
  *(void *)(v0 + 568) = qword_1000964D8;
  *(void *)(v0 + 576) = *v29;
  *(void *)(v0 + 584) = v29[1];
  uint64_t v25 = sub_100055528;
LABEL_23:
  return _swift_task_switch(v25, v24, 0);
}

uint64_t sub_100055EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  return _swift_task_switch(sub_100055EC4, 0, 0);
}

uint64_t sub_100055EC4()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = (void *)v0[4];
  static Strings.Daemon.bundleIdentifier.getter();
  v3._uint64_t countAndFlagsBits = 0x2E746E756F632ELL;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v1;
  String.append(_:)(v4);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  if (qword_100092A58 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_1000964D8;
  v0[7] = qword_1000964D8;
  return _swift_task_switch(sub_100055FD0, v5, 0);
}

uint64_t sub_100055FD0()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = sub_10004F9F8(v1, *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 32), (void *)0x657474696D627573, 0xE900000000000064);
  swift_bridgeObjectRetain();
  *(void *)(v0 + 64) = sub_1000583BC((unint64_t)v2, (uint64_t)v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000560A8, 0, 0);
}

uint64_t sub_1000560A8()
{
  uint64_t v1 = qword_1000964D8;
  *(void *)(v0 + 72) = qword_1000964D8;
  return _swift_task_switch(sub_1000560CC, v1, 0);
}

uint64_t sub_1000560CC()
{
  *(void *)(v0 + 80) = sub_100045C68(*(void **)(v0 + 24), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 32));
  return _swift_task_switch(sub_10005613C, 0, 0);
}

uint64_t sub_10005613C()
{
  if (qword_100092A30 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  v0[11] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100056208;
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  return sub_10002A96C(v3, v2);
}

uint64_t sub_100056208(uint64_t a1)
{
  *(void *)(*(void *)v1 + 96) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100056308, 0, 0);
}

uint64_t sub_100056308()
{
  uint64_t v1 = qword_1000964D8;
  *(void *)(v0 + 104) = qword_1000964D8;
  return _swift_task_switch(sub_10005632C, v1, 0);
}

uint64_t sub_10005632C()
{
  *(void *)(v0 + 112) = sub_100046A80(*(void **)(v0 + 24), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 32));
  return _swift_task_switch(sub_10005639C, 0, 0);
}

uint64_t sub_10005639C()
{
  uint64_t v1 = *(void (**)(void))(v0 + 40);
  id v2 = objc_allocWithZone((Class)type metadata accessor for FBKSFeedbackCount());
  uint64_t v3 = (void *)FBKSFeedbackCount.init(feedbackFiled:errors:currentCampaign:declineCount:)();
  uint64_t v4 = FBKSFeedbackCount.asJSON.getter();
  unint64_t v6 = v5;
  v1();
  sub_1000185C0(v4, v6);

  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10005650C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_10005652C, 0, 0);
}

uint64_t sub_10005652C()
{
  _StringGuts.grow(_:)(21);
  static Strings.Daemon.bundleIdentifier.getter();
  swift_bridgeObjectRelease();
  v1._object = (void *)0x800000010007E9A0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v1);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  if (qword_100092A58 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1000964D8;
  *(void *)(v0 + 32) = qword_1000964D8;
  sub_10000FA84();
  swift_allocError();
  *uint64_t v3 = 2;
  uint64_t v4 = (void *)_convertErrorToNSError(_:)();
  *(void *)(v0 + 40) = static FBKSError.xpcSafeNSError(error:)();

  swift_errorRelease();
  return _swift_task_switch(sub_100056698, v2, 0);
}

uint64_t sub_100056698()
{
  Swift::String v1 = *(void **)(v0 + 40);
  sub_100044608(*(void **)(v0 + 16), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 24));

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100056798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  return _swift_task_switch(sub_1000567BC, 0, 0);
}

uint64_t sub_1000567BC()
{
  _StringGuts.grow(_:)(24);
  static Strings.Daemon.bundleIdentifier.getter();
  swift_bridgeObjectRelease();
  v0._object = (void *)0x800000010007E940;
  v0._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v0);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  if (qword_100092A30 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1000964B0;
  return _swift_task_switch(sub_1000568DC, v1, 0);
}

uint64_t sub_1000568DC()
{
  *(unsigned char *)(v0 + 112) = sub_10002FDE8();
  return _swift_task_switch(sub_10005694C, 0, 0);
}

uint64_t sub_10005694C()
{
  uint64_t v21 = v0;
  if (*(unsigned char *)(v0 + 112))
  {
    if (qword_100092A70 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    *(void *)(v0 + 72) = sub_100006040(v1, (uint64_t)qword_100093E58);
    swift_bridgeObjectRetain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    unint64_t v5 = *(void *)(v0 + 48);
    if (v4)
    {
      uint64_t v6 = *(void *)(v0 + 40);
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 32) = sub_100007E60(v6, v5, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Marking form [%{public}s] as submitted", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    if (qword_100092A48 != -1) {
      swift_once();
    }
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_100056D60;
    uint64_t v17 = *(void *)(v0 + 40);
    uint64_t v16 = *(void *)(v0 + 48);
    return sub_100036D84(v17, v16);
  }
  else
  {
    if (qword_100092A70 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100006040(v8, (uint64_t)qword_100093E58);
    swift_bridgeObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    unint64_t v12 = *(void *)(v0 + 48);
    if (v11)
    {
      uint64_t v13 = *(void *)(v0 + 40);
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v14 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 16) = sub_100007E60(v13, v12, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Form [%{public}s] is not known to feedbackd", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    os_log_type_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
}

uint64_t sub_100056D60()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100056E5C, 0, 0);
}

uint64_t sub_100056E5C()
{
  return _swift_task_switch(sub_100056E7C, qword_1000964B0, 0);
}

uint64_t sub_100056E7C()
{
  sub_1000301C8();
  return _swift_task_switch(sub_100056EE4, 0, 0);
}

uint64_t sub_100056EE4()
{
  uint64_t v18 = v0;
  uint64_t v1 = (void *)v0[7];
  if (v1)
  {
    uint64_t v2 = qword_100092A58;
    id v3 = v1;
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v4 = qword_1000964D8;
    v0[11] = qword_1000964D8;
    unint64_t v5 = sub_100057194;
LABEL_5:
    return _swift_task_switch(v5, v4, 0);
  }
  uint64_t v6 = (void *)v0[8];
  if (v6)
  {
    id v7 = v6;
    if ([v7 integerValue])
    {
      if (qword_100092A58 != -1) {
        swift_once();
      }
      uint64_t v8 = qword_1000964D8;
      v0[12] = qword_1000964D8;
      v0[13] = [v7 integerValue];
      unint64_t v5 = sub_100057264;
      uint64_t v4 = v8;
      goto LABEL_5;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.fault.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  unint64_t v12 = v0[6];
  if (v11)
  {
    uint64_t v13 = v0[5];
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v14 = 136446210;
    swift_bridgeObjectRetain();
    v0[3] = sub_100007E60(v13, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Cannot record feedback submission for [%{public}s]. Feedback ID is invalid", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_100057194()
{
  sub_100044608(*(void **)(v0 + 40), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 48));
  return _swift_task_switch(sub_100057204, 0, 0);
}

uint64_t sub_100057204()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100057264()
{
  sub_100044F30(*(void **)(v0 + 40), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 48), *(void **)(v0 + 104));
  return _swift_task_switch(sub_1000572D0, 0, 0);
}

uint64_t sub_1000572D0()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005740C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 112) = a4;
  *(void *)(v5 + 120) = a5;
  return _swift_task_switch(sub_10005742C, 0, 0);
}

uint64_t sub_10005742C()
{
  static Strings.Daemon.bundleIdentifier.getter();
  v1._uint64_t countAndFlagsBits = 0x74657365722ELL;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  if (qword_100092B08 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100057550;
  return sub_100075814(0);
}

uint64_t sub_100057550()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10005764C, 0, 0);
}

uint64_t sub_10005764C()
{
  if (qword_100092A30 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000964B0;
  return _swift_task_switch(sub_1000576E0, v0, 0);
}

uint64_t sub_1000576E0()
{
  sub_10002F670();
  return _swift_task_switch(sub_100057744, 0, 0);
}

uint64_t sub_100057744()
{
  if (qword_100092A48 != -1) {
    swift_once();
  }
  sub_100032304();
  type metadata accessor for FBKSSharedPersistence();
  static FBKSSharedPersistence.removeAllInboxTats()();
  if (qword_100092A58 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1000964D8;
  *(void *)(v0 + 136) = qword_1000964D8;
  return _swift_task_switch(sub_100057828, v1, 0);
}

uint64_t sub_100057828()
{
  sub_100044258();
  *(void *)(v0 + 144) = 0;
  return _swift_task_switch(sub_1000578B4, 0, 0);
}

uint64_t sub_1000578B4()
{
  uint64_t v8 = v0;
  (*(void (**)(void))(v0 + 112))(0);
  if (qword_100092A70 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006040(v1, (uint64_t)qword_100093E58);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    *(void *)(v0 + 80) = sub_100007E60(0xD000000000000018, 0x800000010007E8D0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Finished %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100057A74()
{
  uint64_t v21 = v0;
  if (qword_100092A70 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006040(v1, (uint64_t)qword_100093E58);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[18];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    v0[11] = sub_100007E60(0xD000000000000018, 0x800000010007E8D0, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2080;
    v0[12] = v5;
    swift_errorRetain();
    sub_100008580(&qword_100093940);
    uint64_t v7 = String.init<A>(describing:)();
    v0[13] = sub_100007E60(v7, v8, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s failed with: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v9 = (void (*)(void *))v0[14];
  swift_getErrorValue();
  uint64_t v10 = v0[6];
  uint64_t v11 = v0[7];
  v0[5] = v11;
  unint64_t v12 = sub_100020478(v0 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v12, v10, v11);
  uint64_t v13 = (void *)static FBKSError.nsError(anyError:)();
  sub_10000A888((uint64_t)(v0 + 2));
  id v14 = v13;
  v9(v13);

  swift_errorRelease();
  if (qword_100092A70 != -1) {
    swift_once();
  }
  sub_100006040(v1, (uint64_t)qword_100093E58);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136446210;
    v0[10] = sub_100007E60(0xD000000000000018, 0x800000010007E8D0, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Finished %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_100057F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_100057FB4, 0, 0);
}

uint64_t sub_100057FB4()
{
  static Strings.Daemon.bundleIdentifier.getter();
  v1._uint64_t countAndFlagsBits = 0x752D74657365722ELL;
  v1._object = (void *)0xEB00000000726573;
  String.append(_:)(v1);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  if (qword_100092B08 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000580E4;
  return sub_100075814(0);
}

uint64_t sub_1000580E4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000581E0, 0, 0);
}

uint64_t sub_1000581E0()
{
  (*(void (**)(void))(v0 + 16))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005830C()
{
  sub_10005860C(*(void *)(v0 + 16));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FeedbackDaemonDelegate()
{
  return self;
}

uint64_t sub_100058368(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_100058394(uint64_t (*a1)(void))
{
  return a1();
}

void *sub_1000583BC(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a2;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t result = _swiftEmptyArrayStorage;
    if (!v8) {
      break;
    }
    uint64_t v19 = _swiftEmptyArrayStorage;
    unint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v8 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v10 = 0;
    v14[1] = v3;
    unint64_t v15 = a1 & 0xC000000000000001;
    uint64_t v11 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    unint64_t v16 = a1;
    while (v8 != v10)
    {
      if (v15) {
        unint64_t v12 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        unint64_t v12 = (char *)*(id *)(a1 + 8 * v10 + 32);
      }
      uint64_t v13 = v12;
      ++v10;
      (*v11)(v7, (uint64_t)&v12[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_date], v17);
      objc_allocWithZone((Class)type metadata accessor for FBKSFeedback());
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v3 = FBKSFeedback.init(formIdentifier:submissionDate:build:id:)();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v5 = v19[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      a1 = v16;
      if (v8 == v10) {
        return v19;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_10005860C(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10005861C()
{
  uint64_t v1 = (int *)type metadata accessor for FormLaunchConfiguration();
  uint64_t v14 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v2 = (v14 + 64) & ~v14;
  unint64_t v13 = (*(void *)(*((void *)v1 - 1) + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = v0 + v2 + v1[6];
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  uint64_t v8 = v3 + v1[8];
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v9(v8, 1, v5)) {
    v7(v8, v5);
  }
  unint64_t v10 = (v13 + 103) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = v3 + v1[9];
  if (!v9(v11, 1, v5)) {
    v7(v11, v5);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v10)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v10 + 16, v14 | 7);
}

uint64_t sub_100058868(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for FormLaunchConfiguration() - 8);
  uint64_t v4 = v1[4];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10003ECD4;
  return sub_1000522DC(a1, v12, v11, v4, v5, v6, v7, v8);
}

uint64_t sub_1000589E0(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000589F0()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100058A28(uint64_t a1)
{
  return sub_10005A6EC(a1, *(void *)(v1 + 16));
}

uint64_t sub_100058A30(uint64_t a1, unint64_t a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v8 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  _Block_copy(a4);
  if (qword_100092A70 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100006040(v12, (uint64_t)qword_100093E58);
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v29 = a3;
    unint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v30 = a1;
    uint64_t v32 = v17;
    uint64_t v28 = v10;
    *(_DWORD *)unint64_t v16 = 136446210;
    uint64_t v31 = sub_100007E60(0xD00000000000002ALL, 0x800000010007E9C0, &v32);
    unint64_t v10 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s", v16, 0xCu);
    swift_arrayDestroy();
    a1 = v30;
    swift_slowDealloc();
    a3 = v29;
    swift_slowDealloc();
  }

  uint64_t v18 = *(void **)(a3 + 16);
  if (v18 && (v18 == (void *)1 || (sub_1000750C8(a1, a2, v18) & 1) == 0))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_100007E60(a1, a2, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Client is not entitled to access form [%{public}s]", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_10000FA84();
    swift_allocError();
    *uint64_t v24 = 7;
    uint64_t v25 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a4)[2](a4, 0, v25);

    swift_errorRelease();
  }
  else
  {
    static TaskPriority.utility.getter();
    uint64_t v19 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v10, 0, 1, v19);
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    v20[4] = a1;
    v20[5] = a2;
    v20[6] = sub_100059C6C;
    v20[7] = v11;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10006DA84((uint64_t)v10, (uint64_t)&unk_100093FB8, (uint64_t)v20);
    swift_release();
    sub_10000A738((uint64_t)v10, &qword_1000938B0);
  }
  return swift_release();
}

uint64_t sub_100058EC0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092A70 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100006040(v9, (uint64_t)qword_100093E58);
  swift_bridgeObjectRetain_n();
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446466;
    uint64_t v16 = sub_100007E60(0xD000000000000035, 0x800000010007E960, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_100007E60(a1, a2, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s form: %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for FBKSSharedPersistence();
  static FBKSSharedPersistence.removeInboxTat(_:)();
  static TaskPriority.utility.getter();
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  os_log_type_t v14 = (void *)swift_allocObject();
  void v14[2] = 0;
  v14[3] = 0;
  v14[4] = a1;
  v14[5] = a2;
  swift_bridgeObjectRetain();
  sub_10006DCBC((uint64_t)v8, (uint64_t)&unk_100093FA8, (uint64_t)v14);
  swift_release();
  return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, 0);
}

uint64_t sub_1000591BC(uint64_t a1, unint64_t a2, void *a3, int a4, void *a5, uint64_t a6)
{
  int v39 = a4;
  uint64_t v11 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092A70 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100006040(v14, (uint64_t)qword_100093E58);
  id v15 = a5;
  swift_bridgeObjectRetain_n();
  id v16 = a3;
  id v17 = v15;
  id v18 = v16;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  os_log_type_t v40 = a3;
  if (!v21)
  {

    swift_bridgeObjectRelease_n();
    id v25 = v17;
    if ((v39 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  id v35 = v17;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v22 = a1;
  uint64_t v23 = swift_slowAlloc();
  uint64_t v33 = (void *)swift_slowAlloc();
  uint64_t v34 = swift_slowAlloc();
  uint64_t v42 = v34;
  *(_DWORD *)uint64_t v23 = 136446978;
  uint64_t v41 = sub_100007E60(0xD000000000000049, 0x800000010007E8F0, &v42);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v23 + 12) = 2082;
  swift_bridgeObjectRetain();
  uint64_t v36 = v22;
  uint64_t v41 = sub_100007E60(v22, a2, &v42);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v23 + 22) = 2114;
  if (a3)
  {
    uint64_t v41 = (uint64_t)v18;
    id v24 = v18;
  }
  else
  {
    uint64_t v41 = 0;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v33 = v40;

  *(_WORD *)(v23 + 32) = 1024;
  id v25 = v35;

  a5 = v37;
  LODWORD(v41) = v37 != 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s form: %{public}s feedback: [%{public}@] has error? %{BOOL}d", (uint8_t *)v23, 0x26u);
  sub_100008580(&qword_100092B40);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  a6 = v38;
  a1 = v36;
  if (v39)
  {
LABEL_10:
    type metadata accessor for FBKSSharedPersistence();
    static FBKSSharedPersistence.removeInboxTat(_:)();
  }
LABEL_11:
  static TaskPriority.utility.getter();
  uint64_t v26 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v13, 0, 1, v26);
  uint64_t v27 = (void *)swift_allocObject();
  void v27[2] = 0;
  v27[3] = 0;
  v27[4] = a1;
  v27[5] = a2;
  uint64_t v28 = v40;
  v27[6] = a5;
  v27[7] = v28;
  swift_bridgeObjectRetain();
  id v29 = v18;
  id v30 = v25;
  sub_10006DA84((uint64_t)v13, (uint64_t)&unk_100093F98, (uint64_t)v27);
  swift_release();
  sub_10000A738((uint64_t)v13, &qword_1000938B0);
  return (*(uint64_t (**)(uint64_t, void))(a6 + 16))(a6, 0);
}

uint64_t sub_100059638(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092A70 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100006040(v15, (uint64_t)qword_100093E58);
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v25 = a2;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v27 = a6;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v26 = a5;
    uint64_t v29 = v20;
    *(_DWORD *)uint64_t v19 = 136446210;
    uint64_t v28 = sub_100007E60(a3, a4, &v29);
    a2 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a6 = v27;
    swift_slowDealloc();
  }

  static TaskPriority.utility.getter();
  uint64_t v21 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v14, 0, 1, v21);
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = 0;
  v22[3] = 0;
  v22[4] = a1;
  v22[5] = a2;
  swift_retain();
  sub_10006DA84((uint64_t)v14, a6, (uint64_t)v22);
  swift_release();
  return sub_10000A738((uint64_t)v14, &qword_1000938B0);
}

uint64_t sub_1000598BC()
{
  return sub_100059B70((void (*)(void))&_swift_release);
}

uint64_t sub_1000598D4()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10003ECD4;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_100057FB4, 0, 0);
}

uint64_t sub_100059980()
{
  return sub_100059B70((void (*)(void))&_swift_release);
}

uint64_t sub_100059998()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10000FCAC;
  *(_OWORD *)(v2 + 112) = v3;
  return _swift_task_switch(sub_10005742C, 0, 0);
}

uint64_t sub_100059A44()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100059A94()
{
  long long v6 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10003ECD4;
  *(void *)(v4 + 56) = v2;
  *(void *)(v4 + 64) = v3;
  *(_OWORD *)(v4 + 40) = v6;
  return _swift_task_switch(sub_1000567BC, 0, 0);
}

uint64_t sub_100059B58()
{
  return sub_100059B70((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100059B70(void (*a1)(void))
{
  swift_unknownObjectRelease();
  a1(*(void *)(v1 + 40));

  return _swift_deallocObject(v1, 48, 7);
}

uint64_t sub_100059BC0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[2] = v2;
  v4[3] = v3;
  v4[1] = sub_10003ECD4;
  return _swift_task_switch(sub_10005652C, 0, 0);
}

void sub_100059C6C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_10005A704(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_100059C74()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100059CBC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10003ECD4;
  *(void *)(v4 + 48) = v3;
  *(_OWORD *)(v4 + 32) = v5;
  *(void *)(v4 + 24) = v2;
  return _swift_task_switch(sub_100055EC4, 0, 0);
}

uint64_t sub_100059D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_100093FC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100059DE8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100059E30(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

void sub_100059E54()
{
  static Strings.Daemon.configurationUserDefaultsDomain.getter();
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithSuiteName:v1];

  if (v2) {
    qword_1000964E8 = (uint64_t)v2;
  }
  else {
    __break(1u);
  }
}

void sub_100059ED8()
{
  if (qword_100092A78 != -1) {
    swift_once();
  }
  id v0 = (void *)qword_1000964E8;
  sub_100008580(&qword_1000932B8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10007B630;
  *(void *)(inited + 32) = 0xD000000000000014;
  *(void *)(inited + 40) = 0x800000010007EBC0;
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 48) = 48;
  id v2 = v0;
  sub_100023734(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 registerDefaults:isa];

  qword_100093FD0 = 0xD000000000000014;
  *(void *)algn_100093FD8 = 0x800000010007EBC0;
  qword_100093FE0 = (uint64_t)v2;
}

void sub_10005A000()
{
  if (qword_100092A78 != -1) {
    swift_once();
  }
  id v0 = (void *)qword_1000964E8;
  sub_100008580(&qword_1000932B8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10007B630;
  *(void *)(inited + 32) = 0xD000000000000018;
  *(void *)(inited + 40) = 0x800000010007EBE0;
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 48) = 1;
  id v2 = v0;
  sub_100023734(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 registerDefaults:isa];

  qword_100093FE8 = 0xD000000000000018;
  unk_100093FF0 = 0x800000010007EBE0;
  qword_100093FF8 = (uint64_t)v2;
}

void sub_10005A128()
{
  if (qword_100092A78 != -1) {
    swift_once();
  }
  id v0 = (void *)qword_1000964E8;
  sub_100008580(&qword_1000932B8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10007B630;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x800000010007EC00;
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 48) = 5;
  id v2 = v0;
  sub_100023734(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 registerDefaults:isa];

  qword_100094000 = 0xD000000000000011;
  *(void *)algn_100094008 = 0x800000010007EC00;
  qword_100094010 = (uint64_t)v2;
}

void sub_10005A250()
{
  if (qword_100092A78 != -1) {
    swift_once();
  }
  id v0 = (void *)qword_1000964E8;
  sub_100008580(&qword_1000932B8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10007B630;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x800000010007EB80;
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 48) = 11;
  id v2 = v0;
  sub_100023734(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 registerDefaults:isa];

  qword_100094018 = 0xD000000000000010;
  unk_100094020 = 0x800000010007EB80;
  qword_100094028 = (uint64_t)v2;
}

void sub_10005A378()
{
  if (qword_100092A78 != -1) {
    swift_once();
  }
  id v0 = (void *)qword_1000964E8;
  sub_100008580(&qword_1000932B8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10007B630;
  *(void *)(inited + 32) = 0xD000000000000012;
  *(void *)(inited + 40) = 0x800000010007EBA0;
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 48) = 0;
  id v2 = v0;
  sub_100023734(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 registerDefaults:isa];

  qword_100094030 = 0xD000000000000012;
  *(void *)algn_100094038 = 0x800000010007EBA0;
  qword_100094040 = (uint64_t)v2;
}

void sub_10005A49C()
{
  if (qword_100092A78 != -1) {
    swift_once();
  }
  id v0 = (void *)qword_1000964E8;
  sub_100008580(&qword_1000932B8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10007B630;
  *(void *)(inited + 32) = 0x6F43657A6F6F6E73;
  *(void *)(inited + 40) = 0xEB00000000746E75;
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 48) = 3;
  id v2 = v0;
  sub_100023734(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 registerDefaults:isa];

  qword_100094048 = 0x6F43657A6F6F6E73;
  unk_100094050 = 0xEB00000000746E75;
  qword_100094058 = (uint64_t)v2;
}

void sub_10005A5C8()
{
  if (qword_100092A78 != -1) {
    swift_once();
  }
  id v0 = (void *)qword_1000964E8;
  sub_100008580(&qword_1000932B8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10007B630;
  *(void *)(inited + 32) = 0x6567676972546F6ELL;
  *(void *)(inited + 40) = 0xE900000000000072;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = 0;
  id v2 = v0;
  sub_100023734(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 registerDefaults:isa];

  qword_100094060 = 0x6567676972546F6ELL;
  *(void *)algn_100094068 = 0xE900000000000072;
  qword_100094070 = (uint64_t)v2;
}

uint64_t sub_10005A6EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_10005A704(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  Class v6 = isa;
  (*(void (**)(uint64_t))(a4 + 16))(a4);
}

uint64_t sub_10005A778()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_100094080);
  sub_100006040(v0, (uint64_t)qword_100094080);
  static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10005A7E4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, CFBLog);
  uint64_t v1 = sub_100006040(v0, (uint64_t)CFBLog);
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100006040(v0, (uint64_t)qword_100094080);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t CFBLog.unsafeMutableAddressor()
{
  if (qword_100092AC0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_100006040(v0, (uint64_t)CFBLog);
}

uint64_t sub_10005A910()
{
  [v0 auditToken];
  long long v7 = v5;
  long long v8 = v6;
  if (xpc_copy_code_signing_identity_for_token() && (uint64_t v1 = String.init(utf8String:)(), v2))
  {
    char v3 = sub_1000750C8(v1, v2, &off_10008DD38);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v3 = 1;
  }
  return v3 & 1;
}

uint64_t sub_10005A9B8(void (*a1)(void))
{
  a1();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 valueForEntitlement:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1000187B8((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    uint64_t result = swift_dynamicCast();
    if (result) {
      return v5;
    }
  }
  else
  {
    sub_10000A738((uint64_t)v7, (uint64_t *)&unk_100093910);
    return 0;
  }
  return result;
}

id sub_10005AAA0()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for CentralizedFeedbackDaemon()) init];
  qword_100096508 = (uint64_t)result;
  return result;
}

uint64_t sub_10005AAD0()
{
  static Strings.Daemon.bundleIdentifier.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  char has_internal_diagnostics = os_variant_has_internal_diagnostics();
  uint64_t result = swift_release();
  byte_100094098 = has_internal_diagnostics;
  return result;
}

uint64_t sub_10005AB20()
{
  if (qword_100092AD0 != -1) {
    uint64_t result = swift_once();
  }
  if (byte_100094098) {
    int v0 = 5;
  }
  else {
    int v0 = 10;
  }
  dword_10009409C = v0;
  return result;
}

uint64_t sub_10005AB84()
{
  if (qword_100092AD0 != -1) {
    uint64_t result = swift_once();
  }
  double v0 = 86400.0;
  if (byte_100094098) {
    double v0 = 10800.0;
  }
  qword_1000940A0 = *(void *)&v0;
  return result;
}

id sub_10005ACAC()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v3 - 8);
  unsigned __int8 v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100006040(v6, (uint64_t)qword_100094080);
  long long v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = ObjectType;
    *(_DWORD *)uint64_t v9 = 136446210;
    swift_getMetatypeMetadata();
    uint64_t v10 = String.init<A>(describing:)();
    uint64_t v22 = sub_100007E60(v10, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Started %{public}s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  static TaskPriority.utility.getter();
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v5, 0, 1, v12);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v1;
  uint64_t v14 = v1;
  sub_10006DA84((uint64_t)v5, (uint64_t)&unk_100094268, (uint64_t)v13);
  swift_release();
  sub_10000A738((uint64_t)v5, &qword_1000938B0);
  static Strings.XPC.CentralizedFeedback.machService.getter();
  id v15 = objc_allocWithZone((Class)NSXPCListener);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v17 = [v15 initWithMachServiceName:v16];

  uint64_t v18 = OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_listener;
  uint64_t v19 = *(void **)&v14[OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_listener];
  *(void *)&v14[OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_listener] = v17;

  id result = *(id *)&v14[v18];
  if (result)
  {
    [result setDelegate:v14];
    id result = *(id *)&v14[v18];
    if (result) {
      return [result resume];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10005AFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  sub_100008580((uint64_t *)&unk_100093950);
  *(void *)(v4 + 48) = swift_task_alloc();
  return _swift_task_switch(sub_10005B060, 0, 0);
}

uint64_t sub_10005B060()
{
  static Strings.Daemon.bundleIdentifier.getter();
  swift_bridgeObjectRetain();
  v1._uint64_t countAndFlagsBits = 0x6D6561446266632ELL;
  v1._object = (void *)0xEF74726174536E6FLL;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_unknownObjectRelease();
  swift_release();
  if (qword_1000929F0 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_100096498;
  *(void *)(v0 + 56) = qword_100096498;
  return _swift_task_switch(sub_10005B170, v2, 0);
}

uint64_t sub_10005B170()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  id v3 = [self standardUserDefaults];
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 doubleForKey:v4];

  Date.init(timeIntervalSince1970:)();
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 0, 1, v5);
  uint64_t v6 = v2 + OBJC_IVAR____TtC9feedbackd25CFBNotificationController_lastNotificationDate;
  swift_beginAccess();
  sub_10000FDF4(v1, v6);
  swift_endAccess();
  return _swift_task_switch(sub_10005B2D0, 0, 0);
}

uint64_t sub_10005B2D0()
{
  sub_1000671D0();
  sub_10006AD98();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10005B33C(void *a1, const char *a2)
{
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100006040(v4, (uint64_t)qword_100094080);
  id v8 = a1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    long long v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)long long v7 = 67240192;
    [v8 processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v5, v6, a2, v7, 8u);
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_10005B50C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100006040(v13, (uint64_t)qword_100094080);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v23 = v5;
    id v17 = (uint8_t *)v16;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v22 = a1;
    *(_DWORD *)id v17 = 136315138;
    uint64_t v24 = sub_100007E60(0xD00000000000002CLL, 0x800000010007F0E0, &v25);
    a1 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v23;
    swift_slowDealloc();
  }

  static TaskPriority.utility.getter();
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v12, 0, 1, v18);
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = a1;
  v19[5] = a2;
  v19[6] = a3;
  v19[7] = a4;
  v19[8] = v5;
  sub_10001866C(a1, a2);
  swift_retain();
  id v20 = v5;
  sub_10006DA84((uint64_t)v12, (uint64_t)&unk_100094258, (uint64_t)v19);
  swift_release();
  return sub_10000A738((uint64_t)v12, &qword_1000938B0);
}

uint64_t sub_10005B7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[18] = a7;
  v8[19] = a8;
  v8[16] = a5;
  v8[17] = a6;
  v8[15] = a4;
  sub_100008580((uint64_t *)&unk_100094200);
  v8[20] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v8[21] = v9;
  v8[22] = *(void *)(v9 - 8);
  v8[23] = swift_task_alloc();
  v8[24] = swift_task_alloc();
  return _swift_task_switch(sub_10005B8D8, 0, 0);
}

uint64_t sub_10005B8D8()
{
  uint64_t v34 = v0;
  v33[0] = static Strings.Daemon.bundleIdentifier.getter();
  v33[1] = v1;
  swift_bridgeObjectRetain();
  v2._uint64_t countAndFlagsBits = 0x64696C61766E692ELL;
  v2._object = (void *)0xED00006E6F697461;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for FBKSDonation();
  sub_10006D220(&qword_100094238, (void (*)(uint64_t))&type metadata accessor for FBKSDonation);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  *(void *)(v0 + 200) = 0;
  swift_release();
  uint64_t v3 = *(void **)(v0 + 16);
  *(void *)(v0 + 208) = v3;
  uint64_t v4 = qword_100092AB8;
  id v5 = v3;
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v0 + 216) = sub_100006040(v6, (uint64_t)qword_100094080);
  long long v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v0 + 112) = sub_100007E60(0xD00000000000002CLL, 0x800000010007F0E0, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s: Decoded donation", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v10 = *(void *)(v0 + 168);
  uint64_t v11 = *(void *)(v0 + 176);
  uint64_t v12 = *(void *)(v0 + 160);
  dispatch thunk of FBKSInteraction.evaluationID.getter();

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v10) == 1)
  {
    sub_10000A738(*(void *)(v0 + 160), (uint64_t *)&unk_100094200);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      v33[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v15 = 136446210;
      *(void *)(v0 + 56) = sub_100007E60(0xD00000000000002CLL, 0x800000010007F0E0, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s donation evaluationID is undefined", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(void))(v0 + 136))(0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v30 = *(uint64_t (**)(void))(v0 + 8);
    return v30();
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 184);
    uint64_t v17 = *(void *)(v0 + 192);
    uint64_t v18 = *(void *)(v0 + 168);
    uint64_t v19 = *(void *)(v0 + 176);
    (*(void (**)(uint64_t, void, uint64_t))(v19 + 32))(v17, *(void *)(v0 + 160), v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v16, v17, v18);
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    uint64_t v24 = *(void *)(v0 + 176);
    uint64_t v23 = *(void *)(v0 + 184);
    uint64_t v25 = *(void *)(v0 + 168);
    if (v22)
    {
      uint64_t v26 = swift_slowAlloc();
      v33[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315394;
      *(void *)(v0 + 96) = sub_100007E60(0xD00000000000002CLL, 0x800000010007F0E0, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 12) = 2080;
      sub_10006D220((unint64_t *)&unk_100094160, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 104) = sub_100007E60(v27, v28, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v29(v23, v25);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s: Donation has valid evaluationID: %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v29(*(void *)(v0 + 184), *(void *)(v0 + 168));
    }

    *(void *)(v0 + 224) = v29;
    uint64_t v32 = *(void *)(*(void *)(v0 + 152) + OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_biomeDonator);
    *(void *)(v0 + 232) = v32;
    return _swift_task_switch(sub_10005C21C, v32, 0);
  }
}

uint64_t sub_10005C21C()
{
  uint64_t v1 = v0[25];
  CFBBiomeDonator.invalidate(evaluationID:)(v0[24]);
  v0[30] = v1;
  if (v1) {
    Swift::String v2 = sub_10005C368;
  }
  else {
    Swift::String v2 = sub_10005C2A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005C2A8()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  Swift::String v2 = *(void **)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 168);
  (*(void (**)(void))(v0 + 136))(0);

  v1(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10005C368()
{
  uint64_t v19 = v0;
  *(void *)(v0 + 64) = *(void *)(v0 + 240);
  sub_100008580(&qword_100093940);
  sub_10000C524(0, (unint64_t *)&qword_100093150);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    id v2 = *(id *)(v0 + 72);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446466;
      *(void *)(v0 + 80) = sub_100007E60(0xD00000000000002CLL, 0x800000010007F0E0, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v5 + 12) = 2080;
      id v6 = v2;
      id v7 = [v6 description];
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;

      *(void *)(v0 + 88) = sub_100007E60(v8, v10, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error: %s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
    uint64_t v12 = *(void **)(v0 + 208);
    uint64_t v13 = *(void *)(v0 + 192);
    uint64_t v14 = *(void *)(v0 + 168);
    os_log_type_t v15 = *(void (**)(id))(v0 + 136);
    id v16 = v2;
    v15(v2);

    v11(v13, v14);
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  return result;
}

void sub_10005C744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100008580((uint64_t *)&unk_100094200);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006CF6C(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  (*(void (**)(uint64_t, Class, uint64_t))(a3 + 16))(a3, isa, a2);
}

uint64_t sub_10005C874(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100006040(v14, (uint64_t)qword_100094080);
  os_log_type_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v27 = a1;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v25 = ObjectType;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v26 = a3;
    uint64_t v29 = v19;
    *(_DWORD *)uint64_t v18 = 136446210;
    uint64_t v28 = sub_100007E60(0xD000000000000021, 0x800000010007F050, &v29);
    a1 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s", v18, 0xCu);
    swift_arrayDestroy();
    a3 = v26;
    swift_slowDealloc();
    uint64_t ObjectType = v25;
    swift_slowDealloc();
  }

  static TaskPriority.utility.getter();
  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v13, 0, 1, v20);
  os_log_type_t v21 = (void *)swift_allocObject();
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = a1;
  v21[5] = a2;
  v21[6] = a3;
  v21[7] = a4;
  v21[8] = v5;
  v21[9] = ObjectType;
  sub_10001866C(a1, a2);
  swift_retain();
  id v22 = v5;
  sub_10006DA84((uint64_t)v13, (uint64_t)&unk_100094230, (uint64_t)v21);
  swift_release();
  return sub_10000A738((uint64_t)v13, &qword_1000938B0);
}

uint64_t sub_10005CB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[14] = a8;
  v8[15] = v13;
  v8[12] = a6;
  v8[13] = a7;
  v8[10] = a4;
  v8[11] = a5;
  sub_100008580((uint64_t *)&unk_100094200);
  v8[16] = swift_task_alloc();
  sub_100008580(&qword_1000938B0);
  v8[17] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
  v8[18] = v9;
  v8[19] = *(void *)(v9 - 8);
  v8[20] = swift_task_alloc();
  v8[21] = swift_task_alloc();
  type metadata accessor for CFBDonationCheck.Result(0);
  v8[22] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v8[23] = v10;
  v8[24] = *(void *)(v10 - 8);
  v8[25] = swift_task_alloc();
  return _swift_task_switch(sub_10005CD0C, 0, 0);
}

uint64_t sub_10005CD0C()
{
  static Strings.Daemon.bundleIdentifier.getter();
  swift_bridgeObjectRetain();
  v1._uint64_t countAndFlagsBits = 0x6F6974616E6F642ELL;
  v1._object = (void *)0xE90000000000006ELL;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_unknownObjectRelease();
  swift_release();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for FBKSDonation();
  sub_10006D220(&qword_100094238, (void (*)(uint64_t))&type metadata accessor for FBKSDonation);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  v0[26] = 0;
  swift_release();
  id v2 = (void *)v0[2];
  v0[27] = v2;
  id v3 = v2;
  UUID.init()();
  id v4 = v3;
  dispatch thunk of FBKSInteraction.setEvaluationID(_:)();

  uint64_t v5 = (void *)swift_task_alloc();
  v0[28] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10005D220;
  uint64_t v6 = v0[22];
  return sub_10001BB48(v6, (uint64_t)v4);
}

uint64_t sub_10005D220()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10005D31C, 0, 0);
}

uint64_t sub_10005D31C()
{
  uint64_t v31 = v0;
  uint64_t v1 = *(void *)(v0 + 176);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 152) + 48))(v1, 1, *(void *)(v0 + 144)) == 1)
  {
    uint64_t v2 = *(void *)(*(void *)(v0 + 112) + OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_biomeDonator);
    *(void *)(v0 + 232) = v2;
    return _swift_task_switch(sub_10005D768, v2, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 168);

    sub_10001FDCC(v1, v3);
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v4 = *(void *)(v0 + 160);
    uint64_t v5 = *(void *)(v0 + 168);
    uint64_t v6 = type metadata accessor for Logger();
    sub_100006040(v6, (uint64_t)qword_100094080);
    sub_10006AA38(v5, v4);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 160);
    uint64_t v11 = *(void *)(v0 + 168);
    if (v9)
    {
      uint64_t v28 = *(void *)(v0 + 168);
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      uint64_t v13 = sub_10001B348();
      *(void *)(v0 + 56) = sub_100007E60(v13, v14, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001E9B4(v10);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Donation dropped due to: %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v15 = v28;
    }
    else
    {

      sub_10001E9B4(v10);
      uint64_t v15 = v11;
    }
    sub_10001E9B4(v15);
    if (qword_100092AD0 != -1) {
      swift_once();
    }
    if (byte_100094098 == 1)
    {
      uint64_t v16 = *(void *)(v0 + 136);
      long long v29 = *(_OWORD *)(v0 + 112);
      static TaskPriority.utility.getter();
      uint64_t v17 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 0, 1, v17);
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = 0;
      *(void *)(v18 + 24) = 0;
      *(_OWORD *)(v18 + 32) = v29;
      id v19 = (id)v29;
      sub_10006DA84(v16, (uint64_t)&unk_100094248, v18);
      swift_release();
      sub_10000A738(v16, &qword_1000938B0);
    }
    uint64_t v20 = *(void **)(v0 + 216);
    uint64_t v22 = *(void *)(v0 + 192);
    uint64_t v21 = *(void *)(v0 + 200);
    uint64_t v23 = *(void *)(v0 + 184);
    uint64_t v24 = *(void *)(v0 + 128);
    uint64_t v25 = *(void (**)(uint64_t, void))(v0 + 96);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v24, v21, v23);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v23);
    v25(v24, 0);

    sub_10000A738(v24, (uint64_t *)&unk_100094200);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
}

uint64_t sub_10005D768()
{
  uint64_t v1 = *(void *)(v0 + 208);
  CFBBiomeDonator.write(donation:)(*(void **)(v0 + 216));
  *(void *)(v0 + 240) = v1;

  if (v1) {
    uint64_t v2 = sub_10005DA30;
  }
  else {
    uint64_t v2 = sub_10005D7FC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005D7FC()
{
  if (qword_100092AD0 != -1) {
    swift_once();
  }
  if (byte_100094098 == 1)
  {
    uint64_t v1 = *(void *)(v0 + 136);
    long long v13 = *(_OWORD *)(v0 + 112);
    static TaskPriority.utility.getter();
    uint64_t v2 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = 0;
    *(_OWORD *)(v3 + 32) = v13;
    id v4 = (id)v13;
    sub_10006DA84(v1, (uint64_t)&unk_100094248, v3);
    swift_release();
    sub_10000A738(v1, &qword_1000938B0);
  }
  uint64_t v5 = *(void **)(v0 + 216);
  uint64_t v7 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 200);
  uint64_t v8 = *(void *)(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 128);
  uint64_t v10 = *(void (**)(uint64_t, void))(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v6, v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v8);
  v10(v9, 0);

  sub_10000A738(v9, (uint64_t *)&unk_100094200);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_10005DA30()
{
  id v19 = v0;
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006040(v1, (uint64_t)qword_100094080);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[30];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[8] = v5;
    swift_errorRetain();
    sub_100008580(&qword_100093940);
    uint64_t v7 = String.init<A>(describing:)();
    v0[9] = sub_100007E60(v7, v8, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Donation error: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v9 = (void *)v0[27];
  uint64_t v11 = v0[24];
  uint64_t v10 = v0[25];
  uint64_t v12 = v0[23];
  uint64_t v13 = v0[16];
  uint64_t v14 = (void (*)(uint64_t, void *))v0[12];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v13, 1, 1, v12);
  uint64_t v15 = (void *)_convertErrorToNSError(_:)();
  v14(v13, v15);

  swift_errorRelease();
  sub_10000A738(v13, (uint64_t *)&unk_100094200);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_10005DD10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a4;
  return _swift_task_switch(sub_10005DD30, 0, 0);
}

uint64_t sub_10005DD30()
{
  uint64_t v21 = v0;
  v20[0] = static Strings.Daemon.bundleIdentifier.getter();
  v20[1] = v1;
  swift_bridgeObjectRetain();
  v2._uint64_t countAndFlagsBits = 0x6F446B636568632ELL;
  v2._object = (void *)0xEF736E6F6974616ELL;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  v0[4] = sub_100006040(v3, (uint64_t)qword_100094080);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Configuring internal app visibility.", v6, 2u);
    swift_slowDealloc();
  }

  static Strings.feedbackInternalBundleIdentifier.getter();
  id v7 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [v7 initWithSuiteName:v8];
  v0[5] = v9;

  if (!v9)
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      v20[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446210;
      v0[2] = sub_100007E60(0xD000000000000021, 0x800000010007F050, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v12, v15, "%{public}s error: Failed to access the FeedbackInternal UserDefaults from daemonHi .", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    goto LABEL_12;
  }
  NSString v10 = String._bridgeToObjectiveC()();
  unsigned __int8 v11 = [v9 BOOLForKey:v10];

  if (v11)
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "FeedbackInternal is already visible.", v14, 2u);
      swift_slowDealloc();
    }

LABEL_12:
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
  id v19 = (void *)swift_task_alloc();
  v0[6] = v19;
  *id v19 = v0;
  v19[1] = sub_10005E164;
  v19[14] = v0[3];
  return _swift_task_switch(sub_100069114, 0, 0);
}

uint64_t sub_10005E164(char a1)
{
  *(unsigned char *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10005E264, 0, 0);
}

uint64_t sub_10005E264()
{
  if (*(unsigned char *)(v0 + 56) == 1)
  {
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Changing the visibility of FeedbackInternal app.", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v4 = *(void **)(v0 + 40);

    NSString v5 = String._bridgeToObjectiveC()();
    [v4 setBool:1 forKey:v5];

    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = CFNotificationCenterGetDarwinNotifyCenter();
    NSString v8 = v6;
    CFNotificationCenterPostNotification(v7, v8, 0, 0, 1u);
  }
  else
  {
    id v7 = *(__CFNotificationCenter **)(v0 + 40);
  }

  id v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10005E3F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v35 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v33 = v9;
  uint64_t v34 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100006040(v13, (uint64_t)qword_100094080);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v30 = a1;
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v32 = a3;
    uint64_t v37 = v17;
    uint64_t v31 = v12;
    *(_DWORD *)uint64_t v16 = 136446210;
    uint64_t v36 = sub_100007E60(0xD00000000000002BLL, 0x800000010007F000, &v37);
    a1 = v30;
    uint64_t v12 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s", v16, 0xCu);
    swift_arrayDestroy();
    a3 = v32;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v18 = [self currentConnection];
  if (v18)
  {
    id v19 = v18;
    char v20 = sub_10005A910();

    char v21 = v20 ^ 1;
  }
  else
  {
    char v21 = 1;
  }
  static TaskPriority.userInitiated.getter();
  uint64_t v22 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v12, 0, 1, v22);
  uint64_t v23 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v34, a1, v7);
  unint64_t v24 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v25 = (v33 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = (char *)swift_allocObject();
  *((void *)v26 + 2) = 0;
  *((void *)v26 + 3) = 0;
  *((void *)v26 + 4) = v4;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v26[v24], v23, v7);
  uint64_t v27 = &v26[v25];
  *(void *)uint64_t v27 = v35;
  *((void *)v27 + 1) = a3;
  unsigned char v27[16] = v21 & 1;
  id v28 = v4;
  swift_retain();
  sub_10006DA84((uint64_t)v12, (uint64_t)&unk_100094218, (uint64_t)v26);
  swift_release();
  return sub_10000A738((uint64_t)v12, &qword_1000938B0);
}

uint64_t sub_10005E7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 160) = a8;
  *(void *)(v8 + 88) = a6;
  *(void *)(v8 + 96) = a7;
  *(void *)(v8 + 72) = a4;
  *(void *)(v8 + 80) = a5;
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v8 + 104) = v9;
  *(void *)(v8 + 112) = *(void *)(v9 - 8);
  *(void *)(v8 + 120) = swift_task_alloc();
  return _swift_task_switch(sub_10005E884, 0, 0);
}

uint64_t sub_10005E884()
{
  uint64_t v1 = v0[9];
  static Strings.Daemon.bundleIdentifier.getter();
  swift_bridgeObjectRetain();
  v2._object = (void *)0x800000010007F030;
  v2._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_biomeReader);
  v0[16] = v3;
  v0[17] = [objc_allocWithZone((Class)BMSQLDatabase) init];
  return _swift_task_switch(sub_10005E98C, v3, 0);
}

uint64_t sub_10005E98C()
{
  *(void *)(v0 + 144) = CFBBiomeReader.fetchDonation(donationID:database:)(*(void *)(v0 + 80), *(uint8_t **)(v0 + 136));
  *(void *)(v0 + 152) = 0;

  return _swift_task_switch(sub_10005EA24, 0, 0);
}

uint64_t sub_10005EA24()
{
  unint64_t v24 = v0;
  uint64_t v1 = (void *)v0[18];
  if (v1)
  {
    uint64_t v2 = (void (*)(void))v0[11];
    id v3 = v1;
    _s9feedbackd12CFBAnalyticsV24sendInteractionPresented_8isInliney15FeedbackService15FBKSInteractionC_SbtFZ_0();
    v2(0);
  }
  else
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v5 = v0[14];
    uint64_t v4 = v0[15];
    uint64_t v6 = v0[13];
    uint64_t v7 = v0[10];
    uint64_t v8 = type metadata accessor for Logger();
    sub_100006040(v8, (uint64_t)qword_100094080);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v13 = v0[14];
    uint64_t v12 = v0[15];
    if (v11)
    {
      uint64_t v22 = v0[13];
      uint64_t v14 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446723;
      v0[6] = sub_100007E60(0xD00000000000002BLL, 0x800000010007F000, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2160;
      v0[7] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 22) = 2081;
      uint64_t v15 = UUID.uuidString.getter();
      v0[8] = sub_100007E60(v15, v16, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v22);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s could not find Donation: %{private,mask.hash}s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v13 + 8))(v0[15], v0[13]);
    }

    uint64_t v17 = (void (*)(void))v0[11];
    sub_10002A51C();
    swift_allocError();
    *id v18 = 13;
    id v19 = (void *)_convertErrorToNSError(_:)();
    v17();

    swift_errorRelease();
  }
  swift_task_dealloc();
  char v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_10005ED34()
{
  uint64_t v17 = v0;
  v0[2] = v0[19];
  sub_100008580(&qword_100093940);
  sub_10000C524(0, (unint64_t *)&qword_100093150);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v2 = (void *)v0[3];
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100006040(v3, (uint64_t)qword_100094080);
    id v4 = v2;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446466;
      v0[4] = sub_100007E60(0xD00000000000002BLL, 0x800000010007F000, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2080;
      id v8 = v4;
      id v9 = [v8 description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      v0[5] = sub_100007E60(v10, v12, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s error: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v13 = (void (*)(id))v0[11];
    id v14 = v4;
    v13(v4);

    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  return result;
}

uint64_t sub_10005F058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 72) = a8;
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = a5;
  return _swift_task_switch(sub_10005F080, 0, 0);
}

uint64_t sub_10005F080()
{
  static Strings.Daemon.bundleIdentifier.getter();
  swift_bridgeObjectRetain();
  v1._object = (void *)0x800000010007F030;
  v1._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for FBKSInteraction();
  sub_10006D220(&qword_100094298, (void (*)(uint64_t))&type metadata accessor for FBKSInteraction);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  id v2 = *(id *)(v0 + 16);
  if (dispatch thunk of FBKSInteraction.sentPresented.getter())
  {

    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100006040(v3, (uint64_t)qword_100094080);
    id v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Ignoring .presented(), sentPresented already set", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = *(void (**)(void))(v0 + 56);
  }
  else
  {
    uint64_t v7 = *(void (**)(void))(v0 + 56);
    _s9feedbackd12CFBAnalyticsV24sendInteractionPresented_8isInliney15FeedbackService15FBKSInteractionC_SbtFZ_0();
  }
  v7(0);

  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10005F63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = a8;
  *(unsigned char *)(v8 + 120) = a6;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = a5;
  sub_100008580((uint64_t *)&unk_100094200);
  *(void *)(v8 + 72) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v8 + 80) = v9;
  *(void *)(v8 + 88) = *(void *)(v9 - 8);
  *(void *)(v8 + 96) = swift_task_alloc();
  return _swift_task_switch(sub_10005F734, 0, 0);
}

uint64_t sub_10005F734()
{
  static Strings.Daemon.bundleIdentifier.getter();
  swift_bridgeObjectRetain();
  v1._object = (void *)0x800000010007F160;
  v1._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  id v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v2;
  *id v2 = v0;
  v2[1] = sub_10005F848;
  uint64_t v3 = *(void *)(v0 + 96);
  char v4 = *(unsigned char *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 48);
  return sub_10005FE04(v3, v5, v4);
}

uint64_t sub_10005F848()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = sub_10005FA60;
  }
  else {
    id v2 = sub_10005F95C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005F95C()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v5 = (void (*)(uint64_t, void))v0[7];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v1, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v4, 0, 1, v3);
  v5(v4, 0);
  sub_10000A738(v4, (uint64_t *)&unk_100094200);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10005FA60()
{
  uint64_t v15 = v0;
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006040(v1, (uint64_t)qword_100094080);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[14];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    v0[2] = sub_100007E60(0xD00000000000002CLL, 0x800000010007F130, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2080;
    v0[3] = v5;
    swift_errorRetain();
    sub_100008580(&qword_100093940);
    uint64_t v7 = String.init<A>(describing:)();
    v0[4] = sub_100007E60(v7, v8, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v9 = v0[9];
  uint64_t v10 = (void (*)(uint64_t, void *))v0[7];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[11] + 56))(v9, 1, 1, v0[10]);
  uint64_t v11 = (void *)_convertErrorToNSError(_:)();
  v10(v9, v11);

  swift_errorRelease();
  sub_10000A738(v9, (uint64_t *)&unk_100094200);
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

void sub_10005FD44(void *a1, int a2, void *a3, void *aBlock, void (*a5)(uint64_t, unint64_t, id, void *))
{
  unint64_t v8 = _Block_copy(aBlock);
  id v9 = a3;
  id v13 = a1;
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;

  _Block_copy(v8);
  a5(v10, v12, v13, v8);
  _Block_release(v8);
  _Block_release(v8);
  sub_1000185C0(v10, v12);
}

uint64_t sub_10005FE04(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 56) = a2;
  *(void *)(v4 + 64) = v3;
  *(unsigned char *)(v4 + 248) = a3;
  *(void *)(v4 + 48) = a1;
  sub_100008580((uint64_t *)&unk_100094200);
  *(void *)(v4 + 72) = swift_task_alloc();
  sub_100008580(&qword_100093520);
  *(void *)(v4 + 80) = swift_task_alloc();
  type metadata accessor for FBKSEvaluation.Action();
  *(void *)(v4 + 88) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  *(void *)(v4 + 96) = v5;
  *(void *)(v4 + 104) = *(void *)(v5 - 8);
  *(void *)(v4 + 112) = swift_task_alloc();
  *(void *)(v4 + 120) = swift_task_alloc();
  *(void *)(v4 + 128) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for FBKSEvaluation.Subject();
  *(void *)(v4 + 136) = v6;
  *(void *)(v4 + 144) = *(void *)(v6 - 8);
  *(void *)(v4 + 152) = swift_task_alloc();
  *(void *)(v4 + 160) = swift_task_alloc();
  return _swift_task_switch(sub_10005FFE0, 0, 0);
}

uint64_t sub_10005FFE0()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  FBKSEvaluation.subject.getter();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  if (v4 == enum case for FBKSEvaluation.Subject.id(_:))
  {
    uint64_t v5 = *(void *)(v0 + 160);
    uint64_t v6 = *(void *)(v0 + 128);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 104);
    uint64_t v9 = *(void *)(v0 + 64);
    uint64_t v10 = *(void *)(v0 + 48);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 144) + 96))(v5, *(void *)(v0 + 136));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v6, v5, v7);
    unint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    *(void *)(v0 + 168) = v11;
    *(void *)(v0 + 176) = (v8 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v11(v10, v6, v7);
    uint64_t v12 = *(void *)(v9 + OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_biomeReader);
    *(void *)(v0 + 184) = v12;
    *(void *)(v0 + 192) = [objc_allocWithZone((Class)BMSQLDatabase) init];
    id v13 = sub_100060314;
    uint64_t v14 = v12;
LABEL_11:
    return _swift_task_switch(v13, v14, 0);
  }
  uint64_t v15 = *(void ***)(v0 + 160);
  uint64_t v16 = *(void *)(v0 + 136);
  uint64_t v17 = *(void *)(v0 + 144);
  if (v4 == enum case for FBKSEvaluation.Subject.interaction(_:))
  {
    uint64_t v18 = *(void *)(v0 + 96);
    uint64_t v19 = *(void *)(v0 + 104);
    uint64_t v20 = *(void *)(v0 + 72);
    (*(void (**)(void, void))(v17 + 96))(*(void *)(v0 + 160), *(void *)(v0 + 136));
    char v21 = *v15;
    dispatch thunk of FBKSInteraction.evaluationID.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v20, 1, v18) == 1)
    {
      sub_10000A738(*(void *)(v0 + 72), (uint64_t *)&unk_100094200);
      UUID.init()();
      dispatch thunk of FBKSInteraction.setEvaluationID(_:)();
    }
    else
    {
      uint64_t v24 = *(void *)(v0 + 96);
      uint64_t v25 = *(void *)(v0 + 104);
      uint64_t v26 = *(void *)(v0 + 72);
      uint64_t v27 = *(void *)(v0 + 48);

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v27, v26, v24);
    }
    id v28 = *(void **)(v0 + 56);
    uint64_t v29 = *(void *)(v0 + 64);
    *(void *)(v0 + 216) = 0;
    *(void *)(v0 + 224) = v28;
    _s9feedbackd12CFBAnalyticsV14sendEvaluation_8isInliney15FeedbackService14FBKSEvaluationC_SbtFZ_0(v28, *(unsigned char *)(v0 + 248));
    uint64_t v14 = *(void *)(v29 + OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_biomeDonator);
    *(void *)(v0 + 232) = v14;
    id v13 = sub_100060730;
    goto LABEL_11;
  }
  sub_10001AC84(0xD00000000000001FLL, 0x800000010007EFB0);
  swift_willThrow();
  (*(void (**)(void **, uint64_t))(v17 + 8))(v15, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_100060314()
{
  *(void *)(v0 + 200) = CFBBiomeReader.fetchDonation(donationID:database:)(*(void *)(v0 + 128), *(uint8_t **)(v0 + 192));
  *(void *)(v0 + 208) = 0;

  return _swift_task_switch(sub_1000603AC, 0, 0);
}

uint64_t sub_1000603AC()
{
  uint64_t v32 = v0;
  uint64_t v1 = *(void **)(v0 + 200);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 144);
    uint64_t v3 = *(void **)(v0 + 152);
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v4 = *(void *)(v0 + 136);
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 104);
    *uint64_t v3 = v1;
    (*(void (**)(void *, void, uint64_t))(v2 + 104))(v3, enum case for FBKSEvaluation.Subject.interaction(_:), v4);
    id v8 = v1;
    FBKSEvaluation.action.getter();
    FBKSEvaluation.formResponse.getter();
    id v9 = objc_allocWithZone((Class)type metadata accessor for FBKSEvaluation());
    id v10 = (id)FBKSEvaluation.init(subject:action:formResponse:)();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  else
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    unint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 168);
    uint64_t v12 = *(void *)(v0 + 120);
    uint64_t v13 = *(void *)(v0 + 128);
    uint64_t v14 = *(void *)(v0 + 96);
    uint64_t v15 = type metadata accessor for Logger();
    sub_100006040(v15, (uint64_t)qword_100094080);
    v11(v12, v13, v14);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(void *)(v0 + 120);
    uint64_t v20 = *(void *)(v0 + 128);
    uint64_t v21 = *(void *)(v0 + 96);
    uint64_t v22 = *(void *)(v0 + 104);
    if (v18)
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136446723;
      *(void *)(v0 + 24) = sub_100007E60(0xD000000000000027, 0x800000010007EFD0, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2160;
      *(void *)(v0 + 32) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 22) = 2081;
      uint64_t v24 = UUID.uuidString.getter();
      *(void *)(v0 + 40) = sub_100007E60(v24, v25, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v26(v19, v21);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s could not find Donation: %{private,mask.hash}s", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v26(v20, v21);
    }
    else
    {

      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v27(v19, v21);
      v27(v20, v21);
    }
    id v10 = *(id *)(v0 + 56);
  }
  *(void *)(v0 + 216) = *(void *)(v0 + 208);
  *(void *)(v0 + 224) = v10;
  uint64_t v28 = *(void *)(v0 + 64);
  _s9feedbackd12CFBAnalyticsV14sendEvaluation_8isInliney15FeedbackService14FBKSEvaluationC_SbtFZ_0(v10, *(unsigned char *)(v0 + 248));
  uint64_t v29 = *(void *)(v28 + OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_biomeDonator);
  *(void *)(v0 + 232) = v29;
  return _swift_task_switch(sub_100060730, v29, 0);
}

uint64_t sub_100060730()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = (void *)v0[7];
  sub_10000C524(0, &qword_1000931A8);
  id v3 = sub_1000414F0(v2);
  v0[30] = v1;
  if (v1)
  {
    uint64_t v4 = sub_100060AC0;
  }
  else
  {
    uint64_t v5 = v3;
    [*(id *)(v0[29] + 112) sendEvent:v3];

    uint64_t v4 = sub_1000607FC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000607FC()
{
  uint64_t v20 = v0;
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[6];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100006040(v5, (uint64_t)qword_100094080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  id v9 = (void *)v0[28];
  uint64_t v11 = v0[13];
  uint64_t v10 = v0[14];
  uint64_t v12 = v0[12];
  if (v8)
  {
    BOOL v18 = (void *)v0[28];
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446210;
    sub_10006D220((unint64_t *)&unk_100094160, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_100007E60(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Evaluation recorded with ID: %{public}s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(v0[14], v0[12]);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100060AC0()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 48);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100060BAC()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[6];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0[13] + 8);
  v3(v0[16], v1);
  v3(v2, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100060CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100061870(a1, a2, a3, 0xD000000000000029, 0x800000010007EF60, (uint64_t)&unk_10008EAB0, (uint64_t)&unk_1000941E8);
}

uint64_t sub_100060CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[14] = v8;
  v7[15] = *(void *)(v8 - 8);
  v7[16] = swift_task_alloc();
  return _swift_task_switch(sub_100060DA0, 0, 0);
}

uint64_t sub_100060DA0()
{
  uint64_t v1 = *(void *)(v0 + 80);
  static Strings.Daemon.bundleIdentifier.getter();
  swift_bridgeObjectRetain();
  v2._object = (void *)0x800000010007EF90;
  v2._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_biomeReader);
  *(void *)(v0 + 136) = [objc_allocWithZone((Class)BMSQLDatabase) init];
  return _swift_task_switch(sub_100060EA4, v3, 0);
}

uint64_t sub_100060EA4()
{
  *(void *)(v0 + 144) = sub_1000091B0();
  *(void *)(v0 + 152) = 0;

  return _swift_task_switch(sub_100060F3C, 0, 0);
}

uint64_t sub_100060F3C()
{
  int v39 = v0;
  if (!v0[18])
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v1 = v0[15];
    uint64_t v2 = v0[16];
    uint64_t v3 = v0[14];
    uint64_t v4 = v0[11];
    uint64_t v5 = type metadata accessor for Logger();
    sub_100006040(v5, (uint64_t)qword_100094080);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4, v3);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v10 = v0[15];
    uint64_t v9 = v0[16];
    if (v8)
    {
      uint64_t v37 = v0[14];
      uint64_t v11 = swift_slowAlloc();
      v38[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446723;
      v0[7] = sub_100007E60(0xD000000000000029, 0x800000010007EF60, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2160;
      v0[8] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 22) = 2081;
      uint64_t v12 = UUID.uuidString.getter();
      v0[9] = sub_100007E60(v12, v13, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v37);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s could not find Evaluation: %{private,mask.hash}s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v10 + 8))(v0[16], v0[14]);
    }
  }
  uint64_t v14 = v0[18];
  uint64_t v15 = v0[19];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v0[6] = v14;
  sub_100008580(&qword_1000941F0);
  sub_10006A668();
  uint64_t v16 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  BOOL v18 = (void *)v0[18];
  if (v15)
  {
    swift_release();

    v0[2] = v15;
    sub_100008580(&qword_100093940);
    sub_10000C524(0, (unint64_t *)&qword_100093150);
    uint64_t result = swift_dynamicCast();
    if ((result & 1) == 0) {
      return result;
    }
    uint64_t v20 = (void *)v0[3];
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100006040(v21, (uint64_t)qword_100094080);
    id v22 = v20;
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      v38[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446466;
      v0[4] = sub_100007E60(0xD000000000000029, 0x800000010007EF60, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2080;
      id v26 = v22;
      id v27 = [v26 description];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v30 = v29;

      v0[5] = sub_100007E60(v28, v30, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s error: %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v34 = (void (*)(void, unint64_t, id))v0[12];
    id v35 = v22;
    v34(0, 0xF000000000000000, v22);

    swift_errorRelease();
  }
  else
  {
    uint64_t v31 = v16;
    unint64_t v32 = v17;
    uint64_t v33 = (void (*)(uint64_t, unint64_t, void))v0[12];
    swift_release();
    sub_10001866C(v31, v32);
    v33(v31, v32, 0);
    sub_1000185C0(v31, v32);
    sub_1000185C0(v31, v32);
  }
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

uint64_t sub_10006150C()
{
  unint64_t v17 = v0;
  v0[2] = v0[19];
  sub_100008580(&qword_100093940);
  sub_10000C524(0, (unint64_t *)&qword_100093150);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v2 = (void *)v0[3];
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100006040(v3, (uint64_t)qword_100094080);
    id v4 = v2;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446466;
      v0[4] = sub_100007E60(0xD000000000000029, 0x800000010007EF60, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2080;
      id v8 = v4;
      id v9 = [v8 description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      v0[5] = sub_100007E60(v10, v12, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s error: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    unint64_t v13 = (void (*)(void, unint64_t, id))v0[12];
    id v14 = v4;
    v13(0, 0xF000000000000000, v4);

    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  return result;
}

uint64_t sub_100061838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100061870(a1, a2, a3, 0xD000000000000025, 0x800000010007EF10, (uint64_t)&unk_10008EA88, (uint64_t)&unk_1000941C8);
}

uint64_t sub_100061870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v43 = a7;
  uint64_t v39 = a4;
  uint64_t v10 = v7;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v40 = v15;
  uint64_t v41 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100006040(v19, (uint64_t)qword_100094080);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    unint64_t v35 = a5;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v36 = a1;
    uint64_t v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v38 = a3;
    uint64_t v45 = v24;
    uint64_t v37 = a6;
    *(_DWORD *)uint64_t v23 = 136446210;
    uint64_t v44 = sub_100007E60(v39, v35, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s", v23, 0xCu);
    swift_arrayDestroy();
    a3 = v38;
    swift_slowDealloc();
    a1 = v36;
    swift_slowDealloc();
  }

  static TaskPriority.userInitiated.getter();
  uint64_t v25 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v18, 0, 1, v25);
  id v26 = v41;
  uint64_t v27 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v41, a1, v42);
  unint64_t v28 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v29 = (v40 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (char *)swift_allocObject();
  *((void *)v30 + 2) = 0;
  *((void *)v30 + 3) = 0;
  *((void *)v30 + 4) = v10;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v30[v28], v26, v27);
  uint64_t v31 = &v30[v29];
  *(void *)uint64_t v31 = a2;
  *((void *)v31 + 1) = a3;
  id v32 = v10;
  swift_retain();
  sub_10006DA84((uint64_t)v18, v43, (uint64_t)v30);
  swift_release();
  return sub_10000A738((uint64_t)v18, &qword_1000938B0);
}

uint64_t sub_100061BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[14] = v8;
  v7[15] = *(void *)(v8 - 8);
  v7[16] = swift_task_alloc();
  return _swift_task_switch(sub_100061CB0, 0, 0);
}

uint64_t sub_100061CB0()
{
  uint64_t v1 = v0[10];
  static Strings.Daemon.bundleIdentifier.getter();
  swift_bridgeObjectRetain();
  v2._object = (void *)0x800000010007EF40;
  v2._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_biomeReader);
  v0[17] = v3;
  v0[18] = [objc_allocWithZone((Class)BMSQLDatabase) init];
  return _swift_task_switch(sub_100061DB8, v3, 0);
}

uint64_t sub_100061DB8()
{
  *(void *)(v0 + 152) = CFBBiomeReader.fetchDonation(donationID:database:)(*(void *)(v0 + 88), *(uint8_t **)(v0 + 144));
  *(void *)(v0 + 160) = 0;

  return _swift_task_switch(sub_100061E50, 0, 0);
}

uint64_t sub_100061E50()
{
  uint64_t v39 = v0;
  if (!v0[19])
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v1 = v0[15];
    uint64_t v2 = v0[16];
    uint64_t v3 = v0[14];
    uint64_t v4 = v0[11];
    uint64_t v5 = type metadata accessor for Logger();
    sub_100006040(v5, (uint64_t)qword_100094080);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4, v3);
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v10 = v0[15];
    uint64_t v9 = v0[16];
    if (v8)
    {
      uint64_t v37 = v0[14];
      uint64_t v11 = swift_slowAlloc();
      v38[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446723;
      v0[7] = sub_100007E60(0xD000000000000025, 0x800000010007EF10, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2160;
      v0[8] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 22) = 2081;
      uint64_t v12 = UUID.uuidString.getter();
      v0[9] = sub_100007E60(v12, v13, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v37);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s could not find Donation: %{private,mask.hash}s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v10 + 8))(v0[16], v0[14]);
    }
  }
  uint64_t v14 = v0[19];
  uint64_t v15 = v0[20];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v0[6] = v14;
  sub_100008580(&qword_1000941D0);
  sub_10006A390();
  uint64_t v16 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v18 = (void *)v0[19];
  if (v15)
  {
    swift_release();

    v0[2] = v15;
    sub_100008580(&qword_100093940);
    sub_10000C524(0, (unint64_t *)&qword_100093150);
    uint64_t result = swift_dynamicCast();
    if ((result & 1) == 0) {
      return result;
    }
    uint64_t v20 = (void *)v0[3];
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100006040(v21, (uint64_t)qword_100094080);
    id v22 = v20;
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      v38[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446466;
      v0[4] = sub_100007E60(0xD000000000000025, 0x800000010007EF10, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2080;
      id v26 = v22;
      id v27 = [v26 description];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v30 = v29;

      v0[5] = sub_100007E60(v28, v30, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s error: %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v34 = (void (*)(void, unint64_t, id))v0[12];
    id v35 = v22;
    v34(0, 0xF000000000000000, v22);

    swift_errorRelease();
  }
  else
  {
    uint64_t v31 = v16;
    unint64_t v32 = v17;
    uint64_t v33 = (void (*)(uint64_t, unint64_t, void))v0[12];
    swift_release();
    sub_10001866C(v31, v32);
    v33(v31, v32, 0);
    sub_1000185C0(v31, v32);
    sub_1000185C0(v31, v32);
  }
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

uint64_t sub_100062420()
{
  unint64_t v17 = v0;
  v0[2] = v0[20];
  sub_100008580(&qword_100093940);
  sub_10000C524(0, (unint64_t *)&qword_100093150);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v2 = (void *)v0[3];
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100006040(v3, (uint64_t)qword_100094080);
    id v4 = v2;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446466;
      v0[4] = sub_100007E60(0xD000000000000025, 0x800000010007EF10, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2080;
      id v8 = v4;
      id v9 = [v8 description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      v0[5] = sub_100007E60(v10, v12, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s error: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    unint64_t v13 = (void (*)(void, unint64_t, id))v0[12];
    id v14 = v4;
    v13(0, 0xF000000000000000, v4);

    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  return result;
}

uint64_t sub_10006274C(void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, void (*a7)(char *, uint64_t, uint64_t))
{
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  id v17 = a1;
  a7(v14, a6, v16);
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_100062890(int a1, char a2, uint64_t a3, uint64_t a4)
{
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100006040(v8, (uint64_t)qword_100094080);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    sub_100007E60(0xD00000000000002CLL, 0x800000010007EEE0, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return sub_100062B28(a1, a2 & 1, (uint64_t)_swiftEmptyArrayStorage, a3, a4);
}

uint64_t sub_100062B28(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000636F4(a1, a2, a3, a4, a5, 0xD000000000000043, 0x800000010007EE90, (uint64_t)&unk_10008EA60, (uint64_t)&unk_1000941A0);
}

uint64_t sub_100062B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 80) = a8;
  *(void *)(v8 + 88) = v10;
  *(unsigned char *)(v8 + 132) = a6;
  *(_DWORD *)(v8 + 128) = a5;
  *(void *)(v8 + 64) = a4;
  *(void *)(v8 + 72) = a7;
  return _swift_task_switch(sub_100062BB0, 0, 0);
}

uint64_t sub_100062BB0()
{
  static Strings.Daemon.bundleIdentifier.getter();
  swift_bridgeObjectRetain();
  v1._uint64_t countAndFlagsBits = 0x6F4468637465662ELL;
  v1._object = (void *)0xEF736E6F6974616ELL;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  id v2 = [objc_allocWithZone((Class)BMSQLDatabase) init];
  *(void *)(v0 + 96) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100062D04;
  uint64_t v4 = *(void *)(v0 + 72);
  char v5 = *(unsigned char *)(v0 + 132);
  int v6 = *(_DWORD *)(v0 + 128);
  return CFBBiomeReader.fetchDonations(count:fromLatest:excludingEvaluationIDs:database:)(v6, v5, v4, (uint64_t)v2);
}

uint64_t sub_100062D04(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 112) = a1;
  *(void *)(v3 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_100063358;
  }
  else
  {

    uint64_t v4 = sub_100062E20;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100062E20()
{
  unint64_t v30 = v0;
  unint64_t v1 = v0[14];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v28) {
      goto LABEL_8;
    }
  }
  else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_8;
  }
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100006040(v2, (uint64_t)qword_100094080);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = (uint8_t *)swift_slowAlloc();
    v29[0] = swift_slowAlloc();
    *(_DWORD *)char v5 = 136446210;
    v0[7] = sub_100007E60(0xD000000000000043, 0x800000010007EE90, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s could not find any donations", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

LABEL_8:
  uint64_t v6 = v0[14];
  uint64_t v7 = v0[15];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v0[6] = v6;
  sub_100008580(&qword_1000941A8);
  sub_10006A1AC();
  uint64_t v8 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v7)
  {
    swift_release();
    swift_bridgeObjectRelease();
    v0[2] = v7;
    sub_100008580(&qword_100093940);
    sub_10000C524(0, (unint64_t *)&qword_100093150);
    uint64_t result = swift_dynamicCast();
    if ((result & 1) == 0) {
      return result;
    }
    uint64_t v11 = (void *)v0[3];
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100006040(v12, (uint64_t)qword_100094080);
    id v13 = v11;
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      v29[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446466;
      v0[4] = sub_100007E60(0xD000000000000043, 0x800000010007EE90, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2080;
      id v17 = v13;
      id v18 = [v17 description];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      v0[5] = sub_100007E60(v19, v21, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s error: %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v25 = (void (*)(void, unint64_t, id))v0[10];
    id v26 = v13;
    v25(0, 0xF000000000000000, v13);

    swift_errorRelease();
  }
  else
  {
    uint64_t v22 = v8;
    unint64_t v23 = v9;
    os_log_type_t v24 = (void (*)(uint64_t, unint64_t, void))v0[10];
    swift_release();
    swift_bridgeObjectRelease();
    sub_10001866C(v22, v23);
    v24(v22, v23, 0);
    sub_1000185C0(v22, v23);
    sub_1000185C0(v22, v23);
  }
  id v27 = (uint64_t (*)(void))v0[1];
  return v27();
}

uint64_t sub_100063358()
{
  uint64_t v17 = v0;

  *(void *)(v0 + 16) = *(void *)(v0 + 120);
  sub_100008580(&qword_100093940);
  sub_10000C524(0, (unint64_t *)&qword_100093150);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v2 = *(void **)(v0 + 24);
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100006040(v3, (uint64_t)qword_100094080);
    id v4 = v2;
    char v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446466;
      *(void *)(v0 + 32) = sub_100007E60(0xD000000000000043, 0x800000010007EE90, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2080;
      id v8 = v4;
      id v9 = [v8 description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      *(void *)(v0 + 40) = sub_100007E60(v10, v12, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s error: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v13 = *(void (**)(void, unint64_t, id))(v0 + 80);
    id v14 = v4;
    v13(0, 0xF000000000000000, v4);

    swift_errorRelease();
    os_log_type_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  return result;
}

uint64_t sub_1000636A0(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000636F4(a1, a2, a3, a4, a5, 0xD000000000000045, 0x800000010007EE40, (uint64_t)&unk_10008EA38, (uint64_t)&unk_100094178);
}

uint64_t sub_1000636F4(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v32 = a5;
  uint64_t v34 = a4;
  uint64_t v14 = a9;
  uint64_t v15 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100006040(v18, (uint64_t)qword_100094080);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v30 = a3;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v31 = a9;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136446210;
    uint64_t v35 = sub_100007E60(a6, a7, &v36);
    a3 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v14 = v31;
    swift_slowDealloc();
  }

  static TaskPriority.userInitiated.getter();
  uint64_t v23 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v17, 0, 1, v23);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = 0;
  *(void *)(v24 + 24) = 0;
  uint64_t v25 = v33;
  *(void *)(v24 + 32) = v33;
  *(_DWORD *)(v24 + 40) = a1;
  *(unsigned char *)(v24 + 44) = a2 & 1;
  uint64_t v26 = v34;
  *(void *)(v24 + 48) = a3;
  *(void *)(v24 + 56) = v26;
  *(void *)(v24 + 64) = v32;
  swift_bridgeObjectRetain();
  swift_retain();
  id v27 = v25;
  sub_10006DA84((uint64_t)v17, v14, v24);
  swift_release();
  return sub_10000A738((uint64_t)v17, &qword_1000938B0);
}

uint64_t sub_1000639BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 56) = a8;
  *(void *)(v8 + 64) = v10;
  *(unsigned char *)(v8 + 100) = a6;
  *(_DWORD *)(v8 + 96) = a5;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = a7;
  return _swift_task_switch(sub_1000639F0, 0, 0);
}

uint64_t sub_1000639F0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  static Strings.Daemon.bundleIdentifier.getter();
  swift_bridgeObjectRetain();
  v2._uint64_t countAndFlagsBits = 0x6F4468637465662ELL;
  v2._object = (void *)0xEF736E6F6974616ELL;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_biomeReader);
  *(void *)(v0 + 72) = [objc_allocWithZone((Class)BMSQLDatabase) init];
  return _swift_task_switch(sub_100063AFC, v3, 0);
}

uint64_t sub_100063AFC()
{
  *(void *)(v0 + 80) = sub_1000097AC(*(_DWORD *)(v0 + 96), *(unsigned char *)(v0 + 100), *(void *)(v0 + 48), *(void *)(v0 + 72));
  *(void *)(v0 + 88) = 0;

  return _swift_task_switch(sub_100063B9C, 0, 0);
}

uint64_t sub_100063B9C()
{
  uint64_t v29 = v0;
  uint64_t v1 = v0 + 2;
  if (!*(void *)(v0[10] + 16))
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100006040(v2, (uint64_t)qword_100094080);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      v28[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      *uint64_t v1 = sub_100007E60(0xD000000000000045, 0x800000010007EE40, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s could not find any donations", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v7 = v0[10];
  uint64_t v6 = v0[11];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v0[2] = v7;
  sub_100008580(&qword_100094180);
  sub_100069FDC();
  uint64_t v8 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v6)
  {
    swift_release();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v6;
    sub_100008580(&qword_100093940);
    sub_10000C524(0, (unint64_t *)&qword_100093150);
    uint64_t result = swift_dynamicCast();
    if ((result & 1) == 0) {
      return result;
    }
    unint64_t v11 = (void *)v0[3];
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100006040(v12, (uint64_t)qword_100094080);
    id v13 = v11;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      v28[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446466;
      v0[4] = sub_100007E60(0xD000000000000045, 0x800000010007EE40, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2080;
      id v17 = v13;
      id v18 = [v17 description];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      v0[4] = sub_100007E60(v19, v21, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s error: %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v25 = (void (*)(void, unint64_t, id))v0[7];
    id v26 = v13;
    v25(0, 0xF000000000000000, v13);

    swift_errorRelease();
  }
  else
  {
    uint64_t v22 = v8;
    unint64_t v23 = v9;
    uint64_t v24 = (void (*)(uint64_t, unint64_t, void))v0[7];
    swift_release();
    swift_bridgeObjectRelease();
    sub_10001866C(v22, v23);
    v24(v22, v23, 0);
    sub_1000185C0(v22, v23);
    sub_1000185C0(v22, v23);
  }
  id v27 = (uint64_t (*)(void))v0[1];
  return v27();
}

uint64_t sub_100064090()
{
  id v17 = v0;
  v0[2] = v0[11];
  sub_100008580(&qword_100093940);
  sub_10000C524(0, (unint64_t *)&qword_100093150);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v2 = (void *)v0[3];
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100006040(v3, (uint64_t)qword_100094080);
    id v4 = v2;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446466;
      v0[4] = sub_100007E60(0xD000000000000045, 0x800000010007EE40, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2080;
      id v8 = v4;
      id v9 = [v8 description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      v0[4] = sub_100007E60(v10, v12, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s error: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v13 = (void (*)(void, unint64_t, id))v0[7];
    id v14 = v4;
    v13(0, 0xF000000000000000, v4);

    swift_errorRelease();
    os_log_type_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  return result;
}

uint64_t sub_1000643D0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *aBlock, int a7, uint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  id v14 = _Block_copy(aBlock);
  if (a5) {
    a5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  id v16 = a1;
  a9(a3, a4, a5, a8, v15);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_1000644A4(uint64_t a1, unint64_t a2, void (*a3)(void, void, void), uint64_t a4)
{
  unint64_t v48 = a2;
  uint64_t v52 = a4;
  uint64_t v47 = a1;
  uint64_t v5 = type metadata accessor for Failure();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  unint64_t v12 = (char *)&v44 - v11;
  __chkstk_darwin(v10);
  uint64_t v50 = (char *)&v44 - v13;
  uint64_t v14 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v14 - 8);
  unint64_t v46 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100006040(v16, (uint64_t)qword_100094080);
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  os_log_type_t v51 = v9;
  if (v19)
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v45 = a3;
    unint64_t v21 = (uint8_t *)v20;
    v54[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v21 = 136446210;
    uint64_t v53 = sub_100007E60(0xD000000000000023, 0x800000010007EDA0, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v45;
    swift_slowDealloc();
  }

  id v22 = [self currentConnection];
  if (v22)
  {
    unint64_t v23 = v22;
    if (sub_10005A9B8((void (*)(void))&static Strings.XPC.CentralizedFeedback.remoteEvaluationEntitlement.getter))
    {
      uint64_t v24 = (uint64_t)v46;
      static TaskPriority.userInitiated.getter();
      uint64_t v25 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 0, 1, v25);
      id v26 = (void *)swift_allocObject();
      _OWORD v26[2] = 0;
      uint64_t v26[3] = 0;
      uint64_t v27 = v47;
      unint64_t v28 = v48;
      v26[4] = v47;
      v26[5] = v28;
      uint64_t v29 = v49;
      v26[6] = v49;
      v26[7] = a3;
      v26[8] = v52;
      sub_10001866C(v27, v28);
      id v30 = v29;
      sub_1000589E0((uint64_t)a3);
      sub_10006DA84(v24, (uint64_t)&unk_100094140, (uint64_t)v26);
      swift_release();

      sub_10000A738(v24, &qword_1000938B0);
      return;
    }
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      os_log_type_t v51 = v12;
      v54[0] = v40;
      *(_DWORD *)uint64_t v39 = 136315138;
      uint64_t v53 = sub_100007E60(0xD000000000000023, 0x800000010007EDA0, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Client not entitled to call %s", v39, 0xCu);
      swift_arrayDestroy();
      unint64_t v12 = v51;
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v41 = v50;
    v54[0] = 0;
    v54[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    Failure.init(message:)();
    if (a3)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v41, v5);
      sub_10006D220(&qword_100094130, (void (*)(uint64_t))&type metadata accessor for Failure);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v42, v12, v5);
      uint64_t v43 = (void *)_convertErrorToNSError(_:)();
      a3(0, 0xF000000000000000, v43);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v41, v5);
      goto LABEL_16;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v41, v5);
  }
  else
  {
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Current XPC connection is nil. Cannot check entitlements", v33, 2u);
      swift_slowDealloc();
    }

    uint64_t v34 = v51;
    Failure.init(message:)();
    if (a3)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v34, v5);
      sub_10006D220(&qword_100094130, (void (*)(uint64_t))&type metadata accessor for Failure);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v35, v12, v5);
      uint64_t v36 = (void *)_convertErrorToNSError(_:)();
      a3(0, 0xF000000000000000, v36);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v34, v5);
LABEL_16:
      swift_errorRelease();
      return;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v34, v5);
  }
}

uint64_t sub_100064C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[11] = a7;
  v8[12] = a8;
  v8[9] = a5;
  v8[10] = a6;
  v8[8] = a4;
  uint64_t v9 = type metadata accessor for FBKSRemoteAlertRequest();
  v8[13] = v9;
  v8[14] = *(void *)(v9 - 8);
  v8[15] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for FBKSRemoteEvaluationRequest();
  v8[16] = v10;
  v8[17] = *(void *)(v10 - 8);
  v8[18] = swift_task_alloc();
  sub_100008580(&qword_100093520);
  v8[19] = swift_task_alloc();
  type metadata accessor for FBKSEvaluation.Action();
  v8[20] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Failure();
  v8[21] = v11;
  v8[22] = *(void *)(v11 - 8);
  v8[23] = swift_task_alloc();
  v8[24] = swift_task_alloc();
  v8[25] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for UUID();
  v8[26] = v12;
  v8[27] = *(void *)(v12 - 8);
  v8[28] = swift_task_alloc();
  v8[29] = swift_task_alloc();
  v8[30] = swift_task_alloc();
  v8[31] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for FBKSEvaluation.Subject();
  v8[32] = v13;
  v8[33] = *(void *)(v13 - 8);
  v8[34] = swift_task_alloc();
  v8[35] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for FBKSEvaluation.Subject.RemoteEvaluation();
  v8[36] = v14;
  v8[37] = *(void *)(v14 - 8);
  v8[38] = swift_task_alloc();
  return _swift_task_switch(sub_100064F98, 0, 0);
}

uint64_t sub_100064F98()
{
  uint64_t v78 = v0;
  uint64_t v76 = static Strings.Daemon.bundleIdentifier.getter();
  unint64_t v77 = v1;
  swift_bridgeObjectRetain();
  v2._uint64_t countAndFlagsBits = 0x4565746F6D65722ELL;
  v2._object = (void *)0xEF657461756C6176;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  sub_10006D220(&qword_100094150, (void (*)(uint64_t))&type metadata accessor for FBKSEvaluation.Subject.RemoteEvaluation);
  static JSONCodable.decode(from:)();
  v0[39] = 0;
  uint64_t v3 = v0[35];
  uint64_t v4 = v0[32];
  uint64_t v5 = v0[33];
  FBKSEvaluation.Subject.RemoteEvaluation.subject.getter();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v3, v4);
  if (v6 == enum case for FBKSEvaluation.Subject.id(_:))
  {
    uint64_t v7 = v0[35];
    uint64_t v8 = v0[31];
    uint64_t v9 = v0[26];
    uint64_t v10 = v0[27];
    (*(void (**)(uint64_t, void))(v0[33] + 96))(v7, v0[32]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v8, v7, v9);
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v12 = v0[30];
    uint64_t v11 = v0[31];
    uint64_t v13 = v0[26];
    uint64_t v14 = v0[27];
    uint64_t v15 = type metadata accessor for Logger();
    v0[40] = sub_100006040(v15, (uint64_t)qword_100094080);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    v0[41] = v16;
    v0[42] = (v14 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v16(v12, v11, v13);
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = v0[30];
    uint64_t v21 = v0[26];
    uint64_t v22 = v0[27];
    if (v19)
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v76 = swift_slowAlloc();
      *(_DWORD *)unint64_t v23 = 136446210;
      sub_10006D220((unint64_t *)&unk_100094160, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[7] = sub_100007E60(v24, v25, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v26 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v26(v20, v21);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Fetching donation for donationId %{public}s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v26 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v26(v0[30], v0[26]);
    }

    v0[43] = v26;
    uint64_t v44 = *(void *)(v0[10] + OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_biomeReader);
    v0[44] = v44;
    v0[45] = [objc_allocWithZone((Class)BMSQLDatabase) init];
    return _swift_task_switch(sub_100065B94, v44, 0);
  }
  else
  {
    uint64_t v27 = v6;
    if (v6 == enum case for FBKSEvaluation.Subject.interaction(_:))
    {
      unint64_t v28 = (void **)v0[35];
      (*(void (**)(void **, void))(v0[33] + 96))(v28, v0[32]);
      uint64_t v29 = *v28;
      if (qword_100092AB8 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100006040(v30, (uint64_t)qword_100094080);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Using Interaction", v33, 2u);
        swift_slowDealloc();
      }

      v0[48] = v29;
      if (FBKSEvaluation.Subject.RemoteEvaluation.showFeedbackForm.getter())
      {
        uint64_t v35 = v0[17];
        uint64_t v34 = v0[18];
        uint64_t v37 = v0[15];
        uint64_t v36 = v0[16];
        uint64_t v38 = v0[13];
        uint64_t v39 = v0[14];
        FBKSEvaluation.Subject.RemoteEvaluation.action.getter();
        id v40 = v29;
        FBKSEvaluation.Subject.RemoteEvaluation.showFeedbackForm.getter();
        FBKSRemoteEvaluationRequest.init(action:interaction:showFeedbackForm:)();
        type metadata accessor for LaunchController();
        swift_initStaticObject();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v37, v34, v36);
        (*(void (**)(uint64_t, void, uint64_t))(v39 + 104))(v37, enum case for FBKSRemoteAlertRequest.evaluation(_:), v38);
        uint64_t v41 = (void *)swift_task_alloc();
        v0[53] = v41;
        *uint64_t v41 = v0;
        v41[1] = sub_100066868;
        uint64_t v42 = v0[15];
        return sub_10004BFC0(v42);
      }
      else
      {
        if (qword_100092AB8 != -1) {
          swift_once();
        }
        uint64_t v59 = v29;
        sub_100006040(v30, (uint64_t)qword_100094080);
        os_log_type_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v62 = 0;
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "Client doesn't now want to show feedback form. Will record evaluation now and exit", v62, 2u);
          swift_slowDealloc();
        }
        uint64_t v64 = v0[33];
        uint64_t v63 = (void *)v0[34];
        uint64_t v65 = v0[32];
        uint64_t v66 = v0[19];

        *uint64_t v63 = v59;
        (*(void (**)(void *, uint64_t, uint64_t))(v64 + 104))(v63, v27, v65);
        id v67 = v59;
        FBKSEvaluation.Subject.RemoteEvaluation.action.getter();
        uint64_t v68 = type metadata accessor for FBKSEvaluation.FormResponse();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v66, 1, 1, v68);
        uint64_t v69 = (objc_class *)type metadata accessor for FBKSEvaluation();
        v0[49] = v69;
        id v70 = objc_allocWithZone(v69);
        uint64_t v71 = FBKSEvaluation.init(subject:action:formResponse:)();
        v0[50] = v71;
        uint64_t v72 = (void *)swift_task_alloc();
        v0[51] = v72;
        void *v72 = v0;
        v72[1] = sub_10006646C;
        uint64_t v73 = v0[28];
        return sub_10005FE04(v73, v71, 1);
      }
    }
    else
    {
      if (qword_100092AB8 != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      sub_100006040(v45, (uint64_t)qword_100094080);
      unint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v46, v47))
      {
        unint64_t v48 = (uint8_t *)swift_slowAlloc();
        uint64_t v76 = swift_slowAlloc();
        *(_DWORD *)unint64_t v48 = 136315138;
        v0[2] = sub_100007E60(0xD000000000000023, 0x800000010007EDA0, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Unknown default in %s", v48, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v49 = v0[11];
      uint64_t v76 = 0;
      unint64_t v77 = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      Failure.init(message:)();
      uint64_t v51 = v0[37];
      uint64_t v50 = v0[38];
      uint64_t v52 = v0[36];
      if (v49)
      {
        uint64_t v53 = v0[23];
        uint64_t v54 = v0[24];
        uint64_t v55 = v0[21];
        uint64_t v56 = v0[22];
        uint64_t v75 = (void (*)(void, unint64_t, void *))v0[11];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v54, v53, v55);
        sub_10006D220(&qword_100094130, (void (*)(uint64_t))&type metadata accessor for Failure);
        swift_allocError();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v57, v54, v55);
        unint64_t v58 = (void *)_convertErrorToNSError(_:)();
        v75(0, 0xF000000000000000, v58);

        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v53, v55);
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
        swift_errorRelease();
      }
      else
      {
        (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
      }
      (*(void (**)(void, void))(v0[33] + 8))(v0[35], v0[32]);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v74 = (uint64_t (*)(void))v0[1];
      return v74();
    }
  }
}

uint64_t sub_100065B94()
{
  uint64_t v1 = *(void *)(v0 + 312);
  *(void *)(v0 + 368) = CFBBiomeReader.fetchDonation(donationID:database:)(*(void *)(v0 + 248), *(uint8_t **)(v0 + 360));
  *(void *)(v0 + 376) = v1;

  if (v1) {
    Swift::String v2 = sub_100066C18;
  }
  else {
    Swift::String v2 = sub_100065C2C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100065C2C()
{
  uint64_t v56 = v0;
  uint64_t v1 = *(void **)(v0 + 368);
  if (v1)
  {
    (*(void (**)(void, void))(v0 + 344))(*(void *)(v0 + 248), *(void *)(v0 + 208));
    *(void *)(v0 + 384) = v1;
    if (FBKSEvaluation.Subject.RemoteEvaluation.showFeedbackForm.getter())
    {
      uint64_t v3 = *(void *)(v0 + 136);
      uint64_t v2 = *(void *)(v0 + 144);
      uint64_t v5 = *(void *)(v0 + 120);
      uint64_t v4 = *(void *)(v0 + 128);
      uint64_t v6 = *(void *)(v0 + 104);
      uint64_t v7 = *(void *)(v0 + 112);
      FBKSEvaluation.Subject.RemoteEvaluation.action.getter();
      id v8 = v1;
      FBKSEvaluation.Subject.RemoteEvaluation.showFeedbackForm.getter();
      FBKSRemoteEvaluationRequest.init(action:interaction:showFeedbackForm:)();
      type metadata accessor for LaunchController();
      swift_initStaticObject();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v2, v4);
      (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v5, enum case for FBKSRemoteAlertRequest.evaluation(_:), v6);
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 424) = v9;
      *uint64_t v9 = v0;
      v9[1] = sub_100066868;
      uint64_t v10 = *(void *)(v0 + 120);
      return sub_10004BFC0(v10);
    }
    else
    {
      if (qword_100092AB8 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_100006040(v19, (uint64_t)qword_100094080);
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Client doesn't now want to show feedback form. Will record evaluation now and exit", v22, 2u);
        swift_slowDealloc();
      }
      uint64_t v24 = *(void *)(v0 + 264);
      unint64_t v23 = *(void **)(v0 + 272);
      uint64_t v25 = *(void *)(v0 + 256);
      uint64_t v26 = *(void *)(v0 + 152);

      *unint64_t v23 = v1;
      (*(void (**)(void *, void, uint64_t))(v24 + 104))(v23, enum case for FBKSEvaluation.Subject.interaction(_:), v25);
      id v27 = v1;
      FBKSEvaluation.Subject.RemoteEvaluation.action.getter();
      uint64_t v28 = type metadata accessor for FBKSEvaluation.FormResponse();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v26, 1, 1, v28);
      uint64_t v29 = (objc_class *)type metadata accessor for FBKSEvaluation();
      *(void *)(v0 + 392) = v29;
      id v30 = objc_allocWithZone(v29);
      uint64_t v31 = FBKSEvaluation.init(subject:action:formResponse:)();
      *(void *)(v0 + 400) = v31;
      os_log_type_t v32 = (void *)swift_task_alloc();
      *(void *)(v0 + 408) = v32;
      *os_log_type_t v32 = v0;
      v32[1] = sub_10006646C;
      uint64_t v33 = *(void *)(v0 + 224);
      return sub_10005FE04(v33, v31, 1);
    }
  }
  else
  {
    (*(void (**)(void, void, void))(v0 + 328))(*(void *)(v0 + 232), *(void *)(v0 + 248), *(void *)(v0 + 208));
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(void *)(v0 + 232);
    if (v14)
    {
      uint64_t v51 = *(void *)(v0 + 208);
      uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
      uint64_t v16 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446723;
      *(void *)(v0 + 32) = sub_100007E60(0xD000000000000023, 0x800000010007EDA0, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2160;
      *(void *)(v0 + 40) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 22) = 2081;
      uint64_t v17 = UUID.uuidString.getter();
      *(void *)(v0 + 48) = sub_100007E60(v17, v18, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v52(v15, v51);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s could not find Donation: %{private,mask.hash}s", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 344))(*(void *)(v0 + 232), *(void *)(v0 + 208));
    }

    uint64_t v34 = *(void *)(v0 + 88);
    uint64_t v54 = 0;
    unint64_t v55 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    uint64_t v54 = 0xD000000000000020;
    unint64_t v55 = 0x800000010007EE10;
    sub_10006D220((unint64_t *)&unk_100094160, (void (*)(uint64_t))&type metadata accessor for UUID);
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    Failure.init(message:)();
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    uint64_t v37 = *(void *)(v0 + 296);
    uint64_t v38 = *(void *)(v0 + 304);
    uint64_t v39 = *(void *)(v0 + 288);
    uint64_t v40 = *(void *)(v0 + 248);
    uint64_t v41 = *(void *)(v0 + 208);
    uint64_t v42 = *(void *)(v0 + 200);
    if (v34)
    {
      uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
      uint64_t v43 = *(void *)(v0 + 192);
      uint64_t v53 = *(void *)(v0 + 288);
      uint64_t v45 = *(void *)(v0 + 168);
      uint64_t v44 = *(void *)(v0 + 176);
      uint64_t v49 = *(void (**)(void, unint64_t, void *))(v0 + 88);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v43, v42, v45);
      sub_10006D220(&qword_100094130, (void (*)(uint64_t))&type metadata accessor for Failure);
      swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v46, v43, v45);
      os_log_type_t v47 = (void *)_convertErrorToNSError(_:)();
      v49(0, 0xF000000000000000, v47);

      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v45);
      v50(v40, v41);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v53);
      swift_errorRelease();
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 176) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 168));
      v36(v40, v41);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v48 = *(uint64_t (**)(void))(v0 + 8);
    return v48();
  }
}

uint64_t sub_10006646C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 416) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100066DB0;
  }
  else
  {
    (*(void (**)(void, void))(v2[27] + 8))(v2[28], v2[26]);
    uint64_t v3 = sub_100066598;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100066598()
{
  uint64_t v1 = *(void (**)(uint64_t, unint64_t, void *))(v0 + 88);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 416);
    uint64_t v3 = *(void *)(v0 + 400);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    swift_retain();
    JSONEncoder.init()();
    *(void *)(v0 + 24) = v3;
    sub_10006D220(&qword_100094158, (void (*)(uint64_t))&type metadata accessor for FBKSEvaluation);
    uint64_t v4 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v6 = v5;
    uint64_t v7 = v2;
    id v8 = *(void **)(v0 + 400);
    uint64_t v9 = *(void *)(v0 + 296);
    uint64_t v20 = *(void *)(v0 + 304);
    unint64_t v18 = *(void **)(v0 + 384);
    uint64_t v19 = *(void *)(v0 + 288);
    uint64_t v10 = *(void *)(v0 + 88);
    swift_release();
    if (v7)
    {
      sub_100059E30(v10);

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v20, v19);
      uint64_t v11 = (void *)_convertErrorToNSError(_:)();
      v1(0, 0xF000000000000000, v11);
      swift_errorRelease();
    }
    else
    {
      sub_10001866C(v4, v6);
      v1(v4, v6, 0);

      sub_100059E30(v10);
      sub_1000185C0(v4, v6);
      sub_1000185C0(v4, v6);

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v20, v19);
    }
  }
  else
  {
    uint64_t v12 = *(void **)(v0 + 384);
    uint64_t v14 = *(void *)(v0 + 296);
    uint64_t v13 = *(void *)(v0 + 304);
    uint64_t v15 = *(void *)(v0 + 288);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_100066868()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 432) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[14] + 8))(v2[15], v2[13]);
  if (v0) {
    uint64_t v3 = sub_100066F3C;
  }
  else {
    uint64_t v3 = sub_1000669D0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000669D0()
{
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006040(v1, (uint64_t)qword_100094080);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Did finish launching hidden app", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[11];

  unint64_t v6 = (void *)v0[48];
  uint64_t v8 = v0[17];
  uint64_t v7 = v0[18];
  uint64_t v9 = v0[16];
  if (v5)
  {
    ((void (*)(void, unint64_t, void))v0[11])(0, 0xF000000000000000, 0);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {
    (*(void (**)(void, void))(v8 + 8))(v0[18], v0[16]);
  }
  (*(void (**)(void, void))(v0[37] + 8))(v0[38], v0[36]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100066C18()
{
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 288);
  (*(void (**)(void, void))(v0 + 344))(*(void *)(v0 + 248), *(void *)(v0 + 208));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void (**)(void, unint64_t, void *))(v0 + 88);
  if (v4)
  {
    uint64_t v5 = (void *)_convertErrorToNSError(_:)();
    v4(0, 0xF000000000000000, v5);
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100066DB0()
{
  uint64_t v1 = *(void **)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 288);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void (**)(void, unint64_t, void *))(v0 + 88);
  if (v5)
  {
    unint64_t v6 = (void *)_convertErrorToNSError(_:)();
    v5(0, 0xF000000000000000, v6);
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100066F3C()
{
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 128);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = *(void (**)(void, unint64_t, void *))(v0 + 88);
  if (v7)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    v7(0, 0xF000000000000000, v8);
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

void sub_1000671D0()
{
  uint64_t v1 = type metadata accessor for FeedbackFeatureFlags();
  uint64_t v20 = (void *)v1;
  uint64_t v21 = sub_10006D220((unint64_t *)&unk_1000940F8, (void (*)(uint64_t))&type metadata accessor for FeedbackFeatureFlags);
  uint64_t v2 = sub_100020478(&aBlock);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v1 - 8) + 104))(v2, enum case for FeedbackFeatureFlags.BatchEvaluation(_:), v1);
  LOBYTE(v1) = isFeatureEnabled(_:)();
  sub_10000A888((uint64_t)&aBlock);
  if (v1)
  {
    uint64_t v3 = self;
    id v4 = [v3 sharedScheduler];
    static Strings.Daemon.CheckDonationsTaskIdentifier.getter();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v0;
    uint64_t v21 = (uint64_t)sub_100069BA0;
    uint64_t v22 = v6;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v18 = 1107296256;
    uint64_t v19 = sub_100068740;
    uint64_t v20 = &unk_10008E8E8;
    uint64_t v7 = _Block_copy(&aBlock);
    id v8 = v0;
    swift_release();
    [v4 registerForTaskWithIdentifier:v5 usingQueue:0 launchHandler:v7];
    _Block_release(v7);

    uint64_t v9 = [v3 sharedScheduler];
    static Strings.Daemon.CheckDonationsTaskIdentifier.getter();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v8;
    uint64_t v21 = (uint64_t)sub_100069BC0;
    uint64_t v22 = v11;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v18 = 1107296256;
    uint64_t v19 = sub_100068740;
    uint64_t v20 = &unk_10008E938;
    uint64_t v12 = _Block_copy(&aBlock);
    id v13 = v8;
    swift_release();
    [v9 registerForTaskWithIdentifier:v10 usingQueue:0 launchHandler:v12];
    _Block_release(v12);
  }
  else
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100006040(v14, (uint64_t)qword_100094080);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446210;
      uint64_t v23 = sub_100007E60(0xD000000000000018, 0x800000010007ECE0, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v15, "%{public}s not registering background task because BatchEvaluation is disabled.", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000675CC(void *a1, void *a2)
{
  uint64_t v4 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100006040(v7, (uint64_t)qword_100094080);
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    NSString v10 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)NSString v10 = 136446210;
    uint64_t v11 = static Strings.Daemon.CheckDonationsTaskIdentifier.getter();
    v22[1] = sub_100007E60(v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Registering task %{public}s) with feedbackd.", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 1, 1, v13);
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = 0;
  v14[3] = 0;
  v14[4] = a1;
  v14[5] = a2;
  id v15 = a1;
  id v16 = a2;
  uint64_t v17 = sub_10006DCBC((uint64_t)v6, (uint64_t)&unk_100094120, (uint64_t)v14);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v15;
  *(void *)(v18 + 24) = v17;
  aBlock[4] = (uint64_t)sub_100069DC4;
  aBlock[5] = v18;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10006DC78;
  aBlock[3] = (uint64_t)&unk_10008E9D8;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v15;
  swift_retain();
  swift_release();
  [v20 setExpirationHandler:v19];
  _Block_release(v19);
  return swift_release();
}

uint64_t sub_1000678E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  return _swift_task_switch(sub_100067904, 0, 0);
}

uint64_t sub_100067904()
{
  *(unsigned char *)(v0 + 80) = 0;
  if (static Task<>.isCancelled.getter())
  {
    sub_10006804C((unsigned char *)(v0 + 80), *(void **)(v0 + 32));
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000679FC;
    v3[14] = *(void *)(v0 + 40);
    return _swift_task_switch(sub_100069114, 0, 0);
  }
}

uint64_t sub_1000679FC(char a1)
{
  *(unsigned char *)(*(void *)v1 + 81) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100067AFC, 0, 0);
}

uint64_t sub_100067AFC()
{
  if (*(unsigned char *)(v0 + 81) == 1)
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    *(void *)(v0 + 56) = sub_100006040(v1, (uint64_t)qword_100094080);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Triggering notification for batch evaluation", v4, 2u);
      swift_slowDealloc();
    }

    if (qword_1000929F0 != -1) {
      swift_once();
    }
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100067CD4;
    return sub_10000C874();
  }
  else
  {
    *(unsigned char *)(v0 + 80) = 1;
    sub_10006804C((unsigned char *)(v0 + 80), *(void **)(v0 + 32));
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_100067CD4()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100067E54;
  }
  else {
    uint64_t v2 = sub_100067DE8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100067DE8()
{
  *(unsigned char *)(v0 + 80) = 1;
  sub_10006804C((unsigned char *)(v0 + 80), *(void **)(v0 + 32));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100067E54()
{
  uint64_t v11 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 72);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    uint64_t v10 = v5;
    *(void *)(v0 + 16) = v3;
    swift_errorRetain();
    sub_100008580(&qword_100093940);
    uint64_t v6 = String.init<A>(describing:)();
    *(void *)(v0 + 24) = sub_100007E60(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Post notification error: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  *(unsigned char *)(v0 + 80) = 1;
  sub_10006804C((unsigned char *)(v0 + 80), *(void **)(v0 + 32));
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

id sub_10006804C(unsigned char *a1, void *a2)
{
  if (*a1 == 1)
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100006040(v3, (uint64_t)qword_100094080);
    id v4 = a2;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      unint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v7 = 138543362;
      id v26 = v4;
      id v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v4;

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Setting %{public}@ completed", v7, 0xCu);
      sub_100008580(&qword_100092B40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return [v4 setTaskCompleted];
  }
  else
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100006040(v10, (uint64_t)qword_100094080);
    id v11 = a2;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      id v15 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138543362;
      id v26 = v11;
      id v16 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v15 = v11;

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Task %{public}@ was cancelled", v14, 0xCu);
      sub_100008580(&qword_100092B40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v26 = 0;
    unsigned int v18 = [v11 setTaskExpiredWithRetryAfter:&v26 error:300.0];
    id v19 = v26;
    if (v18)
    {
      return v19;
    }
    else
    {
      id v20 = v26;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        id v26 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136446210;
        swift_errorRetain();
        sub_100008580(&qword_100093940);
        uint64_t v24 = String.init<A>(describing:)();
        sub_100007E60(v24, v25, (uint64_t *)&v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to expire background system task with error: %{public}s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      [v11 setTaskCompleted];
      return (id)swift_errorRelease();
    }
  }
}

void sub_100068578(void *a1)
{
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100006040(v2, (uint64_t)qword_100094080);
  id v3 = a1;
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    unint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v6 = 138543362;
    id v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v7 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Notification task %{public}@ expired", v6, 0xCu);
    sub_100008580(&qword_100092B40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  Task.cancel()();
}

void sub_100068740(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_1000687A8(void *a1, void *a2)
{
  uint64_t v4 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v4 - 8);
  os_log_type_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100006040(v7, (uint64_t)qword_100094080);
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v11 = static Strings.Daemon.CheckDonationsTaskIdentifier.getter();
    uint64_t v18 = sub_100007E60(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Registering task %s with feedbackd.", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 1, 1, v13);
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = 0;
  v14[3] = 0;
  v14[4] = a2;
  v14[5] = a1;
  id v15 = a2;
  id v16 = a1;
  sub_10006DCBC((uint64_t)v6, (uint64_t)&unk_100094110, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_100068A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a5;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 40) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100068AB0;
  v7[14] = a4;
  return _swift_task_switch(sub_100069114, 0, 0);
}

uint64_t sub_100068AB0(char a1)
{
  *(unsigned char *)(*(void *)v1 + 72) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100068BB0, 0, 0);
}

uint64_t sub_100068BB0()
{
  if (*(unsigned char *)(v0 + 72) == 1)
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    *(void *)(v0 + 48) = sub_100006040(v1, (uint64_t)qword_100094080);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Triggering notification for batch evaluation", v4, 2u);
      swift_slowDealloc();
    }

    if (qword_1000929F0 != -1) {
      swift_once();
    }
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100068D84;
    return sub_10000C874();
  }
  else
  {
    [*(id *)(v0 + 32) setTaskCompleted];
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_100068D84()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100068F00;
  }
  else {
    uint64_t v2 = sub_100068E98;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100068E98()
{
  [*(id *)(v0 + 32) setTaskCompleted];
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100068F00()
{
  uint64_t v11 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 64);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v10 = v5;
    *(void *)(v0 + 16) = v3;
    swift_errorRetain();
    sub_100008580(&qword_100093940);
    uint64_t v6 = String.init<A>(describing:)();
    *(void *)(v0 + 24) = sub_100007E60(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Post notification error: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  [*(id *)(v0 + 32) setTaskCompleted];
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1000690F4()
{
  *(void *)(v1 + 112) = v0;
  return _swift_task_switch(sub_100069114, 0, 0);
}

uint64_t sub_100069114()
{
  uint64_t v13 = v0;
  uint64_t v1 = type metadata accessor for FeedbackFeatureFlags();
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = sub_10006D220((unint64_t *)&unk_1000940F8, (void (*)(uint64_t))&type metadata accessor for FeedbackFeatureFlags);
  os_log_type_t v2 = sub_100020478((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v1 - 8) + 104))(v2, enum case for FeedbackFeatureFlags.BatchEvaluation(_:), v1);
  LOBYTE(v1) = isFeatureEnabled(_:)();
  sub_10000A888(v0 + 16);
  if (v1)
  {
    if (qword_100092AD8 != -1) {
      swift_once();
    }
    int v3 = dword_10009409C;
    *(_DWORD *)(v0 + 152) = dword_10009409C;
    id v4 = [objc_allocWithZone((Class)BMSQLDatabase) init];
    *(void *)(v0 + 120) = v4;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10006945C;
    return CFBBiomeReader.fetchDonations(count:fromLatest:excludingEvaluationIDs:database:)(v3, 0, 0, (uint64_t)v4);
  }
  else
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100006040(v7, (uint64_t)qword_100094080);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      *(void *)(v0 + 56) = sub_100007E60(0xD000000000000015, 0x800000010007ECC0, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s returns false because BatchEvaluation is disabled.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11(0);
  }
}

uint64_t sub_10006945C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v4 = sub_1000697DC;
  }
  else
  {

    id v4 = sub_100069578;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100069578()
{
  uint64_t v13 = v0;
  unint64_t v1 = *(void *)(v0 + 136);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = *(unsigned int *)(v0 + 152);
  if (v2 < v3)
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100006040(v4, (uint64_t)qword_100094080);
    swift_bridgeObjectRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315394;
      uint64_t v8 = static Strings.Daemon.CheckDonationsTaskIdentifier.getter();
      *(void *)(v0 + 96) = sub_100007E60(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2048;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 104) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s Do not have enough donations to trigger notification. %ld", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v10(v2 >= v3);
}

uint64_t sub_1000697DC()
{
  uint64_t v18 = v0;
  uint64_t v1 = *(void *)(v0 + 144);

  *(void *)(v0 + 64) = v1;
  sub_100008580(&qword_100093940);
  sub_10000C524(0, (unint64_t *)&qword_100093150);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v3 = *(void **)(v0 + 72);
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100006040(v4, (uint64_t)qword_100094080);
    id v5 = v3;
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315394;
      uint64_t v9 = static Strings.Daemon.CheckDonationsTaskIdentifier.getter();
      *(void *)(v0 + 80) = sub_100007E60(v9, v10, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      id v11 = v5;
      id v12 = [v11 description];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v15 = v14;

      *(void *)(v0 + 88) = sub_100007E60(v13, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s error: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    swift_errorRelease();
    id v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16(0);
  }
  return result;
}

id sub_100069AB4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CentralizedFeedbackDaemon();
  return [super dealloc];
}

uint64_t type metadata accessor for CentralizedFeedbackDaemon()
{
  return self;
}

uint64_t sub_100069B68()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100069BA0(void *a1)
{
  return sub_1000675CC(a1, *(void **)(v1 + 16));
}

uint64_t sub_100069BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100069BB8()
{
  return swift_release();
}

uint64_t sub_100069BC0(void *a1)
{
  return sub_1000687A8(a1, *(void **)(v1 + 16));
}

uint64_t sub_100069BCC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003ECD4;
  return sub_100068A00(a1, v4, v5, v7, v6);
}

uint64_t sub_100069C90()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100069CD8()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10003ECD4;
  *(_OWORD *)(v2 + 32) = v3;
  return _swift_task_switch(sub_100067904, 0, 0);
}

uint64_t sub_100069D84()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100069DC4()
{
  sub_100068578(*(void **)(v0 + 16));
}

uint64_t sub_100069DCC()
{
  swift_unknownObjectRelease();
  sub_1000185C0(*(void *)(v0 + 32), *(void *)(v0 + 40));

  if (*(void *)(v0 + 56)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100069E24(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  id v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *id v11 = v2;
  v11[1] = sub_10003ECD4;
  return sub_100064C54(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100069F04()
{
  uint64_t v2 = *(void *)(v0 + 32);
  int v3 = *(_DWORD *)(v0 + 40);
  char v4 = *(unsigned char *)(v0 + 44);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v0 + 56);
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_10003ECD4;
  *(_OWORD *)(v6 + 56) = v7;
  *(unsigned char *)(v6 + 100) = v4;
  *(_DWORD *)(v6 + 96) = v3;
  *(void *)(v6 + 40) = v2;
  *(void *)(v6 + 48) = v5;
  return _swift_task_switch(sub_1000639F0, 0, 0);
}

unint64_t sub_100069FDC()
{
  unint64_t result = qword_100094188;
  if (!qword_100094188)
  {
    sub_100009764(&qword_100094180);
    sub_10006D220(&qword_100094190, (void (*)(uint64_t))&type metadata accessor for UUID);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100094188);
  }
  return result;
}

uint64_t sub_10006A084()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10006A0D4()
{
  uint64_t v2 = *(void *)(v0 + 32);
  int v3 = *(_DWORD *)(v0 + 40);
  char v4 = *(unsigned char *)(v0 + 44);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v0 + 56);
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_10003ECD4;
  *(_OWORD *)(v6 + 80) = v7;
  *(unsigned char *)(v6 + 132) = v4;
  *(_DWORD *)(v6 + 128) = v3;
  *(void *)(v6 + 64) = v2;
  *(void *)(v6 + 72) = v5;
  return _swift_task_switch(sub_100062BB0, 0, 0);
}

unint64_t sub_10006A1AC()
{
  unint64_t result = qword_1000941B0;
  if (!qword_1000941B0)
  {
    sub_100009764(&qword_1000941A8);
    sub_10006D220(&qword_1000941B8, (void (*)(uint64_t))&type metadata accessor for FBKSDonation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000941B0);
  }
  return result;
}

uint64_t sub_10006A254(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_10000FCAC;
  return sub_100061BEC(a1, v6, v7, v8, v9, v11, v12);
}

unint64_t sub_10006A390()
{
  unint64_t result = qword_1000941D8;
  if (!qword_1000941D8)
  {
    sub_100009764(&qword_1000941D0);
    sub_10006D220(&qword_1000941B8, (void (*)(uint64_t))&type metadata accessor for FBKSDonation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1000941D8);
  }
  return result;
}

uint64_t sub_10006A438()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10006A52C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_10003ECD4;
  return sub_100060CDC(a1, v6, v7, v8, v9, v11, v12);
}

unint64_t sub_10006A668()
{
  unint64_t result = qword_1000941F8;
  if (!qword_1000941F8)
  {
    sub_100009764(&qword_1000941F0);
    sub_10006D220(&qword_100094158, (void (*)(uint64_t))&type metadata accessor for FBKSEvaluation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000941F8);
  }
  return result;
}

uint64_t sub_10006A70C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10006A800(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *((void *)v10 + 1);
  char v13 = v10[16];
  unint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *unint64_t v14 = v2;
  v14[1] = sub_10003ECD4;
  return sub_10005E7BC(a1, v6, v7, v8, v9, v11, v12, v13);
}

uint64_t sub_10006A944()
{
  return sub_10006AB58(80);
}

uint64_t sub_10006A94C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10003ECD4;
  return sub_10005CB44(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10006AA38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CFBDonationCheck.Result.Invalid(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006AA9C()
{
  return sub_10006AC98(48);
}

uint64_t sub_10006AAA4()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10003ECD4;
  v3[3] = v2;
  return _swift_task_switch(sub_10005DD30, 0, 0);
}

uint64_t sub_10006AB50()
{
  return sub_10006AB58(72);
}

uint64_t sub_10006AB58(uint64_t a1)
{
  swift_unknownObjectRelease();
  sub_1000185C0(*(void *)(v1 + 32), *(void *)(v1 + 40));
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10006ABB4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10003ECD4;
  return sub_10005B7D0(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10006AC90()
{
  return sub_10006AC98(40);
}

uint64_t sub_10006AC98(uint64_t a1)
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10006ACE4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10003ECD4;
  return sub_10005AFCC(a1, v4, v5, v6);
}

void sub_10006AD98()
{
  uint64_t v0 = type metadata accessor for FeedbackFeatureFlags();
  v56[3] = (id)v0;
  v56[4] = (id)sub_10006D220((unint64_t *)&unk_1000940F8, (void (*)(uint64_t))&type metadata accessor for FeedbackFeatureFlags);
  uint64_t v1 = sub_100020478((uint64_t *)v56);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v0 - 8) + 104))(v1, enum case for FeedbackFeatureFlags.BatchEvaluation(_:), v0);
  LOBYTE(v0) = isFeatureEnabled(_:)();
  sub_10000A888((uint64_t)v56);
  if (v0)
  {
    uint64_t v2 = static Strings.Daemon.CheckDonationsTaskIdentifier.getter();
    unint64_t v4 = v3;
    uint64_t v5 = self;
    uint64_t v6 = (SEL *)&unk_100091000;
    id v7 = [v5 sharedScheduler];
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 taskRequestForIdentifier:v8];

    if (v9)
    {
      if (qword_100092AB8 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_100006040(v10, (uint64_t)qword_100094080);
      swift_bridgeObjectRetain();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        v56[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136315138;
        swift_bridgeObjectRetain();
        sub_100007E60(v2, v4, (uint64_t *)v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Task request %s already exists", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v27 = v9;
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v28, v29))
      {
        id v30 = (uint8_t *)swift_slowAlloc();
        v56[0] = (id)swift_slowAlloc();
        *(_DWORD *)id v30 = 136315138;
        id v31 = [v27 description];
        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v34 = v33;

        sub_100007E60(v32, v34, (uint64_t *)v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Existing BGST.taskRequest: %s", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_21:
        return;
      }
    }
    else
    {
      static Strings.Daemon.CheckDonationsTaskIdentifier.getter();
      id v18 = objc_allocWithZone((Class)BGRepeatingSystemTaskRequest);
      NSString v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v20 = [v18 initWithIdentifier:v19];

      [v20 setPriority:2];
      [v20 setRequiresNetworkConnectivity:0];
      [v20 setRequiresExternalPower:0];
      if (qword_100092AE0 != -1) {
        swift_once();
      }
      [v20 setInterval:*(double *)&qword_1000940A0];
      if (qword_100092AB8 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_100006040(v21, (uint64_t)qword_100094080);
      swift_bridgeObjectRetain_n();
      id v22 = v20;
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.info.getter();
      uint64_t v51 = v2;
      unint64_t v52 = v4;
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        uint64_t v50 = (void *)swift_slowAlloc();
        v56[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136315394;
        swift_bridgeObjectRetain();
        sub_100007E60(v2, v4, (uint64_t *)v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v25 + 12) = 2112;
        uint64_t v53 = v22;
        id v26 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v50 = v22;

        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Task %s has no request, submitting request: %@", (uint8_t *)v25, 0x16u);
        sub_100008580(&qword_100092B40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v6 = (SEL *)&unk_100091000;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v35 = [v5 v6[505]];
      v56[0] = 0;
      unsigned int v36 = [v35 submitTaskRequest:v22 error:v56];

      if (v36)
      {
        id v37 = v56[0];

        swift_bridgeObjectRelease();
      }
      else
      {
        id v38 = v56[0];
        uint64_t v39 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        v56[0] = v39;
        swift_errorRetain();
        sub_100008580(&qword_100093940);
        type metadata accessor for BGSystemTaskSchedulerError(0);
        if (swift_dynamicCast())
        {
          swift_errorRelease();
          id v40 = v53;
          swift_bridgeObjectRetain();
          id v41 = v40;
          uint64_t v42 = Logger.logObject.getter();
          os_log_type_t v43 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v42, v43))
          {
            uint64_t v44 = swift_slowAlloc();
            uint64_t v55 = swift_slowAlloc();
            *(_DWORD *)uint64_t v44 = 136315394;
            swift_bridgeObjectRetain();
            sub_100007E60(v51, v52, &v55);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v44 + 12) = 2080;
            sub_10006D220(&qword_100092D88, type metadata accessor for BGSystemTaskSchedulerError);
            _BridgedStoredNSError.code.getter();
            type metadata accessor for Code(0);
            uint64_t v45 = String.init<A>(describing:)();
            sub_100007E60(v45, v46, &v55);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v42, v43, "Task %s schedule request failed: %s", (uint8_t *)v44, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRetain();
          swift_bridgeObjectRetain();
          swift_errorRetain();
          uint64_t v28 = Logger.logObject.getter();
          os_log_type_t v47 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v28, v47))
          {

            swift_errorRelease();
            swift_bridgeObjectRelease_n();
            swift_errorRelease();
            swift_errorRelease();
            goto LABEL_21;
          }
          uint64_t v48 = swift_slowAlloc();
          uint64_t v49 = (void *)swift_slowAlloc();
          v56[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v48 = 136315394;
          swift_bridgeObjectRetain();
          sub_100007E60(v51, v52, (uint64_t *)v56);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v48 + 12) = 2112;
          swift_errorRetain();
          uint64_t v54 = _swift_stdlib_bridgeErrorToNSError();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v49 = v54;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v28, v47, "Task %s schedule request failed: %@", (uint8_t *)v48, 0x16u);
          sub_100008580(&qword_100092B40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
      }
    }
  }
  else
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100006040(v14, (uint64_t)qword_100094080);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      v56[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446210;
      sub_100007E60(0xD000000000000018, 0x800000010007F110, (uint64_t *)v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s not submitting background task because BatchEvaluation is disabled.", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10006BA74()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006BAAC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FeedbackFeatureFlags();
  uint64_t v32 = (void *)v4;
  uint64_t v33 = sub_10006D220((unint64_t *)&unk_1000940F8, (void (*)(uint64_t))&type metadata accessor for FeedbackFeatureFlags);
  uint64_t v5 = sub_100020478((uint64_t *)&v29);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v5, enum case for FeedbackFeatureFlags.CentralizedFeedback(_:), v4);
  LOBYTE(v4) = isFeatureEnabled(_:)();
  sub_10000A888((uint64_t)&v29);
  if ((v4 & 1) == 0)
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100006040(v11, (uint64_t)qword_100094080);
    id v12 = a1;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 67240192;
      LODWORD(v29) = [v12 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Centralized Feedback feature disabled. Rejecting XPC connection from: %{public}d", v15, 8u);
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  if ((sub_10005A9B8((void (*)(void))&static Strings.XPC.CentralizedFeedback.entitlement.getter) & 1) == 0
    && (sub_10005A9B8((void (*)(void))&static Strings.XPC.CentralizedFeedback.draftingEntitlement.getter) & 1) == 0
    && (sub_10005A9B8((void (*)(void))&static Strings.XPC.CentralizedFeedback.remoteEvaluationEntitlement.getter) & 1) == 0)
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100006040(v24, (uint64_t)qword_100094080);
    uint64_t v25 = a1;
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 67240192;
      LODWORD(v29) = [v25 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Process %{public}d is not entitled to use this service. Refusing connection.", v28, 8u);
      swift_slowDealloc();
    }
    else
    {

      id v26 = v25;
    }

    [v25 invalidate];
    return 0;
  }
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100006040(v6, (uint64_t)qword_100094080);
  id v7 = a1;
  NSString v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 67240192;
    LODWORD(v29) = [v7 processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Accepting a new XPC connection from: %{public}d", v10, 8u);
    swift_slowDealloc();
  }
  else
  {

    NSString v8 = v7;
  }

  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v7;
  uint64_t v33 = (uint64_t)sub_10006D268;
  uint64_t v34 = v16;
  os_log_type_t v29 = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256;
  id v31 = sub_10006DC78;
  uint64_t v32 = &unk_10008EDC0;
  uint64_t v17 = _Block_copy(&v29);
  id v18 = v7;
  swift_release();
  [v18 setInterruptionHandler:v17];
  _Block_release(v17);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  uint64_t v33 = (uint64_t)sub_10006D28C;
  uint64_t v34 = v19;
  os_log_type_t v29 = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256;
  id v31 = sub_10006DC78;
  uint64_t v32 = &unk_10008EE10;
  id v20 = _Block_copy(&v29);
  uint64_t v21 = v18;
  swift_release();
  [v21 setInvalidationHandler:v20];
  _Block_release(v20);
  id v22 = [objc_allocWithZone((Class)type metadata accessor for CentralizedFeedbackDaemonInterface()) init];
  [v21 setExportedInterface:v22];

  [v21 setExportedObject:v2];
  [v21 resume];
  return 1;
}

uint64_t sub_10006C0DC(uint64_t a1, unint64_t a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v7 = type metadata accessor for FBKSDonation.DonationError();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100008580((uint64_t *)&unk_100094200);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  os_log_type_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a4;
  _Block_copy(a4);
  if (qword_100092AD0 != -1) {
    swift_once();
  }
  if (byte_100094098 == 1)
  {
    sub_10005C874(a1, a2, (uint64_t)sub_10006D2B0, v17);
    return swift_release();
  }
  else
  {
    if (qword_100092AB8 != -1) {
      swift_once();
    }
    uint64_t v30 = v8;
    uint64_t v19 = type metadata accessor for Logger();
    sub_100006040(v19, (uint64_t)qword_100094080);
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Donation not enabled", v22, 2u);
      swift_slowDealloc();
    }

    uint64_t v23 = type metadata accessor for UUID();
    uint64_t v24 = *(void *)(v23 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v16, 1, 1, v23);
    uint64_t v25 = v30;
    (*(void (**)(char *, void, uint64_t))(v30 + 104))(v10, enum case for FBKSDonation.DonationError.unsupported(_:), v7);
    sub_10006D220((unint64_t *)&unk_1000942A0, (void (*)(uint64_t))&type metadata accessor for FBKSDonation.DonationError);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v26, v10, v7);
    os_log_type_t v27 = (void *)_convertErrorToNSError(_:)();
    sub_10006CF6C((uint64_t)v16, (uint64_t)v14);
    Class isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v14, 1, v23) != 1)
    {
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v23);
    }
    ((void (**)(void, Class, void *))a4)[2](a4, isa, v27);

    sub_10000A738((uint64_t)v16, (uint64_t *)&unk_100094200);
    swift_errorRelease();
    return swift_release();
  }
}

uint64_t sub_10006C530(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100006040(v11, (uint64_t)qword_100094080);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v25 = a4;
    uint64_t v15 = a3;
    uint64_t v16 = (uint8_t *)v14;
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446210;
    uint64_t v26 = sub_100007E60(0xD000000000000031, 0x800000010007F180, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v15;
    a4 = v25;
    swift_slowDealloc();
  }

  id v17 = [self currentConnection];
  if (v17)
  {
    id v18 = v17;
    char v19 = sub_10005A910();

    char v20 = v19 ^ 1;
  }
  else
  {
    char v20 = 1;
  }
  static TaskPriority.userInitiated.getter();
  uint64_t v21 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v10, 0, 1, v21);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = 0;
  *(void *)(v22 + 24) = 0;
  *(void *)(v22 + 32) = a1;
  *(void *)(v22 + 40) = a2;
  *(void *)(v22 + 48) = a3;
  *(void *)(v22 + 56) = a4;
  *(unsigned char *)(v22 + 64) = v20 & 1;
  sub_10001866C(a1, a2);
  swift_retain();
  sub_10006DA84((uint64_t)v10, (uint64_t)&unk_100094290, v22);
  swift_release();
  return sub_10000A738((uint64_t)v10, &qword_1000938B0);
}

uint64_t sub_10006C818(uint64_t a1, uint64_t a2, void *a3, const void *a4)
{
  uint64_t v6 = sub_100008580((uint64_t *)&unk_100094200);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v30 - v10;
  uint64_t v12 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = a4;
  _Block_copy(a4);
  if (qword_100092AB8 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100006040(v15, (uint64_t)qword_100094080);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  v30[2] = v11;
  v30[3] = a4;
  v30[1] = v9;
  if (v18)
  {
    char v19 = (uint8_t *)swift_slowAlloc();
    id v33 = (id)swift_slowAlloc();
    v30[0] = v14;
    *(_DWORD *)char v19 = 136446210;
    uint64_t v32 = sub_100007E60(0xD00000000000002CLL, 0x800000010007F130, (uint64_t *)&v33);
    uint64_t v14 = (char *)v30[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v20 = [self currentConnection];
  if (v20)
  {
    uint64_t v21 = v20;
    char v22 = sub_10005A910();

    char v23 = v22 ^ 1;
  }
  else
  {
    char v23 = 1;
  }
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for FBKSEvaluation();
  sub_10006D220(&qword_100094270, (void (*)(uint64_t))&type metadata accessor for FBKSEvaluation);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  id v24 = v33;
  static TaskPriority.userInitiated.getter();
  uint64_t v25 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v14, 0, 1, v25);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = 0;
  *(void *)(v26 + 24) = 0;
  *(void *)(v26 + 32) = a3;
  *(void *)(v26 + 40) = v24;
  *(unsigned char *)(v26 + 48) = v23 & 1;
  uint64_t v27 = v31;
  *(void *)(v26 + 56) = sub_10006CF64;
  *(void *)(v26 + 64) = v27;
  id v28 = a3;
  swift_retain();
  sub_10006DA84((uint64_t)v14, (uint64_t)&unk_100094280, v26);

  swift_release();
  sub_10000A738((uint64_t)v14, &qword_1000938B0);
  return swift_release();
}

void sub_10006CF64(uint64_t a1, uint64_t a2)
{
  sub_10005C744(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10006CF6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580((uint64_t *)&unk_100094200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006CFD4()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10006D024(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  char v8 = *(unsigned char *)(v1 + 48);
  uint64_t v10 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10003ECD4;
  return sub_10005F63C(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_10006D100()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10006D114()
{
  swift_unknownObjectRelease();
  sub_1000185C0(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_release();

  return _swift_deallocObject(v0, 65, 7);
}

uint64_t sub_10006D15C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  char v4 = *(unsigned char *)(v0 + 64);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = sub_10003ECD4;
  *(unsigned char *)(v5 + 72) = v4;
  *(_OWORD *)(v5 + 56) = v6;
  *(void *)(v5 + 40) = v2;
  *(void *)(v5 + 48) = v3;
  return _swift_task_switch(sub_10005F080, 0, 0);
}

uint64_t sub_10006D220(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10006D268()
{
  sub_10005B33C(*(void **)(v0 + 16), "XPC service connection interrupted: %{public}d");
}

void sub_10006D28C()
{
  sub_10005B33C(*(void **)(v0 + 16), "XPC service connection invalidated: %{public}d");
}

uint64_t getEnumTagSinglePayload for StorageError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for StorageError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *uint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10006D46CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StorageError()
{
  return &type metadata for StorageError;
}

unint64_t sub_10006D4A8(char a1)
{
  unint64_t result = 0xD00000000000002CLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000034;
      break;
    case 2:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000030;
      break;
    case 4:
      unint64_t result = 0xD000000000000015;
      break;
    case 5:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 6:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 7:
    case 12:
      unint64_t result = 0xD000000000000017;
      break;
    case 8:
      unint64_t result = 0xD000000000000018;
      break;
    case 9:
      unint64_t result = 0xD000000000000020;
      break;
    case 10:
      unint64_t result = 0xD000000000000020;
      break;
    case 11:
      unint64_t result = 0xD000000000000019;
      break;
    case 13:
      unint64_t result = 0x6E756F6620746F4ELL;
      break;
    case 14:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 15:
      unint64_t result = 0xD000000000000014;
      break;
    case 16:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_10006D64C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_10006D694()
{
  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_10006D6C4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

uint64_t sub_10006D708@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10006DA0C(*a1);
  *a2 = result;
  return result;
}

void sub_10006D734(void *a1@<X8>)
{
  *a1 = *v1 + 1;
}

uint64_t sub_10006D744(uint64_t a1)
{
  unint64_t v2 = sub_10006D964();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10006D780(uint64_t a1)
{
  unint64_t v2 = sub_10006D964();
  unint64_t v3 = sub_10006D9B8();
  unint64_t v4 = sub_10000BA88();

  return Error<>._code.getter(a1, v2, v3, v4);
}

unint64_t sub_10006D7DC()
{
  return sub_10006D4A8(*v0);
}

uint64_t sub_10006D7E4()
{
  return 0x45656761726F7453;
}

uint64_t sub_10006D804()
{
  sub_10006D9B8();
  sub_10000BA88();

  return CustomNSError<>.errorCode.getter();
}

unint64_t sub_10006D85C()
{
  char v1 = *v0;
  sub_100008580(&qword_1000932B8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10007B630;
  *(void *)(inited + 32) = sub_10006D4A8(v1);
  *(void *)(inited + 40) = v3;
  sub_10006D9B8();
  sub_10000BA88();
  uint64_t v4 = CustomNSError<>.errorCode.getter();
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 48) = v4;
  return sub_100023734(inited);
}

unint64_t sub_10006D910()
{
  unint64_t result = qword_1000942B0;
  if (!qword_1000942B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000942B0);
  }
  return result;
}

unint64_t sub_10006D964()
{
  unint64_t result = qword_1000942B8;
  if (!qword_1000942B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000942B8);
  }
  return result;
}

unint64_t sub_10006D9B8()
{
  unint64_t result = qword_1000942C0;
  if (!qword_1000942C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000942C0);
  }
  return result;
}

uint64_t sub_10006DA0C(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 0x11) {
    return 17;
  }
  else {
    return a1 - 1;
  }
}

uint64_t SharedLog.unsafeMutableAddressor()
{
  if (qword_100092AF0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_100006040(v0, (uint64_t)SharedLog);
}

uint64_t sub_10006DA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v6 - 8);
  int v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018820(a1, (uint64_t)v8, &qword_1000938B0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000A738((uint64_t)v8, &qword_1000938B0);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    uint64_t v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t sub_10006DC78(uint64_t a1)
{
  char v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_10006DCBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000A738(a1, &qword_1000938B0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10006DE68()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_1000942D0);
  sub_100006040(v0, (uint64_t)qword_1000942D0);
  static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10006DECC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, SharedLog);
  uint64_t v1 = sub_100006040(v0, (uint64_t)SharedLog);
  if (qword_100092AE8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100006040(v0, (uint64_t)qword_1000942D0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_10006DF94()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for FeedbackDaemon()) init];
  qword_100096528 = (uint64_t)result;
  return result;
}

id sub_10006DFC4()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v0;
  *(void *)&v0[OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_listener] = 0;
  uint64_t v17 = OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_syncQueue;
  uint64_t v16 = sub_10000C524(0, (unint64_t *)&qword_1000939C0);
  char v19 = 0;
  unint64_t v20 = 0xE000000000000000;
  uint64_t v7 = v0;
  _StringGuts.grow(_:)(17);
  uint64_t v8 = static Strings.Daemon.bundleIdentifier.getter();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  char v19 = (void *)v8;
  unint64_t v20 = v10;
  v11._uint64_t countAndFlagsBits = 0x636162646565662DLL;
  v11._object = (void *)0xEF6E6F6D6561446BLL;
  String.append(_:)(v11);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  static DispatchQoS.unspecified.getter();
  char v19 = _swiftEmptyArrayStorage;
  sub_100074928();
  sub_100008580(&qword_1000943E8);
  sub_100074980();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v15[v17] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v7[OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_connectionDelegates] = &_swiftEmptyDictionarySingleton;

  uint64_t v12 = (objc_class *)type metadata accessor for FeedbackDaemon();
  v18.receiver = v7;
  v18.super_class = v12;
  return [super init];
}

id sub_10006E2A0()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100092AE8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100006040(v6, (uint64_t)qword_1000942D0);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = ObjectType;
    *(_DWORD *)unint64_t v9 = 136446210;
    swift_getMetatypeMetadata();
    uint64_t v10 = String.init<A>(describing:)();
    uint64_t v22 = sub_100007E60(v10, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Started %{public}s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  static TaskPriority.utility.getter();
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v5, 0, 1, v12);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v1;
  uint64_t v14 = v1;
  sub_10006DA84((uint64_t)v5, (uint64_t)&unk_100094338, (uint64_t)v13);
  swift_release();
  sub_10000A738((uint64_t)v5, &qword_1000938B0);
  static Strings.XPC.machService.getter();
  id v15 = objc_allocWithZone((Class)NSXPCListener);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v17 = [v15 initWithMachServiceName:v16];

  uint64_t v18 = OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_listener;
  char v19 = *(void **)&v14[OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_listener];
  *(void *)&v14[OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_listener] = v17;

  id result = *(id *)&v14[v18];
  if (result)
  {
    [result setDelegate:v14];
    id result = *(id *)&v14[v18];
    if (result) {
      return [result resume];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006E5C0()
{
  return _swift_task_switch(sub_10006E5DC, 0, 0);
}

uint64_t sub_10006E5DC()
{
  static Strings.Daemon.bundleIdentifier.getter();
  v1._uint64_t countAndFlagsBits = 0x74726174732ELL;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  swift_unknownObjectRelease();
  if (qword_100092A48 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10006E6FC;
  return sub_1000324BC();
}

uint64_t sub_10006E6FC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10006E7F8, 0, 0);
}

uint64_t sub_10006E7F8()
{
  uint64_t v1 = static Strings.Daemon.XPCActivityIdentifier.getter();
  uint64_t v3 = v2;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  v0[6] = sub_100070040;
  v0[7] = v4;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_10006FD20;
  v0[5] = &unk_10008EF40;
  uint64_t v5 = _Block_copy(v0 + 2);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v6 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  xpc_activity_register((const char *)(v6 + 32), XPC_ACTIVITY_CHECK_IN, v5);
  swift_release();
  _Block_release(v5);
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

void sub_10006E940(void *a1)
{
  if (qword_100092AE8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100006040(v2, (uint64_t)qword_1000942D0);
  id v6 = a1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67240192;
    [v6 processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "XPC service connection interrupted: %{public}d", v5, 8u);
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_10006EAAC(void *a1, char *a2)
{
  if (qword_100092AE8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100006040(v4, (uint64_t)qword_1000942D0);
  id v5 = a1;
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v8 = 67240192;
    LODWORD(v17[0]) = [v5 processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "XPC service connection invalidated: %{public}d", v8, 8u);
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v9 = *(NSObject **)&a2[OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_syncQueue];
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = v5;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_100074910;
  *(void *)(v11 + 24) = v10;
  v17[4] = sub_1000749DC;
  v17[5] = v11;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  _OWORD v17[2] = sub_10006ED88;
  v17[3] = &unk_10008F120;
  uint64_t v12 = _Block_copy(v17);
  id v13 = v5;
  uint64_t v14 = a2;
  swift_retain();
  swift_release();
  dispatch_sync(v9, v12);
  _Block_release(v12);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10006ED24(uint64_t a1, unint64_t a2)
{
  return swift_release();
}

uint64_t sub_10006ED88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_10006EDB0(uint64_t a1, void *a2)
{
  swift_beginAccess();
  id v3 = a2;
  uint64_t v4 = swift_retain();
  sub_1000705AC(v4, v3);
  swift_endAccess();
}

uint64_t sub_10006EE8C(uint64_t a1)
{
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  id v3 = [v2 domain];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0) {
      goto LABEL_13;
    }
  }
  if ([v2 code] == (id)1)
  {
    if (qword_100092AE8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100006040(v10, (uint64_t)qword_1000942D0);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to unlock device for app launch", v13, 2u);
      swift_slowDealloc();
    }
    goto LABEL_20;
  }
LABEL_13:
  uint64_t v22 = a1;
  swift_errorRetain();
  sub_100008580(&qword_100093940);
  if ((swift_dynamicCast() & 1) == 0 || v21 != 8)
  {

    return 0;
  }
  if (qword_100092AE8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100006040(v14, (uint64_t)qword_1000942D0);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v11, v15))
  {
LABEL_20:

    return 1;
  }
  NSString v16 = (uint8_t *)swift_slowAlloc();
  uint64_t v22 = swift_slowAlloc();
  *(_DWORD *)NSString v16 = 136446210;
  unint64_t v17 = sub_10004F8A8(8);
  sub_100007E60(v17, v18, &v22);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v11, v15, "[%{public}s]", v16, 0xCu);
  uint64_t v19 = 1;
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  return v19;
}

void sub_10006F1D0(_xpc_activity_s *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_100008580(&qword_1000938B0);
  __chkstk_darwin(v6 - 8);
  os_log_type_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_activity_state_t state = xpc_activity_get_state(a1);
  if (state == 2)
  {
    if (qword_100092AE8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100006040(v14, (uint64_t)qword_1000942D0);
    swift_bridgeObjectRetain_n();
    os_log_type_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    id v28 = v8;
    uint64_t v29 = a2;
    if (v17)
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)unint64_t v18 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_100007E60(a2, a3, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Activity %{public}s: RUN", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    BOOL v19 = xpc_activity_set_state(a1, 4);
    swift_bridgeObjectRetain_n();
    unint64_t v20 = Logger.logObject.getter();
    if (v19)
    {
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v23 = v29;
        uint64_t v30 = sub_100007E60(v29, a3, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        id v24 = "Activity %{public}s: CONTINUE";
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v20, v21, v24, v22, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_20:
        uint64_t v25 = (uint64_t)v28;
        uint64_t v26 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
        uint64_t v27 = swift_allocObject();
        *(void *)(v27 + 16) = 0;
        *(void *)(v27 + 24) = 0;
        *(unsigned char *)(v27 + 32) = v19;
        *(void *)(v27 + 40) = a1;
        *(void *)(v27 + 48) = v23;
        *(void *)(v27 + 56) = a3;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        sub_10006DCBC(v25, (uint64_t)&unk_1000943B8, v27);
        swift_release();
        return;
      }
    }
    else
    {
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v23 = v29;
        uint64_t v30 = sub_100007E60(v29, a3, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        id v24 = "Failed to set activity %{public}s to CONTINUE";
        goto LABEL_18;
      }
    }

    swift_bridgeObjectRelease_n();
    uint64_t v23 = v29;
    goto LABEL_20;
  }
  if (!state)
  {
    if (qword_100092AE8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100006040(v10, (uint64_t)qword_1000942D0);
    swift_bridgeObjectRetain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)id v13 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_100007E60(a2, a3, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Activity %{public}s: CHECK_IN", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_10006F7D0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 40) = a6;
  *(void *)(v7 + 48) = a7;
  *(void *)(v7 + 32) = a5;
  *(unsigned char *)(v7 + 64) = a4;
  return _swift_task_switch(sub_10006F7F8, 0, 0);
}

uint64_t sub_10006F7F8()
{
  if (qword_100092A00 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10006F8BC;
  return sub_100010FEC();
}

uint64_t sub_10006F8BC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10006F9B8, 0, 0);
}

uint64_t sub_10006F9B8()
{
  uint64_t v17 = v0;
  if (*(unsigned char *)(v0 + 64) == 1)
  {
    if (xpc_activity_set_state(*(xpc_activity_t *)(v0 + 32), 5))
    {
      if (qword_100092AE8 != -1) {
        swift_once();
      }
      uint64_t v1 = type metadata accessor for Logger();
      sub_100006040(v1, (uint64_t)qword_1000942D0);
      swift_bridgeObjectRetain_n();
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.default.getter();
      BOOL v4 = os_log_type_enabled(v2, v3);
      unint64_t v5 = *(void *)(v0 + 48);
      if (v4)
      {
        uint64_t v15 = *(void *)(v0 + 40);
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        *(_DWORD *)uint64_t v6 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 24) = sub_100007E60(v15, v5, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v2, v3, "Activity %{public}s: DONE", v6, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
LABEL_11:
        swift_slowDealloc();
LABEL_13:

        goto LABEL_14;
      }
    }
    else
    {
      if (qword_100092AE8 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_100006040(v7, (uint64_t)qword_1000942D0);
      swift_bridgeObjectRetain_n();
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      BOOL v9 = os_log_type_enabled(v2, v8);
      unint64_t v10 = *(void *)(v0 + 48);
      if (v9)
      {
        uint64_t v11 = *(void *)(v0 + 40);
        os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v12 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 16) = sub_100007E60(v11, v10, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v2, v8, "Failed to set activity %{public}s to DONE", v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
LABEL_14:
  id v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_10006FD20(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

id sub_10006FD80()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FeedbackDaemon();
  return [super dealloc];
}

uint64_t type metadata accessor for FeedbackDaemon()
{
  return self;
}

uint64_t sub_10006FE34()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10006FE74()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003ECD4;
  return _swift_task_switch(sub_10006E5DC, 0, 0);
}

uint64_t sub_10006FF18()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006FF50(uint64_t a1)
{
  BOOL v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_10003ECD4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100094340 + dword_100094340);
  return v6(a1, v4);
}

uint64_t sub_100070008()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100070040(_xpc_activity_s *a1)
{
  sub_10006F1D0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100070048(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100070058()
{
  return swift_release();
}

uint64_t sub_100070060()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000700A8()
{
  char v2 = *(unsigned char *)(v0 + 32);
  long long v6 = *(_OWORD *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10000FCAC;
  *(void *)(v4 + 48) = v3;
  *(_OWORD *)(v4 + 32) = v6;
  *(unsigned char *)(v4 + 64) = v2;
  return _swift_task_switch(sub_10006F7F8, 0, 0);
}

uint64_t sub_100070174(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_10000FCAC;
  long long v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100094340 + dword_100094340);
  return v6(a1, v4);
}

uint64_t sub_10007022C@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

double sub_10007025C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100025B40(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000282BC();
      uint64_t v9 = v11;
    }
    sub_10000A6E4(*(void *)(v9 + 48) + 40 * v6);
    sub_10000AA1C((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_10007089C(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_100070358@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100025B84(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000288EC();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_10000AA1C((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_100070A68(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_10007045C(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((v4 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    a1 = sub_100025DDC(a1);
    char v13 = v12;
    swift_bridgeObjectRelease();
    if (v13)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      Swift::Int v9 = *v2;
      Swift::Int v17 = *v2;
      *uint64_t v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_100028EF4();
        Swift::Int v9 = v17;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  id v6 = (id)a1;
  uint64_t v7 = __CocoaDictionary.lookup(_:)();

  if (!v7)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_unknownObjectRelease();
  uint64_t v8 = __CocoaDictionary.count.getter();
  Swift::Int v9 = sub_100070660(v5, v8);
  swift_retain();
  a1 = sub_100025DDC((uint64_t)v6);
  char v11 = v10;
  swift_release();
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:

  uint64_t v15 = *(void *)(*(void *)(v9 + 56) + 8 * a1);
  sub_100070C40(a1, v9);
  *uint64_t v2 = v9;
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1000705AC(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaDictionary.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *uint64_t v3 = sub_100070660(v7, result + 1);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v10 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_100028060(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v10;

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100070660(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100008580(&qword_100093528);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_10000C524(0, (unint64_t *)&unk_1000943D0);
      do
      {
        swift_dynamicCast();
        type metadata accessor for FeedbackDaemonDelegate();
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100027978(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

unint64_t sub_10007089C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_100029E90(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        Swift::Int v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        Swift::Int result = sub_10000A6E4((uint64_t)v28);
        Swift::Int v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            uint64_t v16 = (long long *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              long long v17 = *v16;
              long long v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            unint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            os_log_type_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              long long v9 = v21[1];
              *unint64_t v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  uint64_t *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100070A68(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          char v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *char v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          long long v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            _OWORD *v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    long long v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    long long v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *long long v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_100070C40(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            long long v17 = (void *)(v16 + 8 * v3);
            long long v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *long long v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (void *)(v19 + 8 * v3);
            uint64_t v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    BOOL v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    BOOL v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  uint64_t *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t sub_100070DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[11] = a2;
  v3[12] = a3;
  v3[10] = a1;
  v3[13] = type metadata accessor for FormLaunchConfiguration();
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  return _swift_task_switch(sub_100070E9C, 0, 0);
}

uint64_t sub_100070E9C()
{
  uint64_t v78 = v0;
  if (qword_100092AE8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006040(v1, (uint64_t)qword_1000942D0);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[12];
  if (v4)
  {
    uint64_t v6 = v0[11];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v77 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    v0[8] = sub_100007E60(0xD00000000000002BLL, 0x800000010007F740, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[9] = sub_100007E60(v6, v5, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s [%s]", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = v0[12];
  v0[2] = v0[11];
  v0[3] = v8;
  v0[4] = 0xD000000000000013;
  v0[5] = 0x800000010007DC10;
  sub_10000A8D8();
  if (StringProtocol.contains<A>(_:)())
  {
    uint64_t v9 = v0[13];
    uint64_t v10 = *(void *)(v0[10] + *(int *)(v9 + 40));
    if (qword_100092AA8 != -1) {
      swift_once();
    }
    id v11 = (void *)qword_100094058;
    swift_bridgeObjectRetain();
    id v12 = v11;
    NSString v13 = String._bridgeToObjectiveC()();
    id v14 = [v12 integerForKey:v13];

    swift_bridgeObjectRelease();
    if ((uint64_t)v14 < v10)
    {
      sub_100013D84(v0[10], v0[15]);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      BOOL v17 = os_log_type_enabled(v15, v16);
      long long v18 = (uint64_t *)v0[15];
      if (v17)
      {
        os_log_type_t typea = v16;
        uint64_t v19 = swift_slowAlloc();
        uint64_t v77 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136446466;
        uint64_t v21 = *v18;
        unint64_t v20 = v18[1];
        swift_bridgeObjectRetain();
        v0[6] = sub_100007E60(v21, v20, &v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100013DE8((uint64_t)v18);
        *(_WORD *)(v19 + 12) = 2050;
        BOOL v22 = (void *)qword_100094058;
        swift_bridgeObjectRetain();
        id v23 = v22;
        NSString v24 = String._bridgeToObjectiveC()();
        id v25 = [v23 integerForKey:v24];

        swift_bridgeObjectRelease();
        v0[7] = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v15, typea, "Form [%{public}s] has been snoozed more than [%{public}ld]. Marking it as declined", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100013DE8(v0[15]);
      }

      if (qword_100092A58 != -1) {
        swift_once();
      }
      uint64_t v48 = (void *)v0[10];
      uint64_t v35 = qword_1000964D8;
      v0[16] = qword_1000964D8;
      v0[17] = *v48;
      v0[18] = v48[1];
      unsigned int v36 = sub_100071768;
      goto LABEL_22;
    }
    uint64_t v76 = v9;
    id v37 = (uint64_t *)v0[10];
    uint64_t v74 = *v37;
    *(void *)os_log_type_t type = v37[1];
    uint64_t v69 = v37[2];
    uint64_t v67 = v37[3];
    uint64_t v38 = v37[5];
    uint64_t v65 = v37[4];
    uint64_t v39 = v37[7];
    uint64_t v63 = v37[6];
    uint64_t v40 = v37[9];
    uint64_t v61 = v37[8];
    uint64_t v41 = v37[11];
    uint64_t v59 = v37[10];
    char v57 = *((unsigned char *)v37 + 96);
    char v55 = *((unsigned char *)v37 + 97);
    uint64_t v53 = v37[13];
    uint64_t v42 = v0[14] + *(int *)(v0[13] + 32);
    char v51 = *((unsigned char *)v37 + 112);
    uint64_t v43 = type metadata accessor for Date();
    uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56);
    v44(v42, 1, 1, v43);
    uint64_t v45 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v46 = v0[13];
      uint64_t v47 = v0[14];
      uint64_t v50 = v45;
      v44(v47 + *(int *)(v46 + 36), 1, 1, v43);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Date.init()();
      *(void *)uint64_t v47 = v74;
      *(void *)(v47 + 8) = *(void *)type;
      *(void *)(v47 + 16) = v69;
      *(void *)(v47 + 24) = v67;
      *(void *)(v47 + 32) = v65;
      *(void *)(v47 + 40) = v38;
      *(void *)(v47 + 48) = v63;
      *(void *)(v47 + 56) = v39;
      *(void *)(v47 + 64) = v61;
      *(void *)(v47 + 72) = v40;
      *(void *)(v47 + 80) = v59;
      *(void *)(v47 + 88) = v41;
      *(unsigned char *)(v47 + 96) = v57;
      *(unsigned char *)(v47 + 97) = v55;
      *(void *)(v47 + 104) = v53;
      *(unsigned char *)(v47 + 112) = v51;
      *(void *)(v47 + *(int *)(v46 + 28)) = 0;
      *(void *)(v47 + *(int *)(v76 + 40)) = v50;
      if (qword_100092A30 == -1)
      {
LABEL_17:
        uint64_t v35 = qword_1000964B0;
        unsigned int v36 = sub_1000718DC;
        goto LABEL_22;
      }
    }
    swift_once();
    goto LABEL_17;
  }
  BOOL v26 = (int *)v0[13];
  uint64_t v27 = v0[14];
  id v28 = (uint64_t *)v0[10];
  uint64_t v75 = *v28;
  uint64_t v52 = v28[1];
  uint64_t v54 = v28[3];
  *(void *)typeb = v28[4];
  uint64_t v73 = v28[2];
  uint64_t v56 = v28[5];
  uint64_t v29 = v28[7];
  uint64_t v30 = v28[9];
  uint64_t v66 = v28[8];
  uint64_t v68 = v28[6];
  uint64_t v31 = v28[11];
  uint64_t v64 = v28[10];
  __int16 v62 = *((_WORD *)v28 + 48);
  uint64_t v60 = v28[13];
  uint64_t v32 = v27 + v26[8];
  char v58 = *((unsigned char *)v28 + 112);
  uint64_t v33 = type metadata accessor for Date();
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56);
  v34(v32, 1, 1, v33);
  v34(v27 + v26[9], 1, 1, v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Date.init()();
  *(void *)uint64_t v27 = v75;
  *(void *)(v27 + 8) = v52;
  *(void *)(v27 + 16) = v73;
  *(void *)(v27 + 24) = v54;
  *(void *)(v27 + 32) = *(void *)typeb;
  *(void *)(v27 + 40) = v56;
  *(void *)(v27 + 48) = v68;
  *(void *)(v27 + 56) = v29;
  *(void *)(v27 + 64) = v66;
  *(void *)(v27 + 72) = v30;
  *(void *)(v27 + 80) = v64;
  *(void *)(v27 + 88) = v31;
  *(_WORD *)(v27 + 96) = v62;
  *(void *)(v27 + 104) = v60;
  *(unsigned char *)(v27 + 112) = v58;
  *(void *)(v27 + v26[7]) = 0;
  *(void *)(v27 + v26[10]) = 1;
  if (qword_100092A30 != -1) {
    swift_once();
  }
  uint64_t v35 = qword_1000964B0;
  unsigned int v36 = sub_1000719BC;
LABEL_22:
  return _swift_task_switch(v36, v35, 0);
}

uint64_t sub_100071768()
{
  sub_100045730(*(void **)(v0 + 136), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 144));
  return _swift_task_switch(sub_1000717D4, 0, 0);
}

uint64_t sub_1000717D4()
{
  if (qword_100092A30 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000964B0;
  return _swift_task_switch(sub_100071868, v0, 0);
}

uint64_t sub_100071868()
{
  sub_10002F454(v0[11], v0[12]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000718DC()
{
  sub_100031320(*(Swift::String **)(v0 + 112));
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007194C, 0, 0);
}

uint64_t sub_10007194C()
{
  sub_100013DE8(*(void *)(v0 + 112));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000719BC()
{
  sub_100031320(*(Swift::String **)(v0 + 112));
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100074A08, 0, 0);
}

uint64_t sub_100071A2C(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  sub_100008580(&qword_1000934F0);
  v2[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for User();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_100071B2C, 0, 0);
}

uint64_t sub_100071B2C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1 == 1) {
    goto LABEL_17;
  }
  if (v1 != 2)
  {
    if (v1 != 3)
    {
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      v4._uint64_t countAndFlagsBits = FBKSForm.AuthenticationMethod.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      return _assertionFailure(_:_:file:line:flags:)();
    }
    sub_100029F94(*(void *)(v0 + 48) + 65, v0 + 107, &qword_100094410);
    sub_100029F94(v0 + 107, v0 + 104, &qword_100094410);
    if ((*(unsigned char *)(v0 + 104) & 1) == 0)
    {
      uint64_t v2 = 0;
LABEL_18:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v9(v2);
    }
    if (qword_100092AE8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100006040(v5, (uint64_t)qword_1000942D0);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Forcing to use hidden app as configured by client", v8, 2u);
      swift_slowDealloc();
    }

LABEL_17:
    uint64_t v2 = 1;
    goto LABEL_18;
  }
  if (qword_100092B08 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_100096530;
  *(void *)(v0 + 96) = qword_100096530;
  return _swift_task_switch(sub_100071DD4, v3, 0);
}

uint64_t sub_100071DD4()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 56);
  sub_1000755F8();
  sub_1000755F8();
  uint64_t v5 = v1 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess();
  sub_100018820(v5, v4, &qword_1000934F0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_10000A738(*(void *)(v0 + 56), &qword_1000934F0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v6(1);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v9 = *(void *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v11 = *(void *)(v0 + 72);
    id v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
    v12(v8, *(void *)(v0 + 56), v10);
    v12(v9, v8, v10);
    *(unsigned char *)(v0 + 108) = User.isUnauthenticated.getter() & 1;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    return _swift_task_switch(sub_100071F80, 0, 0);
  }
}

uint64_t sub_100071F80()
{
  if ((*(unsigned char *)(v0 + 108) & 1) == 0)
  {
    sub_100029F94(*(void *)(v0 + 48) + 65, v0 + 106, &qword_100094410);
    sub_100029F94(v0 + 106, v0 + 105, &qword_100094410);
    if ((*(unsigned char *)(v0 + 105) & 1) == 0)
    {
      uint64_t v1 = 0;
      goto LABEL_10;
    }
    if (qword_100092AE8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100006040(v2, (uint64_t)qword_1000942D0);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Forcing to use hidden app as configured by client", v5, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v1 = 1;
LABEL_10:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v6(v1);
}

uint64_t sub_100072104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a4;
  v6[6] = a6;
  v6[3] = a2;
  v6[4] = a3;
  _OWORD v6[2] = a1;
  uint64_t v9 = type metadata accessor for FBKSRemoteAlertRequest();
  v6[7] = v9;
  v6[8] = *(void *)(v9 - 8);
  v6[9] = swift_task_alloc();
  uint64_t v10 = (void *)swift_task_alloc();
  v6[10] = v10;
  *uint64_t v10 = v6;
  v10[1] = sub_100072208;
  return sub_100071A2C(a3, a5);
}

uint64_t sub_100072208(char a1)
{
  *(unsigned char *)(*(void *)v1 + 112) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100072308, 0, 0);
}

uint64_t sub_100072308()
{
  if (*(unsigned char *)(v0 + 112) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 64);
    uint64_t v1 = *(uint64_t **)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 56);
    uint64_t v5 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 16);
    uint64_t v6 = *(void *)(v0 + 24);
    type metadata accessor for LaunchController();
    swift_initStaticObject();
    *uint64_t v1 = sub_1000191CC(v7, v6, v5, v4);
    (*(void (**)(uint64_t *, void, uint64_t))(v2 + 104))(v1, enum case for FBKSRemoteAlertRequest.form(_:), v3);
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1000724C4;
    uint64_t v9 = *(void *)(v0 + 72);
    return sub_10004BFC0(v9);
  }
  else
  {
    BOOL v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100093E38
                                                                              + dword_100093E38);
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_10007275C;
    uint64_t v12 = *(void *)(v0 + 40);
    uint64_t v13 = *(void *)(v0 + 48);
    uint64_t v14 = *(void *)(v0 + 24);
    uint64_t v15 = *(void *)(v0 + 32);
    uint64_t v16 = *(void *)(v0 + 16);
    return v17(v16, v14, v15, v12, v13);
  }
}

uint64_t sub_1000724C4()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_1000726F8;
  }
  else {
    uint64_t v5 = sub_100072634;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100072634()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 112);
  uint64_t v2 = self;
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 logFeedbackdLaunchedFeedbackWithForm:v3 usedAlertPrompt:1 usedNotificationPrompt:0 usedHiddenApp:v1];

  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1000726F8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007275C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_1000749E0, 0, 0);
  }
}

uint64_t sub_1000728A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[26] = a3;
  v4[27] = a4;
  v4[24] = a1;
  v4[25] = a2;
  v4[28] = type metadata accessor for FormLaunchConfiguration();
  v4[29] = swift_task_alloc();
  sub_100008580((uint64_t *)&unk_100094420);
  v4[30] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FormItem();
  v4[31] = v5;
  v4[32] = *(void *)(v5 - 8);
  v4[33] = swift_task_alloc();
  return _swift_task_switch(sub_1000729CC, 0, 0);
}

uint64_t sub_1000729CC()
{
  uint64_t v20 = v0;
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)v1;
  *(void *)(v0 + 272) = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v0 + 280) = v3;
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v0 + 288) = v4;
  uint64_t v5 = *(void *)(v1 + 24);
  *(void *)(v0 + 296) = v5;
  long long v6 = *(_OWORD *)(v1 + 64);
  long long v7 = *(_OWORD *)(v1 + 80);
  long long v8 = *(_OWORD *)(v1 + 96);
  *(unsigned char *)(v0 + 96) = *(unsigned char *)(v1 + 112);
  *(_OWORD *)(v0 + 64) = v7;
  *(_OWORD *)(v0 + 80) = v8;
  *(_OWORD *)(v0 + 48) = v6;
  long long v9 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v0 + 32) = v9;
  if (qword_100092AE8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v0 + 304) = sub_100006040(v10, (uint64_t)qword_1000942D0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100013E44(v0 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100013E44(v0 + 16);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446722;
    *(void *)(v0 + 160) = sub_100007E60(0xD00000000000004BLL, 0x800000010007F6F0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 168) = sub_100007E60(v2, v3, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 22) = 2080;
    sub_100029F94(v0 + 16, v0 + 104, &qword_100093178);
    sub_100029F94(v0 + 104, v0 + 120, &qword_100093178);
    sub_100018E4C(v0 + 104);
    sub_100008580(&qword_100093178);
    uint64_t v14 = String.init<A>(describing:)();
    *(void *)(v0 + 184) = sub_100007E60(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100013E9C(v0 + 16);
    sub_100013E9C(v0 + 16);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s form: %s prompt title: %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_100013E9C(v0 + 16);
    sub_100013E9C(v0 + 16);
  }

  type metadata accessor for SeedPortal();
  *(void *)(v0 + 312) = static SeedPortal.shared.getter();
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v16;
  void *v16 = v0;
  v16[1] = sub_100072DA8;
  uint64_t v17 = *(void *)(v0 + 240);
  return sub_100022160(v17, v2, v3, v4, v5, 0);
}

uint64_t sub_100072DA8()
{
  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_100073174;
  }
  else {
    uint64_t v2 = sub_100072ED8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100072ED8()
{
  uint64_t v14 = v0;
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[30];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000A738(v3, (uint64_t *)&unk_100094420);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      long long v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)long long v6 = 136446210;
      v0[19] = sub_100007E60(0xD00000000000004BLL, 0x800000010007F6F0, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s failed to launch because form item is no longer available", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    if (qword_100092A58 != -1) {
      swift_once();
    }
    long long v7 = (void *)v0[24];
    uint64_t v8 = qword_1000964D8;
    v0[44] = qword_1000964D8;
    v0[45] = *v7;
    v0[46] = v7[1];
    sub_10000FA84();
    v0[47] = swift_allocError();
    *long long v9 = 1;
    v0[48] = _convertErrorToNSError(_:)();
    uint64_t v10 = sub_10007397C;
    uint64_t v11 = v8;
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[33], v3, v1);
    if (qword_100092A30 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_1000964B0;
    uint64_t v10 = sub_10007343C;
  }
  return _swift_task_switch(v10, v11, 0);
}

uint64_t sub_100073174()
{
  uint64_t v13 = v0;
  uint64_t v1 = v0[41];
  v0[49] = v1;
  if (sub_10006EE8C(v1))
  {
    if (qword_100092A30 != -1) {
      swift_once();
    }
    uint64_t v2 = qword_1000964B0;
    uint64_t v3 = sub_100073B14;
  }
  else
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      v0[22] = sub_100007E60(0xD00000000000004BLL, 0x800000010007F6F0, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2080;
      v0[17] = v1;
      swift_errorRetain();
      sub_100008580(&qword_100093940);
      uint64_t v7 = String.init<A>(describing:)();
      v0[18] = sub_100007E60(v7, v8, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s failed with: %s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    if (qword_100092A58 != -1) {
      swift_once();
    }
    long long v9 = (void *)v0[24];
    uint64_t v10 = qword_1000964D8;
    v0[51] = qword_1000964D8;
    v0[52] = *v9;
    v0[53] = v9[1];
    v0[54] = _convertErrorToNSError(_:)();
    uint64_t v3 = sub_100073F88;
    uint64_t v2 = v10;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_10007343C()
{
  sub_1000315D4(*(uint64_t **)(v0 + 192));
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000943F8
                                                                                    + dword_1000943F8);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000734FC;
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v6 = *(void *)(v0 + 264);
  return v8(v5, v4, v2, v3, v0 + 16, v6);
}

uint64_t sub_1000734FC()
{
  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10007369C;
  }
  else {
    uint64_t v2 = sub_100073610;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100073610()
{
  (*(void (**)(void, void))(v0[32] + 8))(v0[33], v0[31]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10007369C()
{
  uint64_t v13 = v0;
  (*(void (**)(void, void))(v0[32] + 8))(v0[33], v0[31]);
  uint64_t v1 = v0[43];
  v0[49] = v1;
  if (sub_10006EE8C(v1))
  {
    if (qword_100092A30 != -1) {
      swift_once();
    }
    uint64_t v2 = qword_1000964B0;
    uint64_t v3 = sub_100073B14;
  }
  else
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      v0[22] = sub_100007E60(0xD00000000000004BLL, 0x800000010007F6F0, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2080;
      v0[17] = v1;
      swift_errorRetain();
      sub_100008580(&qword_100093940);
      uint64_t v7 = String.init<A>(describing:)();
      v0[18] = sub_100007E60(v7, v8, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s failed with: %s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    if (qword_100092A58 != -1) {
      swift_once();
    }
    uint64_t v9 = (void *)v0[24];
    uint64_t v10 = qword_1000964D8;
    v0[51] = qword_1000964D8;
    v0[52] = *v9;
    v0[53] = v9[1];
    v0[54] = _convertErrorToNSError(_:)();
    uint64_t v3 = sub_100073F88;
    uint64_t v2 = v10;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_10007397C()
{
  uint64_t v1 = *(void **)(v0 + 384);
  sub_100044608(*(void **)(v0 + 360), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 368));

  swift_errorRelease();
  return _swift_task_switch(sub_100073A04, 0, 0);
}

uint64_t sub_100073A04()
{
  if (qword_100092A30 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000964B0;
  return _swift_task_switch(sub_100073A98, v0, 0);
}

uint64_t sub_100073A98()
{
  sub_10002F9D8(v0[25], v0[26]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100073B14()
{
  uint64_t v1 = (int *)v0[28];
  uint64_t v2 = v0[29];
  uint64_t v3 = (uint64_t *)v0[24];
  uint64_t v24 = *v3;
  uint64_t v10 = v3[1];
  uint64_t v23 = v3[2];
  uint64_t v11 = v3[3];
  uint64_t v21 = v3[6];
  uint64_t v22 = v3[4];
  uint64_t v13 = v3[5];
  uint64_t v14 = v3[7];
  uint64_t v4 = v3[9];
  uint64_t v5 = v3[11];
  uint64_t v19 = v3[10];
  uint64_t v20 = v3[8];
  __int16 v18 = *((_WORD *)v3 + 48);
  uint64_t v17 = v3[13];
  char v16 = *((unsigned char *)v3 + 112);
  uint64_t v6 = v2 + v1[8];
  uint64_t v15 = *(uint64_t *)((char *)v3 + v1[7]);
  uint64_t v7 = type metadata accessor for Date();
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  uint64_t v12 = *(uint64_t *)((char *)v3 + v1[10]);
  v8(v2 + v1[9], 1, 1, v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Date.init()();
  *(void *)uint64_t v2 = v24;
  *(void *)(v2 + 8) = v10;
  *(void *)(v2 + 16) = v23;
  *(void *)(v2 + 24) = v11;
  *(void *)(v2 + 32) = v22;
  *(void *)(v2 + 40) = v13;
  *(void *)(v2 + 48) = v21;
  *(void *)(v2 + 56) = v14;
  *(void *)(v2 + 64) = v20;
  *(void *)(v2 + 72) = v4;
  *(void *)(v2 + 80) = v19;
  *(void *)(v2 + 88) = v5;
  *(_WORD *)(v2 + 96) = v18;
  *(void *)(v2 + 104) = v17;
  *(unsigned char *)(v2 + 112) = v16;
  *(void *)(v2 + v1[7]) = v15;
  *(void *)(v2 + v1[10]) = v12;
  sub_10002E92C((Swift::String *)v2);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100073D34, 0, 0);
}

uint64_t sub_100073D34()
{
  if (qword_100092A48 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  v0[50] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100073E04;
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[27];
  return sub_1000378C8(v2, v3);
}

uint64_t sub_100073E04()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100073F00, 0, 0);
}

uint64_t sub_100073F00()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_errorRelease();
  sub_100013DE8(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100073F88()
{
  uint64_t v1 = *(void **)(v0 + 432);
  sub_100044608(*(void **)(v0 + 416), *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 424));

  return _swift_task_switch(sub_100073FFC, 0, 0);
}

uint64_t sub_100073FFC()
{
  if (qword_100092A30 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000964B0;
  return _swift_task_switch(sub_100074090, v0, 0);
}

uint64_t sub_100074090()
{
  sub_10002F9D8(*(void *)(v0 + 200), *(void *)(v0 + 208));
  return _swift_task_switch(sub_1000740F8, 0, 0);
}

uint64_t sub_1000740F8()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100074174(void *a1)
{
  uint64_t v2 = v1;
  if (qword_100092AE8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100006040(v4, (uint64_t)qword_1000942D0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    sub_100007E60(0xD000000000000026, 0x800000010007F670, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  unint64_t v8 = sub_1000489A8();
  uint64_t v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  if (v8 == 2)
  {
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 67240192;
      LODWORD(aBlock) = [v9 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v10, v13, "Process %{public}d is not entitled to use this service. Refusing connection.", v14, 8u);
      swift_slowDealloc();
    }
    else
    {

      uint64_t v10 = v9;
    }

    [v9 invalidate];
    return v8 != 2;
  }
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 67240192;
    LODWORD(aBlock) = [v9 processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accepting a new XPC connection from: %{public}d", v12, 8u);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v10 = v9;
  }

  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v9;
  id v37 = sub_100074804;
  uint64_t v38 = v15;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v34 = 1107296256;
  uint64_t v35 = sub_10006DC78;
  unsigned int v36 = &unk_10008EFE0;
  char v16 = _Block_copy(&aBlock);
  uint64_t v17 = v9;
  swift_release();
  [v17 setInterruptionHandler:v16];
  _Block_release(v16);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = v2;
  id v37 = sub_10007484C;
  uint64_t v38 = v18;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v34 = 1107296256;
  uint64_t v35 = sub_10006DC78;
  unsigned int v36 = &unk_10008F030;
  uint64_t v19 = _Block_copy(&aBlock);
  uint64_t v20 = v17;
  uint64_t v21 = v2;
  swift_release();
  [v20 setInvalidationHandler:v19];
  _Block_release(v19);
  type metadata accessor for FeedbackDaemonDelegate();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v8;
  uint64_t v23 = *(NSObject **)&v21[OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_syncQueue];
  uint64_t v24 = (void *)swift_allocObject();
  _OWORD v24[2] = v21;
  v24[3] = v20;
  v24[4] = v22;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_10007489C;
  *(void *)(v25 + 24) = v24;
  id v37 = sub_1000748B8;
  uint64_t v38 = v25;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v34 = 1107296256;
  uint64_t v35 = sub_10006ED88;
  unsigned int v36 = &unk_10008F0A8;
  BOOL v26 = _Block_copy(&aBlock);
  uint64_t v27 = v20;
  id v28 = v21;
  swift_retain();
  swift_retain();
  sub_1000748E0(v8);
  swift_release();
  dispatch_sync(v23, v26);
  _Block_release(v26);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v21 & 1) == 0)
  {
    if (v8)
    {
      uint64_t v30 = (objc_class *)type metadata accessor for FeedbackDaemonInterface();
      unint64_t v31 = v8;
    }
    else
    {
      uint64_t v30 = (objc_class *)type metadata accessor for FeedbackDaemonAdminInterface();
      unint64_t v31 = 0;
    }
    id v32 = [objc_allocWithZone(v30) init];
    sub_100074900(v31);
    [v27 setExportedInterface:v32];

    [v27 setExportedObject:v22];
    [v27 resume];
    swift_release();
    swift_release();
    return v8 != 2;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000747CC()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100074804()
{
  sub_10006E940(*(void **)(v0 + 16));
}

uint64_t sub_10007480C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007484C()
{
  return sub_10006EAAC(*(void **)(v0 + 16), *(char **)(v0 + 24));
}

uint64_t sub_100074854()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10007489C()
{
  sub_10006EDB0(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000748A8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000748B8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_1000748E0(unint64_t result)
{
  if (result != 2) {
    return sub_1000748F0(result);
  }
  return result;
}

unint64_t sub_1000748F0(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_100074900(unint64_t result)
{
  if (result != 2) {
    return sub_10005860C(result);
  }
  return result;
}

uint64_t sub_100074910()
{
  return sub_10006ED24(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100074918()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100074928()
{
  unint64_t result = qword_1000943E0;
  if (!qword_1000943E0)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000943E0);
  }
  return result;
}

unint64_t sub_100074980()
{
  unint64_t result = qword_1000943F0;
  if (!qword_1000943F0)
  {
    sub_100009764(&qword_1000943E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000943F0);
  }
  return result;
}

uint64_t sub_100074A10()
{
  uint64_t v32 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v1 = (char *)&v20 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v22 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v30 = sub_10000FA44();
  unsigned int v29 = enum case for DispatchQoS.QoSClass.userInitiated(_:);
  id v28 = *(void (**)(char *))(v5 + 104);
  v28(v7);
  uint64_t v21 = (void (*)(void, void))static OS_dispatch_queue.global(qos:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v7, v4);
  uint64_t v40 = sub_100074EC0;
  uint64_t v41 = 0;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  BOOL v26 = &v38;
  uint64_t v38 = sub_10006DC78;
  uint64_t v39 = &unk_10008F148;
  unint64_t v8 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter();
  uint64_t v35 = _swiftEmptyArrayStorage;
  unint64_t v24 = sub_10007500C();
  uint64_t v23 = sub_100008580(&qword_100094440);
  unint64_t v25 = sub_100075064();
  uint64_t v9 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v10 = v21;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v8);

  os_log_type_t v11 = *(void (**)(void, void))(v34 + 8);
  v34 += 8;
  uint64_t v21 = v11;
  v11(v1, v9);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t))(v33 + 8);
  v33 += 8;
  uint64_t v20 = v12;
  os_log_type_t v13 = v3;
  uint64_t v14 = v31;
  v12(v3, v31);
  uint64_t v15 = v22;
  ((void (*)(char *, void, uint64_t))v28)(v7, v29, v22);
  char v16 = (void *)static OS_dispatch_queue.global(qos:)();
  v27(v7, v15);
  uint64_t v40 = sub_100074EF8;
  uint64_t v41 = 0;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  uint64_t v38 = sub_10006DC78;
  uint64_t v39 = &unk_10008F170;
  uint64_t v17 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter();
  uint64_t v35 = _swiftEmptyArrayStorage;
  uint64_t v18 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  v21(v1, v18);
  return v20(v13, v14);
}

uint64_t sub_100074EC0()
{
  return sub_100074F30(&qword_100092AF8, (uint64_t)&qword_100096528, (uint64_t (*)(void))sub_10006E2A0);
}

uint64_t sub_100074EF8()
{
  return sub_100074F30(&qword_100092AC8, (uint64_t)&qword_100096508, (uint64_t (*)(void))sub_10005ACAC);
}

uint64_t sub_100074F30(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (*a1 != -1) {
    swift_once();
  }
  return a3();
}

int main(int argc, const char **argv, const char **envp)
{
  sub_100074A10();
  id v4 = [self currentRunLoop];
  [v4 run];

  return 0;
}

uint64_t sub_100074FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100075004()
{
  return swift_release();
}

unint64_t sub_10007500C()
{
  unint64_t result = qword_100094438;
  if (!qword_100094438)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100094438);
  }
  return result;
}

unint64_t sub_100075064()
{
  unint64_t result = qword_100094448;
  if (!qword_100094448)
  {
    sub_100009764(&qword_100094440);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100094448);
  }
  return result;
}

uint64_t sub_1000750C8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100075190()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000AA2C(v0, qword_100094450);
  sub_100006040(v0, (uint64_t)qword_100094450);
  static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000751F0()
{
  type metadata accessor for Authentication();
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = v0 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  uint64_t v2 = type metadata accessor for User();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(void *)(v0 + OBJC_IVAR____TtC9feedbackd14Authentication_invalidTokens) = &_swiftEmptyArrayStorage;
  qword_100096530 = v0;
  return result;
}

uint64_t sub_100075290()
{
  uint64_t v1 = v0;
  id v2 = [self sharedUserDefaults];
  Swift::Int v3 = (Swift::Int)[v2 integerForKey:FBKSLastSuccessfulUserIDKey];

  if (v3 < 1)
  {
    if (qword_100092B00 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100006040(v16, (uint64_t)qword_100094450);
    BOOL v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_13;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v15 = "No user id found in preferences";
    goto LABEL_12;
  }
  id v4 = self;
  sub_10000C524(0, (unint64_t *)&unk_100092ED0);
  Class isa = NSNumber.init(integerLiteral:)(v3).super.super.isa;
  id v6 = [v4 fetchDeviceTokenForParticipantID:isa];

  if (!v6)
  {
    if (qword_100092B00 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100006040(v17, (uint64_t)qword_100094450);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 134349056;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "No device token found for user: %{public}ld", v20, 0xCu);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  uint64_t v10 = (void **)(v1 + OBJC_IVAR____TtC9feedbackd14Authentication_invalidTokens);
  swift_beginAccess();
  if (sub_1000750C8(v7, v9, *v10))
  {
    swift_bridgeObjectRelease();
    if (qword_100092B00 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100006040(v11, (uint64_t)qword_100094450);
    BOOL v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_13;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v15 = "Device token is invalid";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v15, v14, 2u);
    swift_slowDealloc();
LABEL_13:

    return 0;
  }
  return v7;
}

uint64_t sub_1000755F8()
{
  uint64_t v1 = sub_100008580(&qword_1000934F0);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  id v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  id v6 = &v14[-v5];
  uint64_t v7 = type metadata accessor for User();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = v0 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess();
  sub_100023588(v11, (uint64_t)v6);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1000784F4((uint64_t)v6);
    return 0;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v10, v6, v7);
  char v12 = User.hasExpiredSession.getter();
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  if (v12)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v4, 1, 1, v7);
    swift_beginAccess();
    sub_100077C88((uint64_t)v4, v11);
    swift_endAccess();
    return 0;
  }
  return 1;
}

uint64_t sub_100075814(char a1)
{
  *(void *)(v2 + 72) = v1;
  *(unsigned char *)(v2 + 88) = a1;
  sub_100008580(&qword_1000934F0);
  *(void *)(v2 + 80) = swift_task_alloc();
  return _swift_task_switch(sub_1000758AC, v1, 0);
}

uint64_t sub_1000758AC()
{
  uint64_t v26 = v0;
  if (qword_100092B00 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006040(v1, (uint64_t)qword_100094450);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    *(void *)(v0 + 64) = sub_100007E60(0xD000000000000028, 0x800000010007F860, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v0 + 88) == 1)
  {
    uint64_t v5 = sub_100075290();
    if (v6)
    {
      uint64_t v7 = v5;
      uint64_t v8 = v6;
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Adding token to deny list", v11, 2u);
        swift_slowDealloc();
      }
      uint64_t v12 = *(void *)(v0 + 72);

      os_log_type_t v13 = (char **)(v12 + OBJC_IVAR____TtC9feedbackd14Authentication_invalidTokens);
      swift_beginAccess();
      uint64_t v14 = *v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *os_log_type_t v13 = v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v14 = sub_100077F58(0, *((void *)v14 + 2) + 1, 1, v14);
        *os_log_type_t v13 = v14;
      }
      unint64_t v17 = *((void *)v14 + 2);
      unint64_t v16 = *((void *)v14 + 3);
      if (v17 >= v16 >> 1)
      {
        uint64_t v14 = sub_100077F58((char *)(v16 > 1), v17 + 1, 1, v14);
        *os_log_type_t v13 = v14;
      }
      *((void *)v14 + 2) = v17 + 1;
      uint64_t v18 = &v14[16 * v17];
      *((void *)v18 + 4) = v7;
      *((void *)v18 + 5) = v8;
      swift_endAccess();
    }
  }
  uint64_t v20 = *(void *)(v0 + 72);
  uint64_t v19 = *(void *)(v0 + 80);
  uint64_t v21 = type metadata accessor for User();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v19, 1, 1, v21);
  uint64_t v22 = v20 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess();
  sub_100077C88(v19, v22);
  swift_endAccess();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_100075C24(uint64_t a1, uint64_t a2)
{
  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  uint64_t v4 = type metadata accessor for User();
  v3[17] = v4;
  v3[18] = *(void *)(v4 - 8);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  sub_100008580(&qword_1000934F0);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  return _swift_task_switch(sub_100075D68, v2, 0);
}

uint64_t sub_100075D68()
{
  uint64_t v1 = FBKSForm.AuthenticationMethod.rawValue.getter();
  if (v1 == FBKSForm.AuthenticationMethod.rawValue.getter())
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[27] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100076028;
    uint64_t v3 = v0[26];
LABEL_3:
    return sub_100077220(v3);
  }
  uint64_t v5 = sub_100075290();
  v0[29] = v6;
  if (v6)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v6;
    type metadata accessor for SeedPortal();
    v0[30] = static SeedPortal.shared.getter();
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of SeedPortal.loginWithDeviceToken(token:)
                                                            + async function pointer to dispatch thunk of SeedPortal.loginWithDeviceToken(token:));
    uint64_t v9 = (void *)swift_task_alloc();
    v0[31] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1000762F0;
    uint64_t v10 = v0[20];
    return v15(v10, v7, v8);
  }
  else
  {
    uint64_t v11 = FBKSForm.AuthenticationMethod.rawValue.getter();
    if (v11 != FBKSForm.AuthenticationMethod.rawValue.getter())
    {
      uint64_t v14 = (void *)swift_task_alloc();
      v0[33] = v14;
      *uint64_t v14 = v0;
      v14[1] = sub_100076750;
      uint64_t v3 = v0[22];
      goto LABEL_3;
    }
    sub_10000FA84();
    swift_allocError();
    *uint64_t v12 = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_100076028()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  if (v0) {
    uint64_t v4 = sub_100076A18;
  }
  else {
    uint64_t v4 = sub_100076154;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100076154()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[16];
  sub_100077C20(v0[26], v1);
  uint64_t v6 = v5 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess();
  sub_100077C88(v1, v6);
  swift_endAccess();
  sub_1000755F8();
  sub_100023588(v6, v2);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  uint64_t v8 = v0[17];
  uint64_t v9 = v0[18];
  uint64_t v10 = v0[14];
  if (v7 == 1)
  {
    sub_1000784F4(v0[24]);
    uint64_t v11 = 1;
  }
  else
  {
    (*(void (**)(void, void, void))(v9 + 32))(v0[14], v0[24], v0[17]);
    uint64_t v11 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, v11, 1, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1000762F0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 256) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  swift_release();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v4 = sub_100076B98;
  }
  else {
    uint64_t v4 = sub_100076454;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100076454()
{
  if (qword_100092B00 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100006040(v5, (uint64_t)qword_100094450);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6(v1, v2, v3);
  int v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v11 = v0[18];
  uint64_t v10 = v0[19];
  uint64_t v12 = v0[17];
  if (v9)
  {
    uint64_t v25 = v6;
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v13 = 134217984;
    uint64_t v14 = User.id.getter();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    v0[13] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Logged in as user %ld", v13, 0xCu);
    uint64_t v6 = v25;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(v0[19], v0[17]);
  }

  uint64_t v15 = v0[25];
  uint64_t v16 = v0[23];
  uint64_t v17 = v0[20];
  uint64_t v18 = v0[17];
  uint64_t v19 = v0[18];
  uint64_t v20 = v0[16];
  uint64_t v26 = v0[14];
  v6(v15, v17, v18);
  uint64_t v21 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56);
  v21(v15, 0, 1, v18);
  sub_100077C20(v15, v16);
  uint64_t v22 = v20 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess();
  sub_100077C88(v16, v22);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v26, v17, v18);
  v21(v26, 0, 1, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_100076750()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  if (v0) {
    uint64_t v4 = sub_100076AD8;
  }
  else {
    uint64_t v4 = sub_10007687C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10007687C()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[16];
  sub_100077C20(v0[22], v1);
  uint64_t v6 = v5 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess();
  sub_100077C88(v1, v6);
  swift_endAccess();
  sub_1000755F8();
  sub_100023588(v6, v2);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  uint64_t v8 = v0[17];
  uint64_t v9 = v0[18];
  uint64_t v10 = v0[14];
  if (v7 == 1)
  {
    sub_1000784F4(v0[21]);
    uint64_t v11 = 1;
  }
  else
  {
    (*(void (**)(void, void, void))(v9 + 32))(v0[14], v0[21], v0[17]);
    uint64_t v11 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, v11, 1, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100076A18()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100076AD8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100076B98()
{
  v0[11] = v0[32];
  swift_errorRetain();
  sub_100008580(&qword_100093940);
  sub_10000C524(0, (unint64_t *)&qword_100093150);
  if (!swift_dynamicCast())
  {
    swift_errorRelease();
    goto LABEL_15;
  }
  swift_errorRelease();
  uint64_t v1 = (void *)v0[12];
  v0[35] = v1;
  id v2 = v1;
  uint64_t v3 = (void *)_convertErrorToNSError(_:)();

  int v4 = FBKSErrorContainsSP2ErrorCode();
  if (!v4)
  {
    if (qword_100092B00 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100006040(v11, (uint64_t)qword_100094450);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Login failed", v14, 2u);
      swift_slowDealloc();
    }

    swift_willThrow();
    swift_errorRelease();
    goto LABEL_15;
  }
  if (qword_100092B00 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100006040(v5, (uint64_t)qword_100094450);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Device token is no longer valid", v8, 2u);
    swift_slowDealloc();
  }

  uint64_t v9 = FBKSForm.AuthenticationMethod.rawValue.getter();
  if (v9 == FBKSForm.AuthenticationMethod.rawValue.getter())
  {
    sub_10000FA84();
    swift_allocError();
    *uint64_t v10 = 3;
    swift_willThrow();

    swift_errorRelease();
LABEL_15:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  uint64_t v17 = (void *)swift_task_alloc();
  v0[36] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_100076F54;
  uint64_t v18 = v0[14];
  return sub_100077220(v18);
}

uint64_t sub_100076F54()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  if (v0) {
    int v4 = sub_100077150;
  }
  else {
    int v4 = sub_100077080;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100077080()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100077150()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100077220(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  sub_100008580(&qword_1000934F0);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for User();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  return _swift_task_switch(sub_100077330, v1, 0);
}

uint64_t sub_100077330()
{
  uint64_t v10 = v0;
  if (qword_100092B00 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[17] = sub_100006040(v1, (uint64_t)qword_100094450);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)int v4 = 136446210;
    v0[8] = sub_100007E60(0xD000000000000016, 0x800000010007F7C0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  type metadata accessor for SeedPortal();
  v0[18] = static SeedPortal.shared.getter();
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of SeedPortal.unauthenticatedLogin()
                                       + async function pointer to dispatch thunk of SeedPortal.unauthenticatedLogin());
  uint64_t v5 = (void *)swift_task_alloc();
  v0[19] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10007754C;
  uint64_t v6 = v0[16];
  return v8(v6);
}

uint64_t sub_10007754C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 80);
    int v4 = sub_1000778F0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 80);
    swift_release();
    int v4 = sub_100077674;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100077674()
{
  uint64_t v1 = *(void (**)(void, void, void))(v0[14] + 16);
  v1(v0[15], v0[16], v0[13]);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    log = v2;
    uint64_t v5 = v0[14];
    uint64_t v4 = v0[15];
    uint64_t v20 = v0[13];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    uint64_t v7 = v1;
    uint64_t v8 = User.id.getter();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v20);
    v0[7] = v8;
    uint64_t v1 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v2 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v3, "Logged in as user %ld", v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
  }
  uint64_t v9 = v2;
  uint64_t v10 = v0[16];
  uint64_t v12 = v0[13];
  uint64_t v11 = v0[14];
  uint64_t v13 = v0[11];
  uint64_t v14 = v0[12];
  uint64_t v15 = v0[10];
  uint64_t v21 = v0[9];

  v1(v14, v10, v12);
  uint64_t v16 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56);
  v16(v14, 0, 1, v12);
  sub_100077C20(v14, v13);
  uint64_t v17 = v15 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess();
  sub_100077C88(v13, v17);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v21, v10, v12);
  v16(v21, 0, 1, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1000778F0()
{
  uint64_t v1 = v0[20];
  swift_release();
  v0[5] = v1;
  swift_errorRetain();
  sub_100008580(&qword_100093940);
  sub_10000C524(0, (unint64_t *)&qword_100093150);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Login failed", v4, 2u);
      swift_slowDealloc();
    }

    swift_willThrow();
  }
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100077A7C()
{
  sub_1000784F4(v0 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100077ACC()
{
  return type metadata accessor for Authentication();
}

uint64_t type metadata accessor for Authentication()
{
  uint64_t result = qword_1000944A0;
  if (!qword_1000944A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100077B20()
{
  sub_100077BC8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100077BC8()
{
  if (!qword_1000944C8)
  {
    type metadata accessor for User();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000944C8);
    }
  }
}

uint64_t sub_100077C20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_1000934F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100077C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008580(&qword_1000934F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100077CF0(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100008580((uint64_t *)&unk_1000945E0);
  uint64_t v10 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100078554(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

char *sub_100077F58(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100008580(&qword_100092C68);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000786AC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100078068(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100008580(&qword_1000945D0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000787A0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10007818C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000781B4(a1, a2, a3, a4, &qword_1000945C0, &qword_100093FC0);
}

uint64_t sub_1000781A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000781B4(a1, a2, a3, a4, &qword_1000945C8, &qword_100093BF0);
}

uint64_t sub_1000781B4(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100008580(a5);
  uint64_t v13 = *(void *)(sub_100008580(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(sub_100008580(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if (a1)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000788B0(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

void *sub_100078420(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t sub_1000784C4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1000784F4(uint64_t a1)
{
  uint64_t v2 = sub_100008580(&qword_1000934F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100078554(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for UUID() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000786AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000787A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_100008580(&qword_1000945D8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000788B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(sub_100008580(a5) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t static CustomNSError.errorDomain.getter()
{
  return static CustomNSError.errorDomain.getter();
}

uint64_t CustomNSError<>.errorCode.getter()
{
  return CustomNSError<>.errorCode.getter();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t DateComponents.isValidDate(in:)()
{
  return DateComponents.isValidDate(in:)();
}

NSDateComponents __swiftcall DateComponents._bridgeToObjectiveC()()
{
  return (NSDateComponents)DateComponents._bridgeToObjectiveC()();
}

uint64_t DateComponents.hour.setter()
{
  return DateComponents.hour.setter();
}

uint64_t DateComponents.minute.setter()
{
  return DateComponents.minute.setter();
}

uint64_t DateComponents.second.setter()
{
  return DateComponents.second.setter();
}

uint64_t type metadata accessor for DateComponents()
{
  return type metadata accessor for DateComponents();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return _BridgedStoredNSError.code.getter();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t NSFastEnumerationIterator.next()()
{
  return NSFastEnumerationIterator.next()();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return type metadata accessor for NSFastEnumerationIterator();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t URL.lastPathComponent.getter()
{
  return URL.lastPathComponent.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathExtension(_:)()
{
  return URL.appendingPathExtension(_:)();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URL.path.getter()
{
  return URL.path.getter();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return URL.appending<A>(path:directoryHint:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

uint64_t Data._copyContents(initializing:)()
{
  return Data._copyContents(initializing:)();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return type metadata accessor for Data.Iterator();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t Date.init(timeIntervalSince1970:)()
{
  return Date.init(timeIntervalSince1970:)();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t Calendar.dateComponents(_:from:)()
{
  return Calendar.dateComponents(_:from:)();
}

uint64_t Calendar.date(from:)()
{
  return Calendar.date(from:)();
}

uint64_t Calendar.date(byAdding:value:to:wrappingComponents:)()
{
  return Calendar.date(byAdding:value:to:wrappingComponents:)();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)();
}

uint64_t _CFObject.hash(into:)()
{
  return _CFObject.hash(into:)();
}

uint64_t _CFObject.hashValue.getter()
{
  return _CFObject.hashValue.getter();
}

uint64_t type metadata accessor for CentralizedFeedbackDaemonInterface()
{
  return type metadata accessor for CentralizedFeedbackDaemonInterface();
}

uint64_t type metadata accessor for FeedbackFeatureFlags()
{
  return type metadata accessor for FeedbackFeatureFlags();
}

uint64_t type metadata accessor for FeedbackDaemonInterface()
{
  return type metadata accessor for FeedbackDaemonInterface();
}

uint64_t type metadata accessor for FeedbackDaemonAdminInterface()
{
  return type metadata accessor for FeedbackDaemonAdminInterface();
}

uint64_t static SeedPortal.shared.getter()
{
  return static SeedPortal.shared.getter();
}

uint64_t type metadata accessor for SeedPortal()
{
  return type metadata accessor for SeedPortal();
}

uint64_t static JSONCodable.decode(from:)()
{
  return static JSONCodable.decode(from:)();
}

uint64_t JSONCodable.encode()()
{
  return JSONCodable.encode()();
}

uint64_t FBKSCampaign.init(state:updatedAt:)()
{
  return FBKSCampaign.init(state:updatedAt:)();
}

uint64_t type metadata accessor for FBKSCampaign()
{
  return type metadata accessor for FBKSCampaign();
}

uint64_t type metadata accessor for FBKSDonation.DonationError()
{
  return type metadata accessor for FBKSDonation.DonationError();
}

uint64_t dispatch thunk of FBKSDonation.usesAnnotatedContent.getter()
{
  return dispatch thunk of FBKSDonation.usesAnnotatedContent.getter();
}

uint64_t type metadata accessor for FBKSDonation()
{
  return type metadata accessor for FBKSDonation();
}

uint64_t FBKSFeedback.init(formIdentifier:submissionDate:build:id:)()
{
  return FBKSFeedback.init(formIdentifier:submissionDate:build:id:)();
}

uint64_t type metadata accessor for FBKSFeedback()
{
  return type metadata accessor for FBKSFeedback();
}

uint64_t FBKSSInboxTat.dateAdded.getter()
{
  return FBKSSInboxTat.dateAdded.getter();
}

uint64_t FBKSEvaluation.FormResponse.answers.getter()
{
  return FBKSEvaluation.FormResponse.answers.getter();
}

uint64_t type metadata accessor for FBKSEvaluation.FormResponse()
{
  return type metadata accessor for FBKSEvaluation.FormResponse();
}

uint64_t FBKSEvaluation.formResponse.getter()
{
  return FBKSEvaluation.formResponse.getter();
}

NSNumber __swiftcall FBKSEvaluation.Action.caEnumValue()()
{
  return (NSNumber)FBKSEvaluation.Action.caEnumValue()();
}

uint64_t type metadata accessor for FBKSEvaluation.Action()
{
  return type metadata accessor for FBKSEvaluation.Action();
}

uint64_t FBKSEvaluation.action.getter()
{
  return FBKSEvaluation.action.getter();
}

uint64_t FBKSEvaluation.Subject.description.getter()
{
  return FBKSEvaluation.Subject.description.getter();
}

uint64_t FBKSEvaluation.Subject.RemoteEvaluation.showFeedbackForm.getter()
{
  return FBKSEvaluation.Subject.RemoteEvaluation.showFeedbackForm.getter();
}

uint64_t FBKSEvaluation.Subject.RemoteEvaluation.action.getter()
{
  return FBKSEvaluation.Subject.RemoteEvaluation.action.getter();
}

uint64_t FBKSEvaluation.Subject.RemoteEvaluation.subject.getter()
{
  return FBKSEvaluation.Subject.RemoteEvaluation.subject.getter();
}

uint64_t type metadata accessor for FBKSEvaluation.Subject.RemoteEvaluation()
{
  return type metadata accessor for FBKSEvaluation.Subject.RemoteEvaluation();
}

uint64_t type metadata accessor for FBKSEvaluation.Subject()
{
  return type metadata accessor for FBKSEvaluation.Subject();
}

uint64_t dispatch thunk of FBKSEvaluation.__allocating_init(subject:action:formResponse:)()
{
  return dispatch thunk of FBKSEvaluation.__allocating_init(subject:action:formResponse:)();
}

uint64_t FBKSEvaluation.init(subject:action:formResponse:)()
{
  return FBKSEvaluation.init(subject:action:formResponse:)();
}

uint64_t FBKSEvaluation.subject.getter()
{
  return FBKSEvaluation.subject.getter();
}

uint64_t type metadata accessor for FBKSEvaluation()
{
  return type metadata accessor for FBKSEvaluation();
}

uint64_t dispatch thunk of FBKSInteraction.donationID.getter()
{
  return dispatch thunk of FBKSInteraction.donationID.getter();
}

uint64_t dispatch thunk of FBKSInteraction.diagnostics.getter()
{
  return dispatch thunk of FBKSInteraction.diagnostics.getter();
}

uint64_t dispatch thunk of FBKSInteraction.diagnostics.setter()
{
  return dispatch thunk of FBKSInteraction.diagnostics.setter();
}

uint64_t dispatch thunk of FBKSInteraction.evaluationID.getter()
{
  return dispatch thunk of FBKSInteraction.evaluationID.getter();
}

uint64_t dispatch thunk of FBKSInteraction.extraContent.getter()
{
  return dispatch thunk of FBKSInteraction.extraContent.getter();
}

uint64_t dispatch thunk of FBKSInteraction.extraContent.setter()
{
  return dispatch thunk of FBKSInteraction.extraContent.setter();
}

uint64_t dispatch thunk of FBKSInteraction.modelVersion.getter()
{
  return dispatch thunk of FBKSInteraction.modelVersion.getter();
}

NSNumber __swiftcall FBKSInteraction.FeatureDomain.caEnumValue()()
{
  return (NSNumber)FBKSInteraction.FeatureDomain.caEnumValue()();
}

uint64_t FBKSInteraction.FeatureDomain.description.getter()
{
  return FBKSInteraction.FeatureDomain.description.getter();
}

uint64_t type metadata accessor for FBKSInteraction.FeatureDomain()
{
  return type metadata accessor for FBKSInteraction.FeatureDomain();
}

uint64_t dispatch thunk of FBKSInteraction.__allocating_init(featureDomain:bundleID:prefillQuestions:originalContent:generatedContent:modelVersion:diagnostics:auxiliaryMetrics:isHighPriority:evaluationID:)()
{
  return dispatch thunk of FBKSInteraction.__allocating_init(featureDomain:bundleID:prefillQuestions:originalContent:generatedContent:modelVersion:diagnostics:auxiliaryMetrics:isHighPriority:evaluationID:)();
}

uint64_t dispatch thunk of FBKSInteraction.featureDomain.getter()
{
  return dispatch thunk of FBKSInteraction.featureDomain.getter();
}

uint64_t dispatch thunk of FBKSInteraction.sentPresented.getter()
{
  return dispatch thunk of FBKSInteraction.sentPresented.getter();
}

uint64_t dispatch thunk of FBKSInteraction.isHighPriority.getter()
{
  return dispatch thunk of FBKSInteraction.isHighPriority.getter();
}

uint64_t type metadata accessor for FBKSInteraction.StructuredValue()
{
  return type metadata accessor for FBKSInteraction.StructuredValue();
}

uint64_t dispatch thunk of FBKSInteraction.firstEvaluation.getter()
{
  return dispatch thunk of FBKSInteraction.firstEvaluation.getter();
}

uint64_t dispatch thunk of FBKSInteraction.firstEvaluation.setter()
{
  return dispatch thunk of FBKSInteraction.firstEvaluation.setter();
}

uint64_t dispatch thunk of FBKSInteraction.originalContent.getter()
{
  return dispatch thunk of FBKSInteraction.originalContent.getter();
}

uint64_t dispatch thunk of FBKSInteraction.originalContent.setter()
{
  return dispatch thunk of FBKSInteraction.originalContent.setter();
}

uint64_t dispatch thunk of FBKSInteraction.setEvaluationID(_:)()
{
  return dispatch thunk of FBKSInteraction.setEvaluationID(_:)();
}

uint64_t FBKSInteraction.AnnotatedContent.init(payload:displayName:description:fileName:group:iconType:additionalInfo:)()
{
  return FBKSInteraction.AnnotatedContent.init(payload:displayName:description:fileName:group:iconType:additionalInfo:)();
}

uint64_t FBKSInteraction.AnnotatedContent.payload.getter()
{
  return FBKSInteraction.AnnotatedContent.payload.getter();
}

uint64_t static FBKSInteraction.AnnotatedContent.IconType.withString(value:)()
{
  return static FBKSInteraction.AnnotatedContent.IconType.withString(value:)();
}

uint64_t type metadata accessor for FBKSInteraction.AnnotatedContent.IconType()
{
  return type metadata accessor for FBKSInteraction.AnnotatedContent.IconType();
}

uint64_t type metadata accessor for FBKSInteraction.AnnotatedContent()
{
  return type metadata accessor for FBKSInteraction.AnnotatedContent();
}

uint64_t dispatch thunk of FBKSInteraction.auxiliaryMetrics.getter()
{
  return dispatch thunk of FBKSInteraction.auxiliaryMetrics.getter();
}

uint64_t dispatch thunk of FBKSInteraction.generatedContent.getter()
{
  return dispatch thunk of FBKSInteraction.generatedContent.getter();
}

uint64_t dispatch thunk of FBKSInteraction.generatedContent.setter()
{
  return dispatch thunk of FBKSInteraction.generatedContent.setter();
}

uint64_t dispatch thunk of FBKSInteraction.prefillQuestions.getter()
{
  return dispatch thunk of FBKSInteraction.prefillQuestions.getter();
}

uint64_t dispatch thunk of FBKSInteraction.originalAnnotatedContent.getter()
{
  return dispatch thunk of FBKSInteraction.originalAnnotatedContent.getter();
}

uint64_t dispatch thunk of FBKSInteraction.originalAnnotatedContent.setter()
{
  return dispatch thunk of FBKSInteraction.originalAnnotatedContent.setter();
}

uint64_t dispatch thunk of FBKSInteraction.generatedAnnotatedContent.getter()
{
  return dispatch thunk of FBKSInteraction.generatedAnnotatedContent.getter();
}

uint64_t dispatch thunk of FBKSInteraction.generatedAnnotatedContent.setter()
{
  return dispatch thunk of FBKSInteraction.generatedAnnotatedContent.setter();
}

NSNumber __swiftcall FBKSInteraction.Content.caEnumValue()()
{
  return (NSNumber)FBKSInteraction.Content.caEnumValue()();
}

uint64_t type metadata accessor for FBKSInteraction.Content()
{
  return type metadata accessor for FBKSInteraction.Content();
}

uint64_t dispatch thunk of FBKSInteraction.bundleID.getter()
{
  return dispatch thunk of FBKSInteraction.bundleID.getter();
}

uint64_t type metadata accessor for FBKSInteraction()
{
  return type metadata accessor for FBKSInteraction();
}

uint64_t FBKSPromptStyle.init(rawValue:)()
{
  return FBKSPromptStyle.init(rawValue:)();
}

uint64_t FBKSPromptStyle.rawValue.getter()
{
  return FBKSPromptStyle.rawValue.getter();
}

uint64_t FBKSCampaignError.init(code:domain:errorDescription:date:)()
{
  return FBKSCampaignError.init(code:domain:errorDescription:date:)();
}

uint64_t type metadata accessor for FBKSCampaignError()
{
  return type metadata accessor for FBKSCampaignError();
}

uint64_t FBKSFeedbackCount.init(feedbackFiled:errors:currentCampaign:declineCount:)()
{
  return FBKSFeedbackCount.init(feedbackFiled:errors:currentCampaign:declineCount:)();
}

uint64_t FBKSFeedbackCount.asJSON.getter()
{
  return FBKSFeedbackCount.asJSON.getter();
}

uint64_t type metadata accessor for FBKSFeedbackCount()
{
  return type metadata accessor for FBKSFeedbackCount();
}

Swift::String __swiftcall FBKSLocalizedString(key:)(Swift::String key)
{
  uint64_t v1 = FBKSLocalizedString(key:)(key._countAndFlagsBits, key._object);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t static FBKSSharedPersistence.removeInboxTat(_:)()
{
  return static FBKSSharedPersistence.removeInboxTat(_:)();
}

uint64_t static FBKSSharedPersistence.fbaInboxFormTat(formIdentifier:)()
{
  return static FBKSSharedPersistence.fbaInboxFormTat(formIdentifier:)();
}

uint64_t static FBKSSharedPersistence.removeAllInboxTats()()
{
  return static FBKSSharedPersistence.removeAllInboxTats()();
}

uint64_t static FBKSSharedPersistence.saveSurveyTatInFBAInbox(formIdentifier:)()
{
  return static FBKSSharedPersistence.saveSurveyTatInFBAInbox(formIdentifier:)();
}

uint64_t type metadata accessor for FBKSSharedPersistence()
{
  return type metadata accessor for FBKSSharedPersistence();
}

uint64_t type metadata accessor for FBKSRemoteAlertRequest()
{
  return type metadata accessor for FBKSRemoteAlertRequest();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.promptStyle.getter()
{
  return dispatch thunk of FBKSLaunchConfiguration.promptStyle.getter();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.promptStyle.setter()
{
  return dispatch thunk of FBKSLaunchConfiguration.promptStyle.setter();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.skipsPrompt.getter()
{
  return dispatch thunk of FBKSLaunchConfiguration.skipsPrompt.getter();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.skipsPrompt.setter()
{
  return dispatch thunk of FBKSLaunchConfiguration.skipsPrompt.setter();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.notifyImmediately.getter()
{
  return dispatch thunk of FBKSLaunchConfiguration.notifyImmediately.getter();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.notifyImmediately.setter()
{
  return dispatch thunk of FBKSLaunchConfiguration.notifyImmediately.setter();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.localizedPromptTitle.getter()
{
  return dispatch thunk of FBKSLaunchConfiguration.localizedPromptTitle.getter();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.localizedPromptTitle.setter()
{
  return dispatch thunk of FBKSLaunchConfiguration.localizedPromptTitle.setter();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.localizedPromptMessage.getter()
{
  return dispatch thunk of FBKSLaunchConfiguration.localizedPromptMessage.getter();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.localizedPromptMessage.setter()
{
  return dispatch thunk of FBKSLaunchConfiguration.localizedPromptMessage.setter();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.alwaysLaunchInRemoteAlert.getter()
{
  return dispatch thunk of FBKSLaunchConfiguration.alwaysLaunchInRemoteAlert.getter();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.alwaysLaunchInRemoteAlert.setter()
{
  return dispatch thunk of FBKSLaunchConfiguration.alwaysLaunchInRemoteAlert.setter();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewDeclineButtonTitle.getter()
{
  return dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewDeclineButtonTitle.getter();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewDeclineButtonTitle.setter()
{
  return dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewDeclineButtonTitle.setter();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewProceedButtonTitle.getter()
{
  return dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewProceedButtonTitle.getter();
}

uint64_t dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewProceedButtonTitle.setter()
{
  return dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewProceedButtonTitle.setter();
}

uint64_t static FBKSLaunchConfiguration.fromJSON(data:)()
{
  return static FBKSLaunchConfiguration.fromJSON(data:)();
}

uint64_t type metadata accessor for FBKSLaunchConfiguration()
{
  return type metadata accessor for FBKSLaunchConfiguration();
}

uint64_t FBKSRemoteEvaluationRequest.init(action:interaction:showFeedbackForm:)()
{
  return FBKSRemoteEvaluationRequest.init(action:interaction:showFeedbackForm:)();
}

uint64_t type metadata accessor for FBKSRemoteEvaluationRequest()
{
  return type metadata accessor for FBKSRemoteEvaluationRequest();
}

uint64_t User.hasExpiredSession.getter()
{
  return User.hasExpiredSession.getter();
}

uint64_t User.isUnauthenticated.getter()
{
  return User.isUnauthenticated.getter();
}

uint64_t User.id.getter()
{
  return User.id.getter();
}

uint64_t type metadata accessor for User()
{
  return type metadata accessor for User();
}

uint64_t Failure.init(message:)()
{
  return Failure.init(message:)();
}

uint64_t type metadata accessor for Failure()
{
  return type metadata accessor for Failure();
}

uint64_t static Strings.Notification.categoryIdentifier.getter()
{
  return static Strings.Notification.categoryIdentifier.getter();
}

uint64_t static Strings.Notification.cfbCategoryIdentifier.getter()
{
  return static Strings.Notification.cfbCategoryIdentifier.getter();
}

uint64_t static Strings.Notification.snoozeActionIdentifier.getter()
{
  return static Strings.Notification.snoozeActionIdentifier.getter();
}

uint64_t static Strings.Notification.declineActionIdentifier.getter()
{
  return static Strings.Notification.declineActionIdentifier.getter();
}

uint64_t static Strings.fbaGroupIdentifier.getter()
{
  return static Strings.fbaGroupIdentifier.getter();
}

uint64_t static Strings.fbaBundleIdentifier.getter()
{
  return static Strings.fbaBundleIdentifier.getter();
}

uint64_t static Strings.feedbackInternalBundleIdentifier.getter()
{
  return static Strings.feedbackInternalBundleIdentifier.getter();
}

uint64_t static Strings.XPC.CentralizedFeedback.machService.getter()
{
  return static Strings.XPC.CentralizedFeedback.machService.getter();
}

uint64_t static Strings.XPC.machService.getter()
{
  return static Strings.XPC.machService.getter();
}

uint64_t static Strings.XPC.adminEntitlement.getter()
{
  return static Strings.XPC.adminEntitlement.getter();
}

uint64_t static Strings.XPC.clientEntitlement.getter()
{
  return static Strings.XPC.clientEntitlement.getter();
}

uint64_t static Strings.Daemon.errorDomain.getter()
{
  return static Strings.Daemon.errorDomain.getter();
}

uint64_t static Strings.Daemon.directoryName.getter()
{
  return static Strings.Daemon.directoryName.getter();
}

uint64_t static Strings.Daemon.bundleIdentifier.getter()
{
  return static Strings.Daemon.bundleIdentifier.getter();
}

uint64_t static Strings.Daemon.loggingSubsystem.getter()
{
  return static Strings.Daemon.loggingSubsystem.getter();
}

uint64_t static Strings.Daemon.XPCActivityIdentifier.getter()
{
  return static Strings.Daemon.XPCActivityIdentifier.getter();
}

uint64_t static Strings.Daemon.CheckDonationsTaskIdentifier.getter()
{
  return static Strings.Daemon.CheckDonationsTaskIdentifier.getter();
}

uint64_t static Strings.Daemon.configurationUserDefaultsDomain.getter()
{
  return static Strings.Daemon.configurationUserDefaultsDomain.getter();
}

uint64_t FBKSForm.init(identifier:)()
{
  return FBKSForm.init(identifier:)();
}

uint64_t dispatch thunk of FBKSForm.identifier.getter()
{
  return dispatch thunk of FBKSForm.identifier.getter();
}

uint64_t FBKSForm.AuthenticationMethod.description.getter()
{
  return FBKSForm.AuthenticationMethod.description.getter();
}

uint64_t FBKSForm.AuthenticationMethod.rawValue.getter()
{
  return FBKSForm.AuthenticationMethod.rawValue.getter();
}

uint64_t dispatch thunk of FBKSForm.authenticationMethod.getter()
{
  return dispatch thunk of FBKSForm.authenticationMethod.getter();
}

uint64_t dispatch thunk of FBKSForm.authenticationMethod.setter()
{
  return dispatch thunk of FBKSForm.authenticationMethod.setter();
}

uint64_t dispatch thunk of FBKSForm.answers.getter()
{
  return dispatch thunk of FBKSForm.answers.getter();
}

uint64_t dispatch thunk of FBKSForm.prefill(question:answer:)()
{
  return dispatch thunk of FBKSForm.prefill(question:answer:)();
}

uint64_t FBKSForm.Question.init(stringValue:)()
{
  return FBKSForm.Question.init(stringValue:)();
}

uint64_t FBKSForm.Question.stringValue.getter()
{
  return FBKSForm.Question.stringValue.getter();
}

uint64_t type metadata accessor for FBKSForm.Question()
{
  return type metadata accessor for FBKSForm.Question();
}

uint64_t static FBKSForm.fromJSON(data:)()
{
  return static FBKSForm.fromJSON(data:)();
}

uint64_t type metadata accessor for FBKSForm()
{
  return type metadata accessor for FBKSForm();
}

uint64_t FormItem.isSurvey.getter()
{
  return FormItem.isSurvey.getter();
}

uint64_t type metadata accessor for FormItem()
{
  return type metadata accessor for FormItem();
}

uint64_t static FBKSError.xpcSafeNSError(error:)()
{
  return static FBKSError.xpcSafeNSError(error:)();
}

uint64_t static FBKSError.nsError(anyError:)()
{
  return static FBKSError.nsError(anyError:)();
}

uint64_t Regex.init(_regexString:version:)()
{
  return Regex.init(_regexString:version:)();
}

uint64_t Regex.Match.subscript.getter()
{
  return Regex.Match.subscript.getter();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t DarwinBoolean.description.getter()
{
  return DarwinBoolean.description.getter();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t Character.isWhitespace.getter()
{
  return Character.isWhitespace.getter();
}

uint64_t BidirectionalCollection<>.wholeMatch<A>(of:)()
{
  return BidirectionalCollection<>.wholeMatch<A>(of:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t String.init(utf8String:)()
{
  return String.init(utf8String:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(data:encoding:)()
{
  return String.init(data:encoding:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t static String._fromUTF8Repairing(_:)()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

{
  String.append(_:)(a1._countAndFlagsBits, a1._object);
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0 = String.Iterator.next()();
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return static TaskPriority.userInitiated.getter();
}

uint64_t static TaskPriority.utility.getter()
{
  return static TaskPriority.utility.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.isCancelled.getter()
{
  return static Task<>.isCancelled.getter();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t Collection<>.trimmingPrefix<A>(_:)()
{
  return Collection<>.trimmingPrefix<A>(_:)();
}

uint64_t NSEnumerator.makeIterator()()
{
  return NSEnumerator.makeIterator()();
}

uint64_t BMSQLDatabase.execute(query:)()
{
  return BMSQLDatabase.execute(query:)();
}

uint64_t NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)()
{
  return NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  return NSCoder.decodeObject<A>(of:forKey:)();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return __CocoaDictionary.lookup(_:)();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
}

uint64_t dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter()
{
  return dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return _findStringSwitchCaseWithCache(cases:string:cache:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t AnalyticsSendEvent()
{
  return _AnalyticsSendEvent();
}

uint64_t BiomeLibrary()
{
  return _BiomeLibrary();
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return _CFUserNotificationCancel(userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationReceiveResponse(userNotification, timeout, responseFlags);
}

uint64_t FBKSErrorContainsSP2ErrorCode()
{
  return _FBKSErrorContainsSP2ErrorCode();
}

uint64_t SBSGetScreenLockStatus()
{
  return _SBSGetScreenLockStatus();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

{
}

{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return _os_variant_has_internal_diagnostics();
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getMetatypeMetadata()
{
  return _swift_getMetatypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStaticObject()
{
  return _swift_initStaticObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return _xpc_activity_set_state(activity, state);
}

uint64_t xpc_copy_code_signing_identity_for_token()
{
  return _xpc_copy_code_signing_identity_for_token();
}