double sub_100005C90(double *a1, double *a2, double a3, double a4)
{
  double result;

  result = sqrt(a3);
  if (a1) {
    *a1 = a4 / (result + result);
  }
  if (a2)
  {
    result = 6.28318531 / result;
    *a2 = result;
  }
  return result;
}

double sub_100005CBC(double *a1, double *a2, double result, double a4, double a5)
{
  if (a1)
  {
    double v5 = sqrt(result * a4);
    *a1 = a5 / (v5 + v5);
  }
  if (a2)
  {
    result = 6.28318531 / sqrt(a4 / result);
    *a2 = result;
  }
  return result;
}

double sub_100005CF4(double *a1, double *a2, double result, double a4)
{
  double v4 = 6.28318531 / a4 * (6.28318531 / a4);
  if (a1) {
    *a1 = v4;
  }
  if (a2)
  {
    double v5 = sqrt(v4);
    result = (v5 + v5) * result;
    *a2 = result;
  }
  return result;
}

double sub_100005D24(double *a1, double *a2, double result, double a4, double a5)
{
  double v5 = sqrt(a4 / result);
  double v6 = 6.28318531 / (6.28318531 / v5) * (6.28318531 / (6.28318531 / v5));
  if (a1) {
    *a1 = v6;
  }
  if (a2)
  {
    double v7 = sqrt(result * a4);
    double v8 = sqrt(v6);
    result = a5 / (v7 + v7) * (v8 + v8);
    *a2 = result;
  }
  return result;
}

__n128 sub_100005D70@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D3>, double a5@<D4>)
{
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v9 = a1 + 16;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  double v23 = 0.0;
  double v24 = 0.0;
  sub_100005CF4(&v24, &v23, 1.0, 0.5);
  sub_100006F2C(v9, a4, 0.0, a4, v24, v23);
  sub_100006F2C((uint64_t)&v16, a5, 0.0, a5, v24, v23);
  long long v10 = v21;
  *(_OWORD *)(a1 + 192) = v20;
  *(_OWORD *)(a1 + 208) = v10;
  *(_OWORD *)(a1 + 224) = v22;
  long long v11 = v17;
  *(_OWORD *)(a1 + 128) = v16;
  *(_OWORD *)(a1 + 144) = v11;
  __n128 v12 = v19;
  *(_OWORD *)(a1 + 160) = v18;
  *(__n128 *)(a1 + 176) = v12;
  sub_100006F2C((uint64_t)&v16, a2, 0.0, a2, v24, v23);
  long long v13 = v21;
  *(_OWORD *)(a1 + 304) = v20;
  *(_OWORD *)(a1 + 320) = v13;
  *(_OWORD *)(a1 + 336) = v22;
  long long v14 = v17;
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 256) = v14;
  __n128 result = v19;
  *(_OWORD *)(a1 + 272) = v18;
  *(__n128 *)(a1 + 288) = result;
  return result;
}

uint64_t sub_100005E90(uint64_t result, double a2)
{
  *(double *)(result + 280) = a2;
  *(double *)(result + 240) = a2;
  *(void *)(result + 248) = 0;
  return result;
}

void sub_100005EA0(uint64_t a1, double a2, double a3)
{
  if (a3 == 0.0)
  {
    *(double *)(a1 + 240) = a3;
    *(void *)(a1 + 248) = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    sub_100005CF4((double *)&v7, (double *)&v6, 1.0, a3);
    uint64_t v5 = v6;
    *(void *)(a1 + 264) = v7;
    *(void *)(a1 + 272) = v5;
    a3 = a2;
  }
  *(double *)(a1 + 280) = a3;
}

void sub_100005F0C(uint64_t a1, double a2, double a3, double a4)
{
  if (a4 == 0.0)
  {
    *(double *)(a1 + 280) = a2;
  }
  else
  {
    sub_100005EA0(a1, a2, a4);
    a2 = a3;
  }
  *(double *)(a1 + 240) = a2;
  *(void *)(a1 + 248) = 0;
}

uint64_t sub_100005F60(uint64_t result, double a2)
{
  *(double *)(result + 56) = a2;
  *(double *)(result + 16) = a2;
  *(void *)(result + 24) = 0;
  return result;
}

void sub_100005F70(uint64_t a1, double a2, double a3)
{
  if (a3 == 0.0)
  {
    *(double *)(a1 + 16) = a2;
    *(void *)(a1 + 24) = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    sub_100005CF4((double *)&v7, (double *)&v6, 1.0, a3);
    uint64_t v5 = v6;
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v5;
  }
  *(double *)(a1 + 56) = a2;
}

uint64_t sub_100005FD8(uint64_t result, double a2)
{
  *(double *)(result + 168) = a2;
  *(double *)(result + 128) = a2;
  *(void *)(result + 136) = 0;
  return result;
}

void sub_100005FE8(uint64_t a1, double a2, double a3)
{
  if (a3 == 0.0)
  {
    *(double *)(a1 + 128) = a2;
    *(void *)(a1 + 136) = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    sub_100005CF4((double *)&v7, (double *)&v6, 1.0, a3);
    uint64_t v5 = v6;
    *(void *)(a1 + 152) = v7;
    *(void *)(a1 + 160) = v5;
  }
  *(double *)(a1 + 168) = a2;
}

double sub_100006050@<D0>(void *__src@<X0>, double *a2@<X8>, double a3@<D0>)
{
  memcpy(a2, __src, 0x170uLL);
  long long v5 = *((_OWORD *)a2 + 6);
  long long v38 = *((_OWORD *)a2 + 5);
  long long v39 = v5;
  long long v40 = *((_OWORD *)a2 + 7);
  long long v6 = *((_OWORD *)a2 + 2);
  long long v34 = *((_OWORD *)a2 + 1);
  long long v35 = v6;
  long long v7 = *((_OWORD *)a2 + 4);
  long long v36 = *((_OWORD *)a2 + 3);
  long long v37 = v7;
  sub_100007054((uint64_t)&v34, (uint64_t)(a2 + 2), a3);
  long long v8 = *((_OWORD *)a2 + 13);
  long long v31 = *((_OWORD *)a2 + 12);
  long long v32 = v8;
  long long v33 = *((_OWORD *)a2 + 14);
  long long v9 = *((_OWORD *)a2 + 9);
  long long v27 = *((_OWORD *)a2 + 8);
  long long v28 = v9;
  long long v10 = *((_OWORD *)a2 + 11);
  long long v29 = *((_OWORD *)a2 + 10);
  long long v30 = v10;
  sub_100007054((uint64_t)&v27, (uint64_t)&v34, a3);
  long long v11 = v39;
  *((_OWORD *)a2 + 12) = v38;
  *((_OWORD *)a2 + 13) = v11;
  *((_OWORD *)a2 + 14) = v40;
  long long v12 = v35;
  *((_OWORD *)a2 + 8) = v34;
  *((_OWORD *)a2 + 9) = v12;
  long long v13 = v37;
  *((_OWORD *)a2 + 10) = v36;
  *((_OWORD *)a2 + 11) = v13;
  long long v14 = *((_OWORD *)a2 + 20);
  long long v31 = *((_OWORD *)a2 + 19);
  long long v32 = v14;
  long long v33 = *((_OWORD *)a2 + 21);
  long long v15 = *((_OWORD *)a2 + 16);
  long long v27 = *((_OWORD *)a2 + 15);
  long long v28 = v15;
  long long v16 = *((_OWORD *)a2 + 18);
  long long v29 = *((_OWORD *)a2 + 17);
  long long v30 = v16;
  sub_100007054((uint64_t)&v27, (uint64_t)&v34, a3);
  long long v17 = v39;
  *((_OWORD *)a2 + 19) = v38;
  *((_OWORD *)a2 + 20) = v17;
  *((_OWORD *)a2 + 21) = v40;
  long long v18 = v35;
  *((_OWORD *)a2 + 15) = v34;
  *((_OWORD *)a2 + 16) = v18;
  long long v19 = v37;
  *((_OWORD *)a2 + 17) = v36;
  *((_OWORD *)a2 + 18) = v19;
  *(double *)&long long v19 = *a2;
  *(double *)&long long v18 = a2[1];
  double v20 = a2[2];
  double v21 = a2[16];
  double v22 = a2[30];
  uint64_t v23 = *((void *)a2 + 44);
  uint64_t v24 = *((void *)a2 + 45);
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  sub_100006F8C((uint64_t)&v34, *(double *)&v19, *(double *)&v18, v22, v20, v21);
  *(void *)&long long v37 = v23;
  *((void *)&v37 + 1) = v24;
  v26[4] = v38;
  v26[5] = v39;
  v26[6] = v40;
  v26[0] = v34;
  v26[1] = v35;
  v26[2] = v36;
  v26[3] = v37;
  sub_100007054((uint64_t)v26, (uint64_t)&v27, a3);
  double result = *(double *)&v27;
  *(_OWORD *)a2 = v27;
  return result;
}

__n128 sub_1000061F8@<Q0>(__n128 *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  sub_100006F8C((uint64_t)a2, a1->n128_f64[0], a1->n128_f64[1], a1[15].n128_f64[0], a1[1].n128_f64[0], a1[8].n128_f64[0]);
  __n128 result = a1[22];
  a2[3] = result;
  return result;
}

BOOL sub_10000624C(void *a1)
{
  double v1 = *(double *)a1;
  double v2 = *((double *)a1 + 1);
  uint64_t v3 = a1[44];
  uint64_t v4 = a1[45];
  long long v5 = (long long *)(a1 + 2);
  double v6 = *((double *)a1 + 2);
  long long v7 = (long long *)(a1 + 16);
  double v8 = *((double *)a1 + 16);
  long long v9 = (long long *)(a1 + 30);
  double v10 = *((double *)a1 + 30);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  sub_100006F8C((uint64_t)&v28, v1, v2, v10, v6, v8);
  *(void *)&long long v31 = v3;
  *((void *)&v31 + 1) = v4;
  long long v25 = v32;
  long long v26 = v33;
  long long v27 = v34;
  long long v21 = v28;
  long long v22 = v29;
  long long v23 = v30;
  long long v24 = v31;
  BOOL result = sub_100006F58((double *)&v21);
  if (result)
  {
    long long v12 = v9[5];
    long long v25 = v9[4];
    long long v26 = v12;
    long long v27 = v9[6];
    long long v13 = v9[1];
    long long v21 = *v9;
    long long v22 = v13;
    long long v14 = v9[3];
    long long v23 = v9[2];
    long long v24 = v14;
    BOOL result = sub_100006F58((double *)&v21);
    if (result)
    {
      long long v15 = v5[5];
      long long v25 = v5[4];
      long long v26 = v15;
      long long v27 = v5[6];
      long long v16 = v5[1];
      long long v21 = *v5;
      long long v22 = v16;
      long long v17 = v5[3];
      long long v23 = v5[2];
      long long v24 = v17;
      BOOL result = sub_100006F58((double *)&v21);
      if (result)
      {
        long long v18 = v7[5];
        long long v25 = v7[4];
        long long v26 = v18;
        long long v27 = v7[6];
        long long v19 = v7[1];
        long long v21 = *v7;
        long long v22 = v19;
        long long v20 = v7[3];
        long long v23 = v7[2];
        long long v24 = v20;
        return sub_100006F58((double *)&v21);
      }
    }
  }
  return result;
}

double sub_10000636C(double a1, double a2, double a3)
{
  return a2 / 1000.0 * a3 / (1.0 - a3) + a1;
}

double sub_100006390(double a1, double a2, double a3, double a4)
{
  if (a3 == 0.0) {
    return a2;
  }
  if (a1 < a2) {
    a3 = -a3;
  }
  return a2 + (1.0 - 1.0 / (a4 * ((a1 - a2) / a3) + 1.0)) * a3;
}

double sub_1000063CC(double a1, double a2, double a3, double a4)
{
  if (a3 == 0.0) {
    return a2;
  }
  if (a1 < a2) {
    a3 = -a3;
  }
  return a2 + (-1.0 / ((a1 - a2) / a3 + -1.0) + -1.0) / a4 * a3;
}

uint64_t start(int a1, char **a2)
{
  if (dword_10035A460 <= 50 && (dword_10035A460 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if ((_set_user_dir_suffix() & 1) == 0
    && dword_10035A460 <= 90
    && (dword_10035A460 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  id v5 = NSTemporaryDirectory();
  uint64_t v6 = UIApplicationMain(a1, a2, @"Application", @"Application");
  return v6;
}

int64x2_t sub_100006F2C@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0x3FF0000000000000;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a4;
  int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)(a1 + 48) = 0u;
  *(int64x2_t *)(a1 + 64) = result;
  return result;
}

BOOL sub_100006F58(double *a1)
{
  return vabdd_f64(*a1, a1[5]) <= a1[6] && fabs(a1[1]) <= a1[7];
}

int64x2_t sub_100006F8C@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_100005CF4((double *)&v14, (double *)&v13, a5, a6);
  uint64_t v11 = v13;
  uint64_t v10 = v14;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0x3FF0000000000000;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(double *)(a1 + 40) = a4;
  int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)(a1 + 48) = 0u;
  *(int64x2_t *)(a1 + 64) = result;
  return result;
}

double sub_100007014(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = 0;
  double v7 = 0.0;
  sub_100005CF4(&v7, (double *)&v6, a2, a3);
  uint64_t v5 = v6;
  double result = v7;
  *(double *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v5;
  return result;
}

void sub_100007054(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v5 = *(double *)(a1 + 40);
  if (vabdd_f64(*(double *)a1, v5) <= *(double *)(a1 + 48))
  {
    double v6 = *(double *)(a1 + 8);
    if (fabs(v6) <= *(double *)(a1 + 56))
    {
      long long v26 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a2 + 80) = v26;
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
      long long v27 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_OWORD *)(a2 + 16) = v27;
      long long v28 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a2 + 48) = v28;
      return;
    }
  }
  else
  {
    double v6 = *(double *)(a1 + 8);
  }
  double v7 = *(double *)a1 - v5;
  long long v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v8;
  long long v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v9;
  double v10 = *(double *)(a1 + 24);
  double v11 = *(double *)(a1 + 32);
  double v32 = v10;
  double v33 = v5;
  double v31 = v11;
  if (v10 == *(double *)(a1 + 64) && v11 == *(double *)(a1 + 72))
  {
    double v12 = *(double *)(a1 + 80);
    double v13 = *(double *)(a1 + 88);
    double v15 = *(double *)(a1 + 96);
    double v34 = *(double *)(a1 + 104);
    double v14 = -v12;
  }
  else
  {
    double v12 = v11 * 0.5;
    double v13 = sqrt(v10);
    double v14 = -(v11 * 0.5);
    double v15 = sqrt(v13 * v13 - v12 * v12);
    double v34 = sqrt(v12 * v12 - v13 * v13);
  }
  double v16 = exp(v14 * a3);
  double v17 = v6 + v12 * v7;
  if (v12 >= v13)
  {
    if (v12 <= v13)
    {
      double v24 = v7 + v17 * a3;
      double v20 = v16 * v14;
      double v25 = v24;
      goto LABEL_14;
    }
    long double v21 = v34 * a3;
    long double __x = v34 * a3;
    double v22 = v17 / v34;
    double v30 = cosh(v21);
    long double v23 = sinh(__x);
    double v20 = v22 * v23 + v7 * v30;
    double v17 = v34 * (v22 * v30) + v7 * v23 * v34;
  }
  else
  {
    double v18 = v17 / v15;
    __double2 v19 = __sincos_stret(v15 * a3);
    double v20 = v19.__sinval * v18 + v7 * v19.__cosval;
    double v17 = v15 * (v19.__cosval * v18) + -(v19.__sinval * v7) * v15;
  }
  double v24 = v16 * v14;
  double v25 = v20;
LABEL_14:
  *(double *)a2 = v33 + v16 * v25;
  *(double *)(a2 + 8) = v24 * v20 + v16 * v17;
  *(double *)(a2 + 64) = v32;
  *(double *)(a2 + 72) = v31;
  *(double *)(a2 + 80) = v12;
  *(double *)(a2 + 88) = v13;
  *(double *)(a2 + 96) = v15;
  *(double *)(a2 + 104) = v34;
}

uint64_t sub_100007234(uint64_t a1)
{
  double v2 = v1;
  uint64_t v4 = *v1;
  v2[3] = sub_100268B68((uint64_t)_swiftEmptyArrayStorage);
  v2[4] = (uint64_t)&_swiftEmptyDictionarySingleton;
  v2[5] = (uint64_t)&_swiftEmptySetSingleton;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v4, (uint64_t)&off_10031F1E8);
  v2[2] = a1;
  uint64_t v5 = OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment_deviceStorage;
  swift_retain();
  sub_10000A38C(&qword_10035ABB8);
  sub_10000B010(&qword_10035ABC0, &qword_10035ABB8);
  Publisher.eraseToAnyPublisher()();
  swift_allocObject();
  swift_weakInit();
  sub_10000A38C(&qword_10035ABC8);
  sub_10000B010(&qword_10035ABD0, &qword_10035ABC8);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  Publisher.eraseToAnyPublisher()();
  swift_allocObject();
  swift_weakInit();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v6 = *(void *)(a1 + v5);
  [*(id *)(v6 + 32) lock];
  swift_beginAccess();
  uint64_t v7 = swift_bridgeObjectRetain();
  unint64_t v8 = (unint64_t)sub_1000F06FC(v7);
  swift_bridgeObjectRelease();
  [*(id *)(v6 + 32) unlock];
  if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_4;
    }
LABEL_11:
    swift_release();
    swift_release_n();
    return (uint64_t)v2;
  }
  swift_retain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v9 = result;
  if (!result) {
    goto LABEL_11;
  }
LABEL_4:
  if (v9 >= 1)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if ((v8 & 0xC000000000000001) != 0)
      {
        uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v12 = *(void *)(v8 + 8 * i + 32);
        swift_retain();
      }
      sub_1000075D0(v12);
      swift_release();
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000075D0(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10035ABD8);
  uint64_t v160 = *(void *)(v2 - 8);
  uint64_t v161 = v2;
  __chkstk_darwin(v2);
  v159 = (char *)&v125 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = sub_10000A38C(&qword_10035ABE0);
  uint64_t v147 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  v143 = (char *)&v125 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = sub_10000A38C(&qword_10035ABE8);
  uint64_t v148 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  v144 = (char *)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = sub_10000A38C(&qword_10035ABF0);
  uint64_t v150 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  v145 = (char *)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = (void *)sub_10000A38C(&qword_10035ABF8);
  unint64_t v153 = *(v154 - 1);
  __chkstk_darwin(v154);
  v146 = (char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10035AC00);
  uint64_t v157 = *(void *)(v8 - 8);
  uint64_t v158 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v155 = v10;
  v156 = (char *)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v167 = (char *)&v125 - v11;
  uint64_t v142 = sub_10000A38C(&qword_10035AC08);
  uint64_t v141 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  v138 = (char *)&v125 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = sub_10000A38C(&qword_10035AC10);
  uint64_t v139 = *(void *)(v140 - 8);
  uint64_t v13 = __chkstk_darwin(v140);
  v136 = (char *)&v125 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = v14;
  __chkstk_darwin(v13);
  uint64_t v164 = (uint64_t)&v125 - v15;
  v134 = (void *)sub_10000A38C(&qword_10035AC18);
  v133 = (void (**)(void, void))*(v134 - 1);
  __chkstk_darwin(v134);
  v131 = (char *)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000A38C(&qword_10035AC20);
  __chkstk_darwin(v17 - 8);
  __double2 v19 = (char *)&v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = (void *)sub_10000A38C(&qword_10035AC28);
  unint64_t v129 = *(v130 - 1);
  __chkstk_darwin(v130);
  long double v21 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_10000A38C(&qword_10035AC30);
  uint64_t v22 = *(void *)(v126 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  uint64_t v24 = __chkstk_darwin(v126);
  v162 = (char *)&v125 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v163 = (char *)&v125 - v25;
  uint64_t v26 = sub_10000A38C(&qword_10035AC38);
  uint64_t v165 = *(void *)(v26 - 8);
  uint64_t v166 = v26;
  uint64_t v27 = __chkstk_darwin(v26);
  v137 = (char *)&v125 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v170 = (char *)&v125 - v29;
  id v172 = (id)0xD000000000000012;
  unint64_t v173 = 0x80000001002B1AB0;
  swift_retain();
  uint64_t v30 = sub_1001F7514();
  double v32 = v31;
  swift_release();
  v33._countAndFlagsBits = v30;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  id v34 = sub_1001F602C();
  swift_bridgeObjectRetain();
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v34 ulog:40 message:v35];
  swift_bridgeObjectRelease();

  id v172 = (id)sub_10003BDB0();
  sub_10000A38C(&qword_10035AC40);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_10028D430;
  swift_retain();
  CurrentValueSubject.value.getter();
  char v37 = v174;
  if (v174 == 6)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    char v37 = v171;
  }
  else
  {
    swift_release();
  }
  *(unsigned char *)(v36 + 32) = v37;
  uint64_t v38 = sub_10000A38C(&qword_10035AC48);
  uint64_t v39 = sub_10000B010(&qword_10035AC50, &qword_10035AC48);
  uint64_t v128 = v38;
  uint64_t v127 = v39;
  Publisher.prepend(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  if (qword_10035A628 != -1) {
    swift_once();
  }
  long long v40 = (void *)qword_1003ACB50;
  id v172 = (id)qword_1003ACB50;
  uint64_t v41 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v19, 1, 1, v41);
  sub_10000A34C();
  v132 = &protocol conformance descriptor for Publishers.Concatenate<A, B>;
  sub_10000B010(&qword_10035AC58, &qword_10035AC28);
  sub_10000A6E4((unint64_t *)&qword_10035AC60, (void (*)(uint64_t))sub_10000A34C);
  id v42 = v40;
  v43 = v163;
  v44 = v130;
  Publisher.receive<A>(on:options:)();
  sub_10000AC28((uint64_t)v19);

  (*(void (**)(char *, void *))(v129 + 8))(v21, v44);
  swift_retain();
  v45 = (void *)sub_1001F7514();
  unint64_t v47 = v46;
  swift_release();
  id v172 = v45;
  unint64_t v173 = v47;
  v48._countAndFlagsBits = 0x6765722077654E20;
  v48._object = (void *)0xED0000203A6E6F69;
  String.append(_:)(v48);
  v130 = v172;
  unint64_t v129 = v173;
  id v49 = sub_1001F602C();
  v50 = v162;
  v51 = v43;
  uint64_t v52 = v126;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v162, v51, v126);
  unint64_t v53 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v54 = (v23 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v55 = (v54 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v169 = a1;
  unint64_t v56 = (v55 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = sub_100008EC8;
  *(void *)(v57 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v57 + v53, v50, v52);
  v58 = (void *)(v57 + v54);
  unint64_t v59 = v129;
  void *v58 = v130;
  v58[1] = v59;
  v60 = (void *)(v57 + v55);
  void *v60 = 0;
  v60[1] = 0xE000000000000000;
  *(void *)(v57 + v56) = v49;
  *(_DWORD *)(v57 + ((v56 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  swift_bridgeObjectRetain();
  id v61 = v49;
  sub_10000A38C(&qword_10035AC68);
  sub_10000B010(&qword_10035AC70, &qword_10035AC30);
  v62 = v131;
  v63 = v163;
  Publisher.map<A>(_:)();
  swift_release();
  v162 = (char *)&protocol conformance descriptor for Publishers.Map<A, B>;
  sub_10000B010(&qword_10035AC78, &qword_10035AC18);
  v64 = v134;
  v65 = (void *)Publisher.eraseToAnyPublisher()();
  ((void (**)(char *, void *))v133)[1](v62, v64);
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v22 + 8))(v63, v52);
  id v172 = v65;
  *(unsigned char *)(swift_allocObject() + 16) = 1;
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  id v172 = (id)sub_100117AF4();
  swift_retain();
  sub_10000A38C(&qword_10035AC80);
  v134 = &protocol conformance descriptor for AnyPublisher<A, B>;
  sub_10000B010(&qword_10035AC88, &qword_10035AC80);
  uint64_t v66 = v164;
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  id v172 = 0;
  unint64_t v173 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_retain();
  v67 = (void *)sub_1001F7514();
  unint64_t v69 = v68;
  swift_bridgeObjectRelease();
  swift_release();
  id v172 = v67;
  unint64_t v173 = v69;
  v70._countAndFlagsBits = 0xD00000000000001ELL;
  v70._object = (void *)0x80000001002B1AD0;
  String.append(_:)(v70);
  v133 = (void (**)(void, void))v172;
  v163 = (char *)v173;
  id v71 = sub_1001F602C();
  uint64_t v72 = v139;
  v73 = v136;
  uint64_t v74 = v140;
  (*(void (**)(char *, uint64_t, uint64_t))(v139 + 16))(v136, v66, v140);
  unint64_t v75 = (*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
  unint64_t v76 = (v135 + v75 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v77 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v79 = swift_allocObject();
  *(void *)(v79 + 16) = 0;
  *(void *)(v79 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v72 + 32))(v79 + v75, v73, v74);
  v80 = (void *)(v79 + v76);
  v81 = v163;
  void *v80 = v133;
  v80[1] = v81;
  v82 = (void *)(v79 + v77);
  void *v82 = 0;
  v82[1] = 0xE000000000000000;
  *(void *)(v79 + v78) = v71;
  *(_DWORD *)(v79 + ((v78 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  sub_10000B010(&qword_10035AC90, &qword_10035AC10);
  swift_bridgeObjectRetain();
  id v83 = v71;
  v84 = v138;
  uint64_t v85 = v164;
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10035AC98, &qword_10035AC08);
  uint64_t v86 = v142;
  v87 = (char *)Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v141 + 8))(v84, v86);
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v85, v74);
  uint64_t v164 = v169 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
  (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v137, v170, v166);
  v136 = v87;
  id v172 = v87;
  swift_retain();
  v163 = (char *)sub_10000A38C(&qword_10035ACA0);
  sub_10000B010(&qword_10035ACA8, &qword_10035AC38);
  uint64_t v142 = sub_10000B010(&qword_10035ACB0, &qword_10035ACA0);
  v88 = v143;
  Publishers.CombineLatest.init(_:_:)();
  sub_10000B010(&qword_10035ACB8, &qword_10035ABE0);
  v89 = v144;
  uint64_t v90 = v149;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v147 + 8))(v88, v90);
  sub_10000B010(&qword_10035ACC0, &qword_10035ABE8);
  v91 = v145;
  uint64_t v92 = v151;
  Publisher.prepend(_:)();
  (*(void (**)(char *, uint64_t))(v148 + 8))(v89, v92);
  sub_10000B010(&qword_10035ACC8, &qword_10035ABF0);
  v93 = v146;
  uint64_t v94 = v152;
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v150 + 8))(v91, v94);
  sub_10000B010(&qword_10035ACD0, &qword_10035ABF8);
  v95 = v167;
  v96 = v154;
  Publisher.dropFirst(_:)();
  (*(void (**)(char *, void *))(v153 + 8))(v93, v96);
  id v172 = 0;
  unint64_t v173 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_retain();
  v97 = (void *)sub_1001F7514();
  unint64_t v99 = v98;
  swift_bridgeObjectRelease();
  swift_release();
  id v172 = v97;
  unint64_t v173 = v99;
  v100._countAndFlagsBits = 0xD000000000000014;
  v100._object = (void *)0x80000001002B1AF0;
  String.append(_:)(v100);
  v154 = v172;
  unint64_t v153 = v173;
  id v101 = sub_1001F602C();
  v102 = v156;
  uint64_t v103 = v157;
  v104 = v95;
  uint64_t v105 = v158;
  (*(void (**)(char *, char *, uint64_t))(v157 + 16))(v156, v104, v158);
  unint64_t v106 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
  unint64_t v107 = (v155 + v106 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v108 = (v107 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v109 = (v108 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v110 = swift_allocObject();
  *(void *)(v110 + 16) = 0;
  *(void *)(v110 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v103 + 32))(v110 + v106, v102, v105);
  v111 = (void *)(v110 + v107);
  unint64_t v112 = v153;
  void *v111 = v154;
  v111[1] = v112;
  v113 = (void *)(v110 + v108);
  void *v113 = 0;
  v113[1] = 0xE000000000000000;
  *(void *)(v110 + v109) = v101;
  *(_DWORD *)(v110 + ((v109 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  sub_10000B010(&qword_10035ACD8, &qword_10035AC00);
  swift_bridgeObjectRetain();
  id v114 = v101;
  v115 = v159;
  v116 = v167;
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10035ACE0, &qword_10035ABD8);
  uint64_t v117 = v161;
  v118 = (void *)Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v160 + 8))(v115, v117);
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v103 + 8))(v116, v105);
  id v172 = v118;
  uint64_t v119 = swift_allocObject();
  uint64_t v120 = v168;
  swift_weakInit();
  uint64_t v121 = swift_allocObject();
  *(void *)(v121 + 16) = v119;
  *(void *)(v121 + 24) = v169;
  swift_retain();
  uint64_t v122 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v171 = *(void *)(v120 + 32);
  *(void *)(v120 + 32) = 0x8000000000000000;
  sub_10026492C(v122, v164, isUniquelyReferenced_nonNull_native);
  *(void *)(v120 + 32) = v171;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v165 + 8))(v170, v166);
}

uint64_t sub_100008BE8(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3(v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_100008C5C(uint64_t a1)
{
  swift_retain();
  uint64_t v2 = sub_1001F7514();
  uint64_t v4 = v3;
  swift_release();
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  id v6 = sub_1001F602C();
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 ulog:40 message:v7];
  swift_bridgeObjectRelease();

  swift_retain();
  uint64_t v8 = sub_1001F7514();
  uint64_t v10 = v9;
  swift_release();
  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  id v12 = sub_1001F602C();
  swift_bridgeObjectRetain();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 ulog:40 message:v13];
  swift_bridgeObjectRelease();

  sub_100117800();
  sub_100212048(a1);
  swift_release();
  uint64_t v14 = a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
  swift_beginAccess();
  sub_1001301E8(v14);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  sub_1001301D0(v14);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100008E78()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100008EC8(unsigned char *a1)
{
  if (*a1 == 5) {
    return 7104878;
  }
  else {
    return String.init<A>(describing:)();
  }
}

void *sub_100008F14@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  if (*result)
  {
    swift_retain();
    swift_retain();
    char v3 = static UUID.== infix(_:_:)();
    swift_release();
    uint64_t result = (void *)swift_release();
  }
  else
  {
    char v3 = 0;
  }
  *a2 = v3 & 1;
  return result;
}

unsigned char *sub_100008FA8@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = (*result | result[1]) & 1;
  return result;
}

uint64_t sub_100008FC0(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == 1)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    sub_100009168(a3);
  }
  else
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    swift_retain();
    uint64_t v5 = sub_1001F7514();
    NSString v7 = v6;
    swift_release();
    v8._countAndFlagsBits = v5;
    v8._object = v7;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    id v9 = sub_1001F602C();
    swift_bridgeObjectRetain();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 ulog:v10 message:0xD000000000000014, 0x80000001002B1B10];
    swift_bridgeObjectRelease();

    sub_100117800();
    sub_100212048(a3);
    swift_release();
    uint64_t v11 = a3 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
    swift_beginAccess();
    sub_1001301E8(v11);
    swift_endAccess();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_100009168(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_retain();
  uint64_t v4 = sub_1001F7514();
  id v6 = v5;
  swift_release();
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  id v8 = sub_1001F602C();
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 ulog:40 message:v9];
  swift_bridgeObjectRelease();

  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v10 = sub_10009AE24();
  char v12 = v11;
  swift_release();
  if (v12) {
    Swift::UInt v13 = 0;
  }
  else {
    Swift::UInt v13 = v10;
  }
  sub_100204A6C(v13);
  swift_release();
  sub_100117800();
  sub_100211B48(a1);
  swift_release();
  uint64_t v14 = a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *(void *)(v2 + 24);
  *(void *)(v2 + 24) = 0x8000000000000000;
  sub_10026496C(a1, v14, isUniquelyReferenced_nonNull_native);
  *(void *)(v2 + 24) = v17;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t variable initialization expression of ProximityHandoffService.client()
{
  return 0;
}

uint64_t variable initialization expression of StateMachine2.didChangeSubject()
{
  return sub_1000093D8();
}

uint64_t variable initialization expression of StateMachine2.outputContextSubject()
{
  return PassthroughSubject.__allocating_init()();
}

uint64_t variable initialization expression of StateMachine2.willChangeSubject()
{
  return sub_1000093D8();
}

uint64_t sub_1000093D8()
{
  return PassthroughSubject.__allocating_init()();
}

uint64_t variable initialization expression of ProximityHandoffService.delegate()
{
  return 0;
}

uint64_t variable initialization expression of PCUserAlertDefinition.timeout()
{
  return 0;
}

uint64_t static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t variable initialization expression of ProximityHandoffService.queue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  char v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  sub_10000A34C();
  static DispatchQoS.default.getter();
  v5[1] = &_swiftEmptyArrayStorage;
  sub_10000A6E4(&qword_10035A688, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000A38C(&qword_10035A690);
  sub_10000B010((unint64_t *)&qword_10035A698, &qword_10035A690);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t variable initialization expression of ProximityHandoffService._proximityHandoffInteraction@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SFProximityHandoff.Interaction();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t variable initialization expression of ProximityHandoffService.active()
{
  return 0;
}

void *variable initialization expression of ProximityHandoffService.tasks()
{
  return &_swiftEmptySetSingleton;
}

uint64_t variable initialization expression of End.actions()
{
  swift_getFunctionTypeMetadata1();

  return static Array._allocateUninitialized(_:)();
}

uint64_t variable initialization expression of End.filters()
{
  swift_getFunctionTypeMetadata1();

  return static Array._allocateUninitialized(_:)();
}

uint64_t _s17proximitycontrold9MultiEdgeV7outputsSaySayq0_Gq_cGvpfi_0()
{
  type metadata accessor for Array();
  swift_getFunctionTypeMetadata1();

  return static Array._allocateUninitialized(_:)();
}

uint64_t sub_1000097F8(uint64_t a1, uint64_t a2)
{
  return sub_10000A1B4(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

void sub_10000981C(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100009824(uint64_t a1, uint64_t a2)
{
  return sub_10000A1B4(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

void *sub_100009844@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL sub_100009854(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100009868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_DWORD *sub_100009880@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL sub_10000988C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000098A0(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100009918(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100009998@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_1000099DC(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1000099E4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1000099F8@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100009A0C(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_100009A3C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_100009A68@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_100009A8C(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_100009AA0(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_100009AB4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100009AC8(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100009ADC()
{
  return *v0 == 0;
}

_DWORD *sub_100009AEC(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

_DWORD *sub_100009B00@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_100009B10(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

Swift::Int sub_100009B1C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100009B64()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100009B90()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *sub_100009BD8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100009BE8(void *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_100009BF4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_100009C08@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_100009C1C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100009C30(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_100009C60@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100009C8C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_100009CB0(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100009CC4(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_100009CD8(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_100009CEC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100009D00(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_100009D14(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100009D28(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_100009D3C()
{
  return *v0 == 0;
}

void *sub_100009D4C(void *result)
{
  *v1 &= ~*result;
  return result;
}

_DWORD *sub_100009D60@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_100009D74(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

BOOL sub_100009D88(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_100009D9C(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

void sub_100009DB0(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100009DBC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_10000AB58(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_100009DFC(uint64_t a1)
{
  uint64_t v2 = sub_10000A6E4(&qword_10035AB98, type metadata accessor for BNBannerRevocationReason);
  uint64_t v3 = sub_10000A6E4(&qword_10035ABA0, type metadata accessor for BNBannerRevocationReason);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100009EB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100009EE4(uint64_t a1)
{
  uint64_t v2 = sub_10000A6E4((unint64_t *)&qword_10035ADE0, type metadata accessor for NSKeyValueChangeKey);
  uint64_t v3 = sub_10000A6E4(&qword_10035ADE8, type metadata accessor for NSKeyValueChangeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

BOOL sub_100009FA0(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100009FB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10000AB20(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_100009FF4(uint64_t a1)
{
  uint64_t v2 = sub_10000A6E4(&qword_10035ABA8, type metadata accessor for CAMediaTimingFunctionName);
  uint64_t v3 = sub_10000A6E4(&qword_10035ABB0, type metadata accessor for CAMediaTimingFunctionName);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A0B0@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10000A0F8(uint64_t a1)
{
  uint64_t v2 = sub_10000A6E4(&qword_10035ADD0, type metadata accessor for OpenExternalURLOptionsKey);
  uint64_t v3 = sub_10000A6E4(&qword_10035ADD8, type metadata accessor for OpenExternalURLOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A1B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10000A1F8()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000A24C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000A2C0()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

unint64_t sub_10000A34C()
{
  unint64_t result = qword_10035A680;
  if (!qword_10035A680)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10035A680);
  }
  return result;
}

uint64_t sub_10000A38C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000A3D0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for Handoff3DevicePrewarmer()
{
  return self;
}

void type metadata accessor for NIMotionActivityState(uint64_t a1)
{
}

__n128 initializeWithTake for MediaTransferStatus(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SpringState(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SpringState(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
}

void type metadata accessor for NIDistanceMeasurementQuality(uint64_t a1)
{
}

void type metadata accessor for BLSBacklightState(uint64_t a1)
{
}

void type metadata accessor for BYSetupState(uint64_t a1)
{
}

void type metadata accessor for TUCallStatus(uint64_t a1)
{
}

void type metadata accessor for CUUserAlertAction(uint64_t a1)
{
}

void type metadata accessor for RPIdentityType(uint64_t a1)
{
}

void type metadata accessor for RPStatusFlags(uint64_t a1)
{
}

void type metadata accessor for RPCompanionLinkFlags(uint64_t a1)
{
}

void type metadata accessor for NINearbyObjectUpdateRate(uint64_t a1)
{
}

void type metadata accessor for RemovalReason(uint64_t a1)
{
}

void type metadata accessor for BSInterfaceOrientation(uint64_t a1)
{
}

void type metadata accessor for PCActivityAssetType(uint64_t a1)
{
}

void type metadata accessor for MRPlaybackState(uint64_t a1)
{
}

void type metadata accessor for BNBannerRevocationReason(uint64_t a1)
{
}

void type metadata accessor for PCActivityType(uint64_t a1)
{
}

void type metadata accessor for CUSystemLockState(uint64_t a1)
{
}

void type metadata accessor for SFNotificationDismissReason(uint64_t a1)
{
}

void type metadata accessor for Style(uint64_t a1)
{
}

void type metadata accessor for PCProximityEventType(uint64_t a1)
{
}

void type metadata accessor for SBUISystemApertureLayoutMode(uint64_t a1)
{
}

void type metadata accessor for RPMediaAccessControlSetting(uint64_t a1)
{
}

void type metadata accessor for PCInteractionDirection(uint64_t a1)
{
}

void type metadata accessor for CULogLevel(uint64_t a1)
{
}

void type metadata accessor for CAMediaTimingFunctionName(uint64_t a1)
{
}

uint64_t sub_10000A69C()
{
  return sub_10000A6E4((unint64_t *)&qword_10035AB20, type metadata accessor for CAMediaTimingFunctionName);
}

uint64_t sub_10000A6E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A72C()
{
  return sub_10000A6E4(&qword_10035AB28, type metadata accessor for CAMediaTimingFunctionName);
}

uint64_t sub_10000A774()
{
  return sub_10000A6E4(&qword_10035AB30, type metadata accessor for CAMediaTimingFunctionName);
}

uint64_t sub_10000A7BC()
{
  return sub_10000A6E4(&qword_10035AB38, type metadata accessor for BNBannerRevocationReason);
}

uint64_t sub_10000A804()
{
  return sub_10000A6E4(&qword_10035AB40, type metadata accessor for BNBannerRevocationReason);
}

uint64_t sub_10000A84C()
{
  return sub_10000A6E4(&qword_10035AB48, type metadata accessor for BNBannerRevocationReason);
}

uint64_t sub_10000A894()
{
  return sub_10000A6E4(&qword_10035AB50, type metadata accessor for PCActivityAssetType);
}

uint64_t sub_10000A8DC()
{
  return sub_10000A6E4(&qword_10035AB58, type metadata accessor for RPCompanionLinkFlags);
}

uint64_t sub_10000A924()
{
  return sub_10000A6E4(&qword_10035AB60, type metadata accessor for RPCompanionLinkFlags);
}

uint64_t sub_10000A96C()
{
  return sub_10000A6E4(&qword_10035AB68, type metadata accessor for RPCompanionLinkFlags);
}

uint64_t sub_10000A9B4()
{
  return sub_10000A6E4(&qword_10035AB70, type metadata accessor for RPCompanionLinkFlags);
}

uint64_t sub_10000A9FC()
{
  return sub_10000A6E4(&qword_10035AB78, type metadata accessor for RPStatusFlags);
}

uint64_t sub_10000AA44()
{
  return sub_10000A6E4(&qword_10035AB80, type metadata accessor for RPStatusFlags);
}

uint64_t sub_10000AA8C()
{
  return sub_10000A6E4(&qword_10035AB88, type metadata accessor for RPStatusFlags);
}

uint64_t sub_10000AAD4()
{
  return sub_10000A6E4(&qword_10035AB90, type metadata accessor for RPStatusFlags);
}

uint64_t sub_10000AB20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_10000AB58(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  char v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_10000AB90()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000ABC8(uint64_t *a1)
{
  return sub_100008BE8(a1, v1, (void (*)(uint64_t))sub_1000075D0);
}

uint64_t sub_10000ABF8(uint64_t *a1)
{
  return sub_100008BE8(a1, v1, (void (*)(uint64_t))sub_100008C5C);
}

uint64_t sub_10000AC28(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10035AC20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000AC88()
{
  return sub_10000ADE8(&qword_10035AC30);
}

uint64_t sub_10000AC94@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_10000A38C(&qword_10035AC30) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t result = sub_10002F24C(*a1, *(uint64_t (**)(char *))(v2 + 16), *(void *)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void *)(v2 + v8), *(void **)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));
  *a2 = result;
  return result;
}

uint64_t sub_10000AD78()
{
  return _swift_deallocObject(v0, 17, 7);
}

unsigned __int8 *sub_10000AD88@<X0>(unsigned __int8 *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  if (v3 == 5) {
    unsigned int v3 = 0;
  }
  *a2 = v3 >= *(unsigned __int8 *)(v2 + 16);
  return result;
}

void *sub_10000ADA8@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  return sub_100008F14(result, a2);
}

uint64_t sub_10000ADB0()
{
  return sub_10000ADE8(&qword_10035AC10);
}

uint64_t sub_10000ADBC@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_10000AF24(a1, &qword_10035AC10, (uint64_t (*)(void, void, void, unint64_t, void, void, void, void, void, _DWORD))sub_10002FA14, a2);
}

uint64_t sub_10000ADDC()
{
  return sub_10000ADE8(&qword_10035AC00);
}

uint64_t sub_10000ADE8(uint64_t *a1)
{
  uint64_t v2 = sub_10000A38C(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  if (*(void *)(v1 + 16)) {
    swift_release();
  }
  uint64_t v6 = (v4 + 32) & ~v4;
  unint64_t v7 = (((((v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v6, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, (v7 + 11) & 0xFFFFFFFFFFFFFFF8 | 4, v4 | 7);
}

uint64_t sub_10000AF04@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_10000AF24(a1, &qword_10035AC00, (uint64_t (*)(void, void, void, unint64_t, void, void, void, void, void, _DWORD))sub_10002FA14, a2);
}

uint64_t sub_10000AF24@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void, void, void, unint64_t, void, void, void, void, void, _DWORD)@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v8 = *(void *)(sub_10000A38C(a2) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t result = a3(*a1, *(void *)(v4 + 16), *(void *)(v4 + 24), v4 + v9, *(void *)(v4 + v10), *(void *)(v4 + v10 + 8), *(void *)(v4 + v11), *(void *)(v4 + v11 + 8), *(void *)(v4 + ((v11 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v4 + ((((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));
  *a4 = result & 1;
  return result;
}

uint64_t sub_10000B010(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000A3D0(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000B054()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000B094(unsigned char *a1)
{
  return sub_100008FC0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void type metadata accessor for PCProgressEventType(uint64_t a1)
{
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
}

void type metadata accessor for RPControlFlags(uint64_t a1)
{
}

void type metadata accessor for NISessionSuspensionReason(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
}

void type metadata accessor for TUCallService(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for SharingProxy.Event(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_10000B150(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t sub_10000B174(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000B194(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 128) = v3;
  return result;
}

void type metadata accessor for CATransform3D(uint64_t a1)
{
}

uint64_t sub_10000B1F4()
{
  return sub_10000A6E4(&qword_10035AD80, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_10000B23C()
{
  return sub_10000A6E4(&qword_10035AD88, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_10000B284()
{
  return sub_10000A6E4(&qword_10035AD90, type metadata accessor for RPControlFlags);
}

uint64_t sub_10000B2CC()
{
  return sub_10000A6E4(&qword_10035AD98, type metadata accessor for RPControlFlags);
}

uint64_t sub_10000B314()
{
  return sub_10000A6E4(&qword_10035ADA0, type metadata accessor for RPControlFlags);
}

uint64_t sub_10000B35C()
{
  return sub_10000A6E4(&qword_10035ADA8, type metadata accessor for RPControlFlags);
}

uint64_t sub_10000B3A4()
{
  return sub_10000A6E4(&qword_10035ADB0, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_10000B3EC()
{
  return sub_10000A6E4(&qword_10035ADB8, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_10000B434()
{
  return sub_10000A6E4(&qword_10035ADC0, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_10000B47C()
{
  return sub_10000A6E4(&qword_10035ADC8, type metadata accessor for NSKeyValueChangeKey);
}

void type metadata accessor for NIDevicePresencePreset(uint64_t a1)
{
}

void type metadata accessor for TURouteDeviceType(uint64_t a1)
{
}

void sub_10000B4EC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

unint64_t sub_10000B5B4(char a1)
{
  unint64_t result = 0x632E636974706168;
  switch(a1)
  {
    case 1:
    case 3:
    case 4:
    case 19:
    case 21:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0xD000000000000018;
      break;
    case 7:
      unint64_t result = 0xD000000000000017;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    case 9:
      unint64_t result = 0xD000000000000016;
      break;
    case 10:
      unint64_t result = 0xD000000000000022;
      break;
    case 11:
      unint64_t result = 0xD000000000000015;
      break;
    case 12:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 13:
      unint64_t result = 0xD000000000000020;
      break;
    case 14:
      unint64_t result = 0x682E6E6F69676572;
      break;
    case 15:
      unint64_t result = 0xD000000000000010;
      break;
    case 16:
      unint64_t result = 0x652E6E6F69676572;
      break;
    case 17:
      unint64_t result = 0x616F6C2E64726163;
      break;
    case 18:
      unint64_t result = 0x6572702E64726163;
      break;
    case 20:
      unint64_t result = 0x726566736E617274;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffQEAutomationLogger()
{
  return &type metadata for HandoffQEAutomationLogger;
}

uint64_t sub_10000B870()
{
  type metadata accessor for UserAccountPrefs();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_10000B910();
  qword_1003AC500 = v0;
  return result;
}

uint64_t sub_10000B8AC()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UserAccountPrefs()
{
  return self;
}

uint64_t sub_10000B910()
{
  type metadata accessor for UserAccountPrefBool();
  uint64_t v1 = (void *)swift_allocObject();
  long long v2 = self;
  id v3 = [v2 defaultStore];
  v1[2] = 0xD00000000000001FLL;
  v1[3] = 0x80000001002B1E10;
  v1[4] = v3;
  *(void *)(v0 + 16) = v1;
  uint64_t v4 = (void *)swift_allocObject();
  id v5 = [v2 defaultStore];
  v4[2] = 0xD000000000000020;
  v4[3] = 0x80000001002B1E40;
  v4[4] = v5;
  *(void *)(v0 + 24) = v4;
  return v0;
}

uint64_t sub_10000B9E8()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UserAccountPrefBool()
{
  return self;
}

unint64_t destroy for ViewServiceHandleEvent(unint64_t *a1)
{
  unint64_t result = *a1;
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if ((v2 + 1) <= 1) {
    return swift_errorRelease();
  }
  return result;
}

void *_s17proximitycontrold22ViewServiceHandleEventOwCP_0(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v4 = *a2;
  }
  if ((v4 + 1) <= 1) {
    swift_errorRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t *assignWithCopy for ViewServiceHandleEvent(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  LODWORD(v4) = -1;
  if (v3 >= 0xFFFFFFFF) {
    int v5 = -1;
  }
  else {
    int v5 = v3;
  }
  unsigned int v6 = v5 + 1;
  unint64_t v7 = *a2;
  if (*a2 < 0xFFFFFFFF) {
    unint64_t v4 = *a2;
  }
  unsigned int v8 = v4 + 1;
  if (v6 > 1)
  {
    if (v8 <= 1) {
      swift_errorRetain();
    }
    *a1 = v7;
  }
  else if (v8 > 1)
  {
    swift_errorRelease();
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain();
    *a1 = v7;
    swift_errorRelease();
  }
  return a1;
}

void *initializeWithTake for XPCLinkRole(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for ViewServiceHandleEvent(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  LODWORD(v4) = -1;
  if (v3 >= 0xFFFFFFFF) {
    int v5 = -1;
  }
  else {
    int v5 = v3;
  }
  unsigned int v6 = v5 + 1;
  unint64_t v7 = *a2;
  if (*a2 < 0xFFFFFFFF) {
    unint64_t v4 = *a2;
  }
  unsigned int v8 = v4 + 1;
  if (v6 > 1) {
    goto LABEL_11;
  }
  if (v8 > 1)
  {
    swift_errorRelease();
LABEL_11:
    *a1 = v7;
    return a1;
  }
  *a1 = v7;
  swift_errorRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewServiceHandleEvent(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) < 2) {
    LODWORD(v3) = 0;
  }
  if (v3 >= 4) {
    return (v3 - 3);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ViewServiceHandleEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 3;
    }
  }
  return result;
}

uint64_t sub_10000BC98(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  if ((v1 + 1) >= 2) {
    return v1;
  }
  else {
    return 0;
  }
}

void *sub_10000BCB8(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    *unint64_t result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewServiceHandleEvent()
{
  return &type metadata for ViewServiceHandleEvent;
}

uint64_t sub_10000BCF8(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      return 0x6574736575716572;
    case 3:
      return 0x7463616544646964;
    case 2:
      return 0x7669746341646964;
  }
  swift_errorRetain();
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  if (a1)
  {
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v3 = Error.localizedDescription.getter();
    int v5 = v4;
    sub_10000BECC(a1);
  }
  else
  {
    int v5 = (void *)0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 10528;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  sub_10000BECC(a1);
  return 0xD000000000000015;
}

uint64_t sub_10000BE68()
{
  return sub_10000BCF8(*v0);
}

uint64_t sub_10000BE70(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1 == 3)
  {
    if (v3 != 3) {
      return 0;
    }
  }
  else
  {
    if (v2 == 2) {
      return v3 == 2;
    }
    if (v2 == 1) {
      return v3 == 1;
    }
    if ((unint64_t)(v3 - 1) < 3) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_10000BECC(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 3) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10000BEE0()
{
  type metadata accessor for HandoffDevice();
  sub_10000A38C(&qword_10035B4B0);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  v3._countAndFlagsBits = sub_1001F7514();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 45;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000C00C()
{
  return sub_10000C4C0(&qword_10035B518, &qword_10035B520);
}

uint64_t sub_10000C020()
{
  return sub_10000C4C0(&qword_10035B538, &qword_10035B540);
}

uint64_t sub_10000C034()
{
  return sub_10000C4C0(&qword_10035B4C8, &qword_10035B4D0);
}

uint64_t sub_10000C048()
{
  return sub_10000C2C4(&qword_10035B508);
}

uint64_t sub_10000C054()
{
  return sub_10000C4C0(&qword_10035B558, &qword_10035B560);
}

uint64_t sub_10000C068()
{
  return sub_10000C4C0(&qword_10035B548, &qword_10035B550);
}

uint64_t sub_10000C07C()
{
  return sub_10000C4C0(&qword_10035B568, &qword_10035B570);
}

uint64_t sub_10000C090()
{
  return sub_10000C4C0(&qword_10035B4F8, &qword_10035B500);
}

uint64_t sub_10000C0A4()
{
  return sub_10000C4C0(&qword_10035B4D8, &qword_10035B4E0);
}

uint64_t sub_10000C0B8()
{
  return sub_10000C4C0(&qword_10035B4E8, &qword_10035B4F0);
}

uint64_t sub_10000C0CC()
{
  return sub_10000C4C0(&qword_10035B528, &qword_10035B530);
}

uint64_t sub_10000C0E0()
{
  return sub_10000C4C0(&qword_10035B4B8, &qword_10035B4C0);
}

uint64_t sub_10000C0F4()
{
  return sub_10000C4C0(&qword_10035B598, &qword_10035B5A0);
}

uint64_t sub_10000C108()
{
  return sub_10000C4C0(&qword_10035B5A8, &qword_10035B5B0);
}

uint64_t sub_10000C11C()
{
  type metadata accessor for Handoff3StateMachine3();
  sub_10000A38C(&qword_10035B5B8);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  sub_10000CCAC();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 45;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000C2A4()
{
  return sub_10000C4C0(&qword_10035B5C0, &qword_10035B5C8);
}

uint64_t sub_10000C2B8()
{
  return sub_10000C2C4(&qword_10035B610);
}

uint64_t sub_10000C2C4(uint64_t *a1)
{
  sub_10000A38C(a1);
  uint64_t v1 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v1, v2);
  if ((v3 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v1 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  sub_10000CCAC();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 45;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10000C45C()
{
  return sub_10000C4C0(&qword_10035B5D0, &qword_10035B5D8);
}

uint64_t sub_10000C470()
{
  return sub_10000C4C0(&qword_10035B5E0, &qword_10035B5E8);
}

uint64_t sub_10000C484()
{
  return sub_10000C4C0(&qword_10035B588, &qword_10035B590);
}

uint64_t sub_10000C498()
{
  return sub_10000C4C0(&qword_10035B5F0, &qword_10035B5F8);
}

uint64_t sub_10000C4AC()
{
  return sub_10000C4C0(&qword_10035B600, &qword_10035B608);
}

uint64_t sub_10000C4C0(uint64_t *a1, uint64_t *a2)
{
  sub_10000A38C(a1);
  sub_10000A38C(a2);
  uint64_t v4 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v4, v5);
  if ((v6 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v4 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  String.append(_:)(*(Swift::String *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x68)));
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = 45;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10000C604()
{
  sub_10000A38C(&qword_10035B578);
  sub_10000A38C(&qword_10035B580);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  sub_10000CCAC();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 45;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000C78C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  int v0 = *((unsigned __int8 *)v14[0] + OBJC_IVAR____TtC17proximitycontrold8Identity_enableModelBasedRangingCapabilities);
  swift_release();
  if (v0 == 1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v1 = sub_1000983CC();
    uint64_t v3 = v2;
    swift_release();
    if (v3)
    {
      unsigned __int8 v4 = sub_1001AC344(v1, v3);
      swift_bridgeObjectRelease();
      if (v4 - 1 < 2) {
        return 3;
      }
      if (!v4) {
        return 1;
      }
      if (v4 != 7) {
        return 0;
      }
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (v14[0])
  {
    unsigned int v5 = [v14[0] supportsR1];

    if (v5) {
      unint64_t v6 = 3;
    }
    else {
      unint64_t v6 = 1;
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v7 = *(void *)((char *)v14[0] + OBJC_IVAR____TtC17proximitycontrold8Identity_nearbyID);
  swift_release();
  if (v7)
  {
    sub_10000BEE0();
    id v8 = objc_allocWithZone((Class)CULogHandle);
    NSString v9 = String._bridgeToObjectiveC()();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v11 = [v8 initWithSubsystem:v9 category:v10];

    NSString v12 = String._bridgeToObjectiveC()();
    [v11 ulog:40 message:v12];

    if (v6 >= 2) {
      v6 |= 1uLL;
    }
    else {
      unint64_t v6 = 3;
    }
  }
  v14[3] = &type metadata for Feature;
  v14[4] = (id)sub_10000CC08();
  LOBYTE(v14[0]) = 9;
  isFeatureEnabled(_:)();
  sub_10000CC5C((uint64_t)v14);
  return v6;
}

uint64_t sub_10000CB08@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10000CB8C(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v1;
  swift_retain();
  return static Published.subscript.setter();
}

unint64_t sub_10000CC08()
{
  unint64_t result = qword_100367A10;
  if (!qword_100367A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100367A10);
  }
  return result;
}

uint64_t sub_10000CC5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_10000CCAC()
{
  unint64_t result = qword_10035B510;
  if (!qword_10035B510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035B510);
  }
  return result;
}

uint64_t sub_10000CD00()
{
  id v1 = [*v0 deviceIdentifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void sub_10000CD58()
{
  id v1 = [*v0 uniqueIdentifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10000CDB8(uint64_t a1)
{
  return sub_10000CDC4(a1, (uint64_t)&off_10031F600);
}

uint64_t sub_10000CDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v13 = v12;
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_10008892C(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  unint64_t v16 = *((void *)v14 + 2);
  unint64_t v15 = *((void *)v14 + 3);
  unint64_t v17 = v16 + 1;
  if (v16 >= v15 >> 1) {
    uint64_t v14 = sub_10008892C((char *)(v15 > 1), v16 + 1, 1, v14);
  }
  *((void *)v14 + 2) = v17;
  uint64_t v18 = &v14[16 * v16];
  *((void *)v18 + 4) = v8;
  *((void *)v18 + 5) = v10;
  unint64_t v19 = *((void *)v14 + 3);
  swift_bridgeObjectRetain();
  if (v17 >= v19 >> 1) {
    uint64_t v14 = sub_10008892C((char *)(v19 > 1), v16 + 2, 1, v14);
  }
  *((void *)v14 + 2) = v16 + 2;
  uint64_t v20 = &v14[16 * v17];
  *((void *)v20 + 4) = v11;
  *((void *)v20 + 5) = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = sub_100038508((uint64_t)v14);
  swift_bridgeObjectRelease();
  return v21;
}

BOOL sub_10000CFC4(BOOL a1, uint64_t a2)
{
  return sub_10000CFD0(a1, a2, (uint64_t)&off_10031F600);
}

BOOL sub_10000CFD0(BOOL a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = a1;
  if (a1)
  {
    v22[3] = a2;
    v22[4] = a3;
    uint64_t v6 = sub_10000D680(v22);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v6, v3, a2);
    sub_10000D728((uint64_t)v22, (uint64_t)&v17, (uint64_t *)&unk_10036C0A0);
    if (v18)
    {
      sub_10000D7E8(&v17, (uint64_t)v19);
      uint64_t v7 = v20;
      uint64_t v8 = v21;
      sub_10000D6E4(v19, v20);
      uint64_t v9 = *(void *)(v8 + 8);
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
      id v11 = (id)v4;
      uint64_t v12 = v10(v7, v9);
      uint64_t v13 = sub_1001A7C6C();
      uint64_t v14 = sub_1001C8154(v13, v12);
      swift_bridgeObjectRelease();
      uint64_t v15 = *(void *)(v14 + 16);
      swift_release();
      BOOL v4 = v15 != 0;
      sub_10000CC5C((uint64_t)v19);
    }
    else
    {
      sub_10000D78C((uint64_t)&v17, (uint64_t *)&unk_10036C0A0);
      BOOL v4 = 0;
    }
    sub_10000D78C((uint64_t)v22, (uint64_t *)&unk_10036C0A0);
  }
  return v4;
}

uint64_t sub_10000D128(uint64_t a1, uint64_t a2)
{
  return sub_10000D134(a1, a2, (uint64_t)&off_10031F600);
}

uint64_t sub_10000D134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v18 - v11;
  sub_10000D728(a1, (uint64_t)&v18, (uint64_t *)&unk_10036C0A0);
  if (v19)
  {
    sub_10000D7E8(&v18, (uint64_t)v20);
    uint64_t v13 = v21;
    uint64_t v14 = v22;
    sub_10000D6E4(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    char v15 = static UUID.== infix(_:_:)();
    unint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v10, v6);
    v16(v12, v6);
    sub_10000CC5C((uint64_t)v20);
  }
  else
  {
    sub_10000D78C((uint64_t)&v18, (uint64_t *)&unk_10036C0A0);
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_10000D300(uint64_t a1, uint64_t a2)
{
  return sub_10000D30C(a1, a2, (uint64_t)&off_10031F600);
}

uint64_t sub_10000D30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000D728(a1, (uint64_t)&v11, &qword_10035B618);
  if (v12)
  {
    sub_10000D7E8(&v11, (uint64_t)v14);
    uint64_t v6 = v15;
    uint64_t v7 = v16;
    sub_10000D6E4(v14, v15);
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    uint64_t v8 = sub_10000D680((uint64_t *)&v11);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v8, v3, a2);
    char v9 = (*(uint64_t (**)(long long *, uint64_t))(*(void *)(v7 + 8) + 24))(&v11, v6);
    sub_10000D78C((uint64_t)&v11, (uint64_t *)&unk_10036C0A0);
    sub_10000CC5C((uint64_t)v14);
  }
  else
  {
    sub_10000D78C((uint64_t)&v11, &qword_10035B618);
    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_10000D418(void *a1, uint64_t a2)
{
  return sub_10000D424(a1, a2, (uint64_t)&off_10031F600);
}

uint64_t sub_10000D424(void *a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = a1;
  if (a1)
  {
    v15[3] = a2;
    v15[4] = a3;
    uint64_t v6 = sub_10000D680(v15);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v6, v3, a2);
    sub_10000D728((uint64_t)v15, (uint64_t)v12, (uint64_t *)&unk_10036C0A0);
    uint64_t v7 = v13;
    if (v13)
    {
      uint64_t v8 = v14;
      sub_10000D6E4(v12, v13);
      id v9 = v4;
      uint64_t v10 = sub_10024DF10();
      LOBYTE(v4) = sub_100148A48(v10, v7, *(void *)(v8 + 8));
      swift_bridgeObjectRelease();
      sub_10000CC5C((uint64_t)v12);
    }
    else
    {
      sub_10000D78C((uint64_t)v12, (uint64_t *)&unk_10036C0A0);
      LOBYTE(v4) = 0;
    }
    sub_10000D78C((uint64_t)v15, (uint64_t *)&unk_10036C0A0);
  }
  return v4 & 1;
}

BOOL sub_10000D540(uint64_t a1, uint64_t a2)
{
  return sub_10000D54C(a1, a2, (uint64_t)&off_10031F600);
}

BOOL sub_10000D54C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v19[3] = a2;
  v19[4] = a3;
  uint64_t v5 = sub_10000D680(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v5, v3, a2);
  sub_10000D728((uint64_t)v19, (uint64_t)&v14, (uint64_t *)&unk_10036C0A0);
  if (v15)
  {
    sub_10000D7E8(&v14, (uint64_t)v16);
    uint64_t v7 = v17;
    uint64_t v6 = v18;
    sub_10000D6E4(v16, v17);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 8))(v7);
    uint64_t v9 = sub_1000D215C();
    uint64_t v10 = sub_1001C8154(v9, v8);
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void *)(v10 + 16);
    swift_release();
    BOOL v12 = v11 != 0;
    sub_10000CC5C((uint64_t)v16);
  }
  else
  {
    sub_10000D78C((uint64_t)&v14, (uint64_t *)&unk_10036C0A0);
    BOOL v12 = 0;
  }
  sub_10000D78C((uint64_t)v19, (uint64_t *)&unk_10036C0A0);
  return v12;
}

uint64_t *sub_10000D680(uint64_t *a1)
{
  id v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void *sub_10000D6E4(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10000D728(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000A38C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000D78C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000A38C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000D7E8(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10000D800()
{
  sub_10000DB78(v0 + OBJC_IVAR____TtC17proximitycontrold14DeviceIdentity_bluetoothUUID);
  sub_10000DBD8(*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14DeviceIdentity_cbAddressData), *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14DeviceIdentity_cbAddressData + 8));
  swift_bridgeObjectRelease();
  sub_10000DBD8(*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14DeviceIdentity_cbNearbyAuthTag), *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14DeviceIdentity_cbNearbyAuthTag + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000D94C()
{
  sub_10000D800();

  return swift_deallocClassInstance();
}

uint64_t sub_10000D9A4()
{
  return type metadata accessor for DeviceIdentity();
}

uint64_t type metadata accessor for DeviceIdentity()
{
  uint64_t result = qword_10035B648;
  if (!qword_10035B648) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10000D9F8()
{
  sub_10000DAC4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10000DAC4()
{
  if (!qword_10035B658)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10035B658);
    }
  }
}

uint64_t sub_10000DB1C()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ManagedIdentity()
{
  return self;
}

uint64_t sub_10000DB78(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036C090);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000DBD8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000DBEC(a1, a2);
  }
  return a1;
}

uint64_t sub_10000DBEC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

Swift::Int sub_10000DC44(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  if (a2 == 2)
  {
    Swift::UInt v4 = 2;
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    Swift::UInt v4 = 0;
LABEL_5:
    Hasher._combine(_:)(v4);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1uLL);
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    sub_10000EE74(a1, a2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int sub_10000DCFC()
{
  return sub_10000DC44(*v0, v0[1]);
}

void sub_10000DD04()
{
  uint64_t v1 = v0[1];
  if (v1 == 2)
  {
    Swift::UInt v2 = 2;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    Swift::UInt v2 = 0;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  uint64_t v3 = *v0;
  Hasher._combine(_:)(1uLL);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    sub_10000EE74(v3, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_10000DDB8()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Swift::UInt v3 = 2;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    Swift::UInt v3 = 0;
LABEL_5:
    Hasher._combine(_:)(v3);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1uLL);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    sub_10000EE74(v2, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

BOOL sub_10000DE68(uint64_t *a1, uint64_t *a2)
{
  return sub_10000EE8C(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_10000DE7C()
{
  swift_getKeyPath();
  sub_10000EF30();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10000DEFC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10000EF30();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 24);
  *a2 = *(void *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10000DF78()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000E02C()
{
  swift_getKeyPath();
  sub_10000EF30();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + 32);
}

uint64_t sub_10000E09C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10000EF30();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(void *)(v3 + 32);
  return result;
}

uint64_t sub_10000E114()
{
  return swift_release();
}

uint64_t sub_10000E1B0()
{
  swift_getKeyPath();
  uint64_t v3 = v0;
  sub_10000EF30();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 40);
  sub_10000EFC0(v1, *(void *)(v3 + 48));
  return v1;
}

uint64_t sub_10000E234@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10000EF30();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 40);
  uint64_t v5 = *(void *)(v3 + 48);
  *a2 = v4;
  a2[1] = v5;
  return sub_10000EFC0(v4, v5);
}

uint64_t sub_10000E2B0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_getKeyPath();
  sub_10000EFC0(v1, v2);
  sub_10000EF30();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  sub_10000EE74(v1, v2);
  return swift_release();
}

double sub_10000E370()
{
  swift_getKeyPath();
  sub_10000EF30();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(double *)(v0 + 56);
}

double sub_10000E3E0@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10000EF30();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double result = *(double *)(v3 + 56);
  *a2 = result;
  return result;
}

uint64_t sub_10000E458()
{
  return swift_release();
}

uint64_t sub_10000E500()
{
  swift_getKeyPath();
  sub_10000EF30();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t sub_10000E570@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10000EF30();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 64);
  return result;
}

uint64_t sub_10000E5E8()
{
  return swift_release();
}

double sub_10000E688()
{
  swift_getKeyPath();
  sub_10000EF30();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(double *)(v0 + 72);
}

uint64_t sub_10000E6F8(uint64_t result, double a2)
{
  *(double *)(result + 72) = a2;
  return result;
}

uint64_t sub_10000E700()
{
  return swift_release();
}

uint64_t sub_10000E86C()
{
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v0 = *(id *)(qword_1003AC750 + 136);
  sub_1000FEB94();

  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  sub_10000EF30();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t sub_10000E994()
{
  swift_bridgeObjectRelease();
  sub_10000EE74(v0[5], v0[6]);
  sub_10000F088(v0[11]);
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC17proximitycontrold20DwellBannerViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10000EA4C()
{
  return type metadata accessor for DwellBannerViewModel();
}

uint64_t type metadata accessor for DwellBannerViewModel()
{
  uint64_t result = qword_10035B9C0;
  if (!qword_10035B9C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10000EAA0()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t destroy for DwellBannerViewModel.ActivityState(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *_s17proximitycontrold20DwellBannerViewModelC13ActivityStateOwCP_0(void *a1, void *a2)
{
  unint64_t v3 = a2[1];
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = a2[1];
  }
  if ((int)v4 - 1 < 0)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

void *assignWithCopy for DwellBannerViewModel.ActivityState(void *a1, void *a2)
{
  LODWORD(v4) = -1;
  if (a1[1] >= 0xFFFFFFFFuLL) {
    LODWORD(v5) = -1;
  }
  else {
    uint64_t v5 = a1[1];
  }
  int v6 = v5 - 1;
  if (a2[1] < 0xFFFFFFFFuLL) {
    uint64_t v4 = a2[1];
  }
  int v7 = v4 - 1;
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if ((v7 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithTake for DwellBannerViewModel.ActivityState(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if (v5 - 1 < 0)
  {
    unint64_t v6 = a2[1];
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF) {
      uint64_t v7 = a2[1];
    }
    if ((int)v7 - 1 < 0)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for DwellBannerViewModel.ActivityState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  unsigned int v5 = v4 + 1;
  unsigned int v6 = v4 - 1;
  if (v5 >= 3) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DwellBannerViewModel.ActivityState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_10000EDBC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *sub_10000EDE0(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *unint64_t result = a2 - 0x7FFFFFFF;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DwellBannerViewModel.ActivityState()
{
  return &type metadata for DwellBannerViewModel.ActivityState;
}

unint64_t sub_10000EE20()
{
  unint64_t result = qword_10035BC70[0];
  if (!qword_10035BC70[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10035BC70);
  }
  return result;
}

uint64_t sub_10000EE74(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL sub_10000EE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 2)
  {
    if (a4 == 2) {
      return 1;
    }
  }
  else
  {
    if (a2 == 1) {
      return a4 == 1;
    }
    if ((unint64_t)(a4 - 1) >= 2)
    {
      if (a2) {
        return a4 && (a1 == a3 && a2 == a4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
      }
      if (!a4) {
        return 1;
      }
      sub_10000EE74(a1, 0);
    }
  }
  return 0;
}

double sub_10000EF20()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + 56) = result;
  return result;
}

unint64_t sub_10000EF30()
{
  unint64_t result = qword_10035C270;
  if (!qword_10035C270)
  {
    type metadata accessor for DwellBannerViewModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035C270);
  }
  return result;
}

uint64_t sub_10000EF90()
{
  return sub_10000EFD8();
}

void sub_10000EFB0()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 64) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10000EFC0(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10000EFD8()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = *(void *)(v2 + 48);
  *(void *)(v2 + 40) = v1;
  *(void *)(v2 + 48) = v3;
  sub_10000EFC0(v1, v3);
  return sub_10000EE74(v4, v5);
}

void sub_10000F034()
{
  *(void *)(*(void *)(v0 + 16) + 32) = *(void *)(v0 + 24);
}

uint64_t sub_10000F048()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[4];
  *(void *)(v1 + 16) = v0[3];
  *(void *)(v1 + 24) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000F088(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

void sub_10000F098()
{
}

double sub_10000F0B0()
{
  return sub_10000EF20();
}

uint64_t sub_10000F0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_10000F0D4()
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

void *sub_10000F118(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10000F168(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for TransferrableActivity(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_10000F1F4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10000F244(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10000F28C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for DiscoverySubject()
{
  return sub_10000F2E4();
}

uint64_t sub_10000F2E4()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10000F318(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
      uint64_t result = swift_errorRetain();
      break;
    case 1:
    case 2:
    case 3:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for GenericBannerEvent(uint64_t a1)
{
  return sub_10000F378(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_10000F378(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
      uint64_t result = swift_errorRelease();
      break;
    case 1:
    case 2:
    case 3:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t _s17proximitycontrold18GenericBannerEventOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10000F318(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for GenericBannerEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10000F318(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_10000F378(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for Handoff2UIEvent(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for GenericBannerEvent(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_10000F378(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericBannerEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericBannerEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10000F554(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_10000F56C(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)__n128 result = a2 - 4;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GenericBannerEvent()
{
  return &type metadata for GenericBannerEvent;
}

uint64_t sub_10000F594(uint64_t a1, void *a2, char a3)
{
  switch(a3)
  {
    case 1:
      v13[0] = 0;
      v13[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      unint64_t v8 = 0x20286465696E6564;
      unint64_t v9 = 0xEF3D6E6F73616572;
      goto LABEL_9;
    case 2:
      v13[0] = 0;
      v13[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      unint64_t v8 = 0xD000000000000013;
      uint64_t v10 = "dismissing( reason=";
      goto LABEL_8;
    case 3:
      v13[0] = 0;
      v13[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      unint64_t v8 = 0xD000000000000012;
      uint64_t v10 = "dismissed( reason=";
LABEL_8:
      unint64_t v9 = (unint64_t)(v10 - 32) | 0x8000000000000000;
LABEL_9:
      v13[0] = v8;
      v13[1] = v9;
      v11._countAndFlagsBits = a1;
      v11._object = a2;
      String.append(_:)(v11);
      v12._countAndFlagsBits = 10528;
      v12._object = (void *)0xE200000000000000;
      String.append(_:)(v12);
      return v13[0];
    case 4:
      uint64_t result = 0x6574736575716572;
      switch(a1)
      {
        case 1:
          uint64_t result = 0x69746E6573657270;
          break;
        case 2:
          uint64_t result = 0x65746E6573657270;
          break;
        case 3:
          uint64_t result = 0x646570706174;
          break;
        case 4:
          uint64_t result = 0x74756F656D6974;
          break;
        default:
          return result;
      }
      return result;
    default:
      swift_errorRetain();
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      strcpy((char *)v13, "failed( error=");
      HIBYTE(v13[1]) = -18;
      swift_getErrorValue();
      v5._countAndFlagsBits = Error.localizedDescription.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v6._countAndFlagsBits = 10528;
      v6._object = (void *)0xE200000000000000;
      String.append(_:)(v6);
      sub_10000F378(a1, (uint64_t)a2, 0);
      return v13[0];
  }
}

uint64_t sub_10000F818()
{
  return sub_10000F594(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

BOOL sub_10000F824(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  int v4 = *((unsigned __int8 *)a2 + 16);
  switch(*(unsigned char *)(a1 + 16))
  {
    case 1:
      return v4 == 1;
    case 2:
      return v4 == 2;
    case 3:
      return v4 == 3;
    case 4:
      switch(*(void *)a1)
      {
        case 1:
          BOOL v5 = v4 == 4 && v3 == 1;
          break;
        case 2:
          BOOL v5 = v4 == 4 && v3 == 2;
          break;
        case 3:
          BOOL v5 = v4 == 4 && v3 == 3;
          break;
        case 4:
          BOOL v5 = v4 == 4 && v3 == 4;
          break;
        default:
          v2 |= v3;
          BOOL v5 = v4 == 4;
          break;
      }
      return v5 && v2 == 0;
    default:
      return !*((unsigned char *)a2 + 16);
  }
}

uint64_t sub_10000F914()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void sub_10000F988()
{
  off_10035BCF8 = &off_10031D5F0;
}

uint64_t sub_10000F99C()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = sub_10000A38C(&qword_10035C0A0);
  __chkstk_darwin(v2 - 8);
  unint64_t v173 = &v171[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v4 = (int *)sub_10000A38C(&qword_10035C0A8);
  uint64_t v192 = *((void *)v4 - 1);
  uint64_t v5 = *(void *)(v192 + 64);
  uint64_t v6 = __chkstk_darwin(v4);
  v183 = &v171[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __chkstk_darwin(v6);
  v182 = &v171[-v8];
  uint64_t v9 = __chkstk_darwin(v7);
  v180 = &v171[-v10];
  uint64_t v11 = __chkstk_darwin(v9);
  v181 = &v171[-v12];
  uint64_t v13 = __chkstk_darwin(v11);
  v179 = &v171[-v14];
  uint64_t v15 = __chkstk_darwin(v13);
  v177 = &v171[-v16];
  uint64_t v17 = __chkstk_darwin(v15);
  v178 = &v171[-v18];
  uint64_t v19 = __chkstk_darwin(v17);
  v176 = &v171[-v20];
  uint64_t v21 = __chkstk_darwin(v19);
  v188 = &v171[-v22];
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = &v171[-v24];
  __chkstk_darwin(v23);
  uint64_t v27 = &v171[-v26];
  uint64_t v28 = sub_10000A38C(&qword_10035C0B0);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  double v31 = &v171[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v0[2] = 0;
  if (qword_10035A628 != -1) {
    swift_once();
  }
  double v32 = (void *)qword_1003ACB50;
  v0[3] = qword_1003ACB50;
  v0[4] = _swiftEmptyArrayStorage;
  sub_10000A38C(&qword_10035C0B8);
  swift_allocObject();
  id v33 = v32;
  v0[5] = PassthroughSubject.init()();
  id v34 = (char *)v0 + OBJC_IVAR____TtC17proximitycontrold26DiscoveryTokenStateMachine__state;
  char v194 = 1;
  Published.init(initialValue:)();
  (*(void (**)(char *, unsigned char *, uint64_t))(v29 + 32))(v34, v31, v28);
  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold26DiscoveryTokenStateMachine_deferralTask) = 0;
  uint64_t v184 = v1;
  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold26DiscoveryTokenStateMachine_tasks) = &_swiftEmptySetSingleton;
  sub_10000A38C(&qword_10035C0C0);
  uint64_t v35 = *(unsigned __int8 *)(v192 + 80);
  uint64_t v193 = *(void *)(v192 + 72);
  uint64_t v36 = v35 | 7;
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_10028EFE0;
  uint64_t v175 = v37;
  uint64_t v38 = v37 + ((v35 + 32) & ~v35);
  uint64_t v39 = v173;
  *unint64_t v173 = 1;
  uint64_t v40 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v41 = *(void *)(v40 - 8);
  v191 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
  uint64_t v192 = v40;
  uint64_t v190 = v41 + 56;
  v191(v39, 0, 1, v40);
  sub_10000D728((uint64_t)v39, (uint64_t)&v27[v4[18]], &qword_10035C0A0);
  v27[v4[20]] = 1;
  v27[8] = 0;
  *(void *)uint64_t v27 = _swiftEmptyArrayStorage;
  *(void *)&v27[v4[19]] = _swiftEmptyArrayStorage;
  id v42 = (uint64_t (**)())&v27[v4[21]];
  *id v42 = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  v42[1] = 0;
  sub_10000D78C((uint64_t)v39, &qword_10035C0A0);
  uint64_t v174 = (uint64_t)v27;
  sub_10000D728((uint64_t)v27, (uint64_t)v25, &qword_10035C0A8);
  int v172 = v25[v4[20]];
  char v43 = v25[8];
  sub_10000D728((uint64_t)&v25[v4[18]], (uint64_t)v39, &qword_10035C0A0);
  v44 = v188;
  sub_10000D728((uint64_t)v25, (uint64_t)v188, &qword_10035C0A8);
  uint64_t v45 = (v35 + 16) & ~v35;
  uint64_t v185 = v45 + v5;
  uint64_t v187 = v36;
  uint64_t v46 = swift_allocObject();
  uint64_t v186 = v45;
  sub_10001639C((uint64_t)v44, v46 + v45, &qword_10035C0A8);
  *(unsigned char *)(v38 + v4[20]) = v172;
  *(unsigned char *)(v38 + 8) = v43;
  uint64_t v47 = v4[19];
  *(void *)(v38 + v47) = _swiftEmptyArrayStorage;
  sub_10001639C((uint64_t)v39, v38 + v4[18], &qword_10035C0A0);
  Swift::String v48 = (uint64_t (**)(uint64_t))(v38 + v4[21]);
  *Swift::String v48 = sub_100016120;
  v48[1] = (uint64_t (*)(uint64_t))v46;
  *(void *)uint64_t v38 = *(void *)v25;
  id v49 = *(void **)&v25[v4[19]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000D78C((uint64_t)v25, &qword_10035C0A8);
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v189 = v38;
  *(void *)(v38 + v47) = v49;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v49 = sub_1000893A8(0, v49[2] + 1, 1, v49);
    *(void *)(v189 + v47) = v49;
  }
  unint64_t v52 = v49[2];
  unint64_t v51 = v49[3];
  unint64_t v53 = v52 + 1;
  uint64_t v54 = v174;
  if (v52 >= v51 >> 1) {
    id v49 = sub_1000893A8((void *)(v51 > 1), v52 + 1, 1, v49);
  }
  v49[2] = v53;
  uint64_t v55 = v189;
  *(void *)(v189 + v47) = v49;
  sub_10000D78C(v54, &qword_10035C0A8);
  uint64_t v56 = v55 + v193;
  uint64_t v57 = v55;
  uint64_t v58 = v193;
  uint64_t v59 = v192;
  v191(v39, 1, 1, v192);
  sub_10000D728((uint64_t)v39, (uint64_t)&v25[v4[18]], &qword_10035C0A0);
  v25[v4[20]] = 1;
  v25[8] = 5;
  *(void *)uint64_t v25 = _swiftEmptyArrayStorage;
  *(void *)&v25[v4[19]] = _swiftEmptyArrayStorage;
  v60 = (uint64_t (**)())&v25[v4[21]];
  void *v60 = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  v60[1] = 0;
  sub_10000D78C((uint64_t)v39, &qword_10035C0A0);
  sub_10001122C(v184, v56);
  sub_10000D78C((uint64_t)v25, &qword_10035C0A8);
  uint64_t v174 = 2 * v58;
  uint64_t v61 = v57;
  uint64_t v62 = v57 + 2 * v58;
  swift_storeEnumTagMultiPayload();
  v63 = v191;
  v191(v39, 0, 1, v59);
  sub_10000D728((uint64_t)v39, v62 + v4[18], &qword_10035C0A0);
  *(unsigned char *)(v62 + v4[20]) = 1;
  *(unsigned char *)(v62 + 8) = 5;
  *(void *)uint64_t v62 = _swiftEmptyArrayStorage;
  *(void *)(v62 + v4[19]) = _swiftEmptyArrayStorage;
  v64 = (uint64_t (**)())(v62 + v4[21]);
  void *v64 = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  v64[1] = 0;
  sub_10000D78C((uint64_t)v39, &qword_10035C0A0);
  uint64_t v65 = v61 + v174 + v193;
  swift_storeEnumTagMultiPayload();
  v63(v39, 0, 1, v59);
  sub_10000D728((uint64_t)v39, v65 + v4[18], &qword_10035C0A0);
  *(unsigned char *)(v65 + v4[20]) = 0;
  *(unsigned char *)(v65 + 8) = 4;
  *(void *)uint64_t v65 = _swiftEmptyArrayStorage;
  *(void *)(v65 + v4[19]) = _swiftEmptyArrayStorage;
  uint64_t v66 = (uint64_t (**)())(v65 + v4[21]);
  *uint64_t v66 = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  v66[1] = 0;
  sub_10000D78C((uint64_t)v39, &qword_10035C0A0);
  uint64_t v67 = v189 + 4 * v193;
  swift_storeEnumTagMultiPayload();
  v63(v39, 0, 1, v59);
  unint64_t v68 = v176;
  sub_10000D728((uint64_t)v39, (uint64_t)&v176[v4[18]], &qword_10035C0A0);
  v68[v4[20]] = 2;
  v68[8] = 0;
  *(void *)unint64_t v68 = _swiftEmptyArrayStorage;
  *(void *)&v68[v4[19]] = _swiftEmptyArrayStorage;
  unint64_t v69 = (uint64_t (**)())&v68[v4[21]];
  *unint64_t v69 = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  v69[1] = 0;
  sub_10000D78C((uint64_t)v39, &qword_10035C0A0);
  sub_10000D728((uint64_t)v68, (uint64_t)v25, &qword_10035C0A8);
  LOBYTE(v68) = v25[v4[20]];
  char v70 = v25[8];
  sub_10000D728((uint64_t)&v25[v4[18]], (uint64_t)v39, &qword_10035C0A0);
  id v71 = v188;
  sub_10000D728((uint64_t)v25, (uint64_t)v188, &qword_10035C0A8);
  uint64_t v72 = swift_allocObject();
  sub_10001639C((uint64_t)v71, v72 + v186, &qword_10035C0A8);
  *(unsigned char *)(v67 + v4[20]) = (_BYTE)v68;
  *(unsigned char *)(v67 + 8) = v70;
  uint64_t v73 = v4[19];
  *(void *)(v67 + v73) = _swiftEmptyArrayStorage;
  sub_10001639C((uint64_t)v39, v67 + v4[18], &qword_10035C0A0);
  uint64_t v74 = (uint64_t (**)(uint64_t))(v67 + v4[21]);
  *uint64_t v74 = sub_100016120;
  v74[1] = (uint64_t (*)(uint64_t))v72;
  *(void *)uint64_t v67 = *(void *)v25;
  unint64_t v75 = *(void **)&v25[v4[19]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000D78C((uint64_t)v25, &qword_10035C0A8);
  swift_bridgeObjectRelease();
  char v76 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v67 + v73) = v75;
  if ((v76 & 1) == 0)
  {
    unint64_t v75 = sub_1000893A8(0, v75[2] + 1, 1, v75);
    *(void *)(v67 + v73) = v75;
  }
  unint64_t v78 = v75[2];
  unint64_t v77 = v75[3];
  unint64_t v79 = v78 + 1;
  if (v78 >= v77 >> 1) {
    unint64_t v75 = sub_1000893A8((void *)(v77 > 1), v78 + 1, 1, v75);
  }
  v75[2] = v79;
  *(void *)(v67 + v73) = v75;
  sub_10000D78C((uint64_t)v176, &qword_10035C0A8);
  uint64_t v80 = v192;
  swift_storeEnumTagMultiPayload();
  v191(v39, 0, 1, v80);
  v81 = v178;
  sub_10000D728((uint64_t)v39, (uint64_t)&v178[v4[18]], &qword_10035C0A0);
  v81[v4[20]] = 2;
  v81[8] = 3;
  *(void *)v81 = _swiftEmptyArrayStorage;
  *(void *)&v81[v4[19]] = _swiftEmptyArrayStorage;
  v82 = (uint64_t (**)())&v81[v4[21]];
  void *v82 = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  v82[1] = 0;
  sub_10000D78C((uint64_t)v39, &qword_10035C0A0);
  uint64_t v83 = swift_allocObject();
  swift_weakInit();
  sub_10000D728((uint64_t)v81, (uint64_t)v25, &qword_10035C0A8);
  LOBYTE(v81) = v25[v4[20]];
  char v84 = v25[8];
  sub_10000D728((uint64_t)&v25[v4[18]], (uint64_t)v39, &qword_10035C0A0);
  uint64_t v85 = v188;
  sub_10000D728((uint64_t)v25, (uint64_t)v188, &qword_10035C0A8);
  uint64_t v86 = swift_allocObject();
  sub_10001639C((uint64_t)v85, v86 + v186, &qword_10035C0A8);
  v87 = v177;
  *((unsigned char *)v177 + v4[20]) = (_BYTE)v81;
  *((unsigned char *)v87 + 8) = v84;
  uint64_t v88 = v4[19];
  *(void *)((char *)v87 + v88) = _swiftEmptyArrayStorage;
  sub_10001639C((uint64_t)v39, (uint64_t)v87 + v4[18], &qword_10035C0A0);
  v89 = (uint64_t (**)(uint64_t))((char *)v87 + v4[21]);
  char *v89 = sub_100016120;
  v89[1] = (uint64_t (*)(uint64_t))v86;
  void *v87 = *(void *)v25;
  uint64_t v90 = *(void *)&v25[v4[19]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000D78C((uint64_t)v25, &qword_10035C0A8);
  swift_bridgeObjectRelease();
  *(void *)((char *)v87 + v88) = v90;
  uint64_t v91 = swift_allocObject();
  *(void *)(v91 + 16) = sub_100016348;
  *(void *)(v91 + 24) = v83;
  uint64_t v92 = (void *)*v87;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v92 = sub_100089290(0, v92[2] + 1, 1, v92);
  }
  unint64_t v94 = v92[2];
  unint64_t v93 = v92[3];
  if (v94 >= v93 >> 1) {
    uint64_t v92 = sub_100089290((void *)(v93 > 1), v94 + 1, 1, v92);
  }
  uint64_t v95 = v193;
  uint64_t v96 = v189;
  uint64_t v97 = v189 + 5 * v193;
  v92[2] = v94 + 1;
  unint64_t v98 = &v92[2 * v94];
  v98[4] = sub_100016354;
  v98[5] = v91;
  uint64_t v99 = (uint64_t)v177;
  void *v177 = v92;
  sub_10001639C(v99, v97, &qword_10035C0A8);
  swift_release();
  sub_10000D78C((uint64_t)v178, &qword_10035C0A8);
  uint64_t v100 = v96 + 6 * v95;
  uint64_t v101 = v192;
  swift_storeEnumTagMultiPayload();
  v191(v39, 0, 1, v101);
  v102 = v179;
  sub_10000D728((uint64_t)v39, (uint64_t)&v179[v4[18]], &qword_10035C0A0);
  v102[v4[20]] = 3;
  v102[8] = 0;
  *(void *)v102 = _swiftEmptyArrayStorage;
  *(void *)&v102[v4[19]] = _swiftEmptyArrayStorage;
  uint64_t v103 = (uint64_t (**)())&v102[v4[21]];
  *uint64_t v103 = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  v103[1] = 0;
  sub_10000D78C((uint64_t)v39, &qword_10035C0A0);
  sub_10000D728((uint64_t)v102, (uint64_t)v25, &qword_10035C0A8);
  char v104 = v25[v4[20]];
  LOBYTE(v95) = v25[8];
  sub_10000D728((uint64_t)&v25[v4[18]], (uint64_t)v39, &qword_10035C0A0);
  uint64_t v105 = v188;
  sub_10000D728((uint64_t)v25, (uint64_t)v188, &qword_10035C0A8);
  uint64_t v106 = swift_allocObject();
  sub_10001639C((uint64_t)v105, v106 + v186, &qword_10035C0A8);
  *(unsigned char *)(v100 + v4[20]) = v104;
  *(unsigned char *)(v100 + 8) = v95;
  uint64_t v107 = v4[19];
  *(void *)(v100 + v107) = _swiftEmptyArrayStorage;
  sub_10001639C((uint64_t)v39, v100 + v4[18], &qword_10035C0A0);
  unint64_t v108 = (uint64_t (**)(uint64_t))(v100 + v4[21]);
  *unint64_t v108 = sub_100016120;
  v108[1] = (uint64_t (*)(uint64_t))v106;
  *(void *)uint64_t v100 = *(void *)v25;
  unint64_t v109 = *(void **)&v25[v4[19]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000D78C((uint64_t)v25, &qword_10035C0A8);
  swift_bridgeObjectRelease();
  char v110 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v100 + v107) = v109;
  if ((v110 & 1) == 0)
  {
    unint64_t v109 = sub_1000893A8(0, v109[2] + 1, 1, v109);
    *(void *)(v100 + v107) = v109;
  }
  unint64_t v112 = v109[2];
  unint64_t v111 = v109[3];
  unint64_t v113 = v112 + 1;
  if (v112 >= v111 >> 1) {
    unint64_t v109 = sub_1000893A8((void *)(v111 > 1), v112 + 1, 1, v109);
  }
  v109[2] = v113;
  *(void *)(v100 + v107) = v109;
  sub_10000D78C((uint64_t)v179, &qword_10035C0A8);
  uint64_t v114 = 8 * v193;
  uint64_t v115 = v189;
  v179 = (unsigned char *)(v189 + 7 * v193);
  v116 = v191;
  v191(v39, 1, 1, v192);
  sub_10000D728((uint64_t)v39, (uint64_t)&v25[v4[18]], &qword_10035C0A0);
  v25[v4[20]] = 4;
  v25[8] = 5;
  *(void *)uint64_t v25 = _swiftEmptyArrayStorage;
  *(void *)&v25[v4[19]] = _swiftEmptyArrayStorage;
  uint64_t v117 = (uint64_t (**)())&v25[v4[21]];
  *uint64_t v117 = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  v117[1] = 0;
  sub_10000D78C((uint64_t)v39, &qword_10035C0A0);
  sub_10001122C(v184, (uint64_t)v179);
  sub_10000D78C((uint64_t)v25, &qword_10035C0A8);
  uint64_t v118 = v115 + v114;
  uint64_t v119 = v192;
  v116(v39, 1, 1, v192);
  sub_10000D728((uint64_t)v39, (uint64_t)&v25[v4[18]], &qword_10035C0A0);
  v25[v4[20]] = 4;
  v25[8] = 3;
  *(void *)uint64_t v25 = _swiftEmptyArrayStorage;
  *(void *)&v25[v4[19]] = _swiftEmptyArrayStorage;
  uint64_t v120 = (uint64_t (**)())&v25[v4[21]];
  *uint64_t v120 = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  v120[1] = 0;
  sub_10000D78C((uint64_t)v39, &qword_10035C0A0);
  sub_100011984((uint64_t)sub_100011920, 0, v118);
  sub_10000D78C((uint64_t)v25, &qword_10035C0A8);
  v116(v39, 1, 1, v119);
  sub_10000D728((uint64_t)v39, (uint64_t)&v25[v4[18]], &qword_10035C0A0);
  v25[v4[20]] = 4;
  v25[8] = 2;
  *(void *)uint64_t v25 = _swiftEmptyArrayStorage;
  *(void *)&v25[v4[19]] = _swiftEmptyArrayStorage;
  uint64_t v121 = (uint64_t (**)())&v25[v4[21]];
  *uint64_t v121 = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  v121[1] = 0;
  sub_10000D78C((uint64_t)v39, &qword_10035C0A0);
  uint64_t v122 = v181;
  sub_100011EDC((uint64_t)sub_100011D00, 0, (uint64_t)v181);
  sub_10000D78C((uint64_t)v25, &qword_10035C0A8);
  uint64_t v123 = swift_allocObject();
  swift_weakInit();
  sub_10000D728((uint64_t)v122, (uint64_t)v25, &qword_10035C0A8);
  LOBYTE(v115) = v25[v4[20]];
  LOBYTE(v119) = v25[8];
  sub_10000D728((uint64_t)&v25[v4[18]], (uint64_t)v39, &qword_10035C0A0);
  v124 = v188;
  sub_10000D728((uint64_t)v25, (uint64_t)v188, &qword_10035C0A8);
  uint64_t v125 = swift_allocObject();
  sub_10001639C((uint64_t)v124, v125 + v186, &qword_10035C0A8);
  uint64_t v126 = v180;
  *((unsigned char *)v180 + v4[20]) = v115;
  *((unsigned char *)v126 + 8) = v119;
  uint64_t v127 = v4[19];
  *(void *)((char *)v126 + v127) = _swiftEmptyArrayStorage;
  sub_10001639C((uint64_t)v39, (uint64_t)v126 + v4[18], &qword_10035C0A0);
  uint64_t v128 = (uint64_t (**)(uint64_t))((char *)v126 + v4[21]);
  *uint64_t v128 = sub_100016120;
  v128[1] = (uint64_t (*)(uint64_t))v125;
  *uint64_t v126 = *(void *)v25;
  uint64_t v129 = *(void *)&v25[v4[19]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000D78C((uint64_t)v25, &qword_10035C0A8);
  swift_bridgeObjectRelease();
  *(void *)((char *)v126 + v127) = v129;
  uint64_t v130 = swift_allocObject();
  *(void *)(v130 + 16) = sub_100016380;
  *(void *)(v130 + 24) = v123;
  v131 = (void *)*v126;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    v131 = sub_100089290(0, v131[2] + 1, 1, v131);
  }
  unint64_t v133 = v131[2];
  unint64_t v132 = v131[3];
  if (v133 >= v132 >> 1) {
    v131 = sub_100089290((void *)(v132 > 1), v133 + 1, 1, v131);
  }
  uint64_t v134 = v193;
  uint64_t v135 = v189;
  uint64_t v136 = v189 + 9 * v193;
  v131[2] = v133 + 1;
  v137 = &v131[2 * v133];
  v137[4] = sub_1000168B0;
  v137[5] = v130;
  uint64_t v138 = (uint64_t)v180;
  void *v180 = v131;
  sub_10001639C(v138, v136, &qword_10035C0A8);
  swift_release();
  sub_10000D78C((uint64_t)v181, &qword_10035C0A8);
  uint64_t v139 = v135 + 10 * v134;
  v191(v39, 1, 1, v192);
  sub_10000D728((uint64_t)v39, (uint64_t)&v25[v4[18]], &qword_10035C0A0);
  v25[v4[20]] = 4;
  v25[8] = 0;
  *(void *)uint64_t v25 = _swiftEmptyArrayStorage;
  *(void *)&v25[v4[19]] = _swiftEmptyArrayStorage;
  uint64_t v140 = (uint64_t (**)())&v25[v4[21]];
  *uint64_t v140 = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  v140[1] = 0;
  sub_10000D78C((uint64_t)v39, &qword_10035C0A0);
  uint64_t v141 = v182;
  sub_100011EDC((uint64_t)sub_1000124EC, 0, (uint64_t)v182);
  sub_10000D78C((uint64_t)v25, &qword_10035C0A8);
  sub_10000D728((uint64_t)v141, (uint64_t)v25, &qword_10035C0A8);
  LOBYTE(v141) = v25[v4[20]];
  LOBYTE(v134) = v25[8];
  sub_10000D728((uint64_t)&v25[v4[18]], (uint64_t)v39, &qword_10035C0A0);
  uint64_t v142 = v188;
  sub_10000D728((uint64_t)v25, (uint64_t)v188, &qword_10035C0A8);
  uint64_t v143 = swift_allocObject();
  sub_10001639C((uint64_t)v142, v143 + v186, &qword_10035C0A8);
  *(unsigned char *)(v139 + v4[20]) = (_BYTE)v141;
  *(unsigned char *)(v139 + 8) = v134;
  uint64_t v144 = v4[19];
  *(void *)(v139 + v144) = _swiftEmptyArrayStorage;
  sub_10001639C((uint64_t)v39, v139 + v4[18], &qword_10035C0A0);
  v145 = (uint64_t (**)(uint64_t))(v139 + v4[21]);
  char *v145 = sub_100016120;
  v145[1] = (uint64_t (*)(uint64_t))v143;
  *(void *)uint64_t v139 = *(void *)v25;
  v146 = *(void **)&v25[v4[19]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000D78C((uint64_t)v25, &qword_10035C0A8);
  swift_bridgeObjectRelease();
  char v147 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v139 + v144) = v146;
  if ((v147 & 1) == 0)
  {
    v146 = sub_1000893A8(0, v146[2] + 1, 1, v146);
    *(void *)(v139 + v144) = v146;
  }
  unint64_t v149 = v146[2];
  unint64_t v148 = v146[3];
  unint64_t v150 = v149 + 1;
  if (v149 >= v148 >> 1) {
    v146 = sub_1000893A8((void *)(v148 > 1), v149 + 1, 1, v146);
  }
  v146[2] = v150;
  *(void *)(v139 + v144) = v146;
  sub_10000D78C((uint64_t)v182, &qword_10035C0A8);
  uint64_t v151 = v192;
  uint64_t v152 = v189 + 11 * v193;
  *uint64_t v39 = 1;
  swift_storeEnumTagMultiPayload();
  v191(v39, 0, 1, v151);
  unint64_t v153 = v183;
  sub_10000D728((uint64_t)v39, (uint64_t)&v183[v4[18]], &qword_10035C0A0);
  v153[v4[20]] = 5;
  v153[8] = 0;
  *(void *)unint64_t v153 = _swiftEmptyArrayStorage;
  *(void *)&v153[v4[19]] = _swiftEmptyArrayStorage;
  v154 = (uint64_t (**)())&v153[v4[21]];
  void *v154 = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  v154[1] = 0;
  sub_10000D78C((uint64_t)v39, &qword_10035C0A0);
  sub_10000D728((uint64_t)v153, (uint64_t)v25, &qword_10035C0A8);
  char v155 = v25[v4[20]];
  char v156 = v25[8];
  sub_10000D728((uint64_t)&v25[v4[18]], (uint64_t)v39, &qword_10035C0A0);
  uint64_t v157 = v188;
  sub_10000D728((uint64_t)v25, (uint64_t)v188, &qword_10035C0A8);
  uint64_t v158 = swift_allocObject();
  sub_10001639C((uint64_t)v157, v158 + v186, &qword_10035C0A8);
  *(unsigned char *)(v152 + v4[20]) = v155;
  *(unsigned char *)(v152 + 8) = v156;
  uint64_t v159 = v4[19];
  *(void *)(v152 + v159) = _swiftEmptyArrayStorage;
  sub_10001639C((uint64_t)v39, v152 + v4[18], &qword_10035C0A0);
  uint64_t v160 = (uint64_t (**)(uint64_t))(v152 + v4[21]);
  *uint64_t v160 = sub_100016120;
  v160[1] = (uint64_t (*)(uint64_t))v158;
  *(void *)uint64_t v152 = *(void *)v25;
  uint64_t v161 = *(void **)&v25[v4[19]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000D78C((uint64_t)v25, &qword_10035C0A8);
  swift_bridgeObjectRelease();
  char v162 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v152 + v159) = v161;
  if ((v162 & 1) == 0)
  {
    uint64_t v161 = sub_1000893A8(0, v161[2] + 1, 1, v161);
    *(void *)(v152 + v159) = v161;
  }
  unint64_t v164 = v161[2];
  unint64_t v163 = v161[3];
  unint64_t v165 = v164 + 1;
  if (v164 >= v163 >> 1) {
    uint64_t v161 = sub_1000893A8((void *)(v163 > 1), v164 + 1, 1, v161);
  }
  v161[2] = v165;
  *(void *)(v152 + v159) = v161;
  sub_10000D78C((uint64_t)v183, &qword_10035C0A8);
  uint64_t v166 = v192;
  uint64_t v167 = v189 + 12 * v193;
  *uint64_t v39 = 0;
  swift_storeEnumTagMultiPayload();
  v191(v39, 0, 1, v166);
  sub_10000D728((uint64_t)v39, v167 + v4[18], &qword_10035C0A0);
  *(unsigned char *)(v167 + v4[20]) = 5;
  *(unsigned char *)(v167 + 8) = 1;
  *(void *)uint64_t v167 = _swiftEmptyArrayStorage;
  *(void *)(v167 + v4[19]) = _swiftEmptyArrayStorage;
  uint64_t v168 = (uint64_t (**)())(v167 + v4[21]);
  *uint64_t v168 = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  v168[1] = 0;
  sub_10000D78C((uint64_t)v39, &qword_10035C0A0);
  uint64_t v169 = v184;
  *(void *)(v184 + 32) = v175;
  swift_bridgeObjectRelease();
  return v169;
}

uint64_t sub_10001122C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  v60 = (char *)a1;
  uint64_t v65 = a2;
  uint64_t v4 = sub_10000A38C(&qword_10035C0A0);
  __chkstk_darwin(v4 - 8);
  uint64_t v59 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10035C0C8);
  uint64_t v7 = v6 - 8;
  uint64_t v58 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v58 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v57 = (uint64_t)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)&v55 - v11);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v55 - v13;
  uint64_t v15 = (int *)sub_10000A38C(&qword_10035C0A8);
  uint64_t v61 = *((void *)v15 - 1);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v63 = (uint64_t)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v55 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v55 - v22;
  uint64_t v62 = v24;
  __chkstk_darwin(v21);
  uint64_t v64 = (uint64_t)&v55 - v25;
  sub_10000D728(v3, (uint64_t)v23, &qword_10035C0A8);
  *uint64_t v12 = *(void *)v23;
  sub_10000D728((uint64_t)v23, (uint64_t)v12 + *(int *)(v7 + 48), &qword_10035C0A8);
  uint64_t v26 = (BOOL (**)(uint64_t))((char *)v12 + *(int *)(v7 + 52));
  *uint64_t v26 = sub_10001448C;
  v26[1] = 0;
  uint64_t v27 = *(void *)&v23[v15[19]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000D78C((uint64_t)v23, &qword_10035C0A8);
  v12[1] = v27;
  sub_10001639C((uint64_t)v12, (uint64_t)v14, &qword_10035C0C8);
  uint64_t v28 = swift_allocObject();
  swift_weakInit();
  v60 = v14;
  sub_10000D728((uint64_t)v14, (uint64_t)v12, &qword_10035C0C8);
  uint64_t v29 = (char *)v12 + *(int *)(v7 + 48);
  int v30 = v29[v15[20]];
  int v55 = v29[8];
  int v56 = v30;
  uint64_t v31 = v59;
  sub_10000D728((uint64_t)&v29[v15[18]], v59, &qword_10035C0A0);
  uint64_t v32 = v57;
  sub_10000D728((uint64_t)v12, v57, &qword_10035C0C8);
  unint64_t v33 = (*(unsigned __int8 *)(v58 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
  uint64_t v34 = swift_allocObject();
  sub_10001639C(v32, v34 + v33, &qword_10035C0C8);
  v20[v15[20]] = v56;
  v20[8] = v55;
  uint64_t v35 = v15[19];
  *(void *)&v20[v35] = _swiftEmptyArrayStorage;
  sub_10001639C(v31, (uint64_t)&v20[v15[18]], &qword_10035C0A0);
  uint64_t v36 = (uint64_t (**)(uint64_t))&v20[v15[21]];
  *uint64_t v36 = sub_100016404;
  v36[1] = (uint64_t (*)(uint64_t))v34;
  uint64_t v37 = v12[1];
  *(void *)uint64_t v20 = *v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000D78C((uint64_t)v12, &qword_10035C0C8);
  swift_bridgeObjectRelease();
  *(void *)&v20[v35] = v37;
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = sub_100016640;
  *(void *)(v38 + 24) = v28;
  uint64_t v39 = *(void **)v20;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v39 = sub_100089290(0, v39[2] + 1, 1, v39);
  }
  unint64_t v41 = v39[2];
  unint64_t v40 = v39[3];
  if (v41 >= v40 >> 1) {
    uint64_t v39 = sub_100089290((void *)(v40 > 1), v41 + 1, 1, v39);
  }
  v39[2] = v41 + 1;
  id v42 = &v39[2 * v41];
  v42[4] = sub_1000168B0;
  v42[5] = v38;
  *(void *)uint64_t v20 = v39;
  uint64_t v43 = v64;
  sub_10001639C((uint64_t)v20, v64, &qword_10035C0A8);
  swift_release();
  sub_10000D78C((uint64_t)v60, &qword_10035C0C8);
  sub_10000D728(v43, (uint64_t)v23, &qword_10035C0A8);
  char v44 = v23[v15[20]];
  char v45 = v23[8];
  uint64_t v46 = v31;
  sub_10000D728((uint64_t)&v23[v15[18]], v31, &qword_10035C0A0);
  uint64_t v47 = v63;
  sub_10000D728((uint64_t)v23, v63, &qword_10035C0A8);
  unint64_t v48 = (*(unsigned __int8 *)(v61 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
  uint64_t v49 = swift_allocObject();
  sub_10001639C(v47, v49 + v48, &qword_10035C0A8);
  uint64_t v50 = v65;
  *(unsigned char *)(v65 + v15[20]) = v44;
  *(unsigned char *)(v50 + 8) = v45;
  uint64_t v51 = v15[19];
  *(void *)(v50 + v51) = _swiftEmptyArrayStorage;
  sub_10001639C(v46, v50 + v15[18], &qword_10035C0A0);
  unint64_t v52 = (uint64_t (**)(uint64_t))(v50 + v15[21]);
  *unint64_t v52 = sub_100016120;
  v52[1] = (uint64_t (*)(uint64_t))v49;
  *(void *)uint64_t v50 = *(void *)v23;
  uint64_t v53 = *(void *)&v23[v15[19]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000D78C((uint64_t)v23, &qword_10035C0A8);
  swift_bridgeObjectRelease();
  *(void *)(v50 + v51) = v53;
  return sub_10000D78C(v43, &qword_10035C0A8);
}

uint64_t sub_100011848()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    id v2 = sub_1001F6458();
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 ulog:40 message:v3];

    uint64_t v4 = OBJC_IVAR____TtC17proximitycontrold26DiscoveryTokenStateMachine_deferralTask;
    if (*(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold26DiscoveryTokenStateMachine_deferralTask))
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    *(void *)(v1 + v4) = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

BOOL sub_100011920(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2) == 1;
}

uint64_t sub_100011984@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000A38C(&qword_10035C0A0);
  __chkstk_darwin(v8 - 8);
  uint64_t v37 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10035C0A8);
  uint64_t v11 = (int *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_10000A38C(&qword_10035C0C8);
  uint64_t v15 = v14 - 8;
  uint64_t v36 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v36 + 64);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v35 = (uint64_t)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v35 - v19);
  __chkstk_darwin(v18);
  uint64_t v38 = (uint64_t)&v35 - v21;
  sub_10000D728(v4, (uint64_t)v13, &qword_10035C0A8);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a1;
  *(void *)(v22 + 24) = a2;
  *uint64_t v20 = *v13;
  sub_10000D728((uint64_t)v13, (uint64_t)v20 + *(int *)(v15 + 48), &qword_10035C0A8);
  uint64_t v23 = (uint64_t (**)(uint64_t))((char *)v20 + *(int *)(v15 + 52));
  *uint64_t v23 = sub_100016408;
  v23[1] = (uint64_t (*)(uint64_t))v22;
  uint64_t v24 = *(void *)((char *)v13 + v11[21]);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000D78C((uint64_t)v13, &qword_10035C0A8);
  v20[1] = v24;
  uint64_t v25 = v38;
  sub_10001639C((uint64_t)v20, v38, &qword_10035C0C8);
  sub_10000D728(v25, (uint64_t)v20, &qword_10035C0C8);
  uint64_t v26 = (char *)v20 + *(int *)(v15 + 48);
  LOBYTE(v15) = v26[v11[22]];
  LOBYTE(v25) = v26[8];
  uint64_t v27 = v37;
  sub_10000D728((uint64_t)&v26[v11[20]], v37, &qword_10035C0A0);
  uint64_t v28 = v35;
  sub_10000D728((uint64_t)v20, v35, &qword_10035C0C8);
  unint64_t v29 = (*(unsigned __int8 *)(v36 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  uint64_t v30 = swift_allocObject();
  sub_10001639C(v28, v30 + v29, &qword_10035C0C8);
  *(unsigned char *)(a3 + v11[22]) = v15;
  *(unsigned char *)(a3 + 8) = v25;
  uint64_t v31 = v11[21];
  *(void *)(a3 + v31) = _swiftEmptyArrayStorage;
  sub_10001639C(v27, a3 + v11[20], &qword_10035C0A0);
  uint64_t v32 = (uint64_t (**)(uint64_t))(a3 + v11[23]);
  *uint64_t v32 = sub_100016404;
  v32[1] = (uint64_t (*)(uint64_t))v30;
  uint64_t v33 = v20[1];
  *(void *)a3 = *v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000D78C((uint64_t)v20, &qword_10035C0C8);
  swift_bridgeObjectRelease();
  *(void *)(a3 + v31) = v33;
  return sub_10000D78C(v38, &qword_10035C0C8);
}

BOOL sub_100011D00()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v15 - v5;
  *(uint64_t *)((char *)&v15 - v5) = 0;
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v7((char *)&v15 - v5, enum case for DispatchTimeInterval.seconds(_:), v0);
  uint64_t v8 = enum case for DispatchTimeInterval.never(_:);
  v7(v4, enum case for DispatchTimeInterval.never(_:), v0);
  char v9 = static DispatchTimeInterval.== infix(_:_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  if (v9)
  {
    BOOL v11 = 0;
  }
  else
  {
    v7(v4, v8, v0);
    char v12 = static DispatchTimeInterval.== infix(_:_:)();
    v10(v4, v0);
    if (v12)
    {
      BOOL v11 = 1;
    }
    else
    {
      uint64_t v13 = sub_10020380C();
      BOOL v11 = v13 < sub_10020380C();
    }
  }
  v10(v6, v0);
  return v11;
}

uint64_t sub_100011EDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000A38C(&qword_10035C0A0);
  __chkstk_darwin(v8 - 8);
  uint64_t v37 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10035C0A8);
  BOOL v11 = (int *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_10000A38C(&qword_10035C0C8);
  uint64_t v15 = v14 - 8;
  uint64_t v36 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v36 + 64);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v35 = (uint64_t)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v35 - v19);
  __chkstk_darwin(v18);
  uint64_t v38 = (uint64_t)&v35 - v21;
  sub_10000D728(v4, (uint64_t)v13, &qword_10035C0A8);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a1;
  *(void *)(v22 + 24) = a2;
  *uint64_t v20 = *v13;
  sub_10000D728((uint64_t)v13, (uint64_t)v20 + *(int *)(v15 + 48), &qword_10035C0A8);
  uint64_t v23 = (uint64_t (**)(uint64_t))((char *)v20 + *(int *)(v15 + 52));
  *uint64_t v23 = sub_100016394;
  v23[1] = (uint64_t (*)(uint64_t))v22;
  uint64_t v24 = *(void *)((char *)v13 + v11[21]);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000D78C((uint64_t)v13, &qword_10035C0A8);
  v20[1] = v24;
  uint64_t v25 = v38;
  sub_10001639C((uint64_t)v20, v38, &qword_10035C0C8);
  sub_10000D728(v25, (uint64_t)v20, &qword_10035C0C8);
  uint64_t v26 = (char *)v20 + *(int *)(v15 + 48);
  LOBYTE(v15) = v26[v11[22]];
  LOBYTE(v25) = v26[8];
  uint64_t v27 = v37;
  sub_10000D728((uint64_t)&v26[v11[20]], v37, &qword_10035C0A0);
  uint64_t v28 = v35;
  sub_10000D728((uint64_t)v20, v35, &qword_10035C0C8);
  unint64_t v29 = (*(unsigned __int8 *)(v36 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  uint64_t v30 = swift_allocObject();
  sub_10001639C(v28, v30 + v29, &qword_10035C0C8);
  *(unsigned char *)(a3 + v11[22]) = v15;
  *(unsigned char *)(a3 + 8) = v25;
  uint64_t v31 = v11[21];
  *(void *)(a3 + v31) = _swiftEmptyArrayStorage;
  sub_10001639C(v27, a3 + v11[20], &qword_10035C0A0);
  uint64_t v32 = (uint64_t (**)(uint64_t))(a3 + v11[23]);
  *uint64_t v32 = sub_100016404;
  v32[1] = (uint64_t (*)(uint64_t))v30;
  uint64_t v33 = v20[1];
  *(void *)a3 = *v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000D78C((uint64_t)v20, &qword_10035C0C8);
  swift_bridgeObjectRelease();
  *(void *)(a3 + v31) = v33;
  return sub_10000D78C(v38, &qword_10035C0C8);
}

uint64_t sub_100012258(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10035BED8);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v17 - v13;
  sub_100015898(a1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() != 3) {
    return sub_100014F00((uint64_t)v8);
  }
  sub_10001639C((uint64_t)v8, (uint64_t)v14, &qword_10035BED8);
  sub_10000D728((uint64_t)v14, (uint64_t)v12, &qword_10035BED8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2) == 1)
  {
    sub_10000D78C((uint64_t)v14, &qword_10035BED8);
    uint64_t v15 = (uint64_t)v12;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v12, v2);
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_1000137A0();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v15 = (uint64_t)v14;
  }
  return sub_10000D78C(v15, &qword_10035BED8);
}

BOOL sub_1000124EC()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v15 - v5;
  *(uint64_t *)((char *)&v15 - v5) = 0;
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v7((char *)&v15 - v5, enum case for DispatchTimeInterval.seconds(_:), v0);
  uint64_t v8 = enum case for DispatchTimeInterval.never(_:);
  v7(v4, enum case for DispatchTimeInterval.never(_:), v0);
  char v9 = static DispatchTimeInterval.== infix(_:_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  if (v9)
  {
    BOOL v11 = 1;
  }
  else
  {
    v7(v4, v8, v0);
    char v12 = static DispatchTimeInterval.== infix(_:_:)();
    v10(v4, v0);
    if (v12)
    {
      BOOL v11 = 0;
    }
    else
    {
      uint64_t v13 = sub_10020380C();
      BOOL v11 = v13 >= sub_10020380C();
    }
  }
  v10(v6, v0);
  return v11;
}

uint64_t sub_1000126C8@<X0>(unsigned char *a1@<X8>)
{
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v2 = *(id *)(qword_1003AC750 + 1536);
  char v3 = sub_1000FD938();

  if ((v3 & 1) == 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    char v7 = sub_100096BBC();
    swift_release();
    if ((v7 & 6) != 0)
    {
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v8._id countAndFlagsBits = sub_1001F7514();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      id v9 = sub_1001F6458();
      swift_bridgeObjectRetain();
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v9 ulog:40 message:v10];
      swift_bridgeObjectRelease();

      type metadata accessor for DiscoveryTokenStateMachine.Input(0);
      return swift_storeEnumTagMultiPayload();
    }
    if ((sub_10000C78C() & 0xA) == 0)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v17 = sub_100096BBC();
      swift_release();
      if (v17)
      {
        _StringGuts.grow(_:)(43);
        sub_1001F7514();
        swift_bridgeObjectRelease();
        unint64_t v18 = 0xD000000000000029;
        uint64_t v19 = " doesn't support UWB, skipping token sync";
LABEL_20:
        unint64_t v20 = (unint64_t)(v19 - 32) | 0x8000000000000000;
        String.append(_:)(*(Swift::String *)&v18);
LABEL_39:
        id v37 = sub_1001F6458();
        swift_bridgeObjectRetain();
        NSString v33 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v37 ulog:40 message:v33];
        swift_bridgeObjectRelease();

        goto LABEL_40;
      }
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_1000983CC();
    uint64_t v12 = v11;
    swift_release();
    if (v12)
    {
      Swift::String v13 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (qword_10035A4D8 != -1) {
        swift_once();
      }
      uint64_t v14 = (char *)off_10035BCF8;
      uint64_t v15 = *((void *)off_10035BCF8 + 2);
      if (v15)
      {
        sub_100016790();
        swift_bridgeObjectRetain();
        uint64_t v16 = (uint64_t *)(v14 + 40);
        while (1)
        {
          id countAndFlagsBits = (id)v13._countAndFlagsBits;
          uint64_t v41 = *(v16 - 1);
          uint64_t v42 = *v16;
          if (StringProtocol.contains<A>(_:)()) {
            break;
          }
          v16 += 2;
          if (!--v15)
          {
            swift_bridgeObjectRelease();
            goto LABEL_21;
          }
        }
        swift_bridgeObjectRelease();
        _StringGuts.grow(_:)(51);
        v28._id countAndFlagsBits = sub_1001F7514();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._id countAndFlagsBits = 0xD00000000000002FLL;
        v29._object = (void *)0x80000001002B2440;
        String.append(_:)(v29);
        String.append(_:)(v13);
LABEL_38:
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
LABEL_21:
      swift_bridgeObjectRelease();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v21 = sub_100096BBC();
    swift_release();
    if (!v21)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      NSString v22 = countAndFlagsBits;
      if (!countAndFlagsBits)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        swift_release();
        _StringGuts.grow(_:)(49);
        sub_1001F7514();
        swift_bridgeObjectRelease();
        unint64_t v18 = 0xD00000000000002FLL;
        uint64_t v19 = " No relationship, no BT device nor wifi device?";
        goto LABEL_20;
      }
      unsigned int v23 = [countAndFlagsBits mediaAccessControlSetting];
      if (v23 - 1 >= 2)
      {
        unsigned int v24 = v23;
        _StringGuts.grow(_:)(58);
        v25._id countAndFlagsBits = sub_1001F7514();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._id countAndFlagsBits = 0xD000000000000036;
        v26._object = (void *)0x80000001002B2400;
        String.append(_:)(v26);
        sub_100014644(v24);
        v27._id countAndFlagsBits = String.init(cString:)();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
LABEL_32:
        id v32 = sub_1001F6458();
        swift_bridgeObjectRetain();
        NSString v33 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v32 ulog:40 message:v33, v41, v42];
        swift_bridgeObjectRelease();

LABEL_40:
        *a1 = 0;
LABEL_41:
        type metadata accessor for DiscoveryTokenStateMachine.Input(0);
        return swift_storeEnumTagMultiPayload();
      }
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    NSString v22 = countAndFlagsBits;
    if (countAndFlagsBits)
    {
      if (([countAndFlagsBits nearbyActionFlags] & 0x10) == 0)
      {
        _StringGuts.grow(_:)(71);
        v30._id countAndFlagsBits = sub_1001F7514();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v31._id countAndFlagsBits = 0xD000000000000045;
        v31._object = (void *)0x80000001002B2300;
        String.append(_:)(v31);
        goto LABEL_32;
      }
    }
    else
    {
      _StringGuts.grow(_:)(16);
      sub_1001F7514();
      swift_bridgeObjectRelease();
      v34._id countAndFlagsBits = 0x64207462206F4E20;
      v34._object = (void *)0xEE003F6563697665;
      String.append(_:)(v34);
      id v35 = sub_1001F6458();
      swift_bridgeObjectRetain();
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v35 ulog:40 message:v22];
      swift_bridgeObjectRelease();
    }
    if (qword_10035A618 != -1) {
      swift_once();
    }
    if ((byte_1003ACB40 & 1) == 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      v38._id countAndFlagsBits = sub_1001F7514();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      id v39 = sub_1001F6458();
      swift_bridgeObjectRetain();
      NSString v40 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v39 ulog:40 message:v40];
      swift_bridgeObjectRelease();

      *a1 = 1;
      goto LABEL_41;
    }
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v36._id countAndFlagsBits = sub_1001F7514();
    String.append(_:)(v36);
    goto LABEL_38;
  }
  id v4 = sub_1001F6458();
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 ulog:40 message:v5];

  *a1 = 1;
  type metadata accessor for DiscoveryTokenStateMachine.Input(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10001331C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v2);
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v1;
  aBlock[4] = sub_10001681C;
  aBlock[5] = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_10031FC98;
  _Block_copy(aBlock);
  sub_10001573C((unint64_t *)&qword_100363D50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  swift_retain();
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10001683C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v5 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  return v5;
}

void sub_100013524(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(qword_10035C0D8);
  __chkstk_darwin(v6 - 8);
  Swift::String v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v9 = *(id *)(qword_1003AC750 + 1576);
  char v10 = sub_1000FD938();

  if (v10)
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v12[5] = Strong;
      sub_10016ABE4(0x2074756F656D6954, (void *)0xEE00676E69726966, 0, a2, (uint64_t)&off_10031F990);
      swift_storeEnumTagMultiPayload();
      sub_1001565E4((uint64_t)v5, (uint64_t)v8);
      sub_100014F00((uint64_t)v5);
      sub_10000D78C((uint64_t)v8, qword_10035C0D8);
      swift_release();
    }
    else
    {
      sub_10016AE10(90, 0xD000000000000017, (void *)0x80000001002B2510, 0, a2, (uint64_t)&off_10031F990);
    }
  }
}

uint64_t sub_1000137A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::String v8 = (char *)v15 - v7;
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  v9._object = (void *)0x80000001002B24F0;
  v9._id countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v9);
  type metadata accessor for DispatchTimeInterval();
  _print_unlocked<A, B>(_:_:)();
  id v10 = sub_1001F6458();
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 ulog:40 message:v11];
  swift_bridgeObjectRelease();

  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold26DiscoveryTokenStateMachine_deferralTask) = sub_10001331C();
  swift_retain();
  swift_release();
  id v12 = *(id *)(v1 + 24);
  static DispatchTime.now()();
  + infix(_:_:)();
  Swift::String v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  OS_dispatch_queue.asyncAfter(deadline:execute:)();
  swift_release();

  return ((uint64_t (*)(char *, uint64_t))v13)(v8, v2);
}

uint64_t sub_1000139C8()
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC17proximitycontrold26DiscoveryTokenStateMachine__state;
  uint64_t v2 = sub_10000A38C(&qword_10035C0B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Int sub_100013AAC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100013AF4()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100013B20()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100013B64()
{
  uint64_t result = 0x64657269736564;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1701602409;
      break;
    case 2:
      uint64_t result = 0x6465727265666564;
      break;
    case 3:
      uint64_t result = 0x64656C696166;
      break;
    case 4:
      uint64_t result = 1953391987;
      break;
    case 5:
      uint64_t result = 0x746E6573657270;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100013C14()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035BED8);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v28 - v6;
  uint64_t v8 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  __chkstk_darwin(v8);
  id v10 = (id *)((char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100015898(v1, (uint64_t)v10);
  uint64_t v11 = 0x65446C65636E6163;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:

      uint64_t v11 = 0x5465766965636572;
      break;
    case 2u:
      uint64_t v12 = 0x6F5465766F6D6572;
      int v13 = *(unsigned __int8 *)v10;
      unint64_t v14 = 0xEC0000002D6E656BLL;
      goto LABEL_7;
    case 3u:
      sub_10001639C((uint64_t)v10, (uint64_t)v7, &qword_10035BED8);
      sub_10000D728((uint64_t)v7, (uint64_t)v5, &qword_10035BED8);
      uint64_t v15 = type metadata accessor for DispatchTimeInterval();
      uint64_t v16 = *(void *)(v15 - 8);
      int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v5, 1, v15);
      if (v17 == 1)
      {
        sub_10000D78C((uint64_t)v5, &qword_10035BED8);
        uint64_t v18 = 0;
      }
      else
      {
        uint64_t v18 = sub_100202FD8();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v15);
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      unint64_t v29 = 0xD00000000000001BLL;
      unint64_t v30 = 0x80000001002B2260;
      if (v17 == 1)
      {
        unint64_t v22 = 0xE300000000000000;
        uint64_t v23 = 7104878;
      }
      else
      {
        v28[1] = v18;
        uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v22 = v24;
      }
      unint64_t v25 = v22;
      String.append(_:)(*(Swift::String *)&v23);
      swift_bridgeObjectRelease();
      v26._id countAndFlagsBits = 10528;
      v26._object = (void *)0xE200000000000000;
      String.append(_:)(v26);
      uint64_t v11 = v29;
      sub_10000D78C((uint64_t)v7, &qword_10035BED8);
      break;
    case 4u:
      return v11;
    case 5u:
      uint64_t v11 = 0x6574736575716572;
      break;
    case 6u:
      uint64_t v11 = 0x4E66497972746572;
      break;
    case 7u:
      uint64_t v11 = 0x6F546D6574737973;
      break;
    case 8u:
      uint64_t v11 = 0x74756F656D6974;
      break;
    default:
      uint64_t v12 = 0x7265766F63736964;
      int v13 = *(unsigned __int8 *)v10;
      unint64_t v14 = 0xEB000000002D6465;
LABEL_7:
      unint64_t v29 = v12;
      unint64_t v30 = v14;
      if (v13) {
        uint64_t v19 = 1702195828;
      }
      else {
        uint64_t v19 = 0x65736C6166;
      }
      if (v13) {
        unint64_t v20 = 0xE400000000000000;
      }
      else {
        unint64_t v20 = 0xE500000000000000;
      }
      unint64_t v21 = v20;
      String.append(_:)(*(Swift::String *)&v19);
      swift_bridgeObjectRelease();
      uint64_t v11 = v29;
      break;
  }
  return v11;
}

Swift::Int PCProximityHandoffClientError.hashValue.getter()
{
  return Hasher._finalize()();
}

void PCProximityHandoffClientError.hash(into:)()
{
}

Swift::Int sub_100014098()
{
  return Hasher._finalize()();
}

uint64_t sub_1000140D8(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  __chkstk_darwin(v8);
  id v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_10035BED8);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  unint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v19 - v15;
  sub_100015898(a1, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    sub_10001639C((uint64_t)v10, (uint64_t)v16, &qword_10035BED8);
    sub_10000D728((uint64_t)v16, (uint64_t)v14, &qword_10035BED8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4) == 1)
    {
      sub_10000D78C((uint64_t)v16, &qword_10035BED8);
      sub_10000D78C((uint64_t)v14, &qword_10035BED8);
      char v17 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v14, v4);
      char v17 = a2(v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      sub_10000D78C((uint64_t)v16, &qword_10035BED8);
    }
  }
  else
  {
    sub_100014F00((uint64_t)v10);
    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_100014354(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v4 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10035BED8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100015898(a1, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    sub_10001639C((uint64_t)v6, (uint64_t)v9, &qword_10035BED8);
    char v10 = a2(v9);
    sub_10000D78C((uint64_t)v9, &qword_10035BED8);
  }
  else
  {
    sub_100014F00((uint64_t)v6);
    char v10 = 0;
  }
  return v10 & 1;
}

BOOL sub_10001448C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100015898(a1, (uint64_t)v4);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 1;
  sub_100014F00((uint64_t)v4);
  return v5;
}

void sub_100014530(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (void **)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100015898(a1, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    BOOL v5 = *v4;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v7 = *(void **)(Strong + 16);
      *(void *)(Strong + 16) = v5;
      swift_release();
    }
    else
    {
    }
  }
  else
  {
    sub_100014F00((uint64_t)v4);
  }
}

uint64_t RPMediaAccessControlSetting.description.getter(unsigned int a1)
{
  sub_100014644(a1);

  return String.init(cString:)();
}

const char *sub_100014644(unsigned int a1)
{
  if (a1 > 3) {
    return "?";
  }
  else {
    return off_10031FCC0[a1];
  }
}

uint64_t sub_100014668()
{
  sub_100014644(*v0);

  return String.init(cString:)();
}

uint64_t sub_100014694()
{
  return type metadata accessor for DiscoveryTokenStateMachine(0);
}

uint64_t type metadata accessor for DiscoveryTokenStateMachine(uint64_t a1)
{
  return sub_100014F7C(a1, (uint64_t *)&unk_10035BD40);
}

void sub_1000146BC()
{
  sub_10001478C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10001478C()
{
  if (!qword_10035BD50)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10035BD50);
    }
  }
}

uint64_t getEnumTagSinglePayload for ContextDeliveryModeStateMachine.Output(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for DiscoveryTokenStateMachine.Output(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000148D4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DiscoveryTokenStateMachine.Output()
{
  return &type metadata for DiscoveryTokenStateMachine.Output;
}

char *sub_10001490C(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    char v10 = *a2;
    *(void *)a1 = *a2;
    a1 = &v10[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v11 = type metadata accessor for DispatchTimeInterval();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(char **, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
      {
        uint64_t v13 = sub_10000A38C(&qword_10035BED8);
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char **, uint64_t))(v12 + 16))(a1, a2, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      goto LABEL_10;
    }
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = *a2;
      *(void *)a1 = *a2;
      uint64_t v9 = v8;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

void sub_100014AD8(void **a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v4 = type metadata accessor for DispatchTimeInterval();
    uint64_t v6 = *(void *)(v4 - 8);
    if (!(*(unsigned int (**)(void **, uint64_t, uint64_t))(v6 + 48))(a1, 1, v4))
    {
      int v5 = *(void (**)(void **, uint64_t))(v6 + 8);
      v5(a1, v4);
    }
  }
  else if (EnumCaseMultiPayload == 1)
  {
    int v3 = *a1;
  }
}

void **sub_100014BE0(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v9 = type metadata accessor for DispatchTimeInterval();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
    {
      uint64_t v11 = sub_10000A38C(&qword_10035BED8);
      memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void **, void **, uint64_t))(v10 + 16))(a1, a2, v9);
      (*(void (**)(void **, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    }
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    id v8 = v7;
LABEL_8:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void **sub_100014D68(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100014F00((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v9 = type metadata accessor for DispatchTimeInterval();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
      {
        uint64_t v11 = sub_10000A38C(&qword_10035BED8);
        memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void **, void **, uint64_t))(v10 + 16))(a1, a2, v9);
        (*(void (**)(void **, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
      }
      goto LABEL_9;
    }
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *a2;
      *a1 = *a2;
      id v8 = v7;
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100014F00(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for DiscoveryTokenStateMachine.Input(uint64_t a1)
{
  return sub_100014F7C(a1, (uint64_t *)&unk_10035BF50);
}

uint64_t sub_100014F7C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_100014FB4(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v6 = type metadata accessor for DispatchTimeInterval();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = sub_10000A38C(&qword_10035BED8);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100015118(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100014F00((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v6 = type metadata accessor for DispatchTimeInterval();
      uint64_t v7 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        uint64_t v8 = sub_10000A38C(&qword_10035BED8);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10001528C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_1000152B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1000152E0()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_1000152F0()
{
  sub_100015394();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

void sub_100015394()
{
  if (!qword_10035BF60)
  {
    type metadata accessor for DispatchTimeInterval();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10035BF60);
    }
  }
}

unsigned char *initializeBufferWithCopyOfBuffer for AppleDevice(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DiscoveryTokenStateMachine.TokenState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DiscoveryTokenStateMachine.TokenState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100015554);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t sub_10001557C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100015584(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DiscoveryTokenStateMachine.TokenState()
{
  return &type metadata for DiscoveryTokenStateMachine.TokenState;
}

unint64_t sub_10001559C(uint64_t a1)
{
  unint64_t result = sub_1000155C4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000155C4()
{
  unint64_t result = qword_10035BF90;
  if (!qword_10035BF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035BF90);
  }
  return result;
}

uint64_t sub_10001561C(uint64_t a1)
{
  uint64_t result = sub_10001573C(&qword_10035BF98, (void (*)(uint64_t))type metadata accessor for DiscoveryTokenStateMachine.Input);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100015674(uint64_t a1)
{
  unint64_t result = sub_10001569C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10001569C()
{
  unint64_t result = qword_10035BFA0;
  if (!qword_10035BFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035BFA0);
  }
  return result;
}

uint64_t sub_1000156F4()
{
  return sub_10001573C(&qword_10035BFA8, (void (*)(uint64_t))type metadata accessor for DiscoveryTokenStateMachine.Input);
}

uint64_t sub_10001573C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100015788()
{
  unint64_t result = qword_10035BFB0;
  if (!qword_10035BFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035BFB0);
  }
  return result;
}

unint64_t sub_1000157E0()
{
  unint64_t result = qword_10035BFB8;
  if (!qword_10035BFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035BFB8);
  }
  return result;
}

void *sub_100015834()
{
  return &protocol witness table for Never;
}

uint64_t sub_100015840(uint64_t a1)
{
  uint64_t result = sub_10001573C(&qword_10035C078, (void (*)(uint64_t))type metadata accessor for DiscoveryTokenStateMachine);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100015898(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000158FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10035C0C8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a2 + *(int *)(v8 + 40);
  uint64_t v12 = sub_10000A38C(&qword_10035C0A8);
  LOBYTE(v11) = (*(uint64_t (**)(uint64_t))(v11 + *(int *)(v12 + 84)))(a1);
  sub_10000D728(a2, (uint64_t)v10, &qword_10035C0C8);
  sub_100015898(a1, (uint64_t)v6);
  if (v11) {
    char v13 = (*(uint64_t (**)(char *))&v10[*(int *)(v7 + 44)])(v6);
  }
  else {
    char v13 = 0;
  }
  sub_100014F00((uint64_t)v6);
  sub_10000D78C((uint64_t)v10, &qword_10035C0C8);
  return v13 & 1;
}

uint64_t sub_100015A64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  __chkstk_darwin(v4);
  uint64_t v46 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10035C080);
  __chkstk_darwin(v6);
  uint64_t v49 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10035BED8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v47 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v48 = (uint64_t)&v46 - v11;
  uint64_t v12 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v46 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  unint64_t v21 = (void **)((char *)&v46 - v20);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v46 - v22;
  uint64_t v24 = sub_10000A38C(&qword_10035C088);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  Swift::String v27 = (char *)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v28 = (void **)&v27[*(int *)(v25 + 56)];
  sub_100015898(a1, (uint64_t)v27);
  sub_100015898(a2, (uint64_t)v28);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100015898((uint64_t)v27, (uint64_t)v21);
      id v32 = *v21;
      if (swift_getEnumCaseMultiPayload() != 1)
      {

        goto LABEL_25;
      }
      NSString v33 = *v28;
      sub_1000160DC();
      char v31 = static NSObject.== infix(_:_:)();

      sub_100014F00((uint64_t)v27);
      return v31 & 1;
    case 2u:
      sub_100015898((uint64_t)v27, (uint64_t)v18);
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_25;
      }
      char v29 = *v18;
      goto LABEL_6;
    case 3u:
      sub_100015898((uint64_t)v27, (uint64_t)v15);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v34 = v48;
        sub_10001639C((uint64_t)v28, v48, &qword_10035BED8);
        uint64_t v35 = *(int *)(v6 + 48);
        uint64_t v36 = v49;
        uint64_t v37 = v49 + v35;
        sub_10001639C((uint64_t)v15, v49, &qword_10035BED8);
        sub_10000D728(v34, v37, &qword_10035BED8);
        uint64_t v39 = v50;
        uint64_t v38 = v51;
        NSString v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
        if (v40(v36, 1, v51) == 1)
        {
          sub_10000D78C(v34, &qword_10035BED8);
          if (v40(v37, 1, v38) == 1)
          {
            sub_10000D78C(v36, &qword_10035BED8);
LABEL_22:
            sub_100014F00((uint64_t)v27);
            char v31 = 1;
            return v31 & 1;
          }
        }
        else
        {
          uint64_t v42 = v47;
          sub_10000D728(v36, v47, &qword_10035BED8);
          if (v40(v37, 1, v38) != 1)
          {
            uint64_t v43 = v46;
            (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v46, v37, v38);
            sub_10001573C(&qword_10035C090, (void (*)(uint64_t))&type metadata accessor for DispatchTimeInterval);
            char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
            char v45 = *(void (**)(char *, uint64_t))(v39 + 8);
            v45(v43, v38);
            sub_10000D78C(v34, &qword_10035BED8);
            v45((char *)v42, v38);
            sub_10000D78C(v36, &qword_10035BED8);
            if (v44) {
              goto LABEL_22;
            }
            goto LABEL_32;
          }
          sub_10000D78C(v34, &qword_10035BED8);
          (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v42, v38);
        }
        sub_10000D78C(v36, &qword_10035C080);
LABEL_32:
        sub_100014F00((uint64_t)v27);
        goto LABEL_26;
      }
      sub_10000D78C((uint64_t)v15, &qword_10035BED8);
LABEL_25:
      sub_10000D78C((uint64_t)v27, &qword_10035C088);
LABEL_26:
      char v31 = 0;
      return v31 & 1;
    case 4u:
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5u:
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6u:
      if (swift_getEnumCaseMultiPayload() != 6) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 7u:
      if (swift_getEnumCaseMultiPayload() != 7) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 8u:
      if (swift_getEnumCaseMultiPayload() == 8) {
        goto LABEL_22;
      }
      goto LABEL_25;
    default:
      sub_100015898((uint64_t)v27, (uint64_t)v23);
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_25;
      }
      char v29 = *v23;
LABEL_6:
      char v30 = v29 ^ *(unsigned char *)v28;
      sub_100014F00((uint64_t)v27);
      char v31 = v30 ^ 1;
      return v31 & 1;
  }
}

unint64_t sub_1000160DC()
{
  unint64_t result = qword_10035C098;
  if (!qword_10035C098)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10035C098);
  }
  return result;
}

uint64_t sub_100016128()
{
  uint64_t v1 = sub_10000A38C(&qword_10035C0A8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_bridgeObjectRelease();
  uint64_t v5 = (id *)(v0 + v3 + *(int *)(v1 + 72));
  uint64_t v6 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v8 = type metadata accessor for DispatchTimeInterval();
      uint64_t v9 = *(void *)(v8 - 8);
      if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8)) {
        (*(void (**)(id *, uint64_t))(v9 + 8))(v5, v8);
      }
    }
    else if (EnumCaseMultiPayload == 1)
    {
    }
  }
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100016310()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100016348()
{
  return sub_100011848();
}

uint64_t sub_100016354()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100016380(uint64_t a1)
{
  return sub_100012258(a1);
}

uint64_t sub_100016394(uint64_t a1)
{
  return sub_1000140D8(a1, *(uint64_t (**)(char *))(v1 + 16));
}

uint64_t sub_10001639C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000A38C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100016408(uint64_t a1)
{
  return sub_100014354(a1, *(uint64_t (**)(char *))(v1 + 16));
}

uint64_t sub_100016414()
{
  uint64_t v1 = sub_10000A38C(&qword_10035C0C8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 40);
  swift_bridgeObjectRelease();
  uint64_t v6 = (id *)(v5 + *(int *)(sub_10000A38C(&qword_10035C0A8) + 72));
  uint64_t v7 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v9 = type metadata accessor for DispatchTimeInterval();
      uint64_t v11 = *(void *)(v9 - 8);
      if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v9)) {
        (*(void (**)(id *, uint64_t))(v11 + 8))(v6, v9);
      }
    }
    else if (EnumCaseMultiPayload == 1)
    {
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_100016640(uint64_t a1)
{
}

uint64_t sub_10001664C(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10000A38C(&qword_10035C0C8) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1000158FC(a1, v4);
}

uint64_t sub_1000166C0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000166FC(uint64_t a1)
{
  uint64_t v3 = sub_10000A38C(&qword_10035C0A8);
  return (*(uint64_t (**)(uint64_t))(v1
                                            + *(int *)(v3 + 84)
                                            + ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80))))(a1) & 1;
}

unint64_t sub_100016790()
{
  unint64_t result = qword_10035C0D0;
  if (!qword_10035C0D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035C0D0);
  }
  return result;
}

uint64_t sub_1000167E4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10001681C()
{
  sub_100013524(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100016824(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100016834()
{
  return swift_release();
}

unint64_t sub_10001683C()
{
  unint64_t result = qword_100363D60[0];
  if (!qword_100363D60[0])
  {
    sub_10000A3D0((uint64_t *)&unk_10035E800);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100363D60);
  }
  return result;
}

uint64_t sub_1000168B8()
{
  uint64_t result = type metadata accessor for Loader.State();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100016968()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Loader();
  sub_10016ADD8(0x74696E696544, (void *)0xE600000000000000, 0, v2, (uint64_t)&off_10031FE08);
  swift_release();
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 96);
  uint64_t v4 = type metadata accessor for Loader.State();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_100016A60()
{
  sub_100016968();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Loader()
{
  return sub_10000F2E4();
}

uint64_t type metadata accessor for Loader.State()
{
  return sub_10000F2E4();
}

uint64_t sub_100016AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t sub_100016AF0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_100016B6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  unint64_t v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4;
      }
      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    unint64_t v9 = v10 + v8;
  }
  uint64_t v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          unsigned int v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            uint64_t v18 = 4;
          }
          else
          {
            BOOL v20 = v19 != 0;
            BOOL v13 = v19 >= 0xFF;
            uint64_t v18 = 2;
            if (!v13) {
              uint64_t v18 = v20;
            }
          }
        }
        else
        {
          uint64_t v18 = 1;
        }
        v8 += v18;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
    }
  }
  else
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t sub_100016D64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 2, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *sub_100016E28(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4;
        }
        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_100016F78(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v5);
  int v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v15 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v15 > 0xFFFE)
        {
          uint64_t v12 = 4;
        }
        else
        {
          BOOL v16 = v15 != 0;
          BOOL v17 = v15 >= 0xFF;
          uint64_t v12 = 2;
          if (!v17) {
            uint64_t v12 = v16;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
      uint64_t v13 = v6 + 8;
      v14(a1, v5);
      unsigned int v10 = *(_DWORD *)(v13 + 76);
      size_t v11 = *(void *)(v13 + 56);
      if (v10 <= 1)
      {
        if (v11 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }
  return a1;
}

void *sub_100017148(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4;
        }
        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_100017298(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v5);
  int v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v15 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v15 > 0xFFFE)
        {
          uint64_t v12 = 4;
        }
        else
        {
          BOOL v16 = v15 != 0;
          BOOL v17 = v15 >= 0xFF;
          uint64_t v12 = 2;
          if (!v17) {
            uint64_t v12 = v16;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
      uint64_t v13 = v6 + 8;
      v14(a1, v5);
      unsigned int v10 = *(_DWORD *)(v13 + 76);
      size_t v11 = *(void *)(v13 + 56);
      if (v10 <= 1)
      {
        if (v11 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t sub_100017468(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 2;
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 1)
  {
    unsigned int v6 = 0;
    if (v7 <= 3)
    {
      unsigned int v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        uint64_t v8 = 4;
      }
      else
      {
        BOOL v10 = v9 != 0;
        BOOL v11 = v9 >= 0xFF;
        uint64_t v8 = 2;
        if (!v11) {
          uint64_t v8 = v10;
        }
      }
    }
    else
    {
      uint64_t v8 = 1;
    }
    v7 += v8;
  }
  if (!a2) {
    return 0;
  }
  int v12 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_30;
  }
  char v13 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)((char *)a1 + v7);
      if (!v14) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_30:
      if (v6)
      {
        unsigned int v19 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v19 >= 3) {
          return v19 - 2;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_30;
  }
LABEL_20:
  int v16 = (v14 - 1) << v13;
  if (v7 > 3) {
    int v16 = 0;
  }
  if (v7)
  {
    if (v7 <= 3) {
      int v17 = v7;
    }
    else {
      int v17 = 4;
    }
    switch(v17)
    {
      case 2:
        int v18 = *a1;
        break;
      case 3:
        int v18 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v18 = *(_DWORD *)a1;
        break;
      default:
        int v18 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v18 = 0;
  }
  return v6 + (v18 | v16) + 1;
}

void sub_10001765C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 2;
  size_t v9 = *(void *)(v6 + 64);
  if (v7 <= 1)
  {
    unsigned int v8 = 0;
    if (v9 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4;
      }
      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    v9 += v10;
  }
  BOOL v13 = a3 >= v8;
  unsigned int v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      unsigned int v18 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v18))
      {
        int v15 = 4;
      }
      else if (v18 >= 0x100)
      {
        int v15 = 2;
      }
      else
      {
        int v15 = v18 > 1;
      }
    }
    else
    {
      int v15 = 1;
    }
  }
  else
  {
    int v15 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v16 = ~v8 + a2;
    if (v9 < 4)
    {
      int v17 = (v16 >> (8 * v9)) + 1;
      if (v9)
      {
        int v19 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v15)
    {
      case 1:
        a1[v9] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v17;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v9] = v17;
        return;
      default:
        return;
    }
  }
  switch(v15)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1000178E0);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        BOOL v20 = *(void (**)(void))(v6 + 56);
        v20();
      }
      return;
  }
}

uint64_t sub_100017908(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 2);
}

uint64_t sub_100017938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 2);
}

double sub_100017968@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100019DC8((unint64_t *)&qword_10035C270, (void (*)(uint64_t))type metadata accessor for DwellBannerViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double result = *(double *)(v3 + 72);
  *a2 = result;
  return result;
}

uint64_t sub_100017A10()
{
  return swift_release();
}

id sub_100017B84()
{
  swift_bridgeObjectRetain();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v0;
}

id sub_100017BE0()
{
  sub_10000A38C(&qword_10035C250);
  AsyncStream.Continuation.finish()();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DwellBannerPresenter();
  return [super dealloc];
}

void sub_100017DF0()
{
  v16.receiver = v0;
  v16.super_class = (Class)type metadata accessor for DwellBannerPresenter();
  [super viewDidLoad];
  if (v0[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_experienceType] == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0) {
      goto LABEL_6;
    }
  }
  objc_super v2 = *(void **)&v0[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_childView];
  [v2 setAutoresizingMask:18];
  id v3 = [v0 view];
  if (!v3) {
    goto LABEL_9;
  }
  uint64_t v4 = v3;
  [v3 bounds];
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;

  [v2 setFrame:v6, v8, v10, v12];
  id v13 = [self clearColor];
  [v2 setBackgroundColor:v13];

LABEL_6:
  id v14 = [v0 view];
  if (v14)
  {
    int v15 = v14;
    [v14 addSubview:*(void *)&v0[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_childView]];

    return;
  }
  __break(1u);
LABEL_9:
  __break(1u);
}

void sub_100017FEC(uint64_t a1, char a2)
{
  id v3 = v2;
  v31.receiver = v3;
  v31.super_class = (Class)type metadata accessor for DwellBannerPresenter();
  [super viewDidMoveToWindow:a1 shouldAppearOrDisappear:a2 & 1];
  if (v3[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_experienceType])
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0) {
      return;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  double v7 = *(void **)&v3[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_childView];
  if (!a1)
  {
    v30.super.Class isa = (Class)[*(id *)&v3[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_childView] constraints];
    if (!v30.super.isa)
    {
      sub_100019E10(0, &qword_10036E720);
      static Array._unconditionallyBridgeFromObjectiveC(_:)();
      v30.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    [self deactivateConstraints:v30.super.isa];
    goto LABEL_13;
  }
  [*(id *)&v3[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_childView] setTranslatesAutoresizingMaskIntoConstraints:0];
  id v8 = [v3 view];
  if (!v8)
  {
    __break(1u);
    goto LABEL_16;
  }
  double v9 = v8;
  sub_100018C84(v7, 0.0);

  sub_10000A38C(&qword_10035C280);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10028F460;
  id v11 = [v7 centerXAnchor];
  id v12 = [v3 view];
  if (!v12)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v13 = v12;
  id v14 = [v12 SBUISA_systemApertureObstructedAreaLayoutGuide];

  id v15 = [v14 centerXAnchor];
  id v16 = [v11 constraintEqualToAnchor:v15];

  *(void *)(v10 + 32) = v16;
  id v17 = [v7 topAnchor];
  id v18 = [v3 view];
  if (!v18)
  {
LABEL_17:
    __break(1u);
    return;
  }
  int v19 = v18;
  id v20 = [v18 SBUISA_systemApertureObstructedAreaLayoutGuide];

  id v21 = [v20 topAnchor];
  id v22 = [v17 constraintEqualToAnchor:v21 constant:-60.0];

  *(void *)(v10 + 40) = v22;
  id v23 = [v7 widthAnchor];
  [v3 preferredContentSize];
  id v24 = [v23 constraintEqualToConstant:];

  *(void *)(v10 + 48) = v24;
  id v25 = [v7 heightAnchor];
  [v3 preferredContentSize];
  id v27 = [v25 constraintEqualToConstant:v26];

  *(void *)(v10 + 56) = v27;
  specialized Array._endMutation()();
  Swift::String v28 = self;
  sub_100019E10(0, &qword_10036E720);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v28 activateConstraints:isa];

  v30.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v28 activateConstraints:v30.super.isa];
LABEL_13:
}

void sub_1000184EC(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  swift_unknownObjectRetain();
  id v6 = a1;
  a4();
  swift_unknownObjectRelease();
}

void sub_1000185E4(void *a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  uint64_t v8 = sub_10000A38C(&qword_10035C250);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_10035C258);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, (uint64_t)a1 + OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_eventContinuation, v8);
  if (a4)
  {
    v19[1] = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19[2] = v16;
    char v20 = a5;
    swift_unknownObjectRetain();
    id v17 = a1;
    id v18 = a4;
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000187F4()
{
  return type metadata accessor for DwellBannerPresenter();
}

uint64_t type metadata accessor for DwellBannerPresenter()
{
  uint64_t result = qword_10035C228;
  if (!qword_10035C228) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10001887C()
{
  sub_100018A08(319, &qword_10035C238, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream);
  if (v0 <= 0x3F)
  {
    sub_100018A08(319, &qword_10035C240, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream.Continuation);
    if (v1 <= 0x3F)
    {
      sub_100018A58();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_100018A08(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for GenericBannerEvent);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_100018A58()
{
  if (!qword_10035C248)
  {
    type metadata accessor for ContinuousClock.Instant();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10035C248);
    }
  }
}

id sub_100018AB0(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, double a6, double a7)
{
  sub_10000D6E4(a1, a1[3]);
  uint64_t v14 = _bridgeAnythingToObjectiveC<A>(_:)();
  uint64_t v15 = a4[3];
  if (v15)
  {
    uint64_t v16 = sub_10000D6E4(a4, a4[3]);
    uint64_t v24 = a5;
    uint64_t v25 = a2;
    uint64_t v17 = a3;
    uint64_t v18 = *(void *)(v15 - 8);
    __chkstk_darwin(v16);
    char v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v18 + 16))(v20);
    uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v15);
    a3 = v17;
    a5 = v24;
    a2 = v25;
    sub_10000CC5C((uint64_t)a4);
  }
  else
  {
    uint64_t v21 = 0;
  }
  id v22 = [(id)swift_getObjCClassFromMetadata() constraintWithItem:v14 attribute:a2 relatedBy:a3 toItem:v21 attribute:a5 multiplier:a6 constant:a7];
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_10000CC5C((uint64_t)a1);
  return v22;
}

uint64_t sub_100018C84(void *a1, double a2)
{
  sub_10000A38C(&qword_10035C280);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10028F460;
  sub_100019E10(0, &qword_10036E720);
  uint64_t v6 = sub_100019E10(0, &qword_10035C288);
  uint64_t v19 = v6;
  uint64_t v17 = v6;
  v18[0] = v2;
  v16[0] = a1;
  id v7 = v2;
  id v8 = a1;
  *(void *)(v5 + 32) = sub_100018AB0(v18, 3, 0, v16, 3, 1.0, a2);
  uint64_t v19 = v6;
  uint64_t v17 = v6;
  v18[0] = v7;
  v16[0] = v8;
  id v9 = v7;
  id v10 = v8;
  *(void *)(v5 + 40) = sub_100018AB0(v18, 6, 0, v16, 6, 1.0, -a2);
  uint64_t v19 = v6;
  uint64_t v17 = v6;
  v18[0] = v9;
  v16[0] = v10;
  id v11 = v9;
  id v12 = v10;
  *(void *)(v5 + 48) = sub_100018AB0(v18, 4, 0, v16, 4, 1.0, -a2);
  uint64_t v19 = v6;
  uint64_t v17 = v6;
  v18[0] = v11;
  v16[0] = v12;
  id v13 = v11;
  id v14 = v12;
  *(void *)(v5 + 56) = sub_100018AB0(v18, 5, 0, v16, 5, 1.0, a2);
  v18[0] = v5;
  specialized Array._endMutation()();
  return v18[0];
}

void sub_100018E38()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035C290);
  uint64_t v26 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10035C250);
  uint64_t v25 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10035C298);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = (uint64_t *)&v0[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_requesterIdentifier];
  *id v12 = static String._fromUTF8Repairing(_:)();
  v12[1] = v13;
  *(void *)&v1[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_activeLayoutMode] = 1;
  if (qword_10035A4F0 != -1) {
    goto LABEL_9;
  }
  while (1)
  {
    if (byte_1003AC688 == 1)
    {
      if (qword_10035A520 != -1) {
        swift_once();
      }
      id v14 = *(id *)(qword_1003AC750 + 920);
      char v15 = sub_1000FF780();

      char v16 = v15 & 1;
    }
    else
    {
      char v16 = 1;
    }
    v1[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_experienceType] = v16;
    static String._fromUTF8Repairing(_:)();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v18 = [self bannerSourceForDestination:0 forRequesterIdentifier:v17];

    if (v18) {
      break;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  *(void *)&v1[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_bannerSource] = v18;
  uint64_t v19 = &v1[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_eventStream];
  uint64_t v24 = &v1[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_eventContinuation];
  uint64_t v20 = v26;
  (*(void (**)(char *, void, uint64_t))(v26 + 104))(v4, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v2);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v2);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v19, v11, v8);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v24, v7, v5);
  uint64_t v21 = &v1[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_endTime];
  uint64_t v22 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v1[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_posted] = 0;
  v1[OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_presenting] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100019284()
{
  if ((*((unsigned char *)v0 + OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_experienceType) & 1) == 0)
  {
    id v1 = [v0 view];
    if (v1)
    {
      uint64_t v2 = v1;
      id v3 = [v1 SBUISA_systemApertureObstructedAreaLayoutGuide];

      [v3 layoutFrame];
      CGFloat v5 = v4;
      CGFloat v7 = v6;
      CGFloat v9 = v8;
      CGFloat v11 = v10;

      v13.origin.x = v5;
      v13.origin.y = v7;
      v13.size.width = v9;
      v13.size.height = v11;
      CGRectGetHeight(v13);
      uint64_t KeyPath = swift_getKeyPath();
      __chkstk_darwin(KeyPath);
      sub_100019DC8((unint64_t *)&qword_10035C270, (void (*)(uint64_t))type metadata accessor for DwellBannerViewModel);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100019424()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10035C258);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  CGFloat v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v11 = xmmword_10028F470;
  char v12 = 4;
  sub_10000A38C(&qword_10035C250);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static OSSignpostID.exclusive.getter();
  static os_signpost_type_t.end.getter();
  if (qword_10035A528 != -1) {
    swift_once();
  }
  id v8 = (id)qword_1003AC758;
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v9 = sub_1001EA5B0();
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 ulog:40 message:v10];
}

uint64_t sub_1000196B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035C260);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  long long v11 = (char *)v21 - v10;
  uint64_t v12 = sub_10000A38C(&qword_10035C258);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  char v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = xmmword_10028F480;
  char v22 = 4;
  sub_10000A38C(&qword_10035C250);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  id v16 = sub_1001EA5B0();
  NSString v17 = String._bridgeToObjectiveC()();
  [v16 ulog:40 message:v17];

  *(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_presenting) = 1;
  sub_100019CA0(v1 + OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_endTime, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return sub_100019D08((uint64_t)v4);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
  static ContinuousClock.Instant.now.getter();
  sub_100019DC8(&qword_10035C268, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  char v19 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v9, v5);
  if (v19)
  {
    static ContinuousClock.Instant.now.getter();
    ContinuousClock.Instant.duration(to:)();
    v20(v9, v5);
    Duration.seconds.getter();
    Transaction.init(animation:)();
    withTransaction<A>(_:_:)();
    swift_release();
    static Animation.timingCurve(_:_:_:_:duration:)();
    withAnimation<A>(_:_:)();
    swift_release();
  }
  return ((uint64_t (*)(char *, uint64_t))v20)(v11, v5);
}

uint64_t sub_100019AD4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000A38C(&qword_10035C250);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10035C258);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  long long v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_eventContinuation, v4);
  if (a1)
  {
    v14[1] = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14[2] = v13;
    char v15 = 2;
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(unsigned char *)(v2 + OBJC_IVAR____TtC17proximitycontrold20DwellBannerPresenter_presenting) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100019CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10035C260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100019D08(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10035C260);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100019D68()
{
  return sub_10000E700();
}

uint64_t sub_100019D84()
{
  return sub_10000E86C();
}

uint64_t sub_100019DA8()
{
  return sub_10000E6F8(*(void *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_100019DC8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100019E10(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100019E4C()
{
  return sub_100019DA8();
}

uint64_t sub_100019E6C(uint64_t a1)
{
  if (a1 == 1) {
    return 0x6574736575716572;
  }
  v10[6] = v1;
  v10[7] = v2;
  if (a1 == 3) {
    return 0x6574656C706D6F63;
  }
  if (a1 == 2) {
    return 0x6E61676562;
  }
  swift_errorRetain();
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v10, "error( error=");
  HIWORD(v10[1]) = -4864;
  if (a1)
  {
    swift_errorRetain();
    sub_10000A38C((uint64_t *)&unk_100365D60);
    uint64_t v5 = String.init<A>(describing:)();
    unint64_t v7 = v6;
  }
  else
  {
    unint64_t v7 = 0xE300000000000000;
    uint64_t v5 = 7104878;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v9._id countAndFlagsBits = 10528;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  sub_10000BECC(a1);
  return v10[0];
}

uint64_t sub_100019FB0()
{
  return sub_100019E6C(*v0);
}

uint64_t sub_100019FB8(void *a1)
{
  id v2 = [a1 eventType];
  if (!v2) {
    return (uint64_t)[a1 error];
  }
  if (v2 == (id)1) {
    return 2;
  }
  if (v2 == (id)2) {
    return 3;
  }
  sub_10001A050();
  uint64_t result = swift_allocError();
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0xE000000000000000;
  *(unsigned char *)(v4 + 16) = 11;
  return result;
}

unint64_t sub_10001A050()
{
  unint64_t result = qword_10036C0E0;
  if (!qword_10036C0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C0E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaRemoteTransferProgressEvent()
{
  return &type metadata for MediaRemoteTransferProgressEvent;
}

uint64_t sub_10001A0B4(uint64_t a1)
{
  return a1;
}

uint64_t Edge2.start.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Edge2.end.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 60));
  swift_retain();
  return v2;
}

uint64_t Edge2.actions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Edge2.actions.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 64);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*Edge2.actions.modify())()
{
  return nullsub_1;
}

uint64_t Edge2.filters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Edge2.filters.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 68);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*Edge2.filters.modify())()
{
  return nullsub_1;
}

uint64_t Edge2.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Edge2.outputs.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 72);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*Edge2.outputs.modify())()
{
  return nullsub_1;
}

uint64_t Edge2.init(_:to:trigger:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v39 = a6;
  uint64_t v40 = a3;
  uint64_t v35 = a5;
  uint64_t v41 = a2;
  uint64_t v42 = a1;
  uint64_t v38 = a9;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v32 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  char v15 = (char *)&v31 - v14;
  NSString v33 = (char *)&v31 - v14;
  uint64_t v16 = *(void *)(a4 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v18 = __chkstk_darwin(v13);
  char v19 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v34 = (uint64_t)&v31 - v20;
  uint64_t v21 = *(void (**)(void))(v16 + 16);
  v21();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v40, v10);
  ((void (*)(char *, uint64_t, uint64_t))v21)(v19, v41, a4);
  unint64_t v22 = (*(unsigned __int8 *)(v11 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v23 = (v12 + *(unsigned __int8 *)(v16 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v24 = (char *)swift_allocObject();
  uint64_t v25 = v35;
  uint64_t v26 = v36;
  *((void *)v24 + 2) = a4;
  *((void *)v24 + 3) = v25;
  *((void *)v24 + 4) = v39;
  *((void *)v24 + 5) = v26;
  *((void *)v24 + 6) = v37;
  id v27 = &v24[v22];
  uint64_t v28 = v32;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v27, v33, v32);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v24[v23], v19, a4);
  Edge2.init(start:end:)(v34, (uint64_t)sub_10001AAEC, (uint64_t)v24, a4, v38);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v40, v28);
  char v29 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v29(v41, a4);
  return ((uint64_t (*)(uint64_t, uint64_t))v29)(v42, a4);
}

uint64_t sub_10001A550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v40 = a9;
  uint64_t v41 = a8;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  v36[1] = a1;
  uint64_t v37 = a3;
  uint64_t v12 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  uint64_t v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  char v19 = (char *)v36 - v18;
  uint64_t v20 = *(void *)(a5 - 8);
  __chkstk_darwin(v17);
  unint64_t v22 = (char *)v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a2, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v37, a4);
    uint64_t v24 = v39;
    uint64_t v23 = v40;
    uint64_t v25 = v38;
    uint64_t v26 = v41;
    End.init(_:)((uint64_t)v14, a4, v40);
    uint64_t v42 = a4;
    uint64_t v43 = a5;
    uint64_t v44 = v25;
    uint64_t v45 = v24;
    uint64_t v46 = v26;
    uint64_t v27 = type metadata accessor for End();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v23, 0, 1, v27);
  }
  else
  {
    uint64_t v30 = v37;
    uint64_t v29 = v38;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v19, a5);
    uint64_t v31 = v41;
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v30, a4);
      uint64_t v32 = v39;
      uint64_t v33 = v40;
      End.init(_:)((uint64_t)v14, a4, v40);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, a5);
      uint64_t v42 = a4;
      uint64_t v43 = a5;
      uint64_t v44 = v29;
      uint64_t v45 = v32;
      uint64_t v46 = v31;
      uint64_t v34 = type metadata accessor for End();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 0, 1, v34);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, a5);
      uint64_t v42 = a4;
      uint64_t v43 = a5;
      uint64_t v44 = v29;
      uint64_t v45 = v39;
      uint64_t v46 = v31;
      uint64_t v35 = type metadata accessor for End();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v40, 1, 1, v35);
    }
  }
}

uint64_t sub_10001A930()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(type metadata accessor for Optional() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 56) & ~v4;
  uint64_t v13 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(v1 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v5, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v5, v2);
  }
  uint64_t v10 = (v5 + v13 + v7) & ~v7;
  uint64_t v11 = v10 + v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v10, v1);

  return _swift_deallocObject(v0, v11, v4 | v7 | 7);
}

uint64_t sub_10001AAEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = v2[6];
  uint64_t v10 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v11 = (*(unsigned __int8 *)(v10 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (uint64_t)v2
      + ((v11 + *(void *)(v10 + 64) + *(unsigned __int8 *)(*(void *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80));

  return sub_10001A550(a1, (uint64_t)v2 + v11, v12, v5, v6, v7, v8, v9, a2);
}

uint64_t Edge2.init(start:end:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (int *)type metadata accessor for Edge2();
  uint64_t v11 = v10[16];
  swift_getFunctionTypeMetadata1();
  *(void *)(a5 + v11) = static Array._allocateUninitialized(_:)();
  uint64_t v12 = v10[17];
  swift_getFunctionTypeMetadata1();
  *(void *)(a5 + v12) = static Array._allocateUninitialized(_:)();
  uint64_t v13 = v10[18];
  type metadata accessor for Array();
  swift_getFunctionTypeMetadata1();
  *(void *)(a5 + v13) = static Array._allocateUninitialized(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v15 = (void *)(a5 + v10[15]);
  *uint64_t v15 = a2;
  v15[1] = a3;
  return result;
}

uint64_t type metadata accessor for Edge2()
{
  return swift_getGenericMetadata();
}

uint64_t Edge2.init(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v24 = a9;
  uint64_t v17 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  char v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a1, v20);
  uint64_t v21 = (void *)swift_allocObject();
  _OWORD v21[2] = a4;
  v21[3] = a5;
  v21[4] = a6;
  v21[5] = a7;
  v21[6] = a8;
  v21[7] = a2;
  v21[8] = a3;
  Edge2.init(start:end:)((uint64_t)v19, (uint64_t)sub_10001B768, (uint64_t)v21, a4, v24);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a4);
}

uint64_t sub_10001AEC4@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v35 = a8;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v31 - v14;
  uint64_t v16 = *(void *)(a3 - 8);
  uint64_t v17 = __chkstk_darwin(v13);
  char v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v31 - v20;
  a2(a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t v36 = a3;
    uint64_t v37 = v31;
    uint64_t v38 = v32;
    uint64_t v39 = v33;
    uint64_t v40 = v34;
    uint64_t v22 = type metadata accessor for End();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v35, 1, 1, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v15, a3);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, a3);
    uint64_t v25 = v34;
    uint64_t v24 = v35;
    uint64_t v26 = (uint64_t)v19;
    uint64_t v28 = v31;
    uint64_t v27 = v32;
    uint64_t v29 = v33;
    End.init(_:)(v26, a3, v35);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, a3);
    uint64_t v36 = a3;
    uint64_t v37 = v28;
    uint64_t v38 = v27;
    uint64_t v39 = v29;
    uint64_t v40 = v25;
    uint64_t v30 = type metadata accessor for End();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v24, 0, 1, v30);
  }
}

uint64_t Edge2.init(_:trigger:end:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v38 = a8;
  uint64_t v39 = a3;
  uint64_t v34 = a7;
  uint64_t v40 = a4;
  uint64_t v41 = a9;
  uint64_t v36 = a2;
  uint64_t v37 = a1;
  uint64_t v14 = *(void *)(a6 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v35 = a10;
  uint64_t v16 = __chkstk_darwin(a1);
  uint64_t v17 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void (**)(char *))(v19 + 16);
  uint64_t v33 = v23;
  v22(v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a2, a6);
  unint64_t v24 = (*(unsigned __int8 *)(v14 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v25 = (v15 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = (char *)swift_allocObject();
  *((void *)v26 + 2) = a5;
  *((void *)v26 + 3) = a6;
  uint64_t v27 = v38;
  *((void *)v26 + 4) = a7;
  *((void *)v26 + 5) = v27;
  *((void *)v26 + 6) = v35;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v26[v24], v17, a6);
  uint64_t v28 = &v26[v25];
  uint64_t v29 = v40;
  *(void *)uint64_t v28 = v39;
  *((void *)v28 + 1) = v29;
  uint64_t v30 = v33;
  Edge2.init(start:end:)((uint64_t)v21, (uint64_t)sub_10001B81C, (uint64_t)v26, v33, v41);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v36, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v37, v30);
}

uint64_t sub_10001B404@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t a3@<X8>)
{
  if (dispatch thunk of static Equatable.== infix(_:_:)()) {
    return a2(a1);
  }
  uint64_t v7 = type metadata accessor for End();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a3, 1, 1, v7);
}

BOOL sub_10001B4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 32);
  v14[0] = *(_OWORD *)(a2 + 16);
  v14[1] = v6;
  uint64_t v15 = v5;
  uint64_t v7 = type metadata accessor for End();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - v10;
  (*(void (**)(uint64_t))(v2 + *(int *)(a2 + 60)))(a1);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v11, 1, v7) != 1;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v12;
}

uint64_t sub_10001B634(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v2 + *(int *)(a2 + 60)))();
}

uint64_t Edge2.asEdges()(uint64_t a1)
{
  type metadata accessor for _ContiguousArrayStorage();
  uint64_t v3 = *(void *)(a1 - 8);
  swift_allocObject();
  uint64_t v4 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  type metadata accessor for Array();
  return v4;
}

uint64_t sub_10001B730()
{
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10001B768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001AEC4(a1, *(void (**)(uint64_t))(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), a2);
}

uint64_t sub_10001B77C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_10001B81C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001B404(a1, *(uint64_t (**)(uint64_t))(v2+ ((*(void *)(*(void *)(*(void *)(v2 + 24) - 8) + 64)+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 24) - 8) + 80)+ 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 24) - 8)+ 80))+ 7) & 0xFFFFFFFFFFFFFFF8)), a2);
}

uint64_t sub_10001B8B0(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10001B8EC(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 48);
}

uint64_t sub_10001B8F4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 40);
}

uint64_t sub_10001B8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 64);
}

uint64_t sub_10001B904()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10001B9B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v13 = *v14;
    uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v15 = *v16;
    *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10001BB18(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10001BBB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10001BC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10001BD74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_10001BE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *int v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v10 = *(void *)v9;
  swift_bridgeObjectRelease();
  uint64_t v11 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10001BEF0(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10001C054);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_10001C068(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x10001C26CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

char *sub_10001C294()
{
  uint64_t v1 = OBJC_IVAR____TtC17proximitycontrold16BacklightMonitor_backlight;
  uint64_t v2 = self;
  uint64_t v3 = v0;
  id v4 = [v2 sharedBacklight];
  *(void *)&v0[v1] = v4;
  id v5 = [v4 backlightState];
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold16BacklightMonitor__backlightState;
  sub_10000A38C(&qword_10035C448);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = v5;
  *(void *)&v3[v6] = v7;

  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for BacklightMonitor();
  unsigned int v8 = (char *)[super init];
  [*(id *)&v8[OBJC_IVAR____TtC17proximitycontrold16BacklightMonitor_backlight] addObserver:v8];
  return v8;
}

id sub_10001C39C()
{
  [*(id *)&v0[OBJC_IVAR____TtC17proximitycontrold16BacklightMonitor_backlight] removeObserver:v0];
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BacklightMonitor();
  return [super dealloc];
}

uint64_t type metadata accessor for BacklightMonitor()
{
  return self;
}

unint64_t sub_10001C550(uint64_t a1)
{
  unint64_t result = sub_10001C578();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10001C578()
{
  unint64_t result = qword_10035C438;
  if (!qword_10035C438)
  {
    type metadata accessor for BacklightMonitor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035C438);
  }
  return result;
}

uint64_t sub_10001C5CC(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  _StringGuts.grow(_:)(31);
  v6._id countAndFlagsBits = 0xD000000000000025;
  v6._object = (void *)0x80000001002B2AF0;
  String.append(_:)(v6);
  v7._object = (void *)0x80000001002B2B20;
  v7._id countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v7);
  type metadata accessor for BLSBacklightState(0);
  _print_unlocked<A, B>(_:_:)();
  v8._id countAndFlagsBits = 0x3D746E657665202CLL;
  v8._object = (void *)0xE800000000000000;
  String.append(_:)(v8);
  if (a2)
  {
    sub_10001C798();
    id v9 = a2;
    uint64_t v10 = String.init<A>(describing:)();
    unint64_t v12 = v11;
  }
  else
  {
    unint64_t v12 = 0xE300000000000000;
    uint64_t v10 = 7104878;
  }
  unint64_t v13 = v12;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  id v14 = sub_1001F647C();
  swift_bridgeObjectRetain();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 ulog:40 message:v15];
  swift_bridgeObjectRelease();

  *(void *)(*(void *)(v3 + OBJC_IVAR____TtC17proximitycontrold16BacklightMonitor__backlightState) + 24) = a1;
  swift_retain();
  sub_100104E14();
  CurrentValueSubject.send(_:)();
  swift_release();
  return swift_release();
}

unint64_t sub_10001C798()
{
  unint64_t result = qword_10035C440;
  if (!qword_10035C440)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10035C440);
  }
  return result;
}

uint64_t sub_10001C7D8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001D790(v0, qword_10035C450);
  sub_10001D758(v0, (uint64_t)qword_10035C450);
  return Logger.init(subsystem:category:)();
}

void sub_10001C884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = (uint64_t *)&v4[OBJC_IVAR____TtC17proximitycontrold30HandoffFeedbackBannerPresenter_requesterIdentifier];
  uint64_t v10 = v4;
  *id v9 = static String._fromUTF8Repairing(_:)();
  v9[1] = v11;
  uint64_t v12 = OBJC_IVAR____TtC17proximitycontrold30HandoffFeedbackBannerPresenter_presentableUserInfo;
  *(void *)&v10[v12] = sub_1002687C0((uint64_t)_swiftEmptyArrayStorage);
  static String._fromUTF8Repairing(_:)();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [self bannerSourceForDestination:0 forRequesterIdentifier:v13];

  if (v14)
  {
    *(void *)&v10[OBJC_IVAR____TtC17proximitycontrold30HandoffFeedbackBannerPresenter_bannerSource] = v14;
    if (qword_10035A4E0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10001D758(v15, (uint64_t)qword_10035C450);
    int v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Init", v18, 2u);
      swift_slowDealloc();
    }

    uint64_t v19 = &v10[OBJC_IVAR____TtC17proximitycontrold30HandoffFeedbackBannerPresenter_requestIdentifier];
    *(void *)uint64_t v19 = a1;
    *((void *)v19 + 1) = a2;
    uint64_t v20 = &v10[OBJC_IVAR____TtC17proximitycontrold30HandoffFeedbackBannerPresenter_actionHandler];
    *(void *)uint64_t v20 = a3;
    *((void *)v20 + 1) = a4;
    sub_100019E10(0, (unint64_t *)&unk_10035C580);
    uint64_t v53 = a4;
    swift_retain();
    id v21 = sub_1001D0B04();
    id v22 = sub_1001D0B04();
    id v23 = [objc_allocWithZone((Class)PLPillView) initWithLeadingAccessoryView:v21 trailingAccessoryView:v22];
    *(void *)&v10[OBJC_IVAR____TtC17proximitycontrold30HandoffFeedbackBannerPresenter_pillView] = v23;

    v55.receiver = v10;
    v55.super_class = (Class)type metadata accessor for HandoffFeedbackBannerPresenter();
    unint64_t v24 = (char *)[super initWithNibName:0 bundle:0];
    [v21 addTarget:v24 action:"thumbsDown" forControlEvents:64];
    [v22 addTarget:v24 action:"thumbsUp" forControlEvents:64];
    id v25 = [objc_allocWithZone((Class)UITapGestureRecognizer) initWithTarget:v24 action:"bannerTap"];
    uint64_t v26 = OBJC_IVAR____TtC17proximitycontrold30HandoffFeedbackBannerPresenter_pillView;
    uint64_t v27 = *(void **)&v24[OBJC_IVAR____TtC17proximitycontrold30HandoffFeedbackBannerPresenter_pillView];
    [v27 addGestureRecognizer:v25];
    sub_10000A38C(&qword_10035C280);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_10028F670;
    id v29 = objc_allocWithZone((Class)PLPillContentItem);
    id v30 = v27;
    NSString v31 = String._bridgeToObjectiveC()();
    id v32 = [v29 initWithText:v31];

    *(void *)(v28 + 32) = v32;
    id v33 = objc_allocWithZone((Class)PLPillContentItem);
    NSString v34 = String._bridgeToObjectiveC()();
    id v35 = [v33 initWithText:v34 style:5];

    *(void *)(v28 + 40) = v35;
    uint64_t v54 = v28;
    specialized Array._endMutation()();
    sub_100019E10(0, qword_10035C590);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v30 setCenterContentItems:isa];

    id v37 = [*(id *)&v24[v26] leadingAccessoryView];
    if (v37)
    {
      uint64_t v38 = v37;
      [v37 setHidden:0];
    }
    id v39 = [*(id *)&v24[v26] trailingAccessoryView:v53, v54];
    if (v39)
    {
      uint64_t v40 = v39;
      [v39 setHidden:0];
    }
    uint64_t v41 = *(void **)&v24[v26];
    [v41 setAutoresizingMask:18];
    id v42 = v41;
    id v43 = [v24 view];
    if (v43)
    {
      uint64_t v44 = v43;
      [v43 bounds];
      double v46 = v45;
      double v48 = v47;
      double v50 = v49;
      double v52 = v51;

      [v42 setFrame:v46, v48, v50, v52];
      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_10001CE24()
{
  uint64_t v1 = v0;
  if (qword_10035A4E0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10001D758(v2, (uint64_t)qword_10035C450);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deinit", v5, 2u);
    swift_slowDealloc();
  }

  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for HandoffFeedbackBannerPresenter();
  return [super dealloc];
}

void sub_10001D0B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC17proximitycontrold30HandoffFeedbackBannerPresenter_bannerSource];
  id v17 = 0;
  id v3 = [v2 layoutDescriptionWithError:&v17];
  if (v3)
  {
    os_log_type_t v4 = v3;
    id v5 = v17;
    [v4 presentationSize];
    double v7 = v6;
    double v9 = v8;
    [v4 containerSize];
    [v1 preferredContentSizeWithPresentationSize:v7 containerSize:v9];
    [v1 setPreferredContentSize:];
    sub_1002687C0((uint64_t)_swiftEmptyArrayStorage);
    sub_10000A38C(&qword_100367E50);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v17 = 0;
    unsigned __int8 v13 = [v2 postPresentable:v1 options:1 userInfo:isa error:&v17];

    if (v13)
    {
      id v14 = v17;
    }
    else
    {
      id v16 = v17;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    id v15 = v17;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_10001D288()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold30HandoffFeedbackBannerPresenter_bannerSource);
  NSString v2 = String._bridgeToObjectiveC()();
  if (qword_10035A560 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1003AC7D0;
  sub_1002687C0((uint64_t)_swiftEmptyArrayStorage);
  sub_10000A38C(&qword_100367E50);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = 0;
  id v5 = [v1 revokePresentableWithRequestIdentifier:v2 reason:v3 animated:1 userInfo:isa error:&v8];

  if (v5)
  {
    id v6 = v8;
  }
  else
  {
    id v7 = v8;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_10001D4D8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void (**)(uint64_t *))&a1[OBJC_IVAR____TtC17proximitycontrold30HandoffFeedbackBannerPresenter_actionHandler];
  uint64_t v5 = a3;
  long long v6 = 0u;
  long long v7 = 0u;
  char v8 = 3;
  os_log_type_t v4 = a1;
  v3(&v5);
  sub_10001DD38((uint64_t)&v5);
}

void sub_10001D5E4(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6)
{
  swift_unknownObjectRetain();
  id v10 = a4;
  id v11 = a1;
  sub_10001D8FC(a4, a5, a6);
  swift_unknownObjectRelease();
}

uint64_t type metadata accessor for HandoffFeedbackBannerPresenter()
{
  return self;
}

uint64_t sub_10001D758(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *sub_10001D790(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void sub_10001D7F4()
{
  uint64_t v1 = (uint64_t *)&v0[OBJC_IVAR____TtC17proximitycontrold30HandoffFeedbackBannerPresenter_requesterIdentifier];
  *uint64_t v1 = static String._fromUTF8Repairing(_:)();
  v1[1] = v2;
  uint64_t v3 = OBJC_IVAR____TtC17proximitycontrold30HandoffFeedbackBannerPresenter_presentableUserInfo;
  *(void *)&v0[v3] = sub_1002687C0((uint64_t)&_swiftEmptyArrayStorage);
  static String._fromUTF8Repairing(_:)();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [self bannerSourceForDestination:0 forRequesterIdentifier:v4];

  if (!v5) {
    __break(1u);
  }
  *(void *)&v0[OBJC_IVAR____TtC17proximitycontrold30HandoffFeedbackBannerPresenter_bannerSource] = v5;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10001D8FC(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  double v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10035A4E0 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_10001D758(v6, (uint64_t)qword_10035C450);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  id v11 = a1;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v12, v13))
  {

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v14 = swift_slowAlloc();
  uint64_t v19 = swift_slowAlloc();
  uint64_t v21 = v19;
  *(_DWORD *)uint64_t v14 = 136315394;
  uint64_t v20 = sub_100166E34(a2, a3, &v21);
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v14 + 12) = 2080;
  if (a1)
  {
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = sub_100166E34(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  __break(1u);
  return result;
}

void sub_10001DB90(uint64_t a1, unint64_t a2)
{
  if (qword_10035A4E0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10001D758(v4, (uint64_t)qword_10035C450);
  oslog = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    sub_100166E34(a1, a2, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "%s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_10001DD38(uint64_t a1)
{
  return a1;
}

unint64_t SBUISystemApertureLayoutMode.description.getter(uint64_t a1)
{
  uint64_t v1 = a1 + 1;
  unint64_t result = 0x746361706D6F63;
  switch(v1)
  {
    case 0:
      unint64_t result = 0x6465766F6D6572;
      break;
    case 1:
      unint64_t result = 0x6C616974696E69;
      break;
    case 2:
      unint64_t result = 0x6576697463616E69;
      break;
    case 3:
      unint64_t result = 0x6C616D696E696DLL;
      break;
    case 4:
      return result;
    case 5:
      unint64_t result = 0x6D6F74737563;
      break;
    default:
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      v3._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      unint64_t result = 0xD000000000000011;
      break;
  }
  return result;
}

unint64_t sub_10001DEE4()
{
  return SBUISystemApertureLayoutMode.description.getter(*v0);
}

ValueMetadata *type metadata accessor for AnalyticsEvent()
{
  return &type metadata for AnalyticsEvent;
}

uint64_t sub_10001DEFC()
{
  return swift_initClassMetadata2();
}

BOOL sub_10001DF58(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void *sub_10001DF70@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_10001DF90(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10001DF9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ExperienceEvent(0);
  uint64_t v3 = __chkstk_darwin(v2);
  os_log_type_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v8 = type metadata accessor for HandoffEvent();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SessionEvent();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v21 - v15;
  sub_10001E7D0(a1, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    uint64_t v18 = type metadata accessor for HandoffEvent;
    uint64_t v19 = (uint64_t)v10;
LABEL_6:
    sub_10001E89C(v19, (uint64_t (*)(void))v18);
    return 1;
  }
  sub_10000A38C(&qword_100367650);
  swift_bridgeObjectRelease();
  sub_10001E834((uint64_t)v10, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SessionEvent);
  sub_10001E834((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SessionEvent);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v18 = type metadata accessor for SessionEvent;
    uint64_t v19 = (uint64_t)v14;
    goto LABEL_6;
  }
  sub_10001E834((uint64_t)v14, (uint64_t)v7, type metadata accessor for ExperienceEvent);
  sub_10001E834((uint64_t)v7, (uint64_t)v5, type metadata accessor for ExperienceEvent);
  BOOL v17 = swift_getEnumCaseMultiPayload() != 1;
  sub_10001E89C((uint64_t)v5, type metadata accessor for ExperienceEvent);
  return v17;
}

uint64_t sub_10001E230()
{
  uint64_t v1 = type metadata accessor for Handoff3TelemetryManager();
  sub_10016ADD8(0x74696E696544, (void *)0xE600000000000000, 0, v1, (uint64_t)&off_100320198);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10001E2EC()
{
  sub_10001E230();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Handoff3TelemetryManager()
{
  return sub_10000F2E4();
}

uint64_t sub_10001E338()
{
  _StringGuts.grow(_:)(106);
  v1._id countAndFlagsBits = 0xD000000000000029;
  v1._object = (void *)0x80000001002B2EC0;
  String.append(_:)(v1);
  swift_beginAccess();
  if ((*(void *)(v0 + 56) & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  v2._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._object = (void *)0x80000001002B2EF0;
  v3._id countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v3);
  swift_beginAccess();
  v4._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x80000001002B2F10;
  v5._id countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v5);
  swift_beginAccess();
  v6._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x80000001002B2F30;
  v7._id countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v7);
  swift_beginAccess();
  v8._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t getEnumTagSinglePayload for CallServicesUIEffect(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for InitialUIType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001E6C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_10001E6EC(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for InitialUIType()
{
  return &type metadata for InitialUIType;
}

unint64_t sub_10001E70C()
{
  unint64_t result = qword_10035C618;
  if (!qword_10035C618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035C618);
  }
  return result;
}

uint64_t sub_10001E760()
{
  return sub_10001E338();
}

uint64_t type metadata accessor for HandoffEvent()
{
  uint64_t result = qword_10035C690;
  if (!qword_10035C690) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001E7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HandoffEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001E834(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001E89C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id *sub_10001E8FC(id *a1, id *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = (char *)*a2;
    *a1 = *a2;
    a1 = (id *)&v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
    return a1;
  }
  uint64_t v6 = *(void *)(a3 - 8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 3)
  {
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(unsigned char *)a1 = *(unsigned char *)a2;
        id v8 = a2[2];
        a1[1] = a2[1];
        a1[2] = v8;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(v6 + 64));
      }
      return a1;
    }
    uint64_t v13 = type metadata accessor for SessionEvent();
    int v14 = swift_getEnumCaseMultiPayload();
    if (v14 == 3)
    {
      id v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      swift_bridgeObjectRetain();
    }
    else if (v14 == 1)
    {
      uint64_t v25 = type metadata accessor for ExperienceEvent(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v26 = (char *)*a2;
          uint64_t v27 = (uint64_t)a2[1];
          char v28 = *((unsigned char *)a2 + 16);
          sub_10001F9E8((uint64_t)*a2, v27, v28);
          *a1 = v26;
          a1[1] = (id)v27;
          *((unsigned char *)a1 + 16) = v28;
          goto LABEL_60;
        case 1u:
          double v46 = (char *)*a2;
          uint64_t v47 = (uint64_t)a2[1];
          uint64_t v48 = (uint64_t)a2[2];
          uint64_t v49 = (uint64_t)a2[3];
          uint64_t v51 = (uint64_t)a2[4];
          uint64_t v50 = (uint64_t)a2[5];
          uint64_t v164 = (uint64_t)a2[6];
          unsigned __int8 v158 = *((unsigned char *)a2 + 56);
          sub_10001FA00((uint64_t)*a2, v47, v48, v49, v51, v50, v164, v158);
          *a1 = v46;
          a1[1] = (id)v47;
          a1[2] = (id)v48;
          a1[3] = (id)v49;
          a1[4] = (id)v51;
          a1[5] = (id)v50;
          a1[6] = (id)v164;
          *((unsigned char *)a1 + 56) = v158;
          goto LABEL_60;
        case 4u:
          double v52 = (char *)*a2;
          unint64_t v53 = (unint64_t)a2[1];
          id v54 = a2[2];
          uint64_t v55 = (uint64_t)a2[3];
          uint64_t v56 = (uint64_t)a2[4];
          uint64_t v57 = (uint64_t)a2[5];
          uint64_t v165 = (uint64_t)a2[6];
          char v159 = *((unsigned char *)a2 + 56);
          sub_10001FAFC((uint64_t)*a2, v53, v54, v55, v56, v57, v165, v159);
          *a1 = v52;
          a1[1] = (id)v53;
          a1[2] = v54;
          a1[3] = (id)v55;
          a1[4] = (id)v56;
          a1[5] = (id)v57;
          a1[6] = (id)v165;
          *((unsigned char *)a1 + 56) = v159;
          goto LABEL_60;
        case 5u:
          uint64_t v58 = (char *)*a2;
          uint64_t v59 = (uint64_t)a2[1];
          uint64_t v60 = (uint64_t)a2[2];
          uint64_t v61 = (uint64_t)a2[3];
          uint64_t v62 = (uint64_t)a2[4];
          uint64_t v63 = (uint64_t)a2[5];
          uint64_t v166 = (uint64_t)a2[6];
          char v160 = *((unsigned char *)a2 + 56);
          sub_10001FBD0((uint64_t)*a2, v59, v60, v61, v62, v63, v166, v160);
          *a1 = v58;
          a1[1] = (id)v59;
          a1[2] = (id)v60;
          a1[3] = (id)v61;
          a1[4] = (id)v62;
          a1[5] = (id)v63;
          a1[6] = (id)v166;
          *((unsigned char *)a1 + 56) = v160;
          goto LABEL_60;
        case 8u:
          uint64_t v64 = type metadata accessor for TransferEvent();
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              uint64_t v65 = (char *)*a2;
              swift_errorRetain();
              *a1 = v65;
              goto LABEL_59;
            case 2u:
            case 3u:
              *(_OWORD *)a1 = *(_OWORD *)a2;
              id v72 = a2[3];
              a1[2] = a2[2];
              a1[3] = v72;
              id v73 = a2[5];
              a1[4] = a2[4];
              a1[5] = v73;
              a1[6] = a2[6];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              goto LABEL_59;
            case 4u:
              unint64_t v74 = (unint64_t)a2[2];
              if (v74 - 7 >= 2 && v74 >= 7)
              {
                *(_OWORD *)a1 = *(_OWORD *)a2;
                id v92 = a2[3];
                id v93 = a2[4];
                a1[2] = (id)v74;
                a1[3] = v92;
                id v94 = a2[5];
                id v95 = a2[6];
                a1[4] = v93;
                a1[5] = v94;
                a1[6] = v95;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                long long v75 = *((_OWORD *)a2 + 1);
                *(_OWORD *)a1 = *(_OWORD *)a2;
                *((_OWORD *)a1 + 1) = v75;
                *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
                a1[6] = a2[6];
              }
              uint64_t v96 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
              uint64_t v97 = (char *)a1 + v96;
              unint64_t v98 = (char *)a2 + v96;
              uint64_t v99 = type metadata accessor for Date();
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v99 - 8) + 16))(v97, v98, v99);
              goto LABEL_59;
            case 5u:
              char v76 = (char *)*a2;
              sub_10001FC30((unint64_t)*a2);
              *a1 = v76;
LABEL_59:
              swift_storeEnumTagMultiPayload();
              break;
            default:
              memcpy(a1, a2, *(void *)(*(void *)(v64 - 8) + 64));
              break;
          }
          goto LABEL_60;
        case 9u:
          uint64_t v66 = (char *)*a2;
          if ((char *)*a2 - 1 >= (char *)3) {
            swift_errorRetain();
          }
          *a1 = v66;
LABEL_60:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v25 - 8) + 64));
          break;
      }
    }
    else
    {
      if (v14)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
LABEL_89:
        uint64_t v148 = *(int *)(sub_10000A38C(&qword_100367650) + 48);
        unint64_t v149 = (id *)((char *)a1 + v148);
        unint64_t v150 = (id *)((char *)a2 + v148);
        uint64_t v151 = v150[1];
        *unint64_t v149 = *v150;
        v149[1] = v151;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      uint64_t v15 = type metadata accessor for ExperienceEffect(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v16 = (char *)*a2;
          uint64_t v17 = (uint64_t)a2[1];
          char v18 = *((unsigned char *)a2 + 16);
          sub_10001F894((uint64_t)*a2, v17, v18);
          *a1 = v16;
          a1[1] = (id)v17;
          *((unsigned char *)a1 + 16) = v18;
          goto LABEL_66;
        case 3u:
          id v29 = *a2;
          char v30 = *((unsigned char *)a2 + 8);
          *a1 = *a2;
          *((unsigned char *)a1 + 8) = v30;
          a1[2] = a2[2];
          id v31 = v29;
          swift_retain();
          goto LABEL_66;
        case 6u:
          uint64_t v32 = type metadata accessor for NoticeEffect();
          int v33 = swift_getEnumCaseMultiPayload();
          if (v33 == 2)
          {
            id v67 = a2[1];
            *a1 = *a2;
            a1[1] = v67;
            swift_bridgeObjectRetain();
          }
          else if (v33 == 1)
          {
            id v68 = a2[2];
            if (v68 == (id)1)
            {
              *(_OWORD *)a1 = *(_OWORD *)a2;
              a1[2] = a2[2];
            }
            else
            {
              id v69 = *a2;
              char v70 = *((unsigned char *)a2 + 8);
              *a1 = *a2;
              *((unsigned char *)a1 + 8) = v70;
              a1[2] = v68;
              id v71 = v69;
              swift_retain();
            }
          }
          else
          {
            if (v33)
            {
              memcpy(a1, a2, *(void *)(*(void *)(v32 - 8) + 64));
              goto LABEL_66;
            }
            id v34 = a2[1];
            *a1 = *a2;
            a1[1] = v34;
            *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
            id v35 = (int *)type metadata accessor for NoticeContext(0);
            uint64_t v36 = v35[6];
            __dst = (uint64_t *)((char *)a1 + v36);
            id v37 = (uint64_t *)((char *)a2 + v36);
            uint64_t v38 = type metadata accessor for NoticeTapAction(0);
            swift_bridgeObjectRetain();
            int v39 = swift_getEnumCaseMultiPayload();
            if (v39 == 1)
            {
              uint64_t v77 = type metadata accessor for URL();
              (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v77 - 8) + 16))(__dst, v37, v77);
              swift_storeEnumTagMultiPayload();
            }
            else if (v39)
            {
              memcpy(__dst, v37, *(void *)(*(void *)(v38 - 8) + 64));
            }
            else
            {
              uint64_t v40 = *v37;
              unint64_t v41 = v37[1];
              sub_10001F8BC(v40, v41);
              uint64_t *__dst = v40;
              __dst[1] = v41;
              swift_storeEnumTagMultiPayload();
            }
            *((unsigned char *)a1 + v35[7]) = *((unsigned char *)a2 + v35[7]);
            uint64_t v78 = v35[8];
            unint64_t v79 = (id *)((char *)a1 + v78);
            uint64_t v80 = (id *)((char *)a2 + v78);
            type metadata accessor for NoticeContent(0);
            if (swift_getEnumCaseMultiPayload() == 3)
            {
              uint64_t v84 = v80[1];
              *unint64_t v79 = *v80;
              v79[1] = v84;
              uint64_t v154 = type metadata accessor for ShareableContentExposedContext(0);
              uint64_t v85 = *(int *)(v154 + 20);
              uint64_t v86 = (void *)((char *)v79 + v85);
              v87 = (char *)v80 + v85;
              uint64_t v88 = *(void *)((char *)v80 + v85 + 8);
              *uint64_t v86 = *(void *)((char *)v80 + v85);
              v86[1] = v88;
              uint64_t v89 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
              uint64_t v167 = (char *)v86 + v89;
              __dsta = &v87[v89];
              uint64_t v90 = type metadata accessor for URL();
              uint64_t v152 = *(void *)(v90 - 8);
              unint64_t v153 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v152 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v153(__dsta, 1, v90))
              {
                uint64_t v91 = type metadata accessor for ShareableContentType(0);
                memcpy(v167, __dsta, *(void *)(*(void *)(v91 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v167, __dsta, v90);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v152 + 56))(v167, 0, 1, v90);
              }
              uint64_t v100 = *(int *)(v154 + 24);
              uint64_t v101 = (void *)((char *)v79 + v100);
              v102 = (void *)((char *)v80 + v100);
              uint64_t v103 = v102[1];
              *uint64_t v101 = *v102;
              v101[1] = v103;
            }
            else
            {
              uint64_t v81 = v80[1];
              *unint64_t v79 = *v80;
              v79[1] = v81;
              uint64_t v82 = v80[2];
              uint64_t v83 = v80[3];
              v79[2] = v82;
              v79[3] = v83;
              swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRetain();
            swift_storeEnumTagMultiPayload();
          }
          swift_storeEnumTagMultiPayload();
LABEL_66:
          swift_storeEnumTagMultiPayload();
LABEL_67:
          uint64_t v104 = *(int *)(sub_10000A38C((uint64_t *)&unk_1003676C0) + 48);
          uint64_t v105 = (char *)a1 + v104;
          uint64_t v106 = (char *)a2 + v104;
          uint64_t v107 = type metadata accessor for ExperienceEvent(0);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
              uint64_t v108 = *(void *)v106;
              uint64_t v109 = *((void *)v106 + 1);
              char v110 = v106[16];
              sub_10001F9E8(v108, v109, v110);
              *(void *)uint64_t v105 = v108;
              *((void *)v105 + 1) = v109;
              v105[16] = v110;
              goto LABEL_87;
            case 1u:
              uint64_t v111 = *(void *)v106;
              uint64_t v112 = *((void *)v106 + 1);
              uint64_t v114 = *((void *)v106 + 2);
              uint64_t v113 = *((void *)v106 + 3);
              uint64_t v115 = *((void *)v106 + 5);
              uint64_t v161 = v115;
              uint64_t v168 = *((void *)v106 + 4);
              uint64_t v116 = *((void *)v106 + 6);
              uint64_t v155 = v116;
              unsigned __int8 v117 = v106[56];
              sub_10001FA00(v111, v112, v114, v113, v168, v115, v116, v117);
              *(void *)uint64_t v105 = v111;
              *((void *)v105 + 1) = v112;
              *((void *)v105 + 2) = v114;
              *((void *)v105 + 3) = v113;
              *((void *)v105 + 4) = v168;
              *((void *)v105 + 5) = v161;
              *((void *)v105 + 6) = v155;
              v105[56] = v117;
              goto LABEL_87;
            case 4u:
              uint64_t v118 = *(void *)v106;
              unint64_t v119 = *((void *)v106 + 1);
              uint64_t v120 = *((void *)v106 + 2);
              uint64_t v121 = *((void *)v106 + 3);
              uint64_t v122 = *((void *)v106 + 5);
              uint64_t v162 = v122;
              uint64_t v169 = *((void *)v106 + 4);
              uint64_t v123 = *((void *)v106 + 6);
              uint64_t v156 = v123;
              char v124 = v106[56];
              sub_10001FAFC(v118, v119, v120, v121, v169, v122, v123, v124);
              *(void *)uint64_t v105 = v118;
              *((void *)v105 + 1) = v119;
              *((void *)v105 + 2) = v120;
              *((void *)v105 + 3) = v121;
              *((void *)v105 + 4) = v169;
              *((void *)v105 + 5) = v162;
              *((void *)v105 + 6) = v156;
              v105[56] = v124;
              goto LABEL_87;
            case 5u:
              uint64_t v125 = *(void *)v106;
              uint64_t v126 = *((void *)v106 + 1);
              uint64_t v127 = *((void *)v106 + 2);
              uint64_t v128 = *((void *)v106 + 3);
              uint64_t v129 = *((void *)v106 + 5);
              uint64_t v163 = v129;
              uint64_t v170 = *((void *)v106 + 4);
              uint64_t v130 = *((void *)v106 + 6);
              uint64_t v157 = v130;
              char v131 = v106[56];
              sub_10001FBD0(v125, v126, v127, v128, v170, v129, v130, v131);
              *(void *)uint64_t v105 = v125;
              *((void *)v105 + 1) = v126;
              *((void *)v105 + 2) = v127;
              *((void *)v105 + 3) = v128;
              *((void *)v105 + 4) = v170;
              *((void *)v105 + 5) = v163;
              *((void *)v105 + 6) = v157;
              v105[56] = v131;
              goto LABEL_87;
            case 8u:
              uint64_t v132 = type metadata accessor for TransferEvent();
              switch(swift_getEnumCaseMultiPayload())
              {
                case 1u:
                  uint64_t v133 = *(void *)v106;
                  swift_errorRetain();
                  *(void *)uint64_t v105 = v133;
                  goto LABEL_86;
                case 2u:
                case 3u:
                  *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
                  uint64_t v135 = *((void *)v106 + 3);
                  *((void *)v105 + 2) = *((void *)v106 + 2);
                  *((void *)v105 + 3) = v135;
                  uint64_t v136 = *((void *)v106 + 5);
                  *((void *)v105 + 4) = *((void *)v106 + 4);
                  *((void *)v105 + 5) = v136;
                  *((void *)v105 + 6) = *((void *)v106 + 6);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  goto LABEL_86;
                case 4u:
                  unint64_t v137 = *((void *)v106 + 2);
                  if (v137 - 7 >= 2 && v137 >= 7)
                  {
                    *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
                    uint64_t v140 = *((void *)v106 + 3);
                    uint64_t v141 = *((void *)v106 + 4);
                    *((void *)v105 + 2) = v137;
                    *((void *)v105 + 3) = v140;
                    uint64_t v142 = *((void *)v106 + 5);
                    uint64_t v143 = *((void *)v106 + 6);
                    *((void *)v105 + 4) = v141;
                    *((void *)v105 + 5) = v142;
                    *((void *)v105 + 6) = v143;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    long long v138 = *((_OWORD *)v106 + 1);
                    *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
                    *((_OWORD *)v105 + 1) = v138;
                    *((_OWORD *)v105 + 2) = *((_OWORD *)v106 + 2);
                    *((void *)v105 + 6) = *((void *)v106 + 6);
                  }
                  uint64_t v144 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
                  v145 = &v105[v144];
                  v146 = &v106[v144];
                  uint64_t v147 = type metadata accessor for Date();
                  (*(void (**)(char *, char *, uint64_t))(*(void *)(v147 - 8) + 16))(v145, v146, v147);
                  goto LABEL_86;
                case 5u:
                  uint64_t v139 = *(void *)v106;
                  sub_10001FC30(*(void *)v106);
                  *(void *)uint64_t v105 = v139;
LABEL_86:
                  swift_storeEnumTagMultiPayload();
                  break;
                default:
                  memcpy(v105, v106, *(void *)(*(void *)(v132 - 8) + 64));
                  break;
              }
              goto LABEL_87;
            case 9u:
              unint64_t v134 = *(void *)v106;
              if ((unint64_t)(*(void *)v106 - 1) >= 3) {
                swift_errorRetain();
              }
              *(void *)uint64_t v105 = v134;
LABEL_87:
              swift_storeEnumTagMultiPayload();
              break;
            default:
              memcpy(v105, v106, *(void *)(*(void *)(v107 - 8) + 64));
              break;
          }
          break;
        case 9u:
          id v42 = (char *)*a2;
          unint64_t v43 = (unint64_t)a2[1];
          uint64_t v44 = (uint64_t)a2[2];
          char v45 = *((unsigned char *)a2 + 24);
          sub_10001F914(*a2, v43, v44, v45);
          *a1 = v42;
          a1[1] = (id)v43;
          a1[2] = (id)v44;
          *((unsigned char *)a1 + 24) = v45;
          goto LABEL_66;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
          goto LABEL_67;
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_89;
  }
  unint64_t v11 = (unint64_t)a2[2];
  if (v11 >= 3)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    id v19 = a2[3];
    id v20 = a2[4];
    a1[2] = (id)v11;
    a1[3] = v19;
    id v21 = a2[5];
    id v22 = a2[6];
    a1[4] = v20;
    a1[5] = v21;
    a1[6] = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v12;
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    a1[6] = a2[6];
  }
  id v23 = a2[8];
  a1[7] = a2[7];
  a1[8] = v23;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_10001F894(uint64_t result, uint64_t a2, char a3)
{
  if (a3 < 0) {
    return sub_10001F8A4(result, a2, a3 & 0x7F);
  }
  return result;
}

uint64_t sub_10001F8A4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10001F8BC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

id sub_10001F914(id result, unint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 0:
    case 1:
      id v4 = result;
      swift_retain();
      uint64_t result = v4;
      break;
    case 2:
      uint64_t result = (id)sub_10001F9D4((uint64_t)result, a2);
      break;
    case 3:
      uint64_t result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10001F9D4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 5) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10001F9E8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10000F318(a1, a2, a3 & 0x7F);
}

uint64_t sub_10001FA00(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  int v8 = a8 >> 5;
  if (v8 == 2)
  {
    char v9 = a8 & 0x1F;
    return sub_10001FA9C(result, a2, a3, a4, a5, a6, a7, v9);
  }
  else
  {
    if (v8 == 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else if (a8 >> 5)
    {
      return result;
    }
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_10001FA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8 != 1)
  {
    if (a8) {
      return result;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_10001FAFC(uint64_t result, unint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  switch(a8)
  {
    case 2:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    case 1:
      return sub_10001FBBC(result, a2);
    case 0:
      return sub_10001FBA4(result, a2, a3);
  }
  return result;
}

uint64_t sub_10001FBA4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10001FBBC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10001F8BC(a1, a2);
  }
  return a1;
}

uint64_t sub_10001FBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8)
  {
    if (a8 != 1) {
      return result;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

unint64_t sub_10001FC30(unint64_t result)
{
  if ((result >> 62) <= 1) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_10001FC4C(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch(result)
  {
    case 3:
      if (*(void *)(a1 + 16) >= 3uLL)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      break;
    case 2:
      type metadata accessor for SessionEvent();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      switch(EnumCaseMultiPayload)
      {
        case 3:
LABEL_14:
          swift_bridgeObjectRelease();
          break;
        case 1:
          type metadata accessor for ExperienceEvent(0);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
              sub_100020428(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
              break;
            case 1u:
              sub_100020430(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
              break;
            case 4u:
              sub_10002052C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
              break;
            case 5u:
              sub_1000205C8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
              break;
            case 8u:
              type metadata accessor for TransferEvent();
              switch(swift_getEnumCaseMultiPayload())
              {
                case 1u:
                  goto LABEL_45;
                case 2u:
                case 3u:
LABEL_32:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_14;
                case 4u:
                  if (*(void *)(a1 + 16) >= 9uLL)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                  }
                  uint64_t v10 = a1 + *(int *)(type metadata accessor for PermissionToHandoff() + 20);
LABEL_53:
                  uint64_t v11 = type metadata accessor for Date();
                  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
                  break;
                case 5u:
                  sub_100020628(*(void *)a1);
                  break;
                default:
                  goto LABEL_15;
              }
              break;
            case 9u:
              uint64_t v8 = *(void *)a1;
LABEL_44:
              if ((unint64_t)(v8 - 1) >= 3) {
LABEL_45:
              }
                swift_errorRelease();
              break;
            default:
              goto LABEL_15;
          }
          break;
        case 0:
          type metadata accessor for ExperienceEffect(0);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
              sub_100020330(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
              break;
            case 3u:
              goto LABEL_36;
            case 6u:
              type metadata accessor for NoticeEffect();
              int v4 = swift_getEnumCaseMultiPayload();
              switch(v4)
              {
                case 2:
LABEL_60:
                  swift_bridgeObjectRelease();
                  break;
                case 1:
                  if (*(void *)(a1 + 16) != 1)
                  {
LABEL_36:

                    swift_release();
                  }
                  break;
                case 0:
                  swift_bridgeObjectRelease();
                  uint64_t v5 = type metadata accessor for NoticeContext(0);
                  uint64_t v6 = a1 + *(int *)(v5 + 24);
                  type metadata accessor for NoticeTapAction(0);
                  int v7 = swift_getEnumCaseMultiPayload();
                  if (v7 == 1)
                  {
                    uint64_t v12 = type metadata accessor for URL();
                    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v6, v12);
                  }
                  else if (!v7)
                  {
                    sub_10000DBEC(*(void *)v6, *(void *)(v6 + 8));
                  }
                  uint64_t v13 = a1 + *(int *)(v5 + 32);
                  type metadata accessor for NoticeContent(0);
                  switch(swift_getEnumCaseMultiPayload())
                  {
                    case 0u:
                    case 1u:
                    case 2u:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      break;
                    case 3u:
                      swift_bridgeObjectRelease();
                      uint64_t v14 = v13 + *(int *)(type metadata accessor for ShareableContentExposedContext(0) + 20);
                      swift_bridgeObjectRelease();
                      uint64_t v15 = v14 + *(int *)(type metadata accessor for ShareableContent(0) + 20);
                      uint64_t v16 = type metadata accessor for URL();
                      uint64_t v17 = *(void *)(v16 - 8);
                      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16)) {
                        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
                      }
                      goto LABEL_60;
                    default:
                      goto LABEL_37;
                  }
                  break;
              }
              break;
            case 9u:
              sub_100020358(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
              break;
            default:
              break;
          }
LABEL_37:
          uint64_t v9 = a1 + *(int *)(sub_10000A38C((uint64_t *)&unk_1003676C0) + 48);
          type metadata accessor for ExperienceEvent(0);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
              sub_100020428(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
              break;
            case 1u:
              sub_100020430(*(void *)v9, *(void *)(v9 + 8), *(void *)(v9 + 16), *(void *)(v9 + 24), *(void *)(v9 + 32), *(void *)(v9 + 40), *(void *)(v9 + 48), *(unsigned char *)(v9 + 56));
              break;
            case 4u:
              sub_10002052C(*(void *)v9, *(void *)(v9 + 8), *(void *)(v9 + 16), *(void *)(v9 + 24), *(void *)(v9 + 32), *(void *)(v9 + 40), *(void *)(v9 + 48), *(unsigned char *)(v9 + 56));
              break;
            case 5u:
              sub_1000205C8(*(void *)v9, *(void *)(v9 + 8), *(void *)(v9 + 16), *(void *)(v9 + 24), *(void *)(v9 + 32), *(void *)(v9 + 40), *(void *)(v9 + 48), *(unsigned char *)(v9 + 56));
              break;
            case 8u:
              type metadata accessor for TransferEvent();
              switch(swift_getEnumCaseMultiPayload())
              {
                case 1u:
                  goto LABEL_45;
                case 2u:
                case 3u:
                  goto LABEL_32;
                case 4u:
                  if (*(void *)(v9 + 16) >= 9uLL)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                  }
                  uint64_t v10 = v9 + *(int *)(type metadata accessor for PermissionToHandoff() + 20);
                  goto LABEL_53;
                case 5u:
                  sub_100020628(*(void *)v9);
                  break;
                default:
                  goto LABEL_15;
              }
              break;
            case 9u:
              uint64_t v8 = *(void *)v9;
              goto LABEL_44;
            default:
              goto LABEL_15;
          }
          break;
      }
LABEL_15:
      sub_10000A38C(&qword_100367650);
      break;
    case 1:
      break;
    default:
      return result;
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100020330(uint64_t result, uint64_t a2, char a3)
{
  if (a3 < 0) {
    return sub_100020340(result, a2, a3 & 0x7F);
  }
  return result;
}

uint64_t sub_100020340(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_100020358(void *result, unint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 0:
    case 1:

      uint64_t result = (void *)swift_release();
      break;
    case 2:
      uint64_t result = (void *)sub_100020414((uint64_t)result, a2);
      break;
    case 3:
      uint64_t result = (void *)swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100020414(uint64_t a1, unint64_t a2)
{
  if (a2 >= 5) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100020428(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10000F378(a1, a2, a3 & 0x7F);
}

uint64_t sub_100020430(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  int v8 = a8 >> 5;
  if (v8 == 2)
  {
    char v9 = a8 & 0x1F;
    return sub_1000204CC(result, a2, a3, a4, a5, a6, a7, v9);
  }
  else
  {
    if (v8 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else if (a8 >> 5)
    {
      return result;
    }
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000204CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8 != 1)
  {
    if (a8) {
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10002052C(uint64_t result, unint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  switch(a8)
  {
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 1:
      return sub_10000DBD8(result, a2);
    case 0:
      return sub_1000205B0(result, a2, a3);
  }
  return result;
}

uint64_t sub_1000205B0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000205C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8)
  {
    if (a8 != 1) {
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_100020628(unint64_t result)
{
  if ((result >> 62) <= 1) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100020644(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      unint64_t v8 = a2[2];
      if (v8 >= 3)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v16 = a2[3];
        uint64_t v17 = a2[4];
        *(void *)(a1 + 16) = v8;
        *(void *)(a1 + 24) = v16;
        uint64_t v18 = a2[5];
        uint64_t v19 = a2[6];
        *(void *)(a1 + 32) = v17;
        *(void *)(a1 + 40) = v18;
        *(void *)(a1 + 48) = v19;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v9 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v9;
        *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
        *(void *)(a1 + 48) = a2[6];
      }
      uint64_t v20 = a2[8];
      *(void *)(a1 + 56) = a2[7];
      *(void *)(a1 + 64) = v20;
      swift_bridgeObjectRetain();
      goto LABEL_87;
    case 2:
      uint64_t v10 = type metadata accessor for SessionEvent();
      int v11 = swift_getEnumCaseMultiPayload();
      if (v11 == 3)
      {
        uint64_t v21 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v21;
        swift_bridgeObjectRetain();
      }
      else if (v11 == 1)
      {
        uint64_t v22 = type metadata accessor for ExperienceEvent(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v23 = *a2;
            uint64_t v24 = a2[1];
            char v25 = *((unsigned char *)a2 + 16);
            sub_10001F9E8(*a2, v24, v25);
            *(void *)a1 = v23;
            *(void *)(a1 + 8) = v24;
            *(unsigned char *)(a1 + 16) = v25;
            goto LABEL_57;
          case 1u:
            uint64_t v43 = *a2;
            uint64_t v44 = a2[1];
            uint64_t v45 = a2[2];
            uint64_t v46 = a2[3];
            uint64_t v48 = a2[4];
            uint64_t v47 = a2[5];
            uint64_t v162 = a2[6];
            unsigned __int8 v156 = *((unsigned char *)a2 + 56);
            sub_10001FA00(*a2, v44, v45, v46, v48, v47, v162, v156);
            *(void *)a1 = v43;
            *(void *)(a1 + 8) = v44;
            *(void *)(a1 + 16) = v45;
            *(void *)(a1 + 24) = v46;
            *(void *)(a1 + 32) = v48;
            *(void *)(a1 + 40) = v47;
            *(void *)(a1 + 48) = v162;
            *(unsigned char *)(a1 + 56) = v156;
            goto LABEL_57;
          case 4u:
            uint64_t v49 = *a2;
            unint64_t v50 = a2[1];
            uint64_t v51 = a2[2];
            uint64_t v52 = a2[3];
            uint64_t v53 = a2[4];
            uint64_t v54 = a2[5];
            uint64_t v163 = a2[6];
            char v157 = *((unsigned char *)a2 + 56);
            sub_10001FAFC(*a2, v50, v51, v52, v53, v54, v163, v157);
            *(void *)a1 = v49;
            *(void *)(a1 + 8) = v50;
            *(void *)(a1 + 16) = v51;
            *(void *)(a1 + 24) = v52;
            *(void *)(a1 + 32) = v53;
            *(void *)(a1 + 40) = v54;
            *(void *)(a1 + 48) = v163;
            *(unsigned char *)(a1 + 56) = v157;
            goto LABEL_57;
          case 5u:
            uint64_t v55 = *a2;
            uint64_t v56 = a2[1];
            uint64_t v57 = a2[2];
            uint64_t v58 = a2[3];
            uint64_t v59 = a2[4];
            uint64_t v60 = a2[5];
            uint64_t v164 = a2[6];
            char v158 = *((unsigned char *)a2 + 56);
            sub_10001FBD0(*a2, v56, v57, v58, v59, v60, v164, v158);
            *(void *)a1 = v55;
            *(void *)(a1 + 8) = v56;
            *(void *)(a1 + 16) = v57;
            *(void *)(a1 + 24) = v58;
            *(void *)(a1 + 32) = v59;
            *(void *)(a1 + 40) = v60;
            *(void *)(a1 + 48) = v164;
            *(unsigned char *)(a1 + 56) = v158;
            goto LABEL_57;
          case 8u:
            uint64_t v61 = type metadata accessor for TransferEvent();
            switch(swift_getEnumCaseMultiPayload())
            {
              case 1u:
                uint64_t v62 = *a2;
                swift_errorRetain();
                *(void *)a1 = v62;
                goto LABEL_56;
              case 2u:
              case 3u:
                *(_OWORD *)a1 = *(_OWORD *)a2;
                uint64_t v69 = a2[3];
                *(void *)(a1 + 16) = a2[2];
                *(void *)(a1 + 24) = v69;
                uint64_t v70 = a2[5];
                *(void *)(a1 + 32) = a2[4];
                *(void *)(a1 + 40) = v70;
                *(void *)(a1 + 48) = a2[6];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                goto LABEL_56;
              case 4u:
                unint64_t v71 = a2[2];
                if (v71 - 7 >= 2 && v71 >= 7)
                {
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  uint64_t v89 = a2[3];
                  uint64_t v90 = a2[4];
                  *(void *)(a1 + 16) = v71;
                  *(void *)(a1 + 24) = v89;
                  uint64_t v91 = a2[5];
                  uint64_t v92 = a2[6];
                  *(void *)(a1 + 32) = v90;
                  *(void *)(a1 + 40) = v91;
                  *(void *)(a1 + 48) = v92;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  long long v72 = *((_OWORD *)a2 + 1);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v72;
                  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
                  *(void *)(a1 + 48) = a2[6];
                }
                uint64_t v93 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
                uint64_t v94 = a1 + v93;
                id v95 = (char *)a2 + v93;
                uint64_t v96 = type metadata accessor for Date();
                (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v96 - 8) + 16))(v94, v95, v96);
                goto LABEL_56;
              case 5u:
                uint64_t v73 = *a2;
                sub_10001FC30(*a2);
                *(void *)a1 = v73;
LABEL_56:
                swift_storeEnumTagMultiPayload();
                break;
              default:
                memcpy((void *)a1, a2, *(void *)(*(void *)(v61 - 8) + 64));
                break;
            }
            goto LABEL_57;
          case 9u:
            uint64_t v63 = *a2;
            if ((unint64_t)(*a2 - 1) >= 3) {
              swift_errorRetain();
            }
            *(void *)a1 = v63;
LABEL_57:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy((void *)a1, a2, *(void *)(*(void *)(v22 - 8) + 64));
            break;
        }
      }
      else
      {
        if (v11)
        {
          memcpy((void *)a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
LABEL_86:
          uint64_t v145 = *(int *)(sub_10000A38C(&qword_100367650) + 48);
          v146 = (void *)(a1 + v145);
          uint64_t v147 = (uint64_t *)((char *)a2 + v145);
          uint64_t v148 = v147[1];
          void *v146 = *v147;
          v146[1] = v148;
          swift_bridgeObjectRetain();
          goto LABEL_87;
        }
        uint64_t v12 = type metadata accessor for ExperienceEffect(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v13 = *a2;
            uint64_t v14 = a2[1];
            char v15 = *((unsigned char *)a2 + 16);
            sub_10001F894(*a2, v14, v15);
            *(void *)a1 = v13;
            *(void *)(a1 + 8) = v14;
            *(unsigned char *)(a1 + 16) = v15;
            goto LABEL_63;
          case 3u:
            uint64_t v26 = (void *)*a2;
            char v27 = *((unsigned char *)a2 + 8);
            *(void *)a1 = *a2;
            *(unsigned char *)(a1 + 8) = v27;
            *(void *)(a1 + 16) = a2[2];
            id v28 = v26;
            swift_retain();
            goto LABEL_63;
          case 6u:
            uint64_t v29 = type metadata accessor for NoticeEffect();
            int v30 = swift_getEnumCaseMultiPayload();
            if (v30 == 2)
            {
              uint64_t v64 = a2[1];
              *(void *)a1 = *a2;
              *(void *)(a1 + 8) = v64;
              swift_bridgeObjectRetain();
            }
            else if (v30 == 1)
            {
              uint64_t v65 = a2[2];
              if (v65 == 1)
              {
                *(_OWORD *)a1 = *(_OWORD *)a2;
                *(void *)(a1 + 16) = a2[2];
              }
              else
              {
                uint64_t v66 = (void *)*a2;
                char v67 = *((unsigned char *)a2 + 8);
                *(void *)a1 = *a2;
                *(unsigned char *)(a1 + 8) = v67;
                *(void *)(a1 + 16) = v65;
                id v68 = v66;
                swift_retain();
              }
            }
            else
            {
              if (v30)
              {
                memcpy((void *)a1, a2, *(void *)(*(void *)(v29 - 8) + 64));
                goto LABEL_63;
              }
              uint64_t v31 = a2[1];
              *(void *)a1 = *a2;
              *(void *)(a1 + 8) = v31;
              *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
              uint64_t v32 = (int *)type metadata accessor for NoticeContext(0);
              uint64_t v33 = v32[6];
              __dst = (uint64_t *)(a1 + v33);
              id v34 = (uint64_t *)((char *)a2 + v33);
              uint64_t v35 = type metadata accessor for NoticeTapAction(0);
              swift_bridgeObjectRetain();
              int v36 = swift_getEnumCaseMultiPayload();
              if (v36 == 1)
              {
                uint64_t v74 = type metadata accessor for URL();
                (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v74 - 8) + 16))(__dst, v34, v74);
                swift_storeEnumTagMultiPayload();
              }
              else if (v36)
              {
                memcpy(__dst, v34, *(void *)(*(void *)(v35 - 8) + 64));
              }
              else
              {
                uint64_t v37 = *v34;
                unint64_t v38 = v34[1];
                sub_10001F8BC(v37, v38);
                uint64_t *__dst = v37;
                __dst[1] = v38;
                swift_storeEnumTagMultiPayload();
              }
              *(unsigned char *)(a1 + v32[7]) = *((unsigned char *)a2 + v32[7]);
              uint64_t v75 = v32[8];
              char v76 = (void *)(a1 + v75);
              uint64_t v77 = (uint64_t *)((char *)a2 + v75);
              type metadata accessor for NoticeContent(0);
              if (swift_getEnumCaseMultiPayload() == 3)
              {
                uint64_t v81 = v77[1];
                *char v76 = *v77;
                v76[1] = v81;
                uint64_t v152 = type metadata accessor for ShareableContentExposedContext(0);
                uint64_t v82 = *(int *)(v152 + 20);
                uint64_t v83 = (void *)((char *)v76 + v82);
                uint64_t v84 = (char *)v77 + v82;
                uint64_t v85 = *(void *)((char *)v77 + v82 + 8);
                *uint64_t v83 = *(void *)((char *)v77 + v82);
                v83[1] = v85;
                uint64_t v86 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
                uint64_t v165 = (char *)v83 + v86;
                __dsta = &v84[v86];
                uint64_t v87 = type metadata accessor for URL();
                uint64_t v150 = *(void *)(v87 - 8);
                uint64_t v151 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v151(__dsta, 1, v87))
                {
                  uint64_t v88 = type metadata accessor for ShareableContentType(0);
                  memcpy(v165, __dsta, *(void *)(*(void *)(v88 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v150 + 16))(v165, __dsta, v87);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v150 + 56))(v165, 0, 1, v87);
                }
                uint64_t v97 = *(int *)(v152 + 24);
                unint64_t v98 = (void *)((char *)v76 + v97);
                uint64_t v99 = (void *)((char *)v77 + v97);
                uint64_t v100 = v99[1];
                *unint64_t v98 = *v99;
                v98[1] = v100;
              }
              else
              {
                uint64_t v78 = v77[1];
                *char v76 = *v77;
                v76[1] = v78;
                uint64_t v79 = v77[2];
                uint64_t v80 = v77[3];
                v76[2] = v79;
                v76[3] = v80;
                swift_bridgeObjectRetain();
              }
              swift_bridgeObjectRetain();
              swift_storeEnumTagMultiPayload();
            }
            swift_storeEnumTagMultiPayload();
LABEL_63:
            swift_storeEnumTagMultiPayload();
LABEL_64:
            uint64_t v101 = *(int *)(sub_10000A38C((uint64_t *)&unk_1003676C0) + 48);
            v102 = (void *)(a1 + v101);
            uint64_t v103 = (char *)a2 + v101;
            uint64_t v104 = type metadata accessor for ExperienceEvent(0);
            switch(swift_getEnumCaseMultiPayload())
            {
              case 0u:
                uint64_t v105 = *(void *)v103;
                uint64_t v106 = *((void *)v103 + 1);
                char v107 = v103[16];
                sub_10001F9E8(v105, v106, v107);
                void *v102 = v105;
                v102[1] = v106;
                *((unsigned char *)v102 + 16) = v107;
                goto LABEL_84;
              case 1u:
                uint64_t v108 = *(void *)v103;
                uint64_t v109 = *((void *)v103 + 1);
                uint64_t v111 = *((void *)v103 + 2);
                uint64_t v110 = *((void *)v103 + 3);
                uint64_t v112 = *((void *)v103 + 5);
                uint64_t v159 = v112;
                uint64_t v166 = *((void *)v103 + 4);
                uint64_t v113 = *((void *)v103 + 6);
                uint64_t v153 = v113;
                unsigned __int8 v114 = v103[56];
                sub_10001FA00(v108, v109, v111, v110, v166, v112, v113, v114);
                void *v102 = v108;
                v102[1] = v109;
                v102[2] = v111;
                v102[3] = v110;
                v102[4] = v166;
                v102[5] = v159;
                v102[6] = v153;
                *((unsigned char *)v102 + 56) = v114;
                goto LABEL_84;
              case 4u:
                uint64_t v115 = *(void *)v103;
                unint64_t v116 = *((void *)v103 + 1);
                uint64_t v117 = *((void *)v103 + 2);
                uint64_t v118 = *((void *)v103 + 3);
                uint64_t v119 = *((void *)v103 + 5);
                uint64_t v160 = v119;
                uint64_t v167 = *((void *)v103 + 4);
                uint64_t v120 = *((void *)v103 + 6);
                uint64_t v154 = v120;
                char v121 = v103[56];
                sub_10001FAFC(v115, v116, v117, v118, v167, v119, v120, v121);
                void *v102 = v115;
                v102[1] = v116;
                v102[2] = v117;
                v102[3] = v118;
                v102[4] = v167;
                v102[5] = v160;
                v102[6] = v154;
                *((unsigned char *)v102 + 56) = v121;
                goto LABEL_84;
              case 5u:
                uint64_t v122 = *(void *)v103;
                uint64_t v123 = *((void *)v103 + 1);
                uint64_t v124 = *((void *)v103 + 2);
                uint64_t v125 = *((void *)v103 + 3);
                uint64_t v126 = *((void *)v103 + 5);
                uint64_t v161 = v126;
                uint64_t v168 = *((void *)v103 + 4);
                uint64_t v127 = *((void *)v103 + 6);
                uint64_t v155 = v127;
                char v128 = v103[56];
                sub_10001FBD0(v122, v123, v124, v125, v168, v126, v127, v128);
                void *v102 = v122;
                v102[1] = v123;
                v102[2] = v124;
                v102[3] = v125;
                v102[4] = v168;
                v102[5] = v161;
                v102[6] = v155;
                *((unsigned char *)v102 + 56) = v128;
                goto LABEL_84;
              case 8u:
                uint64_t v129 = type metadata accessor for TransferEvent();
                switch(swift_getEnumCaseMultiPayload())
                {
                  case 1u:
                    uint64_t v130 = *(void *)v103;
                    swift_errorRetain();
                    void *v102 = v130;
                    goto LABEL_83;
                  case 2u:
                  case 3u:
                    *(_OWORD *)v102 = *(_OWORD *)v103;
                    uint64_t v132 = *((void *)v103 + 3);
                    v102[2] = *((void *)v103 + 2);
                    v102[3] = v132;
                    uint64_t v133 = *((void *)v103 + 5);
                    v102[4] = *((void *)v103 + 4);
                    v102[5] = v133;
                    v102[6] = *((void *)v103 + 6);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    goto LABEL_83;
                  case 4u:
                    unint64_t v134 = *((void *)v103 + 2);
                    if (v134 - 7 >= 2 && v134 >= 7)
                    {
                      *(_OWORD *)v102 = *(_OWORD *)v103;
                      uint64_t v137 = *((void *)v103 + 3);
                      uint64_t v138 = *((void *)v103 + 4);
                      v102[2] = v134;
                      v102[3] = v137;
                      uint64_t v139 = *((void *)v103 + 5);
                      uint64_t v140 = *((void *)v103 + 6);
                      v102[4] = v138;
                      v102[5] = v139;
                      v102[6] = v140;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                    }
                    else
                    {
                      long long v135 = *((_OWORD *)v103 + 1);
                      *(_OWORD *)v102 = *(_OWORD *)v103;
                      *((_OWORD *)v102 + 1) = v135;
                      *((_OWORD *)v102 + 2) = *((_OWORD *)v103 + 2);
                      v102[6] = *((void *)v103 + 6);
                    }
                    uint64_t v141 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
                    uint64_t v142 = (char *)v102 + v141;
                    uint64_t v143 = &v103[v141];
                    uint64_t v144 = type metadata accessor for Date();
                    (*(void (**)(char *, char *, uint64_t))(*(void *)(v144 - 8) + 16))(v142, v143, v144);
                    goto LABEL_83;
                  case 5u:
                    uint64_t v136 = *(void *)v103;
                    sub_10001FC30(*(void *)v103);
                    void *v102 = v136;
LABEL_83:
                    swift_storeEnumTagMultiPayload();
                    break;
                  default:
                    memcpy(v102, v103, *(void *)(*(void *)(v129 - 8) + 64));
                    break;
                }
                goto LABEL_84;
              case 9u:
                unint64_t v131 = *(void *)v103;
                if ((unint64_t)(*(void *)v103 - 1) >= 3) {
                  swift_errorRetain();
                }
                void *v102 = v131;
LABEL_84:
                swift_storeEnumTagMultiPayload();
                break;
              default:
                memcpy(v102, v103, *(void *)(*(void *)(v104 - 8) + 64));
                break;
            }
            break;
          case 9u:
            uint64_t v39 = *a2;
            unint64_t v40 = a2[1];
            uint64_t v41 = a2[2];
            char v42 = *((unsigned char *)a2 + 24);
            sub_10001F914((id)*a2, v40, v41, v42);
            *(void *)a1 = v39;
            *(void *)(a1 + 8) = v40;
            *(void *)(a1 + 16) = v41;
            *(unsigned char *)(a1 + 24) = v42;
            goto LABEL_63;
          default:
            memcpy((void *)a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
            goto LABEL_64;
        }
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_86;
    case 1:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v7 = a2[2];
      *(void *)(a1 + 8) = a2[1];
      *(void *)(a1 + 16) = v7;
      swift_bridgeObjectRetain();
LABEL_87:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy((void *)a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t *sub_100021590(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  sub_10001E89C((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for HandoffEvent);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      if ((unint64_t)a2[2] >= 3)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v7 = *(_OWORD *)a2;
        long long v8 = *((_OWORD *)a2 + 1);
        long long v9 = *((_OWORD *)a2 + 2);
        a1[6] = a2[6];
        *((_OWORD *)a1 + 1) = v8;
        *((_OWORD *)a1 + 2) = v9;
        *(_OWORD *)a1 = v7;
      }
      a1[7] = a2[7];
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      goto LABEL_88;
    case 2:
      uint64_t v10 = type metadata accessor for SessionEvent();
      int v11 = swift_getEnumCaseMultiPayload();
      if (v11 == 3)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
      }
      else if (v11 == 1)
      {
        uint64_t v16 = type metadata accessor for ExperienceEvent(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v17 = *a2;
            uint64_t v18 = a2[1];
            char v19 = *((unsigned char *)a2 + 16);
            sub_10001F9E8(*a2, v18, v19);
            *a1 = v17;
            a1[1] = v18;
            *((unsigned char *)a1 + 16) = v19;
            goto LABEL_58;
          case 1u:
            uint64_t v36 = *a2;
            uint64_t v37 = a2[1];
            uint64_t v38 = a2[2];
            uint64_t v39 = a2[3];
            uint64_t v41 = a2[4];
            uint64_t v40 = a2[5];
            uint64_t v139 = a2[6];
            unsigned __int8 v133 = *((unsigned char *)a2 + 56);
            sub_10001FA00(*a2, v37, v38, v39, v41, v40, v139, v133);
            *a1 = v36;
            a1[1] = v37;
            a1[2] = v38;
            a1[3] = v39;
            a1[4] = v41;
            a1[5] = v40;
            a1[6] = v139;
            *((unsigned char *)a1 + 56) = v133;
            goto LABEL_58;
          case 4u:
            uint64_t v42 = *a2;
            unint64_t v43 = a2[1];
            uint64_t v44 = a2[2];
            uint64_t v45 = a2[3];
            uint64_t v46 = a2[4];
            uint64_t v47 = a2[5];
            uint64_t v140 = a2[6];
            char v134 = *((unsigned char *)a2 + 56);
            sub_10001FAFC(*a2, v43, v44, v45, v46, v47, v140, v134);
            *a1 = v42;
            a1[1] = v43;
            a1[2] = v44;
            a1[3] = v45;
            a1[4] = v46;
            a1[5] = v47;
            a1[6] = v140;
            *((unsigned char *)a1 + 56) = v134;
            goto LABEL_58;
          case 5u:
            uint64_t v48 = *a2;
            uint64_t v49 = a2[1];
            uint64_t v50 = a2[2];
            uint64_t v51 = a2[3];
            uint64_t v52 = a2[4];
            uint64_t v53 = a2[5];
            uint64_t v141 = a2[6];
            char v135 = *((unsigned char *)a2 + 56);
            sub_10001FBD0(*a2, v49, v50, v51, v52, v53, v141, v135);
            *a1 = v48;
            a1[1] = v49;
            a1[2] = v50;
            a1[3] = v51;
            a1[4] = v52;
            a1[5] = v53;
            a1[6] = v141;
            *((unsigned char *)a1 + 56) = v135;
            goto LABEL_58;
          case 8u:
            uint64_t v54 = type metadata accessor for TransferEvent();
            switch(swift_getEnumCaseMultiPayload())
            {
              case 1u:
                uint64_t v55 = *a2;
                swift_errorRetain();
                *a1 = v55;
                goto LABEL_57;
              case 2u:
              case 3u:
                *a1 = *a2;
                a1[1] = a2[1];
                a1[2] = a2[2];
                a1[3] = a2[3];
                a1[4] = a2[4];
                a1[5] = a2[5];
                a1[6] = a2[6];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                goto LABEL_57;
              case 4u:
                unint64_t v61 = a2[2];
                if (v61 - 7 >= 2 && v61 >= 7)
                {
                  *a1 = *a2;
                  a1[1] = a2[1];
                  a1[2] = a2[2];
                  a1[3] = a2[3];
                  a1[4] = a2[4];
                  a1[5] = a2[5];
                  a1[6] = a2[6];
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  long long v62 = *(_OWORD *)a2;
                  long long v63 = *((_OWORD *)a2 + 1);
                  long long v64 = *((_OWORD *)a2 + 2);
                  a1[6] = a2[6];
                  *((_OWORD *)a1 + 1) = v63;
                  *((_OWORD *)a1 + 2) = v64;
                  *(_OWORD *)a1 = v62;
                }
                uint64_t v76 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
                uint64_t v77 = (char *)a1 + v76;
                uint64_t v78 = (char *)a2 + v76;
                uint64_t v79 = type metadata accessor for Date();
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16))(v77, v78, v79);
                goto LABEL_57;
              case 5u:
                uint64_t v65 = *a2;
                sub_10001FC30(*a2);
                *a1 = v65;
LABEL_57:
                swift_storeEnumTagMultiPayload();
                break;
              default:
                memcpy(a1, a2, *(void *)(*(void *)(v54 - 8) + 64));
                break;
            }
            goto LABEL_58;
          case 9u:
            uint64_t v56 = *a2;
            if ((unint64_t)(*a2 - 1) >= 3) {
              swift_errorRetain();
            }
            *a1 = v56;
LABEL_58:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
            break;
        }
      }
      else
      {
        if (v11)
        {
          memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
LABEL_87:
          uint64_t v123 = *(int *)(sub_10000A38C(&qword_100367650) + 48);
          uint64_t v124 = (uint64_t *)((char *)a1 + v123);
          uint64_t v125 = (uint64_t *)((char *)a2 + v123);
          void *v124 = *v125;
          v124[1] = v125[1];
          swift_bridgeObjectRetain();
          goto LABEL_88;
        }
        uint64_t v12 = type metadata accessor for ExperienceEffect(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v13 = *a2;
            uint64_t v14 = a2[1];
            char v15 = *((unsigned char *)a2 + 16);
            sub_10001F894(*a2, v14, v15);
            *a1 = v13;
            a1[1] = v14;
            *((unsigned char *)a1 + 16) = v15;
            goto LABEL_64;
          case 3u:
            uint64_t v20 = (void *)*a2;
            char v21 = *((unsigned char *)a2 + 8);
            *a1 = *a2;
            *((unsigned char *)a1 + 8) = v21;
            a1[2] = a2[2];
            id v22 = v20;
            swift_retain();
            goto LABEL_64;
          case 6u:
            uint64_t v23 = type metadata accessor for NoticeEffect();
            int v24 = swift_getEnumCaseMultiPayload();
            if (v24 == 2)
            {
              *a1 = *a2;
              a1[1] = a2[1];
              swift_bridgeObjectRetain();
            }
            else if (v24 == 1)
            {
              if (a2[2] == 1)
              {
                long long v57 = *(_OWORD *)a2;
                a1[2] = a2[2];
                *(_OWORD *)a1 = v57;
              }
              else
              {
                uint64_t v58 = (void *)*a2;
                char v59 = *((unsigned char *)a2 + 8);
                *a1 = *a2;
                *((unsigned char *)a1 + 8) = v59;
                a1[2] = a2[2];
                id v60 = v58;
                swift_retain();
              }
            }
            else
            {
              if (v24)
              {
                memcpy(a1, a2, *(void *)(*(void *)(v23 - 8) + 64));
                goto LABEL_64;
              }
              *a1 = *a2;
              a1[1] = a2[1];
              *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
              char v25 = (int *)type metadata accessor for NoticeContext(0);
              uint64_t v26 = v25[6];
              __dst = (uint64_t *)((char *)a1 + v26);
              char v27 = (uint64_t *)((char *)a2 + v26);
              uint64_t v28 = type metadata accessor for NoticeTapAction(0);
              swift_bridgeObjectRetain();
              int v29 = swift_getEnumCaseMultiPayload();
              if (v29 == 1)
              {
                uint64_t v66 = type metadata accessor for URL();
                (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v66 - 8) + 16))(__dst, v27, v66);
                swift_storeEnumTagMultiPayload();
              }
              else if (v29)
              {
                memcpy(__dst, v27, *(void *)(*(void *)(v28 - 8) + 64));
              }
              else
              {
                uint64_t v30 = *v27;
                unint64_t v31 = v27[1];
                sub_10001F8BC(v30, v31);
                uint64_t *__dst = v30;
                __dst[1] = v31;
                swift_storeEnumTagMultiPayload();
              }
              *((unsigned char *)a1 + v25[7]) = *((unsigned char *)a2 + v25[7]);
              uint64_t v67 = v25[8];
              id v68 = (uint64_t *)((char *)a1 + v67);
              uint64_t v69 = (uint64_t *)((char *)a2 + v67);
              type metadata accessor for NoticeContent(0);
              if (swift_getEnumCaseMultiPayload() == 3)
              {
                *id v68 = *v69;
                v68[1] = v69[1];
                uint64_t v129 = type metadata accessor for ShareableContentExposedContext(0);
                uint64_t v70 = *(int *)(v129 + 20);
                unint64_t v71 = (void *)((char *)v68 + v70);
                long long v72 = (char *)v69 + v70;
                *unint64_t v71 = *(void *)((char *)v69 + v70);
                v71[1] = *(void *)((char *)v69 + v70 + 8);
                uint64_t v73 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
                uint64_t v142 = (char *)v71 + v73;
                __dsta = &v72[v73];
                uint64_t v74 = type metadata accessor for URL();
                uint64_t v127 = *(void *)(v74 - 8);
                char v128 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v128(__dsta, 1, v74))
                {
                  uint64_t v75 = type metadata accessor for ShareableContentType(0);
                  memcpy(v142, __dsta, *(void *)(*(void *)(v75 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v142, __dsta, v74);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v142, 0, 1, v74);
                }
                uint64_t v80 = *(int *)(v129 + 24);
                uint64_t v81 = (void *)((char *)v68 + v80);
                uint64_t v82 = (void *)((char *)v69 + v80);
                void *v81 = *v82;
                v81[1] = v82[1];
              }
              else
              {
                *id v68 = *v69;
                v68[1] = v69[1];
                v68[2] = v69[2];
                v68[3] = v69[3];
                swift_bridgeObjectRetain();
              }
              swift_bridgeObjectRetain();
              swift_storeEnumTagMultiPayload();
            }
            swift_storeEnumTagMultiPayload();
LABEL_64:
            swift_storeEnumTagMultiPayload();
LABEL_65:
            uint64_t v83 = *(int *)(sub_10000A38C((uint64_t *)&unk_1003676C0) + 48);
            uint64_t v84 = (char *)a1 + v83;
            uint64_t v85 = (char *)a2 + v83;
            uint64_t v86 = type metadata accessor for ExperienceEvent(0);
            switch(swift_getEnumCaseMultiPayload())
            {
              case 0u:
                uint64_t v87 = *(void *)v85;
                uint64_t v88 = *((void *)v85 + 1);
                char v89 = v85[16];
                sub_10001F9E8(v87, v88, v89);
                *(void *)uint64_t v84 = v87;
                *((void *)v84 + 1) = v88;
                v84[16] = v89;
                goto LABEL_85;
              case 1u:
                uint64_t v90 = *(void *)v85;
                uint64_t v91 = *((void *)v85 + 1);
                uint64_t v93 = *((void *)v85 + 2);
                uint64_t v92 = *((void *)v85 + 3);
                uint64_t v94 = *((void *)v85 + 5);
                uint64_t v136 = v94;
                uint64_t v143 = *((void *)v85 + 4);
                uint64_t v95 = *((void *)v85 + 6);
                uint64_t v130 = v95;
                unsigned __int8 v96 = v85[56];
                sub_10001FA00(v90, v91, v93, v92, v143, v94, v95, v96);
                *(void *)uint64_t v84 = v90;
                *((void *)v84 + 1) = v91;
                *((void *)v84 + 2) = v93;
                *((void *)v84 + 3) = v92;
                *((void *)v84 + 4) = v143;
                *((void *)v84 + 5) = v136;
                *((void *)v84 + 6) = v130;
                v84[56] = v96;
                goto LABEL_85;
              case 4u:
                uint64_t v97 = *(void *)v85;
                unint64_t v98 = *((void *)v85 + 1);
                uint64_t v99 = *((void *)v85 + 2);
                uint64_t v100 = *((void *)v85 + 3);
                uint64_t v101 = *((void *)v85 + 5);
                uint64_t v137 = v101;
                uint64_t v144 = *((void *)v85 + 4);
                uint64_t v102 = *((void *)v85 + 6);
                uint64_t v131 = v102;
                char v103 = v85[56];
                sub_10001FAFC(v97, v98, v99, v100, v144, v101, v102, v103);
                *(void *)uint64_t v84 = v97;
                *((void *)v84 + 1) = v98;
                *((void *)v84 + 2) = v99;
                *((void *)v84 + 3) = v100;
                *((void *)v84 + 4) = v144;
                *((void *)v84 + 5) = v137;
                *((void *)v84 + 6) = v131;
                v84[56] = v103;
                goto LABEL_85;
              case 5u:
                uint64_t v104 = *(void *)v85;
                uint64_t v105 = *((void *)v85 + 1);
                uint64_t v106 = *((void *)v85 + 2);
                uint64_t v107 = *((void *)v85 + 3);
                uint64_t v108 = *((void *)v85 + 5);
                uint64_t v138 = v108;
                uint64_t v145 = *((void *)v85 + 4);
                uint64_t v109 = *((void *)v85 + 6);
                uint64_t v132 = v109;
                char v110 = v85[56];
                sub_10001FBD0(v104, v105, v106, v107, v145, v108, v109, v110);
                *(void *)uint64_t v84 = v104;
                *((void *)v84 + 1) = v105;
                *((void *)v84 + 2) = v106;
                *((void *)v84 + 3) = v107;
                *((void *)v84 + 4) = v145;
                *((void *)v84 + 5) = v138;
                *((void *)v84 + 6) = v132;
                v84[56] = v110;
                goto LABEL_85;
              case 8u:
                uint64_t v111 = type metadata accessor for TransferEvent();
                switch(swift_getEnumCaseMultiPayload())
                {
                  case 1u:
                    uint64_t v112 = *(void *)v85;
                    swift_errorRetain();
                    *(void *)uint64_t v84 = v112;
                    goto LABEL_84;
                  case 2u:
                  case 3u:
                    *(void *)uint64_t v84 = *(void *)v85;
                    *((void *)v84 + 1) = *((void *)v85 + 1);
                    *((void *)v84 + 2) = *((void *)v85 + 2);
                    *((void *)v84 + 3) = *((void *)v85 + 3);
                    *((void *)v84 + 4) = *((void *)v85 + 4);
                    *((void *)v84 + 5) = *((void *)v85 + 5);
                    *((void *)v84 + 6) = *((void *)v85 + 6);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    goto LABEL_84;
                  case 4u:
                    unint64_t v114 = *((void *)v85 + 2);
                    if (v114 - 7 >= 2 && v114 >= 7)
                    {
                      *(void *)uint64_t v84 = *(void *)v85;
                      *((void *)v84 + 1) = *((void *)v85 + 1);
                      *((void *)v84 + 2) = *((void *)v85 + 2);
                      *((void *)v84 + 3) = *((void *)v85 + 3);
                      *((void *)v84 + 4) = *((void *)v85 + 4);
                      *((void *)v84 + 5) = *((void *)v85 + 5);
                      *((void *)v84 + 6) = *((void *)v85 + 6);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                    }
                    else
                    {
                      long long v115 = *(_OWORD *)v85;
                      long long v116 = *((_OWORD *)v85 + 1);
                      long long v117 = *((_OWORD *)v85 + 2);
                      *((void *)v84 + 6) = *((void *)v85 + 6);
                      *((_OWORD *)v84 + 1) = v116;
                      *((_OWORD *)v84 + 2) = v117;
                      *(_OWORD *)uint64_t v84 = v115;
                    }
                    uint64_t v119 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
                    uint64_t v120 = &v84[v119];
                    char v121 = &v85[v119];
                    uint64_t v122 = type metadata accessor for Date();
                    (*(void (**)(char *, char *, uint64_t))(*(void *)(v122 - 8) + 16))(v120, v121, v122);
                    goto LABEL_84;
                  case 5u:
                    uint64_t v118 = *(void *)v85;
                    sub_10001FC30(*(void *)v85);
                    *(void *)uint64_t v84 = v118;
LABEL_84:
                    swift_storeEnumTagMultiPayload();
                    break;
                  default:
                    memcpy(v84, v85, *(void *)(*(void *)(v111 - 8) + 64));
                    break;
                }
                goto LABEL_85;
              case 9u:
                unint64_t v113 = *(void *)v85;
                if ((unint64_t)(*(void *)v85 - 1) >= 3) {
                  swift_errorRetain();
                }
                *(void *)uint64_t v84 = v113;
LABEL_85:
                swift_storeEnumTagMultiPayload();
                break;
              default:
                memcpy(v84, v85, *(void *)(*(void *)(v86 - 8) + 64));
                break;
            }
            break;
          case 9u:
            uint64_t v32 = *a2;
            unint64_t v33 = a2[1];
            uint64_t v34 = a2[2];
            char v35 = *((unsigned char *)a2 + 24);
            sub_10001F914((id)*a2, v33, v34, v35);
            *a1 = v32;
            a1[1] = v33;
            a1[2] = v34;
            *((unsigned char *)a1 + 24) = v35;
            goto LABEL_64;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
            goto LABEL_65;
        }
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_87;
    case 1:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
LABEL_88:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

unsigned char *sub_100022610(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = type metadata accessor for SessionEvent();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for ExperienceEvent(0);
      if (swift_getEnumCaseMultiPayload() == 8)
      {
        uint64_t v11 = type metadata accessor for TransferEvent();
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          long long v12 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1) = v12;
          *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
          *((void *)a1 + 6) = *((void *)a2 + 6);
          uint64_t v13 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
          uint64_t v14 = &a1[v13];
          char v15 = &a2[v13];
          uint64_t v16 = type metadata accessor for Date();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
        }
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_35:
        uint64_t v45 = sub_10000A38C(&qword_100367650);
        *(_OWORD *)&a1[*(int *)(v45 + 48)] = *(_OWORD *)&a2[*(int *)(v45 + 48)];
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      uint64_t v8 = type metadata accessor for ExperienceEffect(0);
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        uint64_t v9 = type metadata accessor for NoticeEffect();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
          a1[16] = a2[16];
          uint64_t v17 = (int *)type metadata accessor for NoticeContext(0);
          uint64_t v18 = v17[6];
          char v19 = &a1[v18];
          uint64_t v20 = &a2[v18];
          uint64_t v21 = type metadata accessor for NoticeTapAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v22 = type metadata accessor for URL();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v22 - 8) + 32))(v19, v20, v22);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
          }
          a1[v17[7]] = a2[v17[7]];
          uint64_t v23 = v17[8];
          int v24 = &a1[v23];
          char v25 = &a2[v23];
          uint64_t v26 = type metadata accessor for NoticeContent(0);
          if (swift_getEnumCaseMultiPayload() == 3)
          {
            *int v24 = *v25;
            uint64_t v48 = type metadata accessor for ShareableContentExposedContext(0);
            uint64_t v49 = v24;
            uint64_t v27 = *(int *)(v48 + 20);
            uint64_t v28 = (_OWORD *)((char *)v24 + v27);
            uint64_t v47 = v25;
            int v29 = (char *)v25 + v27;
            *uint64_t v28 = *(_OWORD *)((char *)v25 + v27);
            uint64_t v30 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
            uint64_t v50 = (char *)v28 + v30;
            unint64_t v31 = &v29[v30];
            uint64_t v32 = type metadata accessor for URL();
            uint64_t v33 = *(void *)(v32 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
            {
              uint64_t v34 = type metadata accessor for ShareableContentType(0);
              memcpy(v50, v31, *(void *)(*(void *)(v34 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v50, v31, v32);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v50, 0, 1, v32);
            }
            *(_OWORD *)((char *)v49 + *(int *)(v48 + 24)) = *(_OWORD *)((char *)v47 + *(int *)(v48 + 24));
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
          }
          swift_storeEnumTagMultiPayload();
        }
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      uint64_t v35 = *(int *)(sub_10000A38C((uint64_t *)&unk_1003676C0) + 48);
      uint64_t v36 = &a1[v35];
      uint64_t v37 = &a2[v35];
      uint64_t v38 = type metadata accessor for ExperienceEvent(0);
      if (swift_getEnumCaseMultiPayload() == 8)
      {
        uint64_t v39 = type metadata accessor for TransferEvent();
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          long long v40 = *((_OWORD *)v37 + 1);
          *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
          *((_OWORD *)v36 + 1) = v40;
          *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
          *((void *)v36 + 6) = *((void *)v37 + 6);
          uint64_t v41 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
          uint64_t v42 = &v36[v41];
          unint64_t v43 = &v37[v41];
          uint64_t v44 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v42, v43, v44);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
        }
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_35;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

unsigned char *sub_100022C48(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10001E89C((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for HandoffEvent);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for SessionEvent();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v10 = type metadata accessor for ExperienceEvent(0);
        if (swift_getEnumCaseMultiPayload() == 8)
        {
          uint64_t v11 = type metadata accessor for TransferEvent();
          if (swift_getEnumCaseMultiPayload() == 4)
          {
            long long v12 = *((_OWORD *)a2 + 1);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *((_OWORD *)a1 + 1) = v12;
            *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
            *((void *)a1 + 6) = *((void *)a2 + 6);
            uint64_t v13 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
            uint64_t v14 = &a1[v13];
            char v15 = &a2[v13];
            uint64_t v16 = type metadata accessor for Date();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
          }
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
        }
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_36:
          uint64_t v44 = sub_10000A38C(&qword_100367650);
          *(_OWORD *)&a1[*(int *)(v44 + 48)] = *(_OWORD *)&a2[*(int *)(v44 + 48)];
          swift_storeEnumTagMultiPayload();
          return a1;
        }
        uint64_t v8 = type metadata accessor for ExperienceEffect(0);
        if (swift_getEnumCaseMultiPayload() == 6)
        {
          uint64_t v9 = type metadata accessor for NoticeEffect();
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
            a1[16] = a2[16];
            uint64_t v17 = (int *)type metadata accessor for NoticeContext(0);
            uint64_t v18 = v17[6];
            char v19 = &a1[v18];
            uint64_t v20 = &a2[v18];
            uint64_t v21 = type metadata accessor for NoticeTapAction(0);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              uint64_t v22 = type metadata accessor for URL();
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v22 - 8) + 32))(v19, v20, v22);
              swift_storeEnumTagMultiPayload();
            }
            else
            {
              memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
            }
            a1[v17[7]] = a2[v17[7]];
            uint64_t v23 = v17[8];
            int v24 = &a1[v23];
            char v25 = &a2[v23];
            uint64_t v26 = type metadata accessor for NoticeContent(0);
            if (swift_getEnumCaseMultiPayload() == 3)
            {
              *int v24 = *v25;
              uint64_t v47 = type metadata accessor for ShareableContentExposedContext(0);
              uint64_t v48 = v24;
              uint64_t v27 = *(int *)(v47 + 20);
              uint64_t v28 = (_OWORD *)((char *)v24 + v27);
              int v29 = (char *)v25 + v27;
              *uint64_t v28 = *(_OWORD *)((char *)v25 + v27);
              uint64_t v30 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
              __dst = (char *)v28 + v30;
              unint64_t v31 = &v29[v30];
              uint64_t v32 = type metadata accessor for URL();
              uint64_t v46 = *(void *)(v32 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v31, 1, v32))
              {
                uint64_t v33 = type metadata accessor for ShareableContentType(0);
                memcpy(__dst, v31, *(void *)(*(void *)(v33 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v46 + 32))(__dst, v31, v32);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(__dst, 0, 1, v32);
              }
              *(_OWORD *)((char *)v48 + *(int *)(v47 + 24)) = *(_OWORD *)((char *)v25 + *(int *)(v47 + 24));
              swift_storeEnumTagMultiPayload();
            }
            else
            {
              memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
            }
            swift_storeEnumTagMultiPayload();
          }
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        }
        uint64_t v34 = *(int *)(sub_10000A38C((uint64_t *)&unk_1003676C0) + 48);
        uint64_t v35 = &a1[v34];
        uint64_t v36 = &a2[v34];
        uint64_t v37 = type metadata accessor for ExperienceEvent(0);
        if (swift_getEnumCaseMultiPayload() == 8)
        {
          uint64_t v38 = type metadata accessor for TransferEvent();
          if (swift_getEnumCaseMultiPayload() == 4)
          {
            long long v39 = *((_OWORD *)v36 + 1);
            *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
            *((_OWORD *)v35 + 1) = v39;
            *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
            *((void *)v35 + 6) = *((void *)v36 + 6);
            uint64_t v40 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
            uint64_t v41 = &v35[v40];
            uint64_t v42 = &v36[v40];
            uint64_t v43 = type metadata accessor for Date();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v41, v42, v43);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64));
          }
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
        }
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_36;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10002329C()
{
  v2[4] = &unk_10028F920;
  v2[5] = &unk_10028F938;
  uint64_t result = type metadata accessor for SessionEvent();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[6] = v2;
    v2[7] = &unk_10028F968;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void sub_100023354(int a1, uint64_t a2)
{
}

void sub_100023378(int a1, uint64_t a2)
{
  if (swift_unknownObjectWeakLoadStrong())
  {
    if (a1 == 2)
    {
      goto LABEL_12;
    }
    if (a1 == 1)
    {
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease();
      v9._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      id v10 = sub_1001F64E8();
      swift_bridgeObjectRetain();
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v10 ulog:40 message:v11];
      swift_bridgeObjectRelease();

      sub_10002D870(a2);
LABEL_12:
      swift_unknownObjectRelease();
      return;
    }
    if (a1)
    {
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      v12._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._id countAndFlagsBits = 0x3D6E656B6F74202CLL;
      v13._object = (void *)0xE800000000000000;
      String.append(_:)(v13);
      v14._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      id v15 = sub_1001F64E8();
      swift_bridgeObjectRetain();
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v15 ulog:60 message:v16];
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v4._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      id v5 = sub_1001F64E8();
      swift_bridgeObjectRetain();
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v5 ulog:40 message:v6];
      swift_bridgeObjectRelease();

      if (_CFXPCCreateCFObjectFromXPCObject())
      {
        sub_10000A38C(&qword_10035C7C0);
        if (swift_dynamicCast()) {
          uint64_t v7 = a2;
        }
        else {
          uint64_t v7 = 0;
        }
        type metadata accessor for XPCSubscriber();
        swift_allocObject();
        swift_retain();
        uint64_t v8 = sub_100145660(a2, v7);
        sub_10002D684((uint64_t)v8);
        swift_release();
        goto LABEL_12;
      }
      __break(1u);
    }
  }
}

void sub_100023754(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  int v5 = a2;
  uint64_t v6 = 7104878;
  unint64_t v7 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v8._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._id countAndFlagsBits = 0x6C417065656B202CLL;
  v9._object = (void *)0xEC0000003D657669;
  String.append(_:)(v9);
  uint64_t v10 = 1702195828;
  if ((a2 & 1) == 0) {
    uint64_t v10 = 0x65736C6166;
  }
  unint64_t v11 = 0xE400000000000000;
  if ((a2 & 1) == 0) {
    unint64_t v11 = 0xE500000000000000;
  }
  if (v5 == 2) {
    uint64_t v12 = 7104878;
  }
  else {
    uint64_t v12 = v10;
  }
  if (v5 == 2) {
    unint64_t v13 = 0xE300000000000000;
  }
  else {
    unint64_t v13 = v11;
  }
  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v15._id countAndFlagsBits = 8236;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  if (a3)
  {
    uint64_t v16 = Dictionary.description.getter();
    unint64_t v7 = v17;
  }
  else
  {
    uint64_t v16 = 0;
  }
  unint64_t v18 = v7;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  id v19 = sub_1001F64E8();
  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 ulog:40 message:v20];
  swift_bridgeObjectRelease();

  if (v5 == 2 || (sub_100023D20(v5 & 1), (v5 & 1) != 0))
  {
    sub_100023F88(a3);
    if (xpc_event_publisher_fire())
    {
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      v21._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._id countAndFlagsBits = 0x3D727265202CLL;
      v22._object = (void *)0xE600000000000000;
      String.append(_:)(v22);
      v23._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._id countAndFlagsBits = 0x616F6C796170202CLL;
      v24._object = (void *)0xEA00000000003D64;
      String.append(_:)(v24);
      if (a3)
      {
        uint64_t v6 = Dictionary.description.getter();
        uint64_t v26 = v25;
      }
      else
      {
        uint64_t v26 = (void *)0xE300000000000000;
      }
      v31._id countAndFlagsBits = v6;
      v31._object = v26;
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      id v32 = sub_1001F64E8();
      swift_bridgeObjectRetain();
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v32 ulog:90 message:v33];
    }
    else
    {
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      v27._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._id countAndFlagsBits = 0x64616F6C79617020;
      v28._object = (void *)0xE90000000000003DLL;
      String.append(_:)(v28);
      if (a3)
      {
        uint64_t v6 = Dictionary.description.getter();
        uint64_t v30 = v29;
      }
      else
      {
        uint64_t v30 = (void *)0xE300000000000000;
      }
      v34._id countAndFlagsBits = v6;
      v34._object = v30;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      id v32 = sub_1001F64E8();
      swift_bridgeObjectRetain();
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v32 ulog:40 message:v33];
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
}

uint64_t sub_100023C10()
{
  swift_bridgeObjectRelease();
  sub_100024144(v0 + 32);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for XPCPublisher()
{
  return self;
}

uint64_t sub_100023C7C()
{
  if (xpc_strerror()) {
    return String.init(cString:)();
  }
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v1._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return 0xD000000000000013;
}

void sub_100023D20(char a1)
{
  if (xpc_event_publisher_set_subscriber_keepalive())
  {
    _StringGuts.grow(_:)(61);
    v2._id countAndFlagsBits = 0xD00000000000002DLL;
    v2._object = (void *)0x80000001002B3090;
    String.append(_:)(v2);
    v3._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._id countAndFlagsBits = 0x6C417065656B202CLL;
    v4._object = (void *)0xEC0000003D657669;
    String.append(_:)(v4);
    if (a1) {
      uint64_t v5 = 1702195828;
    }
    else {
      uint64_t v5 = 0x65736C6166;
    }
    if (a1) {
      unint64_t v6 = 0xE400000000000000;
    }
    else {
      unint64_t v6 = 0xE500000000000000;
    }
    unint64_t v7 = v6;
    String.append(_:)(*(Swift::String *)&v5);
    swift_bridgeObjectRelease();
    id v8 = sub_1001F64E8();
    swift_bridgeObjectRetain();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v8 ulog:90 message:v9];
  }
  else
  {
    _StringGuts.grow(_:)(51);
    v10._object = (void *)0x80000001002B30C0;
    v10._id countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v10);
    v11._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._id countAndFlagsBits = 0x6C417065656B202CLL;
    v12._object = (void *)0xEC0000003D657669;
    String.append(_:)(v12);
    if (a1) {
      uint64_t v13 = 1702195828;
    }
    else {
      uint64_t v13 = 0x65736C6166;
    }
    if (a1) {
      unint64_t v14 = 0xE400000000000000;
    }
    else {
      unint64_t v14 = 0xE500000000000000;
    }
    unint64_t v15 = v14;
    String.append(_:)(*(Swift::String *)&v13);
    swift_bridgeObjectRelease();
    id v8 = sub_1001F64E8();
    swift_bridgeObjectRetain();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v8 ulog:40 message:v9];
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_100023F88(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v2 = _CFXPCCreateXPCObjectFromCFObject();

  if (!v2)
  {
    id v3 = sub_1001F64E8();
    NSString v4 = String._bridgeToObjectiveC()();
    [v3 ulog:90 message:v4];

    return 0;
  }
  return v2;
}

void sub_10002402C()
{
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v0._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._id countAndFlagsBits = 8233;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  v2._id countAndFlagsBits = sub_100023C7C();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  id v3 = sub_1001F64E8();
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 ulog:90 message:v4];
  swift_bridgeObjectRelease();
}

uint64_t sub_100024144(uint64_t a1)
{
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for TransferrableActivity.Content(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v5 = v3;
  return a1;
}

void destroy for XPCLinkRole(id *a1)
{
}

uint64_t assignWithCopy for TransferrableActivity.Content(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v6 = v3;

  return a1;
}

uint64_t initializeWithTake for TransferrableActivity.Content(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for TransferrableActivity.Content(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for TransferrableActivity.Content(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TransferrableActivity.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000242C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1000242D0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CallType()
{
  return &type metadata for CallType;
}

uint64_t sub_1000242F0()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NanoPreferencesSyncServerModel()
{
  return self;
}

id sub_10002435C()
{
  Swift::String v1 = *(void **)(v0 + 24);
  id v2 = v1;
  if (v1 == (void *)1)
  {
    id v3 = objc_allocWithZone((Class)NSUserDefaults);
    NSString v4 = String._bridgeToObjectiveC()();
    id v2 = [v3 initWithSuiteName:v4];

    id v5 = *(void **)(v0 + 24);
    *(void *)(v0 + 24) = v2;
    id v6 = v2;
    sub_100027B6C(v5);
  }
  sub_100027B7C(v1);
  return v2;
}

uint64_t sub_1000243FC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100024408()
{
  return swift_bridgeObjectRetain();
}

uint64_t *sub_100024414(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = *v1;
  v2[3] = 1;
  v2[4] = (uint64_t)[objc_allocWithZone((Class)NPSManager) init];
  sub_10000A38C(&qword_10035CA28);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = &_swiftEmptyDictionarySingleton;
  v2[5] = v5;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = &_swiftEmptyDictionarySingleton;
  v2[6] = v6;
  v2[7] = (uint64_t)&_swiftEmptySetSingleton;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v4, (uint64_t)&off_100320298);
  v2[2] = a1;
  return v2;
}

uint64_t sub_100024508()
{
  id v1 = sub_1001F5ED4();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  swift_release();
  sub_100027B6C(*(id *)(v0 + 24));

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000245A0()
{
  sub_100024508();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NanoPreferencesSyncServer()
{
  return self;
}

void sub_1000245F8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_10000A38C(&qword_10035CA30);
  uint64_t v62 = *(void *)(v2 - 8);
  uint64_t v63 = v2;
  __chkstk_darwin(v2);
  unint64_t v61 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10035CA38);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10035CA40);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = sub_1001F5ED4();
  NSString v12 = String._bridgeToObjectiveC()();
  [v11 ulog:40 message:v12];

  uint64_t v13 = v0;
  id v14 = sub_10002435C();
  if (v14)
  {
    unint64_t v15 = v14;
    uint64_t v56 = v4;
    uint64_t v59 = v8;
    uint64_t v60 = v7;
    uint64_t v16 = sub_10002710C(v14, 0xD000000000000018, (void *)0x80000001002B32A0);
    if (v16)
    {
      uint64_t v17 = v0[5];
      *(void *)(v17 + 24) = v16;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_100104F7C();
      uint64_t v68 = *(void *)(v17 + 24);
      swift_bridgeObjectRetain();
      CurrentValueSubject.send(_:)();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    uint64_t v55 = v6;
    long long v57 = v15;
    uint64_t v58 = v10;
    uint64_t v65 = (void *)0x80000001002B32C0;
    uint64_t v18 = sub_10002710C(v15, 0xD000000000000014, (void *)0x80000001002B32C0);
    if (v18)
    {
      uint64_t v19 = v0[6];
      *(void *)(v19 + 24) = v18;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_100104F7C();
      uint64_t v68 = *(void *)(v19 + 24);
      swift_bridgeObjectRetain();
      CurrentValueSubject.send(_:)();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    uint64_t v64 = v0[2];
    swift_retain();
    uint64_t v68 = sub_100104EDC();
    uint64_t v20 = sub_10000A38C(&qword_10035CA48);
    uint64_t v49 = &protocol conformance descriptor for CurrentValueSubject<A, B>;
    uint64_t v21 = sub_10000B010(&qword_10035CA50, &qword_10035CA48);
    uint64_t v52 = v20;
    uint64_t v51 = v21;
    uint64_t v22 = Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v68 = v22;
    Swift::String v24 = (void *)swift_allocObject();
    uint64_t v47 = 0xD000000000000018;
    uint64_t v48 = (void *)0x80000001002B32A0;
    v24[2] = 0xD000000000000018;
    v24[3] = 0x80000001002B32A0;
    v24[4] = v0;
    v24[5] = KeyPath;
    v24[6] = v1;
    swift_retain();
    swift_retain();
    uint64_t v25 = sub_10000A38C(&qword_10035CA58);
    uint64_t v50 = &protocol conformance descriptor for AnyPublisher<A, B>;
    uint64_t v53 = sub_10000B010(&qword_10035CA60, &qword_10035CA58);
    uint64_t v54 = v25;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_retain();
    uint64_t v68 = sub_100104EDC();
    uint64_t v26 = Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    uint64_t v27 = swift_getKeyPath();
    uint64_t v68 = v26;
    Swift::String v28 = (void *)swift_allocObject();
    void v28[2] = 0xD000000000000014;
    v28[3] = v65;
    v28[4] = v0;
    v28[5] = v27;
    v28[6] = v1;
    swift_retain();
    swift_retain();
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_retain();
    uint64_t v68 = sub_100104F7C();
    sub_10000A38C(&qword_10035CA68);
    sub_10000B010(&qword_10035CA70, &qword_10035CA68);
    uint64_t v29 = Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    uint64_t v30 = v57;
    sub_100025BC4(v29, v57, 0xD000000000000029, 0x80000001002B32E0, v47, v48);
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_retain();
    uint64_t v68 = sub_100104F7C();
    uint64_t v31 = Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    id v32 = v30;
    sub_100025BC4(v31, v30, 0xD000000000000029, 0x80000001002B32E0, 0xD000000000000014, v65);
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v33 = v64;
    uint64_t v68 = *(void *)(*(void *)(v64 + 32) + 40);
    sub_10000A38C(&qword_10035ABB8);
    sub_10000B010(&qword_10035ABC0, &qword_10035ABB8);
    uint64_t v68 = Publisher.eraseToAnyPublisher()();
    swift_retain();
    sub_10000A38C(&qword_10035ABC8);
    sub_10000A38C(&qword_10035CA78);
    sub_10000B010(&qword_10035ABD0, &qword_10035ABC8);
    Swift::String v34 = v61;
    Publisher.map<A>(_:)();
    swift_release();
    swift_release();
    sub_10000A38C(&qword_10035CA80);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_10028D430;
    uint64_t v36 = *(void *)(v33 + 32);
    uint64_t v37 = *(void **)(v36 + 32);
    swift_retain();
    [v37 lock];
    swift_beginAccess();
    uint64_t v38 = swift_bridgeObjectRetain();
    long long v39 = sub_1000F06FC(v38);
    swift_bridgeObjectRelease();
    [*(id *)(v36 + 32) unlock];
    swift_release();
    *(void *)(v35 + 32) = v39;
    sub_10000B010(&qword_10035CA88, &qword_10035CA30);
    uint64_t v40 = v63;
    Publisher.prepend(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v34, v40);
    swift_retain();
    uint64_t v66 = sub_100104EDC();
    uint64_t v41 = Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    uint64_t v66 = v41;
    swift_retain();
    uint64_t v67 = sub_100104EDC();
    uint64_t v42 = Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    uint64_t v67 = v42;
    sub_10000B010(&qword_10035CA90, &qword_10035CA38);
    uint64_t v43 = v58;
    Publishers.CombineLatest3.init(_:_:_:)();
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + 16) = sub_1000273FC;
    *(void *)(v44 + 24) = v13;
    sub_10000B010(&qword_10035CA98, &qword_10035CA40);
    swift_retain();
    uint64_t v45 = v60;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v43, v45);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();

    swift_release();
  }
  else
  {
    sub_10016AE10(60, 0xD000000000000010, (void *)0x80000001002B3280, 0, v1, (uint64_t)&off_100320298);
  }
}

uint64_t sub_10002517C(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)a2 + 40) + 24) = *a1;
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_bridgeObjectRelease();
  sub_100104F7C();
  swift_bridgeObjectRetain();
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10002521C(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)a2 + 48) + 24) = *a1;
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_bridgeObjectRelease();
  sub_100104F7C();
  swift_bridgeObjectRetain();
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

id sub_1000252BC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  [*(id *)(v3 + 32) lock];
  swift_beginAccess();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_1000F06FC(v4);
  swift_bridgeObjectRelease();
  id result = [*(id *)(v3 + 32) unlock];
  *a2 = v5;
  return result;
}

uint64_t sub_100025344(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = result;
  if (a2)
  {
    uint64_t KeyPath = swift_getKeyPath();
    sub_1000266A8(0xD000000000000018, (void *)0x80000001002B32A0, KeyPath, v4, a2, (uint64_t (*)(uint64_t))sub_10002545C);
    id result = swift_release();
  }
  if (a3)
  {
    uint64_t v7 = swift_getKeyPath();
    sub_1000266A8(0xD000000000000014, (void *)0x80000001002B32C0, v7, v4, a3, (uint64_t (*)(uint64_t))sub_10002558C);
    return swift_release();
  }
  return result;
}

uint64_t sub_10002545C()
{
  uint64_t v0 = sub_10000A38C(&qword_10036C090);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003D87C((uint64_t)v2);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10000D78C((uint64_t)v2, &qword_10036C090);
    return 0;
  }
  else
  {
    uint64_t v5 = UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  }
  return v5;
}

void sub_10002558C()
{
}

void sub_1000255B0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  unint64_t v0 = *(void *)(v21 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities);
  swift_bridgeObjectRetain();
  swift_release();
  if (v0)
  {
    if (v0 >> 62)
    {
LABEL_49:
      swift_bridgeObjectRetain();
      uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v1) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v1 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v1)
      {
LABEL_4:
        unint64_t v2 = 0;
        unint64_t v3 = v0 & 0xC000000000000001;
        unint64_t v4 = v0 + 32;
        while (1)
        {
          if (v3)
          {
            swift_bridgeObjectRetain();
            id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            swift_bridgeObjectRelease();
          }
          else
          {
            id v5 = *(id *)(v0 + 8 * v2 + 32);
          }
          unsigned int v6 = [v5 type];

          if (v6 == 4) {
            break;
          }
          uint64_t v7 = (char *)(v2 + 1);
          if (__OFADD__(v2, 1))
          {
            __break(1u);
LABEL_41:
            __break(1u);
            goto LABEL_42;
          }
          ++v2;
          if (v7 == (char *)v1) {
            goto LABEL_50;
          }
        }
        if (v1 == v2) {
          goto LABEL_50;
        }
        uint64_t v20 = v1 - 1;
        while (1)
        {
          if (v3)
          {
            swift_bridgeObjectRetain();
            id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v2 & 0x8000000000000000) != 0) {
              goto LABEL_53;
            }
            if (v2 >= *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_54;
            }
            uint64_t v9 = *(void **)(v4 + 8 * v2);
            swift_bridgeObjectRetain();
            id v8 = v9;
          }
          Swift::String v10 = v8;
          id v11 = [v8 identifier:v20];
          swift_bridgeObjectRelease();

          if (v11) {
            break;
          }
          if (v2 == v1)
          {
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          if (__OFADD__(v2, 1)) {
            goto LABEL_52;
          }
          if (v2 + 1 == v1) {
            goto LABEL_50;
          }
          while (1)
          {
            unint64_t v12 = v2 + 1;
            if (v3)
            {
              swift_bridgeObjectRetain();
              id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              swift_bridgeObjectRelease();
            }
            else
            {
              if ((v12 & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_48:
                __break(1u);
                goto LABEL_49;
              }
              if (v12 >= *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_48;
              }
              id v13 = *(id *)(v0 + 8 * v2 + 40);
            }
            unsigned int v14 = [v13 type];

            if (v14 == 4) {
              break;
            }
            unint64_t v15 = (char *)(v2 + 2);
            if (__OFADD__(v12, 1)) {
              goto LABEL_41;
            }
            ++v2;
            if (v15 == (char *)v1) {
              goto LABEL_50;
            }
          }
          if (v20 == v2++) {
            goto LABEL_50;
          }
        }

        if (v2 == v1) {
          goto LABEL_50;
        }
        if (v3)
        {
          id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_45;
        }
LABEL_42:
        if ((v2 & 0x8000000000000000) != 0)
        {
LABEL_55:
          __break(1u);
        }
        else if (v2 < *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v17 = *(id *)(v4 + 8 * v2);
LABEL_45:
          unint64_t v2 = (unint64_t)v17;
          id v18 = [v17 identifier];
          if (v18)
          {
            uint64_t v19 = v18;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            swift_bridgeObjectRelease();

            return;
          }
          goto LABEL_57;
        }
        __break(1u);
LABEL_57:

        __break(1u);
        return;
      }
    }
LABEL_50:
    swift_bridgeObjectRelease();
  }
}

uint64_t *sub_100025914(uint64_t *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *result;
  if (*result)
  {
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    uint64_t v18 = 0x20676E696E757250;
    uint64_t v19 = (void *)0xE800000000000000;
    v11._id countAndFlagsBits = a2;
    v11._object = a3;
    String.append(_:)(v11);
    v12._object = (void *)0x80000001002B3330;
    v12._id countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v12);
    v13._id countAndFlagsBits = Set.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    sub_10016ABE4(v18, v19, 0, a6, (uint64_t)&off_100320298);
    swift_bridgeObjectRelease();
    uint64_t v20 = a4;
    swift_retain();
    unsigned int v14 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
    uint64_t v16 = *v15;
    swift_bridgeObjectRetain();
    v14(&v18, 0);
    swift_release();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_100027934(v16, v16, v6, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v18 = a4;
    uint64_t v20 = v17;
    swift_retain();
    swift_setAtReferenceWritableKeyPath();
    return (uint64_t *)swift_release();
  }
  return result;
}

uint64_t sub_100025AD4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (void *)a2[1];
  uint64_t result = sub_10019C160(*a2, (uint64_t)v6, a3);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v9, "Removing key: ");
    HIBYTE(v9[1]) = -18;
    v8._id countAndFlagsBits = v5;
    v8._object = v6;
    String.append(_:)(v8);
    sub_10016ABE4(v9[0], (void *)v9[1], 0, a4, (uint64_t)&off_100320298);
    swift_bridgeObjectRelease();
    sub_100130348(v5, (uint64_t)v6);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100025BC4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v93 = a3;
  uint64_t v95 = a4;
  unsigned __int8 v96 = a6;
  uint64_t v99 = a5;
  uint64_t v94 = a2;
  uint64_t v7 = sub_10000A38C(&qword_10035CAA0);
  uint64_t v90 = *(void *)(v7 - 8);
  uint64_t v91 = v7;
  __chkstk_darwin(v7);
  char v89 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10035CAA8);
  uint64_t v84 = *(void *)(v9 - 8);
  uint64_t v85 = v9;
  __chkstk_darwin(v9);
  uint64_t v83 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_10035AC20);
  __chkstk_darwin(v11 - 8);
  Swift::String v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_10000A38C(&qword_10035CAB0);
  uint64_t v79 = *(void *)(v80 - 8);
  uint64_t v18 = *(void *)(v79 + 64);
  uint64_t v19 = __chkstk_darwin(v80);
  uint64_t v78 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v74 - v20;
  uint64_t v22 = sub_10000A38C(&qword_10035CAB8);
  uint64_t v87 = *(void *)(v22 - 8);
  uint64_t v88 = v22;
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v82 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = v24;
  __chkstk_darwin(v23);
  uint64_t v86 = (char *)&v74 - v25;
  uint64_t v102 = a1;
  OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)();
  if (qword_10035A628 != -1) {
    swift_once();
  }
  uint64_t v26 = (void *)qword_1003ACB50;
  uint64_t v100 = qword_1003ACB50;
  uint64_t v27 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v13, 1, 1, v27);
  id v28 = v26;
  uint64_t v98 = sub_10000A38C(&qword_10035CAC0);
  sub_10000A34C();
  uint64_t v97 = sub_10000B010(&qword_10035CAC8, &qword_10035CAC0);
  sub_100027470((unint64_t *)&qword_10035AC60, 255, (void (*)(uint64_t))sub_10000A34C);
  uint64_t v76 = v21;
  Publisher.debounce<A>(for:scheduler:options:)();
  sub_10000D78C((uint64_t)v13, &qword_10035AC20);

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v100 = 544695630;
  unint64_t v101 = 0xE400000000000000;
  v29._id countAndFlagsBits = v99;
  v29._object = v96;
  String.append(_:)(v29);
  v30._id countAndFlagsBits = 8250;
  v30._object = (void *)0xE200000000000000;
  String.append(_:)(v30);
  id v77 = (id)v100;
  unint64_t v75 = v101;
  id v31 = sub_1001F5ED4();
  uint64_t v32 = v79;
  uint64_t v33 = v78;
  Swift::String v34 = v21;
  uint64_t v35 = v80;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v78, v34, v80);
  unint64_t v36 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  unint64_t v37 = (v18 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = (v37 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = (v38 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = 0;
  *(void *)(v40 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v40 + v36, v33, v35);
  uint64_t v41 = (void *)(v40 + v37);
  unint64_t v42 = v75;
  *uint64_t v41 = v77;
  v41[1] = v42;
  uint64_t v43 = (void *)(v40 + v38);
  void *v43 = 0;
  v43[1] = 0xE000000000000000;
  *(void *)(v40 + v39) = v31;
  *(_DWORD *)(v40 + ((v39 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  swift_bridgeObjectRetain();
  id v44 = v31;
  uint64_t v78 = (char *)sub_10000A38C(&qword_10035CAD0);
  sub_10000B010(&qword_10035CAD8, &qword_10035CAB0);
  uint64_t v45 = v83;
  uint64_t v46 = v76;
  Publisher.map<A>(_:)();
  swift_release();
  id v77 = &protocol conformance descriptor for Publishers.Map<A, B>;
  sub_10000B010(&qword_10035CAE0, &qword_10035CAA8);
  uint64_t v47 = v85;
  uint64_t v48 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v45, v47);
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v32 + 8))(v46, v35);
  uint64_t v100 = v48;
  sub_1000276D0();
  uint64_t v49 = v86;
  Publisher<>.removeDuplicates()();
  swift_release();
  id v50 = sub_1001F5ED4();
  uint64_t v52 = v87;
  uint64_t v51 = v88;
  uint64_t v53 = v82;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v82, v49, v88);
  unint64_t v54 = (*(unsigned __int8 *)(v52 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  unint64_t v55 = (v81 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v56 = (v55 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v57 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v52 + 32))(v57 + v54, v53, v51);
  uint64_t v58 = (void *)(v57 + v55);
  void *v58 = 0xD000000000000010;
  v58[1] = 0x80000001002B3310;
  *(void *)(v57 + v56) = v50;
  *(_DWORD *)(v57 + ((v56 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  sub_10000B010(&qword_10035CAF0, &qword_10035CAB8);
  id v59 = v50;
  uint64_t v60 = v89;
  uint64_t v61 = v51;
  uint64_t v62 = v49;
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10035CAF8, &qword_10035CAA0);
  uint64_t v63 = v91;
  uint64_t v64 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v60, v63);

  (*(void (**)(char *, uint64_t))(v52 + 8))(v62, v61);
  uint64_t v100 = v64;
  uint64_t v65 = *(void **)(v92 + 32);
  uint64_t v66 = (void *)swift_allocObject();
  uint64_t v68 = v94;
  uint64_t v67 = v95;
  uint64_t v69 = v99;
  v66[2] = v94;
  v66[3] = v69;
  v66[4] = v96;
  v66[5] = v65;
  v66[6] = v93;
  v66[7] = v67;
  id v70 = v65;
  id v71 = v68;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v72 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  return v72;
}

void sub_10002654C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  NSString v10 = String._bridgeToObjectiveC()();
  [a2 setValue:isa forKey:v10];

  NSString v11 = String._bridgeToObjectiveC()();
  sub_10000A38C((uint64_t *)&unk_10035E7E0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028D430;
  *(void *)(inited + 32) = a3;
  *(void *)(inited + 40) = a4;
  swift_bridgeObjectRetain();
  sub_1001C9F78(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  Class v13 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a5 synchronizeUserDefaultsDomain:v11 keys:v13];
}

uint64_t sub_1000266A8(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  v66._object = a2;
  uint64_t v65 = *v6;
  v66._id countAndFlagsBits = a1;
  uint64_t v78 = (uint64_t)v6;
  uint64_t v64 = v6;
  swift_retain();
  uint64_t v63 = a3;
  uint64_t v9 = (void (*)(id *, void))swift_readAtKeyPath();
  unint64_t v11 = *v10;
  swift_bridgeObjectRetain_n();
  v9(v77, 0);
  swift_release();
  unint64_t v12 = *(void *)(v11 + 16);
  swift_bridgeObjectRelease();
  if (v12 >= 0x1F5)
  {
    swift_bridgeObjectRelease();
    v77[0] = 0;
    v77[1] = (id)0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v13._object = (void *)0x80000001002B3250;
    v13._id countAndFlagsBits = 0xD000000000000025;
    String.append(_:)(v13);
    uint64_t v78 = v12;
    v14._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._id countAndFlagsBits = 47;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    uint64_t v78 = 500;
    v16._id countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._id countAndFlagsBits = 0x747465736572203ALL;
    v17._object = (void *)0xEB00000000676E69;
    String.append(_:)(v17);
    id v18 = sub_1001F5ED4();
    swift_bridgeObjectRetain();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 ulog:60 message:v19];
    swift_bridgeObjectRelease();

    unint64_t v11 = sub_100268D5C((uint64_t)_swiftEmptyArrayStorage);
  }
  if (a4 >> 62) {
    goto LABEL_71;
  }
  uint64_t v20 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  id v68 = (id)v11;
  while (v20)
  {
    unint64_t v11 = 0;
    unint64_t v75 = a4 & 0xC000000000000001;
    unint64_t v70 = a4 + 32;
    uint64_t v71 = a4 & 0xFFFFFFFFFFFFFF8;
    unint64_t v72 = a4;
    uint64_t v73 = v20;
    while (1)
    {
      if (v75)
      {
        uint64_t v21 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v22 = __OFADD__(v11++, 1);
        if (v22) {
          goto LABEL_68;
        }
      }
      else
      {
        if (v11 >= *(void *)(v71 + 16)) {
          goto LABEL_69;
        }
        uint64_t v21 = *(void *)(v70 + 8 * v11);
        swift_retain();
        BOOL v22 = __OFADD__(v11++, 1);
        if (v22) {
          goto LABEL_68;
        }
      }
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v76 = v21;
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v23 = (char *)v77[0];
      uint64_t v24 = *(void **)((char *)v77[0] + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideMediaRouteID + 8);
      if (v24)
      {
        uint64_t v74 = *(void *)((char *)v77[0] + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideMediaRouteID);
        swift_bridgeObjectRetain();
        swift_release();
        goto LABEL_34;
      }
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      id v25 = v77[0];
      if (v77[0])
      {
        id v26 = [v77[0] mediaRouteIdentifier];

        if (v26)
        {
          uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v27;
          swift_release();

          goto LABEL_34;
        }
      }
      if (*(void *)&v23[OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities]) {
        unint64_t v28 = *(void *)&v23[OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities];
      }
      else {
        unint64_t v28 = (unint64_t)_swiftEmptyArrayStorage;
      }
      if (!(v28 >> 62))
      {
        uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v29) {
          break;
        }
        goto LABEL_30;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v29) {
        break;
      }
LABEL_30:
      swift_bridgeObjectRelease();
      uint64_t v24 = *(void **)&v23[OBJC_IVAR____TtC17proximitycontrold8Identity_discoveredMediaRouteID + 8];
      if (v24)
      {
        uint64_t v74 = *(void *)&v23[OBJC_IVAR____TtC17proximitycontrold8Identity_discoveredMediaRouteID];
        swift_bridgeObjectRetain();
        swift_release();
LABEL_33:
        uint64_t v20 = v73;
LABEL_34:
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        unint64_t v37 = (char *)v77[0];
        unint64_t v38 = *(void **)((char *)v77[0] + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice);
        if (v38) {
          unint64_t v39 = 4 * ((unint64_t)[v38 relationship] & 1);
        }
        else {
          unint64_t v39 = 0;
        }
        unint64_t v40 = *(void *)&v37[OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities];
        if (!v40)
        {
          swift_release();
          uint64_t v47 = v76;
          if ((v39 & 2) == 0) {
            goto LABEL_61;
          }
          goto LABEL_57;
        }
        if (v40 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
          if (!v41)
          {
LABEL_56:
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v47 = v76;
            if ((v39 & 2) == 0) {
              goto LABEL_61;
            }
            goto LABEL_57;
          }
        }
        else
        {
          uint64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v41) {
            goto LABEL_56;
          }
        }
        if (v41 < 1) {
          goto LABEL_70;
        }
        uint64_t v42 = 0;
        do
        {
          if ((v40 & 0xC000000000000001) != 0) {
            id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v43 = *(id *)(v40 + 8 * v42 + 32);
          }
          id v44 = v43;
          ++v42;
          unsigned int v45 = [v43 type:v63];

          uint64_t v46 = v39 | 2;
          if (v45 != 9) {
            uint64_t v46 = v39;
          }
          if (v45 - 3 >= 2) {
            unint64_t v39 = v46;
          }
          else {
            v39 |= 1uLL;
          }
        }
        while (v41 != v42);
        swift_release();
        swift_bridgeObjectRelease();
        a4 = v72;
        uint64_t v20 = v73;
        uint64_t v47 = v76;
        if ((v39 & 2) == 0) {
          goto LABEL_61;
        }
LABEL_57:
        if ((v39 & 4) != 0) {
          goto LABEL_61;
        }
        uint64_t v48 = a6(v47);
        if (!v49) {
          goto LABEL_61;
        }
        uint64_t v50 = v48;
        uint64_t v51 = (void *)v49;
        if ((sub_10019C160(v48, v49, a5) & 1) == 0)
        {
          swift_bridgeObjectRelease();
LABEL_61:
          swift_release();
          goto LABEL_62;
        }
        v77[0] = 0;
        v77[1] = (id)0xE000000000000000;
        _StringGuts.grow(_:)(36);
        swift_bridgeObjectRelease();
        strcpy((char *)v77, "Assigning to ");
        HIWORD(v77[1]) = -4864;
        String.append(_:)(v66);
        v52._id countAndFlagsBits = 0x20726F6620;
        v52._object = (void *)0xE500000000000000;
        String.append(_:)(v52);
        swift_retain();
        uint64_t v53 = sub_1001F7514();
        unint64_t v55 = v54;
        swift_release();
        v56._id countAndFlagsBits = v53;
        v56._object = v55;
        String.append(_:)(v56);
        swift_bridgeObjectRelease();
        v57._id countAndFlagsBits = 0x3D4449203ALL;
        v57._object = (void *)0xE500000000000000;
        String.append(_:)(v57);
        v58._id countAndFlagsBits = v50;
        v58._object = v51;
        String.append(_:)(v58);
        v59._id countAndFlagsBits = 0x3D524D202CLL;
        v59._object = (void *)0xE500000000000000;
        String.append(_:)(v59);
        v60._id countAndFlagsBits = v74;
        v60._object = v24;
        String.append(_:)(v60);
        sub_10016ABE4((uint64_t)v77[0], v77[1], 0, v65, (uint64_t)&off_100320298);
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v77[0] = v68;
        sub_100264AD4(v74, (uint64_t)v24, v50, (uint64_t)v51, isUniquelyReferenced_nonNull_native);
        id v68 = v77[0];
        a4 = v72;
        swift_release();
        swift_bridgeObjectRelease();
LABEL_62:
        swift_bridgeObjectRelease();
        if (v11 == v20) {
          goto LABEL_72;
        }
      }
      else
      {
        swift_release();
        swift_release();
        uint64_t v20 = v73;
        if (v11 == v73) {
          goto LABEL_72;
        }
      }
    }
    uint64_t v30 = 4;
    while (1)
    {
      id v31 = (v28 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v28 + 8 * v30);
      uint64_t v32 = v31;
      uint64_t v33 = v30 - 3;
      if (__OFADD__(v30 - 4, 1)) {
        break;
      }
      id v34 = [v31 mediaRouteID];
      if (v34)
      {
        uint64_t v35 = v34;
        uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v24 = v36;
        swift_release();
        swift_bridgeObjectRelease();

        goto LABEL_33;
      }

      ++v30;
      if (v33 == v29) {
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    id v68 = (id)v11;
  }
LABEL_72:
  swift_bridgeObjectRelease();
  v77[0] = v64;
  uint64_t v78 = (uint64_t)v68;
  swift_retain();
  swift_setAtReferenceWritableKeyPath();
  return swift_release();
}

uint64_t sub_100026FA4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1000B4664(a1, WitnessTable);
}

uint64_t sub_100026FF8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100027470(&qword_10035CA20, a2, (void (*)(uint64_t))type metadata accessor for NanoPreferencesSyncServer);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100027060@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, uint64_t a3@<X5>, void *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a2)
  {
    id v7 = a2;
    NSString v8 = String._bridgeToObjectiveC()();
    [v7 ulog:a3 message:v8];
  }
  else
  {
    NSLog(_:_:)();
  }
  *a4 = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10002710C(void *a1, uint64_t a2, void *a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [a1 valueForKey:v6];

  if (!v7)
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    *(void *)&v20[0] = 539173667;
    *((void *)&v20[0] + 1) = 0xE400000000000000;
    v9._id countAndFlagsBits = a2;
    v9._object = a3;
    String.append(_:)(v9);
    v10._object = (void *)0x80000001002B3350;
    v10._id countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v10);
    id v11 = sub_1001F5ED4();
    swift_bridgeObjectRetain();
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v11 ulog:40 message:v12];
    swift_bridgeObjectRelease();

    return 0;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_100027B00(v19, v20);
  sub_100027B10((uint64_t)v20, (uint64_t)v19);
  sub_10000A38C(&qword_10035CAD0);
  if (!swift_dynamicCast())
  {
    *(void *)&v19[0] = 0;
    *((void *)&v19[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    *(void *)&v19[0] = 539173667;
    *((void *)&v19[0] + 1) = 0xE400000000000000;
    v13._id countAndFlagsBits = a2;
    v13._object = a3;
    String.append(_:)(v13);
    v14._id countAndFlagsBits = 0xD000000000000018;
    v14._object = (void *)0x80000001002B3370;
    String.append(_:)(v14);
    id v15 = sub_1001F5ED4();
    swift_bridgeObjectRetain();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v15 ulog:40 message:v16];
    swift_bridgeObjectRelease();

    sub_10000CC5C((uint64_t)v20);
    return 0;
  }
  uint64_t v8 = v18;
  sub_10000CC5C((uint64_t)v20);
  return v8;
}

uint64_t sub_100027360@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)(*(void *)a1 + 40) + 24);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100027380@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)(*(void *)a1 + 48) + 24);
  return swift_bridgeObjectRetain();
}

uint64_t sub_10002739C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t *sub_1000273E4(uint64_t *a1)
{
  return sub_100025914(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

id sub_1000273F4@<X0>(void *a1@<X8>)
{
  return sub_1000252BC(v1, a1);
}

uint64_t sub_1000273FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  return sub_100025344(result, a2, a3);
}

uint64_t sub_100027404()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002743C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(v1 + 16))(*a1, a1[1], a1[2]);
}

uint64_t sub_100027470(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000274B8()
{
  uint64_t v1 = sub_10000A38C(&qword_10035CAB0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  uint64_t v5 = (v3 + 32) & ~v3;
  unint64_t v6 = (((((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, (v6 + 11) & 0xFFFFFFFFFFFFFFF8 | 4, v3 | 7);
}

uint64_t sub_1000275DC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_10000A38C(&qword_10035CAB0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  *a2 = sub_100038C1C(*a1, *(uint64_t (**)(uint64_t *))(v2 + 16), *(void *)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void *)(v2 + v8), *(void **)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));

  return swift_bridgeObjectRetain();
}

unint64_t sub_1000276D0()
{
  unint64_t result = qword_10035CAE8;
  if (!qword_10035CAE8)
  {
    sub_10000A3D0(&qword_10035CAD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035CAE8);
  }
  return result;
}

uint64_t sub_10002773C()
{
  uint64_t v1 = sub_10000A38C(&qword_10035CAB8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, (v6 + 11) & 0xFFFFFFFFFFFFFFF8 | 4, v5);
}

uint64_t sub_100027808@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_10000A38C(&qword_10035CAB8) - 8);
  unint64_t v6 = (((*(void *)(v5 + 64)
        + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = *(void **)(v2 + v6);
  uint64_t v8 = *(unsigned int *)(v2 + ((v6 + 11) & 0xFFFFFFFFFFFFFFF8));

  return sub_100027060(a1, v7, v8, a2);
}

uint64_t sub_1000278D4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100027924(uint64_t a1)
{
  sub_10002654C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100027934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a1;
  uint64_t v8 = a2 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a2 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  if (!v11) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    v22[0] = *v20;
    v22[1] = v21;
    swift_bridgeObjectRetain();
    sub_100025AD4((uint64_t)&v23, v22, a3, a4);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v12) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v14);
    if (!v18) {
      break;
    }
LABEL_17:
    unint64_t v11 = (v18 - 1) & v18;
  }
  int64_t v19 = v14 + 1;
  if (v14 + 1 >= v12) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18) {
    goto LABEL_16;
  }
  int64_t v19 = v14 + 2;
  if (v14 + 2 >= v12) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18) {
    goto LABEL_16;
  }
  int64_t v19 = v14 + 3;
  if (v14 + 3 >= v12) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18) {
    goto LABEL_16;
  }
  int64_t v19 = v14 + 4;
  if (v14 + 4 >= v12)
  {
LABEL_26:
    swift_release();
    return v23;
  }
  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
LABEL_16:
    int64_t v14 = v19;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v12) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

_OWORD *sub_100027B00(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100027B10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_100027B6C(id a1)
{
  if (a1 != (id)1) {
}
  }

id sub_100027B7C(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

void *initializeWithCopy for CompoundSpring(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x170uLL);
}

uint64_t getEnumTagSinglePayload for CompoundSpring(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 368)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CompoundSpring(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 360) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 368) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CompoundSpring()
{
  return &type metadata for CompoundSpring;
}

uint64_t sub_100027C50()
{
  swift_bridgeObjectRelease();
  sub_10000DBEC(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC17proximitycontrold15GuestHostDevice_timestamp;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100027D10()
{
  return type metadata accessor for GuestHostDevice();
}

uint64_t type metadata accessor for GuestHostDevice()
{
  uint64_t result = qword_10035CB28;
  if (!qword_10035CB28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100027D64()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100027E14@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *a1 = *(void *)(*(void *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100027E24(uint64_t a1)
{
  uint64_t v2 = *v1;
  v5[3] = a1;
  v5[0] = v2;
  swift_retain();
  uint64_t v3 = sub_100027F64(v5, (uint64_t (*)(void))type metadata accessor for GuestHostDevice, &qword_10035CBD8);
  sub_10000CC5C((uint64_t)v5);
  return v3;
}

void *sub_100027E98()
{
  return &protocol witness table for String;
}

unint64_t sub_100027EA4(uint64_t a1)
{
  unint64_t result = sub_100027ECC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100027ECC()
{
  unint64_t result = qword_10035CBD0;
  if (!qword_10035CBD0)
  {
    type metadata accessor for GuestHostDevice();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035CBD0);
  }
  return result;
}

uint64_t sub_100027F24(void *a1)
{
  return sub_100027F64(a1, (uint64_t (*)(void))type metadata accessor for EducationPresentationRecord, &qword_10035CC30);
}

uint64_t sub_100027F44(void *a1)
{
  return sub_100027F64(a1, (uint64_t (*)(void))type metadata accessor for HintPresentationRecord, &qword_10035CC38);
}

uint64_t sub_100027F64(void *a1, uint64_t (*a2)(void), uint64_t *a3)
{
  v49._uint64_t countAndFlagsBits = a2(0);
  sub_10000A38C(a3);
  uint64_t v5 = String.init<A>(describing:)();
  unint64_t v7 = v6;
  uint64_t v47 = v5;
  uint64_t v48 = v6;
  sub_10000D6E4(a1, a1[3]);
  uint64_t DynamicType = swift_getDynamicType();
  if (swift_isClassType()) {
    uint64_t v9 = DynamicType;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9)
  {
    uint64_t v10 = a1[3];
    unint64_t v11 = sub_10000D6E4(a1, v10);
    uint64_t v12 = *(void *)(v10 - 8);
    __chkstk_darwin(v11);
    int64_t v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v12 + 16))(v14);
    uint64_t v15 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v10);
    swift_unknownObjectRelease();
    v49._uint64_t countAndFlagsBits = 0;
    v49._object = (void *)0xE000000000000000;
    v16._uint64_t countAndFlagsBits = 32;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    uint64_t v46 = v15;
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    uint64_t v5 = v47;
    unint64_t v7 = v48;
  }
  v49._uint64_t countAndFlagsBits = 60;
  v49._object = (void *)0xE100000000000000;
  v17._uint64_t countAndFlagsBits = v5;
  v17._object = v7;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = 62;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v49._countAndFlagsBits;
  object = v49._object;
  uint64_t v21 = sub_100028B9C((uint64_t)a1);
  int64_t v22 = *((void *)v21 + 2);
  if (v22)
  {
    uint64_t v37 = countAndFlagsBits;
    unint64_t v38 = object;
    v49._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000B54FC(0, v22, 0);
    uint64_t v23 = (void *)v49._countAndFlagsBits;
    v36[1] = v21;
    uint64_t v24 = (uint64_t *)(v21 + 56);
    long long v39 = xmmword_10028FC10;
    do
    {
      uint64_t v26 = *(v24 - 3);
      uint64_t v25 = *(v24 - 2);
      uint64_t v27 = *(v24 - 1);
      uint64_t v28 = *v24;
      sub_10000A38C((uint64_t *)&unk_10035E7E0);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = v39;
      *(void *)(v29 + 32) = v26;
      *(void *)(v29 + 40) = v25;
      *(void *)(v29 + 48) = v27;
      *(void *)(v29 + 56) = v28;
      v49._uint64_t countAndFlagsBits = (uint64_t)v23;
      unint64_t v30 = v23[2];
      unint64_t v31 = v23[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v30 >= v31 >> 1)
      {
        sub_1000B54FC(v31 > 1, v30 + 1, 1);
        uint64_t v23 = (void *)v49._countAndFlagsBits;
      }
      v24 += 4;
      v23[2] = v30 + 1;
      v23[v30 + 4] = v29;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v37;
    object = v38;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = _swiftEmptyArrayStorage;
  }
  v49._uint64_t countAndFlagsBits = countAndFlagsBits;
  v49._object = object;
  uint64_t v50 = 0;
  uint64_t v51 = v23;
  uint64_t v52 = 0;
  uint64_t v32 = sub_10008BF24(2128928, 0xE300000000000000, 0, 1);
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v44 = v32;
  uint64_t v45 = v34;
  uint64_t v42 = 10;
  unint64_t v43 = 0xE100000000000000;
  uint64_t v40 = 2105354;
  unint64_t v41 = 0xE300000000000000;
  sub_10002914C();
  sub_1000291A0();
  RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
  swift_bridgeObjectRelease();
  return v46;
}

uint64_t sub_10002834C(void *a1)
{
  return sub_100027F64(a1, (uint64_t (*)(void))type metadata accessor for CardPresentationRecord, &qword_10035CC28);
}

uint64_t sub_10002836C(void *a1)
{
  return sub_100027F64(a1, type metadata accessor for ActivityDisplayContext, &qword_10035CC40);
}

uint64_t sub_10002838C(void *a1)
{
  return sub_100027F64(a1, (uint64_t (*)(void))type metadata accessor for ActivityProxy, &qword_10035CC20);
}

uint64_t sub_1000283AC(void *a1)
{
  return sub_100027F64(a1, (uint64_t (*)(void))type metadata accessor for TransferRecord, &qword_10035CC18);
}

uint64_t sub_1000283CC(void *a1)
{
  v46._uint64_t countAndFlagsBits = sub_10000A38C(&qword_10035B578);
  sub_10000A38C(&qword_10035B580);
  uint64_t v2 = String.init<A>(describing:)();
  uint64_t v4 = v3;
  uint64_t v44 = v2;
  uint64_t v45 = v3;
  sub_10000D6E4(a1, a1[3]);
  uint64_t DynamicType = swift_getDynamicType();
  if (swift_isClassType()) {
    uint64_t v6 = DynamicType;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = a1[3];
    uint64_t v8 = sub_10000D6E4(a1, v7);
    uint64_t v9 = *(void *)(v7 - 8);
    __chkstk_darwin(v8);
    unint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v9 + 16))(v11);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    swift_unknownObjectRelease();
    v46._uint64_t countAndFlagsBits = 0;
    v46._object = (void *)0xE000000000000000;
    v13._uint64_t countAndFlagsBits = 32;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    uint64_t v43 = v12;
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    uint64_t v2 = v44;
    uint64_t v4 = v45;
  }
  v46._uint64_t countAndFlagsBits = 60;
  v46._object = (void *)0xE100000000000000;
  v14._uint64_t countAndFlagsBits = v2;
  v14._object = v4;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = 62;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v46._countAndFlagsBits;
  object = v46._object;
  Swift::String v18 = sub_100028B9C((uint64_t)a1);
  int64_t v19 = *((void *)v18 + 2);
  if (v19)
  {
    uint64_t v34 = countAndFlagsBits;
    uint64_t v35 = object;
    v46._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000B54FC(0, v19, 0);
    uint64_t v20 = (void *)v46._countAndFlagsBits;
    v33[1] = v18;
    uint64_t v21 = (uint64_t *)(v18 + 56);
    long long v36 = xmmword_10028FC10;
    do
    {
      uint64_t v23 = *(v21 - 3);
      uint64_t v22 = *(v21 - 2);
      uint64_t v24 = *(v21 - 1);
      uint64_t v25 = *v21;
      sub_10000A38C((uint64_t *)&unk_10035E7E0);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = v36;
      *(void *)(v26 + 32) = v23;
      *(void *)(v26 + 40) = v22;
      *(void *)(v26 + 48) = v24;
      *(void *)(v26 + 56) = v25;
      v46._uint64_t countAndFlagsBits = (uint64_t)v20;
      unint64_t v27 = v20[2];
      unint64_t v28 = v20[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v27 >= v28 >> 1)
      {
        sub_1000B54FC(v28 > 1, v27 + 1, 1);
        uint64_t v20 = (void *)v46._countAndFlagsBits;
      }
      v21 += 4;
      _OWORD v20[2] = v27 + 1;
      v20[v27 + 4] = v26;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v34;
    object = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = _swiftEmptyArrayStorage;
  }
  v46._uint64_t countAndFlagsBits = countAndFlagsBits;
  v46._object = object;
  uint64_t v47 = 0;
  uint64_t v48 = v20;
  uint64_t v49 = 0;
  uint64_t v29 = sub_10008BF24(2128928, 0xE300000000000000, 0, 1);
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v41 = v29;
  uint64_t v42 = v31;
  uint64_t v39 = 10;
  unint64_t v40 = 0xE100000000000000;
  uint64_t v37 = 2105354;
  unint64_t v38 = 0xE300000000000000;
  sub_10002914C();
  sub_1000291A0();
  RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
  swift_bridgeObjectRelease();
  return v43;
}

uint64_t sub_1000287B4(void *a1)
{
  v46._uint64_t countAndFlagsBits = type metadata accessor for TelephonyProxyState();
  sub_10000A38C(&qword_10035CC48);
  uint64_t v2 = String.init<A>(describing:)();
  uint64_t v4 = v3;
  uint64_t v44 = v2;
  uint64_t v45 = v3;
  sub_10000D6E4(a1, a1[3]);
  uint64_t DynamicType = swift_getDynamicType();
  if (swift_isClassType()) {
    uint64_t v6 = DynamicType;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = a1[3];
    uint64_t v8 = sub_10000D6E4(a1, v7);
    uint64_t v9 = *(void *)(v7 - 8);
    __chkstk_darwin(v8);
    unint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v9 + 16))(v11);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    swift_unknownObjectRelease();
    v46._uint64_t countAndFlagsBits = 0;
    v46._object = (void *)0xE000000000000000;
    v13._uint64_t countAndFlagsBits = 32;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    uint64_t v43 = v12;
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    uint64_t v2 = v44;
    uint64_t v4 = v45;
  }
  v46._uint64_t countAndFlagsBits = 60;
  v46._object = (void *)0xE100000000000000;
  v14._uint64_t countAndFlagsBits = v2;
  v14._object = v4;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = 62;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v46._countAndFlagsBits;
  object = v46._object;
  Swift::String v18 = sub_100028B9C((uint64_t)a1);
  int64_t v19 = *((void *)v18 + 2);
  if (v19)
  {
    uint64_t v34 = countAndFlagsBits;
    uint64_t v35 = object;
    v46._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000B54FC(0, v19, 0);
    uint64_t v20 = (void *)v46._countAndFlagsBits;
    v33[1] = v18;
    uint64_t v21 = (uint64_t *)(v18 + 56);
    long long v36 = xmmword_10028FC10;
    do
    {
      uint64_t v23 = *(v21 - 3);
      uint64_t v22 = *(v21 - 2);
      uint64_t v24 = *(v21 - 1);
      uint64_t v25 = *v21;
      sub_10000A38C((uint64_t *)&unk_10035E7E0);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = v36;
      *(void *)(v26 + 32) = v23;
      *(void *)(v26 + 40) = v22;
      *(void *)(v26 + 48) = v24;
      *(void *)(v26 + 56) = v25;
      v46._uint64_t countAndFlagsBits = (uint64_t)v20;
      unint64_t v27 = v20[2];
      unint64_t v28 = v20[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v27 >= v28 >> 1)
      {
        sub_1000B54FC(v28 > 1, v27 + 1, 1);
        uint64_t v20 = (void *)v46._countAndFlagsBits;
      }
      v21 += 4;
      _OWORD v20[2] = v27 + 1;
      v20[v27 + 4] = v26;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v34;
    object = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = _swiftEmptyArrayStorage;
  }
  v46._uint64_t countAndFlagsBits = countAndFlagsBits;
  v46._object = object;
  uint64_t v47 = 0;
  uint64_t v48 = v20;
  uint64_t v49 = 0;
  uint64_t v29 = sub_10008BF24(2128928, 0xE300000000000000, 0, 1);
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v41 = v29;
  uint64_t v42 = v31;
  uint64_t v39 = 10;
  unint64_t v40 = 0xE100000000000000;
  uint64_t v37 = 2105354;
  unint64_t v38 = 0xE300000000000000;
  sub_10002914C();
  sub_1000291A0();
  RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
  swift_bridgeObjectRelease();
  return v43;
}

char *sub_100028B9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Mirror();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027B10(a1, (uint64_t)v21);
  Mirror.init(reflecting:)();
  uint64_t v6 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t v19 = v6;
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((void *)&v22 + 1))
  {
    uint64_t v7 = (char *)_swiftEmptyArrayStorage;
    do
    {
      v20[0] = v21[0];
      v20[1] = v21[1];
      _OWORD v20[2] = v22;
      uint64_t v9 = sub_100028DD4((uint64_t *)v20);
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      uint64_t v15 = v14;
      sub_10000D78C((uint64_t)v20, &qword_10035CBF0);
      if (v11)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = sub_100088A3C(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        unint64_t v17 = *((void *)v7 + 2);
        unint64_t v16 = *((void *)v7 + 3);
        if (v17 >= v16 >> 1) {
          uint64_t v7 = sub_100088A3C((char *)(v16 > 1), v17 + 1, 1, v7);
        }
        *((void *)v7 + 2) = v17 + 1;
        uint64_t v8 = &v7[32 * v17];
        *((void *)v8 + 4) = v9;
        *((void *)v8 + 5) = v11;
        *((void *)v8 + 6) = v13;
        *((void *)v8 + 7) = v15;
      }
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (*((void *)&v22 + 1));
  }
  else
  {
    uint64_t v7 = (char *)_swiftEmptyArrayStorage;
  }
  swift_release();
  swift_release();
  return v7;
}

uint64_t sub_100028DD4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (uint64_t)(a1 + 2);
  *(void *)&long long v21 = *a1;
  *((void *)&v21 + 1) = v3;
  sub_100027B10((uint64_t)(a1 + 2), (uint64_t)v22);
  if (v3)
  {
    *(void *)&long long v17 = v2;
    *((void *)&v17 + 1) = v3;
    v16[0] = 0xD000000000000012;
    v16[1] = 0x80000001002B33F0;
    sub_1000291A0();
    Collection<>.trimmingPrefix<A>(_:)();
    sub_10000CC5C((uint64_t)v22);
    uint64_t v5 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000CC5C((uint64_t)v22);
    uint64_t v5 = 63;
  }
  String.lowercased()();
  v6._uint64_t countAndFlagsBits = 0x736B736174;
  v6._object = (void *)0xE500000000000000;
  Swift::Bool v7 = String.hasSuffix(_:)(v6);
  swift_bridgeObjectRelease();
  if (v7)
  {
    long long v21 = *(_OWORD *)a1;
    sub_100027B10(v4, (uint64_t)v22);
    sub_10000A38C(&qword_10035CC08);
    if (swift_dynamicCast())
    {
      sub_10000D7E8(&v17, (uint64_t)v20);
      *(void *)&long long v21 = 40;
      *((void *)&v21 + 1) = 0xE100000000000000;
      sub_10000D6E4(v20, v20[3]);
      *(void *)&long long v17 = dispatch thunk of Collection.count.getter();
      v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = 41;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
LABEL_14:
      sub_10000CC5C((uint64_t)v20);
      return v5;
    }
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    sub_10000D78C((uint64_t)&v17, &qword_10035CC10);
  }
  long long v21 = *(_OWORD *)a1;
  sub_100027B10(v4, (uint64_t)v22);
  sub_10000A38C(&qword_10035CBF8);
  if (swift_dynamicCast())
  {
    sub_10000D7E8(&v17, (uint64_t)v20);
    v16[5] = 0;
    v16[6] = 0xE000000000000000;
    sub_1000291F4((uint64_t)v20, (uint64_t)&v21);
    sub_100029258((uint64_t)&v21, (uint64_t)&v17);
    if (*((void *)&v18 + 1))
    {
      sub_10000D7E8(&v17, (uint64_t)v16);
      sub_1000291F4((uint64_t)v16, (uint64_t)&v15);
      uint64_t v10 = String.init<A>(describing:)();
      uint64_t v12 = v11;
      sub_10000CC5C((uint64_t)v16);
    }
    else
    {
      uint64_t v12 = (void *)0xE300000000000000;
      uint64_t v10 = 7104878;
    }
    sub_10000D78C((uint64_t)&v21, &qword_10035CC00);
    v13._uint64_t countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  sub_10000D78C((uint64_t)&v17, &qword_10035CC00);
  *(void *)&long long v21 = 0;
  *((void *)&v21 + 1) = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)();
  return v5;
}

unint64_t sub_10002914C()
{
  unint64_t result = qword_10035CBE0;
  if (!qword_10035CBE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035CBE0);
  }
  return result;
}

unint64_t sub_1000291A0()
{
  unint64_t result = qword_10035CBE8;
  if (!qword_10035CBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035CBE8);
  }
  return result;
}

uint64_t sub_1000291F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100029258(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10035CC00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000292C0()
{
  return swift_release();
}

uint64_t sub_10002935C(uint64_t a1, uint64_t a2)
{
  id v4 = [self homeAppSuggestionVendor];
  id v5 = [v4 roomSuggestions];

  sub_10002951C();
  sub_10002955C();
  uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::Bool v7 = (void *)sub_1000295B4(v6);
  swift_bridgeObjectRelease();
  LOBYTE(v5) = sub_10002983C(a1, a2, v7);
  swift_bridgeObjectRelease();
  if (v5)
  {
    id v8 = [self localizedStringForKey:15];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000A38C((uint64_t *)&unk_10036AF60);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_10028D430;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_100029904();
    *(void *)(v9 + 32) = a1;
    *(void *)(v9 + 40) = a2;
    sub_100016790();
    swift_bridgeObjectRetain();
    a1 = StringProtocol.appendingFormat<A>(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t sub_10002951C()
{
  unint64_t result = qword_10035CC50;
  if (!qword_10035CC50)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10035CC50);
  }
  return result;
}

unint64_t sub_10002955C()
{
  unint64_t result = qword_10035CC58;
  if (!qword_10035CC58)
  {
    sub_10002951C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035CC58);
  }
  return result;
}

uint64_t sub_1000295B4(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v27 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v2 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v32 = _swiftEmptyArrayStorage;
    sub_1000B54DC(0, v2 & ~(v2 >> 63), 0);
    if (v27)
    {
      uint64_t result = __CocoaSet.startIndex.getter();
      char v5 = 1;
    }
    else
    {
      uint64_t result = sub_100029D64(v1);
      char v5 = v6 & 1;
    }
    uint64_t v29 = result;
    uint64_t v30 = v4;
    char v31 = v5;
    if (v2 < 0)
    {
      __break(1u);
LABEL_23:
      __break(1u);
    }
    else
    {
      uint64_t v26 = v1;
      do
      {
        while (1)
        {
          int64_t v13 = v29;
          uint64_t v12 = v30;
          char v14 = v31;
          sub_100029B00(v29, v30, v31, v1);
          unint64_t v16 = v15;
          id v17 = [v15 name];
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v20 = v19;

          long long v21 = v32;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = sub_1000B54DC(0, v21[2] + 1, 1);
            long long v21 = v32;
          }
          unint64_t v23 = v21[2];
          unint64_t v22 = v21[3];
          if (v23 >= v22 >> 1)
          {
            uint64_t result = sub_1000B54DC(v22 > 1, v23 + 1, 1);
            long long v21 = v32;
          }
          _OWORD v21[2] = v23 + 1;
          uint64_t v24 = &v21[2 * v23];
          v24[4] = v18;
          v24[5] = v20;
          if (v27) {
            break;
          }
          uint64_t v1 = v26;
          int64_t v7 = sub_100029A1C(v13, v12, v14, v26);
          uint64_t v9 = v8;
          char v11 = v10;
          sub_100029D58(v13, v12, v14);
          uint64_t v29 = v7;
          uint64_t v30 = v9;
          char v31 = v11 & 1;
          if (!--v2) {
            goto LABEL_20;
          }
        }
        uint64_t v1 = v26;
        if ((v14 & 1) == 0) {
          goto LABEL_23;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_10000A38C(&qword_10035CC68);
        uint64_t v25 = (void (*)(char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v25(v28, 0);
        --v2;
      }
      while (v2);
LABEL_20:
      sub_100029D58(v29, v30, v31);
      return (uint64_t)v32;
    }
  }
  return result;
}

uint64_t sub_10002983C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_100029904()
{
  unint64_t result = qword_10035CC60;
  if (!qword_10035CC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035CC60);
  }
  return result;
}

BOOL sub_100029958(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  int v3 = result;
  if (*(unsigned char *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    int v6 = *(unsigned __int8 *)(a2 + i);
    unint64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000299B8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

int64_t sub_100029A1C(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_100029B00(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_10002951C();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_10002951C();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  char v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

uint64_t sub_100029D58(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100029D64(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  id v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t EdgeTransitioning.action(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, v5);
  swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  uint64_t v10 = static Array._adoptStorage(_:count:)();
  id v12 = v11;
  char v13 = (uint64_t (*)())swift_allocObject();
  *((void *)v13 + 2) = a3;
  *((void *)v13 + 3) = a4;
  *((void *)v13 + 4) = a1;
  *((void *)v13 + 5) = a2;
  *id v12 = sub_10002A50C;
  v12[1] = v13;
  sub_10001A0B4(v10);
  char v14 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 64);
  swift_retain();
  id v15 = (uint64_t (*)(unsigned char *, void))v14(v17, a3, a4);
  static Array.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  return v15(v17, 0);
}

uint64_t EdgeTransitioning.filter(isIncluded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, v5);
  swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  uint64_t v10 = static Array._adoptStorage(_:count:)();
  id v12 = v11;
  char v13 = (void *)swift_allocObject();
  void v13[2] = a3;
  v13[3] = a4;
  v13[4] = a1;
  v13[5] = a2;
  *id v12 = sub_10002A534;
  v12[1] = v13;
  sub_10001A0B4(v10);
  char v14 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 88);
  swift_retain();
  id v15 = (uint64_t (*)(unsigned char *, void))v14(v17, a3, a4);
  static Array.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  return v15(v17, 0);
}

uint64_t EdgeTransitioning.output(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10002A464(AssociatedTypeWitness, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  swift_allocObject();
  uint64_t v10 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, a1, AssociatedTypeWitness);
  uint64_t v12 = sub_10001A0B4(v10);
  EdgeTransitioning.output(_:)(v12, a2, a3, a4);

  return swift_bridgeObjectRelease();
}

{
  void *v8;
  uint64_t vars8;

  unint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a1;
  swift_bridgeObjectRetain();
  EdgeTransitioning.output(_:)((uint64_t)sub_10002A5A0, (uint64_t)v8, a2, a3, a4);

  return swift_release();
}

uint64_t EdgeTransitioning.output(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, v5);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  uint64_t v10 = static Array._adoptStorage(_:count:)();
  uint64_t v12 = v11;
  char v13 = (uint64_t (*)@<X0>(uint64_t *@<X8>))swift_allocObject();
  *((void *)v13 + 2) = a3;
  *((void *)v13 + 3) = a4;
  *((void *)v13 + 4) = a1;
  *((void *)v13 + 5) = a2;
  *uint64_t v12 = sub_10002A5D0;
  v12[1] = v13;
  sub_10001A0B4(v10);
  char v14 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 112);
  swift_retain();
  id v15 = (uint64_t (*)(unsigned char *, void))v14(v17, a3, a4);
  static Array.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  return v15(v17, 0);
}

uint64_t sub_10002A464(uint64_t a1, uint64_t a2)
{
  if (swift_isClassType()) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    return sub_10000A38C(&qword_10035C280);
  }
  else
  {
    return type metadata accessor for _ContiguousArrayStorage();
  }
}

uint64_t sub_10002A4D4()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002A50C()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_10002A534@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10002A568()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002A5A0(double a1, double a2, double a3, double a4)
{
  nullsub_1(a1, a2, a3, a4);

  return swift_bridgeObjectRetain();
}

uint64_t sub_10002A5D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))();
  *a1 = result;
  return result;
}

uint64_t sub_10002A608(uint64_t a1)
{
  type metadata accessor for HandoffDevice();
  sub_10002E77C(&qword_10035CFE8, 255, (void (*)(uint64_t))type metadata accessor for HandoffDevice);
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v16 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v8) {
      goto LABEL_23;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    ++v3;
    if (!v13)
    {
      int64_t v3 = v12 + 1;
      if (v12 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v3);
      if (!v13)
      {
        int64_t v3 = v12 + 2;
        if (v12 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v13 = *(void *)(v4 + 8 * v3);
        if (!v13)
        {
          int64_t v3 = v12 + 3;
          if (v12 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v13 = *(void *)(v4 + 8 * v3);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    swift_retain();
    sub_1000306BC(&v15, v11, (uint64_t)&OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id, &qword_10035CFF8, (void (*)(void))type metadata accessor for HandoffDevice, (void (*)(void))type metadata accessor for HandoffDevice);
    uint64_t result = swift_release();
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v8)
  {
LABEL_23:
    swift_release();
    return v16;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v14);
  if (v13)
  {
    int64_t v3 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v3);
    ++v14;
    if (v13) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10002A818(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  int64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = sub_10000A38C(&qword_10036C090);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v13 = 0;
  uint64_t v31 = a1;
  uint64_t v32 = result;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v15 = a1 + 64;
  uint64_t v14 = v16;
  uint64_t v17 = 1 << *(unsigned char *)(v15 - 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v14;
  uint64_t v26 = v15;
  int64_t v27 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v29 = v3 + 16;
  uint64_t v30 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  uint64_t v28 = v3 + 48;
  if ((v18 & v14) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v20 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (unint64_t i = v20 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v13 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v11, *(void *)(v31 + 48) + *(void *)(v3 + 72) * i, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1) {
      goto LABEL_25;
    }
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
    sub_100030A18((uint64_t)v8, v6);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    if (v19) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v27) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_24;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v13);
      if (!v23)
      {
        int64_t v13 = v22 + 2;
        if (v22 + 2 >= v27) {
          goto LABEL_24;
        }
        unint64_t v23 = *(void *)(v26 + 8 * v13);
        if (!v23)
        {
          int64_t v13 = v22 + 3;
          if (v22 + 3 >= v27) {
            goto LABEL_24;
          }
          unint64_t v23 = *(void *)(v26 + 8 * v13);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v19 = (v23 - 1) & v23;
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v27)
  {
LABEL_24:
    (*v30)(v11, 1, 1, v2);
LABEL_25:
    swift_release();
    return v32;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v27) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10002ABCC(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (Swift::Int *)(*(void *)(a1 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_1000301DC(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for LockscreenControlsAgentModel()
{
  return self;
}

uint64_t sub_10002AD88(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1000B4664(a1, WitnessTable);
}

float *sub_10002ADDC()
{
  type metadata accessor for LockscreenControlsAgent();
  swift_allocObject();
  uint64_t result = sub_10002AE18();
  qword_1003AC5D0 = (uint64_t)result;
  return result;
}

float *sub_10002AE18()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035D000);
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A38C(&qword_10035D008);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  *((void *)v0 + 2) = v5;
  *((void *)v0 + 3) = &_swiftEmptyDictionarySingleton;
  *((void *)v0 + 4) = &_swiftEmptyDictionarySingleton;
  *((void *)v0 + 6) = 0;
  *((void *)v0 + 7) = 0;
  *((void *)v0 + 8) = &_swiftEmptyDictionarySingleton;
  *((void *)v0 + 9) = &_swiftEmptyDictionarySingleton;
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000A38C(&qword_10035D010);
  uint64_t v7 = swift_allocObject();
  *(unsigned char *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = [objc_allocWithZone((Class)NSLock) init];
  sub_10000A38C(&qword_10035D018);
  swift_allocObject();
  uint64_t v8 = PassthroughSubject.init()();
  sub_10000A38C(&qword_10035D020);
  swift_allocObject();
  uint64_t v9 = PassthroughSubject.init()();
  swift_allocObject();
  uint64_t v10 = PassthroughSubject.init()();
  *(void *)(v7 + 40) = v8;
  *(void *)(v7 + 48) = v9;
  *(void *)(v7 + 56) = v10;
  *(void *)(v7 + 64) = &_swiftEmptyDictionarySingleton;
  *(void *)(v7 + 72) = 0;
  *(void *)(v7 + 16) = KeyPath;
  *(unsigned char *)(v7 + 24) = 0;
  *((void *)v0 + 10) = v7;
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v11 = *(id *)(qword_1003AC750 + 1512);
  float v12 = sub_1000FF7A8();

  *((void *)v1 + 15) = &_swiftEmptySetSingleton;
  v1[22] = v12;
  *((void *)v1 + 12) = 0;
  *((void *)v1 + 13) = &_swiftEmptyDictionarySingleton;
  *((void *)v1 + 14) = &_swiftEmptyDictionarySingleton;
  int DeviceClass = GestaltGetDeviceClass();
  int v14 = DeviceClass;
  BOOL v16 = DeviceClass != 4 && DeviceClass != 7;
  uint64_t v39 = &type metadata for Feature;
  unint64_t v40 = sub_10000CC08();
  LOBYTE(v37) = 5;
  char v17 = isFeatureEnabled(_:)();
  sub_10000CC5C((uint64_t)&v37);
  *((unsigned char *)v1 + 40) = v16 & v17;
  if (v17)
  {
    uint64_t v18 = (void *)0xE400000000000000;
    uint64_t v19 = 1702195828;
    if (v14 != 7 && v14 != 4) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v18 = (void *)0xE500000000000000;
    uint64_t v19 = 0x65736C6166;
  }
  uint64_t v37 = 0;
  unint64_t v38 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  uint64_t v37 = 0xD000000000000011;
  unint64_t v38 = 0x80000001002B35D0;
  v20._uint64_t countAndFlagsBits = v19;
  v20._object = v18;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 0x616E756D6D6F6320;
  v21._object = (void *)0xEA00000000003D6CLL;
  String.append(_:)(v21);
  if (v16) {
    uint64_t v22 = 0x65736C6166;
  }
  else {
    uint64_t v22 = 1702195828;
  }
  if (v16) {
    unint64_t v23 = 0xE500000000000000;
  }
  else {
    unint64_t v23 = 0xE400000000000000;
  }
  unint64_t v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  id v25 = sub_1001F5FF4();
  swift_bridgeObjectRetain();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v25 ulog:90 message:v26];
  swift_bridgeObjectRelease();

LABEL_21:
  swift_retain();
  uint64_t v37 = sub_100104C24();
  sub_10000A38C(&qword_10035D028);
  sub_10000B010(&qword_10035D030, &qword_10035D028);
  uint64_t v27 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
  id v28 = sub_1001F5FF4();
  uint64_t v37 = v27;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = 0;
  *(void *)(v29 + 24) = 0;
  *(void *)(v29 + 32) = v27;
  *(void *)(v29 + 40) = 0x65646F6D2077654ELL;
  *(void *)(v29 + 48) = 0xEB00000000203A6CLL;
  *(void *)(v29 + 56) = 0;
  *(void *)(v29 + 64) = 0xE000000000000000;
  *(void *)(v29 + 72) = v28;
  *(_DWORD *)(v29 + 80) = 40;
  swift_retain();
  id v30 = v28;
  sub_10000A38C(&qword_10035D038);
  sub_10000A38C(&qword_10035D040);
  sub_10000B010(&qword_10035D048, &qword_10035D038);
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10035D050, &qword_10035D000);
  uint64_t v31 = v36;
  uint64_t v32 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v4, v31);
  swift_release();

  uint64_t v37 = v32;
  swift_allocObject();
  swift_weakInit();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  return v1;
}

uint64_t sub_10002B420(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = Strong;
    if (v1)
    {
      sub_10000A38C(&qword_10035ABB8);
      sub_10000B010(&qword_10035ABC0, &qword_10035ABB8);
      Publisher.eraseToAnyPublisher()();
      swift_retain();
      sub_10000A38C(&qword_10035ABC8);
      sub_10000B010(&qword_10035ABD0, &qword_10035ABC8);
      uint64_t v4 = Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v4 = 0;
    }
    *(void *)(v3 + 48) = v4;
    swift_release();
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    if (v1)
    {
      sub_10000A38C(&qword_10035ABB8);
      sub_10000B010(&qword_10035ABC0, &qword_10035ABB8);
      Publisher.eraseToAnyPublisher()();
      swift_retain();
      sub_10000A38C(&qword_10035ABC8);
      sub_10000B010(&qword_10035ABD0, &qword_10035ABC8);
      uint64_t v7 = Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v7 = 0;
    }
    *(void *)(v6 + 56) = v7;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10002B698(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3(v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_10002B70C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v84 = *(void *)(v4 - 8);
  uint64_t v85 = v4;
  __chkstk_darwin(v4);
  uint64_t v83 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10035D0F8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10035D100);
  uint64_t v81 = *(void *)(v10 - 8);
  uint64_t v82 = v10;
  __chkstk_darwin(v10);
  uint64_t v80 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_10035D108);
  uint64_t v78 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  int v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_10035D110);
  uint64_t v79 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  char v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000A38C(&qword_10035D118);
  uint64_t v19 = *(void *)(*(void *)(v18 - 8) + 64);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t result = __chkstk_darwin(v20);
  if (*(unsigned char *)(v2 + 40) == 1)
  {
    uint64_t v74 = v9;
    uint64_t v75 = v7;
    uint64_t v76 = v6;
    id v77 = (char *)&v67 - v22;
    uint64_t v87 = 0x676E696B63617254;
    unint64_t v88 = 0xE900000000000020;
    uint64_t v72 = v24;
    uint64_t v73 = result;
    uint64_t v71 = v23;
    v25._uint64_t countAndFlagsBits = sub_1001F7514();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    id v26 = sub_1001F5FF4();
    swift_bridgeObjectRetain();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v26 ulog:40 message:v27];
    swift_bridgeObjectRelease();

    uint64_t v28 = a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
    uint64_t v70 = a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v86 = *(void *)(v2 + 32);
    *(void *)(v2 + 32) = 0x8000000000000000;
    sub_10026496C(a1, v28, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 32) = v86;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_beginAccess();
    sub_10000A38C(&qword_10035D120);
    Published.projectedValue.getter();
    swift_endAccess();
    sub_10000B010(&qword_10035D128, &qword_10035D108);
    Publisher.compactMap<A>(_:)();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v14, v12);
    sub_10000B010(&qword_10035D130, &qword_10035D110);
    id v30 = v77;
    Publisher<>.removeDuplicates()();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v17, v15);
    uint64_t v87 = 0;
    unint64_t v88 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_retain();
    uint64_t v31 = sub_1001F7514();
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v87 = v31;
    unint64_t v88 = v33;
    v34._object = (void *)0x80000001002B3770;
    v34._uint64_t countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v34);
    uint64_t v78 = v87;
    unint64_t v69 = v88;
    id v68 = sub_1001F5FF4();
    uint64_t v79 = v2;
    uint64_t v35 = v71;
    uint64_t v36 = v72;
    uint64_t v37 = v73;
    (*(void (**)(uint64_t, char *, uint64_t))(v71 + 16))(v72, v30, v73);
    unint64_t v38 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    unint64_t v39 = (v19 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v40 = (v39 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = (v40 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = swift_allocObject();
    unint64_t v43 = v42 + v38;
    *(void *)(v42 + 16) = 0;
    *(void *)(v42 + 24) = 0;
    uint64_t v44 = v37;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v35 + 32))(v43, v36, v37);
    uint64_t v45 = (uint64_t *)(v42 + v39);
    unint64_t v46 = v69;
    uint64_t *v45 = v78;
    v45[1] = v46;
    uint64_t v47 = (void *)(v42 + v40);
    *uint64_t v47 = 0;
    v47[1] = 0xE000000000000000;
    uint64_t v48 = v68;
    *(void *)(v42 + v41) = v68;
    *(_DWORD *)(v42 + ((v41 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
    uint64_t v49 = v70;
    sub_10000B010(&qword_10035D138, &qword_10035D118);
    swift_bridgeObjectRetain();
    id v50 = v48;
    uint64_t v51 = v80;
    uint64_t v52 = v77;
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035D140, &qword_10035D100);
    uint64_t v53 = v82;
    uint64_t v54 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v51, v53);
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v35 + 8))(v52, v44);
    uint64_t v55 = v79;
    uint64_t v87 = v54;
    uint64_t v56 = swift_allocObject();
    swift_weakInit();
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = v56;
    *(void *)(v57 + 24) = a1;
    swift_retain();
    sub_10000A38C((uint64_t *)&unk_100367F70);
    sub_10000B010(&qword_10035D148, (uint64_t *)&unk_100367F70);
    uint64_t v58 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    char v59 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v86 = *(void *)(v55 + 72);
    *(void *)(v55 + 72) = 0x8000000000000000;
    sub_10026492C(v58, v49, v59);
    *(void *)(v55 + 72) = v86;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v87 = sub_10003BC88();
    Swift::String v60 = v83;
    OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)();
    if (qword_10035A628 != -1) {
      swift_once();
    }
    uint64_t v86 = qword_1003ACB50;
    sub_10000A38C(&qword_10035D150);
    sub_100019E10(0, (unint64_t *)&qword_10035A680);
    sub_10000B010(&qword_10035D158, &qword_10035D150);
    sub_10003A8C0();
    uint64_t v61 = v74;
    Publisher.throttle<A>(for:scheduler:latest:)();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v60, v85);
    swift_release();
    uint64_t v62 = swift_allocObject();
    swift_weakInit();
    uint64_t v63 = swift_allocObject();
    *(void *)(v63 + 16) = v62;
    *(void *)(v63 + 24) = a1;
    sub_10000B010(&qword_10035D160, &qword_10035D0F8);
    swift_retain();
    uint64_t v64 = v76;
    uint64_t v65 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v61, v64);
    swift_beginAccess();
    char v66 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v86 = *(void *)(v55 + 104);
    *(void *)(v55 + 104) = 0x8000000000000000;
    sub_10026492C(v65, v49, v66);
    *(void *)(v55 + 104) = v86;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_10002C220@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100098724();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10002C24C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = a3 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *(void *)(v7 + 64);
    *(void *)(v7 + 64) = 0x8000000000000000;
    sub_100264C28(v4, v5, v8, isUniquelyReferenced_nonNull_native);
    *(void *)(v7 + 64) = v10;
    swift_bridgeObjectRelease();
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_10002C32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4 = *(float *)a1;
  char v5 = *(unsigned char *)(a1 + 4);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if ((v5 & 1) != 0 || v4 > *(float *)(result + 88)) {
      sub_10002C9B0(a3);
    }
    else {
      sub_10002CFD0(a3, v4);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10002C3C4(uint64_t result)
{
  if (*(unsigned char *)(v1 + 40) == 1)
  {
    uint64_t v2 = result;
    v3._uint64_t countAndFlagsBits = sub_1001F7514();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    id v4 = sub_1001F5FF4();
    swift_bridgeObjectRetain();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v4 ulog:40 message:v5];
    swift_bridgeObjectRelease();

    unint64_t v6 = v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
    swift_beginAccess();
    sub_1001301D0(v6);
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    sub_1001301E8(v6);
    swift_endAccess();
    swift_release();
    sub_10002C9B0(v2);
    swift_beginAccess();
    sub_10002C574(v6);
    swift_endAccess();
    swift_beginAccess();
    sub_100130430(v6);
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_10002C574(unint64_t result)
{
  if (*(void *)(*(void *)v1 + 16))
  {
    uint64_t v2 = result;
    uint64_t result = sub_100269DA0(result);
    if (v3)
    {
      type metadata accessor for AnyCancellable();
      swift_retain();
      dispatch thunk of Cancellable.cancel()();
      sub_1001301D0(v2);
      swift_release();
      return swift_release();
    }
  }
  return result;
}

void sub_10002C618()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)0xD000000000000011;
  id v3 = sub_1001F5FF4();
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = (SEL *)&unk_100356000;
  [v3 ulog:40 message:v4];

  if (qword_10035A520 != -1) {
LABEL_35:
  }
    swift_once();
  id v6 = *(id *)(qword_1003AC750 + 1512);
  float v7 = sub_1000FF7A8();

  if (*(float *)(v1 + 88) != v7)
  {
    _StringGuts.grow(_:)(27);
    v8._uint64_t countAndFlagsBits = (uint64_t)v2 + 2;
    v8._object = (void *)0x80000001002B3750;
    String.append(_:)(v8);
    Float.write<A>(to:)();
    v9._uint64_t countAndFlagsBits = 540945696;
    v9._object = (void *)0xE400000000000000;
    String.append(_:)(v9);
    Float.write<A>(to:)();
    uint64_t v2 = sub_1001F5FF4();
    swift_bridgeObjectRetain();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v2 v5[158] 40 v10];
    swift_bridgeObjectRelease();

    *(float *)(v1 + 88) = v7;
    swift_beginAccess();
    uint64_t v11 = *(void *)(v1 + 32);
    uint64_t v12 = v11 + 64;
    uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
    uint64_t v14 = -1;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    unint64_t v15 = v14 & *(void *)(v11 + 64);
    int64_t v16 = (unint64_t)(v13 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v17 = 0;
    while (1)
    {
      if (v15)
      {
        unint64_t v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v19 = v18 | (v17 << 6);
      }
      else
      {
        int64_t v20 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(1u);
          goto LABEL_35;
        }
        if (v20 >= v16) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v12 + 8 * v20);
        ++v17;
        if (!v21)
        {
          int64_t v17 = v20 + 1;
          if (v20 + 1 >= v16) {
            goto LABEL_32;
          }
          unint64_t v21 = *(void *)(v12 + 8 * v17);
          if (!v21)
          {
            int64_t v17 = v20 + 2;
            if (v20 + 2 >= v16) {
              goto LABEL_32;
            }
            unint64_t v21 = *(void *)(v12 + 8 * v17);
            if (!v21)
            {
              int64_t v17 = v20 + 3;
              if (v20 + 3 >= v16) {
                goto LABEL_32;
              }
              unint64_t v21 = *(void *)(v12 + 8 * v17);
              if (!v21)
              {
                int64_t v22 = v20 + 4;
                if (v22 >= v16)
                {
LABEL_32:
                  swift_release();
                  return;
                }
                unint64_t v21 = *(void *)(v12 + 8 * v22);
                if (!v21)
                {
                  while (1)
                  {
                    int64_t v17 = v22 + 1;
                    if (__OFADD__(v22, 1)) {
                      break;
                    }
                    if (v17 >= v16) {
                      goto LABEL_32;
                    }
                    unint64_t v21 = *(void *)(v12 + 8 * v17);
                    ++v22;
                    if (v21) {
                      goto LABEL_24;
                    }
                  }
                  __break(1u);
                  return;
                }
                int64_t v17 = v22;
              }
            }
          }
        }
LABEL_24:
        unint64_t v15 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
      }
      uint64_t v2 = *(void **)(*(void *)(v11 + 56) + 8 * v19);
      uint64_t v23 = swift_retain();
      sub_10002C9B0(v23);
      NSString v5 = (SEL *)v2[3];
      swift_retain();
      CurrentValueSubject.value.getter();
      if (v27)
      {
        CurrentValueSubject.value.getter();
        swift_release();
        if (v29) {
          goto LABEL_6;
        }
        float v24 = v28;
      }
      else
      {
        swift_release();
        if (((LODWORD(v25) | ((unint64_t)v26 << 32)) & 0x100000000) != 0) {
          goto LABEL_6;
        }
        float v24 = v25;
      }
      if (v24 < *(float *)(v1 + 88)) {
        sub_10002CFD0((uint64_t)v2, v24);
      }
LABEL_6:
      swift_release();
    }
  }
}

void sub_10002C9B0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  float v7 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + 40) == 1)
  {
    swift_beginAccess();
    if (*(void *)(*(void *)(v1 + 24) + 16))
    {
      uint64_t v8 = a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
      swift_bridgeObjectRetain();
      sub_100269DA0(v8);
      char v10 = v9;
      swift_bridgeObjectRelease();
      if (v10)
      {
        unint64_t v47 = 0;
        unint64_t v48 = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        unint64_t v47 = 0xD000000000000010;
        unint64_t v48 = 0x80000001002B3710;
        swift_retain();
        uint64_t v11 = sub_1001F7514();
        uint64_t v13 = v12;
        swift_release();
        v14._uint64_t countAndFlagsBits = v11;
        v14._object = v13;
        String.append(_:)(v14);
        swift_bridgeObjectRelease();
        v15._uint64_t countAndFlagsBits = 0x6E6174736964202CLL;
        v15._object = (void *)0xEB000000003D6563;
        String.append(_:)(v15);
        swift_retain();
        CurrentValueSubject.value.getter();
        if ((v46[0] & 0x10000000000) != 0)
        {
          CurrentValueSubject.value.getter();
          swift_release();
          if ((v50 & 1) == 0)
          {
            int v16 = v49;
LABEL_8:
            LODWORD(v46[0]) = v16;
            uint64_t v18 = String.init<A>(describing:)();
            unint64_t v20 = v19;
            goto LABEL_10;
          }
        }
        else
        {
          int v16 = v46[0];
          unint64_t v17 = LODWORD(v46[0]) | ((unint64_t)BYTE4(v46[0]) << 32);
          swift_release();
          if ((v17 & 0x100000000) == 0) {
            goto LABEL_8;
          }
        }
        uint64_t v18 = 7104878;
        unint64_t v20 = 0xE300000000000000;
LABEL_10:
        unint64_t v21 = v20;
        String.append(_:)(*(Swift::String *)&v18);
        swift_bridgeObjectRelease();
        id v22 = sub_1001F5FF4();
        swift_bridgeObjectRetain();
        NSString v23 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v22 ulog:40 message:v23];
        swift_bridgeObjectRelease();

        swift_beginAccess();
        sub_1001301E8(v8);
        swift_endAccess();
        swift_release();
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        sub_100098724();
        uint64_t v25 = v24;
        swift_release();
        if (v25)
        {
LABEL_11:
          id v26 = objc_allocWithZone((Class)PCLockscreenControlsDevice);
          NSString v27 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v28 = [v26 initWithMediaRouteID:v27 distance:0];

          uint64_t v29 = *(void *)(v2 + 80);
          id v30 = *(void **)(v29 + 32);
          swift_retain();
          [v30 lock];
          swift_beginAccess();
          uint64_t v31 = swift_bridgeObjectRetain();
          unint64_t v32 = (unint64_t)sub_1000F0808(v31);
          swift_bridgeObjectRelease();
          [*(id *)(v29 + 32) unlock];
          swift_release();
          if ((v32 & 0x8000000000000000) != 0 || (v32 & 0x4000000000000000) != 0)
          {
            swift_retain();
            uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
            if (v33) {
              goto LABEL_14;
            }
          }
          else
          {
            uint64_t v33 = *(void *)(v32 + 16);
            swift_retain();
            if (v33)
            {
LABEL_14:
              if (v33 < 1)
              {
                __break(1u);
                return;
              }
              for (uint64_t i = 0; i != v33; ++i)
              {
                if ((v32 & 0xC000000000000001) != 0) {
                  id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v35 = *(id *)(v32 + 8 * i + 32);
                }
                uint64_t v36 = v35;
                id v37 = [v35 deviceLost];
                if (v37)
                {
                  unint64_t v38 = v37;
                  (*((void (**)(id, NSString))v37 + 2))(v37, v28);
                  _Block_release(v38);
                }
              }
            }
          }
          swift_release_n();
          goto LABEL_29;
        }
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
        swift_beginAccess();
        if (*(void *)(*(void *)(v2 + 64) + 16))
        {
          swift_bridgeObjectRetain();
          sub_100269DA0((uint64_t)v7);
          if (v39)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
            goto LABEL_11;
          }
          swift_bridgeObjectRelease();
        }
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        v46[0] = 0;
        v46[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(54);
        v40._uint64_t countAndFlagsBits = 0xD000000000000034;
        v40._object = (void *)0x80000001002B36B0;
        String.append(_:)(v40);
        swift_retain();
        uint64_t v41 = sub_1001F7514();
        unint64_t v43 = v42;
        swift_release();
        v44._uint64_t countAndFlagsBits = v41;
        v44._object = v43;
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        id v45 = sub_1001F5FF4();
        swift_bridgeObjectRetain();
        NSString v28 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v45 ulog:90 message:v28];
        swift_bridgeObjectRelease();

LABEL_29:
      }
    }
  }
}

void sub_10002CFD0(uint64_t a1, float a2)
{
  id v3 = (void *)v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v2 + 40) == 1)
  {
    uint64_t v55 = 0;
    unint64_t v56 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    uint64_t v55 = 0x203A455441445055;
    unint64_t v56 = 0xE800000000000000;
    swift_retain();
    uint64_t v10 = sub_1001F7514();
    uint64_t v12 = v11;
    swift_release();
    v13._uint64_t countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 0x6E6174736964202CLL;
    v14._object = (void *)0xEB000000003D6563;
    String.append(_:)(v14);
    v54[0] = a2;
    v15._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    id v16 = sub_1001F5FF4();
    swift_bridgeObjectRetain();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 ulog:40 message:v17];
    swift_bridgeObjectRelease();

    uint64_t v18 = a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v54 = v3[3];
    v3[3] = 0x8000000000000000;
    sub_10026496C(a1, v18, isUniquelyReferenced_nonNull_native);
    v3[3] = *(void *)v54;
    swift_bridgeObjectRelease();
    swift_endAccess();
    sub_10002D9D0();
    uint64_t v20 = v3[10];
    swift_beginAccess();
    if (*(void *)(*(void *)(v20 + 64) + 16))
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      sub_100098724();
      uint64_t v22 = v21;
      swift_release();
      if (v22)
      {
LABEL_4:
        sub_100019E10(0, &qword_100367DF0);
        Class isa = NSNumber.init(floatLiteral:)(a2).super.super.isa;
        id v24 = objc_allocWithZone((Class)PCLockscreenControlsDevice);
        NSString v25 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v26 = [v24 initWithMediaRouteID:v25 distance:isa];

        unint64_t v52 = 0;
        unint64_t v53 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        swift_bridgeObjectRelease();
        unint64_t v52 = 0xD00000000000001CLL;
        unint64_t v53 = 0x80000001002B36F0;
        id v27 = [v26 description];
        uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v30 = v29;

        v31._uint64_t countAndFlagsBits = v28;
        v31._object = v30;
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        id v32 = sub_1001F5FF4();
        swift_bridgeObjectRetain();
        NSString v33 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v32 ulog:40 message:v33];
        swift_bridgeObjectRelease();

        uint64_t v34 = v3[10];
        id v35 = *(void **)(v34 + 32);
        swift_retain();
        [v35 lock];
        swift_beginAccess();
        uint64_t v36 = swift_bridgeObjectRetain();
        unint64_t v37 = (unint64_t)sub_1000F0808(v36);
        swift_bridgeObjectRelease();
        [*(id *)(v34 + 32) unlock];
        swift_release();
        if ((v37 & 0x8000000000000000) != 0 || (v37 & 0x4000000000000000) != 0)
        {
          swift_retain();
          uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
          if (v38) {
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v38 = *(void *)(v37 + 16);
          swift_retain();
          if (v38)
          {
LABEL_7:
            if (v38 < 1)
            {
              __break(1u);
              return;
            }
            for (uint64_t i = 0; i != v38; ++i)
            {
              if ((v37 & 0xC000000000000001) != 0) {
                id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v40 = *(id *)(v37 + 8 * i + 32);
              }
              uint64_t v41 = v40;
              id v42 = [v40 deviceUpdated];
              if (v42)
              {
                unint64_t v43 = v42;
                (*((void (**)(id, NSString))v42 + 2))(v42, v26);
                _Block_release(v43);
              }
            }
          }
        }
        swift_release_n();
        goto LABEL_22;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v18, v6);
      swift_beginAccess();
      if (*(void *)(v3[8] + 16))
      {
        swift_bridgeObjectRetain();
        sub_100269DA0((uint64_t)v9);
        if (v44)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
          goto LABEL_4;
        }
        swift_bridgeObjectRelease();
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      unint64_t v52 = 0;
      unint64_t v53 = 0xE000000000000000;
      _StringGuts.grow(_:)(54);
      v45._uint64_t countAndFlagsBits = 0xD000000000000034;
      v45._object = (void *)0x80000001002B36B0;
      String.append(_:)(v45);
      swift_retain();
      uint64_t v46 = sub_1001F7514();
      unint64_t v48 = v47;
      swift_release();
      v49._uint64_t countAndFlagsBits = v46;
      v49._object = v48;
      String.append(_:)(v49);
      swift_bridgeObjectRelease();
      id v50 = sub_1001F5FF4();
      swift_bridgeObjectRetain();
      NSString v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v50 ulog:90 message:v26];
      swift_bridgeObjectRelease();

LABEL_22:
    }
  }
}

void sub_10002D684(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 40) == 1)
  {
    uint64_t v2 = v1;
    uint64_t v4 = *(void *)(a1 + 24);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *(void *)(v1 + 112);
    *(void *)(v1 + 112) = 0x8000000000000000;
    sub_1002649AC(a1, v4, isUniquelyReferenced_nonNull_native);
    *(void *)(v1 + 112) = v11;
    swift_bridgeObjectRelease();
    swift_endAccess();
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = sub_1001458B4();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    id v7 = sub_1001F5FF4();
    swift_bridgeObjectRetain();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v7 ulog:40 message:v8];
    swift_bridgeObjectRelease();

    swift_beginAccess();
    if (*(void *)(*(void *)(v2 + 24) + 16))
    {
      if (swift_weakLoadStrong())
      {
        sub_100023754(v4, 2u, 0);
        swift_release();
      }
      else
      {
        id v9 = *(id *)(a1 + 40);
        NSString v10 = String._bridgeToObjectiveC()();
        [v9 ulog:90 message:v10];
      }
    }
  }
}

void sub_10002D870(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 40) == 1)
  {
    swift_beginAccess();
    if (*(void *)(*(void *)(v1 + 112) + 16))
    {
      sub_10026A800(a1);
      if (v3)
      {
        swift_beginAccess();
        swift_retain();
        sub_100130308(a1);
        swift_endAccess();
        swift_release();
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        v4._uint64_t countAndFlagsBits = sub_1001458B4();
        String.append(_:)(v4);
        swift_bridgeObjectRelease();
        id v5 = sub_1001F5FF4();
        swift_bridgeObjectRetain();
        NSString v6 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v5 ulog:40 message:v6];
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
  }
}

void sub_10002D9D0()
{
  if (*(unsigned char *)(v0 + 40) == 1)
  {
    swift_beginAccess();
    if (*(void *)(*(void *)(v0 + 24) + 16))
    {
      uint64_t v1 = *(void *)(v0 + 80);
      swift_beginAccess();
      if (!*(void *)(*(void *)(v1 + 64) + 16))
      {
        id v2 = sub_1001F5FF4();
        NSString v3 = String._bridgeToObjectiveC()();
        [v2 ulog:40 message:v3];

        swift_beginAccess();
        uint64_t v4 = *(void *)(v0 + 112);
        uint64_t v5 = v4 + 64;
        uint64_t v6 = 1 << *(unsigned char *)(v4 + 32);
        uint64_t v7 = -1;
        if (v6 < 64) {
          uint64_t v7 = ~(-1 << v6);
        }
        unint64_t v8 = v7 & *(void *)(v4 + 64);
        int64_t v9 = (unint64_t)(v6 + 63) >> 6;
        swift_bridgeObjectRetain_n();
        int64_t v10 = 0;
        if (v8) {
          goto LABEL_9;
        }
LABEL_10:
        int64_t v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return;
        }
        if (v13 >= v9) {
          goto LABEL_31;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v13);
        ++v10;
        if (!v14)
        {
          int64_t v10 = v13 + 1;
          if (v13 + 1 >= v9) {
            goto LABEL_31;
          }
          unint64_t v14 = *(void *)(v5 + 8 * v10);
          if (v14) {
            goto LABEL_27;
          }
          int64_t v10 = v13 + 2;
          if (v13 + 2 >= v9) {
            goto LABEL_31;
          }
          unint64_t v14 = *(void *)(v5 + 8 * v10);
          if (v14) {
            goto LABEL_27;
          }
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v9) {
            goto LABEL_31;
          }
          unint64_t v14 = *(void *)(v5 + 8 * v10);
          if (v14) {
            goto LABEL_27;
          }
          int64_t v10 = v13 + 4;
          if (v13 + 4 >= v9)
          {
LABEL_31:
            swift_release();
            swift_bridgeObjectRelease();
            notify_post("com.apple.ProximityControl.LockScreenDiscovery");
            return;
          }
          unint64_t v14 = *(void *)(v5 + 8 * v10);
          if (!v14)
          {
            int64_t v15 = v13 + 5;
            if (v15 < v9)
            {
              unint64_t v14 = *(void *)(v5 + 8 * v15);
              if (v14)
              {
                int64_t v10 = v15;
                goto LABEL_27;
              }
              while (1)
              {
                int64_t v10 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_34;
                }
                if (v10 >= v9) {
                  goto LABEL_31;
                }
                unint64_t v14 = *(void *)(v5 + 8 * v10);
                ++v15;
                if (v14) {
                  goto LABEL_27;
                }
              }
            }
            goto LABEL_31;
          }
        }
LABEL_27:
        unint64_t v8 = (v14 - 1) & v14;
        for (unint64_t i = __clz(__rbit64(v14)) + (v10 << 6); ; unint64_t i = v11 | (v10 << 6))
        {
          uint64_t v16 = *(void *)(*(void *)(v4 + 56) + 8 * i);
          if (swift_weakLoadStrong())
          {
            sub_100023754(*(void *)(v16 + 24), 2u, 0);
            swift_release();
            if (!v8) {
              goto LABEL_10;
            }
          }
          else
          {
            id v17 = *(id *)(v16 + 40);
            NSString v18 = String._bridgeToObjectiveC()();
            [v17 ulog:90 message:v18];

            if (!v8) {
              goto LABEL_10;
            }
          }
LABEL_9:
          unint64_t v11 = __clz(__rbit64(v8));
          v8 &= v8 - 1;
        }
      }
    }
  }
}

uint64_t sub_10002DC90()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10002DD08()
{
  sub_10002DC90();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LockscreenControlsAgent()
{
  return self;
}

uint64_t sub_10002DD60()
{
  uint64_t v1 = v0;
  sub_10000A38C((uint64_t *)&unk_10035E7E0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10028D430;
  *(void *)(v2 + 32) = 0xD000000000000018;
  *(void *)(v2 + 40) = 0x80000001002B3550;
  strcpy((char *)v60, "Enabled: ");
  WORD1(v60[1]) = 0;
  HIDWORD(v60[1]) = -385875968;
  if (*(unsigned char *)(v0 + 40)) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 40)) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  uint64_t v6 = v60[0];
  uint64_t v7 = v60[1];
  unint64_t v8 = sub_10008892C((char *)1, 2, 1, (char *)v2);
  *((void *)v8 + 2) = 2;
  *((void *)v8 + 6) = v6;
  *((void *)v8 + 7) = v7;
  v60[0] = 0;
  v60[1] = 0xE000000000000000;
  v9._uint64_t countAndFlagsBits = 0x6C6F687365726854;
  v9._object = (void *)0xEB00000000203A64;
  String.append(_:)(v9);
  uint64_t v56 = v1;
  Float.write<A>(to:)();
  unint64_t v10 = 0xE000000000000000;
  unint64_t v12 = *((void *)v8 + 2);
  unint64_t v11 = *((void *)v8 + 3);
  int64_t v13 = v12 + 1;
  if (v12 < v11 >> 1) {
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v8 = sub_10008892C((char *)(v11 > 1), v13, 1, v8);
LABEL_8:
    *((void *)v8 + 2) = v13;
    unint64_t v14 = &v8[16 * v12];
    *((void *)v14 + 4) = 0;
    *((void *)v14 + 5) = v10;
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_10028FDD0;
    strcpy((char *)v60, "Discovered: ");
    BYTE5(v60[1]) = 0;
    HIWORD(v60[1]) = -5120;
    swift_beginAccess();
    v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    uint64_t v17 = v60[1];
    *(void *)(v15 + 32) = v60[0];
    *(void *)(v15 + 40) = v17;
    strcpy((char *)v60, "Active: ");
    BYTE1(v60[1]) = 0;
    WORD1(v60[1]) = 0;
    HIDWORD(v60[1]) = -402653184;
    swift_beginAccess();
    v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    uint64_t v19 = v60[1];
    *(void *)(v15 + 48) = v60[0];
    *(void *)(v15 + 56) = v19;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v60[0] = 0xD000000000000013;
    v60[1] = 0x80000001002B3570;
    swift_beginAccess();
    uint64_t v59 = *(void *)(*(void *)(v56 + 64) + 16);
    v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    *(void *)(v15 + 64) = 0xD000000000000013;
    *(void *)(v15 + 72) = 0x80000001002B3570;
    v60[0] = v15;
    sub_10000A38C((uint64_t *)&unk_100367D40);
    sub_10000B010((unint64_t *)&qword_10035E7F0, (uint64_t *)&unk_100367D40);
    uint64_t v21 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    unint64_t v25 = *((void *)v8 + 2);
    unint64_t v24 = *((void *)v8 + 3);
    if (v25 >= v24 >> 1) {
      unint64_t v8 = sub_10008892C((char *)(v24 > 1), v25 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v25 + 1;
    NSString v26 = &v8[16 * v25];
    *((void *)v26 + 4) = v21;
    *((void *)v26 + 5) = v23;
    uint64_t v27 = *(void *)(v56 + 24);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_10002A608(v27);
    uint64_t v29 = swift_bridgeObjectRetain();
    uint64_t v30 = sub_10002A608(v29);
    unint64_t v10 = (unint64_t)sub_10002E5D4(v30, v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 0xC000000000000001) != 0)
    {
      if (!__CocoaSet.count.getter()) {
        goto LABEL_17;
      }
    }
    else if (!*(void *)(v10 + 16))
    {
LABEL_17:
      swift_bridgeObjectRelease();
      goto LABEL_48;
    }
    unint64_t v32 = *((void *)v8 + 2);
    unint64_t v31 = *((void *)v8 + 3);
    int64_t v13 = v32 + 1;
    if (v32 >= v31 >> 1) {
      unint64_t v8 = sub_10008892C((char *)(v31 > 1), v32 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v13;
    NSString v33 = &v8[16 * v32];
    *((void *)v33 + 4) = 0xD000000000000018;
    *((void *)v33 + 5) = 0x80000001002B3590;
    if ((v10 & 0xC000000000000001) != 0)
    {
      int64_t v13 = __CocoaSet.makeIterator()();
      type metadata accessor for HandoffDevice();
      sub_10002E77C(&qword_10035CFE8, 255, (void (*)(uint64_t))type metadata accessor for HandoffDevice);
      Set.Iterator.init(_cocoa:)();
      unint64_t v10 = v60[0];
      uint64_t v58 = (unint64_t *)v60[1];
      uint64_t v34 = v60[2];
      unint64_t v12 = v60[3];
      unint64_t v35 = v60[4];
    }
    else
    {
      unint64_t v12 = 0;
      uint64_t v36 = -1 << *(unsigned char *)(v10 + 32);
      uint64_t v58 = (unint64_t *)(v10 + 56);
      uint64_t v34 = ~v36;
      uint64_t v37 = -v36;
      if (v37 < 64) {
        uint64_t v38 = ~(-1 << v37);
      }
      else {
        uint64_t v38 = -1;
      }
      unint64_t v35 = v38 & *(void *)(v10 + 56);
    }
    int64_t v57 = (unint64_t)(v34 + 64) >> 6;
    unint64_t v11 = (unint64_t)&type metadata for Swift.AnyObject + 8;
    if ((v10 & 0x8000000000000000) != 0)
    {
      while (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for HandoffDevice();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        unint64_t v41 = v12;
        uint64_t v39 = v35;
        if (!v59) {
          break;
        }
LABEL_43:
        uint64_t v59 = 539828256;
        v46._uint64_t countAndFlagsBits = sub_1001F78E0();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        unint64_t v48 = *((void *)v8 + 2);
        unint64_t v47 = *((void *)v8 + 3);
        int64_t v13 = v48 + 1;
        if (v48 >= v47 >> 1) {
          unint64_t v8 = sub_10008892C((char *)(v47 > 1), v48 + 1, 1, v8);
        }
        *((void *)v8 + 2) = v13;
        Swift::String v49 = &v8[16 * v48];
        *((void *)v49 + 4) = 539828256;
        *((void *)v49 + 5) = 0xE400000000000000;
        swift_release();
        unint64_t v12 = v41;
        unint64_t v35 = v39;
        if ((v10 & 0x8000000000000000) == 0) {
          goto LABEL_23;
        }
      }
      goto LABEL_47;
    }
LABEL_23:
    if (v35)
    {
      uint64_t v39 = (v35 - 1) & v35;
      unint64_t v40 = __clz(__rbit64(v35)) | (v12 << 6);
      unint64_t v41 = v12;
      goto LABEL_42;
    }
    int64_t v42 = v12 + 1;
    if (!__OFADD__(v12, 1)) {
      break;
    }
    __break(1u);
  }
  if (v42 >= v57) {
    goto LABEL_47;
  }
  unint64_t v43 = v58[v42];
  unint64_t v41 = v12 + 1;
  if (v43) {
    goto LABEL_41;
  }
  unint64_t v41 = v12 + 2;
  if ((uint64_t)(v12 + 2) >= v57) {
    goto LABEL_47;
  }
  unint64_t v43 = v58[v41];
  if (v43) {
    goto LABEL_41;
  }
  unint64_t v41 = v12 + 3;
  if ((uint64_t)(v12 + 3) >= v57) {
    goto LABEL_47;
  }
  unint64_t v43 = v58[v41];
  if (v43) {
    goto LABEL_41;
  }
  unint64_t v41 = v12 + 4;
  if ((uint64_t)(v12 + 4) >= v57) {
    goto LABEL_47;
  }
  unint64_t v43 = v58[v41];
  if (v43)
  {
LABEL_41:
    uint64_t v39 = (v43 - 1) & v43;
    unint64_t v40 = __clz(__rbit64(v43)) + (v41 << 6);
LABEL_42:
    uint64_t v45 = *(void *)(*(void *)(v10 + 48) + 8 * v40);
    swift_retain();
    if (v45) {
      goto LABEL_43;
    }
    goto LABEL_47;
  }
  unint64_t v44 = v12 + 5;
  while (v57 != v44)
  {
    unint64_t v43 = v58[v44++];
    if (v43)
    {
      unint64_t v41 = v44 - 1;
      goto LABEL_41;
    }
  }
LABEL_47:
  sub_10002E7C4();
LABEL_48:
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v50._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  unint64_t v52 = *((void *)v8 + 2);
  unint64_t v51 = *((void *)v8 + 3);
  if (v52 >= v51 >> 1) {
    unint64_t v8 = sub_10008892C((char *)(v51 > 1), v52 + 1, 1, v8);
  }
  *((void *)v8 + 2) = v52 + 1;
  unint64_t v53 = &v8[16 * v52];
  *((void *)v53 + 4) = 0xD000000000000011;
  *((void *)v53 + 5) = 0x80000001002B35B0;
  uint64_t v54 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v54;
}

unint64_t *sub_10002E5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = __CocoaSet.count.getter();
    if ((v2 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    if (v4 > *(void *)(v2 + 16) >> 3) {
      goto LABEL_10;
    }
LABEL_13:
    sub_100034CF8(a1);
    return (unint64_t *)v2;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if ((a2 & 0xC000000000000001) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  if (v2 < 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
  }
  if (v4 <= __CocoaSet.count.getter() / 8) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = __CocoaSet.count.getter();
  Swift::Int v7 = sub_100030F84(v5, v6, &qword_10035CFF8, (void (*)(void))type metadata accessor for HandoffDevice);
  swift_bridgeObjectRelease();
  uint64_t v2 = v7;
LABEL_10:

  return sub_100035574(a1, v2);
}

uint64_t sub_10002E700()
{
  return sub_10002DD60();
}

uint64_t sub_10002E724(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10002E77C(&qword_10035CFE0, a2, (void (*)(uint64_t))type metadata accessor for LockscreenControlsAgentModel);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10002E77C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002E7C4()
{
  return swift_release();
}

void *sub_10002E7CC(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, unsigned int a12)
{
  v28[0] = a1;
  v28[1] = a2;
  void v28[2] = a3;
  if (a4)
  {
    uint64_t v13 = a4(v28);
    uint64_t v15 = v14;
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = a9;
    v17._object = a10;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    if (a11)
    {
      id v18 = a11;
      NSString v19 = String._bridgeToObjectiveC()();
      [v18 ulog:a12 message:v19];
      swift_bridgeObjectRelease();
    }
    else
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_100027B7C(a1);
    swift_retain();
    sub_100027B7C(a1);
    swift_retain();
    sub_10000A38C(&qword_10035D060);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v22 = v21;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = a9;
    v24._object = a10;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    if (a11)
    {
      id v25 = a11;
      NSString v26 = String._bridgeToObjectiveC()();
      [v25 ulog:a12 message:v26];
    }
    else
    {
      NSLog(_:_:)();
    }
    sub_100027B6C(a1);
    swift_bridgeObjectRelease();
    swift_release();
  }
  sub_100027B7C(a1);
  swift_retain();
  return a1;
}

float sub_10002EA44(uint64_t (*a1)(float *), float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  float v23 = a2;
  if (a1) {
    uint64_t v14 = a1(&v23);
  }
  else {
    uint64_t v14 = String.init<A>(describing:)();
  }
  uint64_t v16 = v14;
  Swift::String v17 = v15;
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = a7;
  v19._object = a8;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  if (a9)
  {
    id v20 = a9;
    NSString v21 = String._bridgeToObjectiveC()();
    [v20 ulog:a10 message:v21];
    swift_bridgeObjectRelease();
  }
  else
  {
    NSLog(_:_:)();
    swift_bridgeObjectRelease();
  }
  return a2;
}

uint64_t sub_10002EBA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, unsigned int a11)
{
  v26[0] = a1;
  v26[1] = a2;
  if (a3)
  {
    uint64_t v13 = a3(v26);
    uint64_t v15 = v14;
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = a8;
    v17._object = a9;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    if (!a10)
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    id v18 = a10;
    NSString v19 = String._bridgeToObjectiveC()();
    [v18 ulog:a11 message:v19];
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain_n();
    sub_10000A38C(&qword_10035D068);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v22 = v21;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = a8;
    v24._object = a9;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    if (!a10)
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_9;
    }
    id v18 = a10;
    NSString v19 = String._bridgeToObjectiveC()();
    [v18 ulog:a11 message:v19];
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

LABEL_9:
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_10002EDFC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X7>, uint64_t a7@<X8>, void *a8, unsigned int a9)
{
  v55._uint64_t countAndFlagsBits = a5;
  v55._object = a6;
  uint64_t v54 = a3;
  uint64_t v56 = a7;
  unsigned int v53 = a9;
  id v57 = a8;
  uint64_t v12 = sub_10000A38C(&qword_10035D168);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  Swift::String v17 = (char *)&v49 - v16;
  uint64_t v18 = sub_10000A38C(&qword_10035D170);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  id v25 = (char *)&v49 - v24;
  __chkstk_darwin(v23);
  if (a2)
  {
    uint64_t v27 = a2(a1);
    uint64_t v29 = v28;
    uint64_t v58 = v54;
    uint64_t v59 = a4;
    swift_bridgeObjectRetain();
    v30._uint64_t countAndFlagsBits = v27;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    uint64_t v31 = a1;
    if (v57)
    {
      id v32 = v57;
      NSString v33 = String._bridgeToObjectiveC()();
      [v32 ulog:v53 message:v33];
      swift_bridgeObjectRelease();
    }
    else
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v34 = v56;
  }
  else
  {
    uint64_t v50 = a4;
    uint64_t v51 = a1;
    id v35 = v57;
    uint64_t v36 = (char *)&v49 - v26;
    sub_10000D728(a1, (uint64_t)&v49 - v26, &qword_10035D170);
    unint64_t v52 = v36;
    sub_10000D728((uint64_t)v36, (uint64_t)v17, &qword_10035D170);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
    sub_10000D728((uint64_t)v17, (uint64_t)v15, &qword_10035D168);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18) == 1)
    {
      uint64_t v37 = (void *)0xE300000000000000;
      uint64_t v38 = 7104878;
    }
    else
    {
      sub_10001639C((uint64_t)v15, (uint64_t)v25, &qword_10035D170);
      sub_10000D728((uint64_t)v25, (uint64_t)v22, &qword_10035D170);
      uint64_t v38 = String.init<A>(describing:)();
      uint64_t v37 = v39;
      sub_10000D78C((uint64_t)v25, &qword_10035D170);
    }
    object = v55._object;
    uint64_t v34 = v56;
    uint64_t v41 = v50;
    uint64_t v31 = v51;
    uint64_t v43 = v54;
    uint64_t countAndFlagsBits = v55._countAndFlagsBits;
    sub_10000D78C((uint64_t)v17, &qword_10035D168);
    uint64_t v58 = v43;
    uint64_t v59 = v41;
    swift_bridgeObjectRetain();
    v44._uint64_t countAndFlagsBits = v38;
    v44._object = v37;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v45._uint64_t countAndFlagsBits = countAndFlagsBits;
    v45._object = object;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    if (v35)
    {
      id v46 = v35;
      NSString v47 = String._bridgeToObjectiveC()();
      [v46 ulog:v53 message:v47];
      swift_bridgeObjectRelease();
    }
    else
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
    }
    sub_10000D78C((uint64_t)v52, &qword_10035D170);
  }
  return sub_10000D728(v31, v34, &qword_10035D170);
}

uint64_t sub_10002F24C(uint64_t a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  return sub_10002FB7C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &qword_10035AC68);
}

uint64_t sub_10002F288(uint64_t a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  return sub_10002FB7C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &qword_10035D0F0);
}

uint64_t sub_10002F2C4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X7>, uint64_t a7@<X8>, void *a8, unsigned int a9)
{
  v55._uint64_t countAndFlagsBits = a5;
  v55._object = a6;
  uint64_t v54 = a3;
  uint64_t v56 = a7;
  unsigned int v53 = a9;
  id v57 = a8;
  uint64_t v12 = sub_10000A38C(&qword_10035D0C0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  Swift::String v17 = (char *)&v49 - v16;
  uint64_t v18 = sub_10000A38C((uint64_t *)&unk_10035E840);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  id v25 = (char *)&v49 - v24;
  __chkstk_darwin(v23);
  if (a2)
  {
    uint64_t v27 = a2(a1);
    uint64_t v29 = v28;
    uint64_t v58 = v54;
    uint64_t v59 = a4;
    swift_bridgeObjectRetain();
    v30._uint64_t countAndFlagsBits = v27;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    uint64_t v31 = a1;
    if (v57)
    {
      id v32 = v57;
      NSString v33 = String._bridgeToObjectiveC()();
      [v32 ulog:v53 message:v33];
      swift_bridgeObjectRelease();
    }
    else
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v34 = v56;
  }
  else
  {
    uint64_t v50 = a4;
    uint64_t v51 = a1;
    id v35 = v57;
    uint64_t v36 = (char *)&v49 - v26;
    sub_10000D728(a1, (uint64_t)&v49 - v26, (uint64_t *)&unk_10035E840);
    unint64_t v52 = v36;
    sub_10000D728((uint64_t)v36, (uint64_t)v17, (uint64_t *)&unk_10035E840);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
    sub_10000D728((uint64_t)v17, (uint64_t)v15, &qword_10035D0C0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18) == 1)
    {
      uint64_t v37 = (void *)0xE300000000000000;
      uint64_t v38 = 7104878;
    }
    else
    {
      sub_10001639C((uint64_t)v15, (uint64_t)v25, (uint64_t *)&unk_10035E840);
      sub_10000D728((uint64_t)v25, (uint64_t)v22, (uint64_t *)&unk_10035E840);
      uint64_t v38 = String.init<A>(describing:)();
      uint64_t v37 = v39;
      sub_10000D78C((uint64_t)v25, (uint64_t *)&unk_10035E840);
    }
    object = v55._object;
    uint64_t v34 = v56;
    uint64_t v41 = v50;
    uint64_t v31 = v51;
    uint64_t v43 = v54;
    uint64_t countAndFlagsBits = v55._countAndFlagsBits;
    sub_10000D78C((uint64_t)v17, &qword_10035D0C0);
    uint64_t v58 = v43;
    uint64_t v59 = v41;
    swift_bridgeObjectRetain();
    v44._uint64_t countAndFlagsBits = v38;
    v44._object = v37;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v45._uint64_t countAndFlagsBits = countAndFlagsBits;
    v45._object = object;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    if (v35)
    {
      id v46 = v35;
      NSString v47 = String._bridgeToObjectiveC()();
      [v46 ulog:v53 message:v47];
      swift_bridgeObjectRelease();
    }
    else
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
    }
    sub_10000D78C((uint64_t)v52, (uint64_t *)&unk_10035E840);
  }
  return sub_10000D728(v31, v34, (uint64_t *)&unk_10035E840);
}

uint64_t sub_10002F714@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void *)@<X1>, uint64_t a3@<X6>, void *a4@<X7>, uint64_t *a5@<X8>, void *a6, unsigned int a7)
{
  v32._uint64_t countAndFlagsBits = a3;
  v32._object = a4;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  unint64_t v10 = a1[2];
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  uint64_t v13 = a1[5];
  uint64_t v15 = a1[6];
  uint64_t v14 = a1[7];
  v35[0] = *a1;
  v35[1] = v9;
  v35[2] = v10;
  v35[3] = v11;
  v35[4] = v12;
  v35[5] = v13;
  v35[6] = v15;
  v35[7] = v14;
  uint64_t v34 = v9;
  unint64_t v33 = v10;
  if (a2)
  {
    uint64_t v16 = a2(v35);
    uint64_t v18 = v17;
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = v16;
    v19._object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    if (a6)
    {
      id v20 = a6;
      NSString v21 = String._bridgeToObjectiveC()();
      [v20 ulog:a7 message:v21];
      swift_bridgeObjectRelease();
    }
    else
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v29 = v34;
    uint64_t v28 = v8;
    unint64_t v30 = v33;
  }
  else
  {
    sub_10003A3A4(v8, v9, v10);
    swift_retain();
    sub_10003A3A4(v8, v9, v10);
    swift_retain();
    sub_10000A38C(&qword_10035D0C8);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v24 = v23;
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    if (a6)
    {
      id v26 = a6;
      NSString v27 = String._bridgeToObjectiveC()();
      [v26 ulog:a7 message:v27];
    }
    else
    {
      NSLog(_:_:)();
    }
    sub_10003A3F8(v8, v34, v33);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v28 = v8;
    uint64_t v29 = v34;
    unint64_t v30 = v33;
  }
  *a5 = v28;
  a5[1] = v29;
  a5[2] = v30;
  a5[3] = v11;
  a5[4] = v12;
  a5[5] = v13;
  a5[6] = v15;
  a5[7] = v14;
  sub_10003A3A4(v28, v29, v30);
  return swift_retain();
}

uint64_t sub_10002FA14(char a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  return sub_10002FA28(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_10002FA28(char a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  char v22 = a1;
  if (a2) {
    uint64_t v13 = a2(&v22);
  }
  else {
    uint64_t v13 = String.init<A>(describing:)();
  }
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = a7;
  v18._object = a8;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  if (a9)
  {
    id v19 = a9;
    NSString v20 = String._bridgeToObjectiveC()();
    [v19 ulog:a10 message:v20];
    swift_bridgeObjectRelease();
  }
  else
  {
    NSLog(_:_:)();
    swift_bridgeObjectRelease();
  }
  return a1 & 1;
}

uint64_t sub_10002FB7C(uint64_t a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10, uint64_t *a11)
{
  char v23 = a1;
  if (a2)
  {
    uint64_t v14 = a2(&v23);
  }
  else
  {
    sub_10000A38C(a11);
    uint64_t v14 = String.init<A>(describing:)();
  }
  uint64_t v16 = v14;
  Swift::String v17 = v15;
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = a7;
  v19._object = a8;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  if (a9)
  {
    id v20 = a9;
    NSString v21 = String._bridgeToObjectiveC()();
    [v20 ulog:a10 message:v21];
    swift_bridgeObjectRelease();
  }
  else
  {
    NSLog(_:_:)();
    swift_bridgeObjectRelease();
  }
  return a1;
}

void *sub_10002FCD0@<X0>(void *a1@<X0>, uint64_t (*a2)(unsigned char *)@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X7>, uint64_t a7@<X8>, void *a8, unsigned int a9)
{
  sub_10001639C((uint64_t)a1, (uint64_t)v33, &qword_10035D0E8);
  if (!a2)
  {
    sub_10001639C((uint64_t)a1, (uint64_t)&v31, &qword_10035D0E8);
    sub_10003A640(a1, (void (*)(void, void, void, void, void, void, void))sub_10003A630);
    sub_10003A640(a1, (void (*)(void, void, void, void, void, void, void))sub_10003A630);
    sub_10000A38C(&qword_10035D0E8);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v24 = v23;
    uint64_t v31 = a3;
    uint64_t v32 = a4;
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v26._uint64_t countAndFlagsBits = a5;
    v26._object = a6;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    if (a8)
    {
      id v27 = a8;
      NSString v28 = String._bridgeToObjectiveC()();
      [v27 ulog:a9 message:v28];
    }
    else
    {
      NSLog(_:_:)();
    }
    sub_10003A640(a1, (void (*)(void, void, void, void, void, void, void))sub_10003A680);
    goto LABEL_9;
  }
  uint64_t v15 = a2(v33);
  Swift::String v17 = v16;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = a5;
  v19._object = a6;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  if (!a8)
  {
    NSLog(_:_:)();
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  id v20 = a8;
  NSString v21 = String._bridgeToObjectiveC()();
  [v20 ulog:a9 message:v21];
  swift_bridgeObjectRelease();

LABEL_10:
  sub_10001639C((uint64_t)a1, a7, &qword_10035D0E8);
  return sub_10003A640(a1, (void (*)(void, void, void, void, void, void, void))sub_10003A630);
}

uint64_t sub_10002FF6C(uint64_t a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  char v22 = a1;
  if (a2) {
    uint64_t v13 = a2(&v22);
  }
  else {
    uint64_t v13 = String.init<A>(describing:)();
  }
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = a7;
  v18._object = a8;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  if (a9)
  {
    id v19 = a9;
    NSString v20 = String._bridgeToObjectiveC()();
    [v19 ulog:a10 message:v20];
    swift_bridgeObjectRelease();
  }
  else
  {
    NSLog(_:_:)();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_1000300BC(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1000323C0(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1000301DC(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      Swift::String v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100032510(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10003038C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for AnyCancellable();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = sub_100030D44(v7, result + 1);
    uint64_t v20 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      sub_100031780();
      uint64_t v17 = v20;
    }
    else
    {
      uint64_t v17 = v16;
      swift_retain();
    }
    sub_1000321DC(a2, v17);
    *uint64_t v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  type metadata accessor for AnyCancellable();
  sub_10002E77C(&qword_1003677E0, 255, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  swift_bridgeObjectRetain();
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    sub_1000326AC(v15, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  sub_10002E77C(&qword_10035D0A0, 255, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t sub_100030690(uint64_t *a1, uint64_t a2)
{
  return sub_1000306BC(a1, a2, (uint64_t)&OBJC_IVAR____TtC17proximitycontrold16TimedTaskStorage_identifier, &qword_10035D0B0, (void (*)(void))type metadata accessor for TimedTaskStorage, (void (*)(void))type metadata accessor for TimedTaskStorage);
}

uint64_t sub_1000306BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void), void (*a6)(void))
{
  uint64_t v10 = v6;
  uint64_t v13 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v13 < 0) {
      uint64_t v15 = *v6;
    }
    else {
      uint64_t v15 = v13 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v16 = __CocoaSet.member(for:)();
    swift_release();
    if (v16)
    {
      swift_bridgeObjectRelease();
      swift_release();
      a6(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v33;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v24 = sub_100030F84(v15, result + 1, a4, a5);
    Swift::Int v34 = v24;
    unint64_t v25 = *(void *)(v24 + 16);
    if (*(void *)(v24 + 24) <= v25)
    {
      uint64_t v29 = v25 + 1;
      swift_retain();
      sub_100031AAC(v29, a4);
      uint64_t v26 = v34;
    }
    else
    {
      uint64_t v26 = v24;
      swift_retain();
    }
    sub_1000322C8(a2, v26);
    *uint64_t v10 = v26;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  else
  {
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_bridgeObjectRetain();
    dispatch thunk of Hashable.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v20 = v18 & ~v19;
    if ((*(void *)(v13 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20))
    {
      swift_retain();
      char v21 = static UUID.== infix(_:_:)();
      swift_release();
      if (v21)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v10 + 48) + 8 * v20);
        swift_retain();
        return 0;
      }
      uint64_t v22 = ~v19;
      while (1)
      {
        unint64_t v20 = (v20 + 1) & v22;
        if (((*(void *)(v13 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
          break;
        }
        swift_retain();
        char v23 = static UUID.== infix(_:_:)();
        swift_release();
        if (v23) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v35 = *v10;
    *uint64_t v10 = 0x8000000000000000;
    Swift::Int v28 = swift_retain();
    sub_1000328A0(v28, v20, isUniquelyReferenced_nonNull_native, a4, a3, a5);
    *uint64_t v10 = v35;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  return 1;
}

uint64_t sub_100030A18(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    Swift::Int v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      unint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_10002E77C((unint64_t *)&qword_10036C0C0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100032AC8((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100030D44(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10000A38C(&qword_10035D0A8);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for AnyCancellable();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_100031780();
          uint64_t v2 = v14;
        }
        sub_10002E77C(&qword_1003677E0, 255, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  return v2;
}

Swift::Int sub_100030F84(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  if (a2)
  {
    sub_10000A38C(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      a4(0);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          sub_100031AAC(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int result = Hasher._finalize()();
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v6;
}

uint64_t sub_1000311F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000A38C(&qword_10035D098);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000314A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000A38C(&qword_10035D080);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100031780()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000A38C(&qword_10035D0A8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    BOOL v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v26 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = v27[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v26) {
            goto LABEL_33;
          }
          unint64_t v15 = v27[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v26) {
              goto LABEL_33;
            }
            unint64_t v15 = v27[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v26)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v25 = 1 << *(unsigned char *)(v2 + 32);
                if (v25 > 63) {
                  bzero(v27, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v27 = -1 << v25;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v27[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v26) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v27[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      type metadata accessor for AnyCancellable();
      sub_10002E77C(&qword_1003677E0, 255, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v19 = result & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v21 = 0;
        unint64_t v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v23 = v20 == v22;
          if (v20 == v22) {
            unint64_t v20 = 0;
          }
          v21 |= v23;
          uint64_t v24 = *(void *)(v8 + 8 * v20);
        }
        while (v24 == -1);
        unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100031AAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10000A38C(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v29 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v4 + 56);
    int64_t v28 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v9)
      {
        unint64_t v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v28) {
          goto LABEL_33;
        }
        unint64_t v17 = v29[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v28) {
            goto LABEL_33;
          }
          unint64_t v17 = v29[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v28) {
              goto LABEL_33;
            }
            unint64_t v17 = v29[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v28)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v2;
                uint64_t v27 = 1 << *(unsigned char *)(v4 + 32);
                if (v27 > 63) {
                  bzero(v29, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v29 = -1 << v27;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v17 = v29[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v28) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v29[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v4 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v6 + 48) + 8 * v13) = v19;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t sub_100031DE8()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10000A38C(&qword_10035D0B8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v38 = (void *)(v4 + 56);
    uint64_t v39 = v2;
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v36 = v0;
    int64_t v37 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v37) {
          goto LABEL_33;
        }
        unint64_t v20 = v38[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v37) {
            goto LABEL_33;
          }
          unint64_t v20 = v38[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v37) {
              goto LABEL_33;
            }
            unint64_t v20 = v38[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v37)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v36;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v38, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v38 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v38[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v37) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v38[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

unint64_t sub_1000321DC(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyCancellable();
  sub_10002E77C(&qword_1003677E0, 255, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_1000322C8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

Swift::Int sub_1000323C0(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000311F4();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)sub_100032D70();
      goto LABEL_14;
    }
    sub_100033504();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  unint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for PCActivityAssetType(0);
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

Swift::Int sub_100032510(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::UInt v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1000314A0();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (Swift::Int)sub_100032F08();
      goto LABEL_22;
    }
    sub_100033780();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  int64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *int64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_1000326AC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100031780();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)sub_1000330BC(&qword_10035D0A8);
      goto LABEL_12;
    }
    sub_100033A30();
  }
  uint64_t v8 = *v3;
  type metadata accessor for AnyCancellable();
  sub_10002E77C(&qword_1003677E0, 255, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    sub_10002E77C(&qword_10035D0A0, 255, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
    do
    {
      unint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_1000328A0(Swift::Int result, unint64_t a2, char a3, uint64_t *a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v8 = v6;
  Swift::Int v10 = result;
  unint64_t v11 = *(void *)(*v6 + 16);
  unint64_t v12 = *(void *)(*v6 + 24);
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v13 = v11 + 1;
  if (a3)
  {
    sub_100031AAC(v13, a4);
  }
  else
  {
    if (v12 > v11)
    {
      unint64_t result = (Swift::Int)sub_1000330BC(a4);
      goto LABEL_14;
    }
    sub_100033D34(v13, a4);
  }
  uint64_t v14 = *v6;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v14 + 32);
  a2 = result & ~v15;
  if ((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    a6(0);
    swift_retain();
    char v16 = static UUID.== infix(_:_:)();
    unint64_t result = swift_release();
    if (v16)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v15;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        swift_retain();
        char v18 = static UUID.== infix(_:_:)();
        unint64_t result = swift_release();
        if (v18) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v19 = *v8;
  *(void *)(*v8 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = v10;
  uint64_t v20 = *(void *)(v19 + 16);
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v22;
  }
  return result;
}

uint64_t sub_100032AC8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100031DE8();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100033260();
      goto LABEL_12;
    }
    sub_100034048();
  }
  uint64_t v12 = *v3;
  sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_10002E77C((unint64_t *)&qword_10036C0C0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_100032D70()
{
  uint64_t v1 = v0;
  sub_10000A38C(&qword_10035D098);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100032F08()
{
  uint64_t v1 = v0;
  sub_10000A38C(&qword_10035D080);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000330BC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000A38C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100033260()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A38C(&qword_10035D0B8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  uint64_t v23 = v6 + 56;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100033504()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000A38C(&qword_10035D098);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100033780()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000A38C(&qword_10035D080);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100033A30()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000A38C(&qword_10035D0A8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v25 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v25 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    type metadata accessor for AnyCancellable();
    sub_10002E77C(&qword_1003677E0, 255, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v8 + 8 * v20);
      }
      while (v24 == -1);
      unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100033D34(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10000A38C(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v27 = v4 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v4 + 56);
  int64_t v28 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v28) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v27 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v28) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v27 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v28) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v27 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    uint64_t v19 = *(void *)(*(void *)(v4 + 48) + 8 * v15);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v6 + 48) + 8 * v13) = v19;
    ++*(void *)(v6 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v28)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v2;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v27 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v28) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v27 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100034048()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000A38C(&qword_10035D0B8);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000343FC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000A38C(&qword_10035CFF8);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = (unsigned char *)result;
  unint64_t v28 = a1;
  uint64_t v29 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= v29) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= v29) {
        goto LABEL_36;
      }
      unint64_t v16 = v28[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= v29) {
          goto LABEL_36;
        }
        unint64_t v16 = v28[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << v9[32];
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*((void *)v9 + 6) + 8 * v22) = v18;
    ++*((void *)v9 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= v29) {
    goto LABEL_36;
  }
  unint64_t v16 = v28[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000346D0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000A38C(&qword_10035D080);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    unint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *unint64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100034968(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_10000A38C(&qword_10035D0B8);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  uint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100034CF8(uint64_t a1)
{
  if ((*(void *)v1 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.count.getter();
    if (!result) {
      return result;
    }
LABEL_5:
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for HandoffDevice();
      sub_10002E77C(&qword_10035CFE8, 255, (void (*)(uint64_t))type metadata accessor for HandoffDevice);
      uint64_t result = Set.Iterator.init(_cocoa:)();
      a1 = v20;
      uint64_t v18 = v21;
      uint64_t v4 = v22;
      uint64_t v5 = v23;
      unint64_t v6 = v24;
    }
    else
    {
      uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v18 = a1 + 56;
      uint64_t v4 = ~v7;
      uint64_t v8 = -v7;
      if (v8 < 64) {
        uint64_t v9 = ~(-1 << v8);
      }
      else {
        uint64_t v9 = -1;
      }
      unint64_t v6 = v9 & *(void *)(a1 + 56);
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v5 = 0;
    }
    int64_t v17 = (unint64_t)(v4 + 64) >> 6;
    if (a1 < 0) {
      goto LABEL_14;
    }
    while (1)
    {
      if (v6)
      {
        uint64_t v10 = (v6 - 1) & v6;
        unint64_t v11 = __clz(__rbit64(v6)) | (v5 << 6);
        uint64_t v12 = v5;
      }
      else
      {
        int64_t v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
          return result;
        }
        if (v14 >= v17) {
          return sub_10002E7C4();
        }
        unint64_t v15 = *(void *)(v18 + 8 * v14);
        uint64_t v12 = v5 + 1;
        if (!v15)
        {
          uint64_t v12 = v5 + 2;
          if (v5 + 2 >= v17) {
            return sub_10002E7C4();
          }
          unint64_t v15 = *(void *)(v18 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v5 + 3;
            if (v5 + 3 >= v17) {
              return sub_10002E7C4();
            }
            unint64_t v15 = *(void *)(v18 + 8 * v12);
            if (!v15)
            {
              uint64_t v12 = v5 + 4;
              if (v5 + 4 >= v17) {
                return sub_10002E7C4();
              }
              unint64_t v15 = *(void *)(v18 + 8 * v12);
              if (!v15)
              {
                uint64_t v12 = v5 + 5;
                if (v5 + 5 >= v17) {
                  return sub_10002E7C4();
                }
                unint64_t v15 = *(void *)(v18 + 8 * v12);
                if (!v15)
                {
                  uint64_t v16 = v5 + 6;
                  while (v17 != v16)
                  {
                    unint64_t v15 = *(void *)(v18 + 8 * v16++);
                    if (v15)
                    {
                      uint64_t v12 = v16 - 1;
                      goto LABEL_32;
                    }
                  }
                  return sub_10002E7C4();
                }
              }
            }
          }
        }
LABEL_32:
        uint64_t v10 = (v15 - 1) & v15;
        unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
      }
      uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8 * v11);
      swift_retain();
      if (!v13) {
        return sub_10002E7C4();
      }
      while (1)
      {
        sub_1000366B0(v13, (uint64_t)&OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id, &qword_10035CFF8, (void (*)(void))type metadata accessor for HandoffDevice);
        swift_release();
        uint64_t result = swift_release();
        uint64_t v5 = v12;
        unint64_t v6 = v10;
        if ((a1 & 0x8000000000000000) == 0) {
          break;
        }
LABEL_14:
        if (__CocoaSet.Iterator.next()())
        {
          type metadata accessor for HandoffDevice();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v13 = v19;
          swift_unknownObjectRelease();
          uint64_t v12 = v5;
          uint64_t v10 = v6;
          if (v19) {
            continue;
          }
        }
        return sub_10002E7C4();
      }
    }
  }
  uint64_t result = *(void *)(*(void *)v1 + 16);
  if (result) {
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_100035044(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036C090);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v24 - v12;
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v24 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v27 = v4 + 16;
  unint64_t v28 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  int64_t v25 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v26 = v4 + 48;
  uint64_t v29 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  if (!v17) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v13, *(void *)(v29 + 48) + *(void *)(v4 + 72) * i, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v13, 1, v3) == 1) {
      return swift_release();
    }
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v13, v3);
    sub_100036918((uint64_t)v6, (uint64_t)v10);
    sub_10000D78C((uint64_t)v10, &qword_10036C090);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v17) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v21 >= v25) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v21);
    ++v18;
    if (!v22)
    {
      int64_t v18 = v21 + 1;
      if (v21 + 1 >= v25) {
        goto LABEL_25;
      }
      unint64_t v22 = *(void *)(v24 + 8 * v18);
      if (!v22)
      {
        int64_t v18 = v21 + 2;
        if (v21 + 2 >= v25) {
          goto LABEL_25;
        }
        unint64_t v22 = *(void *)(v24 + 8 * v18);
        if (!v22)
        {
          int64_t v18 = v21 + 3;
          if (v21 + 3 >= v25) {
            goto LABEL_25;
          }
          unint64_t v22 = *(void *)(v24 + 8 * v18);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v17 = (v22 - 1) & v22;
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v25)
  {
LABEL_25:
    (*v28)(v13, 1, 1, v3);
    return swift_release();
  }
  unint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22)
  {
    int64_t v18 = v23;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v25) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000353CC(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    unint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_100036C00(v12, v13);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v8 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v16;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

unint64_t *sub_100035574(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for HandoffDevice();
    sub_10002E77C(&qword_10035CFE8, 255, (void (*)(uint64_t))type metadata accessor for HandoffDevice);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v40;
    uint64_t v4 = v41;
    uint64_t v6 = v42;
    int64_t v5 = v43;
    unint64_t v7 = v44;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v4 = a1 + 56;
    uint64_t v6 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v5 = 0;
  }
  uint64_t v35 = v3;
  uint64_t v36 = v4;
  uint64_t v37 = v6;
  int64_t v38 = v5;
  unint64_t v39 = v7;
  uint64_t v11 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v7)
      {
        uint64_t v12 = (v7 - 1) & v7;
        unint64_t v13 = __clz(__rbit64(v7)) | (v5 << 6);
LABEL_14:
        uint64_t v14 = *(void *)(*(void *)(v3 + 48) + 8 * v13);
        swift_retain();
        goto LABEL_15;
      }
      int64_t v22 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        __break(1u);
      }
      int64_t v23 = (unint64_t)(v6 + 64) >> 6;
      if (v22 >= v23)
      {
        uint64_t v14 = 0;
        uint64_t v12 = 0;
        goto LABEL_15;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v22);
      if (v24)
      {
LABEL_28:
        uint64_t v12 = (v24 - 1) & v24;
        unint64_t v13 = __clz(__rbit64(v24)) + (v22 << 6);
        int64_t v5 = v22;
        goto LABEL_14;
      }
      int64_t v25 = v5 + 2;
      if (v5 + 2 >= v23) {
        goto LABEL_44;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v25);
      if (v24)
      {
LABEL_32:
        int64_t v22 = v25;
        goto LABEL_28;
      }
      if (v5 + 3 < v23)
      {
        unint64_t v24 = *(void *)(v36 + 8 * (v5 + 3));
        if (v24)
        {
          int64_t v22 = v5 + 3;
          goto LABEL_28;
        }
        int64_t v25 = v5 + 4;
        if (v5 + 4 >= v23)
        {
          uint64_t v14 = 0;
          uint64_t v12 = 0;
          v5 += 3;
LABEL_15:
          int64_t v38 = v5;
          unint64_t v39 = v12;
          if (!v14) {
            goto LABEL_53;
          }
          goto LABEL_19;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (v24) {
          goto LABEL_32;
        }
        int64_t v22 = v5 + 5;
        if (v5 + 5 < v23)
        {
          unint64_t v24 = *(void *)(v36 + 8 * v22);
          if (v24) {
            goto LABEL_28;
          }
          int64_t v22 = v23 - 1;
          int64_t v26 = v5 + 6;
          while (v23 != v26)
          {
            unint64_t v24 = *(void *)(v36 + 8 * v26++);
            if (v24)
            {
              int64_t v22 = v26 - 1;
              goto LABEL_28;
            }
          }
LABEL_44:
          uint64_t v14 = 0;
          uint64_t v12 = 0;
          int64_t v5 = v22;
          goto LABEL_15;
        }
      }
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      int64_t v5 = v25;
      goto LABEL_15;
    }
    uint64_t v15 = __CocoaSet.Iterator.next()();
    if (!v15
      || (v34[1] = v15,
          type metadata accessor for HandoffDevice(),
          swift_unknownObjectRetain(),
          swift_dynamicCast(),
          swift_unknownObjectRelease(),
          !v34[3]))
    {
LABEL_53:
      sub_10002E7C4();
      return (unint64_t *)v2;
    }
LABEL_19:
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    Swift::Int v16 = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v18 = v16 & ~v17;
    if (((*(void *)(v11 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      goto LABEL_10;
    }
    swift_retain();
    char v19 = static UUID.== infix(_:_:)();
    swift_release();
    if (v19) {
      break;
    }
    uint64_t v20 = ~v17;
    while (1)
    {
      unint64_t v18 = (v18 + 1) & v20;
      if (((*(void *)(v11 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
        break;
      }
      swift_retain();
      char v21 = static UUID.== infix(_:_:)();
      swift_release();
      if (v21) {
        goto LABEL_47;
      }
    }
LABEL_10:
    swift_release();
    uint64_t v3 = v35;
    uint64_t v6 = v37;
    int64_t v5 = v38;
    unint64_t v7 = v39;
  }
LABEL_47:
  uint64_t isStackAllocationSafe = swift_release();
  char v28 = *(unsigned char *)(v2 + 32);
  unint64_t v29 = (unint64_t)((1 << v28) + 63) >> 6;
  size_t v30 = 8 * v29;
  if ((v28 & 0x3Fu) < 0xE
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)v34 - ((v30 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v30);
    BOOL v31 = sub_100036D90((void *)((char *)v34 - ((v30 + 15) & 0x3FFFFFFFFFFFFFF0)), v29, v2, v18, &v35);
    swift_release();
    sub_10002E7C4();
  }
  else
  {
    uint64_t v32 = (void *)swift_slowAlloc();
    memcpy(v32, (const void *)(v2 + 56), v30);
    BOOL v31 = sub_100036D90((unint64_t *)v32, v29, v2, v18, &v35);
    swift_release();
    sub_10002E7C4();
    swift_slowDealloc();
  }
  return v31;
}

void *sub_100035B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10036C090);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v59 = (char *)&v49 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = ~v13;
  uint64_t v15 = a1 + 56;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(a1 + 56);
  uint64_t v60 = a1;
  uint64_t v61 = a1 + 56;
  uint64_t v54 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  Swift::String v55 = v6;
  uint64_t v62 = v14;
  uint64_t v63 = 0;
  unint64_t v64 = v18;
  unsigned int v53 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v51 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v57 = v8 + 16;
  uint64_t v58 = (char *)(a2 + 56);
  char v19 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v56 = v8;
  uint64_t v52 = a2;
  uint64_t v50 = 0;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v21 = (v18 - 1) & v18;
  unint64_t v22 = __clz(__rbit64(v18)) | (v20 << 6);
  int64_t v23 = v20;
LABEL_7:
  unint64_t v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v22;
  int64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = (uint64_t)v55;
  v25(v55, v24, v7);
  uint64_t v27 = 0;
  while (1)
  {
    (*v54)(v26, v27, 1, v7);
    uint64_t v60 = a1;
    uint64_t v61 = v15;
    uint64_t v62 = v14;
    uint64_t v63 = v23;
    unint64_t v64 = v21;
    if ((*v53)(v26, 1, v7) == 1)
    {
      sub_10002E7C4();
      sub_10000D78C(v26, &qword_10036C090);
      return (void *)v52;
    }
    (*v51)(v59, v26, v7);
    uint64_t v31 = v52;
    sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
    unint64_t v34 = v32 & ~v33;
    if ((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34)) {
      break;
    }
    uint64_t v40 = *v19;
    uint64_t v8 = v56;
LABEL_35:
    v40(v59, v7);
    int64_t v20 = v63;
    unint64_t v18 = v64;
    a1 = v60;
    uint64_t v15 = v61;
    uint64_t v14 = v62;
    uint64_t v50 = v63;
    if (v64) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v23);
    if (v29) {
      goto LABEL_11;
    }
    v20 += 2;
    if (v23 + 1 >= v28) {
      goto LABEL_37;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v20);
    if (v29) {
      goto LABEL_14;
    }
    if (v23 + 2 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * (v23 + 2));
    if (v29)
    {
      v23 += 2;
      goto LABEL_11;
    }
    int64_t v20 = v23 + 3;
    if (v23 + 3 < v28)
    {
      unint64_t v29 = *(void *)(v15 + 8 * v20);
      if (v29)
      {
LABEL_14:
        int64_t v23 = v20;
LABEL_11:
        uint64_t v21 = (v29 - 1) & v29;
        unint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
        goto LABEL_7;
      }
      v23 += 4;
      if (v23 >= v28)
      {
LABEL_26:
        uint64_t v21 = 0;
        uint64_t v27 = 1;
        int64_t v23 = v20;
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v23);
      if (v29) {
        goto LABEL_11;
      }
      int64_t v23 = v28 - 1;
      uint64_t v30 = v50 + 6;
      while (v28 != v30)
      {
        unint64_t v29 = *(void *)(v15 + 8 * v30++);
        if (v29)
        {
          int64_t v23 = v30 - 1;
          goto LABEL_11;
        }
      }
LABEL_37:
      uint64_t v21 = 0;
      uint64_t v27 = 1;
      goto LABEL_27;
    }
    uint64_t v21 = 0;
    uint64_t v27 = 1;
    v23 += 2;
LABEL_27:
    uint64_t v26 = (uint64_t)v55;
  }
  uint64_t v50 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v31;
  uint64_t v36 = ~v33;
  uint64_t v37 = *(void *)(v56 + 72);
  int64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  while (1)
  {
    v38(v11, *(void *)(v35 + 48) + v37 * v34, v7);
    sub_10002E77C((unint64_t *)&qword_10036C0C0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v40 = *v19;
    (*v19)(v11, v7);
    if (v39) {
      break;
    }
    unint64_t v34 = (v34 + 1) & v36;
    if (((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34) & 1) == 0)
    {
      uint64_t v8 = v56;
      goto LABEL_35;
    }
  }
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v40)(v59, v7);
  char v42 = *(unsigned char *)(v35 + 32);
  unint64_t v43 = (unint64_t)((1 << v42) + 63) >> 6;
  size_t v44 = 8 * v43;
  if ((v42 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v58, v44);
    Swift::String v45 = sub_10003718C((unint64_t *)((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v35, v34, &v60);
    swift_release();
    sub_10002E7C4();
    return v45;
  }
  else
  {
    NSString v47 = (void *)swift_slowAlloc();
    memcpy(v47, v58, v44);
    unint64_t v48 = sub_10003718C((unint64_t *)v47, v43, v35, v34, &v60);
    swift_release();
    sub_10002E7C4();
    swift_slowDealloc();
    return v48;
  }
}

unint64_t *sub_100036218(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v36) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v36) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v36) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v36) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_47:
                  sub_10002E7C4();
                  return (unint64_t *)v2;
                }
                unint64_t v13 = *(void *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      break;
                    }
                    if (v14 >= v36) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v37 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }
LABEL_49:
                  __break(1u);
                }
                int64_t v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        unint64_t v7 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        int64_t v9 = v14;
      }
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = *(void *)(v2 + 48);
    int64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        uint64_t v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    char v29 = *(unsigned char *)(v2 + 32);
    unint64_t v30 = (unint64_t)((1 << v29) + 63) >> 6;
    size_t v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_100037718((unint64_t *)((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0)), v30, v2, v21, &v38);
      swift_release();
      sub_10002E7C4();
    }
    else
    {
      uint64_t v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_100037718((unint64_t *)v33, v30, v2, v21, &v38);
      swift_release();
      sub_10002E7C4();
      swift_slowDealloc();
    }
    return v32;
  }
  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_100036688(uint64_t a1)
{
  return sub_1000366B0(a1, (uint64_t)&OBJC_IVAR____TtC17proximitycontrold16TimedTaskStorage_identifier, &qword_10035D0B0, (void (*)(void))type metadata accessor for TimedTaskStorage);
}

uint64_t sub_1000366B0(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t v6 = v4;
  uint64_t v8 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v8 < 0) {
      uint64_t v10 = *v6;
    }
    else {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    char v11 = __CocoaSet.contains(_:)();
    swift_release();
    if (v11)
    {
      uint64_t v12 = sub_100037A10(v10, a1, a3, a4);
      swift_bridgeObjectRelease();
      return v12;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v15 = v13 & ~v14;
  if (((*(void *)(v8 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
    goto LABEL_15;
  }
  swift_retain();
  char v16 = static UUID.== infix(_:_:)();
  swift_release();
  if ((v16 & 1) == 0)
  {
    uint64_t v17 = ~v14;
    do
    {
      unint64_t v15 = (v15 + 1) & v17;
      if (((*(void *)(v8 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
        goto LABEL_15;
      }
      swift_retain();
      char v18 = static UUID.== infix(_:_:)();
      swift_release();
    }
    while ((v18 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = *v6;
  uint64_t v22 = *v6;
  *uint64_t v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000330BC(a3);
    uint64_t v20 = v22;
  }
  uint64_t v12 = *(void *)(*(void *)(v20 + 48) + 8 * v15);
  sub_100037C70(v15);
  *uint64_t v6 = v22;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100036918@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    char v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      sub_10002E77C((unint64_t *)&qword_10036C0C0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *unint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100033260();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    sub_100037E94(v12);
    *unint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t sub_100036C00(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      char v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100032F08();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_1000381B4(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t *sub_100036D90(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5 = a5;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v33 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v35 = a3 + 56;
  while (2)
  {
    uint64_t v32 = v8;
    do
    {
      while (1)
      {
        if ((*v5 & 0x8000000000000000) == 0)
        {
          int64_t v10 = v5[3];
          unint64_t v9 = v5[4];
          if (v9)
          {
            uint64_t v11 = (v9 - 1) & v9;
            unint64_t v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_7:
            uint64_t v13 = *(void *)(*(void *)(*v5 + 48) + 8 * v12);
            swift_retain();
            goto LABEL_8;
          }
          int64_t v24 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            goto LABEL_47;
          }
          int64_t v25 = (unint64_t)(v5[2] + 64) >> 6;
          if (v24 >= v25)
          {
            uint64_t v13 = 0;
            uint64_t v11 = 0;
            goto LABEL_8;
          }
          uint64_t v26 = v5[1];
          unint64_t v27 = *(void *)(v26 + 8 * v24);
          if (v27)
          {
LABEL_22:
            uint64_t v11 = (v27 - 1) & v27;
            unint64_t v12 = __clz(__rbit64(v27)) + (v24 << 6);
            int64_t v10 = v24;
            goto LABEL_7;
          }
          if (v10 + 2 < v25)
          {
            unint64_t v27 = *(void *)(v26 + 8 * (v10 + 2));
            if (v27)
            {
              int64_t v24 = v10 + 2;
              goto LABEL_22;
            }
            if (v10 + 3 >= v25)
            {
              uint64_t v13 = 0;
              uint64_t v11 = 0;
              v10 += 2;
              goto LABEL_8;
            }
            unint64_t v27 = *(void *)(v26 + 8 * (v10 + 3));
            if (v27)
            {
              int64_t v24 = v10 + 3;
              goto LABEL_22;
            }
            int64_t v24 = v10 + 4;
            if (v10 + 4 >= v25)
            {
              uint64_t v13 = 0;
              uint64_t v11 = 0;
              v10 += 3;
LABEL_8:
              v5[3] = v10;
              void v5[4] = v11;
              if (!v13) {
                goto LABEL_45;
              }
              goto LABEL_12;
            }
            unint64_t v27 = *(void *)(v26 + 8 * v24);
            if (v27) {
              goto LABEL_22;
            }
            int64_t v24 = v25 - 1;
            int64_t v30 = v10 + 5;
            while (v25 != v30)
            {
              unint64_t v27 = *(void *)(v26 + 8 * v30++);
              if (v27)
              {
                int64_t v24 = v30 - 1;
                goto LABEL_22;
              }
            }
          }
          uint64_t v13 = 0;
          uint64_t v11 = 0;
          int64_t v10 = v24;
          goto LABEL_8;
        }
        if (!__CocoaSet.Iterator.next()()
          || (type metadata accessor for HandoffDevice(),
              swift_unknownObjectRetain(),
              swift_dynamicCast(),
              swift_unknownObjectRelease(),
              !v36))
        {
LABEL_45:
          swift_retain();
          return (unint64_t *)sub_1000343FC(v33, a2, v32, a3);
        }
LABEL_12:
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int v14 = Hasher._finalize()();
        uint64_t v15 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v16 = v14 & ~v15;
        uint64_t v17 = v16 >> 6;
        uint64_t v18 = 1 << v16;
        if (((1 << v16) & *(void *)(v35 + 8 * (v16 >> 6))) == 0) {
          goto LABEL_3;
        }
        swift_retain();
        char v19 = static UUID.== infix(_:_:)();
        swift_release();
        if (v19) {
          break;
        }
        uint64_t v20 = ~v15;
        for (unint64_t i = v16 + 1; ; unint64_t i = v22 + 1)
        {
          unint64_t v22 = i & v20;
          if (((*(void *)(v35 + (((i & v20) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v20)) & 1) == 0) {
            break;
          }
          swift_retain();
          char v23 = static UUID.== infix(_:_:)();
          swift_release();
          if (v23)
          {
            uint64_t result = (unint64_t *)swift_release();
            uint64_t v17 = v22 >> 6;
            uint64_t v18 = 1 << v22;
            goto LABEL_25;
          }
        }
LABEL_3:
        uint64_t result = (unint64_t *)swift_release();
        uint64_t v5 = a5;
      }
      uint64_t result = (unint64_t *)swift_release();
LABEL_25:
      uint64_t v28 = v17;
      uint64_t v5 = a5;
      unint64_t v29 = v33[v28];
      v33[v28] = v29 & ~v18;
    }
    while ((v18 & v29) == 0);
    uint64_t v8 = v32 - 1;
    if (__OFSUB__(v32, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v32 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

void *sub_10003718C(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v52 = a2;
  uint64_t v9 = sub_10000A38C(&qword_10036C090);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)__chkstk_darwin(v13);
  uint64_t v65 = (char *)&v52 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  uint64_t v54 = a1;
  Swift::String v55 = v11;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v22 = v21;
  uint64_t v23 = v18 - 1;
  uint64_t v63 = v21 + 16;
  uint64_t v64 = a3;
  uint64_t v58 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v59 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v56 = a5;
  uint64_t v57 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v62 = a3 + 56;
  int64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v60 = v21;
  while (2)
  {
    uint64_t v53 = v23;
    do
    {
      while (1)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = a5[1];
        uint64_t v29 = a5[2];
        int64_t v28 = a5[3];
        unint64_t v30 = a5[4];
        if (v30)
        {
          uint64_t v61 = (v30 - 1) & v30;
          unint64_t v31 = __clz(__rbit64(v30)) | (v28 << 6);
LABEL_7:
          unint64_t v32 = *(void *)(v26 + 48) + *(void *)(v22 + 72) * v31;
          uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
          uint64_t v34 = v26;
          v33(v11, v32, v12);
          uint64_t v35 = 0;
          goto LABEL_8;
        }
        int64_t v44 = v28 + 1;
        if (__OFADD__(v28, 1))
        {
          __break(1u);
          goto LABEL_44;
        }
        int64_t v45 = (unint64_t)(v29 + 64) >> 6;
        if (v44 >= v45)
        {
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v44);
        if (v46) {
          goto LABEL_17;
        }
        int64_t v49 = v28 + 2;
        if (v28 + 2 >= v45) {
          goto LABEL_35;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v49);
        if (v46) {
          goto LABEL_23;
        }
        if (v28 + 3 >= v45) {
          goto LABEL_36;
        }
        unint64_t v46 = *(void *)(v27 + 8 * (v28 + 3));
        if (v46)
        {
          int64_t v44 = v28 + 3;
          goto LABEL_17;
        }
        int64_t v49 = v28 + 4;
        if (v28 + 4 < v45)
        {
          unint64_t v46 = *(void *)(v27 + 8 * v49);
          if (v46)
          {
LABEL_23:
            int64_t v44 = v49;
LABEL_17:
            uint64_t v61 = (v46 - 1) & v46;
            unint64_t v31 = __clz(__rbit64(v46)) + (v44 << 6);
            int64_t v28 = v44;
            goto LABEL_7;
          }
          int64_t v44 = v28 + 5;
          if (v28 + 5 < v45)
          {
            unint64_t v46 = *(void *)(v27 + 8 * v44);
            if (v46) {
              goto LABEL_17;
            }
            int64_t v44 = v45 - 1;
            int64_t v50 = v28 + 6;
            while (v45 != v50)
            {
              unint64_t v46 = *(void *)(v27 + 8 * v50++);
              if (v46)
              {
                int64_t v44 = v50 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            uint64_t v61 = 0;
            uint64_t v35 = 1;
            int64_t v28 = v44;
            uint64_t v34 = v26;
            goto LABEL_8;
          }
LABEL_36:
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          int64_t v28 = v49;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        uint64_t v61 = 0;
        uint64_t v35 = 1;
        v28 += 3;
        uint64_t v34 = v26;
LABEL_8:
        (*v59)(v11, v35, 1, v12);
        *a5 = v34;
        a5[1] = v27;
        a5[2] = v29;
        a5[3] = v28;
        a5[4] = v61;
        if ((*v58)(v11, 1, v12) == 1)
        {
          sub_10000D78C((uint64_t)v11, &qword_10036C090);
          uint64_t v51 = v64;
          swift_retain();
          return (void *)sub_100034968(v54, v52, v53, v51);
        }
        (*v57)(v65, v11, v12);
        uint64_t v36 = v64;
        sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v38 = -1 << *(unsigned char *)(v36 + 32);
        unint64_t v39 = v37 & ~v38;
        if ((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39)) {
          break;
        }
        int64_t v25 = *v24;
        uint64_t v22 = v60;
LABEL_4:
        uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v25)(v65, v12);
      }
      uint64_t v61 = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v40 = ~v38;
      uint64_t v41 = *(void *)(v60 + 72);
      unint64_t v42 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
      while (1)
      {
        v42(v15, *(void *)(v64 + 48) + v41 * v39, v12);
        sub_10002E77C((unint64_t *)&qword_10036C0C0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
        int64_t v25 = *v24;
        (*v24)(v15, v12);
        if (v43) {
          break;
        }
        unint64_t v39 = (v39 + 1) & v40;
        if (((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
        {
          uint64_t v11 = v55;
          a5 = v56;
          uint64_t v22 = v60;
          goto LABEL_4;
        }
      }
      uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v25)(v65, v12);
      uint64_t v47 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v11 = v55;
      uint64_t v48 = *(unint64_t *)((char *)v54 + v47);
      *(unint64_t *)((char *)v54 + v47) = v48 & ~(1 << v39);
      a5 = v56;
      uint64_t v22 = v60;
    }
    while ((v48 & (1 << v39)) == 0);
    uint64_t v23 = v53 - 1;
    if (__OFSUB__(v53, 1))
    {
LABEL_44:
      __break(1u);
      return result;
    }
    if (v53 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }
}

unint64_t *sub_100037718(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  unint64_t v39 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v40 = a3 + 56;
  while (2)
  {
    uint64_t v38 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_45;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_45;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_15;
            }
            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_45;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v15 = v14 - 1;
                int64_t v36 = v9 + 6;
                while (v14 != v36)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    int64_t v13 = v36 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return (unint64_t *)sub_1000346D0(v39, a2, v38, a3);
              }
              goto LABEL_15;
            }
          }
          int64_t v13 = v18;
        }
LABEL_15:
        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        int64_t v9 = v13;
LABEL_16:
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v40 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_3;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        int64_t v28 = (void *)(v27 + 16 * v24);
        BOOL v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          uint64_t v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_23;
          }
        }
LABEL_3:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      }
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_23:
      unint64_t v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v38 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_100037A10(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  swift_bridgeObjectRelease();
  uint64_t v7 = __CocoaSet.count.getter();
  uint64_t v8 = swift_unknownObjectRetain();
  Swift::Int v9 = sub_100030F84(v8, v7, a3, a4);
  Swift::Int v18 = v9;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_retain();
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    swift_retain();
    char v13 = static UUID.== infix(_:_:)();
    swift_release();
    if (v13)
    {
LABEL_6:
      swift_release();
      uint64_t v16 = *(void *)(*(void *)(v9 + 48) + 8 * v12);
      sub_100037C70(v12);
      if (static UUID.== infix(_:_:)())
      {
        *uint64_t v4 = v18;
        return v16;
      }
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          break;
        }
        swift_retain();
        char v15 = static UUID.== infix(_:_:)();
        swift_release();
        if (v15) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

const char *sub_100037C30()
{
  return "hash";
}

id sub_100037C3C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 hash];
  *a2 = result;
  return result;
}

unint64_t sub_100037C70(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        swift_retain();
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_release();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          char v13 = (void *)(v12 + 8 * v2);
          uint64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *char v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    id result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_100037E94(int64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v31 = v1;
    uint64_t v11 = ~v9;
    uint64_t v35 = result;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v33 = (v12 + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      uint64_t v13 = v4 + 16;
      unint64_t v32 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      BOOL v16 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v17 = v35;
      do
      {
        uint64_t v18 = v8;
        uint64_t v19 = v15;
        int64_t v20 = v15 * v10;
        v32(v6, *(void *)(v17 + 48) + v15 * v10, v3);
        sub_10002E77C((unint64_t *)&qword_10035CFF0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v16)(v6, v3);
        unint64_t v22 = v21 & v11;
        if (a1 >= (uint64_t)v33)
        {
          if (v22 < v33 || a1 < (uint64_t)v22)
          {
LABEL_4:
            uint64_t v8 = v18;
            uint64_t v15 = v19;
            uint64_t v17 = v35;
            goto LABEL_5;
          }
        }
        else if (v22 < v33 && a1 < (uint64_t)v22)
        {
          goto LABEL_4;
        }
        uint64_t v17 = v35;
        int64_t v25 = v19 * a1;
        uint64_t v8 = v18;
        if (v19 * a1 < v20
          || (uint64_t v15 = v19, *(void *)(v35 + 48) + v19 * a1 >= (unint64_t)(*(void *)(v35 + 48) + v20 + v19)))
        {
          swift_arrayInitWithTakeFrontToBack();
          goto LABEL_21;
        }
        a1 = v10;
        if (v25 != v20)
        {
          swift_arrayInitWithTakeBackToFront();
LABEL_21:
          uint64_t v17 = v35;
          uint64_t v15 = v19;
          a1 = v10;
        }
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v31;
  }
  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v26 = *v1;
  uint64_t v27 = *(void *)(*v1 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 16) = v29;
    ++*(_DWORD *)(v26 + 36);
  }
  return result;
}

unint64_t sub_1000381B4(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10003837C()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 84, 7);
}

uint64_t sub_1000383DC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = sub_100039700(*a1, *(uint64_t (**)(uint64_t *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void **)(v2 + 64), *(void **)(v2 + 72), *(_DWORD *)(v2 + 80), (void (*)(uint64_t, uint64_t))&_swift_retain_n, &qword_10035D040, (void (*)(uint64_t))&_swift_release);

  return swift_retain();
}

uint64_t sub_100038468()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000384A0(uint64_t *a1)
{
  return sub_10002B420(a1);
}

uint64_t sub_1000384A8(uint64_t *a1)
{
  return sub_10002B698(a1, v1, (void (*)(uint64_t))sub_10002C3C4);
}

uint64_t sub_1000384D8(uint64_t *a1)
{
  return sub_10002B698(a1, v1, (void (*)(uint64_t))sub_10002B70C);
}

uint64_t sub_100038508(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1000301DC(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1000385A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, unsigned int a11)
{
  return sub_100038E3C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_1000385B4(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  return sub_100039944(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1000385C8(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, unsigned int a11)
{
  uint64_t v26 = a1;
  char v27 = a2;
  if (a3)
  {
    uint64_t v13 = a3(&v26);
    uint64_t v15 = v14;
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = a8;
    v17._object = a9;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    if (!a10)
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
      return a1;
    }
    id v18 = a10;
    NSString v19 = String._bridgeToObjectiveC()();
    [v18 ulog:a11 message:v19];
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain_n();
    sub_10000A38C(&qword_10035D070);
    uint64_t v20 = String.init<A>(describing:)();
    unint64_t v22 = v21;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = a8;
    v24._object = a9;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    if (!a10)
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
      swift_release();
      return a1;
    }
    id v18 = a10;
    NSString v19 = String._bridgeToObjectiveC()();
    [v18 ulog:a11 message:v19];
    swift_bridgeObjectRelease();
    swift_release();
  }

  return a1;
}

void *sub_100038800(void *a1, char a2, uint64_t (*a3)(void **), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, unsigned int a11)
{
  uint64_t v29 = a1;
  char v30 = a2;
  if (!a3)
  {
    sub_100038A38(a1, a2);
    sub_100038A38(a1, a2);
    sub_10000A38C(&qword_10035D058);
    uint64_t v21 = String.init<A>(describing:)();
    Swift::String v23 = v22;
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = a8;
    v25._object = a9;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    if (a10)
    {
      id v26 = a10;
      NSString v27 = String._bridgeToObjectiveC()();
      [v26 ulog:a11 message:v27];
    }
    else
    {
      NSLog(_:_:)();
    }
    sub_100038A4C(a1, a2);
    goto LABEL_9;
  }
  uint64_t v14 = a3(&v29);
  Swift::String v16 = v15;
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = a8;
  v18._object = a9;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  if (!a10)
  {
    NSLog(_:_:)();
LABEL_9:
    swift_bridgeObjectRelease();
    return a1;
  }
  id v19 = a10;
  NSString v20 = String._bridgeToObjectiveC()();
  [v19 ulog:a11 message:v20];
  swift_bridgeObjectRelease();

  return a1;
}

id sub_100038A38(id result, char a2)
{
  if (a2 != -1) {
    return result;
  }
  return result;
}

void sub_100038A4C(id a1, char a2)
{
  if (a2 != -1) {
}
  }

uint64_t sub_100038A60(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  uint64_t v22 = a1;
  char v23 = a2;
  if (a3) {
    uint64_t v13 = a3(&v22);
  }
  else {
    uint64_t v13 = String.init<A>(describing:)();
  }
  uint64_t v15 = v13;
  Swift::String v16 = v14;
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = a7;
  v18._object = a8;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  if (a9)
  {
    id v19 = a9;
    NSString v20 = String._bridgeToObjectiveC()();
    [v19 ulog:a10 message:v20];
    swift_bridgeObjectRelease();
  }
  else
  {
    NSLog(_:_:)();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_100038BC4(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, unsigned int a9)
{
  return sub_100039700(a1, a2, a3, a4, a5, a6, a7, a8, a9, (void (*)(uint64_t, uint64_t))&_swift_retain_n, &qword_10035D0D0, (void (*)(uint64_t))&_swift_release);
}

uint64_t sub_100038C1C(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  uint64_t v26 = a1;
  if (!a2)
  {
    swift_bridgeObjectRetain_n();
    sub_10000A38C(&qword_10035CAD0);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v22 = v21;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = a7;
    v24._object = a8;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    if (a9)
    {
      id v18 = a9;
      NSString v19 = String._bridgeToObjectiveC()();
      [v18 ulog:a10 message:v19];
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    NSLog(_:_:)();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    return a1;
  }
  uint64_t v13 = a2(&v26);
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  v16._uint64_t countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = a7;
  v17._object = a8;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  if (!a9)
  {
    NSLog(_:_:)();
    goto LABEL_9;
  }
  id v18 = a9;
  NSString v19 = String._bridgeToObjectiveC()();
  [v18 ulog:a10 message:v19];
LABEL_6:
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_100038E3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, unsigned int a11)
{
  v26[0] = a1;
  v26[1] = a2;
  if (!a3)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v22 = v21;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = a8;
    v24._object = a9;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    if (a10)
    {
      id v18 = a10;
      NSString v19 = String._bridgeToObjectiveC()();
      [v18 ulog:a11 message:v19];
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    NSLog(_:_:)();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    return a1;
  }
  uint64_t v13 = a3(v26);
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  v16._uint64_t countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = a8;
  v17._object = a9;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  if (!a10)
  {
    NSLog(_:_:)();
    goto LABEL_9;
  }
  id v18 = a10;
  NSString v19 = String._bridgeToObjectiveC()();
  [v18 ulog:a11 message:v19];
LABEL_6:
  swift_bridgeObjectRelease();

  return a1;
}

void *sub_10003905C(void *a1, uint64_t (*a2)(void **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  return sub_100039484(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &qword_10035D0D8);
}

uint64_t sub_100039098(uint64_t a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, unsigned int a9)
{
  char v22 = a1;
  if (a2) {
    uint64_t v13 = a2(&v22);
  }
  else {
    uint64_t v13 = String.init<A>(describing:)();
  }
  uint64_t v15 = v13;
  Swift::String v16 = v14;
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = a6;
  v18._object = a7;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  if (a8)
  {
    id v19 = a8;
    NSString v20 = String._bridgeToObjectiveC()();
    [v19 ulog:a9 message:v20];
    swift_bridgeObjectRelease();
  }
  else
  {
    NSLog(_:_:)();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_1000391E8@<X0>(void *a1@<X0>, uint64_t (*a2)(unsigned char *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X6>, void *a7@<X7>, uint64_t a8@<X8>, unsigned int a9)
{
  sub_10003A44C((uint64_t)a1, (uint64_t)v34);
  if (!a2)
  {
    sub_10003A44C((uint64_t)a1, (uint64_t)&v32);
    sub_10003A54C(a1, (void (*)(void, void, void, void, void, void))sub_10003A4A8);
    sub_10003A54C(a1, (void (*)(void, void, void, void, void, void))sub_10003A4A8);
    uint64_t v23 = String.init<A>(describing:)();
    Swift::String v25 = v24;
    uint64_t v32 = a3;
    uint64_t v33 = a4;
    swift_bridgeObjectRetain();
    v26._uint64_t countAndFlagsBits = v23;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v27._uint64_t countAndFlagsBits = a5;
    v27._object = a6;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    if (a7)
    {
      id v28 = a7;
      NSString v29 = String._bridgeToObjectiveC()();
      [v28 ulog:a9 message:v29];
    }
    else
    {
      NSLog(_:_:)();
    }
    sub_10003A54C(a1, (void (*)(void, void, void, void, void, void))sub_10003A58C);
    goto LABEL_9;
  }
  uint64_t v16 = a2(v34);
  Swift::String v18 = v17;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v20._uint64_t countAndFlagsBits = a5;
  v20._object = a6;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  if (!a7)
  {
    NSLog(_:_:)();
LABEL_9:
    swift_bridgeObjectRelease();
    return sub_10003A44C((uint64_t)a1, a8);
  }
  id v21 = a7;
  NSString v22 = String._bridgeToObjectiveC()();
  [v21 ulog:a9 message:v22];
  swift_bridgeObjectRelease();

  return sub_10003A44C((uint64_t)a1, a8);
}

void *sub_100039448(void *a1, uint64_t (*a2)(void **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  return sub_100039484(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &qword_10035D0E0);
}

void *sub_100039484(void *a1, uint64_t (*a2)(void **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10, uint64_t *a11)
{
  id v28 = a1;
  if (a2)
  {
    uint64_t v14 = a2(&v28);
    uint64_t v16 = v15;
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = v14;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = a7;
    v18._object = a8;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    if (!a9)
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
      return a1;
    }
    id v19 = a9;
    NSString v20 = String._bridgeToObjectiveC()();
    [v19 ulog:a10 message:v20];
    swift_bridgeObjectRelease();
  }
  else
  {
    id v21 = a1;
    sub_10000A38C(a11);
    uint64_t v22 = String.init<A>(describing:)();
    Swift::String v24 = v23;
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v26._uint64_t countAndFlagsBits = a7;
    v26._object = a8;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    if (!a9)
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();

      return a1;
    }
    id v19 = a9;
    NSString v20 = String._bridgeToObjectiveC()();
    [v19 ulog:a10 message:v20];
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_1000396A8(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, unsigned int a9)
{
  return sub_100039700(a1, a2, a3, a4, a5, a6, a7, a8, a9, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectRetain_n, (uint64_t *)&unk_10036C080, (void (*)(uint64_t))&_swift_unknownObjectRelease);
}

uint64_t sub_100039700(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, unsigned int a9, void (*a10)(uint64_t, uint64_t), uint64_t *a11, void (*a12)(uint64_t))
{
  uint64_t v29 = a1;
  if (a2)
  {
    uint64_t v16 = a2(&v29);
    Swift::String v18 = v17;
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = v16;
    v19._object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v20._uint64_t countAndFlagsBits = a6;
    v20._object = a7;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    if (!a8)
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
      return a1;
    }
    id v21 = a8;
    NSString v22 = String._bridgeToObjectiveC()();
    [v21 ulog:a9 message:v22];
    swift_bridgeObjectRelease();
  }
  else
  {
    a10(a1, 2);
    sub_10000A38C(a11);
    uint64_t v23 = String.init<A>(describing:)();
    Swift::String v25 = v24;
    swift_bridgeObjectRetain();
    v26._uint64_t countAndFlagsBits = v23;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v27._uint64_t countAndFlagsBits = a6;
    v27._object = a7;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    if (!a8)
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
      a12(a1);
      return a1;
    }
    id v21 = a8;
    NSString v22 = String._bridgeToObjectiveC()();
    [v21 ulog:a9 message:v22];
    swift_bridgeObjectRelease();
    a12(a1);
  }

  return a1;
}

uint64_t sub_100039944(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  uint64_t v26 = a1;
  if (a2)
  {
    uint64_t v13 = a2(&v26);
    uint64_t v15 = v14;
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = a7;
    v17._object = a8;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    if (!a9)
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
      return a1;
    }
    id v18 = a9;
    NSString v19 = String._bridgeToObjectiveC()();
    [v18 ulog:a10 message:v19];
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain_n();
    sub_10000A38C((uint64_t *)&unk_10036C080);
    uint64_t v20 = String.init<A>(describing:)();
    NSString v22 = v21;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = a7;
    v24._object = a8;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    if (!a9)
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return a1;
    }
    id v18 = a9;
    NSString v19 = String._bridgeToObjectiveC()();
    [v18 ulog:a10 message:v19];
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }

  return a1;
}

uint64_t sub_100039B6C(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, unsigned int a9)
{
  uint64_t v26 = a1;
  if (a2)
  {
    uint64_t v13 = a2(&v26);
    uint64_t v15 = v14;
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = a6;
    v17._object = a7;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    if (!a8)
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
      return a1;
    }
    id v18 = a8;
    NSString v19 = String._bridgeToObjectiveC()();
    [v18 ulog:a9 message:v19];
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for HandoffDevice();
    swift_retain_n();
    uint64_t v20 = String.init<A>(describing:)();
    NSString v22 = v21;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = a6;
    v24._object = a7;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    if (!a8)
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
      swift_release();
      return a1;
    }
    id v18 = a8;
    NSString v19 = String._bridgeToObjectiveC()();
    [v18 ulog:a9 message:v19];
    swift_bridgeObjectRelease();
    swift_release();
  }

  return a1;
}

void *sub_100039D94(void *a1, uint64_t (*a2)(void **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, unsigned int a9)
{
  return sub_100039E0C(a1, a2, a3, a4, a5, a6, a7, a8, a9, &qword_10035D088);
}

void *sub_100039DD0(void *a1, uint64_t (*a2)(void **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, unsigned int a9)
{
  return sub_100039E0C(a1, a2, a3, a4, a5, a6, a7, a8, a9, &qword_10035D090);
}

void *sub_100039E0C(void *a1, uint64_t (*a2)(void **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, unsigned int a9, unint64_t *a10)
{
  id v28 = a1;
  if (a2)
  {
    uint64_t v14 = a2(&v28);
    Swift::String v16 = v15;
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = v14;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = a6;
    v18._object = a7;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    if (!a8)
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
      return a1;
    }
    id v19 = a8;
    NSString v20 = String._bridgeToObjectiveC()();
    [v19 ulog:a9 message:v20];
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100019E10(0, a10);
    id v27 = a1;
    uint64_t v21 = String.init<A>(describing:)();
    Swift::String v23 = v22;
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = a6;
    v25._object = a7;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    if (!a8)
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();

      return a1;
    }
    id v19 = a8;
    NSString v20 = String._bridgeToObjectiveC()();
    [v19 ulog:a9 message:v20];
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_10003A038(char a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, unsigned int a9)
{
  char v22 = a1;
  if (a2) {
    uint64_t v13 = a2(&v22);
  }
  else {
    uint64_t v13 = String.init<A>(describing:)();
  }
  uint64_t v15 = v13;
  Swift::String v16 = v14;
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = a6;
  v18._object = a7;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  if (a8)
  {
    id v19 = a8;
    NSString v20 = String._bridgeToObjectiveC()();
    [v19 ulog:a9 message:v20];
    swift_bridgeObjectRelease();
  }
  else
  {
    NSLog(_:_:)();
    swift_bridgeObjectRelease();
  }
  return a1 & 1;
}

uint64_t sub_10003A18C(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, unsigned int a9)
{
  uint64_t v26 = a1;
  if (!a2)
  {
    swift_retain_n();
    sub_10000A38C(&qword_10035D078);
    uint64_t v20 = String.init<A>(describing:)();
    char v22 = v21;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = a6;
    v24._object = a7;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    if (a8)
    {
      id v18 = a8;
      NSString v19 = String._bridgeToObjectiveC()();
      [v18 ulog:a9 message:v19];
      swift_release();
      goto LABEL_6;
    }
    NSLog(_:_:)();
    swift_release();
LABEL_9:
    swift_bridgeObjectRelease();
    return a1;
  }
  uint64_t v13 = a2(&v26);
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  v16._uint64_t countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = a6;
  v17._object = a7;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  if (!a8)
  {
    NSLog(_:_:)();
    goto LABEL_9;
  }
  id v18 = a8;
  NSString v19 = String._bridgeToObjectiveC()();
  [v18 ulog:a9 message:v19];
LABEL_6:
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_10003A3A4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10003A3F8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10003A44C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10003A4A8(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >> 62 != 1)
  {
    if (a4 >> 62) {
      return result;
    }
    sub_10003A508(result, a2, a3, a4 & 1);
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_10003A508(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    sub_10001F9D4(a1, a2);
  }

  return swift_bridgeObjectRetain();
}

void *sub_10003A54C(void *a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_10003A58C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >> 62 != 1)
  {
    if (a4 >> 62) {
      return result;
    }
    sub_10003A5EC(result, a2, a3, a4 & 1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10003A5EC(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    sub_100020414(a1, a2);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10003A630(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 != 3) {
    return sub_10003A3A4(a1, a2, a3);
  }
  return a1;
}

void *sub_10003A640(void *a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_10003A680(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 != 3) {
    return sub_10003A3F8(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_10003A698()
{
  uint64_t v1 = sub_10000A38C(&qword_10035D118);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  uint64_t v5 = (v3 + 32) & ~v3;
  unint64_t v6 = (((((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, (v6 + 11) & 0xFFFFFFFFFFFFFFF8 | 4, v3 | 7);
}

uint64_t sub_10003A7BC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_10000A38C(&qword_10035D118) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  *a2 = sub_100038E3C(*a1, a1[1], *(uint64_t (**)(void *))(v2 + 16), *(void *)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void *)(v2 + v8), *(void **)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));
  a2[1] = v9;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10003A8B8(uint64_t *a1)
{
  return sub_10002C24C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_10003A8C0()
{
  unint64_t result = qword_10035AC60;
  if (!qword_10035AC60)
  {
    sub_100019E10(255, (unint64_t *)&qword_10035A680);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035AC60);
  }
  return result;
}

uint64_t sub_10003A92C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003A96C(uint64_t a1)
{
  return sub_10002C32C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10003A974()
{
  return swift_release();
}

uint64_t sub_10003A984()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold18DebugHandoffDevice_timer);
  if (*(unsigned char *)(v1 + 40) == 1)
  {
    *(unsigned char *)(v1 + 40) = 0;
    swift_retain();
    sub_100168244();
    swift_getObjectType();
    OS_dispatch_source.suspend()();
    swift_release();
    swift_unknownObjectRelease();
  }
  sub_10003B828();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10003AA4C()
{
  return type metadata accessor for DebugHandoffDevice();
}

uint64_t type metadata accessor for DebugHandoffDevice()
{
  uint64_t result = qword_10035D1A8;
  if (!qword_10035D1A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10003AAA0()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_10003AAE8()
{
  id v1 = *v0;
  if ([*v0 isLocallyPaired]) {
    return 0;
  }
  id v2 = [v1 uniqueID];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_10003AB68()
{
  id v1 = [*v0 uniqueIDOverride];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10003ABD0@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 nsuuid];
  if (v3)
  {
    uint64_t v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for UUID();
    unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for UUID();
    unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

uint64_t sub_10003AC98(uint64_t a1)
{
  return sub_10003ACA4(a1, (uint64_t)&off_100320750);
}

uint64_t sub_10003ACA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10036C090);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = &v33[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000A38C(&qword_10035D8E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028FDD0;
  *(void *)(inited + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  *(void *)(inited + 40) = v8;
  *(void *)(inited + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  *(void *)(inited + 56) = v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    sub_10000D78C((uint64_t)v6, &qword_10036C090);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v12 = UUID.uuidString.getter();
    uint64_t v13 = v14;
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v6, v10);
  }
  *(void *)(inited + 64) = v12;
  *(void *)(inited + 72) = v13;
  uint64_t v15 = *(void *)(inited + 40);
  if (!v15)
  {
    Swift::String v17 = (char *)_swiftEmptyArrayStorage;
    uint64_t v21 = *(void *)(inited + 56);
    if (!v21) {
      goto LABEL_15;
    }
    goto LABEL_10;
  }
  uint64_t v16 = *(void *)(inited + 32);
  swift_bridgeObjectRetain();
  Swift::String v17 = sub_10008892C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v19 = *((void *)v17 + 2);
  unint64_t v18 = *((void *)v17 + 3);
  if (v19 >= v18 >> 1) {
    Swift::String v17 = sub_10008892C((char *)(v18 > 1), v19 + 1, 1, v17);
  }
  *((void *)v17 + 2) = v19 + 1;
  uint64_t v20 = &v17[16 * v19];
  *((void *)v20 + 4) = v16;
  *((void *)v20 + 5) = v15;
  uint64_t v21 = *(void *)(inited + 56);
  if (v21)
  {
LABEL_10:
    uint64_t v22 = *(void *)(inited + 48);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v17 = sub_10008892C(0, *((void *)v17 + 2) + 1, 1, v17);
    }
    unint64_t v24 = *((void *)v17 + 2);
    unint64_t v23 = *((void *)v17 + 3);
    if (v24 >= v23 >> 1) {
      Swift::String v17 = sub_10008892C((char *)(v23 > 1), v24 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v24 + 1;
    Swift::String v25 = &v17[16 * v24];
    *((void *)v25 + 4) = v22;
    *((void *)v25 + 5) = v21;
  }
LABEL_15:
  uint64_t v26 = *(void *)(inited + 72);
  if (v26)
  {
    uint64_t v27 = *(void *)(inited + 64);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v17 = sub_10008892C(0, *((void *)v17 + 2) + 1, 1, v17);
    }
    unint64_t v29 = *((void *)v17 + 2);
    unint64_t v28 = *((void *)v17 + 3);
    if (v29 >= v28 >> 1) {
      Swift::String v17 = sub_10008892C((char *)(v28 > 1), v29 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v29 + 1;
    char v30 = &v17[16 * v29];
    *((void *)v30 + 4) = v27;
    *((void *)v30 + 5) = v26;
  }
  swift_bridgeObjectRelease();
  uint64_t v31 = sub_100038508((uint64_t)v17);
  swift_bridgeObjectRelease();
  return v31;
}

BOOL sub_10003AFEC(BOOL a1, uint64_t a2)
{
  return sub_10003AFF8(a1, a2, (uint64_t)&off_100320750);
}

BOOL sub_10003AFF8(BOOL a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = a1;
  if (a1)
  {
    v22[3] = a2;
    v22[4] = a3;
    unint64_t v6 = sub_10000D680(v22);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v6, v3, a2);
    sub_10000D728((uint64_t)v22, (uint64_t)&v17, &qword_10035B618);
    if (v18)
    {
      sub_10000D7E8(&v17, (uint64_t)v19);
      uint64_t v7 = v20;
      uint64_t v8 = v21;
      sub_10000D6E4(v19, v20);
      uint64_t v9 = *(void *)(v8 + 8);
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
      id v11 = (id)v4;
      uint64_t v12 = v10(v7, v9);
      uint64_t v13 = sub_1001A7C6C();
      uint64_t v14 = sub_1001C8154(v13, v12);
      swift_bridgeObjectRelease();
      uint64_t v15 = *(void *)(v14 + 16);
      swift_release();
      BOOL v4 = v15 != 0;
      sub_10000CC5C((uint64_t)v19);
    }
    else
    {
      sub_10000D78C((uint64_t)&v17, &qword_10035B618);
      BOOL v4 = 0;
    }
    sub_10000D78C((uint64_t)v22, &qword_10035B618);
  }
  return v4;
}

BOOL sub_10003B150(uint64_t a1, uint64_t a2)
{
  return sub_10003B15C(a1, a2, (uint64_t)&off_100320750);
}

BOOL sub_10003B15C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000D728(a1, (uint64_t)&v13, (uint64_t *)&unk_10036C0A0);
  if (v14)
  {
    sub_10000D7E8(&v13, (uint64_t)v15);
    uint64_t v6 = v16;
    uint64_t v5 = v17;
    sub_10000D6E4(v15, v16);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v6);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 8))(a2);
    uint64_t v9 = sub_1001C8154(v8, v7);
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void *)(v9 + 16);
    swift_release();
    BOOL v11 = v10 != 0;
    sub_10000CC5C((uint64_t)v15);
  }
  else
  {
    sub_10000D78C((uint64_t)&v13, (uint64_t *)&unk_10036C0A0);
    return 0;
  }
  return v11;
}

uint64_t sub_10003B264(uint64_t a1, uint64_t a2)
{
  return sub_10003B270(a1, a2, (uint64_t)&off_100320750);
}

uint64_t sub_10003B270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000A38C(&qword_10036C090);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  BOOL v11 = (char *)&v46 - v10;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v46 - v17;
  sub_10000D728(a1, (uint64_t)&v52, &qword_10035B618);
  if (v53)
  {
    uint64_t v48 = v16;
    int64_t v49 = v18;
    int64_t v50 = v9;
    uint64_t v51 = v13;
    sub_10000D7E8(&v52, (uint64_t)v54);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
    if (v20)
    {
      uint64_t v21 = v19;
      uint64_t v22 = v20;
      uint64_t v24 = v55;
      uint64_t v23 = v56;
      sub_10000D6E4(v54, v55);
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v24, v23);
      if (v26)
      {
        if (v21 == v25 && v22 == v26) {
          goto LABEL_14;
        }
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v27) {
          goto LABEL_15;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    if (v29)
    {
      uint64_t v30 = v28;
      uint64_t v31 = v29;
      uint64_t v32 = v55;
      uint64_t v33 = v56;
      sub_10000D6E4(v54, v55);
      uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 24))(v32, v33);
      if (v35)
      {
        if (v30 == v34 && v31 == v35)
        {
LABEL_14:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_15:
          sub_10000CC5C((uint64_t)v54);
          return 1;
        }
        char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v37) {
          goto LABEL_15;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
    uint64_t v38 = v51;
    unint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
    if (v39(v11, 1, v12) != 1)
    {
      uint64_t v40 = v49;
      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
      v47(v49, v11, v12);
      uint64_t v41 = v55;
      uint64_t v42 = v56;
      sub_10000D6E4(v54, v55);
      BOOL v11 = v50;
      (*(void (**)(uint64_t, uint64_t))(v42 + 32))(v41, v42);
      if (v39(v11, 1, v12) != 1)
      {
        char v43 = v48;
        v47(v48, v11, v12);
        char v44 = static UUID.== infix(_:_:)();
        int64_t v45 = *(void (**)(char *, uint64_t))(v38 + 8);
        v45(v43, v12);
        v45(v40, v12);
        if (v44) {
          goto LABEL_15;
        }
        goto LABEL_22;
      }
      (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v12);
    }
    sub_10000D78C((uint64_t)v11, &qword_10036C090);
LABEL_22:
    sub_10000CC5C((uint64_t)v54);
    return 0;
  }
  sub_10000D78C((uint64_t)&v52, &qword_10035B618);
  return 0;
}

BOOL sub_10003B6EC(BOOL a1, uint64_t a2)
{
  return sub_10003B6F8(a1, a2, (uint64_t)&off_100320750);
}

BOOL sub_10003B6F8(BOOL result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = sub_10024DF10();
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 8))(a2);
    uint64_t v7 = sub_1001C8154(v6, v5);
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void *)(v7 + 16);
    swift_release();
    return v8 != 0;
  }
  return result;
}

BOOL sub_10003B78C(uint64_t a1, uint64_t a2)
{
  return sub_10003B798(a1, a2, (uint64_t)&off_100320750);
}

BOOL sub_10003B798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1000D215C();
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 8))(a2);
  uint64_t v7 = sub_1001C8154(v6, v5);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v7 + 16);
  swift_release();
  return v8 != 0;
}

uint64_t sub_10003B828()
{
  sub_10000BEE0();
  id v1 = objc_allocWithZone((Class)CULogHandle);
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v1 initWithSubsystem:v2 category:v3];

  NSString v5 = String._bridgeToObjectiveC()();
  [v4 ulog:40 message:v5];

  sub_10004063C();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__identity;
  uint64_t v9 = sub_10000A38C(&qword_10035D120);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_100024144(v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_legacyDelegate);
  swift_release();
  uint64_t v10 = v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__legacyEvent;
  uint64_t v11 = sub_10000A38C(&qword_10035E110);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_release();
  swift_release();
  sub_100024144(v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_proximityDelegate);
  swift_weakDestroy();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100024144(v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_discoveryTokenSyncDelegate);
  swift_release();
  swift_release();
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_lastTokenSyncAttempt, &qword_10035E158);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  return v0;
}

unint64_t sub_10003BBFC()
{
  swift_retain();
  CurrentValueSubject.value.getter();
  if (v5)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    uint64_t v0 = v6;
    unsigned __int8 v1 = v7;
  }
  else
  {
    uint64_t v0 = v3;
    swift_release();
    unsigned __int8 v1 = v4 & 1;
  }
  return v0 | ((unint64_t)v1 << 32);
}

uint64_t sub_10003BC88()
{
  if (*(void *)(v0 + 32))
  {
    uint64_t v1 = *(void *)(v0 + 32);
  }
  else
  {
    uint64_t v2 = v0;
    sub_10000A38C(&qword_10035E118);
    sub_10000B010(&qword_10035E488, &qword_10035E118);
    uint64_t v1 = Publisher.eraseToAnyPublisher()();
    *(void *)(v2 + 32) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_10003BD3C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10003BDB0()
{
  uint64_t v1 = sub_10000A38C(&qword_10035E440);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  char v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10035E448);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v34 - v11;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___regionPublisher))
  {
    uint64_t v13 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___regionPublisher);
  }
  else
  {
    uint64_t v39 = v1;
    uint64_t v40 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___regionPublisher;
    uint64_t v41 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__region);
    uint64_t v35 = v10;
    sub_10000A38C(&qword_10035E120);
    sub_10000B010(&qword_10035E450, &qword_10035E120);
    sub_1000460B4(&qword_10035E458, &qword_10035AC68, (void (*)(void))sub_10004612C);
    Publisher<>.removeDuplicates()();
    swift_retain();
    uint64_t v38 = v0;
    sub_10000BEE0();
    id v14 = objc_allocWithZone((Class)CULogHandle);
    NSString v15 = String._bridgeToObjectiveC()();
    uint64_t v37 = v2;
    uint64_t v16 = v15;
    NSString v17 = String._bridgeToObjectiveC()();
    int64_t v36 = v4;
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    id v34 = [v14 initWithSubsystem:v16 category:v18];
    swift_release();

    uint64_t v19 = v35;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v12, v35);
    unint64_t v20 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    unint64_t v21 = (v7 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = sub_100008EC8;
    *(void *)(v24 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v24 + v20, v9, v19);
    unint64_t v25 = v24 + v21;
    strcpy((char *)(v24 + v21), "New Region: ");
    *(unsigned char *)(v25 + 13) = 0;
    *(_WORD *)(v25 + 14) = -5120;
    uint64_t v26 = (void *)(v24 + v22);
    *uint64_t v26 = 0;
    v26[1] = 0xE000000000000000;
    char v27 = v34;
    *(void *)(v24 + v23) = v34;
    *(_DWORD *)(v24 + ((v23 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
    id v28 = v27;
    sub_10000A38C(&qword_10035AC68);
    sub_10000B010(&qword_10035E468, &qword_10035E448);
    uint64_t v29 = v36;
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035E470, &qword_10035E440);
    uint64_t v30 = v39;
    uint64_t v31 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v30);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v19);
    uint64_t v41 = v31;
    sub_10000A38C(&qword_10035AC48);
    sub_10000B010(&qword_10035AC50, &qword_10035AC48);
    uint64_t v32 = Publisher.share()();
    swift_release();
    uint64_t v41 = v32;
    sub_10000A38C(&qword_10035E478);
    sub_10000B010(&qword_10035E480, &qword_10035E478);
    uint64_t v13 = Publisher.eraseToAnyPublisher()();
    swift_release();
    *(void *)(v38 + v40) = v13;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v13;
}

uint64_t sub_10003C30C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035E430);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___activityDisplayContextPublisher;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___activityDisplayContextPublisher))
  {
    uint64_t v7 = *(void *)(v0
                   + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___activityDisplayContextPublisher);
  }
  else
  {
    v9[1] = sub_10003D0E8();
    swift_allocObject();
    swift_weakInit();
    sub_10000A38C(&qword_10035E410);
    type metadata accessor for ActivityDisplayContext(0);
    sub_10000B010((unint64_t *)&unk_100367EA0, &qword_10035E410);
    Publisher.compactMap<A>(_:)();
    swift_release();
    swift_release();
    sub_10000B010(&qword_10035E438, &qword_10035E430);
    uint64_t v7 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_10003C514@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_10000A38C(&qword_10036C090);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v32 - v6;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v14 = (char *)&v32 - v13;
  sub_10003D87C((uint64_t)v7);
  NSString v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v15(v7, 1, v8) == 1)
  {
    uint64_t v5 = v7;
  }
  else
  {
    uint64_t v32 = a1;
    uint64_t v16 = v7;
    NSString v17 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v17(v14, v16, v8);
    sub_10003D6E8((uint64_t)v5);
    if (v15(v5, 1, v8) != 1)
    {
      v17(v12, v5, v8);
      uint64_t v29 = sub_10000A38C(&qword_10035E428);
      uint64_t v30 = v32;
      uint64_t v31 = (char *)v32 + *(int *)(v29 + 48);
      v17((char *)v32, v14, v8);
      v17(v31, v12, v8);
      uint64_t v24 = _s8CardInfoOMa();
      swift_storeEnumTagMultiPayload();
      unint64_t v25 = *(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
      uint64_t v26 = v30;
      return v25(v26, 0, 1, v24);
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    a1 = v32;
  }
  sub_10000D78C((uint64_t)v5, &qword_10036C090);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v18 = sub_100098724();
  uint64_t v20 = v19;
  swift_release();
  if (!v20)
  {
    uint64_t v27 = _s8CardInfoOMa();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(a1, 1, 1, v27);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v21 = sub_100098144();
  uint64_t v23 = v22;
  swift_release();
  *a1 = v18;
  a1[1] = v20;
  a1[2] = v21;
  a1[3] = v23;
  uint64_t v24 = _s8CardInfoOMa();
  swift_storeEnumTagMultiPayload();
  unint64_t v25 = *(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
  uint64_t v26 = a1;
  return v25(v26, 0, 1, v24);
}

uint64_t *sub_10003C908()
{
  uint64_t v1 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___educationFlowPolicy;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___educationFlowPolicy))
  {
    uint64_t v2 = *(uint64_t **)(v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___educationFlowPolicy);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for HandoffEducationFlowPolicy();
    swift_allocObject();
    swift_retain();
    uint64_t v2 = sub_1001E12D0();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_10003C98C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (v4)
  {
    unsigned __int8 v0 = [v4 nearbyActionFlags];

    if ((v0 & 0x10) != 0) {
      return 1;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)&v4[OBJC_IVAR____TtC17proximitycontrold8Identity_nearbyID];
  swift_release();
  if (v1) {
    return 1;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v2 = v4[OBJC_IVAR____TtC17proximitycontrold8Identity_enableModelBasedRangingCapabilities];
  swift_release();
  return v2;
}

double sub_10003CB38@<D0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_10003CBBC()
{
  uint64_t v1 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___mediaRemoteDisplayContextPublisher;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___mediaRemoteDisplayContextPublisher))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___mediaRemoteDisplayContextPublisher);
  }
  else
  {
    uint64_t v3 = v0;
    swift_retain();
    sub_100104E08();
    sub_10000A38C(&qword_10035E248);
    sub_10000B010(&qword_10035E250, &qword_10035E248);
    Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    sub_10000A38C(&qword_10035E208);
    sub_10000B010(&qword_10035E210, &qword_10035E208);
    uint64_t v2 = Publisher.eraseToAnyPublisher()();
    swift_release();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_10003CD08()
{
  uint64_t v1 = v0;
  LODWORD(v0) = *(unsigned __int8 *)(v0 + 16);
  if (v0 != 7) {
    goto LABEL_9;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v0 = sub_1000983CC();
  uint64_t v3 = v2;
  swift_release();
  if (v3)
  {
    LOBYTE(v0) = sub_1001AC344(v0, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v0) = 7;
  }
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_isMock) & 1) == 0) {
    *(unsigned char *)(v1 + 16) = v0;
  }
  if (v0 == 7)
  {
    char v4 = 0;
  }
  else
  {
LABEL_9:
    if (v0 >= 3u) {
      char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    else {
      char v4 = 1;
    }
    swift_bridgeObjectRelease();
  }
  return v4 & 1;
}

uint64_t sub_10003CE48()
{
  uint64_t v1 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___transferPublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___transferPublisher))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___transferPublisher);
  }
  else
  {
    uint64_t v3 = v0;
    swift_retain();
    sub_100104C18();
    sub_10000A38C(&qword_10035E418);
    sub_10000B010(&qword_10035E420, &qword_10035E418);
    uint64_t v2 = Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

char *sub_10003CF3C()
{
  uint64_t v1 = sub_1000783A4(v0, (uint64_t)&off_10031D750);
  if (v2 == 1)
  {
    unint64_t v3 = 0xE300000000000000;
    uint64_t v4 = 7104878;
  }
  else
  {
    swift_retain();
    char v5 = v1;
    uint64_t v4 = String.init<A>(describing:)();
    unint64_t v3 = v6;
  }
  unint64_t v7 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  sub_10000BEE0();
  id v8 = objc_allocWithZone((Class)CULogHandle);
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v8 initWithSubsystem:v9 category:v10];

  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:40 message:v12];
  swift_bridgeObjectRelease();

  return v1;
}

uint64_t sub_10003D0E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035E3D0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10035E3D8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  NSString v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10035E3E0);
  uint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  NSString v17 = (char *)&v38 - v16;
  if (*(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___activityPublisher))
  {
    uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___activityPublisher);
  }
  else
  {
    uint64_t v46 = v2;
    uint64_t v47 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___activityPublisher;
    uint64_t v39 = v15;
    uint64_t v40 = v14;
    uint64_t v49 = sub_1001F985C();
    swift_allocObject();
    uint64_t v44 = v3;
    swift_weakInit();
    sub_10000A38C(&qword_10035E3E8);
    char v43 = v5;
    uint64_t v19 = sub_10000A38C((uint64_t *)&unk_10036C080);
    uint64_t v48 = v1;
    uint64_t v42 = v19;
    int64_t v45 = &protocol conformance descriptor for AnyPublisher<A, B>;
    sub_10000B010(&qword_10035E3F0, &qword_10035E3E8);
    Publisher.map<A>(_:)();
    swift_release();
    swift_release();
    uint64_t v41 = &protocol conformance descriptor for Publishers.Map<A, B>;
    sub_10000B010(&qword_10035E3F8, &qword_10035E3D8);
    Publisher.removeDuplicates(by:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_retain();
    sub_10000BEE0();
    id v20 = objc_allocWithZone((Class)CULogHandle);
    NSString v21 = String._bridgeToObjectiveC()();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v38 = [v20 initWithSubsystem:v21 category:v22];
    swift_release();

    uint64_t v23 = v17;
    uint64_t v25 = v39;
    uint64_t v24 = v40;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v13, v23, v40);
    unint64_t v26 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    unint64_t v27 = (v11 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v28 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v29 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = sub_100041780;
    *(void *)(v30 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v25 + 32))(v30 + v26, v13, v24);
    strcpy((char *)(v30 + v27), "New activity: ");
    *(unsigned char *)(v30 + v27 + 15) = -18;
    uint64_t v31 = (void *)(v30 + v28);
    *uint64_t v31 = 0;
    v31[1] = 0xE000000000000000;
    uint64_t v32 = v38;
    *(void *)(v30 + v29) = v38;
    *(_DWORD *)(v30 + ((v29 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
    sub_10000B010(&qword_10035E400, &qword_10035E3E0);
    id v33 = v32;
    id v34 = v43;
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035E408, &qword_10035E3D0);
    uint64_t v35 = v46;
    uint64_t v36 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v34, v35);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v24);
    uint64_t v49 = v36;
    sub_10000A38C(&qword_10035E410);
    sub_10000B010((unint64_t *)&unk_100367EA0, &qword_10035E410);
    uint64_t v18 = Publisher.eraseToAnyPublisher()();
    swift_release();
    *(void *)(v48 + v47) = v18;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v18;
}

uint64_t sub_10003D6E8@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (v7 && (id v2 = [v7 home], v7, v2))
  {
    id v3 = [v2 uniqueIdentifier];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a1, 0, 1, v4);
  }
  else
  {
    uint64_t v6 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 1, 1, v6);
  }
}

uint64_t sub_10003D87C@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (v6)
  {
    id v2 = [v6 uniqueIdentifier];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v3 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a1, 0, 1, v3);
  }
  else
  {
    uint64_t v5 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
}

uint64_t sub_10003D9EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035E3D0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10035E3D8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  NSString v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10035E3E0);
  uint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  NSString v17 = (char *)&v39 - v16;
  if (*(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___localActivityPublisher))
  {
    uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___localActivityPublisher);
  }
  else
  {
    uint64_t v47 = v2;
    uint64_t v48 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___localActivityPublisher;
    uint64_t v40 = v15;
    uint64_t v41 = v14;
    uint64_t v50 = sub_1001F985C();
    swift_allocObject();
    uint64_t v45 = v3;
    swift_weakInit();
    sub_10000A38C(&qword_10035E3E8);
    uint64_t v44 = v5;
    uint64_t v19 = sub_10000A38C((uint64_t *)&unk_10036C080);
    uint64_t v49 = v1;
    uint64_t v43 = v19;
    uint64_t v46 = &protocol conformance descriptor for AnyPublisher<A, B>;
    sub_10000B010(&qword_10035E3F0, &qword_10035E3E8);
    Publisher.map<A>(_:)();
    swift_release();
    swift_release();
    uint64_t v42 = &protocol conformance descriptor for Publishers.Map<A, B>;
    sub_10000B010(&qword_10035E3F8, &qword_10035E3D8);
    Publisher.removeDuplicates(by:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_retain();
    sub_10000BEE0();
    id v20 = objc_allocWithZone((Class)CULogHandle);
    NSString v21 = String._bridgeToObjectiveC()();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v39 = [v20 initWithSubsystem:v21 category:v22];
    swift_release();

    uint64_t v23 = v17;
    uint64_t v25 = v40;
    uint64_t v24 = v41;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v13, v23, v41);
    unint64_t v26 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    unint64_t v27 = (v11 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v28 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v29 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = sub_100041780;
    *(void *)(v30 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v25 + 32))(v30 + v26, v13, v24);
    uint64_t v31 = (void *)(v30 + v27);
    *uint64_t v31 = 0xD000000000000014;
    v31[1] = 0x80000001002B4150;
    uint64_t v32 = (void *)(v30 + v28);
    *uint64_t v32 = 0;
    v32[1] = 0xE000000000000000;
    id v33 = v39;
    *(void *)(v30 + v29) = v39;
    *(_DWORD *)(v30 + ((v29 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
    sub_10000B010(&qword_10035E400, &qword_10035E3E0);
    id v34 = v33;
    uint64_t v35 = v44;
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035E408, &qword_10035E3D0);
    uint64_t v36 = v47;
    uint64_t v37 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v36);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v24);
    uint64_t v50 = v37;
    sub_10000A38C(&qword_10035E410);
    sub_10000B010((unint64_t *)&unk_100367EA0, &qword_10035E410);
    uint64_t v18 = Publisher.eraseToAnyPublisher()();
    swift_release();
    *(void *)(v49 + v48) = v18;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v18;
}

uint64_t sub_10003DFE8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v0 = (uint64_t)v3;
  if (v3)
  {
    id v1 = [v3 firmwareVersion];

    if (v1)
    {
      uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v0;
}

uint64_t sub_10003E0FC()
{
  uint64_t v1 = v0;
  LODWORD(v0) = *(unsigned __int8 *)(v0 + 16);
  if (v0 != 7) {
    return 0x1010101010001uLL >> (8 * v0);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v0 = sub_1000983CC();
  uint64_t v3 = v2;
  swift_release();
  if (v3)
  {
    LOBYTE(v0) = sub_1001AC344(v0, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v0) = 7;
  }
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_isMock) & 1) == 0) {
    *(unsigned char *)(v1 + 16) = v0;
  }
  if (v0 == 7) {
    return 1;
  }
  else {
    return 0x1010101010001uLL >> (8 * v0);
  }
}

uint64_t sub_10003E1FC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (!v34) {
    return 0;
  }
  id v1 = [v34 sourceVersion];
  if (!v1)
  {

    return 0;
  }
  uint64_t v2 = v1;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100016790();
  uint64_t v3 = (void *)StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
  swift_bridgeObjectRelease();
  unint64_t v4 = v3[2];
  if (!v4)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    goto LABEL_24;
  }
  uint64_t v5 = v3[4];
  uint64_t v6 = v3[5];
  if ((v6 ^ (unint64_t)v5) < 0x4000)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v8 = v3[6];
  unint64_t v7 = v3[7];
  uint64_t result = sub_100044D60(v3[4], v3[5], v8, v7, 10);
  if ((v10 & 0x100) == 0)
  {
    if ((v10 & 1) == 0)
    {
      uint64_t v0 = result;
      goto LABEL_12;
    }
LABEL_48:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v0 = (uint64_t)sub_1000449F0(v5, v6, v8, v7, 10);
  char v14 = v13;
  uint64_t result = swift_bridgeObjectRelease();
  if (v14) {
    goto LABEL_48;
  }
LABEL_12:
  uint64_t v12 = 10000 * v0;
  if ((unsigned __int128)(v0 * (__int128)10000) >> 64 != (10000 * v0) >> 63)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:

    swift_bridgeObjectRelease();
    uint64_t result = v0 + 99;
    if (!__OFADD__(v0, 99)) {
      return result;
    }
    goto LABEL_45;
  }
  if (v4 < 2)
  {
    uint64_t v11 = 0;
    goto LABEL_24;
  }
  if (v3[2] < 2uLL)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v15 = v3[8];
  uint64_t v16 = v3[9];
  if ((v16 ^ (unint64_t)v15) < 0x4000) {
    goto LABEL_22;
  }
  unint64_t v18 = v3[10];
  unint64_t v17 = v3[11];
  uint64_t result = sub_100044D60(v3[8], v3[9], v18, v17, 10);
  if ((v19 & 0x100) == 0)
  {
    uint64_t v20 = result;
    if (v19) {
      goto LABEL_22;
    }
LABEL_21:
    if (v20 > 99) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = (uint64_t)sub_1000449F0(v15, v16, v18, v17, 10);
  char v22 = v21;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v22 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_22:
  uint64_t v20 = 99;
LABEL_23:
  uint64_t v11 = 100 * v20;
  if ((unsigned __int128)(v20 * (__int128)100) >> 64 != (100 * v20) >> 63)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
LABEL_24:
  uint64_t v0 = v12 + v11;
  if (__OFADD__(v12, v11))
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v4 < 3)
  {
    swift_bridgeObjectRelease();

    return v0;
  }
  if (v3[2] < 3uLL) {
    goto LABEL_42;
  }
  unint64_t v23 = v3[12];
  unint64_t v24 = v3[13];
  unint64_t v26 = v3[14];
  unint64_t v25 = v3[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!((v24 ^ v23) >> 14)) {
    goto LABEL_43;
  }
  uint64_t v27 = sub_100044D60(v23, v24, v26, v25, 10);
  if ((v28 & 0x100) != 0) {
    uint64_t v27 = (uint64_t)sub_1000449F0(v23, v24, v26, v25, 10);
  }
  uint64_t v29 = v27;
  char v30 = v28;

  swift_bridgeObjectRelease();
  int v31 = v30 & 1;
  if (v29 < 100) {
    int v31 = 1;
  }
  BOOL v32 = v31 == 0;
  uint64_t v33 = 99;
  if (v32) {
    uint64_t v33 = v29;
  }
  uint64_t result = v0 + v33;
  if (__OFADD__(v0, v33))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  return result;
}

uint64_t sub_10003E5A8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = v1;
  if (!v1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    return 0;
  }
  return result;
}

unint64_t sub_10003E708()
{
  swift_retain();
  CurrentValueSubject.value.getter();
  char v0 = v2;
  if (v2 == 6)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    char v0 = v3;
  }
  else
  {
    swift_release();
  }
  return 0x40302010000uLL >> (8 * v0);
}

uint64_t sub_10003E78C()
{
  uint64_t v1 = sub_10000A38C(&qword_10035E370);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v46 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10035E378);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10035E380);
  uint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v36 - v14;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___uxRegionPublisher))
  {
    uint64_t v16 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___uxRegionPublisher);
  }
  else
  {
    uint64_t v44 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___uxRegionPublisher;
    uint64_t v45 = v0;
    uint64_t v37 = v12;
    uint64_t v38 = v13;
    uint64_t v17 = sub_10003BDB0();
    uint64_t v42 = v1;
    uint64_t v47 = v17;
    sub_10000A38C(&qword_10035AC48);
    uint64_t v41 = v2;
    uint64_t v39 = sub_10000A38C(&qword_10035D0F0);
    uint64_t v43 = &protocol conformance descriptor for AnyPublisher<A, B>;
    sub_10000B010(&qword_10035AC50, &qword_10035AC48);
    Publisher.map<A>(_:)();
    swift_release();
    uint64_t v40 = &protocol conformance descriptor for Publishers.Map<A, B>;
    sub_10000B010(&qword_10035E388, &qword_10035E378);
    sub_1000460B4(&qword_10035E390, &qword_10035D0F0, (void (*)(void))sub_100045ED8);
    Publisher<>.removeDuplicates()();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_retain();
    sub_10000BEE0();
    id v18 = objc_allocWithZone((Class)CULogHandle);
    NSString v19 = String._bridgeToObjectiveC()();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v36 = [v18 initWithSubsystem:v19 category:v20];
    swift_release();

    uint64_t v22 = v37;
    uint64_t v21 = v38;
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v11, v15, v38);
    unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    unint64_t v24 = (v9 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v26 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = 0;
    *(void *)(v27 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v27 + v23, v11, v21);
    strcpy((char *)(v27 + v24), "New UXRegion: ");
    *(unsigned char *)(v27 + v24 + 15) = -18;
    __int16 v28 = (void *)(v27 + v25);
    *__int16 v28 = 0;
    v28[1] = 0xE000000000000000;
    uint64_t v29 = v36;
    *(void *)(v27 + v26) = v36;
    *(_DWORD *)(v27 + ((v26 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
    sub_10000B010(&qword_10035E3A0, &qword_10035E380);
    id v30 = v29;
    int v31 = v46;
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035E3A8, &qword_10035E370);
    uint64_t v32 = v42;
    uint64_t v33 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v32);

    (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v21);
    uint64_t v47 = v33;
    sub_10000A38C(&qword_10035E3B0);
    sub_10000B010(&qword_10035E3B8, &qword_10035E3B0);
    uint64_t v34 = Publisher.share()();
    swift_release();
    uint64_t v47 = v34;
    sub_10000A38C(&qword_10035E3C0);
    sub_10000B010(&qword_10035E3C8, &qword_10035E3C0);
    uint64_t v16 = Publisher.eraseToAnyPublisher()();
    swift_release();
    *(void *)(v45 + v44) = v16;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v16;
}

uint64_t sub_10003EDB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035E168);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v132 = v2;
  uint64_t v133 = v3;
  __chkstk_darwin(v2);
  uint64_t v129 = (char *)v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10035E170);
  uint64_t v127 = *(void *)(v5 - 8);
  uint64_t v128 = v5;
  uint64_t v126 = *(void *)(v127 + 64);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v125 = (char *)v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v124 = (char *)v96 - v8;
  uint64_t v9 = sub_10000A38C(&qword_10035E178);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v134 = v9;
  uint64_t v135 = v10;
  __chkstk_darwin(v9);
  uint64_t v130 = (char *)v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_10035E180);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v136 = v12;
  uint64_t v137 = v13;
  __chkstk_darwin(v12);
  uint64_t v131 = (char *)v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_10000A38C(&qword_10035E188);
  uint64_t v119 = *(void (***)(char *, uint64_t))(v118 - 8);
  __chkstk_darwin(v118);
  long long v115 = (char *)v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = sub_10000A38C(&qword_10035E190);
  char v121 = *(void (***)(char *, uint64_t))(v120 - 8);
  __chkstk_darwin(v120);
  long long v116 = (char *)v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = (void *)sub_10000A38C(&qword_10035E198);
  uint64_t v123 = *(v122 - 1);
  __chkstk_darwin(v122);
  long long v117 = (char *)v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_10000A38C(&qword_10035E1A0);
  uint64_t v112 = *(void (***)(char *, uint64_t))(v111 - 8);
  __chkstk_darwin(v111);
  char v110 = (char *)v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_10000A38C(&qword_10035E1A8);
  uint64_t v114 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v109 = (char *)v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_10000A38C(&qword_10035E1B0);
  uint64_t v107 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v105 = (char *)v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_10000A38C(&qword_10035E1B8);
  uint64_t v103 = *(void *)(v104 - 8);
  uint64_t v102 = *(void *)(v103 + 64);
  uint64_t v21 = __chkstk_darwin(v104);
  unint64_t v101 = (char *)v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v97 = (char *)v96 - v23;
  uint64_t v24 = sub_10000A38C(&qword_10035D108);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)v96 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000A38C(&qword_10035E1C0);
  uint64_t v28 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  id v30 = (char *)v96 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000A38C(&qword_10035E1C8);
  unint64_t v108 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v32 = (char *)v96 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = v0 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_discoveryTokenStateMachine;
  swift_beginAccess();
  uint64_t v142 = *(void *)(*(void *)v33 + 40);
  sub_10000A38C(&qword_10035C0B8);
  sub_10000B010(&qword_10035E1D0, &qword_10035C0B8);
  uint64_t v142 = Publisher.eraseToAnyPublisher()();
  swift_allocObject();
  swift_weakInit();
  sub_10000A38C(&qword_10035E1D8);
  uint64_t v141 = &protocol conformance descriptor for AnyPublisher<A, B>;
  sub_10000B010(&qword_10035E1E0, &qword_10035E1D8);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  uint64_t v34 = v1;
  uint64_t v35 = v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_tasks;
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  sub_10000A38C(&qword_10035D120);
  Published.projectedValue.getter();
  swift_endAccess();
  sub_10000A38C(&qword_10035E1E8);
  uint64_t v100 = &protocol conformance descriptor for Published<A>.Publisher;
  sub_10000B010(&qword_10035D128, &qword_10035D108);
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  uint64_t v140 = &protocol conformance descriptor for Publishers.Map<A, B>;
  sub_10000B010(&qword_10035E1F0, &qword_10035E1C0);
  sub_10000B010(&qword_10035E1F8, &qword_10035E1E8);
  uint64_t v36 = v98;
  Publisher<>.switchToLatest()();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v36);
  uint64_t v37 = swift_allocObject();
  swift_weakInit();
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = sub_100045938;
  *(void *)(v38 + 24) = v37;
  sub_10000B010(&qword_10035E200, &qword_10035E1C8);
  uint64_t v39 = v99;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v108 + 8))(v32, v39);
  uint64_t v139 = v35;
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v142 = sub_10003CBBC();
  uint64_t v99 = sub_10000A38C(&qword_10035E208);
  v96[1] = sub_10000A38C(&qword_10035D0D8);
  uint64_t v98 = sub_10000B010(&qword_10035E210, &qword_10035E208);
  uint64_t v40 = v97;
  Publisher.map<A>(_:)();
  swift_release();
  swift_retain();
  uint64_t v138 = v34;
  sub_10000BEE0();
  id v41 = objc_allocWithZone((Class)CULogHandle);
  unint64_t v108 = 0x80000001002B1F00;
  NSString v42 = String._bridgeToObjectiveC()();
  NSString v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v96[0] = [v41 initWithSubsystem:v42 category:v43];
  swift_release();

  uint64_t v44 = v103;
  uint64_t v45 = v101;
  uint64_t v46 = v104;
  (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v101, v40, v104);
  unint64_t v47 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  unint64_t v48 = (v102 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v49 = (v48 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v50 = (v49 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = sub_100042A74;
  *(void *)(v51 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v51 + v47, v45, v46);
  long long v52 = (void *)(v51 + v48);
  *long long v52 = 0;
  v52[1] = 0xE000000000000000;
  uint64_t v53 = (void *)(v51 + v49);
  *uint64_t v53 = 0;
  v53[1] = 0xE000000000000000;
  uint64_t v54 = (void *)v96[0];
  *(void *)(v51 + v50) = v96[0];
  *(_DWORD *)(v51 + ((v50 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  sub_10000B010(&qword_10035E218, &qword_10035E1B8);
  id v55 = v54;
  uint64_t v56 = v105;
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10035E220, &qword_10035E1B0);
  uint64_t v57 = v106;
  uint64_t v58 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v107 + 8))(v56, v57);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v40, v46);
  uint64_t v142 = v58;
  swift_allocObject();
  swift_weakInit();
  sub_10000A38C(&qword_10035E228);
  sub_10000B010(&qword_10035E230, &qword_10035E228);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  sub_10000A38C(&qword_10035E110);
  uint64_t v59 = v110;
  Published.projectedValue.getter();
  swift_endAccess();
  sub_10000B010(&qword_10035E238, &qword_10035E1A0);
  uint64_t v60 = v109;
  uint64_t v61 = v111;
  Publisher.dropFirst(_:)();
  v112[1](v59, v61);
  swift_allocObject();
  swift_weakInit();
  uint64_t v112 = (void (**)(char *, uint64_t))&protocol conformance descriptor for Publishers.Drop<A>;
  sub_10000B010(&qword_10035E240, &qword_10035E1A8);
  uint64_t v62 = v113;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v114 + 8))(v60, v62);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_retain();
  uint64_t v142 = sub_100104E08();
  sub_10000A38C(&qword_10035E248);
  sub_10000B010(&qword_10035E250, &qword_10035E248);
  uint64_t v63 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
  uint64_t v142 = v63;
  uint64_t v64 = v115;
  Publisher.dropFirst(_:)();
  swift_release();
  sub_100019E10(0, &qword_10035E258);
  sub_10000B010(&qword_10035E260, &qword_10035E188);
  uint64_t v65 = v116;
  uint64_t v66 = v118;
  Publisher.compactMap<A>(_:)();
  v119[1](v64, v66);
  swift_allocObject();
  swift_weakInit();
  uint64_t v119 = (void (**)(char *, uint64_t))&protocol conformance descriptor for Publishers.CompactMap<A, B>;
  sub_10000B010(&qword_10035E268, &qword_10035E190);
  uint64_t v67 = v117;
  uint64_t v68 = v120;
  Publisher.filter(_:)();
  swift_release();
  v121[1](v65, v68);
  swift_allocObject();
  swift_weakInit();
  char v121 = (void (**)(char *, uint64_t))&protocol conformance descriptor for Publishers.Filter<A>;
  sub_10000B010(&qword_10035E270, &qword_10035E198);
  unint64_t v69 = v122;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, void *))(v123 + 8))(v67, v69);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_retain();
  uint64_t v142 = sub_10010501C();
  sub_10000A38C(&qword_10035E278);
  sub_10000B010(&qword_10035E280, &qword_10035E278);
  uint64_t v70 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
  uint64_t v142 = v70;
  uint64_t v123 = sub_10000A38C(&qword_10035E288);
  uint64_t v141 = (void *)sub_10000B010(&qword_10035E290, &qword_10035E288);
  uint64_t v71 = v124;
  Publisher.dropFirst(_:)();
  swift_release();
  swift_retain();
  sub_10000BEE0();
  id v72 = objc_allocWithZone((Class)CULogHandle);
  NSString v73 = String._bridgeToObjectiveC()();
  NSString v74 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v122 = [v72 initWithSubsystem:v73 category:v74];
  swift_release();

  uint64_t v76 = v127;
  uint64_t v75 = v128;
  id v77 = v125;
  (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v125, v71, v128);
  unint64_t v78 = (*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
  unint64_t v79 = (v126 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v80 = (v79 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v81 = (v80 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v82 = swift_allocObject();
  *(void *)(v82 + 16) = sub_10004387C;
  *(void *)(v82 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v76 + 32))(v82 + v78, v77, v75);
  uint64_t v83 = (void *)(v82 + v79);
  *uint64_t v83 = 0xD000000000000013;
  v83[1] = 0x80000001002B3E00;
  uint64_t v84 = (void *)(v82 + v80);
  void *v84 = 0;
  v84[1] = 0xE000000000000000;
  uint64_t v85 = v122;
  *(void *)(v82 + v81) = v122;
  *(_DWORD *)(v82 + ((v81 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  id v86 = v85;
  sub_10000A38C(&qword_10035D0E8);
  sub_10000B010(&qword_10035E298, &qword_10035E170);
  uint64_t v87 = v129;
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10035E2A0, &qword_10035E168);
  uint64_t v88 = v132;
  char v89 = v87;
  uint64_t v90 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v133 + 8))(v89, v88);

  (*(void (**)(char *, uint64_t))(v76 + 8))(v71, v75);
  uint64_t v142 = v90;
  uint64_t v91 = v130;
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_10000B010(&qword_10035E2A8, &qword_10035E178);
  uint64_t v92 = v131;
  uint64_t v93 = v134;
  Publisher.filter(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v135 + 8))(v91, v93);
  swift_allocObject();
  swift_weakInit();
  sub_10000B010(&qword_10035E2B0, &qword_10035E180);
  uint64_t v94 = v136;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v137 + 8))(v92, v94);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10004063C()
{
  sub_10000BEE0();
  id v0 = objc_allocWithZone((Class)CULogHandle);
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 initWithSubsystem:v1 category:v2];

  NSString v4 = String._bridgeToObjectiveC()();
  [v3 ulog:40 message:v4];

  return sub_100040734();
}

uint64_t sub_100040734()
{
  uint64_t v1 = v0;
  sub_10000BEE0();
  id v2 = objc_allocWithZone((Class)CULogHandle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithSubsystem:v3 category:v4];

  NSString v6 = String._bridgeToObjectiveC()();
  [v5 ulog:40 message:v6];

  uint64_t v7 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnection;
  [*(id *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnection) invalidate];
  uint64_t v8 = *(void **)(v1 + v7);
  *(void *)(v1 + v7) = 0;

  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnectionFuture) = 0;
  swift_release();
  uint64_t v9 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnectionTask;
  if (*(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnectionTask))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  *(void *)(v1 + v9) = 0;

  return swift_release();
}

uint64_t sub_10004089C(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  sub_10000BEE0();
  id v5 = objc_allocWithZone((Class)CULogHandle);
  NSString v6 = String._bridgeToObjectiveC()();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v5 initWithSubsystem:v6 category:v7];

  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 ulog:40 message:v9];
  swift_bridgeObjectRelease();

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v10 = (uint64_t *)(OBJC_IVAR____TtC17proximitycontrold8Identity_discoveredMediaRouteID - 0x2FFFFFFFFFFFFFC1);
  *uint64_t v10 = a1;
  v10[1] = (uint64_t)a2;
  swift_bridgeObjectRetain();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100040A7C(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  sub_10000BEE0();
  id v5 = objc_allocWithZone((Class)CULogHandle);
  NSString v6 = String._bridgeToObjectiveC()();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v5 initWithSubsystem:v6 category:v7];

  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 ulog:40 message:v9];
  swift_bridgeObjectRelease();

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v10 = (uint64_t *)(OBJC_IVAR____TtC17proximitycontrold8Identity_discoveredColorCode - 0x2FFFFFFFFFFFFFD7);
  *uint64_t v10 = a1;
  v10[1] = (uint64_t)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = OBJC_IVAR____TtC17proximitycontrold8Identity_cachedDeviceAsset - 0x2FFFFFFFFFFFFFD7;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  sub_10009AE24();
  return swift_release();
}

uint64_t sub_100040C78()
{
  sub_10000BEE0();
  id v0 = objc_allocWithZone((Class)CULogHandle);
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 initWithSubsystem:v1 category:v2];

  NSString v4 = String._bridgeToObjectiveC()();
  [v3 ulog:40 message:v4];

  swift_retain();
  sub_1001BD190(0x100000000uLL);

  return swift_release();
}

uint64_t sub_100040D9C()
{
  uint64_t v0 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  __chkstk_darwin(v0);
  NSString v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000A38C(qword_10035C0D8);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v6 = sub_100096BBC();
  uint64_t result = swift_release();
  if (!v6)
  {
    sub_10000BEE0();
    id v8 = objc_allocWithZone((Class)CULogHandle);
    NSString v9 = String._bridgeToObjectiveC()();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v11 = [v8 initWithSubsystem:v9 category:v10];

    NSString v12 = String._bridgeToObjectiveC()();
    [v11 ulog:40 message:v12];

    *NSString v2 = 1;
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    sub_1001565E4((uint64_t)v2, (uint64_t)v5);
    sub_100014F00((uint64_t)v2);
    sub_10000D78C((uint64_t)v5, qword_10035C0D8);
    return swift_endAccess();
  }
  return result;
}

BOOL sub_100041138()
{
  uint64_t v0 = sub_10000A38C(&qword_10035E160);
  __chkstk_darwin(v0 - 8);
  NSString v2 = (char *)v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10003E1FC();
  if (v3) {
    return v3 > 2299999;
  }
  uint64_t v5 = sub_10003DFE8();
  if (!v6) {
    return 0;
  }
  void v9[2] = v5;
  v9[3] = v6;
  v9[0] = 875443249;
  v9[1] = 0xE400000000000000;
  uint64_t v7 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  sub_100016790();
  unint64_t v8 = StringProtocol.compare<A>(_:options:range:locale:)();
  sub_10000D78C((uint64_t)v2, &qword_10035E160);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 < 2;
}

BOOL sub_100041298()
{
  char v0 = sub_10000C78C();
  if ((v0 & 8) != 0) {
    return 1;
  }
  if (qword_10035A5C0 != -1) {
    swift_once();
  }
  if (*((unsigned char *)off_10036AE10 + 24) != 1) {
    return 0;
  }
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v1 = *(id *)(qword_1003AC750 + 1560);
  char v2 = sub_100100D88();

  if (v2 == 2)
  {
    int v3 = sub_1000458C8();
    BOOL result = 0;
    if ((v0 & 2) == 0) {
      return result;
    }
  }
  else
  {
    int v3 = v2 & 1;
    BOOL result = 0;
    if ((v0 & 2) == 0) {
      return result;
    }
  }
  if (v3)
  {
    return sub_100041138();
  }
  return result;
}

uint64_t sub_1000413D0@<X0>(uint64_t a1@<X8>)
{
  char v2 = (void *)sub_1001F9EE0();
  sub_100266C24(v2, a1);

  return swift_unknownObjectRelease();
}

uint64_t sub_100041434()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v0 = sub_10009AE24();
  char v2 = v1;
  swift_release();
  if (v2) {
    return 0;
  }
  else {
    return v0;
  }
}

uint64_t sub_1000414C8()
{
  unint64_t v0 = sub_10003BBFC();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

uint64_t sub_100041500()
{
  return sub_1001F9EE0();
}

uint64_t sub_100041530()
{
  return sub_10003D9EC();
}

uint64_t sub_100041554@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for HandoffDevice();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100041594()
{
  return sub_1001F9EE0();
}

uint64_t sub_1000415C4()
{
  return sub_10003D0E8();
}

uint64_t sub_1000415E8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v0 = sub_10009AE24();
  char v2 = v1;
  swift_release();
  if (v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v0;
  }
  return sub_1000FD48C(v3);
}

uint64_t sub_100041680@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    char v2 = (void *)sub_1001F9EE0();
    sub_100266C24(v2, a1);
    swift_release();
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for ActivityDisplayContext(0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a1, 0, 1, v3);
  }
  else
  {
    uint64_t v5 = type metadata accessor for ActivityDisplayContext(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
}

uint64_t sub_100041784@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  if (swift_weakLoadStrong()) {
    swift_release();
  }
  uint64_t result = sub_1001F9EE0();
  *a1 = result;
  return result;
}

id sub_1000417E8(void **a1, void *a2)
{
  unint64_t v2 = (unint64_t)*a1;
  BOOL v3 = (v2 | *a2) == 0;
  if (v2) {
    BOOL v4 = *a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    return [v2 isEqual:];
  }
  return (id)v3;
}

uint64_t sub_100041830(void *a1)
{
  if (!*a1) {
    return 7104878;
  }
  swift_unknownObjectRetain();
  sub_10000A38C((uint64_t *)&unk_10036E690);
  return String.init<A>(describing:)();
}

unsigned char *sub_100041884@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0x40302010000uLL >> (8 * *result);
  return result;
}

uint64_t sub_1000418A0()
{
  sub_10003B828();

  return swift_deallocClassInstance();
}

uint64_t sub_1000418F8()
{
  return type metadata accessor for HandoffDevice();
}

uint64_t type metadata accessor for HandoffDevice()
{
  uint64_t result = qword_10035D9A0;
  if (!qword_10035D9A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10004194C()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_100041BF8(319, &qword_10035D9B0, (uint64_t (*)(uint64_t))type metadata accessor for Identity, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
    if (v1 <= 0x3F)
    {
      sub_100041B9C();
      if (v2 <= 0x3F)
      {
        sub_100041BF8(319, (unint64_t *)&qword_10035D9C8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

void sub_100041B9C()
{
  if (!qword_10035D9B8)
  {
    sub_10000A3D0(&qword_10035D9C0);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10035D9B8);
    }
  }
}

void sub_100041BF8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void *sub_100041C5C()
{
  return &protocol witness table for ObservableObjectPublisher;
}

_UNKNOWN **sub_100041C68()
{
  return &off_100330D00;
}

uint64_t sub_100041C74()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100041CCC();
    return swift_release();
  }
  return result;
}

void sub_100041CCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035E158);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v23 - v6;
  v23[1] = 0;
  v23[2] = 0xE000000000000000;
  v8._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  v8._object = (void *)0x80000001002B40B0;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = 0x74757074756F203ALL;
  v9._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v9);
  _print_unlocked<A, B>(_:_:)();
  sub_10000BEE0();
  id v10 = objc_allocWithZone((Class)CULogHandle);
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v10 initWithSubsystem:v11 category:v12];

  swift_bridgeObjectRetain();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 ulog:40 message:v14];
  swift_bridgeObjectRelease();

  if (swift_unknownObjectWeakLoadStrong())
  {
    Date.init()();
    uint64_t v15 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 0, 1, v15);
    sub_10001639C((uint64_t)v7, (uint64_t)v5, &qword_10035E158);
    uint64_t v16 = v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_lastTokenSyncAttempt;
    swift_beginAccess();
    sub_100045E00((uint64_t)v5, v16);
    swift_endAccess();
    uint64_t v17 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    sub_10015907C(v1, (uint64_t)sub_100045E68, v17);
    swift_unknownObjectRelease();
    swift_release_n();
  }
  else
  {
    sub_10000BEE0();
    id v18 = objc_allocWithZone((Class)CULogHandle);
    NSString v19 = String._bridgeToObjectiveC()();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v21 = [v18 initWithSubsystem:v19 category:v20];

    NSString v22 = String._bridgeToObjectiveC()();
    [v21 ulog:90 message:v22];
  }
}

uint64_t sub_10004206C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v45 = sub_10000A38C(&qword_10035E2C0);
  uint64_t v52 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  unint64_t v49 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000A38C(&qword_10035E2C8);
  uint64_t v50 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  unint64_t v47 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000A38C(&qword_10035E2D0);
  uint64_t v51 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  NSString v43 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10035E2D8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  uint64_t v42 = v7;
  __chkstk_darwin(v6);
  Swift::String v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10035E2E0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000A38C(&qword_10035E2E8);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = *a1;
  swift_beginAccess();
  sub_10000A38C(&qword_10035E2F0);
  Published.projectedValue.getter();
  swift_endAccess();
  sub_10000B010(&qword_10035E2F8, &qword_10035E2E0);
  sub_100045C98();
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_10000B010(&qword_10035E318, &qword_10035E2E8);
  uint64_t v40 = (char *)&type metadata for () + 8;
  Publisher.map<A>(_:)();
  sub_10000B010(&qword_10035E320, &qword_10035E2D8);
  uint64_t v18 = v41;
  uint64_t v19 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v18);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v54 = v19;
  swift_beginAccess();
  uint64_t v42 = sub_10000A38C(&qword_10035E328);
  NSString v20 = v47;
  Published.projectedValue.getter();
  swift_endAccess();
  uint64_t v41 = sub_10000B010(&qword_10035E330, &qword_10035E2C8);
  unint64_t v38 = sub_100045D74();
  id v21 = v43;
  uint64_t v22 = v48;
  Publisher<>.removeDuplicates()();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v50 + 8);
  v50 += 8;
  uint64_t v37 = v23;
  v23(v20, v22);
  v36[1] = sub_10000B010(&qword_10035E358, &qword_10035E2D0);
  v36[0] = nullsub_1;
  uint64_t v24 = v49;
  uint64_t v25 = v44;
  Publisher.map<A>(_:)();
  sub_10000B010(&qword_10035E360, &qword_10035E2C0);
  uint64_t v26 = v45;
  uint64_t v27 = Publisher.eraseToAnyPublisher()();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v52 + 8);
  v52 += 8;
  v28(v24, v26);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v51 + 8);
  v51 += 8;
  v29(v21, v25);
  uint64_t v53 = v27;
  swift_beginAccess();
  id v30 = v47;
  Published.projectedValue.getter();
  swift_endAccess();
  uint64_t v31 = v48;
  Publisher<>.removeDuplicates()();
  v37(v30, v31);
  uint64_t v32 = v49;
  Publisher.map<A>(_:)();
  uint64_t v33 = v32;
  uint64_t v34 = Publisher.eraseToAnyPublisher()();
  v28(v33, v26);
  v29(v21, v25);
  uint64_t v55 = v34;
  sub_10000A38C((uint64_t *)&unk_100367FA0);
  sub_10000B010(&qword_10036B020, (uint64_t *)&unk_100367FA0);
  return Publishers.Merge3.init(_:_:_:)();
}

uint64_t sub_100042814()
{
  uint64_t v0 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    type metadata accessor for DiscoveryTokenStateMachine(0);
    sub_1000126C8(v2);
    unint64_t v11 = 0;
    unint64_t v12 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xD000000000000019;
    unint64_t v12 = 0x80000001002B4090;
    v4._uint64_t countAndFlagsBits = sub_100013C14();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = 39;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    sub_10000BEE0();
    id v6 = objc_allocWithZone((Class)CULogHandle);
    NSString v7 = String._bridgeToObjectiveC()();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v9 = [v6 initWithSubsystem:v7 category:v8];

    swift_bridgeObjectRetain();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 ulog:40 message:v10];
    swift_bridgeObjectRelease();

    swift_beginAccess();
    sub_100157294((uint64_t)v2);
    swift_endAccess();
    swift_release();
    return sub_100014F00((uint64_t)v2);
  }
  return result;
}

id sub_100042A3C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if (*a1) {
    id result = sub_10008800C();
  }
  else {
    id result = 0;
  }
  *a2 = result;
  return result;
}

unint64_t sub_100042A74(void **a1)
{
  uint64_t v1 = *a1;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_100019E10(0, &qword_10035E2B8);
    id v2 = v1;
    uint64_t v3 = String.init<A>(describing:)();
    unint64_t v5 = v4;
  }
  else
  {
    unint64_t v5 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

uint64_t sub_100042B3C(void **a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = *(void *)(result + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_deviceActivity);
    swift_retain();
    swift_release();
    uint64_t v4 = *(void *)(v3 + 48);
    unint64_t v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = v1;
    id v6 = v1;
    swift_retain();

    sub_100104ED0();
    id v7 = *(id *)(v4 + 24);
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();

    return swift_release();
  }
  return result;
}

uint64_t sub_100042C28(uint64_t a1)
{
  sub_10001639C(a1, (uint64_t)v2, &qword_10035D9C0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100042C98((uint64_t)v2);
    return swift_release();
  }
  return result;
}

void sub_100042C98(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_10001639C(a1, (uint64_t)&v36, &qword_10035D9C0);
  uint64_t v5 = v36;
  char v4 = v37;
  uint64_t v7 = v38;
  uint64_t v6 = v39;
  char v8 = v40;
  sub_10001639C(a1, (uint64_t)v46, &qword_10035D9C0);
  if (v47)
  {
    uint64_t v41 = v5;
    char v42 = v4 & 1;
    uint64_t v43 = v7;
    uint64_t v44 = v6;
    char v45 = v8;
    swift_bridgeObjectRetain();
    uint64_t v9 = String.init<A>(describing:)();
    unint64_t v11 = v10;
  }
  else
  {
    unint64_t v11 = 0xE300000000000000;
    uint64_t v9 = 7104878;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  sub_10000BEE0();
  id v13 = objc_allocWithZone((Class)CULogHandle);
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [v13 initWithSubsystem:v14 category:v15];

  swift_bridgeObjectRetain();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v16 ulog:40 message:v17];
  swift_bridgeObjectRelease();

  sub_10001639C(a1, (uint64_t)&v41, &qword_10035D9C0);
  if (v44)
  {
    char v18 = v45;
    switch(v45)
    {
      case 0:
        swift_beginAccess();
        char v19 = 3;
        goto LABEL_12;
      case 1:
        swift_beginAccess();
        sub_1001577F4(4);
        swift_endAccess();
        NSString v20 = *(void **)(*(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__mediaRemoteDisplayContext)
                       + 24);
        if (v20)
        {
          id v21 = v20;
          sub_1000432C0(v21);
        }
        break;
      case 5:
        swift_beginAccess();
        char v19 = 1;
        goto LABEL_12;
      case 6:
        swift_beginAccess();
        char v19 = 0;
LABEL_12:
        sub_1001577F4(v19);
        swift_endAccess();
        break;
      default:
        break;
    }
    uint64_t v22 = sub_100086EEC(v18);
    if ((v23 & 1) == 0)
    {
      unint64_t v24 = v22;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      uint64_t v25 = sub_100045C34(v24);
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v27;

      v29._uint64_t countAndFlagsBits = v26;
      v29._object = v28;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30._uint64_t countAndFlagsBits = 0xD000000000000012;
      v30._object = (void *)0x80000001002B3F80;
      String.append(_:)(v30);
      sub_10000BEE0();
      id v31 = objc_allocWithZone((Class)CULogHandle);
      NSString v32 = String._bridgeToObjectiveC()();
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v34 = [v31 initWithSubsystem:v32 category:v33];

      swift_bridgeObjectRetain();
      NSString v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v34 ulog:40 message:v35];
      swift_bridgeObjectRelease();

      sub_1000443C8(v24);
    }
  }
  else
  {
    swift_beginAccess();
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.setter();
  }
}

id sub_100043174@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = v2;
  return v2;
}

uint64_t sub_100043180()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    swift_retain();
    swift_release();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    return v1 != 0;
  }
  return result;
}

uint64_t sub_100043260(void **a1)
{
  char v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000432C0(v1);
    return swift_release();
  }
  return result;
}

void sub_1000432C0(void *a1)
{
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  id v2 = [a1 description];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_10000BEE0();
  id v7 = objc_allocWithZone((Class)CULogHandle);
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithSubsystem:v8 category:v9];

  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 ulog:40 message:v11];
  swift_bridgeObjectRelease();

  if (swift_unknownObjectWeakLoadStrong())
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v12 = sub_100098724();
    NSString v14 = v13;
    swift_release();
    if (v14)
    {
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      id v15 = [a1 description];
      uint64_t v35 = v12;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      char v18 = v17;

      v19._uint64_t countAndFlagsBits = v16;
      v19._object = v18;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      sub_10000BEE0();
      id v20 = objc_allocWithZone((Class)CULogHandle);
      NSString v21 = String._bridgeToObjectiveC()();
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v23 = [v20 initWithSubsystem:v21 category:v22];

      swift_bridgeObjectRetain();
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v23 ulog:40 message:v24];
      swift_bridgeObjectRelease();

      swift_beginAccess();
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      BOOL v25 = sub_100041298();
      sub_1000870A0(a1, v35, v14, v37, v25);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_1001577F4(2);
      swift_endAccess();
      swift_unknownObjectRelease();
    }
    else
    {
      sub_10000BEE0();
      id v30 = objc_allocWithZone((Class)CULogHandle);
      NSString v31 = String._bridgeToObjectiveC()();
      NSString v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v33 = [v30 initWithSubsystem:v31 category:v32];

      NSString v34 = String._bridgeToObjectiveC()();
      [v33 ulog:60 message:v34];
      swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_10000BEE0();
    id v26 = objc_allocWithZone((Class)CULogHandle);
    NSString v27 = String._bridgeToObjectiveC()();
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v29 = [v26 initWithSubsystem:v27 category:v28];

    NSString v36 = String._bridgeToObjectiveC()();
    [v29 ulog:60 message:v36];
  }
}

uint64_t sub_10004387C(uint64_t *a1)
{
  unint64_t v1 = a1[2];
  if (v1 == 3) {
    return 7104878;
  }
  sub_10003A3A4(*a1, a1[1], v1);
  return String.init<A>(describing:)();
}

uint64_t sub_1000438E4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  return sub_10003A630(v3, v2, v4);
}

uint64_t sub_10004390C(uint64_t a1)
{
  sub_100045BD0(a1, (uint64_t)v2);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100043974((uint64_t)v2);
    return swift_release();
  }
  return result;
}

void sub_100043974(uint64_t a1)
{
  uint64_t v28 = 0;
  unint64_t v29 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  v2._uint64_t countAndFlagsBits = 0xD000000000000025;
  v2._object = (void *)0x80000001002B3E20;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = 0xD000000000000010;
  v3._object = (void *)0x80000001002B3E50;
  String.append(_:)(v3);
  sub_100045BD0(a1, (uint64_t)&v28);
  _print_unlocked<A, B>(_:_:)();
  sub_10000BEE0();
  id v4 = objc_allocWithZone((Class)CULogHandle);
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v4 initWithSubsystem:v5 category:v6];

  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 ulog:40 message:v8];
  swift_bridgeObjectRelease();

  if (!swift_unknownObjectWeakLoadStrong())
  {
    sub_10000BEE0();
    id v19 = objc_allocWithZone((Class)CULogHandle);
    NSString v20 = String._bridgeToObjectiveC()();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v22 = [v19 initWithSubsystem:v20 category:v21];

    NSString v23 = String._bridgeToObjectiveC()();
    [v22 ulog:60 message:v23];
LABEL_8:

    return;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v9 = sub_100098724();
  NSString v11 = v10;
  swift_release();
  if (!v11)
  {
    sub_10000BEE0();
    id v24 = objc_allocWithZone((Class)CULogHandle);
    NSString v25 = String._bridgeToObjectiveC()();
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v22 = [v24 initWithSubsystem:v25 category:v26];

    NSString v23 = String._bridgeToObjectiveC()();
    [v22 ulog:60 message:v23];
    swift_unknownObjectRelease();
    goto LABEL_8;
  }
  uint64_t v28 = 0;
  unint64_t v29 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v12._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v12._object = (void *)0x80000001002B3EB0;
  String.append(_:)(v12);
  sub_100045BD0(a1, (uint64_t)&v28);
  _print_unlocked<A, B>(_:_:)();
  sub_10000BEE0();
  id v13 = objc_allocWithZone((Class)CULogHandle);
  uint64_t v27 = v9;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [v13 initWithSubsystem:v14 category:v15];

  swift_bridgeObjectRetain();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v16 ulog:40 message:v17];
  swift_bridgeObjectRelease();

  swift_beginAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  LOBYTE(v14) = v28;
  BOOL v18 = sub_100041298();
  sub_100087A1C(a1, v27, v11, (char)v14, v18);
  swift_bridgeObjectRelease();
  sub_100045BD0(a1, (uint64_t)&v28);
  if (v30 > 2)
  {
    swift_beginAccess();
    sub_1001577F4(2);
    swift_endAccess();
  }
  swift_unknownObjectRelease();
}

uint64_t sub_100043F14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
  uint64_t v4 = type metadata accessor for UUID();
  NSString v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100043F8C()
{
  return swift_bridgeObjectRetain();
}

uint64_t (*sub_100043FDC())()
{
  return j__swift_endAccess;
}

unint64_t sub_100044044()
{
  unint64_t result = qword_10035CFF0;
  if (!qword_10035CFF0)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035CFF0);
  }
  return result;
}

uint64_t sub_10004409C(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  uint64_t v5 = __chkstk_darwin(v4);
  id v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v19 - v8;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v19[1] = v4;
    _OWORD v19[2] = 0;
    void v19[3] = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    v11._uint64_t countAndFlagsBits = 0xD000000000000020;
    v11._object = (void *)0x80000001002B4120;
    String.append(_:)(v11);
    v19[0] = a1;
    uint64_t v19[5] = a1;
    char v20 = a2 & 1;
    sub_10000A38C(&qword_10035E368);
    _print_unlocked<A, B>(_:_:)();
    sub_10000BEE0();
    id v12 = objc_allocWithZone((Class)CULogHandle);
    NSString v13 = String._bridgeToObjectiveC()();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v15 = [v12 initWithSubsystem:v13 category:v14];

    swift_bridgeObjectRetain();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v15 ulog:40 message:v16];
    swift_bridgeObjectRelease();

    if (a2)
    {
      uint64_t v17 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v9, 1, 1, v17);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if ((v19[0] & 1) == 0)
      {
        uint64_t v18 = type metadata accessor for DispatchTimeInterval();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v7, 1, 1, v18);
      }
      swift_storeEnumTagMultiPayload();
      sub_100045E74((uint64_t)v7, (uint64_t)v9);
    }
    swift_beginAccess();
    sub_100157294((uint64_t)v9);
    swift_endAccess();
    swift_release();
    return sub_100014F00((uint64_t)v9);
  }
  return result;
}

void sub_1000443C8(unint64_t a1)
{
  unint64_t v1 = sub_100045C34(a1);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  v5._uint64_t countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  sub_10000BEE0();
  id v6 = objc_allocWithZone((Class)CULogHandle);
  NSString v7 = String._bridgeToObjectiveC()();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [v6 initWithSubsystem:v7 category:v8];

  swift_bridgeObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 ulog:40 message:v10];
  swift_bridgeObjectRelease();

  if (swift_unknownObjectWeakLoadStrong())
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_100098724();
    uint64_t v12 = v11;
    swift_release();
    if (v12)
    {
      if (a1 != 1 || !sub_100041298())
      {
        id v22 = objc_allocWithZone((Class)PCProximityEvent);
        NSString v23 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v24 = [v22 initWithType:a1 mediaRemoteID:v23 info:0];

        [v24 setExpectsDisplayContext:(a1 < 0xA) & (0x2FAu >> a1)];
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        NSString v25 = sub_100045C34(a1);
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v28 = v27;

        v29._uint64_t countAndFlagsBits = v26;
        v29._object = v28;
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        v30._uint64_t countAndFlagsBits = 0x656C6564206F7420;
        v30._object = (void *)0xEC00000065746167;
        String.append(_:)(v30);
        sub_10000BEE0();
        id v31 = objc_allocWithZone((Class)CULogHandle);
        NSString v32 = String._bridgeToObjectiveC()();
        NSString v33 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v34 = [v31 initWithSubsystem:v32 category:v33];

        swift_bridgeObjectRetain();
        NSString v35 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v34 ulog:40 message:v35];
        swift_bridgeObjectRelease();

        sub_1000C6B74(v24);
        swift_unknownObjectRelease();

        return;
      }
      swift_bridgeObjectRelease();
      sub_10000BEE0();
      id v13 = objc_allocWithZone((Class)CULogHandle);
      NSString v14 = String._bridgeToObjectiveC()();
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v16 = [v13 initWithSubsystem:v14 category:v15];

      NSString v17 = String._bridgeToObjectiveC()();
      [v16 ulog:40 message:v17];
    }
    else
    {
      sub_10000BEE0();
      id v36 = objc_allocWithZone((Class)CULogHandle);
      NSString v37 = String._bridgeToObjectiveC()();
      NSString v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v16 = [v36 initWithSubsystem:v37 category:v38];

      NSString v17 = String._bridgeToObjectiveC()();
      [v16 ulog:60 message:v17 a1];
    }
    swift_unknownObjectRelease();
  }
  else
  {
    sub_10000BEE0();
    id v18 = objc_allocWithZone((Class)CULogHandle);
    NSString v19 = String._bridgeToObjectiveC()();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v21 = [v18 initWithSubsystem:v19 category:v20];

    NSString v40 = String._bridgeToObjectiveC()();
    [v21 ulog:10 message:v40];
  }
}

unsigned __int8 *sub_1000449F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_10000CCAC();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    id v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_100152FD8();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    id v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    id v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  id v13 = sub_100044AE4(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_100044AE4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        uint64_t v26 = 0;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          uint64_t v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  NSString v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }
      else
      {
        char v21 = -55;
      }
    }
    else
    {
      char v21 = -48;
    }
    uint64_t v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100044D60(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    unsigned int v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    unsigned int v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_100044E34((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t sub_100044E34(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = sub_100152F5C(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = sub_100152F5C(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_100152F5C(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  NSString v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    NSString v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 48;
        unsigned __int8 v32 = a6 + 55;
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v31 = 58;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          id v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            uint64_t v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
              return 0;
            }
            uint64_t v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37))) {
              return 0;
            }
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v39 = a6 + 48;
      unsigned __int8 v40 = a6 + 55;
      unsigned __int8 v41 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = 58;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v40 = 65;
      }
      if (v19)
      {
        uint64_t v42 = 0;
        do
        {
          unsigned int v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              char v44 = -87;
            }
            else
            {
              char v44 = -55;
            }
          }
          else
          {
            char v44 = -48;
          }
          uint64_t v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63) {
            return 0;
          }
          uint64_t v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44))) {
            return 0;
          }
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
            return 0;
          }
          uint64_t v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28))) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t sub_10004525C(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v1;
  uint64_t v5 = sub_10000A38C(&qword_10035E110);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unsigned __int8 v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v1 + 16) = 7;
  sub_10000A38C(&qword_10035E118);
  swift_allocObject();
  LOBYTE(v36) = 1;
  *(void *)(v1 + 24) = sub_1001EE024(0x100000000uLL, 0, 0, 0);
  *(void *)(v1 + 32) = 0;
  UUID.init()();
  uint64_t v9 = v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_lastDistanceMeasurementQuality;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  unint64_t v10 = (void *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_mediaRouteIDActive);
  *unint64_t v10 = 0;
  v10[1] = 0;
  uint64_t v11 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__region;
  sub_10000A38C(&qword_10035E120);
  swift_allocObject();
  *(void *)(v1 + v11) = sub_1001EE71C(5, 0, 0, 0);
  uint64_t v12 = v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_regionResolutionSignpostPostedInstant;
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_regionTimestamp;
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___regionPublisher) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_tasks) = &_swiftEmptySetSingleton;
  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___activityDisplayContextPublisher) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___educationFlowPolicy) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_legacyDelegate + 8) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v14 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_legacyDeliveryModeStateMachine;
  type metadata accessor for ContextDeliveryModeStateMachine();
  swift_allocObject();
  *(void *)(v1 + v14) = sub_100204050();
  uint64_t v15 = v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__legacyEvent;
  char v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  sub_10000A38C(&qword_10035D9C0);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v15, v8, v5);
  uint64_t v16 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__mediaRemoteDisplayContext;
  sub_10000A38C(&qword_10035E128);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 24) = 0;
  *(void *)(v2 + v16) = v17;
  *(void *)(v2
            + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___mediaRemoteDisplayContextPublisher) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_proximityDelegate + 8) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  uint64_t v18 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__transfer;
  sub_10000A38C(&qword_10035E130);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  *(void *)(v19 + 24) = 0;
  *(void *)(v2 + v18) = v19;
  *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___transferPublisher) = 0;
  uint64_t v20 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_transferrableActivityPublisherKicker;
  sub_10000A38C((uint64_t *)&unk_100367F90);
  swift_allocObject();
  *(void *)(v2 + v20) = PassthroughSubject.init()();
  *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___transferStatePublisher) = 0;
  uint64_t v21 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__v1TransferState;
  sub_10000A38C(&qword_10035E138);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = 0;
  *(void *)(v22 + 24) = 0;
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 3;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  *(void *)(v2 + v21) = v22;
  *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___activityPublisher) = 0;
  uint64_t v23 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_activityStreamErrorSubject;
  sub_10000A38C(&qword_10035E140);
  swift_allocObject();
  *(void *)(v2 + v23) = PassthroughSubject.init()();
  uint64_t v24 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_currentActivitySubject;
  *(void *)&long long v36 = 0;
  sub_10000A38C(&qword_10035E148);
  swift_allocObject();
  *(void *)(v2 + v24) = CurrentValueSubject.init(_:)();
  uint64_t v25 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_deviceActivity;
  type metadata accessor for DeviceActivity();
  swift_allocObject();
  *(void *)(v2 + v25) = sub_1001FB314();
  uint64_t v26 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_discoveryTokenStateMachine;
  type metadata accessor for DiscoveryTokenStateMachine(0);
  swift_allocObject();
  *(void *)(v2 + v26) = sub_10000F99C();
  uint64_t v27 = v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_discoveryTokenSyncDelegate;
  *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_discoveryTokenSyncDelegate + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_discoveryTokenSyncTask) = 0;
  uint64_t v28 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__executedThisSession;
  sub_10000A38C(&qword_10035E150);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = 0;
  *(unsigned char *)(v29 + 24) = 0;
  *(void *)(v2 + v28) = v29;
  uint64_t v30 = v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_lastTokenSyncAttempt;
  uint64_t v31 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___localActivityPublisher) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnectionFuture) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnectionTask) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnection) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice____lazy_storage___uxRegionPublisher) = 0;
  *(void *)&long long v36 = 0;
  *((void *)&v36 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  *(void *)&long long v36 = 0x6469203A74696E49;
  *((void *)&v36 + 1) = 0xEF3D797469746E65;
  uint64_t v32 = *a1;
  swift_retain();
  v33._uint64_t countAndFlagsBits = sub_10009BB90();
  String.append(_:)(v33);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10016ABE4(v36, *((void **)&v36 + 1), 0, v4, (uint64_t)&off_100320998);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v35[1] = v32;
  type metadata accessor for Identity();
  swift_retain();
  Published.init(initialValue:)();
  swift_endAccess();
  *(void *)(v27 + 8) = a1[2];
  swift_unknownObjectWeakAssign();
  *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_localDeviceActivity) = a1[3];
  *(unsigned char *)(v2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_isMock) = *((unsigned char *)a1 + 32);
  swift_retain();
  sub_10003EDB4();
  return v2;
}

BOOL sub_1000458C8()
{
  return GestaltGetBoolean() != 0;
}

uint64_t sub_1000458F8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100045930()
{
  return sub_100041C74();
}

uint64_t sub_100045938()
{
  return sub_100042814();
}

uint64_t sub_100045940()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100045978(uint64_t a1)
{
  return sub_1001BCD58(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100045980()
{
  return sub_10000ADE8(&qword_10035E1B8);
}

id sub_10004598C@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_10000A38C(&qword_10035E1B8) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  return sub_100086010(a1, *(uint64_t (**)(void **))(v2 + 16), *(void *)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void *)(v2 + v8), *(void **)(v2 + v8 + 8), a2, *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100045A70(void **a1)
{
  return sub_100042B3C(a1);
}

uint64_t sub_100045A78(uint64_t a1)
{
  return sub_100042C28(a1);
}

uint64_t sub_100045A80()
{
  return sub_100043180();
}

uint64_t sub_100045A88(void **a1)
{
  return sub_100043260(a1);
}

uint64_t sub_100045A90()
{
  return sub_10000ADE8(&qword_10035E170);
}

void *sub_100045A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(sub_10000A38C(&qword_10035E170) - 8);
  unint64_t v5 = (*(void *)(v4 + 64)
      + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = *(uint64_t (**)(unsigned char *))(v2 + 16);
  uint64_t v9 = *(void *)(v2 + v5);
  uint64_t v10 = *(void *)(v2 + v5 + 8);
  uint64_t v11 = *(void *)(v2 + v6);
  uint64_t v12 = *(void **)(v2 + v6 + 8);
  uint64_t v13 = *(void **)(v2 + v7);
  unsigned int v14 = *(_DWORD *)(v2 + ((v7 + 11) & 0xFFFFFFFFFFFFFFF8));
  sub_10001639C(a1, (uint64_t)v17, &qword_10035D0E8);
  return sub_10002FCD0(v17, v8, v9, v10, v11, v12, a2, v13, v14);
}

uint64_t sub_100045BC8(uint64_t a1)
{
  return sub_10004390C(a1);
}

uint64_t sub_100045BD0(uint64_t a1, uint64_t a2)
{
  return a2;
}

__CFString *sub_100045C34(unint64_t a1)
{
  if (a1 > 9)
  {
    uint64_t v1 = @"?";
    uint64_t v2 = @"?";
  }
  else
  {
    uint64_t v1 = *(&off_100320B10 + a1);
    uint64_t v2 = *(&off_100320B60 + a1);
  }
  uint64_t v3 = v1;

  return v2;
}

unint64_t sub_100045C98()
{
  unint64_t result = qword_10035E300;
  if (!qword_10035E300)
  {
    sub_10000A3D0(&qword_10035E308);
    sub_100045D24(&qword_10035E310, (unint64_t *)&unk_100365C90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035E300);
  }
  return result;
}

uint64_t sub_100045D24(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100019E10(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100045D74()
{
  unint64_t result = qword_10035E338;
  if (!qword_10035E338)
  {
    sub_10000A3D0(&qword_10035E340);
    sub_100045D24(&qword_10035E348, &qword_10035E350);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035E338);
  }
  return result;
}

uint64_t sub_100045E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10035E158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100045E68(uint64_t a1, char a2)
{
  return sub_10004409C(a1, a2 & 1);
}

uint64_t sub_100045E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100045ED8()
{
  unint64_t result = qword_10035E398;
  if (!qword_10035E398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035E398);
  }
  return result;
}

uint64_t sub_100045F2C()
{
  return sub_10000ADE8(&qword_10035E380);
}

uint64_t sub_100045F38@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1000461AC(a1, &qword_10035E380, (uint64_t (*)(void, void, void, unint64_t, void, void, void, void, void, _DWORD))sub_10002F288, a2);
}

uint64_t sub_100045F70@<X0>(uint64_t *a1@<X8>)
{
  return sub_100041784(a1);
}

uint64_t sub_100045F8C()
{
  return sub_10000ADE8(&qword_10035E3E0);
}

uint64_t sub_100045F9C()
{
  return sub_10000ADE8(&qword_10035E3E0);
}

uint64_t sub_100045FA8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_10000A38C(&qword_10035E3E0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  *a2 = sub_1000385B4(*a1, *(uint64_t (**)(uint64_t *))(v2 + 16), *(void *)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void *)(v2 + v8), *(void **)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));

  return swift_unknownObjectRetain();
}

uint64_t sub_1000460AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100041680(a1);
}

uint64_t sub_1000460B4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000A3D0(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10004612C()
{
  unint64_t result = qword_10035E460;
  if (!qword_10035E460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035E460);
  }
  return result;
}

uint64_t sub_100046180()
{
  return sub_10000ADE8(&qword_10035E448);
}

uint64_t sub_10004618C@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1000461AC(a1, &qword_10035E448, (uint64_t (*)(void, void, void, unint64_t, void, void, void, void, void, _DWORD))sub_10002F24C, a2);
}

uint64_t sub_1000461AC@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void, void, void, unint64_t, void, void, void, void, void, _DWORD)@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v8 = *(void *)(sub_10000A38C(a2) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t result = a3(*a1, *(void *)(v4 + 16), *(void *)(v4 + 24), v4 + v9, *(void *)(v4 + v10), *(void *)(v4 + v10 + 8), *(void *)(v4 + v11), *(void *)(v4 + v11 + 8), *(void *)(v4 + ((v11 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v4 + ((((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));
  *a4 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RangingError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RangingError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000463F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RangingError()
{
  return &type metadata for RangingError;
}

unint64_t sub_10004642C()
{
  unint64_t result = qword_10035E490;
  if (!qword_10035E490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035E490);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HandoffContentType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HandoffContentType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000465ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffContentType()
{
  return &type metadata for HandoffContentType;
}

unint64_t sub_100046624(char a1)
{
  unint64_t result = 0x656D695465636146;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x636973754DLL;
      break;
    case 2:
      unint64_t result = 0x656E6F6850;
      break;
    case 3:
      unint64_t result = 0x74736163646F50;
      break;
    case 4:
      unint64_t result = 0xD000000000000019;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
      unint64_t result = 0x436E776F6E6B6E55;
      break;
    case 7:
      unint64_t result = 0x4D6E776F6E6B6E55;
      break;
    case 8:
      unint64_t result = 0x6E776F6E6B6E55;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100046758(unsigned __int8 *a1, char *a2)
{
  return sub_10005CEF4(*a1, *a2);
}

Swift::Int sub_100046764()
{
  return Hasher._finalize()();
}

uint64_t sub_1000467AC()
{
  return sub_10015E37C();
}

Swift::Int sub_1000467B4()
{
  return Hasher._finalize()();
}

unint64_t sub_1000467F8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000468AC(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100046828@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100046624(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100046858()
{
  unint64_t result = qword_10035E498;
  if (!qword_10035E498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035E498);
  }
  return result;
}

unint64_t sub_1000468AC(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10031D798, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

ValueMetadata *type metadata accessor for ViewServiceExperienceType()
{
  return &type metadata for ViewServiceExperienceType;
}

uint64_t getEnumTagSinglePayload for BoopBehavior(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BoopBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100046A6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BoopBehavior()
{
  return &type metadata for BoopBehavior;
}

uint64_t getEnumTagSinglePayload for ContextDeliveryMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HandoffBannerType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100046C00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffBannerType()
{
  return &type metadata for HandoffBannerType;
}

unsigned char *_s17proximitycontrold21HandoffExperienceTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100046D04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffExperienceType()
{
  return &type metadata for HandoffExperienceType;
}

uint64_t sub_100046D3C(char *a1, char *a2)
{
  return sub_10005C67C(*a1, *a2);
}

Swift::Int sub_100046D48()
{
  return Hasher._finalize()();
}

uint64_t sub_100046DC8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100046E34()
{
  return Hasher._finalize()();
}

uint64_t sub_100046EB0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10031D660;
  return sub_100047390(v2, a1, a2);
}

void sub_100046EBC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6572757472657061;
  if (*v1) {
    uint64_t v2 = 0x72656E6E6162;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_100046EF8(void *a1@<X8>)
{
  *a1 = &off_10031D890;
}

uint64_t sub_100046F08()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100046F68()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100046FB8()
{
  if (*v0) {
    return 0x72656E6E6142;
  }
  else {
    return 0x2063696D616E7944;
  }
}

uint64_t sub_100046FFC()
{
  return sub_100047AD0(&qword_10035E4A0, &qword_10035E4A8);
}

unint64_t sub_100047028()
{
  unint64_t result = qword_10035E4B0;
  if (!qword_10035E4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035E4B0);
  }
  return result;
}

unint64_t sub_10004707C(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 1685217635;
      break;
    case 3:
      unint64_t result = 0x6572756C696166;
      break;
    case 4:
      unint64_t result = 0x655268636E75616CLL;
      break;
    case 5:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 6:
      unint64_t result = 0x656369746F6ELL;
      break;
    case 7:
      unint64_t result = 0x6572506572616873;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    case 9:
      unint64_t result = 0x726566736E617274;
      break;
    case 11:
      unint64_t result = 1701736302;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000471D4(char *a1, char *a2)
{
  return sub_10005CC94(*a1, *a2);
}

Swift::Int sub_1000471E0()
{
  return Hasher._finalize()();
}

uint64_t sub_100047274()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000472F4()
{
  return Hasher._finalize()();
}

uint64_t sub_100047384@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10031D8B8;
  return sub_100047390(v2, a1, a2);
}

uint64_t sub_100047390@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void sub_1000473EC(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x74696D69786F7270;
  if (*v1) {
    unint64_t v2 = 0xD000000000000014;
  }
  unint64_t v3 = 0x80000001002B14A0;
  if (!*v1) {
    unint64_t v3 = 0xED00006472614379;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_10004743C(void *a1@<X8>)
{
  *a1 = &off_10031DAE0;
}

uint64_t sub_10004744C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000474AC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000474FC()
{
  if (*v0) {
    return 0xD000000000000014;
  }
  else {
    return 0x74696D69786F7270;
  }
}

uint64_t sub_100047548(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10004707C(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10004707C(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1000475D4()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10004707C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100047638()
{
  sub_10004707C(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10004768C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10004707C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1000476EC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100047BEC(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10004771C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10004707C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100047748(void *a1@<X8>)
{
  *a1 = &off_10031DA48;
}

uint64_t sub_100047758(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10005D1E8(*a1, *a2);
}

Swift::Int sub_100047764()
{
  return Hasher._finalize()();
}

uint64_t sub_1000477FC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100047880()
{
  return Hasher._finalize()();
}

unint64_t sub_100047914@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100047C38(*a1);
  *a2 = result;
  return result;
}

void sub_100047944(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x63697373616C63;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6C6C657764;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1701736302;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_100047998(void *a1@<X8>)
{
  *a1 = &off_10031DB08;
}

uint64_t sub_1000479A8()
{
  return sub_100047AD0(&qword_10035E4B8, &qword_10035E4C0);
}

unint64_t sub_1000479D4()
{
  unint64_t result = qword_10035E4C8;
  if (!qword_10035E4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035E4C8);
  }
  return result;
}

uint64_t sub_100047A28()
{
  return sub_100047AD0(&qword_10035E4D0, &qword_10035E4D8);
}

unint64_t sub_100047A54()
{
  unint64_t result = qword_10035E4E0;
  if (!qword_10035E4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035E4E0);
  }
  return result;
}

uint64_t sub_100047AA8()
{
  return sub_100047AD0(&qword_10035E4E8, &qword_10035E4F0);
}

uint64_t sub_100047AD0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000A3D0(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100047B24()
{
  unint64_t result = qword_10035E4F8;
  if (!qword_10035E4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035E4F8);
  }
  return result;
}

uint64_t sub_100047B78()
{
  uint64_t result = SBUIIsSystemApertureEnabled();
  byte_1003AC688 = result;
  return result;
}

unint64_t sub_100047B98()
{
  unint64_t result = qword_10035E500;
  if (!qword_10035E500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035E500);
  }
  return result;
}

unint64_t sub_100047BEC(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10031D908, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC) {
    return 12;
  }
  else {
    return v3;
  }
}

unint64_t sub_100047C38(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10031DA78, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_100047C84()
{
  unint64_t result = qword_10035E508;
  if (!qword_10035E508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035E508);
  }
  return result;
}

unint64_t sub_100047CE4(void *a1, uint64_t a2, uint64_t a3)
{
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  if (a3)
  {
    swift_retain_n();
    v5._uint64_t countAndFlagsBits = sub_1001F7514();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = 41;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    swift_release_n();
    uint64_t v7 = 0x2865746F6D6572;
    unint64_t v8 = 0xE700000000000000;
  }
  else
  {
    unint64_t v8 = 0xE500000000000000;
    uint64_t v7 = 0x6C61636F6CLL;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 32;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  id v11 = a1;
  v12._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 0xD000000000000016;
}

unint64_t sub_100047E40()
{
  return sub_100047CE4(*(void **)v0, *(unsigned __int8 *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_100047E58(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = a2[2];
  uint64_t result = (uint64_t)[*(id *)a1 isEqual:*a2];
  if (result)
  {
    if (v2)
    {
      if (v3)
      {
        swift_retain();
        swift_retain();
        char v5 = static UUID.== infix(_:_:)();
        swift_release();
        swift_release();
        if (v5) {
          return 1;
        }
      }
    }
    else if (!v3)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void sub_100047F00(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1819042147;
  if (*v1) {
    uint64_t v2 = 0x616964656DLL;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100047F34(char *a1, char *a2)
{
  return sub_10005CD4C(*a1, *a2);
}

id sub_100047F40(id *a1, void *a2)
{
  return [*a1 isEqual:*a2];
}

uint64_t sub_100047F68()
{
  if (!*v0) {
    return 0x6C61636F6CLL;
  }
  swift_retain();
  v1._uint64_t countAndFlagsBits = sub_1001F7514();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  swift_release();
  return 0x2865746F6D6572;
}

BOOL sub_100048008(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  BOOL result = (*a1 | *a2) == 0;
  if (v2) {
    BOOL v4 = *a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    swift_retain();
    swift_retain();
    char v5 = static UUID.== infix(_:_:)();
    swift_release();
    swift_release();
    return v5 & 1;
  }
  return result;
}

uint64_t sub_100048094(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = (uint64_t)[a1 isEqual:a4];
  if (result)
  {
    if (a3)
    {
      if (a6)
      {
        swift_retain();
        swift_retain();
        char v9 = static UUID.== infix(_:_:)();
        swift_release();
        swift_release();
        if (v9) {
          return 1;
        }
      }
    }
    else if (!a6)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TransferrableActivity.Content()
{
  return &type metadata for TransferrableActivity.Content;
}

uint64_t destroy for TransferrableActivity(id *a1)
{
  return swift_release();
}

uint64_t _s17proximitycontrold21TransferrableActivityVwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  id v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TransferrableActivity(uint64_t a1, uint64_t a2)
{
  char v4 = *(void **)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  Swift::String v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v5;
  id v7 = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TransferrableActivity(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  char v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TransferrableActivity(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TransferrableActivity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransferrableActivity()
{
  return &type metadata for TransferrableActivity;
}

void *initializeBufferWithCopyOfBuffer for TransferrableActivity.Host(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for TransferrableActivity.Host()
{
  return swift_release();
}

void *assignWithCopy for TransferrableActivity.Host(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for TransferrableActivity.Host(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCLinkRole(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for XPCLinkRole(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t sub_10004848C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000484A4(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for TransferrableActivity.Host()
{
  return &type metadata for TransferrableActivity.Host;
}

id sub_1000484D8(void *a1, void *a2)
{
  v2[OBJC_IVAR____TtC17proximitycontrold13XPCConnection_unitTesting] = 0;
  uint64_t v5 = OBJC_IVAR____TtC17proximitycontrold13XPCConnection_lockscreenAgent;
  uint64_t v6 = qword_10035A4E8;
  id v7 = v2;
  if (v6 != -1) {
    swift_once();
  }
  *(void *)&v2[v5] = qword_1003AC5D0;
  *(void *)&v7[OBJC_IVAR____TtC17proximitycontrold13XPCConnection_lockscreenObserver] = 0;
  uint64_t v8 = (uint64_t)&v7[OBJC_IVAR____TtC17proximitycontrold13XPCConnection_activityServer];
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(void *)(v8 + 32) = 0;
  *(void *)&v7[OBJC_IVAR____TtC17proximitycontrold13XPCConnection_activityClient] = 0;
  *(void *)&v7[OBJC_IVAR____TtC17proximitycontrold13XPCConnection_mediaTransferObserver] = 0;
  *(void *)&v7[OBJC_IVAR____TtC17proximitycontrold13XPCConnection_mediaTransferObserverTask] = 0;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    swift_retain();
LABEL_8:
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    goto LABEL_9;
  }
  Swift::String v10 = (void *)Strong;
  id v11 = *(void **)(Strong + OBJC_IVAR___Application_handoff3Agent);
  Swift::String v12 = v11;
  swift_retain();

  if (!v11) {
    goto LABEL_8;
  }
  uint64_t v13 = *(void *)&v12[OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_environment];
  swift_retain();

  if (!v13) {
    goto LABEL_8;
  }
  unsigned int v14 = sub_10011A030();
  swift_release();
  *((void *)&v29 + 1) = type metadata accessor for ActivityProxy();
  uint64_t v30 = &off_100322D38;
  *(void *)&long long v28 = v14;
LABEL_9:
  swift_beginAccess();
  sub_10004C478((uint64_t)&v28, v8);
  swift_endAccess();
  *(void *)&v7[OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx] = a1;
  *(void *)&v7[OBJC_IVAR____TtC17proximitycontrold13XPCConnection_xpcServer] = a2;
  id v15 = a1;
  id v16 = a2;

  v27.receiver = v7;
  v27.super_class = (Class)type metadata accessor for XPCConnection();
  id v17 = [super init];
  *(void *)&long long v28 = 0;
  *((void *)&v28 + 1) = 0xE000000000000000;
  id v18 = v17;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  *(void *)&long long v28 = 0xD00000000000001BLL;
  *((void *)&v28 + 1) = 0x80000001002B4390;
  id v19 = [v15 description];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  v23._uint64_t countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  id v24 = sub_1001F65A0();
  swift_bridgeObjectRetain();
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v24 ulog:40 message:v25];
  swift_bridgeObjectRelease();

  return v18;
}

void sub_100048890()
{
  uint64_t v1 = v0;
  id v2 = sub_1001F65A0();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  [*(id *)(v1 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx) invalidate];
  uint64_t v4 = OBJC_IVAR____TtC17proximitycontrold13XPCConnection_activityClient;
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_activityClient);
  if (v5)
  {
    uint64_t v6 = v1 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_activityServer;
    swift_beginAccess();
    sub_10004D3D0(v6, (uint64_t)&v22);
    if (*((void *)&v23 + 1))
    {
      sub_1000291F4((uint64_t)&v22, (uint64_t)v21);
      id v7 = v5;
      sub_10000D78C((uint64_t)&v22, (uint64_t *)&unk_10035E760);
      sub_10000D6E4(v21, v21[3]);
      sub_100084968(v7);

      sub_10000CC5C((uint64_t)v21);
    }
    else
    {
      sub_10000D78C((uint64_t)&v22, (uint64_t *)&unk_10035E760);
    }
  }
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v8 = v1 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_activityServer;
  swift_beginAccess();
  sub_10004C478((uint64_t)&v22, v8);
  swift_endAccess();
  char v9 = *(void **)(v1 + v4);
  if (v9)
  {
    [v9 setActivityDataUpdateHandler:0];
    Swift::String v10 = *(void **)(v1 + v4);
  }
  else
  {
    Swift::String v10 = 0;
  }
  *(void *)(v1 + v4) = 0;

  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_mediaTransferObserverTask) = 0;
  swift_release();
  id v11 = *(void **)(v1 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_lockscreenObserver);
  if (v11)
  {
    *(void *)&long long v22 = 0x676E69766F6D6552;
    *((void *)&v22 + 1) = 0xE900000000000020;
    id v12 = v11;
    id v13 = [v12 description];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v16 = v15;

    v17._uint64_t countAndFlagsBits = v14;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    id v18 = sub_1001F5FF4();
    swift_bridgeObjectRetain();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 ulog:40 message:v19];
    swift_bridgeObjectRelease();

    swift_retain();
    uint64_t v20 = (void *)sub_10021252C((uint64_t)v12);

    swift_release();
  }
}

id sub_100048B40()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for XPCConnection();
  return [super dealloc];
}

uint64_t type metadata accessor for XPCConnection()
{
  return self;
}

uint64_t sub_100048C4C(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t ObjectType = swift_getObjectType();
  id v9 = sub_1001F65A0();
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 ulog:40 message:v10];

  if ((sub_1000B72CC(5, *(void **)&v4[OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx]) & 1) == 0)
  {
    *(void *)&long long v30 = 0;
    *((void *)&v30 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    sub_10001A050();
    uint64_t v12 = swift_allocError();
    *(void *)uint64_t v13 = 0xD000000000000040;
    *(void *)(v13 + 8) = 0x80000001002B4940;
    *(unsigned char *)(v13 + 16) = 5;
    goto LABEL_5;
  }
  uint64_t v11 = OBJC_IVAR____TtC17proximitycontrold13XPCConnection_activityClient;
  if (*(void *)&v4[OBJC_IVAR____TtC17proximitycontrold13XPCConnection_activityClient])
  {
    sub_10001A050();
    uint64_t v12 = swift_allocError();
    *(void *)uint64_t v13 = 0xD000000000000030;
    *(void *)(v13 + 8) = 0x80000001002B4440;
    *(unsigned char *)(v13 + 16) = 2;
LABEL_5:
    ((void (*)(uint64_t, uint64_t))a2)(v12, v13);
    return swift_errorRelease();
  }
  uint64_t v15 = (uint64_t)&v4[OBJC_IVAR____TtC17proximitycontrold13XPCConnection_activityServer];
  swift_beginAccess();
  sub_10004D3D0(v15, (uint64_t)&v30);
  if (v32)
  {
    sub_10000D7E8(&v30, (uint64_t)v35);
    *(void *)&long long v30 = 0;
    *((void *)&v30 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    id v16 = [a1 description];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v19 = v18;

    v20._uint64_t countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    id v21 = sub_1001F65A0();
    swift_bridgeObjectRetain();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v21 ulog:40 message:v22];
    swift_bridgeObjectRelease();

    if ((v4[OBJC_IVAR____TtC17proximitycontrold13XPCConnection_unitTesting] & 1) == 0)
    {
      uint64_t v23 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = ObjectType;
      Swift::String v33 = sub_10004D438;
      uint64_t v34 = v24;
      *(void *)&long long v30 = _NSConcreteStackBlock;
      *((void *)&v30 + 1) = 1107296256;
      uint64_t v31 = sub_100049C50;
      uint64_t v32 = &unk_1003214F8;
      NSString v25 = _Block_copy(&v30);
      swift_release();
      [a1 setActivityDataUpdateHandler:v25];
      _Block_release(v25);
    }
    uint64_t v26 = *(void **)&v4[v11];
    *(void *)&v4[v11] = a1;
    id v27 = a1;

    long long v28 = sub_10000D6E4(v35, v35[3]);
    sub_10004C4E0(v27, a2, a3, v4, *v28);
    ((void (*)(void))a2)(0);
    return sub_10000CC5C((uint64_t)v35);
  }
  else
  {
    sub_10000D78C((uint64_t)&v30, (uint64_t *)&unk_10035E760);
    sub_10001A050();
    swift_allocError();
    *(void *)uint64_t v29 = 0xD000000000000012;
    *(void *)(v29 + 8) = 0x80000001002B4990;
    *(unsigned char *)(v29 + 16) = 9;
    a2();
    return swift_errorRelease();
  }
}

void sub_1000490C4(uint64_t a1)
{
}

void sub_100049158(uint64_t a1)
{
}

void sub_1000491EC(uint64_t a1)
{
}

void sub_100049204(uint64_t a1, void (*a2)(void))
{
  id v4 = sub_1001F65A0();
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 ulog:40 message:v5];

  if ((sub_1000B72CC(5, *(void **)(v2 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx)) & 1) != 0
    && (uint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_activityClient)) != 0)
  {
    uint64_t v7 = v2 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_activityServer;
    swift_beginAccess();
    sub_10004D3D0(v7, (uint64_t)&v14);
    if (v15)
    {
      sub_10000D7E8(&v14, (uint64_t)v16);
      sub_10000D6E4(v16, v16[3]);
      id v8 = v6;
      a2();

      sub_10000CC5C((uint64_t)v16);
    }
    else
    {
      id v10 = v6;
      sub_10000D78C((uint64_t)&v14, (uint64_t *)&unk_10035E760);
      id v11 = sub_1001F65A0();
      NSString v12 = String._bridgeToObjectiveC()();
      [v11 ulog:90 message:v12];
    }
  }
  else
  {
    id v9 = sub_1001F65A0();
    NSString v13 = String._bridgeToObjectiveC()();
    [v9 ulog:90 message:v13];
  }
}

void sub_100049490(uint64_t a1)
{
}

void sub_1000494A8(uint64_t a1, void (*a2)(void))
{
  id v4 = sub_1001F65A0();
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 ulog:40 message:v5];

  if ((sub_1000B72CC(5, *(void **)(v2 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx)) & 1) != 0
    && (uint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_activityClient)) != 0)
  {
    uint64_t v7 = v2 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_activityServer;
    swift_beginAccess();
    sub_10004D3D0(v7, (uint64_t)&v14);
    if (v15)
    {
      sub_10000D7E8(&v14, (uint64_t)v16);
      sub_10000D6E4(v16, v16[3]);
      id v8 = v6;
      a2();

      sub_10000CC5C((uint64_t)v16);
    }
    else
    {
      id v10 = v6;
      sub_10000D78C((uint64_t)&v14, (uint64_t *)&unk_10035E760);
      id v11 = sub_1001F65A0();
      NSString v12 = String._bridgeToObjectiveC()();
      [v11 ulog:90 message:v12];
    }
  }
  else
  {
    id v9 = sub_1001F65A0();
    NSString v13 = String._bridgeToObjectiveC()();
    [v9 ulog:90 message:v13];
  }
}

void sub_100049734()
{
  id v1 = sub_1001F65A0();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  if ((sub_1000B72CC(5, *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx)) & 1) != 0
    && (NSString v3 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_activityClient)) != 0)
  {
    uint64_t v4 = v0 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_activityServer;
    swift_beginAccess();
    sub_10004D3D0(v4, (uint64_t)&v11);
    if (v12)
    {
      sub_10000D7E8(&v11, (uint64_t)v13);
      sub_10000D6E4(v13, v13[3]);
      id v5 = v3;
      sub_100084708(v5);

      sub_10000CC5C((uint64_t)v13);
    }
    else
    {
      id v7 = v3;
      sub_10000D78C((uint64_t)&v11, (uint64_t *)&unk_10035E760);
      id v8 = sub_1001F65A0();
      NSString v9 = String._bridgeToObjectiveC()();
      [v8 ulog:90 message:v9];
    }
  }
  else
  {
    id v6 = sub_1001F65A0();
    NSString v10 = String._bridgeToObjectiveC()();
    [v6 ulog:90 message:v10];
  }
}

void sub_100049970(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    strcpy((char *)v25, "homeKitID=");
    BYTE3(v25[1]) = 0;
    HIDWORD(v25[1]) = -369098752;
    id v10 = a1;
    id v11 = [v10 description];
LABEL_5:
    id v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);

    swift_bridgeObjectRelease();
    uint64_t v17 = v25[0];
    id v18 = (void *)v25[1];
    goto LABEL_6;
  }
  if (a2)
  {
    id v10 = a2;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v25, "mediaRemoteID=");
    HIBYTE(v25[1]) = -18;
    id v11 = [v10 description];
    goto LABEL_5;
  }
  uint64_t v17 = 0xD000000000000035;
  id v18 = (void *)0x80000001002B4B00;
LABEL_6:
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v25[0] = 0xD00000000000001DLL;
  v25[1] = 0x80000001002B4B40;
  v19._uint64_t countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  sub_10016ABE4(0xD00000000000001DLL, (void *)0x80000001002B4B40, 0, a6, (uint64_t)&off_100321178);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v21 = (void *)Strong;
    id v22 = [*(id *)(Strong + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx) remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10000A38C(&qword_10035E7D0);
    if (swift_dynamicCast())
    {
      [v24 updateHomeKitID:a1 mediaRemoteID:a2 withActivities:a3 disambiguationContext:a4];

      swift_unknownObjectRelease();
    }
    else
    {
      sub_10016AE10(90, 0xD000000000000036, (void *)0x80000001002B4BA0, 0, a6, (uint64_t)&off_100321178);
    }
  }
  else
  {
    sub_10016AE10(90, 0xD000000000000031, (void *)0x80000001002B4B60, 0, a6, (uint64_t)&off_100321178);
  }
}

void sub_100049C50(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  NSString v9 = *(void (**)(void *, void *, id, id))(a1 + 32);
  swift_retain();
  id v13 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  v9(a2, a3, v11, v12);
  swift_release();
}

void sub_100049D0C()
{
  id v1 = sub_1001F65A0();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  if ((sub_1000B72CC(5, *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx)) & 1) == 0)
  {
    id v3 = sub_1001F65A0();
    NSString v4 = String._bridgeToObjectiveC()();
    [v3 ulog:90 message:v4];
  }
}

void sub_100049E58(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  id v27 = *(void (***)(char *, uint64_t))(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (char *)&ObjectType - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  NSString v9 = (char *)&ObjectType - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock = 0;
  unint64_t v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  aBlock = (void **)0xD00000000000002CLL;
  unint64_t v30 = 0x80000001002B4790;
  id v10 = [a1 description];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v13 = v12;

  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  id v15 = sub_1001F65A0();
  swift_bridgeObjectRetain();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 ulog:40 message:v16];
  swift_bridgeObjectRelease();

  if (sub_1000B72CC(5, *(void **)(v2 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx)))
  {
    if (qword_10035A628 != -1) {
      swift_once();
    }
    uint64_t v17 = (void *)qword_1003ACB50;
    uint64_t v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    Swift::String v19 = (void *)swift_allocObject();
    _OWORD v19[2] = v18;
    void v19[3] = a1;
    v19[4] = ObjectType;
    Swift::String v33 = sub_10004D2FC;
    uint64_t v34 = v19;
    aBlock = _NSConcreteStackBlock;
    unint64_t v30 = 1107296256;
    uint64_t v31 = sub_10007A0AC;
    uint64_t v32 = &unk_100321480;
    Swift::String v20 = _Block_copy(&aBlock);
    id v21 = v17;
    swift_retain();
    id v22 = a1;
    static DispatchQoS.unspecified.getter();
    long long v28 = _swiftEmptyArrayStorage;
    sub_10004D1C4();
    sub_10000A38C((uint64_t *)&unk_10035E800);
    sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v20);

    v27[1](v6, v4);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v26);
    swift_release();
    swift_release();
  }
  else
  {
    id v23 = sub_1001F65A0();
    id v27 = (void (**)(char *, uint64_t))String._bridgeToObjectiveC()();
    [v23 ulog:90 message:v27];

    uint64_t v24 = v27;
  }
}

void sub_10004A2D4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = sub_10000A38C((uint64_t *)&unk_10035E840);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ExperienceEvent(0);
  __chkstk_darwin(v8);
  id v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v12 = (void *)Strong;
    uint64_t v13 = swift_unknownObjectWeakLoadStrong();
    if (v13
      && (Swift::String v14 = (void *)v13,
          id v15 = *(void **)(v13 + OBJC_IVAR___Application_handoff3Agent),
          NSString v16 = v15,
          v14,
          v15)
      && (uint64_t v17 = *(void *)&v16[OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_environment],
          swift_retain(),
          v16,
          v17))
    {
      uint64_t v32 = v17;
      sub_1001252B0();
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      if (v33)
      {
        swift_retain();
        uint64_t v18 = UUID.uuidString.getter();
        uint64_t v30 = v19;
        uint64_t v31 = v18;
        swift_release();
        uint64_t v33 = 0x3D747865746E6F63;
        unint64_t v34 = 0xE800000000000000;
        id v20 = [a2 description];
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v23 = v22;

        v24._uint64_t countAndFlagsBits = v21;
        v24._object = v23;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        uint64_t v25 = v33;
        unint64_t v26 = v34;
        *(void *)id v10 = 5;
        *(_OWORD *)(v10 + 8) = 0u;
        *(_OWORD *)(v10 + 24) = 0u;
        *(_OWORD *)(v10 + 40) = 0u;
        v10[56] = 66;
        swift_storeEnumTagMultiPayload();
        id v27 = &v7[*(int *)(v5 + 48)];
        long long v28 = &v7[*(int *)(v5 + 64)];
        sub_10004D310((uint64_t)v10, (uint64_t)v7);
        uint64_t v29 = v30;
        *(void *)id v27 = v31;
        *((void *)v27 + 1) = v29;
        *(void *)long long v28 = v25;
        *((void *)v28 + 1) = v26;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        PassthroughSubject.send(_:)();
        sub_10000D78C((uint64_t)v7, (uint64_t *)&unk_10035E840);
        sub_10004D374((uint64_t)v10);

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_10016AE10(60, 0x73206F4E20232323, (void *)0xEF3F6E6F69737365, 0, a3, (uint64_t)&off_100321178);

        swift_release();
      }
    }
    else
    {
      sub_10016AE10(60, 0xD000000000000044, (void *)0x80000001002B4800, 0, a3, (uint64_t)&off_100321178);
    }
  }
}

void sub_10004A740()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  id v3 = sub_1001F65A0();
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 ulog:40 message:v4];

  id v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx), "remoteObjectProxy"));
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10000A38C(&qword_10035E7D0);
  if (swift_dynamicCast())
  {
    id v6 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                               + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_xpcServer), "description"));
    [v7 handleState:v6];
    swift_unknownObjectRelease();
  }
  else
  {
    sub_10016AE10(90, 0xD000000000000018, (void *)0x80000001002B46D0, 0, ObjectType, (uint64_t)&off_100321178);
  }
}

uint64_t sub_10004A90C(uint64_t a1, uint64_t a2)
{
  if (qword_10035A5E0 != -1) {
    swift_once();
  }
  dispatch_semaphore_t v4 = dispatch_semaphore_create(0);
  sub_10000A38C(&qword_10035E810);
  sub_10000B010(&qword_10035E818, &qword_10035E810);
  Publisher.share()();
  sub_10000A38C(&qword_10035E820);
  sub_10000B010(&qword_10035E828, &qword_10035E820);
  Publisher.eraseToAnyPublisher()();
  swift_release();
  id v5 = (void *)swift_allocObject();
  void v5[2] = a1;
  v5[3] = a2;
  void v5[4] = v4;
  swift_retain();
  id v6 = v4;
  sub_10000A38C(&qword_10035E830);
  sub_10000B010(&qword_10035E838, &qword_10035E830);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  sub_1001BA62C(1);
  OS_dispatch_semaphore.wait()();
  AnyCancellable.cancel()();

  return swift_release();
}

void sub_10004AB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v4 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = (id)v4;
  (*(void (**)(uint64_t))(a3 + 16))(a3);
}

void sub_10004AC20(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  id v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);
}

uint64_t sub_10004AC9C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  id v5 = sub_1001F65A0();
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 ulog:40 message:v6];

  id v7 = sub_10016B098(ObjectType, (uint64_t)&off_100321178);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0xD000000000000011;
  v8[3] = 0x80000001002B4710;
  v8[4] = v7;
  v11[4] = sub_10004D170;
  v11[5] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_100119FC4;
  v11[3] = &unk_100321390;
  uint64_t v9 = _Block_copy(v11);
  swift_retain();
  swift_release();
  [v2 observer:a1 activateWithCompletion:v9];
  _Block_release(v9);
  return swift_release();
}

uint64_t sub_10004AEDC(void *a1, void (*a2)(uint64_t))
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  id v7 = sub_1001F65A0();
  NSString v8 = String._bridgeToObjectiveC()();
  [v7 ulog:40 message:v8];

  if (sub_1000B72CC(3, *(void **)(v3 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx)))
  {
    uint64_t v42 = &type metadata for Feature;
    unint64_t v43 = sub_10000CC08();
    LOBYTE(v39) = 5;
    char v9 = isFeatureEnabled(_:)();
    sub_10000CC5C((uint64_t)&v39);
    if ((v9 & 1) == 0)
    {
      sub_10001A050();
      uint64_t v11 = swift_allocError();
      *(void *)uint64_t v12 = 0xD000000000000018;
      *(void *)(v12 + 8) = 0x80000001002B45F0;
      char v13 = 12;
      goto LABEL_9;
    }
    uint64_t v10 = OBJC_IVAR____TtC17proximitycontrold13XPCConnection_lockscreenObserver;
    if (*(void *)(v3 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_lockscreenObserver))
    {
      sub_10001A050();
      uint64_t v11 = swift_allocError();
      *(void *)uint64_t v12 = 0xD000000000000030;
      *(void *)(v12 + 8) = 0x80000001002B4440;
      char v13 = 2;
LABEL_9:
      *(unsigned char *)(v12 + 16) = v13;
      a2(v11);
      return swift_errorRelease();
    }
    unsigned __int8 v39 = 0;
    unint64_t v40 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    id v17 = [a1 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v20 = v19;

    v21._uint64_t countAndFlagsBits = v18;
    v21._object = v20;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    id v22 = sub_1001F65A0();
    swift_bridgeObjectRetain();
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v22 ulog:40 message:v23];
    swift_bridgeObjectRelease();

    uint64_t v24 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v24;
    *(void *)(v25 + 24) = ObjectType;
    unint64_t v43 = (unint64_t)sub_10004CA6C;
    uint64_t v44 = v25;
    unsigned __int8 v39 = _NSConcreteStackBlock;
    unint64_t v40 = 1107296256;
    unsigned __int8 v41 = sub_10004B62C;
    uint64_t v42 = (ValueMetadata *)&unk_1003212F0;
    unint64_t v26 = _Block_copy(&v39);
    swift_release();
    [a1 setDeviceLost:v26];
    _Block_release(v26);
    uint64_t v27 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = v27;
    *(void *)(v28 + 24) = ObjectType;
    unint64_t v43 = (unint64_t)sub_10004CA74;
    uint64_t v44 = v28;
    unsigned __int8 v39 = _NSConcreteStackBlock;
    unint64_t v40 = 1107296256;
    unsigned __int8 v41 = sub_10004B62C;
    uint64_t v42 = (ValueMetadata *)&unk_100321340;
    uint64_t v29 = _Block_copy(&v39);
    swift_release();
    [a1 setDeviceUpdated:v29];
    _Block_release(v29);
    uint64_t v30 = *(void **)(v3 + v10);
    *(void *)(v3 + v10) = a1;
    id v31 = a1;

    id v32 = [v31 descriptionWithFormat:@"%@%@", @"\x2067\x6E\x69\x64\x64\x41", @"\xE7\x00\x00\x00\x00\x00\x00\x00\x00"];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    v36._uint64_t countAndFlagsBits = v33;
    v36._object = v35;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    id v37 = sub_1001F5FF4();
    swift_bridgeObjectRetain();
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v37 ulog:40 message:v38];
    swift_bridgeObjectRelease();

    swift_retain();
    sub_100121EF4(v31);
    swift_release();
    return ((uint64_t (*)(void))a2)(0);
  }
  else
  {
    unsigned __int8 v39 = 0;
    unint64_t v40 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    sub_10001A050();
    uint64_t v14 = swift_allocError();
    *(void *)uint64_t v15 = 0xD000000000000044;
    *(void *)(v15 + 8) = 0x80000001002B45A0;
    *(unsigned char *)(v15 + 16) = 5;
    ((void (*)(uint64_t, uint64_t))a2)(v14, v15);
    return swift_errorRelease();
  }
}

void sub_10004B45C(void *a1, uint64_t a2, uint64_t a3)
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  id v5 = [a1 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v8 = v7;

  v9._uint64_t countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  sub_10016ABE4(0xD000000000000011, (void *)0x80000001002B46B0, 0, a3, (uint64_t)&off_100321178);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    id v12 = [*(id *)(Strong + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx) remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10000A38C(&qword_10035E7D0);
    if (swift_dynamicCast())
    {

      [v13 deviceLost:a1];
      swift_unknownObjectRelease();
      return;
    }
  }
  sub_10016AE10(90, 0xD000000000000018, (void *)0x80000001002B46D0, 0, a3, (uint64_t)&off_100321178);
}

void sub_10004B62C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_10004B694(void *a1, uint64_t a2, uint64_t a3)
{
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  id v5 = [a1 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v8 = v7;

  v9._uint64_t countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  sub_10016ABE4(0xD000000000000013, (void *)0x80000001002B4670, 0, a3, (uint64_t)&off_100321178);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    id v12 = [*(id *)(Strong + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx) remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10000A38C(&qword_10035E7D0);
    if (swift_dynamicCast())
    {

      [v13 deviceUpdated:a1];
      swift_unknownObjectRelease();
      return;
    }
  }
  sub_10016AE10(90, 0xD00000000000001BLL, (void *)0x80000001002B4690, 0, a3, (uint64_t)&off_100321178);
}

uint64_t sub_10004B900()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)0xEB00000000646970;
  uint64_t v3 = 0x206E776F6E6B6E55;
  sub_10000A38C((uint64_t *)&unk_10035E7E0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10028D430;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v27, "XPCConnection ");
  HIBYTE(v27[1]) = -18;
  id v5 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_lockscreenObserver);
  if (v5)
  {
    id v6 = v5;
    id v7 = [v6 processName];
    if (v7)
    {
      NSString v8 = v7;
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v2 = v9;

      id v10 = sub_1001F65A0();
      NSString v11 = String._bridgeToObjectiveC()();
      [v10 ulog:40 message:v11];

      id v6 = v11;
    }
  }
  v12._uint64_t countAndFlagsBits = v3;
  v12._object = v2;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = v27[1];
  *(void *)(v4 + 32) = v27[0];
  *(void *)(v4 + 40) = v13;
  id v14 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                              + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx), "serviceName"));
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    strcpy((char *)v27, "service=");
    BYTE1(v27[1]) = 0;
    WORD1(v27[1]) = 0;
    HIDWORD(v27[1]) = -402653184;
    v19._uint64_t countAndFlagsBits = v16;
    v19._object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    uint64_t v20 = v27[0];
    uint64_t v21 = v27[1];
    unint64_t v23 = *(void *)(v4 + 16);
    unint64_t v22 = *(void *)(v4 + 24);
    if (v23 >= v22 >> 1) {
      uint64_t v4 = (uint64_t)sub_10008892C((char *)(v22 > 1), v23 + 1, 1, (char *)v4);
    }
    *(void *)(v4 + 16) = v23 + 1;
    uint64_t v24 = v4 + 16 * v23;
    *(void *)(v24 + 32) = v20;
    *(void *)(v24 + 40) = v21;
  }
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_10000B010((unint64_t *)&qword_10035E7F0, (uint64_t *)&unk_100367D40);
  uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_10004BB8C(void *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  id v7 = sub_1001F65A0();
  NSString v8 = String._bridgeToObjectiveC()();
  [v7 ulog:40 message:v8];

  if (sub_1000B72CC(4, *(void **)(v3 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx)))
  {
    uint64_t v9 = OBJC_IVAR____TtC17proximitycontrold13XPCConnection_mediaTransferObserver;
    if (!*(void *)(v3 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_mediaTransferObserver))
    {
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      id v14 = [a1 description:0xD000000000000027, 0x80000001002B4480];
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v17 = v16;

      v18._uint64_t countAndFlagsBits = v15;
      v18._object = v17;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      id v19 = sub_1001F65A0();
      swift_bridgeObjectRetain();
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v19 ulog:40 message:v20];
      swift_bridgeObjectRelease();

      uint64_t v21 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = ObjectType;
      uint64_t v33 = sub_10004CA44;
      uint64_t v34 = v22;
      uint64_t v29 = _NSConcreteStackBlock;
      unint64_t v30 = 1107296256;
      id v31 = sub_10004C1E8;
      id v32 = &unk_100321228;
      unint64_t v23 = _Block_copy(&v29);
      swift_release();
      [a1 setTransferBeganHandler:v23];
      _Block_release(v23);
      uint64_t v24 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = ObjectType;
      uint64_t v33 = sub_10004CA64;
      uint64_t v34 = v25;
      uint64_t v29 = _NSConcreteStackBlock;
      unint64_t v30 = 1107296256;
      id v31 = sub_10007A0AC;
      id v32 = &unk_100321278;
      unint64_t v26 = _Block_copy(&v29);
      swift_release();
      [a1 setTransferEndedHandler:v26];
      _Block_release(v26);
      uint64_t v27 = *(void **)(v3 + v9);
      *(void *)(v3 + v9) = a1;
      id v28 = a1;

      return ((uint64_t (*)(void))a2)(0);
    }
    sub_10001A050();
    uint64_t v10 = swift_allocError();
    *(void *)uint64_t v11 = 0xD000000000000030;
    *(void *)(v11 + 8) = 0x80000001002B4440;
    char v12 = 2;
  }
  else
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    sub_10001A050();
    uint64_t v10 = swift_allocError();
    *(void *)uint64_t v11 = 0xD000000000000047;
    *(void *)(v11 + 8) = 0x80000001002B43F0;
    char v12 = 5;
  }
  *(unsigned char *)(v11 + 16) = v12;
  a2(v10, v11);

  return swift_errorRelease();
}

void sub_10004BFAC(void *a1, uint64_t a2, uint64_t a3)
{
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  sub_10000A38C(&qword_10035E7D8);
  Optional.unwrap(_:file:line:)();
  id v5 = [v13 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v8 = v7;

  v9._uint64_t countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);

  swift_bridgeObjectRelease();
  sub_10016ABE4(0xD000000000000014, (void *)0x80000001002B4500, 0, a3, (uint64_t)&off_100321178);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    id v12 = [*(id *)(Strong + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx) remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10000A38C(&qword_10035E7D0);
    if (swift_dynamicCast())
    {

      [a1 transferBeganWithContext:a1];
      swift_unknownObjectRelease();
      return;
    }
  }
  sub_10016AE10(90, 0xD000000000000012, (void *)0x80000001002B44E0, 0, a3, (uint64_t)&off_100321178);
}

uint64_t sub_10004C1D8()
{
  return 7104878;
}

void sub_10004C1E8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void sub_10004C254(uint64_t a1, uint64_t a2)
{
  sub_10016ABE4(0x726566736E617254, (void *)0xEE006465646E6520, 0, a2, (uint64_t)&off_100321178);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v4 = (void *)Strong;
    id v5 = [*(id *)(Strong + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx) remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10000A38C(&qword_10035E7D0);
    if (swift_dynamicCast())
    {

      [v6 transferEnded];
      swift_unknownObjectRelease();
      return;
    }
  }
  sub_10016AE10(90, 0xD000000000000012, (void *)0x80000001002B44E0, 0, a2, (uint64_t)&off_100321178);
}

uint64_t sub_10004C3D0(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  id v13 = a3;
  id v14 = a1;
  a7(v13, a6, v12);

  return swift_release();
}

uint64_t sub_10004C478(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C((uint64_t *)&unk_10035E760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004C4E0(void *a1, void (*a2)(void), uint64_t a3, void *a4, uint64_t a5)
{
  id v9 = [a1 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  v13._uint64_t countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  id v14 = sub_1001F5DFC();
  swift_bridgeObjectRetain();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 ulog:40 message:v15];
  swift_bridgeObjectRelease();

  swift_retain();
  uint64_t v16 = sub_100124774((uint64_t)a1);
  swift_release();
  swift_release();
  if (!v16)
  {
    unint64_t v40 = a1;
    unsigned __int8 v41 = a4;
    uint64_t v42 = a2;
    uint64_t v19 = *(void *)(a5 + 32);
    NSString v20 = *(void **)(v19 + 32);
    swift_retain();
    [v20 lock];
    swift_beginAccess();
    uint64_t v21 = swift_bridgeObjectRetain();
    unint64_t v22 = (unint64_t)sub_1000F06FC(v21);
    swift_bridgeObjectRelease();
    [*(id *)(v19 + 32) unlock];
    uint64_t result = swift_release();
    if ((v22 & 0x8000000000000000) != 0 || (v22 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_release();
      uint64_t v43 = v35;
      if (!v35) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v43 = *(void *)(v22 + 16);
      if (!v43) {
        goto LABEL_15;
      }
    }
    if (v43 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v23 = 0;
    unint64_t v24 = v22 & 0xC000000000000001;
    uint64_t v25 = (void *)v22;
    do
    {
      if (v24)
      {
        uint64_t v26 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v26 = *(void *)(v22 + 8 * v23 + 32);
        swift_retain();
      }
      ++v23;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      id v27 = *(id *)(v26 + 16);
      id v28 = [v27 description:v40, v41];
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v31 = v30;

      v32._uint64_t countAndFlagsBits = v29;
      v32._object = v31;
      String.append(_:)(v32);

      swift_bridgeObjectRelease();
      id v33 = sub_1001F5DFC();
      swift_bridgeObjectRetain();
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v33 ulog:60 message:v34];
      swift_bridgeObjectRelease();

      [*(id *)(v26 + 16) invalidate];
      swift_retain();
      sub_10021255C(v26);
      swift_release();
      swift_release();
      swift_release();
      unint64_t v22 = (unint64_t)v25;
    }
    while (v43 != v23);
LABEL_15:
    swift_release();
    type metadata accessor for ActivityProxyClientContext();
    Swift::String v36 = (uint64_t *)swift_allocObject();
    uint64_t v37 = *v36;
    v36[5] = (uint64_t)&_swiftEmptyDictionarySingleton;
    v36[6] = (uint64_t)&_swiftEmptyDictionarySingleton;
    id v38 = v40;
    id v39 = v41;
    sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v37, (uint64_t)&off_100322DF8);
    void v36[2] = (uint64_t)v38;
    v36[3] = (uint64_t)v39;
    v36[4] = (uint64_t)&off_100321168;
    swift_retain();
    sub_100121F30((uint64_t)v36);
    swift_release();
    ((void (*)(void))v42)(0);
    return swift_release();
  }
  sub_10001A050();
  swift_allocError();
  *(void *)uint64_t v17 = 0xD000000000000032;
  *(void *)(v17 + 8) = 0x80000001002B4A90;
  *(unsigned char *)(v17 + 16) = 2;
  a2();

  return swift_errorRelease();
}

uint64_t sub_10004C994()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10004C9CC(uint64_t a1)
{
  sub_100222D54(a1, *(void *)(v1 + 16));
}

uint64_t sub_10004C9D4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004CA0C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10004CA44(void *a1)
{
  sub_10004BFAC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10004CA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004CA5C()
{
  return swift_release();
}

void sub_10004CA64()
{
  sub_10004C254(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10004CA6C(void *a1)
{
  sub_10004B45C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_10004CA74(void *a1)
{
  sub_10004B694(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_10004CA7C(uint64_t a1, uint64_t a2)
{
  if (sub_1000B72CC(0, *(void **)(a1 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx)))
  {
    id v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                               + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_xpcServer), "description"));
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v7 = String._bridgeToObjectiveC()();
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v5 = sub_1001F65A0();
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 ulog:90 message:v6];

    NSString v7 = String._bridgeToObjectiveC()();
    (*(void (**)(uint64_t))(a2 + 16))(a2);
  }
}

uint64_t sub_10004CBAC(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = a1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  NSString v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A34C();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  Swift::String v13 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v17;
  *(void *)(v14 + 24) = a2;
  aBlock[4] = sub_10004D1BC;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_100321408;
  NSString v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  NSString v20 = _swiftEmptyArrayStorage;
  sub_10004D1C4();
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v18);
  return swift_release();
}

void sub_10004CF14(uint64_t a1, uint64_t a2)
{
  if (sub_1000B72CC(0, *(void **)(a1 + OBJC_IVAR____TtC17proximitycontrold13XPCConnection_internalCnx)))
  {
    if (qword_10035A4E8 != -1) {
      swift_once();
    }
    sub_10002C618();
    uint64_t v3 = *(void (**)(uint64_t, void))(a2 + 16);
    v3(a2, 0);
  }
  else
  {
    id v4 = sub_1001F65A0();
    NSString v5 = String._bridgeToObjectiveC()();
    [v4 ulog:90 message:v5];
  }
}

void sub_10004D018(void *a1)
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  id v2 = [a1 description:0xD000000000000012, 0x80000001002B46F0];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  id v7 = sub_1001F65A0();
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 ulog:40 message:v8];
  swift_bridgeObjectRelease();

  if (qword_10035A5A0 != -1) {
    swift_once();
  }
  sub_100149974(a1);
}

uint64_t sub_10004D158()
{
  return sub_10004D234((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10004D170(uint64_t a1)
{
  return sub_1001414F0(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

void sub_10004D17C(uint64_t a1, uint64_t a2)
{
  sub_10004AB9C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10004D184()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004D1BC()
{
  return sub_10004A90C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_10004D1C4()
{
  unint64_t result = qword_100363D50;
  if (!qword_100363D50)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100363D50);
  }
  return result;
}

uint64_t sub_10004D21C()
{
  return sub_10004D234((void (*)(void))&_swift_release);
}

uint64_t sub_10004D234(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));

  return _swift_deallocObject(v1, 40, 7);
}

Swift::Int sub_10004D27C(void *a1)
{
  (*(void (**)(void, void))(v1 + 16))(0, *a1);
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_10004D2BC()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10004D2FC()
{
  sub_10004A2D4(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10004D310(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ExperienceEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004D374(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ExperienceEvent(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004D3D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C((uint64_t *)&unk_10035E760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10004D438(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100049970(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_10004D4A0()
{
  uint64_t v1 = *(void *)(v0 + 80);

  sub_10000F088(v1);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Spring()
{
  return self;
}

uint64_t sub_10004D51C()
{
  return swift_getWitnessTable();
}

BOOL sub_10004D538()
{
  type metadata accessor for Weak();
  Swift::Int v0 = sub_10004D594();
  return v0 == sub_10004D594();
}

Swift::Int sub_10004D594()
{
  return Hasher._finalize()();
}

BOOL sub_10004D5DC()
{
  return sub_10004D538();
}

void sub_10004D5E8()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v3 = (char *)&v6 - v2;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    Swift::UInt v7 = Strong;
    dispatch thunk of Identifiable.id.getter();
    swift_unknownObjectRelease();
    swift_getAssociatedConformanceWitness();
    Swift::UInt v5 = dispatch thunk of Hashable.hashValue.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  }
  else
  {
    Swift::UInt v7 = 0;
    swift_stdlib_random();
    Swift::UInt v5 = v7;
  }
  Hasher._combine(_:)(v5);
}

Swift::Int sub_10004D760()
{
  return Hasher._finalize()();
}

uint64_t type metadata accessor for Weak()
{
  return sub_10000F2E4();
}

uint64_t sub_10004D7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_10004D7D8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10004D7F8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

uint64_t sub_10004D820(uint64_t a1, void *a2, char a3)
{
  switch(a3)
  {
    case 2:
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000015;
      goto LABEL_4;
    case 3:
      uint64_t result = 0x676E6964616F6CLL;
      switch(a1)
      {
        case 1:
          uint64_t result = 0x64616F4C646964;
          break;
        case 2:
          uint64_t result = 0x657070416C6C6977;
          break;
        case 3:
          uint64_t result = 0x6165707041646964;
          break;
        case 4:
          uint64_t result = 0x6E6172546C6C6977;
          break;
        case 5:
          uint64_t result = 0x736E617254646964;
          break;
        default:
          return result;
      }
      break;
    default:
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000016;
LABEL_4:
      unint64_t v9 = v5;
      v6._uint64_t countAndFlagsBits = a1;
      v6._object = a2;
      String.append(_:)(v6);
      v7._uint64_t countAndFlagsBits = 10528;
      v7._object = (void *)0xE200000000000000;
      String.append(_:)(v7);
      uint64_t result = v9;
      break;
  }
  return result;
}

uint64_t sub_10004DA2C()
{
  return sub_10004D820(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t destroy for BannerPresentableEvent(uint64_t a1)
{
  return sub_1000205B0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s17proximitycontrold22BannerPresentableEventOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_10001FBA4(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for BannerPresentableEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_10001FBA4(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1000205B0(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for BannerPresentableEvent(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1000205B0(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCConnectionManager.ReconnectPolicy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCConnectionManager.ReconnectPolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10004DBC4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_10004DBDC(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ViewControllerEvent()
{
  return &type metadata for ViewControllerEvent;
}

void *sub_10004DC04(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v6 = sub_10000A38C(&qword_10035EDB0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  unint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
    sub_1000B5674(0, v10, 0);
    uint64_t v11 = v21;
    uint64_t v12 = *(void *)(type metadata accessor for ExperienceEffect(0) - 8);
    uint64_t v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v18 = *(void *)(v12 + 72);
    while (1)
    {
      v19(v13);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v21 = v11;
      unint64_t v15 = v11[2];
      unint64_t v14 = v11[3];
      if (v15 >= v14 >> 1)
      {
        sub_1000B5674(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v21;
      }
      v11[2] = v15 + 1;
      sub_10001639C((uint64_t)v9, (uint64_t)v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v15, &qword_10035EDB0);
      v13 += v18;
      if (!--v10) {
        return v11;
      }
    }
    swift_release();
  }
  return v11;
}

uint64_t sub_10004DDF8(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a5;
  uint64_t v29 = a8;
  id v38 = a1;
  uint64_t v39 = a2;
  uint64_t v27 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  unint64_t v40 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  id v33 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v10 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v12 = (char *)&v26 - v11;
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v15 - 8);
  uint64_t v31 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = dispatch thunk of Collection.count.getter();
  if (!v18) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v19 = v18;
  uint64_t v43 = ContiguousArray.init()();
  uint64_t v32 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v19);
  uint64_t v36 = v8;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    NSString v34 = (void (**)(char *))(v33 + 2);
    uint64_t v35 = v14;
    ++v33;
    while (1)
    {
      uint64_t v21 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      unint64_t v22 = v12;
      uint64_t v23 = v12;
      uint64_t v24 = AssociatedTypeWitness;
      (*v34)(v22);
      v21(v42, 0);
      uint64_t v25 = v41;
      v38(v23, v40);
      if (v25) {
        break;
      }
      uint64_t v41 = 0;
      (*v33)(v23, v24);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      --v19;
      uint64_t v12 = v23;
      if (!v19)
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
        return v43;
      }
    }
    (*v33)(v23, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v29, v40, v28);
  }
  return result;
}

uint64_t sub_10004E1F8()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_10004E3C4();
  swift_bridgeObjectRelease();
  *(void *)(v1 + *(void *)(*(void *)v1 + 136)) = v2;
  return swift_bridgeObjectRelease();
}

void *sub_10004E2A0(uint64_t a1)
{
  uint64_t result = &_swiftEmptyDictionarySingleton;
  uint64_t v10 = &_swiftEmptyDictionarySingleton;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (void *)(a1 + 72);
    do
    {
      uint64_t v5 = *(v4 - 4);
      uint64_t v6 = *(v4 - 3);
      uint64_t v7 = *(v4 - 2);
      uint64_t v8 = *(v4 - 1);
      uint64_t v9 = *v4;
      unsigned __int16 v11 = *((_WORD *)v4 - 20);
      uint64_t v12 = v5;
      uint64_t v13 = v6;
      uint64_t v14 = v7;
      uint64_t v15 = v8;
      uint64_t v16 = v9;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10004F5B0(&v10, &v11);
      v4 += 6;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

uint64_t sub_10004E3C4()
{
  uint64_t v2 = *(void *)(v0 + 80);
  type metadata accessor for Edge2();
  type metadata accessor for Array();
  Dictionary.init()();
  type metadata accessor for Dictionary();
  swift_getWitnessTable();
  Sequence.reduce<A>(into:_:)();
  return v2;
}

uint64_t StateMachine2.edges.getter()
{
  sub_10005A3BC();

  return swift_bridgeObjectRetain();
}

uint64_t StateMachine2.edges.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  swift_bridgeObjectRelease();
  return sub_10004E1F8();
}

uint64_t (*StateMachine2.edges.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_10004E598;
}

uint64_t sub_10004E598(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_10004E1F8();
  }
  return result;
}

uint64_t sub_10004E5CC(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v8 = (char *)&v13 - v7;
  uint64_t v9 = (uint64_t)v1 + *(void *)(v3 + 128);
  swift_beginAccess();
  uint64_t v10 = &v8[*(int *)(TupleTypeMetadata2 + 48)];
  unsigned __int16 v11 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  v11(v8, v9, v4);
  v11(v10, a1, v4);
  PassthroughSubject.send(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, TupleTypeMetadata2);
}

uint64_t sub_10004E770(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v8 = (char *)&v13 - v7;
  uint64_t v9 = (uint64_t)v1 + *(void *)(v3 + 128);
  swift_beginAccess();
  uint64_t v10 = &v8[*(int *)(TupleTypeMetadata2 + 48)];
  unsigned __int16 v11 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  v11(v8, a1, v4);
  v11(v10, v9, v4);
  PassthroughSubject.send(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, TupleTypeMetadata2);
}

uint64_t StateMachine2.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 128);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t StateMachine2.state.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  sub_10005A3F0(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8);

  return v4(a1);
}

void (*StateMachine2.state.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 80);
  v3[4] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v3[5] = v6;
  size_t v8 = *(void *)(v6 + 64);
  v3[6] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[7] = v9;
  uint64_t v10 = (uint64_t)v1 + *(void *)(v4 + 128);
  swift_beginAccess();
  unsigned __int16 v11 = *(void (**)(void *, uint64_t, uint64_t))(v7 + 16);
  v3[8] = v11;
  v3[9] = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v11(v9, v10, v5);
  return sub_10004EB70;
}

void sub_10004EB70(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *(void **)(*a1 + 48);
  uint64_t v3 = *(void **)(*a1 + 56);
  uint64_t v5 = *(void *)(*a1 + 32);
  uint64_t v6 = *(void *)(*a1 + 40);
  if (a2)
  {
    (*(void (**)(void, void, void))(v2 + 64))(*(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 32));
    sub_10005A3F0((uint64_t)v4);
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v4, v5);
    v7(v3, v5);
  }
  else
  {
    sub_10005A3F0(*(void *)(v2 + 56));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v5);
  }
  free(v3);
  free(v4);

  free((void *)v2);
}

uint64_t StateMachine2.outputPublisher.getter()
{
  uint64_t v1 = *(void **)v0;
  v10[0] = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = v1[12];
  type metadata accessor for OutputEventContext();
  type metadata accessor for PassthroughSubject();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for Publishers.Map();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v10 - v5;
  v10[1] = *(void *)(v0 + v1[19]);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v1[10];
  v7[3] = v10[0];
  v7[4] = v2;
  v7[5] = v1[13];
  v7[6] = v1[14];
  swift_retain();
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  swift_getWitnessTable();
  uint64_t v8 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v8;
}

uint64_t StateMachine2.outputEventContextPublisher.getter()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t StateMachine2.willChangePublisher.getter()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t StateMachine2.didChangePublisher.getter()
{
  return Publisher.eraseToAnyPublisher()();
}

void *sub_10004F0DC()
{
  if (*(void *)(v0 + 32))
  {
    uint64_t v1 = *(void **)(v0 + 32);
  }
  else
  {
    swift_beginAccess();
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v1 = sub_10004E2A0(v2);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 32) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10004F16C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 136);
  if (*(void *)(v0 + v2))
  {
    uint64_t v3 = *(void *)(v0 + v2);
  }
  else
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_10004E3C4();
    swift_bridgeObjectRelease();
    *(void *)(v1 + v2) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_10004F240(uint64_t a1)
{
  *(void *)(v1 + *(void *)(*(void *)v1 + 136)) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t StateMachine2.__allocating_init(_:edges:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = *(void *)(v2 + 80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  uint64_t v10 = a2(v9);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t))(v2 + 272))(v8, v10);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v11;
}

uint64_t StateMachine2.__allocating_init(_:edges:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  StateMachine2.init(_:edges:)(a1, a2);
  return v4;
}

char *StateMachine2.init(_:edges:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)v2;
  *(void *)&v2[*(void *)(*(void *)v2 + 136)] = 0;
  uint64_t v6 = *(void *)(*(void *)v2 + 144);
  uint64_t v7 = *(void *)(v5 + 80);
  swift_getTupleTypeMetadata2();
  type metadata accessor for PassthroughSubject();
  *(void *)&v2[v6] = PassthroughSubject.__allocating_init()();
  uint64_t v8 = *(void *)(*(void *)v2 + 152);
  type metadata accessor for OutputEventContext();
  type metadata accessor for PassthroughSubject();
  *(void *)&v2[v8] = PassthroughSubject.__allocating_init()();
  uint64_t v9 = *(void *)(*(void *)v2 + 160);
  swift_getTupleTypeMetadata2();
  type metadata accessor for PassthroughSubject();
  *(void *)&v2[v9] = PassthroughSubject.__allocating_init()();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(&v2[*(void *)(*(void *)v2 + 128)], a1, v7);
  *((void *)v2 + 2) = a2;
  return v2;
}

uint64_t sub_10004F5B0(void *a1, unsigned __int16 *a2)
{
  uint64_t v4 = (void *)*a2;
  sub_10000A38C(&qword_10035EDC8);
  uint64_t inited = (_OWORD *)swift_initStackObject();
  uint64_t v6 = *((void *)a2 + 4);
  uint64_t v33 = *((void *)a2 + 3);
  uint64_t v32 = v6;
  uint64_t v31 = *((void *)a2 + 5);
  long long v7 = *(_OWORD *)a2;
  inited[1] = xmmword_10028D430;
  inited[2] = v7;
  long long v8 = *((_OWORD *)a2 + 2);
  inited[3] = *((_OWORD *)a2 + 1);
  inited[4] = v8;
  swift_retain();
  sub_10005C2C8((uint64_t)&v33);
  sub_10005C2C8((uint64_t)&v32);
  sub_10005C2C8((uint64_t)&v31);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = (void *)*a1;
  uint64_t v30 = (void *)*a1;
  *a1 = 0x8000000000000000;
  unint64_t v12 = sub_100269D34(v4);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  if (v10[3] >= v15)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100057F4C();
      uint64_t v10 = v30;
    }
  }
  else
  {
    sub_100053A90(v15, isUniquelyReferenced_nonNull_native);
    uint64_t v10 = v30;
    unint64_t v17 = sub_100269D34(v4);
    if ((v16 & 1) != (v18 & 1))
    {
LABEL_17:
      swift_release();
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    unint64_t v12 = v17;
  }
  *a1 = v10;
  swift_bridgeObjectRelease();
  Swift::Int v19 = (void *)*a1;
  if (v16) {
    goto LABEL_10;
  }
  v19[(v12 >> 6) + 8] |= 1 << v12;
  *(_WORD *)(v19[6] + 2 * v12) = (_WORD)v4;
  *(void *)(v19[7] + 8 * v12) = _swiftEmptyArrayStorage;
  uint64_t v20 = v19[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v19[2] = v22;
LABEL_10:
  a1 = (void *)v19[7];
  uint64_t v4 = (void *)a1[v12];
  swift_retain();
  sub_10005C2C8((uint64_t)&v33);
  sub_10005C2C8((uint64_t)&v32);
  sub_10005C2C8((uint64_t)&v31);
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  a1[v12] = v4;
  if ((v23 & 1) == 0)
  {
LABEL_15:
    uint64_t v4 = sub_100088B4C(0, v4[2] + 1, 1, v4);
    a1[v12] = v4;
  }
  unint64_t v25 = v4[2];
  unint64_t v24 = v4[3];
  if (v25 >= v24 >> 1)
  {
    uint64_t v4 = sub_100088B4C((void *)(v24 > 1), v25 + 1, 1, v4);
    a1[v12] = v4;
  }
  v4[2] = v25 + 1;
  uint64_t v26 = &v4[6 * v25];
  long long v27 = *(_OWORD *)a2;
  long long v28 = *((_OWORD *)a2 + 2);
  v26[3] = *((_OWORD *)a2 + 1);
  v26[4] = v28;
  void v26[2] = v27;
  swift_setDeallocating();
  sub_10000A38C(&qword_10035EDD0);
  return swift_arrayDestroy();
}

uint64_t sub_10004F854(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v50 = (char *)a2;
  uint64_t v13 = __chkstk_darwin(a1);
  uint64_t v39 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  char v16 = (char *)v36 - v15;
  uint64_t v43 = v17;
  uint64_t v37 = *(void (**)(char *))(v17 + 16);
  uint64_t v38 = v17 + 16;
  v37((char *)v36 - v15);
  char v18 = (void *)swift_allocObject();
  v18[2] = a3;
  void v18[3] = a4;
  v18[4] = a5;
  v18[5] = a6;
  uint64_t v44 = a7;
  uint64_t v45 = a3;
  v18[6] = a7;
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  unint64_t v49 = a7;
  uint64_t v19 = type metadata accessor for Edge2();
  type metadata accessor for _ContiguousArrayStorage();
  uint64_t v20 = *(void *)(v19 - 8);
  swift_allocObject();
  uint64_t v42 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(v21, v50, v19);
  uint64_t v22 = (void *)swift_allocObject();
  uint64_t v22[2] = a3;
  v22[3] = a4;
  v22[4] = a5;
  uint64_t v22[5] = a6;
  v22[6] = v44;
  v22[7] = sub_10005C328;
  uint64_t v44 = v18;
  v22[8] = v18;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v45 = *a1;
  uint64_t v23 = v45;
  *a1 = 0x8000000000000000;
  uint64_t v24 = *(void *)(a6 + 8);
  uint64_t v50 = v16;
  sub_1000532A8((uint64_t)v16, a3, v24);
  uint64_t v26 = *(void *)(v23 + 16);
  BOOL v27 = (v25 & 1) == 0;
  Swift::Int v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  char v29 = v25;
  v36[1] = type metadata accessor for Array();
  uint64_t v40 = v24;
  type metadata accessor for _NativeDictionary();
  Swift::Bool v30 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v28);
  uint64_t v31 = v45;
  uint64_t v32 = (uint64_t)v50;
  if (v30)
  {
    sub_1000532A8((uint64_t)v50, a3, v40);
    if ((v29 & 1) != (v33 & 1)) {
      goto LABEL_9;
    }
  }
  *a1 = v31;
  swift_bridgeObjectRelease();
  if (v29)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v34 = swift_bridgeObjectRetain();
    uint64_t v45 = ((uint64_t (*)(uint64_t))v22[7])(v34);
    ((void (*)(char *, uint64_t, uint64_t))v37)(v39, v32, a3);
    _NativeDictionary._insert(at:key:value:)();
  }
  sub_10001A0B4(v42);
  swift_bridgeObjectRelease();
  static Array.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v32, a3);
  swift_release();
  return swift_release();
}

uint64_t sub_10004FC18@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = (_WORD *)(v2 + 24);
  swift_beginAccess();
  unsigned int v6 = *(unsigned __int16 *)(v2 + 24);
  long long v7 = sub_10004F0DC();
  if (!v7[2]) {
    goto LABEL_7;
  }
  unint64_t v8 = sub_100269D34(v6);
  if ((v9 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(v7[7] + 8 * v8);
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRelease();
  __chkstk_darwin(v11);
  void v27[2] = a1;
  uint64_t v12 = sub_100050AB0((uint64_t)sub_10005C054, (uint64_t)v27, v10);
  uint64_t v13 = v12;
  unint64_t v14 = *(void *)(v12 + 16);
  if (v14 > 1)
  {
    sub_10000A38C(&qword_10035ED98);
    sub_10000B010(&qword_10035EDA0, &qword_10035ED98);
    swift_allocError();
    char v16 = v15;
    uint64_t v17 = sub_10000A38C(&qword_10035EDA8);
    uint64_t v18 = (uint64_t)v16 + *(int *)(v17 + 48);
    uint64_t v19 = *(int *)(v17 + 64);
    *char v16 = *v5;
    sub_10005C498(a1, v18, type metadata accessor for ExperienceEvent);
    *(void *)((char *)v16 + v19) = v13;
    (*(void (**)(_WORD *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 0, 1, v17);
    return swift_willThrow();
  }
  if (v14)
  {
    uint64_t v21 = *(unsigned __int16 *)(v12 + 32);
    uint64_t v23 = *(void *)(v12 + 40);
    uint64_t v22 = *(void *)(v12 + 48);
    uint64_t v24 = *(void *)(v12 + 56);
    uint64_t v25 = *(void *)(v12 + 64);
    uint64_t v26 = *(void *)(v12 + 72);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v21 = 0;
    uint64_t v23 = 0;
    uint64_t v22 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  *a2 = v21;
  a2[1] = v23;
  a2[2] = v22;
  a2[3] = v24;
  a2[4] = v25;
  a2[5] = v26;
  return result;
}

uint64_t sub_10004FE64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v36 = a2;
  uint64_t v3 = *v2;
  uint64_t v5 = *(void *)(*v2 + 88);
  uint64_t v6 = *(void *)(*v2 + 96);
  uint64_t v7 = *(void *)(*v2 + 104);
  uint64_t v8 = *(void *)(*v2 + 112);
  uint64_t v40 = *(void *)(*v2 + 80);
  uint64_t v4 = v40;
  uint64_t v41 = v5;
  uint64_t v37 = v6;
  uint64_t v38 = v5;
  uint64_t v42 = v6;
  uint64_t v43 = v7;
  uint64_t v44 = v8;
  uint64_t v9 = type metadata accessor for Edge2();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v31 = *(void *)(v10 - 8);
  uint64_t v32 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v35 = (char *)&v31 - v12;
  uint64_t v13 = *(void *)(v40 - 8);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v31 - v14;
  uint64_t v16 = (uint64_t)v2 + *(void *)(v3 + 128);
  swift_beginAccess();
  char v33 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v34 = v16;
  v33(v15, v16, v4);
  sub_10004F16C();
  type metadata accessor for Array();
  Dictionary.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v4);
  if (!v40) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v36, 1, 1, v9);
  }
  __chkstk_darwin(v17);
  uint64_t v18 = v38;
  *(&v31 - 6) = v4;
  *(&v31 - 5) = v18;
  *(&v31 - 4) = v37;
  *(&v31 - 3) = v7;
  uint64_t v19 = v39;
  *(&v31 - 2) = v8;
  *(&v31 - 1) = v19;
  swift_getWitnessTable();
  uint64_t v20 = _ArrayProtocol.filter(_:)();
  if (Array.count.getter() <= 1)
  {
    uint64_t v45 = v20;
    swift_getWitnessTable();
    Swift::Int v28 = v35;
    Collection.first.getter();
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v28, 1, v9) == 1)
    {
      (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v32);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v36, 1, 1, v9);
    }
    else
    {
      uint64_t v30 = v36;
      (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v36, v28, v9);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v30, 0, 1, v9);
    }
  }
  else
  {
    uint64_t v21 = v38;
    uint64_t v40 = v4;
    uint64_t v41 = v38;
    uint64_t v42 = v37;
    uint64_t v43 = v7;
    uint64_t v44 = v8;
    type metadata accessor for StateMachine2.TransitionError();
    swift_getWitnessTable();
    swift_allocError();
    uint64_t v23 = v22;
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    uint64_t v25 = &v23[*(int *)(TupleTypeMetadata3 + 48)];
    uint64_t v26 = *(int *)(TupleTypeMetadata3 + 64);
    v33(v23, v34, v4);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v25, v39, v21);
    *(void *)&v23[v26] = v20;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata3 - 8) + 56))(v23, 0, 1, TupleTypeMetadata3);
    return swift_willThrow();
  }
}

BOOL sub_1000503CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a7;
  uint64_t v31 = a2;
  uint64_t v12 = *(void *)(a4 - 8);
  uint64_t v32 = a1;
  uint64_t v33 = v12;
  __chkstk_darwin(a1);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = v15;
  uint64_t v41 = v16;
  uint64_t v42 = v17;
  uint64_t v43 = v18;
  uint64_t v44 = v19;
  uint64_t v20 = type metadata accessor for Edge2();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v30 - v23;
  uint64_t v40 = *(void *)(a1 + *(int *)(v22 + 68));
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v25 = v31;
  uint64_t v38 = v30;
  uint64_t v39 = v31;
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Array();
  uint64_t v26 = (uint64_t)v14;
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v27 = v33;
  LOBYTE(v14) = Sequence.allSatisfy(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v32, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v26, v25, a4);
  BOOL v28 = (v14 & 1) != 0 && sub_10001B4E4(v26, v20);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, a4);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  return v28;
}

uint64_t sub_100050660(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10000A38C(&qword_10035C0A8);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0;
    uint64_t v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      uint64_t v13 = *(void **)(v24 + 72);
      sub_10005C3D0(a3 + v16 + (void)v13 * v14, (uint64_t)v12);
      char v17 = a1(v12);
      if (v3)
      {
        sub_10005C438((uint64_t)v12);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v13;
      }
      if (v17)
      {
        sub_10001639C((uint64_t)v12, v23, &qword_10035C0A8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B55E8(0, v15[2] + 1, 1);
        }
        uint64_t v15 = v25;
        unint64_t v19 = v25[2];
        unint64_t v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_1000B55E8(v18 > 1, v19 + 1, 1);
          uint64_t v15 = v25;
        }
        void v15[2] = v19 + 1;
        uint64_t result = sub_10001639C(v23, (uint64_t)v15 + v16 + v19 * (void)v13, &qword_10035C0A8);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        uint64_t result = sub_10005C438((uint64_t)v12);
      }
      if (v22 == ++v14)
      {
        uint64_t v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_1000508A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v18 = (uint64_t (*)(uint64_t *))result;
  uint64_t v17 = *(void *)(a3 + 16);
  if (v17)
  {
    unint64_t v4 = 0;
    uint64_t v5 = (_OWORD *)(a3 + 64);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v16 = a3;
    while (v4 < *(void *)(a3 + 16))
    {
      uint64_t v7 = *((void *)v5 - 4);
      char v8 = *((unsigned char *)v5 - 24);
      char v9 = *((unsigned char *)v5 - 23);
      uint64_t v10 = *((void *)v5 - 2);
      char v11 = *((unsigned char *)v5 - 8);
      long long v20 = *v5;
      uint64_t v21 = v7;
      char v19 = v8;
      char v22 = v8;
      char v23 = v9;
      uint64_t v24 = v10;
      char v25 = v11;
      long long v26 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      char v12 = v18(&v21);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      if (v12)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v27 = v6;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1000B5618(0, v6[2] + 1, 1);
          uint64_t v6 = v27;
        }
        unint64_t v14 = v6[2];
        unint64_t v13 = v6[3];
        uint64_t v3 = 0;
        if (v14 >= v13 >> 1)
        {
          uint64_t result = sub_1000B5618(v13 > 1, v14 + 1, 1);
          uint64_t v3 = 0;
          uint64_t v6 = v27;
        }
        v6[2] = v14 + 1;
        uint64_t v15 = &v6[6 * v14];
        v15[4] = v7;
        *((unsigned char *)v15 + 40) = v19;
        *((unsigned char *)v15 + 41) = v9;
        v15[6] = v10;
        *((unsigned char *)v15 + 56) = v11;
        *((_OWORD *)v15 + 4) = v20;
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v3 = 0;
      }
      ++v4;
      v5 += 3;
      a3 = v16;
      if (v17 == v4) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v6;
  }
  return result;
}

uint64_t sub_100050AB0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = (uint64_t (*)(__int16 *))result;
  uint64_t v14 = *(void *)(a3 + 16);
  if (v14)
  {
    unint64_t v5 = 0;
    uint64_t v6 = (long long *)(a3 + 40);
    uint64_t v7 = _swiftEmptyArrayStorage;
    while (v5 < *(void *)(a3 + 16))
    {
      long long v8 = *v6;
      long long v18 = v6[1];
      uint64_t v9 = *((void *)v6 + 4);
      __int16 v16 = *((_WORD *)v6 - 4);
      __int16 v19 = v16;
      long long v20 = v8;
      long long v21 = v18;
      uint64_t v22 = v9;
      long long v17 = v8;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v10 = v15(&v19);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return (uint64_t)v7;
      }
      if (v10)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        char v23 = v7;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1000B549C(0, v7[2] + 1, 1);
          uint64_t v7 = v23;
        }
        unint64_t v12 = v7[2];
        unint64_t v11 = v7[3];
        uint64_t v3 = 0;
        if (v12 >= v11 >> 1)
        {
          uint64_t result = sub_1000B549C(v11 > 1, v12 + 1, 1);
          uint64_t v3 = 0;
          uint64_t v7 = v23;
        }
        v7[2] = v12 + 1;
        unint64_t v13 = &v7[6 * v12];
        *((_WORD *)v13 + 16) = v16;
        *(_OWORD *)(v13 + 5) = v17;
        *(_OWORD *)(v13 + 7) = v18;
        v13[9] = v9;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_release();
        uint64_t v3 = 0;
      }
      ++v5;
      v6 += 3;
      if (v14 == v5) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
LABEL_14:
    swift_bridgeObjectRelease();
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_100050CCC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  void (*v10)(uint64_t *__return_ptr, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t *__return_ptr, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(Swift::String *__return_ptr, uint64_t);
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id v39;
  NSString v40;
  NSString v41;
  id v42;
  NSString v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  void (*v50)(uint64_t *__return_ptr, uint64_t);
  void v51[8];
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t *__return_ptr, uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Swift::String v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void v72[6];
  char v73[8];
  uint64_t v74;

  uint64_t v4 = v2;
  uint64_t result = sub_10004FC18(a1, v72);
  uint64_t v8 = v3;
  if (!v3)
  {
    uint64_t v9 = v72[0];
    char v10 = (void (*)(uint64_t *__return_ptr, uint64_t))v72[1];
    unint64_t v11 = v72[2];
    uint64_t v59 = v72[3];
    unint64_t v12 = v72[4];
    unint64_t v13 = v72[5];
    uint64_t result = sub_10001639C((uint64_t)v72, (uint64_t)v73, &qword_10035ED90);
    if (v74)
    {
      uint64_t v55 = v9;
      v10(&v68, a1);
      uint64_t v57 = v69;
      if (!v69)
      {
        sub_10000A38C(&qword_10035ED98);
        sub_10000B010(&qword_10035EDA0, &qword_10035ED98);
        swift_allocError();
        uint64_t v22 = v21;
        char v23 = sub_10000A38C(&qword_10035EDA8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      uint64_t v54 = v11;
      uint64_t v58 = v10;
      uint64_t v52 = a2;
      uint64_t v53 = v12;
      uint64_t v14 = v68;
      uint64_t v15 = v70;
      __int16 v16 = v71;
      long long v17 = *(void *)(v70 + 16);
      uint64_t v56 = v13;
      if (!v17) {
        goto LABEL_13;
      }
      swift_bridgeObjectRetain();
      long long v18 = v15 + 40;
      while (1)
      {
        __int16 v19 = *(void (**)(uint64_t *__return_ptr, uint64_t))(v18 - 8);
        swift_retain();
        v19(&v68, a1);
        swift_release();
        if (v68 != 1) {
          break;
        }
        v18 += 16;
        if (!--v17)
        {
          swift_bridgeObjectRelease();
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease();
      if (*(void *)(v15 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v9 = 0;
        uint64_t v58 = 0;
        unint64_t v11 = 0;
        long long v20 = 0;
        unint64_t v12 = 0;
        unint64_t v13 = 0;
        a2 = v52;
      }
      else
      {
LABEL_13:
        v51[7] = v15;
        swift_beginAccess();
        PassthroughSubject.send(_:)();
        *(_WORD *)(v4 + 24) = v14;
        PassthroughSubject.send(_:)();
        uint64_t v66 = v57;
        swift_bridgeObjectRetain();
        long long v20 = v59;
        uint64_t v24 = swift_bridgeObjectRetain();
        sub_10008DE70(v24);
        char v25 = *(void *)(v57 + 16);
        if (v25)
        {
          swift_bridgeObjectRetain();
          long long v26 = v57 + 40;
          do
          {
            uint64_t v27 = *(void (**)(uint64_t))(v26 - 8);
            swift_retain();
            v27(a1);
            swift_release();
            v26 += 16;
            --v25;
          }
          while (v25);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        BOOL v28 = swift_bridgeObjectRetain();
        sub_10008D77C(v28);
        uint64_t v66 = (uint64_t)_swiftEmptyArrayStorage;
        uint64_t v29 = *(void *)(v16 + 16);
        if (v29)
        {
          swift_bridgeObjectRetain();
          uint64_t v30 = v16 + 40;
          do
          {
            uint64_t v31 = *(void (**)(Swift::String *__return_ptr, uint64_t))(v30 - 8);
            swift_retain();
            v31(&v65, a1);
            swift_release();
            sub_10008DCCC(v65._countAndFlagsBits);
            v30 += 16;
            --v29;
          }
          while (v29);
          uint64_t v32 = swift_bridgeObjectRelease_n();
          uint64_t v33 = (void *)v66;
        }
        else
        {
          uint64_t v32 = swift_bridgeObjectRelease();
          uint64_t v33 = _swiftEmptyArrayStorage;
        }
        __chkstk_darwin(v32);
        v51[2] = a1;
        uint64_t v34 = sub_10004DC04((void (*)(uint64_t))sub_10005BFD4, (uint64_t)v51, (uint64_t)v33);
        swift_bridgeObjectRelease();
        uint64_t v35 = v34[2];
        if (v35)
        {
          v51[5] = v16;
          v51[6] = v8;
          uint64_t v63 = sub_10000A38C(&qword_10035EDB0);
          uint64_t v36 = *(void *)(v63 - 8);
          uint64_t v37 = (char *)v34
              + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
          v51[4] = v34;
          swift_bridgeObjectRetain();
          uint64_t v38 = sub_10000A38C(&qword_10035EDB8);
          uint64_t v62 = *(void *)(v36 + 72);
          uint64_t v61 = 0x80000001002B1F00;
          do
          {
            uint64_t v66 = 0;
            uint64_t v67 = 0xE000000000000000;
            _StringGuts.grow(_:)(17);
            swift_bridgeObjectRelease();
            v65._object = (void *)0xE000000000000000;
            uint64_t v66 = 0x4F208FB8EF90ADE2;
            uint64_t v67 = 0xAF203A7475707475;
            v65._uint64_t countAndFlagsBits = 0;
            v44._uint64_t countAndFlagsBits = 60;
            v44._object = (void *)0xE100000000000000;
            String.append(_:)(v44);
            type metadata accessor for ExperienceEffect(0);
            _print_unlocked<A, B>(_:_:)();
            v45._uint64_t countAndFlagsBits = 0x3D7475706E69202CLL;
            v45._object = (void *)0xE800000000000000;
            String.append(_:)(v45);
            type metadata accessor for ExperienceEvent(0);
            _print_unlocked<A, B>(_:_:)();
            v46._uint64_t countAndFlagsBits = 62;
            v46._object = (void *)0xE100000000000000;
            String.append(_:)(v46);
            String.append(_:)(v65);
            swift_bridgeObjectRelease();
            uint64_t v64 = v66;
            uint64_t v66 = v38;
            sub_10000A38C(&qword_10035EDC0);
            uint64_t v47 = String.init<A>(describing:)();
            sub_10016B950(60, 0xE100000000000000, v47, v48);
            if ((v49 & 1) == 0)
            {
              String.subscript.getter();
              uint64_t v60 = v35;
              swift_bridgeObjectRelease();
              static String._fromSubstring(_:)();
              uint64_t v35 = v60;
              swift_bridgeObjectRelease();
            }
            uint64_t v39 = objc_allocWithZone((Class)CULogHandle);
            uint64_t v40 = String._bridgeToObjectiveC()();
            uint64_t v41 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            uint64_t v42 = [v39 initWithSubsystem:v40 category:v41];

            swift_bridgeObjectRetain();
            uint64_t v43 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v42 ulog:40 message:v43];
            swift_bridgeObjectRelease();

            PassthroughSubject.send(_:)();
            v37 += v62;
            --v35;
          }
          while (v35);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          unint64_t v11 = v54;
          long long v20 = v59;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v11 = v54;
        }
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v53;
        a2 = v52;
        unint64_t v13 = v56;
        uint64_t v9 = v55;
      }
    }
    else
    {
      uint64_t v58 = v10;
      long long v20 = v59;
    }
    uint64_t v50 = v58;
    *a2 = v9;
    a2[1] = v50;
    a2[2] = v11;
    a2[3] = v20;
    a2[4] = v12;
    a2[5] = v13;
  }
  return result;
}

uint64_t StateMachine2.receive(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v87 = a2;
  unint64_t v5 = *(char **)(*(void *)v2 + 88);
  uint64_t v6 = *(char **)(*(void *)v2 + 96);
  uint64_t v7 = *(char **)(*(void *)v2 + 104);
  uint64_t v8 = *(char **)(*(void *)v2 + 112);
  uint64_t v94 = *(char **)(*(void *)v2 + 80);
  uint64_t v4 = v94;
  uint64_t v95 = v5;
  unsigned __int8 v96 = v6;
  uint64_t v97 = v7;
  uint64_t v98 = v8;
  uint64_t v9 = type metadata accessor for End();
  uint64_t v10 = type metadata accessor for Optional();
  unint64_t v79 = *(char ***)(v10 - 8);
  unint64_t v80 = (void *)v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v82 = (char *)&v72 - v12;
  uint64_t v86 = *(void *)(v9 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v72 - v13;
  uint64_t v83 = v5;
  uint64_t v84 = v4;
  uint64_t v94 = v4;
  uint64_t v95 = v5;
  uint64_t v85 = v6;
  unsigned __int8 v96 = v6;
  uint64_t v97 = v7;
  uint64_t v88 = v7;
  uint64_t v98 = v8;
  uint64_t v15 = type metadata accessor for Edge2();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v81 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  __int16 v19 = (char *)&v72 - v18;
  uint64_t v89 = *(void *)(v15 - 8);
  __chkstk_darwin(v17);
  long long v21 = (char *)&v72 - v20;
  uint64_t v22 = v90;
  uint64_t result = sub_10004FE64(a1, (uint64_t)v19);
  if (!v22)
  {
    uint64_t v90 = 0;
    uint64_t v77 = a1;
    uint64_t v76 = v8;
    uint64_t v75 = v2;
    unint64_t v78 = v21;
    uint64_t v24 = v89;
    uint64_t v25 = v15;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v19, 1, v15) == 1)
    {
      (*(void (**)(char *, uint64_t))(v81 + 8))(v19, v16);
      uint64_t v26 = 1;
      uint64_t v27 = v87;
      uint64_t v28 = v24;
    }
    else
    {
      uint64_t v29 = *(void (**)(uint64_t, char *, uint64_t))(v24 + 32);
      uint64_t v30 = v78;
      uint64_t v74 = v24 + 32;
      NSString v73 = v29;
      v29((uint64_t)v78, v19, v25);
      uint64_t v31 = v82;
      uint64_t v32 = v77;
      uint64_t v33 = v25;
      sub_10001B634(v77, v25);
      uint64_t v34 = v86;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v31, 1, v9) == 1)
      {
        ((void (*)(char *, void *))v79[1])(v31, v80);
        uint64_t v94 = v84;
        uint64_t v95 = v83;
        unsigned __int8 v96 = v85;
        uint64_t v97 = v88;
        uint64_t v98 = v76;
        type metadata accessor for StateMachine2.TransitionError();
        swift_getWitnessTable();
        swift_allocError();
        uint64_t v36 = v35;
        type metadata accessor for Array();
        TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata3 - 8) + 56))(v36, 1, 1, TupleTypeMetadata3);
        swift_willThrow();
        return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v30, v33);
      }
      uint64_t v81 = v33;
      uint64_t v38 = (*(uint64_t (**)(char *, char *, uint64_t))(v34 + 32))(v14, v31, v9);
      uint64_t v82 = (char *)&v72;
      uint64_t v39 = *(int *)(v9 + 64);
      uint64_t v94 = *(char **)&v14[v39];
      __chkstk_darwin(v38);
      uint64_t v41 = v84;
      uint64_t v40 = v85;
      uint64_t v42 = v32;
      uint64_t v43 = v83;
      *(&v72 - 6) = v84;
      *(&v72 - 5) = v43;
      uint64_t v44 = v88;
      *(&v72 - 4) = v40;
      *(&v72 - 3) = v44;
      *(&v72 - 2) = v76;
      *(&v72 - 1) = (char *)v42;
      swift_getFunctionTypeMetadata1();
      type metadata accessor for Array();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      uint64_t v45 = v90;
      char v46 = Sequence.allSatisfy(_:)();
      uint64_t v90 = v45;
      swift_bridgeObjectRelease();
      uint64_t v99 = *(void *)&v14[v39];
      swift_getWitnessTable();
      if (Collection.isEmpty.getter() & 1) != 0 || (v46)
      {
        sub_10005A3F0((uint64_t)v14);
        swift_getFunctionTypeMetadata1();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v47 = v43;
        uint64_t v48 = static Array.+ infix(_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v49 = swift_bridgeObjectRelease();
        id v72 = v14;
        unint64_t v80 = &v72;
        uint64_t v99 = v48;
        __chkstk_darwin(v49);
        *(&v72 - 6) = v41;
        *(&v72 - 5) = v47;
        uint64_t v50 = v85;
        uint64_t v51 = v88;
        *(&v72 - 4) = v85;
        *(&v72 - 3) = v51;
        uint64_t v52 = v77;
        *(&v72 - 2) = v76;
        *(&v72 - 1) = (char *)v52;
        type metadata accessor for Array();
        uint64_t v82 = (char *)&protocol conformance descriptor for [A];
        swift_getWitnessTable();
        uint64_t v53 = v90;
        Sequence.forEach(_:)();
        uint64_t v90 = v53;
        swift_bridgeObjectRelease();
        type metadata accessor for Array();
        uint64_t v54 = v47;
        swift_getFunctionTypeMetadata1();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v55 = static Array.+ infix(_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v56 = swift_bridgeObjectRelease();
        unint64_t v79 = &v72;
        uint64_t v93 = v55;
        __chkstk_darwin(v56);
        uint64_t v57 = v84;
        *(&v72 - 6) = v84;
        *(&v72 - 5) = v54;
        uint64_t v58 = v88;
        *(&v72 - 4) = v50;
        *(&v72 - 3) = v58;
        uint64_t v59 = v76;
        uint64_t v60 = v77;
        *(&v72 - 2) = v76;
        *(&v72 - 1) = (char *)v60;
        type metadata accessor for Array();
        uint64_t v61 = swift_checkMetadataState();
        swift_getWitnessTable();
        unint64_t v80 = (void *)v9;
        swift_getWitnessTable();
        uint64_t v62 = v90;
        uint64_t v63 = Sequence.flatMap<A>(_:)();
        uint64_t v64 = swift_bridgeObjectRelease();
        uint64_t v92 = v63;
        __chkstk_darwin(v64);
        uint64_t v65 = v83;
        *(&v72 - 6) = v57;
        *(&v72 - 5) = v65;
        uint64_t v66 = v88;
        *(&v72 - 4) = v85;
        *(&v72 - 3) = v66;
        uint64_t v67 = v77;
        *(&v72 - 2) = v59;
        *(&v72 - 1) = (char *)v67;
        uint64_t v68 = type metadata accessor for OutputEventContext();
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t v71 = sub_10004DDF8((void (*)(char *, char *))sub_10005A658, (uint64_t)(&v72 - 8), v61, v68, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v70);
        swift_bridgeObjectRelease();
        uint64_t v91 = v71;
        type metadata accessor for Array();
        swift_getWitnessTable();
        Sequence.forEach(_:)();
        uint64_t v25 = v81;
        uint64_t v90 = v62;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void *))(v86 + 8))(v72, v80);
        uint64_t v27 = v87;
        v73(v87, v78, v25);
        uint64_t v26 = 0;
        uint64_t v28 = v89;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v86 + 8))(v14, v9);
        uint64_t v28 = v89;
        uint64_t v25 = v81;
        (*(void (**)(char *, uint64_t))(v89 + 8))(v78, v81);
        uint64_t v26 = 1;
        uint64_t v27 = v87;
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v27, v26, 1, v25);
  }
  return result;
}

uint64_t sub_100051FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, a3);
  return sub_100239354((uint64_t)v14, (uint64_t)v12, a3, a4, a5);
}

uint64_t sub_100052174()
{
  _StringGuts.grow(_:)(17);
  v0._uint64_t countAndFlagsBits = 0x4F208FB8EF90ADE2;
  v0._object = (void *)0xAF203A7475707475;
  String.append(_:)(v0);
  type metadata accessor for OutputEventContext();
  swift_getWitnessTable();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  uint64_t v1 = type metadata accessor for StateMachine2();
  sub_10016ADD8(0, (void *)0xE000000000000000, 0, v1, (uint64_t)&off_100321630);
  swift_bridgeObjectRelease();
  return PassthroughSubject.send(_:)();
}

void sub_100052320(uint64_t a1)
{
  uint64_t v11 = 0;
  unint64_t v12 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  v2._uint64_t countAndFlagsBits = 0x20208FB8EF86ACE2;
  v2._object = (void *)0xAF203A7475706E49;
  String.append(_:)(v2);
  type metadata accessor for ExperienceEvent(0);
  _print_unlocked<A, B>(_:_:)();
  id v3 = sub_1001F6630();
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 ulog:40 message:v4];
  swift_bridgeObjectRelease();

  sub_100050CCC(a1, v10);
  sub_10001639C((uint64_t)v10, (uint64_t)&v11, &qword_10035ED90);
  if (v12)
  {
    sub_10005BF38(v10);
    uint64_t v5 = 0x61745320A39F9FF0;
    unint64_t v6 = 0xAC000000203A6574;
  }
  else
  {
    _StringGuts.grow(_:)(35);
    v7._object = (void *)0x80000001002B4E30;
    v7._uint64_t countAndFlagsBits = 0x1000000000000017;
    String.append(_:)(v7);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v5 = 0x3D6574617473202CLL;
    unint64_t v6 = 0xE800000000000000;
  }
  String.append(_:)(*(Swift::String *)&v5);
  swift_beginAccess();
  _print_unlocked<A, B>(_:_:)();
  id v8 = sub_1001F6630();
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 ulog:40 message:v9];
  swift_bridgeObjectRelease();
}

uint64_t StateMachine2.send(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  uint64_t v29 = *(void *)(v4 - 8);
  __chkstk_darwin(a1);
  uint64_t v28 = (char *)&v25 - v5;
  Swift::String v7 = (void *)v6[11];
  uint64_t v31 = v6[12];
  uint64_t v8 = v6[13];
  uint64_t v9 = v6[14];
  uint64_t v35 = v4;
  uint64_t v36 = v7;
  uint64_t v37 = v31;
  uint64_t v38 = v8;
  uint64_t v39 = v9;
  uint64_t v26 = type metadata accessor for Edge2();
  uint64_t v27 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v32 = v1;
  uint64_t v35 = 0;
  uint64_t v36 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(17);
  v12._uint64_t countAndFlagsBits = 0x20208FB8EF86ACE2;
  v12._object = (void *)0xAF203A7475706E49;
  String.append(_:)(v12);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  uint64_t v13 = v35;
  uint64_t v14 = v36;
  uint64_t v30 = v4;
  uint64_t v35 = v4;
  uint64_t v36 = v7;
  uint64_t v37 = v31;
  uint64_t v38 = v8;
  uint64_t v39 = v9;
  uint64_t v15 = type metadata accessor for StateMachine2();
  sub_10016ADD8(v13, v14, 0, v15, (uint64_t)&off_100321630);
  swift_bridgeObjectRelease();
  StateMachine2.receive(_:)(a1, (uint64_t)v11);
  int v16 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v26 - 8) + 48))(v11, 1);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v27);
  uint64_t v17 = v29;
  uint64_t v18 = v30;
  __int16 v19 = v28;
  if (v16 == 1)
  {
    uint64_t v34 = v2;
    uint64_t v35 = 0;
    uint64_t v36 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(35);
    uint64_t v32 = v35;
    uint64_t v33 = v36;
    v20._object = (void *)0x80000001002B4E30;
    v20._uint64_t countAndFlagsBits = 0x1000000000000017;
    String.append(_:)(v20);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    uint64_t v21 = 0x3D6574617473202CLL;
    unint64_t v22 = 0xE800000000000000;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v33 = (void *)0xE000000000000000;
    uint64_t v34 = v2;
    uint64_t v21 = 0x61745320A39F9FF0;
    unint64_t v22 = 0xAC000000203A6574;
  }
  String.append(_:)(*(Swift::String *)&v21);
  uint64_t v23 = v2 + *(void *)(*(void *)v2 + 128);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v23, v18);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v18);
  sub_10016ADD8(v32, v33, 0, v15, (uint64_t)&off_100321630);
  return swift_bridgeObjectRelease();
}

uint64_t StateMachine2.description.getter(uint64_t a1)
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(a1);
  unint64_t v6 = &v24[-v5];
  uint64_t v30 = 0;
  unint64_t v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  uint64_t v36 = v30;
  unint64_t v37 = v31;
  v7._uint64_t countAndFlagsBits = 60;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = sub_10016B148();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x3D657461747320;
  v9._object = (void *)0xE700000000000000;
  String.append(_:)(v9);
  uint64_t v10 = v1 + *(void *)(*(void *)v1 + 128);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v6, v10, v3);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  v11._uint64_t countAndFlagsBits = 0x3D736567646520;
  v11._object = (void *)0xE700000000000000;
  String.append(_:)(v11);
  uint64_t v35 = sub_10004F16C();
  uint64_t v25 = v3;
  unint64_t v26 = v2[11];
  uint64_t v27 = v2[12];
  uint64_t v28 = v2[13];
  uint64_t v29 = v2[14];
  uint64_t v30 = v3;
  unint64_t v31 = v26;
  uint64_t v32 = v27;
  uint64_t v33 = v28;
  uint64_t v34 = v29;
  type metadata accessor for Edge2();
  type metadata accessor for Array();
  uint64_t v12 = type metadata accessor for Dictionary();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = sub_10004DDF8((void (*)(char *, char *))sub_10005A6B4, (uint64_t)v24, v12, (uint64_t)&type metadata for Int, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v14);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17)
  {
    uint64_t v18 = 0;
    __int16 v19 = (uint64_t *)(v15 + 32);
    while (1)
    {
      uint64_t v20 = *v19++;
      BOOL v21 = __OFADD__(v18, v20);
      v18 += v20;
      if (v21) {
        break;
      }
      if (!--v17) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v18 = 0;
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t v30 = v18;
    v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = 62;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    return v36;
  }
  return result;
}

uint64_t sub_100052EFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  v18[1] = a2;
  v18[2] = a3;
  void v18[3] = a4;
  v18[4] = a5;
  v18[5] = a6;
  type metadata accessor for Edge2();
  type metadata accessor for Array();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = __chkstk_darwin(TupleTypeMetadata2 - 8);
  uint64_t v13 = (char *)v18 - v12;
  uint64_t v14 = *(int *)(v11 + 56);
  uint64_t v15 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v18 - v12, a1, a2);
  *(void *)&v13[v14] = *(void *)(a1 + v14);
  swift_bridgeObjectRetain();
  uint64_t v16 = Array.count.getter();
  swift_bridgeObjectRelease();
  *a7 = v16;
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v13, a2);
}

uint64_t *StateMachine2.deinit()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 128));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t StateMachine2.__deallocating_deinit()
{
  StateMachine2.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_1000531A0(uint64_t a1)
{
  return StateMachine2.description.getter(a1);
}

uint64_t sub_1000531C4()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(unsigned __int16 *)(v1 + 24);
}

uint64_t sub_100053204()
{
  return Publisher.eraseToAnyPublisher()();
}

void sub_100053284(uint64_t a1)
{
}

unint64_t sub_1000532A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_100053304(a1, v6, a2, a3);
}

unint64_t sub_100053304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[1] = a1;
  _OWORD v21[2] = a4;
  __chkstk_darwin(a1);
  Swift::String v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v4;
  uint64_t v9 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v10 & ~v9;
  v21[0] = v4 + 64;
  if ((*(void *)(v4 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v12 = ~v9;
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v14 = v15;
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    do
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v22 + 48) + v16 * v11, a3);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v17)(v8, a3);
      if (v19) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
      uint64_t v13 = v18;
    }
    while (((*(void *)(v21[0] + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

uint64_t sub_10005348C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A38C(&qword_10035EDF0);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1)) {
      goto LABEL_40;
    }
    if (v14 >= v11) {
      break;
    }
    Swift::String v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v14);
    if (!v24)
    {
      int64_t v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        uint64_t v3 = v36;
        if ((v38 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          int64_t v14 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            break;
          }
          if (v14 >= v11) {
            goto LABEL_31;
          }
          unint64_t v24 = *(void *)(v37 + 8 * v14);
          ++v25;
          if (v24) {
            goto LABEL_20;
          }
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_21:
    unint64_t v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v30 = v29;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v17 == v32;
        if (v17 == v32) {
          unint64_t v17 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v17);
      }
      while (v34 == -1);
      unint64_t v18 = __clz(__rbit64(~v34)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    char v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *char v19 = v28;
    v19[1] = v27;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v29;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  Swift::String v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *Swift::String v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10005377C(uint64_t a1, char a2)
{
  return sub_1000537A0(a1, a2, &qword_10035EDF8);
}

uint64_t sub_100053788(uint64_t a1, char a2)
{
  return sub_1000537A0(a1, a2, &qword_10035EE00);
}

uint64_t sub_100053794(uint64_t a1, char a2)
{
  return sub_1000537A0(a1, a2, &qword_10035EE08);
}

uint64_t sub_1000537A0(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10000A38C(a3);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_38;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v3;
  uint64_t v37 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v15++, 1)) {
      goto LABEL_40;
    }
    if (v15 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v15);
    if (!v25)
    {
      int64_t v26 = v15 + 1;
      if (v15 + 1 >= v12)
      {
LABEL_31:
        swift_release();
        uint64_t v4 = v36;
        if ((v38 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          int64_t v15 = v26 + 1;
          if (__OFADD__(v26, 1)) {
            break;
          }
          if (v15 >= v12) {
            goto LABEL_31;
          }
          unint64_t v25 = *(void *)(v37 + 8 * v15);
          ++v26;
          if (v25) {
            goto LABEL_20;
          }
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v15;
    }
LABEL_20:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_21:
    uint64_t v27 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    uint64_t v30 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v18 == v32;
        if (v18 == v32) {
          unint64_t v18 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v13 + 8 * v18);
      }
      while (v34 == -1);
      unint64_t v19 = __clz(__rbit64(~v34)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    unint64_t v20 = (void *)(*(void *)(v8 + 48) + 16 * v19);
    *unint64_t v20 = v29;
    v20[1] = v28;
    *(void *)(*(void *)(v8 + 56) + 8 * v19) = v30;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v36;
  unint64_t v24 = (void *)(v6 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_100053A90(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A38C(&qword_10035EDD8);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_50;
  }
  int64_t v8 = 0;
  uint64_t v36 = (void *)(v5 + 64);
  uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v6 + 64;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v8 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v8++, 1)) {
      goto LABEL_53;
    }
    if (v8 >= v12) {
      break;
    }
    unint64_t v18 = v36[v8];
    if (!v18)
    {
      int64_t v19 = v8 + 1;
      if (v8 + 1 >= v12) {
        break;
      }
      unint64_t v18 = v36[v19];
      if (!v18)
      {
        while (1)
        {
          int64_t v8 = v19 + 1;
          if (__OFADD__(v19, 1)) {
            goto LABEL_52;
          }
          if (v8 >= v12) {
            goto LABEL_44;
          }
          unint64_t v18 = v36[v8];
          ++v19;
          if (v18) {
            goto LABEL_19;
          }
        }
      }
      ++v8;
    }
LABEL_19:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
LABEL_20:
    unsigned int v20 = *(unsigned __int16 *)(*(void *)(v5 + 48) + 2 * v16);
    uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    switch(v20 >> 13)
    {
      case 1u:
        Swift::UInt v23 = v20 & 1;
        Swift::UInt v24 = 1;
        goto LABEL_26;
      case 2u:
        Swift::UInt v23 = v20 & 1;
        Swift::UInt v24 = 3;
LABEL_26:
        Hasher._combine(_:)(v24);
        Hasher._combine(_:)(v23);
        int v22 = (v20 >> 8) & 1;
        goto LABEL_27;
      case 3u:
        Hasher._combine(_:)(4uLL);
        Swift::UInt v25 = v20 & 1;
        goto LABEL_34;
      case 4u:
        if (v20 == 0x8000)
        {
          Swift::UInt v25 = 2;
        }
        else if (v20 == 32769)
        {
          Swift::UInt v25 = 5;
        }
        else
        {
          Swift::UInt v25 = 6;
        }
LABEL_34:
        Hasher._combine(_:)(v25);
        break;
      default:
        Hasher._combine(_:)(0);
        LOBYTE(v22) = v20 & 1;
LABEL_27:
        Hasher._combine(_:)(v22);
        break;
    }
    Swift::Int v26 = Hasher._finalize()();
    uint64_t v27 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v28 = v26 & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v13 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v28) & ~*(void *)(v13 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v30 = 0;
    unint64_t v31 = (unint64_t)(63 - v27) >> 6;
    do
    {
      if (++v29 == v31 && (v30 & 1) != 0)
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        JUMPOUT(0x100053E0CLL);
      }
      BOOL v32 = v29 == v31;
      if (v29 == v31) {
        unint64_t v29 = 0;
      }
      v30 |= v32;
      uint64_t v33 = *(void *)(v13 + 8 * v29);
    }
    while (v33 == -1);
    unint64_t v14 = __clz(__rbit64(~v33)) + (v29 << 6);
LABEL_7:
    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_WORD *)(*(void *)(v7 + 48) + 2 * v14) = v20;
    *(void *)(*(void *)(v7 + 56) + 8 * v14) = v21;
    ++*(void *)(v7 + 16);
  }
LABEL_44:
  if (v37)
  {
    uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
    if (v34 >= 64) {
      bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      *uint64_t v36 = -1 << v34;
    }
    uint64_t v3 = v2;
    *(void *)(v5 + 16) = 0;
LABEL_50:
    uint64_t result = swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    uint64_t v3 = v2;
  }
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100053E20(uint64_t a1, int a2)
{
  return sub_100056E9C(a1, a2, &qword_10035EE28);
}

uint64_t sub_100053E2C(uint64_t a1, int a2)
{
  return sub_100056E9C(a1, a2, &qword_100371930);
}

uint64_t sub_100053E38(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A38C(&qword_10035EE60);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    int v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  int v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100054144(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A38C(&qword_10035EEB0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  *uint64_t v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000543FC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A38C(&qword_100371940);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    char v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    int64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  char v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100054724(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000A38C(&qword_10035EEB8);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v49 = v8;
  uint64_t v50 = v5;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v45 = v6;
  for (i = v9; ; uint64_t v9 = i)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42) {
      break;
    }
    char v24 = v43;
    unint64_t v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v25 = v43[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v42) {
              goto LABEL_34;
            }
            unint64_t v25 = v43[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v47)
    {
      (*v48)(v49, v28, v50);
      BOOL v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
    }
    else
    {
      (*v44)(v49, v28, v50);
      uint64_t v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v30 = *v32;
      uint64_t v31 = v32[1];
      swift_bridgeObjectRetain();
    }
    sub_100044044();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v11 + 48) + v27 * v19, v49, v50);
    unint64_t v20 = (void *)(*(void *)(v11 + 56) + 16 * v19);
    *unint64_t v20 = v30;
    v20[1] = v31;
    ++*(void *)(v11 + 16);
    uint64_t v6 = v45;
  }
  swift_release();
  uint64_t v3 = v41;
  char v24 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100054B30(uint64_t a1, char a2)
{
  return sub_1000554A8(a1, a2, &qword_10035EEA0);
}

uint64_t sub_100054B3C(uint64_t a1, char a2)
{
  return sub_1000575BC(a1, a2, &qword_10035EEA8);
}

uint64_t sub_100054B48(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A38C(&qword_10035EE98);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100054E60(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A38C((uint64_t *)&unk_1003718E0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_100027B00((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_10005C374(v25, (uint64_t)&v38);
      sub_100027B10(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_100027B00(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100055178(uint64_t a1, char a2)
{
  return sub_10005729C(a1, a2, &qword_10035EE90);
}

uint64_t sub_100055184(uint64_t a1, char a2)
{
  return sub_10005729C(a1, a2, &qword_10035EE88);
}

uint64_t sub_100055190(uint64_t a1, char a2)
{
  return sub_100055794(a1, a2, &qword_100371970);
}

uint64_t sub_10005519C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A38C(&qword_100371980);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_100027B00(v24, v35);
      }
      else
      {
        sub_100027B10((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_100027B00(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10005549C(uint64_t a1, char a2)
{
  return sub_1000554A8(a1, a2, &qword_10035EE80);
}

uint64_t sub_1000554A8(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10000A38C(a3);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    unint64_t v10 = (uint64_t *)(v6 + 64);
    uint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v33 = -1 << v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v6 + 64);
    uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v35 = v4;
    int64_t v36 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }
      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v22 >= v36) {
          goto LABEL_33;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v36) {
            goto LABEL_33;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v4 = v35;
                goto LABEL_40;
              }
              if (v34 >= 64) {
                bzero((void *)(v6 + 64), 8 * v36);
              }
              else {
                *unint64_t v10 = v33;
              }
              uint64_t v4 = v35;
              *(void *)(v6 + 16) = 0;
              break;
            }
            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v9 >= v36) {
                  goto LABEL_33;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v9 = v24;
          }
        }
LABEL_30:
        unint64_t v13 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      uint64_t v29 = 8 * v21;
      uint64_t v30 = *(void *)(*(void *)(v6 + 48) + v29);
      uint64_t v31 = *(void **)(*(void *)(v6 + 56) + v29);
      if ((a2 & 1) == 0) {
        id v32 = v31;
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v30;
      *(void *)(*(void *)(v8 + 56) + v19) = v31;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_100055758(uint64_t a1, int a2)
{
  return sub_100056778(a1, a2, &qword_10035EE78);
}

uint64_t sub_100055764(uint64_t a1, int a2)
{
  return sub_100056E9C(a1, a2, &qword_10035EE40);
}

uint64_t sub_100055770(uint64_t a1, char a2)
{
  return sub_100056B84(a1, a2, &qword_10035EE70);
}

uint64_t sub_10005577C(uint64_t a1, char a2)
{
  return sub_10005729C(a1, a2, &qword_10035EE68);
}

uint64_t sub_100055788(uint64_t a1, char a2)
{
  return sub_100055794(a1, a2, &qword_10035EE48);
}

uint64_t sub_100055794(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10000A38C(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_100055AA8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A38C((uint64_t *)&unk_100371960);
  char v39 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    long long v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v39)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v38 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v32 = (uint64_t *)(*(void *)(v5 + 56) + 24 * v21);
      uint64_t v34 = *v32;
      uint64_t v33 = v32[1];
      uint64_t v35 = v32[2];
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *unint64_t v18 = v31;
      v18[1] = v30;
      uint64_t v19 = (void *)(*(void *)(v7 + 56) + 24 * v17);
      *uint64_t v19 = v34;
      v19[1] = v33;
      _OWORD v19[2] = v35;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100055DD0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v55 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v54 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_10000A38C(&qword_10035EE58);
  int v51 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v53 = v7;
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v45 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v43 = v2;
  int64_t v44 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v46 = v5 + 16;
  int v47 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  unint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v50 = v5;
  uint64_t v52 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  uint64_t v48 = v11;
  uint64_t v49 = v8;
  while (1)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v44) {
      break;
    }
    unint64_t v26 = v45;
    unint64_t v27 = v45[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v27 = v45[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v43;
          if ((v51 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v44) {
              goto LABEL_34;
            }
            unint64_t v27 = v45[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v8 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v51)
    {
      (*v18)(v10, v30, v53);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v50 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v50 + 32))(v54, v31 + v32 * v24, v55);
    }
    else
    {
      (*v47)(v10, v30, v53);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v50 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v54, v33 + v32 * v24, v55);
    }
    sub_100044044();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v8 = v49;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      uint64_t v8 = v49;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v53);
    uint64_t result = (*v52)(*(void *)(v13 + 56) + v32 * v22, v54, v55);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v48;
  }
  swift_release();
  uint64_t v3 = v43;
  unint64_t v26 = v45;
  if ((v51 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_1000562AC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t active = type metadata accessor for PCUserAlertManager.ActiveAlertContext(0);
  uint64_t v49 = *(void *)(active - 8);
  __chkstk_darwin(active - 8);
  uint64_t v54 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  int v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10000A38C(&qword_10035EEC0);
  int v50 = a2;
  uint64_t v11 = v10;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v46 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  int64_t v44 = v2;
  int64_t v45 = (unint64_t)(v14 + 63) >> 6;
  int v47 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v52 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v53 = v7;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v48 = v11;
  int64_t v21 = v51;
  while (1)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45) {
      break;
    }
    unint64_t v26 = v46;
    unint64_t v27 = v46[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v27 = v46[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v45) {
              goto LABEL_34;
            }
            unint64_t v27 = v46[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
    int64_t v21 = v51;
LABEL_22:
    uint64_t v29 = v8;
    uint64_t v30 = *(void *)(v8 + 72);
    unint64_t v31 = *(void *)(v11 + 48) + v30 * v24;
    if (v50)
    {
      (*v52)(v21, v31, v53);
      uint64_t v32 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      sub_10005C500(v32 + v33 * v24, v54);
    }
    else
    {
      (*v47)(v21, v31, v53);
      uint64_t v34 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      sub_10005C498(v34 + v33 * v24, v54, type metadata accessor for PCUserAlertManager.ActiveAlertContext);
    }
    sub_100044044();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v35 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      int64_t v21 = v51;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      int64_t v21 = v51;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v18 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v52)((char *)(*(void *)(v13 + 48) + v30 * v22), (unint64_t)v21, v53);
    uint64_t result = sub_10005C500(v54, *(void *)(v13 + 56) + v33 * v22);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v48;
    uint64_t v8 = v29;
  }
  swift_release();
  uint64_t v3 = v44;
  unint64_t v26 = v46;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v11 + 32);
  if (v42 >= 64) {
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v42;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_10005676C(uint64_t a1, int a2)
{
  return sub_100056778(a1, a2, &qword_10035EE50);
}

uint64_t sub_100056778(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_10000A38C(a3);
  int v47 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v43 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v41 = v3;
  int64_t v42 = (unint64_t)(v14 + 63) >> 6;
  int64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v46 = v8;
  uint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v42) {
      break;
    }
    unint64_t v26 = v43;
    unint64_t v27 = v43[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v27 = v43[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v43[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v42) {
              goto LABEL_34;
            }
            unint64_t v27 = v43[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v46 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v47)
    {
      (*v18)(v10, v30, v7);
      id v31 = *(id *)(*(void *)(v11 + 56) + 8 * v24);
    }
    else
    {
      (*v44)(v10, v30, v7);
      id v31 = *(id *)(*(void *)(v11 + 56) + 8 * v24);
    }
    sub_100044044();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v32 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v19 + 8 * v34);
      }
      while (v38 == -1);
      unint64_t v22 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v18)(*(void *)(v13 + 48) + v29 * v22, v10, v7);
    *(void *)(*(void *)(v13 + 56) + 8 * v22) = v31;
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v5 = v41;
  unint64_t v26 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v39 = 1 << *(unsigned char *)(v11 + 32);
  if (v39 >= 64) {
    bzero(v26, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v39;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v13;
  return result;
}

uint64_t sub_100056B6C(uint64_t a1, char a2)
{
  return sub_10005729C(a1, a2, &qword_10035EE38);
}

uint64_t sub_100056B78(uint64_t a1, char a2)
{
  return sub_100056B84(a1, a2, &qword_10035EE30);
}

uint64_t sub_100056B84(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10000A38C(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  unint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    unint64_t v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v36;
  unint64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_100056E90(uint64_t a1, int a2)
{
  return sub_100056E9C(a1, a2, &qword_10035EE20);
}

uint64_t sub_100056E9C(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_10000A38C(a3);
  int v47 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v43 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v41 = v3;
  int64_t v42 = (unint64_t)(v14 + 63) >> 6;
  int64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v46 = v8;
  unint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v42) {
      break;
    }
    char v26 = v43;
    unint64_t v27 = v43[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v27 = v43[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v43[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v42) {
              goto LABEL_34;
            }
            unint64_t v27 = v43[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v46 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v47)
    {
      (*v18)(v10, v30, v7);
      uint64_t v31 = *(void *)(*(void *)(v11 + 56) + 8 * v24);
    }
    else
    {
      (*v44)(v10, v30, v7);
      uint64_t v31 = *(void *)(*(void *)(v11 + 56) + 8 * v24);
      swift_retain();
    }
    sub_100044044();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v32 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v19 + 8 * v34);
      }
      while (v38 == -1);
      unint64_t v22 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v18)(*(void *)(v13 + 48) + v29 * v22, v10, v7);
    *(void *)(*(void *)(v13 + 56) + 8 * v22) = v31;
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v5 = v41;
  char v26 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v39 = 1 << *(unsigned char *)(v11 + 32);
  if (v39 >= 64) {
    bzero(v26, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v26 = -1 << v39;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v13;
  return result;
}

uint64_t sub_100057290(uint64_t a1, char a2)
{
  return sub_10005729C(a1, a2, &qword_10035EE18);
}

uint64_t sub_10005729C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10000A38C(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_1000575B0(uint64_t a1, char a2)
{
  return sub_1000575BC(a1, a2, &qword_10035EE10);
}

uint64_t sub_1000575BC(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10000A38C(a3);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    uint64_t v10 = (uint64_t *)(v6 + 64);
    uint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v32 = -1 << v11;
    uint64_t v33 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v6 + 64);
    int64_t v34 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }
      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v34) {
          goto LABEL_33;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              if (a2)
              {
                if (v33 >= 64) {
                  bzero((void *)(v6 + 64), 8 * v34);
                }
                else {
                  *uint64_t v10 = v32;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v9 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v9 = v24;
          }
        }
LABEL_30:
        unint64_t v13 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      uint64_t v29 = 8 * v21;
      uint64_t v30 = *(void *)(*(void *)(v6 + 48) + v29);
      uint64_t v31 = *(void *)(*(void *)(v6 + 56) + v29);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v30;
      *(void *)(*(void *)(v8 + 56) + v19) = v31;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

unint64_t sub_100057878(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_1000578C4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  BOOL v7 = (void *)(a6[7] + 16 * result);
  *BOOL v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

uint64_t sub_100057914(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  unint64_t v13 = (void *)(a5[7] + 16 * a1);
  *unint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

_OWORD *sub_1000579D4(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_100027B00(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

_OWORD *sub_100057A50(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  long long v6 = (void *)(a5[6] + 16 * a1);
  *long long v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100027B00(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_100057ABC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_100057BB0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t active = type metadata accessor for PCUserAlertManager.ActiveAlertContext(0);
  uint64_t result = sub_10005C500(a3, v10 + *(void *)(*(void *)(active - 8) + 72) * a1);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_100057C8C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_100057D44(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

id sub_100057D8C()
{
  uint64_t v1 = v0;
  sub_10000A38C(&qword_10035EDF0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_26;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    if (!v23) {
      break;
    }
LABEL_23:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_24;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void *sub_100057F28()
{
  return sub_10005A064(&qword_10035EDF8);
}

void *sub_100057F34()
{
  return sub_10005A064(&qword_10035EE00);
}

void *sub_100057F40()
{
  return sub_10005A064(&qword_10035EE08);
}

void *sub_100057F4C()
{
  uint64_t v1 = v0;
  sub_10000A38C(&qword_10035EDD8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 2 * v15;
    __int16 v17 = *(_WORD *)(*(void *)(v2 + 48) + 2 * v15);
    uint64_t v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_WORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000580F4()
{
  return sub_100059DC4(&qword_10035EE28);
}

void *sub_100058100()
{
  return sub_100059DC4(&qword_100371930);
}

void *sub_10005810C()
{
  uint64_t v1 = v0;
  sub_10000A38C(&qword_10035EE60);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    __int16 v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000582BC()
{
  return sub_10005A220(&qword_10035EEB0);
}

void *sub_1000582C8()
{
  uint64_t v1 = v0;
  sub_10000A38C(&qword_100371940);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    __int16 v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    int64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v23 = v19;
    v23[1] = v18;
    unint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *unint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100058484()
{
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  char v37 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A38C(&qword_10035EEB8);
  uint64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v40 = v4;
  if (!v5)
  {
    id result = (void *)swift_release();
    uint64_t v30 = v40;
    uint64_t v29 = v32;
LABEL_25:
    *uint64_t v29 = v30;
    return result;
  }
  uint64_t v6 = v4;
  id result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v40;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v39 = v3;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v35 = v1 + 32;
  uint64_t v36 = v1 + 16;
  unint64_t v14 = v37;
  uint64_t v13 = v38;
  uint64_t v15 = v40;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v9 << 6);
      uint64_t v18 = v39;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t v18 = v39;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v17 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(void *)(v18 + 48) + v19, v13);
    uint64_t v20 = *(void *)(v18 + 56);
    uint64_t v21 = 16 * v17;
    uint64_t v22 = (uint64_t *)(v20 + 16 * v17);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v15 + 48) + v19, v14, v13);
    int64_t v25 = (void *)(*(void *)(v15 + 56) + v21);
    *int64_t v25 = v23;
    v25[1] = v24;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v29 = v32;
    uint64_t v30 = v40;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_10005875C()
{
  return sub_100058D2C(&qword_10035EEA0);
}

void *sub_100058768()
{
  return sub_10005A220(&qword_10035EEA8);
}

void *sub_100058774()
{
  uint64_t v1 = v0;
  sub_10000A38C(&qword_10035EE98);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_retain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10005892C()
{
  uint64_t v1 = v0;
  sub_10000A38C((uint64_t *)&unk_1003718E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_10005C374(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_100027B10(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    id result = sub_100027B00(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100058B14()
{
  return sub_10005A064(&qword_10035EE90);
}

void *sub_100058B20()
{
  return sub_10005A064(&qword_10035EE88);
}

void *sub_100058B2C()
{
  return sub_100058F04(&qword_100371970);
}

void *sub_100058B38()
{
  uint64_t v1 = v0;
  sub_10000A38C(&qword_100371980);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100027B10(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = v19;
    v21[1] = v18;
    sub_100027B00(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100058D20()
{
  return sub_100058D2C(&qword_10035EE80);
}

id sub_100058D2C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000A38C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = *(void *)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 56) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v14) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100058EC8()
{
  return sub_100059960(&qword_10035EE78);
}

void *sub_100058ED4()
{
  return sub_100059DC4(&qword_10035EE40);
}

id sub_100058EE0()
{
  return sub_100059C0C(&qword_10035EE70);
}

void *sub_100058EEC()
{
  return sub_10005A064(&qword_10035EE68);
}

void *sub_100058EF8()
{
  return sub_100058F04(&qword_10035EE48);
}

void *sub_100058F04(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000A38C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000590B4()
{
  uint64_t v1 = v0;
  sub_10000A38C((uint64_t *)&unk_100371960);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 24 * v15;
    uint64_t v21 = (uint64_t *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    unint64_t v24 = (void *)(*(void *)(v4 + 48) + v16);
    uint64_t v25 = v21[2];
    *unint64_t v24 = v19;
    v24[1] = v18;
    uint64_t v26 = (void *)(*(void *)(v4 + 56) + v20);
    *uint64_t v26 = v22;
    v26[1] = v23;
    _OWORD v26[2] = v25;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100059280()
{
  uint64_t v42 = type metadata accessor for Date();
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A38C(&qword_10035EE58);
  uint64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v46 = v4;
  if (!v5)
  {
    id result = (void *)swift_release();
    uint64_t v31 = v46;
    uint64_t v30 = v32;
LABEL_25:
    *uint64_t v30 = v31;
    return result;
  }
  uint64_t v6 = v4;
  id result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v46;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v11 = -1;
  uint64_t v43 = v3;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v45;
  uint64_t v14 = v44;
  uint64_t v37 = v45 + 16;
  uint64_t v38 = v44 + 16;
  uint64_t v35 = v45 + 32;
  uint64_t v36 = v44 + 32;
  unint64_t v15 = v39;
  uint64_t v16 = v40;
  uint64_t v17 = v42;
  uint64_t v18 = v46;
  while (1)
  {
    if (v12)
    {
      unint64_t v19 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v47 = v9;
      unint64_t v20 = v19 | (v9 << 6);
      uint64_t v21 = v43;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t v21 = v43;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    int64_t v28 = v9 + 1;
    if (!v27)
    {
      int64_t v28 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v28);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    int64_t v47 = v28;
    unint64_t v20 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_9:
    unint64_t v22 = *(void *)(v14 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(void *)(v21 + 48) + v22, v16);
    unint64_t v23 = *(void *)(v13 + 72) * v20;
    unint64_t v24 = *(void *)(v21 + 56) + v23;
    uint64_t v25 = v41;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v41, v24, v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v18 + 48) + v22, v15, v16);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(*(void *)(v18 + 56) + v23, v25, v17);
    int64_t v9 = v47;
  }
  int64_t v29 = v26 + 2;
  if (v29 >= v34)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v30 = v32;
    uint64_t v31 = v46;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v29);
  if (v27)
  {
    int64_t v28 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100059628()
{
  uint64_t active = type metadata accessor for PCUserAlertManager.ActiveAlertContext(0);
  uint64_t v29 = *(void *)(active - 8);
  __chkstk_darwin(active - 8);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A38C(&qword_10035EEC0);
  unint64_t v24 = v0;
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *unint64_t v24 = v10;
    return result;
  }
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  uint64_t v25 = v8 + 64;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v27 = v5 + 32;
  uint64_t v28 = v5 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v5 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v19, v4);
    unint64_t v20 = *(void *)(v29 + 72) * v18;
    sub_10005C498(*(void *)(v8 + 56) + v20, (uint64_t)v3, type metadata accessor for PCUserAlertManager.ActiveAlertContext);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v19, v7, v4);
    id result = (void *)sub_10005C500((uint64_t)v3, *(void *)(v10 + 56) + v20);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_100059954()
{
  return sub_100059960(&qword_10035EE50);
}

id sub_100059960(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A38C(a1);
  int64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *int64_t v26 = v9;
    return result;
  }
  id result = (id)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  uint64_t v27 = v7 + 64;
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v30 = v4 + 16;
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v4 + 32;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    unint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    int64_t v21 = *(void **)(*(void *)(v7 + 56) + v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    id result = v21;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100059BF4()
{
  return sub_10005A064(&qword_10035EE38);
}

id sub_100059C00()
{
  return sub_100059C0C(&qword_10035EE30);
}

id sub_100059C0C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000A38C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    unint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    int64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100059DB8()
{
  return sub_100059DC4(&qword_10035EE20);
}

void *sub_100059DC4(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A38C(a1);
  int64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *int64_t v26 = v9;
    return result;
  }
  id result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v27 = v7 + 64;
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v4 + 32;
  uint64_t v30 = v4 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    unint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void *)(*(void *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    id result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10005A058()
{
  return sub_10005A064(&qword_10035EE18);
}

void *sub_10005A064(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000A38C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    unint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10005A214()
{
  return sub_10005A220(&qword_10035EE10);
}

void *sub_10005A220(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000A38C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = *(void *)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 56) + v17) = v18;
    id result = (void *)swift_retain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v14) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10005A3BC()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t sub_10005A3F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = &v10[-v5];
  uint64_t v8 = v1 + *(void *)(v7 + 128);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
  sub_10004E5CC(a1);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v8, a1, v3);
  swift_endAccess();
  sub_10004E770((uint64_t)v6);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10005A558()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10005A568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 32) - 8) + 16))(a2, a1);
}

uint64_t type metadata accessor for StateMachine2.TransitionError()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10005A5B4(void (**a1)(uint64_t *__return_ptr, void))
{
  return sub_10005C58C(a1) & 1;
}

uint64_t sub_10005A5D0(uint64_t (**a1)(void))
{
  return (*a1)(*(void *)(v1 + 56));
}

void *sub_10005A608@<X0>(void *(**a1)(uint64_t *__return_ptr, void)@<X0>, void *a2@<X8>)
{
  id result = (*a1)(&v5, *(void *)(v2 + 56));
  *a2 = v5;
  return result;
}

uint64_t sub_10005A658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100051FFC(a1, v2[7], v2[3], v2[4], a2);
}

uint64_t sub_10005A680()
{
  return sub_100052174();
}

uint64_t type metadata accessor for StateMachine2()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10005A6B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100052EFC(a1, v2[2], v2[3], v2[4], v2[5], v2[6], a2);
}

uint64_t sub_10005A6DC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10005A79C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout3();
      swift_initEnumMetadataSinglePayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_10005A878(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v14 = *(_DWORD *)(v9 + 80);
  uint64_t v15 = v13 + v14;
  uint64_t v16 = *(void *)(*(void *)(v5 - 8) + 64) + 7;
  size_t v17 = ((v16 + ((v13 + v14) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v18 = v14 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v18 > 7 || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v17 > 0x18)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + (((v18 | 7) + 16) & ~(unint64_t)(v18 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v22 = ~v14;
    if (v8 == v12)
    {
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, v8, v6)) {
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v23 = ((unint64_t)a2 + v15) & v22;
      if (v11 == v12)
      {
        if (!(*(unsigned int (**)(unint64_t))(v9 + 48))(v23))
        {
LABEL_24:
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
          unint64_t v25 = ((unint64_t)a2 + v15) & v22;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v15) & v22, v25, v5);
          *(void *)((v16 + (((unint64_t)a1 + v15) & v22)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v16 + v25) & 0xFFFFFFFFFFFFFFF8);
          swift_bridgeObjectRetain();
          return a1;
        }
      }
      else
      {
        unint64_t v24 = *(void *)((v16 + v23) & 0xFFFFFFFFFFFFFFF8);
        if (v24 >= 0xFFFFFFFF) {
          LODWORD(v24) = -1;
        }
        if (v24 == -1) {
          goto LABEL_24;
        }
      }
    }
    memcpy(a1, a2, v17);
  }
  return a1;
}

uint64_t sub_10005AAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  uint64_t v10 = *(unsigned int *)(v8 + 84);
  if (v10 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  uint64_t v12 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = ~v13;
  if (v6 == v11)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v5 + 48))(a1);
    if (result) {
      return result;
    }
    goto LABEL_15;
  }
  uint64_t v16 = (v12 + v13 + a1) & v14;
  if (v10 == v11)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v16, v10, v7);
    if (result) {
      return result;
    }
    goto LABEL_15;
  }
  unint64_t v17 = *(void *)((*(void *)(v8 + 64) + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  uint64_t result = (v17 + 1);
  if (v17 == -1)
  {
LABEL_15:
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))((v12 + v13 + a1) & v14, v7);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_10005ACB8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = v9;
  uint64_t v11 = *(unsigned int *)(v9 + 84);
  if (v11 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = ~v13;
  uint64_t v15 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v13;
  uint64_t v16 = *(void *)(*(void *)(v5 - 8) + 64) + 7;
  if (v8 == v12)
  {
    if (!(*(unsigned int (**)(const void *))(v7 + 48))(a2)) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v17 = ((unint64_t)a2 + v15) & v14;
    if (v11 == v12)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v17, v11, v5))
      {
LABEL_15:
        (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
        unint64_t v19 = ((unint64_t)a2 + v15) & v14;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v15) & v14, v19, v5);
        *(void *)((v16 + (((unint64_t)a1 + v15) & v14)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v16 + v19) & 0xFFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain();
        return a1;
      }
    }
    else
    {
      unint64_t v18 = *(void *)((v16 + v17) & 0xFFFFFFFFFFFFFFF8);
      if (v18 >= 0xFFFFFFFF) {
        LODWORD(v18) = -1;
      }
      if (v18 == -1) {
        goto LABEL_15;
      }
    }
  }
  memcpy(a1, a2, ((v16 + (v15 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

void *sub_10005AEB8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  if (v9 <= v6) {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = ~v11;
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v11;
  uint64_t v14 = *(void *)(v7 + 64) + 7;
  unint64_t v15 = (v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8;
  size_t v16 = v15 + 8;
  uint64_t v37 = *(void *)(*(void *)(a3 + 16) - 8);
  if (v6 != v10)
  {
    unint64_t v24 = ((unint64_t)a1 + v13) & v12;
    unint64_t v25 = ((unint64_t)a2 + v13) & v12;
    if (v9 == v10)
    {
      int64_t v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
      int v35 = v26(v24, v9, v4);
      int v22 = v26(v25, v9, v4);
      if (v35) {
        goto LABEL_8;
      }
    }
    else
    {
      unint64_t v27 = *(void *)((v14 + v24) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v28 = *(void *)((v14 + v25) & 0xFFFFFFFFFFFFFFF8);
      if (v28 >= 0xFFFFFFFF) {
        LODWORD(v28) = -1;
      }
      int v22 = v28 + 1;
      if (v27 <= 0xFFFFFFFE) {
        goto LABEL_8;
      }
    }
LABEL_16:
    if (!v22)
    {
      unint64_t v23 = a1;
      (*(void (**)(void *, void *, uint64_t))(v37 + 24))(a1, a2, v3);
      unint64_t v31 = ((unint64_t)a1 + v13) & v12;
      unint64_t v32 = ((unint64_t)a2 + v13) & v12;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(v31, v32, v4);
      *(void *)((v14 + v31) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v14 + v32) & 0xFFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v23;
    }
    unint64_t v23 = a1;
    (*(void (**)(void *, uint64_t))(v37 + 8))(a1, v3);
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)a1 + v13) & v12, v4);
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v34 = *(void *)(v7 + 64) + 7;
  size_t __n = v15 + 8;
  uint64_t v17 = *(void *)(a3 + 24);
  unint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v20 = v19(a1, v6, v3);
  uint64_t v21 = a2;
  uint64_t v4 = v17;
  uint64_t v14 = v34;
  int v22 = v19(v21, v6, v3);
  size_t v16 = __n;
  if (!v20) {
    goto LABEL_16;
  }
LABEL_8:
  if (!v22)
  {
    unint64_t v23 = a1;
    (*(void (**)(void *, void *, uint64_t))(v37 + 16))(a1, a2, v3);
    unint64_t v29 = ((unint64_t)a1 + v13) & v12;
    unint64_t v30 = ((unint64_t)a2 + v13) & v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v29, v30, v4);
    *(void *)((v14 + v29) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v14 + v30) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    return v23;
  }
  unint64_t v23 = a1;
LABEL_18:
  memcpy(v23, a2, v16);
  return v23;
}

void *sub_10005B21C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = v9;
  uint64_t v11 = *(unsigned int *)(v9 + 84);
  if (v11 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = ~v13;
  uint64_t v15 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v13;
  uint64_t v16 = *(void *)(*(void *)(v5 - 8) + 64) + 7;
  if (v8 == v12)
  {
    if (!(*(unsigned int (**)(const void *))(v7 + 48))(a2)) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v17 = ((unint64_t)a2 + v15) & v14;
    if (v11 == v12)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v17, v11, v5))
      {
LABEL_15:
        (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
        unint64_t v19 = ((unint64_t)a2 + v15) & v14;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))(((unint64_t)a1 + v15) & v14, v19, v5);
        *(void *)((v16 + (((unint64_t)a1 + v15) & v14)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v16 + v19) & 0xFFFFFFFFFFFFFFF8);
        return a1;
      }
    }
    else
    {
      unint64_t v18 = *(void *)((v16 + v17) & 0xFFFFFFFFFFFFFFF8);
      if (v18 >= 0xFFFFFFFF) {
        LODWORD(v18) = -1;
      }
      if (v18 == -1) {
        goto LABEL_15;
      }
    }
  }
  memcpy(a1, a2, ((v16 + (v15 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

void *sub_10005B418(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned int *)(v6 + 84);
  if (v8 <= v5) {
    unsigned int v9 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = ~v10;
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v10;
  uint64_t v13 = *(void *)(v6 + 64) + 7;
  unint64_t v14 = (v13 + (v12 & ~v10)) & 0xFFFFFFFFFFFFFFF8;
  size_t v15 = v14 + 8;
  uint64_t v42 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v43 = *(void *)(a3 + 16);
  if (v5 != v9)
  {
    unint64_t v27 = ((unint64_t)a1 + v12) & v11;
    unint64_t v28 = ((unint64_t)a2 + v12) & v11;
    if (v8 == v9)
    {
      uint64_t v29 = *(void *)(v6 + 64) + 7;
      unint64_t v30 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
      int v41 = v30(v27, v8, v3);
      int v25 = v30(v28, v8, v3);
      uint64_t v13 = v29;
      if (v41) {
        goto LABEL_8;
      }
    }
    else
    {
      unint64_t v31 = *(void *)((v13 + v27) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v32 = *(void *)((v13 + v28) & 0xFFFFFFFFFFFFFFF8);
      if (v32 >= 0xFFFFFFFF) {
        LODWORD(v32) = -1;
      }
      int v25 = v32 + 1;
      if (v31 <= 0xFFFFFFFE) {
        goto LABEL_8;
      }
    }
LABEL_16:
    if (!v25)
    {
      int64_t v26 = a1;
      (*(void (**)(void *, void *, uint64_t))(v42 + 40))(a1, a2, v43);
      uint64_t v36 = v11;
      unint64_t v37 = ((unint64_t)a1 + v12) & v11;
      unint64_t v38 = ((unint64_t)a2 + v12) & v36;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(v37, v38, v3);
      *(void *)((v13 + v37) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v13 + v38) & 0xFFFFFFFFFFFFFFF8);
      swift_bridgeObjectRelease();
      return v26;
    }
    int64_t v26 = a1;
    (*(void (**)(void *, uint64_t))(v42 + 8))(a1, v43);
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)a1 + v12) & v11, v3);
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v40 = *(void *)(a3 + 24);
  unint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v4 + 48);
  size_t v18 = v14 + 8;
  uint64_t v19 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v10;
  uint64_t v20 = ~v10;
  uint64_t v21 = *(void *)(a3 + 16);
  int v22 = v17(a1, v5, v21);
  unint64_t v23 = a2;
  uint64_t v3 = v40;
  uint64_t v24 = v21;
  uint64_t v11 = v20;
  uint64_t v12 = v19;
  size_t v15 = v18;
  int v25 = v17(v23, v5, v24);
  if (!v22) {
    goto LABEL_16;
  }
LABEL_8:
  if (!v25)
  {
    int64_t v26 = a1;
    (*(void (**)(void *, void *, uint64_t))(v42 + 32))(a1, a2, v43);
    uint64_t v33 = v11;
    unint64_t v34 = ((unint64_t)a1 + v12) & v11;
    unint64_t v35 = ((unint64_t)a2 + v12) & v33;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(v34, v35, v3);
    *(void *)((v13 + v34) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v13 + v35) & 0xFFFFFFFFFFFFFFF8);
    return v26;
  }
  int64_t v26 = a1;
LABEL_18:
  memcpy(v26, a2, v15);
  return v26;
}

uint64_t sub_10005B784(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= v6) {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  if (v10 <= 0x7FFFFFFF) {
    int v12 = 0x7FFFFFFF;
  }
  else {
    int v12 = v10;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v4 - 8) + 64) + v11;
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + 7;
  if (v12 - 1 < a2)
  {
    unint64_t v15 = ((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v16 = a2 - v12 + 2;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v15);
        if (!*((unsigned char *)a1 + v15)) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v15);
        if (*(_WORD *)((char *)a1 + v15)) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10005B98CLL);
      case 4:
        int v19 = *(_DWORD *)((char *)a1 + v15);
        if (!v19) {
          break;
        }
LABEL_24:
        unsigned int v21 = v19 - 1;
        if ((v15 & 0xFFFFFFF8) != 0)
        {
          unsigned int v21 = 0;
          int v22 = *a1;
        }
        else
        {
          int v22 = 0;
        }
        return (v22 | v21) + v12;
      default:
        break;
    }
  }
  if (v6 == v12)
  {
    unsigned int v23 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4, v13);
  }
  else
  {
    unint64_t v24 = ((unint64_t)a1 + v13) & ~v11;
    if (v9 == v12)
    {
      unsigned int v23 = (*(uint64_t (**)(unint64_t))(v8 + 48))(v24);
    }
    else
    {
      unint64_t v25 = *(void *)((v14 + v24) & 0xFFFFFFFFFFFFFFF8);
      if (v25 >= 0xFFFFFFFF) {
        LODWORD(v25) = -1;
      }
      unsigned int v23 = v25 + 1;
    }
  }
  if (v23 >= 2) {
    return v23 - 1;
  }
  else {
    return 0;
  }
}

void sub_10005B9A0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  unsigned int v13 = v12 - 1;
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64) + 7;
  size_t v16 = ((v15 + (v14 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v17 = a3 - v12 + 2;
  if (((v15 + (v14 & ~v11)) & 0xFFFFFFF8) != 0xFFFFFFF8) {
    unsigned int v17 = 2;
  }
  if (v17 >= 0x10000) {
    int v18 = 4;
  }
  else {
    int v18 = 2;
  }
  if (v17 < 0x100) {
    int v18 = 1;
  }
  if (v17 >= 2) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = 0;
  }
  if (v13 < a3) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v13 < a2)
  {
    unsigned int v21 = a2 - v12;
    if (((v15 + (v14 & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v22 = v21 + 1;
    }
    else {
      int v22 = 1;
    }
    if (((v15 + (v14 & ~v11)) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      bzero(a1, ((v15 + (v14 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v21;
    }
    switch(v20)
    {
      case 1:
        a1[v16] = v22;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v22;
        return;
      case 3:
        goto LABEL_53;
      case 4:
        *(_DWORD *)&a1[v16] = v22;
        return;
      default:
        return;
    }
  }
  uint64_t v23 = ~v11;
  switch(v20)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x10005BC68);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_33;
    default:
LABEL_33:
      if (a2)
      {
LABEL_34:
        if (a2 + 1 <= v12)
        {
          if (a2 != -1)
          {
            if (v7 == v12)
            {
              unint64_t v25 = *(void (**)(char *, uint64_t))(v6 + 56);
              uint64_t v26 = a2 + 1;
              v25(a1, v26);
            }
            else
            {
              unint64_t v27 = (unint64_t)&a1[v14] & v23;
              if (v10 == v12)
              {
                unint64_t v28 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
                uint64_t v29 = a2 + 1;
                v28(v27, v29, v10, v8);
              }
              else
              {
                if (((a2 + 1) & 0x80000000) != 0) {
                  uint64_t v30 = a2 - 0x7FFFFFFF;
                }
                else {
                  uint64_t v30 = a2;
                }
                *(void *)((v15 + v27) & 0xFFFFFFFFFFFFFFF8) = v30;
              }
            }
          }
        }
        else if (v16)
        {
          unsigned int v24 = a2 - v12;
          bzero(a1, v16);
          *(_DWORD *)a1 = v24;
        }
      }
      return;
  }
}

uint64_t sub_10005BC90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= v4) {
    unsigned int v7 = *(_DWORD *)(v3 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  if (v4 == v7) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, v4, v2);
  }
  unint64_t v9 = (*(void *)(v3 + 64) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  if (v6 == v7) {
    return (*(uint64_t (**)(unint64_t))(v5 + 48))(v9);
  }
  unint64_t v10 = *(void *)((*(void *)(v5 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  return (v10 + 1);
}

void sub_10005BD90(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v4 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(v7 + 64);
  if (v8 <= v6) {
    unsigned int v12 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  uint64_t v13 = ~v10;
  uint64_t v14 = v9 + v10;
  if (v12 >= a2)
  {
    if (a2)
    {
      if (v6 == v12)
      {
        size_t v16 = *(void (**)(void))(v5 + 56);
        v16();
      }
      else
      {
        unint64_t v17 = ((unint64_t)a1 + v14) & v13;
        if (v8 == v12)
        {
          int v18 = *(void (**)(unint64_t))(v7 + 56);
          v18(v17);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *(void *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) = v19;
        }
      }
    }
  }
  else if ((((v14 & v13) + v11 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v15 = ~v12 + a2;
    bzero(a1, (((v14 & v13) + v11 + 7) & 0xFFFFFFF8) + 8);
    *a1 = v15;
  }
}

uint64_t *sub_10005BF38(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10005BF70(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10005BFD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  sub_10005C498(a1, a2, type metadata accessor for ExperienceEffect);
  uint64_t v5 = sub_10000A38C(&qword_10035EDB0);
  return sub_10005C498(v4, a2 + *(int *)(v5 + 36), type metadata accessor for ExperienceEvent);
}

BOOL sub_10005C054(uint64_t a1)
{
  return sub_10005C084(*(void (**)(uint64_t *__return_ptr, char *))(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(v1 + 16));
}

BOOL sub_10005C084(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void (*v14)(uint64_t *__return_ptr, uint64_t);
  BOOL v15;
  void v17[2];
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *__return_ptr, char *);

  uint64_t v20 = a1;
  uint64_t v9 = type metadata accessor for ExperienceEvent(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a4 + 16);
  if (v12)
  {
    v17[1] = v6;
    swift_bridgeObjectRetain();
    uint64_t v13 = a4 + 40;
    while (1)
    {
      uint64_t v14 = *(void (**)(uint64_t *__return_ptr, uint64_t))(v13 - 8);
      swift_retain();
      v14(&v18, a6);
      swift_release();
      if (v18 != 1) {
        break;
      }
      v13 += 16;
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    sub_10005C498(a6, (uint64_t)v11, type metadata accessor for ExperienceEvent);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v15 = 0;
  }
  else
  {
LABEL_6:
    sub_10005C498(a6, (uint64_t)v11, type metadata accessor for ExperienceEvent);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20(&v18, v11);
    int v15 = v19 != 0;
    sub_10005C278(v18, v19);
  }
  sub_10004D374((uint64_t)v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v15;
}

uint64_t sub_10005C278(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10005C2C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005C2F4(uint64_t *a1, uint64_t a2)
{
  return sub_10004F854(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_10005C318()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10005C328()
{
  return Array.init()();
}

uint64_t sub_10005C364()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10005C374(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10005C3D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10035C0A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005C438(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10035C0A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10005C498(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10005C500(uint64_t a1, uint64_t a2)
{
  uint64_t active = type metadata accessor for PCUserAlertManager.ActiveAlertContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(active - 8) + 32))(a2, a1, active);
  return a2;
}

BOOL sub_10005C564(uint64_t a1)
{
  return sub_1000503CC(a1, v1[7], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10005C58C(void (**a1)(uint64_t *__return_ptr, void))
{
  (*a1)(&v3, *(void *)(v1 + 56));
  return v3;
}

uint64_t sub_10005C5D8(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x74756F656D6974;
  }
  else {
    uint64_t v3 = 0x6E6F74747562;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x74756F656D6974;
  }
  else {
    uint64_t v5 = 0x6E6F74747562;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10005C67C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x72656E6E6162;
  }
  else {
    uint64_t v3 = 0x6572757472657061;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x72656E6E6162;
  }
  else {
    uint64_t v5 = 0x6572757472657061;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10005C720(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x746C7561666564;
  }
  else {
    uint64_t v3 = 0x6F69746163756465;
  }
  if (v2) {
    unint64_t v4 = 0xE90000000000006ELL;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x746C7561666564;
  }
  else {
    uint64_t v5 = 0x6F69746163756465;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE90000000000006ELL;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10005C7CC(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 2003790951;
    }
    else {
      uint64_t v3 = 0x6D6F6F6C62;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000;
    }
    else {
      unint64_t v4 = 0xE500000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 2003790951;
      }
      else {
        uint64_t v6 = 0x6D6F6F6C62;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000;
      }
      else {
        unint64_t v7 = 0xE500000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1701602409;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1701602409)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10005C8C0(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1952870259;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1952870259;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x746867696CLL;
      break;
    case 2:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x6D756964656DLL;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x7976616568;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x6469676972;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x746867696CLL) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x6D756964656DLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x7976616568;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x6469676972) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10005CA5C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x7974697669746361;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x7974697669746361;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x656369766564;
      break;
    case 2:
      unint64_t v6 = "deviceWithActivity";
      goto LABEL_6;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x7974706D65;
      break;
    case 4:
      unint64_t v6 = "proximityIndicator";
LABEL_6:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000012;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0xE600000000000000;
      unint64_t v2 = 0x656369766564;
      break;
    case 2:
      char v8 = "deviceWithActivity";
      goto LABEL_12;
    case 3:
      unint64_t v7 = 0xE500000000000000;
      unint64_t v2 = 0x7974706D65;
      break;
    case 4:
      char v8 = "proximityIndicator";
LABEL_12:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD000000000000012;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_10005CBF4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x737569646172;
  }
  else {
    uint64_t v3 = 0x656C797473;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x737569646172;
  }
  else {
    uint64_t v5 = 0x656C797473;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10005CC94(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000014;
  }
  else {
    unint64_t v3 = 0x74696D69786F7270;
  }
  if (v2) {
    unint64_t v4 = 0xED00006472614379;
  }
  else {
    unint64_t v4 = 0x80000001002B14A0;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000014;
  }
  else {
    unint64_t v5 = 0x74696D69786F7270;
  }
  if (a2) {
    unint64_t v6 = 0x80000001002B14A0;
  }
  else {
    unint64_t v6 = 0xED00006472614379;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10005CD4C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x616964656DLL;
  }
  else {
    uint64_t v3 = 1819042147;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x616964656DLL;
  }
  else {
    uint64_t v5 = 1819042147;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10005CDE8(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v2 = 0x656772616CLL;
    }
    else {
      uint64_t v2 = 0x726568746FLL;
    }
    unint64_t v3 = 0xE500000000000000;
    int v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1) {
        uint64_t v5 = 0x656772616CLL;
      }
      else {
        uint64_t v5 = 0x726568746FLL;
      }
      unint64_t v6 = 0xE500000000000000;
      if (v2 != v5) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v3 = 0xE700000000000000;
    uint64_t v2 = 0x746C7561666564;
    int v4 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }
  unint64_t v6 = 0xE700000000000000;
  if (v2 != 0x746C7561666564)
  {
LABEL_15:
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6) {
    goto LABEL_15;
  }
  char v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10005CEF4(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x656D695465636146;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x656D695465636146;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x636973754DLL;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x656E6F6850;
      break;
    case 3:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x74736163646F50;
      break;
    case 4:
      unint64_t v3 = 0x80000001002B1430;
      unint64_t v5 = 0xD000000000000019;
      break;
    case 5:
      unint64_t v5 = 0xD00000000000001ALL;
      unint64_t v3 = 0x80000001002B1450;
      break;
    case 6:
      unint64_t v5 = 0x436E776F6E6B6E55;
      unint64_t v3 = 0xEB000000006C6C61;
      break;
    case 7:
      unint64_t v5 = 0x4D6E776F6E6B6E55;
      unint64_t v3 = 0xEC00000061696465;
      break;
    case 8:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x6E776F6E6B6E55;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x636973754DLL) {
        goto LABEL_25;
      }
      goto LABEL_28;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x656E6F6850) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x74736163646F50) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 4:
      unint64_t v6 = 0x80000001002B1430;
      if (v5 != 0xD000000000000019) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      unint64_t v6 = 0x80000001002B1450;
      if (v5 != 0xD00000000000001ALL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 6:
      unint64_t v6 = 0xEB000000006C6C61;
      if (v5 != 0x436E776F6E6B6E55) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 7:
      uint64_t v2 = 0x4D6E776F6E6B6E55;
      unint64_t v6 = 0xEC00000061696465;
      goto LABEL_24;
    case 8:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x6E776F6E6B6E55) {
        goto LABEL_28;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v5 != v2) {
        goto LABEL_28;
      }
LABEL_25:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_28:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10005D1E8(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x63697373616C63;
    }
    else {
      uint64_t v3 = 0x6C6C657764;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE700000000000000;
    }
    else {
      unint64_t v4 = 0xE500000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x63697373616C63;
      }
      else {
        uint64_t v6 = 0x6C6C657764;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE700000000000000;
      }
      else {
        unint64_t v7 = 0xE500000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1701736302;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1701736302)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10005D2EC(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1685024583;
    }
    else {
      uint64_t v3 = 0x2E2E2E726568744FLL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000;
    }
    else {
      unint64_t v4 = 0xE800000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 1685024583;
      }
      else {
        uint64_t v6 = 0x2E2E2E726568744FLL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000;
      }
      else {
        unint64_t v7 = 0xE800000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 6578498;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE300000000000000;
  if (v3 != 6578498)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10005D3E8(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000015;
  unint64_t v4 = 0x80000001002B1890;
  switch(a1)
  {
    case 1:
      int v5 = "Handoff didn't work";
      goto LABEL_4;
    case 2:
      int v5 = "Unexpected behavior";
LABEL_4:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD000000000000013;
      break;
    case 3:
      unint64_t v3 = 0xD000000000000012;
      uint64_t v6 = "Confusing behavior";
      goto LABEL_7;
    case 4:
      unint64_t v3 = 0xD000000000000011;
      uint64_t v6 = "Performance issue";
LABEL_7:
      unint64_t v4 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 5:
      unint64_t v3 = 0x636F20726F727245;
      unint64_t v4 = 0xEE00646572727563;
      break;
    case 6:
      unint64_t v4 = 0xE800000000000000;
      unint64_t v3 = 0x2E2E2E726568744FLL;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xD000000000000015;
  unint64_t v8 = 0x80000001002B1890;
  switch(a2)
  {
    case 1:
      char v9 = "Handoff didn't work";
      goto LABEL_13;
    case 2:
      char v9 = "Unexpected behavior";
LABEL_13:
      unint64_t v8 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      if (v3 != 0xD000000000000013) {
        goto LABEL_24;
      }
      goto LABEL_21;
    case 3:
      unint64_t v10 = 0xD000000000000012;
      uint64_t v11 = "Confusing behavior";
      goto LABEL_17;
    case 4:
      unint64_t v10 = 0xD000000000000011;
      uint64_t v11 = "Performance issue";
LABEL_17:
      unint64_t v8 = (unint64_t)(v11 - 32) | 0x8000000000000000;
      if (v3 != v10) {
        goto LABEL_24;
      }
      goto LABEL_21;
    case 5:
      unint64_t v7 = 0x636F20726F727245;
      unint64_t v8 = 0xEE00646572727563;
      goto LABEL_20;
    case 6:
      unint64_t v8 = 0xE800000000000000;
      if (v3 != 0x2E2E2E726568744FLL) {
        goto LABEL_24;
      }
      goto LABEL_21;
    default:
LABEL_20:
      if (v3 != v7) {
        goto LABEL_24;
      }
LABEL_21:
      if (v4 == v8) {
        char v12 = 1;
      }
      else {
LABEL_24:
      }
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v12 & 1;
  }
}

uint64_t sub_10005D61C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x80000001002B1940;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000012;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000014;
      uint64_t v6 = "Media PULL to iPhone";
      goto LABEL_5;
    case 2:
      unint64_t v5 = 0xD00000000000001ALL;
      uint64_t v6 = "FaceTime/Call PUSH to peer";
      goto LABEL_5;
    case 3:
      unint64_t v5 = 0xD00000000000001CLL;
      uint64_t v6 = "FaceTime/Call PULL to iPhone";
LABEL_5:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 4:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x2E2E2E726568744FLL;
      break;
    default:
      break;
  }
  unint64_t v7 = 0x80000001002B1940;
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xD000000000000014;
      unint64_t v8 = "Media PULL to iPhone";
      goto LABEL_11;
    case 2:
      unint64_t v2 = 0xD00000000000001ALL;
      unint64_t v8 = "FaceTime/Call PUSH to peer";
      goto LABEL_11;
    case 3:
      unint64_t v2 = 0xD00000000000001CLL;
      unint64_t v8 = "FaceTime/Call PULL to iPhone";
LABEL_11:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      goto LABEL_12;
    case 4:
      unint64_t v7 = 0xE800000000000000;
      if (v5 != 0x2E2E2E726568744FLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v7) {
        char v9 = 1;
      }
      else {
LABEL_16:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_10005D7B4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x4872616C75676572;
  }
  else {
    uint64_t v3 = 0x6F69746163756465;
  }
  if (v2) {
    unint64_t v4 = 0xED0000746E69486ELL;
  }
  else {
    unint64_t v4 = 0xEB00000000746E69;
  }
  if (a2) {
    uint64_t v5 = 0x4872616C75676572;
  }
  else {
    uint64_t v5 = 0x6F69746163756465;
  }
  if (a2) {
    unint64_t v6 = 0xEB00000000746E69;
  }
  else {
    unint64_t v6 = 0xED0000746E69486ELL;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10005D870(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0x80000001002B17A0;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v4 = 0xD000000000000022;
    }
    else {
      unint64_t v4 = 0xD000000000000010;
    }
    if (v3 == 1) {
      unint64_t v5 = 0x80000001002B17C0;
    }
    else {
      unint64_t v5 = 0x80000001002B17F0;
    }
    int v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1) {
        unint64_t v7 = 0xD000000000000022;
      }
      else {
        unint64_t v7 = 0xD000000000000010;
      }
      if (v6 == 1) {
        unint64_t v2 = 0x80000001002B17C0;
      }
      else {
        unint64_t v2 = 0x80000001002B17F0;
      }
      if (v4 != v7) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xD000000000000015;
    unint64_t v5 = 0x80000001002B17A0;
    int v6 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  if (v4 != 0xD000000000000015)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v2) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10005D974(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x737961776C41;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x737961776C41;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x74276E6469442049;
      unint64_t v3 = 0xEC00000079725420;
      break;
    case 2:
      uint64_t v5 = 0x6C70704120746F4ELL;
      unint64_t v3 = 0xEE00656C62616369;
      break;
    case 3:
      uint64_t v5 = 0x796C65726152;
      break;
    case 4:
      uint64_t v5 = 0x656D6974656D6F53;
      unint64_t v3 = 0xE900000000000073;
      break;
    case 5:
      uint64_t v5 = 0x656C62616E55;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEC00000079725420;
      if (v5 == 0x74276E6469442049) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v6 = 0xEE00656C62616369;
      if (v5 != 0x6C70704120746F4ELL) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      if (v5 != 0x796C65726152) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      uint64_t v2 = 0x656D6974656D6F53;
      unint64_t v6 = 0xE900000000000073;
      goto LABEL_15;
    case 5:
      if (v5 != 0x656C62616E55) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10005DB88(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x4866666F646E6168;
  }
  else {
    uint64_t v3 = 0x647261646E617473;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xEB00000000746E69;
  }
  if (a2) {
    uint64_t v5 = 0x4866666F646E6168;
  }
  else {
    uint64_t v5 = 0x647261646E617473;
  }
  if (a2) {
    unint64_t v6 = 0xEB00000000746E69;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10005DC38(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000024;
  unint64_t v4 = 0x80000001002B15F0;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 0x80000001002B1620;
      unint64_t v3 = 0xD00000000000001ALL;
      break;
    case 2:
      unint64_t v3 = 0xD000000000000026;
      uint64_t v5 = "com.apple.ProximityControlUI.HandoffUI";
      goto LABEL_7;
    case 3:
      unint64_t v3 = 0xD00000000000002DLL;
      uint64_t v5 = "com.apple.proximitycontrol.lockscreenControls";
      goto LABEL_7;
    case 4:
      unint64_t v3 = 0xD000000000000030;
      uint64_t v5 = "com.apple.proximitycontrol.mediaTransferObserver";
      goto LABEL_7;
    case 5:
      unint64_t v3 = 0xD000000000000029;
      uint64_t v5 = "com.apple.proximitycontrol.remoteActivity";
LABEL_7:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xD000000000000024;
  unint64_t v7 = 0x80000001002B15F0;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0x80000001002B1620;
      unint64_t v6 = 0xD00000000000001ALL;
      break;
    case 2:
      unint64_t v6 = 0xD000000000000026;
      char v8 = "com.apple.ProximityControlUI.HandoffUI";
      goto LABEL_14;
    case 3:
      unint64_t v6 = 0xD00000000000002DLL;
      char v8 = "com.apple.proximitycontrol.lockscreenControls";
      goto LABEL_14;
    case 4:
      unint64_t v6 = 0xD000000000000030;
      char v8 = "com.apple.proximitycontrol.mediaTransferObserver";
      goto LABEL_14;
    case 5:
      unint64_t v6 = 0xD000000000000029;
      char v8 = "com.apple.proximitycontrol.remoteActivity";
LABEL_14:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v3 == v6 && v4 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_10005DE00(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x646F50656D6F48;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x646F50656D6F48;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1684099177;
      break;
    case 2:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x656E6F685069;
      break;
    case 3:
      uint64_t v5 = 1685016681;
      unint64_t v3 = 0xE400000000000000;
      break;
    case 4:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 6513005;
      break;
    case 5:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v5 = 30324;
      break;
    case 6:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x6863746177;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1684099177) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x656E6F685069) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1685016681) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      unint64_t v6 = 0xE300000000000000;
      if (v5 != 6513005) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      unint64_t v6 = 0xE200000000000000;
      uint64_t v2 = 30324;
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x6863746177) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10005DFFC(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v6 = sub_10000A38C(&qword_10035F278);
  __chkstk_darwin(v6 - 8);
  char v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ExperienceEvent(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D728(a2, (uint64_t)v8, &qword_10035F278);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000D78C((uint64_t)v8, &qword_10035F278);
  }
  else
  {
    sub_1000713EC((uint64_t)v8, (uint64_t)v12, type metadata accessor for ExperienceEvent);
    char v13 = sub_10025CD90(a1, (uint64_t)v12);
    sub_10006DE5C((uint64_t)v12, type metadata accessor for ExperienceEvent);
    if ((v13 & 1) == 0) {
      return 0;
    }
  }
  return a3;
}

uint64_t sub_10005E1C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = *((void *)v3 + 1);
  uint64_t v7 = *((void *)v3 + 2);
  uint64_t v9 = *((void *)v3 + 3);
  uint64_t v10 = *((void *)v3 + 4);
  uint64_t v11 = (void *)*((void *)v3 + 5);
  int v18 = v11;
  __int16 v12 = *v3;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10005C2C8((uint64_t)&v18);
  swift_retain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v11 = sub_100088C74(0, v11[2] + 1, 1, v11);
  }
  unint64_t v15 = v11[2];
  unint64_t v14 = v11[3];
  if (v15 >= v14 >> 1) {
    uint64_t v11 = sub_100088C74((void *)(v14 > 1), v15 + 1, 1, v11);
  }
  v11[2] = v15 + 1;
  size_t v16 = &v11[2 * v15];
  v16[4] = sub_100071A74;
  void v16[5] = v13;
  uint64_t result = swift_release();
  *(_WORD *)a3 = v12;
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = v10;
  *(void *)(a3 + 40) = v11;
  return result;
}

__n128 sub_10005E300@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  __n128 v16 = *v3;
  unint64_t v8 = v3[1].n128_u64[0];
  unint64_t v7 = v3[1].n128_u64[1];
  unint64_t v9 = v3[2].n128_u64[0];
  uint64_t v10 = (void *)v3[2].n128_u64[1];
  unint64_t v17 = v10;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10005C2C8((uint64_t)&v17);
  swift_retain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = sub_100088C74(0, v10[2] + 1, 1, v10);
  }
  unint64_t v13 = v10[2];
  unint64_t v12 = v10[3];
  if (v13 >= v12 >> 1) {
    uint64_t v10 = sub_100088C74((void *)(v12 > 1), v13 + 1, 1, v10);
  }
  void v10[2] = v13 + 1;
  unint64_t v14 = &v10[2 * v13];
  v14[4] = sub_10006DDBC;
  id v14[5] = v11;
  swift_release();
  __n128 result = v16;
  *a3 = v16;
  a3[1].n128_u64[0] = v8;
  a3[1].n128_u64[1] = v7;
  a3[2].n128_u64[0] = v9;
  a3[2].n128_u64[1] = (unint64_t)v10;
  return result;
}

uint64_t sub_10005E44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a6 = sub_100088C74(0, a6[2] + 1, 1, a6);
  }
  unint64_t v12 = a6[2];
  unint64_t v11 = a6[3];
  if (v12 >= v11 >> 1) {
    a6 = sub_100088C74((void *)(v11 > 1), v12 + 1, 1, a6);
  }
  a6[2] = v12 + 1;
  unint64_t v13 = &a6[2 * v12];
  v13[4] = sub_100071A74;
  void v13[5] = v10;
  swift_release();
  return a3;
}

uint64_t sub_10005E56C()
{
  uint64_t v1 = sub_10000A38C(&qword_10035F1F8);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v0 + 40);
  sub_10000A38C(&qword_10035F200);
  sub_10000B010(&qword_10035F208, &qword_10035F200);
  uint64_t v8 = Publisher.eraseToAnyPublisher()();
  sub_10000A38C(&qword_10035F210);
  sub_10000B010(&qword_10035F218, &qword_10035F210);
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10035F220, &qword_10035F1F8);
  uint64_t v5 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v5;
}

uint64_t sub_10005E748@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)(result + 2);
  return result;
}

uint64_t sub_10005E754()
{
  return sub_10005E56C();
}

uint64_t sub_10005E778()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t sub_10005E7F8()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t sub_10005E878()
{
  if (*(void *)(v0 + 96))
  {
    uint64_t v1 = *(void *)(v0 + 96);
  }
  else
  {
    uint64_t v2 = v0;
    uint64_t v3 = *(void *)(v0 + 16);
    sub_10000A38C(&qword_10035F4C0);
    swift_allocObject();
    swift_retain();
    swift_retain();
    uint64_t v1 = sub_10006BEF0(v3, v2);
    *(void *)(v2 + 96) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_10005E918@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  sub_10000D728(v1 + 104, (uint64_t)&v6, &qword_10035F238);
  if (v7) {
    return sub_10000D7E8(&v6, (uint64_t)a1);
  }
  sub_10000D78C((uint64_t)&v6, &qword_10035F238);
  uint64_t v4 = sub_10000A38C(&qword_10035F240);
  swift_allocObject();
  swift_retain();
  uint64_t v5 = sub_1000650B4();
  a1[3] = v4;
  a1[4] = (uint64_t)&off_100321BA0;
  *a1 = v5;
  sub_1000291F4((uint64_t)a1, (uint64_t)&v6);
  swift_beginAccess();
  sub_10006CB8C((uint64_t)&v6, v1 + 104);
  return swift_endAccess();
}

uint64_t sub_10005EA18()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10005EA8C()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v1 = *(unsigned __int8 *)(Strong + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_active);
  swift_release();
  return v1;
}

uint64_t sub_10005EAF0(unsigned __int8 *a1)
{
  uint64_t v2 = type metadata accessor for ExperienceEvent(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v5 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (v5 == 4) {
      char v7 = 0;
    }
    else {
      char v7 = v5;
    }
    *uint64_t v4 = v7;
    swift_storeEnumTagMultiPayload();
    sub_10005EC00((uint64_t)v4, 0xD000000000000018, (void *)0x80000001002B56A0);
    swift_release();
    return sub_10006DE5C((uint64_t)v4, type metadata accessor for ExperienceEvent);
  }
  return result;
}

void sub_10005EC00(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000A38C((uint64_t *)&unk_10035E840);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  unint64_t v21 = 0xD000000000000026;
  unint64_t v22 = 0x80000001002B5550;
  v11._uint64_t countAndFlagsBits = sub_10025B6EC();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x6E6F73616572202CLL;
  v12._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = a2;
  v13._object = a3;
  String.append(_:)(v13);
  id v14 = sub_1001F5668();
  swift_bridgeObjectRetain();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 ulog:40 message:v15];
  swift_bridgeObjectRelease();

  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_active) == 1)
  {
    swift_retain();
    uint64_t v16 = UUID.uuidString.getter();
    uint64_t v18 = v17;
    swift_release();
    uint64_t v19 = (uint64_t *)&v10[*(int *)(v8 + 48)];
    uint64_t v20 = (uint64_t *)&v10[*(int *)(v8 + 64)];
    sub_10006DDF4(a1, (uint64_t)v10, type metadata accessor for ExperienceEvent);
    *uint64_t v19 = v16;
    v19[1] = v18;
    *uint64_t v20 = a2;
    v20[1] = (uint64_t)a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PassthroughSubject.send(_:)();
    sub_10000D78C((uint64_t)v10, (uint64_t *)&unk_10035E840);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10005EE28()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  char v1 = Strong;
  if (Strong)
  {
    swift_retain();
    swift_retain();
    swift_release();
    swift_retain();
    char v1 = static UUID.== infix(_:_:)();
    swift_release_n();
    swift_release();
  }
  return v1 & 1;
}

uint64_t sub_10005EEE0()
{
  uint64_t v0 = type metadata accessor for ExperienceEvent(0);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *uint64_t v2 = 6;
    swift_storeEnumTagMultiPayload();
    sub_10005EC00((uint64_t)v2, 0xD000000000000027, (void *)0x80000001002B5670);
    swift_release();
    return sub_10006DE5C((uint64_t)v2, type metadata accessor for ExperienceEvent);
  }
  return result;
}

BOOL sub_10005EFE4(unsigned __int16 *a1)
{
  return *a1 > 0x8001u;
}

uint64_t sub_10005EFF8(unsigned __int16 *a1)
{
  unsigned __int16 v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v3._uint64_t countAndFlagsBits = sub_10025B420(v1);
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    sub_10005F0C4(0xD000000000000013, 0x80000001002B5630);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10005F0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v10[0] = 0xD00000000000001ALL;
  v10[1] = 0x80000001002B5650;
  String.append(_:)(*(Swift::String *)&a1);
  id v4 = sub_1001F5668();
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 ulog:40 message:v5];
  swift_bridgeObjectRelease();

  if (*(void *)(v3 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_dwellBannerPresenterTask))
  {
    swift_retain();
    sub_10000A38C((uint64_t *)&unk_100365D60);
    Task.cancel()();
    swift_release();
  }
  *(unsigned char *)(v3 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_active) = 0;
  sub_10005E918(v10);
  uint64_t v6 = v11;
  uint64_t v7 = v12;
  sub_10000D6E4(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v7 + 48))(v6, v7);
  uint64_t result = sub_10000CC5C((uint64_t)v10);
  uint64_t v9 = *(void (**)(uint64_t))(v3 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_finishedHandler);
  if (v9)
  {
    swift_retain();
    v9(v3);
    return sub_10000F088((uint64_t)v9);
  }
  return result;
}

BOOL sub_10005F240(_WORD *a1)
{
  return (*a1 & 0xE100) == 0x2000;
}

uint64_t sub_10005F258()
{
  uint64_t v0 = type metadata accessor for ExperienceEvent(0);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(_OWORD *)uint64_t v2 = xmmword_100291120;
    v2[16] = 4;
    swift_storeEnumTagMultiPayload();
    uint64_t v6 = 0;
    uint64_t v7 = (void *)0xE000000000000000;
    Double.write<A>(to:)();
    v4._uint64_t countAndFlagsBits = 115;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    sub_10005EC00((uint64_t)v2, v6, v7);
    swift_release();
    swift_bridgeObjectRelease();
    return sub_10006DE5C((uint64_t)v2, type metadata accessor for ExperienceEvent);
  }
  return result;
}

BOOL sub_10005F3A0(_WORD *a1)
{
  return (*a1 & 0xE100) == 16640;
}

uint64_t sub_10005F3BC()
{
  uint64_t v0 = type metadata accessor for ExperienceEvent(0);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(void *)uint64_t v2 = 1;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    unsigned char v2[56] = 96;
    swift_storeEnumTagMultiPayload();
    uint64_t v6 = 0;
    uint64_t v7 = (void *)0xE000000000000000;
    Double.write<A>(to:)();
    v4._uint64_t countAndFlagsBits = 115;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    sub_10005EC00((uint64_t)v2, v6, v7);
    swift_release();
    swift_bridgeObjectRelease();
    return sub_10006DE5C((uint64_t)v2, type metadata accessor for ExperienceEvent);
  }
  return result;
}

uint64_t sub_10005F510@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_10005F51C(void *a1)
{
  uint64_t v1 = (uint64_t *)(*a1 + qword_1003ACBC8);
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = UUID.uuidString.getter();
    uint64_t v6 = v5;
    swift_release();
    if (v3 == v4 && v2 == v6) {
      char v8 = 1;
    }
    else {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_10005F608()
{
  return swift_release();
}

uint64_t sub_10005F758@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  *a3 = *a1;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = v7;
  a3[4] = v8;
  a3[5] = v9;
  a3[6] = v10;
  a3[7] = a2;
  sub_10003A3A4(v5, v4, v6);

  return swift_retain();
}

uint64_t sub_10005F7B4(uint64_t a1)
{
  sub_100045BD0(a1, (uint64_t)v2);
  return sub_10007116C((uint64_t)v2);
}

uint64_t sub_10005F7E0(uint64_t a1, uint64_t a2)
{
  sub_100045BD0(a1, (uint64_t)v15);
  uint64_t v4 = type metadata accessor for ExperienceEvent(0);
  __chkstk_darwin(v4);
  unint64_t v6 = (uint64_t *)(v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 16);
  sub_100045BD0(a1, (uint64_t)&v16);
  switch((void)v17)
  {
    case 2:
      uint64_t v8 = *(void *)(a2 + qword_1003ACBC0);
      swift_beginAccess();
      uint64_t result = swift_weakLoadStrong();
      if (!result) {
        return result;
      }
      *unint64_t v6 = v8;
      type metadata accessor for TransferEvent();
      goto LABEL_10;
    case 1:
      swift_beginAccess();
      uint64_t result = swift_weakLoadStrong();
      if (!result) {
        return result;
      }
      goto LABEL_9;
    case 0:
      swift_beginAccess();
      uint64_t result = swift_weakLoadStrong();
      if (!result) {
        return result;
      }
LABEL_9:
      type metadata accessor for TransferEvent();
LABEL_10:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      goto LABEL_13;
  }
  long long v20 = v16;
  long long v21 = v17;
  long long v22 = v18;
  uint64_t v23 = v19;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  sub_1000719B8();
  uint64_t v9 = swift_allocError();
  long long v11 = v21;
  long long v10 = v22;
  long long v12 = v20;
  *(void *)(v13 + 48) = v23;
  *(_OWORD *)(v13 + 16) = v11;
  *(_OWORD *)(v13 + 32) = v10;
  *(_OWORD *)uint64_t v13 = v12;
  *unint64_t v6 = v9;
  type metadata accessor for TransferEvent();
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_13:
  sub_10005EC00((uint64_t)v6, 0x726566736E617274, (void *)0xEF6574617473242ELL);
  swift_release();
  return sub_10006DE5C((uint64_t)v6, type metadata accessor for ExperienceEvent);
}

uint64_t sub_10005FAA0(char *a1)
{
  uint64_t v2 = type metadata accessor for ExperienceEvent(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v5 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *uint64_t v4 = v5;
    swift_storeEnumTagMultiPayload();
    sub_10005EC00((uint64_t)v4, 0xD000000000000014, (void *)0x80000001002B5610);
    swift_release();
    return sub_10006DE5C((uint64_t)v4, type metadata accessor for ExperienceEvent);
  }
  return result;
}

unint64_t sub_10005FBA8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = sub_10025B6EC();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0x6F6973736573202CLL;
  v10._object = (void *)0xEC0000003D44496ELL;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = a2;
  v11._object = a3;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = 0x6E6F73616572202CLL;
  v12._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = a4;
  v13._object = a5;
  String.append(_:)(v13);
  return 0xD000000000000010;
}

unint64_t sub_10005FCAC(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C((uint64_t *)&unk_10035E840);
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(v2 + 48));
  uint64_t v4 = *v3;
  char v5 = (void *)v3[1];
  unint64_t v6 = (uint64_t *)(a1 + *(int *)(v2 + 64));
  uint64_t v7 = *v6;
  uint64_t v8 = (void *)v6[1];

  return sub_10005FBA8(a1, v4, v5, v7, v8);
}

uint64_t sub_10005FD04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v5 = UUID.uuidString.getter();
    uint64_t v7 = v6;
    swift_release();
    if (v5 == a2 && v7 == a3) {
      char v9 = 1;
    }
    else {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_10005FDD0(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    sub_10005E918((uint64_t *)&v7);
    uint64_t v4 = v8;
    uint64_t v5 = v9;
    sub_100071968((uint64_t)&v7, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, v4, v5);
    sub_10000D7E8(&v7, (uint64_t)v6);
    swift_beginAccess();
    sub_10006CB8C((uint64_t)v6, v3 + 104);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_10005FEB0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    return static Published.subscript.setter();
  }
  return result;
}

uint64_t sub_10005FF48()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035F600);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___deviceEffectPublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___deviceEffectPublisher))
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___deviceEffectPublisher);
  }
  else
  {
    v9[1] = sub_100063164();
    sub_10000A38C(&qword_10035F2B0);
    sub_10000B010(&qword_10035F2B8, &qword_10035F2B0);
    Publisher.compactMap<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035F608, &qword_10035F600);
    uint64_t v7 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_100060118()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    id v0 = sub_1001F5668();
    NSString v1 = String._bridgeToObjectiveC()();
    [v0 ulog:40 message:v1];
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    swift_retain();
    swift_release();
    PassthroughSubject.send(_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_100060224()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035F470);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___cardEffectPublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___cardEffectPublisher))
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___cardEffectPublisher);
  }
  else
  {
    v9[1] = sub_100063164();
    sub_10000A38C(&qword_10035F2B0);
    sub_10000B010(&qword_10035F2B8, &qword_10035F2B0);
    Publisher.compactMap<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035F478, &qword_10035F470);
    uint64_t v7 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

BOOL sub_1000603F4(unsigned char *a1)
{
  return *a1 == 0;
}

void sub_100060404()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_10003C908();
    swift_release();
    id v0 = sub_1001F5FAC();
    NSString v1 = String._bridgeToObjectiveC()();
    [v0 ulog:40 message:v1];

    if (qword_10035A4D0 != -1) {
      swift_once();
    }
    uint64_t v2 = *(void **)(*(void *)(qword_1003AC500 + 16) + 32);
    swift_retain();
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 setBool:1 forKey:v3];
    swift_release();
    swift_release();
  }
}

uint64_t sub_100060544(unsigned __int16 *a1)
{
  uint64_t v2 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v19 - v8;
  __chkstk_darwin(v7);
  Swift::String v11 = (char *)&v19 - v10;
  unsigned __int16 v12 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v14 = result;
    if ((v12 & 0xE100) == 0x4100)
    {
      sub_10003C908();
      sub_1001E24F4();
      swift_release();
    }
    if (qword_10035A520 != -1) {
      swift_once();
    }
    id v15 = *(id *)(qword_1003AC750 + 64);
    char v16 = sub_1000FD938();

    if (v16)
    {
      sub_10006079C(v14 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_id, v12, (uint64_t)v11);
      long long v17 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
      v17(v9, v11, v2);
      v17(v6, v9, v2);
      swift_retain();
      sub_1001BDC78((uint64_t)v6);
      long long v18 = *(void (**)(char *, uint64_t))(v3 + 8);
      v18(v9, v2);
      swift_release();
      v18(v11, v2);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10006079C@<X0>(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, uint64_t a3@<X8>)
{
  int v6 = a2;
  uint64_t v7 = sub_10000A38C(&qword_10036C090);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  Swift::String v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType();
  __chkstk_darwin(v14);
  switch(a2 >> 13)
  {
    case 1:
      if ((v6 & 0x100) != 0) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2:
    case 3:
      goto LABEL_2;
    case 4:
      if (v6 == 0x8000)
      {
LABEL_8:
        SFAirDrop.NearbySharingInteraction.PresenceContext.init()();
        long long v20 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.State.presenceDetected(_:);
      }
      else
      {
        if (v6 == 32769)
        {
LABEL_2:
          (*(void (**)(char *, void))(v16 + 104))((char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.airDrop(_:));
          (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
          SFAirDrop.NearbySharingInteraction.ConnectionContext.init(type:transactionIdentifier:endpointIdentifier:contactIdentifier:deviceName:deviceModel:accountID:isSameAccount:)();
          uint64_t v17 = enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:);
          uint64_t v18 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(a3, v17, v18);
        }
LABEL_7:
        long long v20 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.State.ended(_:);
      }
      uint64_t v21 = *v20;
      uint64_t v22 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
      uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104);
      return v23(a3, v21, v22);
    default:
      goto LABEL_7;
  }
}

uint64_t sub_100060AE0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035F2E0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___shockwaveEffectPublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___shockwaveEffectPublisher))
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___shockwaveEffectPublisher);
  }
  else
  {
    v9[1] = sub_100063164();
    sub_10000A38C(&qword_10035F2B0);
    sub_10000B010(&qword_10035F2B8, &qword_10035F2B0);
    Publisher.compactMap<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035F2E8, &qword_10035F2E0);
    uint64_t v7 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_100060CB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_id;
  swift_retain();
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 32;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  swift_retain();
  uint64_t v5 = sub_1001F7514();
  uint64_t v7 = v6;
  swift_release();
  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 62;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  swift_release();
  v10._uint64_t countAndFlagsBits = 60;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  id v11 = sub_1001F5668();
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:40 message:v12];
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  sub_1000718C4(v1 + 32);
  swift_release();
  sub_10000D78C(v1 + 104, &qword_10035F238);
  uint64_t v13 = v1 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession__viewServiceLink;
  uint64_t v14 = sub_10000A38C(&qword_10035F298);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  swift_release();

  uint64_t v15 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v2, v15);
  sub_10000F088(*(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_finishedHandler));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000610DC()
{
  sub_100060CB0();

  return swift_deallocClassInstance();
}

uint64_t sub_100061134()
{
  return type metadata accessor for HandoffSession();
}

uint64_t type metadata accessor for HandoffSession()
{
  uint64_t result = qword_10035EFB0;
  if (!qword_10035EFB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100061188()
{
  sub_1000612E8();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1000612E8()
{
  if (!qword_10035EFC0)
  {
    sub_10000A3D0((uint64_t *)&unk_10035EFC8);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10035EFC0);
    }
  }
}

uint64_t sub_100061344()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ExperienceEvent(0);
  __chkstk_darwin(v2);
  Swift::String v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = sub_1001F5668();
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 ulog:40 message:v6];

  *(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_active) = 1;
  char v7 = sub_10003E708();
  if (v7 == 4) {
    char v8 = 0;
  }
  else {
    char v8 = v7;
  }
  *Swift::String v4 = v8;
  swift_storeEnumTagMultiPayload();
  sub_10005EC00((uint64_t)v4, 0x7472617473, (void *)0xE500000000000000);
  return sub_10006DE5C((uint64_t)v4, type metadata accessor for ExperienceEvent);
}

uint64_t sub_100061478()
{
  uint64_t v1 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___activityDisplayContextPublisher;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___activityDisplayContextPublisher))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___activityDisplayContextPublisher);
  }
  else
  {
    uint64_t v2 = sub_10003C30C();
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1000614E4()
{
  uint64_t v1 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___cardModePublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___cardModePublisher))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___cardModePublisher);
  }
  else
  {
    uint64_t v3 = v0;
    swift_retain();
    sub_100104CE8();
    sub_10000A38C(&qword_10035F460);
    sub_10000B010(&qword_10035F468, &qword_10035F460);
    uint64_t v2 = Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1000615D8()
{
  uint64_t v0 = sub_10000A38C(&qword_10035E160);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10003E1FC();
  if (!v3)
  {
    uint64_t v4 = sub_10003DFE8();
    if (!v5) {
      return sub_100041138();
    }
    void v9[2] = v4;
    v9[3] = v5;
    v9[0] = 808334897;
    v9[1] = 0xE400000000000000;
    uint64_t v6 = type metadata accessor for Locale();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v2, 1, 1, v6);
    sub_100016790();
    unint64_t v7 = StringProtocol.compare<A>(_:options:range:locale:)();
    sub_10000D78C((uint64_t)v2, &qword_10035E160);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v7 >= 2) {
      return sub_100041138();
    }
    return 2;
  }
  if (v3 >= 4000000) {
    return 2;
  }
  return sub_100041138();
}

uint64_t sub_100061750()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035F410);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10035F418);
  __chkstk_darwin(v6);
  Swift::String v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___mrResponsePublisher;
  if (*(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___mrResponsePublisher))
  {
    uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___mrResponsePublisher);
  }
  else
  {
    uint64_t v15 = v3;
    uint64_t v16 = v7;
    uint64_t v17 = sub_10003CBBC();
    swift_allocObject();
    swift_weakInit();
    sub_10000A38C(&qword_10035E208);
    sub_10000A38C(&qword_10035F420);
    sub_10000B010(&qword_10035E210, &qword_10035E208);
    Publisher.map<A>(_:)();
    swift_release();
    swift_release();
    sub_10000B010(&qword_10035F428, &qword_10035F410);
    sub_100071308();
    Publisher<>.removeDuplicates()();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v2);
    sub_10000B010(&qword_10035F448, &qword_10035F418);
    uint64_t v12 = Publisher.share()();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v6);
    uint64_t v17 = v12;
    sub_10000A38C(&qword_10035F450);
    sub_10000B010(&qword_10035F458, &qword_10035F450);
    uint64_t v11 = Publisher.eraseToAnyPublisher()();
    swift_release();
    *(void *)(v1 + v10) = v11;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v11;
}

uint64_t sub_100061A9C@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v3 = [*(id *)(*(void *)(*(void *)(result + 24)+ OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__mediaRemoteDisplayContext)+ 24) proxDeviceState];
    uint64_t result = swift_release();
  }
  else
  {
    id v3 = 0;
  }
  *a1 = v3;
  return result;
}

uint64_t sub_100061B34()
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(v0 + 24) + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__transfer)
                 + 24);
  if (!v1 || *(unsigned char *)(v1 + qword_1003ACBD0 + 32) != 1) {
    return 1;
  }
  uint64_t v2 = *(void **)(v1 + qword_1003ACBD0 + 16);
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_retain();
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)(v1 + qword_100370E40) + 40) >= 2uLL)
  {
    swift_release();

    return 1;
  }
  swift_release();
  return (uint64_t)v2;
}

uint64_t sub_100061C00()
{
  uint64_t v1 = sub_10000A38C(&qword_10035F338);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10035F340);
  uint64_t v31 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10035F348);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_10035F350);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0
                 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___mediaTransferStatusPublisher))
  {
    uint64_t v17 = *(void *)(v0
                    + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___mediaTransferStatusPublisher);
  }
  else
  {
    uint64_t v29 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___mediaTransferStatusPublisher;
    uint64_t v30 = v0;
    uint64_t v27 = v13;
    uint64_t v28 = v14;
    uint64_t v18 = sub_10003CE48();
    uint64_t v26 = v9;
    uint64_t v32 = v18;
    sub_10000A38C(&qword_10035F358);
    v24[0] = v1;
    sub_10000A38C(&qword_10035F360);
    uint64_t v25 = v8;
    v24[1] = &protocol conformance descriptor for AnyPublisher<A, B>;
    sub_10000B010(&qword_10035F368, &qword_10035F358);
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000A38C(&qword_10035F370);
    sub_10000B010(&qword_10035F378, &qword_10035F340);
    Publisher.map<A>(_:)();
    sub_10000B010(&qword_10035F380, &qword_10035F338);
    uint64_t v19 = v24[0];
    uint64_t v20 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v19);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v5);
    uint64_t v32 = v20;
    sub_10000A38C(&qword_10035F388);
    sub_10000B010(&qword_10035F390, &qword_10035F388);
    sub_10000B010(&qword_10035F398, &qword_10035F370);
    Publisher<>.switchToLatest()();
    swift_release();
    sub_10000B010(&qword_10035F3A0, &qword_10035F348);
    uint64_t v21 = v25;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v21);
    sub_10000B010(&qword_10035F3A8, &qword_10035F350);
    uint64_t v22 = v27;
    uint64_t v17 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v22);
    *(void *)(v30 + v29) = v17;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v17;
}

uint64_t sub_100062120@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (*a1) {
    uint64_t result = sub_10006C4A0();
  }
  else {
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

id sub_100062158@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == 2) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = *a1;
  }
  if (*a1 == 2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = a1[1];
  }
  *a2 = v3;
  a2[1] = v4;
  return sub_100071130(v2);
}

void sub_100062174()
{
  swift_retain();
  CurrentValueSubject.value.getter();
  if ((v6[0] & 0x10000000000) != 0)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    if (v9) {
      return;
    }
  }
  else
  {
    swift_release();
    if (((LODWORD(v6[0]) | ((unint64_t)BYTE4(v6[0]) << 32)) & 0x100000000) != 0) {
      return;
    }
  }
  sub_10005E918(v6);
  uint64_t v0 = v7;
  uint64_t v1 = v8;
  sub_10000D6E4(v6, v7);
  unsigned __int16 v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v1);
  sub_10000CC5C((uint64_t)v6);
  switch(v2 >> 13)
  {
    case 1:
      if ((v2 & 0x100) != 0)
      {
        if (qword_10035A520 != -1) {
          swift_once();
        }
        id v4 = *(id *)(qword_1003AC750 + 480);
        char v5 = sub_1000FD938();

        char v3 = sub_100062370();
        if (v5)
        {
          sub_10014E268(v3);
          return;
        }
      }
      else
      {
        char v3 = sub_100062370();
      }
      sub_10014E400(v3);
      break;
    default:
      return;
  }
}

uint64_t sub_100062370()
{
  uint64_t v1 = *(void *)(v0 + 24);
  LODWORD(v0) = *(unsigned __int8 *)(v1 + 16);
  if (v0 != 7) {
    return 0x1010101010001uLL >> (8 * v0);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v0 = sub_1000983CC();
  uint64_t v3 = v2;
  swift_release();
  if (v3)
  {
    LOBYTE(v0) = sub_1001AC344(v0, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v0) = 7;
  }
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_isMock) & 1) == 0) {
    *(unsigned char *)(v1 + 16) = v0;
  }
  if (v0 == 7) {
    return 1;
  }
  else {
    return 0x1010101010001uLL >> (8 * v0);
  }
}

uint64_t sub_100062474()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035F3F0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___progressPublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___progressPublisher))
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___progressPublisher);
  }
  else
  {
    uint64_t v11 = sub_10003BC88();
    swift_allocObject();
    swift_weakInit();
    sub_10000A38C(&qword_10035D150);
    sub_10000B010(&qword_10035D158, &qword_10035D150);
    Publisher.map<A>(_:)();
    swift_release();
    swift_release();
    sub_10000B010(&qword_10035F3F8, &qword_10035F3F0);
    uint64_t v8 = Publisher.share()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v11 = v8;
    sub_10000A38C(&qword_10035F400);
    sub_10000B010(&qword_10035F408, &qword_10035F400);
    uint64_t v7 = Publisher.eraseToAnyPublisher()();
    swift_release();
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_1000626C4@<X0>(_DWORD *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100062174();
    int v4 = v3;
    uint64_t result = swift_release();
  }
  else
  {
    int v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_100062738@<X0>(char *a1@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v2 = sub_10000A38C(&qword_10036C090);
  __chkstk_darwin(v2 - 8);
  int v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C((uint64_t *)&unk_100367BD0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v12 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  CurrentValueSubject.value.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    CurrentValueSubject.value.getter();
    sub_10000D78C((uint64_t)v7, (uint64_t *)&unk_100367BD0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  }
  swift_release();
  uint64_t v15 = v1 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_id;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v4, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v4, 0, 1, v16);
  SFAirDrop.NearbySharingInteraction.init(state:id:)();
  uint64_t v18 = v22;
  *(void *)uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v19 = type metadata accessor for NearbySharingInteractionDisplayContext();
  return (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(&v18[*(int *)(v19 + 20)], v14, v21);
}

uint64_t sub_100062A5C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035F300);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10035F308);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___nearbySharingInteractionDisplayContextPublisher;
  if (*(void *)(v1
                 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___nearbySharingInteractionDisplayContextPublisher))
  {
    uint64_t v11 = *(void *)(v1
                    + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___nearbySharingInteractionDisplayContextPublisher);
  }
  else
  {
    uint64_t v17 = v3;
    uint64_t v18 = v7;
    uint64_t v23 = sub_10003D0E8();
    sub_10005E918(v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    sub_10000D6E4(v20, v21);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
    sub_10000CC5C((uint64_t)v20);
    uint64_t v19 = *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession__nearbySharingInteractionState);
    v20[0] = v14;
    swift_retain();
    v16[2] = sub_10000A38C(&qword_10035E410);
    v16[1] = sub_10000A38C(&qword_10035F310);
    sub_10000A38C(&qword_10035F318);
    sub_10000B010((unint64_t *)&unk_100367EA0, &qword_10035E410);
    sub_10000B010(&qword_100367730, &qword_10035F310);
    sub_10000B010(&qword_10035F320, &qword_10035F318);
    Publishers.CombineLatest3.init(_:_:_:)();
    swift_allocObject();
    swift_weakInit();
    type metadata accessor for NearbySharingInteractionDisplayContext();
    sub_10000B010(&qword_10035F328, &qword_10035F300);
    Publisher.compactMap<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v2);
    sub_10000B010(&qword_10035F330, &qword_10035F308);
    uint64_t v11 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v6);
    *(void *)(v1 + v10) = v11;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v11;
}

uint64_t sub_100062E18@<X0>(char *a1@<X8>)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_100062738(a1);
    swift_release();
    uint64_t v2 = type metadata accessor for NearbySharingInteractionDisplayContext();
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 0, 1, v2);
  }
  else
  {
    uint64_t v4 = type metadata accessor for NearbySharingInteractionDisplayContext();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a1, 1, 1, v4);
  }
}

uint64_t sub_100062EE8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v0 = sub_1000983CC();
  uint64_t v2 = v1;
  swift_release();
  if (v2)
  {
    unsigned __int8 v3 = sub_1001AC344(v0, v2);
    swift_bridgeObjectRelease();
    if (v3 - 3 < 4)
    {
      char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_6:
      swift_bridgeObjectRelease();
      return v4 & 1;
    }
    char v4 = 1;
    if (v3 < 3u) {
      goto LABEL_6;
    }
  }
  else
  {
    char v4 = 1;
  }
  return v4 & 1;
}

uint64_t sub_100063000()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v0 = sub_1000983CC();
  uint64_t v2 = v1;
  swift_release();
  if (v2)
  {
    sub_1001AC344(v0, v2);
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_1000630AC()
{
  uint64_t v1 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___outputEventContextPublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___outputEventContextPublisher))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___outputEventContextPublisher);
  }
  else
  {
    uint64_t v3 = v0;
    sub_10005E918(v7);
    uint64_t v4 = v8;
    uint64_t v5 = v9;
    sub_10000D6E4(v7, v8);
    uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 40))(v4, v5);
    sub_10000CC5C((uint64_t)v7);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_100063164()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035F2C8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___experienceEffectPublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___experienceEffectPublisher))
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___experienceEffectPublisher);
  }
  else
  {
    v9[1] = sub_1000630AC();
    sub_10000A38C((uint64_t *)&unk_1003676A0);
    type metadata accessor for ExperienceEffect(0);
    sub_10000B010(&qword_10035F2D0, (uint64_t *)&unk_1003676A0);
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035F2D8, &qword_10035F2C8);
    uint64_t v7 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_100063344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10006DDF4(a1, a2, type metadata accessor for ExperienceEffect);
}

uint64_t sub_100063374@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ExperienceEffect(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006DDF4(a1, (uint64_t)v6, type metadata accessor for ExperienceEffect);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    char v8 = *v6;
  }
  else
  {
    uint64_t result = sub_10006DE5C((uint64_t)v6, type metadata accessor for ExperienceEffect);
    char v8 = 6;
  }
  *a2 = v8;
  return result;
}

uint64_t sub_100063450()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035F4B0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___classicBannerEffectPublisher;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___classicBannerEffectPublisher))
  {
    uint64_t v7 = *(void *)(v0
                   + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___classicBannerEffectPublisher);
  }
  else
  {
    v9[1] = sub_100063164();
    sub_10000A38C(&qword_10035F2B0);
    sub_10000B010(&qword_10035F2B8, &qword_10035F2B0);
    Publisher.compactMap<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035F4B8, &qword_10035F4B0);
    uint64_t v7 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_100063620@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ExperienceEffect(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006DDF4(a1, (uint64_t)v6, type metadata accessor for ExperienceEffect);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_10006DE5C((uint64_t)v6, type metadata accessor for ExperienceEffect);
  }
  else
  {
    uint64_t result = *(void *)v6;
    int v8 = v6[16];
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    sub_100020330(result, *((void *)v6 + 1), v8);
  }
  uint64_t result = 3;
LABEL_5:
  *a2 = result;
  return result;
}

uint64_t sub_10006370C@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ExperienceEffect(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006DDF4(a1, (uint64_t)v6, type metadata accessor for ExperienceEffect);
  uint64_t result = swift_getEnumCaseMultiPayload();
  int v8 = result;
  if (result != 10) {
    uint64_t result = sub_10006DE5C((uint64_t)v6, type metadata accessor for ExperienceEffect);
  }
  *a2 = v8 != 10;
  return result;
}

uint64_t sub_1000637E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035F4A0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___hapticEffectPublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___hapticEffectPublisher))
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___hapticEffectPublisher);
  }
  else
  {
    v9[1] = sub_100063164();
    sub_10000A38C(&qword_10035F2B0);
    sub_10000B010(&qword_10035F2B8, &qword_10035F2B0);
    Publisher.compactMap<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035F4A8, &qword_10035F4A0);
    uint64_t v7 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_1000639B8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ExperienceEffect(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006DDF4(a1, (uint64_t)v6, type metadata accessor for ExperienceEffect);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 4)
  {
    char v8 = *v6;
  }
  else
  {
    uint64_t result = sub_10006DE5C((uint64_t)v6, type metadata accessor for ExperienceEffect);
    char v8 = 5;
  }
  *a2 = v8;
  return result;
}

uint64_t sub_100063A94()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035F490);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___ledEffectPublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___ledEffectPublisher))
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___ledEffectPublisher);
  }
  else
  {
    v9[1] = sub_100063164();
    sub_10000A38C(&qword_10035F2B0);
    sub_10000B010(&qword_10035F2B8, &qword_10035F2B0);
    Publisher.compactMap<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035F498, &qword_10035F490);
    uint64_t v7 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_100063C64@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ExperienceEffect(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006DDF4(a1, (uint64_t)v6, type metadata accessor for ExperienceEffect);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 5)
  {
    char v8 = *v6;
  }
  else
  {
    uint64_t result = sub_10006DE5C((uint64_t)v6, type metadata accessor for ExperienceEffect);
    char v8 = 4;
  }
  *a2 = v8;
  return result;
}

uint64_t sub_100063D40()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035F2F0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___nearbySharingInteractionViewEffectPublisher;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___nearbySharingInteractionViewEffectPublisher))
  {
    uint64_t v7 = *(void *)(v0
                   + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___nearbySharingInteractionViewEffectPublisher);
  }
  else
  {
    v9[1] = sub_100063164();
    sub_10000A38C(&qword_10035F2B0);
    sub_10000B010(&qword_10035F2B8, &qword_10035F2B0);
    Publisher.compactMap<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035F2F8, &qword_10035F2F0);
    uint64_t v7 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_100063F10@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ExperienceEffect(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006DDF4(a1, (uint64_t)v6, type metadata accessor for ExperienceEffect);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 7)
  {
    char v8 = *v6;
  }
  else
  {
    uint64_t result = sub_10006DE5C((uint64_t)v6, type metadata accessor for ExperienceEffect);
    char v8 = 2;
  }
  *a2 = v8;
  return result;
}

uint64_t sub_100063FEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035F480);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___noticeEffectPublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___noticeEffectPublisher))
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___noticeEffectPublisher);
  }
  else
  {
    v9[1] = sub_100063164();
    sub_10000A38C(&qword_10035F2B0);
    type metadata accessor for NoticeEffect();
    sub_10000B010(&qword_10035F2B8, &qword_10035F2B0);
    Publisher.compactMap<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035F488, &qword_10035F480);
    uint64_t v7 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_1000641CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ExperienceEffect(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006DDF4(a1, (uint64_t)v6, type metadata accessor for ExperienceEffect);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    sub_1000713EC((uint64_t)v6, a2, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
    uint64_t v7 = type metadata accessor for NoticeEffect();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
  }
  else
  {
    sub_10006DE5C((uint64_t)v6, type metadata accessor for ExperienceEffect);
    uint64_t v9 = type metadata accessor for NoticeEffect();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 1, 1, v9);
  }
}

uint64_t sub_10006432C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ExperienceEffect(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006DDF4(a1, (uint64_t)v6, type metadata accessor for ExperienceEffect);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 8)
  {
    char v8 = *v6;
  }
  else
  {
    uint64_t result = sub_10006DE5C((uint64_t)v6, type metadata accessor for ExperienceEffect);
    char v8 = 3;
  }
  *a2 = v8;
  return result;
}

uint64_t sub_100064408()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035F2A8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___transferEffectPublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___transferEffectPublisher))
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___transferEffectPublisher);
  }
  else
  {
    v9[1] = sub_100063164();
    sub_10000A38C(&qword_10035F2B0);
    sub_10000B010(&qword_10035F2B8, &qword_10035F2B0);
    Publisher.compactMap<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035F2C0, &qword_10035F2A8);
    uint64_t v7 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_1000645D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ExperienceEffect(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006DDF4(a1, (uint64_t)v6, type metadata accessor for ExperienceEffect);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 9)
  {
    long long v8 = *(_OWORD *)v6;
    uint64_t v9 = *((void *)v6 + 2);
    char v10 = v6[24];
  }
  else
  {
    uint64_t result = sub_10006DE5C((uint64_t)v6, type metadata accessor for ExperienceEffect);
    uint64_t v9 = 0;
    long long v8 = 0uLL;
    char v10 = -1;
  }
  *(_OWORD *)a2 = v8;
  *(void *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 24) = v10;
  return result;
}

uint64_t sub_1000646CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)sub_1001F9EE0();
  sub_100266C24(v2, a1);

  return swift_unknownObjectRelease();
}

uint64_t sub_100064738()
{
  return sub_10006475C();
}

uint64_t sub_10006475C()
{
  swift_retain();
  UUID.uuidString.getter();
  swift_release();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 32;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  swift_retain();
  uint64_t v2 = sub_1001F7514();
  uint64_t v4 = v3;
  swift_release();
  v5._uint64_t countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 60;
}

uint64_t sub_10006487C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v0 = sub_10009AE24();
  char v2 = v1;
  swift_release();
  if (v2) {
    return 0;
  }
  else {
    return v0;
  }
}

uint64_t sub_100064914()
{
  unint64_t v0 = sub_10003BBFC();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

uint64_t sub_100064950@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_id;
  uint64_t v4 = type metadata accessor for UUID();
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1000649C8()
{
  return sub_1001F9EE0();
}

uint64_t sub_100064A00()
{
  return sub_10003D9EC();
}

uint64_t sub_100064A28()
{
  return sub_1001F9EE0();
}

uint64_t sub_100064A60()
{
  return sub_10003D0E8();
}

void sub_100064A88()
{
}

uint64_t sub_100064AAC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v0 = sub_10009AE24();
  char v2 = v1;
  swift_release();
  if (v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v0;
  }
  return sub_1000FD48C(v3);
}

uint64_t sub_100064B48@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100064BC8()
{
  uint64_t v0 = sub_10000A38C(&qword_10035F290);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_10000A38C(&qword_10035F298);
  Published.projectedValue.getter();
  swift_endAccess();
  sub_10000B010((unint64_t *)&unk_1003676F0, &qword_10035F290);
  uint64_t v4 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_100064D10()
{
  sub_10000A38C((uint64_t *)&unk_10035E7E0);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10028D430;
  *(void *)(v1 + 32) = 0xD000000000000025;
  *(void *)(v1 + 40) = 0x80000001002B5520;
  uint64_t v33 = 0x3D657669746361;
  unint64_t v34 = 0xE700000000000000;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_active)) {
    uint64_t v2 = 1702195828;
  }
  else {
    uint64_t v2 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_active)) {
    unint64_t v3 = 0xE400000000000000;
  }
  else {
    unint64_t v3 = 0xE500000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  uint64_t v5 = v33;
  unint64_t v6 = v34;
  uint64_t v7 = sub_10008892C((char *)1, 2, 1, (char *)v1);
  *((void *)v7 + 2) = 2;
  *((void *)v7 + 6) = v5;
  *((void *)v7 + 7) = v6;
  uint64_t v33 = 0x7974697669746361;
  unint64_t v34 = 0xE90000000000003DLL;
  uint64_t v8 = sub_1001F9EE0();
  if (v8)
  {
    uint64_t v35 = v8;
    sub_10000A38C((uint64_t *)&unk_10036E690);
    uint64_t v9 = String.init<A>(describing:)();
    unint64_t v11 = v10;
  }
  else
  {
    unint64_t v11 = 0xE300000000000000;
    uint64_t v9 = 7104878;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  uint64_t v13 = v33;
  unint64_t v14 = v34;
  unint64_t v16 = *((void *)v7 + 2);
  unint64_t v15 = *((void *)v7 + 3);
  if (v16 >= v15 >> 1) {
    uint64_t v7 = sub_10008892C((char *)(v15 > 1), v16 + 1, 1, v7);
  }
  *((void *)v7 + 2) = v16 + 1;
  uint64_t v17 = &v7[16 * v16];
  *((void *)v17 + 4) = v13;
  *((void *)v17 + 5) = v14;
  uint64_t v33 = 0x3D656369766564;
  unint64_t v34 = 0xE700000000000000;
  swift_retain();
  uint64_t v18 = sub_1001F7514();
  uint64_t v20 = v19;
  swift_release();
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  unint64_t v23 = *((void *)v7 + 2);
  unint64_t v22 = *((void *)v7 + 3);
  if (v23 >= v22 >> 1) {
    uint64_t v7 = sub_10008892C((char *)(v22 > 1), v23 + 1, 1, v7);
  }
  *((void *)v7 + 2) = v23 + 1;
  uint64_t v24 = &v7[16 * v23];
  *((void *)v24 + 4) = 0x3D656369766564;
  *((void *)v24 + 5) = 0xE700000000000000;
  uint64_t v35 = 0;
  unint64_t v36 = 0xE000000000000000;
  v25._uint64_t countAndFlagsBits = 0x63614D6574617473;
  v25._object = (void *)0xED00003D656E6968;
  String.append(_:)(v25);
  sub_10005E918(&v33);
  sub_10000A38C(&qword_10035F2A0);
  _print_unlocked<A, B>(_:_:)();
  sub_10000CC5C((uint64_t)&v33);
  uint64_t v26 = v35;
  unint64_t v27 = v36;
  unint64_t v29 = *((void *)v7 + 2);
  unint64_t v28 = *((void *)v7 + 3);
  if (v29 >= v28 >> 1) {
    uint64_t v7 = sub_10008892C((char *)(v28 > 1), v29 + 1, 1, v7);
  }
  *((void *)v7 + 2) = v29 + 1;
  uint64_t v30 = &v7[16 * v29];
  *((void *)v30 + 4) = v26;
  *((void *)v30 + 5) = v27;
  uint64_t v33 = (uint64_t)v7;
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_10000B010((unint64_t *)&qword_10035E7F0, (uint64_t *)&unk_100367D40);
  uint64_t v31 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t sub_100065084()
{
  return sub_100064D10();
}

_UNKNOWN **sub_1000650A8()
{
  return &off_100329F10;
}

uint64_t sub_1000650B4()
{
  uint64_t v1 = v0;
  swift_weakInit();
  sub_10000A38C(&qword_10035F248);
  uint64_t v2 = *(void *)(type metadata accessor for ExperienceEvent(0) - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100291130;
  unint64_t v6 = (_OWORD *)(v5 + v4);
  *(_OWORD *)((char *)v6 + 41) = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  *unint64_t v6 = xmmword_100291140;
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = v5 + v4 + v3;
  sub_10001A050();
  uint64_t v8 = swift_allocError();
  *(void *)uint64_t v9 = 0;
  *(void *)(v9 + 8) = 0xE000000000000000;
  *(unsigned char *)(v9 + 16) = 11;
  swift_retain();
  sub_100146144(v8, v40);
  uint64_t v10 = v41;
  long long v11 = v40[1];
  *(_OWORD *)uint64_t v7 = v40[0];
  *(_OWORD *)(v7 + 16) = v11;
  *(void *)(v7 + 32) = v10;
  *(_OWORD *)(v7 + 40) = v42;
  uint64_t v12 = 32;
  *(unsigned char *)(v7 + 56) = 32;
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = (char *)v6 + 2 * v3;
  *(_OWORD *)uint64_t v13 = xmmword_100291140;
  v13[16] = 1;
  swift_storeEnumTagMultiPayload();
  unint64_t v14 = (char *)v6 + 3 * v3;
  *(_OWORD *)unint64_t v14 = xmmword_100291140;
  v14[16] = 2;
  swift_storeEnumTagMultiPayload();
  unint64_t v15 = (char *)v6 + 4 * v3;
  *(_OWORD *)unint64_t v15 = xmmword_100291140;
  char v15[16] = 3;
  swift_storeEnumTagMultiPayload();
  unint64_t v16 = (char *)v6 + 5 * v3;
  uint64_t v17 = swift_allocError();
  *(void *)uint64_t v18 = 0;
  *(void *)(v18 + 8) = 0xE000000000000000;
  *(unsigned char *)(v18 + 16) = 11;
  *(void *)unint64_t v16 = v17;
  *((void *)v16 + 1) = 0;
  v16[16] = 0;
  swift_storeEnumTagMultiPayload();
  *(void *)((char *)v6 + 6 * v3) = 3;
  swift_storeEnumTagMultiPayload();
  *(void *)((char *)v6 + 7 * v3) = 0;
  swift_storeEnumTagMultiPayload();
  *(void *)(v1 + 128) = v5;
  swift_weakAssign();
  *(void *)(v1 + 72) = UUID.uuidString.getter();
  *(void *)(v1 + 80) = v19;
  uint64_t v38 = type metadata accessor for HandoffEducationFlowPolicy();
  uint64_t v39 = &off_100330D00;
  *(void *)&long long v37 = sub_10003C908();
  sub_10000D7E8(&v37, v1 + 88);
  swift_release();
  *(void *)(v1 + 32) = 0;
  sub_10000A38C(&qword_10035F200);
  swift_allocObject();
  *(void *)(v1 + 40) = PassthroughSubject.init()();
  sub_10000A38C(&qword_10035EDE0);
  swift_allocObject();
  *(void *)(v1 + 48) = PassthroughSubject.init()();
  sub_10000A38C(&qword_10035F250);
  swift_allocObject();
  *(void *)(v1 + 56) = PassthroughSubject.init()();
  *(_WORD *)(v1 + 24) = 1;
  uint64_t v20 = _swiftEmptyArrayStorage;
  *(void *)(v1 + 16) = _swiftEmptyArrayStorage;
  sub_10000A38C(&qword_10035F258);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100291150;
  swift_retain_n();
  *(void *)(inited + 32) = sub_100065680();
  *(void *)(inited + 40) = sub_100066D10();
  *(void *)(inited + 48) = sub_100067970();
  *(void *)(inited + 56) = sub_100068588();
  *(void *)(inited + 64) = sub_10006A888();
  *(void *)(inited + 72) = sub_1000694AC();
  *(void *)(inited + 80) = sub_10006D5E0();
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v22 = *(void *)(inited + v12);
    uint64_t v23 = *(void *)(v22 + 16);
    int64_t v24 = v20[2];
    int64_t v25 = v24 + v23;
    if (__OFADD__(v24, v23)) {
      break;
    }
    swift_bridgeObjectRetain();
    int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v25 <= v20[3] >> 1)
    {
      if (*(void *)(v22 + 16)) {
        goto LABEL_13;
      }
    }
    else
    {
      if (v24 <= v25) {
        int64_t v27 = v24 + v23;
      }
      else {
        int64_t v27 = v24;
      }
      uint64_t v20 = sub_100088B4C(isUniquelyReferenced_nonNull_native, v27, 1, v20);
      if (*(void *)(v22 + 16))
      {
LABEL_13:
        uint64_t v28 = v20[2];
        if ((v20[3] >> 1) - v28 < v23) {
          goto LABEL_25;
        }
        unint64_t v29 = (unint64_t)&v20[6 * v28 + 4];
        if (v22 + 32 < v29 + 48 * v23 && v29 < v22 + 32 + 48 * v23) {
          goto LABEL_27;
        }
        sub_10000A38C(&qword_10035EDD0);
        swift_arrayInitWithCopy();
        if (v23)
        {
          uint64_t v31 = v20[2];
          BOOL v32 = __OFADD__(v31, v23);
          uint64_t v33 = v31 + v23;
          if (v32) {
            goto LABEL_26;
          }
          void v20[2] = v33;
        }
        goto LABEL_3;
      }
    }
    if (v23) {
      goto LABEL_24;
    }
LABEL_3:
    swift_bridgeObjectRelease();
    v12 += 8;
    if (v12 == 88)
    {
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      sub_10000A38C(&qword_10035F260);
      swift_arrayDestroy();
      swift_beginAccess();
      *(void *)(v1 + 16) = v20;
      swift_bridgeObjectRelease();
      uint64_t v34 = swift_bridgeObjectRetain();
      uint64_t v35 = sub_10004E2A0(v34);
      swift_bridgeObjectRelease();
      *(void *)(v1 + 32) = v35;
      swift_release_n();
      swift_release();
      swift_bridgeObjectRelease();
      return v1;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100065680()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ExperienceEffect(0);
  uint64_t v171 = *(void **)(v2 - 8);
  unint64_t v183 = (unint64_t)v171;
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)v168 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ExperienceEvent(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v168 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  long long v11 = (char *)v168 - v10;
  uint64_t v178 = sub_10000A38C(&qword_10035EDC8);
  uint64_t inited = swift_initStackObject();
  long long v173 = xmmword_10028D430;
  *(_OWORD *)(inited + 16) = xmmword_10028D430;
  *long long v11 = 1;
  *(void *)&long long v181 = v5;
  swift_storeEnumTagMultiPayload();
  sub_10006DDF4((uint64_t)v11, (uint64_t)v9, type metadata accessor for ExperienceEvent);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = (v12 + 16) & ~v12;
  unint64_t v14 = (v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v176 = v14 + 16;
  uint64_t v177 = v12 | 7;
  uint64_t v15 = swift_allocObject();
  uint64_t v179 = v13;
  uint64_t v16 = v15 + v13;
  uint64_t v17 = v15;
  *(void *)&long long v182 = v9;
  sub_1000713EC((uint64_t)v9, v16, type metadata accessor for ExperienceEvent);
  unint64_t v180 = v14;
  uint64_t v18 = (uint64_t (**)@<X0>(uint64_t *@<X8>))(v17 + v14);
  *uint64_t v18 = sub_100070C5C;
  v18[1] = v1;
  int v172 = v1;
  swift_retain();
  sub_10006DE5C((uint64_t)v11, type metadata accessor for ExperienceEvent);
  __int16 v206 = 1;
  v207 = sub_100070C68;
  uint64_t v208 = v17;
  uint64_t v19 = _swiftEmptyArrayStorage;
  v209 = _swiftEmptyArrayStorage;
  v210 = _swiftEmptyArrayStorage;
  v211 = _swiftEmptyArrayStorage;
  *(void *)unint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  v4[16] = 0;
  uint64_t v170 = v2;
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = sub_10000A38C(&qword_10035F270);
  uint64_t v21 = *(unsigned __int8 *)(v183 + 80);
  uint64_t v22 = (v21 + 32) & ~v21;
  v168[2] = v22 + v171[9];
  v168[3] = v20;
  v168[1] = v21 | 7;
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = v173;
  uint64_t v169 = v22;
  sub_10006DDF4((uint64_t)v4, v23 + v22, type metadata accessor for ExperienceEffect);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v23;
  swift_bridgeObjectRetain();
  sub_10005E1C0((uint64_t)sub_100071A14, v24, (uint64_t)v184);
  uint64_t v25 = inited;
  swift_bridgeObjectRelease();
  swift_release();
  long long v26 = v184[1];
  *(_OWORD *)(v25 + 32) = v184[0];
  *(_OWORD *)(v25 + 48) = v26;
  *(_OWORD *)(v25 + 64) = v184[2];
  uint64_t v171 = v4;
  sub_10006DE5C((uint64_t)v4, type metadata accessor for ExperienceEffect);
  swift_release();
  unint64_t v27 = *(void *)(v25 + 16);
  uint64_t v174 = v11;
  if (v27)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = (void *)(v25 + 72);
    unint64_t v29 = _swiftEmptyArrayStorage;
    do
    {
      unint64_t v183 = v27;
      uint64_t v30 = v29;
      uint64_t v32 = *(v28 - 1);
      uint64_t v31 = *v28;
      uint64_t v33 = *(v28 - 3);
      uint64_t v34 = *(v28 - 2);
      uint64_t v35 = *(v28 - 4);
      __int16 v36 = *((_WORD *)v28 - 20);
      uint64_t v37 = swift_initStackObject();
      *(_WORD *)(v37 + 32) = v36;
      *(void *)(v37 + 40) = v35;
      *(void *)(v37 + 48) = v33;
      *(void *)(v37 + 56) = v34;
      *(void *)(v37 + 64) = v32;
      *(void *)(v37 + 72) = v31;
      unint64_t v38 = v30[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v39 = v30;
      swift_bridgeObjectRetain();
      int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || (unint64_t v41 = v30[3] >> 1, v41 <= v38))
      {
        uint64_t v39 = sub_100088B4C(isUniquelyReferenced_nonNull_native, v38 + 1, 1, v30);
        unint64_t v41 = v39[3] >> 1;
      }
      unint64_t v42 = v39[2];
      if (v41 <= v42) {
        goto LABEL_125;
      }
      unint64_t v29 = v39;
      unint64_t v43 = (unint64_t)&v39[6 * v42 + 4];
      if (v37 + 32 < v43 + 48 && v43 < v37 + 80)
      {
LABEL_136:
        uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      v28 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v29[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      unint64_t v27 = v183 - 1;
    }
    while (v183 != 1);
    v168[0] = v29;
    swift_bridgeObjectRelease();
    uint64_t v19 = _swiftEmptyArrayStorage;
    long long v11 = v174;
  }
  else
  {
    v168[0] = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v45 = (_OWORD *)swift_initStackObject();
  v45[1] = v173;
  *long long v11 = 2;
  swift_storeEnumTagMultiPayload();
  uint64_t v46 = v182;
  sub_10006DDF4((uint64_t)v11, v182, type metadata accessor for ExperienceEvent);
  uint64_t v47 = swift_allocObject();
  sub_1000713EC(v46, v47 + v179, type metadata accessor for ExperienceEvent);
  uint64_t v48 = (uint64_t (**)@<X0>(uint64_t *@<X8>))(v47 + v180);
  uint64_t v49 = v172;
  *uint64_t v48 = sub_100070C80;
  v48[1] = v49;
  swift_retain();
  sub_10006DE5C((uint64_t)v11, type metadata accessor for ExperienceEvent);
  __int16 v200 = 1;
  v201 = sub_100070C68;
  uint64_t v202 = v47;
  v203 = _swiftEmptyArrayStorage;
  v204 = _swiftEmptyArrayStorage;
  v205 = _swiftEmptyArrayStorage;
  uint64_t v50 = (uint64_t)v171;
  *uint64_t v171 = 0;
  *(void *)(v50 + 8) = 0;
  *(unsigned char *)(v50 + 16) = 0;
  swift_storeEnumTagMultiPayload();
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = v173;
  sub_10006DDF4(v50, v51 + v169, type metadata accessor for ExperienceEffect);
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = v51;
  swift_bridgeObjectRetain();
  sub_10005E1C0((uint64_t)sub_100071A14, v52, (uint64_t)v185);
  swift_bridgeObjectRelease();
  swift_release();
  long long v53 = v185[1];
  v45[2] = v185[0];
  v45[3] = v53;
  v45[4] = v185[2];
  sub_10006DE5C(v50, type metadata accessor for ExperienceEffect);
  swift_release();
  unint64_t v54 = *((void *)v45 + 2);
  if (v54)
  {
    swift_bridgeObjectRetain();
    uint64_t inited = (uint64_t)v45;
    uint64_t v55 = (void *)v45 + 9;
    do
    {
      unint64_t v183 = v54;
      uint64_t v57 = *(v55 - 1);
      uint64_t v56 = *v55;
      uint64_t v59 = *(v55 - 3);
      uint64_t v58 = *(v55 - 2);
      uint64_t v60 = *(v55 - 4);
      __int16 v61 = *((_WORD *)v55 - 20);
      uint64_t v62 = swift_initStackObject();
      *(_WORD *)(v62 + 32) = v61;
      *(void *)(v62 + 40) = v60;
      *(void *)(v62 + 48) = v59;
      *(void *)(v62 + 56) = v58;
      *(void *)(v62 + 64) = v57;
      *(void *)(v62 + 72) = v56;
      unint64_t v63 = v19[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v64 = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!v64 || (unint64_t v65 = v19[3] >> 1, v65 <= v63))
      {
        uint64_t v19 = sub_100088B4C(v64, v63 + 1, 1, v19);
        unint64_t v65 = v19[3] >> 1;
      }
      unint64_t v66 = v19[2];
      if (v65 <= v66) {
        goto LABEL_126;
      }
      if (v62 + 32 < (unint64_t)&v19[6 * v66 + 10] && (unint64_t)&v19[6 * v66 + 4] < v62 + 80) {
        goto LABEL_136;
      }
      v55 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v19[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      unint64_t v54 = v183 - 1;
    }
    while (v183 != 1);
    uint64_t v171 = v19;
    swift_bridgeObjectRelease();
    uint64_t v19 = _swiftEmptyArrayStorage;
    long long v11 = v174;
  }
  else
  {
    uint64_t v171 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  sub_10000A38C(&qword_10035F268);
  uint64_t v68 = swift_initStackObject();
  *(_OWORD *)(v68 + 16) = v173;
  *long long v11 = 3;
  swift_storeEnumTagMultiPayload();
  uint64_t v69 = v182;
  sub_10006DDF4((uint64_t)v11, v182, type metadata accessor for ExperienceEvent);
  uint64_t v70 = swift_allocObject();
  sub_1000713EC(v69, v70 + v179, type metadata accessor for ExperienceEvent);
  uint64_t v71 = (void *)(v70 + v180);
  id v72 = v172;
  *uint64_t v71 = sub_100070C8C;
  v71[1] = v72;
  swift_retain();
  sub_10006DE5C((uint64_t)v11, type metadata accessor for ExperienceEvent);
  *(void *)(v68 + 32) = &off_10031D320;
  *(void *)(v68 + 40) = sub_100070C34;
  *(void *)(v68 + 48) = v70;
  *(void *)(v68 + 56) = _swiftEmptyArrayStorage;
  *(void *)(v68 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v68 + 72) = _swiftEmptyArrayStorage;
  uint64_t v174 = *(unsigned char **)(v68 + 16);
  uint64_t inited = v68 + 32;
  if (v174)
  {
    uint64_t v170 = v68;
    swift_bridgeObjectRetain();
    unint64_t v73 = 0;
    uint64_t v74 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v75 = inited + 48 * v73;
      uint64_t v76 = *(void *)v75;
      int64_t v77 = *(void *)(*(void *)v75 + 16);
      if (v77)
      {
        unint64_t v176 = v73;
        uint64_t v177 = (uint64_t)v74;
        long long v78 = *(_OWORD *)(v75 + 8);
        long long v181 = *(_OWORD *)(v75 + 24);
        long long v182 = v78;
        uint64_t v79 = *(void *)(v75 + 40);
        char v194 = _swiftEmptyArrayStorage;
        unint64_t v183 = *((void *)&v181 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v180 = *((void *)&v182 + 1);
        swift_retain();
        uint64_t v179 = v181;
        swift_bridgeObjectRetain();
        sub_1000B549C(0, v77, 0);
        uint64_t v80 = 0;
        uint64_t v81 = v194;
        do
        {
          uint64_t v82 = v76;
          __int16 v83 = *(_WORD *)(v76 + 2 * v80 + 32);
          char v194 = v81;
          unint64_t v84 = v81[2];
          unint64_t v85 = v81[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          if (v84 >= v85 >> 1)
          {
            sub_1000B549C(v85 > 1, v84 + 1, 1);
            uint64_t v81 = v194;
          }
          v81[2] = v84 + 1;
          uint64_t v86 = &v81[6 * v84];
          *((_WORD *)v86 + 16) = v83;
          ++v80;
          *(_OWORD *)(v86 + 5) = v182;
          *(_OWORD *)(v86 + 7) = v181;
          v86[9] = v79;
          uint64_t v76 = v82;
        }
        while (v77 != v80);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v19 = _swiftEmptyArrayStorage;
        unint64_t v73 = v176;
        uint64_t v74 = (void *)v177;
      }
      else
      {
        uint64_t v81 = _swiftEmptyArrayStorage;
      }
      uint64_t v87 = v81[2];
      int64_t v88 = v74[2];
      int64_t v89 = v88 + v87;
      if (__OFADD__(v88, v87)) {
        goto LABEL_128;
      }
      uint64_t v90 = swift_isUniquelyReferenced_nonNull_native();
      if ((v90 & 1) != 0 && v89 <= v74[3] >> 1)
      {
        if (v81[2]) {
          goto LABEL_49;
        }
      }
      else
      {
        if (v88 <= v89) {
          int64_t v91 = v88 + v87;
        }
        else {
          int64_t v91 = v88;
        }
        uint64_t v74 = sub_100088B4C((void *)v90, v91, 1, v74);
        if (v81[2])
        {
LABEL_49:
          uint64_t v92 = v74[2];
          if ((v74[3] >> 1) - v92 < v87) {
            goto LABEL_133;
          }
          unint64_t v93 = (unint64_t)&v74[6 * v92 + 4];
          if ((unint64_t)(v81 + 4) < v93 + 48 * v87 && v93 < (unint64_t)&v81[6 * v87 + 4]) {
            goto LABEL_136;
          }
          sub_10000A38C(&qword_10035EDD0);
          swift_arrayInitWithCopy();
          if (v87)
          {
            uint64_t v95 = v74[2];
            BOOL v96 = __OFADD__(v95, v87);
            uint64_t v97 = v95 + v87;
            if (v96) {
              goto LABEL_135;
            }
            v74[2] = v97;
          }
          goto LABEL_32;
        }
      }
      if (v87) {
        goto LABEL_129;
      }
LABEL_32:
      ++v73;
      swift_bridgeObjectRelease();
      if ((unsigned char *)v73 == v174)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_60;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v74 = _swiftEmptyArrayStorage;
LABEL_60:
  uint64_t v98 = (_OWORD *)swift_initStackObject();
  v98[1] = v173;
  uint64_t v99 = swift_allocObject();
  uint64_t v100 = v172;
  *(void *)(v99 + 16) = sub_100071024;
  *(void *)(v99 + 24) = v100;
  LOWORD(v194) = 1;
  v195 = sub_100071088;
  uint64_t v196 = v99;
  v197 = _swiftEmptyArrayStorage;
  v198 = _swiftEmptyArrayStorage;
  v199 = _swiftEmptyArrayStorage;
  uint64_t v101 = sub_100066BB0();
  uint64_t v102 = swift_allocObject();
  *(void *)(v102 + 16) = v101;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10005E1C0((uint64_t)sub_100071A14, v102, (uint64_t)v186);
  swift_bridgeObjectRelease();
  swift_release();
  long long v103 = v186[1];
  v98[2] = v186[0];
  v98[3] = v103;
  v98[4] = v186[2];
  swift_release();
  unint64_t v104 = *((void *)v98 + 2);
  uint64_t v177 = (uint64_t)v74;
  if (v104)
  {
    swift_bridgeObjectRetain();
    *(void *)&long long v181 = v98;
    uint64_t v105 = (void *)v98 + 9;
    uint64_t v106 = _swiftEmptyArrayStorage;
    do
    {
      unint64_t v183 = v104;
      uint64_t v108 = *(v105 - 1);
      uint64_t v107 = *v105;
      uint64_t v109 = *(v105 - 3);
      uint64_t v110 = *(v105 - 2);
      uint64_t v111 = *(v105 - 4);
      __int16 v112 = *((_WORD *)v105 - 20);
      uint64_t v113 = swift_initStackObject();
      *(_WORD *)(v113 + 32) = v112;
      *(void *)(v113 + 40) = v111;
      *(void *)(v113 + 48) = v109;
      *(void *)(v113 + 56) = v110;
      *(void *)(v113 + 64) = v108;
      *(void *)(v113 + 72) = v107;
      unint64_t v114 = v106[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v115 = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!v115 || (unint64_t v116 = v106[3] >> 1, v116 <= v114))
      {
        uint64_t v106 = sub_100088B4C(v115, v114 + 1, 1, v106);
        unint64_t v116 = v106[3] >> 1;
      }
      unint64_t v117 = v106[2];
      if (v116 <= v117) {
        goto LABEL_127;
      }
      if (v113 + 32 < (unint64_t)&v106[6 * v117 + 10] && (unint64_t)&v106[6 * v117 + 4] < v113 + 80) {
        goto LABEL_136;
      }
      v105 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v106[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      unint64_t v104 = v183 - 1;
    }
    while (v183 != 1);
    *(void *)&long long v182 = v106;
    swift_bridgeObjectRelease();
    uint64_t v19 = _swiftEmptyArrayStorage;
    uint64_t v74 = (void *)v177;
  }
  else
  {
    *(void *)&long long v182 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v119 = (_OWORD *)swift_allocObject();
  v119[1] = v173;
  __int16 v188 = 0;
  uint64_t v189 = sub_10006C920;
  uint64_t v190 = 0;
  v191 = _swiftEmptyArrayStorage;
  uint64_t v192 = _swiftEmptyArrayStorage;
  uint64_t v193 = _swiftEmptyArrayStorage;
  uint64_t v120 = sub_100066BB0();
  uint64_t v121 = swift_allocObject();
  *(void *)(v121 + 16) = v120;
  swift_bridgeObjectRetain();
  sub_10005E1C0((uint64_t)sub_100071A14, v121, (uint64_t)v187);
  swift_bridgeObjectRelease();
  swift_release();
  long long v122 = v187[1];
  v119[2] = v187[0];
  v119[3] = v122;
  v119[4] = v187[2];
  unint64_t v123 = *((void *)v119 + 2);
  if (v123)
  {
    swift_bridgeObjectRetain();
    *(void *)&long long v181 = v119;
    uint64_t v124 = (void *)v119 + 9;
    uint64_t v19 = _swiftEmptyArrayStorage;
    do
    {
      unint64_t v183 = v123;
      uint64_t v126 = *(v124 - 1);
      uint64_t v125 = *v124;
      uint64_t v128 = *(v124 - 3);
      uint64_t v127 = *(v124 - 2);
      uint64_t v129 = *(v124 - 4);
      __int16 v130 = *((_WORD *)v124 - 20);
      uint64_t v131 = swift_allocObject();
      *(_WORD *)(v131 + 32) = v130;
      *(void *)(v131 + 40) = v129;
      *(void *)(v131 + 48) = v128;
      *(void *)(v131 + 56) = v127;
      *(void *)(v131 + 64) = v126;
      *(void *)(v131 + 72) = v125;
      unint64_t v132 = v19[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v133 = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!v133 || (unint64_t v134 = v19[3] >> 1, v134 <= v132))
      {
        uint64_t v19 = sub_100088B4C(v133, v132 + 1, 1, v19);
        unint64_t v134 = v19[3] >> 1;
      }
      unint64_t v135 = v19[2];
      uint64_t v74 = (void *)v177;
      if (v134 <= v135) {
        goto LABEL_130;
      }
      if (v131 + 32 < (unint64_t)&v19[6 * v135 + 10] && (unint64_t)&v19[6 * v135 + 4] < v131 + 80) {
        goto LABEL_136;
      }
      v124 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v19[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      unint64_t v123 = v183 - 1;
    }
    while (v183 != 1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_10000A38C(&qword_10035F258);
  uint64_t v137 = swift_initStackObject();
  *(_OWORD *)(v137 + 16) = xmmword_100291160;
  *(void *)(v137 + 32) = v168[0];
  unint64_t v180 = v137 + 32;
  *(void *)(v137 + 40) = v171;
  *(void *)(v137 + 48) = v74;
  *(void *)(v137 + 56) = v182;
  *(void *)(v137 + 64) = v19;
  swift_bridgeObjectRetain();
  uint64_t v138 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32; i != 72; i += 8)
  {
    uint64_t v140 = *(void *)(v137 + i);
    uint64_t v141 = *(void *)(v140 + 16);
    int64_t v142 = v138[2];
    int64_t v143 = v142 + v141;
    if (__OFADD__(v142, v141))
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
    }
    swift_bridgeObjectRetain();
    uint64_t v144 = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (v144 && v143 <= v138[3] >> 1)
    {
      if (!*(void *)(v140 + 16)) {
        goto LABEL_88;
      }
    }
    else
    {
      if (v142 <= v143) {
        int64_t v145 = v142 + v141;
      }
      else {
        int64_t v145 = v142;
      }
      uint64_t v138 = sub_100088B4C(v144, v145, 1, v138);
      if (!*(void *)(v140 + 16))
      {
LABEL_88:
        if (v141) {
          goto LABEL_124;
        }
        goto LABEL_89;
      }
    }
    uint64_t v146 = v138[2];
    if ((v138[3] >> 1) - v146 < v141) {
      goto LABEL_131;
    }
    unint64_t v147 = (unint64_t)&v138[6 * v146 + 4];
    if (v140 + 32 < v147 + 48 * v141 && v147 < v140 + 32 + 48 * v141) {
      goto LABEL_136;
    }
    sub_10000A38C(&qword_10035EDD0);
    swift_arrayInitWithCopy();
    if (v141)
    {
      uint64_t v149 = v138[2];
      BOOL v96 = __OFADD__(v149, v141);
      uint64_t v150 = v149 + v141;
      if (v96) {
        goto LABEL_134;
      }
      v138[2] = v150;
    }
LABEL_89:
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v151 = v138[2];
  if (v151)
  {
    uint64_t v179 = v137;
    swift_bridgeObjectRetain();
    uint64_t v152 = v138 + 9;
    uint64_t v153 = _swiftEmptyArrayStorage;
    *(void *)&long long v181 = v138;
    do
    {
      *(void *)&long long v182 = v151;
      uint64_t v155 = *(v152 - 1);
      uint64_t v154 = *v152;
      uint64_t v157 = *(v152 - 3);
      uint64_t v156 = *(v152 - 2);
      uint64_t v158 = *(v152 - 4);
      uint64_t v159 = v153;
      __int16 v160 = *((_WORD *)v152 - 20);
      uint64_t v161 = swift_allocObject();
      *(_WORD *)(v161 + 32) = v160;
      unint64_t v183 = v161 + 32;
      uint64_t v153 = v159;
      *(void *)(v161 + 40) = v158;
      *(void *)(v161 + 48) = v157;
      *(void *)(v161 + 56) = v156;
      *(void *)(v161 + 64) = v155;
      *(void *)(v161 + 72) = v154;
      unint64_t v162 = v159[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v163 = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!v163 || (unint64_t v164 = v159[3] >> 1, v164 <= v162))
      {
        uint64_t v153 = sub_100088B4C(v163, v162 + 1, 1, v159);
        unint64_t v164 = v153[3] >> 1;
      }
      unint64_t v165 = v153[2];
      if (v164 <= v165) {
        goto LABEL_132;
      }
      if (v183 < (unint64_t)&v153[6 * v165 + 10] && (unint64_t)&v153[6 * v165 + 4] < v161 + 80) {
        goto LABEL_136;
      }
      v152 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v153[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      uint64_t v151 = v182 - 1;
    }
    while ((void)v182 != 1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v153 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10000A38C(&qword_10035F260);
  swift_arrayDestroy();
  return (uint64_t)v153;
}

uint64_t sub_100066A88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ExperienceEvent(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006DDF4(a1, (uint64_t)v6, type metadata accessor for ExperienceEvent);
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_10006DE5C((uint64_t)v6, type metadata accessor for ExperienceEvent);
    return 65278;
  }
  uint64_t v7 = *v6;
  if ((v7 - 5) < 5u) {
    return 65278;
  }
  sub_10000D6E4((void *)(a2 + 88), *(void *)(a2 + 112));
  if (sub_1001E1728())
  {
    if (v7 <= 4) {
      return word_1002916EA[v7];
    }
    return 65278;
  }
  if ((v7 & 0xFFFFFFFB) != 0) {
    return 4294967038;
  }
  else {
    return 4294934784;
  }
}

uint64_t sub_100066BB0()
{
  sub_10000A38C(&qword_10035F270);
  uint64_t v0 = *(void *)(type metadata accessor for ExperienceEffect(0) - 8);
  uint64_t v1 = *(void *)(v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100291160;
  uint64_t v4 = (unsigned char *)(v3 + v2);
  *uint64_t v4 = 4;
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = &v4[v1];
  *(_OWORD *)uint64_t v5 = xmmword_10028F480;
  v5[16] = 0;
  swift_storeEnumTagMultiPayload();
  v4[2 * v1] = 5;
  swift_storeEnumTagMultiPayload();
  v4[3 * v1] = 3;
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = &v4[4 * v1];
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = 2;
  v6[24] = 4;
  swift_storeEnumTagMultiPayload();
  return v3;
}

uint64_t sub_100066D10()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for ExperienceEvent(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v87 - v8;
  uint64_t v90 = sub_10000A38C(&qword_10035F268);
  uint64_t inited = swift_initStackObject();
  long long v88 = xmmword_10028D430;
  *(_OWORD *)(inited + 16) = xmmword_10028D430;
  *uint64_t v9 = 3;
  uint64_t v93 = v3;
  swift_storeEnumTagMultiPayload();
  sub_10006DDF4((uint64_t)v9, (uint64_t)v7, type metadata accessor for ExperienceEvent);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  unint64_t v13 = (v5 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v87[1] = v13 + 16;
  uint64_t v89 = v11 | 7;
  uint64_t v14 = swift_allocObject();
  uint64_t v91 = v12;
  uint64_t v94 = v7;
  sub_1000713EC((uint64_t)v7, v14 + v12, type metadata accessor for ExperienceEvent);
  unint64_t v92 = v13;
  uint64_t v15 = (void *)(v14 + v13);
  *uint64_t v15 = sub_100070C24;
  v15[1] = v2;
  uint64_t v96 = v2;
  swift_retain();
  uint64_t v95 = v9;
  sub_10006DE5C((uint64_t)v9, type metadata accessor for ExperienceEvent);
  *(void *)(inited + 32) = &off_10031D348;
  uint64_t v98 = inited + 32;
  *(void *)(inited + 40) = sub_100070C34;
  *(void *)(inited + 48) = v14;
  *(void *)(inited + 56) = _swiftEmptyArrayStorage;
  *(void *)(inited + 64) = _swiftEmptyArrayStorage;
  *(void *)(inited + 72) = _swiftEmptyArrayStorage;
  uint64_t v97 = *(void *)(inited + 16);
  if (v97)
  {
    v87[0] = inited;
    swift_bridgeObjectRetain();
    int64_t v16 = 0;
    uint64_t v17 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v18 = v98 + 48 * v16;
      uint64_t v19 = *(void *)v18;
      int64_t v20 = *(void *)(*(void *)v18 + 16);
      if (v20)
      {
        uint64_t v99 = (void *)v16;
        uint64_t v100 = v17;
        long long v21 = *(_OWORD *)(v18 + 8);
        long long v103 = *(_OWORD *)(v18 + 24);
        long long v104 = v21;
        uint64_t v22 = *(void *)(v18 + 40);
        unint64_t v105 = *((void *)&v103 + 1);
        uint64_t v106 = (uint64_t (*)(uint64_t))_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v102 = *((void *)&v104 + 1);
        swift_retain();
        uint64_t v101 = (void *)v103;
        swift_bridgeObjectRetain();
        sub_1000B549C(0, v20, 0);
        uint64_t v23 = 0;
        uint64_t v24 = v106;
        do
        {
          uint64_t inited = v19;
          uint64_t v1 = (void *)*(unsigned __int16 *)(v19 + 2 * v23 + 32);
          uint64_t v106 = v24;
          unint64_t v25 = *((void *)v24 + 2);
          unint64_t v26 = *((void *)v24 + 3);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          if (v25 >= v26 >> 1)
          {
            sub_1000B549C(v26 > 1, v25 + 1, 1);
            uint64_t v24 = v106;
          }
          *((void *)v24 + 2) = v25 + 1;
          unint64_t v27 = (char *)v24 + 48 * v25;
          *((_WORD *)v27 + 16) = (_WORD)v1;
          ++v23;
          *(_OWORD *)(v27 + 40) = v104;
          *(_OWORD *)(v27 + 56) = v103;
          *((void *)v27 + 9) = v22;
          uint64_t v19 = inited;
        }
        while (v20 != v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        int64_t v16 = (int64_t)v99;
        uint64_t v17 = v100;
      }
      else
      {
        uint64_t v24 = (uint64_t (*)(uint64_t))_swiftEmptyArrayStorage;
      }
      uint64_t v28 = *((void *)v24 + 2);
      uint64_t v29 = v17[2];
      uint64_t v30 = v29 + v28;
      if (__OFADD__(v29, v28))
      {
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v30 <= v17[3] >> 1)
      {
        if (*((void *)v24 + 2)) {
          goto LABEL_21;
        }
      }
      else
      {
        if (v29 <= v30) {
          int64_t v32 = v29 + v28;
        }
        else {
          int64_t v32 = v29;
        }
        uint64_t v17 = sub_100088B4C((void *)isUniquelyReferenced_nonNull_native, v32, 1, v17);
        if (*((void *)v24 + 2))
        {
LABEL_21:
          uint64_t v33 = v17[2];
          if ((v17[3] >> 1) - v33 < v28) {
            goto LABEL_87;
          }
          uint64_t v29 = (uint64_t)&v17[6 * v33 + 4];
          if ((unint64_t)v24 + 32 < v29 + 48 * v28 && v29 < (unint64_t)v24 + 48 * v28 + 32) {
            goto LABEL_119;
          }
          sub_10000A38C(&qword_10035EDD0);
          swift_arrayInitWithCopy();
          if (v28)
          {
            uint64_t v35 = v17[2];
            BOOL v36 = __OFADD__(v35, v28);
            uint64_t v37 = v35 + v28;
            if (v36) {
              goto LABEL_89;
            }
            v17[2] = v37;
          }
          goto LABEL_4;
        }
      }
      if (v28) {
        goto LABEL_84;
      }
LABEL_4:
      ++v16;
      swift_bridgeObjectRelease();
      if (v16 == v97)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_32;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_32:
  uint64_t v38 = swift_initStackObject();
  *(_OWORD *)(v38 + 16) = v88;
  uint64_t v28 = (uint64_t)v95;
  _OWORD *v95 = xmmword_100291170;
  *(unsigned char *)(v28 + 16) = 4;
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = type metadata accessor for ExperienceEvent;
  uint64_t v39 = (uint64_t)v94;
  sub_10006DDF4(v28, (uint64_t)v94, type metadata accessor for ExperienceEvent);
  uint64_t v29 = swift_allocObject();
  sub_1000713EC(v39, v29 + v91, type metadata accessor for ExperienceEvent);
  uint64_t v40 = (void *)(v29 + v92);
  uint64_t v41 = v96;
  *uint64_t v40 = sub_100070C4C;
  v40[1] = v41;
  swift_retain();
  sub_10006DE5C(v28, type metadata accessor for ExperienceEvent);
  *(void *)(v38 + 32) = &off_10031D370;
  *(void *)(v38 + 40) = sub_100070C34;
  *(void *)(v38 + 48) = v29;
  *(void *)(v38 + 56) = _swiftEmptyArrayStorage;
  *(void *)(v38 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v38 + 72) = _swiftEmptyArrayStorage;
  uint64_t v96 = *(void *)(v38 + 16);
  uint64_t v97 = v38 + 32;
  if (v96)
  {
    uint64_t v95 = (_OWORD *)v38;
    swift_bridgeObjectRetain();
    uint64_t inited = 0;
    uint64_t v1 = _swiftEmptyArrayStorage;
    uint64_t v100 = v17;
    while (1)
    {
      uint64_t v42 = v97 + 48 * inited;
      uint64_t v43 = *(void *)v42;
      int64_t v16 = *(void *)(*(void *)v42 + 16);
      if (v16)
      {
        uint64_t v98 = inited;
        uint64_t v99 = v1;
        long long v44 = *(_OWORD *)(v42 + 8);
        long long v103 = *(_OWORD *)(v42 + 24);
        long long v104 = v44;
        uint64_t v45 = *(void *)(v42 + 40);
        unint64_t v105 = *((void *)&v103 + 1);
        uint64_t v106 = (uint64_t (*)(uint64_t))_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v102 = *((void *)&v104 + 1);
        swift_retain();
        uint64_t v101 = (void *)v103;
        swift_bridgeObjectRetain();
        sub_1000B549C(0, v16, 0);
        uint64_t v46 = 0;
        uint64_t v24 = v106;
        do
        {
          int64_t v47 = v16;
          __int16 v48 = *(_WORD *)(v43 + 2 * v46 + 32);
          uint64_t v106 = v24;
          unint64_t v50 = *((void *)v24 + 2);
          unint64_t v49 = *((void *)v24 + 3);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          if (v50 >= v49 >> 1)
          {
            sub_1000B549C(v49 > 1, v50 + 1, 1);
            uint64_t v24 = v106;
          }
          *((void *)v24 + 2) = v50 + 1;
          uint64_t v51 = (char *)v24 + 48 * v50;
          *((_WORD *)v51 + 16) = v48;
          ++v46;
          *(_OWORD *)(v51 + 40) = v104;
          *(_OWORD *)(v51 + 56) = v103;
          *((void *)v51 + 9) = v45;
          int64_t v16 = v47;
        }
        while (v47 != v46);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v1 = v99;
        uint64_t v17 = v100;
        uint64_t inited = v98;
      }
      else
      {
        uint64_t v24 = (uint64_t (*)(uint64_t))_swiftEmptyArrayStorage;
      }
      uint64_t v28 = *((void *)v24 + 2);
      uint64_t v29 = v1[2];
      uint64_t v52 = v29 + v28;
      if (__OFADD__(v29, v28)) {
        goto LABEL_85;
      }
      uint64_t v53 = swift_isUniquelyReferenced_nonNull_native();
      if ((v53 & 1) != 0 && v52 <= v1[3] >> 1)
      {
        if (*((void *)v24 + 2)) {
          goto LABEL_52;
        }
      }
      else
      {
        if (v29 <= v52) {
          int64_t v54 = v29 + v28;
        }
        else {
          int64_t v54 = v29;
        }
        uint64_t v1 = sub_100088B4C((void *)v53, v54, 1, v1);
        if (*((void *)v24 + 2))
        {
LABEL_52:
          uint64_t v55 = v1[2];
          if ((v1[3] >> 1) - v55 < v28) {
            goto LABEL_88;
          }
          uint64_t v29 = (uint64_t)&v1[6 * v55 + 4];
          int64_t v16 = (int64_t)v24 + 32;
          if ((unint64_t)v24 + 32 < v29 + 48 * v28 && v29 < (unint64_t)v24 + 48 * v28 + 32) {
            goto LABEL_119;
          }
          sub_10000A38C(&qword_10035EDD0);
          swift_arrayInitWithCopy();
          if (v28)
          {
            uint64_t v57 = v1[2];
            BOOL v36 = __OFADD__(v57, v28);
            uint64_t v58 = v57 + v28;
            if (v36) {
              goto LABEL_90;
            }
            v1[2] = v58;
          }
          goto LABEL_35;
        }
      }
      if (v28) {
        goto LABEL_86;
      }
LABEL_35:
      ++inited;
      swift_bridgeObjectRelease();
      if (inited == v96)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_63;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v1 = _swiftEmptyArrayStorage;
LABEL_63:
  sub_10000A38C(&qword_10035F258);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028FC10;
  *(void *)(inited + 32) = v17;
  *(void *)&long long v103 = inited + 32;
  *(void *)(inited + 40) = v1;
  int64_t v16 = v17[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v59 = sub_100088B4C(0, v16, 1, _swiftEmptyArrayStorage);
  uint64_t v1 = v59;
  if (v17[2])
  {
    uint64_t v60 = v59[2];
    if ((v59[3] >> 1) - v60 < v16)
    {
LABEL_115:
      __break(1u);
      goto LABEL_116;
    }
    unint64_t v61 = (unint64_t)&v59[6 * v60 + 4];
    if ((unint64_t)(v17 + 4) < v61 + 48 * v16 && v61 < (unint64_t)&v17[6 * v16 + 4]) {
      goto LABEL_119;
    }
    sub_10000A38C(&qword_10035EDD0);
    swift_arrayInitWithCopy();
    if (v16)
    {
      uint64_t v63 = v1[2];
      BOOL v36 = __OFADD__(v63, v16);
      uint64_t v64 = v63 + v16;
      if (v36)
      {
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
      }
      v1[2] = v64;
    }
  }
  else if (v16)
  {
    goto LABEL_91;
  }
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void *)(inited + 40);
  int64_t v16 = *(void *)(v29 + 16);
  uint64_t v24 = (uint64_t (*)(uint64_t))v1[2];
  uint64_t v28 = (uint64_t)v24 + v16;
  if (__OFADD__(v24, v16)) {
    goto LABEL_92;
  }
  unint64_t v65 = v1[3];
  swift_bridgeObjectRetain();
  if (v28 > (uint64_t)(v65 >> 1))
  {
LABEL_93:
    if ((uint64_t)v24 <= v28) {
      int64_t v70 = v28;
    }
    else {
      int64_t v70 = (int64_t)v24;
    }
    uint64_t v1 = sub_100088B4C((void *)1, v70, 1, v1);
    if (*(void *)(v29 + 16)) {
      goto LABEL_77;
    }
  }
  else if (v16)
  {
LABEL_77:
    uint64_t v66 = v1[2];
    if ((v1[3] >> 1) - v66 < v16)
    {
LABEL_116:
      __break(1u);
      goto LABEL_117;
    }
    unint64_t v67 = (unint64_t)&v1[6 * v66 + 4];
    if (v29 + 32 < v67 + 48 * v16 && v67 < v29 + 32 + 48 * v16)
    {
LABEL_119:
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    sub_10000A38C(&qword_10035EDD0);
    swift_arrayInitWithCopy();
    if (v16)
    {
      uint64_t v68 = v1[2];
      BOOL v36 = __OFADD__(v68, v16);
      uint64_t v69 = v68 + v16;
      if (v36) {
        goto LABEL_118;
      }
      v1[2] = v69;
    }
    goto LABEL_98;
  }
  if (v16)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
LABEL_98:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v71 = v1[2];
  if (v71)
  {
    uint64_t v102 = inited;
    swift_bridgeObjectRetain();
    id v72 = _swiftEmptyArrayStorage;
    uint64_t v101 = v1;
    unint64_t v73 = v1 + 9;
    while (1)
    {
      *(void *)&long long v104 = v71;
      uint64_t v74 = *(v73 - 1);
      uint64_t v75 = *v73;
      uint64_t v77 = *(v73 - 3);
      uint64_t v76 = *(v73 - 2);
      uint64_t v78 = *(v73 - 4);
      __int16 v79 = *((_WORD *)v73 - 20);
      sub_10000A38C(&qword_10035EDC8);
      uint64_t v80 = swift_initStackObject();
      *(_WORD *)(v80 + 32) = v79;
      unint64_t v105 = v80 + 32;
      *(void *)(v80 + 40) = v78;
      *(void *)(v80 + 48) = v77;
      *(void *)(v80 + 56) = v76;
      *(void *)(v80 + 64) = v74;
      *(void *)(v80 + 72) = v75;
      unint64_t v81 = v72[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v82 = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!v82 || (unint64_t v83 = v72[3] >> 1, v83 <= v81))
      {
        id v72 = sub_100088B4C(v82, v81 + 1, 1, v72);
        unint64_t v83 = v72[3] >> 1;
      }
      unint64_t v84 = v72[2];
      if (v83 <= v84) {
        break;
      }
      if (v105 < (unint64_t)&v72[6 * v84 + 10] && (unint64_t)&v72[6 * v84 + 4] < v80 + 80) {
        goto LABEL_119;
      }
      v73 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v72[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t v71 = v104 - 1;
      if ((void)v104 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_112;
      }
    }
    __break(1u);
    goto LABEL_114;
  }
  id v72 = _swiftEmptyArrayStorage;
LABEL_112:
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10000A38C(&qword_10035F260);
  swift_arrayDestroy();
  return (uint64_t)v72;
}

uint64_t sub_100067970()
{
  uint64_t v0 = sub_10000A38C(&qword_10035F278);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = __chkstk_darwin(v0 - 8);
  uint64_t v4 = (char *)v85 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v85 - v5;
  uint64_t v91 = sub_10000A38C(&qword_10035EDC8);
  uint64_t inited = (_OWORD *)swift_initStackObject();
  long long v94 = xmmword_10028D430;
  inited[1] = xmmword_10028D430;
  *(_OWORD *)uint64_t v6 = xmmword_10028F480;
  v6[16] = 4;
  uint64_t v8 = type metadata accessor for ExperienceEvent(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 0, 1, v8);
  sub_10000D728((uint64_t)v6, (uint64_t)v4, &qword_10035F278);
  __int16 v99 = 8449;
  unint64_t v9 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v10 = v9 + v2;
  uint64_t v11 = swift_allocObject();
  sub_10001639C((uint64_t)v4, v11 + v9, &qword_10035F278);
  sub_10006DD54((uint64_t)&v99, v11 + v10);
  sub_10000D78C((uint64_t)v6, &qword_10035F278);
  __int16 v99 = 8449;
  uint64_t v100 = sub_10006DDF0;
  uint64_t v101 = v11;
  uint64_t v102 = _swiftEmptyArrayStorage;
  long long v103 = _swiftEmptyArrayStorage;
  long long v104 = _swiftEmptyArrayStorage;
  sub_10000A38C(&qword_10035F270);
  uint64_t v12 = *(void *)(type metadata accessor for ExperienceEffect(0) - 8);
  int64_t v13 = *(void *)(v12 + 72);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_100291180;
  unint64_t v16 = v15 + v14;
  *(unsigned char *)(v15 + v14) = 0;
  swift_storeEnumTagMultiPayload();
  *(unsigned char *)(v16 + v13) = 0;
  swift_storeEnumTagMultiPayload();
  *(unsigned char *)(v16 + 2 * v13) = 3;
  swift_storeEnumTagMultiPayload();
  *(unsigned char *)(v16 + 3 * v13) = 0;
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  swift_bridgeObjectRetain();
  sub_10005E1C0((uint64_t)sub_100071A14, v17, (uint64_t)v98);
  swift_bridgeObjectRelease();
  swift_release();
  long long v18 = v98[1];
  inited[2] = v98[0];
  inited[3] = v18;
  inited[4] = v98[2];
  swift_release();
  unint64_t v19 = *((void *)inited + 2);
  if (v19)
  {
    swift_bridgeObjectRetain();
    uint64_t v93 = inited;
    int64_t v20 = (int64_t *)inited + 9;
    long long v21 = _swiftEmptyArrayStorage;
    while (1)
    {
      unint64_t v96 = v19;
      uint64_t v23 = *(v20 - 1);
      int64_t v22 = *v20;
      uint64_t v24 = v21;
      uint64_t v26 = *(v20 - 3);
      uint64_t v25 = *(v20 - 2);
      uint64_t v27 = *(v20 - 4);
      __int16 v28 = *((_WORD *)v20 - 20);
      uint64_t v29 = swift_initStackObject();
      *(_WORD *)(v29 + 32) = v28;
      int64_t v13 = v29 + 32;
      *(void *)(v29 + 40) = v27;
      *(void *)(v29 + 48) = v26;
      *(void *)(v29 + 56) = v25;
      *(void *)(v29 + 64) = v23;
      *(void *)(v29 + 72) = v22;
      uint64_t v30 = (void *)v24[2];
      swift_retain();
      long long v21 = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || (unint64_t v32 = v24[3] >> 1, v32 <= (unint64_t)v30))
      {
        long long v21 = sub_100088B4C(isUniquelyReferenced_nonNull_native, (int64_t)v30 + 1, 1, v24);
        unint64_t v32 = v21[3] >> 1;
      }
      unint64_t v33 = v21[2];
      if (v32 <= v33) {
        break;
      }
      if (v13 < (unint64_t)&v21[6 * v33 + 10] && (unint64_t)&v21[6 * v33 + 4] < v29 + 80) {
        goto LABEL_99;
      }
      v20 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v21[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      unint64_t v19 = v96 - 1;
      if (v96 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  long long v21 = _swiftEmptyArrayStorage;
LABEL_15:
  swift_bridgeObjectRelease();
  sub_10000A38C(&qword_10035F268);
  uint64_t v35 = swift_initStackObject();
  *(_OWORD *)(v35 + 16) = v94;
  uint64_t v36 = v95;
  uint64_t v30 = *(void **)(v95 + 128);
  uint64_t v37 = (void *)swift_allocObject();
  _OWORD v37[2] = v30;
  v37[3] = sub_10006DEC0;
  v37[4] = v36;
  *(void *)(v35 + 32) = &off_10031D398;
  uint64_t v88 = v35 + 32;
  *(void *)(v35 + 40) = sub_10006DEC8;
  *(void *)(v35 + 48) = v37;
  *(void *)(v35 + 56) = _swiftEmptyArrayStorage;
  *(void *)(v35 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v35 + 72) = _swiftEmptyArrayStorage;
  uint64_t v23 = *(void *)(v35 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v87 = v23;
  if (v23)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = 0;
    uint64_t v24 = _swiftEmptyArrayStorage;
    v85[1] = v35;
    uint64_t v86 = v21;
    while (1)
    {
      uint64_t v38 = v88 + 48 * v26;
      uint64_t v39 = *(void *)v38;
      int64_t v40 = *(void *)(*(void *)v38 + 16);
      if (v40)
      {
        uint64_t v89 = v26;
        uint64_t v90 = v24;
        long long v41 = *(_OWORD *)(v38 + 8);
        long long v94 = *(_OWORD *)(v38 + 24);
        long long v95 = v41;
        uint64_t v42 = *(void *)(v38 + 40);
        unint64_t v96 = *((void *)&v94 + 1);
        uint64_t v97 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v93 = (_OWORD *)*((void *)&v95 + 1);
        swift_retain();
        unint64_t v92 = (void *)v94;
        swift_bridgeObjectRetain();
        sub_1000B549C(0, v40, 0);
        uint64_t v43 = 0;
        uint64_t v30 = v97;
        do
        {
          __int16 v44 = *(_WORD *)(v39 + 2 * v43 + 32);
          uint64_t v97 = v30;
          unint64_t v46 = v30[2];
          unint64_t v45 = v30[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          if (v46 >= v45 >> 1)
          {
            sub_1000B549C(v45 > 1, v46 + 1, 1);
            uint64_t v30 = v97;
          }
          v30[2] = v46 + 1;
          int64_t v47 = &v30[6 * v46];
          *((_WORD *)v47 + 16) = v44;
          ++v43;
          *(_OWORD *)(v47 + 5) = v95;
          *(_OWORD *)(v47 + 7) = v94;
          v47[9] = v42;
        }
        while (v40 != v43);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        long long v21 = v86;
        uint64_t v26 = v89;
        uint64_t v24 = v90;
      }
      else
      {
        uint64_t v30 = _swiftEmptyArrayStorage;
      }
      int64_t v22 = v30[2];
      uint64_t v23 = v24[2];
      int64_t v13 = v23 + v22;
      if (__OFADD__(v23, v22)) {
        goto LABEL_67;
      }
      uint64_t v48 = swift_isUniquelyReferenced_nonNull_native();
      if ((v48 & 1) != 0 && v13 <= v24[3] >> 1)
      {
        if (v30[2]) {
          goto LABEL_35;
        }
      }
      else
      {
        if (v23 <= v13) {
          int64_t v49 = v23 + v22;
        }
        else {
          int64_t v49 = v23;
        }
        uint64_t v24 = sub_100088B4C((void *)v48, v49, 1, v24);
        if (v30[2])
        {
LABEL_35:
          uint64_t v50 = v24[2];
          if ((v24[3] >> 1) - v50 < v22) {
            goto LABEL_69;
          }
          uint64_t v23 = (uint64_t)&v24[6 * v50 + 4];
          int64_t v13 = (int64_t)(v30 + 4);
          if ((unint64_t)(v30 + 4) < v23 + 48 * v22 && v23 < (unint64_t)&v30[6 * v22 + 4]) {
            goto LABEL_99;
          }
          sub_10000A38C(&qword_10035EDD0);
          swift_arrayInitWithCopy();
          if (v22)
          {
            uint64_t v52 = v24[2];
            BOOL v53 = __OFADD__(v52, v22);
            uint64_t v54 = v52 + v22;
            if (v53) {
              goto LABEL_70;
            }
            void v24[2] = v54;
          }
          goto LABEL_18;
        }
      }
      if (v22) {
        goto LABEL_68;
      }
LABEL_18:
      ++v26;
      swift_bridgeObjectRelease();
      if (v26 == v87)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_46;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = _swiftEmptyArrayStorage;
LABEL_46:
  sub_10000A38C(&qword_10035F258);
  uint64_t v26 = swift_initStackObject();
  *(_OWORD *)(v26 + 16) = xmmword_10028FC10;
  *(void *)(v26 + 32) = v21;
  *(void *)&long long v94 = v26 + 32;
  *(void *)(v26 + 40) = v24;
  int64_t v22 = v21[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v55 = sub_100088B4C(0, v22, 1, _swiftEmptyArrayStorage);
  uint64_t v24 = v55;
  if (v21[2])
  {
    uint64_t v56 = v55[2];
    if ((v55[3] >> 1) - v56 < v22)
    {
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
    uint64_t v57 = v55;
    unint64_t v58 = (unint64_t)&v55[6 * v56 + 4];
    if ((unint64_t)(v21 + 4) < v58 + 48 * v22 && v58 < (unint64_t)&v21[6 * v22 + 4]) {
      goto LABEL_99;
    }
    sub_10000A38C(&qword_10035EDD0);
    swift_arrayInitWithCopy();
    if (v22)
    {
      uint64_t v60 = v57[2];
      BOOL v53 = __OFADD__(v60, v22);
      uint64_t v61 = v60 + v22;
      if (v53)
      {
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
      }
      v57[2] = v61;
    }
  }
  else if (v22)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v26 + 40);
  int64_t v22 = *(void *)(v23 + 16);
  uint64_t v30 = (void *)v24[2];
  int64_t v13 = (int64_t)v30 + v22;
  if (__OFADD__(v30, v22))
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  unint64_t v62 = v24[3];
  swift_bridgeObjectRetain();
  if (v13 <= (uint64_t)(v62 >> 1))
  {
    if (!v22) {
      goto LABEL_77;
    }
    goto LABEL_60;
  }
LABEL_73:
  if ((uint64_t)v30 <= v13) {
    int64_t v68 = v13;
  }
  else {
    int64_t v68 = (int64_t)v30;
  }
  uint64_t v24 = sub_100088B4C((void *)1, v68, 1, v24);
  if (!*(void *)(v23 + 16))
  {
LABEL_77:
    if (v22)
    {
LABEL_94:
      __break(1u);
      goto LABEL_95;
    }
    goto LABEL_78;
  }
LABEL_60:
  uint64_t v63 = v24[2];
  if ((v24[3] >> 1) - v63 < v22)
  {
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  uint64_t v64 = v24;
  unint64_t v65 = (unint64_t)&v24[6 * v63 + 4];
  if (v23 + 32 < v65 + 48 * v22 && v65 < v23 + 32 + 48 * v22)
  {
LABEL_99:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  sub_10000A38C(&qword_10035EDD0);
  swift_arrayInitWithCopy();
  uint64_t v24 = v64;
  if (v22)
  {
    uint64_t v66 = v64[2];
    BOOL v53 = __OFADD__(v66, v22);
    uint64_t v67 = v66 + v22;
    if (v53) {
      goto LABEL_98;
    }
    v64[2] = v67;
  }
LABEL_78:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v69 = v24[2];
  if (v69)
  {
    uint64_t v93 = (_OWORD *)v26;
    swift_bridgeObjectRetain();
    unint64_t v92 = v24;
    int64_t v70 = v24 + 9;
    uint64_t v71 = _swiftEmptyArrayStorage;
    while (1)
    {
      *(void *)&long long v95 = v69;
      uint64_t v73 = *(v70 - 1);
      uint64_t v72 = *v70;
      uint64_t v75 = *(v70 - 3);
      uint64_t v74 = *(v70 - 2);
      uint64_t v76 = *(v70 - 4);
      __int16 v77 = *((_WORD *)v70 - 20);
      uint64_t v78 = swift_initStackObject();
      *(_WORD *)(v78 + 32) = v77;
      unint64_t v96 = v78 + 32;
      *(void *)(v78 + 40) = v76;
      *(void *)(v78 + 48) = v75;
      *(void *)(v78 + 56) = v74;
      *(void *)(v78 + 64) = v73;
      *(void *)(v78 + 72) = v72;
      unint64_t v79 = v71[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v80 = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!v80 || (unint64_t v81 = v71[3] >> 1, v81 <= v79))
      {
        uint64_t v71 = sub_100088B4C(v80, v79 + 1, 1, v71);
        unint64_t v81 = v71[3] >> 1;
      }
      unint64_t v82 = v71[2];
      if (v81 <= v82) {
        break;
      }
      if (v96 < (unint64_t)&v71[6 * v82 + 10] && (unint64_t)&v71[6 * v82 + 4] < v78 + 80) {
        goto LABEL_99;
      }
      v70 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v71[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t v69 = v95 - 1;
      if ((void)v95 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_92;
      }
    }
    __break(1u);
    goto LABEL_94;
  }
  uint64_t v71 = _swiftEmptyArrayStorage;
LABEL_92:
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10000A38C(&qword_10035F260);
  swift_arrayDestroy();
  return (uint64_t)v71;
}

uint64_t sub_100068588()
{
  uint64_t v0 = sub_10000A38C(&qword_10035F278);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = __chkstk_darwin(v0 - 8);
  uint64_t v4 = (char *)v103 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v103 - v5;
  uint64_t v111 = sub_10000A38C(&qword_10035EDC8);
  uint64_t inited = (_OWORD *)swift_initStackObject();
  long long v105 = xmmword_10028D430;
  inited[1] = xmmword_10028D430;
  *(_OWORD *)uint64_t v6 = xmmword_10028F480;
  v6[16] = 4;
  uint64_t v8 = type metadata accessor for ExperienceEvent(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 0, 1, v8);
  sub_10000D728((uint64_t)v6, (uint64_t)v4, &qword_10035F278);
  __int16 v125 = 8193;
  unint64_t v9 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v10 = v9 + v2;
  uint64_t v11 = swift_allocObject();
  sub_10001639C((uint64_t)v4, v11 + v9, &qword_10035F278);
  sub_10006DD54((uint64_t)&v125, v11 + v10);
  sub_10000D78C((uint64_t)v6, &qword_10035F278);
  __int16 v125 = 8193;
  uint64_t v126 = sub_10006DDF0;
  uint64_t v127 = v11;
  unint64_t v12 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v128 = _swiftEmptyArrayStorage;
  uint64_t v129 = _swiftEmptyArrayStorage;
  __int16 v130 = _swiftEmptyArrayStorage;
  sub_10000A38C(&qword_10035F270);
  uint64_t v13 = *(void *)(type metadata accessor for ExperienceEffect(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = swift_allocObject();
  long long v104 = xmmword_10028FDD0;
  *(_OWORD *)(v16 + 16) = xmmword_10028FDD0;
  unint64_t v17 = v16 + v15;
  *(unsigned char *)(v16 + v15) = 0;
  swift_storeEnumTagMultiPayload();
  *(unsigned char *)(v17 + v14) = 3;
  swift_storeEnumTagMultiPayload();
  *(unsigned char *)(v17 + 2 * v14) = 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  swift_bridgeObjectRetain();
  sub_10005E1C0((uint64_t)sub_100071A14, v18, (uint64_t)v117);
  swift_bridgeObjectRelease();
  swift_release();
  long long v19 = v117[1];
  inited[2] = v117[0];
  inited[3] = v19;
  inited[4] = v117[2];
  swift_release();
  uint64_t v20 = *((void *)inited + 2);
  if (v20)
  {
    swift_bridgeObjectRetain();
    uint64_t v113 = inited;
    long long v21 = (uint64_t *)inited + 9;
    int64_t v22 = _swiftEmptyArrayStorage;
    while (1)
    {
      *(void *)&long long v115 = v20;
      uint64_t v24 = *(v21 - 1);
      uint64_t v23 = *v21;
      uint64_t v25 = v22;
      unint64_t v12 = *(v21 - 3);
      uint64_t v26 = *(v21 - 2);
      uint64_t v27 = *(v21 - 4);
      __int16 v28 = *((_WORD *)v21 - 20);
      int64_t v29 = swift_initStackObject();
      *(_WORD *)(v29 + 32) = v28;
      unint64_t v116 = v29 + 32;
      *(void *)(v29 + 40) = v27;
      *(void *)(v29 + 48) = v12;
      *(void *)(v29 + 56) = v26;
      *(void *)(v29 + 64) = v24;
      *(void *)(v29 + 72) = v23;
      unint64_t v30 = v25[2];
      swift_retain();
      int64_t v22 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || (unint64_t v32 = v25[3] >> 1, v32 <= v30))
      {
        int64_t v22 = sub_100088B4C(isUniquelyReferenced_nonNull_native, v30 + 1, 1, v25);
        unint64_t v32 = v22[3] >> 1;
      }
      unint64_t v33 = v22[2];
      uint64_t v34 = _swiftEmptyArrayStorage;
      uint64_t v35 = (void *)v116;
      if (v32 <= v33) {
        break;
      }
      if (v116 < (unint64_t)&v22[6 * v33 + 10] && (unint64_t)&v22[6 * v33 + 4] < v29 + 80) {
        goto LABEL_128;
      }
      v21 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v22[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t v20 = v115 - 1;
      if ((void)v115 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  int64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v34 = _swiftEmptyArrayStorage;
LABEL_15:
  swift_bridgeObjectRelease();
  sub_10000A38C(&qword_10035F268);
  uint64_t v37 = swift_initStackObject();
  *(_OWORD *)(v37 + 16) = v105;
  unint64_t v38 = sub_10006CBF4();
  uint64_t v39 = (void *)swift_allocObject();
  v39[2] = v38;
  v39[3] = sub_10006DEC0;
  v39[4] = v114;
  *(void *)(v37 + 32) = &off_10031D3C0;
  uint64_t v107 = v37 + 32;
  *(void *)(v37 + 40) = sub_10006DEC8;
  *(void *)(v37 + 48) = v39;
  *(void *)(v37 + 56) = _swiftEmptyArrayStorage;
  *(void *)(v37 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v37 + 72) = _swiftEmptyArrayStorage;
  uint64_t v40 = *(void *)(v37 + 16);
  swift_retain();
  uint64_t v110 = v22;
  uint64_t v106 = v40;
  if (v40)
  {
    v103[1] = v37;
    swift_bridgeObjectRetain();
    uint64_t v41 = 0;
    long long v21 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v42 = v107 + 48 * v41;
      uint64_t v43 = *(void *)v42;
      int64_t v44 = *(void *)(*(void *)v42 + 16);
      if (v44)
      {
        uint64_t v108 = v41;
        uint64_t v109 = v21;
        long long v45 = *(_OWORD *)(v42 + 8);
        long long v114 = *(_OWORD *)(v42 + 24);
        long long v115 = v45;
        uint64_t v46 = *(void *)(v42 + 40);
        uint64_t v119 = _swiftEmptyArrayStorage;
        unint64_t v116 = *((void *)&v114 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v113 = (_OWORD *)*((void *)&v115 + 1);
        swift_retain();
        __int16 v112 = (uint64_t *)v114;
        swift_bridgeObjectRetain();
        sub_1000B549C(0, v44, 0);
        uint64_t v47 = 0;
        uint64_t v35 = v119;
        do
        {
          __int16 v48 = *(_WORD *)(v43 + 2 * v47 + 32);
          uint64_t v119 = v35;
          unint64_t v49 = v35[2];
          unint64_t v12 = v35[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          if (v49 >= v12 >> 1)
          {
            sub_1000B549C(v12 > 1, v49 + 1, 1);
            uint64_t v35 = v119;
          }
          _OWORD v35[2] = v49 + 1;
          uint64_t v50 = &v35[6 * v49];
          *((_WORD *)v50 + 16) = v48;
          ++v47;
          *(_OWORD *)(v50 + 5) = v115;
          *(_OWORD *)(v50 + 7) = v114;
          v50[9] = v46;
        }
        while (v44 != v47);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v34 = _swiftEmptyArrayStorage;
        long long v21 = v109;
        int64_t v22 = v110;
        uint64_t v41 = v108;
      }
      else
      {
        uint64_t v35 = _swiftEmptyArrayStorage;
      }
      int64_t v29 = v35[2];
      uint64_t v23 = v21[2];
      uint64_t v24 = v23 + v29;
      if (__OFADD__(v23, v29)) {
        goto LABEL_78;
      }
      uint64_t v51 = swift_isUniquelyReferenced_nonNull_native();
      if ((v51 & 1) != 0 && v24 <= (uint64_t)((unint64_t)v21[3] >> 1))
      {
        if (v35[2]) {
          goto LABEL_35;
        }
      }
      else
      {
        if (v23 <= v24) {
          int64_t v52 = v23 + v29;
        }
        else {
          int64_t v52 = v23;
        }
        long long v21 = sub_100088B4C((void *)v51, v52, 1, v21);
        if (v35[2])
        {
LABEL_35:
          uint64_t v53 = v21[2];
          if ((uint64_t)(((unint64_t)v21[3] >> 1) - v53) < v29) {
            goto LABEL_80;
          }
          uint64_t v23 = (uint64_t)&v21[6 * v53 + 4];
          uint64_t v24 = (uint64_t)(v35 + 4);
          if ((unint64_t)(v35 + 4) < v23 + 48 * v29 && v23 < (unint64_t)&v35[6 * v29 + 4]) {
            goto LABEL_128;
          }
          sub_10000A38C(&qword_10035EDD0);
          swift_arrayInitWithCopy();
          if (v29)
          {
            uint64_t v55 = v21[2];
            BOOL v56 = __OFADD__(v55, v29);
            uint64_t v57 = v55 + v29;
            if (v56) {
              goto LABEL_81;
            }
            _OWORD v21[2] = v57;
          }
          goto LABEL_18;
        }
      }
      if (v29) {
        goto LABEL_79;
      }
LABEL_18:
      ++v41;
      swift_bridgeObjectRelease();
      if (v41 == v106)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_46;
      }
    }
  }
  swift_bridgeObjectRelease();
  long long v21 = _swiftEmptyArrayStorage;
LABEL_46:
  uint64_t v24 = swift_initStackObject();
  *(_OWORD *)(v24 + 16) = v105;
  LOWORD(v119) = 8193;
  uint64_t v120 = sub_10006C920;
  uint64_t v121 = 0;
  long long v122 = _swiftEmptyArrayStorage;
  unint64_t v123 = _swiftEmptyArrayStorage;
  uint64_t v124 = _swiftEmptyArrayStorage;
  uint64_t v58 = sub_100066BB0();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v58;
  swift_bridgeObjectRetain();
  sub_10005E1C0((uint64_t)sub_100071A14, v23, (uint64_t)v118);
  swift_bridgeObjectRelease();
  swift_release();
  long long v59 = v118[1];
  *(_OWORD *)(v24 + 32) = v118[0];
  *(_OWORD *)(v24 + 48) = v59;
  *(_OWORD *)(v24 + 64) = v118[2];
  uint64_t v35 = *(void **)(v24 + 16);
  if (v35)
  {
    uint64_t v109 = v21;
    swift_bridgeObjectRetain();
    *(void *)&long long v114 = v24;
    long long v21 = (uint64_t *)(v24 + 72);
    uint64_t v34 = _swiftEmptyArrayStorage;
    do
    {
      *(void *)&long long v115 = v35;
      uint64_t v24 = *(v21 - 1);
      uint64_t v23 = *v21;
      unint64_t v12 = *(v21 - 3);
      uint64_t v60 = *(v21 - 2);
      uint64_t v61 = *(v21 - 4);
      unint64_t v62 = v34;
      __int16 v63 = *((_WORD *)v21 - 20);
      int64_t v29 = swift_initStackObject();
      *(_WORD *)(v29 + 32) = v63;
      unint64_t v116 = v29 + 32;
      uint64_t v34 = v62;
      *(void *)(v29 + 40) = v61;
      *(void *)(v29 + 48) = v12;
      *(void *)(v29 + 56) = v60;
      *(void *)(v29 + 64) = v24;
      *(void *)(v29 + 72) = v23;
      unint64_t v64 = v62[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v65 = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!v65 || (unint64_t v66 = v62[3] >> 1, v66 <= v64))
      {
        uint64_t v34 = sub_100088B4C(v65, v64 + 1, 1, v62);
        unint64_t v66 = v34[3] >> 1;
      }
      unint64_t v67 = v34[2];
      int64_t v22 = v110;
      uint64_t v35 = (void *)v116;
      if (v66 <= v67) {
        goto LABEL_77;
      }
      uint64_t v23 = (uint64_t)&v34[6 * v67 + 4];
      if (v116 < (unint64_t)&v34[6 * v67 + 10] && v23 < (unint64_t)(v29 + 80)) {
        goto LABEL_128;
      }
      v21 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v34[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t v35 = (void *)(v115 - 1);
    }
    while ((void)v115 != 1);
    uint64_t v24 = v114;
    swift_bridgeObjectRelease();
    long long v21 = v109;
  }
  swift_bridgeObjectRelease();
  sub_10000A38C(&qword_10035F258);
  unint64_t v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = v104;
  *(void *)(v12 + 32) = v22;
  *(void *)&long long v114 = v12 + 32;
  *(void *)(v12 + 40) = v21;
  *(void *)(v12 + 48) = v34;
  int64_t v29 = v22[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v69 = sub_100088B4C(0, v29, 1, _swiftEmptyArrayStorage);
  long long v21 = v69;
  if (v22[2])
  {
    uint64_t v70 = v69[2];
    if ((uint64_t)(((unint64_t)v69[3] >> 1) - v70) < v29)
    {
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }
    uint64_t v71 = v69;
    unint64_t v72 = (unint64_t)&v69[6 * v70 + 4];
    if ((unint64_t)(v22 + 4) < v72 + 48 * v29 && v72 < (unint64_t)&v22[6 * v29 + 4]) {
      goto LABEL_128;
    }
    sub_10000A38C(&qword_10035EDD0);
    swift_arrayInitWithCopy();
    if (v29)
    {
      uint64_t v73 = v71[2];
      BOOL v56 = __OFADD__(v73, v29);
      uint64_t v74 = v73 + v29;
      if (v56)
      {
LABEL_125:
        __break(1u);
        goto LABEL_126;
      }
      v71[2] = v74;
    }
  }
  else if (v29)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  swift_bridgeObjectRelease();
  int64_t v29 = *(void *)(v12 + 40);
  uint64_t v24 = *(void *)(v29 + 16);
  uint64_t v35 = (void *)v21[2];
  uint64_t v23 = (uint64_t)v35 + v24;
  if (__OFADD__(v35, v24))
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  unint64_t v75 = v21[3];
  swift_bridgeObjectRetain();
  if (v23 <= (uint64_t)(v75 >> 1))
  {
    if (!v24) {
      goto LABEL_88;
    }
LABEL_70:
    uint64_t v76 = v21[2];
    if ((uint64_t)(((unint64_t)v21[3] >> 1) - v76) < v24)
    {
LABEL_123:
      __break(1u);
      goto LABEL_124;
    }
    unint64_t v77 = (unint64_t)&v21[6 * v76 + 4];
    if (v29 + 32 < v77 + 48 * v24 && v77 < v29 + 32 + 48 * v24) {
      goto LABEL_128;
    }
    sub_10000A38C(&qword_10035EDD0);
    swift_arrayInitWithCopy();
    if (v24)
    {
      uint64_t v78 = v21[2];
      BOOL v56 = __OFADD__(v78, v24);
      uint64_t v79 = v78 + v24;
      if (v56)
      {
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
      }
      _OWORD v21[2] = v79;
    }
    goto LABEL_89;
  }
LABEL_84:
  if ((uint64_t)v35 <= v23) {
    int64_t v80 = v23;
  }
  else {
    int64_t v80 = (int64_t)v35;
  }
  long long v21 = sub_100088B4C((void *)1, v80, 1, v21);
  if (*(void *)(v29 + 16)) {
    goto LABEL_70;
  }
LABEL_88:
  if (v24)
  {
    __break(1u);
    goto LABEL_99;
  }
LABEL_89:
  swift_bridgeObjectRelease();
  int64_t v29 = *(void *)(v12 + 48);
  uint64_t v24 = *(void *)(v29 + 16);
  uint64_t v35 = (void *)v21[2];
  uint64_t v23 = (uint64_t)v35 + v24;
  if (__OFADD__(v35, v24))
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  unint64_t v81 = v21[3];
  swift_bridgeObjectRetain();
  if (v23 <= (uint64_t)(v81 >> 1))
  {
    if (v24) {
      goto LABEL_92;
    }
LABEL_104:
    if (v24)
    {
LABEL_121:
      __break(1u);
      goto LABEL_122;
    }
    goto LABEL_105;
  }
LABEL_100:
  if ((uint64_t)v35 <= v23) {
    int64_t v86 = v23;
  }
  else {
    int64_t v86 = (int64_t)v35;
  }
  long long v21 = sub_100088B4C((void *)1, v86, 1, v21);
  if (!*(void *)(v29 + 16)) {
    goto LABEL_104;
  }
LABEL_92:
  uint64_t v82 = v21[2];
  if ((uint64_t)(((unint64_t)v21[3] >> 1) - v82) < v24)
  {
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
  unint64_t v83 = (unint64_t)&v21[6 * v82 + 4];
  if (v29 + 32 < v83 + 48 * v24 && v83 < v29 + 32 + 48 * v24)
  {
LABEL_128:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  sub_10000A38C(&qword_10035EDD0);
  swift_arrayInitWithCopy();
  if (v24)
  {
    uint64_t v84 = v21[2];
    BOOL v56 = __OFADD__(v84, v24);
    uint64_t v85 = v84 + v24;
    if (v56) {
      goto LABEL_127;
    }
    _OWORD v21[2] = v85;
  }
LABEL_105:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v87 = v21[2];
  if (v87)
  {
    uint64_t v113 = (_OWORD *)v12;
    swift_bridgeObjectRetain();
    __int16 v112 = v21;
    uint64_t v88 = v21 + 9;
    uint64_t v89 = _swiftEmptyArrayStorage;
    while (1)
    {
      *(void *)&long long v115 = v87;
      uint64_t v91 = *(v88 - 1);
      uint64_t v90 = *v88;
      uint64_t v93 = *(v88 - 3);
      uint64_t v92 = *(v88 - 2);
      uint64_t v94 = *(v88 - 4);
      __int16 v95 = *((_WORD *)v88 - 20);
      uint64_t v96 = swift_initStackObject();
      *(_WORD *)(v96 + 32) = v95;
      unint64_t v116 = v96 + 32;
      *(void *)(v96 + 40) = v94;
      *(void *)(v96 + 48) = v93;
      *(void *)(v96 + 56) = v92;
      *(void *)(v96 + 64) = v91;
      *(void *)(v96 + 72) = v90;
      unint64_t v97 = v89[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v98 = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!v98 || (unint64_t v99 = v89[3] >> 1, v99 <= v97))
      {
        uint64_t v89 = sub_100088B4C(v98, v97 + 1, 1, v89);
        unint64_t v99 = v89[3] >> 1;
      }
      unint64_t v100 = v89[2];
      if (v99 <= v100) {
        break;
      }
      if (v116 < (unint64_t)&v89[6 * v100 + 10] && (unint64_t)&v89[6 * v100 + 4] < v96 + 80) {
        goto LABEL_128;
      }
      v88 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v89[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t v87 = v115 - 1;
      if ((void)v115 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_119;
      }
    }
    __break(1u);
    goto LABEL_121;
  }
  uint64_t v89 = _swiftEmptyArrayStorage;
LABEL_119:
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10000A38C(&qword_10035F260);
  swift_arrayDestroy();
  return (uint64_t)v89;
}

uint64_t sub_1000694AC()
{
  uint64_t v178 = (void *)type metadata accessor for ExperienceEffect(0);
  *(void *)&long long v187 = *(v178 - 1);
  unint64_t v189 = v187;
  __chkstk_darwin(v178);
  uint64_t v1 = (char *)&v159 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_10000A38C(&qword_10035F278);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = __chkstk_darwin(v2 - 8);
  uint64_t v6 = (char *)&v159 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v159 - v7;
  uint64_t v184 = sub_10000A38C(&qword_10035EDC8);
  *(void *)&long long v188 = swift_initStackObject();
  long long v179 = xmmword_10028D430;
  *(_OWORD *)(v188 + 16) = xmmword_10028D430;
  *(void *)uint64_t v8 = 5;
  *(_OWORD *)(v8 + 8) = 0u;
  uint64_t v169 = v8 + 8;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  v8[56] = 66;
  uint64_t v9 = type metadata accessor for ExperienceEvent(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v186 = *(void *)(v9 - 8);
  uint64_t v10 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v186 + 56);
  uint64_t v176 = v9;
  uint64_t v166 = v10;
  uint64_t v167 = v186 + 56;
  v10((uint64_t)v8, 0, 1, v9);
  sub_10000D728((uint64_t)v8, (uint64_t)v6, &qword_10035F278);
  __int16 v196 = 16385;
  uint64_t v11 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  uint64_t v13 = v12 + v4;
  uint64_t v163 = v13 + 2;
  uint64_t v164 = v11 | 7;
  uint64_t v14 = swift_allocObject();
  uint64_t v165 = v12;
  uint64_t v170 = v6;
  sub_10001639C((uint64_t)v6, v14 + v12, &qword_10035F278);
  uint64_t v168 = v13;
  sub_10006DD54((uint64_t)&v196, v14 + v13);
  uint64_t v171 = v8;
  sub_10000D78C((uint64_t)v8, &qword_10035F278);
  __int16 v196 = 16385;
  v197 = sub_10006DDF0;
  uint64_t v198 = v14;
  v199 = _swiftEmptyArrayStorage;
  __int16 v200 = _swiftEmptyArrayStorage;
  v201 = _swiftEmptyArrayStorage;
  *((void *)v1 + 1) = 0;
  *((void *)v1 + 2) = 0;
  *(void *)uint64_t v1 = 0;
  v1[24] = 4;
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = sub_10000A38C(&qword_10035F270);
  uint64_t v16 = *(unsigned __int8 *)(v189 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v173 = v17 + *(void *)(v187 + 72);
  uint64_t v174 = v15;
  uint64_t v172 = v16 | 7;
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = v179;
  uint64_t v175 = v17;
  sub_10006DDF4((uint64_t)v1, v18 + v17, type metadata accessor for ExperienceEffect);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  swift_bridgeObjectRetain();
  sub_10005E1C0((uint64_t)sub_100071A14, v19, (uint64_t)v192);
  uint64_t v20 = v188;
  swift_bridgeObjectRelease();
  swift_release();
  long long v21 = v192[1];
  *(_OWORD *)(v20 + 32) = v192[0];
  *(_OWORD *)(v20 + 48) = v21;
  *(_OWORD *)(v20 + 64) = v192[2];
  uint64_t v177 = v1;
  sub_10006DE5C((uint64_t)v1, type metadata accessor for ExperienceEffect);
  swift_release();
  unint64_t v22 = *(void *)(v20 + 16);
  if (v22)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = (void *)(v20 + 72);
    uint64_t v24 = _swiftEmptyArrayStorage;
    do
    {
      unint64_t v189 = v22;
      uint64_t v26 = *(v23 - 1);
      uint64_t v25 = *v23;
      uint64_t v28 = *(v23 - 3);
      uint64_t v27 = *(v23 - 2);
      int64_t v29 = v24;
      uint64_t v30 = *(v23 - 4);
      __int16 v31 = *((_WORD *)v23 - 20);
      uint64_t inited = swift_initStackObject();
      *(_WORD *)(inited + 32) = v31;
      *(void *)(inited + 40) = v30;
      *(void *)(inited + 48) = v28;
      *(void *)(inited + 56) = v27;
      *(void *)(inited + 64) = v26;
      *(void *)(inited + 72) = v25;
      unint64_t v33 = v29[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && (unint64_t v35 = v29[3] >> 1, v35 > v33))
      {
        uint64_t v24 = v29;
      }
      else
      {
        uint64_t v24 = sub_100088B4C(isUniquelyReferenced_nonNull_native, v33 + 1, 1, v29);
        unint64_t v35 = v24[3] >> 1;
      }
      unint64_t v36 = v24[2];
      if (v35 <= v36) {
        goto LABEL_130;
      }
      if (inited + 32 < (unint64_t)&v24[6 * v36 + 10] && (unint64_t)&v24[6 * v36 + 4] < inited + 80)
      {
LABEL_143:
        uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      v23 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v24[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      unint64_t v22 = v189 - 1;
    }
    while (v189 != 1);
    __int16 v160 = v24;
    swift_bridgeObjectRelease();
  }
  else
  {
    __int16 v160 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v161 = sub_10000A38C(&qword_10035F268);
  uint64_t v38 = swift_initStackObject();
  *(_OWORD *)(v38 + 16) = v179;
  sub_10000A38C(&qword_10035F248);
  uint64_t v39 = *(void *)(v186 + 72);
  unint64_t v40 = (*(unsigned __int8 *)(v186 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v186 + 80);
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_10028FC10;
  unint64_t v42 = v41 + v40;
  *(_OWORD *)unint64_t v42 = 0u;
  *(_OWORD *)(v42 + 16) = 0u;
  *(_OWORD *)(v42 + 32) = 0u;
  *(void *)(v42 + 48) = 0;
  *(unsigned char *)(v42 + 56) = 0x80;
  swift_storeEnumTagMultiPayload();
  uint64_t v43 = v42 + v39;
  *(void *)uint64_t v43 = 3;
  *(_OWORD *)(v43 + 8) = 0u;
  *(_OWORD *)(v43 + 24) = 0u;
  *(_OWORD *)(v43 + 40) = 0u;
  *(unsigned char *)(v43 + 56) = 66;
  swift_storeEnumTagMultiPayload();
  LOWORD(v195[0]) = 16385;
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v41;
  sub_10006DD54((uint64_t)v195, v44 + 24);
  uint64_t v45 = (uint64_t)v177;
  _OWORD *v177 = xmmword_10028F480;
  *(unsigned char *)(v45 + 16) = 0;
  swift_storeEnumTagMultiPayload();
  v195[0] = &off_10031D488;
  v195[1] = sub_10006DDB0;
  v195[2] = v44;
  v195[3] = _swiftEmptyArrayStorage;
  v195[4] = _swiftEmptyArrayStorage;
  v195[5] = _swiftEmptyArrayStorage;
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = v179;
  sub_10006DDF4(v45, v46 + v175, type metadata accessor for ExperienceEffect);
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = v46;
  swift_bridgeObjectRetain();
  sub_10005E300((uint64_t)sub_100071A14, v47, v191);
  swift_bridgeObjectRelease();
  swift_release();
  __n128 v48 = v191[1];
  *(__n128 *)(v38 + 32) = v191[0];
  *(__n128 *)(v38 + 48) = v48;
  *(__n128 *)(v38 + 64) = v191[2];
  sub_10006DE5C(v45, type metadata accessor for ExperienceEffect);
  swift_release();
  long long v181 = *(void **)(v38 + 16);
  if (v181)
  {
    uint64_t v180 = v38 + 32;
    uint64_t v159 = v38;
    swift_bridgeObjectRetain();
    unint64_t v49 = 0;
    uint64_t v50 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v51 = v180 + 48 * (void)v49;
      uint64_t v52 = *(void *)v51;
      int64_t v53 = *(void *)(*(void *)v51 + 16);
      if (v53)
      {
        long long v182 = v49;
        unint64_t v183 = v50;
        long long v54 = *(_OWORD *)(v51 + 8);
        long long v187 = *(_OWORD *)(v51 + 24);
        long long v188 = v54;
        uint64_t v55 = *(void *)(v51 + 40);
        v194[0] = _swiftEmptyArrayStorage;
        unint64_t v189 = *((void *)&v187 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v186 = *((void *)&v188 + 1);
        swift_retain();
        uint64_t v185 = (void *)v187;
        swift_bridgeObjectRetain();
        sub_1000B549C(0, v53, 0);
        uint64_t v56 = 0;
        uint64_t v57 = (void *)v194[0];
        do
        {
          uint64_t v58 = v52;
          __int16 v59 = *(_WORD *)(v52 + 2 * v56 + 32);
          v194[0] = v57;
          unint64_t v61 = v57[2];
          unint64_t v60 = v57[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          if (v61 >= v60 >> 1)
          {
            sub_1000B549C(v60 > 1, v61 + 1, 1);
            uint64_t v57 = (void *)v194[0];
          }
          v57[2] = v61 + 1;
          unint64_t v62 = &v57[6 * v61];
          *((_WORD *)v62 + 16) = v59;
          ++v56;
          *(_OWORD *)(v62 + 5) = v188;
          *(_OWORD *)(v62 + 7) = v187;
          v62[9] = v55;
          uint64_t v52 = v58;
        }
        while (v53 != v56);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v49 = v182;
        uint64_t v50 = v183;
      }
      else
      {
        uint64_t v57 = _swiftEmptyArrayStorage;
      }
      uint64_t v63 = v57[2];
      int64_t v64 = v50[2];
      int64_t v65 = v64 + v63;
      if (__OFADD__(v64, v63)) {
        goto LABEL_132;
      }
      uint64_t v66 = swift_isUniquelyReferenced_nonNull_native();
      if ((v66 & 1) != 0 && v65 <= v50[3] >> 1)
      {
        if (v57[2]) {
          goto LABEL_36;
        }
      }
      else
      {
        if (v64 <= v65) {
          int64_t v67 = v64 + v63;
        }
        else {
          int64_t v67 = v64;
        }
        uint64_t v50 = sub_100088B4C((void *)v66, v67, 1, v50);
        if (v57[2])
        {
LABEL_36:
          uint64_t v68 = v50[2];
          if ((v50[3] >> 1) - v68 < v63) {
            goto LABEL_138;
          }
          unint64_t v69 = (unint64_t)&v50[6 * v68 + 4];
          if ((unint64_t)(v57 + 4) < v69 + 48 * v63 && v69 < (unint64_t)&v57[6 * v63 + 4]) {
            goto LABEL_143;
          }
          sub_10000A38C(&qword_10035EDD0);
          swift_arrayInitWithCopy();
          if (v63)
          {
            uint64_t v71 = v50[2];
            BOOL v72 = __OFADD__(v71, v63);
            uint64_t v73 = v71 + v63;
            if (v72) {
              goto LABEL_141;
            }
            v50[2] = v73;
          }
          goto LABEL_19;
        }
      }
      if (v63) {
        goto LABEL_133;
      }
LABEL_19:
      unint64_t v49 = (void *)((char *)v49 + 1);
      swift_bridgeObjectRelease();
      if (v49 == v181)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_47;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v50 = _swiftEmptyArrayStorage;
LABEL_47:
  uint64_t v74 = (_OWORD *)swift_initStackObject();
  v74[1] = v179;
  uint64_t v75 = (uint64_t)v171;
  *uint64_t v171 = 1;
  uint64_t v76 = v169;
  *((_OWORD *)v169 + 1) = 0u;
  *((_OWORD *)v76 + 2) = 0u;
  *(_OWORD *)uint64_t v76 = 0u;
  *(unsigned char *)(v75 + 56) = 66;
  uint64_t v77 = v176;
  swift_storeEnumTagMultiPayload();
  v166(v75, 0, 1, v77);
  uint64_t v78 = (uint64_t)v170;
  sub_10000D728(v75, (uint64_t)v170, &qword_10035F278);
  LOWORD(v194[0]) = 16385;
  uint64_t v79 = swift_allocObject();
  sub_10001639C(v78, v79 + v165, &qword_10035F278);
  sub_10006DD54((uint64_t)v194, v79 + v168);
  sub_10000D78C(v75, &qword_10035F278);
  LOWORD(v194[0]) = 16385;
  v194[1] = sub_10006DDF0;
  v194[2] = v79;
  v194[3] = _swiftEmptyArrayStorage;
  v194[4] = _swiftEmptyArrayStorage;
  v194[5] = _swiftEmptyArrayStorage;
  uint64_t v80 = (uint64_t)v177;
  swift_storeEnumTagMultiPayload();
  uint64_t v81 = swift_allocObject();
  *(_OWORD *)(v81 + 16) = v179;
  sub_10006DDF4(v80, v81 + v175, type metadata accessor for ExperienceEffect);
  uint64_t v82 = swift_allocObject();
  *(void *)(v82 + 16) = v81;
  swift_bridgeObjectRetain();
  sub_10005E1C0((uint64_t)sub_100071A14, v82, (uint64_t)v193);
  swift_bridgeObjectRelease();
  swift_release();
  long long v83 = v193[1];
  v74[2] = v193[0];
  v74[3] = v83;
  v74[4] = v193[2];
  sub_10006DE5C(v80, type metadata accessor for ExperienceEffect);
  swift_release();
  unint64_t v84 = *((void *)v74 + 2);
  unint64_t v183 = v50;
  if (v84)
  {
    swift_bridgeObjectRetain();
    *(void *)&long long v188 = v74;
    uint64_t v85 = (void *)v74 + 9;
    int64_t v86 = _swiftEmptyArrayStorage;
    do
    {
      unint64_t v189 = v84;
      uint64_t v88 = *(v85 - 1);
      uint64_t v87 = *v85;
      uint64_t v90 = *(v85 - 3);
      uint64_t v89 = *(v85 - 2);
      uint64_t v91 = *(v85 - 4);
      __int16 v92 = *((_WORD *)v85 - 20);
      uint64_t v93 = swift_initStackObject();
      *(_WORD *)(v93 + 32) = v92;
      *(void *)(v93 + 40) = v91;
      *(void *)(v93 + 48) = v90;
      *(void *)(v93 + 56) = v89;
      *(void *)(v93 + 64) = v88;
      *(void *)(v93 + 72) = v87;
      unint64_t v94 = v86[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __int16 v95 = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!v95 || (unint64_t v96 = v86[3] >> 1, v96 <= v94))
      {
        int64_t v86 = sub_100088B4C(v95, v94 + 1, 1, v86);
        unint64_t v96 = v86[3] >> 1;
      }
      unint64_t v97 = v86[2];
      if (v96 <= v97) {
        goto LABEL_131;
      }
      if (v93 + 32 < (unint64_t)&v86[6 * v97 + 10] && (unint64_t)&v86[6 * v97 + 4] < v93 + 80) {
        goto LABEL_143;
      }
      v85 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v86[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      unint64_t v84 = v189 - 1;
    }
    while (v189 != 1);
    uint64_t v178 = v86;
    swift_bridgeObjectRelease();
    uint64_t v50 = v183;
  }
  else
  {
    uint64_t v178 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v99 = swift_initStackObject();
  *(_OWORD *)(v99 + 16) = v179;
  uint64_t v100 = sub_10006D27C();
  uint64_t v101 = (void *)swift_allocObject();
  v101[2] = v100;
  v101[3] = sub_10006DEC0;
  v101[4] = v162;
  *(void *)(v99 + 32) = &off_10031D4B0;
  uint64_t v180 = v99 + 32;
  *(void *)(v99 + 40) = sub_10006DEC8;
  *(void *)(v99 + 48) = v101;
  *(void *)(v99 + 56) = _swiftEmptyArrayStorage;
  *(void *)(v99 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v99 + 72) = _swiftEmptyArrayStorage;
  uint64_t v102 = *(void *)(v99 + 16);
  swift_retain();
  *(void *)&long long v179 = v102;
  if (v102)
  {
    uint64_t v177 = (_OWORD *)v99;
    swift_bridgeObjectRetain();
    uint64_t v103 = 0;
    long long v104 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v105 = v180 + 48 * v103;
      uint64_t v106 = *(void *)v105;
      int64_t v107 = *(void *)(*(void *)v105 + 16);
      if (v107)
      {
        long long v181 = (void *)v103;
        long long v182 = v104;
        long long v108 = *(_OWORD *)(v105 + 8);
        long long v187 = *(_OWORD *)(v105 + 24);
        long long v188 = v108;
        uint64_t v109 = *(void *)(v105 + 40);
        unint64_t v189 = *((void *)&v187 + 1);
        uint64_t v190 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v186 = *((void *)&v188 + 1);
        swift_retain();
        uint64_t v185 = (void *)v187;
        swift_bridgeObjectRetain();
        sub_1000B549C(0, v107, 0);
        uint64_t v110 = 0;
        uint64_t v111 = v190;
        do
        {
          int64_t v112 = v107;
          __int16 v113 = *(_WORD *)(v106 + 2 * v110 + 32);
          uint64_t v190 = v111;
          unint64_t v114 = v111[2];
          unint64_t v115 = v111[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          if (v114 >= v115 >> 1)
          {
            sub_1000B549C(v115 > 1, v114 + 1, 1);
            uint64_t v111 = v190;
          }
          v111[2] = v114 + 1;
          unint64_t v116 = &v111[6 * v114];
          *((_WORD *)v116 + 16) = v113;
          ++v110;
          *(_OWORD *)(v116 + 5) = v188;
          *(_OWORD *)(v116 + 7) = v187;
          v116[9] = v109;
          int64_t v107 = v112;
        }
        while (v112 != v110);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        long long v104 = v182;
        uint64_t v50 = v183;
        uint64_t v103 = (uint64_t)v181;
      }
      else
      {
        uint64_t v111 = _swiftEmptyArrayStorage;
      }
      uint64_t v117 = v111[2];
      int64_t v118 = v104[2];
      int64_t v119 = v118 + v117;
      if (__OFADD__(v118, v117)) {
        goto LABEL_134;
      }
      uint64_t v120 = swift_isUniquelyReferenced_nonNull_native();
      if ((v120 & 1) != 0 && v119 <= v104[3] >> 1)
      {
        if (v111[2]) {
          goto LABEL_81;
        }
      }
      else
      {
        if (v118 <= v119) {
          int64_t v121 = v118 + v117;
        }
        else {
          int64_t v121 = v118;
        }
        long long v104 = sub_100088B4C((void *)v120, v121, 1, v104);
        if (v111[2])
        {
LABEL_81:
          uint64_t v122 = v104[2];
          if ((v104[3] >> 1) - v122 < v117) {
            goto LABEL_139;
          }
          unint64_t v123 = (unint64_t)&v104[6 * v122 + 4];
          if ((unint64_t)(v111 + 4) < v123 + 48 * v117 && v123 < (unint64_t)&v111[6 * v117 + 4]) {
            goto LABEL_143;
          }
          sub_10000A38C(&qword_10035EDD0);
          swift_arrayInitWithCopy();
          if (v117)
          {
            uint64_t v125 = v104[2];
            BOOL v72 = __OFADD__(v125, v117);
            uint64_t v126 = v125 + v117;
            if (v72) {
              goto LABEL_142;
            }
            v104[2] = v126;
          }
          goto LABEL_64;
        }
      }
      if (v117) {
        goto LABEL_135;
      }
LABEL_64:
      ++v103;
      swift_bridgeObjectRelease();
      if (v103 == (void)v179)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_92;
      }
    }
  }
  swift_bridgeObjectRelease();
  long long v104 = _swiftEmptyArrayStorage;
LABEL_92:
  sub_10000A38C(&qword_10035F258);
  uint64_t v127 = swift_initStackObject();
  *(_OWORD *)(v127 + 16) = xmmword_100291180;
  *(void *)(v127 + 32) = v160;
  *(void *)&long long v187 = v127 + 32;
  uint64_t v128 = v178;
  *(void *)(v127 + 40) = v50;
  *(void *)(v127 + 48) = v128;
  *(void *)(v127 + 56) = v104;
  swift_bridgeObjectRetain();
  uint64_t v129 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32; i != 64; i += 8)
  {
    uint64_t v131 = *(void *)(v127 + i);
    uint64_t v132 = *(void *)(v131 + 16);
    int64_t v133 = v129[2];
    int64_t v134 = v133 + v132;
    if (__OFADD__(v133, v132))
    {
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
    }
    swift_bridgeObjectRetain();
    unint64_t v135 = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (v135 && v134 <= v129[3] >> 1)
    {
      if (!*(void *)(v131 + 16)) {
        goto LABEL_93;
      }
    }
    else
    {
      if (v133 <= v134) {
        int64_t v136 = v133 + v132;
      }
      else {
        int64_t v136 = v133;
      }
      uint64_t v129 = sub_100088B4C(v135, v136, 1, v129);
      if (!*(void *)(v131 + 16))
      {
LABEL_93:
        if (v132) {
          goto LABEL_129;
        }
        goto LABEL_94;
      }
    }
    uint64_t v137 = v129[2];
    if ((v129[3] >> 1) - v137 < v132) {
      goto LABEL_136;
    }
    unint64_t v138 = (unint64_t)&v129[6 * v137 + 4];
    if (v131 + 32 < v138 + 48 * v132 && v138 < v131 + 32 + 48 * v132) {
      goto LABEL_143;
    }
    sub_10000A38C(&qword_10035EDD0);
    swift_arrayInitWithCopy();
    if (v132)
    {
      uint64_t v140 = v129[2];
      BOOL v72 = __OFADD__(v140, v132);
      uint64_t v141 = v140 + v132;
      if (v72) {
        goto LABEL_140;
      }
      v129[2] = v141;
    }
LABEL_94:
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v142 = v129[2];
  if (v142)
  {
    uint64_t v186 = v127;
    swift_bridgeObjectRetain();
    uint64_t v185 = v129;
    int64_t v143 = v129 + 9;
    uint64_t v144 = _swiftEmptyArrayStorage;
    do
    {
      *(void *)&long long v188 = v142;
      uint64_t v146 = *(v143 - 1);
      uint64_t v145 = *v143;
      uint64_t v148 = *(v143 - 3);
      uint64_t v147 = *(v143 - 2);
      uint64_t v149 = *(v143 - 4);
      uint64_t v150 = v144;
      __int16 v151 = *((_WORD *)v143 - 20);
      uint64_t v152 = swift_initStackObject();
      *(_WORD *)(v152 + 32) = v151;
      unint64_t v189 = v152 + 32;
      uint64_t v144 = v150;
      *(void *)(v152 + 40) = v149;
      *(void *)(v152 + 48) = v148;
      *(void *)(v152 + 56) = v147;
      *(void *)(v152 + 64) = v146;
      *(void *)(v152 + 72) = v145;
      unint64_t v153 = v150[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v154 = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!v154 || (unint64_t v155 = v150[3] >> 1, v155 <= v153))
      {
        uint64_t v144 = sub_100088B4C(v154, v153 + 1, 1, v150);
        unint64_t v155 = v144[3] >> 1;
      }
      unint64_t v156 = v144[2];
      if (v155 <= v156) {
        goto LABEL_137;
      }
      if (v189 < (unint64_t)&v144[6 * v156 + 10] && (unint64_t)&v144[6 * v156 + 4] < v152 + 80) {
        goto LABEL_143;
      }
      v143 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v144[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t v142 = v188 - 1;
    }
    while ((void)v188 != 1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v144 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10000A38C(&qword_10035F260);
  swift_arrayDestroy();
  return (uint64_t)v144;
}

uint64_t sub_10006A888()
{
  sub_10000A38C(&qword_10035F268);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028D430;
  uint64_t v1 = sub_10006CF70();
  LOWORD(v102[0]) = 16385;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  sub_10006DD54((uint64_t)v102, v2 + 24);
  sub_10000A38C(&qword_10035F270);
  uint64_t v3 = *(void *)(type metadata accessor for ExperienceEffect(0) - 8);
  int64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10028FC10;
  *(unsigned char *)(v6 + v5) = 3;
  swift_storeEnumTagMultiPayload();
  unint64_t v7 = v6 + v5 + v4;
  *(_OWORD *)unint64_t v7 = xmmword_10028F480;
  *(unsigned char *)(v7 + 16) = 0;
  swift_storeEnumTagMultiPayload();
  v102[0] = &off_10031D438;
  v102[1] = sub_10006DDB0;
  v102[2] = v2;
  uint64_t v8 = _swiftEmptyArrayStorage;
  v102[3] = _swiftEmptyArrayStorage;
  v102[4] = _swiftEmptyArrayStorage;
  v102[5] = _swiftEmptyArrayStorage;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v6;
  swift_bridgeObjectRetain();
  sub_10005E300((uint64_t)sub_100071A14, v9, v101);
  swift_bridgeObjectRelease();
  swift_release();
  __n128 v10 = v101[1];
  *(__n128 *)(inited + 32) = v101[0];
  *(__n128 *)(inited + 48) = v10;
  *(__n128 *)(inited + 64) = v101[2];
  swift_release();
  uint64_t v90 = *(void *)(inited + 16);
  if (v90)
  {
    uint64_t v88 = inited + 32;
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    uint64_t v12 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v13 = v88 + 48 * v11;
      uint64_t v14 = *(void *)v13;
      int64_t v15 = *(void *)(*(void *)v13 + 16);
      if (v15)
      {
        uint64_t v92 = v11;
        unint64_t v94 = v12;
        long long v96 = *(_OWORD *)(v13 + 24);
        long long v98 = *(_OWORD *)(v13 + 8);
        uint64_t v16 = *(void *)(v13 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        sub_1000B549C(0, v15, 0);
        uint64_t v17 = 0;
        uint64_t v18 = _swiftEmptyArrayStorage;
        do
        {
          uint64_t v19 = v14;
          __int16 v20 = *(_WORD *)(v14 + 2 * v17 + 32);
          unint64_t v21 = _swiftEmptyArrayStorage[2];
          unint64_t v22 = _swiftEmptyArrayStorage[3];
          int64_t v4 = v21 + 1;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          if (v21 >= v22 >> 1) {
            sub_1000B549C(v22 > 1, v21 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v4;
          uint64_t v23 = &_swiftEmptyArrayStorage[6 * v21];
          *((_WORD *)v23 + 16) = v20;
          ++v17;
          *(_OWORD *)(v23 + 5) = v98;
          *(_OWORD *)(v23 + 7) = v96;
          v23[9] = v16;
          uint64_t v14 = v19;
        }
        while (v15 != v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v11 = v92;
        uint64_t v12 = v94;
        uint64_t v8 = _swiftEmptyArrayStorage;
      }
      else
      {
        uint64_t v18 = _swiftEmptyArrayStorage;
      }
      uint64_t v6 = _swiftEmptyArrayStorage[2];
      uint64_t v24 = v12[2];
      uint64_t v25 = v24 + v6;
      if (__OFADD__(v24, v6))
      {
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v25 <= v12[3] >> 1)
      {
        if (_swiftEmptyArrayStorage[2]) {
          goto LABEL_21;
        }
      }
      else
      {
        if (v24 <= v25) {
          int64_t v27 = v24 + v6;
        }
        else {
          int64_t v27 = v24;
        }
        uint64_t v12 = sub_100088B4C((void *)isUniquelyReferenced_nonNull_native, v27, 1, v12);
        if (_swiftEmptyArrayStorage[2])
        {
LABEL_21:
          uint64_t v28 = v12[2];
          if ((v12[3] >> 1) - v28 < v6) {
            goto LABEL_87;
          }
          int64_t v29 = &v12[6 * v28 + 4];
          int64_t v4 = (int64_t)&_swiftEmptyArrayStorage[4];
          if (&_swiftEmptyArrayStorage[4] < &v29[6 * v6] && v29 < &_swiftEmptyArrayStorage[6 * v6 + 4]) {
            goto LABEL_119;
          }
          sub_10000A38C(&qword_10035EDD0);
          swift_arrayInitWithCopy();
          if (v6)
          {
            uint64_t v31 = v12[2];
            BOOL v32 = __OFADD__(v31, v6);
            uint64_t v33 = v31 + v6;
            if (v32) {
              goto LABEL_89;
            }
            v12[2] = v33;
          }
          goto LABEL_4;
        }
      }
      if (v6) {
        goto LABEL_84;
      }
LABEL_4:
      ++v11;
      swift_bridgeObjectRelease();
      if (v11 == v90)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_32;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_32:
  uint64_t v24 = swift_initStackObject();
  *(_OWORD *)(v24 + 16) = xmmword_10028D430;
  uint64_t v34 = sub_10006D27C();
  unint64_t v35 = (void *)swift_allocObject();
  _OWORD v35[2] = v34;
  v35[3] = sub_10006DEC0;
  v35[4] = v86;
  *(void *)(v24 + 32) = &off_10031D460;
  uint64_t v89 = v24 + 32;
  *(void *)(v24 + 40) = sub_10006DEC8;
  *(void *)(v24 + 48) = v35;
  *(void *)(v24 + 56) = _swiftEmptyArrayStorage;
  *(void *)(v24 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v24 + 72) = _swiftEmptyArrayStorage;
  uint64_t v18 = *(void **)(v24 + 16);
  swift_retain();
  uint64_t v87 = v18;
  if (v18)
  {
    swift_bridgeObjectRetain();
    unint64_t v36 = 0;
    int64_t v4 = (int64_t)_swiftEmptyArrayStorage;
    __int16 v95 = v12;
    while (1)
    {
      uint64_t v37 = v89 + 48 * (void)v36;
      uint64_t v38 = *(void *)v37;
      int64_t v39 = *(void *)(*(void *)v37 + 16);
      if (v39)
      {
        uint64_t v91 = v36;
        int64_t v93 = v4;
        long long v97 = *(_OWORD *)(v37 + 24);
        long long v99 = *(_OWORD *)(v37 + 8);
        uint64_t v40 = *(void *)(v37 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        int64_t v41 = v39;
        sub_1000B549C(0, v39, 0);
        uint64_t v42 = 0;
        uint64_t v18 = _swiftEmptyArrayStorage;
        do
        {
          __int16 v43 = *(_WORD *)(v38 + 2 * v42 + 32);
          unint64_t v44 = _swiftEmptyArrayStorage[2];
          unint64_t v45 = _swiftEmptyArrayStorage[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          if (v44 >= v45 >> 1) {
            sub_1000B549C(v45 > 1, v44 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v44 + 1;
          uint64_t v46 = &_swiftEmptyArrayStorage[6 * v44];
          *((_WORD *)v46 + 16) = v43;
          ++v42;
          *(_OWORD *)(v46 + 5) = v99;
          *(_OWORD *)(v46 + 7) = v97;
          v46[9] = v40;
        }
        while (v41 != v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        int64_t v4 = v93;
        uint64_t v12 = v95;
        uint64_t v8 = _swiftEmptyArrayStorage;
        unint64_t v36 = v91;
      }
      else
      {
        uint64_t v18 = _swiftEmptyArrayStorage;
      }
      uint64_t v6 = _swiftEmptyArrayStorage[2];
      uint64_t v24 = *(void *)(v4 + 16);
      uint64_t v47 = v24 + v6;
      if (__OFADD__(v24, v6)) {
        goto LABEL_85;
      }
      uint64_t v48 = swift_isUniquelyReferenced_nonNull_native();
      if ((v48 & 1) != 0 && v47 <= *(void *)(v4 + 24) >> 1)
      {
        if (_swiftEmptyArrayStorage[2]) {
          goto LABEL_52;
        }
      }
      else
      {
        if (v24 <= v47) {
          int64_t v49 = v24 + v6;
        }
        else {
          int64_t v49 = v24;
        }
        int64_t v4 = (int64_t)sub_100088B4C((void *)v48, v49, 1, (void *)v4);
        if (_swiftEmptyArrayStorage[2])
        {
LABEL_52:
          uint64_t v50 = *(void *)(v4 + 16);
          if ((*(void *)(v4 + 24) >> 1) - v50 < v6) {
            goto LABEL_88;
          }
          unint64_t v51 = v4 + 48 * v50 + 32;
          if ((unint64_t)&_swiftEmptyArrayStorage[4] < v51 + 48 * v6
            && v51 < (unint64_t)&_swiftEmptyArrayStorage[6 * v6 + 4])
          {
            goto LABEL_119;
          }
          sub_10000A38C(&qword_10035EDD0);
          swift_arrayInitWithCopy();
          uint64_t v8 = _swiftEmptyArrayStorage;
          if (v6)
          {
            uint64_t v53 = *(void *)(v4 + 16);
            BOOL v32 = __OFADD__(v53, v6);
            uint64_t v54 = v53 + v6;
            if (v32) {
              goto LABEL_90;
            }
            *(void *)(v4 + 16) = v54;
          }
          goto LABEL_35;
        }
      }
      if (v6) {
        goto LABEL_86;
      }
LABEL_35:
      unint64_t v36 = (void *)((char *)v36 + 1);
      swift_bridgeObjectRelease();
      if (v36 == v87)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_63;
      }
    }
  }
  swift_bridgeObjectRelease();
  int64_t v4 = (int64_t)_swiftEmptyArrayStorage;
LABEL_63:
  sub_10000A38C(&qword_10035F258);
  uint64_t v55 = swift_initStackObject();
  *(_OWORD *)(v55 + 16) = xmmword_10028FC10;
  *(void *)(v55 + 32) = v12;
  *(void *)(v55 + 40) = v4;
  int64_t v4 = v12[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v56 = sub_100088B4C(0, v4, 1, _swiftEmptyArrayStorage);
  uint64_t v8 = v56;
  if (v12[2])
  {
    uint64_t v57 = v56[2];
    if ((v56[3] >> 1) - v57 < v4)
    {
LABEL_115:
      __break(1u);
      goto LABEL_116;
    }
    uint64_t v58 = v56;
    unint64_t v59 = (unint64_t)&v56[6 * v57 + 4];
    if ((unint64_t)(v12 + 4) < v59 + 48 * v4 && v59 < (unint64_t)&v12[6 * v4 + 4]) {
      goto LABEL_119;
    }
    sub_10000A38C(&qword_10035EDD0);
    swift_arrayInitWithCopy();
    uint64_t v8 = v58;
    if (v4)
    {
      uint64_t v61 = v58[2];
      BOOL v32 = __OFADD__(v61, v4);
      uint64_t v62 = v61 + v4;
      if (v32)
      {
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
      }
      v58[2] = v62;
    }
  }
  else if (v4)
  {
    goto LABEL_91;
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v55 + 40);
  int64_t v4 = *(void *)(v24 + 16);
  uint64_t v18 = (void *)v8[2];
  uint64_t v6 = (uint64_t)v18 + v4;
  if (__OFADD__(v18, v4)) {
    goto LABEL_92;
  }
  unint64_t v63 = v8[3];
  swift_bridgeObjectRetain();
  if (v6 > (uint64_t)(v63 >> 1))
  {
LABEL_93:
    if ((uint64_t)v18 <= v6) {
      int64_t v69 = v6;
    }
    else {
      int64_t v69 = (int64_t)v18;
    }
    uint64_t v8 = sub_100088B4C((void *)1, v69, 1, v8);
    if (*(void *)(v24 + 16)) {
      goto LABEL_77;
    }
  }
  else if (v4)
  {
LABEL_77:
    uint64_t v64 = v8[2];
    if ((v8[3] >> 1) - v64 < v4)
    {
LABEL_116:
      __break(1u);
      goto LABEL_117;
    }
    int64_t v65 = v8;
    unint64_t v66 = (unint64_t)&v8[6 * v64 + 4];
    if (v24 + 32 < v66 + 48 * v4 && v66 < v24 + 32 + 48 * v4)
    {
LABEL_119:
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    sub_10000A38C(&qword_10035EDD0);
    swift_arrayInitWithCopy();
    uint64_t v8 = v65;
    if (v4)
    {
      uint64_t v67 = v65[2];
      BOOL v32 = __OFADD__(v67, v4);
      uint64_t v68 = v67 + v4;
      if (v32) {
        goto LABEL_118;
      }
      v65[2] = v68;
    }
    goto LABEL_98;
  }
  if (v4)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
LABEL_98:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v70 = v8[2];
  if (v70)
  {
    swift_bridgeObjectRetain();
    uint64_t v71 = _swiftEmptyArrayStorage;
    BOOL v72 = v8 + 9;
    while (1)
    {
      uint64_t v100 = v70;
      uint64_t v74 = *(v72 - 1);
      uint64_t v73 = *v72;
      uint64_t v76 = *(v72 - 3);
      uint64_t v75 = *(v72 - 2);
      uint64_t v77 = *(v72 - 4);
      __int16 v78 = *((_WORD *)v72 - 20);
      sub_10000A38C(&qword_10035EDC8);
      uint64_t v79 = swift_initStackObject();
      *(_WORD *)(v79 + 32) = v78;
      *(void *)(v79 + 40) = v77;
      *(void *)(v79 + 48) = v76;
      *(void *)(v79 + 56) = v75;
      *(void *)(v79 + 64) = v74;
      *(void *)(v79 + 72) = v73;
      unint64_t v80 = v71[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v81 = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!v81 || (unint64_t v82 = v71[3] >> 1, v82 <= v80))
      {
        uint64_t v71 = sub_100088B4C(v81, v80 + 1, 1, v71);
        unint64_t v82 = v71[3] >> 1;
      }
      unint64_t v83 = v71[2];
      if (v82 <= v83) {
        break;
      }
      if (v79 + 32 < (unint64_t)&v71[6 * v83 + 10] && (unint64_t)&v71[6 * v83 + 4] < v79 + 80) {
        goto LABEL_119;
      }
      v72 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v71[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t v70 = v100 - 1;
      if (v100 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_112;
      }
    }
    __break(1u);
    goto LABEL_114;
  }
  uint64_t v71 = _swiftEmptyArrayStorage;
LABEL_112:
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10000A38C(&qword_10035F260);
  swift_arrayDestroy();
  return (uint64_t)v71;
}

uint64_t sub_10006B470(int a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ExperienceEffect(0);
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v72 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v69 = (uint64_t)&v61 - v9;
  uint64_t v65 = sub_10000A38C(&qword_10035F280);
  uint64_t v67 = *(char **)(v65 - 8);
  uint64_t v10 = __chkstk_darwin(v65);
  uint64_t v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  int64_t v15 = (char *)&v61 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v61 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v61 - v17);
  __chkstk_darwin(v16);
  uint64_t v68 = (uint64_t)&v61 - v18;
  unint64_t v73 = 0;
  unint64_t v74 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  unint64_t v73 = 0xD000000000000038;
  unint64_t v74 = 0x80000001002B54C0;
  LODWORD(v66) = a1;
  if (a1) {
    uint64_t v19 = 1702195828;
  }
  else {
    uint64_t v19 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v20 = 0xE400000000000000;
  }
  else {
    unint64_t v20 = 0xE500000000000000;
  }
  unint64_t v21 = v20;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  v22._object = (void *)0x80000001002B5500;
  v22._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v22);
  int v63 = a2;
  if (a2) {
    uint64_t v23 = 1702195828;
  }
  else {
    uint64_t v23 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v24 = 0xE400000000000000;
  }
  else {
    unint64_t v24 = 0xE500000000000000;
  }
  unint64_t v25 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  id v26 = sub_1001F63FC();
  swift_bridgeObjectRetain();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v26 ulog:40 message:v27];
  swift_bridgeObjectRelease();

  swift_beginAccess();
  int v28 = 16641;
  if ((*(_WORD *)(v3 + 24) & 0xE101) == 0x2101)
  {
    int v62 = 2;
  }
  else
  {
    sub_10000D6E4((void *)(v3 + 88), *(void *)(v3 + 112));
    char v29 = sub_1001E1A0C();
    if (v29) {
      int v28 = 16641;
    }
    else {
      int v28 = 16385;
    }
    if (v29) {
      int v30 = 2;
    }
    else {
      int v30 = 3;
    }
    int v62 = v30;
  }
  uint64_t v31 = v71;
  BOOL v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56);
  uint64_t v33 = v68;
  v32(v68, 1, 1, v71);
  unsigned int v64 = v28;
  if ((v66 & 1) == 0)
  {
    char v36 = 2;
    goto LABEL_37;
  }
  if (qword_10035A4F0 != -1) {
    swift_once();
  }
  if (byte_1003AC688 != 1) {
    goto LABEL_31;
  }
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v34 = *(id *)(qword_1003AC750 + 920);
  char v35 = sub_1000FF780();

  if (v35)
  {
LABEL_31:
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    sub_10000D78C(v33, &qword_10035F280);
    if ((v37 & 1) == 0)
    {
      uint64_t v39 = (uint64_t)v61;
      if ((v28 & 0x100) != 0) {
        long long v38 = xmmword_10028F480;
      }
      else {
        long long v38 = xmmword_10028F470;
      }
      goto LABEL_36;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10000D78C(v33, &qword_10035F280);
  }
  long long v38 = xmmword_10028F480;
  uint64_t v39 = (uint64_t)v61;
LABEL_36:
  *(_OWORD *)uint64_t v39 = v38;
  *(unsigned char *)(v39 + 16) = 0;
  swift_storeEnumTagMultiPayload();
  char v36 = 1;
  v32(v39, 0, 1, v31);
  sub_10001639C(v39, v33, &qword_10035F280);
LABEL_37:
  uint64_t v40 = v33;
  uint64_t v41 = v31;
  sub_10000A38C(&qword_10035F288);
  uint64_t v42 = *((void *)v67 + 9);
  unint64_t v43 = (v67[80] + 32) & ~(unint64_t)v67[80];
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_100291160;
  uint64_t v66 = v44;
  unint64_t v45 = (char *)(v44 + v43);
  char *v45 = v36;
  swift_storeEnumTagMultiPayload();
  uint64_t v46 = 1;
  uint64_t v61 = v32;
  v32((uint64_t)v45, 0, 1, v41);
  sub_10000D728(v40, (uint64_t)&v45[v42], &qword_10035F280);
  uint64_t v67 = v45;
  uint64_t v47 = &v45[2 * v42];
  if (v63)
  {
    *((void *)v47 + 1) = 0;
    *((void *)v47 + 2) = 0;
    *(void *)uint64_t v47 = 1;
    v47[24] = 4;
    swift_storeEnumTagMultiPayload();
    uint64_t v46 = 0;
  }
  uint64_t v48 = v46;
  int64_t v49 = v61;
  v61((uint64_t)&v45[2 * v42], v48, 1, v41);
  uint64_t v50 = (uint64_t)v67;
  v67[3 * v42] = v62;
  swift_storeEnumTagMultiPayload();
  v49(v50 + 3 * v42, 0, 1, v71);
  *(unsigned char *)(v50 + 4 * v42) = 2;
  uint64_t v51 = v71;
  uint64_t v52 = 5;
  swift_storeEnumTagMultiPayload();
  v49(v50 + 4 * v42, 0, 1, v51);
  uint64_t v53 = (unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
  uint64_t v54 = _swiftEmptyArrayStorage;
  do
  {
    sub_10000D728(v50, (uint64_t)v15, &qword_10035F280);
    sub_10001639C((uint64_t)v15, (uint64_t)v12, &qword_10035F280);
    if ((*v53)(v12, 1, v51) == 1)
    {
      sub_10000D78C((uint64_t)v12, &qword_10035F280);
    }
    else
    {
      uint64_t v55 = v69;
      sub_1000713EC((uint64_t)v12, v69, type metadata accessor for ExperienceEffect);
      sub_1000713EC(v55, v72, type metadata accessor for ExperienceEffect);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v54 = (void *)sub_100088ECC(0, v54[2] + 1, 1, (unint64_t)v54);
      }
      unint64_t v57 = v54[2];
      unint64_t v56 = v54[3];
      if (v57 >= v56 >> 1) {
        uint64_t v54 = (void *)sub_100088ECC(v56 > 1, v57 + 1, 1, (unint64_t)v54);
      }
      v54[2] = v57 + 1;
      sub_1000713EC(v72, (uint64_t)v54+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(void *)(v70 + 72) * v57, type metadata accessor for ExperienceEffect);
      uint64_t v51 = v71;
    }
    v50 += v42;
    --v52;
  }
  while (v52);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v58 = swift_allocObject();
  *(void *)(v58 + 16) = v54;
  swift_bridgeObjectRetain();
  uint64_t v59 = sub_10005E44C((uint64_t)sub_100071A14, v58, v64, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000D78C(v68, &qword_10035F280);
  return v59;
}

uint64_t sub_10006BCE0()
{
  if (swift_weakLoadStrong())
  {
    char v0 = sub_10003E708();
    swift_release();
    if (v0 == 4) {
      char v1 = 0;
    }
    else {
      char v1 = v0;
    }
  }
  else
  {
    char v1 = 0;
  }
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1701602409;
  switch(v1)
  {
    case 1:
      unint64_t v2 = 0xE90000000000006ELL;
      uint64_t v3 = 0x6F69746163756465;
      break;
    case 2:
      uint64_t v3 = 1953393000;
      break;
    case 3:
      uint64_t v3 = 1819047270;
      break;
    default:
      break;
  }
  unint64_t v4 = v2;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  id v5 = sub_1001F63FC();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 ulog:40 message:v6];
  swift_bridgeObjectRelease();

  uint64_t v7 = sub_100066BB0();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  swift_bridgeObjectRetain();
  if ((v1 & 0xFE) != 0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 4294934784;
  }
  uint64_t v10 = sub_10005E44C((uint64_t)sub_100071A14, v8, v9, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  swift_release();
  return v10;
}

uint64_t sub_10006BEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)v2;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(unsigned char *)(v2 + 48) = -1;
  uint64_t v6 = v5;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v16, "Init: session=");
  HIBYTE(v16[1]) = -18;
  swift_retain();
  UUID.uuidString.getter();
  swift_release();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  swift_retain();
  uint64_t v9 = sub_1001F7514();
  uint64_t v11 = v10;
  swift_release();
  v12._uint64_t countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = 60;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  sub_10016ABE4(v16[0], (void *)v16[1], 0, v6, (uint64_t)&off_100329F20);
  swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t sub_10006C0E0(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v6 = type metadata accessor for ExperienceEvent(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 + 16);
  if (!v10) {
    return a3;
  }
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  sub_10006DDF4(a2 + v11, (uint64_t)v9, type metadata accessor for ExperienceEvent);
  swift_bridgeObjectRetain();
  char v12 = sub_10025CD90((uint64_t)v9, a1);
  sub_10006DE5C((uint64_t)v9, type metadata accessor for ExperienceEvent);
  if (v12)
  {
LABEL_3:
    swift_bridgeObjectRelease();
    return a3;
  }
  if (v10 == 1)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v13 = *(void *)(v7 + 72);
  uint64_t v14 = a2 + v13 + v11;
  uint64_t v15 = 1;
  while (1)
  {
    uint64_t result = sub_10006DDF4(v14, (uint64_t)v9, type metadata accessor for ExperienceEvent);
    uint64_t v17 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    char v18 = sub_10025CD90((uint64_t)v9, a1);
    sub_10006DE5C((uint64_t)v9, type metadata accessor for ExperienceEvent);
    if (v18) {
      goto LABEL_3;
    }
    ++v15;
    v14 += v13;
    if (v17 == v10) {
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10006C2B0(uint64_t a1, uint64_t a2, void (*a3)(_OWORD *__return_ptr, uint64_t))
{
  void (*v20)(_OWORD *__return_ptr, uint64_t);
  _OWORD v21[2];

  uint64_t v6 = type metadata accessor for ExperienceEvent(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 + 16);
  if (!v10) {
    goto LABEL_11;
  }
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  sub_10006DDF4(a2 + v11, (uint64_t)v9, type metadata accessor for ExperienceEvent);
  swift_bridgeObjectRetain();
  char v12 = sub_10025CD90((uint64_t)v9, a1);
  sub_10006DE5C((uint64_t)v9, type metadata accessor for ExperienceEvent);
  if (v12)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    a3(v21, a1);
    return *(void *)&v21[0];
  }
  if (v10 == 1)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    memset(v21, 0, sizeof(v21));
    return *(void *)&v21[0];
  }
  unint64_t v20 = a3;
  uint64_t v13 = *(void *)(v7 + 72);
  uint64_t v14 = a2 + v13 + v11;
  uint64_t v15 = 1;
  while (1)
  {
    uint64_t result = sub_10006DDF4(v14, (uint64_t)v9, type metadata accessor for ExperienceEvent);
    uint64_t v17 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    char v18 = sub_10025CD90((uint64_t)v9, a1);
    sub_10006DE5C((uint64_t)v9, type metadata accessor for ExperienceEvent);
    if (v18)
    {
      swift_bridgeObjectRelease();
      a3 = v20;
      goto LABEL_11;
    }
    ++v15;
    v14 += v13;
    if (v17 == v10) {
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10006C4A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035F3B0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10035F3B8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = qword_100370E48;
  if (*(void *)(v1 + qword_100370E48))
  {
    uint64_t v11 = *(void *)(v1 + qword_100370E48);
  }
  else
  {
    uint64_t v16 = v7;
    swift_retain();
    uint64_t v15 = v3;
    uint64_t v17 = sub_100104EA4();
    sub_10000A38C(&qword_10035F3C0);
    sub_10000B010(&qword_10035F3C8, &qword_10035F3C0);
    uint64_t v12 = Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    uint64_t v17 = v12;
    swift_allocObject();
    swift_weakInit();
    sub_10000A38C(&qword_10035F3D0);
    sub_10000A38C(&qword_100367C70);
    sub_10000B010(&qword_10035F3D8, &qword_10035F3D0);
    Publisher.map<A>(_:)();
    swift_release();
    swift_release();
    sub_10000B010(&qword_10035F3E0, &qword_10035F3B0);
    Publisher.compactMap<A>(_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v2);
    sub_10000B010(&qword_10035F3E8, &qword_10035F3B8);
    uint64_t v11 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v6);
    *(void *)(v1 + v10) = v11;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v11;
}

uint64_t sub_10006C824@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10006C8A4()
{
  return static Published.subscript.setter();
}

void *sub_10006C920@<X0>(void *a1@<X8>)
{
  return sub_10006C938((void *(*)(uint64_t *__return_ptr))sub_1000B7DAC, a1);
}

void *sub_10006C938@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X1>, void *a2@<X8>)
{
  uint64_t result = a1(&v7);
  int v4 = v7 & 0xFEFE;
  if (v4 == 65278) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (unsigned __int16)v7;
  }
  if (v4 == 65278) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = &_swiftEmptyArrayStorage;
  }
  *a2 = v5;
  a2[1] = v6;
  a2[2] = v6;
  a2[3] = v6;
  return result;
}

uint64_t sub_10006C994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *(*a3)(_OWORD *__return_ptr, uint64_t, __n128, __n128)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t result = sub_10025CD90(a2, a1);
  long long v8 = 0uLL;
  long long v9 = 0uLL;
  if (result)
  {
    uint64_t result = (uint64_t)a3(v10, a1, (__n128)0, (__n128)0);
    long long v8 = v10[0];
    long long v9 = v10[1];
  }
  *a4 = v8;
  a4[1] = v9;
  return result;
}

uint64_t sub_10006CA00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *(*a3)(_OWORD *__return_ptr, uint64_t, __n128, __n128)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t result = sub_10025CD90(a1, a2);
  long long v8 = 0uLL;
  long long v9 = 0uLL;
  if (result)
  {
    uint64_t result = (uint64_t)a3(v10, a1, (__n128)0, (__n128)0);
    long long v8 = v10[0];
    long long v9 = v10[1];
  }
  *a4 = v8;
  a4[1] = v9;
  return result;
}

uint64_t sub_10006CA64@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void *)@<X1>, uint64_t a3@<X6>, void *a4@<X7>, uint64_t *a5@<X8>, void *a6, unsigned int a7)
{
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  long long v9 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v9;
  v11[2] = *(_OWORD *)(a1 + 32);
  uint64_t v12 = v7;
  uint64_t v13 = v8;
  return sub_10002F714((uint64_t *)v11, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10006CAB0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  sub_10000D6E4((void *)(a1 + 88), *(void *)(a1 + 112));
  uint64_t result = sub_1001E1728();
  int v4 = _swiftEmptyArrayStorage;
  uint64_t v5 = 8449;
  if (result)
  {
    uint64_t v5 = 0;
    int v4 = 0;
  }
  *a2 = v5;
  a2[1] = (uint64_t)v4;
  a2[2] = (uint64_t)v4;
  a2[3] = (uint64_t)v4;
  return result;
}

uint64_t sub_10006CB04@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  sub_10000D6E4((void *)(a1 + 88), *(void *)(a1 + 112));
  uint64_t result = sub_1001E1728();
  uint64_t v4 = 8193;
  if ((result & 1) == 0) {
    uint64_t v4 = 8449;
  }
  *a2 = v4;
  a2[1] = (uint64_t)_swiftEmptyArrayStorage;
  a2[2] = (uint64_t)_swiftEmptyArrayStorage;
  a2[3] = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_10006CB58@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10011EAF8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10006CB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10035F238);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006CBF4()
{
  uint64_t v0 = type metadata accessor for ExperienceEvent(0);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v26 - v5;
  sub_10000A38C(&qword_10035F248);
  uint64_t v7 = *(void *)(v1 + 72);
  unint64_t v8 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100291190;
  unint64_t v10 = v9 + v8;
  long long v26 = xmmword_100291140;
  *(_OWORD *)unint64_t v10 = xmmword_100291140;
  *(unsigned char *)(v10 + 16) = 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = v9 + v8 + v7;
  *(_OWORD *)uint64_t v11 = v26;
  *(unsigned char *)(v11 + 16) = 2;
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = v9 + v8 + 2 * v7;
  *(_OWORD *)uint64_t v12 = v26;
  *(unsigned char *)(v12 + 16) = 3;
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = v9 + v8 + 3 * v7;
  sub_10001A050();
  uint64_t v14 = swift_allocError();
  *(void *)uint64_t v15 = 0;
  *(void *)(v15 + 8) = 0xE000000000000000;
  *(unsigned char *)(v15 + 16) = 11;
  *(void *)uint64_t v13 = v14;
  *(void *)(v13 + 8) = 0;
  *(unsigned char *)(v13 + 16) = 0;
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = v9 + v8 + 4 * v7;
  *(_OWORD *)uint64_t v16 = xmmword_100291120;
  *(unsigned char *)(v16 + 16) = 4;
  swift_storeEnumTagMultiPayload();
  *(unsigned char *)(v10 + 5 * v7) = 33;
  swift_storeEnumTagMultiPayload();
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v17 = *(id *)(qword_1003AC750 + 1048);
  char v18 = sub_1000FD938();

  if (v18)
  {
    *uint64_t v6 = 1;
    swift_storeEnumTagMultiPayload();
    unint64_t v20 = *(void *)(v9 + 16);
    unint64_t v19 = *(void *)(v9 + 24);
    if (v20 >= v19 >> 1) {
      unint64_t v9 = sub_100088E98(v19 > 1, v20 + 1, 1, v9);
    }
    *(void *)(v9 + 16) = v20 + 1;
    sub_1000713EC((uint64_t)v6, v9 + v8 + v20 * v7, type metadata accessor for ExperienceEvent);
  }
  id v21 = *(id *)(qword_1003AC750 + 1056);
  char v22 = sub_1000FD938();

  if (v22)
  {
    *uint64_t v4 = 0;
    swift_storeEnumTagMultiPayload();
    unint64_t v24 = *(void *)(v9 + 16);
    unint64_t v23 = *(void *)(v9 + 24);
    if (v24 >= v23 >> 1) {
      unint64_t v9 = sub_100088E98(v23 > 1, v24 + 1, 1, v9);
    }
    *(void *)(v9 + 16) = v24 + 1;
    sub_1000713EC((uint64_t)v4, v9 + v8 + v24 * v7, type metadata accessor for ExperienceEvent);
  }
  return v9;
}

void *sub_10006CF70()
{
  uint64_t v0 = type metadata accessor for ExperienceEvent(0);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v18 - v5;
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v7 = *(id *)(qword_1003AC750 + 416);
  char v8 = sub_1000FD938();

  if (v8)
  {
    *((void *)v6 + 6) = 0;
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
    v6[56] = 96;
    swift_storeEnumTagMultiPayload();
    unint64_t v9 = (void *)sub_100088E98(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    unint64_t v11 = v9[2];
    unint64_t v10 = v9[3];
    if (v11 >= v10 >> 1) {
      unint64_t v9 = (void *)sub_100088E98(v10 > 1, v11 + 1, 1, (unint64_t)v9);
    }
    void v9[2] = v11 + 1;
    sub_1000713EC((uint64_t)v6, (uint64_t)v9+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(void *)(v1 + 72) * v11, type metadata accessor for ExperienceEvent);
  }
  else
  {
    unint64_t v9 = _swiftEmptyArrayStorage;
  }
  id v12 = *(id *)(qword_1003AC750 + 504);
  char v13 = sub_1000FFE1C();

  if (v13)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0) {
      return v9;
    }
  }
  *(void *)uint64_t v4 = 1;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  v4[56] = 96;
  swift_storeEnumTagMultiPayload();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v9 = (void *)sub_100088E98(0, v9[2] + 1, 1, (unint64_t)v9);
  }
  unint64_t v16 = v9[2];
  unint64_t v15 = v9[3];
  if (v16 >= v15 >> 1) {
    unint64_t v9 = (void *)sub_100088E98(v15 > 1, v16 + 1, 1, (unint64_t)v9);
  }
  void v9[2] = v16 + 1;
  sub_1000713EC((uint64_t)v4, (uint64_t)v9+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(void *)(v1 + 72) * v16, type metadata accessor for ExperienceEvent);
  return v9;
}

uint64_t sub_10006D27C()
{
  sub_10000A38C(&qword_10035F248);
  uint64_t v0 = *(void *)(type metadata accessor for ExperienceEvent(0) - 8);
  uint64_t v1 = *(void *)(v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100291190;
  uint64_t v4 = (_OWORD *)(v3 + v2);
  *(_OWORD *)((char *)v4 + 41) = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  *uint64_t v4 = xmmword_100291140;
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = (char *)v4 + v1;
  sub_10001A050();
  uint64_t v6 = swift_allocError();
  *(void *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0xE000000000000000;
  *(unsigned char *)(v7 + 16) = 11;
  sub_100146144(v6, v16);
  uint64_t v8 = v17;
  long long v9 = v16[1];
  *(_OWORD *)uint64_t v5 = v16[0];
  *((_OWORD *)v5 + 1) = v9;
  *((void *)v5 + 4) = v8;
  *(_OWORD *)(v5 + 40) = v18;
  v5[56] = 64;
  swift_storeEnumTagMultiPayload();
  unint64_t v10 = (char *)v4 + 2 * v1;
  uint64_t v11 = swift_allocError();
  *(void *)uint64_t v12 = 0;
  *(void *)(v12 + 8) = 0xE000000000000000;
  *(unsigned char *)(v12 + 16) = 11;
  sub_100146144(v11, v19);
  uint64_t v13 = v20;
  long long v14 = v19[1];
  *(_OWORD *)unint64_t v10 = v19[0];
  *((_OWORD *)v10 + 1) = v14;
  *((void *)v10 + 4) = v13;
  *(_OWORD *)(v10 + 40) = v21;
  v10[56] = 32;
  swift_storeEnumTagMultiPayload();
  *(void *)((char *)v4 + 3 * v1) = 2;
  type metadata accessor for TransferEvent();
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(void *)((char *)v4 + 4 * v1) = 3;
  swift_storeEnumTagMultiPayload();
  *(void *)((char *)v4 + 5 * v1) = 0;
  swift_storeEnumTagMultiPayload();
  return v3;
}

uint64_t sub_10006D4B8()
{
  sub_10000A38C(&qword_10035F248);
  uint64_t v0 = *(void *)(type metadata accessor for ExperienceEvent(0) - 8);
  uint64_t v1 = *(void *)(v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100291180;
  uint64_t v4 = (unsigned char *)(v3 + v2);
  *uint64_t v4 = 6;
  swift_storeEnumTagMultiPayload();
  v4[v1] = 64;
  swift_storeEnumTagMultiPayload();
  v4[2 * v1] = 96;
  swift_storeEnumTagMultiPayload();
  v4[3 * v1] = -96;
  swift_storeEnumTagMultiPayload();
  return v3;
}

uint64_t sub_10006D5E0()
{
  sub_10000A38C(&qword_10035F268);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028D430;
  unint64_t v1 = inited + 32;
  if (qword_10035A660 != -1) {
    goto LABEL_63;
  }
  while (1)
  {
    uint64_t v2 = qword_1003ACBE8;
    uint64_t v3 = sub_10006D4B8();
    LOWORD(v62[0]) = -32512;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v3;
    sub_10006DD54((uint64_t)v62, v4 + 24);
    uint64_t v5 = sub_100066BB0();
    v62[0] = v2;
    v62[1] = sub_10006DDB0;
    v62[2] = v4;
    v62[3] = _swiftEmptyArrayStorage;
    v62[4] = _swiftEmptyArrayStorage;
    v62[5] = _swiftEmptyArrayStorage;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10005E300((uint64_t)sub_10006DDB4, v6, v61);
    swift_bridgeObjectRelease();
    swift_release();
    __n128 v7 = v61[1];
    *(__n128 *)unint64_t v1 = v61[0];
    *(__n128 *)(v1 + 16) = v7;
    *(__n128 *)(v1 + 32) = v61[2];
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v55 = *(void *)(inited + 16);
    if (v55)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = 0;
      uint64_t inited = (uint64_t)_swiftEmptyArrayStorage;
      unint64_t v54 = v1;
      while (1)
      {
        unint64_t v9 = v1 + 48 * v8;
        uint64_t v10 = *(void *)v9;
        int64_t v11 = *(void *)(*(void *)v9 + 16);
        if (v11)
        {
          uint64_t v56 = v8;
          uint64_t v57 = inited;
          long long v58 = *(_OWORD *)(v9 + 24);
          long long v59 = *(_OWORD *)(v9 + 8);
          uint64_t v12 = *(void *)(v9 + 40);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          sub_1000B549C(0, v11, 0);
          uint64_t v13 = 0;
          do
          {
            int64_t v14 = v11;
            __int16 v15 = *(_WORD *)(v10 + 2 * v13 + 32);
            unint64_t v16 = _swiftEmptyArrayStorage[2];
            unint64_t v17 = _swiftEmptyArrayStorage[3];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            if (v16 >= v17 >> 1) {
              sub_1000B549C(v17 > 1, v16 + 1, 1);
            }
            _swiftEmptyArrayStorage[2] = v16 + 1;
            long long v18 = &_swiftEmptyArrayStorage[6 * v16];
            *((_WORD *)v18 + 16) = v15;
            ++v13;
            *(_OWORD *)(v18 + 5) = v59;
            *(_OWORD *)(v18 + 7) = v58;
            v18[9] = v12;
            int64_t v11 = v14;
          }
          while (v14 != v13);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          unint64_t v1 = v54;
          uint64_t v8 = v56;
          uint64_t inited = v57;
        }
        uint64_t v19 = _swiftEmptyArrayStorage[2];
        int64_t v20 = *(void *)(inited + 16);
        int64_t v21 = v20 + v19;
        if (__OFADD__(v20, v19)) {
          goto LABEL_59;
        }
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v21 <= *(void *)(inited + 24) >> 1)
        {
          if (_swiftEmptyArrayStorage[2]) {
            goto LABEL_21;
          }
        }
        else
        {
          if (v20 <= v21) {
            int64_t v23 = v20 + v19;
          }
          else {
            int64_t v23 = v20;
          }
          uint64_t inited = (uint64_t)sub_100088B4C((void *)isUniquelyReferenced_nonNull_native, v23, 1, (void *)inited);
          if (_swiftEmptyArrayStorage[2])
          {
LABEL_21:
            uint64_t v24 = *(void *)(inited + 16);
            if ((*(void *)(inited + 24) >> 1) - v24 < v19) {
              goto LABEL_61;
            }
            unint64_t v25 = inited + 48 * v24 + 32;
            if ((unint64_t)&_swiftEmptyArrayStorage[4] < v25 + 48 * v19
              && v25 < (unint64_t)&_swiftEmptyArrayStorage[6 * v19 + 4])
            {
              goto LABEL_67;
            }
            sub_10000A38C(&qword_10035EDD0);
            swift_arrayInitWithCopy();
            if (v19)
            {
              uint64_t v27 = *(void *)(inited + 16);
              BOOL v28 = __OFADD__(v27, v19);
              uint64_t v29 = v27 + v19;
              if (v28) {
                goto LABEL_62;
              }
              *(void *)(inited + 16) = v29;
            }
            goto LABEL_5;
          }
        }
        if (v19) {
          goto LABEL_60;
        }
LABEL_5:
        ++v8;
        swift_bridgeObjectRelease();
        if (v8 == v55)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_32;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t inited = (uint64_t)_swiftEmptyArrayStorage;
LABEL_32:
    sub_10000A38C(&qword_10035F258);
    uint64_t v30 = swift_initStackObject();
    *(_OWORD *)(v30 + 16) = xmmword_10028D430;
    *(void *)(v30 + 32) = inited;
    int64_t v31 = *(void *)(inited + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    BOOL v32 = sub_100088B4C(0, v31, 1, _swiftEmptyArrayStorage);
    uint64_t v33 = v32;
    if (*(void *)(inited + 16))
    {
      uint64_t v34 = v32[2];
      if ((v32[3] >> 1) - v34 < v31) {
        goto LABEL_65;
      }
      unint64_t v35 = (unint64_t)&v32[6 * v34 + 4];
      if (inited + 32 < v35 + 48 * v31 && v35 < inited + 32 + 48 * v31)
      {
LABEL_67:
        uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      if (v31)
      {
        uint64_t v37 = v33[2];
        BOOL v28 = __OFADD__(v37, v31);
        uint64_t v38 = v37 + v31;
        if (v28) {
          goto LABEL_66;
        }
        void v33[2] = v38;
      }
    }
    else if (v31)
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v39 = v33[2];
    if (!v39) {
      break;
    }
    swift_bridgeObjectRetain();
    uint64_t v40 = _swiftEmptyArrayStorage;
    uint64_t v41 = v33 + 9;
    while (1)
    {
      uint64_t v60 = v39;
      uint64_t v43 = *(v41 - 1);
      uint64_t v42 = *v41;
      uint64_t v45 = *(v41 - 3);
      uint64_t v44 = *(v41 - 2);
      uint64_t v46 = *(v41 - 4);
      uint64_t inited = *((unsigned __int16 *)v41 - 20);
      sub_10000A38C(&qword_10035EDC8);
      uint64_t v47 = swift_initStackObject();
      *(_WORD *)(v47 + 32) = inited;
      unint64_t v1 = v47 + 32;
      *(void *)(v47 + 40) = v46;
      *(void *)(v47 + 48) = v45;
      *(void *)(v47 + 56) = v44;
      *(void *)(v47 + 64) = v43;
      *(void *)(v47 + 72) = v42;
      unint64_t v48 = v40[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int64_t v49 = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!v49 || (unint64_t v50 = v40[3] >> 1, v50 <= v48))
      {
        uint64_t v40 = sub_100088B4C(v49, v48 + 1, 1, v40);
        unint64_t v50 = v40[3] >> 1;
      }
      unint64_t v51 = v40[2];
      if (v50 <= v51) {
        break;
      }
      if (v1 < (unint64_t)&v40[6 * v51 + 10] && (unint64_t)&v40[6 * v51 + 4] < v47 + 80) {
        goto LABEL_67;
      }
      v41 += 6;
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      ++v40[2];
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t v39 = v60 - 1;
      if (v60 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_57;
      }
    }
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    swift_once();
  }
  uint64_t v40 = _swiftEmptyArrayStorage;
LABEL_57:
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10000A38C(&qword_10035F260);
  swift_arrayDestroy();
  return (uint64_t)v40;
}

uint64_t sub_10006DD1C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 26, 7);
}

uint64_t sub_10006DD54(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10006DDB4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10006DDBC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_10006DDF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006DE5C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *sub_10006DECC(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v215 = a2;
  uint64_t v220 = a1;
  uint64_t v5 = *v3;
  uint64_t v218 = a3;
  uint64_t v219 = v5;
  uint64_t v6 = sub_10000A38C(&qword_10035F4C8);
  uint64_t v210 = *(void *)(v6 - 8);
  uint64_t v211 = v6;
  __chkstk_darwin(v6);
  v209 = (char *)&v166 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v205 = sub_10000A38C(&qword_10035F4D0);
  uint64_t v204 = *(void *)(v205 - 8);
  __chkstk_darwin(v205);
  v203 = (char *)&v166 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v208 = sub_10000A38C(&qword_10035F4D8);
  uint64_t v207 = *(void *)(v208 - 8);
  uint64_t v9 = __chkstk_darwin(v208);
  uint64_t v202 = (char *)&v166 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  v217 = (char *)&v166 - v12;
  uint64_t v201 = v13;
  __chkstk_darwin(v11);
  __int16 v206 = (char *)&v166 - v14;
  uint64_t v200 = sub_10000A38C(&qword_10035F4E0);
  uint64_t v199 = *(void *)(v200 - 8);
  __chkstk_darwin(v200);
  uint64_t v198 = (char *)&v166 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = sub_10000A38C(&qword_10035F4E8);
  uint64_t v183 = *(void *)(v184 - 8);
  __chkstk_darwin(v184);
  long long v182 = (char *)&v166 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v188 = (void *)sub_10000A38C(&qword_10035F4F0);
  uint64_t v186 = *(v188 - 1);
  __chkstk_darwin(v188);
  uint64_t v185 = (char *)&v166 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v191 = sub_10000A38C(&qword_10035F4F8);
  uint64_t v190 = *(void *)(v191 - 8);
  __chkstk_darwin(v191);
  long long v187 = (char *)&v166 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = sub_10000A38C(&qword_10035F500);
  uint64_t v193 = *(void *)(v194 - 8);
  __chkstk_darwin(v194);
  unint64_t v189 = (char *)&v166 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v197 = sub_10000A38C(&qword_10035F508);
  uint64_t v196 = *(void *)(v197 - 8);
  uint64_t v20 = __chkstk_darwin(v197);
  v195 = (char *)&v166 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v192 = v21;
  __chkstk_darwin(v20);
  v216 = (char *)&v166 - v22;
  uint64_t v23 = sub_10000A38C(&qword_10035AC20);
  __chkstk_darwin(v23 - 8);
  uint64_t v166 = (char *)&v166 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v167 = *(void *)(v168 - 8);
  __chkstk_darwin(v168);
  v214 = (char *)&v166 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = sub_10000A38C(&qword_10035F510);
  uint64_t v170 = *(void *)(v171 - 8);
  __chkstk_darwin(v171);
  uint64_t v169 = (char *)&v166 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = sub_10000A38C(&qword_10035F518);
  uint64_t v173 = *(void *)(v174 - 8);
  __chkstk_darwin(v174);
  uint64_t v172 = (char *)&v166 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = sub_10000A38C(&qword_10035F520);
  uint64_t v181 = *(void *)(v180 - 8);
  __chkstk_darwin(v180);
  long long v179 = (char *)&v166 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v178 = sub_10000A38C(&qword_10035F528);
  uint64_t v212 = *(void *)(v178 - 8);
  __chkstk_darwin(v178);
  uint64_t v177 = (char *)&v166 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v175 = sub_10000A38C(&qword_10035F530);
  uint64_t v176 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  int64_t v31 = (char *)&v166 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = __chkstk_darwin(v32);
  char v36 = (char *)&v166 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v166 - v37;
  uint64_t v39 = sub_10000A38C(&qword_10035F298);
  uint64_t v40 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v42 = (char *)&v166 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  uint64_t v43 = (char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession__viewServiceLink;
  uint64_t v222 = 0;
  sub_10000A38C((uint64_t *)&unk_10035EFC8);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v43, v42, v39);
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_airDropUIPresenter) = 0;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_dwellBannerPresenter) = 0;
  UUID.init()();
  uint64_t v44 = (uint64_t *)((char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_finishedHandler);
  void *v44 = 0;
  v44[1] = 0;
  *((unsigned char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_active) = 0;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_dwellBannerPresenterTask) = 0;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_tasks) = (uint64_t)&_swiftEmptySetSingleton;
  *(uint64_t *)((char *)v4
             + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___activityDisplayContextPublisher) = 0;
  uint64_t v45 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession__cardMode;
  sub_10000A38C(&qword_10035F538);
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = 0;
  *(unsigned char *)(v46 + 24) = 4;
  *(uint64_t *)((char *)v4 + v45) = v46;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___cardModePublisher) = 0;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___mrResponsePublisher) = 0;
  *(uint64_t *)((char *)v4
             + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___mediaTransferStatusPublisher) = 0;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___progressPublisher) = 0;
  *(uint64_t *)((char *)v4
             + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___nearbySharingInteractionDisplayContextPublisher) = 0;
  uint64_t v47 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession__nearbySharingInteractionState;
  (*(void (**)(char *, void, uint64_t))(v33 + 104))(v38, enum case for SFAirDrop.NearbySharingInteraction.State.ended(_:), v32);
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v36, v38, v32);
  sub_10000A38C(&qword_10035F318);
  swift_allocObject();
  unint64_t v48 = sub_1001ECD70((uint64_t)v36, 0, 0, 0);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v38, v32);
  *(uint64_t *)((char *)v4 + v47) = (uint64_t)v48;
  uint64_t v49 = OBJC_IVAR____TtC17proximitycontrold14HandoffSession__transferredThisCard;
  sub_10000A38C(&qword_10035E150);
  uint64_t v50 = swift_allocObject();
  *(void *)(v50 + 16) = 0;
  *(uint64_t *)((char *)v4 + v49) = v50;
  *(uint64_t *)((char *)v4
             + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___outputEventContextPublisher) = 0;
  *(uint64_t *)((char *)v4
             + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___experienceEffectPublisher) = 0;
  *(uint64_t *)((char *)v4
             + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___callServicesUIEffectPublisher) = 0;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___cardEffectPublisher) = 0;
  *(uint64_t *)((char *)v4
             + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___contentPreviewEffectPublisher) = 0;
  *(uint64_t *)((char *)v4
             + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___classicBannerEffectPublisher) = 0;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___deviceEffectPublisher) = 0;
  *(uint64_t *)((char *)v4
             + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___dwellBannerEffectPublisher) = 0;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___hapticEffectPublisher) = 0;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___ledEffectPublisher) = 0;
  *(uint64_t *)((char *)v4
             + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___nearbySharingInteractionViewEffectPublisher) = 0;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___noticeEffectPublisher) = 0;
  *(unsigned char *)(v50 + 24) = 0;
  *(uint64_t *)((char *)v4
             + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___shockwaveEffectPublisher) = 0;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession____lazy_storage___transferEffectPublisher) = 0;
  uint64_t v51 = v220;
  uint64_t v52 = v215;
  v4[2] = v220;
  v4[3] = (uint64_t)v52;
  sub_100071454(v218, (uint64_t)(v4 + 4));
  char v53 = v52[OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_regionTimestamp + 8];
  v4[10] = *(void *)&v52[OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_regionTimestamp];
  *((unsigned char *)v4 + 88) = v53;
  uint64_t v222 = 0x203A74696E49;
  v223 = (void *)0xE600000000000000;
  v226._uint64_t countAndFlagsBits = 60;
  v226._object = (void *)0xE100000000000000;
  swift_retain();
  swift_retain();
  swift_retain();
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v54._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v55._uint64_t countAndFlagsBits = 32;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  swift_retain();
  uint64_t v56 = sub_1001F7514();
  long long v58 = v57;
  swift_release();
  v59._uint64_t countAndFlagsBits = v56;
  v59._object = v58;
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  v60._uint64_t countAndFlagsBits = 62;
  v60._object = (void *)0xE100000000000000;
  String.append(_:)(v60);
  swift_release();
  String.append(_:)(v226);
  swift_bridgeObjectRelease();
  sub_10016ABE4(v222, v223, 0, v219, (uint64_t)&off_1003219D8);
  swift_bridgeObjectRelease();
  uint64_t v222 = sub_10003E78C();
  swift_allocObject();
  swift_weakInit();
  sub_10000A38C(&qword_10035E3B0);
  sub_10000B010(&qword_10035E3B8, &qword_10035E3B0);
  Publisher.filter(_:)();
  swift_release();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_10000B010(&qword_10035F540, &qword_10035F530);
  uint64_t v61 = v175;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v176 + 8))(v31, v61);
  uint64_t v62 = (uint64_t)v4 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_tasks;
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v222 = *(void *)(*(void *)(v51 + OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment_deviceStorage) + 56);
  sub_10000A38C(&qword_10035ABB8);
  sub_10000B010(&qword_10035ABC0, &qword_10035ABB8);
  uint64_t v222 = Publisher.eraseToAnyPublisher()();
  swift_allocObject();
  swift_weakInit();
  sub_10000A38C(&qword_10035ABC8);
  sub_10000B010(&qword_10035ABD0, &qword_10035ABC8);
  int v63 = v177;
  Publisher.filter(_:)();
  swift_release();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_10000B010(&qword_10035F548, &qword_10035F528);
  uint64_t v64 = v178;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v212 + 8))(v63, v64);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  sub_10005E918(&v222);
  uint64_t v65 = v224;
  uint64_t v66 = v225;
  sub_10000D6E4(&v222, v224);
  v226._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 32))(v65, v66);
  uint64_t v67 = sub_10000A38C(&qword_10035F310);
  uint64_t v68 = sub_10000B010(&qword_100367730, &qword_10035F310);
  uint64_t v69 = v179;
  uint64_t v212 = v67;
  Publisher.filter(_:)();
  swift_release();
  sub_10000CC5C((uint64_t)&v222);
  swift_allocObject();
  swift_weakInit();
  sub_10000B010(&qword_10035F550, &qword_10035F520);
  uint64_t v70 = v180;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v181 + 8))(v69, v70);
  swift_beginAccess();
  uint64_t v219 = v62;
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v71 = *(id *)(qword_1003AC750 + 752);
  double v72 = sub_1000FEB94();

  unint64_t v73 = v214;
  if (v72 > 0.0)
  {
    id v74 = *(id *)(qword_1003AC750 + 80);
    char v75 = sub_1000FD938();

    if (v75)
    {
      sub_10005E918(&v222);
      uint64_t v76 = v224;
      uint64_t v77 = v225;
      sub_10000D6E4(&v222, v224);
      v226._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 32))(v76, v77);
      static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
      if (qword_10035A628 != -1) {
        swift_once();
      }
      __int16 v78 = (void *)qword_1003ACB50;
      id v221 = (id)qword_1003ACB50;
      uint64_t v79 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
      uint64_t v80 = (uint64_t)v166;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v166, 1, 1, v79);
      sub_100019E10(0, (unint64_t *)&qword_10035A680);
      sub_1000713A8((unint64_t *)&qword_10035AC60, (unint64_t *)&qword_10035A680);
      id v81 = v78;
      unint64_t v82 = v169;
      Publisher.debounce<A>(for:scheduler:options:)();
      sub_10000D78C(v80, &qword_10035AC20);

      (*(void (**)(char *, uint64_t))(v167 + 8))(v73, v168);
      swift_release();
      sub_10000CC5C((uint64_t)&v222);
      sub_10000B010(&qword_10035F5F0, &qword_10035F510);
      unint64_t v83 = v172;
      uint64_t v84 = v171;
      Publisher.filter(_:)();
      (*(void (**)(char *, uint64_t))(v170 + 8))(v82, v84);
      uint64_t v85 = swift_allocObject();
      swift_weakInit();
      uint64_t v86 = swift_allocObject();
      *(void *)(v86 + 16) = v85;
      *(double *)(v86 + 24) = v72;
      sub_10000B010(&qword_10035F5F8, &qword_10035F518);
      uint64_t v87 = v174;
      Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v173 + 8))(v83, v87);
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
    }
  }
  id v88 = *(id *)(qword_1003AC750 + 368);
  double v89 = sub_1000FEB94();

  if (v89 > 0.0)
  {
    sub_10005E918(&v222);
    uint64_t v90 = v224;
    uint64_t v91 = v225;
    sub_10000D6E4(&v222, v224);
    v226._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v91 + 32))(v90, v91);
    static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
    if (qword_10035A628 != -1) {
      swift_once();
    }
    uint64_t v92 = (void *)qword_1003ACB50;
    id v221 = (id)qword_1003ACB50;
    uint64_t v93 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v94 = (uint64_t)v166;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56))(v166, 1, 1, v93);
    sub_100019E10(0, (unint64_t *)&qword_10035A680);
    sub_1000713A8((unint64_t *)&qword_10035AC60, (unint64_t *)&qword_10035A680);
    id v95 = v92;
    long long v96 = v169;
    Publisher.debounce<A>(for:scheduler:options:)();
    sub_10000D78C(v94, &qword_10035AC20);

    (*(void (**)(char *, uint64_t))(v167 + 8))(v73, v168);
    swift_release();
    sub_10000CC5C((uint64_t)&v222);
    sub_10000B010(&qword_10035F5F0, &qword_10035F510);
    long long v97 = v172;
    uint64_t v98 = v171;
    Publisher.filter(_:)();
    (*(void (**)(char *, uint64_t))(v170 + 8))(v96, v98);
    uint64_t v99 = swift_allocObject();
    swift_weakInit();
    uint64_t v100 = swift_allocObject();
    *(void *)(v100 + 16) = v99;
    *(double *)(v100 + 24) = v89;
    sub_10000B010(&qword_10035F5F8, &qword_10035F518);
    uint64_t v101 = v174;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v173 + 8))(v97, v101);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  uint64_t v102 = sub_10003CE48();
  id v103 = sub_1001F5668();
  uint64_t v222 = v102;
  uint64_t v104 = swift_allocObject();
  v213 = v4;
  *(void *)(v104 + 16) = 0;
  *(void *)(v104 + 24) = 0;
  *(void *)(v104 + 32) = v102;
  strcpy((char *)(v104 + 40), "New Transfer: ");
  *(unsigned char *)(v104 + 55) = -18;
  *(void *)(v104 + 56) = 0;
  *(void *)(v104 + 64) = 0xE000000000000000;
  *(void *)(v104 + 72) = v103;
  *(_DWORD *)(v104 + 80) = 40;
  swift_retain();
  id v105 = v103;
  sub_10000A38C(&qword_10035F358);
  sub_10000A38C(&qword_10035D0D0);
  uint64_t v181 = v68;
  v214 = (char *)&protocol conformance descriptor for AnyPublisher<A, B>;
  sub_10000B010(&qword_10035F368, &qword_10035F358);
  uint64_t v106 = v182;
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10035F558, &qword_10035F4E8);
  uint64_t v107 = v184;
  uint64_t v108 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v183 + 8))(v106, v107);
  swift_release();

  uint64_t v222 = v108;
  sub_10000A38C(&qword_10035B578);
  uint64_t v109 = v185;
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_10000B010(&qword_10035F560, &qword_10035F4F0);
  uint64_t v110 = v187;
  uint64_t v111 = v188;
  Publisher.filter(_:)();
  swift_release();
  (*(void (**)(char *, void *))(v186 + 8))(v109, v111);
  sub_10000A38C(&qword_10035F568);
  long long v188 = &protocol conformance descriptor for Publishers.Filter<A>;
  sub_10000B010(&qword_10035F570, &qword_10035F4F8);
  int64_t v112 = v189;
  uint64_t v113 = v191;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v190 + 8))(v110, v113);
  v215 = &protocol conformance descriptor for Publishers.Map<A, B>;
  sub_10000B010(&qword_10035F578, &qword_10035F500);
  sub_10000B010(&qword_10035F580, &qword_10035F568);
  unint64_t v114 = v216;
  uint64_t v115 = v194;
  Publisher<>.switchToLatest()();
  (*(void (**)(char *, uint64_t))(v193 + 8))(v112, v115);
  id v116 = sub_1001F5668();
  uint64_t v117 = v196;
  int64_t v118 = v195;
  uint64_t v119 = v197;
  (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v195, v114, v197);
  unint64_t v120 = (*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
  unint64_t v121 = (v192 + v120 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v122 = (v121 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v123 = (v122 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v124 = swift_allocObject();
  *(void *)(v124 + 16) = sub_10005F7B4;
  *(void *)(v124 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v117 + 32))(v124 + v120, v118, v119);
  uint64_t v125 = (void *)(v124 + v121);
  *uint64_t v125 = 0;
  v125[1] = 0xE000000000000000;
  uint64_t v126 = (void *)(v124 + v122);
  *uint64_t v126 = 0;
  v126[1] = 0xE000000000000000;
  *(void *)(v124 + v123) = v116;
  *(_DWORD *)(v124 + ((v123 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  id v127 = v116;
  sub_10000A38C(&qword_10035D0C8);
  sub_10000B010(&qword_10035F588, &qword_10035F508);
  uint64_t v128 = v198;
  uint64_t v129 = v216;
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10035F590, &qword_10035F4E0);
  uint64_t v130 = v200;
  uint64_t v131 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v199 + 8))(v128, v130);

  (*(void (**)(char *, uint64_t))(v117 + 8))(v129, v119);
  uint64_t v222 = v131;
  uint64_t v132 = swift_allocObject();
  swift_weakInit();
  uint64_t v133 = swift_allocObject();
  *(void *)(v133 + 16) = sub_10007168C;
  *(void *)(v133 + 24) = v132;
  sub_10000A38C(&qword_10035F598);
  sub_10000B010(&qword_10035F5A0, &qword_10035F598);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  sub_1001256A4();
  uint64_t v134 = sub_10011A5D0();
  swift_release();
  uint64_t v222 = v134;
  swift_allocObject();
  swift_weakInit();
  sub_10000A38C(&qword_10035F5A8);
  sub_10000B010(&qword_10035F5B0, &qword_10035F5A8);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v222 = sub_10011A0C0();
  swift_allocObject();
  swift_weakInit();
  v216 = (char *)sub_10000A38C((uint64_t *)&unk_1003675F0);
  uint64_t v200 = sub_10000B010(&qword_10035F5B8, (uint64_t *)&unk_1003675F0);
  unint64_t v135 = v217;
  Publisher.filter(_:)();
  swift_release();
  swift_release();
  id v136 = sub_1001F5668();
  uint64_t v137 = v207;
  unint64_t v138 = v202;
  uint64_t v139 = v135;
  uint64_t v140 = v208;
  (*(void (**)(char *, char *, uint64_t))(v207 + 16))(v202, v139, v208);
  unint64_t v141 = (*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80);
  unint64_t v142 = (v201 + v141 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v143 = (v142 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v144 = (v143 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v145 = swift_allocObject();
  *(void *)(v145 + 16) = sub_10005FCAC;
  *(void *)(v145 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v137 + 32))(v145 + v141, v138, v140);
  uint64_t v146 = (void *)(v145 + v142);
  void *v146 = 0;
  v146[1] = 0xE000000000000000;
  uint64_t v147 = (void *)(v145 + v143);
  *uint64_t v147 = 0;
  v147[1] = 0xE000000000000000;
  *(void *)(v145 + v144) = v136;
  *(_DWORD *)(v145 + ((v144 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  id v148 = v136;
  sub_10000A38C((uint64_t *)&unk_10035E840);
  sub_10000B010(&qword_10035F5C0, &qword_10035F4D8);
  uint64_t v149 = v203;
  uint64_t v150 = v140;
  __int16 v151 = v217;
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10035F5C8, &qword_10035F4D0);
  uint64_t v152 = v205;
  uint64_t v153 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v204 + 8))(v149, v152);

  uint64_t v154 = *(void (**)(char *, uint64_t))(v137 + 8);
  v154(v151, v150);
  uint64_t v222 = v153;
  uint64_t v155 = swift_allocObject();
  unint64_t v156 = v213;
  swift_weakInit();
  uint64_t v157 = swift_allocObject();
  *(void *)(v157 + 16) = sub_1000717D8;
  *(void *)(v157 + 24) = v155;
  uint64_t v158 = v206;
  Publisher.filter(_:)();
  swift_release();
  swift_release();
  uint64_t v159 = swift_allocObject();
  swift_weakInit();
  uint64_t v160 = swift_allocObject();
  *(void *)(v160 + 16) = sub_100071840;
  *(void *)(v160 + 24) = v159;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  v154(v158, v150);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v222 = sub_10011A0E4();
  swift_allocObject();
  swift_weakInit();
  sub_10000A38C(&qword_10035F5D0);
  sub_10000B010(&qword_100367700, &qword_10035F5D0);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v222 = sub_10005FF48();
  swift_allocObject();
  swift_weakInit();
  sub_10000A38C(&qword_10035F5D8);
  sub_10000B010(&qword_10035F5E0, &qword_10035F5D8);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v222 = sub_100060224();
  sub_10000A38C(&qword_100367D20);
  sub_10000B010((unint64_t *)&unk_100367D30, &qword_100367D20);
  uint64_t v161 = v209;
  Publisher.filter(_:)();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_10000B010(&qword_10035F5E8, &qword_10035F4C8);
  uint64_t v162 = v211;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v210 + 8))(v161, v162);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  sub_10005E918(&v222);
  uint64_t v163 = v224;
  uint64_t v164 = v225;
  sub_10000D6E4(&v222, v224);
  v226._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v164 + 32))(v163, v164);
  swift_allocObject();
  swift_weakInit();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  sub_10000CC5C((uint64_t)&v222);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  sub_1000718C4(v218);
  return v156;
}

uint64_t sub_1000707A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10006C0E0(a1, *(void *)(v2 + 16), *(_WORD *)(v2 + 24));
  *a2 = result;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

uint64_t sub_1000707DC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100070824()
{
  uint64_t v1 = *(void *)(sub_10000A38C(&qword_10035F278) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for ExperienceEvent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v0 + v3, 1, v6))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_100020428(*(void *)v5, *(void *)(v5 + 8), *(unsigned char *)(v5 + 16));
        break;
      case 1u:
        sub_100020430(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(unsigned char *)(v5 + 56));
        break;
      case 4u:
        sub_10002052C(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(unsigned char *)(v5 + 56));
        break;
      case 5u:
        sub_1000205C8(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(unsigned char *)(v5 + 56));
        break;
      case 8u:
        type metadata accessor for TransferEvent();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            goto LABEL_13;
          case 2u:
          case 3u:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            break;
          case 4u:
            if (*(void *)(v5 + 16) >= 9uLL)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            uint64_t v7 = v5 + *(int *)(type metadata accessor for PermissionToHandoff() + 20);
            uint64_t v8 = type metadata accessor for Date();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
            break;
          case 5u:
            sub_100020628(*(void *)v5);
            break;
          default:
            goto LABEL_2;
        }
        break;
      case 9u:
        if ((unint64_t)(*(void *)v5 - 1) >= 3) {
LABEL_13:
        }
          swift_errorRelease();
        break;
      default:
        break;
    }
  }
LABEL_2:

  return _swift_deallocObject(v0, v4 + v3 + 2, v2 | 7);
}

uint64_t sub_100070ADC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_10000A38C(&qword_10035F278) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t result = sub_10005DFFC(a1, v2 + v6, *(_WORD *)(v2 + v6 + *(void *)(v5 + 64)));
  *a2 = result;
  a2[1] = v8;
  a2[2] = v9;
  a2[3] = v10;
  return result;
}

uint64_t sub_100070B7C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_10006BCE0();
  *a1 = (unsigned __int16)result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t sub_100070BB0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100070BF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10006C2B0(a1, *(void *)(v2 + 16), *(void (**)(_OWORD *__return_ptr, uint64_t))(v2 + 24));
  *a2 = result;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

uint64_t sub_100070C24@<X0>(void *a1@<X8>)
{
  return sub_100070C98(1, 1, a1);
}

uint64_t sub_100070C34(uint64_t a1)
{
  return sub_100070F60(a1, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10006C994);
}

uint64_t sub_100070C4C@<X0>(void *a1@<X8>)
{
  return sub_100070C98(1, 0, a1);
}

uint64_t sub_100070C5C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10006CAB0(v1, a1);
}

uint64_t sub_100070C68(uint64_t a1)
{
  return sub_100070F60(a1, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10006CA00);
}

uint64_t sub_100070C80@<X0>(uint64_t *a1@<X8>)
{
  return sub_10006CB04(v1, a1);
}

uint64_t sub_100070C8C@<X0>(void *a1@<X8>)
{
  return sub_100070C98(0, 1, a1);
}

uint64_t sub_100070C98@<X0>(int a1@<W1>, int a2@<W2>, void *a3@<X8>)
{
  uint64_t result = sub_10006B470(a1, a2);
  *a3 = (unsigned __int16)result;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

uint64_t sub_100070CD4()
{
  uint64_t v1 = *(void *)(type metadata accessor for ExperienceEvent(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = v0 + v3;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      sub_100020428(*(void *)v5, *(void *)(v5 + 8), *(unsigned char *)(v5 + 16));
      break;
    case 1u:
      sub_100020430(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(unsigned char *)(v5 + 56));
      break;
    case 4u:
      sub_10002052C(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(unsigned char *)(v5 + 56));
      break;
    case 5u:
      sub_1000205C8(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(unsigned char *)(v5 + 56));
      break;
    case 8u:
      type metadata accessor for TransferEvent();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          goto LABEL_9;
        case 2u:
        case 3u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        case 4u:
          if (*(void *)(v5 + 16) >= 9uLL)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          uint64_t v6 = v5 + *(int *)(type metadata accessor for PermissionToHandoff() + 20);
          uint64_t v7 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
          break;
        case 5u:
          sub_100020628(*(void *)v5);
          break;
        default:
          goto LABEL_14;
      }
      break;
    case 9u:
      if ((unint64_t)(*(void *)v5 - 1) >= 3) {
LABEL_9:
      }
        swift_errorRelease();
      break;
    default:
      break;
  }
LABEL_14:
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100070F60(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for ExperienceEvent(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v2 + v6);
  uint64_t v8 = *(void *)(v2 + v6 + 8);

  return a2(a1, v2 + v5, v7, v8);
}

uint64_t sub_100071024@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_100066A88(a1, v2);
  *a2 = result;
  return result;
}

uint64_t sub_100071050()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void *sub_100071088@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v7);
  int v4 = v7 & 0xFEFE;
  if (v4 == 65278) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (unsigned __int16)v7;
  }
  if (v4 == 65278) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = &_swiftEmptyArrayStorage;
  }
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v6;
  a1[3] = v6;
  return result;
}

uint64_t sub_1000710F0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100071128@<X0>(char *a1@<X8>)
{
  return sub_100062E18(a1);
}

id sub_100071130(id result)
{
  if (result != (id)2) {
    return sub_100027B7C(result);
  }
  return result;
}

uint64_t sub_100071140@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100071204();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10007116C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  uint64_t v5 = 0;
  unint64_t v6 = 0xE000000000000000;
  v2._object = (void *)0x80000001002B3E00;
  v2._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v2);
  sub_100045BD0(a1, (uint64_t)v4);
  _print_unlocked<A, B>(_:_:)();
  return v5;
}

uint64_t sub_100071204()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 2;
  }
  uint64_t v1 = Strong;
  if (*(unsigned char *)(Strong + qword_1003ACBD0 + 32) != 1)
  {
    swift_release();
    return 1;
  }
  Swift::String v2 = *(void **)(Strong + qword_1003ACBD0 + 16);
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)(v1 + qword_100370E40) + 40) >= 2uLL)
  {
    swift_release();

    return 1;
  }
  swift_release();
  return (uint64_t)v2;
}

uint64_t sub_1000712F8@<X0>(_DWORD *a1@<X8>)
{
  return sub_1000626C4(a1);
}

uint64_t sub_100071300@<X0>(void *a1@<X8>)
{
  return sub_100061A9C(a1);
}

unint64_t sub_100071308()
{
  unint64_t result = qword_10035F430;
  if (!qword_10035F430)
  {
    sub_10000A3D0(&qword_10035F420);
    sub_1000713A8(&qword_10035F438, (unint64_t *)&qword_10035F440);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035F430);
  }
  return result;
}

uint64_t sub_1000713A8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100019E10(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000713EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100071454(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000714B0()
{
  return sub_10005EA8C();
}

uint64_t sub_1000714B8(unsigned __int8 *a1)
{
  return sub_10005EAF0(a1);
}

uint64_t sub_1000714C0()
{
  return sub_10005EE28();
}

uint64_t sub_1000714C8()
{
  return sub_10005EEE0();
}

uint64_t sub_1000714D0(unsigned __int16 *a1)
{
  return sub_10005EFF8(a1);
}

uint64_t sub_1000714D8()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 84, 7);
}

uint64_t sub_100071538@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = sub_100038BC4(*a1, *(uint64_t (**)(uint64_t *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void **)(v2 + 64), *(void **)(v2 + 72), *(_DWORD *)(v2 + 80));

  return swift_retain();
}

uint64_t sub_100071594(void *a1)
{
  return sub_10005F51C(a1);
}

uint64_t sub_10007159C()
{
  return sub_10000ADE8(&qword_10035F508);
}

uint64_t sub_1000715A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_10000A38C(&qword_10035F508) - 8);
  unint64_t v6 = (((*(void *)(v5 + 64)
        + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 23) & 0xFFFFFFFFFFFFFFF8;
  return sub_10006CA64(a1, *(uint64_t (**)(void *))(v2 + 16), *(void *)(v2 + v6), *(void **)(v2 + v6 + 8), a2, *(void **)(v2 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10007168C(uint64_t a1, uint64_t a2)
{
  return sub_10005F7E0(a1, a2);
}

uint64_t sub_100071694(uint64_t a1)
{
  id v3 = *(uint64_t (**)(unsigned char *, void))(v1 + 16);
  sub_100045BD0(a1, (uint64_t)v5);
  return v3(v5, *(void *)(a1 + 56));
}

uint64_t sub_1000716E0(char *a1)
{
  return sub_10005FAA0(a1);
}

uint64_t sub_1000716E8()
{
  return sub_10000ADE8(&qword_10035F4D8);
}

uint64_t sub_1000716F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_10000A38C(&qword_10035F4D8) - 8);
  unint64_t v6 = (*(void *)(v5 + 64)
      + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10002F2C4(a1, *(uint64_t (**)(uint64_t))(v2 + 16), *(void *)(v2 + v6), *(void *)(v2 + v6 + 8), *(void *)(v2 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v2 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), a2, *(void **)(v2 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2+ ((((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1000717D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005FD04(a1, a2, a3);
}

uint64_t sub_1000717E0(uint64_t a1)
{
  id v3 = *(uint64_t (**)(uint64_t, void, void, void, void))(v1 + 16);
  uint64_t v4 = sub_10000A38C((uint64_t *)&unk_10035E840);
  return v3(a1, *(void *)(a1 + *(int *)(v4 + 48)), *(void *)(a1 + *(int *)(v4 + 48) + 8), *(void *)(a1 + *(int *)(v4 + 64)), *(void *)(a1 + *(int *)(v4 + 64) + 8)) & 1;
}

uint64_t sub_100071840(uint64_t a1)
{
  return sub_10005FDD0(a1);
}

uint64_t sub_100071848(uint64_t a1)
{
  id v3 = *(uint64_t (**)(uint64_t, void, void, void, void))(v1 + 16);
  uint64_t v4 = sub_10000A38C((uint64_t *)&unk_10035E840);
  return v3(a1, *(void *)(a1 + *(int *)(v4 + 48)), *(void *)(a1 + *(int *)(v4 + 48) + 8), *(void *)(a1 + *(int *)(v4 + 64)), *(void *)(a1 + *(int *)(v4 + 64) + 8));
}

uint64_t sub_1000718A4()
{
  return sub_10005FEB0();
}

uint64_t sub_1000718AC()
{
  return sub_100060118();
}

void sub_1000718B4()
{
}

uint64_t sub_1000718BC(unsigned __int16 *a1)
{
  return sub_100060544(a1);
}

uint64_t sub_1000718C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100071918()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100071950()
{
  return sub_10005F3BC();
}

uint64_t sub_10007195C()
{
  return sub_10005F258();
}

uint64_t sub_100071968(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_1000719B8()
{
  unint64_t result = qword_10035F610;
  if (!qword_10035F610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035F610);
  }
  return result;
}

uint64_t sub_100071A0C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10005F758(a1, v2, a2);
}

uint64_t sub_100071A78()
{
  id v1 = sub_1001F666C();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  swift_weakDestroy();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F088(*(void *)(v0 + 48));
  return v0;
}

uint64_t sub_100071B08()
{
  sub_100071A78();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ProxControlDemoBridgeServer()
{
  return self;
}

void sub_100071B60()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_10000A38C(&qword_10035F748);
  uint64_t v70 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v69 = (char *)v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10035F750);
  uint64_t v68 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C((uint64_t *)&unk_1003680A0);
  uint64_t v67 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v66 = (char *)v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_10000A38C(&qword_10035F758);
  uint64_t v64 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  int v63 = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10035F760);
  id v71 = *(uint64_t **)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v14 = (char *)Strong;
    uint64_t v15 = v0[3];
    uint64_t v16 = *(void *)(v15 + qword_10035F9E8);
    uint64_t v58 = v7;
    uint64_t v17 = v15;
    uint64_t v74 = v15;
    *(void *)__int16 v78 = v16;
    uint64_t v62 = v0 + 2;
    sub_10000A38C(&qword_10035F768);
    uint64_t v61 = v4;
    v57[3] = &protocol conformance descriptor for PassthroughSubject<A, B>;
    sub_10000B010(&qword_10035F770, &qword_10035F768);
    char v75 = v0;
    uint64_t v18 = Publisher.eraseToAnyPublisher()();
    *(void *)__int16 v78 = 0;
    *(void *)&v78[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    strcpy(v78, "New output (");
    v78[13] = 0;
    *(_WORD *)&v78[14] = -5120;
    v57[2] = v17 + qword_1003AC6D0;
    v57[1] = type metadata accessor for UUID();
    v57[0] = sub_1000766CC((unint64_t *)&qword_10035F778, (void (*)(uint64_t))&type metadata accessor for UUID);
    v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 2112041;
    v20._object = (void *)0xE300000000000000;
    String.append(_:)(v20);
    uint64_t v60 = v2;
    uint64_t v21 = *(void *)v78;
    uint64_t v22 = *(void *)&v78[8];
    id v23 = sub_10016B098(v1, (uint64_t)&off_1003222C0);
    *(void *)__int16 v78 = v18;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = 0;
    *(void *)(v24 + 24) = 0;
    *(void *)(v24 + 32) = v18;
    *(void *)(v24 + 40) = v21;
    *(void *)(v24 + 48) = v22;
    *(void *)(v24 + 56) = 0;
    *(void *)(v24 + 64) = 0xE000000000000000;
    *(void *)(v24 + 72) = v23;
    *(_DWORD *)(v24 + 80) = 40;
    swift_retain();
    swift_bridgeObjectRetain();
    id v25 = v23;
    sub_10000A38C(&qword_10035F780);
    uint64_t v76 = v14;
    double v72 = &protocol conformance descriptor for AnyPublisher<A, B>;
    sub_10000B010(&qword_10035F788, &qword_10035F780);
    Swift::String v59 = v6;
    Publisher.map<A>(_:)();
    swift_release();
    unint64_t v73 = &protocol conformance descriptor for Publishers.Map<A, B>;
    sub_10000B010(&qword_10035F790, &qword_10035F760);
    uint64_t v26 = Publisher.eraseToAnyPublisher()();
    ((void (*)(char *, uint64_t))v71[1])(v12, v10);
    swift_release();
    swift_bridgeObjectRelease();

    *(void *)__int16 v78 = v26;
    uint64_t v27 = swift_allocObject();
    uint64_t v28 = v75;
    swift_weakInit();
    uint64_t v29 = swift_allocObject();
    swift_weakInit();
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = v27;
    *(void *)(v30 + 24) = v29;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    id v71 = v28 + 4;
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    uint64_t v31 = swift_release();
    uint64_t v32 = sub_100113694(v31);
    *(void *)__int16 v78 = 0;
    *(void *)&v78[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    *(void *)__int16 v78 = 0xD000000000000018;
    *(void *)&v78[8] = 0x80000001002B5760;
    v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 2112041;
    v34._object = (void *)0xE300000000000000;
    String.append(_:)(v34);
    uint64_t v35 = *(void *)v78;
    uint64_t v36 = *(void *)&v78[8];
    id v37 = sub_10016B098(v1, (uint64_t)&off_1003222C0);
    *(void *)__int16 v78 = v32;
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = 0;
    *(void *)(v38 + 24) = 0;
    *(void *)(v38 + 32) = v32;
    *(void *)(v38 + 40) = v35;
    *(void *)(v38 + 48) = v36;
    *(void *)(v38 + 56) = 0;
    *(void *)(v38 + 64) = 0xE000000000000000;
    *(void *)(v38 + 72) = v37;
    *(_DWORD *)(v38 + 80) = 40;
    swift_retain();
    swift_bridgeObjectRetain();
    id v39 = v37;
    sub_10000A38C(&qword_10035F798);
    sub_10000B010(&qword_10035F7A0, &qword_10035F798);
    uint64_t v40 = v63;
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035F7A8, &qword_10035F758);
    uint64_t v41 = v65;
    uint64_t v42 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v40, v41);
    swift_release();
    swift_bridgeObjectRelease();

    *(void *)__int16 v78 = v42;
    swift_allocObject();
    swift_weakInit();
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v65 = OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment_deviceStorage;
    uint64_t v43 = *(void *)&v76[OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment_deviceStorage];
    *(void *)__int16 v78 = *(void *)(v43 + 40);
    sub_10000A38C(&qword_10035ABB8);
    sub_10000B010(&qword_10035ABC0, &qword_10035ABB8);
    *(void *)__int16 v78 = Publisher.eraseToAnyPublisher()();
    [*(id *)(v43 + 32) lock];
    swift_beginAccess();
    uint64_t v44 = swift_bridgeObjectRetain();
    uint64_t v45 = sub_1000F06FC(v44);
    swift_bridgeObjectRelease();
    [*(id *)(v43 + 32) unlock];
    uint64_t v77 = v45;
    sub_10000A38C(&qword_10035ABC8);
    sub_10000A38C(&qword_10035CA78);
    sub_10000B010(&qword_10035ABD0, &qword_10035ABC8);
    sub_10000B010((unint64_t *)&unk_1003680B0, &qword_10035CA78);
    uint64_t v46 = v66;
    Publisher.prepend<A>(_:)();
    swift_release();
    swift_release();
    swift_allocObject();
    swift_weakInit();
    sub_10000B010(&qword_10035F7B0, (uint64_t *)&unk_1003680A0);
    uint64_t v47 = v58;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v46, v47);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    *(void *)__int16 v78 = *(void *)(*(void *)&v76[v65] + 56);
    *(void *)__int16 v78 = Publisher.eraseToAnyPublisher()();
    swift_allocObject();
    swift_weakInit();
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    *(void *)__int16 v78 = sub_100117AF4();
    swift_retain();
    sub_10000A38C(&qword_10035AC80);
    sub_10000A38C(&qword_10035F7B8);
    sub_10000B010(&qword_10035AC88, &qword_10035AC80);
    unint64_t v48 = v69;
    Publisher.map<A>(_:)();
    swift_release();
    swift_release();
    sub_10000B010(&qword_10035F7C0, &qword_10035F748);
    sub_10000B010(&qword_10035F7C8, &qword_10035F7B8);
    uint64_t v49 = v59;
    uint64_t v50 = v60;
    Publisher<>.switchToLatest()();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v48, v50);
    swift_allocObject();
    swift_weakInit();
    sub_10000B010(&qword_10035F7D0, &qword_10035F750);
    uint64_t v51 = v61;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v49, v51);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    sub_10011A160();
    if (swift_weakLoadStrong())
    {
      id v52 = [self processInfo];
      unsigned int v53 = [v52 processIdentifier];
      swift_release();

      Swift::String v54 = (const mach_header_64 *)v53;
    }
    else
    {
      Swift::String v54 = &_mh_execute_header;
    }
    *(void *)__int16 v78 = v54;
    *(_OWORD *)&v78[8] = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    __int16 v81 = 0x4000;
    sub_10007D07C((uint64_t)v78);
    swift_release();
  }
  else
  {
    id v55 = sub_1001F666C();
    uint64_t v76 = (char *)String._bridgeToObjectiveC()();
    [v55 ulog:60 message:v76];

    uint64_t v56 = v76;
  }
}

void sub_100072A48(uint64_t *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v129 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = a1[2];
  unint64_t v142 = a1[3];
  uint64_t v9 = a1[4];
  unint64_t v8 = a1[5];
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = Strong;
    uint64_t v139 = v9;
    swift_beginAccess();
    uint64_t v12 = swift_weakLoadStrong();
    if (!v12)
    {
      id v23 = sub_1001F666C();
      NSString v24 = String._bridgeToObjectiveC()();
      [v23 ulog:60 message:v24];
      goto LABEL_12;
    }
    uint64_t v13 = v12;
    uint64_t v137 = v6;
    unint64_t v138 = v5;
    if (v142 >> 62)
    {
      if (v142 >> 62 == 1)
      {
        unint64_t v133 = v8;
        uint64_t v14 = *(void *)(v6 + 16);
        if (v5)
        {
          if (v14)
          {
            uint64_t v134 = v7;
            uint64_t v135 = v12;
            uint64_t v132 = (unsigned int *)v11;
            unint64_t v141 = type metadata accessor for ProxControlDemoBridgeServer();
            swift_bridgeObjectRetain();
            uint64_t v140 = 0x80000001002B5780;
            id v136 = (char *)0xD000000000000017;
            do
            {
              uint64_t v146 = (const mach_header_64 *)v141;
              sub_10000A38C(&qword_10035F878);
              uint64_t v43 = String.init<A>(describing:)();
              sub_10016B950(60, 0xE100000000000000, v43, v44);
              if ((v45 & 1) == 0)
              {
                String.subscript.getter();
                swift_bridgeObjectRelease();
                static String._fromSubstring(_:)();
                swift_bridgeObjectRelease();
              }
              id v38 = objc_allocWithZone((Class)CULogHandle);
              NSString v39 = String._bridgeToObjectiveC()();
              NSString v40 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              id v41 = [v38 initWithSubsystem:v39 category:v40];

              NSString v42 = String._bridgeToObjectiveC()();
              [v41 ulog:60 message:v42];

              --v14;
            }
            while (v14);
            goto LABEL_29;
          }
        }
        else if (v14)
        {
          uint64_t v134 = v7;
          uint64_t v135 = v12;
          uint64_t v132 = (unsigned int *)v11;
          unint64_t v141 = type metadata accessor for ProxControlDemoBridgeServer();
          swift_bridgeObjectRetain();
          uint64_t v140 = 0x80000001002B5780;
          id v136 = (char *)0xD000000000000017;
          do
          {
            uint64_t v146 = (const mach_header_64 *)v141;
            sub_10000A38C(&qword_10035F878);
            uint64_t v20 = String.init<A>(describing:)();
            sub_10016B950(60, 0xE100000000000000, v20, v21);
            if ((v22 & 1) == 0)
            {
              String.subscript.getter();
              swift_bridgeObjectRelease();
              static String._fromSubstring(_:)();
              swift_bridgeObjectRelease();
            }
            id v15 = objc_allocWithZone((Class)CULogHandle);
            NSString v16 = String._bridgeToObjectiveC()();
            NSString v17 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v18 = [v15 initWithSubsystem:v16 category:v17];

            NSString v19 = String._bridgeToObjectiveC()();
            [v18 ulog:60 message:v19];

            --v14;
          }
          while (v14);
LABEL_29:
          sub_10003A58C(v137, v138, v134, v142);
          swift_release();
LABEL_39:
          swift_release();
          return;
        }
        goto LABEL_38;
      }
      unint64_t v34 = v7 | v5;
      if (v142 == 0x8000000000000000 && !(v34 | v6 | v139 | v8))
      {
        if (swift_weakLoadStrong())
        {
          id v35 = [self processInfo];
          unsigned int v36 = [v35 processIdentifier];
          swift_release();

          id v37 = (const mach_header_64 *)v36;
        }
        else
        {
          id v37 = &_mh_execute_header;
        }
        uint64_t v146 = v37;
        long long v147 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        __int16 v150 = 0x4000;
        sub_10007D07C((uint64_t)&v146);
        goto LABEL_38;
      }
      if (v142 == 0x8000000000000000 && v6 == 1 && !(v34 | v139 | v8))
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      if (qword_10035A5B0 == -1)
      {
LABEL_34:
        if (qword_1003AC8F0) {
          sub_1001607FC();
        }
        goto LABEL_38;
      }
LABEL_78:
      swift_once();
      goto LABEL_34;
    }
    uint64_t v25 = *(void *)(v12 + OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment_deviceStorage);
    [*(id *)(v25 + 32) lock];
    swift_beginAccess();
    uint64_t v26 = swift_bridgeObjectRetain();
    uint64_t v27 = sub_1000F06FC(v26);
    swift_bridgeObjectRelease();
    [*(id *)(v25 + 32) unlock];
    swift_bridgeObjectRetain();
    unint64_t v28 = (unint64_t)sub_1000760D0((unint64_t)v27, v139, (void *)v8);
    swift_release();
    uint64_t v29 = (void *)v8;
    swift_bridgeObjectRelease();
    unint64_t v30 = v28 >> 62;
    if (v28 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v46)
      {
LABEL_16:
        if ((v28 & 0xC000000000000001) != 0)
        {
          uint64_t v31 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v32 = v28 & 0xFFFFFFFFFFFFFF8;
          if (!v30)
          {
LABEL_19:
            uint64_t v33 = *(void *)(v32 + 16);
LABEL_45:
            swift_bridgeObjectRelease();
            if (v33 != 1)
            {
              uint64_t v144 = 0;
              unint64_t v145 = 0xE000000000000000;
              _StringGuts.grow(_:)(38);
              swift_bridgeObjectRelease();
              uint64_t v144 = 0xD000000000000024;
              unint64_t v145 = 0x80000001002B57A0;
              v64._uint64_t countAndFlagsBits = v139;
              v64._object = v29;
              String.append(_:)(v64);
              id v65 = sub_1001F666C();
              swift_bridgeObjectRetain();
              NSString v66 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v65 ulog:40 message:v66];
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();

              return;
            }
            uint64_t v144 = 0;
            unint64_t v145 = 0xE000000000000000;
            _StringGuts.grow(_:)(26);
            swift_bridgeObjectRelease();
            unint64_t v141 = 0xD000000000000014;
            uint64_t v144 = 0xD000000000000014;
            unint64_t v145 = 0x80000001002B57D0;
            v50._uint64_t countAndFlagsBits = v139;
            v50._object = v29;
            String.append(_:)(v50);
            v51._uint64_t countAndFlagsBits = 8250;
            v51._object = (void *)0xE200000000000000;
            String.append(_:)(v51);
            v52._uint64_t countAndFlagsBits = sub_1001F78E0();
            String.append(_:)(v52);
            swift_bridgeObjectRelease();
            id v53 = sub_1001F666C();
            swift_bridgeObjectRetain();
            NSString v54 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v53 ulog:40 message:v54];
            swift_bridgeObjectRelease();

            if (v142)
            {
              if (v138)
              {
                uint64_t v144 = 0;
                unint64_t v145 = 0xE000000000000000;
                swift_bridgeObjectRetain();
                _StringGuts.grow(_:)(30);
                v102._uint64_t countAndFlagsBits = 0xD000000000000018;
                v102._object = (void *)0x80000001002B57F0;
                String.append(_:)(v102);
                swift_retain();
                uint64_t v103 = sub_1001F7514();
                id v105 = v104;
                swift_release();
                v106._uint64_t countAndFlagsBits = v103;
                v106._object = v105;
                String.append(_:)(v106);
                swift_bridgeObjectRelease();
                v107._uint64_t countAndFlagsBits = 8250;
                v107._object = (void *)0xE200000000000000;
                String.append(_:)(v107);
                uint64_t v143 = v6;
                _print_unlocked<A, B>(_:_:)();
                id v108 = sub_1001F666C();
                swift_bridgeObjectRetain();
                NSString v109 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                [v108 ulog:40 message:v109];
                swift_bridgeObjectRelease();

                uint64_t v110 = *(void *)(v6 + 16);
                if (v110)
                {
                  uint64_t v134 = v7;
                  uint64_t v135 = v13;
                  uint64_t v132 = (unsigned int *)v11;
                  uint64_t v111 = (unsigned int *)(v6 + 32);
                  uint64_t v140 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__region;
                  int64_t v112 = &_ss13DecodingErrorO12typeMismatchyABypXp_AB7ContextVtcABmFWC_ptr;
                  uint64_t v139 = (uint64_t)"WB because nearbyID exists";
                  unint64_t v142 = 0x80000001002B1F00;
                  id v136 = "Unsetting overrides for ";
                  do
                  {
                    if (((*v111 | (unint64_t)((uint64_t)*((char *)v111 + 4) << 32)) & 0x8000000000000000) != 0)
                    {
                      uint64_t v144 = sub_10000A38C(&qword_10035E120);
                      swift_retain();
                      sub_10000A38C(&qword_10035F880);
                      uint64_t v121 = String.init<A>(describing:)();
                      sub_10016B950(60, 0xE100000000000000, v121, v122);
                      if ((v123 & 1) == 0)
                      {
                        String.subscript.getter();
                        swift_bridgeObjectRelease();
                        static String._fromSubstring(_:)();
                        int64_t v112 = &_ss13DecodingErrorO12typeMismatchyABypXp_AB7ContextVtcABmFWC_ptr;
                        swift_bridgeObjectRelease();
                      }
                      id v124 = objc_allocWithZone((Class)v112[57]);
                      NSString v125 = String._bridgeToObjectiveC()();
                      NSString v126 = String._bridgeToObjectiveC()();
                      swift_bridgeObjectRelease();
                      id v127 = [v124 initWithSubsystem:v125 category:v126];

                      NSString v128 = String._bridgeToObjectiveC()();
                      [v127 ulog:40 message:v128];

                      LOBYTE(v144) = 6;
                    }
                    else
                    {
                      uint64_t v144 = sub_10000A38C(&qword_10035E118);
                      swift_retain();
                      sub_10000A38C(&qword_10035F888);
                      uint64_t v118 = String.init<A>(describing:)();
                      sub_10016B950(60, 0xE100000000000000, v118, v119);
                      if ((v120 & 1) == 0)
                      {
                        String.subscript.getter();
                        swift_bridgeObjectRelease();
                        static String._fromSubstring(_:)();
                        int64_t v112 = &_ss13DecodingErrorO12typeMismatchyABypXp_AB7ContextVtcABmFWC_ptr;
                        swift_bridgeObjectRelease();
                      }
                      id v113 = objc_allocWithZone((Class)v112[57]);
                      NSString v114 = String._bridgeToObjectiveC()();
                      NSString v115 = String._bridgeToObjectiveC()();
                      swift_bridgeObjectRelease();
                      id v116 = [v113 initWithSubsystem:v114 category:v115];

                      NSString v117 = String._bridgeToObjectiveC()();
                      [v116 ulog:40 message:v117];

                      LODWORD(v144) = 0;
                      WORD2(v144) = 256;
                    }
                    CurrentValueSubject.send(_:)();
                    swift_release();
                    v111 += 2;
                    --v110;
                  }
                  while (v110);
                  sub_10003A5EC(v137, v138, v134, 1);
                  swift_release();
                  swift_release();
                  goto LABEL_39;
                }
              }
              else
              {
                uint64_t v144 = 0;
                unint64_t v145 = 0xE000000000000000;
                swift_bridgeObjectRetain();
                _StringGuts.grow(_:)(28);
                v67._uint64_t countAndFlagsBits = 0xD000000000000016;
                v67._object = (void *)0x80000001002B5830;
                String.append(_:)(v67);
                swift_retain();
                uint64_t v68 = sub_1001F7514();
                uint64_t v70 = v69;
                swift_release();
                v71._uint64_t countAndFlagsBits = v68;
                v71._object = v70;
                String.append(_:)(v71);
                swift_bridgeObjectRelease();
                v72._uint64_t countAndFlagsBits = 8250;
                v72._object = (void *)0xE200000000000000;
                String.append(_:)(v72);
                uint64_t v143 = v6;
                _print_unlocked<A, B>(_:_:)();
                id v73 = sub_1001F666C();
                swift_bridgeObjectRetain();
                NSString v74 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                [v73 ulog:40 message:v74];
                swift_bridgeObjectRelease();

                uint64_t v75 = v31;
                uint64_t v76 = *(void *)(v6 + 16);
                if (v76)
                {
                  uint64_t v139 = v75;
                  uint64_t v77 = (unsigned int *)(v6 + 32);
                  uint64_t v131 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__region;
                  unint64_t v130 = (unint64_t)"Setting overrides for ";
                  id v136 = (char *)0x80000001002B5850;
                  v129[1] = "WB because nearbyID exists";
                  unint64_t v133 = 0x80000001002B1F00;
                  uint64_t v135 = v13;
                  uint64_t v134 = v7;
                  do
                  {
                    unint64_t v83 = *v77 | ((unint64_t)*((unsigned __int8 *)v77 + 4) << 32);
                    if ((v83 & 0x8000000000) != 0)
                    {
                      unint64_t v90 = *(void *)(v139 + v131);
                      uint64_t v144 = 0;
                      unint64_t v145 = 0xE000000000000000;
                      unint64_t v142 = v90;
                      swift_retain();
                      v91._object = (void *)(v130 | 0x8000000000000000);
                      v91._uint64_t countAndFlagsBits = v141;
                      String.append(_:)(v91);
                      v92._uint64_t countAndFlagsBits = 8250;
                      v92._object = (void *)0xE200000000000000;
                      String.append(_:)(v92);
                      LOBYTE(v143) = v83;
                      sub_10000A38C(&qword_10035AC68);
                      _print_unlocked<A, B>(_:_:)();
                      uint64_t v93 = v144;
                      uint64_t v144 = sub_10000A38C(&qword_10035E120);
                      sub_10000A38C(&qword_10035F880);
                      uint64_t v94 = String.init<A>(describing:)();
                      sub_10016B950(60, 0xE100000000000000, v94, v95);
                      if ((v96 & 1) == 0)
                      {
                        String.subscript.getter();
                        uint64_t v140 = v93;
                        swift_bridgeObjectRelease();
                        static String._fromSubstring(_:)();
                        swift_bridgeObjectRelease();
                      }
                      id v97 = objc_allocWithZone((Class)CULogHandle);
                      NSString v98 = String._bridgeToObjectiveC()();
                      NSString v99 = String._bridgeToObjectiveC()();
                      swift_bridgeObjectRelease();
                      id v100 = [v97 initWithSubsystem:v98 category:v99];

                      swift_bridgeObjectRetain();
                      NSString v101 = String._bridgeToObjectiveC()();
                      swift_bridgeObjectRelease();
                      [v100 ulog:40 message:v101];
                      swift_bridgeObjectRelease();

                      LOBYTE(v144) = v83;
                    }
                    else
                    {
                      unint64_t v84 = *(void *)(v139 + 24);
                      uint64_t v144 = 0;
                      unint64_t v145 = 0xE000000000000000;
                      unint64_t v142 = v84;
                      swift_retain();
                      v85._uint64_t countAndFlagsBits = v141;
                      v85._object = v136;
                      String.append(_:)(v85);
                      v86._uint64_t countAndFlagsBits = 8250;
                      v86._object = (void *)0xE200000000000000;
                      String.append(_:)(v86);
                      LODWORD(v143) = v83;
                      uint64_t v140 = HIDWORD(v83) & 1;
                      BYTE4(v143) = BYTE4(v83) & 1;
                      sub_10000A38C((uint64_t *)&unk_10036C110);
                      _print_unlocked<A, B>(_:_:)();
                      uint64_t v144 = sub_10000A38C(&qword_10035E118);
                      sub_10000A38C(&qword_10035F888);
                      uint64_t v87 = String.init<A>(describing:)();
                      sub_10016B950(60, 0xE100000000000000, v87, v88);
                      if ((v89 & 1) == 0)
                      {
                        String.subscript.getter();
                        uint64_t v132 = v77;
                        swift_bridgeObjectRelease();
                        uint64_t v77 = v132;
                        static String._fromSubstring(_:)();
                        swift_bridgeObjectRelease();
                      }
                      id v78 = objc_allocWithZone((Class)CULogHandle);
                      NSString v79 = String._bridgeToObjectiveC()();
                      NSString v80 = String._bridgeToObjectiveC()();
                      swift_bridgeObjectRelease();
                      id v81 = [v78 initWithSubsystem:v79 category:v80];

                      swift_bridgeObjectRetain();
                      NSString v82 = String._bridgeToObjectiveC()();
                      swift_bridgeObjectRelease();
                      [v81 ulog:40 message:v82];
                      swift_bridgeObjectRelease();

                      WORD2(v144) = v140;
                      LODWORD(v144) = v83;
                    }
                    CurrentValueSubject.send(_:)();
                    swift_release();
                    v77 += 2;
                    --v76;
                  }
                  while (v76);
                  sub_10003A5EC(v137, v138, v134, 1);
                  swift_release();
                  goto LABEL_38;
                }
              }
              sub_10003A5EC(v6, v138, v7, 1);
              swift_release();
LABEL_38:
              swift_release();
              goto LABEL_39;
            }
            swift_bridgeObjectRetain();
            unint64_t v55 = v138;
            sub_10001F9D4(v6, v138);
            uint64_t v56 = sub_10003E5A8();
            if (v56)
            {
              uint64_t v57 = (void *)v56;
              uint64_t v58 = (void *)sub_100125088()[4];
              id v59 = v58;
              swift_release();
              if (v58)
              {
                uint64_t v60 = sub_1000766CC(&qword_10035F890, (void (*)(uint64_t))type metadata accessor for RapportProxy);
                uint64_t v61 = type metadata accessor for TaskPriority();
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v4, 1, 1, v61);
                uint64_t v62 = (void *)swift_allocObject();
                v62[2] = 0;
                v62[3] = 0;
                unint64_t v63 = v138;
                v62[4] = v137;
                v62[5] = v63;
                void v62[6] = v7;
                v62[7] = v59;
                v62[8] = v60;
                v62[9] = v57;
                v62[10] = v11;
                swift_retain();
                sub_100255A24((uint64_t)v4, (uint64_t)&unk_10035F8A0, (uint64_t)v62);
                swift_release();
                swift_release();
                swift_release();
                goto LABEL_39;
              }
              sub_100020414(v137, v138);
              swift_bridgeObjectRelease();
              id v23 = sub_1001F666C();
              NSString v24 = String._bridgeToObjectiveC()();
              [v23 ulog:40 message:v24];
              swift_release();
              swift_release();
              swift_release();

LABEL_13:
              return;
            }
            sub_100020414(v6, v55);
            swift_bridgeObjectRelease();
            id v23 = sub_1001F666C();
            NSString v24 = String._bridgeToObjectiveC()();
            [v23 ulog:40 message:v24];
            swift_release();
            swift_release();
LABEL_12:
            swift_release();
            goto LABEL_13;
          }
        }
        else
        {
          if (!*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_78;
          }
          uint64_t v31 = *(void *)(v28 + 32);
          swift_retain();
          uint64_t v32 = v28 & 0xFFFFFFFFFFFFFF8;
          if (!v30) {
            goto LABEL_19;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
    }
    else if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
    uint64_t v144 = 0;
    unint64_t v145 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    uint64_t v144 = 0xD00000000000001DLL;
    unint64_t v145 = 0x80000001002B58C0;
    v47._uint64_t countAndFlagsBits = v139;
    v47._object = v29;
    String.append(_:)(v47);
    id v48 = sub_1001F666C();
    swift_bridgeObjectRetain();
    NSString v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v48 ulog:40 message:v49];
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
}

uint64_t sub_1000741B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[15] = a7;
  v7[16] = v9;
  v7[13] = a5;
  v7[14] = a6;
  v7[12] = a4;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000741E8, 0, 0);
}

uint64_t sub_1000741E8()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  unint64_t v4 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v5 = v0[12];
  v0[5] = &type metadata for LaunchAppRequest;
  v0[6] = &off_100331810;
  uint64_t v6 = (void *)swift_allocObject();
  v0[2] = v6;
  v6[2] = v5;
  uint64_t v6[3] = v4;
  v6[4] = 0;
  v6[5] = v3;
  sub_10001F9D4(v5, v4);
  swift_bridgeObjectRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[17] = v7;
  v7[2] = v2;
  uint64_t v7[3] = v0 + 2;
  v7[4] = v1;
  unint64_t v8 = (void *)swift_task_alloc();
  v0[18] = v8;
  uint64_t v9 = sub_10000A38C(&qword_10035F8A8);
  *unint64_t v8 = v0;
  v8[1] = sub_100074354;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0xD000000000000012, 0x80000001002B5950, sub_100076984, v7, v9);
}

uint64_t sub_100074354()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000744E4;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100074470;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_100074470()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000CC5C(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000744E4()
{
  uint64_t v1 = v0[19];
  swift_task_dealloc();
  sub_10000CC5C((uint64_t)(v0 + 2));
  _StringGuts.grow(_:)(31);
  v0[9] = 0;
  v0[10] = 0xE000000000000000;
  v2._object = (void *)0x80000001002B5970;
  v2._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v2);
  v0[11] = v1;
  sub_10000A38C((uint64_t *)&unk_100365D60);
  _print_unlocked<A, B>(_:_:)();
  id v3 = sub_1001F666C();
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 ulog:40 message:v4];

  swift_errorRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

unsigned __int8 *sub_100074638(unsigned __int8 *result)
{
  if (*result >= 2u)
  {
    swift_beginAccess();
    unint64_t result = (unsigned __int8 *)swift_weakLoadStrong();
    if (result)
    {
      uint64_t v1 = (void (*)(unsigned __int8 *))*((void *)result + 6);
      sub_1000766BC((uint64_t)v1);
      unint64_t result = (unsigned __int8 *)swift_release();
      if (v1)
      {
        v1(result);
        return (unsigned __int8 *)sub_10000F088((uint64_t)v1);
      }
    }
  }
  return result;
}

uint64_t sub_1000746C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v28 = sub_10000A38C(&qword_10035F838);
  uint64_t v27 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10035F840);
  uint64_t v26 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10000A38C(&qword_10035F848);
  uint64_t v30 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v29 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    sub_100074D48((uint64_t)&v34);
    uint64_t v11 = &_mh_execute_header;
    if (!v37) {
      uint64_t v11 = 0;
    }
    v41[0] = v34;
    v41[1] = v35;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    unint64_t v42 = (unint64_t)v11 | v36 | ((unint64_t)v38 << 40);
    __int16 v45 = -16384;
    sub_10007D07C((uint64_t)v41);
    swift_release();
    long long v40 = v34;
    sub_10007661C((uint64_t)&v40);
    sub_100076648((uint64_t)&v35, (uint64_t)v39);
    sub_10007661C((uint64_t)v39);
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v13 = result;
    swift_retain();
    uint64_t v25 = UUID.uuidString.getter();
    uint64_t v24 = v14;
    swift_release();
    uint64_t v32 = *(void *)(v10 + 24);
    swift_retain();
    sub_10000A38C(&qword_10035E118);
    uint64_t v23 = a2;
    sub_10000B010(&qword_10035E488, &qword_10035E118);
    Publisher.map<A>(_:)();
    sub_10000B010(&qword_10035F858, &qword_10035F840);
    uint64_t v15 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v6);
    swift_release();
    uint64_t v32 = v15;
    uint64_t v33 = *(void *)(v10 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__region);
    swift_retain();
    sub_10000A38C(&qword_10035E120);
    sub_10000B010(&qword_10035E450, &qword_10035E120);
    Publisher.map<A>(_:)();
    sub_10000B010(&qword_10035F860, &qword_10035F838);
    uint64_t v16 = v28;
    uint64_t v17 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v16);
    swift_release();
    uint64_t v33 = v17;
    sub_10000A38C((uint64_t *)&unk_100367FA0);
    sub_10000B010(&qword_10036B020, (uint64_t *)&unk_100367FA0);
    id v18 = v29;
    Publishers.Merge.init(_:_:)();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v23;
    *(void *)(v19 + 24) = v10;
    sub_10000B010(&qword_10035F868, &qword_10035F848);
    swift_retain();
    swift_retain();
    uint64_t v20 = v31;
    uint64_t v21 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v20);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v33 = *(void *)(v13 + 40);
    *(void *)(v13 + 40) = 0x8000000000000000;
    sub_100264FBC(v21, v25, v24, isUniquelyReferenced_nonNull_native);
    *(void *)(v13 + 40) = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_100074D48@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  uint64_t v2 = UUID.uuidString.getter();
  uint64_t v4 = v3;
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v5 = sub_100098144();
  uint64_t v7 = v6;
  swift_release();
  swift_retain();
  CurrentValueSubject.value.getter();
  if (v16)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    int v8 = v12;
    char v9 = v13;
  }
  else
  {
    int v8 = v14;
    swift_release();
    char v9 = v15 & 1;
  }
  swift_retain();
  CurrentValueSubject.value.getter();
  char v10 = v12;
  if (v12 == 6)
  {
    CurrentValueSubject.value.getter();
    uint64_t result = swift_release();
    char v10 = v14;
  }
  else
  {
    uint64_t result = swift_release();
  }
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 36) = v9;
  *(unsigned char *)(a1 + 37) = v10;
  return result;
}

uint64_t sub_100074ED4()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    sub_100074D48((uint64_t)&v2);
    uint64_t v1 = &_mh_execute_header;
    if (!v5) {
      uint64_t v1 = 0;
    }
    v9[0] = v2;
    v9[1] = v3;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unint64_t v10 = (unint64_t)v1 | v4 | ((unint64_t)v6 << 40);
    __int16 v13 = -16384;
    sub_10007D07C((uint64_t)v9);
    swift_release();
    long long v8 = v2;
    sub_10007661C((uint64_t)&v8);
    sub_100076648((uint64_t)&v3, (uint64_t)v7);
    return sub_10007661C((uint64_t)v7);
  }
  return result;
}

uint64_t sub_100074FC8()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    swift_retain();
    uint64_t v0 = UUID.uuidString.getter();
    uint64_t v2 = v1;
    swift_release();
    v8[0] = v0;
    v8[1] = v2;
    long long v9 = 0u;
    long long v10 = 0u;
    uint64_t v11 = 0;
    __int16 v12 = -16128;
    sub_10007D07C((uint64_t)v8);
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    uint64_t v4 = UUID.uuidString.getter();
    uint64_t v6 = v5;
    swift_release();
    swift_beginAccess();
    uint64_t v7 = sub_1001305F0(v4, v6);
    swift_endAccess();
    swift_release();
    swift_bridgeObjectRelease();
    return sub_10007660C(v7);
  }
  return result;
}

uint64_t sub_100075130@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v58 = a2;
  NSString v66 = a3;
  uint64_t v63 = sub_10000A38C(&qword_10035F4D8);
  uint64_t v61 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  id v59 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000A38C(&qword_10035F7D8);
  uint64_t v62 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v60 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10000A38C(&qword_10035F7E0);
  uint64_t v50 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  NSString v49 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10035F7E8);
  uint64_t v46 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000A38C(&qword_10035F7F0);
  uint64_t v47 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_10035F7F8);
  uint64_t v54 = *(void *)(v12 - 8);
  uint64_t v55 = v12;
  __chkstk_darwin(v12);
  Swift::String v52 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000A38C(&qword_10035F800);
  uint64_t v56 = *(void *)(v14 - 8);
  uint64_t v57 = v14;
  __chkstk_darwin(v14);
  id v53 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000A38C(&qword_10035F808);
  uint64_t v65 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a1;
  if (*a1)
  {
    swift_retain();
    uint64_t v19 = UUID.uuidString.getter();
    uint64_t v21 = v20;
    swift_release();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v22 = sub_100098144();
    uint64_t v24 = v23;
    swift_release();
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v21 = 0;
  }
  v69[0] = v19;
  v69[1] = v21;
  v69[2] = v22;
  uint64_t v70 = v24;
  LOBYTE(v71) = 0;
  Just.init(_:)();
  if (v18)
  {
    swift_retain();
    sub_10005E918(v69);
    uint64_t v25 = v70;
    uint64_t v26 = v71;
    sub_10000D6E4(v69, v70);
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 32))(v25, v26);
    sub_10000CC5C((uint64_t)v69);
    v69[0] = v27;
    sub_10000A38C(&qword_10035F310);
    sub_10000B010(&qword_100367730, &qword_10035F310);
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035F810, &qword_10035F808);
    sub_10000B010(&qword_10035F818, &qword_10035F7E8);
    Publisher.merge<A>(with:)();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v7);
    sub_10005E918(v69);
    uint64_t v28 = v70;
    uint64_t v29 = v71;
    sub_10000D6E4(v69, v70);
    uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 40))(v28, v29);
    sub_10000A38C((uint64_t *)&unk_1003676A0);
    sub_10000B010(&qword_10035F2D0, (uint64_t *)&unk_1003676A0);
    uint64_t v30 = v49;
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000CC5C((uint64_t)v69);
    sub_10000B010(&qword_10035F820, &qword_10035F7E0);
    uint64_t v31 = v52;
    uint64_t v32 = v48;
    uint64_t v33 = v51;
    Publishers.Merge.merge<A>(with:)();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v30, v33);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v32);
    v69[0] = sub_10011A0C0();
    swift_retain();
    sub_10000A38C((uint64_t *)&unk_1003675F0);
    sub_10000B010(&qword_10035F5B8, (uint64_t *)&unk_1003675F0);
    long long v34 = v59;
    Publisher.filter(_:)();
    swift_release();
    swift_release();
    sub_10000B010(&qword_10035F5C0, &qword_10035F4D8);
    long long v35 = v60;
    uint64_t v36 = v63;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v34, v36);
    sub_10000B010(&qword_10035F828, &qword_10035F7D8);
    char v37 = v53;
    uint64_t v38 = v55;
    uint64_t v39 = v64;
    Publishers.Merge3.merge<A>(with:)();
    long long v40 = v35;
    uint64_t v41 = v67;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v40, v39);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v31, v38);
    sub_10000B010(&qword_10035F830, &qword_10035F800);
    uint64_t v42 = v57;
    uint64_t v43 = Publisher.eraseToAnyPublisher()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v37, v42);
  }
  else
  {
    sub_10000B010(&qword_10035F810, &qword_10035F808);
    uint64_t v41 = v67;
    uint64_t v43 = Publisher.eraseToAnyPublisher()();
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v17, v41);
  *NSString v66 = v43;
  return result;
}

uint64_t sub_100075B44@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10025B420(*a1);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 1;
  return result;
}

uint64_t sub_100075B7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_10025C5BC();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 3;
  return result;
}

uint64_t sub_100075BB4(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + *(int *)(sub_10000A38C((uint64_t *)&unk_10035E840) + 48));
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  swift_retain();
  uint64_t v4 = UUID.uuidString.getter();
  uint64_t v6 = v5;
  swift_release();
  if (v3 == v4 && v2 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100075C6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000A38C((uint64_t *)&unk_10035E840);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(int *)(v5 + 56);
  long long v9 = &v7[v8];
  uint64_t v10 = *(int *)(v5 + 72);
  uint64_t v11 = &v7[v10];
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a1 + v10);
  sub_10004D310(a1, (uint64_t)v7);
  uint64_t v14 = v12[1];
  *(void *)long long v9 = *v12;
  *((void *)v9 + 1) = v14;
  uint64_t v15 = v13[1];
  *(void *)uint64_t v11 = *v13;
  *((void *)v11 + 1) = v15;
  uint64_t v16 = sub_10025B6EC();
  uint64_t v18 = v17;
  uint64_t result = sub_10004D374((uint64_t)v7);
  *(void *)a2 = v16;
  *(void *)(a2 + 8) = v18;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 2;
  return result;
}

uint64_t sub_100075D4C(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 32);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    v7[0] = v1;
    v7[1] = v2;
    v7[2] = v3;
    uint64_t v7[3] = v4;
    v7[5] = 0;
    v7[6] = 0;
    v7[4] = v5;
    __int16 v8 = 0x8000;
    sub_10007653C(v1, v2, v3, v4, v5);
    sub_10007D07C((uint64_t)v7);
    swift_release();
    return sub_100076598(v1, v2, v3, v4, v5);
  }
  return result;
}

uint64_t sub_100075E2C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ProxControlDemoBridgeServer();
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

void *sub_100075E6C()
{
  return &protocol witness table for ObjectIdentifier;
}

uint64_t sub_100075E78@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(unsigned char *)@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X7>, uint64_t a7@<X8>, void *a8, unsigned int a9)
{
  sub_10003A44C(a1, (uint64_t)v17);
  sub_1000391E8(v17, a2, a3, a4, a5, a6, a8, (uint64_t)v16, a9);
  sub_10003A44C((uint64_t)v16, a7);
  return sub_100076990((uint64_t)v16);
}

uint64_t sub_100075F28(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a1 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      v8 &= v8 - 1;
      goto LABEL_5;
    }
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v14 >= v9) {
      goto LABEL_24;
    }
    uint64_t v15 = *(void *)(v5 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v9) {
        goto LABEL_24;
      }
      uint64_t v15 = *(void *)(v5 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v9) {
          goto LABEL_24;
        }
        uint64_t v15 = *(void *)(v5 + 8 * v11);
        if (!v15)
        {
          int64_t v11 = v14 + 3;
          if (v14 + 3 >= v9) {
            goto LABEL_24;
          }
          uint64_t v15 = *(void *)(v5 + 8 * v11);
          if (!v15)
          {
            int64_t v16 = v14 + 4;
            if (v16 >= v9)
            {
LABEL_24:
              uint64_t v17 = 0;
              goto LABEL_25;
            }
            uint64_t v15 = *(void *)(v5 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_27;
                }
                if (v11 >= v9) {
                  goto LABEL_24;
                }
                uint64_t v15 = *(void *)(v5 + 8 * v11);
                ++v16;
                if (v15) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
    }
LABEL_22:
    uint64_t v8 = (v15 - 1) & v15;
LABEL_5:
    swift_bridgeObjectRetain();
    v12._uint64_t countAndFlagsBits = a2;
    v12._object = a3;
    Swift::Bool v13 = String.hasPrefix(_:)(v12);
    uint64_t result = swift_bridgeObjectRelease();
    if (v13)
    {
      uint64_t v17 = 1;
LABEL_25:
      swift_release();
      return v17;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1000760D0(unint64_t a1, uint64_t a2, void *a3)
{
  if (a1 >> 62)
  {
LABEL_17:
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6)
    {
LABEL_3:
      for (unint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v8 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_14:
            __break(1u);
            return _swiftEmptyArrayStorage;
          }
        }
        else
        {
          if (i >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_17;
          }
          swift_retain();
          unint64_t v8 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_14;
          }
        }
        uint64_t v9 = v6;
        swift_retain();
        UUID.uuidString.getter();
        swift_release();
        v10._uint64_t countAndFlagsBits = a2;
        v10._object = a3;
        Swift::Bool v11 = String.hasPrefix(_:)(v10);
        swift_bridgeObjectRelease();
        if (v11) {
          goto LABEL_4;
        }
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        Swift::String v12 = sub_100098C94();
        swift_release();
        swift_bridgeObjectRetain();
        char v13 = sub_100075F28((uint64_t)v12, a2, a3);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v13)
        {
LABEL_4:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        uint64_t v6 = v9;
        if (v8 == v9) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t *sub_100076310(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  swift_weakInit();
  v3[4] = (uint64_t)&_swiftEmptySetSingleton;
  v3[5] = (uint64_t)&_swiftEmptyDictionarySingleton;
  v3[6] = 0;
  v3[7] = 0;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v5, (uint64_t)&off_1003222C0);
  swift_weakAssign();
  v3[3] = a2;
  swift_retain();
  sub_100071B60();
  return v3;
}

uint64_t sub_1000763E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100075E78(a1, *(uint64_t (**)(unsigned char *))(v2 + 16), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void **)(v2 + 64), a2, *(void **)(v2 + 72), *(_DWORD *)(v2 + 80));
}

uint64_t sub_100076420()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10007645C(uint64_t *a1)
{
}

uint64_t sub_100076468()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 84, 7);
}

uint64_t sub_1000764C8@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100039098(*a1, *(uint64_t (**)(char *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void **)(v2 + 64), *(void **)(v2 + 72), *(_DWORD *)(v2 + 80));
  *a2 = result;
  return result;
}

unsigned __int8 *sub_100076514(unsigned __int8 *result)
{
  return sub_100074638(result);
}

uint64_t sub_10007651C(uint64_t *a1)
{
  return sub_1000746C8(a1, v1);
}

uint64_t sub_100076524()
{
  return sub_100074FC8();
}

uint64_t sub_10007652C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100075130(a1, v2, a2);
}

uint64_t sub_100076534(uint64_t a1)
{
  return sub_100075D4C(a1);
}

uint64_t sub_10007653C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 1 >= 3)
  {
    if (a5) {
      return result;
    }
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_100076598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 1 >= 3)
  {
    if (a5) {
      return result;
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000765FC(uint64_t a1)
{
  return sub_100075BB4(a1);
}

uint64_t sub_10007660C(uint64_t result)
{
  if (result != 1) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10007661C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100076648(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10035F850);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000766B4()
{
  return sub_100074ED4();
}

uint64_t sub_1000766BC(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000766CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100076714()
{
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 40) >= 5uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10007677C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = sub_100076840;
  *(void *)(v5 + 128) = v4;
  *(_OWORD *)(v5 + 112) = v6;
  *(void *)(v5 + 96) = v2;
  *(void *)(v5 + 104) = v3;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000741E8, 0, 0);
}

uint64_t sub_100076840()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100076934()
{
  if (*(void *)(v0 + 24) >= 5uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100076984(uint64_t a1)
{
  return sub_1002123BC(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_100076990(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000769CC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001D790(v0, qword_10035F8B0);
  sub_10001D758(v0, (uint64_t)qword_10035F8B0);
  return Logger.init(subsystem:category:)();
}

id sub_100076A50()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (qword_10035A4F8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10001D758(v3, (uint64_t)qword_10035F8B0);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    long long v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Deinit", v6, 2u);
    swift_slowDealloc();
  }

  sub_100076B64();
  v8.receiver = v1;
  v8.super_class = ObjectType;
  return [super dealloc];
}

void sub_100076B64()
{
  uint64_t v1 = v0;
  if (qword_10035A4F8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10001D758(v2, (uint64_t)qword_10035F8B0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Invalidating...", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold19PCViewServiceHandle_remoteAlertHandle;
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC17proximitycontrold19PCViewServiceHandle_remoteAlertHandle);
  if (v7)
  {
    [v7 invalidate];
    uint64_t v7 = *(void **)(v1 + v6);
  }
  *(void *)(v1 + v6) = 0;
}

void sub_100076E00()
{
  uint64_t v2 = v0;
  if (qword_10035A4F8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10001D758(v3, (uint64_t)qword_10035F8B0);
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Activating...", v6, 2u);
    swift_slowDealloc();
  }

  id v7 = objc_allocWithZone((Class)SBSRemoteAlertDefinition);
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithServiceName:v8 viewControllerClassName:v9];

  id v11 = [objc_allocWithZone((Class)SBSRemoteAlertConfigurationContext) init];
  sub_10007722C(v2 + OBJC_IVAR____TtC17proximitycontrold19PCViewServiceHandle_context, (uint64_t)v18);
  uint64_t v12 = v19;
  if (v19)
  {
    uint64_t v13 = v20;
    sub_10000D6E4(v18, v19);
    sub_1000C2938(v11, v12, v13);
    if (v1)
    {

      sub_10000CC5C((uint64_t)v18);
      return;
    }
    sub_10000CC5C((uint64_t)v18);
  }
  else
  {
    sub_100077294((uint64_t)v18);
  }
  id v14 = [self newHandleWithDefinition:v10 configurationContext:v11];
  [v14 registerObserver:v2];
  uint64_t v15 = *(void **)(v2 + OBJC_IVAR____TtC17proximitycontrold19PCViewServiceHandle_remoteAlertHandle);
  *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold19PCViewServiceHandle_remoteAlertHandle) = v14;
  id v16 = v14;

  id v17 = [objc_allocWithZone((Class)SBSRemoteAlertActivationContext) init];
  [v16 activateWithContext:v17];
  (*(void (**)(uint64_t))(v2 + OBJC_IVAR____TtC17proximitycontrold19PCViewServiceHandle_eventHandler))(1);
}

void sub_1000770CC(char *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = *(void (**)(uint64_t))&a1[OBJC_IVAR____TtC17proximitycontrold19PCViewServiceHandle_eventHandler];
  id v7 = a3;
  NSString v8 = a1;
  v6(a4);
}

uint64_t type metadata accessor for PCViewServiceHandle()
{
  return self;
}

uint64_t sub_10007722C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C((uint64_t *)&unk_10035F970);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100077294(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C((uint64_t *)&unk_10035F970);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1000772F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v5[OBJC_IVAR____TtC17proximitycontrold19PCViewServiceHandle_remoteAlertHandle] = 0;
  uint64_t v12 = qword_10035A4F8;
  uint64_t v13 = v5;
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10001D758(v14, (uint64_t)qword_10035F8B0);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    id v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Init", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = &v13[OBJC_IVAR____TtC17proximitycontrold19PCViewServiceHandle_viewControllerClassName];
  *(void *)uint64_t v18 = a1;
  *((void *)v18 + 1) = a2;
  sub_10007722C(a3, (uint64_t)&v13[OBJC_IVAR____TtC17proximitycontrold19PCViewServiceHandle_context]);
  uint64_t v19 = &v13[OBJC_IVAR____TtC17proximitycontrold19PCViewServiceHandle_eventHandler];
  *(void *)uint64_t v19 = a4;
  *((void *)v19 + 1) = a5;
  swift_retain();

  v22.receiver = v13;
  v22.super_class = ObjectType;
  id v20 = [super init];
  sub_100077294(a3);
  return v20;
}

unsigned char *storeEnumTagSinglePayload for ClassicBannerEffect(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100077550);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClassicBannerEffect()
{
  return &type metadata for ClassicBannerEffect;
}

uint64_t sub_100077588()
{
  uint64_t v1 = 0x7373696D736964;
  if (*v0 != 1) {
    uint64_t v1 = 7368560;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x746E6573657270;
  }
}

unint64_t sub_1000775E0()
{
  unint64_t result = qword_10035F980;
  if (!qword_10035F980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035F980);
  }
  return result;
}

unint64_t sub_100077634()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_100261628();
}

uint64_t _s13CardPresentedVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s13CardPresentedVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v3;
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v4;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v5 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v5;
  uint64_t v6 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v6;
  uint64_t v7 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v7;
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  uint64_t v8 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v8;
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  uint64_t v9 = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = v9;
  uint64_t v10 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v10;
  uint64_t v11 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v11;
  uint64_t v12 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 284);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(_DWORD *)(a1 + 284) = v12;
  uint64_t v13 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v13;
  uint64_t v14 = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 312) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s13CardPresentedVwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 88) = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(void *)(a1 + 104) = a2[13];
  *(void *)(a1 + 112) = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = a2[15];
  *(void *)(a1 + 128) = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = a2[17];
  *(void *)(a1 + 144) = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
  *(void *)(a1 + 160) = a2[20];
  *(void *)(a1 + 168) = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[22];
  *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
  *(void *)(a1 + 176) = v8;
  uint64_t v9 = a2[24];
  *(unsigned char *)(a1 + 200) = *((unsigned char *)a2 + 200);
  *(void *)(a1 + 192) = v9;
  uint64_t v10 = a2[26];
  *(unsigned char *)(a1 + 216) = *((unsigned char *)a2 + 216);
  *(void *)(a1 + 208) = v10;
  uint64_t v11 = a2[28];
  *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
  *(void *)(a1 + 224) = v11;
  uint64_t v12 = a2[30];
  *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
  *(void *)(a1 + 240) = v12;
  uint64_t v13 = a2[32];
  *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
  *(void *)(a1 + 256) = v13;
  uint64_t v14 = a2[34];
  *(unsigned char *)(a1 + 280) = *((unsigned char *)a2 + 280);
  *(void *)(a1 + 272) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 71);
  *(unsigned char *)(a1 + 288) = *((unsigned char *)a2 + 288);
  *(_DWORD *)(a1 + 284) = v14;
  *(void *)(a1 + 296) = a2[37];
  *(void *)(a1 + 304) = a2[38];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a2[39];
  *(unsigned char *)(a1 + 320) = *((unsigned char *)a2 + 320);
  *(void *)(a1 + 312) = v15;
  return a1;
}

void *_s13CardPresentedVwtk(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x141uLL);
}

uint64_t _s13CardPresentedVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v6 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  uint64_t v9 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v10 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v10;
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  uint64_t v11 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  return a1;
}

uint64_t _s13CardPresentedVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 321)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 72);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s13CardPresentedVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 312) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(unsigned char *)(result + 320) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 321) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 321) = 0;
    }
    if (a2) {
      *(void *)(result + 72) = a2;
    }
  }
  return result;
}

ValueMetadata *_s13CardPresentedVMa()
{
  return &_s13CardPresentedVN;
}

unint64_t sub_100077CE4(uint64_t a1)
{
  unint64_t result = sub_100077D0C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100077D0C()
{
  unint64_t result = qword_10035F988;
  if (!qword_10035F988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035F988);
  }
  return result;
}

unint64_t sub_100077D60(uint64_t a1)
{
  unint64_t result = sub_100077D88();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100077D88()
{
  unint64_t result = qword_10035F990;
  if (!qword_10035F990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035F990);
  }
  return result;
}

uint64_t sub_100077DDC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v13 = sub_10000A38C(&qword_10035F998);
  __chkstk_darwin(v13);
  v12[1] = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000A38C(&qword_10035F9A0);
  uint64_t v16 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_10035F9A8);
  uint64_t v17 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_1001F985C();
  uint64_t v21 = sub_10003D9EC();
  uint64_t v20 = sub_10003CE48();
  uint64_t v19 = *(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_transferrableActivityPublisherKicker);
  swift_retain();
  sub_10000A38C((uint64_t *)&unk_100367F90);
  sub_10000B010((unint64_t *)&unk_10036B010, (uint64_t *)&unk_100367F90);
  Publisher.prepend(_:)();
  swift_release();
  sub_10000A38C(&qword_10035E3E8);
  sub_10000A38C(&qword_10035E410);
  sub_10000A38C(&qword_10035F358);
  sub_10000B010(&qword_10035E3F0, &qword_10035E3E8);
  sub_10000B010((unint64_t *)&unk_100367EA0, &qword_10035E410);
  sub_10000B010(&qword_10035F368, &qword_10035F358);
  sub_10000B010(&qword_10035F9B0, &qword_10035F998);
  Publishers.CombineLatest4.init(_:_:_:_:)();
  swift_retain();
  sub_10000A38C(&qword_10035F9B8);
  sub_10000B010(&qword_10035F9C0, &qword_10035F9A0);
  uint64_t v8 = v14;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v8);
  sub_10000B010(&qword_10035F9C8, &qword_10035F9A8);
  uint64_t v9 = v15;
  uint64_t v10 = Publisher.eraseToAnyPublisher()();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v7, v9);
  *uint64_t v18 = v10;
  return result;
}

unint64_t sub_100078208(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    unint64_t v4 = 0x61636F6C20746F4ELL;
  }
  else {
    unint64_t v4 = 0x6964656D20746F4ELL;
  }
  if (!a3 && (a2 & 1) == 0)
  {
    id v6 = a1;
    [v6 playbackState];
    if (MRMediaRemotePlaybackStateIsAdvancing())
    {
      unint64_t v4 = 0xD000000000000011;
      uint64_t v7 = *(void *)(a4 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_deviceActivity);
      if (*(void *)(*(void *)(v7 + 40) + 24))
      {
        unint64_t v4 = 0xD000000000000013;
      }
      else
      {
        uint64_t v9 = *(void **)(*(void *)(v7 + 48) + 24);
        if (v9)
        {
          id v10 = v9;
          [v10 playbackState];
          if (MRMediaRemotePlaybackStateIsAdvancing())
          {
            uint64_t v11 = v6;
          }
          else if ([v10 playbackState])
          {
            unint64_t v4 = 0;
            uint64_t v11 = v10;
            id v10 = v6;
          }
          else
          {
            unsigned int v12 = [v10 destinationOriginExists];
            if (v12) {
              uint64_t v11 = v10;
            }
            else {
              uint64_t v11 = v6;
            }
            if (v12)
            {
              id v10 = v6;
              unint64_t v4 = 0;
            }
            else
            {
              unint64_t v4 = 0xD000000000000052;
            }
          }

          id v6 = v10;
        }
        else
        {
          unint64_t v4 = 0;
        }
      }
    }
    else
    {
      unint64_t v4 = 0x6176646120746F4ELL;
    }
  }
  return v4;
}

char *sub_1000783A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__transfer) + 24);
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_localDeviceActivity);
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_deviceActivity);
  swift_retain();
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v6 = sub_1001F7514();
  uint64_t v8 = v7;
  swift_release();
  v9._uint64_t countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0x3D6C61636F6C202CLL;
  v10._object = (void *)0xE800000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = sub_1001FB05C();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x65746F6D6572202CLL;
  v12._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = sub_1001FB05C();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  id v14 = sub_1001EA848();
  swift_bridgeObjectRetain();
  uint64_t v15 = (uint64_t)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 ulog:v15 message:0xD00000000000002DLL 0x80000001002B5B60];
  swift_bridgeObjectRelease();

  if (v3 && *(void *)(*(void *)(v3 + qword_100370E40) + 40) <= 1uLL)
  {
    unint64_t v44 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    unint64_t v46 = 0xD00000000000001ALL;
    unint64_t v47 = 0x80000001002B5B90;
    uint64_t v45 = sub_10000A38C(&qword_10035B578);
    uint64_t v43 = v3;
    swift_retain();
    uint64_t v16 = sub_1000283CC(&v43);
    uint64_t v18 = v17;
    sub_10000CC5C((uint64_t)&v43);
    v19._uint64_t countAndFlagsBits = v16;
    v19._object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    id v20 = sub_1001EA848();
    swift_bridgeObjectRetain();
    uint64_t v15 = (uint64_t)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v20 ulog:40 message:v15, v43, v44];
    swift_release_n();
    swift_bridgeObjectRelease();

LABEL_4:
    return 0;
  }
  uint64_t v21 = *(char **)(a2 + 16);
  if (!v21)
  {
LABEL_58:
    swift_release();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = 0;
  while ((*(unsigned char *)(a2 + v22 + 32) & 1) != 0)
  {
    uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_12;
    }
    if (v21 == (char *)++v22)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease();
LABEL_12:
  swift_bridgeObjectRelease();
  unint64_t i = *(char **)(*(void *)(v4 + 40) + 24);
  if (i)
  {
    uint64_t v15 = i;
    if (([(id)v15 isVideo] & 1) == 0)
    {
      uint64_t v28 = *(void **)(*(void *)(v5 + 40) + 24);
      if (!v28 || (id v29 = v28, v30 = sub_1000D5D78(v29), v29, (v30 & 1) == 0))
      {
        if (qword_10035A5F0 != -1) {
          goto LABEL_67;
        }
        goto LABEL_42;
      }
LABEL_45:
      swift_release();
      swift_retain();
      return i;
    }
  }
LABEL_15:
  swift_bridgeObjectRetain();
  unint64_t i = 0;
  do
  {
    uint64_t v24 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_66;
    }
    if (i[a2 + 32] == 1)
    {
      swift_bridgeObjectRelease();
LABEL_22:
      swift_bridgeObjectRelease();
      unint64_t i = *(char **)(*(void *)(v4 + 48) + 24);
      if (i)
      {
        uint64_t v15 = i;
        [(id)v15 playbackState];
        if (MRMediaRemotePlaybackStateIsAdvancing())
        {
          id v25 = [(id)v15 direction];
          if (v25 == (id)2) {
            goto LABEL_55;
          }
          if (v25 == (id)1) {
            goto LABEL_56;
          }
        }
      }
      unint64_t i = *(char **)(*(void *)(v5 + 48) + 24);
      if (!i) {
        goto LABEL_33;
      }
      uint64_t v15 = i;
      [(id)v15 playbackState];
      if (!MRMediaRemotePlaybackStateIsAdvancing() || (id v26 = [(id)v15 direction]) == 0)
      {
LABEL_32:

        goto LABEL_33;
      }
      if (v26 != (id)2)
      {
        if (v26 != (id)1) {
          goto LABEL_32;
        }
LABEL_56:
        swift_release();
        return i;
      }
LABEL_55:
      swift_retain();
      swift_release();
      return i;
    }
    uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_22;
    }
    ++i;
  }
  while (v24 != v21);
  swift_bridgeObjectRelease();
LABEL_33:
  swift_bridgeObjectRetain();
  for (unint64_t i = 0; ; ++i)
  {
    uint64_t v27 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    if (i[a2 + 32] == 1)
    {
      swift_bridgeObjectRelease();
LABEL_47:
      swift_bridgeObjectRelease();
      unint64_t i = *(char **)(*(void *)(v4 + 48) + 24);
      if (i)
      {
        char v37 = i;
        id v38 = [v37 direction];
        if (v38 == (id)2) {
          goto LABEL_55;
        }
        if (v38 == (id)1) {
          goto LABEL_56;
        }
      }
      unint64_t i = *(char **)(*(void *)(v5 + 48) + 24);
      if (!i) {
        goto LABEL_56;
      }
      uint64_t v39 = i;
      id v40 = [v39 direction];
      if (!v40) {
        goto LABEL_57;
      }
      if (v40 == (id)1) {
        goto LABEL_56;
      }
      if (v40 != (id)2)
      {
LABEL_57:

        goto LABEL_58;
      }
      goto LABEL_55;
    }
    uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_47;
    }
    if (v27 == v21)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return 0;
    }
  }
LABEL_66:
  __break(1u);
LABEL_67:
  swift_once();
LABEL_42:
  uint64_t v31 = (char *)(id)qword_1003ACA78;
  uint64_t v32 = (char *)sub_1001C8B94();
  if (!v32) {
    goto LABEL_62;
  }
  uint64_t v33 = v32;
  id v34 = [*(id *)&v31[OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_callCenter] neighborhoodActivityConduit];
  id v35 = [v34 activeSplitSessionTV];

  if (!v35)
  {

    uint64_t v31 = v33;
LABEL_62:

    goto LABEL_63;
  }
  unsigned __int8 v36 = [v35 isEquivalentToDeviceHandle:v33];

  if (v36) {
    goto LABEL_45;
  }
LABEL_63:
  unsigned __int8 v42 = [(id)v15 hostedOnCurrentDevice];
  swift_release();
  if ((v42 & 1) == 0) {
    goto LABEL_4;
  }
  return i;
}

BOOL sub_100078AB8(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2 & 1;
  unint64_t v7 = sub_100078208(a1, a2 & 1, a3, a4);
  Swift::String v9 = v8;
  if (v8)
  {
    uint64_t v10 = v7;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = v10;
    v11._object = v9;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 2108969;
    v12._object = (void *)0xE300000000000000;
    String.append(_:)(v12);
  }
  else
  {
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
  }
  swift_retain();
  uint64_t v13 = sub_1001F7514();
  uint64_t v15 = v14;
  swift_release();
  v16._uint64_t countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 8236;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = sub_100047CE4(a1, v6, a3);
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  id v19 = sub_1001EA848();
  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 ulog:40 message:v20];
  swift_bridgeObjectRelease();

  return v9 == 0;
}

unint64_t sub_100078C80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v8 = *(id *)(qword_1003AC750 + 272);
  char v9 = sub_1000FD938();

  if (v9)
  {
    if (qword_10035A538 != -1) {
      swift_once();
    }
    swift_retain();
    char v10 = sub_1000BD940(0xD00000000000001ELL, (void *)0x80000001002B5BE0);
    swift_release();
    if (v10)
    {
      Swift::String v11 = *(void **)(qword_1003AC750 + 264);
LABEL_10:
      id v12 = v11;
      unint64_t v13 = sub_10010176C();

      return v13;
    }
  }
  if (a3 == 1)
  {
    Swift::String v11 = *(void **)(qword_1003AC750 + 200);
    goto LABEL_10;
  }
  if (a2)
  {
    id v18 = a1;
    sub_1000790E8(a1, a2, a3);
    if (qword_10035A5F0 != -1) {
      swift_once();
    }
    id v19 = (id)qword_1003ACA78;
    NSString v20 = sub_1001C396C(v18);
    char v22 = v21;
    int v23 = ~v21;

    if (!v23)
    {
      v41[0] = 0;
      v41[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      v32._uint64_t countAndFlagsBits = 0xD000000000000024;
      v32._object = (void *)0x80000001002B5BB0;
      String.append(_:)(v32);
      unint64_t v33 = 11;
      char v44 = 11;
      _print_unlocked<A, B>(_:_:)();
      id v34 = sub_1001EA848();
      swift_bridgeObjectRetain();
      NSString v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v34 ulog:60 message:v35];

      swift_bridgeObjectRelease();
LABEL_38:
      swift_release();
      return v33;
    }
    unsigned __int8 v42 = &type metadata for Feature;
    unint64_t v24 = sub_10000CC08();
    unint64_t v43 = v24;
    LOBYTE(v41[0]) = 9;
    char v25 = isFeatureEnabled(_:)();
    sub_10000CC5C((uint64_t)v41);
    if (v25)
    {
      if (v22)
      {
        if (a3) {
          goto LABEL_33;
        }
        goto LABEL_35;
      }
      unsigned __int8 v42 = &type metadata for Feature;
      unint64_t v43 = v24;
      LOBYTE(v41[0]) = 9;
      id v26 = v20;
      char v27 = isFeatureEnabled(_:)();
      sub_10000CC5C((uint64_t)v41);
      if (v27)
      {
        unsigned int v28 = [v26 service];
        sub_100038A4C(v20, v22);
        BOOL v29 = v28 == 3;
        goto LABEL_31;
      }
      sub_100038A4C(v20, v22);
    }
    BOOL v29 = 0;
LABEL_31:
    if (a3)
    {
      if (!v29)
      {
        char v37 = *(void **)(qword_1003AC750 + 216);
        goto LABEL_37;
      }
LABEL_33:
      char v37 = *(void **)(qword_1003AC750 + 232);
LABEL_37:
      id v39 = v37;
      unint64_t v33 = sub_10010176C();

      sub_100038A4C(v20, v22);
      goto LABEL_38;
    }
    if (!v29)
    {
      id v38 = *(void **)(qword_1003AC750 + 208);
      goto LABEL_40;
    }
LABEL_35:
    id v38 = *(void **)(qword_1003AC750 + 224);
LABEL_40:
    id v40 = v38;
    unint64_t v33 = sub_10010176C();

    sub_100038A4C(v20, v22);
    return v33;
  }
  if (a3)
  {
    uint64_t v15 = *(void **)(qword_1003AC750 + 256);
    sub_1000790E8(a1, a2, a3);
    id v16 = v15;
    unint64_t v17 = sub_10010176C();

    swift_release();
  }
  else
  {
    id v30 = a1;
    if (sub_100078AB8(a1, 0, 0, a4)) {
      uint64_t v31 = *(void **)(qword_1003AC750 + 240);
    }
    else {
      uint64_t v31 = *(void **)(qword_1003AC750 + 248);
    }
    id v36 = v31;
    unint64_t v17 = sub_10010176C();
  }
  return v17;
}

id sub_1000790E8(id result, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
  {
    id v4 = result;
    swift_retain();
    return v4;
  }
  return result;
}

char *sub_100079130@<X0>(char **a1@<X8>)
{
  uint64_t result = sub_1000783A4(v1, (uint64_t)&off_10031DC48);
  *a1 = result;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

ValueMetadata *type metadata accessor for TransferPolicy()
{
  return &type metadata for TransferPolicy;
}

uint64_t sub_100079178()
{
  sub_10000A38C(&qword_10035F9D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100291190;
  if (qword_10035A520 != -1) {
LABEL_21:
  }
    swift_once();
  id v1 = *(id *)(qword_1003AC750 + 1616);
  float v2 = sub_1000FF7A8();

  id v3 = *(id *)(qword_1003AC750 + 1624);
  float v4 = sub_1000FF7A8();

  id v5 = *(id *)(qword_1003AC750 + 1632);
  float v6 = sub_1000FF7A8();

  *(void *)(inited + 32) = 0x746F6F7465756C62;
  *(void *)(inited + 40) = 0xE900000000000068;
  *(void *)(inited + 48) = 0;
  *(unsigned char *)(inited + 56) = 0;
  *(float *)(inited + 60) = v2;
  *(float *)(inited + 64) = v4;
  *(float *)(inited + 68) = v6;
  *(_WORD *)(inited + 72) = 256;
  *(void *)(inited + 80) = 5;
  id v7 = *(id *)(qword_1003AC750 + 1640);
  float v8 = sub_1000FF7A8();

  id v9 = *(id *)(qword_1003AC750 + 1640);
  float v10 = sub_1000FF7A8();

  id v11 = *(id *)(qword_1003AC750 + 1640);
  float v12 = sub_1000FF7A8();

  *(void *)(inited + 88) = 0x6F69746163756465;
  *(void *)(inited + 96) = 0xE90000000000006ELL;
  *(void *)(inited + 104) = 2;
  *(unsigned char *)(inited + 112) = 0;
  *(float *)(inited + 116) = v8;
  *(float *)(inited + 120) = v10;
  *(float *)(inited + 124) = v12;
  *(_WORD *)(inited + 128) = 0;
  *(void *)(inited + 136) = 2;
  id v13 = *(id *)(qword_1003AC750 + 1648);
  float v14 = sub_1000FF7A8();

  id v15 = *(id *)(qword_1003AC750 + 1656);
  float v16 = sub_1000FF7A8();

  id v17 = *(id *)(qword_1003AC750 + 1664);
  float v18 = sub_1000FF7A8();

  *(void *)(inited + 144) = 0x65747563657865;
  *(void *)(inited + 152) = 0xE700000000000000;
  *(void *)(inited + 160) = 2;
  *(unsigned char *)(inited + 168) = 0;
  *(float *)(inited + 172) = v14;
  *(float *)(inited + 176) = v16;
  *(float *)(inited + 180) = v18;
  *(_WORD *)(inited + 184) = 256;
  *(void *)(inited + 192) = 6;
  id v19 = *(id *)(qword_1003AC750 + 1672);
  float v20 = sub_1000FF7A8();

  id v21 = *(id *)(qword_1003AC750 + 1680);
  float v22 = sub_1000FF7A8();

  id v23 = *(id *)(qword_1003AC750 + 1688);
  float v24 = sub_1000FF7A8();

  *(void *)(inited + 200) = 0x6D726177657270;
  *(void *)(inited + 208) = 0xE700000000000000;
  *(void *)(inited + 216) = 1;
  *(unsigned char *)(inited + 224) = 0;
  *(float *)(inited + 228) = v20;
  *(float *)(inited + 232) = v22;
  *(float *)(inited + 236) = v24;
  *(_WORD *)(inited + 240) = 0;
  *(void *)(inited + 248) = 4;
  id v25 = *(id *)(qword_1003AC750 + 1696);
  float v26 = sub_1000FF7A8();

  id v27 = *(id *)(qword_1003AC750 + 1704);
  float v28 = sub_1000FF7A8();

  id v29 = *(id *)(qword_1003AC750 + 1712);
  float v30 = sub_1000FF7A8();

  strcpy((char *)(inited + 256), "prewarmInner");
  *(unsigned char *)(inited + 269) = 0;
  *(_WORD *)(inited + 270) = -5120;
  *(void *)(inited + 272) = 2;
  *(unsigned char *)(inited + 280) = 0;
  *(float *)(inited + 284) = v26;
  *(float *)(inited + 288) = v28;
  *(float *)(inited + 292) = v30;
  *(_WORD *)(inited + 296) = 256;
  *(void *)(inited + 304) = 3;
  sub_100079AAC((uint64_t)v58);
  long long v31 = v58[1];
  *(_OWORD *)(inited + 312) = v58[0];
  *(_OWORD *)(inited + 328) = v31;
  *(_OWORD *)(inited + 344) = v58[2];
  *(void *)(inited + 360) = v59;
  unint64_t v57 = (unint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != 336; i += 56)
  {
    uint64_t v33 = *(void *)(inited + i + 48);
    uint64_t v34 = *(unsigned __int8 *)(inited + i + 56);
    int v36 = *(_DWORD *)(inited + i + 60);
    int v35 = *(_DWORD *)(inited + i + 64);
    id v37 = objc_allocWithZone((Class)NIRegionPredicate);
    swift_bridgeObjectRetain_n();
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    LODWORD(v39) = v36;
    id v40 = [v37 initWithName:v38 regionSizeCategory:0 radius:v33 preferredUpdateRate:v34 requiresUserIntent:v39];

    id v41 = objc_allocWithZone((Class)NIRegionPredicate);
    swift_bridgeObjectRetain();
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    LODWORD(v43) = v35;
    id v44 = [v41 initWithName:v42 regionSizeCategory:10 radius:v33 preferredUpdateRate:v34 requiresUserIntent:v43];

    uint64_t v55 = &type metadata for Feature;
    unint64_t v56 = sub_10000CC08();
    v54[0] = 9;
    isFeatureEnabled(_:)();
    sub_10000CC5C((uint64_t)v54);
    swift_bridgeObjectRelease();
    unint64_t v45 = v57;
    unint64_t v46 = v57 >> 62;
    if (v57 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v48 = v51 + 2;
      if (__OFADD__(v51, 2))
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v47 = *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v48 = v47 + 2;
      if (__OFADD__(v47, 2)) {
        goto LABEL_20;
      }
    }
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
      || (v45 & 0x8000000000000000) != 0
      || (v45 & 0x4000000000000000) != 0
      || v48 > *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
      if (v46)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      unint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._endMutation()();
    id v49 = v40;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    id v50 = v44;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  swift_bridgeObjectRelease();
  uint64_t v52 = v57;
  swift_setDeallocating();
  uint64_t result = swift_arrayDestroy();
  qword_1003AC6C8 = v52;
  return result;
}

uint64_t sub_1000797EC()
{
  id v1 = [v0 name];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  BOOL v5 = v2 == 0x746F6F7465756C62 && v4 == 0xE900000000000068;
  if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v7 = v2 == 0x6D726177657270 && v4 == 0xE700000000000000;
    if (v7
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (v2 == 0x496D726177657270 ? (BOOL v8 = v4 == 0xEC00000072656E6ELL) : (BOOL v8 = 0),
          v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (v2 == 0x6F69746163756465 && v4 == 0xE90000000000006ELL {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (v2 == 0x72656767697274 && v4 == 0xE700000000000000 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else if (v2 == 0x65747563657865 && v4 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
      return 4;
    }
    else
    {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v9) {
        return 4;
      }
      else {
        return 5;
      }
    }
  }
}

void sub_100079AAC(uint64_t a1@<X8>)
{
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v2 = *(id *)(qword_1003AC750 + 936);
  char v3 = sub_1000FD938();

  id v4 = *(id *)(qword_1003AC750 + 1720);
  float v5 = sub_1000FF7A8();

  id v6 = *(id *)(qword_1003AC750 + 1728);
  float v7 = sub_1000FF7A8();

  id v8 = *(id *)(qword_1003AC750 + 1736);
  float v9 = sub_1000FF7A8();

  *(void *)a1 = 0x72656767697274;
  *(void *)(a1 + 8) = 0xE700000000000000;
  *(void *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 24) = v3 & 1;
  *(float *)(a1 + 28) = v5;
  *(float *)(a1 + 32) = v7;
  *(float *)(a1 + 36) = v9;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 1;
}

uint64_t destroy for HandoffLeaderStub()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GenericRegionPredicate(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GenericRegionPredicate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  int v4 = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = v4;
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for CodableError(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GenericRegionPredicate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericRegionPredicate(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericRegionPredicate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericRegionPredicate()
{
  return &type metadata for GenericRegionPredicate;
}

unint64_t sub_100079DEC()
{
  return sub_1002611E8();
}

__n128 _s21HandoffEnabledChangedVwcp(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s21HandoffEnabledChangedVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s21HandoffEnabledChangedVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 41) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *_s21HandoffEnabledChangedVMa()
{
  return &_s21HandoffEnabledChangedVN;
}

unint64_t sub_100079EFC(uint64_t a1)
{
  unint64_t result = sub_100079F24();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100079F24()
{
  unint64_t result = qword_10035F9D8;
  if (!qword_10035F9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035F9D8);
  }
  return result;
}

unint64_t sub_100079F78(uint64_t a1)
{
  unint64_t result = sub_100079FA0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100079FA0()
{
  unint64_t result = qword_10035F9E0;
  if (!qword_10035F9E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035F9E0);
  }
  return result;
}

uint64_t sub_100079FF4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10007A0AC(uint64_t a1)
{
  unint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_10007A0F8()
{
  uint64_t v1 = 0x657463656E6E6F63;
  if (*v0 != 1) {
    uint64_t v1 = 0x6164696C61766E69;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6574736575716572;
  }
}

uint64_t sub_10007A15C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10007BE84(a1, a2);
  *a3 = result;
  return result;
}

void sub_10007A184(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10007A190(uint64_t a1)
{
  unint64_t v2 = sub_10007C57C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007A1CC(uint64_t a1)
{
  unint64_t v2 = sub_10007C57C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007A208(void *a1, int a2)
{
  int v24 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10035FAE0);
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  __chkstk_darwin(v3);
  id v21 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10035FAE8);
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin(v5);
  float v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10035FAF0);
  uint64_t v18 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  float v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_10035FAF8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  float v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_10007C57C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v24)
  {
    if (v24 == 1)
    {
      char v26 = 1;
      sub_10007C624();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v20);
    }
    else
    {
      char v27 = 2;
      sub_10007C5D0();
      id v15 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    }
  }
  else
  {
    char v25 = 0;
    sub_10007C678();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10007A574()
{
  return 0;
}

uint64_t sub_10007A580@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void sub_10007A5B0(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10007A5BC(uint64_t a1)
{
  unint64_t v2 = sub_10007C624();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007A5F8(uint64_t a1)
{
  unint64_t v2 = sub_10007C624();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007A634(uint64_t a1)
{
  unint64_t v2 = sub_10007C5D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007A670(uint64_t a1)
{
  unint64_t v2 = sub_10007C5D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007A6AC(uint64_t a1)
{
  unint64_t v2 = sub_10007C678();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007A6E8(uint64_t a1)
{
  unint64_t v2 = sub_10007C678();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10007A724@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10007C00C(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_10007A750(void *a1)
{
  return sub_10007A208(a1, *v1);
}

uint64_t sub_10007A76C()
{
  return 45;
}

id sub_10007A864()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  aBlock = v0;
  sub_10016ADD8(0xD000000000000013, (void *)0x80000001002B5CA0, 0, (uint64_t)v2, (uint64_t)&off_100322A18);
  uint64_t v3 = *(void **)((char *)v0 + qword_10035F9F0);
  id v21 = v1;
  if (v3)
  {
    id v4 = v3;
  }
  else
  {
    id v5 = objc_allocWithZone((Class)NSXPCConnection);
    swift_bridgeObjectRetain();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v4 = [v5 initWithMachServiceName:v6 options:0];

    uint64_t v3 = 0;
  }
  float v7 = (void *)swift_allocObject();
  uint64_t v20 = v2[10];
  v7[2] = v20;
  uint64_t v19 = v2[11];
  uint64_t v7[3] = v19;
  uint64_t v8 = v2[12];
  v7[4] = v8;
  uint64_t v9 = v2[13];
  v7[5] = v9;
  uint64_t v10 = v2[14];
  v7[6] = v10;
  uint64_t v11 = v2[15];
  void v7[7] = v11;
  v7[8] = v2;
  char v26 = sub_10007BD98;
  char v27 = v7;
  aBlock = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  int v24 = sub_10007A0AC;
  char v25 = &unk_100322A78;
  uint64_t v12 = _Block_copy(&aBlock);
  id v13 = v3;
  swift_release();
  [v4 setInterruptionHandler:v12];
  _Block_release(v12);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  id v15 = (void *)swift_allocObject();
  void v15[2] = v20;
  void v15[3] = v19;
  v15[4] = v8;
  uint64_t v15[5] = v9;
  v15[6] = v10;
  v15[7] = v11;
  v15[8] = v14;
  v15[9] = v2;
  char v26 = sub_10007BE70;
  char v27 = v15;
  aBlock = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  int v24 = sub_10007A0AC;
  char v25 = &unk_100322AF0;
  float v16 = _Block_copy(&aBlock);
  swift_release();
  [v4 setInvalidationHandler:v16];
  _Block_release(v16);
  id v17 = [self interfaceWithProtocol:&OBJC_PROTOCOL____TtP17proximitycontrold15XPCLinkProtocol_];
  if (qword_10035A628 != -1) {
    swift_once();
  }
  [v4 _setQueue:qword_1003ACB50];
  [v4 setExportedInterface:v17];
  [v4 setExportedObject:v21];
  [v4 setRemoteObjectInterface:v17];

  return v4;
}

uint64_t sub_10007ABF8(uint64_t a1, uint64_t a2)
{
  sub_10016ABE4(0x61766E6920435058, (void *)0xEF6465746164696CLL, 0, a2, (uint64_t)&off_100322A18);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    PassthroughSubject.send(_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_10007ACB0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  sub_10007AD08(a1, a2, a3);
  return v6;
}

uint64_t *sub_10007AD08(void *a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *v3;
  UUID.init()();
  uint64_t v8 = qword_10035F9E8;
  type metadata accessor for PassthroughSubject();
  *(uint64_t *)((char *)v3 + v8) = PassthroughSubject.__allocating_init()();
  *(uint64_t *)((char *)v3 + qword_10035F9F8) = 0;
  uint64_t v9 = qword_10035FA00;
  sub_10000A38C(&qword_10035FB08);
  swift_allocObject();
  *(uint64_t *)((char *)v3 + v9) = PassthroughSubject.init()();
  *(uint64_t *)((char *)v3 + qword_10035FA08) = 0;
  *(uint64_t *)((char *)v3 + qword_10035F9F0) = (uint64_t)a1;
  uint64_t v10 = (uint64_t *)((char *)v3 + qword_1003AC6D8);
  *uint64_t v10 = a2;
  v10[1] = (uint64_t)a3;
  id v11 = a1;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(29);
  v12._uint64_t countAndFlagsBits = 0x6F72203A74696E49;
  v12._object = (void *)0xEB000000003D656CLL;
  String.append(_:)(v12);
  _print_unlocked<A, B>(_:_:)();
  v13._uint64_t countAndFlagsBits = 0x65536863616D202CLL;
  v13._object = (void *)0xEE003D6563697672;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = a2;
  v14._object = a3;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  sub_10016ADD8(0, (void *)0xE000000000000000, 0, v7, (uint64_t)&off_100322A18);
  swift_bridgeObjectRelease();

  return v3;
}

uint64_t *sub_10007AF1C()
{
  uint64_t v1 = v0;
  sub_10016ADD8(0x74696E696544, (void *)0xE600000000000000, 0, *v0, (uint64_t)&off_100322A18);
  uint64_t v2 = (char *)v0 + qword_1003AC6D0;
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10007B040()
{
  sub_10007AF1C();

  return swift_deallocClassInstance();
}

uint64_t sub_10007B098(uint64_t a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = v2;
  sub_10016ADD8(0xD000000000000019, (void *)0x80000001002B5D70, 0, v4, (uint64_t)&off_100322A18);
  if (qword_10035A628 != -1) {
    swift_once();
  }
  id v11 = (void *)qword_1003ACB50;
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v4 + 80);
  *(void *)(v13 + 32) = *(void *)(v4 + 96);
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(v4 + 104);
  *(void *)(v13 + 56) = *(void *)(v4 + 120);
  *(void *)(v13 + 64) = v12;
  unint64_t v14 = v19;
  *(void *)(v13 + 72) = a1;
  *(void *)(v13 + 80) = v14;
  aBlock[4] = sub_10007C70C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_100322B40;
  id v15 = _Block_copy(aBlock);
  id v16 = v11;
  swift_retain();
  sub_10001F8BC(a1, v14);
  static DispatchQoS.unspecified.getter();
  id v21 = _swiftEmptyArrayStorage;
  sub_10007C744((unint64_t *)&qword_100363D50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10001683C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v20);
  swift_release();
  return swift_release();
}

uint64_t sub_10007B438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v29 = a4;
  uint64_t v30 = a6;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v12 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v12 - 8);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = __chkstk_darwin(v13);
  id v16 = (char *)&v26 - v15;
  uint64_t v17 = *(void *)(a5 - 8);
  __chkstk_darwin(v14);
  unint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v28 = result;
    uint64_t v26 = a7;
    uint64_t v27 = a9;
    uint64_t v21 = a8;
    sub_1000292C0();
    (*(void (**)(char *, void, uint64_t, unint64_t))(v17 + 56))(v16, 0, 1, a5);
    (*(void (**)(char *, char *, unint64_t))(v17 + 32))(v19, v16, a5);
    uint64_t v39 = v28;
    uint64_t v33 = 0;
    unint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    v22._object = (void *)0x80000001002B5DB0;
    v22._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v22);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    uint64_t v23 = v33;
    int v24 = (void *)v34;
    uint64_t v33 = v29;
    unint64_t v34 = a5;
    uint64_t v35 = v30;
    uint64_t v36 = v26;
    uint64_t v37 = v21;
    uint64_t v38 = v27;
    uint64_t v25 = type metadata accessor for XPCLink();
    sub_10016ADD8(v23, v24, 0, v25, (uint64_t)&off_100322A18);
    swift_bridgeObjectRelease();
    PassthroughSubject.send(_:)();
    (*(void (**)(char *, unint64_t))(v17 + 8))(v19, a5);
    return swift_release();
  }
  return result;
}

uint64_t sub_10007B900(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10007BB94(a1, a2, a3, (void (*)(uint64_t, unint64_t))sub_10007B098);
}

uint64_t type metadata accessor for XPCLink()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10007B930@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + qword_1003AC6D0;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10007B9A8()
{
  return sub_10007A76C();
}

void sub_10007B9D0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_internalCnx);
  if (v1)
  {
    id v2 = v1;
    id v3 = [v2 remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10000A38C(&qword_10035FB00);
    if (swift_dynamicCast())
    {
      v4.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      [v8 handleWithSerializedObject:v4.super.isa];

      swift_unknownObjectRelease();
    }
    else
    {
      id v6 = sub_1001E99C8();
      v4.super.Class isa = (Class)String._bridgeToObjectiveC()();
      [v6 ulog:60 message:v4.super.isa];
    }
  }
  else
  {
    id v5 = sub_1001E99C8();
    NSString v7 = String._bridgeToObjectiveC()();
    [v5 ulog:60 message:v7];
  }
}

uint64_t sub_10007BB94(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t, unint64_t))
{
  id v5 = a3;
  swift_retain();
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  a4(v6, v8);
  sub_10000DBEC(v6, v8);

  return swift_release();
}

ValueMetadata *type metadata accessor for XPCConnectionEvent()
{
  return &type metadata for XPCConnectionEvent;
}

void **initializeBufferWithCopyOfBuffer for XPCLinkRole(void **a1, void **a2)
{
  id v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void **assignWithCopy for XPCLinkRole(void **a1, void **a2)
{
  id v3 = *a2;
  id v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void **assignWithTake for XPCLinkRole(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for XPCLinkRole()
{
  return &type metadata for XPCLinkRole;
}

unint64_t sub_10007BCEC()
{
  unint64_t result = qword_10035FA90;
  if (!qword_10035FA90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035FA90);
  }
  return result;
}

uint64_t sub_10007BD40()
{
  return sub_10007C744((unint64_t *)&qword_10035CFF0, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_10007BD88()
{
  return _swift_deallocObject(v0, 72, 7);
}

void sub_10007BD98()
{
  sub_10016AE10(60, 0xD000000000000013, (void *)0x80000001002B5CC0, 0, *(void *)(v0 + 64), (uint64_t)&off_100322A18);
}

uint64_t sub_10007BDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10007BDF8()
{
  return swift_release();
}

uint64_t sub_10007BE00()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007BE38()
{
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10007BE70()
{
  return sub_10007ABF8(*(void *)(v0 + 64), *(void *)(v0 + 72));
}

uint64_t sub_10007BE84(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574736575716572 && a2 == 0xE900000000000064;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657463656E6E6F63 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6164696C61766E69 && a2 == 0xEB00000000646574)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_10007C00C(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10035FA98);
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v26 = v2;
  __chkstk_darwin(v2);
  uint64_t v29 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000A38C(&qword_10035FAA0);
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  id v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10035FAA8);
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10035FAB0);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D6E4(a1, a1[3]);
  sub_10007C57C();
  uint64_t v12 = (uint64_t)v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v22 = v6;
  uint64_t v13 = v29;
  uint64_t v30 = a1;
  uint64_t v14 = v11;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    id v11 = v18;
    sub_10000A38C(&qword_10035FAC0);
    *id v11 = &type metadata for XPCConnectionEvent;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v11, enum case for DecodingError.typeMismatch(_:), v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
    a1 = v30;
LABEL_7:
    sub_10000CC5C((uint64_t)a1);
    return v11;
  }
  id v11 = (void *)*(unsigned __int8 *)(v15 + 32);
  if (*(unsigned char *)(v15 + 32))
  {
    if (v11 == 1)
    {
      char v32 = 1;
      sub_10007C624();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v16 = v28;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v16 + 8))(v14, v9);
    }
    else
    {
      char v33 = 2;
      sub_10007C5D0();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v28;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v20 + 8))(v14, v9);
    }
  }
  else
  {
    char v31 = 0;
    sub_10007C678();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
  }
  sub_10000CC5C((uint64_t)v30);
  return v11;
}

unint64_t sub_10007C57C()
{
  unint64_t result = qword_10035FAB8;
  if (!qword_10035FAB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035FAB8);
  }
  return result;
}

unint64_t sub_10007C5D0()
{
  unint64_t result = qword_10035FAC8;
  if (!qword_10035FAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035FAC8);
  }
  return result;
}

unint64_t sub_10007C624()
{
  unint64_t result = qword_10035FAD0;
  if (!qword_10035FAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035FAD0);
  }
  return result;
}

unint64_t sub_10007C678()
{
  unint64_t result = qword_10035FAD8;
  if (!qword_10035FAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035FAD8);
  }
  return result;
}

uint64_t sub_10007C6CC()
{
  swift_release();
  sub_10000DBEC(*(void *)(v0 + 72), *(void *)(v0 + 80));

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10007C70C()
{
  return sub_10007B438(*(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_10007C744(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s17proximitycontrold18XPCConnectionEventOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007C858);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCConnectionEvent.CodingKeys()
{
  return &type metadata for XPCConnectionEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for XPCConnectionEvent.RequestedCodingKeys()
{
  return &type metadata for XPCConnectionEvent.RequestedCodingKeys;
}

ValueMetadata *type metadata accessor for XPCConnectionEvent.ConnectedCodingKeys()
{
  return &type metadata for XPCConnectionEvent.ConnectedCodingKeys;
}

ValueMetadata *type metadata accessor for XPCConnectionEvent.InvalidatedCodingKeys()
{
  return &type metadata for XPCConnectionEvent.InvalidatedCodingKeys;
}

unint64_t sub_10007C8C4()
{
  unint64_t result = qword_10035FB10;
  if (!qword_10035FB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035FB10);
  }
  return result;
}

unint64_t sub_10007C91C()
{
  unint64_t result = qword_10035FB18;
  if (!qword_10035FB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035FB18);
  }
  return result;
}

unint64_t sub_10007C974()
{
  unint64_t result = qword_10035FB20;
  if (!qword_10035FB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035FB20);
  }
  return result;
}

unint64_t sub_10007C9CC()
{
  unint64_t result = qword_10035FB28;
  if (!qword_10035FB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035FB28);
  }
  return result;
}

unint64_t sub_10007CA24()
{
  unint64_t result = qword_10035FB30;
  if (!qword_10035FB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035FB30);
  }
  return result;
}

unint64_t sub_10007CA7C()
{
  unint64_t result = qword_10035FB38;
  if (!qword_10035FB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035FB38);
  }
  return result;
}

unint64_t sub_10007CAD4()
{
  unint64_t result = qword_10035FB40;
  if (!qword_10035FB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035FB40);
  }
  return result;
}

unint64_t sub_10007CB2C()
{
  unint64_t result = qword_10035FB48;
  if (!qword_10035FB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035FB48);
  }
  return result;
}

unint64_t sub_10007CB84()
{
  unint64_t result = qword_10035FB50;
  if (!qword_10035FB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10035FB50);
  }
  return result;
}

uint64_t sub_10007CBF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_10007E2AC(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_10007CD78(uint64_t a1)
{
  uint64_t v18 = a1;
  uint64_t v1 = type metadata accessor for ViewServiceInput(0);
  uint64_t v19 = *(void *)(v1 - 8);
  uint64_t v2 = *(void *)(v19 + 64);
  __chkstk_darwin(v1);
  uint64_t v3 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = 0;
  unint64_t v21 = 0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0x293A5F28646E6573;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0x3D7475706E69203ALL;
  v7._object = (void *)0xE800000000000000;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  sub_10000C048();
  id v8 = objc_allocWithZone((Class)CULogHandle);
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v8 initWithSubsystem:v9 category:v10];

  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:40 message:v12];
  swift_bridgeObjectRelease();

  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v5, 1, 1, v13);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  sub_10007DC78(v18, (uint64_t)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v15 = (*(unsigned __int8 *)(v19 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = 0;
  void v16[3] = 0;
  v16[4] = v14;
  sub_10007E160((uint64_t)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v16 + v15);
  sub_10007CBF8((uint64_t)v5, (uint64_t)&unk_10035FB60, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_10007D07C(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = 0;
  unint64_t v18 = 0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0x293A5F28646E6573;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = 0x3D7475706E69203ALL;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  sub_10007E364(a1, (uint64_t)v16);
  _print_unlocked<A, B>(_:_:)();
  sub_10000C2B8();
  id v7 = objc_allocWithZone((Class)CULogHandle);
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithSubsystem:v8 category:v9];

  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 ulog:40 message:v11];
  swift_bridgeObjectRelease();

  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 1, 1, v12);
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  sub_10007E364(a1, (uint64_t)v16);
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = 0;
  void v14[3] = 0;
  v14[4] = v13;
  sub_10007E364((uint64_t)v16, (uint64_t)(v14 + 5));
  sub_10007E964(a1);
  sub_10007CBF8((uint64_t)v4, (uint64_t)&unk_10035FB78, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_10007D30C()
{
  uint64_t v1 = type metadata accessor for UUID();
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = qword_10035F9F8;
  if (*(void *)(v0 + qword_10035F9F8))
  {
    uint64_t v6 = *(void *)(v0 + qword_10035F9F8);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + qword_10035F9F0);
    (*(void (**)(char *, uint64_t))(v2 + 16))(v4, v0 + qword_1003AC6D0);
    type metadata accessor for XPCConnectionManager();
    uint64_t v8 = swift_allocObject();
    swift_retain();
    if (v7) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = 0x4008000000000000;
    }
    if (v7) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = 10;
    }
    if (v7) {
      char v11 = 3;
    }
    else {
      char v11 = 2;
    }
    uint64_t v6 = sub_10007E3C0((uint64_t)v4, v9, v10, v11, v0, v8);
    *(void *)(v0 + v5) = v6;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v6;
}

uint64_t sub_10007D46C()
{
  return sub_10007D4A4((void (*)(void))sub_10000C048, (void (*)(uint64_t))sub_10000C048);
}

uint64_t sub_10007D488()
{
  return sub_10007D4A4((void (*)(void))sub_10000C2B8, (void (*)(uint64_t))sub_10000C2B8);
}

uint64_t sub_10007D4A4(void (*a1)(void), void (*a2)(uint64_t))
{
  uint64_t v4 = v2;
  a1();
  id v5 = objc_allocWithZone((Class)CULogHandle);
  NSString v6 = String._bridgeToObjectiveC()();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v5 initWithSubsystem:v6 category:v7];

  NSString v9 = String._bridgeToObjectiveC()();
  [v8 ulog:40 message:v9];

  sub_10007D30C();
  LODWORD(v8) = sub_1002567FC();
  uint64_t result = swift_release();
  if (v8 == 1 && !*(void *)(v4 + qword_10035F9F0))
  {
    sub_10007D630(a2);
    swift_retain();
    PassthroughSubject.send(_:)();
    return swift_release();
  }
  return result;
}

void sub_10007D600()
{
}

void sub_10007D618()
{
}

void sub_10007D630(void (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for String.Encoding();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  NSString v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v4);
  id v7 = objc_allocWithZone((Class)CULogHandle);
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithSubsystem:v8 category:v9];

  NSString v11 = String._bridgeToObjectiveC()();
  [v10 ulog:40 message:v11];

  static String.Encoding.ascii.getter();
  uint64_t v12 = String.data(using:allowLossyConversion:)();
  unint64_t v14 = v13;
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  if (v14 >> 60 == 15)
  {
    a1(v15);
    id v16 = objc_allocWithZone((Class)CULogHandle);
    NSString v17 = String._bridgeToObjectiveC()();
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v19 = [v16 initWithSubsystem:v17 category:v18];

    NSString v20 = String._bridgeToObjectiveC()();
    [v19 ulog:60 message:v20];
  }
  else
  {
    unint64_t v21 = (void *)sub_10007D30C();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v21 handleWithSerializedObject:isa];
    swift_release();

    sub_10000DBD8(v12, v14);
  }
}

uint64_t sub_10007D8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10007D908, 0, 0);
}

uint64_t sub_10007D908()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    type metadata accessor for ViewServiceInput(0);
    sub_10007E30C();
    uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v3 = v2;
    swift_release();
    sub_10007D4A4((void (*)(void))sub_10000C048, (void (*)(uint64_t))sub_10000C048);
    uint64_t v4 = (void *)sub_10007D30C();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v4 handleWithSerializedObject:isa];

    swift_release();
    sub_10000DBEC(v1, v3);
    swift_release();
  }
  NSString v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10007DA80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 104) = a4;
  *(void *)(v5 + 112) = a5;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10007DAA0, 0, 0);
}

uint64_t sub_10007DAA0()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_10007E364(*(void *)(v0 + 112), v0 + 16);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    sub_10007EB10();
    uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v3 = v2;
    swift_release();
    sub_10007D4A4((void (*)(void))sub_10000C2B8, (void (*)(uint64_t))sub_10000C2B8);
    uint64_t v4 = (void *)sub_10007D30C();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v4 handleWithSerializedObject:isa];

    swift_release();
    sub_10000DBEC(v1, v3);
    swift_release();
  }
  NSString v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10007DC1C(uint64_t a1)
{
  return sub_10007CD78(a1);
}

uint64_t sub_10007DC40()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007DC78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ViewServiceInput(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007DCDC()
{
  uint64_t v1 = *(void *)(type metadata accessor for ViewServiceInput(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v5 = (id *)(v0 + v3);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();

      uint64_t v6 = type metadata accessor for ActivityDisplayContext(0);
      id v7 = (char *)v5 + *(int *)(v6 + 32);
      type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        swift_bridgeObjectRelease();
        NSString v11 = &v7[*(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20)];
        uint64_t v12 = type metadata accessor for Date();
        uint64_t v13 = *(void *)(v12 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
          (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
        }
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease();
          unint64_t v14 = &v7[*(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20)];
          uint64_t v15 = type metadata accessor for Date();
          uint64_t v25 = *(void *)(v15 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v14, 1, v15)) {
            (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v15);
          }
        }
        else if (EnumCaseMultiPayload)
        {
          goto LABEL_14;
        }
        swift_bridgeObjectRelease();
      }
LABEL_14:
      id v16 = (char *)v5 + *(int *)(v6 + 36);
      int v17 = swift_getEnumCaseMultiPayload();
      switch(v17)
      {
        case 2:
          swift_bridgeObjectRelease();
          NSString v18 = &v16[*(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20)];
          uint64_t v19 = type metadata accessor for Date();
          uint64_t v20 = *(void *)(v19 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
            (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
          }
          break;
        case 1:
          swift_bridgeObjectRelease();
          unint64_t v21 = &v16[*(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20)];
          uint64_t v22 = type metadata accessor for Date();
          uint64_t v23 = *(void *)(v22 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22)) {
            (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
          }
          goto LABEL_17;
        case 0:
          goto LABEL_17;
      }
LABEL_18:
      return _swift_deallocObject(v0, v3 + v4, v2 | 7);
    case 2u:
LABEL_17:
      swift_bridgeObjectRelease();
      goto LABEL_18;
    case 3u:
      if (*v5 != (id)1) {
        goto LABEL_7;
      }
      goto LABEL_18;
    case 4u:
LABEL_7:

      goto LABEL_18;
    case 6u:
      swift_bridgeObjectRelease();
      NSString v9 = (char *)v5 + *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
      uint64_t v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
      (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
      goto LABEL_18;
    default:
      goto LABEL_18;
  }
}

uint64_t sub_10007E160(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ViewServiceInput(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007E1C4()
{
  uint64_t v2 = *(void *)(type metadata accessor for ViewServiceInput(0) - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100076840;
  v5[5] = v3;
  v5[6] = v4;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10007D908, 0, 0);
}

uint64_t sub_10007E2AC(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10035F870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10007E30C()
{
  unint64_t result = qword_10035FB68;
  if (!qword_10035FB68)
  {
    type metadata accessor for ViewServiceInput(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035FB68);
  }
  return result;
}

uint64_t sub_10007E364(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10007E3C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a6 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_delegate + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a6 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_internalCnx) = 0;
  *(void *)(a6 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_delayedRetryTask) = 0;
  *(void *)(a6 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_retries) = 0;
  uint64_t v11 = a6 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_id;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, a1, v12);
  uint64_t v14 = a6 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_retryPolicy;
  *(void *)uint64_t v14 = a2;
  *(void *)(v14 + 8) = a3;
  *(unsigned char *)(v14 + 16) = a4;
  *(void *)(a6 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_delegate + 8) = &off_1003229E8;
  swift_unknownObjectWeakAssign();
  swift_release();
  id v15 = sub_1001E99C8();
  NSString v16 = String._bridgeToObjectiveC()();
  [v15 ulog:40 message:v16];

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  return a6;
}

uint64_t sub_10007E54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10007E364(a5, v5 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 80) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10007E608;
  v7[13] = a4;
  v7[14] = v5 + 16;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10007DAA0, 0, 0);
}

uint64_t sub_10007E608()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10007E6FC()
{
  swift_unknownObjectRelease();
  swift_release();
  sub_10007E9D0(*(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(_WORD *)(v0 + 96), (uint64_t (*)(void))sub_100076598, (uint64_t (*)(void))sub_10007E784);

  return _swift_deallocObject(v0, 98, 7);
}

uint64_t sub_10007E784(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8, char a9)
{
  if (a9 == 2)
  {
    return sub_10007E80C(result, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    if (a9 != 1)
    {
      if (a9) {
        return result;
      }
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10007E80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  if (a8 != 0xFF) {
    return sub_10007E820(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t sub_10007E820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  if (a8 < 2u)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (a8 == 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10007E894(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10007EB64;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10035FB70 + dword_10035FB70);
  return v8(a1, v4, v5, v6, (uint64_t)(v1 + 5));
}

uint64_t sub_10007E964(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007E9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int16 a8, uint64_t (*a9)(void), uint64_t (*a10)(void))
{
  int v10 = a8 >> 14;
  if (v10 == 3) {
    return a10();
  }
  if (v10 == 2) {
    return a9();
  }
  return result;
}

uint64_t sub_10007EA08(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8, char a9)
{
  if (a9 == 2)
  {
    return sub_10007EA88(result, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    if (a9 != 1)
    {
      if (a9) {
        return result;
      }
      swift_bridgeObjectRetain();
    }
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_10007EA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  if (a8 != 0xFF) {
    return sub_10007EA9C(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t sub_10007EA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  if (a8 < 2u)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  if (a8 == 2)
  {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_10007EB10()
{
  unint64_t result = qword_10035FB88;
  if (!qword_10035FB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035FB88);
  }
  return result;
}

uint64_t sub_10007EB6C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ActivityProxyModel()
{
  return self;
}

uint64_t sub_10007EBF0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1000B4664(a1, WitnessTable);
}

uint64_t sub_10007EC44()
{
  id v1 = sub_1001F65C4();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ActivityProxyClientContext()
{
  return self;
}

void sub_10007ED08(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 16);
}

uint64_t sub_10007ED18(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1000B4664(a1, WitnessTable);
}

uint64_t sub_10007ED6C()
{
  if (*(void *)(v0 + 48))
  {
    uint64_t v1 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v2 = v0;
    v9[0] = *(void *)(*(void *)(v0 + 40) + 40);
    sub_10000A38C(&qword_10035ABB8);
    sub_10000B010(&qword_10035ABC0, &qword_10035ABB8);
    uint64_t v3 = Publisher.eraseToAnyPublisher()();
    uint64_t v4 = swift_allocObject();
    swift_weakInit();
    uint64_t v5 = *(void *)(v2 + 16);
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t v7 = *(void *)(v5 + 80);
    v9[0] = v3;
    v9[1] = (uint64_t)sub_100086B90;
    _OWORD v9[2] = v4;
    v9[3] = v6;
    void v9[4] = v7;
    type metadata accessor for PeerActivityObserver();
    swift_allocObject();
    swift_retain();
    uint64_t v1 = sub_10008EE90(v9);
    *(void *)(v2 + 48) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_10007EE98(uint64_t a1)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    char v2 = sub_100082678(a1);
    swift_release();
  }
  else
  {
    char v2 = 0;
  }
  return v2 & 1;
}

uint64_t *sub_10007EF08(uint64_t a1)
{
  uint64_t v2 = *v1;
  type metadata accessor for DeviceActivity();
  swift_allocObject();
  v1[3] = (uint64_t)sub_1001FB314();
  sub_10000A38C(&qword_10035FEA8);
  uint64_t v3 = swift_allocObject();
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = [objc_allocWithZone((Class)NSLock) init];
  sub_10000A38C(&qword_10035FEB0);
  swift_allocObject();
  uint64_t v4 = PassthroughSubject.init()();
  sub_10000A38C(&qword_10035FEB8);
  swift_allocObject();
  uint64_t v5 = PassthroughSubject.init()();
  swift_allocObject();
  uint64_t v6 = PassthroughSubject.init()();
  *(void *)(v3 + 40) = v4;
  *(void *)(v3 + 48) = v5;
  *(void *)(v3 + 56) = v6;
  *(void *)(v3 + 64) = &_swiftEmptyDictionarySingleton;
  *(void *)(v3 + 72) = 0;
  type metadata accessor for ActivityProxyClientContext();
  sub_100086B98(&qword_10035FEC0, v7, (void (*)(uint64_t))type metadata accessor for ActivityProxyClientContext);
  *(void *)(v3 + 16) = swift_getKeyPath();
  *(unsigned char *)(v3 + 24) = 0;
  v1[4] = v3;
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000A38C(&qword_10035FEC8);
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 24) = 0;
  *(void *)(v9 + 32) = [objc_allocWithZone((Class)NSLock) init];
  sub_10000A38C(&qword_10035ABB8);
  swift_allocObject();
  uint64_t v10 = PassthroughSubject.init()();
  sub_10000A38C(&qword_10035FED0);
  swift_allocObject();
  uint64_t v11 = PassthroughSubject.init()();
  swift_allocObject();
  uint64_t v12 = PassthroughSubject.init()();
  *(void *)(v9 + 40) = v10;
  *(void *)(v9 + 48) = v11;
  *(void *)(v9 + 56) = v12;
  *(void *)(v9 + 64) = &_swiftEmptyDictionarySingleton;
  *(void *)(v9 + 72) = 0;
  *(void *)(v9 + 16) = KeyPath;
  *(unsigned char *)(v9 + 24) = 0;
  v1[5] = v9;
  v1[6] = 0;
  v1[7] = (uint64_t)&_swiftEmptySetSingleton;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v2, (uint64_t)&off_100322D80);
  v1[2] = a1;
  return v1;
}

uint64_t sub_10007F1B0()
{
  id v1 = sub_1001F5DFC();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10007F248()
{
  sub_10007F1B0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ActivityProxy()
{
  return self;
}

uint64_t sub_10007F2A0()
{
  uint64_t v1 = *v0;
  NSString v2 = v0;
  uint64_t v176 = v0;
  uint64_t v3 = v1;
  uint64_t v157 = sub_10000A38C(&qword_10035E1B0);
  uint64_t v156 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  uint64_t v155 = (char *)v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = sub_10000A38C(&qword_10035FF70);
  uint64_t v149 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v146 = (char *)v139 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = sub_10000A38C(&qword_10035FF78);
  uint64_t v147 = *(void *)(v148 - 8);
  uint64_t v6 = __chkstk_darwin(v148);
  unint64_t v145 = (char *)v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = v7;
  __chkstk_darwin(v6);
  uint64_t v171 = (char *)v139 - v8;
  uint64_t v154 = sub_10000A38C(&qword_10035E1B8);
  uint64_t v153 = *(void *)(v154 - 8);
  uint64_t v9 = __chkstk_darwin(v154);
  uint64_t v152 = (char *)v139 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = v10;
  __chkstk_darwin(v9);
  uint64_t v172 = (char *)v139 - v11;
  uint64_t v142 = sub_10000A38C(&qword_10035FF80);
  uint64_t v141 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v140 = (char *)v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000A38C(&qword_10035FF88);
  uint64_t v168 = *(void *)(v13 - 8);
  uint64_t v169 = v13;
  __chkstk_darwin(v13);
  uint64_t v167 = (char *)v139 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_10035AC20);
  __chkstk_darwin(v15 - 8);
  uint64_t v161 = (char *)v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v160 = *(void *)(v162 - 8);
  __chkstk_darwin(v162);
  uint64_t v170 = (char *)v139 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000A38C(&qword_10035FF90);
  uint64_t v165 = *(void *)(v18 - 8);
  uint64_t v166 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v164 = (char *)v139 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v163 = (char *)v139 - v22;
  uint64_t v159 = v23;
  __chkstk_darwin(v21);
  uint64_t v158 = (char *)v139 - v24;
  uint64_t v25 = sub_10000A38C(&qword_10035FF98);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)v139 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v29 = sub_1001F5DFC();
  NSString v30 = String._bridgeToObjectiveC()();
  [v29 ulog:40 message:v30];

  uint64_t v173 = (void *)v2[2];
  uint64_t v178 = *(void *)(v173[3] + 40);
  uint64_t v174 = sub_10000A38C(&qword_10035ABB8);
  uint64_t v143 = sub_10000B010(&qword_10035ABC0, &qword_10035ABB8);
  uint64_t v31 = Publisher.eraseToAnyPublisher()();
  uint64_t v175 = v3;
  id v32 = sub_10016B098(v3, (uint64_t)&off_100322D80);
  uint64_t v178 = v31;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = sub_100080E9C;
  *(void *)(v33 + 24) = 0;
  *(void *)(v33 + 32) = v31;
  strcpy((char *)(v33 + 40), "Found device");
  *(unsigned char *)(v33 + 53) = 0;
  *(_WORD *)(v33 + 54) = -5120;
  *(void *)(v33 + 56) = 0;
  *(void *)(v33 + 64) = 0xE000000000000000;
  *(void *)(v33 + 72) = v32;
  *(_DWORD *)(v33 + 80) = 40;
  swift_retain();
  id v34 = v32;
  sub_10000A38C(&qword_10035ABC8);
  type metadata accessor for HandoffDevice();
  sub_10000B010(&qword_10035ABD0, &qword_10035ABC8);
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10035FFA0, &qword_10035FF98);
  uint64_t v35 = Publisher.eraseToAnyPublisher()();
  uint64_t v36 = v25;
  uint64_t v37 = v176;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v36);
  swift_release();

  uint64_t v178 = v35;
  swift_allocObject();
  swift_weakInit();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v178 = *(void *)(sub_10007ED6C() + 56);
  uint64_t v178 = Publisher.share()();
  sub_10000A38C(&qword_10035FFA8);
  sub_10000B010(&qword_10035FFB0, &qword_10035FFA8);
  uint64_t v38 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
  uint64_t v178 = v38;
  swift_allocObject();
  swift_weakInit();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  uint64_t v174 = (uint64_t)(v37 + 7);
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_retain();
  uint64_t v39 = sub_100257DC4(0, 1);
  swift_release();
  if (v39)
  {
    uint64_t v178 = v39;
    id v40 = v170;
    OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)();
    if (qword_10035A628 != -1) {
      swift_once();
    }
    id v41 = (void *)qword_1003ACB50;
    id v177 = (id)qword_1003ACB50;
    uint64_t v42 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v43 = (uint64_t)v161;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v161, 1, 1, v42);
    id v44 = v41;
    uint64_t v143 = sub_10000A38C(&qword_10035FFD8);
    sub_10000A34C();
    v139[1] = sub_10000B010(&qword_10035FFE0, &qword_10035FFD8);
    sub_100086B98((unint64_t *)&qword_10035AC60, 255, (void (*)(uint64_t))sub_10000A34C);
    unint64_t v45 = v158;
    Publisher.debounce<A>(for:scheduler:options:)();
    sub_10000AC28(v43);

    (*(void (**)(char *, uint64_t))(v160 + 8))(v40, v162);
    swift_release();
    id v46 = sub_10016B098(v175, (uint64_t)&off_100322D80);
    uint64_t v48 = v165;
    uint64_t v47 = v166;
    id v49 = v163;
    (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v163, v45, v166);
    unint64_t v50 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
    unint64_t v51 = (v159 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v52 = (v51 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v53 = (v52 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = 0;
    *(void *)(v54 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v48 + 32))(v54 + v50, v49, v47);
    uint64_t v55 = (void *)(v54 + v51);
    *uint64_t v55 = 0xD000000000000015;
    v55[1] = 0x80000001002B6120;
    unint64_t v56 = (void *)(v54 + v52);
    *unint64_t v56 = 0;
    v56[1] = 0xE000000000000000;
    *(void *)(v54 + v53) = v46;
    *(_DWORD *)(v54 + ((v53 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
    id v57 = v46;
    sub_10000A38C((uint64_t *)&unk_10036C080);
    sub_10000B010(&qword_10035FFE8, &qword_10035FF90);
    uint64_t v58 = v167;
    uint64_t v59 = v158;
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035FFF0, &qword_10035FF88);
    uint64_t v60 = v169;
    uint64_t v61 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v168 + 8))(v58, v60);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v59, v47);
    uint64_t v62 = swift_allocObject();
    swift_weakInit();
    uint64_t v178 = v61;
    uint64_t v63 = (void *)swift_allocObject();
    v63[2] = 0;
    v63[3] = 0;
    v63[4] = v61;
    v63[5] = 0;
    uint64_t v64 = swift_allocObject();
    *(void *)(v64 + 16) = sub_100086860;
    *(void *)(v64 + 24) = v62;
    swift_retain();
    swift_retain();
    Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  uint64_t v65 = v170;
  swift_retain();
  uint64_t v66 = sub_100257DC4(3, 1);
  swift_release();
  if (v66)
  {
    id v67 = sub_10016B098(v175, (uint64_t)&off_100322D80);
    uint64_t v178 = v66;
    uint64_t v68 = swift_allocObject();
    *(void *)(v68 + 16) = 0;
    *(void *)(v68 + 24) = 0;
    *(void *)(v68 + 32) = v66;
    *(void *)(v68 + 40) = 0xD000000000000014;
    *(void *)(v68 + 48) = 0x80000001002B6100;
    *(void *)(v68 + 56) = 0;
    *(void *)(v68 + 64) = 0xE000000000000000;
    *(void *)(v68 + 72) = v67;
    *(_DWORD *)(v68 + 80) = 40;
    swift_retain();
    id v69 = v67;
    sub_10000A38C(&qword_10035FFD8);
    sub_10000A38C((uint64_t *)&unk_10036C080);
    sub_10000B010(&qword_10035FFE0, &qword_10035FFD8);
    uint64_t v70 = v140;
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035FFF8, &qword_10035FF80);
    uint64_t v71 = v142;
    uint64_t v72 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v141 + 8))(v70, v71);
    swift_release();

    uint64_t v73 = swift_allocObject();
    swift_weakInit();
    uint64_t v178 = v72;
    NSString v74 = (void *)swift_allocObject();
    v74[2] = 0;
    v74[3] = 0;
    v74[4] = v72;
    v74[5] = 0;
    uint64_t v75 = swift_allocObject();
    *(void *)(v75 + 16) = sub_10008671C;
    *(void *)(v75 + 24) = v73;
    swift_retain();
    swift_retain();
    Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  swift_retain();
  uint64_t v76 = sub_100257DC4(4, 1);
  swift_release();
  if (v76)
  {
    uint64_t v178 = v76;
    OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)();
    if (qword_10035A628 != -1) {
      swift_once();
    }
    uint64_t v77 = (void *)qword_1003ACB50;
    id v177 = (id)qword_1003ACB50;
    uint64_t v78 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v79 = (uint64_t)v161;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v161, 1, 1, v78);
    id v80 = v77;
    uint64_t v158 = (char *)sub_10000A38C(&qword_10035FFD8);
    sub_10000A34C();
    uint64_t v143 = sub_10000B010(&qword_10035FFE0, &qword_10035FFD8);
    sub_100086B98((unint64_t *)&qword_10035AC60, 255, (void (*)(uint64_t))sub_10000A34C);
    id v81 = v164;
    Publisher.debounce<A>(for:scheduler:options:)();
    sub_10000AC28(v79);

    (*(void (**)(char *, uint64_t))(v160 + 8))(v65, v162);
    swift_release();
    id v82 = sub_10016B098(v175, (uint64_t)&off_100322D80);
    uint64_t v84 = v165;
    uint64_t v83 = v166;
    Swift::String v85 = v163;
    (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v163, v81, v166);
    unint64_t v86 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    unint64_t v87 = (v159 + v86 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v88 = (v87 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v89 = (v88 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v90 = swift_allocObject();
    *(void *)(v90 + 16) = 0;
    *(void *)(v90 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v84 + 32))(v90 + v86, v85, v83);
    Swift::String v91 = (void *)(v90 + v87);
    void *v91 = 0xD000000000000015;
    v91[1] = 0x80000001002B60E0;
    Swift::String v92 = (void *)(v90 + v88);
    *Swift::String v92 = 0;
    v92[1] = 0xE000000000000000;
    *(void *)(v90 + v89) = v82;
    *(_DWORD *)(v90 + ((v89 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
    id v93 = v82;
    sub_10000A38C((uint64_t *)&unk_10036C080);
    sub_10000B010(&qword_10035FFE8, &qword_10035FF90);
    uint64_t v94 = v167;
    unint64_t v95 = v164;
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035FFF0, &qword_10035FF88);
    uint64_t v96 = v169;
    uint64_t v97 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v168 + 8))(v94, v96);

    (*(void (**)(char *, uint64_t))(v84 + 8))(v95, v83);
    uint64_t v98 = swift_allocObject();
    swift_weakInit();
    uint64_t v178 = v97;
    NSString v99 = (void *)swift_allocObject();
    v99[2] = 0;
    v99[3] = 0;
    v99[4] = v97;
    v99[5] = 0;
    uint64_t v100 = swift_allocObject();
    *(void *)(v100 + 16) = sub_10008669C;
    *(void *)(v100 + 24) = v98;
    swift_retain();
    swift_retain();
    Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  swift_retain();
  uint64_t v101 = sub_1000C5658();
  swift_release();
  uint64_t v178 = v101;
  sub_10000A38C(&qword_10035FFB8);
  uint64_t v169 = sub_10000A38C(&qword_10035D0E0);
  uint64_t v173 = &protocol conformance descriptor for AnyPublisher<A, B>;
  sub_10000B010(&qword_10035FFC0, &qword_10035FFB8);
  Swift::String v102 = v171;
  Publisher.map<A>(_:)();
  swift_release();
  id v103 = sub_1001F5DFC();
  uint64_t v104 = v147;
  id v105 = v145;
  uint64_t v106 = v148;
  (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v145, v102, v148);
  unint64_t v107 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
  unint64_t v108 = (v144 + v107 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v109 = (v108 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v110 = (v109 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v111 = swift_allocObject();
  *(void *)(v111 + 16) = 0;
  *(void *)(v111 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v104 + 32))(v111 + v107, v105, v106);
  int64_t v112 = (void *)(v111 + v108);
  *int64_t v112 = 0xD000000000000021;
  v112[1] = 0x80000001002B6090;
  id v113 = (void *)(v111 + v109);
  void *v113 = 0;
  v113[1] = 0xE000000000000000;
  *(void *)(v111 + v110) = v103;
  *(_DWORD *)(v111 + ((v110 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  uint64_t v170 = (char *)&protocol conformance descriptor for Publishers.Map<A, B>;
  sub_10000B010(&qword_10035FFC8, &qword_10035FF78);
  id v114 = v103;
  NSString v115 = v146;
  id v116 = v171;
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10035FFD0, &qword_10035FF70);
  uint64_t v117 = v150;
  uint64_t v118 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v149 + 8))(v115, v117);

  (*(void (**)(char *, uint64_t))(v104 + 8))(v116, v106);
  uint64_t v178 = v118;
  uint64_t v119 = swift_allocObject();
  uint64_t v120 = v175;
  *(void *)(v119 + 16) = v175;
  sub_10000A38C(&qword_10035E208);
  uint64_t v171 = (char *)sub_10000A38C(&qword_10035D0D8);
  sub_10000B010(&qword_10035E210, &qword_10035E208);
  uint64_t v121 = v172;
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  id v122 = sub_10016B098(v120, (uint64_t)&off_100322D80);
  uint64_t v123 = v153;
  id v124 = v152;
  uint64_t v125 = v154;
  (*(void (**)(char *, char *, uint64_t))(v153 + 16))(v152, v121, v154);
  unint64_t v126 = (*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80);
  unint64_t v127 = (v151 + v126 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v128 = (v127 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v129 = (v128 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v130 = swift_allocObject();
  *(void *)(v130 + 16) = 0;
  *(void *)(v130 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v123 + 32))(v130 + v126, v124, v125);
  uint64_t v131 = (void *)(v130 + v127);
  void *v131 = 0xD000000000000015;
  v131[1] = 0x80000001002B60C0;
  uint64_t v132 = (void *)(v130 + v128);
  void *v132 = 0;
  v132[1] = 0xE000000000000000;
  *(void *)(v130 + v129) = v122;
  *(_DWORD *)(v130 + ((v129 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  sub_10000B010(&qword_10035E218, &qword_10035E1B8);
  id v133 = v122;
  uint64_t v134 = v155;
  uint64_t v135 = v172;
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10035E220, &qword_10035E1B0);
  uint64_t v136 = v157;
  uint64_t v137 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v156 + 8))(v134, v136);

  (*(void (**)(char *, uint64_t))(v123 + 8))(v135, v125);
  uint64_t v178 = v137;
  swift_allocObject();
  swift_weakInit();
  sub_10000A38C(&qword_10035E228);
  sub_10000B010(&qword_10035E230, &qword_10035E228);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100080E9C()
{
  swift_retain();
  uint64_t v0 = sub_1001F7514();
  swift_release();
  return v0;
}

uint64_t sub_100080EE8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10008154C(v1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100080F48(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    sub_100212764(v1);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_100080FD4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = *(void *)(Strong + 24);
    swift_retain();
    swift_release();
    if (v1)
    {
      self;
      uint64_t v4 = (void *)swift_dynamicCastObjCClass();
      if (v4) {
        swift_unknownObjectRetain();
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void **)(v3 + 16);
    *(void *)(v3 + 16) = v4;
    id v6 = v4;

    uint64_t v7 = *(void **)(v3 + 16);
    id v8 = v7;
    sub_1001FA338(v7);
    swift_release();
  }
}

uint64_t sub_1000810AC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = *(void *)(result + 24);
    swift_retain();
    swift_release();
    if (v1)
    {
      self;
      uint64_t v4 = (void *)swift_dynamicCastObjCClass();
      if (v4) {
        swift_unknownObjectRetain();
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void *)(v3 + 40);
    id v6 = *(void **)(v5 + 24);
    *(void *)(v5 + 24) = v4;
    id v7 = v4;
    swift_retain();

    sub_100104EC4();
    id v8 = *(id *)(v5 + 24);
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();

    return swift_release();
  }
  return result;
}

uint64_t sub_1000811C0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = *(void *)(result + 24);
    swift_retain();
    swift_release();
    if (v1)
    {
      self;
      uint64_t v4 = (void *)swift_dynamicCastObjCClass();
      if (v4) {
        swift_unknownObjectRetain();
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void *)(v3 + 56);
    id v6 = *(void **)(v5 + 24);
    *(void *)(v5 + 24) = v4;
    id v7 = v4;
    swift_retain();

    sub_100105130();
    id v8 = *(id *)(v5 + 24);
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();

    return swift_release();
  }
  return result;
}

id sub_1000812D4@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  self;
  id result = (id)swift_dynamicCastObjCClass();
  id v5 = result;
  if (result) {
    id result = v3;
  }
  *a2 = v5;
  return result;
}

void sub_100081328(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!*a1)
  {
    sub_10016ABE4(0xD000000000000010, (void *)0x80000001002B6140, 0, a2, (uint64_t)&off_100322D80);
LABEL_9:
    id v8 = 0;
    goto LABEL_10;
  }
  id v5 = *a1;
  id v6 = [v5 selectedDeviceState];
  if (!v6)
  {
    sub_10016ABE4(0xD00000000000001ALL, (void *)0x80000001002B6160, 0, a2, (uint64_t)&off_100322D80);
LABEL_8:

    goto LABEL_9;
  }
  id v7 = v6;
  if (([v6 playerHasPlayedRecently] & 1) == 0)
  {
    sub_10016ABE4(0xD000000000000020, (void *)0x80000001002B6180, 0, a2, (uint64_t)&off_100322D80);

    goto LABEL_8;
  }
  id v8 = [objc_allocWithZone((Class)PCMediaActivity) initWithDisplayContext:v5 response:v7];

LABEL_10:
  *a3 = v8;
}

uint64_t sub_100081468(void **a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = *(void *)(result + 24);
    swift_retain();
    swift_release();
    uint64_t v4 = *(void *)(v3 + 48);
    id v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = v1;
    id v6 = v1;
    swift_retain();

    sub_100104ED0();
    id v7 = *(id *)(v4 + 24);
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();

    return swift_release();
  }
  return result;
}

void sub_10008154C(uint64_t a1)
{
  NSString v2 = v1;
  uint64_t v106 = *v2;
  uint64_t v4 = sub_10000A38C(&qword_10035FED8);
  uint64_t v102 = *(void *)(v4 - 8);
  uint64_t v103 = v4;
  __chkstk_darwin(v4);
  uint64_t v101 = (char *)v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10035FEE0);
  uint64_t v94 = *(void *)(v6 - 8);
  uint64_t v95 = v6;
  __chkstk_darwin(v6);
  id v93 = (char *)v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10035FEE8);
  uint64_t v99 = *(void *)(v8 - 8);
  uint64_t v100 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v96 = v10;
  uint64_t v97 = (char *)v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v107 = (char *)v84 - v11;
  uint64_t v90 = sub_10000A38C(&qword_10035FEF0);
  uint64_t v89 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  unint64_t v88 = (char *)v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000A38C(&qword_10035FEF8);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000A38C(&qword_10035FF00);
  uint64_t v85 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000A38C(&qword_10035FF08);
  uint64_t v87 = *(void *)(v20 - 8);
  uint64_t v21 = *(void *)(v87 + 64);
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v86 = (char *)v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  id v105 = (char *)v84 - v23;
  uint64_t v24 = a1;
  if (sub_10003CD08())
  {
    uint64_t v108 = sub_10003BDB0();
    uint64_t v25 = swift_allocObject();
    swift_weakInit();
    uint64_t v26 = swift_allocObject();
    Swift::String v92 = v2;
    *(void *)(v26 + 16) = v25;
    *(void *)(v26 + 24) = v24;
    uint64_t v104 = v24;
    swift_retain();
    uint64_t v27 = v20;
    v84[0] = sub_10000A38C(&qword_10035AC48);
    uint64_t v98 = &protocol conformance descriptor for AnyPublisher<A, B>;
    v84[1] = sub_10000B010(&qword_10035AC50, &qword_10035AC48);
    Publisher.filter(_:)();
    swift_release();
    swift_release();
    Swift::String v91 = &protocol conformance descriptor for Publishers.Filter<A>;
    sub_10000B010(&qword_10035FF10, &qword_10035FEF8);
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    *(unsigned char *)(swift_allocObject() + 16) = 1;
    v84[2] = &protocol conformance descriptor for Publishers.Map<A, B>;
    sub_10000B010(&qword_10035FF18, &qword_10035FF00);
    uint64_t v28 = v105;
    Publisher.filter(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v85 + 8))(v19, v17);
    uint64_t v108 = 0;
    unint64_t v109 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    uint64_t v108 = 0xD000000000000027;
    unint64_t v109 = 0x80000001002B6030;
    swift_retain();
    uint64_t v29 = sub_1001F7514();
    uint64_t v31 = v30;
    swift_release();
    v32._uint64_t countAndFlagsBits = v29;
    v32._object = v31;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    unint64_t v33 = v109;
    uint64_t v85 = v108;
    id v34 = sub_10016B098(v106, (uint64_t)&off_100322D80);
    uint64_t v35 = v87;
    uint64_t v36 = v86;
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v86, v28, v27);
    unint64_t v37 = (*(unsigned __int8 *)(v35 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    unint64_t v38 = (v21 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v39 = (v38 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v40 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v40 + v37, v36, v27);
    id v41 = (uint64_t *)(v40 + v38);
    *id v41 = v85;
    v41[1] = v33;
    *(void *)(v40 + v39) = v34;
    *(_DWORD *)(v40 + ((v39 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
    sub_10000B010(&qword_10035FF20, &qword_10035FF08);
    swift_bridgeObjectRetain();
    id v42 = v34;
    uint64_t v43 = v88;
    id v44 = v105;
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035FF28, &qword_10035FEF0);
    uint64_t v45 = v90;
    uint64_t v46 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v43, v45);
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v35 + 8))(v44, v27);
    uint64_t v108 = v46;
    uint64_t v47 = swift_allocObject();
    swift_weakInit();
    uint64_t v48 = swift_allocObject();
    uint64_t v49 = v104;
    *(void *)(v48 + 16) = v47;
    *(void *)(v48 + 24) = v49;
    swift_retain();
    id v105 = (char *)sub_10000A38C(&qword_10035FF30);
    uint64_t v90 = sub_10000B010(&qword_10035FF38, &qword_10035FF30);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    uint64_t v89 = v49 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_tasks;
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v108 = sub_10003BDB0();
    unint64_t v50 = v93;
    Publisher.map<A>(_:)();
    swift_release();
    *(unsigned char *)(swift_allocObject() + 16) = 1;
    sub_10000B010(&qword_10035FF40, &qword_10035FEE0);
    unint64_t v51 = v107;
    uint64_t v52 = v95;
    Publisher.filter(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v94 + 8))(v50, v52);
    uint64_t v108 = 0;
    unint64_t v109 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    uint64_t v108 = 0xD00000000000002BLL;
    unint64_t v109 = 0x80000001002B6060;
    swift_retain();
    uint64_t v53 = sub_1001F7514();
    uint64_t v55 = v54;
    swift_release();
    v56._uint64_t countAndFlagsBits = v53;
    v56._object = v55;
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    unint64_t v57 = v109;
    uint64_t v95 = v108;
    id v58 = sub_10016B098(v106, (uint64_t)&off_100322D80);
    uint64_t v59 = v99;
    uint64_t v60 = v97;
    uint64_t v61 = v51;
    uint64_t v62 = v100;
    (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v97, v61, v100);
    unint64_t v63 = (*(unsigned __int8 *)(v59 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
    unint64_t v64 = (v96 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v65 = (v64 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v66 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v59 + 32))(v66 + v63, v60, v62);
    id v67 = (uint64_t *)(v66 + v64);
    uint64_t *v67 = v95;
    v67[1] = v57;
    *(void *)(v66 + v65) = v58;
    *(_DWORD *)(v66 + ((v65 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
    sub_10000B010(&qword_10035FF48, &qword_10035FEE8);
    swift_bridgeObjectRetain();
    id v68 = v58;
    id v69 = v101;
    uint64_t v70 = v107;
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10035FF50, &qword_10035FED8);
    uint64_t v71 = v103;
    uint64_t v72 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v102 + 8))(v69, v71);
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v59 + 8))(v70, v62);
    uint64_t v108 = v72;
    uint64_t v73 = swift_allocObject();
    swift_weakInit();
    uint64_t v74 = swift_allocObject();
    uint64_t v75 = v104;
    *(void *)(v74 + 16) = v73;
    *(void *)(v74 + 24) = v75;
    swift_retain();
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v108 = *(void *)(v75 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_activityStreamErrorSubject);
    sub_10000A38C(&qword_10035E140);
    sub_10000B010(&qword_10035FF58, &qword_10035E140);
    uint64_t v108 = Publisher.eraseToAnyPublisher()();
    uint64_t v76 = swift_allocObject();
    swift_weakInit();
    uint64_t v77 = swift_allocObject();
    *(void *)(v77 + 16) = v76;
    *(void *)(v77 + 24) = v75;
    swift_retain();
    sub_10000A38C(&qword_10035FF60);
    sub_10000B010(&qword_10035FF68, &qword_10035FF60);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  else
  {
    uint64_t v108 = 0;
    unint64_t v109 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    uint64_t v108 = 0xD00000000000002ALL;
    unint64_t v109 = 0x80000001002B6000;
    swift_retain();
    uint64_t v78 = sub_1001F7514();
    id v80 = v79;
    swift_release();
    v81._uint64_t countAndFlagsBits = v78;
    v81._object = v80;
    String.append(_:)(v81);
    swift_bridgeObjectRelease();
    id v82 = sub_1001F5DFC();
    swift_bridgeObjectRetain();
    unint64_t v107 = (char *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v82 ulog:40 message:v107];
    swift_bridgeObjectRelease();

    uint64_t v83 = v107;
  }
}

BOOL sub_1000824C4()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    BOOL v0 = sub_1000CEF70();
    swift_release();
    return !v0;
  }
  else
  {
    return 0;
  }
}

unsigned __int8 *sub_100082558@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v2 = *result;
  if (v2 == 5) {
    LOBYTE(v2) = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t sub_10008256C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    sub_100121F6C(a3);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000825EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    sub_100212764(a3);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100082678(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v4 = *(id *)(qword_1003AC750 + 1504);
  char v5 = sub_1000FD938();

  if (v5)
  {
    uint64_t v6 = (void *)0x80000001002B5FC0;
    uint64_t v7 = 1;
    uint64_t v8 = a1;
    uint64_t v9 = 0xD000000000000012;
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(v2 + 16);
  uint64_t v11 = *(uint64_t (**)(uint64_t))(v10 + 32);
  swift_retain();
  LOBYTE(v11) = v11(a1);
  swift_release();
  if (v11)
  {
    uint64_t v9 = 0xD000000000000018;
    uint64_t v6 = (void *)0x80000001002B5FA0;
    uint64_t v7 = 1;
    uint64_t v8 = a1;
    goto LABEL_7;
  }
  char v13 = sub_10003E0FC();
  float v14 = sub_10014E15C(v13);
  swift_retain();
  CurrentValueSubject.value.getter();
  if (v27)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    float v15 = v28;
    int v16 = v29;
  }
  else
  {
    float v15 = v25;
    swift_release();
    int v16 = v26 & 1;
  }
  float v17 = INFINITY;
  if (!v16) {
    float v17 = v15;
  }
  if (v17 >= v14)
  {
    swift_retain();
    CurrentValueSubject.value.getter();
    if (v27)
    {
      CurrentValueSubject.value.getter();
      swift_release();
      if ((v29 & 1) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_release();
      if (((LODWORD(v25) | ((unint64_t)v26 << 32)) & 0x100000000) == 0)
      {
LABEL_22:
        uint64_t v20 = Float.description.getter();
        uint64_t v22 = v21;
LABEL_24:
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease();
        v23._uint64_t countAndFlagsBits = v20;
        v23._object = v22;
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        v24._uint64_t countAndFlagsBits = 41;
        v24._object = (void *)0xE100000000000000;
        String.append(_:)(v24);
        sub_1000860FC(a1, 0, 0xD000000000000012, (void *)0x80000001002B5F80);
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    uint64_t v20 = 7104878;
    uint64_t v22 = (void *)0xE300000000000000;
    goto LABEL_24;
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t))(v10 + 48);
  uint64_t v19 = swift_retain();
  LOBYTE(v18) = v18(v19);
  swift_release();
  if ((v18 & 1) == 0)
  {
    sub_1000860FC(a1, 0, 0x6F206E6565726353, (void *)0xEA00000000006666);
    return 0;
  }
  uint64_t v7 = 1;
  uint64_t v8 = a1;
  uint64_t v9 = 0x63656863206C6C41;
  uint64_t v6 = (void *)0xEF7373617020736BLL;
LABEL_7:
  sub_1000860FC(v8, 1, v9, v6);
  return v7;
}

uint64_t sub_100082988(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1000B4664(a1, WitnessTable);
}

uint64_t sub_1000829DC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100086B98(&qword_10035FE90, a2, (void (*)(uint64_t))type metadata accessor for ActivityProxy);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100082A34(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100086B98(&qword_10035FE98, a2, (void (*)(uint64_t))type metadata accessor for ActivityProxyClientContext);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100082A8C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100086B98(&qword_10035FEA0, a2, (void (*)(uint64_t))type metadata accessor for ActivityProxyModel);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_100082AE4(void *a1, void *a2)
{
  uint64_t v50 = *v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v50 - v10;
  uint64_t v52 = 0;
  uint64_t v53 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  uint64_t v52 = 0xD000000000000022;
  uint64_t v53 = (void *)0x80000001002B62B0;
  unint64_t v51 = a1;
  id v12 = [a1 description];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  float v15 = v14;

  v16._uint64_t countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 0x69746E656469202CLL;
  v17._object = (void *)0xED00003D72656966;
  String.append(_:)(v17);
  id v18 = [a2 description];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  v22._uint64_t countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  id v23 = sub_1001F5DFC();
  swift_bridgeObjectRetain();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v23 ulog:40 message:v24];
  swift_bridgeObjectRelease();

  uint64_t v25 = sub_100083FA4(a2, sub_1001115F0, 59, 0xD000000000000039, (void *)0x80000001002B6620);
  if (v25)
  {
    uint64_t v26 = v25;
    id v27 = [a2 accessoryID:v50];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v28 = [a2 homeID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v29 = objc_allocWithZone((Class)PCHomeKitIdentifier);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    Class v31 = UUID._bridgeToObjectiveC()().super.isa;
    id v32 = [v29 initWithAccessoryID:isa homeID:v31];

    unint64_t v33 = *(void (**)(char *, uint64_t))(v6 + 8);
    v33(v9, v5);
    v33(v11, v5);
    swift_getKeyPath();
    swift_getKeyPath();
    id v34 = v32;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v35 = sub_100098144();
    uint64_t v37 = v36;
    swift_release();
    sub_10002935C(v35, v37);
    swift_bridgeObjectRelease();
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v34 setDeviceName:v38];

    swift_getKeyPath();
    swift_getKeyPath();
    id v39 = v34;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v40 = *(void *)(v52 + OBJC_IVAR____TtC17proximitycontrold8Identity_cachedDeviceAsset);
    int v41 = *(unsigned __int8 *)(v52 + OBJC_IVAR____TtC17proximitycontrold8Identity_cachedDeviceAsset + 8);
    swift_release();
    if (v41) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = v40;
    }
    [v39 setAssetType:v42];

    sub_1000830B4(v51, v26, v39);
    swift_release();
  }
  else
  {
    uint64_t v52 = 0;
    uint64_t v53 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v43._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v43._object = (void *)0x80000001002B6660;
    String.append(_:)(v43);
    id v44 = [a2 description];
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v47 = v46;

    v48._uint64_t countAndFlagsBits = v45;
    v48._object = v47;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._object = (void *)0x80000001002B6310;
    v49._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v49);
    sub_10016AE10(90, v52, v53, 0, v50, (uint64_t)&off_100322D80);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100083080(void *a1)
{
  return sub_100083FA4(a1, sub_1001115F0, 59, 0xD000000000000039, (void *)0x80000001002B6620);
}

void sub_1000830B4(void *a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  uint64_t v74 = *v3;
  uint64_t v75 = a3;
  uint64_t v7 = sub_10000A38C(&qword_10035AC20);
  __chkstk_darwin(v7 - 8);
  id v69 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v64 = *(void *)(v9 - 8);
  uint64_t v65 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_100360000);
  uint64_t v61 = *(void *)(v12 - 8);
  uint64_t v62 = v12;
  __chkstk_darwin(v12);
  float v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_100360008);
  uint64_t v66 = *(void *)(v15 - 8);
  uint64_t v67 = v15;
  __chkstk_darwin(v15);
  unint64_t v63 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000A38C(&qword_100360010);
  uint64_t v71 = *(void *)(v17 - 8);
  uint64_t v72 = v17;
  __chkstk_darwin(v17);
  uint64_t v70 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = 0;
  unint64_t v78 = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  uint64_t v77 = 0x20746E65696C43;
  unint64_t v78 = 0xE700000000000000;
  id v19 = [a1 description];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v22 = v21;

  v23._uint64_t countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._object = (void *)0x80000001002B6330;
  v24._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = sub_1001F7514();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 0x6469206874697720;
  v26._object = (void *)0xE900000000000020;
  String.append(_:)(v26);
  uint64_t v27 = a2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
  type metadata accessor for UUID();
  sub_100086B98((unint64_t *)&qword_10035F778, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v68 = v27;
  v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  id v29 = sub_1001F5DFC();
  swift_bridgeObjectRetain();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 ulog:40 message:v30];
  swift_bridgeObjectRelease();

  uint64_t v73 = v4;
  swift_retain();
  id v76 = a1;
  uint64_t v31 = sub_100124774((uint64_t)a1);
  swift_release();
  if (v31)
  {
    swift_retain();
    uint64_t v77 = sub_100104B88();
    sub_10000A38C((uint64_t *)&unk_10036BFE0);
    sub_10000B010((unint64_t *)&unk_100363D30, (uint64_t *)&unk_10036BFE0);
    uint64_t v32 = Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    uint64_t v77 = v32;
    sub_100077DDC(a2, &v80);
    uint64_t v79 = v80;
    sub_10000A38C(&qword_100360018);
    sub_10000B010(&qword_100360020, &qword_100360018);
    uint64_t v33 = Publisher.eraseToAnyPublisher()();
    swift_release();
    uint64_t v80 = v33;
    sub_10000A38C(&qword_10035ACA0);
    sub_10000B010(&qword_10035ACB0, &qword_10035ACA0);
    Publishers.CombineLatest.init(_:_:)();
    id v34 = v11;
    OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)();
    sub_10000A34C();
    uint64_t v35 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v77 = (uint64_t)v35;
    sub_10000B010(&qword_100360028, &qword_100360000);
    sub_100086B98((unint64_t *)&qword_10035AC60, 255, (void (*)(uint64_t))sub_10000A34C);
    uint64_t v36 = v62;
    uint64_t v37 = v63;
    Publisher.throttle<A>(for:scheduler:latest:)();

    (*(void (**)(char *, uint64_t))(v64 + 8))(v34, v65);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v14, v36);
    uint64_t v77 = static OS_dispatch_queue.main.getter();
    uint64_t v38 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v39 = (uint64_t)v69;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v69, 1, 1, v38);
    sub_10000B010(&qword_100360030, &qword_100360008);
    uint64_t v40 = v70;
    uint64_t v41 = v67;
    Publisher.receive<A>(on:options:)();
    sub_10000AC28(v39);

    (*(void (**)(char *, uint64_t))(v66 + 8))(v37, v41);
    uint64_t v42 = swift_allocObject();
    swift_weakInit();
    uint64_t v43 = swift_allocObject();
    swift_weakInit();
    id v44 = (void *)swift_allocObject();
    v44[2] = v42;
    v44[3] = v43;
    uint64_t v46 = v75;
    id v45 = v76;
    v44[4] = a2;
    v44[5] = v45;
    uint64_t v47 = v74;
    v44[6] = v46;
    v44[7] = v47;
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = sub_100086C40;
    *(void *)(v48 + 24) = v44;
    sub_10000B010(&qword_100360038, &qword_100360010);
    swift_retain();
    id v49 = v45;
    id v50 = v46;
    uint64_t v51 = v72;
    uint64_t v52 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v40, v51);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v80 = *(void *)(v31 + 40);
    *(void *)(v31 + 40) = 0x8000000000000000;
    sub_10026492C(v52, v68, isUniquelyReferenced_nonNull_native);
    *(void *)(v31 + 40) = v80;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v77 = 0;
    unint64_t v78 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    uint64_t v77 = 0xD000000000000015;
    unint64_t v78 = 0x80000001002B61E0;
    id v54 = [v76 description];
    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v57 = v56;

    v58._uint64_t countAndFlagsBits = v55;
    v58._object = v57;
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    id v59 = sub_1001F5DFC();
    swift_bridgeObjectRetain();
    id v76 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v59 ulog:40 message:v76];
    swift_bridgeObjectRelease();

    id v60 = v76;
  }
}

void sub_100083AC4(void *a1, void *a2)
{
  uint64_t v5 = *v2;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  id v6 = [a1 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x69746E656469202CLL;
  v11._object = (void *)0xED00003D72656966;
  String.append(_:)(v11);
  id v12 = [a2 description];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  v16._uint64_t countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  id v17 = sub_1001F5DFC();
  swift_bridgeObjectRetain();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 ulog:40 message:v18];
  swift_bridgeObjectRelease();

  uint64_t v19 = sub_100083FA4(a2, sub_100112088, 63, 0xD00000000000003DLL, (void *)0x80000001002B6270);
  if (v19)
  {
    uint64_t v20 = v19;
    id v21 = [a2 mediaRemoteID];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v22 = objc_allocWithZone((Class)PCMediaRemoteIdentifier);
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v24 = [v22 initWithIdentifier:v23];

    swift_getKeyPath();
    swift_getKeyPath();
    id v25 = v24;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v26 = sub_100098144();
    uint64_t v28 = v27;
    swift_release();
    sub_10002935C(v26, v28);
    swift_bridgeObjectRelease();
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v25 setDeviceName:v29];

    swift_getKeyPath();
    swift_getKeyPath();
    id v30 = v25;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v31 = *(void *)(OBJC_IVAR____TtC17proximitycontrold8Identity_cachedDeviceAsset - 0x2FFFFFFFFFFFFFDELL);
    int v32 = *(unsigned __int8 *)(OBJC_IVAR____TtC17proximitycontrold8Identity_cachedDeviceAsset - 0x2FFFFFFFFFFFFFD6);
    swift_release();
    if (v32) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v31;
    }
    [v30 setAssetType:v33];

    sub_1000830B4(a1, v20, v30);
    swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(66);
    v34._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
    v34._object = (void *)0x80000001002B62E0;
    String.append(_:)(v34);
    id v35 = [a2 description];
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;

    v39._uint64_t countAndFlagsBits = v36;
    v39._object = v38;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._object = (void *)0x80000001002B6310;
    v40._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v40);
    sub_10016AE10(90, 0, (void *)0xE000000000000000, 0, v5, (uint64_t)&off_100322D80);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100083F70(void *a1)
{
  return sub_100083FA4(a1, sub_100112088, 63, 0xD00000000000003DLL, (void *)0x80000001002B6270);
}

uint64_t sub_100083FA4(void *a1, uint64_t (*a2)(uint64_t, id), Swift::Int a3, uint64_t a4, void *a5)
{
  id v9 = a1;
  uint64_t v10 = swift_retain();
  uint64_t v11 = a2(v10, v9);
  swift_release();

  if (!v11)
  {
    _StringGuts.grow(_:)(a3);
    v12._uint64_t countAndFlagsBits = a4;
    v12._object = a5;
    String.append(_:)(v12);
    id v13 = [v9 description];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v16 = v15;

    v17._uint64_t countAndFlagsBits = v14;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    id v18 = sub_1001F5DFC();
    swift_bridgeObjectRetain();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 ulog:90 message:v19];
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t sub_1000840E8(void *a1, void *a2)
{
  return sub_10008440C(a1, a2, sub_1001115F0, 59, 0xD000000000000039, (void *)0x80000001002B6620);
}

void sub_10008411C(void *a1, uint64_t a2)
{
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  id v4 = [a1 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x656369766564202CLL;
  v9._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v9);
  swift_retain();
  uint64_t v10 = sub_1001F7514();
  Swift::String v12 = v11;
  swift_release();
  v13._uint64_t countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  id v14 = sub_1001F5DFC();
  swift_bridgeObjectRetain();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 ulog:40 message:v15];
  swift_bridgeObjectRelease();

  swift_retain();
  uint64_t v16 = sub_100124774((uint64_t)a1);
  swift_release();
  if (v16)
  {
    sub_100084BB8(a1, a2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id);
    swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    id v17 = [a1 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    v21._uint64_t countAndFlagsBits = v18;
    v21._object = v20;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    id v22 = sub_1001F5DFC();
    swift_bridgeObjectRetain();
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v22 ulog:40 message:v23];
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000843D8(void *a1, void *a2)
{
  return sub_10008440C(a1, a2, sub_100112088, 63, 0xD00000000000003DLL, (void *)0x80000001002B6270);
}

uint64_t sub_10008440C(void *a1, void *a2, uint64_t (*a3)(uint64_t, id), Swift::Int a4, uint64_t a5, void *a6)
{
  uint64_t v33 = *v6;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  id v12 = [a1 description];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v15 = v14;

  v16._uint64_t countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 0x69746E656469202CLL;
  v17._object = (void *)0xED00003D72656966;
  String.append(_:)(v17);
  id v18 = [a2 description];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v21 = v20;

  v22._uint64_t countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  id v23 = sub_1001F5DFC();
  swift_bridgeObjectRetain();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v23 ulog:40 message:v24];
  swift_bridgeObjectRelease();

  uint64_t v25 = sub_100083FA4(a2, a3, a4, a5, a6);
  if (v25)
  {
    sub_10008411C(a1, v25);
    return swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    id v27 = [a2 description];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v30 = v29;

    v31._uint64_t countAndFlagsBits = v28;
    v31._object = v30;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._object = (void *)0x80000001002B6250;
    v32._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v32);
    sub_10016ABE4(0xD00000000000001DLL, (void *)0x80000001002B6230, 0, v33, (uint64_t)&off_100322D80);
    return swift_bridgeObjectRelease();
  }
}

void sub_100084708(void *a1)
{
  id v2 = [a1 description];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  id v7 = sub_1001F5DFC();
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 ulog:40 message:v8];
  swift_bridgeObjectRelease();

  swift_retain();
  uint64_t v9 = sub_100124774((uint64_t)a1);
  swift_release();
  if (v9)
  {
    swift_beginAccess();
    *(void *)(v9 + 40) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(void *)(v9 + 48) = &_swiftEmptyDictionarySingleton;
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    id v10 = [a1 description];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    v14._uint64_t countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    id v15 = sub_1001F5DFC();
    swift_bridgeObjectRetain();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v15 ulog:40 message:v16];
    swift_bridgeObjectRelease();
  }
}

void sub_100084968(void *a1)
{
  id v2 = [a1 description];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  id v7 = sub_1001F5DFC();
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 ulog:40 message:v8];
  swift_bridgeObjectRelease();

  swift_retain();
  uint64_t v9 = sub_100124774((uint64_t)a1);
  swift_release();
  if (v9)
  {
    sub_100084708(a1);
    swift_retain();
    sub_10021255C(v9);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    id v10 = [a1 description];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    v14._uint64_t countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    id v15 = sub_1001F5DFC();
    swift_bridgeObjectRetain();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v15 ulog:40 message:v16];
    swift_bridgeObjectRelease();
  }
}

void sub_100084BB8(void *a1, uint64_t a2)
{
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  id v4 = [a1 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = v6;

  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x656369766564202CLL;
  v9._object = (void *)0xEB000000003D4449;
  String.append(_:)(v9);
  type metadata accessor for UUID();
  sub_100086B98((unint64_t *)&qword_10035F778, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  id v11 = sub_1001F5DFC();
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:40 message:v12];
  swift_bridgeObjectRelease();

  swift_retain();
  uint64_t v13 = sub_100124774((uint64_t)a1);
  swift_release();
  if (v13)
  {
    swift_beginAccess();
    sub_1001301D0(a2);
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    sub_1001301D0(a2);
    swift_endAccess();
    swift_release();
    swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    id v14 = [a1 description];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v17 = v16;

    v18._uint64_t countAndFlagsBits = v15;
    v18._object = v17;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    id v19 = sub_1001F5DFC();
    swift_bridgeObjectRetain();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v19 ulog:40 message:v20];
    swift_bridgeObjectRelease();
  }
}

void sub_100084EE8(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = *v4;
  _StringGuts.grow(_:)(59);
  v9._uint64_t countAndFlagsBits = 0xD000000000000032;
  v9._object = (void *)0x80000001002B6520;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0x746E65696C63203ALL;
  v10._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v10);
  id v11 = [a1 description];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = v13;

  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0x656369766564202CLL;
  v16._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v16);
  swift_retain();
  uint64_t v17 = sub_1001F7514();
  id v19 = v18;
  swift_release();
  v20._uint64_t countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 0x69746E656469202CLL;
  v21._object = (void *)0xED00003D72656966;
  String.append(_:)(v21);
  id v22 = [a3 description];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._object = (void *)0x80000001002B6560;
  v27._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v27);
  id v28 = [a4 description];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v31 = v30;

  v32._uint64_t countAndFlagsBits = v29;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  id v33 = sub_1001F5DFC();
  swift_bridgeObjectRetain();
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v33 ulog:40 message:v34];
  swift_bridgeObjectRelease();

  id v63 = [objc_allocWithZone((Class)NSOrderedSet) init];
  self;
  uint64_t v35 = swift_dynamicCastObjCClass();
  if (v35)
  {
    uint64_t v36 = (void *)v35;
    id v37 = a3;
    if (![v36 assetType])
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v38 = sub_10009AE24();
      char v40 = v39;
      swift_release();
      if ((v40 & 1) == 0) {
        [v36 setAssetType:v38];
      }
    }
    sub_10016ABE4(0xD00000000000002BLL, (void *)0x80000001002B65F0, 0, v8, (uint64_t)&off_100322D80);
    uint64_t v41 = (void (**)(void))[a1 activityDataUpdateHandler];
    if (v41)
    {
      uint64_t v42 = v41;
      uint64_t v43 = v41[2];
LABEL_13:
      v43();
      _Block_release(v42);

      return;
    }
LABEL_14:

    return;
  }
  self;
  uint64_t v44 = swift_dynamicCastObjCClass();
  if (v44)
  {
    id v45 = (void *)v44;
    id v37 = a3;
    if (![v45 assetType])
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v46 = sub_10009AE24();
      char v48 = v47;
      swift_release();
      if ((v48 & 1) == 0) {
        [v45 setAssetType:v46];
      }
    }
    sub_10016ABE4(0xD000000000000027, (void *)0x80000001002B65C0, 0, v8, (uint64_t)&off_100322D80);
    id v49 = (void (**)(void))[a1 activityDataUpdateHandler];
    if (v49)
    {
      uint64_t v42 = v49;
      uint64_t v43 = v49[2];
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  _StringGuts.grow(_:)(61);
  v50._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v50._object = (void *)0x80000001002B6580;
  String.append(_:)(v50);
  id v51 = [a1 description];
  uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v54 = v53;

  v55._uint64_t countAndFlagsBits = v52;
  v55._object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v56._object = (void *)0xE900000000000020;
  v56._uint64_t countAndFlagsBits = 0x6573756163656220;
  String.append(_:)(v56);
  id v57 = [a3 description];
  uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v60 = v59;

  v61._uint64_t countAndFlagsBits = v58;
  v61._object = v60;
  String.append(_:)(v61);
  swift_bridgeObjectRelease();
  v62._uint64_t countAndFlagsBits = 0xD000000000000013;
  v62._object = (void *)0x80000001002B65A0;
  String.append(_:)(v62);
  sub_10016AE10(60, 0, (void *)0xE000000000000000, 0, v8, (uint64_t)&off_100322D80);
  swift_bridgeObjectRelease();
}

void sub_100085544(char a1, void *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10)
{
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return;
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_release();
    return;
  }
  Swift::String v62 = a8;
  uint64_t v63 = Strong;
  _StringGuts.grow(_:)(68);
  v17._uint64_t countAndFlagsBits = 0xD000000000000010;
  v17._object = (void *)0x80000001002B6350;
  String.append(_:)(v17);
  swift_retain();
  uint64_t v18 = sub_1001F7514();
  Swift::String v20 = v19;
  swift_release();
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 0xD000000000000016;
  v22._object = (void *)0x80000001002B6370;
  String.append(_:)(v22);
  if (a1) {
    uint64_t v23 = 1702195828;
  }
  else {
    uint64_t v23 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v24 = 0xE400000000000000;
  }
  else {
    unint64_t v24 = 0xE500000000000000;
  }
  unint64_t v25 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 0xD000000000000018;
  v26._object = (void *)0x80000001002B6390;
  String.append(_:)(v26);
  if (a4 == 1)
  {
    uint64_t v27 = 1;
    unint64_t v28 = 0xE300000000000000;
    uint64_t v29 = 7104878;
  }
  else
  {
    uint64_t v27 = a4;
    swift_retain();
    id v30 = a2;
    uint64_t v29 = String.init<A>(describing:)();
    unint64_t v28 = v31;
  }
  unint64_t v32 = v28;
  String.append(_:)(*(Swift::String *)&v29);
  swift_bridgeObjectRelease();
  sub_10016ABE4(0, (void *)0xE000000000000000, 0, a10, (uint64_t)&off_100322D80);
  swift_bridgeObjectRelease();
  uint64_t v33 = a7 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
  swift_beginAccess();
  sub_1001301D0(v33);
  swift_endAccess();
  swift_release();
  if (a1)
  {
    sub_10016ABE4(0xD000000000000030, (void *)0x80000001002B64A0, 0, a10, (uint64_t)&off_100322D80);
    id v34 = [objc_allocWithZone((Class)PCDisambiguationContext) initWithIdentifier:a9 direction:0 activityData:0];
    sub_100084EE8(v62, a7, a9, v34);
    swift_release();
LABEL_17:
    swift_release();
LABEL_18:

    return;
  }
  if (v27 == 1)
  {
    sub_10016ABE4(0xD000000000000030, (void *)0x80000001002B63B0, 0, a10, (uint64_t)&off_100322D80);
    id v34 = [objc_allocWithZone((Class)PCDisambiguationContext) initWithIdentifier:a9 direction:0 activityData:0];
    sub_100084EE8(v62, a7, a9, v34);
    swift_release();
    goto LABEL_17;
  }
  uint64_t v61 = v33;
  uint64_t v35 = v27;
  swift_retain();
  id v36 = a2;
  id v37 = a9;
  if ((a3 & 1) != 0 && (sub_10003CD08() & 1) == 0)
  {
    sub_10016ABE4(0xD00000000000002DLL, (void *)0x80000001002B63F0, 0, a10, (uint64_t)&off_100322D80);
    id v34 = [objc_allocWithZone((Class)PCDisambiguationContext) initWithIdentifier:a9 direction:0 activityData:0];
    sub_100084EE8(v62, a7, a9, v34);
    swift_release();
    swift_release();
    swift_release();

    goto LABEL_18;
  }
  self;
  if (!swift_dynamicCastObjCClass() || v35)
  {
    id v43 = v36;
    swift_unknownObjectRetain();
    goto LABEL_32;
  }
  uint64_t v38 = *(void **)(*(void *)(a7 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__mediaRemoteDisplayContext) + 24);
  if (!v38)
  {
    id v44 = v36;
LABEL_31:
    swift_unknownObjectRetain();
    id v43 = v36;
    goto LABEL_32;
  }
  id v39 = v36;
  id v40 = v38;
  id v41 = [v40 selectedDeviceState];
  if (!v41)
  {

    id v37 = a9;
    goto LABEL_31;
  }
  uint64_t v42 = v41;
  id v43 = [objc_allocWithZone((Class)PCMediaActivity) initWithDisplayContext:v40 response:v41];

  id v37 = a9;
LABEL_32:
  id v45 = sub_1000868A8((uint64_t)v43, v35 == 0);
  self;
  if (swift_dynamicCastObjCClass())
  {
    swift_unknownObjectRetain();
    _StringGuts.grow(_:)(58);
    v46._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    v46._object = (void *)0x80000001002B6470;
    String.append(_:)(v46);
    sub_10000A38C((uint64_t *)&unk_10036E690);
    _print_unlocked<A, B>(_:_:)();
    v47._uint64_t countAndFlagsBits = 0x746365726964202CLL;
    v47._object = (void *)0xEC0000003D6E6F69;
    String.append(_:)(v47);
    v48._uint64_t countAndFlagsBits = PCInteractionDirection.description.getter((uint64_t)v45);
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    sub_10016ABE4(0, (void *)0xE000000000000000, 0, a10, (uint64_t)&off_100322D80);
    swift_bridgeObjectRelease();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_10000A38C(&qword_100360040);
    swift_allocObject();
    uint64_t v49 = Future.init(_:)();
    uint64_t v50 = swift_allocObject();
    swift_weakInit();
    id v51 = (void *)swift_allocObject();
    v51[2] = v37;
    v51[3] = v45;
    v51[4] = v50;
    v51[5] = v62;
    v51[6] = a7;
    v51[7] = a10;
    uint64_t v52 = (void *)swift_allocObject();
    v52[2] = 0;
    v52[3] = 0;
    v52[4] = v49;
    v52[5] = 0;
    uint64_t v53 = swift_allocObject();
    *(void *)(v53 + 16) = sub_100086D38;
    *(void *)(v53 + 24) = v51;
    sub_10000B010(&qword_100360048, &qword_100360040);
    swift_retain();
    id v54 = v37;
    id v55 = v62;
    swift_retain();
    swift_retain();
    uint64_t v56 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v64 = *(void *)(v63 + 48);
    *(void *)(v63 + 48) = 0x8000000000000000;
    sub_10026492C(v56, v61, isUniquelyReferenced_nonNull_native);
    *(void *)(v63 + 48) = v64;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
    swift_release();
    swift_unknownObjectRelease_n();
    swift_release();
  }
  else
  {
    sub_10016AE10(60, 0xD000000000000045, (void *)0x80000001002B6420, 0, a10, (uint64_t)&off_100322D80);
    id v58 = [objc_allocWithZone((Class)PCDisambiguationContext) initWithIdentifier:v37 direction:0 activityData:0];
    id v59 = v37;
    id v60 = v58;
    sub_100084EE8(v62, a7, v59, v58);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
  }
  swift_release();
}

void sub_100085E84(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *a1;
  unint64_t v12 = a1[1];
  sub_10016ABE4(0xD00000000000001FLL, (void *)0x80000001002B64E0, 0, a7, (uint64_t)&off_100322D80);
  id v13 = objc_allocWithZone((Class)PCDisambiguationContext);
  id v14 = a2;
  sub_10001F8BC(v11, v12);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000DBEC(v11, v12);
  id v16 = [v13 initWithIdentifier:v14 direction:a3 activityData:isa];

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_100084EE8(a5, a6, v14, v16);
    swift_release();
  }
}

uint64_t sub_100085FC4()
{
  return 24;
}

__n128 sub_100085FD0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_100085FE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001F77BC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id sub_100086010@<X0>(void **a1@<X0>, uint64_t (*a2)(void **)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, void *a9@<X8>, void *a10, unsigned int a11)
{
  unint64_t v12 = sub_10003905C(*a1, a2, a3, a4, a5, a6, a7, a8, a10, a11);
  *a9 = v12;

  return v12;
}

void sub_100086064(char *a1@<X0>, void *a2@<X4>, uint64_t a3@<X5>, unsigned char *a4@<X8>)
{
  char v5 = *a1;
  if (a2)
  {
    id v7 = a2;
    NSString v8 = String._bridgeToObjectiveC()();
    [v7 ulog:a3 message:v8];
  }
  else
  {
    NSLog(_:_:)();
  }
  *a4 = v5;
}

void sub_1000860FC(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(34);
  sub_1001F7514();
  swift_bridgeObjectRelease();
  v7._object = (void *)0x80000001002B5FE0;
  v7._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v7);
  if (a2) {
    uint64_t v8 = 1702195828;
  }
  else {
    uint64_t v8 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v9 = 0xE400000000000000;
  }
  else {
    unint64_t v9 = 0xE500000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 8250;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = a3;
  v12._object = a4;
  String.append(_:)(v12);
  id v13 = sub_1001F5DFC();
  swift_bridgeObjectRetain();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 ulog:40 message:v14];
  swift_bridgeObjectRelease();
}

uint64_t sub_100086254()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

BOOL sub_100086290()
{
  return sub_1000824C4();
}

uint64_t sub_100086298()
{
  return _swift_deallocObject(v0, 17, 7);
}

BOOL sub_1000862A8(unsigned __int8 *a1)
{
  return *a1 >= *(unsigned __int8 *)(v1 + 16);
}

uint64_t sub_1000862BC()
{
  return sub_100086310(&qword_10035FF08);
}

void sub_1000862C8(char *a1@<X0>, unsigned char *a2@<X8>)
{
}

uint64_t sub_1000862D8(uint64_t a1)
{
  return sub_10008256C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000862E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

BOOL sub_1000862F0(unsigned __int8 *a1)
{
  return *a1 < *(unsigned __int8 *)(v1 + 16);
}

uint64_t sub_100086304()
{
  return sub_100086310(&qword_10035FEE8);
}

uint64_t sub_100086310(uint64_t *a1)
{
  uint64_t v2 = sub_10000A38C(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = (((*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, (v7 + 11) & 0xFFFFFFFFFFFFFFF8 | 4, v6);
}

void sub_1000863D4(char *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_1000863E0(char *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = *(void *)(sub_10000A38C(a2) - 8);
  unint64_t v7 = (((*(void *)(v6 + 64)
        + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_100086064(a1, *(void **)(v3 + v7), *(unsigned int *)(v3 + ((v7 + 11) & 0xFFFFFFFFFFFFFFF8)), a3);
}

uint64_t sub_1000864A0(uint64_t a1)
{
  return sub_1000825EC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000864B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = sub_100039B6C(*a1, *(uint64_t (**)(uint64_t *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void **)(v2 + 64), *(void **)(v2 + 72), *(_DWORD *)(v2 + 80));

  return swift_retain();
}

uint64_t sub_10008650C(uint64_t *a1)
{
  return sub_100080EE8(a1);
}

uint64_t sub_100086514(uint64_t *a1)
{
  return sub_100080F48(a1);
}

uint64_t sub_10008651C()
{
  return sub_10000ADE8(&qword_10035FF78);
}

id sub_100086528@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10008658C(a1, &qword_10035FF78, (uint64_t (*)(void, void, void, unint64_t, void, void, void, void, void, _DWORD))sub_100039448, a2);
}

uint64_t sub_100086548()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100086558(id *a1@<X0>, void *a2@<X8>)
{
  sub_100081328(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_100086560()
{
  return sub_10000ADE8(&qword_10035E1B8);
}

id sub_10008656C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10008658C(a1, &qword_10035E1B8, (uint64_t (*)(void, void, void, unint64_t, void, void, void, void, void, _DWORD))sub_10003905C, a2);
}

id sub_10008658C@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void, void, void, unint64_t, void, void, void, void, void, _DWORD)@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *(void *)(sub_10000A38C(a2) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  Swift::String v12 = (void *)a3(*a1, *(void *)(v4 + 16), *(void *)(v4 + 24), v4 + v9, *(void *)(v4 + v10), *(void *)(v4 + v10 + 8), *(void *)(v4 + v11), *(void *)(v4 + v11 + 8), *(void *)(v4 + ((v11 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v4 + ((((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));
  *a4 = v12;

  return v12;
}

uint64_t sub_100086684(void **a1)
{
  return sub_100081468(a1);
}

uint64_t sub_10008668C()
{
  return sub_10000ADE8(&qword_10035FF90);
}

uint64_t sub_10008669C(uint64_t *a1)
{
  return sub_1000811C0(a1);
}

uint64_t sub_1000866A8(void *a1)
{
  return sub_10013BA70(*a1, v1[2], v1[3], v1[5]);
}

uint64_t sub_1000866C0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = sub_1000396A8(*a1, *(uint64_t (**)(uint64_t *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void **)(v2 + 64), *(void **)(v2 + 72), *(_DWORD *)(v2 + 80));

  return swift_unknownObjectRetain();
}

uint64_t sub_10008671C(uint64_t *a1)
{
  return sub_1000810AC(a1);
}

uint64_t sub_100086728()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100086760()
{
  return sub_10000ADE8(&qword_10035FF90);
}

uint64_t sub_10008676C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_10000A38C(&qword_10035FF90) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  *a2 = sub_1000385B4(*a1, *(uint64_t (**)(uint64_t *))(v2 + 16), *(void *)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void *)(v2 + v8), *(void **)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));

  return swift_unknownObjectRetain();
}

void sub_100086860(uint64_t *a1)
{
}

uint64_t sub_10008686C(uint64_t *a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = *a1;
  return v2(&v4);
}

id sub_1000868A8(uint64_t a1, char a2)
{
  _StringGuts.grow(_:)(25);
  v3._object = (void *)0x80000001002B6500;
  v3._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = 0x697669746361203ALL;
  v4._object = (void *)0xEB000000003D7974;
  String.append(_:)(v4);
  sub_10000A38C((uint64_t *)&unk_10036E690);
  _print_unlocked<A, B>(_:_:)();
  v5._uint64_t countAndFlagsBits = 0x3D6C61636F6C202CLL;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  if (a2) {
    uint64_t v6 = 1702195828;
  }
  else {
    uint64_t v6 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v7 = 0xE400000000000000;
  }
  else {
    unint64_t v7 = 0xE500000000000000;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  id v9 = sub_1001F6CE4();
  swift_bridgeObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 ulog:40 message:v10];
  swift_bridgeObjectRelease();

  self;
  unint64_t v11 = (void *)swift_dynamicCastObjCClass();
  if (!v11)
  {
    self;
    uint64_t v13 = swift_dynamicCastObjCClass();
    if (v13)
    {
      NSString v14 = (void *)v13;
      uint64_t v15 = qword_10035A5F0;
      swift_unknownObjectRetain();
      if (v15 != -1) {
        swift_once();
      }
      id v16 = (id)qword_1003ACA78;
      Swift::String v17 = sub_1001C396C(v14);
      char v19 = v18;
      int v20 = ~v18;

      if (!v20)
      {
        swift_unknownObjectRelease();
        return 0;
      }
      id v21 = v17;
      if ((v19 & 1) == 0)
      {
        uint64_t v12 = sub_1001CA6B4(v21, 0);
        sub_100038A4C(v17, v19);
        sub_100038A4C(v17, v19);
        swift_unknownObjectRelease();
        return (id)v12;
      }
      id v22 = [v21 presentationContext];
      unint64_t v23 = (unint64_t)[v22 mode];

      sub_100038A4C(v17, v19);
      sub_100038A4C(v17, v19);
      swift_unknownObjectRelease();
      if (v23 < 3) {
        return (id)qword_100292358[v23];
      }
    }
    return 0;
  }
  return [v11 direction];
}

uint64_t sub_100086B90(uint64_t a1)
{
  return sub_10007EE98(a1);
}

uint64_t sub_100086B98(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100086BE8()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100086C40(char a1, void *a2, char a3, uint64_t a4)
{
  sub_100085544(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void **)(v4 + 40), *(void **)(v4 + 48), *(void *)(v4 + 56));
}

uint64_t sub_100086C70(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(v1 + 16))(*(unsigned __int8 *)a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_100086CA8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100086CE0(void (*a1)(void ***), uint64_t a2)
{
}

uint64_t sub_100086CE8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100086D38(uint64_t *a1)
{
  sub_100085E84(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_100086D4C()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100086D94(long long *a1)
{
  uint64_t v2 = *(uint64_t (**)(long long *))(v1 + 16);
  long long v4 = *a1;
  return v2(&v4);
}

uint64_t PCProximityEventType.description.getter(unint64_t a1)
{
  uint64_t v1 = sub_100086E38(a1);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

__CFString *sub_100086E38(unint64_t a1)
{
  if (a1 > 9)
  {
    uint64_t v1 = @"?";
    uint64_t v2 = @"?";
  }
  else
  {
    uint64_t v1 = (__CFString *)*((void *)&off_100323380 + a1);
    uint64_t v2 = (__CFString *)*((void *)&off_1003233D0 + a1);
  }
  Swift::String v3 = v1;

  return v2;
}

uint64_t sub_100086E9C()
{
  uint64_t v1 = sub_100086E38(*v0);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_100086EEC(char a1)
{
  uint64_t result = 6;
  switch(a1)
  {
    case 1:
      uint64_t result = 4;
      break;
    case 2:
    case 7:
      uint64_t result = 1;
      break;
    case 3:
      uint64_t result = 0;
      break;
    case 4:
      uint64_t result = 3;
      break;
    case 5:
      uint64_t result = 8;
      break;
    default:
      return result;
  }
  return result;
}

void sub_100086F78()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17proximitycontrold12SharingProxy_handoffDirection;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC17proximitycontrold12SharingProxy_handoffDirection + 8))
  {
    uint64_t v2 = (void *)0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  else
  {
    long long v4 = sub_100087ECC(*(void *)v1);
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v2 = v5;
  }
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v2;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  id v7 = sub_1001F6558();
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 ulog:v8 message:0xD00000000000002DLL, 0x80000001002B6700];
  swift_bridgeObjectRelease();

  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

void sub_1000870A0(void *a1, uint64_t a2, void *a3, int a4, int a5)
{
  uint64_t v6 = v5;
  int v42 = a5;
  id v40 = a3;
  uint64_t v41 = a2;
  uint64_t v9 = sub_10000A38C(&qword_100360050);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = &v38[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  id v16 = &v38[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  char v18 = &v38[-v17];
  id v19 = [objc_allocWithZone((Class)SFNotificationInfo) init];
  if (![a1 interactionDirection])
  {
    id v27 = [objc_allocWithZone((Class)SFNotificationError) init];
    NSString v28 = String._bridgeToObjectiveC()();
    [v27 setErrorDescription:v28];

    [v19 setError:v27];
    uint64_t v29 = v40;
    goto LABEL_19;
  }
  int v39 = a4;
  id v20 = [a1 legacyAttachmentURL];
  if (!v20)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    unint64_t v23 = (SEL *)&unk_100356000;
    goto LABEL_7;
  }
  id v21 = v20;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v22 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 32);
  v22(v11, v16, v12);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  unint64_t v23 = (SEL *)&unk_100356000;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
LABEL_7:
    sub_100087F98((uint64_t)v11);
    goto LABEL_8;
  }
  v22(v18, v11, v12);
  URL._bridgeToObjectiveC()(v24);
  Swift::String v26 = v25;
  [v19 setAttachmentURL:v25];

  (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v18, v12);
LABEL_8:
  id v30 = [a1 legacyBodyText];
  LOBYTE(a4) = v39;
  if (v30)
  {
    unint64_t v31 = v30;
    [v19 setBody:v30];
  }
  id v32 = [a1 localizedPrimaryAltText];
  if (v32)
  {
    uint64_t v33 = v32;
    [v19 setTitle:v32];
  }
  if (*(unsigned char *)(v6 + OBJC_IVAR____TtC17proximitycontrold12SharingProxy_handoffDirection + 8)) {
    id v34 = [a1 v23[313]];
  }
  else {
    id v34 = *(id *)(v6 + OBJC_IVAR____TtC17proximitycontrold12SharingProxy_handoffDirection);
  }
  uint64_t v29 = v40;
  if (v34 == (id)2) {
    uint64_t v35 = 1;
  }
  else {
    uint64_t v35 = 2 * (v34 == (id)1);
  }
  [v19 setInteractionDirection:v35];
  id v36 = [a1 v23[313]];
  uint64_t v37 = v6 + OBJC_IVAR____TtC17proximitycontrold12SharingProxy_lastDirection;
  *(void *)uint64_t v37 = v36;
  *(unsigned char *)(v37 + 8) = 0;
LABEL_19:
  sub_1000874AC(v19, v41, v29, a4, v42 & 1);
}

void sub_1000874AC(void *a1, uint64_t a2, void *a3, char a4, char a5)
{
  uint64_t v6 = *(void **)((char *)v5 + OBJC_IVAR____TtC17proximitycontrold12SharingProxy_client);
  if (v6)
  {
    id v7 = v5;
    uint64_t v13 = *v5;
    id v37 = v6;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    aBlock = (void **)0xD000000000000016;
    unint64_t v39 = 0x80000001002B6760;
    v14._uint64_t countAndFlagsBits = a2;
    v14._object = a3;
    String.append(_:)(v14);
    id v15 = sub_10016B098(v13, (uint64_t)&off_100325868);
    id v16 = (void *)swift_allocObject();
    _OWORD v16[2] = 0xD000000000000016;
    void v16[3] = 0x80000001002B6760;
    v16[4] = v15;
    uint64_t v17 = v7[2];
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_1001115EC(v17, a2, a3);
    swift_bridgeObjectRelease();
    if (v18)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v19 = sub_100098144();
      uint64_t v21 = v20;
      swift_release();
      swift_release();
      sub_10002935C(v19, v21);
      swift_bridgeObjectRelease();
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [a1 setHeader:v22];
    }
    if (a5)
    {
      aBlock = (void **)0xD00000000000002ALL;
      unint64_t v39 = 0x80000001002B6860;
      v23._uint64_t countAndFlagsBits = a2;
      v23._object = a3;
      String.append(_:)(v23);
      id v24 = sub_1001F6558();
      swift_bridgeObjectRetain();
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v24 ulog:40 message:v25];
      swift_bridgeObjectRelease();

      id v26 = [objc_allocWithZone((Class)SFNotificationError) init];
      NSString v27 = String._bridgeToObjectiveC()();
      [v26 setErrorDescription:v27];

      [a1 setError:v26];
    }
    if (a4)
    {
      if (a4 == 1)
      {
        id v28 = sub_1001F6558();
        NSString v29 = String._bridgeToObjectiveC()();
        [v28 ulog:40 message:v29];

        NSString v30 = String._bridgeToObjectiveC()();
        int v42 = sub_100087FF8;
        id v43 = v16;
        aBlock = _NSConcreteStackBlock;
        unint64_t v39 = 1107296256;
        id v40 = sub_100119FC4;
        uint64_t v41 = &unk_1003234E0;
        unint64_t v31 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        id v32 = v37;
        [v37 provideContent:a1 forDevice:v30 force:0 completion:v31];
      }
      else
      {
        id v35 = sub_1001F6558();
        NSString v36 = String._bridgeToObjectiveC()();
        [v35 ulog:40 message:v36];

        NSString v30 = String._bridgeToObjectiveC()();
        int v42 = sub_100087FF8;
        id v43 = v16;
        aBlock = _NSConcreteStackBlock;
        unint64_t v39 = 1107296256;
        id v40 = sub_100119FC4;
        uint64_t v41 = &unk_1003234B8;
        unint64_t v31 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        id v32 = v37;
        [v37 updateContent:a1 forDevice:v30 completion:v31];
      }

      swift_release();
      swift_release();
      _Block_release(v31);
    }
    else
    {
      id v33 = sub_1001F6558();
      NSString v34 = String._bridgeToObjectiveC()();
      [v33 ulog:40 message:v34];

      swift_release();
      swift_release();
    }
  }
}

void sub_100087A1C(uint64_t a1, uint64_t a2, void *a3, char a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v11 = *v5;
  sub_100045BD0(a1, (uint64_t)v32);
  if (v33)
  {
    if (v33 == 1)
    {
      uint64_t v19 = (char *)v5 + OBJC_IVAR____TtC17proximitycontrold12SharingProxy_handoffDirection;
      if (*((unsigned char *)v5 + OBJC_IVAR____TtC17proximitycontrold12SharingProxy_handoffDirection + 8) == 1)
      {
        aBlock = 0;
        unint64_t v27 = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        id v20 = sub_1001F6558();
        NSString v21 = String._bridgeToObjectiveC()();
        [v20 ulog:40 message:v21];

        char v22 = *((unsigned char *)v6 + OBJC_IVAR____TtC17proximitycontrold12SharingProxy_lastDirection + 8);
        *(void *)uint64_t v19 = *(uint64_t *)((char *)v6 + OBJC_IVAR____TtC17proximitycontrold12SharingProxy_lastDirection);
        v19[8] = v22;
      }
    }
    else if (v33 == 2)
    {
      uint64_t v12 = *(void **)((char *)v5 + OBJC_IVAR____TtC17proximitycontrold12SharingProxy_client);
      if (v12)
      {
        id v13 = v12;
        sub_100086F78();
        v14._uint64_t countAndFlagsBits = a2;
        v14._object = a3;
        String.append(_:)(v14);
        id v15 = sub_10016B098(v11, (uint64_t)&off_100325868);
        id v16 = (void *)swift_allocObject();
        _OWORD v16[2] = 0x657373696D736944;
        void v16[3] = 0xEA00000000002064;
        v16[4] = v15;
        NSString v17 = String._bridgeToObjectiveC()();
        NSString v30 = sub_10004D170;
        unint64_t v31 = v16;
        aBlock = _NSConcreteStackBlock;
        unint64_t v27 = 1107296256;
        id v28 = sub_100119FC4;
        NSString v29 = &unk_100323468;
        uint64_t v18 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        [v13 dismissContentForDevice:v17 completion:v18];
        _Block_release(v18);

        swift_release();
      }
    }
    else
    {
      id v23 = [objc_allocWithZone((Class)SFNotificationError) init];
      NSString v24 = String._bridgeToObjectiveC()();
      [v23 setErrorDescription:v24];

      id v25 = [objc_allocWithZone((Class)SFNotificationInfo) init];
      [v25 setError:v23];
      sub_100086F78();
      sub_1000874AC(v25, a2, a3, a4, a5 & 1);
    }
  }
}

void sub_100087D40(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_legacyDelegate;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong && (uint64_t v6 = Strong, swift_unknownObjectRelease(), v6 == v2))
  {
    v8._uint64_t countAndFlagsBits = sub_1001F7514();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    id v9 = sub_1001F6558();
    swift_bridgeObjectRetain();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 ulog:40 message:v10];
    swift_bridgeObjectRelease();

    *(void *)(v4 + 8) = 0;
    swift_unknownObjectWeakAssign();
    sub_1000CCB1C(a1);
  }
  else
  {
    id v7 = sub_1001F6558();
    NSString v11 = String._bridgeToObjectiveC()();
    [v7 ulog:60 message:v11];
  }
}

__CFString *sub_100087ECC(unint64_t a1)
{
  if (a1 > 2)
  {
    uint64_t v1 = @"?";
    uint64_t v2 = @"?";
  }
  else
  {
    uint64_t v1 = *(&off_100323508 + a1);
    uint64_t v2 = *(&off_100323520 + a1);
  }
  uint64_t v3 = v1;

  return v2;
}

uint64_t sub_100087F34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100087F44()
{
  return swift_release();
}

uint64_t sub_100087F50()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100087F98(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_100360050);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_10008800C()
{
  id v1 = [v0 proxDeviceState];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = [v1 playbackQueue];
  if (!v3) {
    goto LABEL_10;
  }
  uint64_t v4 = v3;
  id v5 = [v3 contentItems];

  if (!v5) {
    goto LABEL_10;
  }
  sub_10008A728();
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v7 <= 0
    || ([v2 playbackState], (MRMediaRemotePlaybackStateIsAdvancing() & 1) == 0)
    && ![v2 playerHasPlayedRecently])
  {
LABEL_10:

    return 0;
  }
  id v8 = objc_allocWithZone((Class)PCMediaActivity);
  id v9 = v0;
  id v10 = [v8 initWithDisplayContext:v9 response:v2];

  return v10;
}

uint64_t PCMediaRemoteDisplayContext.description.getter()
{
  id v1 = v0;
  sub_10000A38C((uint64_t *)&unk_10035E7E0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10028D430;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  unint64_t v47 = 0xD00000000000001DLL;
  id v3 = [v0 mediaRemoteID];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = 0xD00000000000001DLL;
  *(void *)(v2 + 40) = 0x80000001002B68D0;
  id v5 = [v1 localizedPrimaryAltText];
  if (v5)
  {
    unint64_t v6 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v47 = 0x3D7972616D697270;
    sub_100089A9C(8);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v9 = *(void *)(v2 + 16);
    unint64_t v8 = *(void *)(v2 + 24);
    if (v9 >= v8 >> 1) {
      uint64_t v2 = (uint64_t)sub_10008892C((char *)(v8 > 1), v9 + 1, 1, (char *)v2);
    }
    *(void *)(v2 + 16) = v9 + 1;
    uint64_t v10 = v2 + 16 * v9;
    *(void *)(v10 + 32) = 0x3D7972616D697270;
    *(void *)(v10 + 40) = 0xE800000000000000;
  }
  id v11 = [v1 localizedSecondaryAltText:v47];
  if (v11)
  {
    uint64_t v12 = v11;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v48 = 0x7261646E6F636573;
    sub_100089A9C(8);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v15 = *(void *)(v2 + 16);
    unint64_t v14 = *(void *)(v2 + 24);
    if (v15 >= v14 >> 1) {
      uint64_t v2 = (uint64_t)sub_10008892C((char *)(v14 > 1), v15 + 1, 1, (char *)v2);
    }
    *(void *)(v2 + 16) = v15 + 1;
    uint64_t v16 = v2 + 16 * v15;
    *(void *)(v16 + 32) = 0x7261646E6F636573;
    *(void *)(v16 + 40) = 0xEA00000000003D79;
  }
  id v17 = [v1 proxDeviceState:v48];
  if (v17)
  {
    uint64_t v18 = v17;
    int v19 = [v17 playbackState];

    uint64_t v20 = MRPlaybackState.description.getter(v19);
    char v22 = v21;
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    unint64_t v49 = 0xD000000000000010;
    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    unint64_t v25 = *(void *)(v2 + 16);
    unint64_t v24 = *(void *)(v2 + 24);
    if (v25 >= v24 >> 1) {
      uint64_t v2 = (uint64_t)sub_10008892C((char *)(v24 > 1), v25 + 1, 1, (char *)v2);
    }
    *(void *)(v2 + 16) = v25 + 1;
    uint64_t v26 = v2 + 16 * v25;
    *(void *)(v26 + 32) = 0xD000000000000010;
    *(void *)(v26 + 40) = 0x80000001002B68F0;
  }
  id v27 = [v1 selectedDeviceState:v49];
  if (v27)
  {
    id v28 = v27;
    int v29 = [v27 playbackState];

    uint64_t v30 = MRPlaybackState.description.getter(v29);
    id v32 = v31;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    unint64_t v50 = 0xD000000000000014;
    v33._uint64_t countAndFlagsBits = v30;
    v33._object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    unint64_t v35 = *(void *)(v2 + 16);
    unint64_t v34 = *(void *)(v2 + 24);
    if (v35 >= v34 >> 1) {
      uint64_t v2 = (uint64_t)sub_10008892C((char *)(v34 > 1), v35 + 1, 1, (char *)v2);
    }
    *(void *)(v2 + 16) = v35 + 1;
    uint64_t v36 = v2 + 16 * v35;
    *(void *)(v36 + 32) = 0xD000000000000014;
    *(void *)(v36 + 40) = 0x80000001002B6910;
  }
  id v37 = sub_100089B38([v1 interactionDirection:v50]);
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v40 = v39;

  v41._uint64_t countAndFlagsBits = v38;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  unint64_t v43 = *(void *)(v2 + 16);
  unint64_t v42 = *(void *)(v2 + 24);
  if (v43 >= v42 >> 1) {
    uint64_t v2 = (uint64_t)sub_10008892C((char *)(v42 > 1), v43 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v43 + 1;
  uint64_t v44 = v2 + 16 * v43;
  *(void *)(v44 + 32) = 1030908260;
  *(void *)(v44 + 40) = 0xE400000000000000;
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_100089B9C();
  uint64_t v45 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v45;
}

uint64_t sub_100088744()
{
  id v1 = [v0 selectedDeviceState];
  if (!v1)
  {
    id v1 = [v0 proxDeviceState];
    if (!v1) {
      return 7;
    }
  }
  id v2 = [v1 playerPath];

  if (!v2) {
    return 7;
  }
  id v3 = [v2 client];

  if (!v3) {
    return 7;
  }
  id v4 = [v3 bundleIdentifier];

  if (!v4) {
    return 7;
  }
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  BOOL v8 = v5 == 0x6C7070612E6D6F63 && v7 == 0xEF636973754D2E65;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (v5 == 0xD000000000000012 && v7 == 0x80000001002B69F0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v10) {
      return 3;
    }
    else {
      return 5;
    }
  }
}

char *sub_10008892C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A38C((uint64_t *)&unk_10035E7E0);
      char v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      Swift::String v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (char *)&_swiftEmptyArrayStorage;
      Swift::String v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100089BF8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_100088A3C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A38C(&qword_100360058);
      char v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 5);
      Swift::String v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (char *)&_swiftEmptyArrayStorage;
      Swift::String v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[32 * v8 + 32]) {
          memmove(v13, a4 + 32, 32 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100089CEC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100088B4C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A38C(&qword_10035EDC8);
      char v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      _OWORD v10[2] = v8;
      uint64_t v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100089FE4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100088C74(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10008929C(a1, a2, a3, a4, &qword_100360078);
}

void *sub_100088C80(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A38C(&qword_100360090);
      char v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      int64_t v12 = v11 - 32;
      if (v11 < 32) {
        int64_t v12 = v11 - 31;
      }
      _OWORD v10[2] = v8;
      uint64_t v10[3] = v12 & 0xFFFFFFFFFFFFFFFELL;
      Swift::String v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = _swiftEmptyArrayStorage;
      Swift::String v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= (void *)((char *)a4 + 2 * v8 + 32)) {
          memmove(v13, a4 + 4, 2 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10008A0F4(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100088D8C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A38C(&qword_100360098);
      char v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      int64_t v12 = v11 - 32;
      if (v11 < 32) {
        int64_t v12 = v11 - 31;
      }
      _OWORD v10[2] = v8;
      uint64_t v10[3] = v12 & 0xFFFFFFFFFFFFFFFELL;
      Swift::String v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = _swiftEmptyArrayStorage;
      Swift::String v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= (void *)((char *)a4 + 2 * v8 + 32)) {
          memmove(v13, a4 + 4, 2 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10008A0F4(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100088E98(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100088F00(a1, a2, a3, a4, &qword_10035F248, type metadata accessor for ExperienceEvent, type metadata accessor for ExperienceEvent);
}

uint64_t sub_100088ECC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100088F00(a1, a2, a3, a4, &qword_10035F270, type metadata accessor for ExperienceEffect, type metadata accessor for ExperienceEffect);
}

uint64_t sub_100088F00(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000A38C(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  void v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10008A5CC(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_100089180(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A38C(&qword_100360068);
      char v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      _OWORD v10[2] = v8;
      uint64_t v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100089DFC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100089290(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10008929C(a1, a2, a3, a4, &qword_1003600C0);
}

void *sub_10008929C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_10000A38C(a5);
      int64_t v11 = (void *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v9;
      _OWORD v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10008A4C0(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_1000893A8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A38C(&qword_1003600C8);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      _OWORD v10[2] = v8;
      uint64_t v10[3] = 2 * v11 - 64;
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      int64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10008A2CC(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000894A4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A38C(&qword_1003600E8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      _OWORD v10[2] = v8;
      uint64_t v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10008A1E0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000895B4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A38C(&qword_1003600A0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      _OWORD v10[2] = v8;
      uint64_t v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10008A1E0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000896C4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100089808(a1, a2, a3, a4, &qword_1003600A8, &qword_1003600B0);
}

void *sub_1000896D8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10008929C(a1, a2, a3, a4, &qword_100360088);
}

void *sub_1000896E4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A38C(&qword_100360070);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      _OWORD v10[2] = v8;
      uint64_t v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100089EF0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000897F4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100089808(a1, a2, a3, a4, &qword_1003600D0, &qword_1003600D8);
}

void *sub_100089808(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10000A38C(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = j__malloc_size(v13);
      void v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v15 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10008A3B4(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_100089938(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A38C(&qword_1003600E0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      _OWORD v10[2] = v8;
      uint64_t v10[3] = 2 * v11 - 64;
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10008A2CC(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100089A34(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100088F00(a1, a2, a3, a4, (uint64_t *)&unk_100365CE0, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100089A68(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100088F00(a1, a2, a3, a4, &qword_1003600B8, (uint64_t (*)(void))type metadata accessor for LaunchAppRequest.Option, (uint64_t (*)(void))type metadata accessor for LaunchAppRequest.Option);
}

uint64_t sub_100089A9C(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

__CFString *sub_100089B38(unint64_t a1)
{
  if (a1 > 2)
  {
    id v1 = @"?";
    id v2 = @"?";
  }
  else
  {
    id v1 = *(&off_100323538 + a1);
    id v2 = *(&off_100323550 + a1);
  }
  id v3 = v1;

  return v2;
}

unint64_t sub_100089B9C()
{
  unint64_t result = qword_10035E7F0;
  if (!qword_10035E7F0)
  {
    sub_10000A3D0((uint64_t *)&unk_100367D40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035E7F0);
  }
  return result;
}

uint64_t sub_100089BF8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100089CEC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_10000A38C(&qword_100360060);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100089DFC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100089EF0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100089FE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      sub_10000A38C(&qword_10035EDD0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10008A0F4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 2 * a1 + 32);
    size_t v6 = 2 * v4;
    int64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10008A1E0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    int64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10008A2CC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008A3B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      sub_10000A38C(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008A4C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_10000A38C(&qword_100360080);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008A5CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_10008A728()
{
  unint64_t result = qword_1003600F0;
  if (!qword_1003600F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003600F0);
  }
  return result;
}

uint64_t *sub_10008A768@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

void sub_10008A780(void *a1@<X8>)
{
  *a1 = &off_10031DC70;
}

uint64_t sub_10008A790()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10008A7F0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10008A840()
{
  uint64_t v1 = 0x736F6C4365766F6DLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6574656C706D6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6F72746E69;
  }
}

uint64_t sub_10008A89C(void *a1, int a2)
{
  int v24 = a2;
  uint64_t v3 = sub_10000A38C(&qword_100360158);
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  __chkstk_darwin(v3);
  uint64_t v21 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_100360160);
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_100360168);
  uint64_t v18 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_100360170);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  size_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_10008B6F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v24)
  {
    if (v24 == 1)
    {
      char v26 = 1;
      sub_10008B7A0();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v20);
    }
    else
    {
      char v27 = 2;
      sub_10008B74C();
      uint64_t v15 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    }
  }
  else
  {
    char v25 = 0;
    sub_10008B7F4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10008AC08()
{
  unint64_t v1 = 0xD000000000000012;
  if (*v0 == 1) {
    unint64_t v1 = 0x65756E69746E6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65756E69746E6F63;
  }
}

uint64_t sub_10008AC70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008AFF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10008AC98(uint64_t a1)
{
  unint64_t v2 = sub_10008B6F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008ACD4(uint64_t a1)
{
  unint64_t v2 = sub_10008B6F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008AD10(uint64_t a1)
{
  unint64_t v2 = sub_10008B7F4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008AD4C(uint64_t a1)
{
  unint64_t v2 = sub_10008B7F4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008AD88(uint64_t a1)
{
  unint64_t v2 = sub_10008B7A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008ADC4(uint64_t a1)
{
  unint64_t v2 = sub_10008B7A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008AE00(uint64_t a1)
{
  unint64_t v2 = sub_10008B74C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008AE3C(uint64_t a1)
{
  unint64_t v2 = sub_10008B74C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10008AE78@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10008B188(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_10008AEA4(void *a1)
{
  return sub_10008A89C(a1, *v1);
}

ValueMetadata *type metadata accessor for EducationViewEvent()
{
  return &type metadata for EducationViewEvent;
}

ValueMetadata *type metadata accessor for EducationViewState()
{
  return &type metadata for EducationViewState;
}

unint64_t sub_10008AEE8()
{
  unint64_t result = qword_1003600F8;
  if (!qword_1003600F8)
  {
    sub_10000A3D0(&qword_100360100);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003600F8);
  }
  return result;
}

unint64_t sub_10008AF48()
{
  unint64_t result = qword_100360108;
  if (!qword_100360108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360108);
  }
  return result;
}

unint64_t sub_10008AFA0()
{
  unint64_t result = qword_100360110;
  if (!qword_100360110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360110);
  }
  return result;
}

uint64_t sub_10008AFF4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756E69746E6F63 && a2 == 0xEE00646570706154;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756E69746E6F63 && a2 == 0xEF74756F656D6954 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001002B6A10)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_10008B188(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_100360118);
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v26 = v2;
  __chkstk_darwin(v2);
  int v29 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000A38C(&qword_100360120);
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_100360128);
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_100360130);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D6E4(a1, a1[3]);
  sub_10008B6F8();
  uint64_t v12 = (uint64_t)v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v22 = v6;
  uint64_t v13 = v29;
  uint64_t v30 = a1;
  size_t v14 = v11;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v11 = v18;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v11 = &type metadata for EducationViewEvent;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v11, enum case for DecodingError.typeMismatch(_:), v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
    a1 = v30;
LABEL_7:
    sub_10000CC5C((uint64_t)a1);
    return v11;
  }
  uint64_t v11 = (void *)*(unsigned __int8 *)(v15 + 32);
  if (*(unsigned char *)(v15 + 32))
  {
    if (v11 == 1)
    {
      char v32 = 1;
      sub_10008B7A0();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v16 = v28;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v16 + 8))(v14, v9);
    }
    else
    {
      char v33 = 2;
      sub_10008B74C();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v28;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v20 + 8))(v14, v9);
    }
  }
  else
  {
    char v31 = 0;
    sub_10008B7F4();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
  }
  sub_10000CC5C((uint64_t)v30);
  return v11;
}

unint64_t sub_10008B6F8()
{
  unint64_t result = qword_100360138;
  if (!qword_100360138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360138);
  }
  return result;
}

unint64_t sub_10008B74C()
{
  unint64_t result = qword_100360140;
  if (!qword_100360140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360140);
  }
  return result;
}

unint64_t sub_10008B7A0()
{
  unint64_t result = qword_100360148;
  if (!qword_100360148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360148);
  }
  return result;
}

unint64_t sub_10008B7F4()
{
  unint64_t result = qword_100360150;
  if (!qword_100360150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360150);
  }
  return result;
}

unint64_t sub_10008B848()
{
  unint64_t result = qword_100360178;
  if (!qword_100360178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360178);
  }
  return result;
}

unsigned char *_s17proximitycontrold18EducationViewStateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008B968);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EducationViewEvent.CodingKeys()
{
  return &type metadata for EducationViewEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for EducationViewEvent.ContinueTappedCodingKeys()
{
  return &type metadata for EducationViewEvent.ContinueTappedCodingKeys;
}

ValueMetadata *type metadata accessor for EducationViewEvent.ContinueTimeoutCodingKeys()
{
  return &type metadata for EducationViewEvent.ContinueTimeoutCodingKeys;
}

ValueMetadata *type metadata accessor for EducationViewEvent.SubtitleSwipedBackCodingKeys()
{
  return &type metadata for EducationViewEvent.SubtitleSwipedBackCodingKeys;
}

unint64_t sub_10008B9D4()
{
  unint64_t result = qword_100360180;
  if (!qword_100360180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360180);
  }
  return result;
}

unint64_t sub_10008BA2C()
{
  unint64_t result = qword_100360188;
  if (!qword_100360188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360188);
  }
  return result;
}

unint64_t sub_10008BA84()
{
  unint64_t result = qword_100360190;
  if (!qword_100360190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360190);
  }
  return result;
}

unint64_t sub_10008BADC()
{
  unint64_t result = qword_100360198;
  if (!qword_100360198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360198);
  }
  return result;
}

unint64_t sub_10008BB34()
{
  unint64_t result = qword_1003601A0;
  if (!qword_1003601A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003601A0);
  }
  return result;
}

unint64_t sub_10008BB8C()
{
  unint64_t result = qword_1003601A8;
  if (!qword_1003601A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003601A8);
  }
  return result;
}

unint64_t sub_10008BBE4()
{
  unint64_t result = qword_1003601B0;
  if (!qword_1003601B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003601B0);
  }
  return result;
}

unint64_t sub_10008BC3C()
{
  unint64_t result = qword_1003601B8;
  if (!qword_1003601B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003601B8);
  }
  return result;
}

unint64_t sub_10008BC94()
{
  unint64_t result = qword_1003601C0;
  if (!qword_1003601C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003601C0);
  }
  return result;
}

void *sub_10008BCEC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000B5598(0, v1, 0);
    uint64_t v3 = a1 + 32;
    do
    {
      swift_getKeyPath();
      swift_bridgeObjectRetain();
      swift_getAtKeyPath();
      swift_bridgeObjectRelease();
      swift_release();
      unint64_t v5 = _swiftEmptyArrayStorage[2];
      unint64_t v4 = _swiftEmptyArrayStorage[3];
      if (v5 >= v4 >> 1) {
        sub_1000B5598(v4 > 1, v5 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v5 + 1;
      _swiftEmptyArrayStorage[v5 + 4] = v7;
      v3 += 8;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_10008BE00(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000B5598(0, v1, 0);
    uint64_t v3 = a1 + 56;
    do
    {
      swift_getKeyPath();
      swift_bridgeObjectRetain();
      swift_getAtKeyPath();
      swift_bridgeObjectRelease();
      swift_release();
      unint64_t v5 = _swiftEmptyArrayStorage[2];
      unint64_t v4 = _swiftEmptyArrayStorage[3];
      if (v5 >= v4 >> 1) {
        sub_1000B5598(v4 > 1, v5 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v5 + 1;
      _swiftEmptyArrayStorage[v5 + 4] = v7;
      v3 += 32;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10008BF24(uint64_t a1, uint64_t a2, int64_t a3, int a4)
{
  unint64_t v5 = (int64_t *)v4;
  LODWORD(v98) = a4;
  sub_10000A38C(&qword_1003601C8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028FC10;
  uint64_t v7 = *(char **)(v4 + 16);
  unint64_t v8 = *(void *)(v4 + 32);
  *(void *)(inited + 32) = v7;
  *(void *)(inited + 40) = v8;
  if (!v7)
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  unint64_t v9 = (unint64_t)sub_100089180(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v11 = *(void *)(v9 + 16);
  unint64_t v10 = *(void *)(v9 + 24);
  int64_t v12 = v11 + 1;
  if (v11 >= v10 >> 1) {
    goto LABEL_77;
  }
  while (1)
  {
    *(void *)(v9 + 16) = v12;
    *(void *)(v9 + 8 * v11 + 32) = v7;
LABEL_5:
    unint64_t v11 = (unint64_t)_swiftEmptyArrayStorage;
    unint64_t v100 = v8;
    if (v8)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v9 = (unint64_t)sub_100089180(0, *(void *)(v9 + 16) + 1, 1, (void *)v9);
      }
      unint64_t v14 = *(void *)(v9 + 16);
      unint64_t v13 = *(void *)(v9 + 24);
      if (v14 >= v13 >> 1) {
        unint64_t v9 = (unint64_t)sub_100089180((void *)(v13 > 1), v14 + 1, 1, (void *)v9);
      }
      *(void *)(v9 + 16) = v14 + 1;
      *(void *)(v9 + 8 * v14 + 32) = v100;
    }
    swift_release();
    uint64_t v97 = v5[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10008DB78(v9);
    uint64_t v15 = swift_bridgeObjectRetain();
    sub_10008DB78(v15);
    sub_10000A38C(&qword_1003601D0);
    swift_arrayDestroy();
    int64_t v12 = _swiftEmptyArrayStorage[2];
    if (!v12) {
      break;
    }
    uint64_t v96 = v7;
    uint64_t v16 = v5;
    sub_1000B5598(0, v12, 0);
    unint64_t v11 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v17 = &_swiftEmptyArrayStorage[4];
    unint64_t v9 = _swiftEmptyArrayStorage[2];
    do
    {
      uint64_t v18 = *(void *)(*v17 + 16);
      unint64_t v19 = _swiftEmptyArrayStorage[3];
      unint64_t v8 = v9 + 1;
      if (v9 >= v19 >> 1) {
        sub_1000B5598(v19 > 1, v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8;
      _swiftEmptyArrayStorage[v9 + 4] = v18;
      ++v17;
      ++v9;
      --v12;
    }
    while (v12);
LABEL_19:
    int8x8_t v20 = (int8x8_t)_swiftEmptyArrayStorage[4];
    unint64_t v21 = v8 - 1;
    if (v8 == 1)
    {
      unint64_t v5 = v16;
      uint64_t v7 = v96;
      goto LABEL_30;
    }
    unint64_t v5 = v16;
    if (v21 >= 4)
    {
      unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v23 = vdupq_n_s64(*(void *)&v20);
      uint64_t v24 = (int64x2_t *)&_swiftEmptyArrayStorage[7];
      unint64_t v25 = v21 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v26 = v23;
      uint64_t v7 = v96;
      do
      {
        int64x2_t v23 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v23, v24[-1]), (int8x16_t)v23, (int8x16_t)v24[-1]);
        int64x2_t v26 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v26, *v24), (int8x16_t)v26, *(int8x16_t *)v24);
        v24 += 2;
        v25 -= 4;
      }
      while (v25);
      int8x16_t v27 = vbslq_s8((int8x16_t)vcgtq_s64(v23, v26), (int8x16_t)v23, (int8x16_t)v26);
      uint64_t v28 = vextq_s8(v27, v27, 8uLL).u64[0];
      int8x8_t v20 = vbsl_s8((int8x8_t)vcgtd_s64(v27.i64[0], v28), *(int8x8_t *)v27.i8, (int8x8_t)v28);
      if (v21 == (v21 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v22 = 1;
      uint64_t v7 = v96;
    }
    unint64_t v29 = v8 - v22;
    uint64_t v30 = (int8x8_t *)&_swiftEmptyArrayStorage[v22 + 4];
    do
    {
      int8x8_t v32 = *v30++;
      int8x8_t v31 = v32;
      if (*(void *)&v20 <= *(void *)&v32) {
        int8x8_t v20 = v31;
      }
      --v29;
    }
    while (v29);
LABEL_30:
    swift_bridgeObjectRelease();
    if ((*(void *)&v20 & 0x8000000000000000) == 0) {
      goto LABEL_31;
    }
    __break(1u);
LABEL_77:
    unint64_t v9 = (unint64_t)sub_100089180((void *)(v10 > 1), v12, 1, (void *)v9);
  }
  unint64_t v8 = _swiftEmptyArrayStorage[2];
  if (v8)
  {
    uint64_t v96 = v7;
    uint64_t v16 = v5;
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  int8x8_t v20 = 0;
LABEL_31:
  uint64_t v33 = sub_10008E778(0, *(void *)&v20, (uint64_t)_swiftEmptyArrayStorage, a3, v98 & 1);
  swift_bridgeObjectRelease();
  uint64_t v34 = sub_10000A38C(&qword_10035D8E8);
  uint64_t v35 = swift_initStackObject();
  *(_OWORD *)(v35 + 16) = xmmword_10028D430;
  int64_t v37 = *v5;
  int64_t v36 = v5[1];
  *(void *)(v35 + 32) = *v5;
  *(void *)(v35 + 40) = v36;
  if (v36)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v38 = sub_10008892C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v40 = *((void *)v38 + 2);
    unint64_t v39 = *((void *)v38 + 3);
    Swift::String v41 = v38;
    if (v40 >= v39 >> 1) {
      Swift::String v41 = sub_10008892C((char *)(v39 > 1), v40 + 1, 1, v38);
    }
    *((void *)v41 + 2) = v40 + 1;
    unint64_t v42 = &v41[16 * v40];
    *((void *)v42 + 4) = v37;
    *((void *)v42 + 5) = v36;
  }
  swift_release();
  uint64_t v43 = swift_initStackObject();
  uint64_t v44 = v43;
  *(_OWORD *)(v43 + 16) = xmmword_10028D430;
  unint64_t v45 = v100;
  if (!v7)
  {
    *(void *)(v43 + 32) = 0;
    *(void *)(v43 + 40) = 0;
    uint64_t v7 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_56;
  }
  uint64_t v98 = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v34 = sub_10008CCC0((uint64_t)v7, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v46 = sub_10008BCEC(v34);
  unint64_t v47 = v46[2];
  if (v47)
  {
    int64_t v48 = v46[4];
    unint64_t v49 = v47 - 1;
    if (v47 != 1)
    {
      if (v47 >= 5)
      {
        unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFFCLL | 1;
        int64x2_t v52 = vdupq_n_s64(v48);
        uint64_t v53 = (int64x2_t *)(v46 + 7);
        unint64_t v54 = v49 & 0xFFFFFFFFFFFFFFFCLL;
        int64x2_t v55 = v52;
        do
        {
          int64x2_t v52 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v52, v53[-1]), (int8x16_t)v52, (int8x16_t)v53[-1]);
          int64x2_t v55 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v55, *v53), (int8x16_t)v55, *(int8x16_t *)v53);
          v53 += 2;
          v54 -= 4;
        }
        while (v54);
        int8x16_t v56 = vbslq_s8((int8x16_t)vcgtq_s64(v52, v55), (int8x16_t)v52, (int8x16_t)v55);
        uint64_t v57 = vextq_s8(v56, v56, 8uLL).u64[0];
        int64_t v48 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v56.i64[0], v57), *(int8x8_t *)v56.i8, (int8x8_t)v57);
        if (v49 != (v49 & 0xFFFFFFFFFFFFFFFCLL)) {
          goto LABEL_46;
        }
      }
      else
      {
        unint64_t v50 = 1;
LABEL_46:
        unint64_t v58 = v47 - v50;
        id v59 = &v46[v50 + 4];
        do
        {
          int64_t v61 = *v59++;
          int64_t v60 = v61;
          if (v48 <= v61) {
            int64_t v48 = v60;
          }
          --v58;
        }
        while (v58);
      }
    }
    uint64_t v51 = swift_bridgeObjectRelease();
    if (v48 < 0)
    {
      __break(1u);
      goto LABEL_79;
    }
  }
  else
  {
    uint64_t v51 = swift_bridgeObjectRelease();
  }
  __chkstk_darwin(v51);
  sub_10000A38C(&qword_1003601D8);
  sub_10008EBBC();
  Sequence.flatMap<A>(_:)();
  swift_bridgeObjectRelease();
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_100089B9C();
  int64_t v48 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v34 = v63;
  swift_bridgeObjectRelease();
  *(void *)(v44 + 32) = v48;
  *(void *)(v44 + 40) = v34;
  if (!v34)
  {
    uint64_t v7 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_55;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_10008892C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v45 = *((void *)v7 + 2);
  unint64_t v62 = *((void *)v7 + 3);
  int64_t v37 = v45 + 1;
  if (v45 >= v62 >> 1) {
    goto LABEL_80;
  }
  while (2)
  {
    *((void *)v7 + 2) = v37;
    uint64_t v64 = &v7[16 * v45];
    *((void *)v64 + 4) = v48;
    *((void *)v64 + 5) = v34;
LABEL_55:
    unint64_t v45 = v100;
    uint64_t v34 = v98;
LABEL_56:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10008E8D0(v97, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v65 = swift_initStackObject();
    int64_t v37 = v65;
    *(_OWORD *)(v65 + 16) = xmmword_10028D430;
    if (!v45)
    {
      uint64_t v71 = (void *)(v65 + 32);
      swift_bridgeObjectRelease();
      *uint64_t v71 = 0;
      *(void *)(v37 + 40) = 0;
      goto LABEL_75;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v66 = sub_10008CCC0(v45, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v67 = sub_10008BCEC(v66);
    unint64_t v68 = v67[2];
    if (v68)
    {
      int64_t v48 = v67[4];
      unint64_t v69 = v68 - 1;
      if (v68 != 1)
      {
        if (v68 >= 5)
        {
          unint64_t v70 = v69 & 0xFFFFFFFFFFFFFFFCLL | 1;
          int64x2_t v73 = vdupq_n_s64(v48);
          uint64_t v74 = (int64x2_t *)(v67 + 7);
          unint64_t v75 = v69 & 0xFFFFFFFFFFFFFFFCLL;
          int64x2_t v76 = v73;
          do
          {
            int64x2_t v73 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v73, v74[-1]), (int8x16_t)v73, (int8x16_t)v74[-1]);
            int64x2_t v76 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v76, *v74), (int8x16_t)v76, *(int8x16_t *)v74);
            v74 += 2;
            v75 -= 4;
          }
          while (v75);
          int8x16_t v77 = vbslq_s8((int8x16_t)vcgtq_s64(v73, v76), (int8x16_t)v73, (int8x16_t)v76);
          uint64_t v78 = vextq_s8(v77, v77, 8uLL).u64[0];
          int64_t v48 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v77.i64[0], v78), *(int8x8_t *)v77.i8, (int8x8_t)v78);
          if (v69 != (v69 & 0xFFFFFFFFFFFFFFFCLL)) {
            goto LABEL_66;
          }
        }
        else
        {
          unint64_t v70 = 1;
LABEL_66:
          unint64_t v79 = v68 - v70;
          uint64_t v80 = &v67[v70 + 4];
          do
          {
            int64_t v82 = *v80++;
            int64_t v81 = v82;
            if (v48 <= v82) {
              int64_t v48 = v81;
            }
            --v79;
          }
          while (v79);
        }
      }
      uint64_t v72 = swift_bridgeObjectRelease();
      if ((v48 & 0x8000000000000000) == 0) {
        goto LABEL_71;
      }
LABEL_79:
      __break(1u);
LABEL_80:
      uint64_t v7 = sub_10008892C((char *)(v62 > 1), v37, 1, v7);
      continue;
    }
    break;
  }
  uint64_t v72 = swift_bridgeObjectRelease();
LABEL_71:
  __chkstk_darwin(v72);
  sub_10000A38C(&qword_1003601D8);
  sub_10008EBBC();
  Sequence.flatMap<A>(_:)();
  swift_bridgeObjectRelease();
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_100089B9C();
  uint64_t v83 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v85 = v84;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v37 + 32) = v83;
  *(void *)(v37 + 40) = v85;
  if (v85)
  {
    swift_bridgeObjectRetain();
    unint64_t v86 = sub_10008892C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v88 = *((void *)v86 + 2);
    unint64_t v87 = *((void *)v86 + 3);
    if (v88 >= v87 >> 1) {
      unint64_t v86 = sub_10008892C((char *)(v87 > 1), v88 + 1, 1, v86);
    }
    *((void *)v86 + 2) = v88 + 1;
    uint64_t v89 = &v86[16 * v88];
    *((void *)v89 + 4) = v83;
    *((void *)v89 + 5) = v85;
  }
LABEL_75:
  swift_bridgeObjectRelease();
  uint64_t v90 = swift_bridgeObjectRetain();
  sub_10008DA24(v90);
  uint64_t v91 = swift_bridgeObjectRetain();
  sub_10008DA24(v91);
  uint64_t v92 = swift_bridgeObjectRetain();
  sub_10008DA24(v92);
  uint64_t v93 = swift_bridgeObjectRetain();
  sub_10008DA24(v93);
  sub_10000A38C((uint64_t *)&unk_100367D40);
  swift_arrayDestroy();
  sub_100089B9C();
  uint64_t v94 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v94;
}

uint64_t sub_10008C994@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int64_t a3@<X2>, char a4@<W3>, int64_t *a5@<X8>)
{
  char v5 = a4;
  int64_t v6 = a3;
  uint64_t v7 = a5;
  int64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    int64_t v38 = a3;
    unint64_t v39 = a5;
    char v40 = a4;
    uint64_t v10 = *a1;
    sub_1000B54DC(0, v8, 0);
    uint64_t v11 = a2 + 32;
    do
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0xE000000000000000;
      if ((v10 & 0x8000000000000000) == 0 && v10 < *(void *)(*(void *)v11 + 16))
      {
        uint64_t v14 = *(void *)v11 + 16 * v10;
        uint64_t v12 = *(void *)(v14 + 32);
        unint64_t v13 = *(void *)(v14 + 40);
        swift_bridgeObjectRetain();
      }
      unint64_t v16 = _swiftEmptyArrayStorage[2];
      unint64_t v15 = _swiftEmptyArrayStorage[3];
      unint64_t v17 = v16 + 1;
      if (v16 >= v15 >> 1) {
        sub_1000B54DC(v15 > 1, v16 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v17;
      uint64_t v18 = &_swiftEmptyArrayStorage[2 * v16];
      v18[4] = v12;
      v18[5] = v13;
      v11 += 8;
      --v8;
    }
    while (v8);
  }
  else
  {
    unint64_t v17 = _swiftEmptyArrayStorage[2];
    if (!v17)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    int64_t v38 = a3;
    unint64_t v39 = a5;
    char v40 = a4;
  }
  swift_bridgeObjectRetain();
  sub_100016790();
  unint64_t v19 = &_swiftEmptyArrayStorage[5];
  do
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
    swift_bridgeObjectRelease();
    sub_10008E000(v20);
    v19 += 2;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease_n();
  char v5 = v40;
  int64_t v6 = v38;
  uint64_t v7 = v39;
LABEL_15:
  unint64_t v21 = sub_10008BE00((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  unint64_t v22 = v21[2];
  if (v22)
  {
    int64_t v23 = v21[4];
    unint64_t v24 = v22 - 1;
    if (v22 != 1)
    {
      if (v22 >= 5)
      {
        unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFFCLL | 1;
        int64x2_t v26 = vdupq_n_s64(v23);
        int8x16_t v27 = (int64x2_t *)(v21 + 7);
        unint64_t v28 = v24 & 0xFFFFFFFFFFFFFFFCLL;
        int64x2_t v29 = v26;
        do
        {
          int64x2_t v26 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v26, v27[-1]), (int8x16_t)v26, (int8x16_t)v27[-1]);
          int64x2_t v29 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v29, *v27), (int8x16_t)v29, *(int8x16_t *)v27);
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        int8x16_t v30 = vbslq_s8((int8x16_t)vcgtq_s64(v26, v29), (int8x16_t)v26, (int8x16_t)v29);
        uint64_t v31 = vextq_s8(v30, v30, 8uLL).u64[0];
        int64_t v23 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v30.i64[0], v31), *(int8x8_t *)v30.i8, (int8x8_t)v31);
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFFCLL)) {
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v25 = 1;
      }
      unint64_t v32 = v22 - v25;
      uint64_t v33 = &v21[v25 + 4];
      do
      {
        int64_t v35 = *v33++;
        int64_t v34 = v35;
        if (v23 <= v35) {
          int64_t v23 = v34;
        }
        --v32;
      }
      while (v32);
    }
  }
  else
  {
    int64_t v23 = 0;
  }
LABEL_27:
  uint64_t result = swift_bridgeObjectRelease();
  if (v23 >= v6) {
    int64_t v37 = v6;
  }
  else {
    int64_t v37 = v23;
  }
  if (v5) {
    int64_t v37 = v23;
  }
  *uint64_t v7 = v37;
  return result;
}

uint64_t sub_10008CC54@<X0>(uint64_t *a1@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v2 = Substring.distance(from:to:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10008CCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = *(void *)(a1 + 16);
  char v5 = *(void **)(a2 + 16);
  if ((unint64_t)v5 >= v4) {
    int64_t v6 = *(void *)(a1 + 16);
  }
  else {
    int64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v78 = _swiftEmptyArrayStorage;
  sub_1000B55B8(0, v6, 0);
  uint64_t v7 = _swiftEmptyArrayStorage;
  unint64_t v67 = v4;
  uint64_t v68 = v3;
  uint64_t v62 = a2;
  uint64_t v66 = v5;
  int64_t v69 = v6;
  if (!v6)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v32 = 0;
LABEL_25:
    if (v4 <= (unint64_t)v5)
    {
LABEL_48:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
    uint64_t result = v62;
    uint64_t v63 = v62 + 32;
    uint64_t v64 = v3 + 32;
    if (v32 <= (uint64_t)v5) {
      uint64_t v33 = v5;
    }
    else {
      uint64_t v33 = (void *)v32;
    }
    uint64_t v65 = v33;
    while (1)
    {
      if (v32 == v4) {
        goto LABEL_52;
      }
      if ((void *)v32 == v5) {
        goto LABEL_48;
      }
      if ((void *)v32 == v65) {
        goto LABEL_53;
      }
      uint64_t v72 = v7;
      int64_t v34 = (void *)(v64 + 16 * v32);
      int64_t v35 = (void *)*v34;
      int64_t v36 = (void *)v34[1];
      int64_t v69 = v32;
      uint64_t v37 = *(void *)(v63 + 8 * v32);
      int64x2_t v73 = v35;
      uint64_t v74 = v36;
      sub_100016790();
      uint64_t v71 = v36;
      swift_bridgeObjectRetain();
      uint64_t result = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
      int8x16_t v77 = _swiftEmptyArrayStorage;
      uint64_t v38 = *(void *)(result + 16);
      if (v38)
      {
        if (!v37) {
          goto LABEL_54;
        }
        unint64_t v39 = (uint64_t *)(result + 56);
        do
        {
          char v40 = (void *)*(v39 - 2);
          uint64_t v41 = *(v39 - 1);
          uint64_t v42 = *v39;
          int64x2_t v73 = (void *)*(v39 - 3);
          uint64_t v74 = v40;
          uint64_t v75 = v41;
          uint64_t v76 = v42;
          swift_bridgeObjectRetain();
          uint64_t v43 = Substring.distance(from:to:)();
          __chkstk_darwin(v43);
          int64_t v60 = &v73;
          uint64_t v61 = v37;
          unint64_t v45 = sub_10008D334((void *(*)(long long *__return_ptr, int64_t *))sub_10008EE78, (uint64_t)v59, 0, v44, v37);
          swift_bridgeObjectRelease();
          sub_10008E000((uint64_t)v45);
          v39 += 4;
          --v38;
        }
        while (v38);
        swift_bridgeObjectRelease();
        Swift::String v46 = v77;
        int64_t v47 = v77[2];
        if (v47)
        {
LABEL_38:
          int64x2_t v73 = _swiftEmptyArrayStorage;
          sub_1000B54DC(0, v47, 0);
          int64_t v48 = v73;
          unint64_t v70 = v46;
          unint64_t v49 = v46 + 7;
          do
          {
            swift_bridgeObjectRetain();
            uint64_t v50 = static String._fromSubstring(_:)();
            uint64_t v52 = v51;
            swift_bridgeObjectRelease();
            int64x2_t v73 = v48;
            unint64_t v54 = v48[2];
            unint64_t v53 = v48[3];
            if (v54 >= v53 >> 1)
            {
              sub_1000B54DC(v53 > 1, v54 + 1, 1);
              int64_t v48 = v73;
            }
            v48[2] = v54 + 1;
            int64x2_t v55 = &v48[2 * v54];
            v55[4] = v50;
            v55[5] = v52;
            v49 += 4;
            --v47;
          }
          while (v47);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_45;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        Swift::String v46 = _swiftEmptyArrayStorage;
        int64_t v47 = _swiftEmptyArrayStorage[2];
        if (v47) {
          goto LABEL_38;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v48 = _swiftEmptyArrayStorage;
LABEL_45:
      uint64_t v7 = v72;
      uint64_t v78 = v72;
      unint64_t v57 = v72[2];
      unint64_t v56 = v72[3];
      int64_t v58 = v69;
      if (v57 >= v56 >> 1)
      {
        sub_1000B55B8(v56 > 1, v57 + 1, 1);
        int64_t v58 = v69;
        uint64_t v7 = v78;
      }
      int64_t v32 = v58 + 1;
      v7[2] = v57 + 1;
      v7[v57 + 4] = v48;
      char v5 = v66;
      unint64_t v4 = v67;
      uint64_t result = v62;
      if (v32 == v67) {
        goto LABEL_48;
      }
    }
  }
  uint64_t v63 = a2 + 32;
  uint64_t v64 = v3 + 32;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  while (v9 != v4)
  {
    if ((void *)v9 == v5) {
      goto LABEL_50;
    }
    uint64_t v71 = (void *)v9;
    uint64_t v72 = v7;
    uint64_t v10 = *(void **)(v64 + 16 * v9 + 8);
    uint64_t v11 = *(void *)(v63 + 8 * v9);
    int64x2_t v73 = *(void **)(v64 + 16 * v9);
    uint64_t v74 = v10;
    sub_100016790();
    unint64_t v70 = v10;
    swift_bridgeObjectRetain();
    uint64_t result = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
    int8x16_t v77 = _swiftEmptyArrayStorage;
    uint64_t v12 = *(void *)(result + 16);
    if (v12)
    {
      if (!v11) {
        goto LABEL_51;
      }
      unint64_t v13 = (uint64_t *)(result + 56);
      do
      {
        uint64_t v14 = (void *)*(v13 - 2);
        uint64_t v15 = *(v13 - 1);
        uint64_t v16 = *v13;
        int64x2_t v73 = (void *)*(v13 - 3);
        uint64_t v74 = v14;
        uint64_t v75 = v15;
        uint64_t v76 = v16;
        swift_bridgeObjectRetain();
        uint64_t v17 = Substring.distance(from:to:)();
        __chkstk_darwin(v17);
        int64_t v60 = &v73;
        uint64_t v61 = v11;
        unint64_t v19 = sub_10008D334((void *(*)(long long *__return_ptr, int64_t *))sub_10008EDC4, (uint64_t)v59, 0, v18, v11);
        swift_bridgeObjectRelease();
        sub_10008E000((uint64_t)v19);
        v13 += 4;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      uint64_t v20 = v77;
      uint64_t v3 = v68;
      int64_t v21 = v77[2];
      if (v21)
      {
LABEL_13:
        int64x2_t v73 = _swiftEmptyArrayStorage;
        sub_1000B54DC(0, v21, 0);
        unint64_t v22 = v73;
        uint64_t v65 = v20;
        int64_t v23 = v20 + 7;
        do
        {
          swift_bridgeObjectRetain();
          uint64_t v24 = static String._fromSubstring(_:)();
          uint64_t v26 = v25;
          swift_bridgeObjectRelease();
          int64x2_t v73 = v22;
          unint64_t v28 = v22[2];
          unint64_t v27 = v22[3];
          if (v28 >= v27 >> 1)
          {
            sub_1000B54DC(v27 > 1, v28 + 1, 1);
            unint64_t v22 = v73;
          }
          uint64_t v22[2] = v28 + 1;
          int64x2_t v29 = &v22[2 * v28];
          v29[4] = v24;
          v29[5] = v26;
          v23 += 4;
          --v21;
        }
        while (v21);
        swift_bridgeObjectRelease();
        uint64_t v3 = v68;
        goto LABEL_20;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v20 = _swiftEmptyArrayStorage;
      int64_t v21 = _swiftEmptyArrayStorage[2];
      if (v21) {
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v22 = _swiftEmptyArrayStorage;
LABEL_20:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v7 = v72;
    uint64_t v78 = v72;
    unint64_t v31 = v72[2];
    unint64_t v30 = v72[3];
    if (v31 >= v30 >> 1)
    {
      uint64_t result = sub_1000B55B8(v30 > 1, v31 + 1, 1);
      uint64_t v7 = v78;
    }
    uint64_t v9 = (uint64_t)v71 + 1;
    v7[2] = v31 + 1;
    v7[v31 + 4] = v22;
    int64_t v32 = v69;
    char v5 = v66;
    unint64_t v4 = v67;
    if (v9 == v69) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

void *sub_10008D334(void *(*a1)(long long *__return_ptr, int64_t *), uint64_t a2, int64_t a3, int64_t a4, uint64_t a5)
{
  int64_t v7 = a4;
  int64_t v8 = a3;
  int64_t v9 = 0;
  int64_t v10 = a3;
  while (1)
  {
    BOOL v11 = v10 <= a4;
    if (a5 > 0) {
      BOOL v11 = v10 >= a4;
    }
    if (v11) {
      break;
    }
    BOOL v12 = __OFADD__(v10, a5);
    v10 += a5;
    if (v12) {
      int64_t v10 = (v10 >> 63) ^ 0x8000000000000000;
    }
    BOOL v12 = __OFADD__(v9++, 1);
    if (v12)
    {
      __break(1u);
      break;
    }
  }
  uint64_t v41 = _swiftEmptyArrayStorage;
  uint64_t result = (void *)sub_1000B54BC(0, v9, 0);
  uint64_t v14 = _swiftEmptyArrayStorage;
  int64_t v34 = v7;
  if (v9)
  {
    while (1)
    {
      BOOL v15 = v8 <= v7;
      if (a5 > 0) {
        BOOL v15 = v8 >= v7;
      }
      if (v15) {
        break;
      }
      if (__OFADD__(v8, a5)) {
        int64_t v16 = ((v8 + a5) >> 63) ^ 0x8000000000000000;
      }
      else {
        int64_t v16 = v8 + a5;
      }
      int64_t v36 = v8;
      char v37 = 0;
      uint64_t result = a1(&v38, &v36);
      if (v5) {
        goto LABEL_36;
      }
      long long v17 = v38;
      uint64_t v19 = v39;
      uint64_t v18 = v40;
      uint64_t v41 = v14;
      unint64_t v21 = v14[2];
      unint64_t v20 = v14[3];
      if (v21 >= v20 >> 1)
      {
        long long v32 = v38;
        uint64_t result = (void *)sub_1000B54BC(v20 > 1, v21 + 1, 1);
        long long v17 = v32;
        uint64_t v14 = v41;
      }
      void v14[2] = v21 + 1;
      unint64_t v22 = &v14[4 * v21];
      *((_OWORD *)v22 + 2) = v17;
      v22[6] = v19;
      v22[7] = v18;
      int64_t v8 = v16;
      --v9;
      int64_t v7 = v34;
      if (!v9) {
        goto LABEL_23;
      }
    }
    __break(1u);
  }
  else
  {
    int64_t v16 = v8;
LABEL_23:
    BOOL v23 = v16 <= v7;
    if (a5 > 0) {
      BOOL v23 = v16 >= v7;
    }
    if (!v23)
    {
      while (1)
      {
        int64_t v24 = __OFADD__(v16, a5) ? ((v16 + a5) >> 63) ^ 0x8000000000000000 : v16 + a5;
        int64_t v36 = v16;
        a1(&v38, &v36);
        if (v5) {
          break;
        }
        long long v25 = v38;
        uint64_t v26 = v39;
        uint64_t v27 = v40;
        uint64_t v41 = v14;
        unint64_t v29 = v14[2];
        unint64_t v28 = v14[3];
        if (v29 >= v28 >> 1)
        {
          long long v33 = v38;
          sub_1000B54BC(v28 > 1, v29 + 1, 1);
          long long v25 = v33;
          int64_t v7 = v34;
          uint64_t v14 = v41;
        }
        void v14[2] = v29 + 1;
        unint64_t v30 = &v14[4 * v29];
        *((_OWORD *)v30 + 2) = v25;
        v30[6] = v26;
        v30[7] = v27;
        BOOL v31 = v24 <= v7;
        if (a5 > 0) {
          BOOL v31 = v24 >= v7;
        }
        int64_t v16 = v24;
        if (v31) {
          return v14;
        }
      }
LABEL_36:
      swift_release();
    }
    return v14;
  }
  return result;
}

uint64_t sub_10008D598@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  swift_bridgeObjectRetain();
  sub_10008EC98(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10008EC8C);
  swift_bridgeObjectRelease();
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_100089B9C();
  uint64_t v4 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v6 = v5;
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

unint64_t sub_10008D674(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = result;
  if (*(void *)(a3 + 16) <= result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(a3 + 8 * result + 32);
  if ((a4 & 0x8000000000000000) == 0 && *(void *)(a2 + 16) > a4)
  {
    uint64_t v7 = *(void *)(a2 + 16 * a4 + 32);
    swift_bridgeObjectRetain();
  }
  if (*(void *)(a5 + 16) - 1 <= v5) {
    return v7;
  }
  uint64_t result = String.count.getter();
  Swift::Int v9 = v8 - result;
  if (!__OFSUB__(v8, result))
  {
    if (v9 >= 1)
    {
      v10._uint64_t countAndFlagsBits = 32;
      v10._object = (void *)0xE100000000000000;
      Swift::String v11 = String.init(repeating:count:)(v10, v9);
      swift_bridgeObjectRetain();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return v7;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_10008D774@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_10008D77C(uint64_t a1)
{
  return sub_10008DE88(a1, (uint64_t (*)(void))sub_100088C74);
}

uint64_t sub_10008D794(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100088C80(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  Swift::Int v9 = (char *)v3 + 2 * v8 + 32;
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 2 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 2 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008D8DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100088D8C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  Swift::Int v9 = (char *)v3 + 2 * v8 + 32;
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 2 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 2 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008DA24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_10008892C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008DB78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100089180(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[v8 + 4];
  if (a1 + 32 < v9 + 8 * v2 && v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008DCCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = sub_100088ECC(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(type metadata accessor for ExperienceEffect(0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008DE70(uint64_t a1)
{
  return sub_10008DE88(a1, (uint64_t (*)(void))sub_1000896D8);
}

uint64_t sub_10008DE88(uint64_t a1, uint64_t (*a2)(void))
{
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native()
    && (int64_t)(v5 + v3) <= *(void *)(v4 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_15:
    if (!v3) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
  uint64_t v4 = a2();
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v4 + 16);
  if ((*(void *)(v4 + 24) >> 1) - v9 < (uint64_t)v8)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v10 = v4 + 16 * v9 + 32;
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_21;
  }
  sub_10000A38C(&qword_100360080);
  swift_arrayInitWithCopy();
  if (v8 < v3)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v12 = *(void *)(v4 + 16);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    *(void *)(v4 + 16) = v14;
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v2 = v4;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008E000(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_1000896E4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008E154(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  unint64_t v3 = sub_1000897F4(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  sub_10000A38C(&qword_1003600D8);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008E2CC(unint64_t a1)
{
  return sub_10008E314(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000F1C68);
}

uint64_t sub_10008E2E4(unint64_t a1)
{
  return sub_10008E314(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000F1E8C);
}

uint64_t sub_10008E2FC(unint64_t a1)
{
  return sub_10008E314(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000F20C0);
}

uint64_t sub_10008E314(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v6 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v6 + v5;
    if (!__OFADD__(v6, v5)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v17 + v5;
  if (__OFADD__(v17, v5)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v2 = v8;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v7 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v8 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *unint64_t v2 = v11;
    uint64_t v10 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_10008E4E8(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_1000F22F4(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_10008E6B4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = Substring.index(_:offsetBy:)();
  uint64_t result = Substring.index(_:offsetBy:limitedBy:)();
  if (v6) {
    unint64_t v7 = v3;
  }
  else {
    unint64_t v7 = result;
  }
  if (v7 >> 14 < v4 >> 14)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = Substring.subscript.getter();
    *a2 = result;
    a2[1] = v8;
    a2[2] = v9;
    a2[3] = v10;
  }
  return result;
}

uint64_t sub_10008E778(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, char a5)
{
  uint64_t v6 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v7 = v5;
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (!v6) {
    return (uint64_t)v8;
  }
  uint64_t v11 = result;
  int64_t v22 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000B5598(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    char v17 = a5 & 1;
    uint64_t v8 = v22;
    if (a2 <= v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = a2;
    }
    uint64_t v13 = v11;
    while (a2 != v13)
    {
      uint64_t v20 = v13;
      uint64_t result = sub_10008C994(&v20, a3, a4, v17, &v21);
      if (v7)
      {
        swift_release();
        return (uint64_t)v8;
      }
      uint64_t v7 = 0;
      int64_t v14 = v21;
      int64_t v22 = v8;
      unint64_t v16 = v8[2];
      unint64_t v15 = v8[3];
      if (v16 >= v15 >> 1)
      {
        uint64_t result = sub_1000B5598(v15 > 1, v16 + 1, 1);
        uint64_t v8 = v22;
      }
      void v8[2] = v16 + 1;
      v8[v16 + 4] = v14;
      if (a2 < v11) {
        goto LABEL_19;
      }
      if (v12 == v13) {
        goto LABEL_20;
      }
      if (a2 == ++v13) {
        return (uint64_t)v8;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

void *sub_10008E8D0(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000B54DC(0, v2, 0);
  uint64_t v4 = 0;
  int64_t v29 = v2;
  uint64_t v30 = a1 + 32;
  while (1)
  {
    uint64_t v5 = *(void *)(v30 + 8 * v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_10008CCC0(v5, a2);
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_10008BCEC(v6);
    unint64_t v8 = v7[2];
    if (v8) {
      break;
    }
    uint64_t result = (void *)swift_bridgeObjectRelease();
LABEL_16:
    __chkstk_darwin(result);
    sub_10000A38C(&qword_1003601D8);
    sub_10008EBBC();
    Sequence.flatMap<A>(_:)();
    swift_bridgeObjectRelease();
    sub_10000A38C((uint64_t *)&unk_100367D40);
    sub_100089B9C();
    uint64_t v23 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v27 = _swiftEmptyArrayStorage[2];
    unint64_t v26 = _swiftEmptyArrayStorage[3];
    if (v27 >= v26 >> 1) {
      sub_1000B54DC(v26 > 1, v27 + 1, 1);
    }
    ++v4;
    _swiftEmptyArrayStorage[2] = v27 + 1;
    unint64_t v28 = &_swiftEmptyArrayStorage[2 * v27];
    v28[4] = v23;
    v28[5] = v25;
    if (v4 == v29) {
      return _swiftEmptyArrayStorage;
    }
  }
  int64_t v9 = v7[4];
  unint64_t v10 = v8 - 1;
  if (v8 != 1)
  {
    if (v8 >= 5)
    {
      unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v13 = vdupq_n_s64(v9);
      int64_t v14 = (int64x2_t *)(v7 + 7);
      unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v16 = v13;
      do
      {
        int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v13, v14[-1]), (int8x16_t)v13, (int8x16_t)v14[-1]);
        int64x2_t v16 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v16, *v14), (int8x16_t)v16, *(int8x16_t *)v14);
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      int8x16_t v17 = vbslq_s8((int8x16_t)vcgtq_s64(v13, v16), (int8x16_t)v13, (int8x16_t)v16);
      uint64_t v18 = vextq_s8(v17, v17, 8uLL).u64[0];
      int64_t v9 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v17.i64[0], v18), *(int8x8_t *)v17.i8, (int8x8_t)v18);
      if (v10 == (v10 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v11 = 1;
    }
    unint64_t v19 = v8 - v11;
    uint64_t v20 = &v7[v11 + 4];
    do
    {
      int64_t v22 = *v20++;
      int64_t v21 = v22;
      if (v9 <= v22) {
        int64_t v9 = v21;
      }
      --v19;
    }
    while (v19);
  }
LABEL_15:
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if ((v9 & 0x8000000000000000) == 0) {
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_10008EB9C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10008D598(*(void *)(v1 + 16), a1);
}

unint64_t sub_10008EBBC()
{
  unint64_t result = qword_1003601E0;
  if (!qword_1003601E0)
  {
    sub_10000A3D0(&qword_1003601D8);
    sub_10008EC38();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003601E0);
  }
  return result;
}

unint64_t sub_10008EC38()
{
  unint64_t result = qword_1003601E8;
  if (!qword_1003601E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003601E8);
  }
  return result;
}

unint64_t sub_10008EC8C(unint64_t a1, uint64_t a2)
{
  return sub_10008D674(a1, a2, v2[2], v2[3], v2[4]);
}

void *sub_10008EC98(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  sub_1000B54DC(0, 0, 0);
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a1 + 32;
    do
    {
      uint64_t v6 = *(void *)(v5 + 8 * v4);
      swift_bridgeObjectRetain();
      uint64_t v7 = a2(v4, v6);
      uint64_t v9 = v8;
      swift_bridgeObjectRelease();
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1) {
        sub_1000B54DC(v10 > 1, v11 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v7;
      v12[5] = v9;
    }
    while (v3 != v4);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10008EDB4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 16);
  return result;
}

uint64_t sub_10008EDC4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10008E6B4(*(void *)(v1 + 16), a1);
}

unint64_t sub_10008EDE8()
{
  unint64_t result = qword_1003601F0;
  if (!qword_1003601F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003601F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for TableFormatter()
{
  return &type metadata for TableFormatter;
}

ValueMetadata *type metadata accessor for TableFormatter.Row()
{
  return &type metadata for TableFormatter.Row;
}

uint64_t sub_10008EE60@<X0>(uint64_t *a1@<X8>)
{
  return sub_10008EB9C(a1);
}

uint64_t sub_10008EE78@<X0>(uint64_t *a1@<X8>)
{
  return sub_10008EDC4(a1);
}

uint64_t sub_10008EE90(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000A38C(&qword_10035ABB8);
  swift_allocObject();
  uint64_t v4 = PassthroughSubject.init()();
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = &_swiftEmptySetSingleton;
  *(void *)(v1 + 80) = &_swiftEmptyDictionarySingleton;
  *(void *)(v1 + 88) = &_swiftEmptyDictionarySingleton;
  uint64_t v10 = *a1;
  long long v5 = *(_OWORD *)a1;
  long long v6 = *((_OWORD *)a1 + 1);
  uint64_t v7 = a1[4];
  *(_OWORD *)(v1 + 16) = v5;
  *(_OWORD *)(v1 + 32) = v6;
  *(void *)(v1 + 48) = v7;
  *(void *)(v1 + 56) = v4;
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_100090948((uint64_t)&v10);
  swift_retain();
  swift_retain();
  sub_10000A38C(&qword_10035ABC8);
  sub_10000B010(&qword_10035ABD0, &qword_10035ABC8);
  uint64_t v8 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *(void *)(v2 + 64) = v8;
  swift_release();
  swift_retain();
  sub_100090974((uint64_t)&v10);
  swift_release();
  swift_release();
  swift_release();
  return v2;
}

uint64_t sub_10008F010(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10008F070(v1);
    return swift_release();
  }
  return result;
}

void sub_10008F070(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v65 = *(void *)(v5 - 8);
  uint64_t v66 = v5;
  __chkstk_darwin(v5);
  uint64_t v62 = v6;
  uint64_t v64 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10035AC20);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10000A38C(&qword_100360358);
  uint64_t v56 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  int64x2_t v55 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_100360360);
  uint64_t v58 = *(void *)(v11 - 8);
  uint64_t v59 = v11;
  __chkstk_darwin(v11);
  unint64_t v54 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_10000A38C(&qword_100360368);
  uint64_t v61 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  int64_t v60 = (char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v71 = 0;
  unint64_t v72 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  unint64_t v71 = 0xD000000000000012;
  unint64_t v72 = 0x80000001002B6AC0;
  v14._uint64_t countAndFlagsBits = sub_1001F7514();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  id v15 = sub_1001F66EC();
  swift_bridgeObjectRetain();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 ulog:40 message:v16];
  swift_bridgeObjectRelease();

  ((void (*)(long long *__return_ptr, uint64_t))v2[5])(&v69, a1);
  if (v70)
  {
    sub_10000D7E8(&v69, (uint64_t)&v71);
    uint64_t v67 = a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
    char v17 = sub_1000901E8(a1);
    sub_10000D6E4(&v71, v73);
    swift_retain();
    uint64_t v53 = sub_1000B9170((uint64_t)&off_10031DC98, a1, v17 & 1);
    *(void *)&long long v69 = v53;
    sub_10000A34C();
    uint64_t v52 = a1;
    id v68 = (id)static OS_dispatch_queue.main.getter();
    uint64_t v18 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v49[1] = v19 + 56;
    v50(v9, 1, 1, v18);
    sub_10000A38C(&qword_100360378);
    sub_10000B010(&qword_100360380, &qword_100360378);
    sub_1000906E8((unint64_t *)&qword_10035AC60, 255, (void (*)(uint64_t))sub_10000A34C);
    uint64_t v20 = v55;
    Publisher.receive<A>(on:options:)();
    sub_10000D78C((uint64_t)v9, &qword_10035AC20);

    uint64_t v21 = swift_allocObject();
    uint64_t v51 = v4;
    *(void *)(v21 + 16) = v4;
    sub_10000A38C((uint64_t *)&unk_10036E690);
    sub_10000B010(&qword_100360388, &qword_100360358);
    int64_t v22 = v54;
    uint64_t v23 = v57;
    Publisher.map<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v20, v23);
    if (qword_10035A628 != -1) {
      swift_once();
    }
    uint64_t v24 = (void *)qword_1003ACB50;
    *(void *)&long long v69 = qword_1003ACB50;
    v50(v9, 1, 1, v18);
    sub_10000B010(&qword_100360390, &qword_100360360);
    id v25 = v24;
    uint64_t v27 = v59;
    unint64_t v26 = v60;
    Publisher.receive<A>(on:options:)();
    sub_10000D78C((uint64_t)v9, &qword_10035AC20);

    (*(void (**)(char *, uint64_t))(v58 + 8))(v22, v27);
    uint64_t v28 = swift_allocObject();
    swift_weakInit();
    uint64_t v30 = v64;
    uint64_t v29 = v65;
    uint64_t v31 = v66;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v67, v66);
    unint64_t v32 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
    unint64_t v33 = (v62 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = swift_allocObject();
    uint64_t v35 = v52;
    *(void *)(v34 + 16) = v28;
    *(void *)(v34 + 24) = v35;
    (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v34 + v32, v30, v31);
    uint64_t v36 = v51;
    *(void *)(v34 + v33) = v51;
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = v35;
    *(void *)(v37 + 24) = v36;
    sub_10000B010(&qword_100360398, &qword_100360368);
    swift_retain_n();
    uint64_t v38 = v63;
    uint64_t v39 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v26, v38);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v68 = (id)v2[10];
    v2[10] = 0x8000000000000000;
    sub_10026492C(v39, v67, isUniquelyReferenced_nonNull_native);
    v2[10] = v68;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
    swift_release();
    sub_10000CC5C((uint64_t)&v71);
  }
  else
  {
    sub_10000D78C((uint64_t)&v69, &qword_100360370);
    unint64_t v71 = 0;
    unint64_t v72 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v41._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v41._object = (void *)0x80000001002B6AE0;
    String.append(_:)(v41);
    swift_retain();
    uint64_t v42 = sub_1001F7514();
    int64_t v44 = v43;
    swift_release();
    v45._uint64_t countAndFlagsBits = v42;
    v45._object = v44;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    v46._object = (void *)0x80000001002B6B00;
    String.append(_:)(v46);
    id v47 = sub_1001F66EC();
    swift_bridgeObjectRetain();
    NSString v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v47 ulog:40 message:v48];
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10008FA1C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  self;
  uint64_t v6 = swift_dynamicCastObjCClass();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = qword_10035A5F0;
    swift_unknownObjectRetain();
    if (v8 != -1) {
      swift_once();
    }
    id v9 = (id)qword_1003ACA78;
    uint64_t v10 = sub_1001C396C(v7);
    char v12 = v11;
    int v13 = ~v11;

    if (v13)
    {
      sub_10016ABE4(0xD00000000000005CLL, (void *)0x80000001002B6B80, 0, a2, (uint64_t)&off_100323848);
      id v14 = objc_allocWithZone((Class)PCTelephonyActivity);
      if (v12) {
        id v15 = [v14 initFromKnownConversation:v10];
      }
      else {
        id v15 = [v14 initFromKnownCall:v10];
      }
      id v17 = v15;
      sub_100038A4C(v10, v12);
      uint64_t result = swift_unknownObjectRelease();
      *a3 = v17;
      return result;
    }
    swift_unknownObjectRelease();
  }
  *a3 = v5;

  return swift_unknownObjectRetain();
}

uint64_t sub_10008FB94(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    _StringGuts.grow(_:)(58);
    v11._object = (void *)0x80000001002B6B50;
    v11._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    String.append(_:)(v11);
    sub_10000A38C(&qword_1003603A0);
    _print_unlocked<A, B>(_:_:)();
    v12._uint64_t countAndFlagsBits = 0x656369766564202CLL;
    v12._object = (void *)0xE90000000000003DLL;
    String.append(_:)(v12);
    swift_retain();
    uint64_t v13 = sub_1001F7514();
    id v15 = v14;
    swift_release();
    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    sub_10016ABE4(0, (void *)0xE000000000000000, 0, a5, (uint64_t)&off_100323848);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    sub_1001301D0(a4);
    swift_endAccess();
    swift_release();
    if (!v8)
    {
      if ((*(uint64_t (**)(uint64_t))(v10 + 24))(a3))
      {
        sub_10008F070(a3);
      }
      else
      {
        swift_retain();
        PassthroughSubject.send(_:)();
        swift_release();
        sub_100040734();
      }
    }
    return swift_release();
  }
  return result;
}

void sub_10008FD80(id *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = [*a1 isValid];
  _StringGuts.grow(_:)(69);
  v6._object = (void *)0x80000001002B6B20;
  v6._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v6);
  sub_10000A38C((uint64_t *)&unk_10036E690);
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 0x696C61567369202CLL;
  v7._object = (void *)0xEA00000000003D64;
  String.append(_:)(v7);
  if (v5) {
    uint64_t v8 = 1702195828;
  }
  else {
    uint64_t v8 = 0x65736C6166;
  }
  if (v5) {
    unint64_t v9 = 0xE400000000000000;
  }
  else {
    unint64_t v9 = 0xE500000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x656369766564202CLL;
  v11._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v11);
  swift_retain();
  uint64_t v12 = sub_1001F7514();
  id v14 = v13;
  swift_release();
  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  sub_10016ABE4(0, (void *)0xE000000000000000, 0, a3, (uint64_t)&off_100323848);
  swift_bridgeObjectRelease();
  self;
  uint64_t v16 = swift_dynamicCastObjCClass();
  if (v16)
  {
    uint64_t v17 = *(void *)(a2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_deviceActivity);
    if (v5)
    {
      uint64_t v18 = (void *)v16;
      swift_unknownObjectRetain();
    }
    else
    {
      uint64_t v18 = 0;
    }
    int64_t v22 = *(void **)(v17 + 16);
    *(void *)(v17 + 16) = v18;
    swift_unknownObjectRetain();
    id v23 = v18;

    uint64_t v24 = *(void **)(v17 + 16);
    id v25 = v24;
    sub_1001FA338(v24);
    swift_unknownObjectRelease();
  }
  else
  {
    self;
    uint64_t v19 = swift_dynamicCastObjCClass();
    if (v19)
    {
      uint64_t v20 = *(void *)(a2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_deviceActivity);
      if (v5)
      {
        uint64_t v21 = (void *)v19;
        swift_unknownObjectRetain();
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v29 = *(void *)(v20 + 32);
      uint64_t v30 = *(void **)(v29 + 24);
      *(void *)(v29 + 24) = v21;
      id v31 = v21;
      swift_unknownObjectRetain();
      id v32 = v31;
      swift_retain();

      sub_10010513C();
    }
    else
    {
      self;
      uint64_t v26 = swift_dynamicCastObjCClass();
      if (v26)
      {
        uint64_t v27 = *(void *)(a2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_deviceActivity);
        if (v5)
        {
          uint64_t v28 = (void *)v26;
          swift_unknownObjectRetain();
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v29 = *(void *)(v27 + 40);
        uint64_t v36 = *(void **)(v29 + 24);
        *(void *)(v29 + 24) = v28;
        id v37 = v28;
        swift_unknownObjectRetain();
        id v32 = v37;
        swift_retain();

        sub_100104EC4();
      }
      else
      {
        self;
        uint64_t v33 = swift_dynamicCastObjCClass();
        if (v33)
        {
          uint64_t v34 = *(void *)(a2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_deviceActivity);
          if (v5)
          {
            uint64_t v35 = (void *)v33;
            swift_unknownObjectRetain();
          }
          else
          {
            uint64_t v35 = 0;
          }
          uint64_t v29 = *(void *)(v34 + 48);
          Swift::String v41 = *(void **)(v29 + 24);
          *(void *)(v29 + 24) = v35;
          id v42 = v35;
          swift_unknownObjectRetain();
          id v32 = v42;
          swift_retain();

          sub_100104ED0();
        }
        else
        {
          self;
          uint64_t v38 = swift_dynamicCastObjCClass();
          if (!v38) {
            return;
          }
          uint64_t v39 = *(void *)(a2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_deviceActivity);
          if (v5)
          {
            uint64_t v40 = (void *)v38;
            swift_unknownObjectRetain();
          }
          else
          {
            uint64_t v40 = 0;
          }
          uint64_t v29 = *(void *)(v39 + 56);
          uint64_t v43 = *(void **)(v29 + 24);
          *(void *)(v29 + 24) = v40;
          id v44 = v40;
          swift_unknownObjectRetain();
          id v32 = v44;
          swift_retain();

          sub_100105130();
        }
      }
    }
    id v45 = *(id *)(v29 + 24);
    CurrentValueSubject.send(_:)();
    swift_unknownObjectRelease();
    swift_release();

    swift_release();
  }
}

uint64_t sub_1000901E8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id, v3);
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 80) + 16))
  {
    swift_bridgeObjectRetain();
    sub_100269DA0((uint64_t)v6);
    char v8 = v7;
    if (v7) {
      swift_retain();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = 0;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_release();
  return v8 & 1;
}

uint64_t sub_100090350()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000903C0()
{
  sub_100090350();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PeerActivityObserver()
{
  return self;
}

uint64_t destroy for PeerActivityObserverModel()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for PeerActivityObserverModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for PeerActivityObserverModel(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for PeerActivityObserverModel(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PeerActivityObserverModel(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PeerActivityObserverModel(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PeerActivityObserverModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PeerActivityObserverModel()
{
  return &type metadata for PeerActivityObserverModel;
}

uint64_t sub_10009063C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1000B4664(a1, WitnessTable);
}

uint64_t sub_100090690(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000906E8(&qword_100360350, a2, (void (*)(uint64_t))type metadata accessor for PeerActivityObserver);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000906E8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100090730()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100090740@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10008FA1C(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_100090748()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100090780()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100090860(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10008FB94(a1, v5, v6, v1 + v4, v7);
}

uint64_t sub_100090900()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100090938(id *a1)
{
  sub_10008FD80(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100090940(uint64_t *a1)
{
  return sub_10008F010(a1);
}

uint64_t sub_100090948(uint64_t a1)
{
  return a1;
}

uint64_t sub_100090974(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000909A0()
{
  return swift_initClassMetadata2();
}

id sub_100090A00()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  strcpy((char *)v10, "Deinit: key=");
  BYTE5(v10[1]) = 0;
  HIWORD(v10[1]) = -5120;
  Swift::String v11 = v0;
  uint64_t v3 = *(void *)&v0[qword_1003603B0];
  unint64_t v4 = *(void **)&v0[qword_1003603B0 + 8];
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  sub_10016ADD8(v10[0], (void *)v10[1], 0, (uint64_t)ObjectType, (uint64_t)&off_100323A18);
  swift_bridgeObjectRelease();
  id v6 = *(id *)&v0[qword_1003603A8];
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 removeObserver:v1 forKeyPath:v7 context:0];

  v9.receiver = v1;
  v9.super_class = ObjectType;
  return [super dealloc];
}

id sub_100090B30(void *a1)
{
  id v1 = a1;
  return sub_100090A00();
}

uint64_t sub_100090B58(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_100090BBC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a3)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    memset(v17, 0, sizeof(v17));
    id v14 = a5;
    id v15 = a1;
    if (a5) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v13 = 0;
    goto LABEL_8;
  }
  uint64_t v8 = 0;
  uint64_t v10 = 0;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  swift_unknownObjectRetain();
  id v11 = a5;
  id v12 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  if (!a5) {
    goto LABEL_7;
  }
LABEL_4:
  type metadata accessor for NSKeyValueChangeKey(0);
  sub_100091204();
  uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_8:
  sub_100090D08(v8, v10, (uint64_t)v17, v13);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1000911A4((uint64_t)v17);
}

void sub_100090CC8()
{
}

uint64_t type metadata accessor for UserDefaultsObserver()
{
  return sub_10000F2E4();
}

uint64_t sub_100090D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = *(void *)((swift_isaMask & *v4) + 0x50);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v33 = *(void *)(v11 - 8);
  uint64_t v34 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  id v32 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v32 - v15;
  uint64_t v35 = *(void *)(v10 - 8);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v32 - v17;
  *(void *)&long long v36 = v4;
  *(void *)&v38[0] = 0;
  *((void *)&v38[0] + 1) = 0xE000000000000000;
  v19._object = (void *)0x80000001002B6C50;
  v19._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 0x65676E616863203ALL;
  v20._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v20);
  uint64_t v39 = a4;
  sub_10000A38C(&qword_100360440);
  sub_10009125C();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  sub_10016AECC(10, *(uint64_t *)&v38[0], *((void **)&v38[0] + 1), 0, ObjectType, (uint64_t)&off_100323A18);
  uint64_t result = swift_bridgeObjectRelease();
  if (a4 && a2)
  {
    if (*(void *)((char *)v4 + qword_1003603B0) == a1 && *(void *)((char *)v4 + qword_1003603B0 + 8) == a2
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      if (*(void *)(a4 + 16))
      {
        int64_t v22 = NSKeyValueChangeNewKey;
        unint64_t v23 = sub_100269F10((uint64_t)v22);
        if (v24)
        {
          sub_100027B10(*(void *)(a4 + 56) + 32 * v23, (uint64_t)&v36);
        }
        else
        {
          long long v36 = 0u;
          long long v37 = 0u;
        }
        uint64_t v25 = v35;

        if (*((void *)&v37 + 1))
        {
          sub_100027B00(&v36, v38);
          sub_100027B10((uint64_t)v38, (uint64_t)&v36);
          int v26 = swift_dynamicCast();
          uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
          if (v26)
          {
            v27(v16, 0, 1, v10);
            (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v18, v16, v10);
            uint64_t v28 = v32;
            (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v32, v18, v10);
            v27(v28, 0, 1, v10);
            (*(void (**)(char *))((char *)v5 + qword_1003603B8))(v28);
            (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v34);
            (*(void (**)(char *, uint64_t))(v25 + 8))(v18, v10);
          }
          else
          {
            v27(v16, 1, 1, v10);
            uint64_t v29 = v34;
            uint64_t v30 = *(void (**)(char *, uint64_t))(v33 + 8);
            v30(v16, v34);
            id v31 = v32;
            v27(v32, 1, 1, v10);
            (*(void (**)(char *))((char *)v5 + qword_1003603B8))(v31);
            v30(v31, v29);
          }
          return sub_10000CC5C((uint64_t)v38);
        }
      }
      else
      {
        long long v36 = 0u;
        long long v37 = 0u;
      }
      return sub_1000911A4((uint64_t)&v36);
    }
  }
  return result;
}

void sub_100091174()
{
}

uint64_t sub_1000911A4(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_100371910);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100091204()
{
  unint64_t result = qword_10035ADE0;
  if (!qword_10035ADE0)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035ADE0);
  }
  return result;
}

unint64_t sub_10009125C()
{
  unint64_t result = qword_100360448;
  if (!qword_100360448)
  {
    sub_10000A3D0(&qword_100360440);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360448);
  }
  return result;
}

uint64_t sub_1000912B8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10009132C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v3[0] = v1;
    char v4 = 3;
    sub_1000916F0((uint64_t)v3);
    swift_release();
    return sub_1000718C4((uint64_t)v3);
  }
  return result;
}

uint64_t sub_1000913A8(char *a1, uint64_t a2, char a3)
{
  char v4 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v6[0] = v4;
    unsigned char v6[40] = a3;
    sub_1000916F0((uint64_t)v6);
    swift_release();
    return sub_1000718C4((uint64_t)v6);
  }
  return result;
}

uint64_t sub_100091424@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 == 4) {
    LOBYTE(v2) = 0;
  }
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = v2;
  return swift_retain();
}

BOOL sub_100091444(uint64_t a1)
{
  return *(unsigned char *)(a1 + 8) != 0;
}

uint64_t sub_100091454(uint64_t a1, char a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v5[0] = a2;
    uint64_t v7 = type metadata accessor for HandoffDevice();
    uint64_t v6 = a1;
    char v8 = 2;
    swift_retain();
    sub_1000916F0((uint64_t)v5);
    swift_release();
    return sub_1000718C4((uint64_t)v5);
  }
  return result;
}

uint64_t sub_1000914EC()
{
  id v1 = sub_1001F5E44();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  swift_release();
  uint64_t v3 = v0 + OBJC_IVAR____TtC17proximitycontrold21HandoffSessionManager__session;
  uint64_t v4 = sub_10000A38C(&qword_1003677B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000915F0()
{
  return type metadata accessor for HandoffSessionManager();
}

uint64_t type metadata accessor for HandoffSessionManager()
{
  uint64_t result = qword_100360488;
  if (!qword_100360488) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100091644()
{
  sub_100093100();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000916F0(uint64_t a1)
{
  uint64_t v2 = v1;
  v3._uint64_t countAndFlagsBits = sub_100255450();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  id v4 = sub_1001F5E44();
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 ulog:40 message:v5];
  swift_bridgeObjectRelease();

  strcpy((char *)&v49, "screenOn=");
  WORD1(v49._object) = 0;
  HIDWORD(v49._object) = -385875968;
  if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(v2 + 16)
                                        + OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment_screenOnMonitor)
                            + 16)
                + 24))
    uint64_t v6 = 1702195828;
  else {
    uint64_t v6 = 0x65736C6166;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(v2 + 16)
                                        + OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment_screenOnMonitor)
                            + 16)
                + 24))
    unint64_t v7 = 0xE400000000000000;
  else {
    unint64_t v7 = 0xE500000000000000;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 8236;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = v49._countAndFlagsBits;
  object = v49._object;
  strcpy((char *)&v49, "State: <");
  BYTE1(v49._object) = 0;
  WORD1(v49._object) = 0;
  HIDWORD(v49._object) = -402653184;
  v10._object = object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v49._countAndFlagsBits;
  uint64_t v12 = v49._object;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v49, "orientation=");
  HIWORD(v49._object) = -5120;
  uint64_t v14 = qword_10035A538;
  swift_retain();
  if (v14 != -1) {
    swift_once();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  id v15 = (id)BSInterfaceOrientationDescription();
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRetain();
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  strcpy((char *)&v49, "isCharging=");
  HIDWORD(v49._object) = -352321536;
  if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(v2 + 16)
                                        + OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment_batteryStateMonitor)
                            + 16)
                + 24))
    uint64_t v21 = 1702195828;
  else {
    uint64_t v21 = 0x65736C6166;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(v2 + 16)
                                        + OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment_batteryStateMonitor)
                            + 16)
                + 24))
    unint64_t v22 = 0xE400000000000000;
  else {
    unint64_t v22 = 0xE500000000000000;
  }
  unint64_t v23 = v22;
  String.append(_:)(*(Swift::String *)&v21);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 8236;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  swift_bridgeObjectRetain();
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  strcpy((char *)&v49, "session=");
  BYTE1(v49._object) = 0;
  WORD1(v49._object) = 0;
  HIDWORD(v49._object) = -402653184;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v50)
  {
    uint64_t v50 = 60;
    unint64_t v51 = 0xE100000000000000;
    swift_retain();
    UUID.uuidString.getter();
    swift_release();
    sub_100089A9C(8);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 32;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    swift_retain();
    uint64_t v27 = sub_1001F7514();
    uint64_t v29 = v28;
    swift_release();
    v30._uint64_t countAndFlagsBits = v27;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 62;
    v31._object = (void *)0xE100000000000000;
    String.append(_:)(v31);
    swift_release();
    uint64_t v32 = 60;
    unint64_t v33 = 0xE100000000000000;
  }
  else
  {
    unint64_t v33 = 0xE300000000000000;
    uint64_t v32 = 7104878;
  }
  unint64_t v34 = v33;
  String.append(_:)(*(Swift::String *)&v32);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 8236;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  swift_bridgeObjectRetain();
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  strcpy((char *)&v49, "devices=");
  BYTE1(v49._object) = 0;
  WORD1(v49._object) = 0;
  HIDWORD(v49._object) = -402653184;
  uint64_t v36 = *(void *)(*(void *)(v2 + 16) + OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment_deviceStorage);
  swift_beginAccess();
  uint64_t v48 = *(void *)(*(void *)(v36 + 64) + 16);
  v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  uint64_t v38 = v49._countAndFlagsBits;
  uint64_t v39 = v49._object;
  v49._uint64_t countAndFlagsBits = countAndFlagsBits;
  v49._object = v12;
  swift_bridgeObjectRetain();
  v40._uint64_t countAndFlagsBits = v38;
  v40._object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v41._uint64_t countAndFlagsBits = 62;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  id v42 = sub_1001F5E44();
  swift_bridgeObjectRetain();
  NSString v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v42 ulog:40 message:v43];
  swift_bridgeObjectRelease();

  type metadata accessor for Stopwatch();
  uint64_t inited = swift_initStackObject();
  *(unsigned char *)(inited + 16) = 1;
  *(void *)(inited + 24) = 0;
  *(unsigned char *)(inited + 32) = 1;
  *(void *)(inited + 40) = 0;
  *(unsigned char *)(inited + 48) = 1;
  *(void *)(inited + 24) = UpTicks()();
  *(unsigned char *)(inited + 32) = 0;
  *(unsigned char *)(inited + 16) = 0;
  if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(v2 + 16)
                                        + OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment_screenOnMonitor)
                            + 16)
                + 24) == 1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if (v49._countAndFlagsBits == 1)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  id v45 = sub_1001F5E44();
  NSString v46 = String._bridgeToObjectiveC()();
  [v45 ulog:40 message:v46 a1:v48];
}

uint64_t sub_1000922C8()
{
  id v1 = sub_1001F5E44();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  if (*(unsigned char *)(*(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment__isEnabled)
                + 24) == 1)
  {
    if (qword_10035A658 != -1) {
      swift_once();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v6 == 1)
    {
      if (qword_10035A638 != -1) {
        swift_once();
      }
      if (sub_10020FCAC()) {
        return 1;
      }
    }
  }
  id v4 = sub_1001F5E44();
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 ulog:40 message:v5];

  return 0;
}

uint64_t sub_1000924B4()
{
  id v1 = sub_1001F5E44();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  uint64_t v3 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment_deviceStorage);
  id v4 = *(void **)(v3 + 32);
  swift_retain();
  [v4 lock];
  swift_beginAccess();
  uint64_t v5 = swift_bridgeObjectRetain();
  char v6 = sub_1000F06FC(v5);
  swift_bridgeObjectRelease();
  [*(id *)(v3 + 32) unlock];
  swift_release();
  swift_retain();
  unint64_t v7 = (unint64_t)sub_10009427C((unint64_t)v6);
  swift_release();
  swift_release();
  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease_n();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_9;
  }
LABEL_3:
  unint64_t v10 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v11 = result;
    unint64_t v12 = v8 - 1;
    if (v8 == 1)
    {
LABEL_6:
      uint64_t v13 = v11;
LABEL_7:
      swift_bridgeObjectRelease_n();
      return v13;
    }
  }
  else
  {
    if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_37;
    }
    uint64_t v11 = *(void *)(v7 + 32);
    uint64_t result = swift_retain();
    unint64_t v12 = v8 - 1;
    if (v8 == 1) {
      goto LABEL_6;
    }
  }
  if (v8 < 2)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v10 || ((unint64_t v14 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10), v14 >= 2) ? (v15 = v12 >= v14) : (v15 = 1), !v15))
  {
    uint64_t v16 = 0;
    while (1)
    {
      if (v10)
      {
        uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v13 = *(void *)(v7 + 8 * v16 + 40);
        swift_retain();
      }
      swift_retain();
      CurrentValueSubject.value.getter();
      if (v22)
      {
        CurrentValueSubject.value.getter();
        swift_release();
        float v17 = v23;
        int v18 = v24;
      }
      else
      {
        float v17 = v20;
        swift_release();
        int v18 = v21 & 1;
      }
      if (v18) {
        float v17 = 3.4028e38;
      }
      swift_retain();
      CurrentValueSubject.value.getter();
      if (v22)
      {
        CurrentValueSubject.value.getter();
        swift_release();
        if (v24) {
          goto LABEL_33;
        }
        float v19 = v23;
      }
      else
      {
        swift_release();
        if (((LODWORD(v20) | ((unint64_t)v21 << 32)) & 0x100000000) != 0)
        {
LABEL_33:
          float v19 = 3.4028e38;
          goto LABEL_34;
        }
        float v19 = v20;
      }
LABEL_34:
      if (v17 >= v19) {
        uint64_t v13 = v11;
      }
      swift_release();
      ++v16;
      uint64_t v11 = v13;
      if (v12 == v16) {
        goto LABEL_7;
      }
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1000927E4(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100092844(a1);
    return swift_release();
  }
  return result;
}

void sub_100092844(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v49 = *(void *)(v2 - 8);
  uint64_t v50 = v2;
  __chkstk_darwin(v2);
  id v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v47 = *(void *)(v5 - 8);
  uint64_t v48 = v5;
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock = (void **)0xD00000000000001ELL;
  unint64_t v52 = 0x80000001002B6D00;
  v57._uint64_t countAndFlagsBits = 60;
  v57._object = (void *)0xE100000000000000;
  swift_retain();
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 32;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  swift_retain();
  uint64_t v10 = sub_1001F7514();
  unint64_t v12 = v11;
  swift_release();
  v13._uint64_t countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 62;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  swift_release();
  String.append(_:)(v57);
  swift_bridgeObjectRelease();
  id v15 = sub_1001F5E44();
  swift_bridgeObjectRetain();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 ulog:40 message:v16];
  swift_bridgeObjectRelease();

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  float v17 = aBlock;
  if (aBlock && (swift_release(), v17 == (void **)a1))
  {
    uint64_t v39 = (void *)(a1 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_finishedHandler);
    uint64_t v40 = *(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold14HandoffSession_finishedHandler);
    *uint64_t v39 = 0;
    v39[1] = 0;
    sub_10000F088(v40);
    swift_weakAssign();
    swift_getKeyPath();
    swift_getKeyPath();
    aBlock = 0;
    swift_retain();
    static Published.subscript.setter();
    if (qword_10035A5B0 != -1) {
      swift_once();
    }
    if (qword_1003AC8F0) {
      sub_100160470(a1);
    }
    if (qword_10035A628 != -1) {
      swift_once();
    }
    Swift::String v41 = (void *)qword_1003ACB50;
    uint64_t v42 = swift_allocObject();
    swift_weakInit();
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = v42;
    *(void *)(v43 + 24) = a1;
    int64x2_t v55 = sub_100095494;
    uint64_t v56 = v43;
    aBlock = _NSConcreteStackBlock;
    unint64_t v52 = 1107296256;
    uint64_t v53 = sub_10007A0AC;
    unint64_t v54 = &unk_100323B00;
    id v44 = _Block_copy(&aBlock);
    swift_retain();
    id v45 = v41;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v57._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000954B4((unint64_t *)&qword_100363D50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000A38C((uint64_t *)&unk_10035E800);
    sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
    uint64_t v46 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v44);

    (*(void (**)(char *, uint64_t))(v49 + 8))(v4, v46);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v7, v48);
    swift_release();
    swift_release();
  }
  else
  {
    aBlock = 0;
    unint64_t v52 = 0xE000000000000000;
    _StringGuts.grow(_:)(67);
    v18._uint64_t countAndFlagsBits = 0xD000000000000030;
    v18._object = (void *)0x80000001002B6D20;
    String.append(_:)(v18);
    v57._uint64_t countAndFlagsBits = 60;
    v57._object = (void *)0xE100000000000000;
    swift_retain();
    UUID.uuidString.getter();
    sub_100089A9C(8);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 32;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    swift_retain();
    uint64_t v21 = sub_1001F7514();
    float v23 = v22;
    swift_release();
    v24._uint64_t countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 62;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    swift_release();
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 0x732E666C6573202CLL;
    v26._object = (void *)0xEF3D6E6F69737365;
    String.append(_:)(v26);
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v57._countAndFlagsBits)
    {
      v57._uint64_t countAndFlagsBits = 60;
      v57._object = (void *)0xE100000000000000;
      swift_retain();
      UUID.uuidString.getter();
      swift_release();
      sub_100089A9C(8);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v28._uint64_t countAndFlagsBits = 32;
      v28._object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      swift_retain();
      uint64_t v29 = sub_1001F7514();
      Swift::String v31 = v30;
      swift_release();
      v32._uint64_t countAndFlagsBits = v29;
      v32._object = v31;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._uint64_t countAndFlagsBits = 62;
      v33._object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      swift_release();
      uint64_t countAndFlagsBits = v57._countAndFlagsBits;
      object = v57._object;
    }
    else
    {
      object = (void *)0xE300000000000000;
      uint64_t countAndFlagsBits = 7104878;
    }
    uint64_t v36 = object;
    String.append(_:)(*(Swift::String *)&countAndFlagsBits);
    swift_bridgeObjectRelease();
    id v37 = sub_1001F5E44();
    swift_bridgeObjectRetain();
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v37 ulog:60 message:v38];
    swift_bridgeObjectRelease();
  }
}

void sub_100093100()
{
  if (!qword_100360498)
  {
    sub_10000A3D0((uint64_t *)&unk_1003604A0);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100360498);
    }
  }
}

uint64_t sub_10009315C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v5[3] = v3;
    v5[0] = a2;
    char v6 = 5;
    swift_retain();
    sub_1000916F0(v5);
    swift_release();
    return sub_1000718C4((uint64_t)v5);
  }
  return result;
}

uint64_t sub_100093210()
{
  sub_10000A38C((uint64_t *)&unk_10035E7E0);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10028D430;
  *(void *)(v1 + 32) = 0xD000000000000027;
  *(void *)(v1 + 40) = 0x80000001002B6CD0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v22)
  {
    swift_retain();
    UUID.uuidString.getter();
    swift_release();
    sub_100089A9C(8);
    swift_bridgeObjectRelease();
    v2._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3._uint64_t countAndFlagsBits = 32;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    swift_retain();
    uint64_t v4 = sub_1001F7514();
    char v6 = v5;
    swift_release();
    v7._uint64_t countAndFlagsBits = v4;
    v7._object = v6;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = 62;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    swift_release();
    uint64_t v9 = 60;
    unint64_t v10 = 0xE100000000000000;
  }
  else
  {
    unint64_t v10 = 0xE300000000000000;
    uint64_t v9 = 7104878;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  unint64_t v13 = *(void *)(v1 + 16);
  unint64_t v12 = *(void *)(v1 + 24);
  if (v13 >= v12 >> 1) {
    uint64_t v1 = (uint64_t)sub_10008892C((char *)(v12 > 1), v13 + 1, 1, (char *)v1);
  }
  *(void *)(v1 + 16) = v13 + 1;
  uint64_t v14 = v1 + 16 * v13;
  *(void *)(v14 + 32) = 0x3D6E6F6973736573;
  *(void *)(v14 + 40) = 0xE800000000000000;
  id v15 = (void *)(v0 + OBJC_IVAR____TtC17proximitycontrold21HandoffSessionManager_tasks);
  swift_beginAccess();
  if ((*v15 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  unint64_t v18 = *(void *)(v1 + 16);
  unint64_t v17 = *(void *)(v1 + 24);
  if (v18 >= v17 >> 1) {
    uint64_t v1 = (uint64_t)sub_10008892C((char *)(v17 > 1), v18 + 1, 1, (char *)v1);
  }
  *(void *)(v1 + 16) = v18 + 1;
  uint64_t v19 = v1 + 16 * v18;
  *(void *)(v19 + 32) = 0x203A736B736174;
  *(void *)(v19 + 40) = 0xE700000000000000;
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_10000B010((unint64_t *)&qword_10035E7F0, (uint64_t *)&unk_100367D40);
  uint64_t v20 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_1000935A0()
{
  return sub_100093210();
}

uint64_t sub_1000935C4@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100093648()
{
  return static Published.subscript.setter();
}

uint64_t sub_1000936C8()
{
  uint64_t v0 = sub_10000A38C(&qword_100360618);
  __chkstk_darwin(v0 - 8);
  Swift::String v2 = (uint64_t *)&v37[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v38 = 0;
  unint64_t v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  unint64_t v38 = 0xD000000000000026;
  unint64_t v39 = 0x80000001002B6FD0;
  swift_retain();
  uint64_t v3 = sub_1001F7514();
  uint64_t v5 = v4;
  swift_release();
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x696765527875202CLL;
  v7._object = (void *)0xEB000000003D6E6FLL;
  String.append(_:)(v7);
  char v8 = sub_10003E708();
  if (v8 == 4)
  {
    unint64_t v9 = 0xE300000000000000;
    uint64_t v10 = 7104878;
  }
  else
  {
    v37[15] = v8;
    uint64_t v10 = String.init<A>(describing:)();
    unint64_t v9 = v11;
  }
  unint64_t v12 = v9;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  id v13 = sub_1001F5E44();
  swift_bridgeObjectRetain();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 ulog:40 message:v14];
  swift_bridgeObjectRelease();

  unsigned __int8 v15 = sub_10003E708();
  if (v15 == 4)
  {
    id v16 = sub_1001F5E44();
    NSString v17 = String._bridgeToObjectiveC()();
    [v16 ulog:40 message:v17];
LABEL_20:

    return 0;
  }
  unsigned __int8 v18 = v15;
  sub_10003C908();
  char v19 = sub_1001E1728();
  swift_release();
  if (v19)
  {
    if (v18 < 2u)
    {
      uint64_t v21 = (void *)0xE400000000000000;
      uint64_t v20 = 1953393000;
      goto LABEL_11;
    }
  }
  else if (!v18)
  {
    uint64_t v20 = 0x6F69746163756465;
    uint64_t v21 = (void *)0xE90000000000006ELL;
LABEL_11:
    unint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v22._uint64_t countAndFlagsBits = 0x20656369766544;
    v22._object = (void *)0xE700000000000000;
    String.append(_:)(v22);
    swift_retain();
    uint64_t v23 = sub_1001F7514();
    Swift::String v25 = v24;
    swift_release();
    v26._uint64_t countAndFlagsBits = v23;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._uint64_t countAndFlagsBits = 0xD000000000000018;
    v27._object = (void *)0x80000001002B7060;
    String.append(_:)(v27);
    if (v18) {
      uint64_t v28 = 0x6F69746163756465;
    }
    else {
      uint64_t v28 = 1701602409;
    }
    if (v18) {
      unint64_t v29 = 0xE90000000000006ELL;
    }
    else {
      unint64_t v29 = 0xE400000000000000;
    }
    unint64_t v30 = v29;
    String.append(_:)(*(Swift::String *)&v28);
    swift_bridgeObjectRelease();
    v31._object = (void *)0x80000001002B7080;
    v31._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = v20;
    v32._object = v21;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    id v16 = sub_1001F5E44();
    swift_bridgeObjectRetain();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 ulog:40 message:v17];
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  sub_10003C514(v2);
  uint64_t v33 = _s8CardInfoOMa();
  uint64_t v34 = 1;
  int v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v2, 1, v33);
  sub_10000D78C((uint64_t)v2, &qword_100360618);
  if (v35 == 1)
  {
    id v16 = sub_1001F5E44();
    NSString v17 = String._bridgeToObjectiveC()();
    [v16 ulog:60 message:v17];
    goto LABEL_20;
  }
  return v34;
}

uint64_t sub_100093B30()
{
  swift_retain();
  uint64_t v0 = sub_1001F7514();
  Swift::String v2 = v1;
  swift_release();
  v3._uint64_t countAndFlagsBits = v0;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  id v4 = sub_1001F5E44();
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 ulog:40 message:v5];
  swift_bridgeObjectRelease();

  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v6 = *(id *)(qword_1003AC750 + 1568);
  sub_1001008A8();
  uint64_t v8 = v7;

  if (!v8) {
    return 1;
  }
  String.lowercased()();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100098144();
  swift_release();
  Swift::String v9 = String.lowercased()();
  swift_bridgeObjectRelease();
  sub_100016790();
  char v10 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if (v10)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  id v12 = sub_1001F5E44();
  swift_bridgeObjectRetain();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 ulog:10 message:v13 v9._countAndFlagsBits v9._object 0xD00000000000002CLL 0x80000001002B6FA0];
  swift_bridgeObjectRelease();

  return 0;
}

uint64_t sub_100093DF0()
{
  swift_retain();
  uint64_t v0 = sub_1001F7514();
  Swift::String v2 = v1;
  swift_release();
  v3._uint64_t countAndFlagsBits = v0;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  id v4 = sub_1001F5E44();
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 ulog:v5 message:0xD000000000000023, 0x80000001002B6F10];
  swift_bridgeObjectRelease();

  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v6 = *(id *)(qword_1003AC750 + 1552);
  char v7 = sub_1000FD938();

  if (v7)
  {
    uint64_t v8 = sub_10000C78C();
    if (qword_10035A5C0 != -1) {
      swift_once();
    }
    uint64_t v9 = 8;
    if (*((unsigned char *)off_10036AE10 + 24)) {
      uint64_t v9 = 10;
    }
    if ((v9 & v8) != 0)
    {
      return 1;
    }
    else
    {
      _StringGuts.grow(_:)(56);
      v11._uint64_t countAndFlagsBits = 0x20656369766544;
      v11._object = (void *)0xE700000000000000;
      String.append(_:)(v11);
      swift_retain();
      uint64_t v12 = sub_1001F7514();
      NSString v14 = v13;
      swift_release();
      v15._uint64_t countAndFlagsBits = v12;
      v15._object = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
      v16._object = (void *)0x80000001002B6F40;
      String.append(_:)(v16);
      id v17 = sub_1001F5E44();
      swift_bridgeObjectRetain();
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v17 ulog:60 message:v18];
      swift_bridgeObjectRelease();

      return 0;
    }
  }
  else
  {
    return sub_100093B30();
  }
}

uint64_t sub_100094094()
{
  swift_retain();
  uint64_t v0 = sub_1001F7514();
  Swift::String v2 = v1;
  swift_release();
  v3._uint64_t countAndFlagsBits = v0;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  id v4 = sub_1001F5E44();
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 ulog:v5 message:0xD000000000000023, 0x80000001002B6E70];
  swift_bridgeObjectRelease();

  if (sub_10003C98C())
  {
    if (sub_100093DF0()) {
      return 1;
    }
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    unint64_t v7 = 0xD000000000000030;
    uint64_t v8 = "### Can't trigger UI: Ranging doesn't allow for ";
  }
  else
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    unint64_t v7 = 0xD00000000000002BLL;
    uint64_t v8 = "### Can't trigger UI: Handoff not ready on ";
  }
  unint64_t v15 = v7;
  unint64_t v16 = (unint64_t)(v8 - 32) | 0x8000000000000000;
  swift_retain();
  uint64_t v9 = sub_1001F7514();
  Swift::String v11 = v10;
  swift_release();
  v12._uint64_t countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  id v13 = sub_1001F5E44();
  swift_bridgeObjectRetain();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 ulog:60 message:v14, v15, v16];
  swift_bridgeObjectRelease();

  return 0;
}

void *sub_10009427C(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_17:
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      for (unint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v4 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_14:
            __break(1u);
            return _swiftEmptyArrayStorage;
          }
        }
        else
        {
          if (i >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_17;
          }
          swift_retain();
          unint64_t v4 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_14;
          }
        }
        if (sub_1000936C8() & 1) != 0 && (sub_100094094())
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        if (v4 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t *sub_1000943D8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v76 = sub_10000A38C(&qword_1003605A0);
  uint64_t v75 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v73 = (char *)v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_10000A38C(&qword_1003605A8);
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v74 = (char *)v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_1003605B0);
  uint64_t v80 = *(void *)(v7 - 8);
  uint64_t v81 = v7;
  __chkstk_darwin(v7);
  unint64_t v79 = (char *)v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000A38C((uint64_t *)&unk_100363D20);
  uint64_t v90 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v85 = (char *)v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_10000A38C(&qword_1003605B8);
  uint64_t v71 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  unint64_t v86 = (char *)v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_10035AC20);
  __chkstk_darwin(v11 - 8);
  uint64_t v70 = (char *)v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_10000A38C(&qword_1003605C0);
  id v68 = *(void (***)(char *, void))(v82 - 8);
  __chkstk_darwin(v82);
  NSString v14 = (char *)v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_1003605C8);
  uint64_t v83 = *(void *)(v15 - 8);
  uint64_t v84 = v15;
  __chkstk_darwin(v15);
  id v17 = (char *)v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000A38C(&qword_1003677B0);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v22 = (char *)v2 + OBJC_IVAR____TtC17proximitycontrold21HandoffSessionManager__session;
  *(void *)&v92[0] = 0;
  sub_10000A38C((uint64_t *)&unk_1003604A0);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v22, v21, v18);
  long long v69 = (char *)v2 + OBJC_IVAR____TtC17proximitycontrold21HandoffSessionManager_tasks;
  *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC17proximitycontrold21HandoffSessionManager_tasks) = (uint64_t)&_swiftEmptySetSingleton;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v4, (uint64_t)&off_100323A50);
  uint64_t v91 = v2;
  v2[2] = a1;
  uint64_t v23 = a1;
  *(void *)&v92[0] = *(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment_orientationPublisher);
  swift_retain();
  sub_10000A38C(&qword_1003605D0);
  sub_10000B010(&qword_100367840, &qword_1003605D0);
  Publisher.dropFirst(_:)();
  if (qword_10035A628 != -1) {
    swift_once();
  }
  Swift::String v24 = (void *)qword_1003ACB50;
  *(void *)&v92[0] = qword_1003ACB50;
  uint64_t v25 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v26 = *(void *)(v25 - 8);
  unint64_t v88 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  uint64_t v27 = v26 + 56;
  uint64_t v28 = (uint64_t)v70;
  v88(v70, 1, 1, v25);
  unint64_t v89 = sub_10000A34C();
  uint64_t v67 = &protocol conformance descriptor for Publishers.Drop<A>;
  sub_10000B010(&qword_1003605D8, &qword_1003605C0);
  uint64_t v29 = sub_1000954B4((unint64_t *)&qword_10035AC60, (void (*)(uint64_t))sub_10000A34C);
  id v30 = v24;
  uint64_t v31 = v82;
  Publisher.receive<A>(on:options:)();
  sub_10000D78C(v28, &qword_10035AC20);

  v68[1](v14, v31);
  swift_allocObject();
  swift_weakInit();
  id v68 = (void (**)(char *, void))&protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
  sub_10000B010(&qword_1003605E0, &qword_1003605C8);
  uint64_t v32 = v84;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v17, v32);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  *(void *)&v92[0] = sub_10011A3F4();
  uint64_t v33 = sub_10000A38C(&qword_10035ACA0);
  uint64_t v34 = sub_10000B010(&qword_10035ACB0, &qword_10035ACA0);
  int v35 = v85;
  v66[2] = v33;
  v66[1] = v34;
  Publisher.dropFirst(_:)();
  swift_release();
  uint64_t v36 = v23;
  id v37 = (void *)qword_1003ACB50;
  *(void *)&v92[0] = qword_1003ACB50;
  uint64_t v83 = v27;
  uint64_t v84 = v25;
  v88((char *)v28, 1, 1, v25);
  uint64_t v38 = sub_10000B010(&qword_1003605E8, (uint64_t *)&unk_100363D20);
  id v39 = v37;
  uint64_t v40 = v86;
  uint64_t v41 = v87;
  uint64_t v67 = (void *)v38;
  uint64_t v82 = v29;
  Publisher.receive<A>(on:options:)();
  sub_10000D78C(v28, &qword_10035AC20);

  uint64_t v42 = *(void (**)(char *, uint64_t))(v90 + 8);
  v90 += 8;
  v66[0] = v42;
  v42(v35, v41);
  swift_allocObject();
  swift_weakInit();
  uint64_t v43 = sub_10000B010(&qword_1003605F0, &qword_1003605B8);
  uint64_t v44 = v72;
  id v68 = (void (**)(char *, void))v43;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  id v45 = *(void (**)(char *, uint64_t))(v71 + 8);
  v45(v40, v44);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v46 = *(id *)(qword_1003AC750 + 1040);
  char v47 = sub_1000FD938();

  if (v47)
  {
    swift_retain();
    *(void *)&v92[0] = sub_100104B88();
    sub_10000A38C((uint64_t *)&unk_10036BFE0);
    uint64_t v71 = v36;
    sub_10000B010((unint64_t *)&unk_100363D30, (uint64_t *)&unk_10036BFE0);
    uint64_t v48 = Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    *(void *)&v92[0] = v48;
    uint64_t v49 = v85;
    Publisher.dropFirst(_:)();
    swift_release();
    uint64_t v50 = (void *)qword_1003ACB50;
    *(void *)&v92[0] = qword_1003ACB50;
    v88((char *)v28, 1, 1, v84);
    id v51 = v50;
    uint64_t v53 = v86;
    uint64_t v52 = v87;
    Publisher.receive<A>(on:options:)();
    sub_10000D78C(v28, &qword_10035AC20);

    ((void (*)(char *, uint64_t))v66[0])(v49, v52);
    swift_allocObject();
    swift_weakInit();
    Publisher<>.sink(receiveValue:)();
    swift_release();
    v45(v53, v44);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  *(void *)&v92[0] = sub_10011A4EC();
  unint64_t v54 = v91;
  int64x2_t v55 = (void *)qword_1003ACB50;
  id v95 = (id)qword_1003ACB50;
  v88((char *)v28, 1, 1, v84);
  id v56 = v55;
  sub_10000A38C(&qword_1003674C0);
  sub_10000B010(&qword_1003674D0, &qword_1003674C0);
  Swift::String v57 = v73;
  Publisher.receive<A>(on:options:)();
  sub_10000D78C(v28, &qword_10035AC20);

  swift_release();
  sub_10000A38C(&qword_1003605F8);
  sub_10000B010(&qword_100360600, &qword_1003605A0);
  uint64_t v58 = v74;
  uint64_t v59 = v76;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v57, v59);
  sub_10000B010(&qword_100360608, &qword_1003605A8);
  uint64_t v60 = v78;
  uint64_t v61 = v79;
  Publisher.filter(_:)();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v58, v60);
  uint64_t v62 = swift_allocObject();
  swift_weakInit();
  uint64_t v63 = swift_allocObject();
  *(void *)(v63 + 16) = sub_1000953C0;
  *(void *)(v63 + 24) = v62;
  sub_10000B010(&qword_100360610, &qword_1003605B0);
  uint64_t v64 = v81;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v61, v64);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v93 = 0;
  memset(v92, 0, sizeof(v92));
  char v94 = 6;
  sub_1000916F0((uint64_t)v92);
  sub_1000718C4((uint64_t)v92);
  return v54;
}

uint64_t sub_100095360()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100095398(uint64_t *a1)
{
  return sub_10009132C(a1);
}

uint64_t sub_1000953A0(char *a1)
{
  return sub_1000913A8(a1, v1, 4);
}

uint64_t sub_1000953C0(uint64_t a1, char a2)
{
  return sub_100091454(a1, a2);
}

uint64_t sub_1000953C8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100095400(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100095434(char *a1)
{
  return sub_1000913A8(a1, v1, 0);
}

uint64_t sub_100095454()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100095494()
{
  return sub_10009315C(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_10009549C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000954AC()
{
  return swift_release();
}

uint64_t sub_1000954B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100095504(uint64_t a1)
{
  return sub_1000927E4(a1);
}

uint64_t sub_10009551C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000A38C(&qword_100360638);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D6E4(a1, a1[3]);
  sub_100096304();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    v11[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = *(unsigned char *)(v3 + 40);
    v11[12] = 3;
    v11[8] = v9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000956DC()
{
  unint64_t result = 0x444955556C6C6163;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x6F656469567369;
      break;
    case 3:
      unint64_t result = 0x65636976726573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100095770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100095EA0(a1, a2);
  *a3 = result;
  return result;
}

void sub_100095798(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000957A4(uint64_t a1)
{
  unint64_t v2 = sub_100096304();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000957E0(uint64_t a1)
{
  unint64_t v2 = sub_100096304();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10009581C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100096054(a1, (uint64_t)&v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_100095860(void *a1)
{
  return sub_10009551C(a1);
}

id sub_100095878()
{
  uint64_t v1 = sub_10000A38C(&qword_10036C090);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  long long v6 = &v14[-v5];
  uint64_t v7 = *(void *)v0;
  uint64_t v8 = *(void *)(v0 + 8);
  sub_100076648(v0 + 16, (uint64_t)v14);
  sub_100076648((uint64_t)v14, (uint64_t)v15);
  if (v15[1])
  {
    swift_bridgeObjectRetain();
    sub_100095C18((uint64_t)v14);
    UUID.init(uuidString:)();
    sub_10007661C((uint64_t)v14);
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v9) != 1)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v6, v4, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
      if (*(unsigned char *)(v0 + 40)) {
        goto LABEL_6;
      }
LABEL_8:
      uint64_t v12 = *(unsigned int *)(v0 + 36);
      goto LABEL_9;
    }
    sub_10000DB78((uint64_t)v4);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  if ((*(unsigned char *)(v0 + 40) & 1) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v12 = 0;
LABEL_9:
  sub_100095AA4();
  return sub_100095AE4(v7, v8, (uint64_t)v6, *(unsigned char *)(v0 + 32), v12);
}

unint64_t sub_100095AA4()
{
  unint64_t result = qword_100360620;
  if (!qword_100360620)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100360620);
  }
  return result;
}

id sub_100095AE4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (a2)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v8 = 0;
  }
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a3, 1, v9) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a3, v9);
  }
  id v12 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithCallUUID:v8 conversationUUID:isa isVideo:a4 & 1 service:a5];

  return v12;
}

uint64_t sub_100095C18(uint64_t a1)
{
  return a1;
}

uint64_t destroy for NearbySharingInteractionDisplayContext.ShareableContentStub()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CallActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CallActivity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  int v4 = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = v4;
  return a1;
}

__n128 initializeWithTake for SessionStartReason(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CallActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for CallActivity(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CallActivity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallActivity()
{
  return &type metadata for CallActivity;
}

uint64_t sub_100095EA0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444955556C6C6163 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001002B7150 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F656469567369 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65636976726573 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100096054@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000A38C(&qword_100360628);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  NSString v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100096304();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_10000CC5C((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v23 = 0;
    uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v11 = v10;
    uint64_t v18 = v9;
    char v22 = 1;
    swift_bridgeObjectRetain();
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v14 = v13;
    uint64_t v17 = v12;
    char v21 = 2;
    swift_bridgeObjectRetain();
    int v19 = KeyedDecodingContainer.decode(_:forKey:)();
    char v20 = 3;
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_10000CC5C((uint64_t)a1);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v18;
    *(void *)(a2 + 8) = v11;
    *(void *)(a2 + 16) = v17;
    *(void *)(a2 + 24) = v14;
    *(unsigned char *)(a2 + 32) = v19 & 1;
    *(_DWORD *)(a2 + 36) = v15;
    *(unsigned char *)(a2 + 40) = BYTE4(v15) & 1;
  }
  return result;
}

unint64_t sub_100096304()
{
  unint64_t result = qword_100360630;
  if (!qword_100360630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360630);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UXRegion(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CallActivity.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000964B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallActivity.CodingKeys()
{
  return &type metadata for CallActivity.CodingKeys;
}

unint64_t sub_1000964F0()
{
  unint64_t result = qword_100360640;
  if (!qword_100360640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360640);
  }
  return result;
}

unint64_t sub_100096548()
{
  unint64_t result = qword_100360648;
  if (!qword_100360648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360648);
  }
  return result;
}

unint64_t sub_1000965A0()
{
  unint64_t result = qword_100360650;
  if (!qword_100360650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100360650);
  }
  return result;
}

uint64_t sub_1000965F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [v1 uniqueIdentifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v7 = UUID.uuidString.getter();
  uint64_t v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v10 = [v1 deviceIdentifier];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  swift_bridgeObjectRetain();
  uint64_t v14 = sub_10008892C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v16 = *((void *)v14 + 2);
  unint64_t v15 = *((void *)v14 + 3);
  unint64_t v17 = v16 + 1;
  if (v16 >= v15 >> 1) {
    uint64_t v14 = sub_10008892C((char *)(v15 > 1), v16 + 1, 1, v14);
  }
  *((void *)v14 + 2) = v17;
  uint64_t v18 = &v14[16 * v16];
  *((void *)v18 + 4) = v7;
  *((void *)v18 + 5) = v9;
  unint64_t v19 = *((void *)v14 + 3);
  swift_bridgeObjectRetain();
  if (v17 >= v19 >> 1) {
    uint64_t v14 = sub_10008892C((char *)(v19 > 1), v16 + 2, 1, v14);
  }
  *((void *)v14 + 2) = v16 + 2;
  char v20 = &v14[16 * v17];
  *((void *)v20 + 4) = v11;
  *((void *)v20 + 5) = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = sub_100038508((uint64_t)v14);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_1000967EC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v10 = (char *)&v17 - v9;
  sub_10000D728(a1, (uint64_t)&v17, (uint64_t *)&unk_10036C0A0);
  if (v18)
  {
    sub_10000D7E8(&v17, (uint64_t)v19);
    uint64_t v11 = v20;
    uint64_t v12 = v21;
    sub_10000D6E4(v19, v20);
    (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
    id v13 = [v2 uniqueIdentifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    char v14 = static UUID.== infix(_:_:)();
    unint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
    sub_10000CC5C((uint64_t)v19);
  }
  else
  {
    sub_10000D78C((uint64_t)&v17, (uint64_t *)&unk_10036C0A0);
    char v14 = 0;
  }
  return v14 & 1;
}

BOOL sub_1000969AC()
{
  void v18[3] = sub_100019E10(0, &qword_1003650B0);
  v18[4] = &off_10031F600;
  v18[0] = v0;
  sub_10000D728((uint64_t)v18, (uint64_t)&v13, (uint64_t *)&unk_10036C0A0);
  if (v14)
  {
    sub_10000D7E8(&v13, (uint64_t)v15);
    uint64_t v1 = v16;
    uint64_t v2 = v17;
    sub_10000D6E4(v15, v16);
    uint64_t v3 = *(void *)(v2 + 8);
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
    id v5 = v0;
    uint64_t v6 = v4(v1, v3);
    uint64_t v7 = sub_1000D215C();
    uint64_t v8 = sub_1001C8154(v7, v6);
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void *)(v8 + 16);
    swift_release();
    BOOL v10 = v9 != 0;
    sub_10000CC5C((uint64_t)v15);
  }
  else
  {
    id v11 = v0;
    sub_10000D78C((uint64_t)&v13, (uint64_t *)&unk_10036C0A0);
    BOOL v10 = 0;
  }
  sub_10000D78C((uint64_t)v18, (uint64_t *)&unk_10036C0A0);
  return v10;
}

BOOL sub_100096AE8(uint64_t a1)
{
  sub_10000D728(a1, (uint64_t)v8, &qword_100360A68);
  uint64_t v1 = v9;
  if (v9)
  {
    uint64_t v2 = v10;
    sub_10000D6E4(v8, v9);
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 8) + 8))(v1);
    uint64_t v4 = sub_1000965F4();
    id v5 = (void *)sub_1001C8154(v4, v3);
    swift_bridgeObjectRelease();
    sub_10000CC5C((uint64_t)v8);
  }
  else
  {
    sub_10000D78C((uint64_t)v8, &qword_100360A68);
    id v5 = &_swiftEmptySetSingleton;
  }
  uint64_t v6 = v5[2];
  swift_bridgeObjectRelease();
  return v6 != 0;
}

uint64_t sub_100096BBC()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice);
  if (v1) {
    unint64_t v2 = 4 * ((unint64_t)[v1 relationship] & 1);
  }
  else {
    unint64_t v2 = 0;
  }
  unint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities);
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_7;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    return v2;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_19;
  }
LABEL_7:
  if (v4 >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v3 + 8 * v6 + 32);
      }
      uint64_t v8 = v7;
      ++v6;
      unsigned int v9 = [v7 type];

      uint64_t v10 = v2 | 2;
      if (v9 != 9) {
        uint64_t v10 = v2;
      }
      if (v9 - 3 >= 2) {
        unint64_t v2 = v10;
      }
      else {
        v2 |= 1uLL;
      }
    }
    while (v4 != v6);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

unint64_t sub_100096CE8(unint64_t a1, uint64_t a2)
{
  if (a1)
  {
    unint64_t v3 = a1;
    if (a2)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((sub_100272B80(v3, a2) & 1) == 0)
      {
        _StringGuts.grow(_:)(29);
        v4._object = (void *)0x80000001002B7300;
        v4._uint64_t countAndFlagsBits = 0xD000000000000017;
        String.append(_:)(v4);
        sub_10000A38C(&qword_100360A70);
        _print_unlocked<A, B>(_:_:)();
        v5._uint64_t countAndFlagsBits = 8236;
        v5._object = (void *)0xE200000000000000;
        String.append(_:)(v5);
        _print_unlocked<A, B>(_:_:)();
        sub_10001A050();
        swift_allocError();
        *(void *)uint64_t v6 = 0;
        *(void *)(v6 + 8) = 0xE000000000000000;
        *(unsigned char *)(v6 + 16) = 10;
        swift_willThrow();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    return a2;
  }
  return v3;
}

void *sub_100096E64(void *a1, void *a2, unint64_t *a3)
{
  if (a1)
  {
    Swift::String v4 = a1;
    if (a2)
    {
      sub_100019E10(0, a3);
      id v5 = v4;
      id v6 = a2;
      if ((static NSObject.== infix(_:_:)() & 1) == 0)
      {
        _StringGuts.grow(_:)(29);
        v9._object = (void *)0x80000001002B7300;
        v9._uint64_t countAndFlagsBits = 0xD000000000000017;
        String.append(_:)(v9);
        Swift::String v4 = &protocol witness table for DefaultStringInterpolation;
        _print_unlocked<A, B>(_:_:)();
        v10._uint64_t countAndFlagsBits = 8236;
        v10._object = (void *)0xE200000000000000;
        String.append(_:)(v10);
        _print_unlocked<A, B>(_:_:)();
        sub_10001A050();
        swift_allocError();
        *(void *)uint64_t v11 = 0;
        *(void *)(v11 + 8) = 0xE000000000000000;
        *(unsigned char *)(v11 + 16) = 10;
        swift_willThrow();
      }
    }
    else
    {
      id v8 = a1;
    }
  }
  else
  {
    id v7 = a2;
    return a2;
  }
  return v4;
}

uint64_t sub_100096FDC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10036C090);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  id v5 = &v44[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  id v7 = &v44[-v6];
  sub_10000A38C(&qword_10035D8E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028FDD0;
  if (([v1 isLocallyPaired] & 1) != 0
    || (id v9 = [v1 uniqueID]) == 0)
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    Swift::String v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  *(void *)(inited + 32) = v11;
  *(void *)(inited + 40) = v13;
  id v14 = [v1 uniqueIDOverride];
  if (v14)
  {
    unint64_t v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v18 = 0;
  }
  *(void *)(inited + 48) = v16;
  *(void *)(inited + 56) = v18;
  id v19 = [v1 nsuuid];
  if (v19)
  {
    uint64_t v20 = v19;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v5, 0, 1, v21);
  }
  else
  {
    uint64_t v21 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v5, 1, 1, v21);
  }
  sub_10001639C((uint64_t)v5, (uint64_t)v7, &qword_10036C090);
  type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48))(v7, 1, v21) == 1)
  {
    sub_10000D78C((uint64_t)v7, &qword_10036C090);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v23 = UUID.uuidString.getter();
    uint64_t v24 = v25;
    (*(void (**)(unsigned char *, uint64_t))(v22 + 8))(v7, v21);
  }
  *(void *)(inited + 64) = v23;
  *(void *)(inited + 72) = v24;
  uint64_t v26 = *(void *)(inited + 40);
  if (!v26)
  {
    uint64_t v28 = (char *)_swiftEmptyArrayStorage;
    uint64_t v32 = *(void *)(inited + 56);
    if (!v32) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  uint64_t v27 = *(void *)(inited + 32);
  swift_bridgeObjectRetain();
  uint64_t v28 = sub_10008892C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v30 = *((void *)v28 + 2);
  unint64_t v29 = *((void *)v28 + 3);
  if (v30 >= v29 >> 1) {
    uint64_t v28 = sub_10008892C((char *)(v29 > 1), v30 + 1, 1, v28);
  }
  *((void *)v28 + 2) = v30 + 1;
  uint64_t v31 = &v28[16 * v30];
  *((void *)v31 + 4) = v27;
  *((void *)v31 + 5) = v26;
  uint64_t v32 = *(void *)(inited + 56);
  if (v32)
  {
LABEL_20:
    uint64_t v33 = *(void *)(inited + 48);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = sub_10008892C(0, *((void *)v28 + 2) + 1, 1, v28);
    }
    unint64_t v35 = *((void *)v28 + 2);
    unint64_t v34 = *((void *)v28 + 3);
    if (v35 >= v34 >> 1) {
      uint64_t v28 = sub_10008892C((char *)(v34 > 1), v35 + 1, 1, v28);
    }
    *((void *)v28 + 2) = v35 + 1;
    uint64_t v36 = &v28[16 * v35];
    *((void *)v36 + 4) = v33;
    *((void *)v36 + 5) = v32;
  }
LABEL_25:
  uint64_t v37 = *(void *)(inited + 72);
  if (v37)
  {
    uint64_t v38 = *(void *)(inited + 64);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = sub_10008892C(0, *((void *)v28 + 2) + 1, 1, v28);
    }
    unint64_t v40 = *((void *)v28 + 2);
    unint64_t v39 = *((void *)v28 + 3);
    if (v40 >= v39 >> 1) {
      uint64_t v28 = sub_10008892C((char *)(v39 > 1), v40 + 1, 1, v28);
    }
    *((void *)v28 + 2) = v40 + 1;
    uint64_t v41 = &v28[16 * v40];
    *((void *)v41 + 4) = v38;
    *((void *)v41 + 5) = v37;
  }
  swift_bridgeObjectRelease();
  uint64_t v42 = sub_100038508((uint64_t)v28);
  swift_bridgeObjectRelease();
  return v42;
}

BOOL sub_100097424(uint64_t a1)
{
  sub_10000D728(a1, (uint64_t)&v9, (uint64_t *)&unk_10036C0A0);
  if (v10)
  {
    sub_10000D7E8(&v9, (uint64_t)v11);
    uint64_t v2 = v12;
    uint64_t v1 = v13;
    sub_10000D6E4(v11, v12);
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 8) + 8))(v2);
    uint64_t v4 = sub_100096FDC();
    uint64_t v5 = sub_1001C8154(v4, v3);
    swift_bridgeObjectRelease();
    uint64_t v6 = *(void *)(v5 + 16);
    swift_release();
    BOOL v7 = v6 != 0;
    sub_10000CC5C((uint64_t)v11);
  }
  else
  {
    sub_10000D78C((uint64_t)&v9, (uint64_t *)&unk_10036C0A0);
    return 0;
  }
  return v7;
}

uint64_t sub_100097504(uint64_t a1)
{
  sub_10000D728(a1, (uint64_t)&v9, &qword_100360A68);
  if (v10)
  {
    sub_10000D7E8(&v9, (uint64_t)v12);
    uint64_t v2 = v13;
    uint64_t v3 = v14;
    sub_10000D6E4(v12, v13);
    uint64_t v10 = sub_100019E10(0, &qword_100369900);
    uint64_t v11 = &off_100320750;
    *(void *)&long long v9 = v1;
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(uint64_t (**)(long long *, uint64_t, uint64_t))(v4 + 32);
    id v6 = v1;
    char v7 = v5(&v9, v2, v4);
    sub_10000D78C((uint64_t)&v9, &qword_10035B618);
    sub_10000CC5C((uint64_t)v12);
  }
  else
  {
    sub_10000D78C((uint64_t)&v9, &qword_100360A68);
    char v7 = 0;
  }
  return v7 & 1;
}

BOOL sub_1000975FC(unsigned int *a1, unsigned int *a2)
{
  return sub_10009ECE8(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32));
}

uint64_t sub_100097630()
{
  return sub_100098AAC();
}

uint64_t sub_100097644@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v87 = a1;
  uint64_t v3 = sub_10000A38C(&qword_10036C090);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v84 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v85 = (char *)&v82 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v86 = (char *)&v82 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v82 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  unint64_t v89 = (char *)&v82 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v82 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v90 = (char *)&v82 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v82 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v82 - v23;
  uint64_t v25 = OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice;
  uint64_t v26 = *(void **)(v2 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice);
  unint64_t v88 = (char *)&v82 - v23;
  if (!v26) {
    goto LABEL_7;
  }
  id v27 = v26;
  if (([v27 isLocallyPaired] & 1) != 0
    || (id v28 = [v27 uniqueID]) == 0)
  {

    goto LABEL_7;
  }
  unint64_t v29 = v28;
  uint64_t v83 = v12;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = type metadata accessor for UUID();
  uint64_t v31 = *(void **)(v30 - 8);
  uint64_t v32 = (unsigned int (*)(char *, uint64_t, uint64_t))v31[6];
  if (v32(v22, 1, v30) == 1)
  {
    sub_10000D78C((uint64_t)v22, &qword_10036C090);
    uint64_t v24 = v88;
    uint64_t v12 = v83;
LABEL_7:
    uint64_t v33 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v24, 1, 1, v33);
    goto LABEL_8;
  }
  uint64_t v78 = v88;
  uint64_t v82 = (void (*)(char *, char *, uint64_t))v31[4];
  v82(v88, v22, v30);
  unint64_t v79 = (void (*)(char *, void, uint64_t, uint64_t))v31[7];
  v79(v78, 0, 1, v30);
  unsigned int v80 = v32(v78, 1, v30);
  uint64_t v12 = v83;
  if (v80 != 1)
  {
    uint64_t v81 = v87;
    v82(v87, v88, v30);
    return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v79)(v81, 0, 1, v30);
  }
LABEL_8:
  unint64_t v34 = *(void **)(v2 + v25);
  if (!v34)
  {
LABEL_13:
    uint64_t v41 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v90, 1, 1, v41);
    goto LABEL_14;
  }
  id v35 = v34;
  id v36 = [v35 uniqueIDOverride];
  if (!v36)
  {

    goto LABEL_13;
  }
  uint64_t v37 = v36;
  uint64_t v83 = v12;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v38 = type metadata accessor for UUID();
  unint64_t v39 = *(void **)(v38 - 8);
  unint64_t v40 = (unsigned int (*)(char *, uint64_t, uint64_t))v39[6];
  if (v40(v17, 1, v38) == 1)
  {
    sub_10000D78C((uint64_t)v17, &qword_10036C090);
    uint64_t v12 = v83;
    goto LABEL_13;
  }
  uint64_t v64 = (void (*)(uint64_t, char *, uint64_t))v39[4];
  uint64_t v65 = (uint64_t)v90;
  v64((uint64_t)v90, v17, v38);
  uint64_t v66 = (void (*)(uint64_t, void, uint64_t, uint64_t))v39[7];
  v66(v65, 0, 1, v38);
  unsigned int v67 = v40((char *)v65, 1, v38);
  uint64_t v12 = v83;
  if (v67 != 1)
  {
    id v68 = v87;
    v64((uint64_t)v87, v90, v38);
    v66((uint64_t)v68, 0, 1, v38);
    uint64_t v62 = (uint64_t)v88;
    return sub_10000D78C(v62, &qword_10036C090);
  }
LABEL_14:
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  id v42 = v91;
  if (!v91) {
    goto LABEL_18;
  }
  id v43 = [v91 idsDeviceIdentifier];

  if (!v43) {
    goto LABEL_18;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v44 = type metadata accessor for UUID();
  id v45 = *(void **)(v44 - 8);
  id v46 = (unsigned int (*)(char *, uint64_t, uint64_t))v45[6];
  if (v46(v12, 1, v44) == 1)
  {
    sub_10000D78C((uint64_t)v12, &qword_10036C090);
LABEL_18:
    uint64_t v47 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v89, 1, 1, v47);
    goto LABEL_19;
  }
  long long v69 = (void (*)(uint64_t, char *, uint64_t))v45[4];
  uint64_t v70 = v12;
  uint64_t v71 = (uint64_t)v89;
  v69((uint64_t)v89, v70, v44);
  uint64_t v72 = (void (*)(uint64_t, void, uint64_t, uint64_t))v45[7];
  v72(v71, 0, 1, v44);
  if (v46((char *)v71, 1, v44) != 1)
  {
    uint64_t v73 = v87;
    v69((uint64_t)v87, v89, v44);
    v72((uint64_t)v73, 0, 1, v44);
    uint64_t v62 = (uint64_t)v88;
    goto LABEL_31;
  }
LABEL_19:
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  id v48 = v91;
  uint64_t v49 = (uint64_t)v86;
  if (!v91) {
    goto LABEL_23;
  }
  id v50 = [v91 idsDeviceIdentifier];

  if (!v50) {
    goto LABEL_23;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v51 = (uint64_t)v85;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v52 = type metadata accessor for UUID();
  uint64_t v53 = *(void **)(v52 - 8);
  unint64_t v54 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v53[6];
  if (v54(v51, 1, v52) == 1)
  {
    sub_10000D78C(v51, &qword_10036C090);
LABEL_23:
    uint64_t v55 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v49, 1, 1, v55);
    goto LABEL_24;
  }
  uint64_t v74 = (void (*)(uint64_t, uint64_t, uint64_t))v53[4];
  v74(v49, v51, v52);
  uint64_t v75 = (void (*)(uint64_t, void, uint64_t, uint64_t))v53[7];
  v75(v49, 0, 1, v52);
  if (v54(v49, 1, v52) != 1)
  {
    uint64_t v76 = v87;
    v74((uint64_t)v87, v49, v52);
    v75((uint64_t)v76, 0, 1, v52);
    goto LABEL_30;
  }
LABEL_24:
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  id v56 = v91;
  if (v91)
  {
    id v57 = [v91 idsDeviceID];

    if (v57)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v58 = (uint64_t)v84;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v59 = type metadata accessor for UUID();
      uint64_t v60 = *(void *)(v59 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59) != 1)
      {
        uint64_t v77 = v87;
        (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v87, v58, v59);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v77, 0, 1, v59);
        goto LABEL_29;
      }
      sub_10000D78C(v58, &qword_10036C090);
    }
  }
  uint64_t v61 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v87, 1, 1, v61);
LABEL_29:
  sub_10000D78C(v49, &qword_10036C090);
LABEL_30:
  uint64_t v62 = (uint64_t)v88;
  sub_10000D78C((uint64_t)v89, &qword_10036C090);
LABEL_31:
  sub_10000D78C((uint64_t)v90, &qword_10036C090);
  return sub_10000D78C(v62, &qword_10036C090);
}

uint64_t sub_100098144()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideName + 8))
  {
    uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideName);
  }
  else
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v6)
    {
      id v2 = [v6 name];
    }
    else
    {
      uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice);
      if (!v3 || (id v4 = [v3 name]) == 0)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        id v4 = [self localizedStringForKey:14];
      }
      id v2 = v4;
    }
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000983CC()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideModel + 8))
  {
    uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideModel);
    swift_bridgeObjectRetain();
    return v1;
  }
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice);
  if (v2)
  {
    id v3 = [v2 modelIdentifier];
    if (v3)
    {
      id v4 = v3;
LABEL_21:
      uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return v1;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v16)
  {
    id v4 = [v16 model];

    if (v4) {
      goto LABEL_21;
    }
  }
  unint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities);
  if (v5)
  {
    if (v5 >> 62)
    {
LABEL_31:
      swift_bridgeObjectRetain_n();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      if (v6)
      {
LABEL_11:
        uint64_t v7 = 4;
        while (1)
        {
          if ((v5 & 0xC000000000000001) != 0) {
            id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v8 = *(id *)(v5 + 8 * v7);
          }
          uint64_t v9 = v8;
          uint64_t v10 = v7 - 3;
          if (__OFADD__(v7 - 4, 1))
          {
            __break(1u);
            goto LABEL_31;
          }
          id v11 = [v8 model];
          if (v11) {
            break;
          }

          ++v7;
          if (v10 == v6) {
            goto LABEL_18;
          }
        }
        uint64_t v14 = v11;
        swift_bridgeObjectRelease_n();

        id v15 = [v9 model];
        if (!v15) {
          goto LABEL_19;
        }
        uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        return v1;
      }
    }
    else
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v6) {
        goto LABEL_11;
      }
    }
LABEL_18:
    swift_bridgeObjectRelease_n();
  }
LABEL_19:
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v16)
  {
    id v4 = [v16 model];

    if (v4) {
      goto LABEL_21;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v1 = (uint64_t)v16;
  if (v16)
  {
    id v13 = [v16 model];

    if (v13)
    {
      uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t sub_100098710()
{
  return sub_100098AAC();
}

uint64_t sub_100098724()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideMediaRouteID + 8))
  {
    uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideMediaRouteID);
LABEL_3:
    swift_bridgeObjectRetain();
    return v1;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v13)
  {
    id v3 = [v13 mediaRouteIdentifier];

    if (v3)
    {
      uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return v1;
    }
  }
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities)) {
    unint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities);
  }
  else {
    unint64_t v4 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v4 >> 62) {
    goto LABEL_24;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v5)
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (v4 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v4 + 8 * v6);
      id v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      id v10 = [v7 mediaRouteID];
      if (v10)
      {
        uint64_t v12 = v10;
        uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        swift_bridgeObjectRelease();

        return v1;
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_20:
  swift_bridgeObjectRelease();
  uint64_t v11 = v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_discoveredMediaRouteID;
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_discoveredMediaRouteID);
  if (*(void *)(v11 + 8)) {
    goto LABEL_3;
  }
  return v1;
}

uint64_t sub_100098928()
{
  return sub_100098AAC();
}

uint64_t sub_10009893C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v3[0])
  {
    id v0 = [v3[0] effectiveIdentifier];

    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    Hasher.init(_seed:)();
    sub_10009CB68((uint64_t)v3);
    v3[0] = (id)Hasher._finalize()();
    return dispatch thunk of CustomStringConvertible.description.getter();
  }
  return v2;
}

uint64_t sub_100098A98()
{
  return sub_100098AAC();
}

uint64_t sub_100098AAC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100098B18()
{
  v0._uint64_t countAndFlagsBits = sub_100098144();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 32;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v6 && (id v2 = [v6 identifier], v6, v2))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100089A9C(8);
    swift_bridgeObjectRelease();
  }
  else
  {
    Substring.init(_:)();
  }
  v3._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 60;
}

void *sub_100098C94()
{
  uint64_t v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v21)
  {
    uint64_t v2 = sub_1001A7C6C();

    sub_100104A08(v2);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v21)
  {
    uint64_t v3 = sub_1000965F4();

    sub_100104A08(v3);
  }
  Swift::String v4 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice);
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = sub_100096FDC();

    sub_100104A08(v6);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v21)
  {
    uint64_t v7 = sub_10024DF10();

    sub_100104A08(v7);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v21)
  {
    uint64_t v8 = sub_10024DF10();

    sub_100104A08(v8);
  }
  unint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities);
  if (!v9) {
    return &_swiftEmptySetSingleton;
  }
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_14;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    uint64_t v18 = _swiftEmptyArrayStorage[2];
    if (!v18)
    {
LABEL_29:
      swift_bridgeObjectRelease();
      return &_swiftEmptySetSingleton;
    }
LABEL_26:
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v18; ++i)
    {
      uint64_t v20 = swift_bridgeObjectRetain();
      sub_100104A08(v20);
    }
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  if (!v10) {
    goto LABEL_25;
  }
LABEL_14:
  uint64_t result = (void *)sub_1000B56A4(0, v10 & ~(v10 >> 63), 0);
  if ((v10 & 0x8000000000000000) == 0)
  {
    for (uint64_t j = 0; j != v10; ++j)
    {
      if ((v9 & 0xC000000000000001) != 0) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(v9 + 8 * j + 32);
      }
      uint64_t v14 = v13;
      uint64_t v15 = sub_1000D215C();

      unint64_t v17 = _swiftEmptyArrayStorage[2];
      unint64_t v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1) {
        sub_1000B56A4(v16 > 1, v17 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v17 + 1;
      _swiftEmptyArrayStorage[v17 + 4] = v15;
    }
    swift_bridgeObjectRelease();
    uint64_t v18 = _swiftEmptyArrayStorage[2];
    if (!v18) {
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t sub_100099014(void *a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6, uint64_t a7)
{
  id v50 = a6;
  uint64_t v51 = a7;
  id v48 = a4;
  uint64_t v49 = a5;
  id v46 = a2;
  uint64_t v47 = a3;
  id v45 = a1;
  uint64_t v44 = sub_10000A38C(&qword_10035E328);
  uint64_t v8 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_100360A40);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_10035E2F0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v7 + 16) = 0;
  *(_WORD *)(v7 + 20) = 256;
  uint64_t v19 = v7 + OBJC_IVAR____TtC17proximitycontrold8Identity__bluetoothDevice;
  id v52 = 0;
  sub_10000A38C(&qword_10035E308);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v19, v18, v15);
  uint64_t v20 = v7 + OBJC_IVAR____TtC17proximitycontrold8Identity__homekitAccessory;
  id v52 = 0;
  sub_10000A38C(&qword_1003606C0);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v20, v14, v11);
  uint64_t v21 = OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice;
  *(void *)(v7 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice) = 0;
  uint64_t v22 = (void *)(v7 + OBJC_IVAR____TtC17proximitycontrold8Identity_discoveredMediaRouteID);
  *uint64_t v22 = 0;
  v22[1] = 0;
  uint64_t v23 = (void *)(v7 + OBJC_IVAR____TtC17proximitycontrold8Identity_discoveredColorCode);
  *uint64_t v23 = 0;
  v23[1] = 0;
  uint64_t v24 = OBJC_IVAR____TtC17proximitycontrold8Identity_nearbyID;
  *(void *)(v7 + OBJC_IVAR____TtC17proximitycontrold8Identity_nearbyID) = 0;
  uint64_t v25 = v7 + OBJC_IVAR____TtC17proximitycontrold8Identity__rapportBTDevice;
  id v52 = 0;
  sub_10000A38C(&qword_10035E340);
  Published.init(initialValue:)();
  uint64_t v26 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v27 = v44;
  v26(v25, v10, v44);
  uint64_t v28 = OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities;
  *(void *)(v7 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities) = 0;
  uint64_t v29 = v7 + OBJC_IVAR____TtC17proximitycontrold8Identity__wifiDevice;
  id v52 = 0;
  Published.init(initialValue:)();
  v26(v29, v10, v27);
  uint64_t v30 = (void *)(v7 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideColorCode);
  *uint64_t v30 = 0;
  v30[1] = 0;
  uint64_t v31 = (void *)(v7 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideMediaRouteID);
  *uint64_t v31 = 0;
  v31[1] = 0;
  uint64_t v32 = (void *)(v7 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideModel);
  *uint64_t v32 = 0;
  v32[1] = 0;
  uint64_t v33 = (void *)(v7 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideName);
  *uint64_t v33 = 0;
  v33[1] = 0;
  *(unsigned char *)(v7 + OBJC_IVAR____TtC17proximitycontrold8Identity_enableModelBasedRangingCapabilities) = 0;
  uint64_t v34 = v7 + OBJC_IVAR____TtC17proximitycontrold8Identity_cachedDeviceAsset;
  *(void *)uint64_t v34 = 0;
  *(unsigned char *)(v34 + 8) = 1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v52 = v45;
  id v35 = v45;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  id v52 = v46;
  id v36 = v46;
  swift_retain();
  static Published.subscript.setter();
  uint64_t v37 = *(void **)(v7 + v21);
  uint64_t v38 = v47;
  *(void *)(v7 + v21) = v47;
  id v39 = v38;

  swift_getKeyPath();
  swift_getKeyPath();
  id v52 = v48;
  id v40 = v48;
  swift_retain();
  static Published.subscript.setter();
  *(void *)(v7 + v28) = v49;
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  id v52 = v50;
  swift_retain();
  static Published.subscript.setter();

  uint64_t v41 = *(void **)(v7 + v24);
  *(void *)(v7 + v24) = v51;

  return v7;
}

uint64_t sub_10009951C(uint64_t a1)
{
  return sub_10009992C(a1, (uint64_t)&unk_100293448, (uint64_t)&unk_100293470, (uint64_t)&_mh_execute_header);
}

uint64_t sub_100099534(uint64_t a1)
{
  return sub_10009992C(a1, (uint64_t)&unk_100293490, (uint64_t)&unk_1002934B8, 0x100000001);
}

uint64_t sub_10009954C(uint64_t a1)
{
  uint64_t v31 = a1;
  uint64_t v2 = sub_10000A38C(&qword_10035E328);
  uint64_t v29 = *(void *)(v2 - 8);
  uint64_t v30 = v2;
  __chkstk_darwin(v2);
  Swift::String v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_100360A40);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10035E2F0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 20) = 256;
  uint64_t v13 = v1 + OBJC_IVAR____TtC17proximitycontrold8Identity__bluetoothDevice;
  uint64_t v32 = 0;
  sub_10000A38C(&qword_10035E308);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v13, v12, v9);
  uint64_t v14 = v1 + OBJC_IVAR____TtC17proximitycontrold8Identity__homekitAccessory;
  uint64_t v32 = 0;
  sub_10000A38C(&qword_1003606C0);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v14, v8, v5);
  uint64_t v15 = OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice;
  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice) = 0;
  uint64_t v16 = (void *)(v1 + OBJC_IVAR____TtC17proximitycontrold8Identity_discoveredMediaRouteID);
  *uint64_t v16 = 0;
  v16[1] = 0;
  uint64_t v17 = (void *)(v1 + OBJC_IVAR____TtC17proximitycontrold8Identity_discoveredColorCode);
  *uint64_t v17 = 0;
  v17[1] = 0;
  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold8Identity_nearbyID) = 0;
  uint64_t v18 = v1 + OBJC_IVAR____TtC17proximitycontrold8Identity__rapportBTDevice;
  uint64_t v32 = 0;
  sub_10000A38C(&qword_10035E340);
  Published.init(initialValue:)();
  uint64_t v19 = v30;
  uint64_t v20 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 32);
  v20(v18, v4, v30);
  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities) = 0;
  uint64_t v21 = v1 + OBJC_IVAR____TtC17proximitycontrold8Identity__wifiDevice;
  uint64_t v32 = 0;
  Published.init(initialValue:)();
  v20(v21, v4, v19);
  uint64_t v22 = (void *)(v1 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideColorCode);
  *uint64_t v22 = 0;
  v22[1] = 0;
  uint64_t v23 = (void *)(v1 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideMediaRouteID);
  *uint64_t v23 = 0;
  v23[1] = 0;
  uint64_t v24 = (void *)(v1 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideModel);
  *uint64_t v24 = 0;
  v24[1] = 0;
  uint64_t v25 = (void *)(v1 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideName);
  *uint64_t v25 = 0;
  v25[1] = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold8Identity_enableModelBasedRangingCapabilities) = 0;
  uint64_t v26 = v1 + OBJC_IVAR____TtC17proximitycontrold8Identity_cachedDeviceAsset;
  *(void *)uint64_t v26 = 0;
  *(unsigned char *)(v26 + 8) = 1;
  uint64_t v27 = *(void **)(v1 + v15);
  *(void *)(v1 + v15) = v31;

  *(_DWORD *)(v1 + 16) = 2;
  *(_WORD *)(v1 + 20) = 1;
  return v1;
}

uint64_t sub_1000998F4(uint64_t a1)
{
  return sub_10009992C(a1, (uint64_t)&unk_100293520, (uint64_t)&unk_100293548, 0x100000005);
}

uint64_t sub_100099910(uint64_t a1)
{
  return sub_10009992C(a1, (uint64_t)&unk_1002934D8, (uint64_t)&unk_100293500, 0x100000003);
}

uint64_t sub_10009992C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a1;
  uint64_t v37 = a4;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v5 = sub_10000A38C(&qword_10035E328);
  uint64_t v32 = *(void *)(v5 - 8);
  uint64_t v33 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_100360A40);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_10035E2F0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v4 + 16) = 0;
  *(_WORD *)(v4 + 20) = 256;
  uint64_t v16 = v4 + OBJC_IVAR____TtC17proximitycontrold8Identity__bluetoothDevice;
  uint64_t v38 = 0;
  sub_10000A38C(&qword_10035E308);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v16, v15, v12);
  uint64_t v17 = v4 + OBJC_IVAR____TtC17proximitycontrold8Identity__homekitAccessory;
  uint64_t v38 = 0;
  sub_10000A38C(&qword_1003606C0);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v17, v11, v8);
  *(void *)(v4 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice) = 0;
  uint64_t v18 = (void *)(v4 + OBJC_IVAR____TtC17proximitycontrold8Identity_discoveredMediaRouteID);
  *uint64_t v18 = 0;
  v18[1] = 0;
  uint64_t v19 = (void *)(v4 + OBJC_IVAR____TtC17proximitycontrold8Identity_discoveredColorCode);
  *uint64_t v19 = 0;
  v19[1] = 0;
  *(void *)(v4 + OBJC_IVAR____TtC17proximitycontrold8Identity_nearbyID) = 0;
  uint64_t v20 = v4 + OBJC_IVAR____TtC17proximitycontrold8Identity__rapportBTDevice;
  uint64_t v38 = 0;
  sub_10000A38C(&qword_10035E340);
  Published.init(initialValue:)();
  uint64_t v21 = v33;
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v32 + 32);
  v22(v20, v7, v33);
  *(void *)(v4 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities) = 0;
  uint64_t v23 = v4 + OBJC_IVAR____TtC17proximitycontrold8Identity__wifiDevice;
  uint64_t v38 = 0;
  Published.init(initialValue:)();
  v22(v23, v7, v21);
  uint64_t v24 = (void *)(v4 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideColorCode);
  *uint64_t v24 = 0;
  v24[1] = 0;
  uint64_t v25 = (void *)(v4 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideMediaRouteID);
  *uint64_t v25 = 0;
  v25[1] = 0;
  uint64_t v26 = (void *)(v4 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideModel);
  *uint64_t v26 = 0;
  v26[1] = 0;
  uint64_t v27 = (void *)(v4 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideName);
  *uint64_t v27 = 0;
  v27[1] = 0;
  *(unsigned char *)(v4 + OBJC_IVAR____TtC17proximitycontrold8Identity_enableModelBasedRangingCapabilities) = 0;
  uint64_t v28 = v4 + OBJC_IVAR____TtC17proximitycontrold8Identity_cachedDeviceAsset;
  *(void *)uint64_t v28 = 0;
  *(unsigned char *)(v28 + 8) = 1;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v38 = v36;
  swift_retain();
  static Published.subscript.setter();
  int v29 = v37;
  *(unsigned char *)(v4 + 20) = BYTE4(v37);
  *(_DWORD *)(v4 + 16) = v29;
  *(unsigned char *)(v4 + 21) = 0;
  return v4;
}

uint64_t sub_100099D0C(void *a1)
{
  if (([a1 statusFlags] & 4) != 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v2 = a1;
    swift_retain();
    static Published.subscript.setter();
  }
  uint64_t result = (uint64_t)[a1 statusFlags];
  if ((result & 2) != 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v4 = a1;
    swift_retain();
    return static Published.subscript.setter();
  }
  return result;
}

uint64_t sub_100099DEC(uint64_t a1)
{
  uint64_t v3 = v1;
  type metadata accessor for Identity();
  uint64_t v5 = swift_allocObject();
  sub_100099014(0, 0, 0, 0, 0, 0, 0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v6 = v23;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v7 = sub_100096E64(v23, v23, (unint64_t *)&unk_100365C90);
  if (v2)
  {
    if (v23)
    {
      id v8 = v23;
      id v9 = v23;
      if ((sub_10009E8AC(v8, v9) & 1) == 0)
      {
        swift_willThrow();
        swift_release();

        return v5;
      }

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      id v9 = 0;
    }
  }
  else
  {
    uint64_t v10 = v7;

    id v9 = v23;
    uint64_t v6 = v10;
  }

  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v11 = sub_100096E64(v6, v6, &qword_1003650B0);

  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v24 = v11;
  swift_retain();
  static Published.subscript.setter();
  uint64_t v12 = *(void **)(v3 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice);
  uint64_t v13 = *(void **)(a1 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice);
  id v14 = v13;
  id v15 = v12;
  uint64_t v16 = sub_100096E64(v12, v13, &qword_100369900);

  uint64_t v17 = *(void **)(v5 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice);
  *(void *)(v5 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice) = v16;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v18 = sub_100096E64(v24, v24, &qword_10035E350);

  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100096E64(v18, v18, &qword_10035E350);

  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.setter();
  uint64_t v19 = *(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities);
  swift_bridgeObjectRetain();
  unint64_t v20 = swift_bridgeObjectRetain();
  unint64_t v21 = sub_100096CE8(v20, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v5 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities) = v21;
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10009A88C()
{
  if (!*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideColorCode + 8))
  {
    uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice);
    if (v2)
    {
      id v3 = v2;
      id v4 = [v3 enclosureColor];
      if (v4)
      {
        uint64_t v5 = v4;
        uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v7 = v6;
        swift_bridgeObjectRetain();

        _StringGuts.grow(_:)(24);
        uint64_t v8 = sub_100098B18();
        uint64_t v10 = v9;
        swift_bridgeObjectRelease();
        id v49 = (id)v8;
        uint64_t v51 = v10;
        v11._uint64_t countAndFlagsBits = 0x6F43726F6C6F4320;
        v11._object = (void *)0xEB000000003D6564;
        String.append(_:)(v11);
        v12._uint64_t countAndFlagsBits = v1;
        v12._object = v7;
        String.append(_:)(v12);
        swift_bridgeObjectRelease();
        unint64_t v13 = 0x4449206D6F726620;
        unint64_t v14 = 0xE900000000000053;
LABEL_14:
        String.append(_:)(*(Swift::String *)&v13);
        id v33 = sub_1001F6410();
        swift_bridgeObjectRetain();
        NSString v34 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v33 ulog:40 message:v34, v49, v51];
        swift_bridgeObjectRelease();

LABEL_15:
        goto LABEL_16;
      }
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    id v3 = v48;
    if (v48)
    {
      id v15 = [v48 deviceColor];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;
        swift_bridgeObjectRetain();

        _StringGuts.grow(_:)(28);
        uint64_t v19 = sub_100098B18();
        uint64_t v21 = v20;
        swift_bridgeObjectRelease();
        id v49 = (id)v19;
        uint64_t v51 = v21;
        v22._uint64_t countAndFlagsBits = 0x6F43726F6C6F4320;
        v22._object = (void *)0xEB000000003D6564;
        String.append(_:)(v22);
        v23._uint64_t countAndFlagsBits = v1;
        v23._object = v18;
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        unint64_t v13 = 0x6152206D6F726620;
        unint64_t v14 = 0xED000074726F7070;
        goto LABEL_14;
      }
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    id v3 = v48;
    if (v48)
    {
      id v24 = [v48 deviceColor];
      if (v24)
      {
        uint64_t v25 = v24;
        uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v27 = v26;
        swift_bridgeObjectRetain();

        _StringGuts.grow(_:)(31);
        uint64_t v28 = sub_100098B18();
        uint64_t v30 = v29;
        swift_bridgeObjectRelease();
        id v49 = (id)v28;
        uint64_t v51 = v30;
        v31._uint64_t countAndFlagsBits = 0x6F43726F6C6F4320;
        v31._object = (void *)0xEB000000003D6564;
        String.append(_:)(v31);
        v32._uint64_t countAndFlagsBits = v1;
        v32._object = v27;
        String.append(_:)(v32);
        swift_bridgeObjectRelease();
        unint64_t v14 = 0x80000001002B74B0;
        unint64_t v13 = 0xD000000000000010;
        goto LABEL_14;
      }
    }
    uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_discoveredColorCode);
    uint64_t v36 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_discoveredColorCode + 8);
    if (!v36)
    {
      _StringGuts.grow(_:)(51);
      v44._uint64_t countAndFlagsBits = sub_100098B18();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._uint64_t countAndFlagsBits = 0xD000000000000031;
      v45._object = (void *)0x80000001002B7450;
      String.append(_:)(v45);
      id v46 = sub_1001F6410();
      swift_bridgeObjectRetain();
      NSString v47 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v46 ulog:v47 message:0xE000000000000000];
      swift_bridgeObjectRelease();

      goto LABEL_16;
    }
    swift_bridgeObjectRetain_n();
    _StringGuts.grow(_:)(39);
    uint64_t v37 = sub_100098B18();
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    id v50 = (id)v37;
    v40._uint64_t countAndFlagsBits = 0x6F43726F6C6F4320;
    v40._object = (void *)0xEB000000003D6564;
    String.append(_:)(v40);
    v41._uint64_t countAndFlagsBits = v1;
    v41._object = v36;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._uint64_t countAndFlagsBits = 0xD000000000000018;
    v42._object = (void *)0x80000001002B7490;
    String.append(_:)(v42);
    id v43 = sub_1001F6410();
    swift_bridgeObjectRetain();
    NSString v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v43 ulog:40 message:v34, v50, v39];
    swift_bridgeObjectRelease();

    goto LABEL_15;
  }
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold8Identity_overrideColorCode);
LABEL_16:
  swift_bridgeObjectRetain();
  return v1;
}