unint64_t sub_100142BAC()
{
  unint64_t result;

  result = qword_100368570;
  if (!qword_100368570)
  {
    result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368570);
  }
  return result;
}

void *sub_100142C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  v4 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v5 = _swiftEmptyArrayStorage;
  do
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v7 = *v4;
      swift_bridgeObjectRetain();
      unint64_t v8 = sub_100269CBC(v6, v7);
      if (v9)
      {
        uint64_t v10 = *(void *)(*(void *)(a2 + 56) + 8 * v8);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v5 = sub_1000894A4(0, v5[2] + 1, 1, v5);
        }
        unint64_t v12 = v5[2];
        unint64_t v11 = v5[3];
        if (v12 >= v11 >> 1) {
          v5 = sub_1000894A4((void *)(v11 > 1), v12 + 1, 1, v5);
        }
        v5[2] = v12 + 1;
        v5[v12 + 4] = v10;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    v4 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

void *sub_100142D34(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1000B54DC(0, v2, 0);
    uint64_t v5 = *(void *)(type metadata accessor for Date() - 8);
    uint64_t v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    id v17 = *(id *)(a2 + 56);
    uint64_t v7 = *(void *)(v5 + 72);
    do
    {
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      id v9 = [v17 stringFromDate:isa];

      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_1000B54DC(v13 > 1, v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
      v6 += v7;
      --v2;
    }
    while (v2);
  }
  return _swiftEmptyArrayStorage;
}

ValueMetadata *type metadata accessor for FeatureUsageOverTime.DaysOutOfRangeError()
{
  return &type metadata for FeatureUsageOverTime.DaysOutOfRangeError;
}

uint64_t sub_100142EBC(void *a1, float a2, float a3)
{
  uint64_t v7 = sub_10000A38C(&qword_1003685E8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100144470();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    *(float *)&v12[2] = a2;
    *(float *)&v12[3] = a3;
    char v13 = 1;
    sub_10000A38C(&qword_1003685D8);
    sub_1001444C4(&qword_1003685F0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int sub_100143080()
{
  return Hasher._finalize()();
}

uint64_t sub_100143108()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10014317C()
{
  return Hasher._finalize()();
}

uint64_t sub_100143200@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10031E6C0, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100143260(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6F69746163756465;
  if (*v1) {
    uint64_t v2 = 0x746C7561666564;
  }
  unint64_t v3 = 0xE90000000000006ELL;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1001432A4(void *a1@<X8>)
{
  *a1 = &off_10031E670;
}

uint64_t sub_1001432B4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100143314()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100143364(char *a1, char *a2)
{
  return sub_10005C720(*a1, *a2);
}

uint64_t sub_100143370()
{
  if (*v0) {
    return 0x65676E6172;
  }
  else {
    return 25705;
  }
}

uint64_t sub_10014339C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100144158(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001433C4(uint64_t a1)
{
  unint64_t v2 = sub_100144470();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100143400(uint64_t a1)
{
  unint64_t v2 = sub_100144470();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10014343C(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v6 = sub_10014422C(a1);
  if (!v2)
  {
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(float *)(a2 + 16) = v6;
    *(_DWORD *)(a2 + 20) = v7;
  }
}

uint64_t sub_10014346C(void *a1)
{
  return sub_100142EBC(a1, *(float *)(v1 + 16), *(float *)(v1 + 20));
}

uint64_t sub_10014348C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100143498(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_100368590);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100143FF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_10000A38C(&qword_1003685A0);
  sub_100144760(&qword_1003685A8, (void (*)(void))sub_10014404C);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_100143620()
{
  return 0xD000000000000011;
}

uint64_t sub_10014363C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100144528(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100143668(uint64_t a1)
{
  unint64_t v2 = sub_100143FF8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001436A4(uint64_t a1)
{
  unint64_t v2 = sub_100143FF8();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1001436E0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1001445B0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10014370C(void *a1)
{
  return sub_100143498(a1, *v1);
}

unint64_t sub_100143728()
{
  unint64_t result = sub_100143748();
  qword_1003AC8D0 = result;
  return result;
}

unint64_t sub_100143748()
{
  unint64_t v2 = sub_100269488((uint64_t)_swiftEmptyArrayStorage);
  char v1 = 0;
  sub_1001437FC(&v2, &v1, (uint64_t)&off_10031E710);
  char v1 = 1;
  sub_1001437FC(&v2, &v1, (uint64_t)&off_10031E710);
  char v1 = 2;
  sub_1001437FC(&v2, &v1, (uint64_t)&off_10031E710);
  return v2;
}

uint64_t sub_1001437FC(void *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v3 = 0x746C7561666564;
  int v4 = *a2;
  uint64_t v5 = 0x656772616CLL;
  if (v4 != 1) {
    uint64_t v5 = 0x726568746FLL;
  }
  if (*a2) {
    uint64_t v3 = v5;
  }
  uint64_t v52 = v3;
  if (*a2) {
    uint64_t v6 = 0xE500000000000000;
  }
  else {
    uint64_t v6 = 0xE700000000000000;
  }
  uint64_t v9 = (void *)sub_1002695AC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v54 = *(void *)(a3 + 16);
  if (!v54)
  {
LABEL_53:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v55 = *a1;
    *a1 = 0x8000000000000000;
    sub_100265778((uint64_t)v9, v52, v6, isUniquelyReferenced_nonNull_native);
    *a1 = v55;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v50 = v6;
  v51 = a1;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  uint64_t v53 = a3;
  while (1)
  {
    if (*(unsigned char *)(a3 + v10 + 32))
    {
      if (v4)
      {
        if (v4 == 1)
        {
          if (qword_10035A520 != -1) {
            swift_once();
          }
          uint64_t v12 = qword_1003AC750;
          id v13 = *(id *)(qword_1003AC750 + 1656);
          float v14 = sub_1000FF7A8();

          id v15 = *(id *)(v12 + 1728);
          float v16 = sub_1000FF7A8();

          if (v14 > v16) {
            goto LABEL_56;
          }
        }
        else
        {
          if (qword_10035A520 != -1) {
            swift_once();
          }
          uint64_t v26 = qword_1003AC750;
          id v27 = *(id *)(qword_1003AC750 + 1664);
          float v14 = sub_1000FF7A8();

          id v28 = *(id *)(v26 + 1736);
          float v16 = sub_1000FF7A8();

          if (v14 > v16) {
            goto LABEL_60;
          }
        }
      }
      else
      {
        if (qword_10035A520 != -1) {
          swift_once();
        }
        uint64_t v20 = qword_1003AC750;
        id v21 = *(id *)(qword_1003AC750 + 1648);
        float v14 = sub_1000FF7A8();

        id v22 = *(id *)(v20 + 1720);
        float v16 = sub_1000FF7A8();

        if (v14 > v16) {
          goto LABEL_58;
        }
      }
      uint64_t v29 = 0xE700000000000000;
      uint64_t v30 = 0x746C7561666564;
    }
    else
    {
      if (v4)
      {
        if (v4 == 1)
        {
          if (qword_10035A520 != -1) {
            swift_once();
          }
          uint64_t v17 = qword_1003AC750;
          id v18 = *(id *)(qword_1003AC750 + 1656);
          float v14 = sub_1000FF7A8();

          id v19 = *(id *)(v17 + 1640);
          float v16 = sub_1000FF7A8();

          if (v14 > v16) {
            goto LABEL_57;
          }
        }
        else
        {
          if (qword_10035A520 != -1) {
            swift_once();
          }
          uint64_t v31 = qword_1003AC750;
          id v32 = *(id *)(qword_1003AC750 + 1664);
          float v14 = sub_1000FF7A8();

          id v33 = *(id *)(v31 + 1640);
          float v16 = sub_1000FF7A8();

          if (v14 > v16) {
            goto LABEL_61;
          }
        }
      }
      else
      {
        if (qword_10035A520 != -1) {
          swift_once();
        }
        uint64_t v23 = qword_1003AC750;
        id v24 = *(id *)(qword_1003AC750 + 1648);
        float v14 = sub_1000FF7A8();

        id v25 = *(id *)(v23 + 1640);
        float v16 = sub_1000FF7A8();

        if (v14 > v16) {
          goto LABEL_59;
        }
      }
      uint64_t v30 = 0x6F69746163756465;
      uint64_t v29 = 0xE90000000000006ELL;
    }
    char v34 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v36 = sub_100269CBC(v30, v29);
    uint64_t v37 = v9[2];
    BOOL v38 = (v35 & 1) == 0;
    uint64_t v39 = v37 + v38;
    if (__OFADD__(v37, v38)) {
      break;
    }
    char v40 = v35;
    if (v9[3] >= v39)
    {
      if (v34)
      {
        if (v35) {
          goto LABEL_10;
        }
      }
      else
      {
        sub_1000590B4();
        if (v40) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      sub_100055AA8(v39, v34);
      unint64_t v41 = sub_100269CBC(v30, v29);
      if ((v40 & 1) != (v42 & 1)) {
        goto LABEL_62;
      }
      unint64_t v36 = v41;
      if (v40)
      {
LABEL_10:
        uint64_t v11 = v9[7] + 24 * v36;
        swift_bridgeObjectRelease();
        *(void *)uint64_t v11 = v30;
        *(void *)(v11 + 8) = v29;
        *(float *)(v11 + 16) = v14;
        *(float *)(v11 + 20) = v16;
        goto LABEL_11;
      }
    }
    v9[(v36 >> 6) + 8] |= 1 << v36;
    v43 = (uint64_t *)(v9[6] + 16 * v36);
    uint64_t *v43 = v30;
    v43[1] = v29;
    uint64_t v44 = v9[7] + 24 * v36;
    *(void *)uint64_t v44 = v30;
    *(void *)(v44 + 8) = v29;
    *(float *)(v44 + 16) = v14;
    *(float *)(v44 + 20) = v16;
    uint64_t v45 = v9[2];
    BOOL v46 = __OFADD__(v45, 1);
    uint64_t v47 = v45 + 1;
    if (v46) {
      goto LABEL_55;
    }
    void v9[2] = v47;
    swift_bridgeObjectRetain();
LABEL_11:
    ++v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a3 = v53;
    if (v54 == v10)
    {
      swift_bridgeObjectRelease();
      a1 = v51;
      uint64_t v6 = v50;
      goto LABEL_53;
    }
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_100143DA0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HintProgressCase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

void *assignWithTake for HintProgressCase(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for HintProgressCase(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HintProgressCase(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HintProgressCase()
{
  return &type metadata for HintProgressCase;
}

ValueMetadata *type metadata accessor for HintProgressConfiguration()
{
  return &type metadata for HintProgressConfiguration;
}

ValueMetadata *type metadata accessor for HintProgressRange()
{
  return &type metadata for HintProgressRange;
}

unint64_t sub_100143F38()
{
  unint64_t result = qword_100368578;
  if (!qword_100368578)
  {
    sub_10000A3D0(&qword_100368580);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368578);
  }
  return result;
}

unint64_t sub_100143F98()
{
  unint64_t result = qword_100368588;
  if (!qword_100368588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368588);
  }
  return result;
}

void *sub_100143FEC()
{
  return &protocol witness table for String;
}

unint64_t sub_100143FF8()
{
  unint64_t result = qword_100368598;
  if (!qword_100368598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368598);
  }
  return result;
}

uint64_t sub_10014404C()
{
  return sub_100144088(&qword_1003685B0, (void (*)(void))sub_100144104);
}

uint64_t sub_100144088(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000A3D0(&qword_1003685B8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100144104()
{
  unint64_t result = qword_1003685C0;
  if (!qword_1003685C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003685C0);
  }
  return result;
}

uint64_t sub_100144158(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

float sub_10014422C(void *a1)
{
  uint64_t v4 = sub_10000A38C(&qword_1003685C8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D6E4(a1, a1[3]);
  sub_100144470();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000CC5C((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    sub_10000A38C(&qword_1003685D8);
    v9[3] = 1;
    sub_1001444C4(&qword_1003685E0);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    float v2 = v10;
    sub_10000CC5C((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v2;
}

unint64_t sub_100144470()
{
  unint64_t result = qword_1003685D0;
  if (!qword_1003685D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003685D0);
  }
  return result;
}

uint64_t sub_1001444C4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000A3D0(&qword_1003685D8);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100144528(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001002BFF00)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void *sub_1001445B0(void *a1)
{
  uint64_t v3 = sub_10000A38C(&qword_1003685F8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v7 = sub_10000D6E4(a1, a1[3]);
  sub_100143FF8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000CC5C((uint64_t)a1);
  }
  else
  {
    sub_10000A38C(&qword_1003685A0);
    sub_100144760(&qword_100368600, (void (*)(void))sub_1001447DC);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    int v7 = (void *)v9[1];
    sub_10000CC5C((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_100144760(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000A3D0(&qword_1003685A0);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001447DC()
{
  return sub_100144088(&qword_100368608, (void (*)(void))sub_100144818);
}

unint64_t sub_100144818()
{
  unint64_t result = qword_100368610;
  if (!qword_100368610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368610);
  }
  return result;
}

unint64_t sub_10014486C()
{
  unint64_t result = qword_100368618;
  if (!qword_100368618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368618);
  }
  return result;
}

unsigned char *_s17proximitycontrold17HintProgressRangeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10014498CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HintProgressCase.CodingKeys()
{
  return &type metadata for HintProgressCase.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for HintProgressConfiguration.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100144A60);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for HintProgressConfiguration.CodingKeys()
{
  return &type metadata for HintProgressConfiguration.CodingKeys;
}

unint64_t sub_100144A9C()
{
  unint64_t result = qword_100368620;
  if (!qword_100368620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368620);
  }
  return result;
}

unint64_t sub_100144AF4()
{
  unint64_t result = qword_100368628;
  if (!qword_100368628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368628);
  }
  return result;
}

unint64_t sub_100144B4C()
{
  unint64_t result = qword_100368630;
  if (!qword_100368630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368630);
  }
  return result;
}

unint64_t sub_100144BA4()
{
  unint64_t result = qword_100368638;
  if (!qword_100368638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368638);
  }
  return result;
}

unint64_t sub_100144BFC()
{
  unint64_t result = qword_100368640;
  if (!qword_100368640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368640);
  }
  return result;
}

unint64_t sub_100144C54()
{
  unint64_t result = qword_100368648;
  if (!qword_100368648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368648);
  }
  return result;
}

uint64_t sub_100144CA8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100144D14()
{
  uint64_t v1 = qword_100368660;
  if (*(void *)(v0 + qword_100368660))
  {
    uint64_t v2 = *(void *)(v0 + qword_100368660);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for XPCLink();
    type metadata accessor for PassthroughSubject();
    uint64_t v2 = PassthroughSubject.__allocating_init()();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

id sub_100144DF4()
{
  uint64_t v1 = (objc_super *)(swift_isaMask & *v0);
  unsigned int v6 = v0;
  objc_super v2 = v1[6];
  v5[1] = v1[5];
  v5[2] = v2;
  v5[3] = v1[7];
  uint64_t v3 = (objc_class *)type metadata accessor for XPCLinkServer();
  sub_10016ADD8(0x74696E696544, (void *)0xE600000000000000, 0, (uint64_t)v3, (uint64_t)&off_100329AA0);
  v5[0].receiver = v0;
  v5[0].super_class = v3;
  return [(objc_super *)v5 dealloc];
}

id sub_100144EB8(void *a1)
{
  id v1 = a1;
  return sub_100144DF4();
}

uint64_t sub_100144EE0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100144F60(void *a1, void *a2)
{
  uint64_t v3 = v2;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  id v6 = [a1 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._object = (void *)0x80000001002BCF40;
  v11._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v11);
  id v12 = [a2 description];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = v14;

  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  uint64_t v27 = type metadata accessor for XPCLinkServer();
  sub_10016ADD8(0xD000000000000031, (void *)0x80000001002BCF00, 0, v27, (uint64_t)&off_100329AA0);
  swift_bridgeObjectRelease();
  sub_1000160DC();
  if (static NSObject.== infix(_:_:)())
  {
    if (sub_1000B72CC(1, a2))
    {
      sub_100144D14();
      type metadata accessor for XPCLink();
      uint64_t v17 = v3 + qword_100368658;
      uint64_t v18 = *(void *)(v3 + qword_100368658);
      id v19 = *(void **)(v17 + 8);
      swift_bridgeObjectRetain();
      id v20 = a2;
      sub_10007ACB0(a2, v18, v19);
      PassthroughSubject.send(_:)();
      swift_release();
      swift_release();
      return 1;
    }
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    sub_10016AECC(90, 0xD000000000000034, (void *)0x80000001002BCF90, 0, v27, (uint64_t)&off_100329AA0);
  }
  else
  {
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    id v22 = [a1 description];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v25 = v24;

    v26._countAndFlagsBits = v23;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    sub_10016AECC(60, 0xD00000000000002ELL, (void *)0x80000001002BCF60, 0, v27, (uint64_t)&off_100329AA0);
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_100145340(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  char v9 = sub_100144F60(v6, v7);

  return v9 & 1;
}

id sub_1001453A4(void *a1)
{
  id v1 = a1;
  sub_10014540C();

  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v2;
}

uint64_t sub_10014540C()
{
  uint64_t ObjectType = swift_getObjectType();
  NSString v2 = (_OWORD *)(swift_isaMask & *v0);
  long long v3 = v2[6];
  long long v8 = v2[5];
  long long v9 = v3;
  long long v10 = v2[7];
  *((void *)&v9 + 1) = type metadata accessor for XPCLinkServer();
  *(void *)&long long v8 = v0;
  unsigned int v4 = v0;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v6 = sub_1000B4700(&v8, ObjectType, WitnessTable);
  sub_10000CC5C((uint64_t)&v8);
  return v6;
}

void sub_1001454EC()
{
}

uint64_t type metadata accessor for XPCLinkServer()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100145598(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1001455D4()
{
}

unint64_t sub_100145604()
{
  return 0xD000000000000032;
}

unint64_t sub_100145620()
{
  return sub_100268E80((uint64_t)_swiftEmptyArrayStorage);
}

ValueMetadata *type metadata accessor for ShareableContentRequest()
{
  return &type metadata for ShareableContentRequest;
}

void *sub_100145660(uint64_t a1, uint64_t a2)
{
  long long v3 = v2;
  swift_weakInit();
  id v6 = objc_allocWithZone((Class)CULogHandle);
  NSString v7 = String._bridgeToObjectiveC()();
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v6 initWithSubsystem:v7 category:v8];

  v3[5] = v9;
  v3[2] = a2;
  swift_weakAssign();
  v3[3] = a1;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  id v11 = objc_allocWithZone((Class)CULogHandle);
  NSString v12 = String._bridgeToObjectiveC()();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v11 initWithSubsystem:v12 category:v13];
  swift_release();

  id v15 = (void *)v3[5];
  v3[5] = v14;

  return v3;
}

uint64_t sub_100145848()
{
  swift_bridgeObjectRelease();
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for XPCSubscriber()
{
  return self;
}

uint64_t sub_1001458B4()
{
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v5, "XPCSubscriber-");
  HIBYTE(v5[1]) = -18;
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  uint64_t result = v5[0];
  if (*(void *)(v0 + 16))
  {
    v3._countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 32;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    return v5[0];
  }
  return result;
}

uint64_t sub_1001459C8()
{
  return sub_1001458B4();
}

uint64_t destroy for CodableError()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CodableError(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CodableError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CodableError(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableError()
{
  return &type metadata for CodableError;
}

uint64_t sub_100145C30(void *a1)
{
  uint64_t v3 = sub_10000A38C(&qword_100368808);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D6E4(a1, a1[3]);
  sub_1001468BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_100145DE0()
{
  unint64_t result = 0x646F43726F727265;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6D6F44726F727265;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100145E88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100146428(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100145EB0(uint64_t a1)
{
  unint64_t v2 = sub_1001468BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100145EEC(uint64_t a1)
{
  unint64_t v2 = sub_1001468BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100145F28@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1001465FC(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100145F78(void *a1)
{
  return sub_100145C30(a1);
}

uint64_t sub_100145F94()
{
  return *(void *)v0;
}

uint64_t sub_100145FA0(uint64_t a1)
{
  unint64_t v2 = sub_100146910();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100145FDC(uint64_t a1)
{
  unint64_t v2 = sub_100146910();

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100146018(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  void v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return sub_100146078(v5, v7) & 1;
}

uint64_t sub_100146078(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  BOOL v4 = a1[1] == a2[1] && a1[2] == a2[2];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = a1[3] == a2[3] && a1[4] == a2[4];
    if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
    {
      uint64_t v9 = a1[6];
      uint64_t v10 = a2[6];
      if (v9)
      {
        if (v10 && (a1[5] == a2[5] && v9 == v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
          return 1;
        }
      }
      else if (!v10)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

void sub_100146144(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)&v25[0] = a1;
  swift_errorRetain();
  sub_10000A38C((uint64_t *)&unk_100365D60);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    id v4 = (id)v28[0];
    uint64_t v5 = v28[1];
    uint64_t v6 = v28[2];
    uint64_t v7 = v29;
    uint64_t v8 = v30;
    uint64_t v9 = v31;
    uint64_t v10 = v32;
  }
  else
  {
    uint64_t v27 = a1;
    swift_errorRetain();
    sub_10000A38C(&qword_1003687E8);
    if (swift_dynamicCast())
    {
      sub_10000D7E8(v25, (uint64_t)v28);
      id v11 = (void *)_convertErrorToNSError(_:)();
      id v24 = [v11 code];
      id v12 = [v11 domain];
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v13;

      sub_10000D6E4(v28, v29);
      uint64_t v7 = Error.localizedDescription.getter();
      uint64_t v8 = v14;
      sub_10000D6E4(v28, v29);
      uint64_t v9 = dispatch thunk of LocalizedError.failureReason.getter();
      uint64_t v10 = v15;
      swift_errorRelease();

      sub_10000CC5C((uint64_t)v28);
    }
    else
    {
      uint64_t v26 = 0;
      memset(v25, 0, sizeof(v25));
      sub_1001463C8((uint64_t)v25);
      Swift::String v16 = (void *)_convertErrorToNSError(_:)();
      id v24 = [v16 code];
      id v17 = [v16 domain];
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v18;

      id v19 = [v16 localizedDescription];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v20;

      id v21 = [v16 localizedFailureReason];
      if (v21)
      {
        id v22 = v21;
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v10 = v23;
        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();

        uint64_t v10 = 0;
        uint64_t v9 = 0;
      }
    }
    id v4 = v24;
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
}

uint64_t sub_1001463C8(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_1003687F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100146428(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x646F43726F727265 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D6F44726F727265 && a2 == 0xEB000000006E6961 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001002C0040 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001002C0060)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1001465FC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000A38C(&qword_1003687F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1001468BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000CC5C((uint64_t)a1);
  }
  char v30 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v29 = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v26 = v10;
  char v28 = 2;
  swift_bridgeObjectRetain();
  uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v25 = v13;
  char v27 = 3;
  swift_bridgeObjectRetain();
  uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v16 = v15;
  id v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v23 = v14;
  v17(v8, v5);
  swift_bridgeObjectRetain();
  sub_10000CC5C((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v18 = v25;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v20 = v26;
  *a2 = v9;
  a2[1] = v20;
  uint64_t v21 = v24;
  a2[2] = v12;
  a2[3] = v21;
  uint64_t v22 = v23;
  a2[4] = v18;
  a2[5] = v22;
  a2[6] = v16;
  return result;
}

unint64_t sub_1001468BC()
{
  unint64_t result = qword_100368800;
  if (!qword_100368800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368800);
  }
  return result;
}

unint64_t sub_100146910()
{
  unint64_t result = qword_100368810;
  if (!qword_100368810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368810);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CodableError.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100146A30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableError.CodingKeys()
{
  return &type metadata for CodableError.CodingKeys;
}

unint64_t sub_100146A6C()
{
  unint64_t result = qword_100368818;
  if (!qword_100368818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368818);
  }
  return result;
}

unint64_t sub_100146AC4()
{
  unint64_t result = qword_100368820;
  if (!qword_100368820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368820);
  }
  return result;
}

unint64_t sub_100146B1C()
{
  unint64_t result = qword_100368828;
  if (!qword_100368828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368828);
  }
  return result;
}

void destroy for MediaTransferStatus(void **a1)
{
  uint64_t v1 = *a1;
  int v2 = -1;
  if ((unint64_t)v1 < 0xFFFFFFFF) {
    int v2 = (int)v1;
  }
  if (v2 - 1 < 0) {
}
  }

void *_s17proximitycontrold19MediaTransferStatusOwCP_0(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  LODWORD(v4) = -1;
  if (*(void *)a2 < 0xFFFFFFFFuLL) {
    unsigned int v4 = *(void **)a2;
  }
  if ((int)v4 - 1 < 0)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *a1 = v3;
    a1[1] = v5;
    id v6 = v3;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

uint64_t assignWithCopy for MediaTransferStatus(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a1;
  LODWORD(v5) = -1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v6) = -1;
  }
  else {
    id v6 = *(void **)a1;
  }
  int v7 = v6 - 1;
  uint64_t v8 = *(void **)a2;
  if (*(void *)a2 < 0xFFFFFFFFuLL) {
    uint64_t v5 = *(void **)a2;
  }
  int v9 = v5 - 1;
  if (v7 < 0)
  {
    if (v9 < 0)
    {
      *(void *)a1 = v8;
      id v12 = v8;

      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      return a1;
    }

    goto LABEL_11;
  }
  if ((v9 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  id v10 = v8;
  return a1;
}

uint64_t assignWithTake for MediaTransferStatus(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *(void **)a1;
  LODWORD(v5) = -1;
  if (*(void *)a1 < 0xFFFFFFFFuLL) {
    uint64_t v5 = *(void **)a1;
  }
  if ((int)v5 - 1 < 0)
  {
    LODWORD(v6) = -1;
    if ((unint64_t)*a2 < 0xFFFFFFFF) {
      uint64_t v6 = *a2;
    }
    if ((int)v6 - 1 < 0)
    {
      *(void *)a1 = *a2;

      *(void *)(a1 + 8) = a2[1];
      return a1;
    }
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaTransferStatus(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  if ((v4 + 1) >= 2) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MediaTransferStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_100146DB0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *sub_100146DD4(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    uint64_t v2 = a2 - 0x7FFFFFFF;
    result[1] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = a2;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MediaTransferStatus()
{
  return &type metadata for MediaTransferStatus;
}

void sub_100146E10(void *a1, void *a2, void *a3)
{
  uint64_t v25 = a2;
  uint64_t v24 = a3;
  uint64_t v4 = sub_10000A38C(&qword_100368870);
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v23 = v4;
  __chkstk_darwin(v4);
  uint64_t v21 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_100368878);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_100368880);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100147CC4();
  uint64_t v14 = v25;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v14 == (void *)1)
  {
    LOBYTE(v28) = 0;
    sub_100147DC0();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    uint64_t v20 = v11;
    LOBYTE(v28) = 1;
    sub_100147D18();
    id v15 = v14;
    uint64_t v16 = v21;
    uint64_t v17 = v10;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v28 = v14;
    char v27 = 0;
    sub_100147E14();
    uint64_t v18 = v23;
    uint64_t v19 = v26;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v19)
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v18);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v17);
      sub_100027B6C(v14);
    }
    else
    {
      uint64_t v26 = v17;
      char v28 = v24;
      char v27 = 1;
      type metadata accessor for PCInteractionDirection(0);
      sub_100147E68(&qword_100368890);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      sub_100027B6C(v14);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v18);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v26);
    }
  }
}

uint64_t sub_1001471F0()
{
  if (*v0) {
    return 0x726566736E617274;
  }
  else {
    return 0x736E617254746F6ELL;
  }
}

uint64_t sub_100147240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100147560(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100147268(uint64_t a1)
{
  unint64_t v2 = sub_100147CC4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001472A4(uint64_t a1)
{
  unint64_t v2 = sub_100147CC4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001472E0(uint64_t a1)
{
  unint64_t v2 = sub_100147DC0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014731C(uint64_t a1)
{
  unint64_t v2 = sub_100147DC0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100147358()
{
  if (*v0) {
    return 0x6F69746365726964;
  }
  else {
    return 12383;
  }
}

uint64_t sub_10014738C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100147690(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001473B4(uint64_t a1)
{
  unint64_t v2 = sub_100147D18();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001473F0(uint64_t a1)
{
  unint64_t v2 = sub_100147D18();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10014742C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100147778(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

void sub_100147458(void *a1)
{
  sub_100146E10(a1, *v1, v1[1]);
}

BOOL sub_100147474(uint64_t a1, uint64_t a2)
{
  return sub_100147488(*(void **)a1, *(void *)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
}

BOOL sub_100147488(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a1 == (void *)1) {
    return a3 == (void *)1;
  }
  if (a3 == (void *)1) {
    return 0;
  }
  if (a1)
  {
    if (!a3) {
      return 0;
    }
    sub_100147EAC();
    sub_100027B7C(a3);
    sub_100027B7C(a1);
    char v9 = static NSObject.== infix(_:_:)();
    sub_100027B6C(a3);
    sub_100027B6C(a1);
    if ((v9 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    sub_100027B6C(0);
    if (a3) {
      return 0;
    }
  }
  return a2 == a4;
}

uint64_t sub_100147560(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x736E617254746F6ELL && a2 == 0xEF676E6972726566;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726566736E617274 && a2 == 0xEC000000676E6972)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100147690(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69746365726964 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100147778(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_100368830);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v24 = v2;
  uint64_t v25 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_100368838);
  uint64_t v26 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_100368840);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  char v27 = a1;
  sub_10000D6E4(a1, v13);
  sub_100147CC4();
  uint64_t v14 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v14)
  {
    uint64_t v15 = v26;
    uint64_t v28 = v10;
    uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v16 + 16) == 1)
    {
      if (*(unsigned char *)(v16 + 32))
      {
        LOBYTE(v31) = 1;
        sub_100147D18();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        LOBYTE(v30) = 0;
        sub_100147D6C();
        uint64_t v17 = v24;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v21 = v5;
        uint64_t v5 = v31;
        type metadata accessor for PCInteractionDirection(0);
        char v29 = 1;
        sub_100147E68(&qword_100368860);
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v22 = v28;
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v21, v17);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v9);
      }
      else
      {
        LOBYTE(v31) = 0;
        sub_100147DC0();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v6);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v9);
        uint64_t v5 = 1;
      }
    }
    else
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v5 = v19;
      sub_10000A38C(&qword_10035FAC0);
      *(void *)uint64_t v5 = &type metadata for MediaTransferStatus;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 104))(v5, enum case for DecodingError.typeMismatch(_:), v18);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v9);
    }
  }
  sub_10000CC5C((uint64_t)v27);
  return v5;
}

unint64_t sub_100147CC4()
{
  unint64_t result = qword_100368848;
  if (!qword_100368848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368848);
  }
  return result;
}

unint64_t sub_100147D18()
{
  unint64_t result = qword_100368850;
  if (!qword_100368850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368850);
  }
  return result;
}

unint64_t sub_100147D6C()
{
  unint64_t result = qword_100368858;
  if (!qword_100368858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368858);
  }
  return result;
}

unint64_t sub_100147DC0()
{
  unint64_t result = qword_100368868;
  if (!qword_100368868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368868);
  }
  return result;
}

unint64_t sub_100147E14()
{
  unint64_t result = qword_100368888;
  if (!qword_100368888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368888);
  }
  return result;
}

uint64_t sub_100147E68(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PCInteractionDirection(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100147EAC()
{
  unint64_t result = qword_10035F440;
  if (!qword_10035F440)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10035F440);
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaTransferStatus.CodingKeys()
{
  return &type metadata for MediaTransferStatus.CodingKeys;
}

ValueMetadata *type metadata accessor for MediaTransferStatus.NotTransferringCodingKeys()
{
  return &type metadata for MediaTransferStatus.NotTransferringCodingKeys;
}

unsigned char *_s17proximitycontrold19MediaTransferStatusO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100147FDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaTransferStatus.TransferringCodingKeys()
{
  return &type metadata for MediaTransferStatus.TransferringCodingKeys;
}

unint64_t sub_100148018()
{
  unint64_t result = qword_100368898;
  if (!qword_100368898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368898);
  }
  return result;
}

unint64_t sub_100148070()
{
  unint64_t result = qword_1003688A0;
  if (!qword_1003688A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003688A0);
  }
  return result;
}

unint64_t sub_1001480C8()
{
  unint64_t result = qword_1003688A8;
  if (!qword_1003688A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003688A8);
  }
  return result;
}

unint64_t sub_100148120()
{
  unint64_t result = qword_1003688B0;
  if (!qword_1003688B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003688B0);
  }
  return result;
}

unint64_t sub_100148178()
{
  unint64_t result = qword_1003688B8;
  if (!qword_1003688B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003688B8);
  }
  return result;
}

unint64_t sub_1001481D0()
{
  unint64_t result = qword_1003688C0;
  if (!qword_1003688C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003688C0);
  }
  return result;
}

unint64_t sub_100148228()
{
  unint64_t result = qword_1003688C8;
  if (!qword_1003688C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003688C8);
  }
  return result;
}

unint64_t sub_100148280()
{
  unint64_t result = qword_1003688D0[0];
  if (!qword_1003688D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1003688D0);
  }
  return result;
}

uint64_t sub_1001482D4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1001483B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  long long v5 = *(_OWORD *)(*(void *)v0 + 88);
  uint64_t v3 = type metadata accessor for Handoff3RemoteFollowerLink();
  sub_10016ADD8(0x74696E696544, (void *)0xE600000000000000, 0, v3, (uint64_t)&off_100329F20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1 + *(void *)(*(void *)v1 + 144), v2);
  (*(void (**)(uint64_t))(*(void *)(v5 - 8) + 8))(v1 + *(void *)(*(void *)v1 + 152));
  sub_1001485B0(*(void *)(v1 + *(void *)(*(void *)v1 + 160)), *(void *)(v1 + *(void *)(*(void *)v1 + 160) + 8), *(unsigned char *)(v1 + *(void *)(*(void *)v1 + 160) + 16));
  return v0;
}

uint64_t sub_100148540()
{
  sub_1001483B0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Handoff3RemoteFollowerLink()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1001485B0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return sub_1001485C4(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_1001485C4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001485E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  char v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(a3 + 16))(v30, a2, a3);

  if (v6) {
    return 1;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((void)v30)
  {
    *((void *)&v31 + 1) = sub_100019E10(0, &qword_1003650B0);
    uint64_t v32 = &off_10031F600;
  }
  else
  {
    uint64_t v32 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
  }
  char v7 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(a3 + 24))(&v30, a2, a3);
  sub_10000D78C((uint64_t)&v30, (uint64_t *)&unk_10036C0A0);
  if (v7) {
    return 1;
  }
  uint64_t v8 = *(void **)(a1 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice);
  if (v8)
  {
    *((void *)&v31 + 1) = sub_100019E10(0, &qword_100369900);
    uint64_t v32 = &off_100320750;
    *(void *)&long long v30 = v8;
  }
  else
  {
    uint64_t v32 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
  }
  uint64_t v9 = *(uint64_t (**)(long long *, uint64_t, uint64_t))(a3 + 32);
  id v10 = v8;
  char v11 = v9(&v30, a2, a3);
  sub_10000D78C((uint64_t)&v30, &qword_10035B618);
  if (v11) {
    return 1;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v12 = (void *)v30;
  uint64_t v13 = *(uint64_t (**)(void, uint64_t, uint64_t))(a3 + 40);
  char v14 = v13(v30, a2, a3);

  if (v14) {
    return 1;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v15 = (void *)v30;
  char v16 = v13(v30, a2, a3);

  if (v16) {
    return 1;
  }
  if (*(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities)) {
    unint64_t v19 = *(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities);
  }
  else {
    unint64_t v19 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (!(v19 >> 62))
  {
    uint64_t v17 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v17) {
      goto LABEL_19;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    return v17;
  }
LABEL_35:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v17) {
    goto LABEL_32;
  }
LABEL_19:
  if ((v19 & 0xC000000000000001) != 0)
  {
    id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_22:
    uint64_t v21 = v20;
    char v29 = *(uint64_t (**)(void))(a3 + 48);
    char v22 = v29();

    if (v22)
    {
      uint64_t v17 = 1;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = v17 - 1;
      while (1)
      {
        uint64_t v17 = v24 != v23;
        if (v24 == v23) {
          break;
        }
        unint64_t v25 = v23 + 1;
        if ((v19 & 0xC000000000000001) != 0)
        {
          id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v25 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_34;
          }
          id v26 = *(id *)(v19 + 8 * v23 + 40);
        }
        char v27 = v26;
        if (__OFADD__(v25, 1))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        char v28 = ((uint64_t (*)(id, uint64_t, uint64_t))v29)(v26, a2, a3);

        ++v23;
        if (v28) {
          goto LABEL_32;
        }
      }
    }
    goto LABEL_32;
  }
  if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v20 = *(id *)(v19 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

BOOL sub_100148A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  uint64_t v5 = *(void *)(sub_1001C8154(a1, v4) + 16);
  swift_release();
  return v5 != 0;
}

uint64_t sub_100148AC0()
{
  type metadata accessor for LockscreenControlsAnalyticsManager();
  swift_allocObject();
  uint64_t result = sub_100148B00();
  qword_1003AC8D8 = result;
  return result;
}

uint64_t sub_100148B00()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_100368AF0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_100368AF8);
  uint64_t v6 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold34LockscreenControlsAnalyticsManager_discoveryDates) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold34LockscreenControlsAnalyticsManager_firstMeasurementDates) = &_swiftEmptyDictionarySingleton;
  uint64_t v9 = OBJC_IVAR____TtC17proximitycontrold34LockscreenControlsAnalyticsManager_backlightMonitor;
  *(void *)(v1 + v9) = [objc_allocWithZone((Class)type metadata accessor for BacklightMonitor()) init];
  uint64_t v16 = v1 + OBJC_IVAR____TtC17proximitycontrold34LockscreenControlsAnalyticsManager_tasks;
  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold34LockscreenControlsAnalyticsManager_tasks) = &_swiftEmptySetSingleton;
  id v14 = *(id *)(v1 + v9);
  swift_retain();
  uint64_t v17 = sub_100104E14();
  sub_10000A38C(&qword_100366650);
  sub_10000B010(&qword_100368B00, &qword_100366650);
  uint64_t v10 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
  uint64_t v17 = v10;
  swift_getKeyPath();
  sub_10000A38C(&qword_100368B08);
  sub_10000B010(&qword_100368B10, &qword_100368B08);
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  sub_10000B010(&qword_100368B18, &qword_100368AF0);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_10000B010(&qword_100368B20, &qword_100368AF8);
  uint64_t v11 = v15;
  uint64_t v12 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v11);

  uint64_t v17 = v12;
  swift_allocObject();
  swift_weakInit();
  sub_10000A38C(&qword_10035ACA0);
  sub_10000B010(&qword_10035ACB0, &qword_10035ACA0);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  return v1;
}

uint64_t sub_100148F30(unsigned char *a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v16 - v8;
  if (*a1 == 1)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v10 = result;
      Date.init()();
      uint64_t v11 = v10 + OBJC_IVAR____TtC17proximitycontrold34LockscreenControlsAnalyticsManager_lastDiscoveryBeganDate;
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v3 + 24))(v11, v9, v2);
      swift_endAccess();
      v16[0] = 0xD000000000000018;
      v16[1] = 0x80000001002C0270;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v11, v2);
      sub_10014ACD4();
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
      v13(v6, v2);
      id v14 = sub_1001F660C();
      swift_bridgeObjectRetain();
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v14 ulog:40 message:v15];
      swift_bridgeObjectRelease();

      v13(v9, v2);
      return swift_release();
    }
  }
  return result;
}

__n128 sub_10014917C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v55 = a3;
  uint64_t v9 = sub_10000A38C(&qword_10035E158);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  v56 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  v66 = (char *)&v55 - v13;
  __chkstk_darwin(v12);
  NSString v15 = (char *)&v55 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void **)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v67 = (uint64_t)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  __chkstk_darwin(v19);
  uint64_t v63 = v21;
  char v22 = *(void (**)(void))(v21 + 16);
  uint64_t v68 = (uint64_t)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = v23;
  v22();
  uint64_t v24 = *(void **)(*(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__mediaRemoteDisplayContext) + 24);
  uint64_t v65 = a2;
  if (v24)
  {
    id v25 = v24;
    uint64_t v58 = sub_100088744();
  }
  else
  {
    uint64_t v58 = 7;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v62 = sub_1000983CC();
  uint64_t v61 = v26;
  swift_release();
  unint64_t v60 = *(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_lastDistanceMeasurementQuality);
  int v59 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_lastDistanceMeasurementQuality + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v27 = sub_100096BBC();
  swift_release();
  uint64_t v28 = v5 + OBJC_IVAR____TtC17proximitycontrold34LockscreenControlsAnalyticsManager_lastDiscoveryBeganDate;
  swift_beginAccess();
  char v29 = (void (*)(uint64_t, uint64_t, uint64_t))v17[2];
  v29(v67, v28, v16);
  long long v30 = (uint64_t *)(v5 + OBJC_IVAR____TtC17proximitycontrold34LockscreenControlsAnalyticsManager_discoveryDates);
  swift_beginAccess();
  uint64_t v31 = *v30;
  uint64_t v32 = *(void *)(v31 + 16);
  uint64_t v57 = v27;
  if (v32)
  {
    swift_bridgeObjectRetain();
    unint64_t v33 = sub_100269DA0(v68);
    if (v34)
    {
      v29((uint64_t)v15, *(void *)(v31 + 56) + v17[9] * v33, v16);
      char v35 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v17[7];
      v35(v15, 0, 1, v16);
    }
    else
    {
      char v35 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v17[7];
      v35(v15, 1, 1, v16);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v35 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v17[7];
    v35(v15, 1, 1, v16);
  }
  unint64_t v36 = (uint64_t *)(v5 + OBJC_IVAR____TtC17proximitycontrold34LockscreenControlsAnalyticsManager_firstMeasurementDates);
  swift_beginAccess();
  uint64_t v37 = *v36;
  if (*(void *)(v37 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v38 = sub_100269DA0(v68);
    if (v39)
    {
      uint64_t v40 = a4;
      unint64_t v41 = v15;
      uint64_t v42 = (uint64_t)v66;
      v29((uint64_t)v66, *(void *)(v37 + 56) + v17[9] * v38, v16);
      uint64_t v43 = v42;
      NSString v15 = v41;
      a4 = v40;
      uint64_t v44 = 0;
    }
    else
    {
      uint64_t v43 = (uint64_t)v66;
      uint64_t v44 = 1;
    }
    v35((char *)v43, v44, 1, v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v35(v66, 1, 1, v16);
  }
  uint64_t v45 = (uint64_t)v56;
  v29((uint64_t)v56, v55, v16);
  v35((char *)v45, 0, 1, v16);
  unsigned int v46 = v65;
  if ((v65 & 0x100000000) != 0)
  {
    swift_retain();
    CurrentValueSubject.value.getter();
    uint64_t v48 = v57;
    if (BYTE5(v71[0]))
    {
      CurrentValueSubject.value.getter();
      swift_release();
      unsigned int v46 = v69;
      unsigned __int8 v47 = v70;
    }
    else
    {
      char v49 = BYTE4(v71[0]);
      unsigned int v46 = v71[0];
      swift_release();
      unsigned __int8 v47 = v49 & 1;
    }
  }
  else
  {
    unsigned __int8 v47 = 0;
    uint64_t v48 = v57;
  }
  uint64_t v50 = 0xE800000000000000;
  uint64_t v51 = 0x656D695465636146;
  switch((char)v58)
  {
    case 1:
      uint64_t v50 = 0xE500000000000000;
      uint64_t v51 = 0x636973754DLL;
      break;
    case 2:
      uint64_t v50 = 0xE500000000000000;
      uint64_t v51 = 0x656E6F6850;
      break;
    case 3:
      uint64_t v50 = 0xE700000000000000;
      uint64_t v51 = 0x74736163646F50;
      break;
    case 4:
      uint64_t v50 = 0x80000001002B1430;
      uint64_t v51 = 0xD000000000000019;
      break;
    case 5:
      uint64_t v51 = 0xD00000000000001ALL;
      uint64_t v50 = 0x80000001002B1450;
      break;
    case 6:
      uint64_t v50 = 0xEB000000006C6C61;
      uint64_t v51 = 0x436E776F6E6B6E55;
      break;
    case 7:
      uint64_t v50 = 0xEC00000061696465;
      uint64_t v51 = 0x4D6E776F6E6B6E55;
      break;
    case 8:
      uint64_t v50 = 0xE700000000000000;
      uint64_t v51 = 0x6E776F6E6B6E55;
      break;
    default:
      break;
  }
  LOBYTE(v71[0]) = v47;
  sub_100210400(v67, (uint64_t)v15, (uint64_t)v66, v45, v46 | ((unint64_t)v47 << 32), v62, v61, v60, (uint64_t)v71, v59, v51, v50, v48);
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v68, v64);
  long long v52 = v71[5];
  *(_OWORD *)(a4 + 64) = v71[4];
  *(_OWORD *)(a4 + 80) = v52;
  *(void *)(a4 + 96) = v72;
  long long v53 = v71[1];
  *(_OWORD *)a4 = v71[0];
  *(_OWORD *)(a4 + 16) = v53;
  __n128 result = (__n128)v71[3];
  *(_OWORD *)(a4 + 32) = v71[2];
  *(__n128 *)(a4 + 48) = result;
  return result;
}

void sub_100149974(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = 0;
  unint64_t v18 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  unint64_t v17 = 0xD000000000000014;
  unint64_t v18 = 0x80000001002C0220;
  id v8 = [a1 description];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  id v13 = sub_1001F660C();
  swift_bridgeObjectRetain();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 ulog:40 message:v14];
  swift_bridgeObjectRelease();

  id v15 = sub_10016B098(v3, (uint64_t)&off_100329F58);
  Date.init()();
  sub_100149C48(a1, (uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100149C48(void *a1, uint64_t a2)
{
  if (qword_10035A4E8 != -1) {
    swift_once();
  }
  if (*(void *)(*(void *)(qword_1003AC5D0 + 16) + 24)
    && (v4 = a1, v5 = swift_retain(), uint64_t v6 = sub_100112094(v5, v4), swift_release(), v4, v6))
  {
    id v7 = [v4 distance];
    id v8 = v7;
    if (v7)
    {
      [v7 floatValue];
      unsigned int v10 = v9;

      uint64_t v11 = v10;
    }
    else
    {
      uint64_t v11 = 0;
    }
    sub_10014917C(v6, v11 | ((unint64_t)(v8 == 0) << 32), a2, (uint64_t)v20);
    NSString v14 = sub_10025ECC0();
    uint64_t v15 = __chkstk_darwin(v14);
    sub_10014AA08(v15, (void (*)(uint64_t, uint64_t, id))sub_10014AC14);
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    String.append(_:)(v16);
    swift_bridgeObjectRelease_n();
    v17._countAndFlagsBits = 0xD000000000000046;
    v17._object = (void *)0x80000001002C01D0;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    id v18 = sub_1001F660C();
    swift_bridgeObjectRetain();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 ulog:40 message:v19];
    swift_bridgeObjectRelease();

    sub_100260A8C();
    swift_release();
    return sub_10014AC1C((uint64_t)v20);
  }
  else
  {
    sub_10014ABC0();
    swift_allocError();
    *Swift::String v12 = 0xD00000000000001DLL;
    v12[1] = 0x80000001002C01B0;
    return swift_willThrow();
  }
}

uint64_t sub_100149F28(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10035E158);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  unint64_t v16 = 0xD000000000000015;
  unint64_t v17 = 0x80000001002C0190;
  v9._countAndFlagsBits = sub_1001F7514();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  id v10 = sub_1001F660C();
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 ulog:40 message:v11];
  swift_bridgeObjectRelease();

  uint64_t v12 = a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v12, v5);
  Date.init()();
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v4, 0, 1, v13);
  swift_beginAccess();
  sub_100245538((uint64_t)v4, (uint64_t)v8);
  swift_endAccess();
  swift_beginAccess();
  sub_1001307BC(v12, (uint64_t)v4);
  sub_1000B0424((uint64_t)v4);
  return swift_endAccess();
}

uint64_t sub_10014A1C0(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10035E158);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = 0;
  unint64_t v12 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  unint64_t v11 = 0xD000000000000013;
  unint64_t v12 = 0x80000001002C0170;
  v5._countAndFlagsBits = sub_1001F7514();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  id v6 = sub_1001F660C();
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 ulog:40 message:v7];
  swift_bridgeObjectRelease();

  uint64_t v8 = a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
  swift_beginAccess();
  sub_1001307BC(v8, (uint64_t)v4);
  sub_1000B0424((uint64_t)v4);
  swift_endAccess();
  swift_beginAccess();
  sub_1001307BC(v8, (uint64_t)v4);
  sub_1000B0424((uint64_t)v4);
  return swift_endAccess();
}

uint64_t sub_10014A374(uint64_t a1)
{
  uint64_t v3 = sub_10000A38C(&qword_10035E158);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  id v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v30 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v37 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  NSString v14 = (char *)&v30 - v13;
  char v34 = *(void (**)(char *))(v10 + 16);
  uint64_t v35 = a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
  v34((char *)&v30 - v13);
  uint64_t v15 = (uint64_t *)(v1 + OBJC_IVAR____TtC17proximitycontrold34LockscreenControlsAnalyticsManager_firstMeasurementDates);
  swift_beginAccess();
  unint64_t v36 = v15;
  uint64_t v16 = *v15;
  if (*(void *)(*v15 + 16))
  {
    uint64_t v33 = a1;
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_100269DA0((uint64_t)v14);
    if (v18)
    {
      unint64_t v19 = v17;
      uint64_t v31 = *(void *)(v16 + 56);
      uint64_t v20 = type metadata accessor for Date();
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v32 = v6;
      uint64_t v22 = v21;
      (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v8, v31 + *(void *)(v21 + 72) * v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v8, 0, 1, v20);
      id v6 = v32;
    }
    else
    {
      uint64_t v20 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v8, 1, 1, v20);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v8, 1, 1, v20);
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  type metadata accessor for Date();
  uint64_t v23 = *(void *)(v20 - 8);
  int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v8, 1, v20);
  uint64_t result = sub_1000B0424((uint64_t)v8);
  if (v24 == 1)
  {
    unint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    unint64_t v38 = 0xD000000000000013;
    unint64_t v39 = 0x80000001002C0150;
    v26._countAndFlagsBits = sub_1001F7514();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    id v27 = sub_1001F660C();
    swift_bridgeObjectRetain();
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v27 ulog:40 message:v28];
    swift_bridgeObjectRelease();

    uint64_t v29 = (uint64_t)v37;
    ((void (*)(char *, uint64_t, uint64_t))v34)(v37, v35, v9);
    Date.init()();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v6, 0, 1, v20);
    swift_beginAccess();
    sub_100245538((uint64_t)v6, v29);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_10014A824()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17proximitycontrold34LockscreenControlsAnalyticsManager_lastDiscoveryBeganDate;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10014A904()
{
  return type metadata accessor for LockscreenControlsAnalyticsManager();
}

uint64_t type metadata accessor for LockscreenControlsAnalyticsManager()
{
  uint64_t result = qword_100368998;
  if (!qword_100368998) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10014A958()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10014AA08(uint64_t a1, void (*a2)(uint64_t, uint64_t, id))
{
  uint64_t v20 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v7) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v20 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v20 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v20 + 8 * v9);
        if (!v18)
        {
          int64_t v9 = v17 + 3;
          if (v17 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v20 + 8 * v9);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v18 - 1) & v18;
    unint64_t v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = *(void **)(*(void *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    id v16 = v15;
    a2(v13, v14, v16);

    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v7) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v20 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v7) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v20 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_10014ABC0()
{
  unint64_t result = qword_100368AE8;
  if (!qword_100368AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368AE8);
  }
  return result;
}

uint64_t sub_10014AC14(uint64_t a1, void *a2, void *a3)
{
  return sub_100210228(a1, a2, a3);
}

uint64_t sub_10014AC1C(uint64_t a1)
{
  return a1;
}

void *sub_10014AC7C@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*result & 0xFFFFFFFFFFFFFFFELL) == 2;
  return result;
}

uint64_t sub_10014AC94()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10014ACCC(unsigned char *a1)
{
  return sub_100148F30(a1);
}

unint64_t sub_10014ACD4()
{
  unint64_t result = qword_10036C040;
  if (!qword_10036C040)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C040);
  }
  return result;
}

uint64_t sub_10014AD2C()
{
  return sub_100260FF4();
}

uint64_t _s23HandoffSessionCompletedVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s23HandoffSessionCompletedVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v3;
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v4;
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v5;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v6 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v6;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s23HandoffSessionCompletedVwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = a2[8];
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 64) = v8;
  *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 88) = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = a2[12];
  *(void *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  uint64_t v9 = a2[15];
  *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
  *(void *)(a1 + 120) = v9;
  *(void *)(a1 + 136) = a2[17];
  *(void *)(a1 + 144) = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[19];
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  *(void *)(a1 + 152) = v10;
  uint64_t v11 = a2[21];
  *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
  *(void *)(a1 + 168) = v11;
  return a1;
}

__n128 _s23HandoffSessionCompletedVwtk(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t _s23HandoffSessionCompletedVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

uint64_t _s23HandoffSessionCompletedVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 177)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 88);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s23HandoffSessionCompletedVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 176) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 177) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 177) = 0;
    }
    if (a2) {
      *(void *)(result + 88) = a2;
    }
  }
  return result;
}

ValueMetadata *_s23HandoffSessionCompletedVMa()
{
  return &_s23HandoffSessionCompletedVN;
}

unint64_t sub_10014B1F0(uint64_t a1)
{
  unint64_t result = sub_10014B218();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10014B218()
{
  unint64_t result = qword_100368B28;
  if (!qword_100368B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368B28);
  }
  return result;
}

unint64_t sub_10014B26C(uint64_t a1)
{
  unint64_t result = sub_10014B294();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10014B294()
{
  unint64_t result = qword_100368B30;
  if (!qword_100368B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368B30);
  }
  return result;
}

unint64_t sub_10014B2E8()
{
  return 0xD000000000000035;
}

uint64_t sub_10014B304(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10000A38C(&qword_100368B70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D6E4(a1, a1[3]);
  sub_10014BBF0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = *((void *)v3 + 4);
  char v10 = *((unsigned char *)v3 + 40);
  long long v11 = v3[1];
  long long v14 = *v3;
  long long v15 = v11;
  uint64_t v16 = v9;
  char v17 = v10;
  v13[15] = 0;
  sub_10014BE0C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for PermissionToHandoffRequest.Response();
    LOBYTE(v14) = 1;
    type metadata accessor for PermissionToHandoff();
    sub_10014BE60(&qword_100368B80, (void (*)(uint64_t))type metadata accessor for PermissionToHandoff);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 2;
    type metadata accessor for ShareableContent(0);
    sub_10014BE60(&qword_100368B88, (void (*)(uint64_t))type metadata accessor for ShareableContent);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10014B560@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v25 = type metadata accessor for ShareableContent(0);
  __chkstk_darwin(v25);
  int v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PermissionToHandoff();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_100368B48);
  uint64_t v26 = *(void *)(v8 - 8);
  uint64_t v27 = v8;
  __chkstk_darwin(v8);
  char v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PermissionToHandoffRequest.Response();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  uint64_t v29 = a1;
  sub_10000D6E4(a1, v14);
  sub_10014BBF0();
  NSString v28 = v10;
  long long v15 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    return sub_10000CC5C((uint64_t)v29);
  }
  uint64_t v30 = v13;
  uint64_t v23 = v4;
  char v35 = 0;
  sub_10014BC44();
  uint64_t v16 = v27;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v17 = v33;
  char v18 = v34;
  long long v19 = v32;
  uint64_t v20 = (uint64_t)v30;
  *uint64_t v30 = v31;
  *(_OWORD *)(v20 + 16) = v19;
  *(void *)(v20 + 32) = v17;
  *(unsigned char *)(v20 + 40) = v18;
  LOBYTE(v31) = 1;
  sub_10014BE60(&qword_100368B60, (void (*)(uint64_t))type metadata accessor for PermissionToHandoff);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_10014BCE0((uint64_t)v7, v20 + *(int *)(v11 + 20), (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
  LOBYTE(v31) = 2;
  sub_10014BE60(&qword_100368B68, (void (*)(uint64_t))type metadata accessor for ShareableContent);
  uint64_t v21 = (uint64_t)v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v16);
  sub_10014BCE0(v21, v20 + *(int *)(v11 + 24), type metadata accessor for ShareableContent);
  sub_10014BD48(v20, v24);
  sub_10000CC5C((uint64_t)v29);
  return sub_10014BDAC(v20, (uint64_t (*)(void))type metadata accessor for PermissionToHandoffRequest.Response);
}

uint64_t sub_10014B9C8()
{
  unint64_t v1 = 0x697373696D726570;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x697463416C6C6163;
  }
}

uint64_t sub_10014BA34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10014D454(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10014BA5C(uint64_t a1)
{
  unint64_t v2 = sub_10014BBF0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014BA98(uint64_t a1)
{
  unint64_t v2 = sub_10014BBF0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10014BAD4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10014B560(a1, a2);
}

uint64_t sub_10014BAEC(void *a1)
{
  return sub_10014B304(a1);
}

unint64_t sub_10014BB04()
{
  return 0xD00000000000003ELL;
}

uint64_t sub_10014BB20(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10014BE60(&qword_100368B38, (void (*)(uint64_t))type metadata accessor for PermissionToHandoffRequest.Response);
  uint64_t result = sub_10014BE60((unint64_t *)&qword_100368B40, (void (*)(uint64_t))type metadata accessor for PermissionToHandoffRequest.Response);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for PermissionToHandoffRequest.Response()
{
  uint64_t result = qword_100368BE8;
  if (!qword_100368BE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10014BBF0()
{
  unint64_t result = qword_100368B50;
  if (!qword_100368B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368B50);
  }
  return result;
}

unint64_t sub_10014BC44()
{
  unint64_t result = qword_100368B58;
  if (!qword_100368B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368B58);
  }
  return result;
}

uint64_t sub_10014BC98(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10014BCE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10014BD48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PermissionToHandoffRequest.Response();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014BDAC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10014BE0C()
{
  unint64_t result = qword_100368B78;
  if (!qword_100368B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368B78);
  }
  return result;
}

uint64_t sub_10014BE60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PermissionToHandoffRequest.Response.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10014BF74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PermissionToHandoffRequest.Response.CodingKeys()
{
  return &type metadata for PermissionToHandoffRequest.Response.CodingKeys;
}

ValueMetadata *type metadata accessor for PermissionToHandoffRequest()
{
  return &type metadata for PermissionToHandoffRequest;
}

uint64_t sub_10014BFBC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    if (v7 == 1)
    {
      long long v8 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    }
    else
    {
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v7;
      uint64_t v10 = a2[3];
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v10;
      *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
      *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
      *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = a1 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    unint64_t v14 = *(uint64_t *)((char *)a2 + v11 + 16);
    if (v14 - 7 >= 2 && v14 >= 7)
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      uint64_t v16 = *(void *)(v13 + 24);
      uint64_t v17 = *(void *)(v13 + 32);
      *(void *)(v12 + 16) = v14;
      *(void *)(v12 + 24) = v16;
      uint64_t v18 = *(void *)(v13 + 40);
      uint64_t v19 = *(void *)(v13 + 48);
      *(void *)(v12 + 32) = v17;
      *(void *)(v12 + 40) = v18;
      *(void *)(v12 + 48) = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v15 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      *(_OWORD *)(v12 + 16) = v15;
      *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
      *(void *)(v12 + 48) = *(void *)(v13 + 48);
    }
    uint64_t v20 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
    uint64_t v21 = v12 + v20;
    uint64_t v22 = v13 + v20;
    uint64_t v23 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    uint64_t v24 = *(int *)(a3 + 24);
    uint64_t v25 = (void *)(a1 + v24);
    uint64_t v26 = (uint64_t)a2 + v24;
    uint64_t v27 = *(uint64_t *)((char *)a2 + v24 + 8);
    *uint64_t v25 = *(uint64_t *)((char *)a2 + v24);
    v25[1] = v27;
    uint64_t v28 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
    uint64_t v29 = (char *)v25 + v28;
    uint64_t v30 = (const void *)(v26 + v28);
    uint64_t v31 = type metadata accessor for URL();
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
    swift_bridgeObjectRetain();
    if (v33(v30, 1, v31))
    {
      uint64_t v34 = type metadata accessor for ShareableContentType(0);
      memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
  }
  return a1;
}

uint64_t sub_10014C25C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  if (*(void *)(v4 + 16) >= 9uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = v4 + *(int *)(type metadata accessor for PermissionToHandoff() + 20);
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v8 = v7 + *(int *)(type metadata accessor for ShareableContent(0) + 20);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v9 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v8, 1, v9);
  if (!result)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
    return v11(v8, v9);
  }
  return result;
}

uint64_t sub_10014C3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6 == 1)
  {
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v8 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v8;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  unint64_t v12 = *(void *)(a2 + v9 + 16);
  if (v12 - 7 >= 2 && v12 >= 7)
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    uint64_t v14 = *(void *)(v11 + 24);
    uint64_t v15 = *(void *)(v11 + 32);
    *(void *)(v10 + 16) = v12;
    *(void *)(v10 + 24) = v14;
    uint64_t v16 = *(void *)(v11 + 40);
    uint64_t v17 = *(void *)(v11 + 48);
    *(void *)(v10 + 32) = v15;
    *(void *)(v10 + 40) = v16;
    *(void *)(v10 + 48) = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v13 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    *(_OWORD *)(v10 + 16) = v13;
    *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
    *(void *)(v10 + 48) = *(void *)(v11 + 48);
  }
  uint64_t v18 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
  uint64_t v19 = v10 + v18;
  uint64_t v20 = v11 + v18;
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  uint64_t v22 = *(int *)(a3 + 24);
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = a2 + v22;
  uint64_t v25 = *(void *)(a2 + v22 + 8);
  *uint64_t v23 = *(void *)(a2 + v22);
  v23[1] = v25;
  uint64_t v26 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
  uint64_t v27 = (char *)v23 + v26;
  uint64_t v28 = (const void *)(v24 + v26);
  uint64_t v29 = type metadata accessor for URL();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
  swift_bridgeObjectRetain();
  if (v31(v28, 1, v29))
  {
    uint64_t v32 = type metadata accessor for ShareableContentType(0);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

uint64_t sub_10014C620(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8) == 1)
  {
    if (v6 == 1)
    {
      long long v7 = *a2;
      long long v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
      int v11 = *((_DWORD *)a2 + 9);
      *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
      *(_DWORD *)(a1 + 36) = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    sub_10014CA54(a1);
    long long v9 = *(long long *)((char *)a2 + 25);
    long long v10 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 25) = v9;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    int v12 = *((_DWORD *)a2 + 9);
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(_DWORD *)(a1 + 36) = v12;
  }
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  unint64_t v16 = *(void *)(a1 + v13 + 16);
  unint64_t v17 = *(void *)((char *)a2 + v13 + 16);
  unint64_t v18 = v17 - 7;
  if (v16 - 7 < 2)
  {
    if (v18 < 2) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v18 < 2)
  {
    sub_10014CAFC((uint64_t)v14);
    goto LABEL_19;
  }
  if (v16 >= 7)
  {
    if (v17 >= 7)
    {
      *uint64_t v14 = *v15;
      v14[1] = v15[1];
      v14[2] = v15[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v14[3] = v15[3];
      v14[4] = v15[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v14[5] = v15[5];
      v14[6] = v15[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    sub_10014CAA8((uint64_t)v14);
LABEL_19:
    long long v23 = *((_OWORD *)v15 + 1);
    long long v22 = *((_OWORD *)v15 + 2);
    long long v24 = *(_OWORD *)v15;
    v14[6] = v15[6];
    *((_OWORD *)v14 + 1) = v23;
    *((_OWORD *)v14 + 2) = v22;
    *(_OWORD *)uint64_t v14 = v24;
    goto LABEL_20;
  }
LABEL_14:
  if (v17 < 7)
  {
LABEL_15:
    long long v19 = *(_OWORD *)v15;
    long long v20 = *((_OWORD *)v15 + 1);
    long long v21 = *((_OWORD *)v15 + 2);
    v14[6] = v15[6];
    *((_OWORD *)v14 + 1) = v20;
    *((_OWORD *)v14 + 2) = v21;
    *(_OWORD *)uint64_t v14 = v19;
    goto LABEL_20;
  }
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  v14[6] = v15[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_20:
  uint64_t v25 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
  uint64_t v26 = (char *)v14 + v25;
  uint64_t v27 = (char *)v15 + v25;
  uint64_t v28 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 24))(v26, v27, v28);
  uint64_t v29 = *(int *)(a3 + 24);
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (uint64_t)a2 + v29;
  *uint64_t v30 = *(void *)((char *)a2 + v29);
  v30[1] = *(void *)((char *)a2 + v29 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
  uint64_t v33 = (char *)v30 + v32;
  uint64_t v34 = (char *)(v31 + v32);
  uint64_t v35 = type metadata accessor for URL();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  LODWORD(v27) = v37(v33, 1, v35);
  int v38 = v37(v34, 1, v35);
  if (!v27)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
    goto LABEL_25;
  }
  if (v38)
  {
LABEL_25:
    uint64_t v39 = type metadata accessor for ShareableContentType(0);
    memcpy(v33, v34, *(void *)(*(void *)(v39 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  return a1;
}

uint64_t sub_10014CA54(uint64_t a1)
{
  return a1;
}

uint64_t sub_10014CAA8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10014CAFC(uint64_t a1)
{
  return a1;
}

_OWORD *sub_10014CB50(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  uint64_t v7 = *(int *)(a3 + 20);
  long long v8 = (char *)a1 + v7;
  long long v9 = (char *)a2 + v7;
  *((void *)v8 + 6) = *(void *)((char *)a2 + v7 + 48);
  long long v10 = *(_OWORD *)((char *)a2 + v7 + 32);
  long long v11 = *(_OWORD *)((char *)a2 + v7);
  *((_OWORD *)v8 + 1) = *(_OWORD *)((char *)a2 + v7 + 16);
  *((_OWORD *)v8 + 2) = v10;
  *(_OWORD *)long long v8 = v11;
  uint64_t v12 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
  uint64_t v13 = &v8[v12];
  uint64_t v14 = &v9[v12];
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = *(int *)(a3 + 24);
  unint64_t v17 = (char *)a1 + v16;
  unint64_t v18 = (_OWORD *)((char *)a2 + v16);
  *(_OWORD *)((char *)a1 + v16) = *v18;
  uint64_t v19 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
  long long v20 = &v17[v19];
  long long v21 = (char *)v18 + v19;
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = type metadata accessor for ShareableContentType(0);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t sub_10014CD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 8) == 1) {
    goto LABEL_4;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6 == 1)
  {
    sub_10014CA54(a1);
LABEL_4:
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
LABEL_6:
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  unint64_t v12 = *(void *)(a1 + v9 + 16);
  if (v12 - 7 < 2)
  {
LABEL_12:
    long long v14 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    *(_OWORD *)(v10 + 16) = v14;
    *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
    *(void *)(v10 + 48) = *(void *)(v11 + 48);
    goto LABEL_13;
  }
  unint64_t v13 = *(void *)(v11 + 16);
  if (v13 - 7 < 2)
  {
    sub_10014CAFC(v10);
    goto LABEL_12;
  }
  if (v12 < 7) {
    goto LABEL_12;
  }
  if (v13 < 7)
  {
    sub_10014CAA8(v10);
    goto LABEL_12;
  }
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(void *)(v10 + 16) = v13;
  swift_bridgeObjectRelease();
  uint64_t v32 = *(void *)(v11 + 32);
  *(void *)(v10 + 24) = *(void *)(v11 + 24);
  *(void *)(v10 + 32) = v32;
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(v11 + 48);
  *(void *)(v10 + 40) = *(void *)(v11 + 40);
  *(void *)(v10 + 48) = v33;
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v15 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
  uint64_t v16 = v10 + v15;
  uint64_t v17 = v11 + v15;
  uint64_t v18 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  uint64_t v19 = *(int *)(a3 + 24);
  long long v20 = (void *)(a1 + v19);
  uint64_t v21 = a2 + v19;
  uint64_t v22 = *(void *)(a2 + v19 + 8);
  *long long v20 = *(void *)(a2 + v19);
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
  uint64_t v24 = (char *)v20 + v23;
  uint64_t v25 = (char *)(v21 + v23);
  uint64_t v26 = type metadata accessor for URL();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  LODWORD(v17) = v28(v24, 1, v26);
  int v29 = v28(v25, 1, v26);
  if (!v17)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v24, v25, v26);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_18;
  }
  if (v29)
  {
LABEL_18:
    uint64_t v30 = type metadata accessor for ShareableContentType(0);
    memcpy(v24, v25, *(void *)(*(void *)(v30 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

uint64_t sub_10014CFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014D000);
}

uint64_t sub_10014D000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483645)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 - 1) & ~(((int)v4 - 1) >> 31);
  }
  else
  {
    uint64_t v8 = type metadata accessor for PermissionToHandoff();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for ShareableContent(0);
      long long v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10014D134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014D148);
}

uint64_t sub_10014D148(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483645)
  {
    *(void *)(result + 8) = (a2 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for PermissionToHandoff();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for ShareableContent(0);
      long long v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 24);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_10014D278()
{
  uint64_t result = type metadata accessor for PermissionToHandoff();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ShareableContent(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_10014D350()
{
  unint64_t result = qword_100368C28;
  if (!qword_100368C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368C28);
  }
  return result;
}

unint64_t sub_10014D3A8()
{
  unint64_t result = qword_100368C30;
  if (!qword_100368C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368C30);
  }
  return result;
}

unint64_t sub_10014D400()
{
  unint64_t result = qword_100368C38[0];
  if (!qword_100368C38[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100368C38);
  }
  return result;
}

uint64_t sub_10014D454(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x697463416C6C6163 && a2 == 0xEC00000079746976;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697373696D726570 && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001002C0310)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t static EdgeBuilder.buildExpression<A>(_:)()
{
  return Sequence.flatMap<A>(_:)();
}

uint64_t static EdgeBuilder.buildBlock<A>(_:)()
{
  type metadata accessor for Array();
  type metadata accessor for Array();
  swift_getWitnessTable();
  swift_getWitnessTable();
  Sequence.flatMap<A>(_:)();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Edge2();
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v0 = Sequence.flatMap<A>(_:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t static EdgeBuilder.buildArray<A>(_:)()
{
  return Sequence.flatMap<A>(_:)();
}

uint64_t static EdgeBuilder.buildBlock()()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t sub_10014D9D0@<X0>(uint64_t *a1@<X8>)
{
  return sub_10014DA00(a1);
}

uint64_t sub_10014D9E8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10014DA54(a1, a2);
}

uint64_t sub_10014DA00@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v1 + 48) + 16))(*(void *)(v1 + 40));
  *a1 = result;
  return result;
}

uint64_t sub_10014DA54@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t static EdgeBuilder.buildOptional<A>(_:)(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = static Array._allocateUninitialized(_:)();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for EdgeBuilder()
{
  return swift_getGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for HapticError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10014DBA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HapticError()
{
  return &type metadata for HapticError;
}

unint64_t sub_10014DBDC()
{
  unint64_t result = qword_100368CC0;
  if (!qword_100368CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368CC0);
  }
  return result;
}

uint64_t destroy for DwellBannerEffect(uint64_t a1)
{
  return sub_100020340(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s17proximitycontrold17DwellBannerEffectOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10001F8A4(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DwellBannerEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10001F8A4(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100020340(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for DwellBannerEffect(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100020340(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for DwellBannerEffect()
{
  return &type metadata for DwellBannerEffect;
}

uint64_t sub_10014DD40(char a1, uint64_t a2, char a3)
{
  uint64_t result = 0x746E6573657270;
  switch(a3)
  {
    case 1:
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      unint64_t v10 = 0xD000000000000012;
      goto LABEL_7;
    case 2:
      unint64_t v10 = 0x286C696166;
      if (a2)
      {
        swift_bridgeObjectRetain();
        uint64_t v5 = String.init<A>(describing:)();
        unint64_t v8 = v7;
      }
      else
      {
        unint64_t v8 = 0xE300000000000000;
        uint64_t v5 = 7104878;
      }
      goto LABEL_13;
    case 3:
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      unint64_t v10 = 0xD000000000000013;
LABEL_7:
      if (a1) {
        uint64_t v5 = 1702195828;
      }
      else {
        uint64_t v5 = 0x65736C6166;
      }
      if (a1) {
        unint64_t v8 = 0xE400000000000000;
      }
      else {
        unint64_t v8 = 0xE500000000000000;
      }
LABEL_13:
      unint64_t v6 = v8;
      goto LABEL_14;
    case 4:
      return result;
    default:
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      unint64_t v10 = 0xD000000000000014;
      uint64_t v5 = String.init<A>(describing:)();
LABEL_14:
      String.append(_:)(*(Swift::String *)&v5);
      swift_bridgeObjectRelease();
      v9._countAndFlagsBits = 41;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
      return v10;
  }
}

uint64_t sub_10014DF28()
{
  return sub_10014DD40(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_10014DF34(uint64_t a1, uint64_t a2)
{
  return sub_10014DF50(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t sub_10014DF50(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      if (a6 == 1) {
        goto LABEL_14;
      }
      goto LABEL_20;
    case 2:
      if (a6 != 2) {
        goto LABEL_20;
      }
      if (a2)
      {
        if (!a5 || (a1 != a4 || a2 != a5) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_20;
        }
LABEL_17:
        char v6 = 1;
        return v6 & 1;
      }
      if (!a5) {
        goto LABEL_17;
      }
      sub_100020340(a1, 0, 2);
LABEL_20:
      char v6 = 0;
      return v6 & 1;
    case 3:
      if (a6 != 3) {
        goto LABEL_20;
      }
LABEL_14:
      char v6 = ((a1 & 1) == 0) ^ a4;
      return v6 & 1;
    case 4:
      if (a6 == 4 && !(a5 | a4)) {
        goto LABEL_17;
      }
      goto LABEL_20;
    default:
      if (a6) {
        goto LABEL_20;
      }
      char v6 = *(double *)&a1 == *(double *)&a4;
      return v6 & 1;
  }
}

unsigned char *storeEnumTagSinglePayload for RangingDeviceClass(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10014E124);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RangingDeviceClass()
{
  return &type metadata for RangingDeviceClass;
}

float sub_10014E15C(char a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      if (qword_10035A520 != -1) {
        swift_once();
      }
      uint64_t v1 = (id *)(qword_1003AC750 + 1680);
    }
    else
    {
      if (qword_10035A520 != -1) {
        swift_once();
      }
      uint64_t v1 = (id *)(qword_1003AC750 + 1688);
    }
  }
  else
  {
    if (qword_10035A520 != -1) {
      swift_once();
    }
    uint64_t v1 = (id *)(qword_1003AC750 + 1672);
  }
  id v2 = *v1;
  float v3 = sub_1000FF7A8();

  return v3;
}

void sub_10014E268(char a1)
{
  if (!a1)
  {
LABEL_7:
    if (qword_10035A520 != -1) {
      swift_once();
    }
    uint64_t v6 = qword_1003AC750;
    id v7 = *(id *)(qword_1003AC750 + 1648);
    float v8 = sub_1000FF7A8();

    id v9 = *(id *)(v6 + 1640);
    float v10 = sub_1000FF7A8();

    if (v8 > v10)
    {
      __break(1u);
      goto LABEL_11;
    }
    return;
  }
  if (a1 != 1)
  {
LABEL_11:
    if (qword_10035A520 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_1003AC750;
    id v12 = *(id *)(qword_1003AC750 + 1664);
    float v13 = sub_1000FF7A8();

    id v14 = *(id *)(v11 + 1640);
    float v15 = sub_1000FF7A8();

    if (v13 > v15) {
      __break(1u);
    }
    return;
  }
  if (qword_10035A520 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1003AC750;
  id v2 = *(id *)(qword_1003AC750 + 1656);
  float v3 = sub_1000FF7A8();

  id v4 = *(id *)(v1 + 1640);
  float v5 = sub_1000FF7A8();

  if (v3 > v5)
  {
    __break(1u);
    goto LABEL_7;
  }
}

void sub_10014E400(char a1)
{
  if (!a1)
  {
LABEL_7:
    if (qword_10035A520 != -1) {
      swift_once();
    }
    uint64_t v6 = qword_1003AC750;
    id v7 = *(id *)(qword_1003AC750 + 1648);
    float v8 = sub_1000FF7A8();

    id v9 = *(id *)(v6 + 1720);
    float v10 = sub_1000FF7A8();

    if (v8 > v10)
    {
      __break(1u);
      goto LABEL_11;
    }
    return;
  }
  if (a1 != 1)
  {
LABEL_11:
    if (qword_10035A520 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_1003AC750;
    id v12 = *(id *)(qword_1003AC750 + 1664);
    float v13 = sub_1000FF7A8();

    id v14 = *(id *)(v11 + 1736);
    float v15 = sub_1000FF7A8();

    if (v13 > v15) {
      __break(1u);
    }
    return;
  }
  if (qword_10035A520 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1003AC750;
  id v2 = *(id *)(qword_1003AC750 + 1656);
  float v3 = sub_1000FF7A8();

  id v4 = *(id *)(v1 + 1728);
  float v5 = sub_1000FF7A8();

  if (v3 > v5)
  {
    __break(1u);
    goto LABEL_7;
  }
}

uint64_t sub_10014E598(char *a1, unsigned __int8 *a2)
{
  return sub_10005CDE8(*a1, *a2);
}

Swift::Int sub_10014E5A4()
{
  return Hasher._finalize()();
}

uint64_t sub_10014E640()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10014E6C8()
{
  return Hasher._finalize()();
}

unint64_t sub_10014E760@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10014E960(*a1);
  *a2 = result;
  return result;
}

void sub_10014E790(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = 0x656772616CLL;
  if (v2 != 1) {
    uint64_t v4 = 0x726568746FLL;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0x746C7561666564;
  }
  if (!v5) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v6;
  a1[1] = v3;
}

void sub_10014E7E8(void *a1@<X8>)
{
  *a1 = &off_10031E698;
}

uint64_t sub_10014E7F8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10014E858()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_10014E8AC()
{
  unint64_t result = qword_100368CC8;
  if (!qword_100368CC8)
  {
    sub_10000A3D0(&qword_100368CD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368CC8);
  }
  return result;
}

unint64_t sub_10014E90C()
{
  unint64_t result = qword_100368CD8;
  if (!qword_100368CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368CD8);
  }
  return result;
}

unint64_t sub_10014E960(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10031E890, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_10014E9AC()
{
  unint64_t result = qword_100368CE0[0];
  if (!qword_100368CE0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100368CE0);
  }
  return result;
}

uint64_t sub_10014EA00@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10031D660;
  return sub_100152E68(a1, v2, a2);
}

uint64_t sub_10014EA0C@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10031D8B8;
  return sub_100152E68(a1, v2, a2);
}

unint64_t sub_10014EA18@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100047BEC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014EA40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10000DBEC(a1, a2);
  *a3 = 12;
  return result;
}

unint64_t sub_10014EA6C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100047C38(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014EA94@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10000DBEC(a1, a2);
  *a3 = 3;
  return result;
}

uint64_t sub_10014EAC0@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10031D3E8;
  return sub_100152E68(a1, v2, a2);
}

unint64_t sub_10014EACC@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000B0484(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014EAF4@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10031DDA8;
  return sub_100152E68(a1, v2, a2);
}

unint64_t sub_10014EB00@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000B0490(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10014EB28@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v4 = sub_100153C80(a1, a2);
  if ((v5 & 1) != 0 || (unint64_t result = sub_1000B342C(v4), result == 5)) {
    unint64_t result = 5;
  }
  *a3 = result;
  return result;
}

uint64_t sub_10014EB68@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10000DBEC(a1, a2);
  *a3 = 5;
  return result;
}

uint64_t sub_10014EB94@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10014EBD4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_10000DBEC(a1, a2);
  *a3 = 0;
  return result;
}

uint64_t sub_10014EBFC()
{
  String.append(_:)(*(Swift::String *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x68)));
  return 45;
}

uint64_t sub_10014EC64@<X0>(uint64_t a1@<X8>)
{
  NSString v2 = v1;
  unint64_t v4 = (void *)(swift_isaMask & *v1);
  uint64_t v5 = v4[10];
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = __chkstk_darwin(v6);
  id v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  id v12 = (char *)&v67 - v11;
  __chkstk_darwin(v10);
  float v15 = (char *)&v67 - v14;
  uint64_t v16 = *(void **)((char *)v2 + v4[14]);
  if (v16)
  {
    uint64_t v74 = v13;
    uint64_t v75 = a1;
    v71 = v4;
    uint64_t v17 = (void *)((char *)v2 + v4[13]);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    id v20 = v16;
    uint64_t v72 = (void *)v18;
    NSString v21 = String._bridgeToObjectiveC()();
    id v22 = [v20 objectForKey:v21];

    if (v22)
    {
      id v73 = v20;
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_100027B00(v77, v78);
      sub_100027B10((uint64_t)v78, (uint64_t)v77);
      char v23 = swift_dynamicCast();
      uint64_t v24 = *(void *)(v5 - 8);
      uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
      if (v23)
      {
        v25(v15, 0, 1, v5);

        sub_10000CC5C((uint64_t)v78);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v75, v15, v5);
      }
      else
      {
        unsigned __int8 v70 = *(uint64_t (***)(void, void, void))(v5 - 8);
        v25(v15, 1, 1, v5);
        int v29 = *(void (**)(char *, uint64_t))(v74 + 8);
        v74 += 8;
        unsigned int v69 = v29;
        v29(v15, v6);
        uint64_t v30 = v72;
        NSString v31 = String._bridgeToObjectiveC()();
        id v32 = v73;
        id v33 = [v73 stringForKey:v31];

        if (v33)
        {
          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v36 = v35;

          uint64_t v37 = v36;
          int v38 = v70;
          (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v71[11] + 16))(v34, v37, v5, v71[11]);
          if (((uint64_t (**)(char *, uint64_t, uint64_t))v38)[6](v12, 1, v5) == 1)
          {
            v69(v12, v6);
            v76 = v2;
            *(void *)&v77[0] = 0;
            *((void *)&v77[0] + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(81);
            v39._object = (void *)0x80000001002BE570;
            v39._countAndFlagsBits = 0xD00000000000004ELL;
            String.append(_:)(v39);
            uint64_t v40 = v72;
            swift_bridgeObjectRetain();
            v41._countAndFlagsBits = v19;
            v41._object = v40;
            String.append(_:)(v41);
            swift_bridgeObjectRelease();
            v42._countAndFlagsBits = 125;
            v42._object = (void *)0xE100000000000000;
            String.append(_:)(v42);
            long long v43 = v77[0];
            uint64_t v44 = type metadata accessor for UserDefault();
            sub_10016AECC(90, v43, *((void **)&v43 + 1), 0, v44, (uint64_t)&off_10032A638);
            swift_bridgeObjectRelease();

            sub_10000CC5C((uint64_t)v78);
            return ((uint64_t (**)(uint64_t, char *, uint64_t))v38)[2](v75, (char *)v2 + *(void *)((swift_isaMask & *v2) + 0x60), v5);
          }
          else
          {
            sub_10000CC5C((uint64_t)v78);

            return ((uint64_t (**)(uint64_t, char *, uint64_t))v38)[4](v75, v12, v5);
          }
        }
        else
        {
          NSString v45 = String._bridgeToObjectiveC()();
          id v46 = [v32 dataForKey:v45];

          if (v46)
          {
            uint64_t v67 = v19;
            uint64_t v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v49 = v48;

            uint64_t v50 = v71[11];
            uint64_t v51 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v50 + 24);
            sub_10001F8BC(v47, v49);
            uint64_t v68 = v47;
            uint64_t v52 = v47;
            long long v53 = v70;
            v71 = (void *)v49;
            v51(v52, v49, v5, v50);
            int v54 = ((uint64_t (**)(char *, uint64_t, uint64_t))v53)[6](v9, 1, v5);
            uint64_t v55 = v75;
            if (v54 == 1)
            {
              v69(v9, v6);
              v76 = v2;
              *(void *)&v77[0] = 0;
              *((void *)&v77[0] + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(81);
              v56._object = (void *)0x80000001002BE570;
              v56._countAndFlagsBits = 0xD00000000000004ELL;
              String.append(_:)(v56);
              uint64_t v57 = v72;
              swift_bridgeObjectRetain();
              v58._countAndFlagsBits = v67;
              v58._object = v57;
              String.append(_:)(v58);
              swift_bridgeObjectRelease();
              v59._countAndFlagsBits = 125;
              v59._object = (void *)0xE100000000000000;
              String.append(_:)(v59);
              long long v60 = v77[0];
              uint64_t v61 = type metadata accessor for UserDefault();
              sub_10016AECC(90, v60, *((void **)&v60 + 1), 0, v61, (uint64_t)&off_10032A638);
              swift_bridgeObjectRelease();

              sub_10000DBEC(v68, (unint64_t)v71);
              sub_10000CC5C((uint64_t)v78);
              return ((uint64_t (**)(uint64_t, char *, uint64_t))v53)[2](v55, (char *)v2 + *(void *)((swift_isaMask & *v2) + 0x60), v5);
            }
            else
            {
              sub_10000CC5C((uint64_t)v78);

              sub_10000DBEC(v68, (unint64_t)v71);
              return ((uint64_t (**)(uint64_t, char *, uint64_t))v53)[4](v55, v9, v5);
            }
          }
          else
          {
            v76 = v2;
            *(void *)&v77[0] = 0;
            *((void *)&v77[0] + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(93);
            v62._countAndFlagsBits = 0xD00000000000005ALL;
            v62._object = (void *)0x80000001002BE510;
            String.append(_:)(v62);
            swift_bridgeObjectRetain();
            v63._countAndFlagsBits = v19;
            v63._object = v30;
            String.append(_:)(v63);
            swift_bridgeObjectRelease();
            v64._countAndFlagsBits = 125;
            v64._object = (void *)0xE100000000000000;
            String.append(_:)(v64);
            long long v65 = v77[0];
            uint64_t v66 = type metadata accessor for UserDefault();
            sub_10016AECC(90, v65, *((void **)&v65 + 1), 0, v66, (uint64_t)&off_10032A638);
            swift_bridgeObjectRelease();

            sub_10000CC5C((uint64_t)v78);
            return ((uint64_t (**)(uint64_t, char *, uint64_t))v70)[2](v75, (char *)v2 + *(void *)((swift_isaMask & *v2) + 0x60), v5);
          }
        }
      }
    }

    unint64_t v4 = (void *)(swift_isaMask & *v2);
    a1 = v75;
  }
  uint64_t v27 = (char *)v2 + v4[12];
  uint64_t v28 = *(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 16);

  return v28(a1, v27, v5);
}

id sub_10014F4FC()
{
  uint64_t v1 = *(void **)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x70));
  if (v1)
  {
    id v2 = v1;
    swift_bridgeObjectRetain();
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v2 removeObserver:v0 forKeyPath:v3 context:0];
  }
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for UserDefault();
  return [super dealloc];
}

id sub_10014F600(void *a1)
{
  id v1 = a1;
  return sub_10014F4FC();
}

uint64_t sub_10014F628(char *a1)
{
  (*(void (**)(char *))(*(void *)(*(void *)((swift_isaMask & *(void *)a1) + 0x50) - 8) + 8))(&a1[*(void *)((swift_isaMask & *(void *)a1) + 0x60)]);
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_10014F72C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    memset(v13, 0, sizeof(v13));
    id v10 = a5;
    id v11 = a1;
    if (!a5) {
      goto LABEL_7;
    }
    goto LABEL_4;
  }
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  swift_unknownObjectRetain();
  id v8 = a5;
  id v9 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  if (a5)
  {
LABEL_4:
    type metadata accessor for NSKeyValueChangeKey(0);
    sub_100155428((unint64_t *)&qword_10035ADE0, type metadata accessor for NSKeyValueChangeKey);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
LABEL_7:
  sub_10015422C((uint64_t)v13);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_10000D78C((uint64_t)v13, &qword_100371910);
}

void sub_10014F854()
{
}

uint64_t sub_10014F898()
{
  return sub_10014EBFC();
}

uint64_t sub_10014F8BC(char a1)
{
  uint64_t result = 1819242338;
  switch(a1)
  {
    case 1:
      uint64_t result = 1635017060;
      break;
    case 2:
      uint64_t result = 1702125924;
      break;
    case 3:
      uint64_t result = 0x656C62756F64;
      break;
    case 4:
      uint64_t result = 7630441;
      break;
    case 5:
      uint64_t result = 0x676E69727473;
      break;
    case 6:
      uint64_t result = 0x3233746E6975;
      break;
    case 7:
      uint64_t result = 7107189;
      break;
    case 8:
      uint64_t result = 1684632949;
      break;
    case 9:
      uint64_t result = 1701736302;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10014F9A4(void *a1)
{
  uint64_t v88 = sub_10000A38C(&qword_100368ED8);
  uint64_t v86 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  v84 = (char *)&v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000A38C(&qword_100368EE0);
  uint64_t v91 = *(void *)(v3 - 8);
  uint64_t v92 = v3;
  __chkstk_darwin(v3);
  v87 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v89 = *(void *)(v5 - 8);
  uint64_t v90 = v5;
  __chkstk_darwin(v5);
  v85 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_100368EE8);
  uint64_t v82 = *(void *)(v7 - 8);
  uint64_t v83 = v7;
  __chkstk_darwin(v7);
  v79 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v80 = *(void *)(v9 - 8);
  uint64_t v81 = v9;
  __chkstk_darwin(v9);
  v78 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000A38C(&qword_100368EF0);
  uint64_t v76 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  id v73 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000A38C(&qword_100368EF8);
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v72 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000A38C(&qword_100368F00);
  uint64_t v70 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  unsigned int v69 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_10000A38C(&qword_100368F08);
  uint64_t v65 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v61 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_10000A38C(&qword_100368F10);
  uint64_t v67 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  Swift::String v62 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for Date();
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  long long v60 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000A38C(&qword_100368F18);
  uint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000A38C(&qword_100368F20);
  uint64_t v57 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  NSString v21 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for UserDefaultsRepresentation();
  __chkstk_darwin(v22);
  uint64_t v24 = (uint64_t *)((char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = sub_10000A38C(&qword_100368F28);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v94 = v25;
  uint64_t v95 = v26;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100154F70();
  v93 = v28;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1001553C4(v96, (uint64_t)v24);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v32 = *v24;
      unint64_t v33 = v24[1];
      LOBYTE(v97) = 1;
      sub_1001552C8();
      uint64_t v35 = v93;
      uint64_t v34 = v94;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v97 = v32;
      unint64_t v98 = v33;
      sub_100155470();
      uint64_t v36 = v59;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v18, v36);
      (*(void (**)(char *, uint64_t))(v95 + 8))(v35, v34);
      return sub_10000DBEC(v32, v33);
    case 2u:
      uint64_t v37 = v63;
      int v38 = v60;
      uint64_t v39 = v64;
      (*(void (**)(char *, uint64_t *, uint64_t))(v63 + 32))(v60, v24, v64);
      LOBYTE(v97) = 2;
      sub_100155274();
      uint64_t v40 = v62;
      Swift::String v42 = v93;
      uint64_t v41 = v94;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_100155428(&qword_100366018, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v43 = v68;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v44 = v67;
      goto LABEL_12;
    case 3u:
      LOBYTE(v97) = 3;
      sub_100155220();
      NSString v45 = v61;
      uint64_t v47 = v93;
      uint64_t v46 = v94;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v48 = v66;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v45, v48);
      return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v47, v46);
    case 4u:
      LOBYTE(v97) = 4;
      sub_1001551CC();
      unint64_t v49 = v69;
      Swift::String v42 = v93;
      uint64_t v41 = v94;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v50 = v71;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v51 = &v99;
      goto LABEL_9;
    case 5u:
      LOBYTE(v97) = 5;
      sub_100155178();
      uint64_t v52 = v72;
      Swift::String v42 = v93;
      uint64_t v41 = v94;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v53 = v75;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v74 + 8))(v52, v53);
      goto LABEL_13;
    case 6u:
      LOBYTE(v97) = 6;
      sub_100155124();
      unint64_t v49 = v73;
      Swift::String v42 = v93;
      uint64_t v41 = v94;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v50 = v77;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v51 = &v100;
LABEL_9:
      (*(void (**)(char *, uint64_t))(*(v51 - 32) + 8))(v49, v50);
      goto LABEL_13;
    case 7u:
      uint64_t v37 = v80;
      uint64_t v39 = v81;
      int v38 = v78;
      (*(void (**)(char *, uint64_t *, uint64_t))(v80 + 32))(v78, v24, v81);
      LOBYTE(v97) = 7;
      sub_1001550D0();
      uint64_t v40 = v79;
      Swift::String v42 = v93;
      uint64_t v41 = v94;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_100155428(&qword_100368F30, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v43 = v83;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v44 = v82;
      goto LABEL_12;
    case 8u:
      uint64_t v37 = v89;
      uint64_t v39 = v90;
      int v38 = v85;
      (*(void (**)(char *, uint64_t *, uint64_t))(v89 + 32))(v85, v24, v90);
      LOBYTE(v97) = 8;
      sub_10015507C();
      uint64_t v40 = v87;
      Swift::String v42 = v93;
      uint64_t v41 = v94;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_100155428(&qword_100363E00, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v43 = v92;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v44 = v91;
LABEL_12:
      (*(void (**)(char *, uint64_t))(v44 + 8))(v40, v43);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
LABEL_13:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v42, v41);
      break;
    case 9u:
      LOBYTE(v97) = 9;
      sub_100154FC4();
      int v54 = v84;
      Swift::String v56 = v93;
      uint64_t v55 = v94;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v86 + 8))(v54, v88);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v56, v55);
      break;
    default:
      LOBYTE(v97) = 0;
      sub_100155370();
      uint64_t v30 = v93;
      uint64_t v29 = v94;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v21, v19);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v30, v29);
      break;
  }
  return result;
}

uint64_t sub_100150878@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v157 = a2;
  uint64_t v141 = sub_10000A38C(&qword_100368E18);
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  v149 = (char *)&v113 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = sub_10000A38C(&qword_100368E20);
  uint64_t v142 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  v150 = (char *)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_10000A38C(&qword_100368E28);
  uint64_t v138 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  v148 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = sub_10000A38C(&qword_100368E30);
  uint64_t v136 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  v147 = (char *)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = sub_10000A38C(&qword_100368E38);
  uint64_t v134 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  v146 = (char *)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_10000A38C(&qword_100368E40);
  uint64_t v132 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  v145 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_10000A38C(&qword_100368E48);
  uint64_t v130 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  v144 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_10000A38C(&qword_100368E50);
  uint64_t v129 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  v155 = (char *)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = sub_10000A38C(&qword_100368E58);
  uint64_t v127 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  v154 = (char *)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_10000A38C(&qword_100368E60);
  uint64_t v124 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  v143 = (char *)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_10000A38C(&qword_100368E68);
  uint64_t v152 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  uint64_t v14 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = type metadata accessor for UserDefaultsRepresentation();
  uint64_t v15 = __chkstk_darwin(v151);
  v123 = (char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  v122 = (char *)&v113 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v121 = (uint64_t *)((char *)&v113 - v20);
  uint64_t v21 = __chkstk_darwin(v19);
  v120 = (uint64_t *)((char *)&v113 - v22);
  uint64_t v23 = __chkstk_darwin(v21);
  v119 = (uint64_t *)((char *)&v113 - v24);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v113 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = (char *)&v113 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  unint64_t v33 = (char *)&v113 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (char *)&v113 - v35;
  __chkstk_darwin(v34);
  int v38 = (char *)&v113 - v37;
  uint64_t v39 = a1[3];
  v159 = a1;
  sub_10000D6E4(a1, v39);
  sub_100154F70();
  v153 = v14;
  uint64_t v40 = v160;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v160 = v40;
  if (v40)
  {
    uint64_t v41 = (uint64_t)v159;
  }
  else
  {
    v114 = v36;
    v115 = v33;
    v116 = v27;
    v117 = v30;
    Swift::String v42 = v154;
    uint64_t v43 = v155;
    uint64_t v44 = v156;
    v118 = v38;
    uint64_t v46 = v157;
    uint64_t v45 = v158;
    uint64_t v47 = v153;
    uint64_t v48 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v48 + 16) == 1)
    {
      switch(*(unsigned char *)(v48 + 32))
      {
        case 1:
          LOBYTE(v161) = 1;
          sub_1001552C8();
          long long v60 = v42;
          uint64_t v61 = v160;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v62 = v45;
          uint64_t v41 = (uint64_t)v159;
          uint64_t v160 = v61;
          if (v61)
          {
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v152 + 8))(v47, v62);
          }
          else
          {
            sub_10015531C();
            uint64_t v94 = v128;
            uint64_t v95 = v160;
            KeyedDecodingContainer.decode<A>(_:forKey:)();
            (*(void (**)(char *, uint64_t))(v127 + 8))(v60, v94);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v152 + 8))(v47, v62);
            uint64_t v160 = v95;
            if (!v95)
            {
              int v54 = v115;
              _OWORD *v115 = v161;
              goto LABEL_38;
            }
          }
          return sub_10000CC5C(v41);
        case 2:
          LOBYTE(v161) = 2;
          sub_100155274();
          uint64_t v63 = v43;
          uint64_t v64 = v160;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v65 = v45;
          uint64_t v41 = (uint64_t)v159;
          uint64_t v160 = v64;
          if (v64) {
            goto LABEL_27;
          }
          type metadata accessor for Date();
          sub_100155428(&qword_100366008, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v66 = v117;
          uint64_t v67 = v131;
          uint64_t v68 = v160;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v160 = v68;
          unsigned int v69 = (uint64_t *)&v161;
          if (v68) {
            goto LABEL_25;
          }
          (*(void (**)(char *, uint64_t))(v129 + 8))(v63, v67);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v152 + 8))(v47, v158);
          goto LABEL_42;
        case 3:
          LOBYTE(v161) = 3;
          sub_100155220();
          uint64_t v70 = v144;
          uint64_t v71 = v160;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v51 = v45;
          uint64_t v41 = (uint64_t)v159;
          uint64_t v160 = v71;
          if (v71) {
            goto LABEL_22;
          }
          uint64_t v72 = v126;
          KeyedDecodingContainer.decode(_:forKey:)();
          uint64_t v73 = v152;
          uint64_t v160 = 0;
          uint64_t v102 = v101;
          (*(void (**)(char *, uint64_t))(v130 + 8))(v70, v72);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v73 + 8))(v47, v51);
          int v54 = v116;
          void *v116 = v102;
          goto LABEL_38;
        case 4:
          LOBYTE(v161) = 4;
          sub_1001551CC();
          uint64_t v74 = v145;
          uint64_t v75 = v160;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v51 = v45;
          uint64_t v41 = (uint64_t)v159;
          uint64_t v160 = v75;
          if (v75) {
            goto LABEL_22;
          }
          uint64_t v76 = v133;
          uint64_t v77 = KeyedDecodingContainer.decode(_:forKey:)();
          v78 = v74;
          uint64_t v79 = v152;
          uint64_t v160 = 0;
          uint64_t v104 = v77;
          (*(void (**)(char *, uint64_t))(v132 + 8))(v78, v76);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v79 + 8))(v47, v51);
          v105 = v119;
          uint64_t *v119 = v104;
          goto LABEL_40;
        case 5:
          LOBYTE(v161) = 5;
          sub_100155178();
          uint64_t v80 = v146;
          uint64_t v81 = v160;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v160 = v81;
          if (!v81)
          {
            uint64_t v82 = v135;
            uint64_t v83 = KeyedDecodingContainer.decode(_:forKey:)();
            uint64_t v160 = 0;
            uint64_t v106 = v83;
            uint64_t v108 = v107;
            (*(void (**)(char *, uint64_t))(v134 + 8))(v80, v82);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v152 + 8))(v47, v45);
            uint64_t v109 = (uint64_t)v120;
            uint64_t *v120 = v106;
            *(void *)(v109 + 8) = v108;
            swift_storeEnumTagMultiPayload();
            uint64_t v110 = (uint64_t)v118;
            sub_100155018(v109, (uint64_t)v118);
            uint64_t v41 = (uint64_t)v159;
            goto LABEL_44;
          }
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v152 + 8))(v47, v45);
          goto LABEL_8;
        case 6:
          LOBYTE(v161) = 6;
          sub_100155124();
          v84 = v147;
          uint64_t v85 = v160;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v51 = v45;
          uint64_t v41 = (uint64_t)v159;
          uint64_t v160 = v85;
          if (v85) {
            goto LABEL_22;
          }
          uint64_t v96 = v137;
          int v97 = KeyedDecodingContainer.decode(_:forKey:)();
          unint64_t v98 = v84;
          uint64_t v99 = v152;
          uint64_t v160 = 0;
          int v111 = v97;
          (*(void (**)(char *, uint64_t))(v136 + 8))(v98, v96);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v99 + 8))(v47, v51);
          v105 = v121;
          *(_DWORD *)v121 = v111;
LABEL_40:
          swift_storeEnumTagMultiPayload();
          uint64_t v103 = (uint64_t)v105;
          goto LABEL_43;
        case 7:
          LOBYTE(v161) = 7;
          sub_1001550D0();
          uint64_t v63 = v148;
          uint64_t v86 = v160;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v65 = v45;
          uint64_t v41 = (uint64_t)v159;
          uint64_t v160 = v86;
          if (v86) {
            goto LABEL_27;
          }
          type metadata accessor for URL();
          sub_100155428(&qword_100368E90, (void (*)(uint64_t))&type metadata accessor for URL);
          uint64_t v66 = v122;
          uint64_t v67 = v139;
          uint64_t v87 = v160;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v160 = v87;
          unsigned int v69 = &v162;
          if (v87)
          {
LABEL_25:
            (*(void (**)(char *, uint64_t))(*(v69 - 32) + 8))(v63, v67);
            goto LABEL_35;
          }
          (*(void (**)(char *, uint64_t))(v138 + 8))(v63, v67);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v152 + 8))(v47, v158);
          goto LABEL_42;
        case 8:
          uint64_t v88 = v44;
          LOBYTE(v161) = 8;
          sub_10015507C();
          uint64_t v89 = v150;
          uint64_t v90 = v160;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v65 = v45;
          uint64_t v41 = (uint64_t)v159;
          uint64_t v160 = v90;
          if (v90)
          {
LABEL_27:
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v152 + 8))(v47, v65);
            return sub_10000CC5C(v41);
          }
          type metadata accessor for UUID();
          sub_100155428(&qword_100363E18, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v66 = v123;
          uint64_t v100 = v160;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v160 = v100;
          if (v100)
          {
            (*(void (**)(char *, uint64_t))(v142 + 8))(v89, v88);
LABEL_35:
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v152 + 8))(v47, v158);
            return sub_10000CC5C(v41);
          }
          (*(void (**)(char *, uint64_t))(v142 + 8))(v89, v88);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v152 + 8))(v47, v158);
LABEL_42:
          swift_storeEnumTagMultiPayload();
          uint64_t v103 = (uint64_t)v66;
          goto LABEL_43;
        case 9:
          LOBYTE(v161) = 9;
          sub_100154FC4();
          uint64_t v91 = v149;
          uint64_t v92 = v160;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v93 = v45;
          uint64_t v41 = (uint64_t)v159;
          uint64_t v160 = v92;
          if (v92)
          {
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v152 + 8))(v47, v93);
            return sub_10000CC5C(v41);
          }
          (*(void (**)(char *, uint64_t))(v140 + 8))(v91, v141);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v152 + 8))(v47, v93);
          uint64_t v110 = (uint64_t)v118;
          swift_storeEnumTagMultiPayload();
          goto LABEL_44;
        default:
          LOBYTE(v161) = 0;
          sub_100155370();
          unint64_t v49 = v143;
          uint64_t v50 = v160;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v51 = v45;
          uint64_t v41 = (uint64_t)v159;
          uint64_t v160 = v50;
          if (v50)
          {
LABEL_22:
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v152 + 8))(v47, v51);
          }
          else
          {
            uint64_t v52 = v125;
            char v53 = KeyedDecodingContainer.decode(_:forKey:)();
            (*(void (**)(char *, uint64_t))(v124 + 8))(v49, v52);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v152 + 8))(v47, v51);
            uint64_t v160 = 0;
            int v54 = v114;
            unsigned char *v114 = v53 & 1;
LABEL_38:
            swift_storeEnumTagMultiPayload();
            uint64_t v103 = (uint64_t)v54;
LABEL_43:
            uint64_t v110 = (uint64_t)v118;
            sub_100155018(v103, (uint64_t)v118);
LABEL_44:
            sub_100155018(v110, v46);
          }
          break;
      }
    }
    else
    {
      uint64_t v55 = type metadata accessor for DecodingError();
      uint64_t v56 = swift_allocError();
      uint64_t v57 = v45;
      uint64_t v59 = v58;
      sub_10000A38C(&qword_10035FAC0);
      *uint64_t v59 = v151;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v55 - 8) + 104))(v59, enum case for DecodingError.typeMismatch(_:), v55);
      uint64_t v160 = v56;
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v152 + 8))(v47, v57);
LABEL_8:
      uint64_t v41 = (uint64_t)v159;
    }
  }
  return sub_10000CC5C(v41);
}

uint64_t sub_100151CCC(uint64_t a1)
{
  unint64_t v2 = sub_100155370();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100151D08(uint64_t a1)
{
  unint64_t v2 = sub_100155370();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100151D44()
{
  return sub_10014F8BC(*v0);
}

uint64_t sub_100151D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100156230(a1, a2);
  *a3 = result;
  return result;
}

void sub_100151D74(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_100151D80(uint64_t a1)
{
  unint64_t v2 = sub_100154F70();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100151DBC(uint64_t a1)
{
  unint64_t v2 = sub_100154F70();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100151DF8(uint64_t a1)
{
  unint64_t v2 = sub_1001552C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100151E34(uint64_t a1)
{
  unint64_t v2 = sub_1001552C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100151E70(uint64_t a1)
{
  unint64_t v2 = sub_100155274();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100151EAC(uint64_t a1)
{
  unint64_t v2 = sub_100155274();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100151EE8(uint64_t a1)
{
  unint64_t v2 = sub_100155220();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100151F24(uint64_t a1)
{
  unint64_t v2 = sub_100155220();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100151F60(uint64_t a1)
{
  unint64_t v2 = sub_1001551CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100151F9C(uint64_t a1)
{
  unint64_t v2 = sub_1001551CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100151FD8(uint64_t a1)
{
  unint64_t v2 = sub_100154FC4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100152014(uint64_t a1)
{
  unint64_t v2 = sub_100154FC4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100152050(uint64_t a1)
{
  unint64_t v2 = sub_100155178();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015208C(uint64_t a1)
{
  unint64_t v2 = sub_100155178();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001520C8(uint64_t a1)
{
  unint64_t v2 = sub_100155124();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100152104(uint64_t a1)
{
  unint64_t v2 = sub_100155124();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100152140(uint64_t a1)
{
  unint64_t v2 = sub_1001550D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015217C(uint64_t a1)
{
  unint64_t v2 = sub_1001550D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001521B8(uint64_t a1)
{
  unint64_t v2 = sub_10015507C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001521F4(uint64_t a1)
{
  unint64_t v2 = sub_10015507C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100152230@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100150878(a1, a2);
}

uint64_t sub_100152248(void *a1)
{
  return sub_10014F9A4(a1);
}

uint64_t sub_100152260@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100153BA8();
  *a1 = result;
  return result;
}

uint64_t sub_100152288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100152510(a1, a2, (uint64_t)sub_1001565CC, a3);
}

uint64_t sub_1001522A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10000DBEC(a1, a2);
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 1;
  return result;
}

double sub_1001522D0@<D0>(_OWORD *a1@<X8>)
{
  swift_bridgeObjectRelease();
  double result = 0.0;
  *a1 = xmmword_10029C260;
  return result;
}

double sub_100152304@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  sub_10000DBEC(a1, a2);
  double result = 0.0;
  *a3 = xmmword_10029C260;
  return result;
}

uint64_t sub_100152334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date.ISO8601FormatStyle();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[2] = a1;
  v12[3] = a2;
  static ParseStrategy<>.iso8601.getter();
  sub_100155428(&qword_100366240, (void (*)(uint64_t))&type metadata accessor for Date.ISO8601FormatStyle);
  Date.init<A>(_:strategy:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v10, v7);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a3, 0, 1, v7);
}

uint64_t sub_1001524F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100152510(a1, a2, (uint64_t)sub_100154390, a3);
}

uint64_t sub_100152510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v9 = 0;
  v8[2] = &v9;
  char v5 = sub_100103AC4(a3, (uint64_t)v8, a1, a2);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = v9;
  if ((v5 & 1) == 0) {
    uint64_t v7 = 0;
  }
  *(void *)a4 = v7;
  *(unsigned char *)(a4 + 8) = (v5 & 1) == 0;
  return result;
}

uint64_t sub_100152590@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v8 = 0;
  v7[2] = &v8;
  char v4 = sub_100103AC4((uint64_t)sub_100154374, (uint64_t)v7, a1, a2);
  uint64_t result = swift_bridgeObjectRelease();
  int v6 = v8;
  if ((v4 & 1) == 0) {
    int v6 = 0;
  }
  *(_DWORD *)a3 = v6;
  *(unsigned char *)(a3 + 4) = (v4 & 1) == 0;
  return result;
}

uint64_t sub_100152620@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10000DBEC(a1, a2);
  *(_DWORD *)a3 = 0;
  *(unsigned char *)(a3 + 4) = 1;
  return result;
}

uint64_t sub_100152650@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_100153C80(a1, a2);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5 & 1;
  return result;
}

uint64_t sub_100152680@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_100152688@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_10000DBEC(a1, a2);
  *a3 = 0;
  a3[1] = 0;
  return result;
}

uint64_t sub_1001526B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_100153F50(a1, a2);
  *(_DWORD *)a3 = result;
  *(unsigned char *)(a3 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_1001526E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100152720(a1, a2, a3, &qword_100360050, (void (*)(uint64_t, uint64_t))&URL.init(string:), a4);
}

uint64_t sub_100152700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100152720(a1, a2, a3, &qword_10036C090, (void (*)(uint64_t, uint64_t))&UUID.init(uuidString:), a4);
}

uint64_t sub_100152720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X4>, void (*a5)(uint64_t, uint64_t)@<X5>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_10000A38C(a4);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  a5(a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a3) == 1)
  {
    sub_10000D78C((uint64_t)v14, a4);
    uint64_t v16 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a6, v14, a3);
    uint64_t v16 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a6, v16, 1, a3);
}

uint64_t sub_100152878@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_10000DBEC(a1, a2);
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);

  return v6(a4, 1, 1, a3);
}

uint64_t sub_1001528E4(uint64_t a1, unint64_t a2)
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for Dictionary();
  swift_getWitnessTable();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_10000DBEC(a1, a2);
  swift_release();
  return v5;
}

uint64_t sub_1001529EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = variable initialization expression of ProximityHandoffService.client();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100152A44@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_1001528E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100152A88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v24 = a5;
  uint64_t v9 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v23 - v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(a1, a2, a3, a4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v16, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    uint64_t v19 = 1;
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v20(v11, v16, a3);
    v20(v18, v11, a3);
    uint64_t v19 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v18, v19, 1, a3);
  uint64_t v21 = v24;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v24, v18, v12);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, v12);
}

uint64_t sub_100152CF8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10000DBEC(a1, a2);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a3, 1, 1, v4);
}

uint64_t sub_100152D70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_100152A88(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t sub_100152D7C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100152CF8(a1, a2, a3);
}

uint64_t sub_100152D84()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for UserDefault()
{
  return sub_10000F2E4();
}

uint64_t sub_100152E50@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10031D240;
  return sub_100152E68(a1, v2, a2);
}

uint64_t sub_100152E5C@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10031E8F8;
  return sub_100152E68(a1, v2, a2);
}

uint64_t sub_100152E68@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

uint64_t sub_100152EC8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10000DBEC(a1, a2);
  *a3 = 2;
  return result;
}

void *sub_100152EF4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10000A38C(&qword_100368D68);
  Swift::String v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100152F5C(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_100152FD8()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_100153058(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100153058(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_1001531B0(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          uint64_t v11 = sub_100152EF4(v9, 0),
          unint64_t v12 = sub_1001532B0((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_1001531B0(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_100152F5C(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_100152F5C(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t sub_1001532B0(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    v9[3] = a7;
    unsigned char v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_100152F5C(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_100152F5C(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unsigned __int8 *sub_1001534C4(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001536AC(a1, a2, a3);
}

unsigned __int8 *sub_1001534DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_100152FD8();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = sub_1001536AC(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1001535C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_100152FD8();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = sub_100153928(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

unsigned __int8 *sub_1001536AC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  unint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_100153928(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          char v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            unint64_t v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__CFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            unint64_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__CFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            unint64_t v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (v14 < v15) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100153BA8()
{
  Swift::String v0 = String.lowercased()();
  char v1 = sub_10002983C(v0._countAndFlagsBits, (uint64_t)v0._object, &off_10031D0F0);
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    return v1 & 1;
  }
  Swift::String v2 = String.lowercased()();
  swift_bridgeObjectRelease();
  char v3 = sub_10002983C(v2._countAndFlagsBits, (uint64_t)v2._object, &off_10031D160);
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  if (v3) {
    return v1 & 1;
  }
  return 2;
}

uint64_t sub_100153C80(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        unsigned __int8 v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        unsigned __int8 v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)sub_1001536AC(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_44;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_57;
      }
      if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      if (v3 != 2)
      {
        if ((BYTE2(result) - 48) > 9u) {
          goto LABEL_31;
        }
        uint64_t v7 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        uint64_t v10 = v3 - 3;
        if (v10)
        {
          char v11 = (unsigned __int8 *)v23 + 3;
          while (1)
          {
            unsigned int v12 = *v11 - 48;
            if (v12 > 9) {
              goto LABEL_31;
            }
            uint64_t v13 = 10 * v7;
            if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
              goto LABEL_31;
            }
            uint64_t v7 = v13 + v12;
            if (__OFADD__(v13, v12)) {
              goto LABEL_31;
            }
            char v9 = 0;
            ++v11;
            if (!--v10) {
              goto LABEL_44;
            }
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            if (v3 == 2)
            {
              char v9 = 0;
              uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
              goto LABEL_44;
            }
            if ((BYTE2(result) - 48) <= 9u)
            {
              uint64_t v7 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
              uint64_t v18 = v3 - 3;
              if (!v18) {
                goto LABEL_43;
              }
              unsigned __int8 v19 = (unsigned __int8 *)v23 + 3;
              while (1)
              {
                unsigned int v20 = *v19 - 48;
                if (v20 > 9) {
                  break;
                }
                uint64_t v21 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  break;
                }
                uint64_t v7 = v21 - v20;
                if (__OFSUB__(v21, v20)) {
                  break;
                }
                char v9 = 0;
                ++v19;
                if (!--v18) {
                  goto LABEL_44;
                }
              }
            }
          }
LABEL_31:
          uint64_t v7 = 0;
          char v9 = 1;
          goto LABEL_44;
        }
        __break(1u);
LABEL_57:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v7 = (result - 48);
      if (v3 != 1)
      {
        if ((BYTE1(result) - 48) > 9u) {
          goto LABEL_31;
        }
        uint64_t v7 = 10 * (result - 48) + (BYTE1(result) - 48);
        uint64_t v14 = v3 - 2;
        if (v14)
        {
          unsigned __int8 v15 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            unsigned int v16 = *v15 - 48;
            if (v16 > 9) {
              goto LABEL_31;
            }
            uint64_t v17 = 10 * v7;
            if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
              goto LABEL_31;
            }
            uint64_t v7 = v17 + v16;
            if (__OFADD__(v17, v16)) {
              goto LABEL_31;
            }
            char v9 = 0;
            ++v15;
            if (!--v14) {
              goto LABEL_44;
            }
          }
        }
      }
    }
LABEL_43:
    char v9 = 0;
    goto LABEL_44;
  }
  uint64_t v7 = (uint64_t)sub_1001534DC(result, a2, 10);
  char v9 = v22;
LABEL_44:
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t sub_100153F50(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
    LOBYTE(v17) = 1;
    return v18 | ((unint64_t)v17 << 32);
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v8 = sub_1001535C4(result, a2, 10);
    swift_bridgeObjectRelease();
    uint64_t v17 = HIDWORD(v8) & 1;
LABEL_38:
    uint64_t v18 = v8;
    if (v17) {
      uint64_t v18 = 0;
    }
    return v18 | ((unint64_t)v17 << 32);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0) {
      unsigned __int8 v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unsigned __int8 v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v7 = sub_100153928(v6, v4, 10);
    LODWORD(v8) = v7;
    char v30 = BYTE4(v7) & 1;
    char v9 = BYTE4(v7) & 1;
    goto LABEL_37;
  }
  v29[0] = result;
  v29[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v3)
    {
      if (v3 != 1)
      {
        LODWORD(v8) = (BYTE1(result) - 48);
        if (v8 <= 9)
        {
          if (v3 == 2) {
            goto LABEL_36;
          }
          if ((BYTE2(result) - 48) <= 9u)
          {
            LODWORD(v8) = 10 * v8 + (BYTE2(result) - 48);
            uint64_t v13 = v3 - 3;
            if (v13)
            {
              uint64_t v14 = (unsigned __int8 *)v29 + 3;
              while (1)
              {
                unsigned int v15 = *v14 - 48;
                if (v15 > 9) {
                  goto LABEL_33;
                }
                uint64_t v16 = 10 * v8;
                if ((v16 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_33;
                }
                LODWORD(v8) = v16 + v15;
                if (__CFADD__(v16, v15)) {
                  goto LABEL_33;
                }
                char v9 = 0;
                ++v14;
                if (!--v13) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_36;
          }
        }
      }
      goto LABEL_33;
    }
  }
  else
  {
    if (result != 45)
    {
      if (v3)
      {
        LODWORD(v8) = (result - 48);
        if (v8 <= 9)
        {
          if (v3 == 1) {
            goto LABEL_36;
          }
          if ((BYTE1(result) - 48) <= 9u)
          {
            LODWORD(v8) = 10 * v8 + (BYTE1(result) - 48);
            uint64_t v19 = v3 - 2;
            if (v19)
            {
              unsigned int v20 = (unsigned __int8 *)v29 + 2;
              while (1)
              {
                unsigned int v21 = *v20 - 48;
                if (v21 > 9) {
                  goto LABEL_33;
                }
                uint64_t v22 = 10 * v8;
                if ((v22 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_33;
                }
                LODWORD(v8) = v22 + v21;
                if (__CFADD__(v22, v21)) {
                  goto LABEL_33;
                }
                char v9 = 0;
                ++v20;
                if (!--v19) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_36;
          }
        }
      }
LABEL_33:
      LODWORD(v8) = 0;
LABEL_34:
      char v9 = 1;
      goto LABEL_37;
    }
    if (v3)
    {
      if (v3 != 1)
      {
        unsigned __int8 v10 = BYTE1(result) - 48;
        if ((BYTE1(result) - 48) <= 9u)
        {
          LODWORD(v8) = 0;
          BOOL v11 = v10 == 0;
          unsigned int v12 = -v10;
          if (!v11) {
            goto LABEL_34;
          }
          if (v3 == 2)
          {
            char v9 = 0;
            LODWORD(v8) = v12;
LABEL_37:
            swift_bridgeObjectRelease();
            LODWORD(v17) = v9 & 1;
            goto LABEL_38;
          }
          unsigned __int8 v23 = BYTE2(result) - 48;
          if ((BYTE2(result) - 48) <= 9u)
          {
            uint64_t v24 = 10 * v12;
            if ((v24 & 0xFFFFFFFF00000000) == 0)
            {
              LODWORD(v8) = v24 - v23;
              if (v24 >= v23)
              {
                uint64_t v25 = v3 - 3;
                if (v25)
                {
                  unsigned __int8 v26 = (unsigned __int8 *)v29 + 3;
                  while (1)
                  {
                    unsigned int v27 = *v26 - 48;
                    if (v27 > 9) {
                      goto LABEL_33;
                    }
                    uint64_t v28 = 10 * v8;
                    if ((v28 & 0xFFFFFFFF00000000) != 0) {
                      goto LABEL_33;
                    }
                    LODWORD(v8) = v28 - v27;
                    if (v28 < v27) {
                      goto LABEL_33;
                    }
                    char v9 = 0;
                    ++v26;
                    if (!--v25) {
                      goto LABEL_37;
                    }
                  }
                }
LABEL_36:
                char v9 = 0;
                goto LABEL_37;
              }
            }
          }
        }
      }
      goto LABEL_33;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10015422C(uint64_t a1)
{
  uint64_t v2 = *(void *)((swift_isaMask & *v1) + 0x50);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(a1);
  unsigned __int8 v6 = (char *)&v8 - v5;
  if (*(void *)((char *)v1 + *(void *)(v7 + 128)))
  {
    swift_retain();
    sub_10014EC64((uint64_t)v6);
    CurrentValueSubject.send(_:)();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return result;
}

void sub_100154344()
{
}

unsigned char *sub_100154374@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_100103A28(a1, a2);
}

unsigned char *sub_100154390@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1001039FC(a1, a2);
}

uint64_t *sub_1001543AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v8 = *a2;
        unint64_t v7 = a2[1];
        sub_10001F8BC(v8, v7);
        *a1 = v8;
        a1[1] = v7;
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v11 = type metadata accessor for Date();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        uint64_t v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        uint64_t v13 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        uint64_t v14 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1001545D4(uint64_t *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v3 = *a1;
      unint64_t v4 = a1[1];
      return sub_10000DBEC(v3, v4);
    case 2:
      uint64_t v5 = type metadata accessor for Date();
      goto LABEL_11;
    case 5:
      return swift_bridgeObjectRelease();
    case 7:
      uint64_t v5 = type metadata accessor for URL();
      goto LABEL_11;
    case 8:
      uint64_t v5 = type metadata accessor for UUID();
LABEL_11:
      uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 8);
      uint64_t result = v6(a1, v5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_1001546EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v7 = *a2;
      unint64_t v6 = a2[1];
      sub_10001F8BC(v7, v6);
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    case 2u:
      uint64_t v8 = type metadata accessor for Date();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      goto LABEL_8;
    case 5u:
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 7u:
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      goto LABEL_8;
    case 8u:
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *sub_1001548C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100154AAC((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v7 = *a2;
        unint64_t v6 = a2[1];
        sub_10001F8BC(v7, v6);
        *a1 = v7;
        a1[1] = v6;
        goto LABEL_9;
      case 2u:
        uint64_t v8 = type metadata accessor for Date();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        goto LABEL_9;
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 7u:
        uint64_t v9 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        goto LABEL_9;
      case 8u:
        uint64_t v10 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100154AAC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UserDefaultsRepresentation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for UserDefaultsRepresentation()
{
  uint64_t result = qword_100368DE0;
  if (!qword_100368DE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_100154B54(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 8:
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
      break;
    case 7:
      uint64_t v9 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
      break;
    case 2:
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_100154CBC(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100154AAC((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 8:
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
        break;
      case 7:
        uint64_t v9 = type metadata accessor for URL();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
        break;
      case 2:
        uint64_t v7 = type metadata accessor for Date();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100154E34()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for UUID();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_100154F70()
{
  unint64_t result = qword_100368E70;
  if (!qword_100368E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368E70);
  }
  return result;
}

unint64_t sub_100154FC4()
{
  unint64_t result = qword_100368E78;
  if (!qword_100368E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368E78);
  }
  return result;
}

uint64_t sub_100155018(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UserDefaultsRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10015507C()
{
  unint64_t result = qword_100368E80;
  if (!qword_100368E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368E80);
  }
  return result;
}

unint64_t sub_1001550D0()
{
  unint64_t result = qword_100368E88;
  if (!qword_100368E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368E88);
  }
  return result;
}

unint64_t sub_100155124()
{
  unint64_t result = qword_100368E98;
  if (!qword_100368E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368E98);
  }
  return result;
}

unint64_t sub_100155178()
{
  unint64_t result = qword_100368EA0;
  if (!qword_100368EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368EA0);
  }
  return result;
}

unint64_t sub_1001551CC()
{
  unint64_t result = qword_100368EA8;
  if (!qword_100368EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368EA8);
  }
  return result;
}

unint64_t sub_100155220()
{
  unint64_t result = qword_100368EB0;
  if (!qword_100368EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368EB0);
  }
  return result;
}

unint64_t sub_100155274()
{
  unint64_t result = qword_100368EB8;
  if (!qword_100368EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368EB8);
  }
  return result;
}

unint64_t sub_1001552C8()
{
  unint64_t result = qword_100368EC0;
  if (!qword_100368EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368EC0);
  }
  return result;
}

unint64_t sub_10015531C()
{
  unint64_t result = qword_100368EC8;
  if (!qword_100368EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368EC8);
  }
  return result;
}

unint64_t sub_100155370()
{
  unint64_t result = qword_100368ED0;
  if (!qword_100368ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368ED0);
  }
  return result;
}

uint64_t sub_1001553C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UserDefaultsRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100155428(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100155470()
{
  unint64_t result = qword_100368F38;
  if (!qword_100368F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368F38);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for UserDefaultsRepresentation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100155590);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserDefaultsRepresentation.CodingKeys()
{
  return &type metadata for UserDefaultsRepresentation.CodingKeys;
}

ValueMetadata *type metadata accessor for UserDefaultsRepresentation.BoolCodingKeys()
{
  return &type metadata for UserDefaultsRepresentation.BoolCodingKeys;
}

ValueMetadata *type metadata accessor for UserDefaultsRepresentation.DataCodingKeys()
{
  return &type metadata for UserDefaultsRepresentation.DataCodingKeys;
}

ValueMetadata *type metadata accessor for UserDefaultsRepresentation.DateCodingKeys()
{
  return &type metadata for UserDefaultsRepresentation.DateCodingKeys;
}

ValueMetadata *type metadata accessor for UserDefaultsRepresentation.DoubleCodingKeys()
{
  return &type metadata for UserDefaultsRepresentation.DoubleCodingKeys;
}

ValueMetadata *type metadata accessor for UserDefaultsRepresentation.IntCodingKeys()
{
  return &type metadata for UserDefaultsRepresentation.IntCodingKeys;
}

ValueMetadata *type metadata accessor for UserDefaultsRepresentation.StringCodingKeys()
{
  return &type metadata for UserDefaultsRepresentation.StringCodingKeys;
}

ValueMetadata *type metadata accessor for UserDefaultsRepresentation.Uint32CodingKeys()
{
  return &type metadata for UserDefaultsRepresentation.Uint32CodingKeys;
}

ValueMetadata *type metadata accessor for UserDefaultsRepresentation.UrlCodingKeys()
{
  return &type metadata for UserDefaultsRepresentation.UrlCodingKeys;
}

unsigned char *_s17proximitycontrold26UserDefaultsRepresentationO14BoolCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001556E8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserDefaultsRepresentation.UuidCodingKeys()
{
  return &type metadata for UserDefaultsRepresentation.UuidCodingKeys;
}

ValueMetadata *type metadata accessor for UserDefaultsRepresentation.NoneCodingKeys()
{
  return &type metadata for UserDefaultsRepresentation.NoneCodingKeys;
}

unint64_t sub_100155734()
{
  unint64_t result = qword_100368F40;
  if (!qword_100368F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368F40);
  }
  return result;
}

unint64_t sub_10015578C()
{
  unint64_t result = qword_100368F48;
  if (!qword_100368F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368F48);
  }
  return result;
}

unint64_t sub_1001557E4()
{
  unint64_t result = qword_100368F50;
  if (!qword_100368F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368F50);
  }
  return result;
}

unint64_t sub_10015583C()
{
  unint64_t result = qword_100368F58;
  if (!qword_100368F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368F58);
  }
  return result;
}

unint64_t sub_100155894()
{
  unint64_t result = qword_100368F60;
  if (!qword_100368F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368F60);
  }
  return result;
}

unint64_t sub_1001558EC()
{
  unint64_t result = qword_100368F68;
  if (!qword_100368F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368F68);
  }
  return result;
}

unint64_t sub_100155944()
{
  unint64_t result = qword_100368F70;
  if (!qword_100368F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368F70);
  }
  return result;
}

unint64_t sub_10015599C()
{
  unint64_t result = qword_100368F78;
  if (!qword_100368F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368F78);
  }
  return result;
}

unint64_t sub_1001559F4()
{
  unint64_t result = qword_100368F80;
  if (!qword_100368F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368F80);
  }
  return result;
}

unint64_t sub_100155A4C()
{
  unint64_t result = qword_100368F88;
  if (!qword_100368F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368F88);
  }
  return result;
}

unint64_t sub_100155AA4()
{
  unint64_t result = qword_100368F90;
  if (!qword_100368F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368F90);
  }
  return result;
}

unint64_t sub_100155AFC()
{
  unint64_t result = qword_100368F98;
  if (!qword_100368F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368F98);
  }
  return result;
}

unint64_t sub_100155B54()
{
  unint64_t result = qword_100368FA0;
  if (!qword_100368FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368FA0);
  }
  return result;
}

unint64_t sub_100155BAC()
{
  unint64_t result = qword_100368FA8;
  if (!qword_100368FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368FA8);
  }
  return result;
}

unint64_t sub_100155C04()
{
  unint64_t result = qword_100368FB0;
  if (!qword_100368FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368FB0);
  }
  return result;
}

unint64_t sub_100155C5C()
{
  unint64_t result = qword_100368FB8;
  if (!qword_100368FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368FB8);
  }
  return result;
}

unint64_t sub_100155CB4()
{
  unint64_t result = qword_100368FC0;
  if (!qword_100368FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368FC0);
  }
  return result;
}

unint64_t sub_100155D0C()
{
  unint64_t result = qword_100368FC8;
  if (!qword_100368FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368FC8);
  }
  return result;
}

unint64_t sub_100155D64()
{
  unint64_t result = qword_100368FD0;
  if (!qword_100368FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368FD0);
  }
  return result;
}

unint64_t sub_100155DBC()
{
  unint64_t result = qword_100368FD8;
  if (!qword_100368FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368FD8);
  }
  return result;
}

unint64_t sub_100155E14()
{
  unint64_t result = qword_100368FE0;
  if (!qword_100368FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368FE0);
  }
  return result;
}

unint64_t sub_100155E6C()
{
  unint64_t result = qword_100368FE8;
  if (!qword_100368FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368FE8);
  }
  return result;
}

unint64_t sub_100155EC4()
{
  unint64_t result = qword_100368FF0;
  if (!qword_100368FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368FF0);
  }
  return result;
}

unint64_t sub_100155F1C()
{
  unint64_t result = qword_100368FF8;
  if (!qword_100368FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368FF8);
  }
  return result;
}

unint64_t sub_100155F74()
{
  unint64_t result = qword_100369000;
  if (!qword_100369000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369000);
  }
  return result;
}

unint64_t sub_100155FCC()
{
  unint64_t result = qword_100369008;
  if (!qword_100369008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369008);
  }
  return result;
}

unint64_t sub_100156024()
{
  unint64_t result = qword_100369010;
  if (!qword_100369010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369010);
  }
  return result;
}

unint64_t sub_10015607C()
{
  unint64_t result = qword_100369018;
  if (!qword_100369018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369018);
  }
  return result;
}

unint64_t sub_1001560D4()
{
  unint64_t result = qword_100369020;
  if (!qword_100369020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369020);
  }
  return result;
}

unint64_t sub_10015612C()
{
  unint64_t result = qword_100369028;
  if (!qword_100369028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369028);
  }
  return result;
}

unint64_t sub_100156184()
{
  unint64_t result = qword_100369030;
  if (!qword_100369030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369030);
  }
  return result;
}

unint64_t sub_1001561DC()
{
  unint64_t result = qword_100369038;
  if (!qword_100369038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369038);
  }
  return result;
}

uint64_t sub_100156230(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1819242338 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C62756F64 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 7630441 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x676E69727473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x3233746E6975 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 1684632949 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 1701736302 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

unsigned char *sub_1001565CC@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_100154390(a1, a2);
}

uint64_t sub_1001565E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000A38C(qword_10035C0D8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10035C0A8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_100157FF8(a1, (uint64_t)v7);
  if (!v2)
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      sub_10000D78C((uint64_t)v7, qword_10035C0D8);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
    }
    else
    {
      sub_10001639C((uint64_t)v7, (uint64_t)v11, &qword_10035C0A8);
      uint64_t v13 = *(int *)(v8 + 76);
      unint64_t v31 = v11;
      uint64_t v14 = *(void *)&v11[v13];
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15)
      {
        v27[1] = 0;
        uint64_t v28 = v9;
        uint64_t v29 = v8;
        uint64_t v30 = a2;
        uint64_t v16 = type metadata accessor for DiscoveryTokenStateMachine(0);
        v27[0] = v14;
        swift_bridgeObjectRetain();
        unint64_t v33 = 0x80000001002B1F00;
        do
        {
          uint64_t v34 = 0;
          unint64_t v35 = 0xE000000000000000;
          swift_retain();
          v22._countAndFlagsBits = 0x203A74757074754FLL;
          v22._object = (void *)0xE800000000000000;
          String.append(_:)(v22);
          _print_unlocked<A, B>(_:_:)();
          uint64_t v23 = v34;
          uint64_t v34 = v16;
          sub_10000A38C(&qword_100369048);
          uint64_t v24 = String.init<A>(describing:)();
          sub_10016B950(60, 0xE100000000000000, v24, v25);
          uint64_t v36 = v23;
          if ((v26 & 1) == 0)
          {
            String.subscript.getter();
            uint64_t v32 = v15;
            swift_bridgeObjectRelease();
            static String._fromSubstring(_:)();
            uint64_t v15 = v32;
            swift_bridgeObjectRelease();
          }
          id v17 = objc_allocWithZone((Class)CULogHandle);
          NSString v18 = String._bridgeToObjectiveC()();
          NSString v19 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v20 = [v17 initWithSubsystem:v18 category:v19];

          swift_bridgeObjectRetain();
          NSString v21 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v20 ulog:40 message:v21];
          swift_release();
          swift_bridgeObjectRelease();

          swift_retain();
          PassthroughSubject.send(_:)();
          swift_release();
          --v15;
        }
        while (v15);
        swift_bridgeObjectRelease();
        uint64_t v8 = v29;
        a2 = v30;
        uint64_t v9 = v28;
      }
      sub_10001639C((uint64_t)v31, a2, &qword_10035C0A8);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
    }
  }
  return result;
}

uint64_t sub_1001569E0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100157090(a1, &v25);
  if (!v2)
  {
    uint64_t v7 = v25;
    char v6 = v26;
    uint64_t v8 = v27;
    sub_10001639C((uint64_t)&v25, (uint64_t)v28, &qword_100369068);
    if (v28[0])
    {
      uint64_t v23 = v8;
      swift_getKeyPath();
      swift_getKeyPath();
      LOBYTE(v24[0]) = v6;
      swift_retain();
      static Published.subscript.setter();
      uint64_t v9 = *(void *)(v7 + 16);
      if (v9)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = v7 + 40;
        do
        {
          uint64_t v11 = *(void (**)(void *))(v10 - 8);
          LOBYTE(v24[0]) = a1;
          swift_retain();
          v11(v24);
          swift_release();
          v10 += 16;
          --v9;
        }
        while (v9);
        swift_bridgeObjectRelease();
      }
      uint64_t v12 = *(void *)(v23 + 16);
      if (v12)
      {
        uint64_t v13 = type metadata accessor for ContextDeliveryModeStateMachine();
        swift_bridgeObjectRetain();
        v28[7] = 0x80000001002B1F00;
        do
        {
          v24[0] = 0;
          v24[1] = 0xE000000000000000;
          swift_retain();
          v19._countAndFlagsBits = 0x203A74757074754FLL;
          v19._object = (void *)0xE800000000000000;
          String.append(_:)(v19);
          _print_unlocked<A, B>(_:_:)();
          v24[0] = v13;
          sub_10000A38C(&qword_100369070);
          uint64_t v20 = String.init<A>(describing:)();
          sub_10016B950(60, 0xE100000000000000, v20, v21);
          if ((v22 & 1) == 0)
          {
            String.subscript.getter();
            swift_bridgeObjectRelease();
            static String._fromSubstring(_:)();
            swift_bridgeObjectRelease();
          }
          id v14 = objc_allocWithZone((Class)CULogHandle);
          NSString v15 = String._bridgeToObjectiveC()();
          NSString v16 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v17 = [v14 initWithSubsystem:v15 category:v16];

          swift_bridgeObjectRetain();
          NSString v18 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v17 ulog:40 message:v18];
          swift_release();
          swift_bridgeObjectRelease();

          swift_retain();
          PassthroughSubject.send(_:)();
          swift_release();
          --v12;
        }
        while (v12);
        swift_bridgeObjectRelease();
      }
    }
    return sub_10001639C((uint64_t)&v25, a2, &qword_100369068);
  }
  return result;
}

uint64_t sub_100156D30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000A38C(qword_10035C0D8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = v2;
  uint64_t v8 = *(void *)(v2 + 32);
  unint64_t v31 = &v33;
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_100050660((uint64_t (*)(char *))sub_10015A3E4, (uint64_t)v30, v8);
  uint64_t v29 = a1;
  uint64_t v10 = sub_100050660((uint64_t (*)(char *))sub_10015A404, (uint64_t)v28, v9);
  uint64_t v27 = a1;
  uint64_t v11 = sub_100050660((uint64_t (*)(char *))sub_10015A424, (uint64_t)v26, v10);
  unint64_t v12 = *(void *)(v11 + 16);
  if (v12 <= 1)
  {
    uint64_t v19 = sub_10000A38C(&qword_10035C0A8);
    uint64_t v20 = *(void *)(v19 - 8);
    if (v12)
    {
      sub_10000D728(v11+ ((*(unsigned __int8 *)(*(void *)(v19 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v19 - 8) + 80)), (uint64_t)v7, &qword_10035C0A8);
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v7, v21, 1, v19);
    swift_bridgeObjectRelease();
    uint64_t v22 = sub_10000A38C(&qword_10035C0A8);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v7, 1, v22) == 1)
    {
      sub_10000D78C((uint64_t)v7, qword_10035C0D8);
      uint64_t v24 = 1;
    }
    else
    {
      sub_10001639C((uint64_t)v7, a2, &qword_10035C0A8);
      uint64_t v24 = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(a2, v24, 1, v22);
  }
  else
  {
    sub_10000A38C(&qword_100369050);
    sub_10000B010(&qword_100369058, &qword_100369050);
    v25[1] = swift_allocError();
    id v14 = v13;
    uint64_t v15 = sub_10000A38C(&qword_100369060);
    uint64_t v16 = (uint64_t)&v14[*(int *)(v15 + 48)];
    uint64_t v17 = *(int *)(v15 + 64);
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    *id v14 = v32;
    sub_100015898(a1, v16);
    *(void *)&v14[v17] = v11;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
}

uint64_t sub_100157090@<X0>(char a1@<W0>, void *a2@<X8>)
{
  char v26 = a1;
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v23 = &v24;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1000508A8((uint64_t)sub_10015A488, (uint64_t)v22, v4);
  uint64_t v21 = &v26;
  uint64_t v6 = sub_1000508A8((uint64_t)sub_10015A4A8, (uint64_t)v20, v5);
  v19[2] = &v26;
  uint64_t v7 = sub_1000508A8((uint64_t)sub_10015A4C4, (uint64_t)v19, v6);
  uint64_t v8 = v7;
  unint64_t v9 = *(void *)(v7 + 16);
  if (v9 <= 1)
  {
    if (v9)
    {
      uint64_t v13 = *(void *)(v7 + 32);
      uint64_t v14 = *(void *)(v7 + 48);
      uint64_t v15 = *(unsigned __int8 *)(v7 + 56);
      uint64_t v17 = *(void *)(v7 + 64);
      uint64_t v16 = *(void *)(v7 + 72);
      uint64_t v18 = *(unsigned __int16 *)(v7 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v18 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v17 = 0;
      uint64_t v16 = 0;
    }
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v13;
    a2[1] = v18;
    a2[2] = v14;
    a2[3] = v15;
    a2[4] = v17;
    a2[5] = v16;
  }
  else
  {
    sub_10000A38C(&qword_100369078);
    sub_10000B010(&qword_100369080, &qword_100369078);
    swift_allocError();
    uint64_t v11 = v10;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    *(unsigned char *)uint64_t v11 = v25;
    *(unsigned char *)(v11 + 1) = v26;
    *(void *)(v11 + 8) = v8;
    *(unsigned char *)(v11 + 16) = 0;
    return swift_willThrow();
  }
  return result;
}

void sub_100157294(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(qword_10035C0D8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_10000A38C(&qword_10035C0A8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  v9._object = (void *)0x80000001002C0400;
  v9._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v9);
  type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  _print_unlocked<A, B>(_:_:)();
  id v10 = sub_1001F6458();
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 ulog:40 message:v11];
  swift_bridgeObjectRelease();

  sub_1001565E4(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000D78C((uint64_t)v4, qword_10035C0D8);
    uint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(37);
    v12._countAndFlagsBits = 0xD000000000000019;
    v12._object = (void *)0x80000001002C0440;
    String.append(_:)(v12);
    _print_unlocked<A, B>(_:_:)();
    v13._countAndFlagsBits = 0x3D6574617473202CLL;
    v13._object = (void *)0xE800000000000000;
    String.append(_:)(v13);
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    _print_unlocked<A, B>(_:_:)();
    id v14 = sub_1001F6458();
    swift_bridgeObjectRetain();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 ulog:40 message:v15];
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10001639C((uint64_t)v4, (uint64_t)v8, &qword_10035C0A8);
    uint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v16._countAndFlagsBits = 0xD000000000000016;
    v16._object = (void *)0x80000001002C0460;
    String.append(_:)(v16);
    _print_unlocked<A, B>(_:_:)();
    v17._countAndFlagsBits = 8250;
    v17._object = (void *)0xE200000000000000;
    String.append(_:)(v17);
    v20[0] = v8[8];
    _print_unlocked<A, B>(_:_:)();
    id v18 = sub_1001F6458();
    swift_bridgeObjectRetain();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 ulog:40 message:v19];
    swift_bridgeObjectRelease();

    sub_10000D78C((uint64_t)v8, &qword_10035C0A8);
  }
}

void sub_1001577F4(char a1)
{
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  v2._object = (void *)0x80000001002C0400;
  v2._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v2);
  LOBYTE(v12) = a1;
  _print_unlocked<A, B>(_:_:)();
  id v3 = sub_1001F6534();
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 ulog:40 message:v4];
  swift_bridgeObjectRelease();

  sub_1001569E0(a1, (uint64_t)&v12);
  sub_10001639C((uint64_t)&v12, (uint64_t)v13, &qword_100369068);
  if (v13[0])
  {
    _StringGuts.grow(_:)(28);
    v5._countAndFlagsBits = 0xD000000000000016;
    v5._object = (void *)0x80000001002C0460;
    String.append(_:)(v5);
    _print_unlocked<A, B>(_:_:)();
    v6._countAndFlagsBits = 8250;
    v6._object = (void *)0xE200000000000000;
    String.append(_:)(v6);
    _print_unlocked<A, B>(_:_:)();
    id v7 = sub_1001F6534();
    swift_bridgeObjectRetain();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v7 ulog:40 message:v8];
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    _StringGuts.grow(_:)(37);
    v9._countAndFlagsBits = 0xD000000000000019;
    v9._object = (void *)0x80000001002C0440;
    String.append(_:)(v9);
    _print_unlocked<A, B>(_:_:)();
    v10._countAndFlagsBits = 0x3D6574617473202CLL;
    v10._object = (void *)0xE800000000000000;
    String.append(_:)(v10);
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    _print_unlocked<A, B>(_:_:)();
    id v11 = sub_1001F6534();
    swift_bridgeObjectRetain();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v11 ulog:40 message:v8];
    swift_release();
    swift_bridgeObjectRelease();
  }
}

id sub_100157C88(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  __chkstk_darwin(v6);
  NSString v8 = (uint64_t *)((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  uint64_t v27 = (char *)0xD000000000000019;
  unint64_t v28 = 0x80000001002C03E0;
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  uint64_t v9 = static String._fromSubstring(_:)();
  id v11 = v10;
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  id v13 = sub_1001F687C();
  swift_bridgeObjectRetain();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 ulog:40 message:v14];
  swift_bridgeObjectRelease();

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  NSString v15 = *(void **)&v27[OBJC_IVAR____TtC17proximitycontrold8Identity_nearbyID];
  *(void *)&v27[OBJC_IVAR____TtC17proximitycontrold8Identity_nearbyID] = a1;
  id v16 = a1;
  swift_release();

  *NSString v8 = v16;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  id v17 = v16;
  sub_100157294((uint64_t)v8);
  sub_100014F00((uint64_t)v8);
  swift_endAccess();
  uint64_t v18 = OBJC_IVAR____TtC17proximitycontrold11NearbyAgent__rangingProxy;
  NSString v19 = *(void **)(*(void *)(v3 + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent__rangingProxy) + 24);
  if (!v19) {
    return 0;
  }
  id v20 = v19;
  sub_10019FC74(v17, a2);

  uint64_t v21 = *(void **)(*(void *)(v3 + v18) + 24);
  if (!v21) {
    return 0;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  id v22 = v21;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  id v23 = v27;
  if (!v27)
  {

    return v23;
  }
  id v24 = [v27 discoveryToken];

  if (!v24)
  {

    return 0;
  }
  sub_100019E10(0, (unint64_t *)&qword_100369040);
  id v23 = (id)sub_10026FAD4((uint64_t)v24);

  return v23;
}

uint64_t sub_100157FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000A38C(qword_10035C0D8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10035C0A8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_100156D30(a1, (uint64_t)v7);
  if (!v2)
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      sub_10000D78C((uint64_t)v7, qword_10035C0D8);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
    }
    else
    {
      uint64_t v20 = a2;
      sub_10001639C((uint64_t)v7, (uint64_t)v11, &qword_10035C0A8);
      char v13 = v11[8];
      swift_getKeyPath();
      swift_getKeyPath();
      char v21 = v13;
      swift_retain();
      static Published.subscript.setter();
      uint64_t v14 = *(void *)v11;
      uint64_t v15 = *(void *)(*(void *)v11 + 16);
      if (v15)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = v14 + 40;
        do
        {
          id v17 = *(void (**)(uint64_t))(v16 - 8);
          swift_retain();
          v17(a1);
          swift_release();
          v16 += 16;
          --v15;
        }
        while (v15);
        swift_bridgeObjectRelease();
      }
      uint64_t v18 = v20;
      sub_10001639C((uint64_t)v11, v20, &qword_10035C0A8);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
    }
  }
  return result;
}

uint64_t sub_100158254(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10035C0A0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_10035C0A8);
  sub_10000D728(a1 + *(int *)(v11 + 72), (uint64_t)v6, &qword_10035C0A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10000D78C((uint64_t)v6, &qword_10035C0A0);
    char v12 = 1;
  }
  else
  {
    sub_100045E74((uint64_t)v6, (uint64_t)v10);
    char v12 = sub_100015A64((uint64_t)v10, a2);
    sub_100014F00((uint64_t)v10);
  }
  return v12 & 1;
}

void sub_1001583E4(unint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10035BED8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (uint64_t *)((char *)&v39 - v13);
  __chkstk_darwin(v12);
  uint64_t v43 = (char *)&v39 - v15;
  unint64_t v45 = 0;
  unint64_t v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  v16._countAndFlagsBits = 0xD000000000000023;
  v16._object = (void *)0x80000001002C0510;
  String.append(_:)(v16);
  uint64_t v42 = v8;
  uint64_t v44 = v2;
  if (a2)
  {
    uint64_t v17 = sub_1001F7514();
    unint64_t v19 = v18;
  }
  else
  {
    unint64_t v19 = 0xE500000000000000;
    uint64_t v17 = 0x296C696E28;
  }
  unint64_t v20 = v19;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 8250;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  unint64_t v47 = a1;
  sub_10000A38C((uint64_t *)&unk_100365D60);
  _print_unlocked<A, B>(_:_:)();
  id v22 = sub_1001F687C();
  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v22 ulog:90 message:v23];
  swift_bridgeObjectRelease();

  if (a2)
  {
    uint64_t v40 = v7;
    uint64_t v41 = v5;
    swift_retain();
    id v24 = (void *)_convertErrorToNSError(_:)();
    sub_1001589F0(a2, v24, v14);

    uint64_t v25 = type metadata accessor for DispatchTimeInterval();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48);
    if (v27(v14, 1, v25) == 1)
    {
      unint64_t v45 = a1;
      swift_errorRetain();
      if (swift_dynamicCast()) {
        char v28 = v47;
      }
      else {
        char v28 = 11;
      }
      sub_100158EFC(v28, v11);
      if (v27(v11, 1, v25) == 1)
      {
        uint64_t v29 = (uint64_t)v11;
        unint64_t v45 = a1;
        swift_errorRetain();
        if (swift_dynamicCast())
        {
          uint64_t v30 = (uint64_t)v40;
          if (v47 == 3)
          {
            id v31 = sub_1001F687C();
            NSString v32 = String._bridgeToObjectiveC()();
            [v31 ulog:40 message:v32];
          }
        }
        else
        {
          uint64_t v30 = (uint64_t)v40;
        }
        uint64_t v33 = (uint64_t)v43;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v43, 1, 1, v25);
        sub_10000D78C(v29, &qword_10035BED8);
      }
      else
      {
        uint64_t v33 = (uint64_t)v43;
        (*(void (**)(void))(v26 + 32))();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v33, 0, 1, v25);
        uint64_t v30 = (uint64_t)v40;
      }
      sub_10000D78C((uint64_t)v14, &qword_10035BED8);
    }
    else
    {
      uint64_t v33 = (uint64_t)v43;
      (*(void (**)(char *, uint64_t *, uint64_t))(v26 + 32))(v43, v14, v25);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v33, 0, 1, v25);
      uint64_t v30 = (uint64_t)v40;
    }
    unint64_t v45 = 0;
    unint64_t v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    unint64_t v45 = 0xD000000000000013;
    unint64_t v46 = 0x80000001002C0540;
    v34._countAndFlagsBits = sub_1001F7514();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 8250;
    v35._object = (void *)0xE200000000000000;
    String.append(_:)(v35);
    v36._countAndFlagsBits = Optional.debugDescription.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    id v37 = sub_1001F687C();
    swift_bridgeObjectRetain();
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v37 ulog:40 message:v38];
    swift_bridgeObjectRelease();

    sub_10000D728(v33, v30, &qword_10035BED8);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    sub_100157294(v30);
    sub_100014F00(v30);
    swift_endAccess();
    swift_release();
    sub_10000D78C(v33, &qword_10035BED8);
  }
}

uint64_t sub_1001589F0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_10000A38C(&qword_10035E158);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [a2 domain];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
  {
    swift_bridgeObjectRelease_n();
LABEL_10:
    uint64_t result = (uint64_t)[a2 code];
    if (result < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else
    {
      int v23 = result;
      if (result <= 0x7FFFFFFF)
      {
        if (result == -6714)
        {
          uint64_t v24 = a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_lastTokenSyncAttempt;
          swift_beginAccess();
          sub_10000D728(v24, (uint64_t)v8, &qword_10035E158);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
          {
            sub_10000D78C((uint64_t)v8, &qword_10035E158);
LABEL_19:
            *a3 = 5;
            uint64_t v30 = enum case for DispatchTimeInterval.seconds(_:);
            uint64_t v31 = type metadata accessor for DispatchTimeInterval();
            uint64_t v32 = *(void *)(v31 - 8);
            (*(void (**)(void *, uint64_t, uint64_t))(v32 + 104))(a3, v30, v31);
            return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(a3, 0, 1, v31);
          }
          (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
          Date.timeIntervalSinceNow.getter();
          if (fabs(v29) > 10.0)
          {
            (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
            goto LABEL_19;
          }
          id v33 = sub_1001F687C();
          NSString v34 = String._bridgeToObjectiveC()();
          [v33 ulog:40 message:v34];

          (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        }
        else
        {
          unint64_t v35 = 0;
          unint64_t v36 = 0xE000000000000000;
          _StringGuts.grow(_:)(33);
          swift_bridgeObjectRelease();
          unint64_t v35 = 0xD00000000000001FLL;
          unint64_t v36 = 0x80000001002C0590;
          int v37 = v23;
          v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v25);
          swift_bridgeObjectRelease();
          id v26 = sub_1001F687C();
          swift_bridgeObjectRetain();
          NSString v27 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v26 ulog:90 message:v27];
          swift_bridgeObjectRelease();
        }
        uint64_t v28 = type metadata accessor for DispatchTimeInterval();
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a3, 1, 1, v28);
      }
    }
    __break(1u);
    return result;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19) {
    goto LABEL_10;
  }
  uint64_t v20 = type metadata accessor for DispatchTimeInterval();
  Swift::String v21 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);

  return v21(a3, 1, 1, v20);
}

uint64_t sub_100158EFC@<X0>(char a1@<W1>, uint64_t *a2@<X8>)
{
  switch(a1)
  {
    case 0:
    case 3:
      uint64_t v8 = 1;
      goto LABEL_5;
    case 6:
      uint64_t v8 = 5;
LABEL_5:
      *a2 = v8;
      uint64_t v9 = enum case for DispatchTimeInterval.seconds(_:);
      uint64_t v10 = type metadata accessor for DispatchTimeInterval();
      uint64_t v12 = *(void *)(v10 - 8);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 104))(a2, v9, v10);
      uint64_t v4 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v12 + 56);
      uint64_t v6 = a2;
      uint64_t v7 = 0;
      uint64_t v5 = v10;
      break;
    default:
      uint64_t v3 = type metadata accessor for DispatchTimeInterval();
      uint64_t v4 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
      uint64_t v5 = v3;
      uint64_t v6 = a2;
      uint64_t v7 = 1;
      break;
  }

  return v4(v6, v7, 1, v5);
}

uint64_t sub_10015907C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10035A628 != -1) {
    swift_once();
  }
  uint64_t v12 = (void *)qword_1003ACB50;
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a1;
  void v14[3] = v13;
  v14[4] = v18;
  v14[5] = a3;
  v14[6] = ObjectType;
  aBlock[4] = sub_10015A560;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_10032AD00;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  Swift::String v21 = _swiftEmptyArrayStorage;
  sub_10004D1C4();
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v19);
  swift_release();
  return swift_release();
}

void sub_1001593B0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_10000A38C(&qword_10035AC20);
  __chkstk_darwin(v9 - 8);
  uint64_t v87 = (char *)v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v80 = v11;
  uint64_t v81 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_100369088);
  uint64_t v83 = *(void *)(v15 - 8);
  uint64_t v84 = v15;
  __chkstk_darwin(v15);
  uint64_t v82 = (char *)v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000A38C(&qword_100369090);
  uint64_t v86 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v85 = (char *)v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000A38C(&qword_100369098);
  uint64_t v91 = *(void *)(v18 - 8);
  uint64_t v92 = v18;
  __chkstk_darwin(v18);
  uint64_t v90 = (char *)v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1;
  uint64_t v21 = sub_1001F7514();
  int v23 = v22;
  uint64_t v97 = 0;
  unint64_t v98 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  uint64_t v97 = 0xD000000000000025;
  unint64_t v98 = (void *)0x80000001002C0480;
  uint64_t v89 = v21;
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  sub_10016ABE4(v97, v98, 0, a5, (uint64_t)&off_100328368);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    swift_bridgeObjectRelease();
    sub_10001A050();
    uint64_t v34 = swift_allocError();
    *(void *)uint64_t v35 = 0x666C6573206C696ELL;
    *(void *)(v35 + 8) = 0xE800000000000000;
    *(unsigned char *)(v35 + 16) = 9;
    a3(v34, 1);
    goto LABEL_8;
  }
  id v26 = (char *)Strong;
  uint64_t v93 = a4;
  NSString v27 = *(void **)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent__rangingProxy) + 24);
  if (!v27)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v79 = a3;
  swift_getKeyPath();
  swift_getKeyPath();
  id v28 = v27;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  id v29 = (id)v95;
  if (!v95
    || (id v30 = [(id)v95 discoveryToken], v29, !v30))
  {
    swift_bridgeObjectRelease();

    goto LABEL_10;
  }
  sub_100019E10(0, (unint64_t *)&qword_100369040);
  uint64_t v31 = sub_10026FAD4((uint64_t)v30);
  unint64_t v33 = v32;

  if (v33 >> 60 != 15)
  {
    unint64_t v37 = v33;
    uint64_t v78 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_discoveryTokenSyncTask;
    if (*(void *)(v20 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_discoveryTokenSyncTask))
    {
      uint64_t v95 = 0;
      uint64_t v96 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      uint64_t v95 = 539173667;
      uint64_t v96 = (void *)0xE400000000000000;
      v38._countAndFlagsBits = sub_1001F7514();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 0xD00000000000001ELL;
      v39._object = (void *)0x80000001002C04D0;
      String.append(_:)(v39);
      sub_10016AE10(60, v95, v96, 0, a5, (uint64_t)&off_100328368);
      swift_bridgeObjectRelease();
    }
    uint64_t v40 = *(void **)(*(void *)&v26[OBJC_IVAR____TtC17proximitycontrold11NearbyAgent_state] + 32);
    if (v40)
    {
      id v41 = v40;
      uint64_t v42 = v20;
      unint64_t v43 = v37;
      uint64_t v77 = v42;
      uint64_t v48 = sub_1000EBE94(v31, v37, v42);

      uint64_t v95 = v48;
      static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
      uint64_t v74 = OBJC_IVAR____TtC17proximitycontrold11NearbyAgent_dispatchQueue;
      id v94 = *(id *)&v26[OBJC_IVAR____TtC17proximitycontrold11NearbyAgent_dispatchQueue];
      id v49 = v94;
      uint64_t v50 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v72 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
      uint64_t v73 = v51 + 56;
      unint64_t v76 = v43;
      uint64_t v52 = (uint64_t)v87;
      v72(v87, 1, 1, v50);
      id v53 = v49;
      v71[1] = sub_10000A38C(&qword_100360040);
      v71[2] = sub_100019E10(0, (unint64_t *)&qword_10035A680);
      sub_10000B010(&qword_100360048, &qword_100360040);
      v71[3] = sub_10003A8C0();
      uint64_t v75 = v31;
      int v54 = v82;
      Publisher.timeout<A>(_:scheduler:options:customError:)();
      sub_10000D78C(v52, &qword_10035AC20);

      (*(void (**)(char *, uint64_t))(v81 + 8))(v14, v80);
      swift_release();
      uint64_t v95 = *(void *)&v26[v74];
      id v55 = (id)v95;
      v72((char *)v52, 1, 1, v50);
      sub_10000B010(&qword_1003690A0, &qword_100369088);
      id v56 = v55;
      uint64_t v57 = v84;
      uint64_t v58 = v85;
      Publisher.receive<A>(on:options:)();
      sub_10000D78C(v52, &qword_10035AC20);

      (*(void (**)(char *, uint64_t))(v83 + 8))(v54, v57);
      sub_100019E10(0, (unint64_t *)&qword_10036AF80);
      sub_10000B010(&qword_1003690A8, &qword_100369090);
      uint64_t v59 = v90;
      uint64_t v60 = v88;
      Publisher.tryMap<A>(_:)();
      (*(void (**)(char *, uint64_t))(v86 + 8))(v58, v60);
      uint64_t v61 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v62 = swift_allocObject();
      uint64_t v63 = v77;
      uint64_t v64 = v62;
      swift_weakInit();
      uint64_t v65 = (void *)swift_allocObject();
      v65[2] = v61;
      v65[3] = v64;
      v65[4] = v89;
      v65[5] = v23;
      v65[6] = a5;
      uint64_t v66 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v67 = swift_allocObject();
      swift_weakInit();
      uint64_t v68 = swift_allocObject();
      *(void *)(v68 + 16) = v66;
      *(void *)(v68 + 24) = v67;
      sub_10000B010(&qword_1003690B0, &qword_100369098);
      uint64_t v69 = v92;
      uint64_t v70 = Publisher.sink(receiveCompletion:receiveValue:)();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v59, v69);
      *(void *)(v63 + v78) = v70;
      swift_release();
      v79(1, 0);
      sub_10000DBD8(v75, v76);
      goto LABEL_13;
    }
    sub_1000EC7C4();
    uint64_t v44 = (void *)swift_allocError();
    *unint64_t v45 = 6;
    swift_willThrow();
    swift_bridgeObjectRelease();
    unint64_t v46 = (void (*)(void *, uint64_t))v79;
    uint64_t v95 = 0;
    uint64_t v96 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(26);
    v47._object = (void *)0x80000001002C04B0;
    v47._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v47);
    id v94 = v44;
    sub_10000A38C((uint64_t *)&unk_100365D60);
    _print_unlocked<A, B>(_:_:)();
    sub_10016AE10(90, v95, v96, 0, a5, (uint64_t)&off_100328368);
    swift_bridgeObjectRelease();
    swift_errorRetain();
    v46(v44, 1);
    sub_10000DBD8(v31, v33);

    swift_errorRelease();
LABEL_8:
    swift_errorRelease();
    return;
  }
  swift_bridgeObjectRelease();
LABEL_10:
  a3 = v79;
LABEL_12:
  sub_1000EC7C4();
  swift_allocError();
  *unint64_t v36 = 1;
  ((void (*)(void))a3)();
  swift_errorRelease();
LABEL_13:
}

uint64_t sub_100159F88@<X0>(uint64_t *a1@<X8>)
{
  sub_1000EC7C4();
  uint64_t result = swift_allocError();
  *a1 = result;
  *uint64_t v3 = 10;
  return result;
}

uint64_t sub_100159FD0@<X0>(uint64_t *a1@<X8>)
{
  sub_100019E10(0, (unint64_t *)&qword_10036AF80);
  uint64_t result = sub_10016C184();
  if (result)
  {
    *a1 = result;
  }
  else
  {
    sub_1000EC7C4();
    swift_allocError();
    *uint64_t v3 = 0;
    return swift_willThrow();
  }
  return result;
}

void sub_10015A068(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  unint64_t v9 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    if (v9)
    {
      swift_beginAccess();
      uint64_t v12 = swift_weakLoadStrong();
      swift_errorRetain();
      sub_1001583E4(v9, v12);
      swift_release();
      swift_errorRelease();
    }
    else
    {
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = a4;
      v13._object = a5;
      String.append(_:)(v13);
      sub_10016ABE4(0xD00000000000001CLL, (void *)0x80000001002C04F0, 0, a6, (uint64_t)&off_100328368);
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    uint64_t v14 = swift_weakLoadStrong();

    if (v14)
    {
      *(void *)(v14 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_discoveryTokenSyncTask) = 0;
      swift_release();
      swift_release();
    }
  }
}

void sub_10015A1F0(void **a1)
{
  unint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    swift_beginAccess();
    uint64_t v4 = swift_weakLoadStrong();
    if (v4)
    {
      id v5 = sub_100157C88(v1, v4);
      sub_10000DBD8((uint64_t)v5, v6);

      swift_release();
    }
    else
    {
    }
  }
}

BOOL sub_10015A298(uint64_t a1)
{
  uint64_t v2 = *(int *)(sub_10000A38C(&qword_10035C0A8) + 80);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return *(unsigned __int8 *)(a1 + v2) == v4;
}

BOOL sub_10015A340(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 24);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1 == v3;
}

BOOL sub_10015A3E4(uint64_t a1)
{
  return sub_10015A298(a1);
}

uint64_t sub_10015A404(uint64_t a1)
{
  return sub_100158254(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_10015A424(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = sub_10000A38C(&qword_10035C0A8);
  return (*(uint64_t (**)(uint64_t))(a1 + *(int *)(v4 + 84)))(v3) & 1;
}

BOOL sub_10015A488(uint64_t a1)
{
  return sub_10015A340(a1);
}

BOOL sub_10015A4A8(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 9);
  return v2 == 5 || v2 == **(unsigned __int8 **)(v1 + 16);
}

uint64_t sub_10015A4C4(uint64_t a1)
{
  int v2 = *(uint64_t (**)(char *))(a1 + 32);
  char v4 = **(unsigned char **)(v1 + 16);
  return v2(&v4) & 1;
}

uint64_t sub_10015A510()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10015A548()
{
  return sub_10015A5D8((void (*)(void))&_swift_release);
}

void sub_10015A560()
{
  sub_1001593B0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(uint64_t, uint64_t))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_10015A570(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10015A580()
{
  return swift_release();
}

uint64_t sub_10015A588()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10015A5C0()
{
  return sub_10015A5D8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10015A5D8(void (*a1)(void))
{
  swift_release();
  swift_release();
  a1(*(void *)(v1 + 40));

  return _swift_deallocObject(v1, 56, 7);
}

void sub_10015A630(unint64_t *a1)
{
  sub_10015A068(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_10015A640()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10015A680(void **a1)
{
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEffect()
{
  return &type metadata for NearbySharingInteractionViewEffect;
}

uint64_t destroy for NearbySharingInteractionViewEvent(uint64_t a1)
{
  return sub_1000205C8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
}

uint64_t initializeWithCopy for NearbySharingInteractionViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  sub_10001FBD0(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for NearbySharingInteractionViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  sub_10001FBD0(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  char v18 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v10;
  sub_1000205C8(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for NearbySharingInteractionViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  char v4 = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v3;
  char v13 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v4;
  sub_1000205C8(v5, v7, v6, v8, v9, v10, v11, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for HomeAccessoryViewEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HomeAccessoryViewEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 56) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10015A8EC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 56) <= 1u) {
    return *(unsigned __int8 *)(a1 + 56);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10015A904(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 56) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent()
{
  return &type metadata for NearbySharingInteractionViewEvent;
}

uint64_t sub_10015A93C(void *a1, int a2)
{
  int v18 = a2;
  uint64_t v3 = sub_10000A38C(&qword_1003690F0);
  uint64_t v16 = *(void *)(v3 - 8);
  uint64_t v17 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_1003690F8);
  uint64_t v6 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_100369100);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  long long v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_10015C1FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  if (v18)
  {
    char v20 = 1;
    sub_10015C250();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    char v19 = 0;
    sub_10015C2A4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v15);
  }
  return (*v13)(v12, v9);
}

uint64_t sub_10015ABEC(uint64_t a1)
{
  unint64_t v2 = sub_10015C1FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015AC28(uint64_t a1)
{
  unint64_t v2 = sub_10015C1FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015AC64(uint64_t a1)
{
  unint64_t v2 = sub_10015C250();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015ACA0(uint64_t a1)
{
  unint64_t v2 = sub_10015C250();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015ACDC(uint64_t a1)
{
  unint64_t v2 = sub_10015C2A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015AD18(uint64_t a1)
{
  unint64_t v2 = sub_10015C2A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015AD54@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10015BDAC(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t sub_10015AD84(void *a1)
{
  return sub_10015A93C(a1, *v1);
}

uint64_t sub_10015ADA0()
{
  sub_1000D84D4(v0, &v9);
  uint64_t countAndFlagsBits = v9._countAndFlagsBits;
  if (v13)
  {
    if (v13 == 1)
    {
      Swift::String v14 = v9;
      long long v15 = v10;
      long long v16 = v11;
      uint64_t v17 = v12;
      v2._uint64_t countAndFlagsBits = 0x202864656C696166;
      v2._object = (void *)0xE800000000000000;
      String.append(_:)(v2);
      _print_unlocked<A, B>(_:_:)();
      v3._uint64_t countAndFlagsBits = 10528;
      v3._object = (void *)0xE200000000000000;
      String.append(_:)(v3);
      return 0;
    }
    else
    {
      uint64_t v7 = *((void *)&v10 + 1) | v10 | (__int128)v9._object;
      if (*((void *)&v11 + 1) | v12 | v9._countAndFlagsBits | (unint64_t)v11 | v7)
      {
        uint64_t v8 = *((void *)&v11 + 1) | v12 | v11 | v7;
        if (v9._countAndFlagsBits != 1 || v8)
        {
          if (v9._countAndFlagsBits == 2 && v8 == 0) {
            return 0xD000000000000010;
          }
          else {
            return 0x61546C65636E6163;
          }
        }
        else
        {
          return 0x65746E6573657270;
        }
      }
      else
      {
        return 0x69746E6573657270;
      }
    }
  }
  else
  {
    object = v9._object;
    v14._uint64_t countAndFlagsBits = 0x657373696D736964;
    v14._object = (void *)0xEB00000000202864;
    String.append(_:)(*(Swift::String *)&countAndFlagsBits);
    v6._uint64_t countAndFlagsBits = 10528;
    v6._object = (void *)0xE200000000000000;
    String.append(_:)(v6);
    return v14._countAndFlagsBits;
  }
}

uint64_t sub_10015AF78(void *a1)
{
  uint64_t v33 = sub_10000A38C(&qword_100369178);
  uint64_t v32 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v31 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000A38C(&qword_100369180);
  uint64_t v29 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  id v28 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000A38C(&qword_100369188);
  uint64_t v39 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_100369190);
  uint64_t v38 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10000A38C(&qword_100369198);
  uint64_t v35 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v34 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_1003691A0);
  uint64_t v37 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_10000A38C(&qword_1003691A8);
  uint64_t v42 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  Swift::String v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_10015D014();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1000D84D4((long long *)v56[1], &v47);
  if (v51)
  {
    if (v51 == 1)
    {
      long long v52 = v47;
      long long v53 = v48;
      long long v54 = v49;
      uint64_t v55 = v50;
      LOBYTE(v43) = 3;
      sub_10015D110();
      uint64_t v15 = v41;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v43 = v52;
      long long v44 = v53;
      long long v45 = v54;
      uint64_t v46 = v55;
      sub_1000D9C6C();
      uint64_t v16 = v40;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v5, v16);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v14, v15);
    }
    else
    {
      uint64_t v19 = *((void *)&v48 + 1) | v48 | *((void *)&v47 + 1);
      if (*((void *)&v49 + 1) | v50 | (unint64_t)v47 | (unint64_t)v49 | v19)
      {
        uint64_t v20 = *((void *)&v49 + 1) | v50 | v49 | v19;
        if ((void)v47 != 1 || v20)
        {
          if ((void)v47 != 2 || v20)
          {
            LOBYTE(v43) = 5;
            sub_10015D068();
            NSString v27 = v31;
            uint64_t v22 = v41;
            KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
            int v23 = *(void (**)(char *, void))(v32 + 8);
            Swift::String v24 = v27;
            Swift::String v25 = (char *)&v54 + 8;
          }
          else
          {
            LOBYTE(v43) = 4;
            sub_10015D0BC();
            id v26 = v28;
            uint64_t v22 = v41;
            KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
            int v23 = *(void (**)(char *, void))(v29 + 8);
            Swift::String v24 = v26;
            Swift::String v25 = (char *)&v53;
          }
        }
        else
        {
          LOBYTE(v43) = 1;
          sub_10015D1B8();
          uint64_t v21 = v34;
          uint64_t v22 = v41;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          int v23 = *(void (**)(char *, void))(v35 + 8);
          Swift::String v24 = v21;
          Swift::String v25 = (char *)v56;
        }
        v23(v24, *((void *)v25 - 32));
      }
      else
      {
        LOBYTE(v43) = 0;
        sub_10015D20C();
        uint64_t v22 = v41;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v10);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v14, v22);
    }
  }
  else
  {
    LOBYTE(v43) = 2;
    sub_10015D164();
    uint64_t v18 = v41;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v14, v18);
  }
}

uint64_t sub_10015B734(uint64_t a1)
{
  unint64_t v2 = sub_10015D068();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015B770(uint64_t a1)
{
  unint64_t v2 = sub_10015D068();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10015B7AC()
{
  unint64_t result = 0x69746E6573657270;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x65746E6573657270;
      break;
    case 2:
      unint64_t result = 0x657373696D736964;
      break;
    case 3:
      unint64_t result = 0x64656C696166;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x61546C65636E6163;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10015B880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10015C2F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10015B8A8(uint64_t a1)
{
  unint64_t v2 = sub_10015D014();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015B8E4(uint64_t a1)
{
  unint64_t v2 = sub_10015D014();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015B920(uint64_t a1)
{
  unint64_t v2 = sub_10015D164();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015B95C(uint64_t a1)
{
  unint64_t v2 = sub_10015D164();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015B998(uint64_t a1)
{
  unint64_t v2 = sub_10015D110();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015B9D4(uint64_t a1)
{
  unint64_t v2 = sub_10015D110();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015BA10(uint64_t a1)
{
  unint64_t v2 = sub_10015D1B8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015BA4C(uint64_t a1)
{
  unint64_t v2 = sub_10015D1B8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015BA88(uint64_t a1)
{
  unint64_t v2 = sub_10015D20C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015BAC4(uint64_t a1)
{
  unint64_t v2 = sub_10015D20C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015BB00(uint64_t a1)
{
  unint64_t v2 = sub_10015D0BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015BB3C(uint64_t a1)
{
  unint64_t v2 = sub_10015D0BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

_OWORD *sub_10015BB78@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = (_OWORD *)sub_10015C5A8(a1, (uint64_t)v5);
  if (!v2) {
    return sub_1000D84D4(v5, a2);
  }
  return result;
}

uint64_t sub_10015BBC0(void *a1)
{
  sub_1000D84D4(v1, v4);
  return sub_10015AF78(a1);
}

uint64_t sub_10015BC10()
{
  sub_1000D84D4(v0, v2);
  return sub_10015ADA0();
}

BOOL sub_10015BC48(uint64_t *a1, uint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 56);
  if (*((unsigned char *)a1 + 56))
  {
    if (*((unsigned char *)a1 + 56) == 1) {
      return v2 == 1;
    }
    uint64_t v4 = *a1;
    uint64_t v3 = a1[1];
    uint64_t v6 = *a2;
    uint64_t v5 = a2[1];
    uint64_t v8 = a2[2];
    uint64_t v7 = a2[3];
    uint64_t v10 = a2[4];
    uint64_t v9 = a2[5];
    uint64_t v11 = a2[6];
    uint64_t v12 = a1[3];
    uint64_t v13 = a1[4];
    uint64_t v14 = a1[2];
    uint64_t v15 = a1[5] | a1[6];
    uint64_t v16 = v12 | v14 | v3;
    if (!(v15 | v4 | v13 | v16)) {
      return v2 == 2 && !(v8 | v5 | v6 | v7 | v10 | v9 | v11);
    }
    uint64_t v17 = v15 | v13 | v16;
    if (v4 != 1 || v17)
    {
      if (v4 != 2 || v17)
      {
        if (v2 != 2 || v6 != 3) {
          return 0;
        }
      }
      else if (v2 != 2 || v6 != 2)
      {
        return 0;
      }
    }
    else if (v2 != 2 || v6 != 1)
    {
      return 0;
    }
    if (!(v8 | v5 | v7 | v10 | v9 | v11)) {
      return 1;
    }
  }
  else if (!*((unsigned char *)a2 + 56))
  {
    return 1;
  }
  return 0;
}

unint64_t sub_10015BD58()
{
  unint64_t result = qword_1003690B8;
  if (!qword_1003690B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003690B8);
  }
  return result;
}

uint64_t sub_10015BDAC(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_1003690C0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v22 = v2;
  uint64_t v23 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_1003690C8);
  uint64_t v25 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_1003690D0);
  uint64_t v24 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4((void *)a1, *(void *)(a1 + 24));
  sub_10015C1FC();
  uint64_t v12 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v13 = v25;
  uint64_t v21 = v6;
  uint64_t v26 = a1;
  uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v14 + 16) != 1)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v18 = v17;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v18 = &type metadata for NearbySharingInteractionViewEffect;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, enum case for DecodingError.typeMismatch(_:), v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
    a1 = v26;
LABEL_7:
    sub_10000CC5C(a1);
    return a1;
  }
  a1 = *(unsigned __int8 *)(v14 + 32);
  if (a1)
  {
    LODWORD(v25) = *(unsigned __int8 *)(v14 + 32);
    char v28 = 1;
    sub_10015C250();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v15 = v24;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v9);
    a1 = v25;
  }
  else
  {
    char v27 = 0;
    sub_10015C2A4();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v24;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  }
  sub_10000CC5C(v26);
  return a1;
}

unint64_t sub_10015C1FC()
{
  unint64_t result = qword_1003690D8;
  if (!qword_1003690D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003690D8);
  }
  return result;
}

unint64_t sub_10015C250()
{
  unint64_t result = qword_1003690E0;
  if (!qword_1003690E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003690E0);
  }
  return result;
}

unint64_t sub_10015C2A4()
{
  unint64_t result = qword_1003690E8;
  if (!qword_1003690E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003690E8);
  }
  return result;
}

uint64_t sub_10015C2F8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x69746E6573657270 && a2 == 0xEA0000000000676ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65746E6573657270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657373696D736964 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64656C696166 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001002C0600 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x61546C65636E6163 && a2 == 0xEC00000064657070)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_10015C5A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v58 = sub_10000A38C(&qword_100369108);
  uint64_t v51 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v63 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_10000A38C(&qword_100369110);
  uint64_t v54 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v62 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10000A38C(&qword_100369118);
  uint64_t v57 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v59 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_100369120);
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v53 = v6;
  __chkstk_darwin(v6);
  uint64_t v61 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000A38C(&qword_100369128);
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_100369130);
  uint64_t v48 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000A38C(&qword_100369138);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1[3];
  uint64_t v64 = a1;
  sub_10000D6E4(a1, v17);
  sub_10015D014();
  uint64_t v18 = v72;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v19 = v18;
  if (v18) {
    return sub_10000CC5C((uint64_t)v64);
  }
  long long v47 = v12;
  uint64_t v46 = v10;
  uint64_t v20 = v9;
  uint64_t v21 = v61;
  uint64_t v22 = v62;
  uint64_t v23 = v63;
  uint64_t v72 = v14;
  uint64_t v24 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v24 + 16) != 1)
  {
    uint64_t v32 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v34 = v33;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v34 = &type metadata for NearbySharingInteractionViewEvent;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, enum case for DecodingError.typeMismatch(_:), v32);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v16, v13);
    return sub_10000CC5C((uint64_t)v64);
  }
  switch(*(unsigned char *)(v24 + 32))
  {
    case 1:
      LOBYTE(v65) = 1;
      sub_10015D1B8();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v45 = 0;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v20, v50);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v16, v13);
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      char v35 = 2;
      uint64_t v26 = 1;
      break;
    case 2:
      LOBYTE(v65) = 2;
      sub_10015D164();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v36 = v53;
      uint64_t v37 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v38 = v72;
      uint64_t v19 = 0;
      uint64_t v26 = v37;
      uint64_t v27 = v43;
      uint64_t v45 = 0;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v21, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v16, v13);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      char v35 = 0;
      break;
    case 3:
      LOBYTE(v65) = 3;
      sub_10015D110();
      uint64_t v39 = v59;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1000D9A74();
      uint64_t v40 = v55;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v41 = v72;
      uint64_t v45 = 0;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v39, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v13);
      uint64_t v26 = v65;
      uint64_t v27 = v66;
      uint64_t v19 = v67;
      uint64_t v28 = v68;
      uint64_t v29 = v69;
      uint64_t v30 = v70;
      char v35 = 1;
      uint64_t v31 = v71;
      break;
    case 4:
      LOBYTE(v65) = 4;
      sub_10015D0BC();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v45 = 0;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v22, v56);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v16, v13);
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v26 = 2;
      goto LABEL_10;
    case 5:
      LOBYTE(v65) = 5;
      sub_10015D068();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v45 = 0;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v23, v58);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v16, v13);
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      char v35 = 2;
      uint64_t v26 = 3;
      break;
    default:
      LOBYTE(v65) = 0;
      sub_10015D20C();
      uint64_t v25 = v47;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v45 = 0;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v25, v46);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v16, v13);
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
LABEL_10:
      char v35 = 2;
      break;
  }
  uint64_t v44 = v60;
  uint64_t result = sub_10000CC5C((uint64_t)v64);
  *(void *)uint64_t v44 = v26;
  *(void *)(v44 + 8) = v27;
  *(void *)(v44 + 16) = v19;
  *(void *)(v44 + 24) = v28;
  *(void *)(v44 + 32) = v29;
  *(void *)(v44 + 40) = v30;
  *(void *)(v44 + 48) = v31;
  *(unsigned char *)(v44 + 56) = v35;
  return result;
}

unint64_t sub_10015D014()
{
  unint64_t result = qword_100369140;
  if (!qword_100369140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369140);
  }
  return result;
}

unint64_t sub_10015D068()
{
  unint64_t result = qword_100369148;
  if (!qword_100369148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369148);
  }
  return result;
}

unint64_t sub_10015D0BC()
{
  unint64_t result = qword_100369150;
  if (!qword_100369150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369150);
  }
  return result;
}

unint64_t sub_10015D110()
{
  unint64_t result = qword_100369158;
  if (!qword_100369158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369158);
  }
  return result;
}

unint64_t sub_10015D164()
{
  unint64_t result = qword_100369160;
  if (!qword_100369160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369160);
  }
  return result;
}

unint64_t sub_10015D1B8()
{
  unint64_t result = qword_100369168;
  if (!qword_100369168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369168);
  }
  return result;
}

unint64_t sub_10015D20C()
{
  unint64_t result = qword_100369170;
  if (!qword_100369170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369170);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NearbySharingInteractionViewEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10015D32CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.CodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.PresentingCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.PresentingCodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.PresentedCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.PresentedCodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.DismissedCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.DismissedCodingKeys;
}

unsigned char *_s17proximitycontrold33NearbySharingInteractionViewEventO19DismissedCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10015D434);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.FailedCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.FailedCodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.SendButtonTappedCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.SendButtonTappedCodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.CancelTappedCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.CancelTappedCodingKeys;
}

unsigned char *_s17proximitycontrold34NearbySharingInteractionViewEffectOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10015D558);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEffect.CodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEffect.CodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEffect.PresentCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEffect.PresentCodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEffect.DismissCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEffect.DismissCodingKeys;
}

unint64_t sub_10015D5B4()
{
  unint64_t result = qword_1003691B0;
  if (!qword_1003691B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003691B0);
  }
  return result;
}

unint64_t sub_10015D60C()
{
  unint64_t result = qword_1003691B8;
  if (!qword_1003691B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003691B8);
  }
  return result;
}

unint64_t sub_10015D664()
{
  unint64_t result = qword_1003691C0;
  if (!qword_1003691C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003691C0);
  }
  return result;
}

unint64_t sub_10015D6BC()
{
  unint64_t result = qword_1003691C8;
  if (!qword_1003691C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003691C8);
  }
  return result;
}

unint64_t sub_10015D714()
{
  unint64_t result = qword_1003691D0;
  if (!qword_1003691D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003691D0);
  }
  return result;
}

unint64_t sub_10015D76C()
{
  unint64_t result = qword_1003691D8;
  if (!qword_1003691D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003691D8);
  }
  return result;
}

unint64_t sub_10015D7C4()
{
  unint64_t result = qword_1003691E0;
  if (!qword_1003691E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003691E0);
  }
  return result;
}

unint64_t sub_10015D81C()
{
  unint64_t result = qword_1003691E8;
  if (!qword_1003691E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003691E8);
  }
  return result;
}

unint64_t sub_10015D874()
{
  unint64_t result = qword_1003691F0;
  if (!qword_1003691F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003691F0);
  }
  return result;
}

unint64_t sub_10015D8CC()
{
  unint64_t result = qword_1003691F8;
  if (!qword_1003691F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003691F8);
  }
  return result;
}

unint64_t sub_10015D924()
{
  unint64_t result = qword_100369200;
  if (!qword_100369200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369200);
  }
  return result;
}

unint64_t sub_10015D97C()
{
  unint64_t result = qword_100369208;
  if (!qword_100369208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369208);
  }
  return result;
}

unint64_t sub_10015D9D4()
{
  unint64_t result = qword_100369210;
  if (!qword_100369210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369210);
  }
  return result;
}

unint64_t sub_10015DA2C()
{
  unint64_t result = qword_100369218;
  if (!qword_100369218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369218);
  }
  return result;
}

unint64_t sub_10015DA84()
{
  unint64_t result = qword_100369220;
  if (!qword_100369220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369220);
  }
  return result;
}

unint64_t sub_10015DADC()
{
  unint64_t result = qword_100369228;
  if (!qword_100369228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369228);
  }
  return result;
}

unint64_t sub_10015DB34()
{
  unint64_t result = qword_100369230;
  if (!qword_100369230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369230);
  }
  return result;
}

unint64_t sub_10015DB8C()
{
  unint64_t result = qword_100369238;
  if (!qword_100369238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369238);
  }
  return result;
}

unint64_t sub_10015DBE4()
{
  unint64_t result = qword_100369240;
  if (!qword_100369240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369240);
  }
  return result;
}

unint64_t sub_10015DC3C()
{
  unint64_t result = qword_100369248;
  if (!qword_100369248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369248);
  }
  return result;
}

unint64_t sub_10015DC94()
{
  unint64_t result = qword_100369250;
  if (!qword_100369250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369250);
  }
  return result;
}

unint64_t sub_10015DCEC()
{
  unint64_t result = qword_100369258;
  if (!qword_100369258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369258);
  }
  return result;
}

unint64_t sub_10015DD44()
{
  unint64_t result = qword_100369260;
  if (!qword_100369260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369260);
  }
  return result;
}

unint64_t sub_10015DD9C()
{
  unint64_t result = qword_100369268;
  if (!qword_100369268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369268);
  }
  return result;
}

Swift::Int sub_10015DDF4()
{
  return Hasher._finalize()();
}

Swift::Int sub_10015DEDC()
{
  return Hasher._finalize()();
}

Swift::Int sub_10015DFD4()
{
  return Hasher._finalize()();
}

Swift::Int sub_10015E080()
{
  return Hasher._finalize()();
}

Swift::Int sub_10015E198()
{
  return Hasher._finalize()();
}

uint64_t sub_10015E2A8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10015E37C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10015E4E4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10015E604()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10015E6DC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10015E770()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10015E864()
{
  return Hasher._finalize()();
}

Swift::Int sub_10015E948()
{
  return Hasher._finalize()();
}

Swift::Int sub_10015EA80()
{
  return Hasher._finalize()();
}

Swift::Int sub_10015EB74()
{
  return Hasher._finalize()();
}

Swift::Int sub_10015EC1C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10015ED30()
{
  return Hasher._finalize()();
}

Swift::Int sub_10015EE3C()
{
  return Hasher._finalize()();
}

char *sub_10015EF40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)_swiftEmptyArrayStorage;
  }
  BOOL v2 = (void **)(swift_bridgeObjectRetain() + 56);
  int v3 = (char *)_swiftEmptyArrayStorage;
  do
  {
    uint64_t v5 = *v2;
    if (*v2)
    {
      uint64_t v6 = (uint64_t)*(v2 - 1);
      uint64_t v12 = (uint64_t)*(v2 - 3);
      uint64_t v13 = (uint64_t)*(v2 - 2);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v7._uint64_t countAndFlagsBits = 538970682;
      v7._object = (void *)0xE400000000000000;
      String.append(_:)(v7);
      v8._uint64_t countAndFlagsBits = v6;
      v8._object = v5;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v3 = sub_10008892C(0, *((void *)v3 + 2) + 1, 1, v3);
      }
      unint64_t v10 = *((void *)v3 + 2);
      unint64_t v9 = *((void *)v3 + 3);
      if (v10 >= v9 >> 1) {
        int v3 = sub_10008892C((char *)(v9 > 1), v10 + 1, 1, v3);
      }
      *((void *)v3 + 2) = v10 + 1;
      unsigned int v4 = &v3[16 * v10];
      *((void *)v4 + 4) = v12;
      *((void *)v4 + 5) = v13;
    }
    v2 += 4;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_10015F098(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10015F0C8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001D790(v0, qword_100369270);
  sub_10001D758(v0, (uint64_t)qword_100369270);
  return Logger.init(subsystem:category:)();
}

void *sub_10015F14C()
{
  type metadata accessor for HandoffFeedbackManager(0);
  swift_allocObject();
  unint64_t result = sub_10015F3A8();
  qword_1003AC8F0 = (uint64_t)result;
  return result;
}

void sub_10015F18C()
{
  uint64_t v1 = v0;
  if (qword_10035A5A8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10001D758(v2, (uint64_t)qword_100369270);
  swift_retain_n();
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    sub_100166E34(0x74726F7065725FLL, 0xE700000000000000, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2080;
    if (*(void *)(v1 + 112))
    {
      type metadata accessor for HandoffFeedback.Report(0);
      swift_retain();
      uint64_t v6 = String.init<A>(describing:)();
      unint64_t v8 = v7;
    }
    else
    {
      unint64_t v8 = 0xE300000000000000;
      uint64_t v6 = 7104878;
    }
    sub_100166E34(v6, v8, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

void *sub_10015F3A8()
{
  uint64_t v1 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v1 - 8);
  uint64_t v20 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000A38C(&qword_100369638);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000A38C(&qword_1003695C0);
  uint64_t v7 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_100369630);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  uint64_t v14 = (char *)v0 + OBJC_IVAR____TtC17proximitycontrold22HandoffFeedbackManager_actionStream;
  uint64_t v21 = (char *)v0 + OBJC_IVAR____TtC17proximitycontrold22HandoffFeedbackManager_actionContinuation;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v13, v10);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v21, v9, v22);
  *(void *)((char *)v0 + OBJC_IVAR____TtC17proximitycontrold22HandoffFeedbackManager_actionStreamTask) = 0;
  if (IsAppleInternalBuild())
  {
    uint64_t v15 = type metadata accessor for TaskPriority();
    uint64_t v16 = (uint64_t)v20;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v20, 1, 1, v15);
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = v0;
    swift_retain();
    sub_100255A24(v16, (uint64_t)&unk_100369648, (uint64_t)v17);
    swift_release();
  }
  else
  {
    swift_release();
    return 0;
  }
  return v0;
}

uint64_t sub_10015F720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  sub_10000A38C(&qword_10035F870);
  *(void *)(v4 + 24) = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_10015F7B8, a4, 0);
}

uint64_t sub_10015F7B8()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  unint64_t v4 = sub_100167970();
  uint64_t v5 = (void *)swift_allocObject();
  void v5[2] = v1;
  _OWORD v5[3] = v4;
  long long v5[4] = v1;
  swift_retain_n();
  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold22HandoffFeedbackManager_actionStreamTask) = sub_100255A24(v2, (uint64_t)&unk_100369658, (uint64_t)v5);
  swift_release();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10015F8D0()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold22HandoffFeedbackManager_actionStreamTask))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  swift_release();

  uint64_t v1 = v0 + OBJC_IVAR____TtC17proximitycontrold22HandoffFeedbackManager_actionStream;
  uint64_t v2 = sub_10000A38C(&qword_100369630);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC17proximitycontrold22HandoffFeedbackManager_actionContinuation;
  uint64_t v4 = sub_10000A38C(&qword_1003695C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10015F9F8()
{
  return type metadata accessor for HandoffFeedbackManager(0);
}

uint64_t type metadata accessor for HandoffFeedbackManager(uint64_t a1)
{
  return sub_100014F7C(a1, (uint64_t *)&unk_1003692C8);
}

void sub_10015FA20()
{
  sub_1001642C0(319, &qword_1003692F8, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream);
  if (v0 <= 0x3F)
  {
    sub_1001642C0(319, (unint64_t *)&unk_100369300, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream.Continuation);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_10015FB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[14] = a4;
  uint64_t v6 = sub_10000A38C(qword_100369660);
  v4[15] = v6;
  v4[16] = *(void *)(v6 - 8);
  v4[17] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_10015FC0C, a4, 0);
}

uint64_t sub_10015FC0C()
{
  sub_10000A38C(&qword_100369630);
  AsyncStream.makeAsyncIterator()();
  unint64_t v1 = sub_100167970();
  v0[18] = v1;
  uint64_t v2 = v0[14];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[19] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10015FCF8;
  uint64_t v4 = v0[15];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, v2, v1, v4);
}

uint64_t sub_10015FCF8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_10015FE08, v1, 0);
}

uint64_t sub_10015FE08()
{
  if (*(unsigned __int8 *)(v0 + 56) == 255)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 128) + 8))(*(void *)(v0 + 136), *(void *)(v0 + 120));
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    sub_100167D54((long long *)(v0 + 16), (_OWORD *)(v0 + 64));
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v1;
    void *v1 = v0;
    v1[1] = sub_10015FF0C;
    return sub_1001609B4(v0 + 64);
  }
}

uint64_t sub_10015FF0C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_10016001C, v1, 0);
}

uint64_t sub_10016001C()
{
  sub_10001DD38((uint64_t)(v0 + 8));
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[14];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[19] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10015FCF8;
  uint64_t v4 = v0[15];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, v2, v1, v4);
}

uint64_t sub_1001600E0()
{
  uint64_t v0 = sub_10000A38C(&qword_1003695A8);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10035A5A8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10001D758(v4, (uint64_t)qword_100369270);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  int v7 = v6;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v24 = v0;
    uint64_t v8 = swift_slowAlloc();
    int v21 = v7;
    uint64_t v9 = (uint8_t *)v8;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v22 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    v19[1] = v9 + 4;
    uint64_t v20 = v9;
    uint64_t v25 = v10;
    uint64_t v26 = 60;
    *(void *)&long long v27 = 0xE100000000000000;
    swift_retain();
    UUID.uuidString.getter();
    sub_100089A9C(8);
    uint64_t v23 = v1;
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 32;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    swift_retain();
    uint64_t v13 = sub_1001F7514();
    uint64_t v15 = v14;
    swift_release();
    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    uint64_t v1 = v23;
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 62;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    swift_release();
    uint64_t v26 = sub_100166E34(v26, v27, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v0 = v24;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, (os_log_type_t)v21, "Session started: %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v26 = 5;
  long long v27 = 0u;
  long long v28 = 0u;
  char v29 = 3;
  sub_10000A38C(&qword_1003695C0);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_100160470(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_1003695A8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10035A5A8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10001D758(v6, (uint64_t)qword_100369270);
  swift_retain_n();
  int v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  int v9 = v8;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v26 = v2;
    uint64_t v10 = swift_slowAlloc();
    int v23 = v9;
    Swift::String v11 = (uint8_t *)v10;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v24 = v12;
    *(_DWORD *)Swift::String v11 = 136315138;
    v21[1] = v11 + 4;
    uint64_t v22 = v11;
    uint64_t v27 = v12;
    uint64_t v28 = 60;
    unint64_t v29 = 0xE100000000000000;
    swift_retain();
    UUID.uuidString.getter();
    sub_100089A9C(8);
    uint64_t v25 = v3;
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 32;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    swift_retain();
    uint64_t v15 = sub_1001F7514();
    Swift::String v17 = v16;
    swift_release();
    v18._uint64_t countAndFlagsBits = v15;
    v18._object = v17;
    String.append(_:)(v18);
    uint64_t v3 = v25;
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = 62;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    swift_release();
    uint64_t v28 = sub_100166E34(v28, v29, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v2 = v26;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, (os_log_type_t)v23, "Session finished: %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v28 = *(void *)(a1 + 24);
  char v30 = 0;
  swift_retain();
  sub_10000A38C(&qword_1003695C0);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1001607FC()
{
  uint64_t v0 = sub_10000A38C(&qword_1003695A8);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10035A5A8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10001D758(v4, (uint64_t)qword_100369270);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    int v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Presenting...", v7, 2u);
    swift_slowDealloc();
  }

  uint64_t v9 = 0;
  char v10 = 0;
  sub_10000A38C(&qword_1003695C0);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1001609B4(uint64_t a1)
{
  v2[46] = a1;
  v2[47] = v1;
  sub_10000A38C(&qword_10036C090);
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_100160A58, v1, 0);
}

uint64_t sub_100160A58()
{
  uint64_t v46 = v0;
  uint64_t v1 = (long long *)(v0 + 64);
  if (qword_10035A5A8 != -1) {
    swift_once();
  }
  uint64_t v2 = *(uint64_t **)(v0 + 368);
  uint64_t v3 = type metadata accessor for Logger();
  sub_10001D758(v3, (uint64_t)qword_100369270);
  sub_100167830(v2, v0 + 16);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v6 = 136315138;
    sub_100167830((uint64_t *)(v0 + 16), v0 + 112);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 360) = sub_100166E34(v7, v8, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DD38(v0 + 16);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Action: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (long long *)(v0 + 64);
    swift_slowDealloc();
  }
  else
  {
    sub_10001DD38(v0 + 16);
  }

  sub_100167830(*(uint64_t **)(v0 + 368), (uint64_t)v1);
  uint64_t v9 = *(void *)(v0 + 64);
  switch(*(unsigned char *)(v0 + 104))
  {
    case 1:
      sub_10000D7E8(v1, v0 + 304);
      uint64_t v13 = *(void *)(v0 + 328);
      uint64_t v14 = *(void *)(v0 + 336);
      uint64_t v15 = sub_10000D6E4((void *)(v0 + 304), v13);
      Swift::String v16 = (void *)swift_task_alloc();
      *(void *)(v0 + 448) = v16;
      *Swift::String v16 = v0;
      v16[1] = sub_100161CA0;
      return sub_1001634B4((uint64_t)v15, v13, v14);
    case 2:
      sub_1000205B0(*(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
      goto LABEL_15;
    case 3:
      int8x16_t v19 = vorrq_s8(*(int8x16_t *)(v0 + 72), *(int8x16_t *)(v0 + 88));
      int8x8_t v20 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
      if (*(void *)&v20 | v9)
      {
        if (v9 == 1 && !*(void *)&v20)
        {
          *(void *)(v0 + 280) = sub_10000A38C(&qword_100369610);
          *(void *)(v0 + 288) = sub_10000B010(&qword_100369618, &qword_100369610);
          uint64_t v21 = swift_allocObject();
          *(void *)(v0 + 256) = v21;
          *(void *)(v21 + 16) = 0xD000000000000010;
          *(void *)(v21 + 24) = 0x80000001002B2C60;
          *(void *)(v21 + 32) = 0xD000000000000017;
          *(void *)(v21 + 40) = 0x80000001002C09C0;
          *(void *)(v21 + 56) = 0;
          *(void *)(v21 + 64) = 0;
          *(void *)(v21 + 48) = 0;
          *(_WORD *)(v21 + 72) = 257;
          *(void *)(v21 + 80) = &off_10031E948;
          *(void *)(v21 + 88) = sub_100167424;
          *(void *)(v21 + 96) = 0;
          *(void *)(v21 + 104) = sub_100165030;
          *(void *)(v21 + 112) = 0;
          *(unsigned char *)(v0 + 296) = 1;
          uint64_t v22 = (void *)swift_task_alloc();
          *(void *)(v0 + 424) = v22;
          *uint64_t v22 = v0;
          v22[1] = sub_1001618E4;
          uint64_t v23 = v0 + 256;
LABEL_57:
          return ((uint64_t (*)(uint64_t))sub_1001609B4)(v23);
        }
        if (v9 == 2 && !*(void *)&v20)
        {
          uint64_t v28 = *(void *)(v0 + 376);
          if (*(void *)(v28 + 112))
          {
            uint64_t v29 = *(void *)(v28 + 112);
          }
          else
          {
            uint64_t v36 = *(void *)(v0 + 384);
            uint64_t v37 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
            type metadata accessor for HandoffFeedback.Report(0);
            uint64_t v29 = swift_allocObject();
            sub_100165D18(v36, 7);
            *(void *)(v28 + 112) = v29;
            swift_retain_n();
            swift_release();
            sub_10015F18C();
            swift_release();
          }
          *(unsigned char *)(v29 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_sentiment) = 1;
          swift_retain();
          swift_release();
          *(void *)(v0 + 232) = sub_10000A38C(&qword_1003695B0);
          *(void *)(v0 + 240) = sub_10000B010(&qword_1003695B8, &qword_1003695B0);
          uint64_t v38 = swift_allocObject();
          *(void *)(v0 + 208) = v38;
          uint64_t v39 = v0 + 208;
          *(void *)(v38 + 16) = 0xD000000000000012;
          *(void *)(v38 + 24) = 0x80000001002C0A50;
          *(void *)(v38 + 32) = 0xD000000000000012;
          *(void *)(v38 + 40) = 0x80000001002C0A70;
          *(_OWORD *)(v38 + 48) = xmmword_100291140;
          *(void *)(v38 + 64) = 0;
          *(_WORD *)(v38 + 72) = 257;
          *(void *)(v38 + 80) = &off_10031E970;
          *(void *)(v38 + 88) = sub_10015F098;
          *(void *)(v38 + 96) = 0;
          *(void *)(v38 + 104) = sub_1001652B8;
          *(void *)(v38 + 112) = 0;
          *(unsigned char *)(v0 + 248) = 1;
          uint64_t v40 = (void *)swift_task_alloc();
          *(void *)(v0 + 432) = v40;
          *uint64_t v40 = v0;
          uint64_t v41 = sub_100161A00;
LABEL_56:
          v40[1] = v41;
          uint64_t v23 = v39;
          goto LABEL_57;
        }
        if (v9 == 3 && !*(void *)&v20)
        {
          uint64_t v30 = *(void *)(v0 + 376);
          if (*(void *)(v30 + 112))
          {
            uint64_t v31 = *(void *)(v30 + 112);
          }
          else
          {
            uint64_t v42 = *(void *)(v0 + 384);
            uint64_t v43 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 1, 1, v43);
            type metadata accessor for HandoffFeedback.Report(0);
            uint64_t v31 = swift_allocObject();
            sub_100165D18(v42, 7);
            *(void *)(v30 + 112) = v31;
            swift_retain_n();
            swift_release();
            sub_10015F18C();
            swift_release();
          }
          *(unsigned char *)(v31 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_sentiment) = 0;
          swift_retain();
          swift_release();
          *(void *)(v0 + 184) = sub_10000A38C(&qword_100369600);
          *(void *)(v0 + 192) = sub_10000B010(&qword_100369608, &qword_100369600);
          uint64_t v44 = swift_allocObject();
          *(void *)(v0 + 160) = v44;
          uint64_t v39 = v0 + 160;
          *(void *)(v44 + 16) = 0xD000000000000010;
          *(void *)(v44 + 24) = 0x80000001002C09A0;
          *(_OWORD *)(v44 + 32) = 0u;
          *(_OWORD *)(v44 + 48) = 0u;
          *(void *)(v44 + 64) = 0;
          *(_WORD *)(v44 + 72) = 257;
          *(void *)(v44 + 80) = &off_10031E5D0;
          *(void *)(v44 + 88) = sub_100167470;
          *(void *)(v44 + 96) = 0;
          *(void *)(v44 + 104) = sub_10016537C;
          *(void *)(v44 + 112) = 0;
          *(unsigned char *)(v0 + 200) = 1;
          uint64_t v40 = (void *)swift_task_alloc();
          *(void *)(v0 + 440) = v40;
          *uint64_t v40 = v0;
          uint64_t v41 = sub_100161B1C;
          goto LABEL_56;
        }
        if (v9 == 4 && !*(void *)&v20)
        {
          sub_100163E14();
          goto LABEL_15;
        }
        if (v9 != 5 || *(void *)&v20)
        {
LABEL_15:
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v18 = *(void *)(v0 + 8);
          __asm { BRAA            X1, X16 }
        }
        *(void *)(*(void *)(v0 + 376) + 112) = 0;
        swift_release();
        sub_10015F18C();
        uint64_t v26 = (void *)swift_task_alloc();
        *(void *)(v0 + 456) = v26;
        *uint64_t v26 = v0;
        uint64_t v27 = sub_100161E20;
      }
      else
      {
        uint64_t v26 = (void *)swift_task_alloc();
        *(void *)(v0 + 416) = v26;
        *uint64_t v26 = v0;
        uint64_t v27 = sub_1001617D4;
      }
      v26[1] = v27;
      v26[3] = *(void *)(v0 + 376);
      return ((uint64_t (*)(uint64_t (*)()))_swift_task_switch)(sub_100163038);
    default:
      uint64_t v10 = *(void *)(v0 + 392);
      if (v9)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        swift_retain();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        swift_release();
        sub_100097644((char *)v10);
        swift_release();
        LODWORD(v10) = *(unsigned __int8 *)(v9 + 16);
        if (v10 != 7) {
          goto LABEL_40;
        }
        swift_getKeyPath();
        swift_getKeyPath();
        swift_retain();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        uint64_t v10 = sub_1000983CC();
        uint64_t v12 = v11;
        swift_release();
        if (v12)
        {
          LOBYTE(v10) = sub_1001AC344(v10, v12);
          swift_bridgeObjectRelease();
        }
        else
        {
          LOBYTE(v10) = 7;
        }
        if ((*(unsigned char *)(v9 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_isMock) & 1) == 0) {
          *(unsigned char *)(v9 + 16) = v10;
        }
        swift_release();
        if (v10 == 7)
        {
          char v25 = 7;
        }
        else
        {
LABEL_40:
          if (((1 << v10) & 7) != 0) {
            char v25 = 0;
          }
          else {
            char v25 = 2;
          }
        }
      }
      else
      {
        uint64_t v24 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v10, 1, 1, v24);
        char v25 = 7;
      }
      *(void *)(v0 + 400) = v9;
      uint64_t v32 = *(void *)(v0 + 392);
      uint64_t v33 = *(void *)(v0 + 376);
      type metadata accessor for HandoffFeedback.Report(0);
      uint64_t v34 = swift_allocObject();
      sub_100165D18(v32, v25);
      *(void *)(v33 + 112) = v34;
      swift_retain_n();
      swift_release();
      sub_10015F18C();
      swift_release_n();
      char v35 = (void *)swift_task_alloc();
      *(void *)(v0 + 408) = v35;
      *char v35 = v0;
      v35[1] = sub_100161654;
      return sub_10016202C();
  }
}

uint64_t sub_100161654()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_100161764, v1, 0);
}

uint64_t sub_100161764()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001617D4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_1001680E0, v1, 0);
}

uint64_t sub_1001618E4()
{
  uint64_t v1 = *(void *)v0 + 256;
  uint64_t v2 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  sub_10001DD38(v1);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_1001680E0, v2, 0);
}

uint64_t sub_100161A00()
{
  uint64_t v1 = *(void *)v0 + 208;
  uint64_t v2 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  sub_10001DD38(v1);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_1001680E0, v2, 0);
}

uint64_t sub_100161B1C()
{
  uint64_t v1 = *(void *)v0 + 160;
  uint64_t v2 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  sub_10001DD38(v1);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_100161C38, v2, 0);
}

uint64_t sub_100161C38()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100161CA0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_100161DB0, v1, 0);
}

uint64_t sub_100161DB0()
{
  sub_10000CC5C(v0 + 304);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100161E20()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_1001680E0, v1, 0);
}

void sub_100161F30(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000010;
  *(void *)(a1 + 8) = 0x80000001002B2C60;
  *(void *)(a1 + 16) = 0xD000000000000017;
  *(void *)(a1 + 24) = 0x80000001002C09C0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 56) = 257;
  *(void *)(a1 + 64) = &off_10031E948;
  *(void *)(a1 + 72) = sub_100167424;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = sub_100165030;
  *(void *)(a1 + 96) = 0;
}

double sub_100161FAC@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000012;
  *(void *)(a1 + 8) = 0x80000001002C0A50;
  *(void *)(a1 + 16) = 0xD000000000000012;
  *(void *)(a1 + 24) = 0x80000001002C0A70;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_100291140;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 257;
  *(void *)(a1 + 64) = &off_10031E970;
  *(void *)(a1 + 72) = sub_10015F098;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = sub_1001652B8;
  *(void *)(a1 + 96) = 0;
  return result;
}

uint64_t sub_10016202C()
{
  v1[4] = v0;
  sub_10000A38C(&qword_10035F870);
  v1[5] = swift_task_alloc();
  uint64_t v2 = sub_10000A38C(&qword_1003695C0);
  v1[6] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[7] = v3;
  v1[8] = *(void *)(v3 + 64);
  v1[9] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v1[10] = v4;
  void *v4 = v1;
  v4[1] = sub_100162170;
  v4[3] = v0;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_100163038, v0, 0);
}

uint64_t sub_100162170()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_100162280, v1, 0);
}

uint64_t sub_100162280()
{
  if (qword_10035A5A8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[11] = sub_10001D758(v1, (uint64_t)qword_100369270);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Presenting banner...", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[4];

  uint64_t v9 = *(void *)(v5 + 128);
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = v0[9];
    uint64_t v13 = v0[6];
    uint64_t v14 = v0[7];
    uint64_t v15 = v0[4];
    *(void *)(v5 + 128) = v11;
    v0[2] = v11;
    v0[12] = dispatch thunk of CustomStringConvertible.description.getter();
    v0[13] = v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v15 + OBJC_IVAR____TtC17proximitycontrold22HandoffFeedbackManager_actionContinuation, v13);
    unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v18 = swift_allocObject();
    v0[14] = v18;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 32))(v18 + v17, v12, v13);
    v0[15] = type metadata accessor for MainActor();
    v0[16] = static MainActor.shared.getter();
    uint64_t v19 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v21 = v20;
    uint64_t v6 = sub_100162494;
    uint64_t v7 = v19;
    uint64_t v8 = v21;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v6, v7, v8);
}

uint64_t sub_100162494()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[4];
  swift_release();
  id v5 = objc_allocWithZone((Class)type metadata accessor for HandoffFeedbackBannerPresenter());
  sub_10001C884(v3, v1, (uint64_t)sub_1001678FC, v2);
  v0[17] = v6;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_10016254C, v4, 0);
}

uint64_t sub_10016254C()
{
  *(void *)(v0 + 144) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_1001625D8, v2, v1);
}

uint64_t sub_1001625D8()
{
  swift_release();
  sub_10001D0B8();
  *(void *)(v0 + 152) = 0;
  uint64_t v1 = *(void *)(v0 + 32);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_100162668, v1, 0);
}

uint64_t sub_100162668()
{
  uint64_t v1 = (void *)v0[17];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = *(void **)(v3 + 120);
  *(void *)(v3 + 120) = v1;
  id v5 = v1;

  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v2, 1, 1, v6);
  uint64_t v7 = *(void *)(v3 + 128);
  unint64_t v8 = sub_100167970();
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = v3;
  v9[3] = v8;
  unsigned char v9[4] = v7;
  v9[5] = v3;
  v9[6] = v5;
  swift_retain_n();
  id v10 = v5;
  sub_10007CBF8(v2, (uint64_t)&unk_1003695F8, (uint64_t)v9);

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1001627B4()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "### Failed to present banner: %@", v3, 0xCu);
    sub_10000A38C(&qword_1003695C8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100162984(uint64_t *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_1003695A8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100167830(a1, (uint64_t)v7);
  sub_10000A38C(&qword_1003695C0);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100162A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  uint64_t v8 = type metadata accessor for ContinuousClock();
  v6[5] = v8;
  v6[6] = *(void *)(v8 - 8);
  v6[7] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_100162B44, a5, 0);
}

uint64_t sub_100162B44()
{
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v1 = *(id *)(qword_1003AC750 + 280);
  sub_1000FEB94();

  uint64_t v2 = static Duration.seconds(_:)();
  uint64_t v4 = v3;
  ContinuousClock.init()();
  uint64_t v7 = (char *)&dword_10036E328 + dword_10036E328;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v5;
  void *v5 = v0;
  v5[1] = sub_100162C74;
  return ((uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t))v7)(v2, v4, 0, 0, 1);
}

uint64_t sub_100162C74()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  uint64_t v4 = *(void *)(*v1 + 48);
  uint64_t v5 = *(void *)(*v1 + 40);
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 24);
  if (v0) {
    uint64_t v7 = sub_100162F2C;
  }
  else {
    uint64_t v7 = sub_100162DFC;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(v7, v6, 0);
}

uint64_t sub_100162DFC()
{
  uint64_t v1 = v0[3];
  if (*(void *)(v1 + 128) != v0[2]) {
    goto LABEL_7;
  }
  uint64_t v2 = *(void **)(v1 + 120);
  if (!v2
    || (uint64_t v3 = (void *)v0[4],
        type metadata accessor for HandoffFeedbackBannerPresenter(),
        id v4 = v3,
        id v5 = v2,
        char v6 = static NSObject.== infix(_:_:)(),
        v5,
        v4,
        (v6 & 1) == 0))
  {
LABEL_7:
    swift_task_dealloc();
    uint64_t v9 = v0[1];
    __asm { BRAA            X1, X16 }
  }
  type metadata accessor for MainActor();
  v0[10] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_100162F90, v8, v7);
}

uint64_t sub_100162F2C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100162F90()
{
  swift_release();
  sub_10001D288();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100163018()
{
  *(void *)(v1 + 24) = v0;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_100163038, v0, 0);
}

uint64_t sub_100163038()
{
  uint64_t v1 = *(void **)(v0[3] + 120);
  v0[4] = v1;
  if (!v1)
  {
    uint64_t v10 = v0[1];
    __asm { BRAA            X1, X16 }
  }
  uint64_t v2 = qword_10035A5A8;
  id v3 = v1;
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  v0[5] = sub_10001D758(v4, (uint64_t)qword_100369270);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Dismissing banner...", v7, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for MainActor();
  v0[6] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_1001631D4, v9, v8);
}

uint64_t sub_1001631D4()
{
  swift_release();
  sub_10001D288();
  *(void *)(v0 + 56) = 0;
  uint64_t v1 = *(void *)(v0 + 24);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_100163268, v1, 0);
}

uint64_t sub_100163268()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void **)(v1 + 120);
  *(void *)(v1 + 120) = 0;

  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001632D8()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void **)(v0 + 32);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "### Failed to dismiss banner: %@", v4, 0xCu);
    sub_10000A38C(&qword_1003695C8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = *(void **)(v7 + 120);
  *(void *)(v7 + 120) = 0;

  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1001634B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[28] = a3;
  v4[29] = v3;
  v4[26] = a1;
  v4[27] = a2;
  uint64_t v5 = sub_10000A38C(&qword_1003695A8);
  v4[30] = v5;
  v4[31] = *(void *)(v5 - 8);
  v4[32] = swift_task_alloc();
  sub_10000A38C(&qword_10036C090);
  v4[33] = swift_task_alloc();
  v4[34] = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for PCUserAlertResult();
  v4[35] = v6;
  v4[36] = *(void *)(v6 - 8);
  v4[37] = swift_task_alloc();
  uint64_t v7 = (void *)swift_task_alloc();
  v4[38] = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_100163688;
  _OWORD v7[3] = v3;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_100163038, v3, 0);
}

uint64_t sub_100163688()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 232);
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_100163798, v1, 0);
}

uint64_t sub_100163798()
{
  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  type metadata accessor for PCUserAlert();
  (*(void (**)(uint64_t, uint64_t))(v1 + 16))(v2, v1);
  v0[39] = PCUserAlert.__allocating_init(definition:)((uint64_t)(v0 + 2));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[40] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100163890;
  uint64_t v4 = v0[37];
  return PCUserAlert.run()(v4);
}

uint64_t sub_100163890()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 328) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 232);
  if (v0) {
    uint64_t v4 = sub_100163BEC;
  }
  else {
    uint64_t v4 = sub_1001639BC;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(v4, v3, 0);
}

uint64_t sub_1001639BC()
{
  uint64_t v1 = v0[29];
  uint64_t v13 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(void))(v0[28] + 24))(v0[27]);
  if (*(void *)(v1 + 112))
  {
    uint64_t v2 = *(void *)(v1 + 112);
  }
  else
  {
    uint64_t v3 = v0[33];
    uint64_t v4 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
    type metadata accessor for HandoffFeedback.Report(0);
    uint64_t v2 = swift_allocObject();
    sub_100165D18(v3, 7);
    *(void *)(v1 + 112) = v2;
    swift_retain_n();
    swift_release();
    sub_10015F18C();
    swift_release();
  }
  uint64_t v5 = v0[36];
  uint64_t v6 = v0[37];
  uint64_t v12 = v0[35];
  uint64_t v8 = v0[31];
  uint64_t v7 = v0[32];
  uint64_t v11 = v0[30];
  swift_retain();
  v13(v2, v6);
  swift_release();
  swift_release();
  sub_100167830(v0 + 13, (uint64_t)(v0 + 19));
  sub_10000A38C(&qword_1003695C0);
  AsyncStream.Continuation.yield(_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v11);
  sub_10001DD38((uint64_t)(v0 + 13));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100163BEC()
{
  swift_release();
  if (qword_10035A5A8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10001D758(v1, (uint64_t)qword_100369270);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 200) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "### Alert failed: %@", v4, 0xCu);
    sub_10000A38C(&qword_1003695C8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100163E14()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_1003695A8);
  __chkstk_darwin(v2);
  uint64_t v3 = sub_10000A38C(&qword_10036C090);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0) + 88;
  if (!*(void *)(v1 + 112))
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
    type metadata accessor for HandoffFeedback.Report(0);
    uint64_t v7 = swift_allocObject();
    sub_100165D18((uint64_t)v5, 7);
    *(void *)(v1 + 112) = v7;
    swift_retain_n();
    swift_release();
    sub_10015F18C();
    swift_release();
  }
  swift_retain();
  sub_100164310(v10);
  swift_release();
  sub_1000BCA10(0, 0);
  return sub_1001676E0((uint64_t)v10);
}

void sub_1001642C0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for HandoffFeedback.Action);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100164310@<X0>(uint64_t *a1@<X8>)
{
  v118 = a1;
  unint64_t v2 = 0xD000000000000012;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v120 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  v116 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v105 = (char *)&v105 - v6;
  uint64_t v117 = sub_10000A38C(&qword_10036C090);
  uint64_t v112 = *(void *)(v117 - 8);
  uint64_t v7 = __chkstk_darwin(v117);
  v114 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v113 = (uint64_t)&v105 - v9;
  sub_10000A38C(&qword_10035D8E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028FDD0;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x80000001002B2C60;
  uint64_t v11 = (void *)(inited + 48);
  long long v12 = xmmword_10029DCF0;
  uint64_t v13 = (void *)inited;
  switch(*(unsigned char *)(v1 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_sentiment))
  {
    case 1:
      long long v12 = xmmword_10029DD10;
      goto LABEL_4;
    case 2:
      long long v12 = xmmword_10029DD00;
      goto LABEL_4;
    case 3:
      *uint64_t v11 = 0;
      *(void *)(inited + 56) = 0;
      goto LABEL_6;
    default:
LABEL_4:
      *(_OWORD *)uint64_t v11 = v12;
LABEL_6:
      unint64_t v111 = OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_problem;
      uint64_t v14 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_problem);
      unint64_t v15 = 0xD000000000000015;
      unint64_t v16 = 0x80000001002B1890;
      uint64_t v121 = v3;
      switch(v14)
      {
        case 1:
          unint64_t v15 = 0xD000000000000013;
          unint64_t v17 = "Handoff didn't work";
          goto LABEL_11;
        case 2:
          unint64_t v15 = 0xD000000000000013;
          unint64_t v17 = "Unexpected behavior";
          goto LABEL_11;
        case 3:
          unint64_t v16 = 0x80000001002B18F0;
          unint64_t v15 = 0xD000000000000012;
          goto LABEL_14;
        case 4:
          unint64_t v15 = 0xD000000000000011;
          unint64_t v17 = "Performance issue";
LABEL_11:
          unint64_t v16 = (unint64_t)(v17 - 32) | 0x8000000000000000;
          goto LABEL_14;
        case 5:
          unint64_t v16 = 0xEE00646572727563;
          unint64_t v15 = 0x636F20726F727245;
          goto LABEL_14;
        case 6:
          unint64_t v16 = 0xE800000000000000;
          unint64_t v15 = 0x2E2E2E726568744FLL;
          goto LABEL_14;
        case 7:
          *(void *)(inited + 64) = 0;
          *(void *)(inited + 72) = 0;
          goto LABEL_15;
        default:
LABEL_14:
          *(void *)(inited + 64) = v15;
          *(void *)(inited + 72) = v16;
LABEL_15:
          swift_bridgeObjectRetain();
          uint64_t v18 = _swiftEmptyArrayStorage;
          uint64_t v19 = sub_10008892C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
          unint64_t v21 = *((void *)v19 + 2);
          unint64_t v20 = *((void *)v19 + 3);
          uint64_t v22 = v19;
          if (v21 >= v20 >> 1) {
            uint64_t v22 = sub_10008892C((char *)(v20 > 1), v21 + 1, 1, v19);
          }
          uint64_t v115 = v1;
          uint64_t v23 = v22;
          *((void *)v22 + 2) = v21 + 1;
          uint64_t v24 = &v22[16 * v21];
          *((void *)v24 + 4) = 0xD000000000000010;
          *((void *)v24 + 5) = 0x80000001002B2C60;
          uint64_t v25 = v13[7];
          if (v25)
          {
            uint64_t v26 = v13[6];
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v23 = sub_10008892C(0, *((void *)v23 + 2) + 1, 1, v23);
            }
            unint64_t v28 = *((void *)v23 + 2);
            unint64_t v27 = *((void *)v23 + 3);
            if (v28 >= v27 >> 1) {
              uint64_t v23 = sub_10008892C((char *)(v27 > 1), v28 + 1, 1, v23);
            }
            *((void *)v23 + 2) = v28 + 1;
            uint64_t v29 = &v23[16 * v28];
            *((void *)v29 + 4) = v26;
            *((void *)v29 + 5) = v25;
          }
          uint64_t v30 = v13[9];
          if (v30)
          {
            uint64_t v31 = v13[8];
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v23 = sub_10008892C(0, *((void *)v23 + 2) + 1, 1, v23);
            }
            unint64_t v33 = *((void *)v23 + 2);
            unint64_t v32 = *((void *)v23 + 3);
            if (v33 >= v32 >> 1) {
              uint64_t v23 = sub_10008892C((char *)(v32 > 1), v33 + 1, 1, v23);
            }
            *((void *)v23 + 2) = v33 + 1;
            uint64_t v34 = &v23[16 * v33];
            *((void *)v34 + 4) = v31;
            *((void *)v34 + 5) = v30;
          }
          swift_bridgeObjectRelease();
          int64_t v35 = *((void *)v23 + 2);
          if (v35)
          {
            uint64_t v124 = _swiftEmptyArrayStorage;
            sub_1000B54DC(0, v35, 0);
            uint64_t v18 = v124;
            uint64_t v119 = (uint64_t)v23;
            uint64_t v36 = (void **)(v23 + 40);
            do
            {
              uint64_t v37 = (uint64_t)*(v36 - 1);
              uint64_t v38 = *v36;
              uint64_t v122 = 91;
              unint64_t v123 = 0xE100000000000000;
              swift_bridgeObjectRetain();
              v39._uint64_t countAndFlagsBits = v37;
              v39._object = v38;
              String.append(_:)(v39);
              v40._uint64_t countAndFlagsBits = 93;
              v40._object = (void *)0xE100000000000000;
              String.append(_:)(v40);
              swift_bridgeObjectRelease();
              uint64_t v42 = v122;
              unint64_t v41 = v123;
              uint64_t v124 = v18;
              unint64_t v44 = v18[2];
              unint64_t v43 = v18[3];
              if (v44 >= v43 >> 1)
              {
                sub_1000B54DC(v43 > 1, v44 + 1, 1);
                uint64_t v18 = v124;
              }
              v36 += 2;
              v18[2] = v44 + 1;
              uint64_t v45 = &v18[2 * v44];
              v45[4] = v42;
              v45[5] = v41;
              --v35;
            }
            while (v35);
            swift_bridgeObjectRelease();
            unint64_t v2 = 0xD000000000000012;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          uint64_t v122 = (uint64_t)v18;
          uint64_t v46 = sub_10000A38C((uint64_t *)&unk_100367D40);
          uint64_t v47 = sub_10000B010((unint64_t *)&qword_10035E7F0, (uint64_t *)&unk_100367D40);
          uint64_t v119 = v46;
          unint64_t v108 = v47;
          uint64_t v48 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v50 = v49;
          swift_bridgeObjectRelease();
          uint64_t v122 = v48;
          unint64_t v123 = v50;
          swift_bridgeObjectRetain();
          v51._uint64_t countAndFlagsBits = 32;
          v51._object = (void *)0xE100000000000000;
          String.append(_:)(v51);
          swift_bridgeObjectRelease();
          uint64_t v52 = v122;
          unint64_t v53 = v123;
          uint64_t v54 = v115;
          uint64_t v55 = (uint64_t *)(v115 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_problemExplanation);
          if (*(void *)(v115 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_problemExplanation + 8))
          {
            uint64_t v56 = *v55;
            uint64_t v57 = *(void **)(v115 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_problemExplanation + 8);
          }
          else
          {
            uint64_t v58 = (uint64_t *)(v115 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_comments);
            if (*(void *)(v115 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_comments + 8))
            {
              uint64_t v56 = *v58;
              uint64_t v57 = (void *)v58[1];
            }
            else
            {
              uint64_t v56 = 0x6E776F6E6B6E7528;
              uint64_t v57 = (void *)0xE900000000000029;
            }
            swift_bridgeObjectRetain();
          }
          break;
      }
      break;
  }
  uint64_t v122 = v52;
  unint64_t v123 = v53;
  swift_bridgeObjectRetain();
  v59._uint64_t countAndFlagsBits = v56;
  v59._object = v57;
  String.append(_:)(v59);
  unint64_t v109 = v123;
  uint64_t v110 = v122;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000A38C(&qword_1003695D0);
  uint64_t v60 = swift_initStackObject();
  *(_OWORD *)(v60 + 16) = xmmword_100291160;
  *(void *)(v60 + 32) = 0x6D617473656D6954;
  *(void *)(v60 + 40) = 0xE900000000000070;
  id v61 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v62 = String._bridgeToObjectiveC()();
  [v61 setDateFormat:v62];

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v64 = [v61 stringFromDate:isa];

  uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v67 = v66;

  *(void *)(v60 + 48) = v65;
  *(void *)(v60 + 56) = v67;
  strcpy((char *)(v60 + 64), "Device Family");
  *(_WORD *)(v60 + 78) = -4864;
  uint64_t v68 = OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_deviceFamily;
  uint64_t v69 = 8 * *(char *)(v54 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_deviceFamily);
  uint64_t v70 = *(void *)&aHomepod_1[v69];
  uint64_t v71 = *(void *)((char *)&unk_10029E220 + v69);
  *(void *)(v60 + 80) = v70;
  *(void *)(v60 + 88) = v71;
  *(void *)(v60 + 96) = 0x746E65746E49;
  *(void *)(v60 + 104) = 0xE600000000000000;
  unint64_t v72 = 0x80000001002B1940;
  unint64_t v73 = 0xD000000000000012;
  switch(*(unsigned char *)(v54 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_intent))
  {
    case 1:
      unint64_t v73 = 0xD000000000000014;
      uint64_t v74 = "Media PULL to iPhone";
      goto LABEL_46;
    case 2:
      unint64_t v73 = 0xD00000000000001ALL;
      uint64_t v74 = "FaceTime/Call PUSH to peer";
      goto LABEL_46;
    case 3:
      unint64_t v73 = 0xD00000000000001CLL;
      uint64_t v74 = "FaceTime/Call PULL to iPhone";
LABEL_46:
      unint64_t v72 = (unint64_t)(v74 - 32) | 0x8000000000000000;
      goto LABEL_48;
    case 4:
      unint64_t v72 = 0xE800000000000000;
      unint64_t v73 = 0x2E2E2E726568744FLL;
      goto LABEL_48;
    case 5:
      *(void *)(v60 + 112) = 0;
      *(void *)(v60 + 120) = 0;
      goto LABEL_49;
    default:
LABEL_48:
      *(void *)(v60 + 112) = v73;
      *(void *)(v60 + 120) = v72;
LABEL_49:
      *(void *)(v60 + 128) = 0x7470697263736544;
      *(void *)(v60 + 136) = 0xEB000000006E6F69;
      uint64_t v75 = v55[1];
      *(void *)(v60 + 144) = *v55;
      *(void *)(v60 + 152) = v75;
      *(void *)(v60 + 160) = 0x73746E656D6D6F43;
      *(void *)(v60 + 168) = 0xE800000000000000;
      uint64_t v76 = *(void *)(v54 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_comments + 8);
      *(void *)(v60 + 176) = *(void *)(v54 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_comments);
      *(void *)(v60 + 184) = v76;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v77 = sub_10015EF40(v60);
      swift_setDeallocating();
      sub_10000A38C(&qword_1003695D8);
      swift_arrayDestroy();
      uint64_t v122 = (uint64_t)v77;
      uint64_t v78 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v119 = v79;
      swift_bridgeObjectRelease();
      int v80 = *(unsigned __int8 *)(v54 + v111);
      if (*(unsigned char *)(v54 + v68))
      {
        uint64_t v81 = (uint64_t)v114;
        if (*(unsigned char *)(v54 + v111))
        {
          unint64_t v2 = 0xD000000000000011;
          unint64_t v111 = 0x80000001002C0780;
          strcpy((char *)&v107[1], "1108651");
          unint64_t v108 = 0xE300000000000000;
          uint64_t v82 = &off_10031EA18;
LABEL_54:
          uint64_t v106 = v82;
          v107[0] = 7105601;
          goto LABEL_59;
        }
        unint64_t v111 = 0x80000001002C07A0;
        unint64_t v108 = 0xEA00000000002973;
        strcpy((char *)v107, "(New Bug1109279");
        uint64_t v83 = &off_10031E9F0;
      }
      else
      {
        uint64_t v81 = (uint64_t)v114;
        if (*(unsigned char *)(v54 + v111))
        {
          unint64_t v2 = 0xD000000000000011;
          unint64_t v111 = 0x80000001002C0780;
          strcpy((char *)&v107[1], "1108651");
          unint64_t v108 = 0xE300000000000000;
          uint64_t v82 = &off_10031E9C8;
          goto LABEL_54;
        }
        unint64_t v111 = 0x80000001002C07A0;
        unint64_t v108 = 0xEA00000000002973;
        strcpy((char *)v107, "(New Bug1109279");
        uint64_t v83 = &off_10031E9A0;
      }
      uint64_t v106 = v83;
LABEL_59:
      sub_10000A38C(&qword_1003695E0);
      unint64_t v84 = (*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80);
      uint64_t v85 = swift_allocObject();
      *(_OWORD *)(v85 + 16) = xmmword_10028D430;
      uint64_t v86 = v85 + v84;
      uint64_t v87 = v54 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_deviceID;
      swift_beginAccess();
      sub_1000D6178(v87, v86);
      uint64_t v88 = v113;
      sub_1000D6178(v86, v113);
      sub_100110784(v88, v81);
      uint64_t v89 = v120;
      uint64_t v90 = v121;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v81, 1, v121) == 1)
      {
        sub_10000DB78(v81);
        uint64_t v91 = (char *)_swiftEmptyArrayStorage;
      }
      else
      {
        uint64_t v115 = v78;
        uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 32);
        uint64_t v93 = v105;
        v92(v105, v81, v90);
        v92(v116, (uint64_t)v93, v90);
        uint64_t v91 = (char *)_swiftEmptyArrayStorage;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v91 = (char *)sub_100089A34(0, _swiftEmptyArrayStorage[2] + 1, 1, (unint64_t)_swiftEmptyArrayStorage);
        }
        unint64_t v95 = *((void *)v91 + 2);
        unint64_t v94 = *((void *)v91 + 3);
        if (v95 >= v94 >> 1) {
          uint64_t v91 = (char *)sub_100089A34(v94 > 1, v95 + 1, 1, (unint64_t)v91);
        }
        *((void *)v91 + 2) = v95 + 1;
        v92(&v91[((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80))+ *(void *)(v120 + 72) * v95], (uint64_t)v116, v121);
        uint64_t v78 = v115;
      }
      if (v80) {
        char v96 = 5;
      }
      else {
        char v96 = 9;
      }
      if (v80 == 7) {
        char v97 = 8;
      }
      else {
        char v97 = v96;
      }
      if (v80 == 7) {
        char v98 = 2;
      }
      else {
        char v98 = 4;
      }
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t result = swift_deallocClassInstance();
      uint64_t v101 = v118;
      uint64_t v100 = v119;
      uint64_t *v118 = v78;
      v101[1] = v100;
      *((unsigned char *)v101 + 16) = v97;
      v101[3] = v107[1];
      v101[4] = 0xE700000000000000;
      unint64_t v102 = v111;
      v101[5] = v2;
      v101[6] = v102;
      unint64_t v103 = v108;
      v101[7] = v107[0];
      v101[8] = v103;
      v101[9] = (uint64_t)v106;
      v101[10] = (uint64_t)v91;
      *((unsigned char *)v101 + 88) = v98;
      unint64_t v104 = v109;
      v101[12] = v110;
      v101[13] = v104;
      return result;
  }
}

uint64_t sub_100165030@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_sentiment) = v4;
  if (v4)
  {
    if (v4 == 1)
    {
      uint64_t v11 = sub_10000A38C(&qword_1003695B0);
      uint64_t v12 = sub_10000B010(&qword_1003695B8, &qword_1003695B0);
      uint64_t v5 = swift_allocObject();
      *(void *)&long long v10 = v5;
      *(void *)(v5 + 16) = 0xD000000000000012;
      *(void *)(v5 + 24) = 0x80000001002C0A50;
      *(void *)(v5 + 32) = 0xD000000000000012;
      *(void *)(v5 + 40) = 0x80000001002C0A70;
      *(_OWORD *)(v5 + 48) = xmmword_100291140;
      *(void *)(v5 + 64) = 0;
      uint64_t v6 = sub_1001652B8;
      uint64_t v7 = sub_10015F098;
      uint64_t v8 = &off_10031E970;
    }
    else
    {
      uint64_t v11 = sub_10000A38C(&qword_1003695B0);
      uint64_t v12 = sub_10000B010(&qword_1003695B8, &qword_1003695B0);
      uint64_t v5 = swift_allocObject();
      *(void *)&long long v10 = v5;
      *(void *)(v5 + 16) = 0xD00000000000001DLL;
      *(void *)(v5 + 24) = 0x80000001002C09E0;
      *(void *)(v5 + 40) = 0;
      *(void *)(v5 + 48) = 0;
      *(void *)(v5 + 32) = 0;
      *(_OWORD *)(v5 + 56) = xmmword_10029DD20;
      uint64_t v6 = sub_1001652B8;
      uint64_t v7 = sub_10015F098;
      uint64_t v8 = &off_10031EA40;
    }
  }
  else
  {
    uint64_t v11 = sub_10000A38C(&qword_100369600);
    uint64_t v12 = sub_10000B010(&qword_100369608, &qword_100369600);
    uint64_t v5 = swift_allocObject();
    *(void *)&long long v10 = v5;
    *(void *)(v5 + 16) = 0xD000000000000010;
    *(void *)(v5 + 24) = 0x80000001002C09A0;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(void *)(v5 + 64) = 0;
    uint64_t v6 = sub_10016537C;
    uint64_t v7 = sub_100167470;
    uint64_t v8 = &off_10031E5D0;
  }
  *(_WORD *)(v5 + 72) = 257;
  *(void *)(v5 + 80) = v8;
  *(void *)(v5 + 88) = v7;
  *(void *)(v5 + 96) = 0;
  *(void *)(v5 + 104) = v6;
  *(void *)(v5 + 112) = 0;
  uint64_t result = sub_10000D7E8(&v10, a3);
  *(unsigned char *)(a3 + 40) = 1;
  return result;
}

uint64_t sub_1001652B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100165998(a1, a2, &OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_comments, a3);
}

uint64_t sub_1001652C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 19279;
  *(void *)(result + 24) = 0xE200000000000000;
  *(void *)a1 = 0xD00000000000001BLL;
  *(void *)(a1 + 8) = 0x80000001002C0A00;
  *(void *)(a1 + 16) = 0xD000000000000020;
  *(void *)(a1 + 24) = 0x80000001002C0A20;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 56) = 257;
  *(void *)(a1 + 64) = &off_10031EA70;
  *(void *)(a1 + 72) = sub_10015F098;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = sub_100167B20;
  *(void *)(a1 + 96) = result;
  return result;
}

uint64_t sub_10016537C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_problem) = v4;
  switch(v4)
  {
    case 1:
      char v8 = *(unsigned char *)(a1 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_deviceFamily);
      uint64_t v18 = sub_10000A38C(&qword_100369620);
      uint64_t v19 = sub_10000B010(&qword_100369628, &qword_100369620);
      uint64_t v9 = swift_allocObject();
      uint64_t v10 = v9 + 16;
      *(void *)&long long v17 = v9;
      char v11 = 1;
      goto LABEL_8;
    case 2:
      char v8 = *(unsigned char *)(a1 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_deviceFamily);
      uint64_t v18 = sub_10000A38C(&qword_100369620);
      uint64_t v19 = sub_10000B010(&qword_100369628, &qword_100369620);
      uint64_t v12 = swift_allocObject();
      uint64_t v10 = v12 + 16;
      *(void *)&long long v17 = v12;
      char v11 = 2;
      goto LABEL_8;
    case 3:
      char v8 = *(unsigned char *)(a1 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_deviceFamily);
      uint64_t v18 = sub_10000A38C(&qword_100369620);
      uint64_t v19 = sub_10000B010(&qword_100369628, &qword_100369620);
      uint64_t v13 = swift_allocObject();
      uint64_t v10 = v13 + 16;
      *(void *)&long long v17 = v13;
      char v11 = 3;
      goto LABEL_8;
    case 4:
      char v8 = *(unsigned char *)(a1 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_deviceFamily);
      uint64_t v18 = sub_10000A38C(&qword_100369620);
      uint64_t v19 = sub_10000B010(&qword_100369628, &qword_100369620);
      uint64_t v14 = swift_allocObject();
      uint64_t v10 = v14 + 16;
      *(void *)&long long v17 = v14;
      char v11 = 4;
      goto LABEL_8;
    case 5:
      char v8 = *(unsigned char *)(a1 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_deviceFamily);
      uint64_t v18 = sub_10000A38C(&qword_100369620);
      uint64_t v19 = sub_10000B010(&qword_100369628, &qword_100369620);
      uint64_t v15 = swift_allocObject();
      uint64_t v10 = v15 + 16;
      *(void *)&long long v17 = v15;
      char v11 = 5;
LABEL_8:
      sub_100165764(v11, v8, v10);
      goto LABEL_11;
    case 6:
      uint64_t v18 = sub_10000A38C(&qword_1003695B0);
      uint64_t v19 = sub_10000B010(&qword_1003695B8, &qword_1003695B0);
      uint64_t v5 = swift_allocObject();
      *(void *)&long long v17 = v5;
      unint64_t v6 = 0xD000000000000010;
      uint64_t v7 = "What went wrong?";
      goto LABEL_10;
    default:
      uint64_t v18 = sub_10000A38C(&qword_1003695B0);
      uint64_t v19 = sub_10000B010(&qword_1003695B8, &qword_1003695B0);
      uint64_t v5 = swift_allocObject();
      *(void *)&long long v17 = v5;
      unint64_t v6 = 0xD000000000000015;
      uint64_t v7 = "Unintentional trigger";
LABEL_10:
      *(void *)(v5 + 16) = v6;
      *(void *)(v5 + 24) = (unint64_t)(v7 - 32) | 0x8000000000000000;
      *(_OWORD *)(v5 + 32) = xmmword_10029DD30;
      *(_OWORD *)(v5 + 48) = xmmword_100291140;
      *(void *)(v5 + 64) = 0;
      *(_WORD *)(v5 + 72) = 257;
      *(void *)(v5 + 80) = &off_10031EB00;
      *(void *)(v5 + 88) = sub_10015F098;
      *(void *)(v5 + 96) = 0;
      *(void *)(v5 + 104) = sub_100165BD0;
      *(void *)(v5 + 112) = 0;
LABEL_11:
      uint64_t result = sub_10000D7E8(&v17, a3);
      *(unsigned char *)(a3 + 40) = 1;
      return result;
  }
}

uint64_t sub_100165764@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (a2) {
    uint64_t v5 = &off_10031EAD8;
  }
  else {
    uint64_t v5 = &off_10031EAB0;
  }
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 16) = a1;
  *(void *)a3 = 0xD000000000000014;
  *(void *)(a3 + 8) = 0x80000001002C0A90;
  *(void *)(a3 + 16) = 0xD00000000000001BLL;
  *(void *)(a3 + 24) = 0x80000001002C0AB0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 32) = 0;
  *(_WORD *)(a3 + 56) = 257;
  *(void *)(a3 + 64) = v5;
  *(void *)(a3 + 72) = sub_100167558;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = sub_100167B9C;
  *(void *)(a3 + 96) = v6;

  return swift_bridgeObjectRetain();
}

double sub_100165844@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unint64_t v2 = 0xD000000000000015;
  unint64_t v3 = 0x80000001002B1890;
  switch(a1)
  {
    case 1:
      uint64_t v4 = "Handoff didn't work";
      goto LABEL_4;
    case 2:
      uint64_t v4 = "Unexpected behavior";
LABEL_4:
      unint64_t v3 = (unint64_t)(v4 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD000000000000013;
      break;
    case 3:
      unint64_t v2 = 0xD000000000000012;
      uint64_t v5 = "Confusing behavior";
      goto LABEL_10;
    case 4:
      unint64_t v2 = 0xD000000000000011;
      uint64_t v5 = "Performance issue";
      goto LABEL_10;
    case 5:
      unint64_t v3 = 0xEE00646572727563;
      unint64_t v2 = 0x636F20726F727245;
      break;
    case 6:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v2 = 0x2E2E2E726568744FLL;
      break;
    case 7:
      unint64_t v2 = 0xD000000000000010;
      uint64_t v5 = "What went wrong?";
LABEL_10:
      unint64_t v3 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  double result = 1.32884118e179;
  *(_OWORD *)(a2 + 16) = xmmword_10029DD30;
  *(_OWORD *)(a2 + 32) = xmmword_100291140;
  *(void *)(a2 + 48) = 0;
  *(_WORD *)(a2 + 56) = 257;
  *(void *)(a2 + 64) = &off_10031EB00;
  *(void *)(a2 + 72) = sub_10015F098;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = sub_100165BD0;
  *(void *)(a2 + 96) = 0;
  return result;
}

uint64_t sub_100165998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = (void *)(a1 + *a3);
  *uint64_t v6 = *(void *)(a2 + 16);
  v6[1] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a4 + 24) = sub_10000A38C(&qword_1003695B0);
  *(void *)(a4 + 32) = sub_10000B010(&qword_1003695B8, &qword_1003695B0);
  uint64_t v7 = swift_allocObject();
  *(void *)a4 = v7;
  uint64_t result = sub_1001652C4(v7 + 16);
  *(unsigned char *)(a4 + 40) = 1;
  return result;
}

void sub_100165A40(uint64_t a1@<X0>, unsigned char *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(unsigned char *)(a1 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_intent) = *a2;
  *(void *)(a4 + 24) = sub_10000A38C(&qword_1003695B0);
  *(void *)(a4 + 32) = sub_10000B010(&qword_1003695B8, &qword_1003695B0);
  uint64_t v6 = swift_allocObject();
  *(void *)a4 = v6;
  sub_100165844(a3, v6 + 16);
  *(unsigned char *)(a4 + 40) = 1;
}

unint64_t sub_100165AE4(char a1)
{
  unint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x636F20726F727245;
      break;
    case 6:
      unint64_t result = 0x2E2E2E726568744FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100165BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100165998(a1, a2, &OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_problemExplanation, a3);
}

double sub_100165BDC@<D0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (*a1 == a2 && a1[1] == a3)
  {
    uint64_t v7 = 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v7 = 4;
    if ((v6 & 1) == 0) {
      uint64_t v7 = 5;
    }
  }
  *(void *)a4 = v7;
  double result = 0.0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(unsigned char *)(a4 + 40) = 3;
  return result;
}

double sub_100165C50@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 5;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 40) = 3;
  return result;
}

uint64_t PCProximityHandoffClient.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_100165C7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PCUserAlertDefinition();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_100165CE8()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_retain();
  return v1;
}

uint64_t sub_100165D18(uint64_t a1, char a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_deviceID;
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_deviceFamily;
  *(unsigned char *)(v2 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_deviceFamily) = 7;
  static Date.now.getter();
  *(unsigned char *)(v2 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_sentiment) = 3;
  *(unsigned char *)(v2 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_problem) = 7;
  *(unsigned char *)(v2 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_intent) = 5;
  char v8 = (void *)(v2 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_problemExplanation);
  *char v8 = 0;
  v8[1] = 0;
  uint64_t v9 = (void *)(v2 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_comments);
  *uint64_t v9 = 0;
  v9[1] = 0;
  swift_beginAccess();
  sub_1001677C8(a1, v5);
  swift_endAccess();
  *(unsigned char *)(v2 + v7) = a2;
  return v2;
}

unint64_t sub_100165E3C(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0x2E2E2E726568744FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100165EE0()
{
  sub_10000DB78(v0 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_deviceID);
  uint64_t v1 = v0 + OBJC_IVAR____TtCO17proximitycontrold15HandoffFeedback6Report_timestamp;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100165FB8()
{
  return type metadata accessor for HandoffFeedback.Report(0);
}

uint64_t type metadata accessor for HandoffFeedback.Report(uint64_t a1)
{
  return sub_100014F7C(a1, qword_1003694A0);
}

void sub_100165FE0()
{
  sub_10000DAC4();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for HandoffFeedback.Intent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10016619CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffFeedback.Intent()
{
  return &type metadata for HandoffFeedback.Intent;
}

unsigned char *storeEnumTagSinglePayload for HandoffFeedback.Problem(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001662A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffFeedback.Problem()
{
  return &type metadata for HandoffFeedback.Problem;
}

unsigned char *storeEnumTagSinglePayload for HandoffFeedback.Sentiment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001663A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffFeedback.Sentiment()
{
  return &type metadata for HandoffFeedback.Sentiment;
}

ValueMetadata *type metadata accessor for HandoffFeedback()
{
  return &type metadata for HandoffFeedback;
}

uint64_t destroy for HandoffFeedback.Action(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 3) {
    unsigned int v1 = *(_DWORD *)result + 3;
  }
  switch(v1)
  {
    case 2u:
      uint64_t v2 = *(void *)(result + 8);
      unsigned __int8 v3 = *(unsigned char *)(result + 16);
      uint64_t v4 = *(void *)result;
      return sub_1000205B0(v4, v2, v3);
    case 1u:
      return sub_10000CC5C(result);
    case 0u:
      return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for HandoffFeedback.Action(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 3) {
    unsigned int v3 = *(_DWORD *)a2 + 3;
  }
  if (v3 == 2)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    unsigned __int8 v6 = *((unsigned char *)a2 + 16);
    sub_10001FBA4(*a2, v5, v6);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = v6;
    *(unsigned char *)(a1 + 40) = 2;
  }
  else if (v3 == 1)
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t))(v7 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    long long v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 40) = 0;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for HandoffFeedback.Action(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    switch(v4)
    {
      case 2u:
        sub_1000205B0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
        break;
      case 1u:
        sub_10000CC5C(a1);
        break;
      case 0u:
        swift_release();
        break;
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      uint64_t v6 = *(void *)a2;
      uint64_t v7 = *((void *)a2 + 1);
      unsigned __int8 v8 = *((unsigned char *)a2 + 16);
      sub_10001FBA4(v6, v7, v8);
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v7;
      *(unsigned char *)(a1 + 16) = v8;
      *(unsigned char *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      uint64_t v9 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v9 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v10 = *a2;
      long long v11 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v10;
      *(_OWORD *)(a1 + 16) = v11;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 0;
      swift_retain();
    }
  }
  return a1;
}

uint64_t assignWithTake for HandoffFeedback.Action(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    switch(v4)
    {
      case 2u:
        sub_1000205B0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
        break;
      case 1u:
        sub_10000CC5C(a1);
        break;
      case 0u:
        swift_release();
        break;
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(unsigned char *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for HandoffFeedback.Action(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 4) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for HandoffFeedback.Action(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100166820(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 3) {
    return (*(_DWORD *)a1 + 3);
  }
  return result;
}

uint64_t sub_10016683C(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HandoffFeedback.Action()
{
  return &type metadata for HandoffFeedback.Action;
}

uint64_t sub_100166874()
{
  return sub_10000B010(&qword_100369560, &qword_100369568);
}

uint64_t sub_1001668B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10005D2EC(*a1, *a2);
}

Swift::Int sub_1001668BC()
{
  return Hasher._finalize()();
}

uint64_t sub_100166950()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001669D0()
{
  return Hasher._finalize()();
}

unint64_t sub_100166A60@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001675FC(*a1);
  *a2 = result;
  return result;
}

void sub_100166A90(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE300000000000000;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1685024583;
  if (v2 != 1)
  {
    uint64_t v5 = 0x2E2E2E726568744FLL;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 6578498;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_100166AE0(void *a1@<X8>)
{
  *a1 = &off_10031E5F8;
}

unint64_t sub_100166AF4()
{
  unint64_t result = qword_100369570;
  if (!qword_100369570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369570);
  }
  return result;
}

uint64_t sub_100166B48()
{
  return sub_10000B010(&qword_100369578, &qword_100369580);
}

uint64_t sub_100166B84(char *a1, char *a2)
{
  return sub_10005D3E8(*a1, *a2);
}

Swift::Int sub_100166B90()
{
  return sub_10015E948();
}

uint64_t sub_100166B9C()
{
  return sub_10015E4E4();
}

Swift::Int sub_100166BA4()
{
  return sub_10015E948();
}

unint64_t sub_100166BAC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100167648(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100166BDC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100165AE4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100166C08(void *a1@<X8>)
{
  *a1 = &off_10031E5D0;
}

unint64_t sub_100166C1C()
{
  unint64_t result = qword_100369588;
  if (!qword_100369588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369588);
  }
  return result;
}

uint64_t sub_100166C70()
{
  return sub_10000B010(&qword_100369590, &qword_100369598);
}

uint64_t sub_100166CAC(unsigned __int8 *a1, char *a2)
{
  return sub_10005D61C(*a1, *a2);
}

Swift::Int sub_100166CB8()
{
  return sub_10015DEDC();
}

uint64_t sub_100166CC0()
{
  return sub_10015E604();
}

Swift::Int sub_100166CC8()
{
  return sub_10015EA80();
}

unint64_t sub_100166CD0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100167694(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100166D00@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100165E3C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100166D2C(void *a1@<X8>)
{
  *a1 = &off_10031E5A8;
}

unint64_t sub_100166D40()
{
  unint64_t result = qword_1003695A0;
  if (!qword_1003695A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003695A0);
  }
  return result;
}

uint64_t sub_100166D94(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100166DBC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_100166E34(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_100166E34(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100166F08(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100027B10((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100027B10((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000CC5C((uint64_t)v12);
  return v7;
}

uint64_t sub_100166F08(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1001670C4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1001670C4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10016715C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1001672D4(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1001672D4(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10016715C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100152EF4(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1001672D4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A38C(&qword_100368D68);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100167424(unsigned char *a1)
{
  uint64_t v1 = 1685024583;
  if (*a1 != 1) {
    uint64_t v1 = 0x2E2E2E726568744FLL;
  }
  if (*a1) {
    return v1;
  }
  else {
    return 6578498;
  }
}

unint64_t sub_100167470(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unint64_t result = 0xD000000000000015;
  switch(v1)
  {
    case 1:
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x636F20726F727245;
      break;
    case 6:
      unint64_t result = 0x2E2E2E726568744FLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100167558(unsigned char *a1)
{
  unint64_t result = 0xD000000000000012;
  switch(*a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0x2E2E2E726568744FLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001675FC(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10031EB30, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_100167648(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10031EB98, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

unint64_t sub_100167694(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10031EC60, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001676E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  swift_bridgeObjectRelease();
  sub_100167774(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100167774(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001677C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10036C090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100167830(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100167868()
{
  uint64_t v1 = sub_10000A38C(&qword_1003695C0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001678FC(uint64_t *a1)
{
  sub_10000A38C(&qword_1003695C0);

  return sub_100162984(a1);
}

unint64_t sub_100167970()
{
  unint64_t result = qword_1003695F0;
  if (!qword_1003695F0)
  {
    type metadata accessor for HandoffFeedbackManager(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003695F0);
  }
  return result;
}

uint64_t sub_1001679C8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100167A10(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  int64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *int64_t v9 = v2;
  v9[1] = sub_100076840;
  return sub_100162A7C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100167AE8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

double sub_100167B20@<D0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100165BDC(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100167B2C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100167B8C()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_100167B9C(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  sub_100165A40(a1, a2, *(unsigned char *)(v3 + 16), a3);
}

uint64_t sub_100167BA8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10007EB64;
  return sub_10015F720(a1, v4, v5, v6);
}

uint64_t sub_100167C60()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100167CA0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100076840;
  return sub_10015FB44(a1, v4, v5, v6);
}

_OWORD *sub_100167D54(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(long long *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t sub_100167D6C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t sub_100167DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  *(void *)(a1 + 96) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_100167E6C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  swift_retain();
  swift_release();
  return a1;
}

__n128 _s31LockscreenControlsAppearedEventVwtk(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_100167F88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  uint64_t v7 = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = v7;
  swift_release();
  return a1;
}

uint64_t sub_100168028(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100168070(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for HandoffFeedbackFlowStep()
{
  return sub_10000F2E4();
}

unsigned char *storeEnumTagSinglePayload for BugReportError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001681B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BugReportError()
{
  return &type metadata for BugReportError;
}

unint64_t sub_1001681F0()
{
  unint64_t result = qword_100369708;
  if (!qword_100369708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369708);
  }
  return result;
}

uint64_t sub_100168244()
{
  if (*(void *)(v0 + 56))
  {
    uint64_t v1 = *(void *)(v0 + 56);
  }
  else
  {
    uint64_t v1 = sub_1001682A4(v0);
    *(void *)(v0 + 56) = v1;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v1;
}

uint64_t sub_1001682A4(uint64_t a1)
{
  uint64_t v32 = a1;
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v1 - 8);
  uint64_t v38 = v1;
  __chkstk_darwin(v1);
  uint64_t v34 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  __chkstk_darwin(v3);
  unint64_t v33 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v28 = *(void *)(v8 - 8);
  uint64_t v29 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v28 - v12;
  uint64_t v14 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  long long v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100168B80();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100168C18(&qword_100369838, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_10000A38C(&qword_100369840);
  sub_100168C60(&qword_100369848, &qword_100369840);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v18 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  swift_getObjectType();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v19 = v29;
  unint64_t v20 = *(void (**)(char *, uint64_t))(v28 + 8);
  v20(v11, v29);
  *uint64_t v7 = 0;
  uint64_t v22 = v30;
  uint64_t v21 = v31;
  (*(void (**)(void *, void, uint64_t))(v30 + 104))(v7, enum case for DispatchTimeInterval.nanoseconds(_:), v31);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  (*(void (**)(void *, uint64_t))(v22 + 8))(v7, v21);
  v20(v13, v19);
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_100168BF8;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_10032B750;
  uint64_t v24 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v25 = v33;
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = v34;
  sub_100168878();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v38);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v36);
  swift_release();
  swift_release();
  return v18;
}

uint64_t sub_1001687F4()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void (**)(uint64_t))(result + 16);
    sub_1000766BC((uint64_t)v1);
    uint64_t result = swift_release();
    if (v1)
    {
      v1(result);
      return sub_10000F088((uint64_t)v1);
    }
  }
  return result;
}

uint64_t sub_100168878()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_100168940()
{
  sub_100168244();
  swift_getObjectType();
  OS_dispatch_source.cancel()();
  swift_unknownObjectRelease();
  if ((*(unsigned char *)(v0 + 40) & 1) == 0)
  {
    *(unsigned char *)(v0 + 40) = 1;
    sub_100168244();
    swift_getObjectType();
    OS_dispatch_source.resume()();
    swift_unknownObjectRelease();
  }
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  sub_10000F088(v1);
  sub_10000F088(*(void *)(v0 + 16));

  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_1001689CC()
{
  sub_100168940();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RepeatingTimer()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for RepeatingTimer.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100168AF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RepeatingTimer.State()
{
  return &type metadata for RepeatingTimer.State;
}

unint64_t sub_100168B2C()
{
  unint64_t result = qword_100369828;
  if (!qword_100369828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369828);
  }
  return result;
}

unint64_t sub_100168B80()
{
  unint64_t result = qword_100369830;
  if (!qword_100369830)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100369830);
  }
  return result;
}

uint64_t sub_100168BC0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100168BF8()
{
  return sub_1001687F4();
}

uint64_t sub_100168C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100168C10()
{
  return swift_release();
}

uint64_t sub_100168C18(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100168C60(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000A3D0(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100168CB0(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a5;
  v10[3] = a1;
  v10[4] = a2;
  v10[5] = a3;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a5;
  *(void *)(v11 + 24) = a1;
  *(void *)(v11 + 32) = a2;
  *(unsigned char *)(v11 + 40) = a4;
  *(void *)(v11 + 48) = a3;
  id v12 = a3;
  swift_bridgeObjectRetain_n();
  id v13 = v12;
  swift_retain_n();
  sub_10000A38C(&qword_100369940);
  sub_10000B010(&qword_1003665B8, &qword_100369940);
  uint64_t v14 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  return v14;
}

uint64_t sub_100168E00(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a5;
  v10[3] = a1;
  v10[4] = a2;
  v10[5] = a3;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a5;
  *(void *)(v11 + 24) = a1;
  *(void *)(v11 + 32) = a2;
  *(unsigned char *)(v11 + 40) = a4;
  *(void *)(v11 + 48) = a3;
  id v12 = a3;
  swift_bridgeObjectRetain_n();
  id v13 = v12;
  swift_retain_n();
  sub_10000A38C((uint64_t *)&unk_100369920);
  sub_10000B010(&qword_1003665D0, (uint64_t *)&unk_100369920);
  uint64_t v14 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  return v14;
}

uint64_t sub_100168F50@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*a1 nsuuid];
  if (v3)
  {
    unsigned int v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for UUID();
    unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for UUID();
    unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_100169018(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10036C090);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D6178(a1, (uint64_t)v6);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setNSUUID:isa];
}

uint64_t sub_100169144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v16 = (void *)Strong;
    uint64_t v23 = v10;
    long long v17 = *(void **)(Strong + OBJC_IVAR____TtC17proximitycontrold8IDSProxy_dispatchQueue);
    swift_retain();
    id v18 = v17;

    uint64_t v19 = (void *)swift_allocObject();
    void v19[2] = a3;
    v19[3] = sub_1000CF728;
    void v19[4] = v14;
    aBlock[4] = sub_10016AAC0;
    aBlock[5] = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10007A0AC;
    aBlock[3] = &unk_10032B850;
    unint64_t v20 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v24 = _swiftEmptyArrayStorage;
    sub_10004D1C4();
    sub_10000A38C((uint64_t *)&unk_10035E800);
    sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v23);
  }
  else
  {
    swift_retain();
  }
  return swift_release();
}

void sub_100169464(uint64_t a1, void (*a2)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (char *)Strong;
    id v5 = objc_allocWithZone((Class)IDSService);
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 initWithService:v6];

    if (v7)
    {
      sub_100169DF4();
      uint64_t v8 = *(void **)&v4[OBJC_IVAR____TtC17proximitycontrold8IDSProxy_service];
      *(void *)&v4[OBJC_IVAR____TtC17proximitycontrold8IDSProxy_service] = v7;
      id v9 = v7;

      [v9 addDelegate:v4 queue:*(void *)&v4[OBJC_IVAR____TtC17proximitycontrold8IDSProxy_dispatchQueue]];
      sub_100169688();
      id v10 = sub_1001F68FC();
      NSString v11 = String._bridgeToObjectiveC()();
      [v10 ulog:40 message:v11];

      ((void (*)(void, void))a2)(0, 0);
    }
    else
    {
      sub_10001A050();
      swift_allocError();
      *(void *)uint64_t v13 = 0xD00000000000001BLL;
      *(void *)(v13 + 8) = 0x80000001002C0C50;
      *(unsigned char *)(v13 + 16) = 0;
      a2();
      swift_errorRelease();
    }
  }
  else
  {
    sub_10001A050();
    swift_allocError();
    *(void *)uint64_t v12 = 0x666C6573206C696ELL;
    *(void *)(v12 + 8) = 0xE800000000000000;
    *(unsigned char *)(v12 + 16) = 9;
    a2();
    swift_errorRelease();
  }
}

void sub_100169688()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036C090);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = *(void **)(v1 + OBJC_IVAR____TtC17proximitycontrold8IDSProxy_service);
  if (!v9)
  {
    id v25 = sub_1001F68FC();
    NSString v38 = String._bridgeToObjectiveC()();
    [v25 ulog:90 message:v38];
LABEL_19:

    unint64_t v27 = v38;

    return;
  }
  uint64_t v36 = v5;
  id v10 = v9;
  id v11 = [v10 devices];
  if (!v11)
  {
    id v25 = sub_1001F68FC();
    NSString v38 = String._bridgeToObjectiveC()();
    [v25 ulog:40 message:v38];

    goto LABEL_19;
  }
  uint64_t v12 = v11;
  sub_100019E10(0, &qword_100369900);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::String v40 = _swiftEmptyArrayStorage;
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v14 = v28;
    if (v28) {
      goto LABEL_5;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    unint64_t v26 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v14) {
    goto LABEL_23;
  }
LABEL_5:
  if (v14 < 1)
  {
    __break(1u);
    return;
  }
  id v34 = v10;
  uint64_t v35 = v1;
  uint64_t v15 = 0;
  unint64_t v37 = v13 & 0xC000000000000001;
  NSString v38 = (NSString)v13;
  uint64_t v16 = (void (**)(char *, char *, uint64_t))(v3 + 32);
  long long v17 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  id v18 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  uint64_t v19 = v36;
  do
  {
    uint64_t v20 = v14;
    if (v37) {
      id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v21 = *(id *)(v13 + 8 * v15 + 32);
    }
    uint64_t v22 = v21;
    id v23 = [v21 nsuuid:v34, v35];
    if (!v23)
    {
      (*v17)(v8, 1, 1, v2);
LABEL_8:
      sub_10000DB78((uint64_t)v8);

      goto LABEL_9;
    }
    uint64_t v24 = v23;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*v16)(v8, v19, v2);
    (*v17)(v8, 0, 1, v2);
    if ((*v18)(v8, 1, v2) == 1) {
      goto LABEL_8;
    }
    sub_10000DB78((uint64_t)v8);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    uint64_t v19 = v36;
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_9:
    ++v15;
    uint64_t v14 = v20;
    unint64_t v13 = (unint64_t)v38;
  }
  while (v20 != v15);
  swift_bridgeObjectRelease();
  unint64_t v26 = (unint64_t)v40;
  id v10 = v34;
LABEL_24:
  Swift::String v40 = 0;
  unint64_t v41 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  Swift::String v40 = (void *)0xD000000000000012;
  unint64_t v41 = 0x80000001002C0BF0;
  if ((v26 & 0x8000000000000000) != 0 || (v26 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    uint64_t v29 = *(void *)(v26 + 16);
  }
  uint64_t v39 = v29;
  v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 41;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  id v32 = sub_1001F68FC();
  swift_bridgeObjectRetain();
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v32 ulog:40 message:v33];
  swift_bridgeObjectRelease();

  swift_retain();
  sub_1001C0F00(v26);

  swift_release();
  swift_release();
}

id sub_100169BAC()
{
  id v1 = sub_1001F68FC();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  sub_100169D30();
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for IDSProxy();
  return [super dealloc];
}

uint64_t sub_100169D30()
{
  id v1 = sub_1001F68FC();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  uint64_t v3 = OBJC_IVAR____TtC17proximitycontrold8IDSProxy_service;
  objc_super v4 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold8IDSProxy_service);
  if (v4)
  {
    [v4 removeDelegate:v0];
    id v5 = *(void **)(v0 + v3);
    *(void *)(v0 + v3) = 0;
  }
  swift_retain();
  sub_1001A90A0();

  return swift_release();
}

uint64_t sub_100169DF4()
{
  uint64_t ObjectType = swift_getObjectType();
  sub_10000A38C((uint64_t *)&unk_100369910);
  sub_10000B010(&qword_1003665C8, (uint64_t *)&unk_100369910);
  uint64_t v1 = Publisher.eraseToAnyPublisher()();
  id v2 = sub_10016B098(ObjectType, (uint64_t)&off_10032B778);
  sub_100168E00(0x444E554F46, 0xE500000000000000, v2, 1, v1);
  swift_release();

  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v3 = Publisher.eraseToAnyPublisher()();
  id v4 = sub_10016B098(ObjectType, (uint64_t)&off_10032B778);
  sub_100168E00(1414745932, 0xE400000000000000, v4, 1, v3);
  swift_release();

  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

id sub_100169FC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC17proximitycontrold8IDSProxy_devices;
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000A38C(&qword_100369930);
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 24) = 0;
  id v5 = objc_allocWithZone((Class)NSLock);
  uint64_t v6 = v1;
  *(void *)(v4 + 32) = [v5 init];
  sub_10000A38C((uint64_t *)&unk_100369910);
  swift_allocObject();
  uint64_t v7 = PassthroughSubject.init()();
  sub_10000A38C(&qword_100369938);
  swift_allocObject();
  uint64_t v8 = PassthroughSubject.init()();
  swift_allocObject();
  uint64_t v9 = PassthroughSubject.init()();
  *(void *)(v4 + 40) = v7;
  *(void *)(v4 + 48) = v8;
  *(void *)(v4 + 56) = v9;
  *(void *)(v4 + 64) = &_swiftEmptyDictionarySingleton;
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 16) = KeyPath;
  *(void *)&v1[v2] = v4;
  *(unsigned char *)(v4 + 24) = 0;
  uint64_t v10 = OBJC_IVAR____TtC17proximitycontrold8IDSProxy_dispatchQueue;
  if (qword_10035A628 != -1) {
    swift_once();
  }
  id v11 = (void *)qword_1003ACB50;
  *(void *)&v6[v10] = qword_1003ACB50;
  *(void *)&v6[OBJC_IVAR____TtC17proximitycontrold8IDSProxy_service] = 0;
  *(void *)&v6[OBJC_IVAR____TtC17proximitycontrold8IDSProxy_tasks] = &_swiftEmptySetSingleton;
  id v12 = v11;

  v14.receiver = v6;
  v14.super_class = (Class)type metadata accessor for IDSProxy();
  return [super init];
}

uint64_t type metadata accessor for IDSProxy()
{
  return self;
}

void sub_10016A2C4(char a1, uint64_t a2, void *a3, void *a4)
{
  if (a1)
  {
    if (a4)
    {
      id v12 = a4;
      NSString v13 = String._bridgeToObjectiveC()();
      [v12 ulog:40 message:v13];
    }
    else
    {
      NSLog(_:_:)();
    }
  }
  else
  {
    v7._uint64_t countAndFlagsBits = 539173667;
    v7._object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = a2;
    v8._object = a3;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = 32;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    _print_unlocked<A, B>(_:_:)();
    if (a4)
    {
      id v10 = a4;
      NSString v11 = String._bridgeToObjectiveC()();
      [v10 ulog:90 message:v11];
      swift_bridgeObjectRelease();
    }
    else
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
    }
  }
}

void sub_10016A458(void *a1, uint64_t a2, void *a3, char a4, void *a5, unint64_t *a6)
{
  sub_100019E10(0, a6);
  id v11 = a1;
  v19[3] = &type metadata for String;
  v19[0] = String.init<A>(describing:)();
  v19[1] = v12;
  if (a4)
  {
    swift_bridgeObjectRetain();
    if (a4 == 1)
    {
      v13._uint64_t countAndFlagsBits = a2;
      v13._object = a3;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._uint64_t countAndFlagsBits = 32;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      _print_unlocked<A, B>(_:_:)();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    _print_unlocked<A, B>(_:_:)();
    v15._uint64_t countAndFlagsBits = 32;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16._uint64_t countAndFlagsBits = a2;
    v16._object = a3;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
  }
  sub_10000CC5C((uint64_t)v19);
  if (a5)
  {
    id v17 = a5;
    NSString v18 = String._bridgeToObjectiveC()();
    [v17 ulog:40 message:v18];
    swift_bridgeObjectRelease();
  }
  else
  {
    NSLog(_:_:)();
    swift_bridgeObjectRelease();
  }
}

void sub_10016A628(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (void *)((char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  Swift::String v8 = *(void **)(v2 + OBJC_IVAR____TtC17proximitycontrold8IDSProxy_dispatchQueue);
  *Swift::String v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    unint64_t v14 = 0;
    unint64_t v15 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    unint64_t v14 = 0xD000000000000019;
    unint64_t v15 = 0x80000001002C0C10;
    v13[1] = a1;
    swift_bridgeObjectRetain();
    sub_10000A38C(&qword_100369908);
    v10._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    id v11 = sub_1001F68FC();
    swift_bridgeObjectRetain();
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v11 ulog:40 message:v12];
    swift_bridgeObjectRelease();

    sub_100169688();
  }
  else
  {
    __break(1u);
  }
}

void sub_10016A80C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (void *)((char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  Swift::String v8 = *(void **)(v2 + OBJC_IVAR____TtC17proximitycontrold8IDSProxy_dispatchQueue);
  *Swift::String v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    unint64_t v15 = 0;
    unint64_t v16 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    unint64_t v15 = 0xD000000000000011;
    unint64_t v16 = 0x80000001002C0B80;
    if (a1)
    {
      v14[1] = *(void *)(a1 + 16);
      v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._uint64_t countAndFlagsBits = 0x7365636976656420;
      v11._object = (void *)0xE900000000000029;
      String.append(_:)(v11);
      id v12 = sub_1001F68FC();
      swift_bridgeObjectRetain();
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v12 ulog:40 message:v13];
      swift_bridgeObjectRelease();

      sub_100169688();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10016AA20(void **a1)
{
}

const char *sub_10016AA34()
{
  return "nsuuid";
}

uint64_t sub_10016AA48()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10016AA80()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10016AAC0()
{
  sub_100169464(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_10016AACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10016AADC()
{
  return swift_release();
}

uint64_t sub_10016AAE8()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10016AB30(char *a1)
{
  sub_10016A2C4(*a1, *(void *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_10016AB58()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10016ABA0(void **a1)
{
}

void sub_10016ABB4(void **a1, unint64_t *a2)
{
  sub_10016A458(*a1, *(void *)(v2 + 24), *(void **)(v2 + 32), *(unsigned char *)(v2 + 40), *(void **)(v2 + 48), a2);
}

void sub_10016ABE4(uint64_t a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
}

id sub_10016AC04(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 32))();
  id v2 = objc_allocWithZone((Class)CULogHandle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithSubsystem:v3 category:v4];

  return v5;
}

uint64_t sub_10016ACB8(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(a2 + 8))()) {
    return sub_10016B88C();
  }
  swift_getMetatypeMetadata();
  return String.init<A>(describing:)();
}

uint64_t sub_10016AD20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 24))();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  Swift::String v7 = v6;
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

void sub_10016ADD8(uint64_t a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_10016ADF8(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369970);
}

uint64_t sub_10016AE04(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_100369970);
}

void sub_10016AE10(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a4) {
    id v11 = sub_10016B724(a5, a6);
  }
  else {
    id v11 = sub_10016B098(a5, a6);
  }
  id v12 = v11;
  sub_10016BA40(a2, a3, a5, a6);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 ulog:a1 message:v13];
}

void sub_10016AECC(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a4) {
    id v11 = sub_10016B7D8(a5, a6);
  }
  else {
    id v11 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  }
  id v12 = v11;
  sub_10016BA40(a2, a3, a5, a6);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 ulog:a1 message:v13];
}

uint64_t sub_10016AFA4(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_10035CBD8);
}

uint64_t sub_10016AFB0(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_10035CBD8);
}

uint64_t sub_10016AFC0(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369A50);
}

uint64_t sub_10016AFCC()
{
  sub_10000A38C(&qword_100369A50);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v0;
}

id sub_10016B098(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 24))();
  id v2 = objc_allocWithZone((Class)CULogHandle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithSubsystem:v3 category:v4];

  return v5;
}

uint64_t sub_10016B148()
{
  return String.init<A>(describing:)();
}

uint64_t sub_10016B17C(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369948);
}

uint64_t sub_10016B188(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_100369948);
}

uint64_t sub_10016B198(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369968);
}

uint64_t sub_10016B1A4()
{
  sub_10000A38C(&qword_100369968);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_10016B274(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_1003699E8);
}

uint64_t sub_10016B280(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_1003699E8);
}

uint64_t sub_10016B290(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_1003699F8);
}

uint64_t sub_10016B29C()
{
  sub_10000A38C(&qword_1003699F8);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_10016B368(uint64_t a1, uint64_t a2)
{
  return sub_10016ACB8(v2, a2);
}

uint64_t sub_10016B374(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369A18);
}

uint64_t sub_10016B380(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_100369A18);
}

uint64_t sub_10016B390(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_1003699B0);
}

uint64_t sub_10016B39C()
{
  sub_10000A38C(&qword_1003699B0);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_10016B46C(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369950);
}

uint64_t sub_10016B478(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_100369950);
}

uint64_t sub_10016B488(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_1003699C0);
}

uint64_t sub_10016B494(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_1003699C0);
}

uint64_t sub_10016B4A4(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369A48);
}

uint64_t sub_10016B4B0(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_100369A48);
}

uint64_t sub_10016B4BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10000A38C(a3);
  uint64_t v3 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v3, v4);
  if ((v5 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v3 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_10016B588(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_10035CC18);
}

uint64_t sub_10016B594(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_10035CC18);
}

uint64_t sub_10016B5A4(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_10035CC40);
}

uint64_t sub_10016B5B0(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_10035CC40);
}

uint64_t sub_10016B5C0(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_1003699D8);
}

uint64_t sub_10016B5CC(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_1003699D8);
}

uint64_t sub_10016B5DC(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_1003699D0);
}

uint64_t sub_10016B5E8(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_1003699D0);
}

uint64_t sub_10016B5F8(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369A20);
}

uint64_t sub_10016B604()
{
  sub_10000A38C(&qword_100369A20);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_10016B6D4(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369988);
}

uint64_t sub_10016B6E0(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_100369988);
}

uint64_t sub_10016B6F0(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369980);
}

uint64_t sub_10016B6FC(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_100369980);
}

uint64_t sub_10016B70C(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369990);
}

uint64_t sub_10016B718(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_100369990);
}

id sub_10016B724(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 24))();
  id v2 = objc_allocWithZone((Class)CULogHandle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithSubsystem:v3 category:v4 logFlags:0x10000000];

  return v5;
}

id sub_10016B7D8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 32))();
  id v2 = objc_allocWithZone((Class)CULogHandle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithSubsystem:v3 category:v4 logFlags:0x10000000];

  return v5;
}

uint64_t sub_10016B88C()
{
  swift_getMetatypeMetadata();
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v0;
}

unint64_t sub_10016B950(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15;
  while (String.subscript.getter() != a1 || v9 != a2)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v10) {
      return v8;
    }
    unint64_t v8 = String.index(after:)();
    if (v7 == v8 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10016BA40(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_10016BAD0(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369978);
}

uint64_t sub_10016BADC(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_100369978);
}

uint64_t sub_10016BAEC(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_1003699E0);
}

uint64_t sub_10016BAF8(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_1003699E0);
}

uint64_t sub_10016BB08(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369A28);
}

uint64_t sub_10016BB14(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_100369A28);
}

uint64_t sub_10016BB24(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369A30);
}

uint64_t sub_10016BB30(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_100369A30);
}

uint64_t sub_10016BB40(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369A38);
}

uint64_t sub_10016BB4C(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_100369A38);
}

uint64_t sub_10016BB5C(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369A40);
}

uint64_t sub_10016BB68()
{
  sub_10000A38C(&qword_100369A40);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_10016BC38(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369A08);
}

uint64_t sub_10016BC44()
{
  sub_10000A38C(&qword_100369A08);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_10016BD14(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_1003699B8);
}

uint64_t sub_10016BD20(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_1003699B8);
}

uint64_t sub_10016BD30(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_10035CC28);
}

uint64_t sub_10016BD3C(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_10035CC28);
}

uint64_t sub_10016BD4C(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_10035CC30);
}

uint64_t sub_10016BD58(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_10035CC30);
}

uint64_t sub_10016BD68(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_1003699C8);
}

uint64_t sub_10016BD74(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_1003699C8);
}

uint64_t sub_10016BD84(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369960);
}

uint64_t sub_10016BD90()
{
  sub_10000A38C(&qword_100369960);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_10016BE60(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369A00);
}

uint64_t sub_10016BE6C(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_100369A00);
}

uint64_t sub_10016BE7C(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369958);
}

uint64_t sub_10016BE88()
{
  sub_10000A38C(&qword_100369958);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_10016BF58(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369A10);
}

uint64_t sub_10016BF64()
{
  sub_10000A38C(&qword_100369A10);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_10016C034(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_1003699A8);
}

uint64_t sub_10016C040(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_1003699A8);
}

uint64_t sub_10016C050(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_100369998);
}

uint64_t sub_10016C05C(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_100369998);
}

uint64_t sub_10016C06C(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_1003699F0);
}

uint64_t sub_10016C078(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10000A38C(a3);
  uint64_t v3 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v3, v4);
  if ((v5 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v3 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_10016C140(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_1003699F0);
}

uint64_t sub_10016C150(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_10035CC38);
}

uint64_t sub_10016C15C(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_10035CC38);
}

uint64_t sub_10016C16C(uint64_t a1, uint64_t a2)
{
  return sub_10016C078(a1, a2, &qword_1003699A0);
}

uint64_t sub_10016C178(uint64_t a1, uint64_t a2)
{
  return sub_10016B4BC(a1, a2, &qword_1003699A0);
}

uint64_t sub_10016C184()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t NIDistanceMeasurementQuality.shortDescription.getter(uint64_t a1)
{
  uint64_t result = 0x6669636570736E75;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0x77752820656E6966;
      break;
    case 2:
      uint64_t result = 0x2820657372616F63;
      break;
    case 3:
      uint64_t result = 1919905648;
      break;
    default:
      v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._uint64_t countAndFlagsBits = 41;
      v4._object = (void *)0xE100000000000000;
      String.append(_:)(v4);
      uint64_t result = 0x206E776F6E6B6E55;
      break;
  }
  return result;
}

id sub_10016C330()
{
  id v0 = [objc_allocWithZone((Class)NSMeasurementFormatter) init];
  [v0 setUnitStyle:1];
  id result = [v0 setUnitOptions:1];
  qword_100369A58 = (uint64_t)v0;
  return result;
}

uint64_t sub_10016C394()
{
  NINearbyObject.direction.getter();
  if (v0) {
    return 0;
  }
  sub_1000B54DC(0, 3, 0);
  uint64_t v1 = Float.description.getter();
  uint64_t v3 = v2;
  unint64_t v5 = _swiftEmptyArrayStorage[2];
  unint64_t v4 = _swiftEmptyArrayStorage[3];
  if (v5 >= v4 >> 1) {
    sub_1000B54DC(v4 > 1, v5 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v5 + 1;
  uint64_t v6 = &_swiftEmptyArrayStorage[2 * v5];
  v6[4] = v1;
  v6[5] = v3;
  uint64_t v7 = Float.description.getter();
  uint64_t v9 = v8;
  unint64_t v11 = _swiftEmptyArrayStorage[2];
  unint64_t v10 = _swiftEmptyArrayStorage[3];
  if (v11 >= v10 >> 1) {
    sub_1000B54DC(v10 > 1, v11 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v11 + 1;
  id v12 = &_swiftEmptyArrayStorage[2 * v11];
  void v12[4] = v7;
  v12[5] = v9;
  uint64_t v13 = Float.description.getter();
  uint64_t v15 = v14;
  unint64_t v17 = _swiftEmptyArrayStorage[2];
  unint64_t v16 = _swiftEmptyArrayStorage[3];
  unint64_t v18 = v17 + 1;
  if (v17 >= v16 >> 1) {
    sub_1000B54DC(v16 > 1, v17 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v18;
  uint64_t v19 = &_swiftEmptyArrayStorage[2 * v17];
  void v19[4] = v13;
  v19[5] = v15;
  sub_1000B54BC(0, v17 + 1, 0);
  uint64_t v20 = &_swiftEmptyArrayStorage[5];
  do
  {
    swift_bridgeObjectRetain();
    String.index(_:offsetBy:limitedBy:)();
    uint64_t v21 = String.subscript.getter();
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
    unint64_t v29 = _swiftEmptyArrayStorage[2];
    unint64_t v28 = _swiftEmptyArrayStorage[3];
    if (v29 >= v28 >> 1) {
      sub_1000B54BC(v28 > 1, v29 + 1, 1);
    }
    v20 += 2;
    _swiftEmptyArrayStorage[2] = v29 + 1;
    Swift::String v30 = &_swiftEmptyArrayStorage[4 * v29];
    v30[4] = v21;
    v30[5] = v23;
    v30[6] = v25;
    v30[7] = v27;
    --v18;
  }
  while (v18);
  swift_release();
  sub_10000A38C(&qword_100369A68);
  sub_10000B010(&qword_100369A70, &qword_100369A68);
  sub_10016D298();
  uint64_t v31 = Sequence<>.joined(separator:)();
  NSString v33 = v32;
  swift_bridgeObjectRelease();
  v34._uint64_t countAndFlagsBits = v31;
  v34._object = v33;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 41;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  return 40;
}

uint64_t sub_10016C6BC()
{
  uint64_t v0 = sub_10000A38C(&qword_100369A80);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  unint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v10 - v5;
  if ((NINearbyObject.distance.getter() & 0x100000000) != 0) {
    return 0;
  }
  id v7 = [self meters];
  sub_100019E10(0, &qword_100369A88);
  Measurement.init(value:unit:)();
  (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v6, v4, v0);
  if (qword_10035A5B8 != -1) {
    swift_once();
  }
  uint64_t v8 = NSMeasurementFormatter.string<A>(from:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  return v8;
}

uint64_t NINearbyObject.description.getter()
{
  unint64_t v1 = 0xE300000000000000;
  v28[0] = 4023401;
  v28[1] = 0xE300000000000000;
  id v2 = [v0 deviceIdentifier];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v4 = String.init<A>(describing:)();
    unint64_t v1 = v5;
  }
  else
  {
    uint64_t v4 = 7104878;
  }
  unint64_t v6 = v1;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  uint64_t v7 = v28[0];
  uint64_t v8 = v28[1];
  uint64_t v9 = sub_10008892C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v11 = *((void *)v9 + 2);
  unint64_t v10 = *((void *)v9 + 3);
  if (v11 >= v10 >> 1) {
    uint64_t v9 = sub_10008892C((char *)(v10 > 1), v11 + 1, 1, v9);
  }
  *((void *)v9 + 2) = v11 + 1;
  id v12 = &v9[16 * v11];
  *((void *)v12 + 4) = v7;
  *((void *)v12 + 5) = v8;
  uint64_t v13 = sub_10016C6BC();
  if (v14)
  {
    v28[0] = 0x3D74736964;
    v28[1] = 0xE500000000000000;
    String.append(_:)(*(Swift::String *)&v13);
    swift_bridgeObjectRelease();
    unint64_t v16 = *((void *)v9 + 2);
    unint64_t v15 = *((void *)v9 + 3);
    if (v16 >= v15 >> 1) {
      uint64_t v9 = sub_10008892C((char *)(v15 > 1), v16 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v16 + 1;
    unint64_t v17 = &v9[16 * v16];
    *((void *)v17 + 4) = 0x3D74736964;
    *((void *)v17 + 5) = 0xE500000000000000;
  }
  uint64_t v18 = sub_10016C394();
  if (v19)
  {
    v28[0] = 1030908260;
    v28[1] = 0xE400000000000000;
    String.append(_:)(*(Swift::String *)&v18);
    swift_bridgeObjectRelease();
    unint64_t v21 = *((void *)v9 + 2);
    unint64_t v20 = *((void *)v9 + 3);
    if (v21 >= v20 >> 1) {
      uint64_t v9 = sub_10008892C((char *)(v20 > 1), v21 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v21 + 1;
    uint64_t v22 = &v9[16 * v21];
    *((void *)v22 + 4) = 1030908260;
    *((void *)v22 + 5) = 0xE400000000000000;
  }
  strcpy((char *)v28, "NearbyObject ");
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_10000B010((unint64_t *)&qword_10035E7F0, (uint64_t *)&unk_100367D40);
  uint64_t v23 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  return v28[0];
}

uint64_t sub_10016CB90()
{
  unint64_t v1 = v0;
  sub_10000A38C((uint64_t *)&unk_10035E7E0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10028D430;
  strcpy((char *)(v2 + 32), "NINearbyObject");
  *(unsigned char *)(v2 + 47) = -18;
  id v3 = [v0 deviceIdentifer];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    v8._uint64_t countAndFlagsBits = v5;
    v8._object = v7;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    unint64_t v10 = *(void *)(v2 + 16);
    unint64_t v9 = *(void *)(v2 + 24);
    if (v10 >= v9 >> 1) {
      uint64_t v2 = (uint64_t)sub_10008892C((char *)(v9 > 1), v10 + 1, 1, (char *)v2);
    }
    *(void *)(v2 + 16) = v10 + 1;
    uint64_t v11 = v2 + 16 * v10;
    *(void *)(v11 + 32) = 4023401;
    *(void *)(v11 + 40) = 0xE300000000000000;
  }
  if (([v1 relationship] & 2) != 0)
  {
    id v12 = sub_10008892C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v14 = *((void *)v12 + 2);
    unint64_t v13 = *((void *)v12 + 3);
    if (v14 >= v13 >> 1) {
      id v12 = sub_10008892C((char *)(v13 > 1), v14 + 1, 1, v12);
    }
    *((void *)v12 + 2) = v14 + 1;
    unint64_t v15 = &v12[16 * v14];
    *((void *)v15 + 4) = 0x6E776F6E6BLL;
    *((void *)v15 + 5) = 0xE500000000000000;
  }
  else
  {
    id v12 = (char *)_swiftEmptyArrayStorage;
  }
  if (([v1 relationship] & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v12 = sub_10008892C(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v17 = *((void *)v12 + 2);
    unint64_t v16 = *((void *)v12 + 3);
    if (v17 >= v16 >> 1) {
      id v12 = sub_10008892C((char *)(v16 > 1), v17 + 1, 1, v12);
    }
    *((void *)v12 + 2) = v17 + 1;
    uint64_t v18 = &v12[16 * v17];
    *((void *)v18 + 4) = 0x6E656B6F74;
    *((void *)v18 + 5) = 0xE500000000000000;
  }
  else if (!*((void *)v12 + 2))
  {
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_10000B010((unint64_t *)&qword_10035E7F0, (uint64_t *)&unk_100367D40);
  uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 93;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  unint64_t v25 = *(void *)(v2 + 16);
  unint64_t v24 = *(void *)(v2 + 24);
  if (v25 >= v24 >> 1) {
    uint64_t v2 = (uint64_t)sub_10008892C((char *)(v24 > 1), v25 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v25 + 1;
  uint64_t v26 = v2 + 16 * v25;
  *(void *)(v26 + 32) = 0x5B3D6C6572;
  *(void *)(v26 + 40) = 0xE500000000000000;
LABEL_21:
  if ((NINearbyObject.distance.getter() & 0x100000000) == 0)
  {
    v27._uint64_t countAndFlagsBits = Float.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 109;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    v29._uint64_t countAndFlagsBits = NIDistanceMeasurementQuality.shortDescription.getter((uint64_t)[v1 distanceMeasurementQuality]);
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 41;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = 10272;
    v31._object = (void *)0xE200000000000000;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    unint64_t v33 = *(void *)(v2 + 16);
    unint64_t v32 = *(void *)(v2 + 24);
    if (v33 >= v32 >> 1) {
      uint64_t v2 = (uint64_t)sub_10008892C((char *)(v32 > 1), v33 + 1, 1, (char *)v2);
    }
    *(void *)(v2 + 16) = v33 + 1;
    uint64_t v34 = v2 + 16 * v33;
    *(void *)(v34 + 32) = 0x3D74736964;
    *(void *)(v34 + 40) = 0xE500000000000000;
  }
  uint64_t v35 = sub_10016C394();
  if (v36)
  {
    String.append(_:)(*(Swift::String *)&v35);
    swift_bridgeObjectRelease();
    unint64_t v38 = *(void *)(v2 + 16);
    unint64_t v37 = *(void *)(v2 + 24);
    if (v38 >= v37 >> 1) {
      uint64_t v2 = (uint64_t)sub_10008892C((char *)(v37 > 1), v38 + 1, 1, (char *)v2);
    }
    *(void *)(v2 + 16) = v38 + 1;
    uint64_t v39 = v2 + 16 * v38;
    *(void *)(v39 + 32) = 1030908260;
    *(void *)(v39 + 40) = 0xE400000000000000;
  }
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_10000B010((unint64_t *)&qword_10035E7F0, (uint64_t *)&unk_100367D40);
  uint64_t v40 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v42 = v41;
  swift_bridgeObjectRelease();
  v43._uint64_t countAndFlagsBits = v40;
  v43._object = v42;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = 62;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  return 60;
}

uint64_t sub_10016D0AC()
{
  return sub_10016CB90();
}

uint64_t NINearbyObjectRemovalReason.description.getter(uint64_t a1)
{
  uint64_t v1 = 63;
  if (a1 == 1) {
    uint64_t v1 = 0x65646E4572656570;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0x74756F656D6974;
  }
}

uint64_t sub_10016D120()
{
  uint64_t v1 = 63;
  if (*v0 == 1) {
    uint64_t v1 = 0x65646E4572656570;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x74756F656D6974;
  }
}

_UNKNOWN **static NINearbyObjectUpdateRate.allCases.getter()
{
  return &off_10031ECF8;
}

uint64_t NINearbyObjectUpdateRate.description.getter(uint64_t a1)
{
  uint64_t result = 0x64656375646572;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0x7962646E617473;
      break;
    case 2:
      uint64_t result = 0x65746E4972657375;
      break;
    case 3:
      uint64_t result = 1701736302;
      break;
    default:
      v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      uint64_t result = 0x3A6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t sub_10016D290()
{
  return NINearbyObjectUpdateRate.description.getter(*v0);
}

unint64_t sub_10016D298()
{
  unint64_t result = qword_100369A78;
  if (!qword_100369A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100369A78);
  }
  return result;
}

uint64_t sub_10016D2EC(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void *))
{
  v5[0] = a1;
  v5[1] = a2;
  char v6 = a3 & 1;
  return a4(v5);
}

void sub_10016D32C(void (*a1)(void ***), uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_retain();
  if (Strong)
  {
    sub_100268E80((uint64_t)_swiftEmptyArrayStorage);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_10016D54C;
    *(void *)(v7 + 24) = v4;
    unint64_t v15 = sub_10016D698;
    uint64_t v16 = v7;
    aBlock = _NSConcreteStackBlock;
    uint64_t v12 = 1107296256;
    unint64_t v13 = sub_10016D6A0;
    unint64_t v14 = &unk_10032B928;
    Swift::String v8 = _Block_copy(&aBlock);
    swift_release();
    [Strong _createUserActivityDataWithOptions:isa completionHandler:v8];
    _Block_release(v8);
  }
  else
  {
    swift_release();
    sub_10001A050();
    uint64_t v9 = swift_allocError();
    *(void *)uint64_t v10 = 0x666C6573206C696ELL;
    *(void *)(v10 + 8) = 0xE800000000000000;
    *(unsigned char *)(v10 + 16) = 9;
    aBlock = (void **)v9;
    uint64_t v12 = 0;
    LOBYTE(v13) = 1;
    a1(&aBlock);
    swift_errorRelease();
  }
}

uint64_t sub_10016D514()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10016D54C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(uint64_t (**)(void *))(v3 + 16);
  v6[0] = a1;
  v6[1] = a2;
  char v7 = a3 & 1;
  return v4(v6);
}

uint64_t sub_10016D58C(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(uint64_t, unint64_t, uint64_t))
{
  if (a2 >> 60 == 15)
  {
    if (a3)
    {
      swift_errorRetain();
      uint64_t v6 = a3;
    }
    else
    {
      sub_10001A050();
      uint64_t v6 = swift_allocError();
      *(void *)uint64_t v10 = 0xD00000000000001BLL;
      *(void *)(v10 + 8) = 0x80000001002C0C90;
      *(unsigned char *)(v10 + 16) = 9;
    }
    a4(v6, 0, 1);
    return swift_errorRelease();
  }
  else
  {
    sub_10001F8BC(a1, a2);
    a4(a1, a2, 0);
    return sub_10000DBD8(a1, a2);
  }
}

uint64_t sub_10016D698(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10016D58C(a1, a2, a3, *(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16));
}

uint64_t sub_10016D6A0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v6 = v4;
    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    swift_retain();
    unint64_t v8 = 0xF000000000000000;
  }
  id v9 = a3;
  v5(v4, v8, a3);

  sub_10000DBD8((uint64_t)v4, v8);

  return swift_release();
}

uint64_t sub_10016D74C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10016D75C()
{
  return swift_release();
}

void sub_10016D768(uint64_t a1)
{
  uint64_t v108 = a1;
  uint64_t v106 = *v1;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v96 = *(void *)(v2 - 8);
  uint64_t v97 = v2;
  __chkstk_darwin(v2);
  unint64_t v94 = (char *)&v93 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v104 = *(void *)(v4 - 8);
  uint64_t v105 = v4;
  __chkstk_darwin(v4);
  uint64_t v93 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionOutput(0);
  uint64_t v6 = __chkstk_darwin(v95);
  uint64_t v99 = (uint64_t)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v98 = (char *)&v93 - v8;
  uint64_t v101 = type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionEnded(0);
  uint64_t v9 = __chkstk_darwin(v101);
  uint64_t v103 = (uint64_t)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v102 = (char *)&v93 - v11;
  uint64_t v12 = (int *)type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionStarted(0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v100 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v93 - v15;
  uint64_t v110 = 0;
  unint64_t v111 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  v17._uint64_t countAndFlagsBits = 0x293A5F28646E6573;
  v17._object = (void *)0xE800000000000000;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = 0x67617373656D203ALL;
  v18._object = (void *)0xEA00000000003D65;
  String.append(_:)(v18);
  uint64_t v19 = type metadata accessor for RemoteFollowerMessage();
  _print_unlocked<A, B>(_:_:)();
  v20._object = (void *)0xEA00000000003D6ELL;
  v20._uint64_t countAndFlagsBits = 0x6F6973736573202CLL;
  String.append(_:)(v20);
  uint64_t v107 = v1;
  v109._uint64_t countAndFlagsBits = 60;
  v109._object = (void *)0xE100000000000000;
  swift_retain();
  UUID.uuidString.getter();
  swift_release();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 32;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  swift_retain();
  uint64_t v23 = sub_1001F7514();
  unint64_t v25 = v24;
  swift_release();
  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 62;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  String.append(_:)(v109);
  swift_bridgeObjectRelease();
  id v28 = sub_1001F6968();
  swift_bridgeObjectRetain();
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v28 ulog:40 message:v29];
  swift_bridgeObjectRelease();

  uint64_t v30 = v108;
  Swift::String v31 = (uint64_t *)(v108 + *(int *)(v19 + 20));
  uint64_t v32 = *v31;
  int v33 = *((unsigned __int8 *)v31 + 8);
  if (!v33)
  {
    uint64_t v46 = (uint64_t)v100;
    (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v16, v108, v105);
    uint64_t v47 = UUID.uuidString.getter();
    uint64_t v49 = v48;
    Date.init()();
    if (qword_10035A598 != -1) {
      swift_once();
    }
    uint64_t v50 = qword_1003AC8D0;
    Swift::String v51 = (uint64_t *)&v16[v12[5]];
    uint64_t *v51 = v47;
    v51[1] = v49;
    *(void *)&v16[v12[7]] = v32;
    *(void *)&v16[v12[8]] = v50;
    uint64_t v110 = 0;
    unint64_t v111 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(19);
    v52._object = (void *)0x80000001002C10E0;
    v52._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v52);
    _print_unlocked<A, B>(_:_:)();
    id v53 = sub_1001F6968();
    swift_bridgeObjectRetain();
    NSString v54 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v53 ulog:40 message:v54];
    swift_bridgeObjectRelease();

    sub_10017B0E4((uint64_t)v16, v46, type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionStarted);
    uint64_t v55 = swift_allocObject();
    uint64_t v56 = (uint64_t)v107;
    *(void *)(v55 + 16) = v106;
    sub_100178948(v46, (uint64_t)sub_10017AED4, v55, v56);
    swift_release();
    uint64_t v57 = type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionStarted;
    sub_10017AF0C((uint64_t)v16, type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionStarted);
    uint64_t v58 = v46;
    goto LABEL_26;
  }
  if (v33 != 1)
  {
    uint64_t v59 = (uint64_t)v102;
    (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v102, v108, v105);
    uint64_t v60 = UUID.uuidString.getter();
    id v61 = (uint64_t *)(v59 + *(int *)(v101 + 20));
    *id v61 = v60;
    v61[1] = v62;
    uint64_t v110 = 0;
    unint64_t v111 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    v63._object = (void *)0x80000001002C10E0;
    v63._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v63);
    _print_unlocked<A, B>(_:_:)();
    id v64 = sub_1001F6968();
    swift_bridgeObjectRetain();
    NSString v65 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v64 ulog:40 message:v65];
    swift_bridgeObjectRelease();

    uint64_t v66 = v103;
    sub_10017B0E4(v59, v103, type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionEnded);
    uint64_t v67 = swift_allocObject();
    uint64_t v68 = (uint64_t)v107;
    *(void *)(v67 + 16) = v106;
    sub_100178BC4(v66, (uint64_t)sub_10017AE8C, v67, v68);
    swift_release();
    uint64_t v69 = type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionEnded;
LABEL_25:
    uint64_t v57 = v69;
    sub_10017AF0C(v59, v69);
    uint64_t v58 = v66;
LABEL_26:
    sub_10017AF0C(v58, v57);
    return;
  }
  int v34 = sub_1000615D8();
  if (!v34)
  {
    id v70 = sub_1001F6968();
    NSString v71 = String._bridgeToObjectiveC()();
    [v70 ulog:60 message:v71];
LABEL_28:

    return;
  }
  if (v34 != 1)
  {
    uint64_t v73 = v104;
    uint64_t v72 = v105;
    uint64_t v74 = v93;
    (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v93, v30, v105);
    uint64_t v75 = UUID.uuidString.getter();
    uint64_t v77 = v76;
    uint64_t v78 = v94;
    Date.init()();
    uint64_t v79 = (unsigned __int16)v32 & 0xFF00;
    uint64_t v80 = 0x746C7561666564;
    if ((v32 & 0x100) == 0) {
      uint64_t v80 = 0x6F69746163756465;
    }
    unint64_t v81 = 0xE700000000000000;
    if ((v32 & 0x100) == 0) {
      unint64_t v81 = 0xE90000000000006ELL;
    }
    if (v79 == 512) {
      uint64_t v82 = 0;
    }
    else {
      uint64_t v82 = v80;
    }
    if (v79 == 512) {
      unint64_t v83 = 0;
    }
    else {
      unint64_t v83 = v81;
    }
    uint64_t v59 = (uint64_t)v98;
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v98, v74, v72);
    uint64_t v85 = (int *)v95;
    uint64_t v84 = v96;
    uint64_t v86 = (uint64_t *)(v59 + *(int *)(v95 + 20));
    *uint64_t v86 = v75;
    v86[1] = v77;
    (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v59 + v85[6], v78, v97);
    *(unsigned char *)(v59 + v85[7]) = v32;
    uint64_t v87 = (uint64_t *)(v59 + v85[8]);
    uint64_t *v87 = v82;
    v87[1] = v83;
    uint64_t v110 = 0;
    unint64_t v111 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    v88._uint64_t countAndFlagsBits = 0x20676E69646E6553;
    v88._object = (void *)0xEF203A746E657665;
    String.append(_:)(v88);
    _print_unlocked<A, B>(_:_:)();
    id v89 = sub_1001F6968();
    swift_bridgeObjectRetain();
    NSString v90 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v89 ulog:40 message:v90];
    swift_bridgeObjectRelease();

    uint64_t v66 = v99;
    sub_10017B0E4(v59, v99, type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionOutput);
    uint64_t v91 = swift_allocObject();
    uint64_t v92 = (uint64_t)v107;
    *(void *)(v91 + 16) = v106;
    sub_10017671C(v66, (uint64_t)sub_10017AB50, v91, v92);
    swift_release();
    uint64_t v69 = type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionOutput;
    goto LABEL_25;
  }
  uint64_t v35 = (uint64_t)v107;
  uint64_t v36 = v107[4];
  uint64_t v37 = v107[5];
  unsigned __int8 v38 = *((unsigned char *)v107 + 48);
  sub_10017AE50(v36, v37, v38);
  uint64_t v39 = sub_10017AB88(v32, v36, v37, v38);
  sub_1001485B0(v36, v37, v38);
  uint64_t v40 = (char *)v39[2];
  if (!v40)
  {
    swift_bridgeObjectRelease();
    id v70 = sub_1001F6968();
    NSString v71 = String._bridgeToObjectiveC()();
    [v70 ulog:40 message:v71];
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  unint64_t v41 = (unsigned __int8 *)(v39 + 6);
  uint64_t v42 = v106;
  do
  {
    uint64_t v43 = *((void *)v41 - 2);
    uint64_t v44 = *((void *)v41 - 1);
    unsigned __int8 v45 = *v41;
    v41 += 24;
    sub_10017AE64(v43, v44, v45);
    sub_10016E3E8(v43, v44, v45, v35, v42);
    sub_1001485C4(v43, v44, v45);
    --v40;
  }
  while (v40);
  swift_bridgeObjectRelease_n();
}

uint64_t sub_10016E30C(int a1, int a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6, void *a7)
{
  _StringGuts.grow(_:)(a5);
  swift_bridgeObjectRelease();
  if (a3)
  {
    swift_errorRetain();
    sub_10000A38C((uint64_t *)&unk_100365D60);
    uint64_t v11 = String.init<A>(describing:)();
    unint64_t v13 = v12;
  }
  else
  {
    unint64_t v13 = 0xE300000000000000;
    uint64_t v11 = 7104878;
  }
  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  sub_10016ABE4(a6, a7, 0, a4, (uint64_t)&off_100329F20);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10016E3E8(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  sub_10017AE64(a1, a2, a3);
  _StringGuts.grow(_:)(25);
  v10._object = (void *)0x80000001002C1380;
  v10._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v10);
  _print_unlocked<A, B>(_:_:)();
  id v11 = sub_1001F6968();
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:40 message:v12];
  swift_bridgeObjectRelease();

  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a5;
  sub_1001764A4(a1, a2, a3, (uint64_t)sub_10017AFC4, v13, a4);
  swift_release();
  sub_1001485C4(a1, a2, a3);
  uint64_t v14 = *(void *)(a4 + 32);
  uint64_t v15 = *(void *)(a4 + 40);
  *(void *)(a4 + 32) = a1;
  *(void *)(a4 + 40) = a2;
  unsigned __int8 v16 = *(unsigned char *)(a4 + 48);
  *(unsigned char *)(a4 + 48) = a3;
  sub_10017AE64(a1, a2, a3);
  return sub_1001485B0(v14, v15, v16);
}

uint64_t sub_10016E598(uint64_t a1, uint64_t a2, Swift::Int a3, uint64_t a4, void *a5)
{
  _StringGuts.grow(_:)(a3);
  swift_bridgeObjectRelease();
  if (a1)
  {
    swift_errorRetain();
    sub_10000A38C((uint64_t *)&unk_100365D60);
    uint64_t v9 = String.init<A>(describing:)();
    unint64_t v11 = v10;
  }
  else
  {
    unint64_t v11 = 0xE300000000000000;
    uint64_t v9 = 7104878;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  sub_10016ABE4(a4, a5, 0, a2, (uint64_t)&off_100329F20);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10016E674()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_10016E6EC()
{
  uint64_t v1 = OBJC_IVAR____TtC17proximitycontrold23RemoteFollowerPresenter____lazy_storage___remoteFollowerNoticePresenter;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC17proximitycontrold23RemoteFollowerPresenter____lazy_storage___remoteFollowerNoticePresenter))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC17proximitycontrold23RemoteFollowerPresenter____lazy_storage___remoteFollowerNoticePresenter);
  }
  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = sub_10016E77C();
    type metadata accessor for RemoteFollowerNoticePresenter();
    swift_allocObject();
    uint64_t v2 = sub_1000E54E0((uint64_t)v4);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

void *sub_10016E77C()
{
  uint64_t v1 = OBJC_IVAR____TtC17proximitycontrold23RemoteFollowerPresenter____lazy_storage___remoteFollowerNoticePresenterModel;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC17proximitycontrold23RemoteFollowerPresenter____lazy_storage___remoteFollowerNoticePresenterModel))
  {
    uint64_t v2 = *(void **)(v0
                    + OBJC_IVAR____TtC17proximitycontrold23RemoteFollowerPresenter____lazy_storage___remoteFollowerNoticePresenterModel);
  }
  else
  {
    uint64_t v3 = swift_allocObject();
    swift_weakInit();
    uint64_t v4 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for RemoteFollowerNoticePresenterModel();
    uint64_t v2 = (void *)swift_allocObject();
    v2[2] = sub_10017B0D4;
    v2[3] = v3;
    _OWORD v2[4] = sub_10017B0DC;
    v2[5] = v4;
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

void *sub_10016E868()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_weakLoadStrong();
  if (Strong)
  {
    swift_unownedRetainStrong();
    swift_release();
    uint64_t Strong = (void *)sub_100125088()[4];
    id v1 = Strong;
    swift_release();
    swift_release();
    if (Strong) {
      sub_100179FE4(&qword_10035F890, (void (*)(uint64_t))type metadata accessor for RapportProxy);
    }
  }
  return Strong;
}

uint64_t sub_10016E938(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100172E20(a1, a2, a3, a4, a5, a6);
    return swift_release();
  }
  return result;
}

uint64_t *sub_10016E9DC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v70 = a1;
  uint64_t v61 = *v1;
  uint64_t v55 = sub_10000A38C(&qword_100369CB0);
  uint64_t v54 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  id v53 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_100369CB8);
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  __chkstk_darwin(v4);
  uint64_t v56 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10000A38C(&qword_1003673D0);
  uint64_t v71 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v69 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_100369CC0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v65 = v7;
  uint64_t v66 = v8;
  __chkstk_darwin(v7);
  Swift::String v63 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_100369CC8);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v68 = v11;
  __chkstk_darwin(v10);
  id v64 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000A38C(&qword_1003673B0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v59 = v13;
  uint64_t v60 = v14;
  __chkstk_darwin(v13);
  unsigned __int8 v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000A38C(&qword_100369CD0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  Swift::String v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000A38C((uint64_t *)&unk_100369B00);
  uint64_t v22 = __chkstk_darwin(v21);
  unint64_t v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  Swift::String v26 = (char *)&v53 - v25;
  *((_OWORD *)v2 + 1) = xmmword_10029E540;
  Swift::String v27 = (char *)v2 + OBJC_IVAR____TtC17proximitycontrold23RemoteFollowerPresenter__keepAliveMessage;
  uint64_t v28 = type metadata accessor for RemoteFollowerMessage();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v26, 1, 1, v28);
  sub_10000D728((uint64_t)v26, (uint64_t)v24, (uint64_t *)&unk_100369B00);
  Published.init(initialValue:)();
  sub_10000D78C((uint64_t)v26, (uint64_t *)&unk_100369B00);
  NSString v29 = v27;
  uint64_t v30 = v70;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v29, v20, v17);
  *((unsigned char *)v2 + OBJC_IVAR____TtC17proximitycontrold23RemoteFollowerPresenter_presentingNotice) = 0;
  *(uint64_t *)((char *)v2
             + OBJC_IVAR____TtC17proximitycontrold23RemoteFollowerPresenter____lazy_storage___remoteFollowerNoticePresenter) = 0;
  *(uint64_t *)((char *)v2
             + OBJC_IVAR____TtC17proximitycontrold23RemoteFollowerPresenter____lazy_storage___remoteFollowerNoticePresenterModel) = 0;
  *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC17proximitycontrold23RemoteFollowerPresenter_keepAliveTask) = 0;
  *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC17proximitycontrold23RemoteFollowerPresenter_tasks) = (uint64_t)&_swiftEmptySetSingleton;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v61, (uint64_t)&off_10032B950);
  _OWORD v2[4] = v30;
  swift_unownedRetain();
  v72[5] = sub_100117AF4();
  v72[0] = 0;
  v72[1] = 0;
  uint64_t v31 = sub_10000A38C(&qword_10035AC80);
  sub_10000A38C(&qword_100367530);
  uint64_t v61 = sub_10000B010(&qword_10035AC88, &qword_10035AC80);
  Publisher.scan<A>(_:_:)();
  sub_10000B010(&qword_100367538, &qword_1003673B0);
  uint64_t v32 = v59;
  uint64_t v33 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v16, v32);
  swift_release();
  v72[0] = v33;
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = sub_100174A08;
  *(void *)(v35 + 24) = v34;
  sub_10000A38C(&qword_100367540);
  uint64_t v36 = v62;
  sub_10000B010((unint64_t *)&unk_100367548, &qword_100367540);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  v72[0] = sub_100117AF4();
  type metadata accessor for HandoffSession();
  uint64_t v37 = v69;
  uint64_t v60 = v31;
  Publisher.compactMap<A>(_:)();
  swift_release();
  sub_10000A38C(&qword_100369CD8);
  unsigned __int8 v38 = v63;
  Publishers.CompactMap.map<A>(_:)();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v71 + 8);
  v71 += 8;
  v39(v37, v36);
  sub_10000B010(&qword_100369CE0, &qword_100369CC0);
  sub_10000B010(&qword_100369CE8, &qword_100369CD8);
  unint64_t v41 = v64;
  uint64_t v40 = v65;
  Publisher<>.switchToLatest()();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v38, v40);
  uint64_t v42 = swift_allocObject();
  swift_weakInit();
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = sub_100174A48;
  *(void *)(v43 + 24) = v42;
  sub_10000B010(&qword_100369CF0, &qword_100369CC8);
  uint64_t v44 = v67;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v41, v44);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  v72[3] = &type metadata for Feature;
  v72[4] = sub_10000CC08();
  LOBYTE(v72[0]) = 9;
  LOBYTE(v42) = isFeatureEnabled(_:)();
  sub_10000CC5C((uint64_t)v72);
  if (v42)
  {
    v72[0] = sub_100117AF4();
    unsigned __int8 v45 = v69;
    Publisher.compactMap<A>(_:)();
    swift_release();
    sub_10000A38C(&qword_100369CF8);
    uint64_t v46 = v53;
    Publishers.CompactMap.map<A>(_:)();
    v39(v45, v36);
    sub_10000B010(&qword_100369D00, &qword_100369CB0);
    sub_10000B010(&qword_100369D08, &qword_100369CF8);
    uint64_t v47 = v56;
    uint64_t v48 = v55;
    Publisher<>.switchToLatest()();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v46, v48);
    uint64_t v49 = swift_allocObject();
    swift_weakInit();
    uint64_t v50 = swift_allocObject();
    *(void *)(v50 + 16) = sub_100174A80;
    *(void *)(v50 + 24) = v49;
    sub_10000B010(&qword_100369D10, &qword_100369CB8);
    uint64_t v51 = v58;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v47, v51);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  swift_release();
  return v2;
}

uint64_t sub_10016F5F8(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10016FBF0(a1, a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_10016F66C()
{
  return swift_release();
}

uint64_t sub_10016F744(unsigned __int8 a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1001709E4(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10016F7B8()
{
  return swift_release();
}

uint64_t sub_10016F890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(int *)(sub_10000A38C(&qword_100369D18) + 48);
  sub_10017B0E4(a1, a3, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
  *(void *)(a3 + v6) = a2;

  return swift_retain();
}

uint64_t sub_10016F908(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100170EEC(a1, a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_10016F97C()
{
  id v1 = sub_1001F5E68();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  swift_unownedRelease();
  uint64_t v3 = v0 + OBJC_IVAR____TtC17proximitycontrold23RemoteFollowerPresenter__keepAliveMessage;
  uint64_t v4 = sub_10000A38C(&qword_100369CD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10016FA74()
{
  sub_10016F97C();

  return swift_deallocClassInstance();
}

uint64_t sub_10016FACC()
{
  return type metadata accessor for RemoteFollowerPresenter();
}

uint64_t type metadata accessor for RemoteFollowerPresenter()
{
  uint64_t result = qword_100369AE8;
  if (!qword_100369AE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10016FB20()
{
  sub_1001747C4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_10016FBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 7104878;
  uint64_t v6 = v2;
  uint64_t v80 = *(void *)v2;
  uint64_t v7 = sub_10000A38C((uint64_t *)&unk_100369B00);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v83 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v82 = (char *)&v68 - v10;
  uint64_t v11 = sub_10000A38C(&qword_10035AC20);
  __chkstk_darwin(v11 - 8);
  uint64_t v74 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v75 = *(void *)(v13 - 8);
  uint64_t v76 = v13;
  __chkstk_darwin(v13);
  uint64_t v85 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000A38C(&qword_100369DD0);
  uint64_t v70 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v84 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000A38C(&qword_100369DD8);
  uint64_t v72 = *(void *)(v16 - 8);
  uint64_t v73 = v16;
  __chkstk_darwin(v16);
  uint64_t v69 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000A38C(&qword_100369DE0);
  uint64_t v78 = *(void *)(v18 - 8);
  uint64_t v79 = v18;
  __chkstk_darwin(v18);
  uint64_t v77 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for RemoteFollowerMessage();
  uint64_t v81 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v86 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v90 = 0;
  unint64_t v91 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  id v90 = (id)0xD000000000000020;
  unint64_t v91 = 0x80000001002BF940;
  if (a1)
  {
    uint64_t v88 = 60;
    unint64_t v89 = 0xE100000000000000;
    swift_retain();
    UUID.uuidString.getter();
    sub_100089A9C(8);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 32;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    swift_retain();
    uint64_t v23 = sub_1001F7514();
    uint64_t v25 = v24;
    swift_release();
    v26._uint64_t countAndFlagsBits = v23;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._uint64_t countAndFlagsBits = 62;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    swift_release();
    uint64_t v28 = v88;
    unint64_t v29 = v89;
  }
  else
  {
    unint64_t v29 = 0xE300000000000000;
    uint64_t v28 = 7104878;
  }
  unint64_t v30 = v29;
  String.append(_:)(*(Swift::String *)&v28);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 0x736553646C6F202CLL;
  v31._object = (void *)0xED00003D6E6F6973;
  String.append(_:)(v31);
  if (a2)
  {
    uint64_t v88 = 60;
    unint64_t v89 = 0xE100000000000000;
    swift_retain();
    UUID.uuidString.getter();
    sub_100089A9C(8);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 32;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    swift_retain();
    uint64_t v34 = sub_1001F7514();
    uint64_t v36 = v35;
    swift_release();
    v37._uint64_t countAndFlagsBits = v34;
    v37._object = v36;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 62;
    v38._object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    swift_release();
    uint64_t v5 = v88;
    uint64_t v39 = (void *)v89;
  }
  else
  {
    uint64_t v39 = (void *)0xE300000000000000;
  }
  v40._uint64_t countAndFlagsBits = v5;
  v40._object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  id v41 = sub_1001F5E68();
  swift_bridgeObjectRetain();
  NSString v42 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v41 ulog:40 message:v42];

  swift_bridgeObjectRelease();
  uint64_t v43 = (uint64_t)v86;
  uint64_t v44 = v87;
  if (!a1)
  {
LABEL_17:
    *(void *)&v6[OBJC_IVAR____TtC17proximitycontrold23RemoteFollowerPresenter_keepAliveTask] = 0;
    swift_release();
    uint64_t v66 = (uint64_t)v82;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v81 + 56))(v82, 1, 1, v44);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_10000D728(v66, v83, (uint64_t *)&unk_100369B00);
    swift_retain();
    static Published.subscript.setter();
    uint64_t result = sub_10000D78C(v66, (uint64_t *)&unk_100369B00);
    if (!a2) {
      return result;
    }
    goto LABEL_18;
  }
  swift_retain();
  char v45 = sub_100062EE8();
  uint64_t v46 = v84;
  uint64_t v47 = v85;
  if ((v45 & 1) == 0)
  {
    if (qword_10035A520 != -1) {
      swift_once();
    }
    id v48 = *(id *)(qword_1003AC750 + 96);
    char v49 = sub_1000FD938();

    if ((v49 & 1) == 0)
    {
      swift_release();
      goto LABEL_17;
    }
  }
  uint64_t v83 = a2;
  UUID.init()();
  uint64_t v50 = v43 + *(int *)(v44 + 20);
  *(void *)uint64_t v50 = 0x401C000000000000;
  *(unsigned char *)(v50 + 8) = 0;
  sub_10005E878();
  sub_10016D768(v43);
  swift_release();
  swift_beginAccess();
  sub_10000A38C(&qword_100369CD0);
  Published.projectedValue.getter();
  swift_endAccess();
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  uint64_t v51 = v47;
  uint64_t v82 = v6;
  if (qword_10035A628 != -1) {
    swift_once();
  }
  Swift::String v52 = (void *)qword_1003ACB50;
  id v90 = (id)qword_1003ACB50;
  uint64_t v53 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v54 = (uint64_t)v74;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v74, 1, 1, v53);
  sub_100019E10(0, (unint64_t *)&qword_10035A680);
  sub_10000B010(&qword_100369DE8, &qword_100369DD0);
  sub_10003A8C0();
  id v55 = v52;
  uint64_t v56 = v69;
  uint64_t v57 = v71;
  Publisher.debounce<A>(for:scheduler:options:)();
  sub_10000D78C(v54, &qword_10035AC20);

  (*(void (**)(char *, uint64_t))(v75 + 8))(v51, v76);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v46, v57);
  sub_10000B010(&qword_100369DF0, &qword_100369DD8);
  uint64_t v58 = v77;
  uint64_t v59 = v73;
  uint64_t v44 = v87;
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v56, v59);
  uint64_t v60 = swift_allocObject();
  uint64_t v61 = v82;
  swift_weakInit();
  uint64_t v62 = (void *)swift_allocObject();
  v62[2] = v60;
  v62[3] = a1;
  v62[4] = v80;
  sub_10000B010(&qword_100369DF8, &qword_100369DE0);
  swift_retain();
  uint64_t v63 = v79;
  uint64_t v64 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v58, v63);
  sub_10017AF0C(v43, (uint64_t (*)(void))type metadata accessor for RemoteFollowerMessage);
  *(void *)&v61[OBJC_IVAR____TtC17proximitycontrold23RemoteFollowerPresenter_keepAliveTask] = v64;
  uint64_t result = swift_release();
  if (v83)
  {
LABEL_18:
    swift_retain();
    if (sub_100062EE8())
    {
      UUID.init()();
      uint64_t v67 = v43 + *(int *)(v44 + 20);
      *(void *)uint64_t v67 = 0;
      *(unsigned char *)(v67 + 8) = 2;
      sub_10005E878();
      sub_10016D768(v43);
      swift_release();
      swift_release();
      return sub_10017AF0C(v43, (uint64_t (*)(void))type metadata accessor for RemoteFollowerMessage);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100170784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000D728(a1, a2, (uint64_t *)&unk_100369B00);
}

uint64_t sub_1001707A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_10000A38C((uint64_t *)&unk_100369B00);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v15 - v10;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v13._object = (void *)0x80000001002C1520;
    v13._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v13);
    uint64_t v14 = type metadata accessor for RemoteFollowerMessage();
    _print_unlocked<A, B>(_:_:)();
    sub_10016ABE4(v16, v17, 0, a4, (uint64_t)&off_10032B950);
    swift_bridgeObjectRelease();
    sub_10005E878();
    sub_10016D768(a1);
    swift_release();
    sub_10017B0E4(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for RemoteFollowerMessage);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v11, 0, 1, v14);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_10000D728((uint64_t)v11, (uint64_t)v9, (uint64_t *)&unk_100369B00);
    static Published.subscript.setter();
    return sub_10000D78C((uint64_t)v11, (uint64_t *)&unk_100369B00);
  }
  return result;
}

uint64_t sub_1001709E4(unsigned __int8 a1)
{
  uint64_t v2 = sub_10000A38C((uint64_t *)&unk_100369B00);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v32 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v31 - v5;
  uint64_t v7 = type metadata accessor for RemoteFollowerMessage();
  uint64_t v31 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v35 = 0;
  unint64_t v36 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  unint64_t v35 = 0xD000000000000017;
  unint64_t v36 = 0x80000001002BF640;
  if (a1 == 2)
  {
    object = (void *)0xE500000000000000;
    uint64_t countAndFlagsBits = 0x6D6F6F6C62;
  }
  else if (a1 == 3)
  {
    object = (void *)0xE400000000000000;
    uint64_t countAndFlagsBits = 1886352499;
  }
  else
  {
    v34._uint64_t countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    v12._uint64_t countAndFlagsBits = 0x2D776F6C67;
    v12._object = (void *)0xE500000000000000;
    String.append(_:)(v12);
    char v33 = a1 & 1;
    _print_unlocked<A, B>(_:_:)();
    uint64_t countAndFlagsBits = v34._countAndFlagsBits;
    object = v34._object;
  }
  Swift::String v13 = object;
  String.append(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x6F6973736573202CLL;
  v14._object = (void *)0xEA00000000003D6ELL;
  String.append(_:)(v14);
  v34._uint64_t countAndFlagsBits = 60;
  v34._object = (void *)0xE100000000000000;
  swift_retain();
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 32;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  swift_retain();
  uint64_t v17 = sub_1001F7514();
  uint64_t v19 = v18;
  swift_release();
  v20._uint64_t countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 62;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  swift_release();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  id v22 = sub_1001F5E68();
  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v22 ulog:40 message:v23];

  swift_bridgeObjectRelease();
  uint64_t result = sub_100062EE8();
  if ((result & 1) == 0) {
    return result;
  }
  if (a1 == 2)
  {
    uint64_t v25 = a1;
  }
  else
  {
    if (a1 != 3)
    {
      unint64_t v26 = (unint64_t)(a1 & 1) << 8;
      uint64_t v25 = 1;
      goto LABEL_13;
    }
    uint64_t v25 = 0;
  }
  unint64_t v26 = 512;
LABEL_13:
  unint64_t v27 = v25 | v26;
  UUID.init()();
  uint64_t v28 = &v9[*(int *)(v7 + 20)];
  *(void *)uint64_t v28 = v27;
  void v28[8] = 1;
  sub_10005E878();
  sub_10016D768((uint64_t)v9);
  swift_release();
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v29 = *(id *)(qword_1003AC750 + 712);
  char v30 = sub_1000FD938();

  if ((v30 & 1) == 0)
  {
    sub_10017B0E4((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for RemoteFollowerMessage);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v6, 0, 1, v7);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_10000D728((uint64_t)v6, v32, (uint64_t *)&unk_100369B00);
    swift_retain();
    static Published.subscript.setter();
    sub_10000D78C((uint64_t)v6, (uint64_t *)&unk_100369B00);
  }
  return sub_10017AF0C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RemoteFollowerMessage);
}

uint64_t sub_100170EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v93 = type metadata accessor for NoticeContent(0);
  __chkstk_darwin(v93);
  unint64_t v94 = (uint64_t *)((char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v91 = type metadata accessor for NoticeTapAction(0);
  __chkstk_darwin(v91);
  uint64_t v92 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for UUID();
  uint64_t v99 = *(void **)(v90 - 8);
  uint64_t v6 = __chkstk_darwin(v90);
  unint64_t v89 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v86 - v8;
  uint64_t v10 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v10 - 8);
  uint64_t v104 = (uint64_t)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_100369D60);
  uint64_t v97 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v102 = (uint64_t)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = v14;
  __chkstk_darwin(v13);
  uint64_t v103 = (uint64_t)&v86 - v15;
  uint64_t v16 = type metadata accessor for NoticeContext(0);
  uint64_t v95 = *(void *)(v16 - 8);
  uint64_t v96 = v16;
  __chkstk_darwin(v16);
  uint64_t v100 = (uint64_t *)((char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = type metadata accessor for NoticeEffect();
  __chkstk_darwin(v18);
  Swift::String v20 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v106 = 0;
  unint64_t v107 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  unint64_t v106 = 0xD000000000000017;
  unint64_t v107 = 0x80000001002BF640;
  v21._uint64_t countAndFlagsBits = sub_1001AE5A0();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 0x6F6973736573202CLL;
  v22._object = (void *)0xEA00000000003D6ELL;
  String.append(_:)(v22);
  v105._uint64_t countAndFlagsBits = 60;
  v105._object = (void *)0xE100000000000000;
  swift_retain();
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 32;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  swift_retain();
  uint64_t v25 = sub_1001F7514();
  unint64_t v27 = v26;
  swift_release();
  v28._uint64_t countAndFlagsBits = v25;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 62;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  swift_release();
  String.append(_:)(v105);
  swift_bridgeObjectRelease();
  id v30 = sub_1001F5E68();
  swift_bridgeObjectRetain();
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v30 ulog:40 message:v31];

  swift_bridgeObjectRelease();
  uint64_t result = sub_100063000();
  if (result)
  {
    sub_10017B0E4(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v35 = v101;
    uint64_t v34 = v102;
    uint64_t v37 = v103;
    uint64_t v36 = v104;
    Swift::String v38 = v99;
    uint64_t v39 = v100;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        uint64_t v51 = (uint64_t *)*((void *)v20 + 1);
        uint64_t v52 = *((void *)v20 + 2);
        uint64_t v99 = *(void **)v20;
        uint64_t v100 = v51;
        uint64_t v96 = v52;
        sub_100171B6C(v99, (uint64_t)v51, v52, v103);
        uint64_t v53 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v36, 1, 1, v53);
        uint64_t v54 = *(void *)(v35 + 32);
        swift_unownedRetainStrong();
        sub_10000D728(v37, v34, &qword_100369D60);
        uint64_t v55 = qword_10035A630;
        swift_retain();
        swift_retain();
        if (v55 != -1) {
          swift_once();
        }
        uint64_t v56 = qword_1003ACB58;
        uint64_t v57 = sub_100179FE4(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
        unint64_t v58 = (*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
        unint64_t v59 = (v98 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v60 = (v59 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v61 = swift_allocObject();
        *(void *)(v61 + 16) = v56;
        *(void *)(v61 + 24) = v57;
        sub_10017A304(v34, v61 + v58);
        *(void *)(v61 + v59) = a2;
        *(void *)(v61 + v60) = v101;
        *(void *)(v61 + ((v60 + 15) & 0xFFFFFFFFFFFFFFF8)) = v54;
        swift_retain();
        sub_100255A24(v104, (uint64_t)&unk_100369D80, v61);
        swift_release();
        sub_10017A610(v99, (uint64_t)v100, v96);
        uint64_t result = sub_10000D78C(v103, &qword_100369D60);
        break;
      case 2:
        uint64_t result = swift_bridgeObjectRelease();
        break;
      case 3:
        UUID.init()();
        uint64_t v88 = UUID.uuidString.getter();
        uint64_t v87 = v62;
        uint64_t v63 = (void (*)(char *, uint64_t))v38[1];
        uint64_t v64 = v90;
        v63(v9, v90);
        if (qword_10035A520 != -1) {
          swift_once();
        }
        id v65 = *(id *)(qword_1003AC750 + 72);
        char v66 = sub_100101C9C();

        char v67 = v66 & 1;
        uint64_t v68 = (uint64_t)v92;
        swift_storeEnumTagMultiPayload();
        uint64_t v69 = v89;
        UUID.init()();
        uint64_t v70 = UUID.uuidString.getter();
        uint64_t v72 = v71;
        v63(v69, v64);
        uint64_t v73 = (uint64_t)v94;
        *unint64_t v94 = v70;
        *(void *)(v73 + 8) = v72;
        strcpy((char *)(v73 + 16), "Handoff Hint");
        *(unsigned char *)(v73 + 29) = 0;
        *(_WORD *)(v73 + 30) = -5120;
        swift_storeEnumTagMultiPayload();
        uint64_t v74 = v100;
        uint64_t v75 = v87;
        *uint64_t v100 = v88;
        v74[1] = v75;
        *((unsigned char *)v74 + 16) = v67;
        uint64_t v76 = v96;
        sub_10017A654(v68, (uint64_t)v74 + *(int *)(v96 + 24), type metadata accessor for NoticeTapAction);
        *((unsigned char *)v74 + *(int *)(v76 + 28)) = 0;
        sub_10017A654(v73, (uint64_t)v74 + *(int *)(v76 + 32), type metadata accessor for NoticeContent);
        sub_10017B0E4((uint64_t)v74, v37, type metadata accessor for NoticeContext);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v95 + 56))(v37, 0, 1, v76);
        uint64_t v77 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v104, 1, 1, v77);
        uint64_t v78 = v101;
        uint64_t v99 = *(void **)(v101 + 32);
        swift_unownedRetainStrong();
        sub_10000D728(v37, v102, &qword_100369D60);
        uint64_t v79 = qword_10035A630;
        swift_retain();
        swift_retain();
        if (v79 != -1) {
          swift_once();
        }
        uint64_t v80 = qword_1003ACB58;
        uint64_t v81 = sub_100179FE4(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
        unint64_t v82 = (*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
        unint64_t v83 = (v98 + v82 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v84 = (v83 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v85 = swift_allocObject();
        *(void *)(v85 + 16) = v80;
        *(void *)(v85 + 24) = v81;
        sub_10017A304(v102, v85 + v82);
        *(void *)(v85 + v83) = a2;
        *(void *)(v85 + v84) = v78;
        *(void *)(v85 + ((v84 + 15) & 0xFFFFFFFFFFFFFFF8)) = v99;
        swift_retain();
        sub_100255A24(v104, (uint64_t)&unk_100369D78, v85);
        swift_release();
        sub_10000D78C(v103, &qword_100369D60);
        uint64_t v50 = v74;
        goto LABEL_15;
      default:
        sub_10017A654((uint64_t)v20, (uint64_t)v100, type metadata accessor for NoticeContext);
        sub_10017B0E4((uint64_t)v39, v37, type metadata accessor for NoticeContext);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v95 + 56))(v37, 0, 1, v96);
        uint64_t v40 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v36, 1, 1, v40);
        uint64_t v41 = *(void *)(v35 + 32);
        swift_unownedRetainStrong();
        sub_10000D728(v37, v34, &qword_100369D60);
        uint64_t v42 = qword_10035A630;
        swift_retain();
        swift_retain();
        uint64_t v43 = v35;
        if (v42 != -1) {
          swift_once();
        }
        uint64_t v44 = qword_1003ACB58;
        uint64_t v45 = sub_100179FE4(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
        unint64_t v46 = (*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
        unint64_t v47 = (v98 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v48 = (v47 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v49 = swift_allocObject();
        *(void *)(v49 + 16) = v44;
        *(void *)(v49 + 24) = v45;
        sub_10017A304(v102, v49 + v46);
        *(void *)(v49 + v47) = a2;
        *(void *)(v49 + v48) = v43;
        *(void *)(v49 + ((v48 + 15) & 0xFFFFFFFFFFFFFFF8)) = v41;
        swift_retain();
        sub_100255A24(v104, (uint64_t)&unk_100369D88, v49);
        swift_release();
        sub_10000D78C(v103, &qword_100369D60);
        uint64_t v50 = v100;
LABEL_15:
        uint64_t result = sub_10017AF0C((uint64_t)v50, type metadata accessor for NoticeContext);
        break;
    }
  }
  return result;
}

uint64_t sub_100171B6C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v7 = type metadata accessor for LeaderNoticeTapAction(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for NoticeTapAction(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 == 1)
  {
    UUID.init()();
    uint64_t v17 = UUID.uuidString.getter();
    uint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    Swift::String v20 = (int *)type metadata accessor for NoticeContext(0);
    swift_storeEnumTagMultiPayload();
    Swift::String v21 = (void *)(a4 + v20[8]);
    id v22 = [self localizedStringForKey:3];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    *Swift::String v21 = 0;
    v21[1] = 0xE000000000000000;
    void v21[2] = v23;
    v21[3] = v25;
    type metadata accessor for NoticeContent(0);
    swift_storeEnumTagMultiPayload();
    *(void *)a4 = v17;
    *(void *)(a4 + 8) = v19;
    *(unsigned char *)(a4 + 16) = 0;
LABEL_7:
    *(unsigned char *)(a4 + v20[7]) = 1;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v20 - 1) + 56))(a4, 0, 1, v20);
  }
  if ((v47 & 1) == 0)
  {
    UUID.init()();
    uint64_t v26 = UUID.uuidString.getter();
    uint64_t v28 = v27;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    swift_storeEnumTagMultiPayload();
    sub_10022A67C(v12);
    sub_10017AF0C((uint64_t)v9, type metadata accessor for LeaderNoticeTapAction);
    Swift::String v20 = (int *)type metadata accessor for NoticeContext(0);
    Swift::String v29 = (void *)(a4 + v20[8]);
    *Swift::String v29 = 0;
    v29[1] = 0xE000000000000000;
    void v29[2] = 0x414944454DLL;
    v29[3] = 0xE500000000000000;
    type metadata accessor for NoticeContent(0);
    swift_storeEnumTagMultiPayload();
    *(void *)a4 = v26;
    *(void *)(a4 + 8) = v28;
    *(unsigned char *)(a4 + 16) = 0;
    sub_10017A654((uint64_t)v12, a4 + v20[6], type metadata accessor for NoticeTapAction);
    *(unsigned char *)(a4 + v20[7]) = 1;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v20 - 1) + 56))(a4, 0, 1, v20);
  }
  id v30 = a1;
  id v31 = [v30 callUUID];
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v46 = v30;
    uint64_t v35 = v34;

    UUID.init()();
    uint64_t v36 = UUID.uuidString.getter();
    uint64_t v47 = v37;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    *uint64_t v9 = v33;
    v9[1] = v35;
    swift_storeEnumTagMultiPayload();
    sub_10022A67C(v12);
    sub_10017AF0C((uint64_t)v9, type metadata accessor for LeaderNoticeTapAction);
    Swift::String v20 = (int *)type metadata accessor for NoticeContext(0);
    uint64_t v38 = v20[8];

    uint64_t v39 = (void *)(a4 + v38);
    *uint64_t v39 = 0;
    v39[1] = 0xE000000000000000;
    v39[2] = 1280065859;
    v39[3] = 0xE400000000000000;
    type metadata accessor for NoticeContent(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v40 = v47;
    *(void *)a4 = v36;
    *(void *)(a4 + 8) = v40;
    *(unsigned char *)(a4 + 16) = 0;
    sub_10017A654((uint64_t)v12, a4 + v20[6], type metadata accessor for NoticeTapAction);
    goto LABEL_7;
  }
  id v42 = sub_1001F5E68();
  NSString v43 = String._bridgeToObjectiveC()();
  [v42 ulog:60 message:v43];

  uint64_t v44 = type metadata accessor for NoticeContext(0);
  uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56);

  return v45(a4, 1, 1, v44);
}

uint64_t sub_1001720A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  v7[13] = sub_10000A38C((uint64_t *)&unk_10035E840);
  v7[14] = swift_task_alloc();
  v7[15] = type metadata accessor for ExperienceEvent(0);
  v7[16] = swift_task_alloc();
  sub_10000A38C(&qword_100369D60);
  v7[17] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for NoticeContext(0);
  v7[18] = v8;
  v7[19] = *(void *)(v8 - 8);
  v7[20] = swift_task_alloc();
  if (qword_10035A630 != -1) {
    swift_once();
  }
  type metadata accessor for WorkActor();
  v7[21] = sub_100179FE4(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v7[22] = v10;
  v7[23] = v9;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_100172290, v10, v9);
}

uint64_t sub_100172290()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 136);
  sub_10000D728(*(void *)(v0 + 72), v3, &qword_100369D60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000A38C(&qword_100369D90);
    sub_10000B010(&qword_100369D98, &qword_100369D90);
    uint64_t v4 = swift_allocError();
    void *v5 = 0xD000000000000010;
    v5[1] = 0x80000001002C1010;
    swift_willThrow();
LABEL_8:
    uint64_t v17 = *(void *)(v0 + 128);
    uint64_t v19 = *(void *)(v0 + 104);
    uint64_t v18 = *(void *)(v0 + 112);
    swift_errorRetain();
    sub_100146144(v4, (void *)(v0 + 16));
    long long v29 = *(_OWORD *)(v0 + 32);
    long long v30 = *(_OWORD *)(v0 + 16);
    long long v28 = *(_OWORD *)(v0 + 48);
    uint64_t v20 = *(void *)(v0 + 64);
    swift_retain();
    uint64_t v21 = UUID.uuidString.getter();
    uint64_t v23 = v22;
    swift_release();
    *(_OWORD *)uint64_t v17 = v30;
    *(_OWORD *)(v17 + 16) = v29;
    *(_OWORD *)(v17 + 32) = v28;
    *(void *)(v17 + 48) = v20;
    *(unsigned char *)(v17 + 56) = 2;
    swift_storeEnumTagMultiPayload();
    uint64_t v24 = (uint64_t *)(v18 + *(int *)(v19 + 48));
    uint64_t v25 = (void *)(v18 + *(int *)(v19 + 64));
    sub_10017B0E4(v17, v18, type metadata accessor for ExperienceEvent);
    *uint64_t v24 = v21;
    v24[1] = v23;
    *uint64_t v25 = 0;
    v25[1] = 0xE000000000000000;
    sub_10017A994(v0 + 16);
    swift_bridgeObjectRetain();
    PassthroughSubject.send(_:)();
    sub_10000D78C(v18, (uint64_t *)&unk_10035E840);
    sub_10017AF0C(v17, type metadata accessor for ExperienceEvent);
    swift_bridgeObjectRelease();
    sub_10017A9E0(v0 + 16);
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  sub_10017A654(*(void *)(v0 + 136), *(void *)(v0 + 160), type metadata accessor for NoticeContext);
  uint64_t v6 = sub_10003E5A8();
  *(void *)(v0 + 192) = v6;
  if (!v6)
  {
    uint64_t v15 = *(void *)(v0 + 160);
    sub_10000A38C(&qword_100369DA0);
    sub_10000B010(&qword_100369DA8, &qword_100369DA0);
    uint64_t v4 = swift_allocError();
    *uint64_t v16 = 0xD000000000000018;
    v16[1] = 0x80000001002C1030;
    swift_willThrow();
    sub_10017AF0C(v15, type metadata accessor for NoticeContext);
    goto LABEL_8;
  }
  uint64_t v7 = v6;
  uint64_t v9 = *(void *)(v0 + 160);
  uint64_t v8 = *(void *)(v0 + 168);
  uint64_t v11 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 88);
  uint64_t v12 = qword_1003ACB58;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v13;
  void v13[2] = v10;
  v13[3] = v9;
  v13[4] = v11;
  v13[5] = v7;
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_1001726DC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v14, v12, v8, 0xD000000000000025, 0x80000001002C1050, sub_10017AA2C, v13, (char *)&type metadata for () + 8);
}

uint64_t sub_1001726DC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 216) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 184);
  uint64_t v4 = *(void *)(v2 + 176);
  if (v0) {
    uint64_t v5 = sub_1001729F0;
  }
  else {
    uint64_t v5 = sub_100172830;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v5, v4, v3);
}

uint64_t sub_100172830()
{
  uint64_t v11 = (void *)v0[24];
  uint64_t v12 = v0[20];
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  swift_retain();
  uint64_t v4 = UUID.uuidString.getter();
  uint64_t v6 = v5;
  swift_release();
  *(void *)(v1 + 48) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)uint64_t v1 = 0u;
  *(unsigned char *)(v1 + 56) = 3;
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = (uint64_t *)(v3 + *(int *)(v2 + 48));
  uint64_t v8 = (void *)(v3 + *(int *)(v2 + 64));
  sub_10017B0E4(v1, v3, type metadata accessor for ExperienceEvent);
  *uint64_t v7 = v4;
  v7[1] = v6;
  *uint64_t v8 = 0;
  v8[1] = 0xE000000000000000;
  swift_bridgeObjectRetain();
  PassthroughSubject.send(_:)();
  sub_10000D78C(v3, (uint64_t *)&unk_10035E840);
  sub_10017AF0C(v1, type metadata accessor for ExperienceEvent);

  swift_bridgeObjectRelease();
  sub_10017AF0C(v12, type metadata accessor for NoticeContext);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001729F0()
{
  uint64_t v1 = *(void *)(v0 + 160);

  sub_10017AF0C(v1, type metadata accessor for NoticeContext);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  swift_errorRetain();
  sub_100146144(v2, (void *)(v0 + 16));
  long long v15 = *(_OWORD *)(v0 + 32);
  long long v16 = *(_OWORD *)(v0 + 16);
  long long v14 = *(_OWORD *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 64);
  swift_retain();
  uint64_t v7 = UUID.uuidString.getter();
  uint64_t v9 = v8;
  swift_release();
  *(_OWORD *)uint64_t v3 = v16;
  *(_OWORD *)(v3 + 16) = v15;
  *(_OWORD *)(v3 + 32) = v14;
  *(void *)(v3 + 48) = v6;
  *(unsigned char *)(v3 + 56) = 2;
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = (uint64_t *)(v5 + *(int *)(v4 + 48));
  uint64_t v11 = (void *)(v5 + *(int *)(v4 + 64));
  sub_10017B0E4(v3, v5, type metadata accessor for ExperienceEvent);
  *uint64_t v10 = v7;
  v10[1] = v9;
  *uint64_t v11 = 0;
  v11[1] = 0xE000000000000000;
  sub_10017A994(v0 + 16);
  swift_bridgeObjectRetain();
  PassthroughSubject.send(_:)();
  sub_10000D78C(v5, (uint64_t *)&unk_10035E840);
  sub_10017AF0C(v3, type metadata accessor for ExperienceEvent);
  swift_bridgeObjectRelease();
  sub_10017A9E0(v0 + 16);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_100172C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v17 = a5;
  uint64_t v7 = sub_10000A38C(&qword_100369DB0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  sub_10016E6EC();
  swift_retain();
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = v11;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  sub_1000E560C(a3, v10, v12, v17, (uint64_t)sub_10017AACC, v14);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_100172DBC(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    sub_10000A38C(&qword_100369DB0);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10000A38C(&qword_100369DB0);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_100172E20(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v80 = a6;
  uint64_t v88 = a3;
  uint64_t v79 = *v6;
  sub_100174AE4(a1, (uint64_t)v89);
  uint64_t v85 = v89[0];
  unint64_t v84 = v89[1];
  uint64_t v11 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v11 - 8);
  uint64_t v75 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for URL();
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v76 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for LeaderNoticeTapAction(0);
  uint64_t v14 = __chkstk_darwin(v86);
  uint64_t v81 = (uint64_t *)((char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v83 = (char *)&v74 - v17;
  __chkstk_darwin(v16);
  uint64_t v82 = (uint64_t)&v74 - v18;
  uint64_t v19 = sub_10000A38C((uint64_t *)&unk_10035E840);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for ExperienceEvent(0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90[0].n128_u64[0] = 0;
  v90[0].n128_u64[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v90[0].n128_u64[0] = 0xD000000000000043;
  v90[0].n128_u64[1] = 0x80000001002C0E70;
  uint64_t v87 = a1;
  v25._uint64_t countAndFlagsBits = sub_1001AEA0C();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._object = (void *)0xEC0000003D444974;
  v26._uint64_t countAndFlagsBits = 0x7865746E6F63202CLL;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = a2;
  v27._object = v88;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = 0x6F6973736573202CLL;
  v28._object = (void *)0xEC0000003D44496ELL;
  String.append(_:)(v28);
  unint64_t v29 = a4;
  if (a5)
  {
    v92.n128_u64[0] = a4;
    v92.n128_u64[1] = a5;
    swift_bridgeObjectRetain();
    uint64_t v30 = String.init<A>(describing:)();
    unint64_t v32 = v31;
  }
  else
  {
    unint64_t v32 = 0xE300000000000000;
    uint64_t v30 = 7104878;
  }
  unint64_t v33 = v32;
  String.append(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease();
  id v34 = sub_1001F5E68();
  swift_bridgeObjectRetain();
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v34 ulog:40 message:v35];

  swift_bridgeObjectRelease();
  if (a5)
  {
    swift_unownedRetainStrong();
    uint64_t v36 = v87;
    sub_100174AE4(v87, (uint64_t)v24);
    swift_storeEnumTagMultiPayload();
    uint64_t v37 = &v21[*(int *)(v19 + 48)];
    uint64_t v38 = &v21[*(int *)(v19 + 64)];
    sub_10017B0E4((uint64_t)v24, (uint64_t)v21, type metadata accessor for ExperienceEvent);
    *(void *)uint64_t v37 = v29;
    *((void *)v37 + 1) = a5;
    *(void *)uint64_t v38 = 0xD000000000000014;
    *((void *)v38 + 1) = 0x80000001002C0EE0;
    swift_bridgeObjectRetain();
    sub_100179E94(v36, (void (*)(void, void, void, void, void, void, void, void))sub_10001FAFC);
    PassthroughSubject.send(_:)();
    sub_10000D78C((uint64_t)v21, (uint64_t *)&unk_10035E840);
    sub_10017AF0C((uint64_t)v24, type metadata accessor for ExperienceEvent);
    swift_release();
    sub_100174AE4(v36, (uint64_t)v90);
    if (v91 - 2 >= 2)
    {
      if (!v91)
      {
        sub_100179E38(v90, &v92);
        return;
      }
      if (v90[0].n128_u64[1] >> 60 != 15)
      {
        type metadata accessor for JSONDecoder();
        swift_allocObject();
        uint64_t v41 = v85;
        unint64_t v42 = v84;
        sub_10001FBBC(v85, v84);
        sub_10001FBBC(v41, v42);
        JSONDecoder.init()();
        sub_100179FE4(&qword_100369D48, (void (*)(uint64_t))type metadata accessor for LeaderNoticeTapAction);
        NSString v43 = v83;
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        swift_release();
        uint64_t v44 = (uint64_t)v43;
        uint64_t v45 = v82;
        sub_10017A654(v44, v82, type metadata accessor for LeaderNoticeTapAction);
        id v46 = v81;
        sub_10017B0E4(v45, (uint64_t)v81, type metadata accessor for LeaderNoticeTapAction);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (!EnumCaseMultiPayload)
        {
          uint64_t v58 = v77;
          unint64_t v59 = v76;
          uint64_t v60 = v78;
          (*(void (**)(char *, uint64_t *, uint64_t))(v77 + 32))(v76, v46, v78);
          strcpy((char *)&v92, "Opening url: ");
          v92.n128_u16[7] = -4864;
          sub_100179FE4(&qword_100363918, (void (*)(uint64_t))&type metadata accessor for URL);
          v61._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v61);
          swift_bridgeObjectRelease();
          id v62 = sub_1001F5E68();
          swift_bridgeObjectRetain();
          NSString v63 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v62 ulog:40 message:v63];

          swift_bridgeObjectRelease();
          id v64 = [self sharedApplication];
          URL._bridgeToObjectiveC()(v65);
          char v67 = v66;
          sub_10026990C((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for OpenExternalURLOptionsKey(0);
          sub_100179FE4(&qword_10035ADD0, type metadata accessor for OpenExternalURLOptionsKey);
          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v64 openURL:v67 options:isa completionHandler:0];

          sub_100179E94(v36, (void (*)(void, void, void, void, void, void, void, void))sub_10002052C);
          sub_100179E94(v36, (void (*)(void, void, void, void, void, void, void, void))sub_10002052C);
          (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v60);
LABEL_23:
          sub_10017AF0C(v45, type metadata accessor for LeaderNoticeTapAction);
          return;
        }
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v49 = *v46;
          uint64_t v48 = v46[1];
          id v50 = sub_1001F5E68();
          NSString v51 = String._bridgeToObjectiveC()();
          [v50 ulog:40 message:v51];

          swift_unownedRetainStrong();
          swift_retain();
          swift_release();
          uint64_t v52 = sub_100173B8C(v80);
          swift_release();
          if (v52)
          {
            uint64_t v53 = type metadata accessor for TaskPriority();
            uint64_t v54 = (uint64_t)v75;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v75, 1, 1, v53);
            uint64_t v55 = (void *)swift_allocObject();
            v55[2] = 0;
            v55[3] = 0;
            v55[4] = v49;
            v55[5] = v48;
            uint64_t v56 = v79;
            v55[6] = v52;
            v55[7] = v56;
            swift_retain();
            sub_100255A24(v54, (uint64_t)&unk_100369D58, (uint64_t)v55);
            sub_100179E94(v36, (void (*)(void, void, void, void, void, void, void, void))sub_10002052C);
            swift_release();
            swift_release();
            uint64_t v57 = v36;
LABEL_22:
            sub_100179E94(v57, (void (*)(void, void, void, void, void, void, void, void))sub_10002052C);
            goto LABEL_23;
          }
          swift_bridgeObjectRelease();
LABEL_21:
          id v72 = sub_1001F5E68();
          NSString v73 = String._bridgeToObjectiveC()();
          [v72 ulog:60 message:v73];

          sub_100179E94(v36, (void (*)(void, void, void, void, void, void, void, void))sub_10002052C);
          uint64_t v57 = v36;
          goto LABEL_22;
        }
        id v69 = sub_1001F5E68();
        NSString v70 = String._bridgeToObjectiveC()();
        [v69 ulog:40 message:v70];

        swift_unownedRetainStrong();
        swift_retain();
        swift_release();
        uint64_t v71 = sub_100173B8C(v80);
        swift_release();
        if (!v71) {
          goto LABEL_21;
        }
        if (qword_10035A540 != -1) {
          swift_once();
        }
        sub_100204E84(v71);
        sub_10017AF0C(v45, type metadata accessor for LeaderNoticeTapAction);
        sub_100179E94(v36, (void (*)(void, void, void, void, void, void, void, void))sub_10002052C);
        sub_100179E94(v36, (void (*)(void, void, void, void, void, void, void, void))sub_10002052C);
        swift_release();
      }
    }
  }
  else
  {
    id v39 = sub_1001F5E68();
    NSString v40 = String._bridgeToObjectiveC()();
    [v39 ulog:60 message:v40];
  }
}

uint64_t sub_100173B8C(uint64_t a1)
{
  uint64_t v2 = v1;
  *(void *)&long long v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v26 + 1) = v4;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v5 = sub_100269E60((uint64_t)v25), (v6 & 1) != 0))
  {
    sub_100027B10(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v26);
  }
  else
  {
    long long v26 = 0u;
    long long v27 = 0u;
  }
  sub_1000BA108((uint64_t)v25);
  if (*((void *)&v27 + 1))
  {
    int v7 = swift_dynamicCast();
    if (v7) {
      uint64_t v8 = v23[0];
    }
    else {
      uint64_t v8 = 0;
    }
    if (v7) {
      uint64_t v9 = v23[1];
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    sub_10000D78C((uint64_t)&v26, &qword_100371910);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  *(void *)&long long v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v26 + 1) = v10;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v11 = sub_100269E60((uint64_t)v25), (v12 & 1) != 0))
  {
    sub_100027B10(*(void *)(a1 + 56) + 32 * v11, (uint64_t)&v26);
  }
  else
  {
    long long v26 = 0u;
    long long v27 = 0u;
  }
  sub_1000BA108((uint64_t)v25);
  if (*((void *)&v27 + 1))
  {
    int v13 = swift_dynamicCast();
    if (v13) {
      uint64_t v14 = v23[0];
    }
    else {
      uint64_t v14 = 0;
    }
    if (v13) {
      uint64_t v15 = v23[1];
    }
    else {
      uint64_t v15 = 0;
    }
  }
  else
  {
    sub_10000D78C((uint64_t)&v26, &qword_100371910);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  strcpy((char *)v23, "rangingToken");
  BYTE5(v23[1]) = 0;
  HIWORD(v23[1]) = -5120;
  uint64_t v24 = 0;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v16 = sub_100269E60((uint64_t)v25), (v17 & 1) != 0))
  {
    sub_100027B10(*(void *)(a1 + 56) + 32 * v16, (uint64_t)&v26);
  }
  else
  {
    long long v26 = 0u;
    long long v27 = 0u;
  }
  sub_1000BA108((uint64_t)v25);
  if (*((void *)&v27 + 1))
  {
    if (swift_dynamicCast())
    {
      sub_100019E10(0, (unint64_t *)&qword_10036AF80);
      uint64_t v18 = (void *)sub_10016C184();
      sub_10000DBEC(v23[0], v23[1]);

      uint64_t v24 = v18;
    }
  }
  else
  {
    sub_10000D78C((uint64_t)&v26, &qword_100371910);
  }
  [*(id *)(v2 + 32) lock];
  swift_beginAccess();
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = sub_1000F06FC(v19);
  swift_bridgeObjectRelease();
  [*(id *)(v2 + 32) unlock];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_10017A02C((unint64_t)v20, v8, v9, v14, v15, &v24);
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  return v21;
}

uint64_t sub_100173EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_100173F18, 0, 0);
}

uint64_t sub_100173F18()
{
  if (qword_10035A5F0 != -1) {
    swift_once();
  }
  swift_retain();
  swift_retain();
  CurrentValueSubject.value.getter();
  int v1 = *(unsigned __int8 *)(v0 + 56);
  if (v1 == 254)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    swift_release();
    uint64_t v2 = *(void **)(v0 + 32);
    int v1 = *(unsigned __int8 *)(v0 + 40);
  }
  else
  {
    uint64_t v2 = *(void **)(v0 + 48);
    swift_release();
    swift_release();
  }
  *(void *)(v0 + 104) = v2;
  *(unsigned char *)(v0 + 41) = v1;
  if (v1 != 255)
  {
    if ((v1 & 1) == 0)
    {
      uint64_t v4 = *(void *)(v0 + 72);
      uint64_t v3 = *(void *)(v0 + 80);
      id v5 = [v2 callUUID];
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;

      if (v6 == v4 && v8 == v3)
      {
        swift_bridgeObjectRelease();
LABEL_12:
        uint64_t v10 = (void *)qword_1003ACA78;
        *(void *)(v0 + 112) = qword_1003ACA78;
        v10;
        unint64_t v11 = (void *)swift_task_alloc();
        *(void *)(v0 + 120) = v11;
        *unint64_t v11 = v0;
        v11[1] = sub_1001741EC;
        uint64_t v12 = *(void *)(v0 + 88);
        return sub_1002052A4(v12, (uint64_t)v2);
      }
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_12;
      }
    }
    sub_100038A4C(v2, v1);
  }
  uint64_t v14 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 72);
  uint64_t v15 = *(void **)(v0 + 80);
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = v16;
  v17._object = v15;
  String.append(_:)(v17);
  sub_10016AE10(60, 0xD000000000000024, (void *)0x80000001002C0FC0, 0, v14, (uint64_t)&off_10032B950);
  swift_bridgeObjectRelease();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_1001741EC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10017436C;
  }
  else
  {

    uint64_t v3 = sub_100174308;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v3, 0, 0);
}

uint64_t sub_100174308()
{
  sub_100038A4C(*(id *)(v0 + 104), *(unsigned char *)(v0 + 41));
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10017436C()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void **)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 96);
  char v4 = *(unsigned char *)(v0 + 41);

  _StringGuts.grow(_:)(31);
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  v5._object = (void *)0x80000001002C0FF0;
  v5._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v5);
  *(void *)(v0 + 64) = v1;
  sub_10000A38C((uint64_t *)&unk_100365D60);
  _print_unlocked<A, B>(_:_:)();
  sub_10016AE10(90, *(void *)(v0 + 16), *(void **)(v0 + 24), 0, v3, (uint64_t)&off_10032B950);
  sub_100038A4C(v2, v4);
  swift_bridgeObjectRelease();
  swift_errorRelease();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1001744A8()
{
  uint64_t v0 = type metadata accessor for RemoteFollowerMessage();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  char v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v21 - v5;
  uint64_t v7 = sub_10000A38C((uint64_t *)&unk_100369B00);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v21 - v11;
  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(90);
  v13._uint64_t countAndFlagsBits = 0xD000000000000030;
  v13._object = (void *)0x80000001002C0DF0;
  String.append(_:)(v13);
  Double.write<A>(to:)();
  v14._object = (void *)0x80000001002C0E30;
  v14._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v14);
  Double.write<A>(to:)();
  v15._object = (void *)0x80000001002C0E50;
  v15._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v15);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_10000D728((uint64_t)v12, (uint64_t)v10, (uint64_t *)&unk_100369B00);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v10, 1, v0) == 1)
  {
    uint64_t v16 = (void *)0xE300000000000000;
    uint64_t v17 = 7104878;
  }
  else
  {
    sub_10017A654((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for RemoteFollowerMessage);
    sub_10017B0E4((uint64_t)v6, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for RemoteFollowerMessage);
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v16 = v18;
    sub_10017AF0C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for RemoteFollowerMessage);
  }
  sub_10000D78C((uint64_t)v12, (uint64_t *)&unk_100369B00);
  v19._uint64_t countAndFlagsBits = v17;
  v19._object = v16;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return v21[0];
}

void sub_1001747C4()
{
  if (!qword_100369AF8)
  {
    sub_10000A3D0((uint64_t *)&unk_100369B00);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100369AF8);
    }
  }
}

uint64_t sub_100174820()
{
  return sub_1001744A8();
}

uint64_t sub_100174844()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_1001748C0(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C((uint64_t *)&unk_100369B00);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v9 - v6;
  sub_10000D728(a1, (uint64_t)&v9 - v6, (uint64_t *)&unk_100369B00);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000D728((uint64_t)v7, (uint64_t)v5, (uint64_t *)&unk_100369B00);
  swift_retain();
  static Published.subscript.setter();
  return sub_10000D78C((uint64_t)v7, (uint64_t *)&unk_100369B00);
}

uint64_t sub_1001749D0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100174A08(uint64_t a1, uint64_t a2)
{
  return sub_10016F5F8(a1, a2);
}

uint64_t sub_100174A10()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100174A48(unsigned __int8 a1)
{
  return sub_10016F744(a1);
}

uint64_t sub_100174A50(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, *((void *)a1 + 1));
}

uint64_t sub_100174A80(uint64_t a1, uint64_t a2)
{
  return sub_10016F908(a1, a2);
}

uint64_t sub_100174A88(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, void))(v1 + 16);
  uint64_t v4 = sub_10000A38C(&qword_100369D18);
  return v3(a1, *(void *)(a1 + *(int *)(v4 + 48)));
}

uint64_t sub_100174AD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10016F890(a1, v2, a2);
}

uint64_t sub_100174AE4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100174B40(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v65 = a4;
  uint64_t v63 = a3;
  char v67 = a5;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78[3] = type metadata accessor for PresentNoticeRequest();
  v78[4] = (uint64_t)&off_100335748;
  uint64_t v11 = sub_10000D680(v78);
  sub_10017B0E4(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PresentNoticeRequest);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v12 = sub_100089A9C(8);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  aBlock = 0;
  unint64_t v73 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v19._uint64_t countAndFlagsBits = 0xD000000000000022;
  v19._object = (void *)0x80000001002C12A0;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 0x736575716572203ALL;
  v20._object = (void *)0xEA00000000003D74;
  String.append(_:)(v20);
  sub_10000A38C(&qword_100369DB8);
  _print_unlocked<A, B>(_:_:)();
  v21._uint64_t countAndFlagsBits = 0x65444C437072202CLL;
  v21._object = (void *)0xED00003D65636976;
  String.append(_:)(v21);
  id v64 = a2;
  id v22 = [a2 description];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v25 = v24;

  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0x67617373656D202CLL;
  v27._object = (void *)0xEC0000003D444965;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  id v29 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 ulog:40 message:v30];
  swift_bridgeObjectRelease();

  unint64_t v31 = sub_100245F4C();
  unint64_t v32 = v67;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    uint64_t v41 = v12;
    uint64_t v42 = v16;
    goto LABEL_10;
  }
  id v34 = (void *)Strong;
  NSString v35 = *(void **)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent__rangingProxy) + 24);
  id v36 = v35;

  if (!v35) {
    goto LABEL_9;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v37 = aBlock;
  if (!aBlock
    || (id v38 = [aBlock discoveryToken], v37, !v38))
  {

LABEL_9:
    uint64_t v41 = v12;
    uint64_t v42 = v16;
    goto LABEL_10;
  }
  sub_100019E10(0, (unint64_t *)&qword_100369040);
  *(void *)&long long v62 = sub_10026FAD4((uint64_t)v38);
  unint64_t v40 = v39;

  *((void *)&v62 + 1) = v40;
  uint64_t v41 = v12;
  uint64_t v42 = v16;
  if (v40 >> 60 != 15)
  {
    strcpy((char *)&v70, "rangingToken");
    BYTE13(v70) = 0;
    HIWORD(v70) = -5120;
    AnyHashable.init<A>(_:)();
    uint64_t v71 = &type metadata for Data;
    long long v43 = v62;
    long long v70 = v62;
    sub_100027B00(&v70, v69);
    sub_10001F8BC(v43, *((unint64_t *)&v43 + 1));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v68 = v31;
    sub_1002650FC(v69, (uint64_t)&aBlock, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    sub_1000BA108((uint64_t)&aBlock);
    sub_10000DBD8(v43, *((unint64_t *)&v62 + 1));
  }
LABEL_10:
  uint64_t v45 = *(void **)&v32[OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLClient];
  if (v45)
  {
    aBlock = 0;
    unint64_t v73 = 0xE000000000000000;
    char v67 = v45;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    aBlock = (void **)0xD000000000000020;
    unint64_t v73 = 0x80000001002C1210;
    v46._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    uint64_t v47 = v41;
    uint64_t v48 = v18;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    id v49 = sub_1001F5E20();
    swift_bridgeObjectRetain();
    NSString v50 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v49 ulog:40 message:v50];
    swift_bridgeObjectRelease();

    NSString v51 = String._bridgeToObjectiveC()();
    v52.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v53 = [v64 effectiveIdentifier];
    if (!v53)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v53 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    uint64_t v54 = (void *)swift_allocObject();
    v54[2] = v47;
    v54[3] = v14;
    v54[4] = v42;
    v54[5] = v48;
    uint64_t v55 = v65;
    v54[6] = v63;
    v54[7] = v55;
    v54[8] = ObjectType;
    uint64_t v76 = sub_10017AF78;
    uint64_t v77 = v54;
    aBlock = _NSConcreteStackBlock;
    unint64_t v73 = 1107296256;
    uint64_t v74 = sub_10026F9F0;
    uint64_t v75 = &unk_10032BE60;
    uint64_t v56 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    uint64_t v57 = v67;
    [v67 sendRequestID:v51 request:v52.super.isa destinationID:v53 options:0 responseHandler:v56];
    _Block_release(v56);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v58 = sub_1001F5E20();
    NSString v59 = String._bridgeToObjectiveC()();
    [v58 ulog:60 message:v59];
  }
  return sub_10000CC5C((uint64_t)v78);
}

uint64_t sub_1001753D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v63 = a4;
  uint64_t v62 = a3;
  uint64_t v66 = a5;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77[3] = type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionEnded(0);
  v77[4] = (uint64_t)&off_10032FE48;
  uint64_t v11 = sub_10000D680(v77);
  sub_10017B0E4(a1, (uint64_t)v11, type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionEnded);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v12 = sub_100089A9C(8);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  aBlock = 0;
  unint64_t v72 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v19._uint64_t countAndFlagsBits = 0xD000000000000022;
  v19._object = (void *)0x80000001002C12A0;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 0x736575716572203ALL;
  v20._object = (void *)0xEA00000000003D74;
  String.append(_:)(v20);
  sub_10000A38C(&qword_100369DB8);
  _print_unlocked<A, B>(_:_:)();
  v21._uint64_t countAndFlagsBits = 0x65444C437072202CLL;
  v21._object = (void *)0xED00003D65636976;
  String.append(_:)(v21);
  id v64 = a2;
  id v22 = [a2 description];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v25 = v24;

  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0x67617373656D202CLL;
  v27._object = (void *)0xEC0000003D444965;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  id v29 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 ulog:40 message:v30];
  swift_bridgeObjectRelease();

  unint64_t v31 = sub_1001CB860();
  uint64_t v32 = v66;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_8;
  }
  id v34 = (void *)Strong;
  NSString v35 = *(void **)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent__rangingProxy) + 24);
  id v36 = v35;

  if (!v35) {
    goto LABEL_8;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v37 = aBlock;
  if (!aBlock
    || (id v38 = [aBlock discoveryToken], v37, !v38))
  {

LABEL_8:
    uint64_t v41 = v12;
    goto LABEL_9;
  }
  sub_100019E10(0, (unint64_t *)&qword_100369040);
  *(void *)&long long v61 = sub_10026FAD4((uint64_t)v38);
  unint64_t v40 = v39;

  *((void *)&v61 + 1) = v40;
  uint64_t v41 = v12;
  if (v40 >> 60 != 15)
  {
    strcpy((char *)&v69, "rangingToken");
    BYTE13(v69) = 0;
    HIWORD(v69) = -5120;
    AnyHashable.init<A>(_:)();
    long long v70 = &type metadata for Data;
    long long v42 = v61;
    long long v69 = v61;
    sub_100027B00(&v69, v68);
    sub_10001F8BC(v42, *((unint64_t *)&v42 + 1));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v67 = v31;
    sub_1002650FC(v68, (uint64_t)&aBlock, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    sub_1000BA108((uint64_t)&aBlock);
    sub_10000DBD8(v42, *((unint64_t *)&v61 + 1));
  }
LABEL_9:
  uint64_t v44 = *(void **)(v32 + OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLClient);
  if (v44)
  {
    aBlock = 0;
    unint64_t v72 = 0xE000000000000000;
    id v45 = v44;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    aBlock = (void **)0xD000000000000020;
    unint64_t v72 = 0x80000001002C1210;
    v46._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    uint64_t v47 = v18;
    uint64_t v48 = v41;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    id v49 = sub_1001F5E20();
    swift_bridgeObjectRetain();
    NSString v50 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v49 ulog:40 message:v50];
    swift_bridgeObjectRelease();

    NSString v51 = String._bridgeToObjectiveC()();
    v52.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v53 = [v64 effectiveIdentifier];
    if (!v53)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v53 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    uint64_t v54 = (void *)swift_allocObject();
    v54[2] = v48;
    v54[3] = v14;
    v54[4] = v16;
    v54[5] = v47;
    uint64_t v55 = v63;
    v54[6] = v62;
    v54[7] = v55;
    v54[8] = ObjectType;
    uint64_t v75 = sub_10017AF78;
    uint64_t v76 = v54;
    aBlock = _NSConcreteStackBlock;
    unint64_t v72 = 1107296256;
    unint64_t v73 = sub_10026F9F0;
    uint64_t v74 = &unk_10032BC80;
    uint64_t v56 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v45 sendRequestID:v51 request:v52.super.isa destinationID:v53 options:0 responseHandler:v56];
    _Block_release(v56);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v57 = sub_1001F5E20();
    NSString v58 = String._bridgeToObjectiveC()();
    [v57 ulog:60 message:v58];
  }
  return sub_10000CC5C((uint64_t)v77);
}

uint64_t sub_100175C3C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v63 = a4;
  uint64_t v62 = a3;
  uint64_t v66 = a5;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77[3] = type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionStarted(0);
  v77[4] = (uint64_t)&off_10032FE80;
  uint64_t v11 = sub_10000D680(v77);
  sub_10017B0E4(a1, (uint64_t)v11, type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionStarted);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v12 = sub_100089A9C(8);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  aBlock = 0;
  unint64_t v72 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v19._uint64_t countAndFlagsBits = 0xD000000000000022;
  v19._object = (void *)0x80000001002C12A0;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 0x736575716572203ALL;
  v20._object = (void *)0xEA00000000003D74;
  String.append(_:)(v20);
  sub_10000A38C(&qword_100369DB8);
  _print_unlocked<A, B>(_:_:)();
  v21._uint64_t countAndFlagsBits = 0x65444C437072202CLL;
  v21._object = (void *)0xED00003D65636976;
  String.append(_:)(v21);
  id v64 = a2;
  id v22 = [a2 description];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v25 = v24;

  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0x67617373656D202CLL;
  v27._object = (void *)0xEC0000003D444965;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  id v29 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 ulog:40 message:v30];
  swift_bridgeObjectRelease();

  unint64_t v31 = sub_1001CB530();
  uint64_t v32 = v66;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_8;
  }
  id v34 = (void *)Strong;
  NSString v35 = *(void **)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent__rangingProxy) + 24);
  id v36 = v35;

  if (!v35) {
    goto LABEL_8;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v37 = aBlock;
  if (!aBlock
    || (id v38 = [aBlock discoveryToken], v37, !v38))
  {

LABEL_8:
    uint64_t v41 = v12;
    goto LABEL_9;
  }
  sub_100019E10(0, (unint64_t *)&qword_100369040);
  *(void *)&long long v61 = sub_10026FAD4((uint64_t)v38);
  unint64_t v40 = v39;

  *((void *)&v61 + 1) = v40;
  uint64_t v41 = v12;
  if (v40 >> 60 != 15)
  {
    strcpy((char *)&v69, "rangingToken");
    BYTE13(v69) = 0;
    HIWORD(v69) = -5120;
    AnyHashable.init<A>(_:)();
    long long v70 = &type metadata for Data;
    long long v42 = v61;
    long long v69 = v61;
    sub_100027B00(&v69, v68);
    sub_10001F8BC(v42, *((unint64_t *)&v42 + 1));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v67 = v31;
    sub_1002650FC(v68, (uint64_t)&aBlock, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    sub_1000BA108((uint64_t)&aBlock);
    sub_10000DBD8(v42, *((unint64_t *)&v61 + 1));
  }
LABEL_9:
  uint64_t v44 = *(void **)(v32 + OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLClient);
  if (v44)
  {
    aBlock = 0;
    unint64_t v72 = 0xE000000000000000;
    id v45 = v44;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    aBlock = (void **)0xD000000000000020;
    unint64_t v72 = 0x80000001002C1210;
    v46._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    uint64_t v47 = v18;
    uint64_t v48 = v41;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    id v49 = sub_1001F5E20();
    swift_bridgeObjectRetain();
    NSString v50 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v49 ulog:40 message:v50];
    swift_bridgeObjectRelease();

    NSString v51 = String._bridgeToObjectiveC()();
    v52.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v53 = [v64 effectiveIdentifier];
    if (!v53)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v53 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    uint64_t v54 = (void *)swift_allocObject();
    v54[2] = v48;
    v54[3] = v14;
    v54[4] = v16;
    v54[5] = v47;
    uint64_t v55 = v63;
    v54[6] = v62;
    v54[7] = v55;
    v54[8] = ObjectType;
    uint64_t v75 = sub_10017AF78;
    uint64_t v76 = v54;
    aBlock = _NSConcreteStackBlock;
    unint64_t v72 = 1107296256;
    unint64_t v73 = sub_10026F9F0;
    uint64_t v74 = &unk_10032BBE0;
    uint64_t v56 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v45 sendRequestID:v51 request:v52.super.isa destinationID:v53 options:0 responseHandler:v56];
    _Block_release(v56);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v57 = sub_1001F5E20();
    NSString v58 = String._bridgeToObjectiveC()();
    [v57 ulog:60 message:v58];
  }
  return sub_10000CC5C((uint64_t)v77);
}

uint64_t sub_1001764A4(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Swift::String v25 = &type metadata for HandoffRemotePeerInterface.Request.Handoff2Output;
  Swift::String v26 = &off_10032FDD8;
  v23[0] = a1;
  v23[1] = a2;
  unsigned __int8 v24 = a3;
  sub_10017AE64(a1, a2, a3);
  v12._object = (void *)0x80000001002C13A0;
  v12._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = 0x3D746E657665203ALL;
  v13._object = (void *)0xE800000000000000;
  String.append(_:)(v13);
  sub_10000A38C(&qword_100369DC0);
  _print_unlocked<A, B>(_:_:)();
  id v14 = sub_1001F6968();
  swift_bridgeObjectRetain();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 ulog:40 message:v15];
  swift_bridgeObjectRelease();

  uint64_t v16 = (void *)sub_100125088()[4];
  NSString v17 = v16;
  swift_release();
  if (v16)
  {
    uint64_t v18 = *(void **)(*(void *)(*(void *)(a6 + 24) + 24)
                   + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnection);
    if (v18)
    {
      id v19 = v18;
      sub_100176994(a1, a2, a3, v19, a4, a5);
    }
    else
    {
      Swift::String v20 = (void *)sub_10003E5A8();
      if (v20)
      {
        id v19 = v20;
        sub_1001778F4(a1, a2, a3, v20, a4, a5, (uint64_t)v17);
      }
      else
      {
        id v19 = sub_1001F6968();
        NSString v21 = String._bridgeToObjectiveC()();
        [v19 ulog:60 message:v21];

        NSString v17 = v21;
      }
    }
  }
  else
  {
    id v19 = sub_1001F6968();
    NSString v17 = String._bridgeToObjectiveC()();
    [v19 ulog:60 message:v17];
  }

  return sub_10000CC5C((uint64_t)v23);
}

uint64_t sub_10017671C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[3] = type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionOutput(0);
  v20[4] = (uint64_t)&off_10032FE10;
  uint64_t v8 = sub_10000D680(v20);
  sub_10017B0E4(a1, (uint64_t)v8, type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionOutput);
  v9._object = (void *)0x80000001002C13A0;
  v9._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0x3D746E657665203ALL;
  v10._object = (void *)0xE800000000000000;
  String.append(_:)(v10);
  sub_10000A38C(&qword_100369DC0);
  _print_unlocked<A, B>(_:_:)();
  id v11 = sub_1001F6968();
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:40 message:v12];
  swift_bridgeObjectRelease();

  Swift::String v13 = (void *)sub_100125088()[4];
  NSString v14 = v13;
  swift_release();
  if (v13)
  {
    NSString v15 = *(void **)(*(void *)(*(void *)(a4 + 24) + 24)
                   + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnection);
    if (v15)
    {
      id v16 = v15;
      sub_1001770F4((uint64_t)v8, v16, a2, a3, (uint64_t)v14);
    }
    else
    {
      NSString v17 = (void *)sub_10003E5A8();
      if (v17)
      {
        id v16 = v17;
        sub_1001780D8((uint64_t)v8, v17, a2, a3, (uint64_t)v14);
      }
      else
      {
        id v16 = sub_1001F6968();
        NSString v18 = String._bridgeToObjectiveC()();
        [v16 ulog:60 message:v18];

        NSString v14 = v18;
      }
    }
  }
  else
  {
    id v16 = sub_1001F6968();
    NSString v14 = String._bridgeToObjectiveC()();
    [v16 ulog:60 message:v14];
  }

  return sub_10000CC5C((uint64_t)v20);
}

uint64_t sub_100176994(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v65 = a6;
  uint64_t v70 = a5;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  Swift::String v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = &type metadata for HandoffRemotePeerInterface.Request.Handoff2Output;
  uint64_t v82 = &off_10032FDD8;
  uint64_t v78 = a1;
  uint64_t v79 = (void *)a2;
  unsigned __int8 v80 = a3;
  sub_10017AE64(a1, a2, a3);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v14 = sub_100089A9C(8);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  v77[0] = 0;
  v77[1] = (id)0xE000000000000000;
  _StringGuts.grow(_:)(41);
  v21._object = (void *)0x80000001002C13C0;
  v21._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = 0x3D746E657665203ALL;
  v22._object = (void *)0xE800000000000000;
  String.append(_:)(v22);
  sub_10000A38C(&qword_100369DC0);
  _print_unlocked<A, B>(_:_:)();
  v23._uint64_t countAndFlagsBits = 0x6C434C437072202CLL;
  v23._object = (void *)0xED00003D746E6569;
  String.append(_:)(v23);
  id v71 = a4;
  id v24 = [a4 description];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v27 = v26;

  v28._uint64_t countAndFlagsBits = v25;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 0x67617373656D202CLL;
  v29._object = (void *)0xEC0000003D444965;
  String.append(_:)(v29);
  uint64_t v67 = v18;
  uint64_t v68 = v14;
  uint64_t v66 = v16;
  uint64_t v30 = v20;
  v31._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  id v32 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v32 ulog:40 message:v33];
  swift_bridgeObjectRelease();

  uint64_t v34 = v78;
  NSString v35 = v79;
  LOBYTE(v32) = v80;
  sub_10000A38C(&qword_1003645E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028D430;
  strcpy((char *)v77, "uiEventTypeKey");
  HIBYTE(v77[1]) = -18;
  AnyHashable.init<A>(_:)();
  uint64_t v37 = sub_100202A24(v34, v35, (char)v32);
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v37;
  *(void *)(inited + 80) = v38;
  unint64_t v39 = sub_100268E80(inited);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  unint64_t v72 = v39;
  if (!Strong) {
    goto LABEL_8;
  }
  uint64_t v41 = (void *)Strong;
  long long v42 = *(void **)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent__rangingProxy) + 24);
  id v43 = v42;

  if (!v42) {
    goto LABEL_8;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  id v44 = v77[0];
  if (!v77[0])
  {

LABEL_8:
    uint64_t v51 = v65;
    goto LABEL_11;
  }
  id v45 = [v77[0] discoveryToken];

  uint64_t v46 = v65;
  if (v45)
  {
    sub_100019E10(0, (unint64_t *)&qword_100369040);
    uint64_t v47 = sub_10026FAD4((uint64_t)v45);
    unint64_t v49 = v48;

    if (v49 >> 60 != 15)
    {
      strcpy((char *)&v75, "rangingToken");
      BYTE13(v75) = 0;
      HIWORD(v75) = -5120;
      AnyHashable.init<A>(_:)();
      uint64_t v76 = &type metadata for Data;
      *(void *)&long long v75 = v47;
      *((void *)&v75 + 1) = v49;
      sub_100027B00(&v75, v74);
      sub_10001F8BC(v47, v49);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v73 = v39;
      sub_1002650FC(v74, (uint64_t)v77, isUniquelyReferenced_nonNull_native);
      unint64_t v72 = v73;
      swift_bridgeObjectRelease();
      sub_1000BA108((uint64_t)v77);
      sub_10000DBD8(v47, v49);
    }
  }
  else
  {
  }
  uint64_t v51 = v46;
LABEL_11:
  v77[0] = 0;
  v77[1] = (id)0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v77[0] = (id)0xD00000000000001ELL;
  v77[1] = (id)0x80000001002C13E0;
  uint64_t v52 = v67;
  uint64_t v53 = v68;
  uint64_t v54 = v66;
  v55._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  id v56 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v56 ulog:40 message:v57];
  swift_bridgeObjectRelease();

  NSString v58 = String._bridgeToObjectiveC()();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v60 = (void *)swift_allocObject();
  v60[2] = v53;
  v60[3] = v54;
  v60[4] = v52;
  v60[5] = v30;
  uint64_t v61 = ObjectType;
  uint64_t v62 = v70;
  v60[6] = v70;
  v60[7] = v51;
  v60[8] = v61;
  v77[4] = sub_10017B000;
  v77[5] = v60;
  v77[0] = _NSConcreteStackBlock;
  v77[1] = (id)1107296256;
  _OWORD v77[2] = sub_100119FC4;
  v77[3] = &unk_10032BCF8;
  uint64_t v63 = _Block_copy(v77);
  sub_1000766BC(v62);
  swift_release();
  [v71 sendEventID:v58 event:isa options:0 completion:v63];
  _Block_release(v63);

  return sub_10000CC5C((uint64_t)&v78);
}

uint64_t sub_1001770F4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v66 = a4;
  uint64_t v69 = a3;
  uint64_t v67 = a5;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80[3] = type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionOutput(0);
  v80[4] = (uint64_t)&off_10032FE10;
  uint64_t v11 = sub_10000D680(v80);
  sub_10017B0E4(a1, (uint64_t)v11, type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionOutput);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v12 = sub_100089A9C(8);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  aBlock = 0;
  unint64_t v75 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  v19._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v19._object = (void *)0x80000001002C13C0;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 0x3D746E657665203ALL;
  v20._object = (void *)0xE800000000000000;
  String.append(_:)(v20);
  sub_10000A38C(&qword_100369DC0);
  _print_unlocked<A, B>(_:_:)();
  v21._uint64_t countAndFlagsBits = 0x6C434C437072202CLL;
  v21._object = (void *)0xED00003D746E6569;
  String.append(_:)(v21);
  id v22 = [a2 description];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0x67617373656D202CLL;
  v27._object = (void *)0xEC0000003D444965;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  id v29 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 ulog:40 message:v30];
  swift_bridgeObjectRelease();

  uint64_t v65 = sub_1001CBB30();
  uint64_t v63 = v18;
  uint64_t v31 = v69;
  uint64_t v32 = v66;
  id v64 = a2;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_9;
  }
  uint64_t v34 = (void *)Strong;
  NSString v35 = *(void **)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent__rangingProxy) + 24);
  id v36 = v35;

  if (!v35) {
    goto LABEL_9;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v37 = aBlock;
  if (!aBlock
    || (id v38 = [aBlock discoveryToken], v37, !v38))
  {

LABEL_9:
    uint64_t v44 = v12;
    uint64_t v45 = v14;
    uint64_t v46 = v16;
    uint64_t v47 = v63;
    goto LABEL_10;
  }
  sub_100019E10(0, (unint64_t *)&qword_100369040);
  uint64_t v39 = sub_10026FAD4((uint64_t)v38);
  unint64_t v41 = v40;

  unint64_t v42 = v41;
  BOOL v43 = v41 >> 60 == 15;
  uint64_t v44 = v12;
  uint64_t v45 = v14;
  uint64_t v46 = v16;
  uint64_t v47 = v63;
  if (!v43)
  {
    strcpy((char *)&v72, "rangingToken");
    BYTE13(v72) = 0;
    HIWORD(v72) = -5120;
    AnyHashable.init<A>(_:)();
    unint64_t v73 = &type metadata for Data;
    *(void *)&long long v72 = v39;
    *((void *)&v72 + 1) = v42;
    sub_100027B00(&v72, v71);
    sub_10001F8BC(v39, v42);
    uint64_t v48 = v39;
    uint64_t v49 = v65;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v70 = v49;
    sub_1002650FC(v71, (uint64_t)&aBlock, isUniquelyReferenced_nonNull_native);
    uint64_t v65 = v70;
    swift_bridgeObjectRelease();
    sub_1000BA108((uint64_t)&aBlock);
    sub_10000DBD8(v48, v42);
  }
  uint64_t v31 = v69;
LABEL_10:
  aBlock = 0;
  unint64_t v75 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  aBlock = (void **)0xD00000000000001ELL;
  unint64_t v75 = 0x80000001002C13E0;
  v51._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  uint64_t v52 = v45;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  uint64_t v53 = v47;
  uint64_t v54 = v46;
  id v55 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v56 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v55 ulog:40 message:v56];
  swift_bridgeObjectRelease();

  NSString v57 = String._bridgeToObjectiveC()();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v59 = (void *)swift_allocObject();
  v59[2] = v44;
  v59[3] = v52;
  v59[4] = v54;
  v59[5] = v53;
  v59[6] = v31;
  v59[7] = v32;
  v59[8] = ObjectType;
  uint64_t v78 = sub_10017B000;
  uint64_t v79 = v59;
  aBlock = _NSConcreteStackBlock;
  unint64_t v75 = 1107296256;
  uint64_t v76 = sub_100119FC4;
  uint64_t v77 = &unk_10032BD98;
  uint64_t v60 = _Block_copy(&aBlock);
  sub_1000766BC(v31);
  swift_release();
  [v64 sendEventID:v57 event:isa options:0 completion:v60];
  _Block_release(v60);

  return sub_10000CC5C((uint64_t)v80);
}

uint64_t sub_1001778F4(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v75 = a5;
  uint64_t v76 = a6;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = &type metadata for HandoffRemotePeerInterface.Request.Handoff2Output;
  unint64_t v89 = &off_10032FDD8;
  uint64_t v85 = a1;
  uint64_t v86 = (void *)a2;
  unsigned __int8 v87 = a3;
  sub_10017AE64(a1, a2, a3);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v16 = sub_100089A9C(8);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  id v22 = v21;
  swift_bridgeObjectRelease();
  v84[0] = 0;
  v84[1] = (id)0xE000000000000000;
  _StringGuts.grow(_:)(41);
  v23._object = (void *)0x80000001002C1400;
  v23._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = 0x3D746E657665203ALL;
  v24._object = (void *)0xE800000000000000;
  String.append(_:)(v24);
  sub_10000A38C(&qword_100369DC0);
  _print_unlocked<A, B>(_:_:)();
  v25._uint64_t countAndFlagsBits = 0x65444C437072202CLL;
  v25._object = (void *)0xED00003D65636976;
  String.append(_:)(v25);
  id v73 = a4;
  Swift::String v26 = a4;
  uint64_t v27 = v16;
  id v28 = [v26 description];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  v32._uint64_t countAndFlagsBits = v29;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 0x67617373656D202CLL;
  v33._object = (void *)0xEC0000003D444965;
  String.append(_:)(v33);
  id v78 = v22;
  uint64_t v79 = v27;
  uint64_t v34 = v18;
  uint64_t v77 = v20;
  v35._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  id v36 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v36 ulog:40 message:v37];
  swift_bridgeObjectRelease();

  uint64_t v38 = v85;
  uint64_t v39 = v86;
  LOBYTE(v36) = v87;
  sub_10000A38C(&qword_1003645E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028D430;
  strcpy((char *)v84, "uiEventTypeKey");
  HIBYTE(v84[1]) = -18;
  AnyHashable.init<A>(_:)();
  uint64_t v41 = sub_100202A24(v38, v39, (char)v36);
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v41;
  *(void *)(inited + 80) = v42;
  unint64_t v43 = sub_100268E80(inited);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v45 = (void *)Strong;
    uint64_t v46 = *(void **)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent__rangingProxy) + 24);
    id v47 = v46;

    if (v46)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      id v48 = v84[0];
      if (v84[0]
        && (id v49 = [v84[0] discoveryToken], v48, v49))
      {
        sub_100019E10(0, (unint64_t *)&qword_100369040);
        uint64_t v50 = sub_10026FAD4((uint64_t)v49);
        unint64_t v52 = v51;

        if (v52 >> 60 != 15)
        {
          strcpy((char *)&v82, "rangingToken");
          BYTE13(v82) = 0;
          HIWORD(v82) = -5120;
          AnyHashable.init<A>(_:)();
          unint64_t v83 = &type metadata for Data;
          *(void *)&long long v82 = v50;
          *((void *)&v82 + 1) = v52;
          sub_100027B00(&v82, v81);
          sub_10001F8BC(v50, v52);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v80 = v43;
          sub_1002650FC(v81, (uint64_t)v84, isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRelease();
          sub_1000BA108((uint64_t)v84);
          sub_10000DBD8(v50, v52);
        }
      }
      else
      {
      }
    }
  }
  uint64_t v54 = v77;
  id v55 = v78;
  NSString v56 = *(void **)(a7 + OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLClient);
  if (v56)
  {
    v84[0] = 0;
    v84[1] = (id)0xE000000000000000;
    id v78 = v56;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v84[0] = (id)0xD00000000000001ELL;
    v84[1] = (id)0x80000001002C13E0;
    v57._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    uint64_t v58 = v34;
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    id v59 = v55;
    uint64_t v60 = v54;
    id v61 = sub_1001F5E20();
    swift_bridgeObjectRetain();
    NSString v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v61 ulog:40 message:v62];
    swift_bridgeObjectRelease();

    NSString v63 = String._bridgeToObjectiveC()();
    v64.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v65 = [v73 effectiveIdentifier];
    if (!v65)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v65 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    uint64_t v66 = (void *)swift_allocObject();
    v66[2] = v79;
    v66[3] = v58;
    v66[4] = v60;
    v66[5] = v59;
    uint64_t v68 = v75;
    uint64_t v67 = v76;
    v66[6] = v75;
    v66[7] = v67;
    v66[8] = ObjectType;
    v84[4] = sub_10017B000;
    v84[5] = v66;
    v84[0] = _NSConcreteStackBlock;
    v84[1] = (id)1107296256;
    v84[2] = sub_100119FC4;
    v84[3] = &unk_10032BD48;
    uint64_t v69 = _Block_copy(v84);
    sub_1000766BC(v68);
    swift_release();
    id v70 = v78;
    [v78 sendEventID:v63 event:v64.super.isa destinationID:v65 options:0 completion:v69];
    _Block_release(v69);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v64.super.Class isa = (Class)sub_1001F5E20();
    NSString v65 = String._bridgeToObjectiveC()();
    [(objc_class *)v64.super.isa ulog:60 message:v65];
  }

  return sub_10000CC5C((uint64_t)&v85);
}

uint64_t sub_1001780D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v64 = a4;
  uint64_t v63 = a3;
  uint64_t v67 = a5;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78[3] = type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionOutput(0);
  v78[4] = (uint64_t)&off_10032FE10;
  uint64_t v11 = sub_10000D680(v78);
  sub_10017B0E4(a1, (uint64_t)v11, type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionOutput);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v12 = sub_100089A9C(8);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  aBlock = 0;
  unint64_t v73 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  v19._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v19._object = (void *)0x80000001002C1400;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 0x3D746E657665203ALL;
  v20._object = (void *)0xE800000000000000;
  String.append(_:)(v20);
  sub_10000A38C(&qword_100369DC0);
  _print_unlocked<A, B>(_:_:)();
  v21._uint64_t countAndFlagsBits = 0x65444C437072202CLL;
  v21._object = (void *)0xED00003D65636976;
  String.append(_:)(v21);
  id v66 = a2;
  id v22 = [a2 description];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v25 = v24;

  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0x67617373656D202CLL;
  v27._object = (void *)0xEC0000003D444965;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  id v29 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 ulog:40 message:v30];
  swift_bridgeObjectRelease();

  uint64_t v31 = sub_1001CBB30();
  uint64_t v32 = v12;
  uint64_t v33 = v67;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_8;
  }
  Swift::String v35 = (void *)Strong;
  id v36 = *(void **)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent__rangingProxy) + 24);
  id v37 = v36;

  if (!v36) {
    goto LABEL_8;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v38 = aBlock;
  if (!aBlock
    || (id v39 = [aBlock discoveryToken], v38, !v39))
  {

LABEL_8:
    uint64_t v43 = v32;
    uint64_t v44 = v14;
    goto LABEL_9;
  }
  sub_100019E10(0, (unint64_t *)&qword_100369040);
  uint64_t v40 = sub_10026FAD4((uint64_t)v39);
  unint64_t v42 = v41;

  uint64_t v43 = v32;
  uint64_t v44 = v14;
  if (v42 >> 60 != 15)
  {
    strcpy((char *)&v70, "rangingToken");
    BYTE13(v70) = 0;
    HIWORD(v70) = -5120;
    AnyHashable.init<A>(_:)();
    id v71 = &type metadata for Data;
    *(void *)&long long v70 = v40;
    *((void *)&v70 + 1) = v42;
    sub_100027B00(&v70, v69);
    sub_10001F8BC(v40, v42);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v68 = v31;
    sub_1002650FC(v69, (uint64_t)&aBlock, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    sub_1000BA108((uint64_t)&aBlock);
    sub_10000DBD8(v40, v42);
  }
LABEL_9:
  uint64_t v46 = *(void **)(v33 + OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLClient);
  if (v46)
  {
    aBlock = 0;
    unint64_t v73 = 0xE000000000000000;
    id v47 = v46;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    aBlock = (void **)0xD00000000000001ELL;
    unint64_t v73 = 0x80000001002C13E0;
    v48._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    uint64_t v49 = v18;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    id v50 = sub_1001F5E20();
    swift_bridgeObjectRetain();
    NSString v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v50 ulog:40 message:v51];
    swift_bridgeObjectRelease();

    NSString v52 = String._bridgeToObjectiveC()();
    v53.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v54 = [v66 effectiveIdentifier];
    if (!v54)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v54 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v55 = (void *)swift_allocObject();
    v55[2] = v43;
    v55[3] = v44;
    v55[4] = v16;
    v55[5] = v49;
    uint64_t v56 = v63;
    uint64_t v57 = v64;
    v55[6] = v63;
    v55[7] = v57;
    v55[8] = ObjectType;
    uint64_t v76 = sub_10017B000;
    uint64_t v77 = v55;
    aBlock = _NSConcreteStackBlock;
    unint64_t v73 = 1107296256;
    uint64_t v74 = sub_100119FC4;
    uint64_t v75 = &unk_10032BDE8;
    uint64_t v58 = _Block_copy(&aBlock);
    sub_1000766BC(v56);
    swift_release();
    [v47 sendEventID:v52 event:v53.super.isa destinationID:v54 options:0 completion:v58];
    _Block_release(v58);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v59 = sub_1001F5E20();
    NSString v60 = String._bridgeToObjectiveC()();
    [v59 ulog:60 message:v60];
  }
  return sub_10000CC5C((uint64_t)v78);
}

uint64_t sub_100178948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[3] = type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionStarted(0);
  v20[4] = (uint64_t)&off_10032FE80;
  uint64_t v8 = sub_10000D680(v20);
  sub_10017B0E4(a1, (uint64_t)v8, type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionStarted);
  v9._object = (void *)0x80000001002C1100;
  v9._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0x736575716572203ALL;
  v10._object = (void *)0xEA00000000003D74;
  String.append(_:)(v10);
  sub_10000A38C(&qword_100369DB8);
  _print_unlocked<A, B>(_:_:)();
  id v11 = sub_1001F6968();
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:40 message:v12];
  swift_bridgeObjectRelease();

  uint64_t v13 = (void *)sub_100125088()[4];
  NSString v14 = v13;
  swift_release();
  if (v13)
  {
    uint64_t v15 = *(void **)(*(void *)(*(void *)(a4 + 24) + 24)
                   + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnection);
    if (v15)
    {
      id v16 = v15;
      sub_10017963C((uint64_t)v8, v16, a2, a3, (unint64_t)v14);
    }
    else
    {
      uint64_t v17 = (void *)sub_10003E5A8();
      if (v17)
      {
        id v16 = v17;
        sub_100175C3C((uint64_t)v8, v17, a2, a3, (uint64_t)v14);
      }
      else
      {
        id v16 = sub_1001F6968();
        NSString v18 = String._bridgeToObjectiveC()();
        [v16 ulog:60 message:v18];

        NSString v14 = v18;
      }
    }
  }
  else
  {
    id v16 = sub_1001F6968();
    NSString v14 = String._bridgeToObjectiveC()();
    [v16 ulog:60 message:v14];
  }

  return sub_10000CC5C((uint64_t)v20);
}

uint64_t sub_100178BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[3] = type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionEnded(0);
  v20[4] = (uint64_t)&off_10032FE48;
  uint64_t v8 = sub_10000D680(v20);
  sub_10017B0E4(a1, (uint64_t)v8, type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionEnded);
  v9._object = (void *)0x80000001002C1100;
  v9._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0x736575716572203ALL;
  v10._object = (void *)0xEA00000000003D74;
  String.append(_:)(v10);
  sub_10000A38C(&qword_100369DB8);
  _print_unlocked<A, B>(_:_:)();
  id v11 = sub_1001F6968();
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:40 message:v12];
  swift_bridgeObjectRelease();

  uint64_t v13 = (void *)sub_100125088()[4];
  NSString v14 = v13;
  swift_release();
  if (v13)
  {
    uint64_t v15 = *(void **)(*(void *)(*(void *)(a4 + 24) + 24)
                   + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnection);
    if (v15)
    {
      id v16 = v15;
      sub_100178E40((uint64_t)v8, v16, a2, a3, (unint64_t)v14);
    }
    else
    {
      uint64_t v17 = (void *)sub_10003E5A8();
      if (v17)
      {
        id v16 = v17;
        sub_1001753D4((uint64_t)v8, v17, a2, a3, (uint64_t)v14);
      }
      else
      {
        id v16 = sub_1001F6968();
        NSString v18 = String._bridgeToObjectiveC()();
        [v16 ulog:60 message:v18];

        NSString v14 = v18;
      }
    }
  }
  else
  {
    id v16 = sub_1001F6968();
    NSString v14 = String._bridgeToObjectiveC()();
    [v16 ulog:60 message:v14];
  }

  return sub_10000CC5C((uint64_t)v20);
}

uint64_t sub_100178E40(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v65 = a4;
  uint64_t v68 = a3;
  unint64_t v66 = a5;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79[3] = type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionEnded(0);
  v79[4] = (uint64_t)&off_10032FE48;
  id v11 = sub_10000D680(v79);
  sub_10017B0E4(a1, (uint64_t)v11, type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionEnded);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v12 = sub_100089A9C(8);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  aBlock = 0;
  unint64_t v74 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v19._uint64_t countAndFlagsBits = 0xD000000000000024;
  v19._object = (void *)0x80000001002C11B0;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 0x736575716572203ALL;
  v20._object = (void *)0xEA00000000003D74;
  String.append(_:)(v20);
  sub_10000A38C(&qword_100369DB8);
  _print_unlocked<A, B>(_:_:)();
  v21._uint64_t countAndFlagsBits = 0x6C434C437072202CLL;
  v21._object = (void *)0xED00003D746E6569;
  String.append(_:)(v21);
  id v22 = [a2 description];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v25 = v24;

  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0x67617373656D202CLL;
  v27._object = (void *)0xEC0000003D444965;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  id v29 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 ulog:40 message:v30];
  swift_bridgeObjectRelease();

  unint64_t v31 = sub_1001CB860();
  uint64_t v63 = v18;
  uint64_t v62 = v16;
  uint64_t v32 = v65;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  id v64 = a2;
  if (!Strong) {
    goto LABEL_8;
  }
  uint64_t v34 = (void *)Strong;
  Swift::String v35 = *(void **)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent__rangingProxy) + 24);
  id v36 = v35;

  if (!v35) {
    goto LABEL_8;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  id v37 = aBlock;
  if (!aBlock
    || (id v38 = [aBlock discoveryToken], v37, !v38))
  {

LABEL_8:
    uint64_t v43 = v32;
    uint64_t v44 = v12;
    uint64_t v45 = v14;
    uint64_t v46 = v62;
    uint64_t v47 = v63;
    goto LABEL_9;
  }
  sub_100019E10(0, (unint64_t *)&qword_100369040);
  uint64_t v39 = sub_10026FAD4((uint64_t)v38);
  unint64_t v41 = v40;

  unint64_t v66 = v41;
  BOOL v42 = v41 >> 60 == 15;
  uint64_t v43 = v32;
  uint64_t v44 = v12;
  uint64_t v45 = v14;
  uint64_t v46 = v62;
  uint64_t v47 = v63;
  if (!v42)
  {
    strcpy((char *)&v71, "rangingToken");
    BYTE13(v71) = 0;
    HIWORD(v71) = -5120;
    AnyHashable.init<A>(_:)();
    uint64_t v72 = &type metadata for Data;
    unint64_t v48 = v66;
    *(void *)&long long v71 = v39;
    *((void *)&v71 + 1) = v66;
    sub_100027B00(&v71, v70);
    sub_10001F8BC(v39, v48);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v69 = v31;
    sub_1002650FC(v70, (uint64_t)&aBlock, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    sub_1000BA108((uint64_t)&aBlock);
    sub_10000DBD8(v39, v48);
  }
LABEL_9:
  aBlock = 0;
  unint64_t v74 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  aBlock = (void **)0xD000000000000020;
  unint64_t v74 = 0x80000001002C1210;
  v50._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  uint64_t v51 = v47;
  uint64_t v52 = v46;
  uint64_t v53 = v45;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  id v54 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v54 ulog:40 message:v55];
  swift_bridgeObjectRelease();

  NSString v56 = String._bridgeToObjectiveC()();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v58 = (void *)swift_allocObject();
  v58[2] = v44;
  v58[3] = v53;
  v58[4] = v52;
  v58[5] = v51;
  v58[6] = v68;
  v58[7] = v43;
  v58[8] = ObjectType;
  uint64_t v77 = sub_10017AF78;
  id v78 = v58;
  aBlock = _NSConcreteStackBlock;
  unint64_t v74 = 1107296256;
  uint64_t v75 = sub_10026F9F0;
  uint64_t v76 = &unk_10032BC30;
  id v59 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v64 sendRequestID:v56 request:isa options:0 responseHandler:v59];
  _Block_release(v59);

  return sub_10000CC5C((uint64_t)v79);
}

uint64_t sub_10017963C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v65 = a4;
  uint64_t v68 = a3;
  unint64_t v66 = a5;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79[3] = type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionStarted(0);
  v79[4] = (uint64_t)&off_10032FE80;
  id v11 = sub_10000D680(v79);
  sub_10017B0E4(a1, (uint64_t)v11, type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionStarted);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v12 = sub_100089A9C(8);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  aBlock = 0;
  unint64_t v74 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v19._uint64_t countAndFlagsBits = 0xD000000000000024;
  v19._object = (void *)0x80000001002C11B0;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 0x736575716572203ALL;
  v20._object = (void *)0xEA00000000003D74;
  String.append(_:)(v20);
  sub_10000A38C(&qword_100369DB8);
  _print_unlocked<A, B>(_:_:)();
  v21._uint64_t countAndFlagsBits = 0x6C434C437072202CLL;
  v21._object = (void *)0xED00003D746E6569;
  String.append(_:)(v21);
  id v22 = [a2 description];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v25 = v24;

  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0x67617373656D202CLL;
  v27._object = (void *)0xEC0000003D444965;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  id v29 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 ulog:40 message:v30];
  swift_bridgeObjectRelease();

  unint64_t v31 = sub_1001CB530();
  uint64_t v63 = v18;
  uint64_t v62 = v16;
  uint64_t v32 = v65;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  id v64 = a2;
  if (!Strong) {
    goto LABEL_8;
  }
  uint64_t v34 = (void *)Strong;
  Swift::String v35 = *(void **)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent__rangingProxy) + 24);
  id v36 = v35;

  if (!v35) {
    goto LABEL_8;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  id v37 = aBlock;
  if (!aBlock
    || (id v38 = [aBlock discoveryToken], v37, !v38))
  {

LABEL_8:
    uint64_t v43 = v32;
    uint64_t v44 = v12;
    uint64_t v45 = v14;
    uint64_t v46 = v62;
    uint64_t v47 = v63;
    goto LABEL_9;
  }
  sub_100019E10(0, (unint64_t *)&qword_100369040);
  uint64_t v39 = sub_10026FAD4((uint64_t)v38);
  unint64_t v41 = v40;

  unint64_t v66 = v41;
  BOOL v42 = v41 >> 60 == 15;
  uint64_t v43 = v32;
  uint64_t v44 = v12;
  uint64_t v45 = v14;
  uint64_t v46 = v62;
  uint64_t v47 = v63;
  if (!v42)
  {
    strcpy((char *)&v71, "rangingToken");
    BYTE13(v71) = 0;
    HIWORD(v71) = -5120;
    AnyHashable.init<A>(_:)();
    uint64_t v72 = &type metadata for Data;
    unint64_t v48 = v66;
    *(void *)&long long v71 = v39;
    *((void *)&v71 + 1) = v66;
    sub_100027B00(&v71, v70);
    sub_10001F8BC(v39, v48);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v69 = v31;
    sub_1002650FC(v70, (uint64_t)&aBlock, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    sub_1000BA108((uint64_t)&aBlock);
    sub_10000DBD8(v39, v48);
  }
LABEL_9:
  aBlock = 0;
  unint64_t v74 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  aBlock = (void **)0xD000000000000020;
  unint64_t v74 = 0x80000001002C1210;
  v50._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  uint64_t v51 = v47;
  uint64_t v52 = v46;
  uint64_t v53 = v45;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  id v54 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v54 ulog:40 message:v55];
  swift_bridgeObjectRelease();

  NSString v56 = String._bridgeToObjectiveC()();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v58 = (void *)swift_allocObject();
  v58[2] = v44;
  v58[3] = v53;
  v58[4] = v52;
  v58[5] = v51;
  v58[6] = v68;
  v58[7] = v43;
  v58[8] = ObjectType;
  uint64_t v77 = sub_10017AF78;
  id v78 = v58;
  aBlock = _NSConcreteStackBlock;
  unint64_t v74 = 1107296256;
  uint64_t v75 = sub_10026F9F0;
  uint64_t v76 = &unk_10032BB90;
  id v59 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v64 sendRequestID:v56 request:isa options:0 responseHandler:v59];
  _Block_release(v59);

  return sub_10000CC5C((uint64_t)v79);
}

__n128 *sub_100179E38(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t sub_100179E94(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_100179ED8()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100179F20()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10007EB64;
  *(void *)(v4 + 96) = v3;
  *(_OWORD *)(v4 + 80) = v5;
  *(void *)(v4 + 72) = v2;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_100173F18, 0, 0);
}

uint64_t sub_100179FE4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10017A02C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  unint64_t v8 = a1;
  if (a1 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9)
    {
LABEL_3:
      uint64_t v24 = v9;
      unint64_t v28 = v8 & 0xC000000000000001;
      uint64_t v10 = 4;
      uint64_t v25 = a3;
      do
      {
        uint64_t v11 = v10 - 4;
        if (v28)
        {
          uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v13 = v10 - 3;
          if (__OFADD__(v11, 1)) {
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v12 = *(void *)(v8 + 8 * v10);
          swift_retain();
          uint64_t v13 = v10 - 3;
          if (__OFADD__(v11, 1))
          {
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        uint64_t v14 = sub_100098C94();
        swift_release();
        if (a3 && (sub_10019C160(a2, a3, (uint64_t)v14) & 1) != 0)
        {
          swift_bridgeObjectRelease();
LABEL_25:
          swift_bridgeObjectRelease();
          return v12;
        }
        if (a5)
        {
          char v15 = sub_10019C160(a4, a5, (uint64_t)v14);
          swift_bridgeObjectRelease();
          if (v15) {
            goto LABEL_25;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v16 = *a6;
        if (*a6)
        {
          uint64_t v17 = a5;
          unint64_t v18 = v8;
          swift_getKeyPath();
          swift_getKeyPath();
          id v19 = v16;
          static Published.subscript.getter();
          swift_release();
          swift_release();
          Swift::String v20 = *(void **)(v30 + OBJC_IVAR____TtC17proximitycontrold8Identity_nearbyID);
          id v21 = v20;
          swift_release();
          if (v20)
          {
            unsigned __int8 v22 = [v19 isEqual:v21];

            if (v22) {
              goto LABEL_25;
            }
            swift_release();
          }
          else
          {
            swift_release();
          }
          unint64_t v8 = v18;
          a5 = v17;
          uint64_t v9 = v24;
          a3 = v25;
        }
        else
        {
          swift_release();
        }
        ++v10;
      }
      while (v13 != v9);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10017A304(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_100369D60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10017A36C(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000A38C(&qword_100369D60) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = *(void *)(v1 + v6);
  uint64_t v12 = *(void *)(v1 + v7);
  uint64_t v13 = *(void *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_10007EB64;
  return sub_1001720A8(a1, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_10017A4C0(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000A38C(&qword_100369D60) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = *(void *)(v1 + v6);
  uint64_t v12 = *(void *)(v1 + v7);
  uint64_t v13 = *(void *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100076840;
  return sub_1001720A8(a1, v8, v9, v10, v11, v12, v13);
}

void *sub_10017A610(void *result, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
  {

    return (void *)swift_release();
  }
  return result;
}

uint64_t sub_10017A654(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10017A6C0()
{
  uint64_t v1 = *(void *)(sub_10000A38C(&qword_100369D60) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for NoticeContext(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v0 + v3, 1, v6))
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = v5 + *(int *)(v6 + 24);
    type metadata accessor for NoticeTapAction(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
    }
    else if (!EnumCaseMultiPayload)
    {
      sub_10000DBEC(*(void *)v7, *(void *)(v7 + 8));
    }
    uint64_t v10 = v5 + *(int *)(v6 + 32);
    type metadata accessor for NoticeContent(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 3u:
        swift_bridgeObjectRelease();
        uint64_t v11 = v10 + *(int *)(type metadata accessor for ShareableContentExposedContext(0) + 20);
        swift_bridgeObjectRelease();
        uint64_t v12 = v11 + *(int *)(type metadata accessor for ShareableContent(0) + 20);
        uint64_t v13 = type metadata accessor for URL();
        uint64_t v14 = *(void *)(v13 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
          (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
        }
LABEL_10:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_10017A994(uint64_t a1)
{
  return a1;
}

uint64_t sub_10017A9E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10017AA2C(uint64_t a1)
{
  return sub_100172C0C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_10017AA38()
{
  uint64_t v1 = sub_10000A38C(&qword_100369DB0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10017AACC(uint64_t a1)
{
  sub_10000A38C(&qword_100369DB0);

  return sub_100172DBC(a1);
}

uint64_t sub_10017AB40()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10017AB50(uint64_t a1)
{
  return sub_10016E598(a1, *(void *)(v1 + 16), 40, 0xD000000000000026, (void *)0x80000001002C14F0);
}

_UNKNOWN **sub_10017AB88(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  int v8 = ~a4;
  _StringGuts.grow(_:)(41);
  v9._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  v9._object = (void *)0x80000001002C1450;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0x74757074756F203ALL;
  v10._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v10);
  _print_unlocked<A, B>(_:_:)();
  v11._object = (void *)0x80000001002C1480;
  v11._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v11);
  if (v8)
  {
    sub_10017AE64(a2, a3, a4);
    uint64_t v12 = String.init<A>(describing:)();
    unint64_t v14 = v13;
  }
  else
  {
    unint64_t v14 = 0xE300000000000000;
    uint64_t v12 = 7104878;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  id v16 = sub_1001F6968();
  swift_bridgeObjectRetain();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v16 ulog:40 message:v17];
  swift_bridgeObjectRelease();

  if (a1)
  {
    if (a1 == 1)
    {
      if (a4 == 0xFF) {
        return &off_10031E7D0;
      }
      if (!a4) {
        return &off_10031E760;
      }
      if (a4 != 2 || a2 != 2 || a3) {
        return &off_10031E7D0;
      }
      else {
        return &off_10031E798;
      }
    }
    else if (a4 == 2 && a2 == 4 && !a3)
    {
      return &off_10031E808;
    }
    else
    {
      return &off_10031E840;
    }
  }
  else
  {
    sub_10000A38C(&qword_100369DC8);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_10028D430;
    _StringGuts.grow(_:)(36);
    v19._uint64_t countAndFlagsBits = 0xD000000000000022;
    v19._object = (void *)0x80000001002C14A0;
    String.append(_:)(v19);
    _print_unlocked<A, B>(_:_:)();
    *(void *)(v18 + 32) = 0;
    *(void *)(v18 + 40) = 0xE000000000000000;
    *(unsigned char *)(v18 + 48) = 0;
  }
  return (_UNKNOWN **)v18;
}

uint64_t sub_10017AE50(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return sub_10017AE64(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_10017AE64(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10017AE7C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10017AE8C(int a1, int a2, uint64_t a3)
{
  return sub_10016E30C(a1, a2, a3, *(void *)(v3 + 16), 37, 0xD000000000000023, (void *)0x80000001002C1350);
}

uint64_t sub_10017AEC4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10017AED4(int a1, int a2, uint64_t a3)
{
  return sub_10016E30C(a1, a2, a3, *(void *)(v3 + 16), 39, 0xD000000000000025, (void *)0x80000001002C1300);
}

uint64_t sub_10017AF0C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10017AF78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017B190(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void))sub_10026FBB4);
}

uint64_t sub_10017AF90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10017AFA0()
{
  return swift_release();
}

uint64_t sub_10017AFB4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10017AFC4(uint64_t a1)
{
  return sub_10016E598(a1, *(void *)(v1 + 16), 44, 0xD00000000000002ALL, (void *)0x80000001002C1420);
}

uint64_t sub_10017B000(uint64_t a1)
{
  return sub_10017B06C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))sub_10026FBC0);
}

uint64_t sub_10017B024()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 48)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10017B06C(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8]);
}

uint64_t sub_10017B088()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10017B0C8(uint64_t a1)
{
  return sub_1001707A8(a1, v1[2], v1[3], v1[4]);
}

void *sub_10017B0D4()
{
  return sub_10016E868();
}

uint64_t sub_10017B0DC(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  return sub_10016E938(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10017B0E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10017B150()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10017B190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void))
{
  return a4(a1, a2, a3, v4[2], v4[3], v4[4], v4[5], v4[6], v4[7], v4[8]);
}

uint64_t sub_10017B214()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HandoffAnalyticsManager()
{
  return self;
}

uint64_t sub_10017B270(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
    uint64_t v6 = *(int *)(a3 + 32);
    uint64_t v7 = (void *)(a1 + v6);
    int v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = *(void *)(v9 - 8);
    Swift::String v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
    swift_retain();
    if (v11(v8, 1, v9))
    {
      uint64_t v12 = sub_10000A38C(&qword_10035E158);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t sub_10017B3F8(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t sub_10017B4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  if (v9(v6, 1, v7))
  {
    uint64_t v10 = sub_10000A38C(&qword_10035E158);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_10017B604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10000A38C(&qword_10035E158);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_10017B7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = sub_10000A38C(&qword_10035E158);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_10017B8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_10000A38C(&qword_10035E158);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_10017BA80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10017BA94);
}

uint64_t sub_10017BA94(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000A38C(&qword_10035E158);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10017BB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10017BB5C);
}

void *sub_10017BB5C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000A38C(&qword_10035E158);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for HandoffAnalyticsManager.ExecutionContext()
{
  uint64_t result = qword_100369F30;
  if (!qword_100369F30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10017BC54()
{
  sub_1000F3B5C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10017BD0C()
{
  return sub_10017C20C();
}

void sub_10017BD30(uint64_t a1)
{
}

uint64_t sub_10017BD54(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ExperienceEvent(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    return 0;
  }
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  sub_1001844B8(a1 + v8, (uint64_t)v6, type metadata accessor for ExperienceEvent);
  swift_bridgeObjectRetain();
  char v9 = sub_10025CD90((uint64_t)v6, v1);
  sub_100184964((uint64_t)v6, type metadata accessor for ExperienceEvent);
  if (v9)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v7 == 1) {
    goto LABEL_11;
  }
  uint64_t v10 = *(void *)(v4 + 72);
  sub_1001844B8(a1 + v8 + v10, (uint64_t)v6, type metadata accessor for ExperienceEvent);
  char v11 = sub_10025CD90((uint64_t)v6, v1);
  sub_100184964((uint64_t)v6, type metadata accessor for ExperienceEvent);
  if (v11) {
    goto LABEL_5;
  }
  if (v7 == 2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v13 = a1 + v8 + 2 * v10;
  uint64_t v14 = 2;
  while (1)
  {
    uint64_t result = sub_1001844B8(v13, (uint64_t)v6, type metadata accessor for ExperienceEvent);
    uint64_t v15 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    char v16 = sub_10025CD90((uint64_t)v6, v1);
    sub_100184964((uint64_t)v6, type metadata accessor for ExperienceEvent);
    if (v16) {
      goto LABEL_5;
    }
    ++v14;
    v13 += v10;
    if (v15 == v7) {
      goto LABEL_11;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10017BF70()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_sessionID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_weakDestroy();
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_permissionToHandoff, &qword_10036A298);

  return swift_deallocClassInstance();
}

uint64_t sub_10017C048()
{
  return type metadata accessor for Handoff3StateMachine3Model();
}

uint64_t type metadata accessor for Handoff3StateMachine3Model()
{
  uint64_t result = qword_100369FA0;
  if (!qword_100369FA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10017C09C()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_10017C1B4();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10017C1B4()
{
  if (!qword_100369FB0)
  {
    type metadata accessor for PermissionToHandoff();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100369FB0);
    }
  }
}

uint64_t sub_10017C20C()
{
  swift_retain();
  CurrentValueSubject.value.getter();
  uint64_t v0 = v2;
  if ((~v2 & 0xFEFE) != 0)
  {
    swift_release();
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    return v3;
  }
  return v0;
}

void sub_10017C280(uint64_t a1)
{
  unsigned __int16 v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v277 = *(void *)(v4 - 8);
  uint64_t v278 = v4;
  __chkstk_darwin(v4);
  v276 = (char *)&v266 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PermissionToHandoff();
  uint64_t v273 = *(void *)(v6 - 8);
  uint64_t v274 = v6;
  __chkstk_darwin(v6);
  *(void *)&long long v294 = (char *)&v266 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036A298);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v269 = (uint64_t)&v266 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v268 = (uint64_t)&v266 - v12;
  __chkstk_darwin(v11);
  uint64_t v267 = (uint64_t)&v266 - v13;
  uint64_t v284 = type metadata accessor for OSSignpostID();
  uint64_t v282 = *(void *)(v284 - 8);
  __chkstk_darwin(v284);
  v283 = (char *)&v266 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v290 = type metadata accessor for ExperienceEffect(0);
  __chkstk_darwin(v290);
  v289 = (long long *)((char *)&v266 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v298 = type metadata accessor for ExperienceEvent(0);
  uint64_t v295 = *(void *)(v298 - 8);
  uint64_t v16 = __chkstk_darwin(v298);
  uint64_t v271 = (uint64_t)&v266 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  v285 = (char *)&v266 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v275 = (uint64_t)&v266 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v270 = (uint64_t)&v266 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  *(void *)&long long v287 = (char *)&v266 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v272 = (uint64_t)&v266 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v286 = (uint64_t)&v266 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v281 = (uint64_t)&v266 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  unint64_t v288 = (unint64_t)&v266 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  *(void *)&long long v292 = (char *)&v266 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  v293 = (char *)&v266 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v280 = (unsigned __int8 *)&v266 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v279 = (uint64_t)&v266 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v291 = (uint64_t)&v266 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  v296 = (char *)&v266 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  unint64_t v48 = (char *)&v266 - v47;
  __chkstk_darwin(v46);
  Swift::String v50 = (unsigned __int8 *)&v266 - v49;
  *(void *)&v310[0] = 0x53208FB8EF86ACE2;
  *((void *)&v310[0] + 1) = 0xAD0000203A646E65;
  uint64_t v297 = a1;
  v51._uint64_t countAndFlagsBits = sub_10025B6EC();
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  sub_10000C11C();
  id v52 = objc_allocWithZone((Class)CULogHandle);
  NSString v53 = String._bridgeToObjectiveC()();
  NSString v54 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v55 = [v52 initWithSubsystem:v53 category:v54];

  swift_bridgeObjectRetain();
  NSString v56 = v2;
  NSString v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v55 ulog:40 message:v57];
  swift_bridgeObjectRelease();

  swift_retain();
  CurrentValueSubject.value.getter();
  unsigned int v58 = LOWORD(v307[0]);
  if ((~LOWORD(v307[0]) & 0xFEFE) != 0)
  {
    swift_release();
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    unsigned int v58 = LOWORD(v310[0]);
  }
  uint64_t v59 = v297;
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v60 = *(id *)(qword_1003AC750 + 80);
  char v61 = sub_1000FD938();

  if (v61 & 1) != 0 && !(v58 >> 13) && (v58)
  {
    sub_1001844B8(v59, (uint64_t)v50, type metadata accessor for ExperienceEvent);
    if (swift_getEnumCaseMultiPayload() != 3)
    {
      sub_100184964((uint64_t)v50, type metadata accessor for ExperienceEvent);
      goto LABEL_18;
    }
    int v62 = *v50;
    if (v62 == 1)
    {
      sub_10003C908();
      char v63 = sub_1001E1728();
      swift_release();
      if (v63)
      {
        char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v64 & 1) == 0) {
          goto LABEL_18;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else if (v62 != 2)
    {
      goto LABEL_18;
    }
    sub_10017F138(v59);
  }
LABEL_18:
  swift_retain();
  CurrentValueSubject.value.getter();
  unsigned int v65 = LOWORD(v307[0]);
  if ((~LOWORD(v307[0]) & 0xFEFE) != 0)
  {
    swift_release();
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    unsigned int v65 = LOWORD(v310[0]);
  }
  unint64_t v66 = v296;
  uint64_t v67 = &unk_1003AC000;
  id v68 = *(id *)(qword_1003AC750 + 112);
  char v69 = sub_1000FD938();

  if ((v69 & 1) != 0 && (v65 >> 13 < 2 || v65 >> 13 == 4 && v65 == 32769))
  {
    sub_1001844B8(v59, (uint64_t)v48, type metadata accessor for ExperienceEvent);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      if (*v48 == 3) {
        sub_10017F8B8(v59);
      }
    }
    else
    {
      sub_100184964((uint64_t)v48, type metadata accessor for ExperienceEvent);
    }
  }
  swift_retain();
  CurrentValueSubject.value.getter();
  unsigned int v70 = LOWORD(v307[0]);
  if ((~LOWORD(v307[0]) & 0xFEFE) != 0)
  {
    swift_release();
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    unsigned int v70 = LOWORD(v310[0]);
  }
  id v71 = *(id *)(qword_1003AC750 + 112);
  char v72 = sub_1000FD938();

  if ((v72 & 1) == 0 && !(v70 >> 14))
  {
    unsigned char *v66 = 3;
    swift_storeEnumTagMultiPayload();
    char v73 = sub_10025CD90(v59, (uint64_t)v66);
    sub_100184964((uint64_t)v66, type metadata accessor for ExperienceEvent);
    if ((v73 & 1) != 0
      || (*(_OWORD *)unint64_t v66 = xmmword_100291170,
          v66[16] = 4,
          swift_storeEnumTagMultiPayload(),
          char v74 = sub_10025CD90(v59, (uint64_t)v66),
          sub_100184964((uint64_t)v66, type metadata accessor for ExperienceEvent),
          (v74 & 1) != 0))
    {
      sub_100180ED0(v59);
      return;
    }
  }
  swift_retain();
  CurrentValueSubject.value.getter();
  unsigned int v75 = LOWORD(v307[0]);
  if ((~LOWORD(v307[0]) & 0xFEFE) != 0)
  {
    swift_release();
    if (v75 >> 13) {
      goto LABEL_44;
    }
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    if (LOWORD(v310[0]) >> 13) {
      goto LABEL_44;
    }
  }
  unsigned char *v66 = 2;
  swift_storeEnumTagMultiPayload();
  char v76 = sub_10025CD90(v59, (uint64_t)v66);
  sub_100184964((uint64_t)v66, type metadata accessor for ExperienceEvent);
  if (v76)
  {
    uint64_t v77 = (uint64_t)v289;
    _OWORD *v289 = xmmword_10028F480;
    *(unsigned char *)(v77 + 16) = 0;
    swift_storeEnumTagMultiPayload();
    sub_100183E80(v77, v59);
    sub_100184964(v77, type metadata accessor for ExperienceEffect);
    *(void *)uint64_t v77 = 0;
    *(void *)(v77 + 8) = 0;
    *(unsigned char *)(v77 + 16) = -125;
    swift_storeEnumTagMultiPayload();
    sub_100183E80(v77, v59);
    sub_100184964(v77, type metadata accessor for ExperienceEffect);
  }
LABEL_44:
  swift_retain();
  CurrentValueSubject.value.getter();
  int v78 = LOWORD(v307[0]);
  if ((~LOWORD(v307[0]) & 0xFEFE) != 0)
  {
    swift_release();
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    int v78 = LOWORD(v310[0]);
  }
  if ((v78 & 0xFFFFE001) == 0x2000)
  {
    sub_10000A38C(&qword_10035F248);
    uint64_t v79 = *(void *)(v295 + 72);
    unint64_t v80 = (*(unsigned __int8 *)(v295 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v295 + 80);
    uint64_t v81 = swift_allocObject();
    *(_OWORD *)(v81 + 16) = xmmword_10028FDD0;
    unint64_t v82 = v81 + v80;
    long long v266 = xmmword_10028F480;
    *(_OWORD *)unint64_t v82 = xmmword_10028F480;
    *(unsigned char *)(v82 + 16) = 4;
    swift_storeEnumTagMultiPayload();
    uint64_t v83 = v82 + v79;
    *(_OWORD *)uint64_t v83 = v266;
    *(unsigned char *)(v83 + 16) = -124;
    swift_storeEnumTagMultiPayload();
    *(unsigned char *)(v82 + 2 * v79) = 0;
    swift_storeEnumTagMultiPayload();
    LOBYTE(v79) = sub_10017BD54(v81);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    if (v79)
    {
      sub_10017F3F4(v59);
      return;
    }
  }
  swift_retain();
  CurrentValueSubject.value.getter();
  int v84 = LOWORD(v307[0]);
  if ((~LOWORD(v307[0]) & 0xFEFE) != 0)
  {
    swift_release();
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    int v84 = LOWORD(v310[0]);
  }
  uint64_t v85 = (uint64_t)v293;
  uint64_t v86 = v294;
  if (v84 == 0x8000)
  {
    uint64_t v87 = v291;
    sub_1001844B8(v59, v291, type metadata accessor for ExperienceEvent);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 8)
    {
      sub_1001844B8(v87, v85, type metadata accessor for ExperienceEvent);
      type metadata accessor for TransferEvent();
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        sub_100184964(v85, (uint64_t (*)(void))type metadata accessor for TransferEvent);
        goto LABEL_83;
      }
      sub_1001845F0(v85, v86);
      uint64_t v95 = *((void *)v56 + 2);
      uint64_t v96 = v268;
      sub_1001844B8(v86, v268, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v273 + 56))(v96, 0, 1, v274);
      uint64_t v97 = v269;
      sub_1001849C4(v96, v269);
      uint64_t v98 = v95 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_permissionToHandoff;
      swift_beginAccess();
      sub_10018469C(v97, v98);
      swift_endAccess();
      if (*(unsigned char *)(v95 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_dwellExpired) != 1)
      {
        sub_100184964(v86, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
        goto LABEL_82;
      }
      sub_100180ED0(v59);
      sub_100184964(v86, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
    }
    else
    {
      if (EnumCaseMultiPayload != 3)
      {
        if (!EnumCaseMultiPayload)
        {
          uint64_t v89 = v279;
          sub_1001844B8(v87, v279, type metadata accessor for ExperienceEvent);
          uint64_t v90 = *(void *)v89;
          uint64_t v91 = *(void *)(v89 + 8);
          int v92 = *(char *)(v89 + 16);
          if (v92 < 0 && (v92 & 0x7F) == 4 && v90 == 2 && !v91)
          {
            uint64_t v93 = v283;
            static OSSignpostID.exclusive.getter();
            static os_signpost_type_t.end.getter();
            if (qword_10035A528 != -1) {
              swift_once();
            }
            id v94 = (id)qword_1003AC758;
            os_signpost(_:dso:log:name:signpostID:_:_:)();

            (*(void (**)(char *, uint64_t))(v282 + 8))(v93, v284);
            goto LABEL_82;
          }
          sub_100020428(v90, v91, v92);
        }
LABEL_83:
        sub_100184964(v87, type metadata accessor for ExperienceEvent);
        goto LABEL_84;
      }
      uint64_t v99 = v280;
      sub_1001844B8(v87, (uint64_t)v280, type metadata accessor for ExperienceEvent);
      int v100 = *v99;
      if (v100 == 8)
      {
        if (*(unsigned char *)(*((void *)v56 + 2)
                      + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_dwellExpired) == 1)
        {
          uint64_t v110 = v283;
          static OSSignpostID.exclusive.getter();
          static os_signpost_type_t.end.getter();
          if (qword_10035A528 != -1) {
            swift_once();
          }
          id v111 = (id)qword_1003AC758;
          os_signpost(_:dso:log:name:signpostID:_:_:)();

          (*(void (**)(char *, uint64_t))(v282 + 8))(v110, v284);
        }
        uint64_t v112 = v59;
      }
      else
      {
        if (v100 != 7) {
          goto LABEL_83;
        }
        uint64_t v101 = v283;
        static OSSignpostID.exclusive.getter();
        static os_signpost_type_t.begin.getter();
        if (qword_10035A528 != -1) {
          swift_once();
        }
        id v102 = (id)qword_1003AC758;
        os_signpost(_:dso:log:name:signpostID:_:_:)();

        uint64_t v103 = *(void (**)(char *, uint64_t))(v282 + 8);
        v103(v101, v284);
        uint64_t v104 = v56;
        uint64_t v105 = *((void *)v56 + 2);
        uint64_t v106 = v105 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_permissionToHandoff;
        swift_beginAccess();
        uint64_t v107 = v267;
        sub_10000D728(v106, v267, &qword_10036A298);
        LODWORD(v106) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v273 + 48))(v107, 1, v274);
        sub_10000D78C(v107, &qword_10036A298);
        if (v106 == 1
          && (*(unsigned char *)(v105
                       + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_requirePermissionToHandoff) & 1) != 0)
        {
          *(unsigned char *)(v105 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_dwellExpired) = 1;
          uint64_t v108 = v283;
          static OSSignpostID.exclusive.getter();
          static os_signpost_type_t.begin.getter();
          id v109 = (id)qword_1003AC758;
          os_signpost(_:dso:log:name:signpostID:_:_:)();

          v103(v108, v284);
          NSString v56 = v104;
          uint64_t v59 = v297;
LABEL_82:
          uint64_t v87 = v291;
          goto LABEL_83;
        }
        uint64_t v112 = v297;
      }
      sub_100180ED0(v112);
    }
    sub_100184964(v291, type metadata accessor for ExperienceEvent);
    return;
  }
LABEL_84:
  uint64_t v113 = (unsigned __int8 *)v292;
  sub_1001844B8(v59, v292, type metadata accessor for ExperienceEvent);
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_100184964((uint64_t)v113, type metadata accessor for ExperienceEvent);
    goto LABEL_97;
  }
  int v114 = *v113;
  if ((v114 - 5) < 5) {
    goto LABEL_97;
  }
  if (v114 == 4) {
    unsigned int v115 = 0;
  }
  else {
    unsigned int v115 = *v113;
  }
  swift_retain();
  CurrentValueSubject.value.getter();
  unsigned int v116 = LOWORD(v307[0]);
  if ((~LOWORD(v307[0]) & 0xFEFE) != 0)
  {
    swift_release();
    unsigned int v117 = v116 >> 13;
    if (v116 >> 13)
    {
LABEL_91:
      if (v117 == 1)
      {
        if (v115 <= 1 && (v116 & 0x100) == 0) {
          goto LABEL_168;
        }
      }
      else if (v117 == 4 && v115 <= 2 && v116 == 0x8000)
      {
        goto LABEL_168;
      }
      goto LABEL_97;
    }
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    unsigned int v116 = LOWORD(v310[0]);
    unsigned int v117 = LOWORD(v310[0]) >> 13;
    if (v117) {
      goto LABEL_91;
    }
  }
  sub_10003C908();
  char v165 = sub_1001E1728();
  swift_release();
  if (v165)
  {
    if (v115 < 2) {
      goto LABEL_168;
    }
  }
  else if (!v115)
  {
    goto LABEL_168;
  }
LABEL_97:
  swift_retain();
  CurrentValueSubject.value.getter();
  unsigned int v118 = LOWORD(v307[0]);
  if ((~LOWORD(v307[0]) & 0xFEFE) != 0)
  {
    swift_release();
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    unsigned int v118 = LOWORD(v310[0]);
  }
  if (v118 >> 13 == 1)
  {
    if ((v118 & 0x100) != 0)
    {
      sub_10000A38C(&qword_10035F248);
      uint64_t v139 = *(void *)(v295 + 72);
      unint64_t v140 = (*(unsigned __int8 *)(v295 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v295 + 80);
      uint64_t v141 = swift_allocObject();
      *(_OWORD *)(v141 + 16) = xmmword_10029E7C0;
      uint64_t v142 = (_OWORD *)(v141 + v140);
      long long v294 = xmmword_100291140;
      *(_OWORD *)((char *)v142 + 41) = 0u;
      v142[1] = 0u;
      v142[2] = 0u;
      *uint64_t v142 = xmmword_100291140;
      swift_storeEnumTagMultiPayload();
      uint64_t v143 = v141 + v140 + v139;
      sub_10001A050();
      uint64_t v144 = swift_allocError();
      *(void *)uint64_t v145 = 0;
      *(void *)(v145 + 8) = 0xE000000000000000;
      v293 = v56;
      *(unsigned char *)(v145 + 16) = 11;
      sub_100146144(v144, v301);
      uint64_t v146 = v302;
      long long v147 = v301[1];
      *(_OWORD *)uint64_t v143 = v301[0];
      *(_OWORD *)(v143 + 16) = v147;
      *(void *)(v143 + 32) = v146;
      *(_OWORD *)(v143 + 40) = v303;
      *(unsigned char *)(v143 + 56) = 32;
      swift_storeEnumTagMultiPayload();
      uint64_t v148 = v141 + v140 + 2 * v139;
      *(_OWORD *)uint64_t v148 = v294;
      *(unsigned char *)(v148 + 16) = 1;
      swift_storeEnumTagMultiPayload();
      uint64_t v149 = v141 + v140 + 3 * v139;
      *(_OWORD *)uint64_t v149 = v294;
      *(unsigned char *)(v149 + 16) = 2;
      swift_storeEnumTagMultiPayload();
      uint64_t v150 = v141 + v140 + 4 * v139;
      *(_OWORD *)uint64_t v150 = v294;
      *(unsigned char *)(v150 + 16) = 3;
      swift_storeEnumTagMultiPayload();
      uint64_t v151 = v141 + v140 + 5 * v139;
      uint64_t v152 = swift_allocError();
      *(void *)uint64_t v153 = 0;
      *(void *)(v153 + 8) = 0xE000000000000000;
      *(unsigned char *)(v153 + 16) = 11;
      *(void *)uint64_t v151 = v152;
      *(void *)(v151 + 8) = 0;
      *(unsigned char *)(v151 + 16) = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v154 = v141 + v140 + 6 * v139;
      *(_OWORD *)uint64_t v154 = v294;
      *(unsigned char *)(v154 + 16) = -127;
      swift_storeEnumTagMultiPayload();
      uint64_t v155 = v141 + v140 + 7 * v139;
      *(_OWORD *)uint64_t v155 = v294;
      *(unsigned char *)(v155 + 16) = -126;
      swift_storeEnumTagMultiPayload();
      uint64_t v156 = v141 + v140 + 8 * v139;
      *(_OWORD *)uint64_t v156 = v294;
      *(unsigned char *)(v156 + 16) = -125;
      swift_storeEnumTagMultiPayload();
      uint64_t v157 = v141 + v140 + 9 * v139;
      uint64_t v158 = swift_allocError();
      *(void *)uint64_t v159 = 0;
      *(void *)(v159 + 8) = 0xE000000000000000;
      *(unsigned char *)(v159 + 16) = 11;
      *(void *)uint64_t v157 = v158;
      *(void *)(v157 + 8) = 0;
      *(unsigned char *)(v157 + 16) = 0x80;
      swift_storeEnumTagMultiPayload();
      *(void *)((char *)v142 + 10 * v139) = 3;
      swift_storeEnumTagMultiPayload();
      NSString v56 = v293;
      uint64_t v59 = v297;
      *(void *)((char *)v142 + 11 * v139) = 0;
      swift_storeEnumTagMultiPayload();
      LOBYTE(v140) = sub_10017BD54(v141);
      swift_setDeallocating();
      uint64_t v67 = (void *)&unk_1003AC000;
      swift_arrayDestroy();
      swift_deallocClassInstance();
      if (v140) {
        goto LABEL_168;
      }
      goto LABEL_129;
    }
  }
  else if (v118 >> 13 != 4 || v118 != 0x8000)
  {
    goto LABEL_129;
  }
  v293 = v56;
  sub_10000A38C(&qword_10035F248);
  uint64_t v119 = *(void *)(v295 + 72);
  unint64_t v120 = (*(unsigned __int8 *)(v295 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v295 + 80);
  uint64_t v121 = swift_allocObject();
  *(_OWORD *)(v121 + 16) = xmmword_10029E7D0;
  unint64_t v122 = v121 + v120;
  long long v294 = xmmword_100291140;
  *(_OWORD *)unint64_t v122 = xmmword_100291140;
  *(unsigned char *)(v122 + 16) = 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v123 = v121 + v120 + v119;
  *(_OWORD *)uint64_t v123 = v294;
  *(unsigned char *)(v123 + 16) = 2;
  swift_storeEnumTagMultiPayload();
  uint64_t v124 = v121 + v120 + 2 * v119;
  *(_OWORD *)uint64_t v124 = v294;
  *(unsigned char *)(v124 + 16) = 3;
  swift_storeEnumTagMultiPayload();
  uint64_t v125 = v121 + v120 + 3 * v119;
  sub_10001A050();
  uint64_t v126 = swift_allocError();
  *(void *)uint64_t v127 = 0;
  *(void *)(v127 + 8) = 0xE000000000000000;
  *(unsigned char *)(v127 + 16) = 11;
  *(void *)uint64_t v125 = v126;
  *(void *)(v125 + 8) = 0;
  *(unsigned char *)(v125 + 16) = 0;
  swift_storeEnumTagMultiPayload();
  uint64_t v128 = v121 + v120 + 4 * v119;
  long long v292 = xmmword_100291120;
  *(_OWORD *)uint64_t v128 = xmmword_100291120;
  *(unsigned char *)(v128 + 16) = 4;
  swift_storeEnumTagMultiPayload();
  uint64_t v129 = v121 + v120 + 5 * v119;
  *(_OWORD *)uint64_t v129 = v294;
  *(unsigned char *)(v129 + 16) = -127;
  swift_storeEnumTagMultiPayload();
  uint64_t v130 = v121 + v120 + 6 * v119;
  *(_OWORD *)uint64_t v130 = v294;
  *(unsigned char *)(v130 + 16) = -126;
  swift_storeEnumTagMultiPayload();
  uint64_t v131 = v121 + v120 + 7 * v119;
  *(_OWORD *)uint64_t v131 = v294;
  *(unsigned char *)(v131 + 16) = -125;
  swift_storeEnumTagMultiPayload();
  uint64_t v132 = v121 + v120 + 8 * v119;
  uint64_t v133 = swift_allocError();
  *(void *)uint64_t v134 = 0;
  *(void *)(v134 + 8) = 0xE000000000000000;
  *(unsigned char *)(v134 + 16) = 11;
  *(void *)uint64_t v132 = v133;
  *(void *)(v132 + 8) = 0;
  *(unsigned char *)(v132 + 16) = 0x80;
  swift_storeEnumTagMultiPayload();
  uint64_t v135 = v121 + v120 + 9 * v119;
  *(_OWORD *)uint64_t v135 = v292;
  *(unsigned char *)(v135 + 16) = -124;
  swift_storeEnumTagMultiPayload();
  LOBYTE(v120) = sub_10017BD54(v121);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v136 = v288;
  sub_1001844B8(v59, v288, type metadata accessor for ExperienceEvent);
  if (v120)
  {
    sub_100184964(v136, type metadata accessor for ExperienceEvent);
    uint64_t v137 = v286;
    sub_1001844B8(v59, v286, type metadata accessor for ExperienceEvent);
    uint64_t v138 = v287;
LABEL_111:
    sub_100184964(v137, type metadata accessor for ExperienceEvent);
    sub_1001844B8(v59, v138, type metadata accessor for ExperienceEvent);
LABEL_112:
    sub_100184964(v138, type metadata accessor for ExperienceEvent);
    goto LABEL_168;
  }
  uint64_t v67 = &unk_1003AC000;
  id v160 = *(id *)(qword_1003AC750 + 1064);
  char v161 = sub_1000FD938();

  uint64_t v162 = v281;
  sub_1001844B8(v136, v281, type metadata accessor for ExperienceEvent);
  uint64_t v138 = v287;
  if (v161)
  {
    v163 = v296;
    unsigned char *v296 = 33;
    swift_storeEnumTagMultiPayload();
    char v164 = sub_10025CD90(v162, (uint64_t)v163);
    sub_100184964((uint64_t)v163, type metadata accessor for ExperienceEvent);
    sub_100184964(v162, type metadata accessor for ExperienceEvent);
    sub_100184964(v136, type metadata accessor for ExperienceEvent);
    uint64_t v59 = v297;
    uint64_t v137 = v286;
    sub_1001844B8(v297, v286, type metadata accessor for ExperienceEvent);
    NSString v56 = v293;
    if (v164) {
      goto LABEL_111;
    }
  }
  else
  {
    sub_100184964(v162, type metadata accessor for ExperienceEvent);
    sub_100184964(v136, type metadata accessor for ExperienceEvent);
    uint64_t v137 = v286;
    sub_1001844B8(v297, v286, type metadata accessor for ExperienceEvent);
    NSString v56 = v293;
    v163 = v296;
  }
  id v166 = *(id *)(qword_1003AC750 + 1048);
  uint64_t v167 = v137;
  char v168 = sub_1000FD938();

  uint64_t v169 = v272;
  sub_1001844B8(v167, v272, type metadata accessor for ExperienceEvent);
  if (v168)
  {
    unsigned char *v163 = 1;
    swift_storeEnumTagMultiPayload();
    char v170 = sub_10025CD90(v169, (uint64_t)v163);
    sub_100184964((uint64_t)v163, type metadata accessor for ExperienceEvent);
    sub_100184964(v169, type metadata accessor for ExperienceEvent);
    sub_100184964(v167, type metadata accessor for ExperienceEvent);
    uint64_t v59 = v297;
    sub_1001844B8(v297, v138, type metadata accessor for ExperienceEvent);
    if (v170) {
      goto LABEL_112;
    }
  }
  else
  {
    sub_100184964(v169, type metadata accessor for ExperienceEvent);
    sub_100184964(v167, type metadata accessor for ExperienceEvent);
    uint64_t v59 = v297;
    sub_1001844B8(v297, v138, type metadata accessor for ExperienceEvent);
  }
  id v171 = *(id *)(qword_1003AC750 + 1056);
  char v172 = sub_1000FD938();

  uint64_t v173 = v270;
  sub_1001844B8(v138, v270, type metadata accessor for ExperienceEvent);
  if (v172)
  {
    unsigned char *v163 = 0;
    swift_storeEnumTagMultiPayload();
    char v174 = sub_10025CD90(v173, (uint64_t)v163);
    sub_100184964((uint64_t)v163, type metadata accessor for ExperienceEvent);
    sub_100184964(v173, type metadata accessor for ExperienceEvent);
    sub_100184964(v138, type metadata accessor for ExperienceEvent);
    if (v174) {
      goto LABEL_168;
    }
  }
  else
  {
    sub_100184964(v173, type metadata accessor for ExperienceEvent);
    sub_100184964(v138, type metadata accessor for ExperienceEvent);
  }
LABEL_129:
  swift_retain();
  CurrentValueSubject.value.getter();
  int v175 = LOWORD(v307[0]);
  if ((~LOWORD(v307[0]) & 0xFEFE) != 0)
  {
    swift_release();
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    int v175 = LOWORD(v310[0]);
  }
  if ((v175 & 0xFFFFC001) == 0x4000)
  {
    sub_10000A38C(&qword_10035F248);
    uint64_t v176 = *(void *)(v295 + 72);
    unint64_t v177 = (*(unsigned __int8 *)(v295 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v295 + 80);
    uint64_t v178 = swift_allocObject();
    *(_OWORD *)(v178 + 16) = xmmword_10028FC10;
    v179 = (unsigned char *)(v178 + v177);
    unsigned char *v179 = 0;
    swift_storeEnumTagMultiPayload();
    v179[v176] = 1;
    swift_storeEnumTagMultiPayload();
    LOBYTE(v176) = sub_10017BD54(v178);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    if (v176)
    {
      sub_1001832E4(v59);
      return;
    }
  }
  swift_retain();
  CurrentValueSubject.value.getter();
  unsigned int v180 = LOWORD(v307[0]);
  if ((~LOWORD(v307[0]) & 0xFEFE) != 0)
  {
    swift_release();
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    unsigned int v180 = LOWORD(v310[0]);
  }
  if ((v180 >> 13) - 2 < 2 || v180 >> 13 == 4 && v180 == 32769)
  {
    uint64_t v181 = sub_10000A38C(&qword_10035F248);
    uint64_t v182 = *(void *)(v295 + 72);
    uint64_t v183 = *(unsigned __int8 *)(v295 + 80);
    uint64_t v184 = (v183 + 32) & ~v183;
    *(void *)&long long v294 = 2 * v182;
    uint64_t v291 = v183 | 7;
    *(void *)&long long v292 = v181;
    uint64_t v185 = swift_allocObject();
    *(_OWORD *)(v185 + 16) = xmmword_10028FC10;
    v293 = v56;
    uint64_t v186 = v185 + v184;
    *(void *)uint64_t v186 = 1;
    *(_OWORD *)(v186 + 40) = 0u;
    *(_OWORD *)(v186 + 24) = 0u;
    *(_OWORD *)(v186 + 8) = 0u;
    *(unsigned char *)(v186 + 56) = 0x80;
    swift_storeEnumTagMultiPayload();
    uint64_t v187 = v185 + v184 + v182;
    unint64_t v288 = sub_10001A050();
    uint64_t v188 = swift_allocError();
    *(void *)uint64_t v189 = 0;
    *(void *)(v189 + 8) = 0xE000000000000000;
    *(unsigned char *)(v189 + 16) = 11;
    sub_100146144(v188, v304);
    uint64_t v190 = v305;
    long long v191 = v304[1];
    *(_OWORD *)uint64_t v187 = v304[0];
    *(_OWORD *)(v187 + 16) = v191;
    *(void *)(v187 + 32) = v190;
    *(_OWORD *)(v187 + 40) = v306;
    *(unsigned char *)(v187 + 56) = 32;
    swift_storeEnumTagMultiPayload();
    LOBYTE(v187) = sub_10017BD54(v185);
    swift_setDeallocating();
    v192 = v293;
    swift_arrayDestroy();
    swift_deallocClassInstance();
    if (v187)
    {
      uint64_t v193 = v182;
      v194 = v276;
      uint64_t v195 = v277;
      uint64_t v196 = v278;
      (*(void (**)(char *, uint64_t, uint64_t))(v277 + 16))(v276, *((void *)v192 + 2) + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_sessionID, v278);
      sub_100116F18();
      v197 = v283;
      OSSignpostID.init(_:)();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v194, v196);
      static os_signpost_type_t.begin.getter();
      if (qword_10035A528 != -1) {
        swift_once();
      }
      id v198 = (id)qword_1003AC758;
      os_signpost(_:dso:log:name:signpostID:_:_:)();

      (*(void (**)(char *, uint64_t))(v282 + 8))(v197, v284);
      uint64_t v182 = v193;
    }
    swift_retain();
    CurrentValueSubject.value.getter();
    __int16 v199 = v307[0];
    if ((~LOWORD(v307[0]) & 0xFEFE) != 0)
    {
      swift_release();
    }
    else
    {
      CurrentValueSubject.value.getter();
      swift_release();
      __int16 v199 = v310[0];
    }
    if ((v199 & 0xE000) == 0x4000)
    {
      uint64_t v200 = swift_allocObject();
      *(_OWORD *)(v200 + 16) = xmmword_10028FDD0;
      uint64_t v201 = v200 + v184;
      *(_OWORD *)uint64_t v201 = 0u;
      *(_OWORD *)(v201 + 16) = 0u;
      *(_OWORD *)(v201 + 32) = 0u;
      *(void *)(v201 + 48) = 0;
      *(unsigned char *)(v201 + 56) = 0x80;
      swift_storeEnumTagMultiPayload();
      uint64_t v202 = v200 + v184 + v182;
      *(void *)uint64_t v202 = 3;
      *(_OWORD *)(v202 + 8) = 0u;
      *(_OWORD *)(v202 + 24) = 0u;
      *(_OWORD *)(v202 + 40) = 0u;
      *(unsigned char *)(v202 + 56) = 66;
      swift_storeEnumTagMultiPayload();
      *(unsigned char *)(v201 + v294) = 2;
      swift_storeEnumTagMultiPayload();
      char v203 = sub_10017BD54(v200);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      if (v203)
      {
        uint64_t v286 = 4 * v182;
        uint64_t v204 = v182;
        uint64_t v205 = (uint64_t)v289;
        _OWORD *v289 = xmmword_10028F480;
        *(unsigned char *)(v205 + 16) = 0;
        swift_storeEnumTagMultiPayload();
        uint64_t v206 = v297;
        sub_100183E80(v205, v297);
        sub_100184964(v205, type metadata accessor for ExperienceEffect);
        *(void *)uint64_t v205 = 0;
        *(void *)(v205 + 8) = 0;
        *(unsigned char *)(v205 + 16) = -125;
        uint64_t v59 = v206;
        swift_storeEnumTagMultiPayload();
        sub_100183E80(v205, v206);
        uint64_t v207 = v205;
        uint64_t v182 = v204;
        sub_100184964(v207, type metadata accessor for ExperienceEffect);
LABEL_163:
        uint64_t v221 = v182;
        uint64_t v222 = (uint64_t)v296;
        *(void *)v296 = 1;
        *(_OWORD *)(v222 + 8) = 0u;
        *(_OWORD *)(v222 + 24) = 0u;
        *(_OWORD *)(v222 + 40) = 0u;
        *(unsigned char *)(v222 + 56) = 66;
        swift_storeEnumTagMultiPayload();
        char v223 = sub_10025CD90(v59, v222);
        sub_100184964(v222, type metadata accessor for ExperienceEvent);
        if (v223)
        {
          uint64_t v224 = (uint64_t)v289;
          swift_storeEnumTagMultiPayload();
          sub_100183E80(v224, v59);
          sub_100184964(v224, type metadata accessor for ExperienceEffect);
        }
        *(void *)&long long v287 = 3 * v182;
        uint64_t v225 = swift_allocObject();
        *(_OWORD *)(v225 + 16) = xmmword_10028FDD0;
        uint64_t v226 = v225 + v184;
        *(void *)uint64_t v226 = 5;
        *(_OWORD *)(v226 + 40) = 0u;
        *(_OWORD *)(v226 + 24) = 0u;
        *(_OWORD *)(v226 + 8) = 0u;
        *(unsigned char *)(v226 + 56) = 66;
        swift_storeEnumTagMultiPayload();
        uint64_t v227 = v225 + v184 + v182;
        *(void *)uint64_t v227 = 2;
        *(_OWORD *)(v227 + 8) = 0u;
        *(_OWORD *)(v227 + 24) = 0u;
        *(_OWORD *)(v227 + 40) = 0u;
        *(unsigned char *)(v227 + 56) = 2;
        swift_storeEnumTagMultiPayload();
        *(unsigned char *)(v226 + v294) = 1;
        swift_storeEnumTagMultiPayload();
        char v228 = sub_10017BD54(v225);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        if (v228)
        {
          uint64_t v229 = (uint64_t)v289;
          *(void *)v289 = 0;
          *(void *)(v229 + 8) = 0;
          *(void *)(v229 + 16) = 0;
          *(unsigned char *)(v229 + 24) = 4;
          swift_storeEnumTagMultiPayload();
          sub_100183E80(v229, v297);
          sub_100184964(v229, type metadata accessor for ExperienceEffect);
        }
        uint64_t v284 = 8 * v182;
        uint64_t v230 = swift_allocObject();
        *(_OWORD *)(v230 + 16) = xmmword_100291130;
        uint64_t v231 = v230 + v184;
        uint64_t v232 = swift_allocError();
        *(void *)uint64_t v233 = 0;
        *(void *)(v233 + 8) = 0xE000000000000000;
        *(unsigned char *)(v233 + 16) = 11;
        sub_100146144(v232, v307);
        uint64_t v234 = v308;
        long long v235 = v307[1];
        *(_OWORD *)uint64_t v231 = v307[0];
        *(_OWORD *)(v231 + 16) = v235;
        *(void *)(v231 + 32) = v234;
        *(_OWORD *)(v231 + 40) = v309;
        *(unsigned char *)(v231 + 56) = 64;
        swift_storeEnumTagMultiPayload();
        v236 = (_OWORD *)(v230 + v184 + v221);
        long long v292 = xmmword_100291140;
        _OWORD *v236 = xmmword_100291140;
        v236[1] = 0u;
        v236[2] = 0u;
        *(_OWORD *)((char *)v236 + 41) = 0u;
        swift_storeEnumTagMultiPayload();
        uint64_t v237 = v230 + v184 + v294;
        uint64_t v238 = swift_allocError();
        *(void *)uint64_t v239 = 0;
        *(void *)(v239 + 8) = 0xE000000000000000;
        *(unsigned char *)(v239 + 16) = 11;
        sub_100146144(v238, v310);
        uint64_t v240 = v311;
        long long v241 = v310[1];
        *(_OWORD *)uint64_t v237 = v310[0];
        *(_OWORD *)(v237 + 16) = v241;
        *(void *)(v237 + 32) = v240;
        *(_OWORD *)(v237 + 40) = v312;
        *(unsigned char *)(v237 + 56) = 32;
        swift_storeEnumTagMultiPayload();
        uint64_t v242 = v230 + v184 + v287;
        *(void *)uint64_t v242 = 3;
        *(_OWORD *)(v242 + 8) = 0u;
        *(_OWORD *)(v242 + 24) = 0u;
        *(_OWORD *)(v242 + 40) = 0u;
        *(unsigned char *)(v242 + 56) = 2;
        swift_storeEnumTagMultiPayload();
        uint64_t v243 = v286;
        v244 = (long long *)(v230 + v184 + v286);
        long long *v244 = v292;
        v244[1] = 0u;
        v244[2] = 0u;
        *(long long *)((char *)v244 + 41) = 0u;
        swift_storeEnumTagMultiPayload();
        *(void *)(v231 + v243 + v221) = 2;
        type metadata accessor for TransferEvent();
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        *(void *)(v231 + 6 * v221) = 3;
        swift_storeEnumTagMultiPayload();
        *(void *)(v231 + v284 - v221) = 0;
        swift_storeEnumTagMultiPayload();
        uint64_t v245 = v297;
        LOBYTE(v237) = sub_10017BD54(v230);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        uint64_t v59 = v245;
        uint64_t v67 = (void *)&unk_1003AC000;
        if ((v237 & 1) == 0) {
          goto LABEL_172;
        }
        goto LABEL_168;
      }
    }
    swift_retain();
    CurrentValueSubject.value.getter();
    __int16 v208 = v307[0];
    if ((~LOWORD(v307[0]) & 0xFEFE) != 0)
    {
      swift_release();
    }
    else
    {
      CurrentValueSubject.value.getter();
      swift_release();
      __int16 v208 = v310[0];
    }
    if ((v208 & 0xE000) == 0x6000)
    {
      uint64_t v209 = swift_allocObject();
      *(_OWORD *)(v209 + 16) = xmmword_100291160;
      uint64_t v210 = v209 + v184;
      long long v287 = xmmword_100291140;
      *(_OWORD *)uint64_t v210 = xmmword_100291140;
      *(unsigned char *)(v210 + 16) = 2;
      swift_storeEnumTagMultiPayload();
      uint64_t v211 = v209 + v184 + v182;
      *(_OWORD *)uint64_t v211 = v287;
      *(unsigned char *)(v211 + 16) = 3;
      swift_storeEnumTagMultiPayload();
      uint64_t v212 = v209 + v184 + v294;
      *(_OWORD *)uint64_t v212 = v287;
      *(unsigned char *)(v212 + 16) = -126;
      swift_storeEnumTagMultiPayload();
      uint64_t v213 = v209 + v184 + 3 * v182;
      *(_OWORD *)uint64_t v213 = v287;
      *(unsigned char *)(v213 + 16) = -125;
      swift_storeEnumTagMultiPayload();
      *(unsigned char *)(v210 + 4 * v182) = 2;
      swift_storeEnumTagMultiPayload();
      char v214 = sub_10017BD54(v209);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      if (v214)
      {
        uint64_t v215 = v297;
LABEL_169:
        char v246 = 0;
LABEL_170:
        sub_100183A14(v215, v246);
        return;
      }
    }
    swift_retain();
    CurrentValueSubject.value.getter();
    int v216 = LOWORD(v307[0]);
    uint64_t v286 = 4 * v182;
    if ((~LOWORD(v307[0]) & 0xFEFE) != 0)
    {
      swift_release();
    }
    else
    {
      CurrentValueSubject.value.getter();
      swift_release();
      int v216 = LOWORD(v310[0]);
    }
    uint64_t v59 = v297;
    if (v216 != 32769) {
      goto LABEL_163;
    }
    uint64_t v217 = swift_allocObject();
    *(_OWORD *)(v217 + 16) = xmmword_10028FDD0;
    uint64_t v218 = v217 + v184;
    long long v287 = xmmword_100291140;
    *(_OWORD *)uint64_t v218 = xmmword_100291140;
    *(unsigned char *)(v218 + 16) = -126;
    swift_storeEnumTagMultiPayload();
    uint64_t v219 = v217 + v184 + v182;
    *(_OWORD *)uint64_t v219 = v287;
    *(unsigned char *)(v219 + 16) = -125;
    swift_storeEnumTagMultiPayload();
    *(unsigned char *)(v218 + v294) = 9;
    swift_storeEnumTagMultiPayload();
    char v220 = sub_10017BD54(v217);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    if ((v220 & 1) == 0) {
      goto LABEL_163;
    }
LABEL_168:
    uint64_t v215 = v59;
    goto LABEL_169;
  }
LABEL_172:
  swift_retain();
  CurrentValueSubject.value.getter();
  unsigned __int16 v247 = v299;
  if ((~v299 & 0xFEFE) != 0)
  {
    swift_release();
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    unsigned __int16 v247 = v300;
  }
  uint64_t v248 = (uint64_t)v296;
  uint64_t v249 = (uint64_t)v285;
  if ((v247 & 0xE101) == 0x4101)
  {
    id v250 = *(id *)(v67[234] + 416);
    char v251 = sub_1000FD938();

    uint64_t v252 = v275;
    sub_1001844B8(v59, v275, type metadata accessor for ExperienceEvent);
    if (v251)
    {
      *(void *)(v248 + 48) = 0;
      *(_OWORD *)(v248 + 16) = 0u;
      *(_OWORD *)(v248 + 32) = 0u;
      *(_OWORD *)uint64_t v248 = 0u;
      *(unsigned char *)(v248 + 56) = 96;
      swift_storeEnumTagMultiPayload();
      char v253 = sub_10025CD90(v252, v248);
      sub_100184964(v248, type metadata accessor for ExperienceEvent);
      sub_100184964(v252, type metadata accessor for ExperienceEvent);
      sub_1001844B8(v59, v249, type metadata accessor for ExperienceEvent);
      if (v253)
      {
        sub_100184964(v249, type metadata accessor for ExperienceEvent);
        goto LABEL_185;
      }
    }
    else
    {
      sub_100184964(v252, type metadata accessor for ExperienceEvent);
      sub_1001844B8(v59, v249, type metadata accessor for ExperienceEvent);
    }
    id v254 = *(id *)(v67[234] + 504);
    char v255 = sub_1000FFE1C();

    if (v255)
    {
      swift_bridgeObjectRelease();
      uint64_t v257 = v271;
      sub_1001844B8(v249, v271, type metadata accessor for ExperienceEvent);
    }
    else
    {
      char v256 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v257 = v271;
      sub_1001844B8(v249, v271, type metadata accessor for ExperienceEvent);
      if ((v256 & 1) == 0)
      {
        sub_100184964(v257, type metadata accessor for ExperienceEvent);
        uint64_t v258 = v249;
        v259 = type metadata accessor for ExperienceEvent;
LABEL_186:
        sub_100184964(v258, v259);
        goto LABEL_187;
      }
    }
    *(void *)uint64_t v248 = 1;
    *(_OWORD *)(v248 + 8) = 0u;
    *(_OWORD *)(v248 + 24) = 0u;
    *(_OWORD *)(v248 + 40) = 0u;
    *(unsigned char *)(v248 + 56) = 96;
    swift_storeEnumTagMultiPayload();
    char v260 = sub_10025CD90(v257, v248);
    sub_100184964(v248, type metadata accessor for ExperienceEvent);
    sub_100184964(v257, type metadata accessor for ExperienceEvent);
    sub_100184964(v249, type metadata accessor for ExperienceEvent);
    if ((v260 & 1) == 0) {
      goto LABEL_187;
    }
LABEL_185:
    swift_retain();
    sub_1001BD8E4(16385);
    swift_release();
    uint64_t v261 = (uint64_t)v289;
    *(unsigned char *)v289 = 3;
    swift_storeEnumTagMultiPayload();
    sub_100183E80(v261, v59);
    sub_100184964(v261, type metadata accessor for ExperienceEffect);
    *(_OWORD *)uint64_t v261 = xmmword_10028F480;
    *(unsigned char *)(v261 + 16) = 0;
    swift_storeEnumTagMultiPayload();
    sub_100183E80(v261, v59);
    sub_100184964(v261, type metadata accessor for ExperienceEffect);
    *(void *)uint64_t v261 = 0;
    *(void *)(v261 + 8) = 0;
    *(unsigned char *)(v261 + 16) = -125;
    swift_storeEnumTagMultiPayload();
    sub_100183E80(v261, v59);
    uint64_t v258 = v261;
    v259 = type metadata accessor for ExperienceEffect;
    goto LABEL_186;
  }
LABEL_187:
  sub_10000A38C(&qword_10035F248);
  uint64_t v262 = *(void *)(v295 + 72);
  unint64_t v263 = (*(unsigned __int8 *)(v295 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v295 + 80);
  uint64_t v264 = swift_allocObject();
  *(_OWORD *)(v264 + 16) = xmmword_100291180;
  v265 = (unsigned char *)(v264 + v263);
  unsigned char *v265 = 6;
  swift_storeEnumTagMultiPayload();
  v265[v262] = 64;
  swift_storeEnumTagMultiPayload();
  v265[2 * v262] = 96;
  swift_storeEnumTagMultiPayload();
  v265[3 * v262] = -96;
  swift_storeEnumTagMultiPayload();
  LOBYTE(v262) = sub_10017BD54(v264);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (v262)
  {
    uint64_t v215 = v59;
    char v246 = 1;
    goto LABEL_170;
  }
}

uint64_t sub_10017F138(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ExperienceEffect(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C11C();
  id v7 = objc_allocWithZone((Class)CULogHandle);
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithSubsystem:v8 category:v9];

  NSString v11 = String._bridgeToObjectiveC()();
  [v10 ulog:40 message:v11];

  uint64_t v12 = *(void *)(v2 + 16);
  sub_10003C908();
  LOBYTE(v10) = sub_1001E1728();
  swift_release();
  swift_retain();
  if (v10) {
    __int16 v13 = 0x2000;
  }
  else {
    __int16 v13 = 8448;
  }
  sub_1001BD8E4(v13);
  uint64_t result = swift_release();
  if (*(unsigned char *)(v12 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_hintBannerType))
  {
    if (*(unsigned char *)(v12 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_hintBannerType) == 1)
    {
      *(void *)uint64_t v6 = 0;
      *((void *)v6 + 1) = 0;
      v6[16] = 0;
    }
    else
    {
      *(void *)uint64_t v6 = 0;
      *((void *)v6 + 1) = 0;
      v6[16] = -124;
    }
    swift_storeEnumTagMultiPayload();
    sub_100183E80((uint64_t)v6, a1);
    uint64_t result = sub_100184964((uint64_t)v6, type metadata accessor for ExperienceEffect);
  }
  if (*(unsigned char *)(v12 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_hintNoticeEnabled) == 1)
  {
    type metadata accessor for NoticeEffect();
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    sub_100183E80((uint64_t)v6, a1);
    uint64_t result = sub_100184964((uint64_t)v6, type metadata accessor for ExperienceEffect);
  }
  if (*(unsigned char *)(v12 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_hintShockwaveEnabled) == 1)
  {
    *uint64_t v6 = 0;
    swift_storeEnumTagMultiPayload();
    sub_100183E80((uint64_t)v6, a1);
    return sub_100184964((uint64_t)v6, type metadata accessor for ExperienceEffect);
  }
  return result;
}

void sub_10017F3F4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ExperienceEffect(0);
  uint64_t v5 = __chkstk_darwin(v4);
  id v7 = (BOOL *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  NSString v9 = (char *)v25 - v8;
  unint64_t v29 = 0xD00000000000001FLL;
  unint64_t v30 = 0x80000001002C1800;
  uint64_t v26 = a1;
  v10._uint64_t countAndFlagsBits = sub_10025B6EC();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  sub_10000C11C();
  id v11 = objc_allocWithZone((Class)CULogHandle);
  v25[1] = "WB because nearbyID exists";
  NSString v12 = String._bridgeToObjectiveC()();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v11 initWithSubsystem:v12 category:v13];

  swift_bridgeObjectRetain();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 ulog:40 message:v15];
  swift_bridgeObjectRelease();

  swift_retain();
  CurrentValueSubject.value.getter();
  __int16 v16 = v28;
  if ((~v28 & 0xFEFE) != 0)
  {
    swift_release();
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    __int16 v16 = v29;
  }
  if ((v16 & 0xE000) == 0x2000)
  {
    swift_retain();
    sub_1001BD8E4(v16 & 0x100 | 0x2001);
    swift_release();
    uint64_t v17 = v26;
    if ((v16 & 0x100) != 0)
    {
      *NSString v9 = 0;
      swift_storeEnumTagMultiPayload();
      sub_100183E80((uint64_t)v9, v17);
      sub_100184964((uint64_t)v9, type metadata accessor for ExperienceEffect);
    }
    if ((*(unsigned char *)(*(void *)(v2 + 16)
                   + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_hintShockwaveEnabled) & 1) == 0)
    {
      *NSString v9 = 0;
      swift_storeEnumTagMultiPayload();
      sub_100183E80((uint64_t)v9, v17);
      sub_100184964((uint64_t)v9, type metadata accessor for ExperienceEffect);
      *NSString v9 = 3;
      swift_storeEnumTagMultiPayload();
      sub_100183E80((uint64_t)v9, v17);
      sub_100184964((uint64_t)v9, type metadata accessor for ExperienceEffect);
    }
    *id v7 = (v16 & 0x100) == 0;
    swift_storeEnumTagMultiPayload();
    sub_100183E80((uint64_t)v7, v17);
    sub_100184964((uint64_t)v7, type metadata accessor for ExperienceEffect);
  }
  else
  {
    unint64_t v29 = 0;
    unint64_t v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    unint64_t v29 = 0xD000000000000013;
    unint64_t v30 = 0x80000001002C1750;
    swift_retain();
    CurrentValueSubject.value.getter();
    unsigned __int16 v18 = v27;
    if ((~v27 & 0xFEFE) != 0)
    {
      swift_release();
    }
    else
    {
      CurrentValueSubject.value.getter();
      swift_release();
      unsigned __int16 v18 = v28;
    }
    v19._uint64_t countAndFlagsBits = sub_10025B420(v18);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    sub_10000C11C();
    id v20 = objc_allocWithZone((Class)CULogHandle);
    NSString v21 = String._bridgeToObjectiveC()();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v23 = [v20 initWithSubsystem:v21 category:v22];

    swift_bridgeObjectRetain();
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v23 ulog:90 message:v24];
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10017F8B8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v68 = a1;
  uint64_t v3 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v3 - 8);
  uint64_t v74 = (uint64_t)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v69 = (void *)type metadata accessor for ContinuousClock.Instant();
  unint64_t v66 = (char *)*(v69 - 1);
  uint64_t v5 = __chkstk_darwin(v69);
  unsigned int v70 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  id v71 = (char *)&v64 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  char v73 = (char *)&v64 - v10;
  uint64_t v65 = v11;
  __chkstk_darwin(v9);
  char v72 = (char *)&v64 - v12;
  uint64_t v67 = type metadata accessor for ExperienceEffect(0);
  __chkstk_darwin(v67);
  id v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_10036A298);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for OSSignpostID();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  NSString v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C11C();
  id v22 = objc_allocWithZone((Class)CULogHandle);
  NSString v23 = String._bridgeToObjectiveC()();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v25 = [v22 initWithSubsystem:v23 category:v24];

  NSString v26 = String._bridgeToObjectiveC()();
  [v25 ulog:40 message:v26];

  static OSSignpostID.exclusive.getter();
  static os_signpost_type_t.begin.getter();
  if (qword_10035A528 != -1) {
    swift_once();
  }
  id v27 = (id)qword_1003AC758;
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  unsigned __int16 v28 = (void *)*((void *)v2 + 2);
  *((unsigned char *)v28 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_dwellExpired) = 0;
  uint64_t v29 = type metadata accessor for PermissionToHandoff();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v17, 1, 1, v29);
  uint64_t v30 = (uint64_t)v28 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_permissionToHandoff;
  swift_beginAccess();
  sub_10018469C((uint64_t)v17, v30);
  swift_endAccess();
  swift_retain();
  sub_1001BD8E4(0x8000);
  swift_release();
  int v31 = *((unsigned __int8 *)v28 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_dwellBannerType);
  if (*((unsigned char *)v28 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_dwellBannerType))
  {
    uint64_t v32 = v68;
    uint64_t v33 = v69;
    *(void *)id v14 = 0;
    *((void *)v14 + 1) = 0;
    if (v31 == 1)
    {
      v14[16] = 0;
      swift_storeEnumTagMultiPayload();
      sub_100183E80((uint64_t)v14, v32);
      sub_100184964((uint64_t)v14, type metadata accessor for ExperienceEffect);
      *(void *)id v14 = 0;
      *((void *)v14 + 1) = 0;
      v14[16] = -125;
    }
    else
    {
      v14[16] = -124;
      swift_storeEnumTagMultiPayload();
      sub_100183E80((uint64_t)v14, v32);
      sub_100184964((uint64_t)v14, type metadata accessor for ExperienceEffect);
      *(void *)id v14 = *(void *)((char *)v28
                                 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_dwellAnimationDuration);
      *((void *)v14 + 1) = 0;
      v14[16] = 0x80;
      swift_storeEnumTagMultiPayload();
      sub_100183E80((uint64_t)v14, v32);
      sub_100184964((uint64_t)v14, type metadata accessor for ExperienceEffect);
      *(_OWORD *)id v14 = xmmword_10028F480;
      v14[16] = 0;
    }
  }
  else
  {
    *(_OWORD *)id v14 = xmmword_10028F480;
    v14[16] = 0;
    swift_storeEnumTagMultiPayload();
    uint64_t v32 = v68;
    sub_100183E80((uint64_t)v14, v68);
    sub_100184964((uint64_t)v14, type metadata accessor for ExperienceEffect);
    *(void *)id v14 = 0;
    *((void *)v14 + 1) = 0;
    v14[16] = -125;
    uint64_t v33 = v69;
  }
  swift_storeEnumTagMultiPayload();
  sub_100183E80((uint64_t)v14, v32);
  sub_100184964((uint64_t)v14, type metadata accessor for ExperienceEffect);
  if (*((unsigned char *)v28 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_dwellNoticeEnabled) == 1)
  {
    type metadata accessor for NoticeEffect();
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    sub_100183E80((uint64_t)v14, v32);
    sub_100184964((uint64_t)v14, type metadata accessor for ExperienceEffect);
  }
  *id v14 = 0;
  uint64_t v34 = v14 + 8;
  swift_storeEnumTagMultiPayload();
  sub_100183E80((uint64_t)v14, v32);
  sub_100184964((uint64_t)v14, type metadata accessor for ExperienceEffect);
  if (*((unsigned char *)v28 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_requirePermissionToHandoff) == 1)
  {
    *(void *)id v14 = 4;
    *uint64_t v34 = 0;
    *((void *)v14 + 2) = 0;
    v14[24] = 4;
    swift_storeEnumTagMultiPayload();
    sub_100183E80((uint64_t)v14, v32);
    sub_100184964((uint64_t)v14, type metadata accessor for ExperienceEffect);
    uint64_t v35 = &off_10031DB58;
  }
  else
  {
    uint64_t v35 = &off_10031DB80;
  }
  uint64_t v36 = v2;
  uint64_t v37 = v70;
  *(void *)id v14 = v35;
  *uint64_t v34 = 0;
  *((void *)v14 + 2) = 0;
  v14[24] = 3;
  swift_storeEnumTagMultiPayload();
  uint64_t v38 = v36;
  sub_100183E80((uint64_t)v14, v32);
  sub_100184964((uint64_t)v14, type metadata accessor for ExperienceEffect);
  uint64_t v39 = *((void *)v36 + 5);
  BOOL v40 = __OFADD__(v39, 1);
  uint64_t v41 = v39 + 1;
  if (v40)
  {
    __break(1u);
    goto LABEL_17;
  }
  *((void *)v36 + 5) = v41;
  uint64_t v42 = v73;
  static ContinuousClock.Instant.now.getter();
  static Duration.seconds(_:)();
  uint64_t v43 = v72;
  ContinuousClock.Instant.advanced(by:)();
  uint64_t v44 = v66;
  uint64_t v45 = v66 + 8;
  uint64_t v46 = (void *)*((void *)v66 + 1);
  ((void (*)(char *, void *))v46)(v42, v33);
  uint64_t v47 = v71;
  static ContinuousClock.Instant.now.getter();
  static Duration.seconds(_:)();
  ContinuousClock.Instant.advanced(by:)();
  char v69 = v46;
  unsigned int v70 = v45;
  ((void (*)(char *, void *))v46)(v47, v33);
  uint64_t v48 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v74, 1, 1, v48);
  uint64_t v49 = swift_allocObject();
  swift_weakInit();
  uint64_t v68 = *((void *)v36 + 5);
  uint64_t v36 = v44;
  Swift::String v50 = (void (*)(char *, char *, void *))*((void *)v44 + 2);
  v50(v47, v43, v33);
  v50(v37, v42, v33);
  uint64_t v51 = qword_10035A630;
  uint64_t v67 = v49;
  swift_retain();
  unsigned __int16 v28 = v33;
  uint64_t v38 = v37;
  if (v51 != -1) {
LABEL_17:
  }
    swift_once();
  uint64_t v52 = qword_1003ACB58;
  uint64_t v53 = sub_100184654(&qword_100369D70, 255, (void (*)(uint64_t))type metadata accessor for WorkActor);
  uint64_t v54 = v36[80];
  uint64_t v55 = (v54 + 32) & ~v54;
  uint64_t v56 = (v65 + v54 + v55) & ~v54;
  unint64_t v57 = (v65 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v58 = v36;
  uint64_t v59 = swift_allocObject();
  *(void *)(v59 + 16) = v52;
  *(void *)(v59 + 24) = v53;
  id v60 = (void (*)(uint64_t, char *, void *))*((void *)v58 + 4);
  v60(v59 + v55, v71, v28);
  v60(v59 + v56, v38, v28);
  uint64_t v61 = v68;
  *(void *)(v59 + v57) = v67;
  *(void *)(v59 + ((v57 + 15) & 0xFFFFFFFFFFFFFFF8)) = v61;
  swift_retain();
  swift_release();
  sub_10007CBF8(v74, (uint64_t)&unk_10036A2C0, v59);
  swift_release();
  int v62 = (uint64_t (*)(char *, void *))v69;
  ((void (*)(char *, void *))v69)(v73, v28);
  return v62(v72, v28);
}

uint64_t sub_100180358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  v7[12] = sub_10000A38C((uint64_t *)&unk_10035E840);
  v7[13] = swift_task_alloc();
  v7[14] = type metadata accessor for ExperienceEvent(0);
  v7[15] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ContinuousClock();
  v7[16] = v8;
  v7[17] = *(void *)(v8 - 8);
  v7[18] = swift_task_alloc();
  uint64_t v9 = sub_10000A38C(&qword_10036A2C8);
  v7[19] = v9;
  v7[20] = *(void *)(v9 - 8);
  v7[21] = swift_task_alloc();
  v7[22] = swift_task_alloc();
  v7[23] = swift_task_alloc();
  if (qword_10035A630 != -1) {
    swift_once();
  }
  type metadata accessor for WorkActor();
  sub_100184654(&qword_100369D70, 255, (void (*)(uint64_t))type metadata accessor for WorkActor);
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v7[24] = v11;
  v7[25] = v10;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_10018058C, v11, v10);
}

uint64_t sub_10018058C()
{
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 64);
  sub_10000A38C(&qword_10036A2D0);
  uint64_t v5 = *(void *)(v1 + 72);
  *(void *)(v0 + 208) = v5;
  int v6 = *(_DWORD *)(v1 + 80);
  *(_DWORD *)(v0 + 60) = v6;
  unint64_t v7 = (v6 + 32) & ~(unint64_t)v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 216) = v8;
  *(_OWORD *)(v8 + 16) = xmmword_10028FC10;
  unint64_t v9 = v8 + v7;
  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v0 + 224) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v0 + 232) = v12;
  uint64_t v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 16);
  *(void *)(v0 + 240) = v13;
  *(void *)(v0 + 248) = (v12 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v13(v9, v4, v11);
  *(unsigned char *)(v9 + v10) = 7;
  unint64_t v14 = v9 + v5;
  uint64_t v15 = *(int *)(v2 + 48);
  v13(v14, v3, v11);
  *(unsigned char *)(v14 + v15) = 8;
  *(_DWORD *)(v0 + 272) = *(_DWORD *)(v2 + 48);
  uint64_t v16 = swift_beginAccess();
  *(unsigned char *)(v0 + 57) = 0;
  uint64_t v21 = *(void *)(v0 + 216);
  if (*(void *)(v21 + 16))
  {
    uint64_t v22 = *(int *)(v0 + 272);
    uint64_t v23 = *(void *)(v0 + 224);
    uint64_t v24 = *(void *)(v0 + 232);
    uint64_t v26 = *(void *)(v0 + 176);
    uint64_t v25 = *(void *)(v0 + 184);
    uint64_t v27 = *(void *)(v0 + 152);
    sub_10000D728(v21 + ((*(unsigned __int8 *)(v0 + 60) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 60)), v25, &qword_10036A2C8);
    uint64_t v28 = *(int *)(v27 + 48);
    *(_DWORD *)(v0 + 276) = v28;
    LOBYTE(v22) = *(unsigned char *)(v25 + v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v26, v25, v23);
    *(unsigned char *)(v26 + v28) = v22;
    *(void *)(v0 + 48) = 0;
    *(void *)(v0 + 40) = 0;
    *(unsigned char *)(v0 + 56) = 1;
    ContinuousClock.init()();
    uint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v29;
    uint64_t v20 = sub_100184654(&qword_10036A2B0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
    *uint64_t v29 = v0;
    v29[1] = sub_10018082C;
    uint64_t v16 = *(void *)(v0 + 176);
    uint64_t v18 = *(void *)(v0 + 144);
    uint64_t v19 = *(void *)(v0 + 128);
    uint64_t v17 = v0 + 40;
  }
  else
  {
    __break(1u);
  }
  return static Task<>.sleep<A>(until:tolerance:clock:)(v16, v17, v18, v19, v20);
}

uint64_t sub_10018082C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[17] + 8))(v2[18], v2[16]);
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = v2[24];
    uint64_t v4 = v2[25];
    uint64_t v5 = sub_100180E10;
  }
  else
  {
    uint64_t v3 = v2[24];
    uint64_t v4 = v2[25];
    uint64_t v5 = sub_10018097C;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v5, v3, v4);
}

uint64_t sub_10018097C()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    sub_10000D78C(*(void *)(v0 + 176), &qword_10036A2C8);
LABEL_12:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
  uint64_t v2 = Strong;
  swift_retain();
  CurrentValueSubject.value.getter();
  int v3 = *(unsigned __int16 *)(v0 + 280);
  if ((~v3 & 0xFEFE) != 0)
  {
    swift_release();
    if (v3 != 0x8000)
    {
LABEL_10:
      sub_10000D78C(*(void *)(v0 + 176), &qword_10036A2C8);
      uint64_t v18 = swift_release();
      goto LABEL_11;
    }
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    if (*(unsigned __int16 *)(v0 + 58) != 0x8000) {
      goto LABEL_10;
    }
  }
  if (*(void *)(v2 + 40) != *(void *)(v0 + 88)) {
    goto LABEL_10;
  }
  if (swift_weakLoadStrong())
  {
    uint64_t v36 = *(int *)(v0 + 276);
    uint64_t v4 = *(void *)(v0 + 224);
    uint64_t v39 = v4;
    uint64_t v40 = *(void *)(v0 + 232);
    uint64_t v6 = *(void *)(v0 + 168);
    uint64_t v5 = *(void *)(v0 + 176);
    uint64_t v7 = *(void *)(v0 + 152);
    uint64_t v8 = *(unsigned char **)(v0 + 120);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 240);
    uint64_t v9 = *(void *)(v0 + 96);
    uint64_t v10 = *(void *)(v0 + 104);
    swift_retain();
    swift_release();
    uint64_t v11 = *(int *)(v7 + 48);
    uint64_t v37 = v5;
    uint64_t v38 = v6;
    v35(v6, v5, v4);
    char v12 = *(unsigned char *)(v5 + v36);
    *(unsigned char *)(v6 + v11) = v12;
    *uint64_t v8 = v12;
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = UUID.uuidString.getter();
    uint64_t v15 = v14;
    uint64_t v16 = (uint64_t *)(v10 + *(int *)(v9 + 48));
    uint64_t v17 = (void *)(v10 + *(int *)(v9 + 64));
    sub_1001844B8((uint64_t)v8, v10, type metadata accessor for ExperienceEvent);
    *uint64_t v16 = v13;
    v16[1] = v15;
    *uint64_t v17 = 0;
    v17[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    PassthroughSubject.send(_:)();
    sub_10000D78C(v10, (uint64_t *)&unk_10035E840);
    swift_bridgeObjectRelease();
    swift_release();
    sub_100184964((uint64_t)v8, type metadata accessor for ExperienceEvent);
    sub_10000D78C(v37, &qword_10036A2C8);
    swift_release();
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
  }
  else
  {
    uint64_t v34 = *(void *)(v0 + 176);
    swift_release();
    uint64_t v18 = sub_10000D78C(v34, &qword_10036A2C8);
  }
LABEL_11:
  if (*(unsigned char *)(v0 + 57) == 1) {
    goto LABEL_12;
  }
  *(unsigned char *)(v0 + 57) = 1;
  uint64_t v25 = *(void *)(v0 + 216);
  if (*(void *)(v25 + 16) < 2uLL)
  {
    __break(1u);
  }
  else
  {
    uint64_t v26 = *(int *)(v0 + 272);
    uint64_t v27 = *(void *)(v0 + 224);
    uint64_t v28 = *(void *)(v0 + 232);
    uint64_t v30 = *(void *)(v0 + 176);
    uint64_t v29 = *(void *)(v0 + 184);
    uint64_t v31 = *(void *)(v0 + 152);
    sub_10000D728(v25+ *(void *)(v0 + 208)+ ((*(unsigned __int8 *)(v0 + 60) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 60)), v29, &qword_10036A2C8);
    uint64_t v32 = *(int *)(v31 + 48);
    *(_DWORD *)(v0 + 276) = v32;
    LOBYTE(v26) = *(unsigned char *)(v29 + v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v30, v29, v27);
    *(unsigned char *)(v30 + v32) = v26;
    *(void *)(v0 + 48) = 0;
    *(void *)(v0 + 40) = 0;
    *(unsigned char *)(v0 + 56) = 1;
    ContinuousClock.init()();
    uint64_t v33 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v33;
    uint64_t v22 = sub_100184654(&qword_10036A2B0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
    *uint64_t v33 = v0;
    v33[1] = sub_10018082C;
    uint64_t v18 = *(void *)(v0 + 176);
    uint64_t v20 = *(void *)(v0 + 144);
    uint64_t v21 = *(void *)(v0 + 128);
    uint64_t v19 = v0 + 40;
  }
  return static Task<>.sleep<A>(until:tolerance:clock:)(v18, v19, v20, v21, v22);
}

uint64_t sub_100180E10()
{
  sub_10000D78C(*(void *)(v0 + 176), &qword_10036A2C8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100180ED0(uint64_t a1)
{
  uint64_t v173 = a1;
  uint64_t v169 = type metadata accessor for OSSignpostID();
  uint64_t v170 = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  id v171 = (char *)&v154 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v3 - 8);
  uint64_t v162 = (uint64_t)&v154 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v160 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  char v164 = (char *)&v154 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v154 - v8;
  uint64_t v172 = type metadata accessor for ExperienceEffect(0);
  uint64_t v10 = __chkstk_darwin(v172 - 8);
  uint64_t v158 = (char *)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v155 = (char *)&v154 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  v163 = (char *)&v154 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v154 - v16;
  uint64_t v18 = type metadata accessor for PermissionToHandoff();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v178 = v18;
  uint64_t v179 = v19;
  uint64_t v20 = __chkstk_darwin(v18);
  id v166 = (char *)&v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  char v168 = (uint64_t *)((char *)&v154 - v22);
  uint64_t v23 = sub_10000A38C(&qword_10036A298);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v157 = (uint64_t)&v154 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v154 - v27;
  uint64_t v29 = __chkstk_darwin(v26);
  uint64_t v31 = (char *)&v154 - v30;
  __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v154 - v32;
  swift_retain();
  CurrentValueSubject.value.getter();
  unsigned int v176 = v184;
  uint64_t v161 = v5;
  char v165 = v9;
  if ((~v184 & 0xFEFE) != 0)
  {
    swift_release();
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    unsigned int v176 = (unsigned __int16)v187;
  }
  uint64_t v177 = v1;
  uint64_t v34 = *(void *)(v1 + 16);
  uint64_t v167 = OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_device;
  uint64_t v35 = sub_10003CF3C();
  uint64_t v180 = v36;
  uint64_t v181 = v35;
  uint64_t v175 = v37;
  BOOL v38 = *(unsigned char *)(v34 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_requirePermissionToHandoff) == 1;
  uint64_t v174 = v34;
  if (!v38) {
    goto LABEL_17;
  }
  uint64_t v39 = v34 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_permissionToHandoff;
  swift_beginAccess();
  sub_10000D728(v39, (uint64_t)v33, &qword_10036A298);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v179 + 48))(v33, 1, v178))
  {
    sub_10000D78C((uint64_t)v33, &qword_10036A298);
    uint64_t v187 = 0;
    unint64_t v188 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v40._uint64_t countAndFlagsBits = 0xD000000000000014;
    v40._object = (void *)0x80000001002C17B0;
    String.append(_:)(v40);
    v41._uint64_t countAndFlagsBits = 0x293A5F28706F6F62;
    v41._object = (void *)0xE800000000000000;
    String.append(_:)(v41);
    v42._uint64_t countAndFlagsBits = 0xD000000000000022;
    v42._object = (void *)0x80000001002C17D0;
    String.append(_:)(v42);
    sub_10000C11C();
    id v43 = objc_allocWithZone((Class)CULogHandle);
    NSString v44 = String._bridgeToObjectiveC()();
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v46 = [v43 initWithSubsystem:v44 category:v45];

    swift_bridgeObjectRetain();
    NSString v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v46 ulog:60 message:v47];
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v53 = v168;
    sub_1001844B8((uint64_t)v33, (uint64_t)v168, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
    sub_10000D78C((uint64_t)v33, &qword_10036A298);
    uint64_t v54 = *v53;
    uint64_t v55 = v53[1];
    unint64_t v56 = v53[2];
    uint64_t v57 = *v53;
    unint64_t v182 = v53[5];
    sub_100184520(v57, v55, v56);
    sub_100184964((uint64_t)v53, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
    uint64_t v34 = v174;
    if (v56 == 7)
    {
LABEL_17:
      uint64_t v58 = *(void *)(v34 + v167);
      swift_retain();
      uint64_t v52 = v175;
      unint64_t v51 = sub_100078C80(v181, v180, v175, v58);
      swift_release();
      unsigned __int16 v48 = v176;
      goto LABEL_18;
    }
    if (v56 != 8) {
      sub_100184588(v54, v55, v56);
    }
  }
  unsigned __int16 v48 = v176;
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v49 = *(id *)(qword_1003AC750 + 184);
  char v50 = sub_1000FD938();

  if (v50) {
    unint64_t v51 = 3;
  }
  else {
    unint64_t v51 = 11;
  }
  uint64_t v52 = v175;
  uint64_t v34 = v174;
LABEL_18:
  uint64_t v59 = 7104878;
  uint64_t v187 = 0;
  unint64_t v188 = 0xE000000000000000;
  _StringGuts.grow(_:)(72);
  uint64_t v185 = v187;
  unint64_t v186 = v188;
  v60._uint64_t countAndFlagsBits = 0x6562203A706F6F42;
  v60._object = (void *)0xEF3D726F69766168;
  String.append(_:)(v60);
  LOBYTE(v187) = v51;
  _print_unlocked<A, B>(_:_:)();
  v61._uint64_t countAndFlagsBits = 0x745376657270202CLL;
  v61._object = (void *)0xEC0000003D657461;
  String.append(_:)(v61);
  v62._uint64_t countAndFlagsBits = sub_10025B420(v48);
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  v63._uint64_t countAndFlagsBits = 0xD000000000000018;
  v63._object = (void *)0x80000001002B6390;
  unint64_t v156 = 0xD000000000000018;
  String.append(_:)(v63);
  if (v52 == 1)
  {
    unint64_t v68 = 0xE300000000000000;
    uint64_t v66 = 7104878;
  }
  else
  {
    uint64_t v64 = v181;
    uint64_t v187 = (uint64_t)v181;
    LOBYTE(v188) = v180 & 1;
    unint64_t v189 = v52;
    swift_retain();
    uint64_t v65 = v64;
    uint64_t v66 = String.init<A>(describing:)();
    unint64_t v68 = v67;
  }
  unint64_t v69 = v68;
  String.append(_:)(*(Swift::String *)&v66);
  swift_bridgeObjectRelease();
  v70._uint64_t countAndFlagsBits = 0x73696D726570202CLL;
  v70._object = (void *)0xED00003D6E6F6973;
  String.append(_:)(v70);
  uint64_t v71 = v34 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_permissionToHandoff;
  swift_beginAccess();
  sub_10000D728(v71, (uint64_t)v31, &qword_10036A298);
  sub_10000D728((uint64_t)v31, (uint64_t)v28, &qword_10036A298);
  char v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v179 + 48);
  v179 += 48;
  int v73 = v72(v28, 1, v178);
  unint64_t v182 = v51;
  if (v73 == 1)
  {
    uint64_t v74 = (void *)0xE300000000000000;
  }
  else
  {
    uint64_t v75 = (uint64_t)v168;
    sub_1001845F0((uint64_t)v28, (uint64_t)v168);
    sub_1001844B8(v75, (uint64_t)v166, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
    uint64_t v59 = String.init<A>(describing:)();
    uint64_t v74 = v76;
    sub_100184964(v75, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
  }
  sub_10000D78C((uint64_t)v31, &qword_10036A298);
  v77._uint64_t countAndFlagsBits = v59;
  v77._object = v74;
  String.append(_:)(v77);
  swift_bridgeObjectRelease();
  sub_10000C11C();
  id v78 = objc_allocWithZone((Class)CULogHandle);
  id v166 = "WB because nearbyID exists";
  NSString v79 = String._bridgeToObjectiveC()();
  NSString v80 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v81 = [v78 initWithSubsystem:v79 category:v80];

  swift_bridgeObjectRetain();
  NSString v82 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v81 ulog:40 message:v82];
  swift_bridgeObjectRelease();

  if (sub_10004707C(v182) == 0x726566736E617274 && v83 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v84 = v175;
    uint64_t v85 = v177;
    uint64_t v86 = v173;
    if (v175 == 1) {
      goto LABEL_31;
    }
  }
  else
  {
    char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v84 = v175;
    uint64_t v85 = v177;
    uint64_t v86 = v173;
    if (v175 == 1 || (v87 & 1) == 0) {
      goto LABEL_31;
    }
  }
  uint64_t v89 = v180;
  uint64_t v88 = v181;
  *(void *)uint64_t v17 = v181;
  *((void *)v17 + 1) = v89 & 1;
  *((void *)v17 + 2) = v84;
  v17[24] = 0;
  swift_storeEnumTagMultiPayload();
  sub_1000790E8(v88, v89, v84);
  swift_retain();
  uint64_t v90 = v88;
  sub_100183E80((uint64_t)v17, v86);
  swift_release();

  sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
LABEL_31:
  uint64_t v91 = v178;
  switch((char)v182)
  {
    case 1:
      char v100 = *(unsigned char *)(v174 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_expandShockwaveEnabled) ^ 1;
      __int16 v101 = v176;
      unsigned int v102 = v176 >> 13;
      if ((v176 >> 13 == 2 || v102 == 1) && (v176 & 0x100) != 0)
      {
        __int16 v104 = v100 & 1;
      }
      else
      {
        sub_10003C908();
        char v103 = sub_1001E1A0C();
        swift_release();
        __int16 v104 = v100 & 1;
        if ((v103 & 1) == 0)
        {
          char v105 = 0;
          __int16 v106 = 0;
          goto LABEL_94;
        }
      }
      __int16 v106 = 256;
      char v105 = 1;
LABEL_94:
      __int16 v139 = v104 | v106 | 0x4000;
      swift_retain();
      sub_1001BD8E4(v139);
      swift_release();
      if (*(unsigned char *)(v174 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_shockwaveEnabled) == 1)
      {
        *uint64_t v17 = 1;
        swift_storeEnumTagMultiPayload();
        unint64_t v140 = v17;
      }
      else
      {
        if (v102 - 1 >= 3)
        {
          unint64_t v140 = v155;
          if (v102 == 4)
          {
            if ((v101 & 0xFFFE) == 0x8000) {
              char v141 = 1;
            }
            else {
              char v141 = 2;
            }
          }
          else
          {
            char v141 = 2;
          }
        }
        else
        {
          char v141 = 1;
          unint64_t v140 = v155;
        }
        *unint64_t v140 = v141;
        swift_storeEnumTagMultiPayload();
      }
      sub_100183E80((uint64_t)v140, v86);
      sub_100184964((uint64_t)v140, type metadata accessor for ExperienceEffect);
      if (v102 - 1 >= 3)
      {
        if (v102 == 4)
        {
          char v151 = (v101 & 0xFFFE) == 0x8000 ? v105 : 1;
          if ((v151 & 1) == 0) {
            goto LABEL_117;
          }
        }
      }
      else if ((v105 & 1) == 0)
      {
LABEL_117:
        *(_OWORD *)uint64_t v17 = xmmword_10028F470;
        v17[16] = 0;
        swift_storeEnumTagMultiPayload();
        sub_100183E80((uint64_t)v17, v86);
        sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
        *(void *)uint64_t v17 = 0;
        *((void *)v17 + 1) = 0;
        char v152 = -127;
LABEL_118:
        v17[16] = v152;
        swift_storeEnumTagMultiPayload();
        sub_100183E80((uint64_t)v17, v86);
        sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
LABEL_119:
        swift_retain();
        CurrentValueSubject.value.getter();
        int v153 = v183;
        if ((~v183 & 0xFEFE) != 0)
        {
          swift_release();
        }
        else
        {
          CurrentValueSubject.value.getter();
          swift_release();
          int v153 = (unsigned __int16)v185;
        }
        if ((v153 & 0xFFFFE001) == 0x4001) {
          sub_1001832E4(v86);
        }
        goto LABEL_91;
      }
      *(_OWORD *)uint64_t v17 = xmmword_10028F470;
      v17[16] = 0;
      swift_storeEnumTagMultiPayload();
      sub_100183E80((uint64_t)v17, v86);
      sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
      *(_OWORD *)uint64_t v17 = xmmword_10028F480;
      v17[16] = 0;
      swift_storeEnumTagMultiPayload();
      sub_100183E80((uint64_t)v17, v86);
      sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = 0;
      v17[16] = -127;
      swift_storeEnumTagMultiPayload();
      sub_100183E80((uint64_t)v17, v86);
      sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = 0;
      char v152 = -125;
      goto LABEL_118;
    case 3:
    case 10:
      swift_retain();
      sub_1001BD8E4(32769);
      swift_release();
      if (*(unsigned char *)(v174 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_shockwaveEnabled) == 1)
      {
        *uint64_t v17 = 1;
        swift_storeEnumTagMultiPayload();
        uint64_t v95 = (uint64_t)v17;
        uint64_t v96 = v165;
        uint64_t v97 = v164;
      }
      else
      {
        uint64_t v96 = v165;
        uint64_t v97 = v164;
        uint64_t v95 = (uint64_t)v158;
        if ((v176 >> 13) - 1 < 3 || v176 >> 13 == 4 && (v176 & 0xFFFE) == 0x8000) {
          char v107 = 1;
        }
        else {
          char v107 = 2;
        }
        *uint64_t v158 = v107;
        swift_storeEnumTagMultiPayload();
      }
      sub_100183E80(v95, v173);
      sub_100184964(v95, type metadata accessor for ExperienceEffect);
      if (v182 == 10)
      {
        unint64_t v111 = 0x80000001002C1790;
        uint64_t v112 = v162;
        unint64_t v110 = v156;
LABEL_65:
        id v109 = v96;
        goto LABEL_66;
      }
      if (v182 != 3)
      {
        unint64_t v110 = 0;
        unint64_t v111 = 0;
        uint64_t v112 = v162;
        goto LABEL_65;
      }
      uint64_t v108 = v157;
      sub_10000D728(v71, v157, &qword_10036A298);
      if (v72((char *)v108, 1, v91))
      {
        id v109 = v96;
        sub_10000D78C(v108, &qword_10036A298);
        unint64_t v110 = 0;
        unint64_t v111 = 0;
        uint64_t v112 = v162;
LABEL_66:
        uint64_t v113 = v173;
        goto LABEL_67;
      }
      uint64_t v142 = v168;
      sub_1001844B8(v108, (uint64_t)v168, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
      sub_10000D78C(v108, &qword_10036A298);
      uint64_t v143 = *v142;
      uint64_t v144 = v142[1];
      unint64_t v145 = v142[2];
      uint64_t v146 = v142[3];
      uint64_t v148 = v142[4];
      uint64_t v147 = v142[5];
      uint64_t v149 = v142[6];
      sub_100184520(*v142, v144, v145);
      sub_100184964((uint64_t)v142, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
      uint64_t v112 = v162;
      if (v145 - 7 > 1)
      {
        uint64_t v187 = v143;
        unint64_t v188 = v144;
        unint64_t v189 = v145;
        uint64_t v190 = v146;
        uint64_t v191 = v148;
        uint64_t v192 = v147;
        uint64_t v193 = v149;
        uint64_t v179 = v147;
        unint64_t v110 = sub_1001D5AC8();
        unint64_t v111 = v150;
        sub_100184588(v143, v144, v145);
      }
      else
      {
        sub_100184588(v143, v144, v145);
        unint64_t v110 = 0;
        unint64_t v111 = 0;
      }
      uint64_t v113 = v173;
      id v109 = v165;
      uint64_t v97 = v164;
LABEL_67:
      *(void *)uint64_t v17 = v110;
      *((void *)v17 + 1) = v111;
      v17[16] = -126;
      swift_storeEnumTagMultiPayload();
      sub_100183E80((uint64_t)v17, v113);
      sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
      static ContinuousClock.Instant.now.getter();
      static Duration.seconds(_:)();
      ContinuousClock.Instant.advanced(by:)();
      uint64_t v114 = v160;
      uint64_t v115 = v161;
      uint64_t v179 = *(void *)(v160 + 8);
      ((void (*)(char *, uint64_t))v179)(v97, v161);
      uint64_t v116 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 56))(v112, 1, 1, v116);
      uint64_t v117 = swift_allocObject();
      swift_weakInit();
      uint64_t v178 = *(void *)(v85 + 40);
      (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v97, v109, v115);
      uint64_t v118 = qword_10035A630;
      swift_retain();
      if (v118 != -1) {
        swift_once();
      }
      uint64_t v119 = qword_1003ACB58;
      uint64_t v120 = sub_100184654(&qword_100369D70, 255, (void (*)(uint64_t))type metadata accessor for WorkActor);
      unint64_t v121 = (*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
      unint64_t v122 = (v159 + v121 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v123 = swift_allocObject();
      uint64_t v124 = v114;
      uint64_t v125 = v123;
      *(void *)(v123 + 16) = v119;
      *(void *)(v123 + 24) = v120;
      (*(void (**)(unint64_t, char *, uint64_t))(v124 + 32))(v123 + v121, v164, v115);
      *(void *)(v125 + v122) = v117;
      *(void *)(v125 + ((v122 + 15) & 0xFFFFFFFFFFFFFFF8)) = v178;
      swift_retain();
      swift_release();
      sub_10007CBF8(v162, (uint64_t)&unk_10036A2A8, v125);
      swift_release();
      ((void (*)(char *, uint64_t))v179)(v165, v115);
      uint64_t v86 = v173;
      uint64_t v84 = v175;
      uint64_t v99 = v171;
LABEL_70:
      switch((int)v182)
      {
        case 1:
          goto LABEL_119;
        case 2:
          *uint64_t v17 = 1;
          goto LABEL_86;
        case 3:
        case 9:
        case 10:
        case 11:
          goto LABEL_88;
        case 4:
          if (v84 == 1) {
            goto LABEL_81;
          }
          uint64_t v127 = v180;
          uint64_t v126 = v181;
          *(void *)uint64_t v17 = v181;
          *((void *)v17 + 1) = v127 & 1;
          *((void *)v17 + 2) = v84;
          v17[24] = 1;
          goto LABEL_78;
        case 5:
          *(_OWORD *)uint64_t v17 = xmmword_10029E7E0;
          *((void *)v17 + 2) = 0;
          v17[24] = 2;
          swift_storeEnumTagMultiPayload();
          sub_100183E80((uint64_t)v17, v86);
          sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
          static OSSignpostID.exclusive.getter();
          static os_signpost_type_t.end.getter();
          if (qword_10035A528 == -1) {
            goto LABEL_89;
          }
          goto LABEL_124;
        case 6:
          uint64_t v137 = v180;
          uint64_t v136 = v181;
          *(void *)uint64_t v17 = v181;
          *((void *)v17 + 1) = v137;
          *((void *)v17 + 2) = v84;
          type metadata accessor for NoticeEffect();
          swift_storeEnumTagMultiPayload();
          swift_storeEnumTagMultiPayload();
          sub_1000790E8(v136, v137, v84);
          goto LABEL_87;
        case 7:
          goto LABEL_72;
        case 8:
          *((void *)v17 + 1) = 0;
          *((void *)v17 + 2) = 0;
          *(void *)uint64_t v17 = 3;
          v17[24] = 4;
          goto LABEL_86;
        default:
          *uint64_t v17 = 0;
LABEL_86:
          swift_storeEnumTagMultiPayload();
LABEL_87:
          sub_100183E80((uint64_t)v17, v86);
          sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
LABEL_88:
          static OSSignpostID.exclusive.getter();
          static os_signpost_type_t.end.getter();
          if (qword_10035A528 != -1) {
LABEL_124:
          }
            swift_once();
LABEL_89:
          id v138 = (id)qword_1003AC758;
          os_signpost(_:dso:log:name:signpostID:_:_:)();

          break;
      }
LABEL_90:
      (*(void (**)(char *, uint64_t))(v170 + 8))(v99, v169);
LABEL_91:
      *uint64_t v17 = 2;
      swift_storeEnumTagMultiPayload();
      sub_100183E80((uint64_t)v17, v86);
      sub_10017A610(v181, v180, v84);
      return sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
    case 7:
      swift_retain();
      sub_1001BD8E4(24576);
      swift_release();
      *(_OWORD *)uint64_t v17 = xmmword_10028F470;
      v17[16] = 0;
      swift_storeEnumTagMultiPayload();
      sub_100183E80((uint64_t)v17, v86);
      sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
      *(_OWORD *)uint64_t v17 = xmmword_10028F480;
      v17[16] = -127;
      swift_storeEnumTagMultiPayload();
      sub_100183E80((uint64_t)v17, v86);
      sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
      uint64_t v99 = v171;
LABEL_72:
      if (v84 == 1)
      {
LABEL_81:
        sub_10000C11C();
        id v130 = objc_allocWithZone((Class)CULogHandle);
        NSString v131 = String._bridgeToObjectiveC()();
        NSString v132 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v133 = [v130 initWithSubsystem:v131 category:v132];

        NSString v134 = String._bridgeToObjectiveC()();
        [v133 ulog:60 message:v134];

        return sub_100183A14(v86, 0);
      }
      uint64_t v127 = v180;
      uint64_t v126 = v181;
      *(void *)uint64_t v17 = v181;
      v17[8] = v127 & 1;
      *((void *)v17 + 2) = v84;
LABEL_78:
      swift_storeEnumTagMultiPayload();
      sub_1000790E8(v126, v127, v84);
      swift_retain();
      uint64_t v128 = v126;
      sub_100183E80((uint64_t)v17, v86);
      sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
      static OSSignpostID.exclusive.getter();
      static os_signpost_type_t.end.getter();
      if (qword_10035A528 != -1) {
        swift_once();
      }
      id v129 = (id)qword_1003AC758;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();

      goto LABEL_90;
    default:
      swift_retain();
      sub_1001BD8E4(0);
      swift_release();
      if (*(unsigned char *)(v174 + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_expandShockwaveEnabled) == 1)
      {
        *uint64_t v17 = 1;
        swift_storeEnumTagMultiPayload();
        sub_100183E80((uint64_t)v17, v86);
        sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
        __int16 v92 = v176;
        unsigned int v93 = v176 >> 13;
      }
      else
      {
        __int16 v92 = v176;
        unsigned int v93 = v176 >> 13;
        if ((v176 >> 13) - 1 < 3 || v93 == 4 && (v176 & 0xFFFE) == 0x8000) {
          char v94 = 1;
        }
        else {
          char v94 = 2;
        }
        uint64_t v98 = (uint64_t)v163;
        char *v163 = v94;
        swift_storeEnumTagMultiPayload();
        sub_100183E80(v98, v86);
        sub_100184964(v98, type metadata accessor for ExperienceEffect);
      }
      uint64_t v99 = v171;
      if (v93 - 1 < 3 || v93 == 4 && (v92 & 0xFFFE) == 0x8000)
      {
        *(_OWORD *)uint64_t v17 = xmmword_10028F480;
        v17[16] = 0;
        swift_storeEnumTagMultiPayload();
        sub_100183E80((uint64_t)v17, v86);
        sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
        *(void *)uint64_t v17 = 0;
        *((void *)v17 + 1) = 0;
        v17[16] = -127;
        swift_storeEnumTagMultiPayload();
        sub_100183E80((uint64_t)v17, v86);
        sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
        *(void *)uint64_t v17 = 0;
        *((void *)v17 + 1) = 0;
        v17[16] = -125;
        swift_storeEnumTagMultiPayload();
        sub_100183E80((uint64_t)v17, v86);
        sub_100184964((uint64_t)v17, type metadata accessor for ExperienceEffect);
      }
      goto LABEL_70;
  }
}

uint64_t sub_100182BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  v6[11] = sub_10000A38C((uint64_t *)&unk_10035E840);
  v6[12] = swift_task_alloc();
  v6[13] = type metadata accessor for ExperienceEvent(0);
  v6[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ContinuousClock();
  v6[15] = v7;
  v6[16] = *(void *)(v7 - 8);
  v6[17] = swift_task_alloc();
  if (qword_10035A630 != -1) {
    swift_once();
  }
  type metadata accessor for WorkActor();
  sub_100184654(&qword_100369D70, 255, (void (*)(uint64_t))type metadata accessor for WorkActor);
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[18] = v9;
  v6[19] = v8;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_100182DB4, v9, v8);
}

uint64_t sub_100182DB4()
{
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 40) = 0;
  *(unsigned char *)(v0 + 56) = 1;
  ContinuousClock.init()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v1;
  uint64_t v2 = sub_100184654(&qword_10036A2B0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  void *v1 = v0;
  v1[1] = sub_100182EB0;
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 64);
  return static Task<>.sleep<A>(until:tolerance:clock:)(v5, v0 + 40, v3, v4, v2);
}

uint64_t sub_100182EB0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 136);
  uint64_t v4 = *(void *)(*v1 + 128);
  uint64_t v5 = *(void *)(*v1 + 120);
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 144);
  uint64_t v7 = *(void *)(v2 + 152);
  if (v0) {
    uint64_t v8 = sub_100183268;
  }
  else {
    uint64_t v8 = sub_100183028;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v8, v6, v7);
}

uint64_t sub_100183028()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    swift_retain();
    CurrentValueSubject.value.getter();
    int v3 = *(unsigned __int16 *)(v0 + 60);
    if ((~v3 & 0xFEFE) != 0)
    {
      swift_release();
    }
    else
    {
      CurrentValueSubject.value.getter();
      swift_release();
      int v3 = *(unsigned __int16 *)(v0 + 58);
    }
    if (v3 == 32769 && *(void *)(v2 + 40) == *(void *)(v0 + 80) && swift_weakLoadStrong())
    {
      uint64_t v4 = *(unsigned char **)(v0 + 112);
      uint64_t v6 = *(void *)(v0 + 88);
      uint64_t v5 = *(void *)(v0 + 96);
      swift_retain();
      swift_release();
      unsigned char *v4 = 9;
      swift_storeEnumTagMultiPayload();
      uint64_t v7 = UUID.uuidString.getter();
      uint64_t v9 = v8;
      uint64_t v10 = (uint64_t *)(v5 + *(int *)(v6 + 48));
      uint64_t v11 = (void *)(v5 + *(int *)(v6 + 64));
      sub_1001844B8((uint64_t)v4, v5, type metadata accessor for ExperienceEvent);
      *uint64_t v10 = v7;
      v10[1] = v9;
      *uint64_t v11 = 0;
      v11[1] = 0xE000000000000000;
      swift_bridgeObjectRetain();
      PassthroughSubject.send(_:)();
      sub_10000D78C(v5, (uint64_t *)&unk_10035E840);
      swift_bridgeObjectRelease();
      swift_release();
      sub_100184964((uint64_t)v4, type metadata accessor for ExperienceEvent);
    }
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_100183268()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1001832E4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v37 = v4;
  __chkstk_darwin(v4);
  uint64_t v35 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for ExperienceEffect(0);
  __chkstk_darwin(v40);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static OSSignpostID.exclusive.getter();
  static os_signpost_type_t.end.getter();
  if (qword_10035A528 != -1) {
    swift_once();
  }
  id v12 = (id)qword_1003AC758;
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  uint64_t v13 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v38 = v8;
  uint64_t v34 = v13;
  v13(v11, v8);
  unint64_t v43 = 0xD000000000000023;
  unint64_t v44 = 0x80000001002C1720;
  uint64_t v39 = a1;
  v14._uint64_t countAndFlagsBits = sub_10025B6EC();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  sub_10000C11C();
  id v15 = objc_allocWithZone((Class)CULogHandle);
  *(void *)&long long v33 = "WB because nearbyID exists";
  NSString v16 = String._bridgeToObjectiveC()();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v18 = [v15 initWithSubsystem:v16 category:v17];

  swift_bridgeObjectRetain();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v18 ulog:40 message:v19];
  swift_bridgeObjectRelease();

  swift_retain();
  CurrentValueSubject.value.getter();
  unsigned int v20 = v42;
  if ((~v42 & 0xFEFE) != 0)
  {
    swift_release();
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    unsigned int v20 = (unsigned __int16)v43;
  }
  if (v20 >> 13 == 3)
  {
    swift_retain();
    sub_1001BD8E4(24577);
    swift_release();
  }
  else if (v20 >> 13 == 2)
  {
    swift_retain();
    sub_1001BD8E4(v20 & 0x100 | 0x4001);
    swift_release();
    long long v33 = xmmword_10028F480;
    *(_OWORD *)uint64_t v7 = xmmword_10028F480;
    v7[16] = 0;
    swift_storeEnumTagMultiPayload();
    uint64_t v21 = v39;
    sub_100183E80((uint64_t)v7, v39);
    sub_100184964((uint64_t)v7, type metadata accessor for ExperienceEffect);
    *(_OWORD *)uint64_t v7 = v33;
    v7[16] = -125;
    swift_storeEnumTagMultiPayload();
    sub_100183E80((uint64_t)v7, v21);
    sub_100184964((uint64_t)v7, type metadata accessor for ExperienceEffect);
    uint64_t v22 = v35;
    uint64_t v23 = v36;
    uint64_t v24 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, *(void *)(v2 + 16) + OBJC_IVAR____TtC17proximitycontrold26Handoff3StateMachine3Model_sessionID, v37);
    sub_100116F18();
    OSSignpostID.init(_:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v22, v24);
    static os_signpost_type_t.begin.getter();
    id v25 = (id)qword_1003AC758;
    os_signpost(_:dso:log:name:signpostID:_:_:)();

    v34(v11, v38);
    if ((v20 & 0x100) != 0) {
      *uint64_t v7 = 2;
    }
    else {
      *uint64_t v7 = 3;
    }
    swift_storeEnumTagMultiPayload();
    sub_100183E80((uint64_t)v7, v21);
    sub_100184964((uint64_t)v7, type metadata accessor for ExperienceEffect);
  }
  else
  {
    unint64_t v43 = 0;
    unint64_t v44 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    unint64_t v43 = 0xD000000000000013;
    unint64_t v44 = 0x80000001002C1750;
    swift_retain();
    CurrentValueSubject.value.getter();
    unsigned __int16 v26 = v41;
    if ((~v41 & 0xFEFE) != 0)
    {
      swift_release();
    }
    else
    {
      CurrentValueSubject.value.getter();
      swift_release();
      unsigned __int16 v26 = v42;
    }
    v27._uint64_t countAndFlagsBits = sub_10025B420(v26);
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    sub_10000C11C();
    id v28 = objc_allocWithZone((Class)CULogHandle);
    NSString v29 = String._bridgeToObjectiveC()();
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v31 = [v28 initWithSubsystem:v29 category:v30];

    swift_bridgeObjectRetain();
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v31 ulog:90 message:v32];
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100183A14(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for ExperienceEffect(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C11C();
  id v7 = objc_allocWithZone((Class)CULogHandle);
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithSubsystem:v8 category:v9];

  NSString v11 = String._bridgeToObjectiveC()();
  [v10 ulog:40 message:v11];

  swift_retain();
  CurrentValueSubject.value.getter();
  unsigned int v12 = v23;
  if ((~v23 & 0xFEFE) != 0)
  {
    swift_release();
    if (a2) {
      goto LABEL_12;
    }
  }
  else
  {
    CurrentValueSubject.value.getter();
    swift_release();
    unsigned int v12 = v20[0];
    if (a2) {
      goto LABEL_12;
    }
  }
  unsigned __int8 v13 = sub_10003E708();
  if (v13 == 4) {
    unsigned __int8 v14 = 0;
  }
  else {
    unsigned __int8 v14 = v13;
  }
  sub_10003C908();
  char v15 = sub_1001E1728();
  swift_release();
  if (v15)
  {
    if (v14 >= 2u) {
      goto LABEL_10;
    }
LABEL_12:
    swift_retain();
    __int16 v16 = -32512;
    goto LABEL_13;
  }
  if (!v14) {
    goto LABEL_12;
  }
LABEL_10:
  swift_retain();
  __int16 v16 = 0;
LABEL_13:
  sub_1001BD8E4(v16);
  swift_release();
  *uint64_t v6 = 4;
  swift_storeEnumTagMultiPayload();
  sub_100183E80((uint64_t)v6, a1);
  sub_100184964((uint64_t)v6, type metadata accessor for ExperienceEffect);
  *(_OWORD *)uint64_t v6 = xmmword_10028F480;
  v6[16] = 0;
  swift_storeEnumTagMultiPayload();
  sub_100183E80((uint64_t)v6, a1);
  sub_100184964((uint64_t)v6, type metadata accessor for ExperienceEffect);
  BOOL v17 = (v12 >> 13) - 2 < 2 || v12 >> 13 == 4 && v12 == 32769;
  *(void *)uint64_t v6 = v17;
  *((void *)v6 + 1) = 0;
  v6[16] = -125;
  swift_storeEnumTagMultiPayload();
  sub_100183E80((uint64_t)v6, a1);
  sub_100184964((uint64_t)v6, type metadata accessor for ExperienceEffect);
  *uint64_t v6 = 5;
  swift_storeEnumTagMultiPayload();
  sub_100183E80((uint64_t)v6, a1);
  sub_100184964((uint64_t)v6, type metadata accessor for ExperienceEffect);
  *uint64_t v6 = 3;
  swift_storeEnumTagMultiPayload();
  sub_100183E80((uint64_t)v6, a1);
  sub_100184964((uint64_t)v6, type metadata accessor for ExperienceEffect);
  *(void *)uint64_t v6 = 2;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  v6[24] = 4;
  swift_storeEnumTagMultiPayload();
  sub_100183E80((uint64_t)v6, a1);
  sub_100184964((uint64_t)v6, type metadata accessor for ExperienceEffect);
  uint64_t v21 = &type metadata for Feature;
  unint64_t v22 = sub_10000CC08();
  LOBYTE(v20[0]) = 9;
  char v18 = isFeatureEnabled(_:)();
  uint64_t result = sub_10000CC5C((uint64_t)v20);
  if (v18)
  {
    *uint64_t v6 = 2;
    swift_storeEnumTagMultiPayload();
    sub_100183E80((uint64_t)v6, a1);
    sub_100184964((uint64_t)v6, type metadata accessor for ExperienceEffect);
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
    *(void *)uint64_t v6 = 0;
    v6[24] = 3;
    swift_storeEnumTagMultiPayload();
    sub_100183E80((uint64_t)v6, a1);
    return sub_100184964((uint64_t)v6, type metadata accessor for ExperienceEffect);
  }
  return result;
}

uint64_t sub_100183E80(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10035EDB0);
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = 0x45208FB8EF90ADE2;
  unint64_t v17 = 0xAD0000203A74696DLL;
  v7._uint64_t countAndFlagsBits = sub_10025C5BC();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  sub_10000C11C();
  id v8 = objc_allocWithZone((Class)CULogHandle);
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v8 initWithSubsystem:v9 category:v10];

  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:40 message:v12];
  swift_bridgeObjectRelease();

  sub_1001844B8(a1, (uint64_t)v6, type metadata accessor for ExperienceEffect);
  sub_1001844B8(v15, (uint64_t)&v6[*(int *)(v4 + 44)], type metadata accessor for ExperienceEvent);
  PassthroughSubject.send(_:)();
  return sub_10000D78C((uint64_t)v6, &qword_10035EDB0);
}

uint64_t sub_100184084()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Handoff3StateMachine3()
{
  return self;
}

uint64_t sub_1001840F8()
{
  return 45;
}

uint64_t sub_1001841B0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1000B4664(a1, WitnessTable);
}

uint64_t sub_100184204(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100184654(&qword_10036A290, a2, (void (*)(uint64_t))type metadata accessor for Handoff3StateMachine3);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10018425C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100184294()
{
  uint64_t v1 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100184384(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContinuousClock.Instant() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  NSString v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *NSString v12 = v2;
  v12[1] = sub_100076840;
  return sub_100182BFC(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_1001844B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100184520(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 - 7 >= 2) {
    return sub_100184534(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_100184534(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100184588(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 - 7 >= 2) {
    return sub_10018459C(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_10018459C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 7)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001845F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PermissionToHandoff();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100184654(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10018469C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10036A298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100184704()
{
  uint64_t v1 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = ((((v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);
  swift_release();

  return _swift_deallocObject(v0, v8, v6);
}

uint64_t sub_100184814(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContinuousClock.Instant() - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = (v7 + v5 + v6) & ~v5;
  unint64_t v9 = (v7 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = v1 + v8;
  uint64_t v14 = *(void *)(v1 + v9);
  uint64_t v15 = *(void *)(v1 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v16;
  *uint64_t v16 = v2;
  v16[1] = sub_10007EB64;
  return sub_100180358(a1, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_100184964(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001849C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10036A298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for ActivityType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100184AF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivityType()
{
  return &type metadata for ActivityType;
}

uint64_t sub_100184B30(char a1, char a2)
{
  if (a1 == a2)
  {
    int v2 = 0;
    return v2 ^ 1u;
  }
  sub_10000A38C(&qword_10036A2F0);
  if (!a1 || !a2)
  {
    BOOL v5 = a1 == 0;
    goto LABEL_18;
  }
  if (a1 == 4 || a2 == 4)
  {
    BOOL v5 = a1 == 4;
    goto LABEL_18;
  }
  if (a1 == 1 || a2 == 1)
  {
    BOOL v5 = a1 == 1;
    goto LABEL_18;
  }
  if (a1 == 2 || a2 == 2)
  {
    BOOL v5 = a1 == 2;
LABEL_18:
    int v2 = v5;
    return v2 ^ 1u;
  }
  if (a1 == 3 || a2 == 3)
  {
    BOOL v5 = a1 == 3;
    goto LABEL_18;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

BOOL sub_100184C1C()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = enum case for DispatchTimeInterval.never(_:);
  BOOL v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v5(v3, enum case for DispatchTimeInterval.never(_:), v0);
  char v6 = static DispatchTimeInterval.== infix(_:_:)();
  uint64_t v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v3, v0);
  if (v6) {
    return 1;
  }
  v5(v3, v4, v0);
  char v9 = static DispatchTimeInterval.== infix(_:_:)();
  v7(v3, v0);
  if (v9) {
    return 0;
  }
  uint64_t v10 = sub_10020380C();
  return v10 >= sub_10020380C();
}

uint64_t sub_100184D9C(char a1, char a2)
{
  if (a2 == a1) {
    return 0;
  }
  sub_10000A38C(&qword_10036A2F0);
  if (a1 && a2)
  {
    if (a1 == 4 || a2 == 4)
    {
      return a2 == 4;
    }
    else if (a1 == 1 || a2 == 1)
    {
      return a2 == 1;
    }
    else if (a1 == 2 || a2 == 2)
    {
      return a2 == 2;
    }
    else
    {
      if (a1 != 3 && a2 != 3)
      {
        uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        return result;
      }
      return a2 == 3;
    }
  }
  else
  {
    return a2 == 0;
  }
}

uint64_t sub_100184E94(char a1, char a2)
{
  if (a2 == a1)
  {
    int v2 = 0;
    return v2 ^ 1u;
  }
  sub_10000A38C(&qword_10036A2F0);
  if (!a1 || !a2)
  {
    BOOL v5 = a2 == 0;
    goto LABEL_18;
  }
  if (a1 == 4 || a2 == 4)
  {
    BOOL v5 = a2 == 4;
    goto LABEL_18;
  }
  if (a1 == 1 || a2 == 1)
  {
    BOOL v5 = a2 == 1;
    goto LABEL_18;
  }
  if (a1 == 2 || a2 == 2)
  {
    BOOL v5 = a2 == 2;
LABEL_18:
    int v2 = v5;
    return v2 ^ 1u;
  }
  if (a1 == 3 || a2 == 3)
  {
    BOOL v5 = a2 == 3;
    goto LABEL_18;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

BOOL sub_100184F90()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = enum case for DispatchTimeInterval.never(_:);
  BOOL v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v5(v3, enum case for DispatchTimeInterval.never(_:), v0);
  char v6 = static DispatchTimeInterval.== infix(_:_:)();
  uint64_t v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v3, v0);
  if (v6) {
    return 1;
  }
  v5(v3, v4, v0);
  char v9 = static DispatchTimeInterval.== infix(_:_:)();
  v7(v3, v0);
  if (v9) {
    return 0;
  }
  uint64_t v10 = sub_10020380C();
  return v10 >= sub_10020380C();
}

void sub_100185110(void *a1@<X8>)
{
  *a1 = &off_10031E508;
}

unint64_t sub_100185124()
{
  unint64_t result = qword_10036A2D8;
  if (!qword_10036A2D8)
  {
    sub_10000A3D0(&qword_10036A2E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A2D8);
  }
  return result;
}

unint64_t sub_100185184()
{
  unint64_t result = qword_10036A2E8;
  if (!qword_10036A2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A2E8);
  }
  return result;
}

uint64_t sub_1001851D8(char *a1, char *a2)
{
  return sub_1001852D8(*a1, *a2);
}

uint64_t sub_1001851E4(char *a1, char *a2)
{
  return sub_100184E94(*a1, *a2);
}

uint64_t sub_1001851F0(char *a1, char *a2)
{
  return sub_100184B30(*a1, *a2);
}

uint64_t sub_1001851FC(char *a1, char *a2)
{
  return sub_100184D9C(*a1, *a2);
}

unint64_t sub_100185208()
{
  unint64_t result = 0x41746E6572727563;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x4D746E6572727563;
      break;
    case 3:
      unint64_t result = 0x43746E6572727563;
      break;
    case 4:
      unint64_t result = 0x54746E6572727563;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001852D8(char a1, char a2)
{
  if (a1 == a2) {
    return 0;
  }
  sub_10000A38C(&qword_10036A2F0);
  if (a1 && a2)
  {
    if (a1 == 4 || a2 == 4)
    {
      return a1 == 4;
    }
    else if (a1 == 1 || a2 == 1)
    {
      return a1 == 1;
    }
    else if (a1 == 2 || a2 == 2)
    {
      return a1 == 2;
    }
    else
    {
      if (a1 != 3 && a2 != 3)
      {
        uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        return result;
      }
      return a1 == 3;
    }
  }
  else
  {
    return a1 == 0;
  }
}

uint64_t sub_1001853C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  if (a1 == 0xD000000000000029 && 0x80000001002BB550 == a2) {
    goto LABEL_15;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    uint64_t v4 = 1;
    if (a1 == 0xD00000000000002FLL && 0x80000001002BB520 == a2) {
      goto LABEL_15;
    }
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
    {
      uint64_t v4 = 2;
      if (a1 == 0xD000000000000029 && 0x80000001002BB4F0 == a2) {
        goto LABEL_15;
      }
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
      {
        uint64_t v4 = 3;
        if (a1 == 0xD000000000000028 && 0x80000001002BB4C0 == a2) {
          goto LABEL_15;
        }
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v8 & 1) == 0)
        {
          uint64_t v4 = 4;
          if (a1 == 0xD000000000000029 && 0x80000001002BB490 == a2)
          {
LABEL_15:
            swift_bridgeObjectRelease();
            return v4;
          }
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v10) {
            return 4;
          }
          else {
            return 5;
          }
        }
      }
    }
  }
  return v4;
}

uint64_t sub_1001857D0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  unint64_t v8 = a1;
  if (a1 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9)
    {
LABEL_3:
      uint64_t v24 = v9;
      unint64_t v28 = v8 & 0xC000000000000001;
      uint64_t v10 = 4;
      uint64_t v25 = a3;
      do
      {
        uint64_t v11 = v10 - 4;
        if (v28)
        {
          uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v13 = v10 - 3;
          if (__OFADD__(v11, 1)) {
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v12 = *(void *)(v8 + 8 * v10);
          swift_retain();
          uint64_t v13 = v10 - 3;
          if (__OFADD__(v11, 1))
          {
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        uint64_t v14 = sub_100098C94();
        swift_release();
        if (a3 && (sub_10019C160(a2, a3, (uint64_t)v14) & 1) != 0)
        {
          swift_bridgeObjectRelease();
LABEL_25:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_29;
        }
        if (a5)
        {
          char v15 = sub_10019C160(a4, a5, (uint64_t)v14);
          swift_bridgeObjectRelease();
          if (v15) {
            goto LABEL_25;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v16 = *a6;
        if (*a6)
        {
          unint64_t v17 = v8;
          uint64_t v18 = a5;
          swift_getKeyPath();
          swift_getKeyPath();
          id v19 = v16;
          static Published.subscript.getter();
          swift_release();
          swift_release();
          unsigned int v20 = *(void **)(v30 + OBJC_IVAR____TtC17proximitycontrold8Identity_nearbyID);
          id v21 = v20;
          swift_release();
          if (v20)
          {
            unsigned __int8 v22 = [v19 isEqual:v21];

            if (v22) {
              goto LABEL_25;
            }
            swift_release();
          }
          else
          {
            swift_release();
          }
          a5 = v18;
          unint64_t v8 = v17;
          uint64_t v9 = v24;
          a3 = v25;
        }
        else
        {
          swift_release();
        }
        ++v10;
      }
      while (v13 != v9);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = 0;
LABEL_29:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100185AC8(unint64_t a1, void *a2)
{
  if (a1 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      uint64_t v5 = 4;
      do
      {
        uint64_t v6 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v8 = v5 - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(a1 + 8 * v5);
          swift_retain();
          uint64_t v8 = v5 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        char v9 = sub_1001BBF1C(v11);
        swift_release();
        if (v9)
        {

          swift_bridgeObjectRelease();
          return v7;
        }
        swift_release();
        ++v5;
      }
      while (v8 != v4);
    }
  }

  swift_bridgeObjectRelease();
  return 0;
}

id sub_100185C58()
{
  id v1 = sub_1001F5E20();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  id v3 = sub_1001F5E20();
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 ulog:40 message:v4];

  uint64_t v5 = OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLClient;
  uint64_t v6 = *(void **)&v0[OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLClient];
  if (v6)
  {
    [v6 invalidate];
    uint64_t v7 = *(void **)&v0[v5];
    *(void *)&v0[v5] = 0;
  }
  sub_100187F94();
  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for RapportProxy();
  return [super dealloc];
}

uint64_t sub_100185E78()
{
  uint64_t ObjectType = swift_getObjectType();
  id v2 = sub_1001F5E20();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  sub_1001865E4();
  sub_100186D30();
  id v4 = [objc_allocWithZone((Class)RPCompanionLinkClient) init];
  [v4 setControlFlags:6];
  [v4 setDispatchQueue:*(void *)&v0[OBJC_IVAR____TtC17proximitycontrold12RapportProxy_dispatchQueue]];
  [v4 setFlags:1];
  uint64_t v6 = *(void *)&v0[OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLDeviceDiscoverySubject];
  uint64_t v5 = *(void *)&v0[OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLDeviceDiscoverySubject + 8];
  uint64_t v7 = *(void *)&v0[OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLDeviceDiscoverySubject + 16];
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v6;
  v8[3] = v5;
  v8[4] = v7;
  void v8[5] = ObjectType;
  unint64_t v43 = sub_10018B35C;
  unint64_t v44 = v8;
  aBlock = _NSConcreteStackBlock;
  uint64_t v40 = 1107296256;
  unsigned __int16 v41 = sub_10004B62C;
  unsigned __int16 v42 = &unk_10032C208;
  objc_super v9 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_retain_n();
  swift_release();
  [v4 setDeviceFoundHandler:v9];
  _Block_release(v9);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v6;
  v10[3] = v5;
  v10[4] = v7;
  v10[5] = ObjectType;
  unint64_t v43 = sub_10018B3B4;
  unint64_t v44 = v10;
  aBlock = _NSConcreteStackBlock;
  uint64_t v40 = 1107296256;
  unsigned __int16 v41 = sub_10004B62C;
  unsigned __int16 v42 = &unk_10032C258;
  uint64_t v11 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  [v4 setDeviceLostHandler:v11];
  _Block_release(v11);
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = ObjectType;
  unint64_t v43 = sub_10018B430;
  unint64_t v44 = (void *)v13;
  aBlock = _NSConcreteStackBlock;
  uint64_t v40 = 1107296256;
  unsigned __int16 v41 = sub_1001879E4;
  unsigned __int16 v42 = &unk_10032C2D0;
  uint64_t v14 = _Block_copy(&aBlock);
  swift_release();
  [v4 setDeviceChangedHandler:v14];
  _Block_release(v14);
  sub_10000A38C(&qword_10036A390);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028D430;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v16;
  *(unsigned char *)(inited + 48) = 1;
  unint64_t v17 = sub_100269374(inited);
  NSString v18 = String._bridgeToObjectiveC()();
  sub_1001B94FC(v17);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v0;
  unint64_t v43 = sub_10018B438;
  unint64_t v44 = (void *)v20;
  aBlock = _NSConcreteStackBlock;
  uint64_t v40 = 1107296256;
  unsigned __int16 v41 = sub_100187A58;
  unsigned __int16 v42 = &unk_10032C320;
  id v21 = _Block_copy(&aBlock);
  unsigned __int8 v22 = v0;
  swift_release();
  [v4 registerEventID:v18 options:isa handler:v21];
  _Block_release(v21);

  NSString v23 = String._bridgeToObjectiveC()();
  sub_1001B94FC(v17);
  Class v24 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v22;
  unint64_t v43 = sub_10018B494;
  unint64_t v44 = (void *)v25;
  aBlock = _NSConcreteStackBlock;
  uint64_t v40 = 1107296256;
  unsigned __int16 v41 = sub_100187B1C;
  unsigned __int16 v42 = &unk_10032C370;
  unsigned __int16 v26 = _Block_copy(&aBlock);
  Swift::String v27 = v22;
  swift_release();
  [v4 registerRequestID:v23 options:v24 handler:v26];
  _Block_release(v26);

  NSString v28 = String._bridgeToObjectiveC()();
  sub_1001B94FC(v17);
  swift_bridgeObjectRelease();
  Class v29 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v27;
  unint64_t v43 = sub_10018B4B8;
  unint64_t v44 = (void *)v30;
  aBlock = _NSConcreteStackBlock;
  uint64_t v40 = 1107296256;
  unsigned __int16 v41 = sub_100187B1C;
  unsigned __int16 v42 = &unk_10032C3C0;
  id v31 = _Block_copy(&aBlock);
  NSString v32 = v27;
  swift_release();
  [v4 registerRequestID:v28 options:v29 handler:v31];
  _Block_release(v31);

  long long v33 = *(void **)&v32[OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLClient];
  *(void *)&v32[OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLClient] = v4;
  id v34 = v4;

  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = v34;
  *(void *)(v35 + 24) = ObjectType;
  sub_10000A38C((uint64_t *)&unk_100363D00);
  swift_allocObject();
  id v36 = v34;
  uint64_t v37 = Future.init(_:)();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v37;
}

uint64_t sub_1001865E4()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v36 = *(void *)(v2 - 8);
  uint64_t v37 = v2;
  __chkstk_darwin(v2);
  Class v29 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10036A398);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036A3A0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000A38C(&qword_10036A3A8);
  uint64_t v30 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000A38C(&qword_10036A3B0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v31 = v14;
  uint64_t v32 = v15;
  __chkstk_darwin(v14);
  Swift::String v27 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = (void *)(v1 + OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLDeviceDiscoverySubject);
  uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLDeviceDiscoverySubject + 8);
  uint64_t v39 = *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLDeviceDiscoverySubject);
  uint64_t v40 = v17;
  swift_retain();
  swift_retain();
  uint64_t v18 = sub_10000A38C(&qword_100366578);
  uint64_t v33 = sub_10000B010(&qword_100366580, &qword_100366578);
  uint64_t v34 = v18;
  Publishers.Merge.init(_:_:)();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_10000A38C(&qword_10036A3B8);
  sub_10000B010(&qword_10036A3C0, &qword_10036A398);
  Publisher.compactMap<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_10000B010(&qword_10036A3C8, &qword_10036A3A0);
  sub_10018B5E0();
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  id v19 = v29;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  uint64_t v39 = *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold12RapportProxy_dispatchQueue);
  sub_100019E10(0, (unint64_t *)&qword_10035A680);
  sub_10000B010(&qword_10036A3D8, &qword_10036A3A8);
  sub_1000713A8((unint64_t *)&qword_10035AC60, (unint64_t *)&qword_10035A680);
  id v21 = v27;
  uint64_t v20 = v28;
  Publisher.throttle<A>(for:scheduler:latest:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v37);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v20);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_10000B010(&qword_10036A3E0, &qword_10036A3B0);
  uint64_t v22 = v31;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v21, v22);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  NSString v23 = v35;
  uint64_t v39 = *v35;
  uint64_t v24 = swift_allocObject();
  uint64_t v25 = ObjectType;
  *(void *)(v24 + 16) = ObjectType;
  swift_retain();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v39 = v23[1];
  *(void *)(swift_allocObject() + 16) = v25;
  swift_retain();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

void sub_100186D30()
{
  int DeviceClass = GestaltGetDeviceClass();
  if (DeviceClass == 7 || DeviceClass == 4)
  {
    uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold12RapportProxy_airplayPrefs);
    if (v2)
    {
      id v3 = v2;
      id v4 = sub_1001F5E20();
      NSString v5 = String._bridgeToObjectiveC()();
      [v4 ulog:40 message:v5];

      NSString v6 = String._bridgeToObjectiveC()();
      [v3 addObserver:v0 forKeyPath:v6 options:1 context:0];

      NSString v7 = String._bridgeToObjectiveC()();
      [v3 addObserver:v0 forKeyPath:v7 options:1 context:0];
    }
  }
}

uint64_t sub_100186E7C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7 = [a1 description];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  sub_10016ABE4(0x20444E554F46, (void *)0xE600000000000000, 0, a5, (uint64_t)&off_10032C040);
  swift_bridgeObjectRelease();
  uint64_t result = sub_100186F54(a1);
  if ((result & 1) == 0) {
    return PassthroughSubject.send(_:)();
  }
  return result;
}

uint64_t sub_100186F54(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036C090);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v11 = [a1 statusFlags];
  unint64_t v12 = (unint64_t)[a1 statusFlags];
  if ((v11 & 4) != 0 && (v12 & 0x800000000) == 0)
  {
    uint64_t v13 = (void *)0x80000001002C1BD0;
    uint64_t v14 = 0xD00000000000001DLL;
LABEL_4:
    sub_10016ABE4(v14, v13, 0, v2, (uint64_t)&off_10032C040);
    return 1;
  }
  uint64_t v26 = v5;
  if (qword_10035A550 != -1) {
    swift_once();
  }
  swift_retain();
  swift_retain();
  CurrentValueSubject.value.getter();
  uint64_t v16 = v27;
  if (v27 == 2)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    swift_release();
    uint64_t v17 = v31;
    uint64_t v18 = v32;
    if (v30 == 1) {
      return 0;
    }
  }
  else
  {
    uint64_t v17 = v28;
    uint64_t v18 = v29;
    swift_release();
    swift_release();
    if (v16 == 1) {
      return 0;
    }
  }
  if (v18)
  {
    if (v17 == 0x466957656C707041 && v18 == 0xEF65727563655369)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v19 & 1) == 0) {
        return result;
      }
    }
    id v20 = [a1 homeKitIdentifier];
    if (v20)
    {
      id v21 = v20;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v22 = v26;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v10, v7, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v10, 1, v4) != 1)
      {
        sub_10000D78C((uint64_t)v10, &qword_10036C090);
        return 0;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v10, 1, 1, v4);
    }
    sub_10000D78C((uint64_t)v10, &qword_10036C090);
    if (qword_10035A520 != -1) {
      swift_once();
    }
    id v23 = *(id *)(qword_1003AC750 + 288);
    char v24 = sub_1000FD938();

    if ((v24 & 1) == 0)
    {
      uint64_t v14 = 0xD000000000000031;
      uint64_t v13 = (void *)0x80000001002C1B90;
      goto LABEL_4;
    }
    return 0;
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100187378(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7 = [a1 description];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  sub_10016ABE4(0x2054534F4CLL, (void *)0xE500000000000000, 0, a5, (uint64_t)&off_10032C040);
  swift_bridgeObjectRelease();
  uint64_t result = sub_100186F54(a1);
  if ((result & 1) == 0) {
    return PassthroughSubject.send(_:)();
  }
  return result;
}

void sub_100187450(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    id v9 = [a1 description];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    v13._uint64_t countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    sub_10016ABE4(0x204445474E414843, (void *)0xE800000000000000, 0, a4, (uint64_t)&off_10032C040);
    swift_bridgeObjectRelease();
    if ((sub_100186F54(a1) & 1) == 0 && (a2 & 2) != 0) {
      sub_100187564(a1);
    }
  }
}

void sub_100187564(void *a1)
{
  uint64_t v2 = type metadata accessor for DiscoveryTokenStateMachine.Input(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v40 = 0xD000000000000026;
  unint64_t v41 = 0x80000001002C1B20;
  id v5 = [a1 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  v9._uint64_t countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  id v10 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 ulog:40 message:v11];
  swift_bridgeObjectRelease();

  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_4;
  }
  Swift::String v13 = (void *)Strong;
  uint64_t v14 = *(void *)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent_state) + 16);
  uint64_t v15 = *(void **)(v14 + 32);
  id v16 = a1;
  swift_retain();
  [v15 lock];
  swift_beginAccess();
  uint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = sub_1000F06FC(v17);
  swift_bridgeObjectRelease();
  [*(id *)(v14 + 32) unlock];
  swift_release();
  uint64_t v19 = sub_100185AC8((unint64_t)v18, v16);

  swift_release();
  if (v19)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_100099D0C(v16);
    swift_release();
    type metadata accessor for DiscoveryTokenStateMachine(0);
    sub_1000126C8(v4);
    unint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v38 = 0xD000000000000019;
    unint64_t v39 = 0x80000001002B4090;
    v20._uint64_t countAndFlagsBits = sub_100013C14();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 0x203A6F742027;
    v21._object = (void *)0xE600000000000000;
    String.append(_:)(v21);
    swift_retain();
    uint64_t v22 = sub_1001F7514();
    char v24 = v23;
    swift_release();
    v25._uint64_t countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    id v26 = sub_1001F5E20();
    swift_bridgeObjectRetain();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v26 ulog:40 message:v27];
    swift_bridgeObjectRelease();

    swift_beginAccess();
    sub_100157294((uint64_t)v4);
    swift_endAccess();
    swift_release();
    sub_100014F00((uint64_t)v4);
  }
  else
  {
LABEL_4:
    unint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(58);
    v28._uint64_t countAndFlagsBits = 0xD000000000000038;
    v28._object = (void *)0x80000001002C1B50;
    String.append(_:)(v28);
    id v29 = [a1 identifier];
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;
    }
    else
    {
      uint64_t v33 = (void *)0xE100000000000000;
      uint64_t v31 = 63;
    }
    v34._uint64_t countAndFlagsBits = v31;
    v34._object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    id v35 = sub_1001F5E20();
    swift_bridgeObjectRetain();
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v35 ulog:60 message:v36];
    swift_bridgeObjectRelease();
  }
}

void sub_1001879E4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100187A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (a3) {
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v4(v5, a3);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100187B1C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, objc_class *, uint64_t), uint64_t))(a1 + 32);
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (a3) {
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v8 = _Block_copy(a4);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  swift_retain();
  v6(v7, a3, sub_10018B5D0, v9);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_100187C2C(uint64_t a1, objc_class *a2, uint64_t a3, uint64_t a4)
{
  Class isa = a2;
  if (a1)
  {
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    if (!isa) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  v7.super.Class isa = 0;
  if (a2) {
LABEL_3:
  }
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
LABEL_4:
  if (a3) {
    uint64_t v8 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = (id)v8;
  (*(void (**)(uint64_t, Class, Class))(a4 + 16))(a4, v7.super.isa, isa);
}

void sub_100187D14(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  id v9 = (void *)swift_allocObject();
  void v9[2] = sub_1000CF728;
  v9[3] = v8;
  unsigned char v9[4] = a4;
  v11[4] = sub_10018B58C;
  v11[5] = v9;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_100119FC4;
  v11[3] = &unk_10032C460;
  id v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  [a3 activateWithCompletion:v10];
  _Block_release(v10);
}

uint64_t sub_100187E34(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    swift_errorRetain();
    _StringGuts.grow(_:)(16);
    v7._uint64_t countAndFlagsBits = 0x6974634120232323;
    v7._object = (void *)0xEE00206465746176;
    String.append(_:)(v7);
    sub_10000A38C((uint64_t *)&unk_100365D60);
    _print_unlocked<A, B>(_:_:)();
    sub_10016AE10(90, 0, (void *)0xE000000000000000, 0, a4, (uint64_t)&off_10032C040);
    swift_bridgeObjectRelease();
    swift_errorRetain();
    a2(a1, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10016ABE4(0x6574617669746341, (void *)0xE900000000000064, 0, a4, (uint64_t)&off_10032C040);
    return ((uint64_t (*)(void, void))a2)(0, 0);
  }
}

void sub_100187F94()
{
  int DeviceClass = GestaltGetDeviceClass();
  if (DeviceClass == 7 || DeviceClass == 4)
  {
    uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold12RapportProxy_airplayPrefs);
    if (v2)
    {
      id v3 = v2;
      id v4 = sub_1001F5E20();
      NSString v5 = String._bridgeToObjectiveC()();
      [v4 ulog:40 message:v5];

      NSString v6 = String._bridgeToObjectiveC()();
      [v3 removeObserver:v0 forKeyPath:v6];

      NSString v7 = String._bridgeToObjectiveC()();
      [v3 removeObserver:v0 forKeyPath:v7];
    }
  }
}

uint64_t sub_1001880D4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    *(void *)&long long v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v27 + 1) = v2;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v1 + 16) && (unint64_t v3 = sub_100269E60((uint64_t)v26), (v4 & 1) != 0))
    {
      sub_100027B10(*(void *)(v1 + 56) + 32 * v3, (uint64_t)&v27);
    }
    else
    {
      long long v27 = 0u;
      long long v28 = 0u;
    }
    sub_1000BA108((uint64_t)v26);
    if (*((void *)&v28 + 1))
    {
      int v5 = swift_dynamicCast();
      if (v5) {
        uint64_t v6 = v24[0];
      }
      else {
        uint64_t v6 = 0;
      }
      if (v5) {
        uint64_t v7 = v24[1];
      }
      else {
        uint64_t v7 = 0;
      }
    }
    else
    {
      sub_10000D78C((uint64_t)&v27, &qword_100371910);
      uint64_t v6 = 0;
      uint64_t v7 = 0;
    }
    *(void *)&long long v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v27 + 1) = v8;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v1 + 16) && (unint64_t v9 = sub_100269E60((uint64_t)v26), (v10 & 1) != 0))
    {
      sub_100027B10(*(void *)(v1 + 56) + 32 * v9, (uint64_t)&v27);
    }
    else
    {
      long long v27 = 0u;
      long long v28 = 0u;
    }
    sub_1000BA108((uint64_t)v26);
    if (*((void *)&v28 + 1))
    {
      int v11 = swift_dynamicCast();
      if (v11) {
        uint64_t v12 = v24[0];
      }
      else {
        uint64_t v12 = 0;
      }
      if (v11) {
        uint64_t v13 = v24[1];
      }
      else {
        uint64_t v13 = 0;
      }
    }
    else
    {
      sub_10000D78C((uint64_t)&v27, &qword_100371910);
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    strcpy((char *)v24, "rangingToken");
    BYTE5(v24[1]) = 0;
    HIWORD(v24[1]) = -5120;
    Swift::String v25 = 0;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v1 + 16) && (unint64_t v14 = sub_100269E60((uint64_t)v26), (v15 & 1) != 0))
    {
      sub_100027B10(*(void *)(v1 + 56) + 32 * v14, (uint64_t)&v27);
    }
    else
    {
      long long v27 = 0u;
      long long v28 = 0u;
    }
    sub_1000BA108((uint64_t)v26);
    if (*((void *)&v28 + 1))
    {
      if (swift_dynamicCast())
      {
        sub_100019E10(0, (unint64_t *)&qword_10036AF80);
        id v16 = (void *)sub_10016C184();
        sub_10000DBEC(v24[0], v24[1]);

        Swift::String v25 = v16;
        goto LABEL_35;
      }
    }
    else
    {
      sub_10000D78C((uint64_t)&v27, &qword_100371910);
    }
    id v16 = 0;
LABEL_35:
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v18 = (void *)Strong;
      uint64_t v19 = *(void *)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent_state) + 16);
      Swift::String v20 = *(void **)(v19 + 32);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      [v20 lock];
      swift_beginAccess();
      uint64_t v21 = swift_bridgeObjectRetain();
      uint64_t v22 = sub_1000F06FC(v21);
      swift_bridgeObjectRelease();
      [*(id *)(v19 + 32) unlock];
      swift_release();
      uint64_t v1 = sub_1001857D0((unint64_t)v22, v6, v7, v12, v13, &v25);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v1;
}

uint64_t sub_1001884A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, void (*a7)(void, void, uint64_t), uint64_t a8)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v15 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnectionFuture;
  if (*(void *)(a3 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnectionFuture)) {
    goto LABEL_2;
  }
  uint64_t v26 = sub_10018AA4C(a3);
  if (v26)
  {
    uint64_t v27 = v26;
  }
  else
  {
    if (*(void *)(a3 + v15))
    {
LABEL_2:
      swift_retain();
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      v16._uint64_t countAndFlagsBits = a1;
      v16._object = a2;
      String.append(_:)(v16);
      v17._uint64_t countAndFlagsBits = 544175136;
      v17._object = (void *)0xE400000000000000;
      String.append(_:)(v17);
      v18._uint64_t countAndFlagsBits = sub_1001F7514();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      uint64_t v31 = a4;
      id v19 = sub_1001F5E20();
      swift_bridgeObjectRetain();
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v19 ulog:40 message:v20];
      swift_bridgeObjectRelease();

      uint64_t v21 = (void *)swift_allocObject();
      void v21[2] = a1;
      v21[3] = a2;
      v21[4] = a3;
      v21[5] = a7;
      v21[6] = a8;
      v21[7] = ObjectType;
      uint64_t v22 = swift_allocObject();
      swift_weakInit();
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = a1;
      *(void *)(v23 + 32) = a2;
      *(void *)(v23 + 40) = v31;
      *(void *)(v23 + 48) = a5;
      *(void *)(v23 + 56) = a7;
      *(void *)(v23 + 64) = a8;
      *(unsigned char *)(v23 + 72) = a6 & 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      swift_retain();
      swift_bridgeObjectRetain();
      sub_10000A38C(&qword_10036A378);
      sub_10000B010(&qword_10036A380, &qword_10036A378);
      uint64_t v24 = Publisher.sink(receiveCompletion:receiveValue:)();
      swift_release();
      swift_release();
      swift_release();
      *(void *)(a3 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnectionTask) = v24;
      return swift_release();
    }
    id v28 = sub_1001F5E20();
    NSString v29 = String._bridgeToObjectiveC()();
    [v28 ulog:40 message:v29];

    sub_10001A050();
    uint64_t v27 = swift_allocError();
    *(void *)uint64_t v30 = 0xD000000000000014;
    *(void *)(v30 + 8) = 0x80000001002C19D0;
    *(unsigned char *)(v30 + 16) = 9;
  }
  a7(0, 0, v27);

  return swift_errorRelease();
}

uint64_t *sub_100188864(uint64_t *result, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void, void, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *result;
  if (*result)
  {
    swift_errorRetain();
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    strcpy((char *)v15, "### request ");
    BYTE5(v15[1]) = 0;
    HIWORD(v15[1]) = -5120;
    v12._uint64_t countAndFlagsBits = a2;
    v12._object = a3;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = 0x2064656C69616620;
    v13._object = (void *)0xEB00000000206F74;
    String.append(_:)(v13);
    v14._uint64_t countAndFlagsBits = sub_1001F7514();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    sub_10016AE10(90, v15[0], (void *)v15[1], 0, a7, (uint64_t)&off_10032C040);
    swift_bridgeObjectRelease();
    swift_errorRetain();
    a5(0, 0, v7);
    swift_errorRelease();
    return (uint64_t *)swift_errorRelease();
  }
  return result;
}

void sub_1001889D8(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, uint64_t a7, uint64_t a8, char a9)
{
  Swift::String v14 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    Swift::String v16 = *(void **)(Strong + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnection);
    *(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnection) = v14;
    id v17 = v14;
    swift_release();
  }
  NSString v18 = String._bridgeToObjectiveC()();
  sub_1001B8DC4(a5);
  v19.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (isa)
  {
    sub_1001B8DC4((uint64_t)isa);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a7;
  *(void *)(v20 + 24) = a8;
  *(unsigned char *)(v20 + 32) = a9 & 1;
  *(void *)(v20 + 40) = a2;
  aBlock[4] = sub_10018B348;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10026F9F0;
  aBlock[3] = &unk_10032C1B8;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v14 sendRequestID:v18 request:v19.super.isa options:isa responseHandler:v21];
  _Block_release(v21);
}

uint64_t sub_100188BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5, char a6)
{
  uint64_t result = a4();
  if ((a6 & 1) == 0)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      sub_100040734();
      return swift_release();
    }
  }
  return result;
}

void sub_100188D9C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = sub_10018B264;
  _OWORD v7[3] = v6;
  v7[4] = a3;
  v10[4] = sub_10018B2E4;
  v10[5] = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100119FC4;
  v10[3] = &unk_10032C168;
  uint64_t v8 = _Block_copy(v10);
  swift_retain();
  id v9 = a3;
  swift_release();
  [v9 activateWithCompletion:v8];
  _Block_release(v8);
}

uint64_t sub_100188EB8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return a2(a4, 0);
  }
  swift_errorRetain();
  a2(a1, 1);

  return swift_errorRelease();
}

void sub_100188F34(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong
    && (unint64_t v3 = (void *)Strong,
        char v4 = *(void **)(Strong + OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLClient),
        id v5 = v4,
        v3,
        v4))
  {
    id v6 = [v5 activeDevices];

    sub_100019E10(0, &qword_10035E350);
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a1 = v7;
}

void sub_100189000()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    uint64_t v2 = (char *)swift_unknownObjectWeakLoadStrong();

    if (v2)
    {
      id v3 = *(id *)&v2[OBJC_IVAR____TtC17proximitycontrold11NearbyAgent_telephonyProxy];
      sub_1001C419C();
    }
  }
}

uint64_t RPStatusFlags.description.getter(uint64_t a1)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v2 = (char *)_swiftEmptyArrayStorage;
    if ((a1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  uint64_t v2 = sub_10008892C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  id v5 = &v2[16 * v4];
  *((void *)v5 + 4) = 0x657069507462;
  *((void *)v5 + 5) = 0xE600000000000000;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v7 = *((void *)v2 + 2);
    unint64_t v6 = *((void *)v2 + 3);
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_10008892C((char *)(v6 > 1), v7 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v7 + 1;
    uint64_t v8 = &v2[16 * v7];
    *((void *)v8 + 4) = 6646882;
    *((void *)v8 + 5) = 0xE300000000000000;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v10 = *((void *)v2 + 2);
    unint64_t v9 = *((void *)v2 + 3);
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_10008892C((char *)(v9 > 1), v10 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v10 + 1;
    int v11 = &v2[16 * v10];
    *((void *)v11 + 4) = 0x6172666E69;
    *((void *)v11 + 5) = 0xE500000000000000;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0) {
        goto LABEL_15;
      }
      goto LABEL_27;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v13 = *((void *)v2 + 2);
  unint64_t v12 = *((void *)v2 + 3);
  if (v13 >= v12 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v12 > 1), v13 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v13 + 1;
  Swift::String v14 = &v2[16 * v13];
  *((void *)v14 + 4) = 1818523489;
  *((void *)v14 + 5) = 0xE400000000000000;
  if ((a1 & 0x10) == 0)
  {
LABEL_15:
    if ((a1 & 0x20) == 0) {
      goto LABEL_37;
    }
    goto LABEL_32;
  }
LABEL_27:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v16 = *((void *)v2 + 2);
  unint64_t v15 = *((void *)v2 + 3);
  if (v16 >= v15 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v15 > 1), v16 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v16 + 1;
  id v17 = &v2[16 * v16];
  *((void *)v17 + 4) = 7233902;
  *((void *)v17 + 5) = 0xE300000000000000;
  if ((a1 & 0x20) != 0)
  {
LABEL_32:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v19 = *((void *)v2 + 2);
    unint64_t v18 = *((void *)v2 + 3);
    if (v19 >= v18 >> 1) {
      uint64_t v2 = sub_10008892C((char *)(v18 > 1), v19 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v19 + 1;
    uint64_t v20 = &v2[16 * v19];
    *((void *)v20 + 4) = 0x7065656C7361;
    *((void *)v20 + 5) = 0xE600000000000000;
  }
LABEL_37:
  if ((a1 & 0x40) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v23 = *((void *)v2 + 2);
    unint64_t v22 = *((void *)v2 + 3);
    if (v23 >= v22 >> 1) {
      uint64_t v2 = sub_10008892C((char *)(v22 > 1), v23 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v23 + 1;
    uint64_t v24 = &v2[16 * v23];
    *((void *)v24 + 4) = 0x6F696E61706D6F63;
    *((void *)v24 + 5) = 0xE90000000000006ELL;
    if ((a1 & 0x80) == 0)
    {
LABEL_39:
      if ((a1 & 0x100) == 0) {
        goto LABEL_40;
      }
      goto LABEL_71;
    }
  }
  else if ((a1 & 0x80) == 0)
  {
    goto LABEL_39;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v26 = *((void *)v2 + 2);
  unint64_t v25 = *((void *)v2 + 3);
  if (v26 >= v25 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v25 > 1), v26 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v26 + 1;
  uint64_t v27 = &v2[16 * v26];
  *((void *)v27 + 4) = 0x6C616E6F73726570;
  *((void *)v27 + 5) = 0xE800000000000000;
  if ((a1 & 0x100) == 0)
  {
LABEL_40:
    if ((a1 & 0x200) == 0) {
      goto LABEL_41;
    }
    goto LABEL_76;
  }
LABEL_71:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v29 = *((void *)v2 + 2);
  unint64_t v28 = *((void *)v2 + 3);
  if (v29 >= v28 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v28 > 1), v29 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v29 + 1;
  uint64_t v30 = &v2[16 * v29];
  *((void *)v30 + 4) = 0x636E795374657564;
  *((void *)v30 + 5) = 0xE800000000000000;
  if ((a1 & 0x200) == 0)
  {
LABEL_41:
    if ((a1 & 0x400) == 0) {
      goto LABEL_42;
    }
    goto LABEL_81;
  }
LABEL_76:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v32 = *((void *)v2 + 2);
  unint64_t v31 = *((void *)v2 + 3);
  if (v32 >= v31 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v31 > 1), v32 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v32 + 1;
  uint64_t v33 = &v2[16 * v32];
  *((void *)v33 + 4) = 0x70325069666977;
  *((void *)v33 + 5) = 0xE700000000000000;
  if ((a1 & 0x400) == 0)
  {
LABEL_42:
    if ((a1 & 0x800) == 0) {
      goto LABEL_43;
    }
    goto LABEL_86;
  }
LABEL_81:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v35 = *((void *)v2 + 2);
  unint64_t v34 = *((void *)v2 + 3);
  if (v35 >= v34 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v34 > 1), v35 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v35 + 1;
  NSString v36 = &v2[16 * v35];
  *((void *)v36 + 4) = 0x696475416576696CLL;
  *((void *)v36 + 5) = 0xE90000000000006FLL;
  if ((a1 & 0x800) == 0)
  {
LABEL_43:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_91;
  }
LABEL_86:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v38 = *((void *)v2 + 2);
  unint64_t v37 = *((void *)v2 + 3);
  if (v38 >= v37 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v37 > 1), v38 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v38 + 1;
  unint64_t v39 = &v2[16 * v38];
  *((void *)v39 + 4) = 0x65746F6D6572;
  *((void *)v39 + 5) = 0xE600000000000000;
  if ((a1 & 0x1000) == 0)
  {
LABEL_44:
    if ((a1 & 0x2000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_96;
  }
LABEL_91:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v41 = *((void *)v2 + 2);
  unint64_t v40 = *((void *)v2 + 3);
  if (v41 >= v40 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v40 > 1), v41 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v41 + 1;
  unsigned __int16 v42 = &v2[16 * v41];
  *((void *)v42 + 4) = 0x7473657567;
  *((void *)v42 + 5) = 0xE500000000000000;
  if ((a1 & 0x2000) == 0)
  {
LABEL_45:
    if ((a1 & 0x4000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_101;
  }
LABEL_96:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v44 = *((void *)v2 + 2);
  unint64_t v43 = *((void *)v2 + 3);
  if (v44 >= v43 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v43 > 1), v44 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v44 + 1;
  NSString v45 = &v2[16 * v44];
  *((void *)v45 + 4) = 1701670760;
  *((void *)v45 + 5) = 0xE400000000000000;
  if ((a1 & 0x4000) == 0)
  {
LABEL_46:
    if ((a1 & 0x8000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_106;
  }
LABEL_101:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v47 = *((void *)v2 + 2);
  unint64_t v46 = *((void *)v2 + 3);
  if (v47 >= v46 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v46 > 1), v47 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v47 + 1;
  unsigned __int16 v48 = &v2[16 * v47];
  *((void *)v48 + 4) = 0x796C696D6166;
  *((void *)v48 + 5) = 0xE600000000000000;
  if ((a1 & 0x8000) == 0)
  {
LABEL_47:
    if ((a1 & 0x10000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_111;
  }
LABEL_106:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v50 = *((void *)v2 + 2);
  unint64_t v49 = *((void *)v2 + 3);
  if (v50 >= v49 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v49 > 1), v50 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v50 + 1;
  unint64_t v51 = &v2[16 * v50];
  *((void *)v51 + 4) = 0x646572696170;
  *((void *)v51 + 5) = 0xE600000000000000;
  if ((a1 & 0x10000) == 0)
  {
LABEL_48:
    if ((a1 & 0x20000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_116;
  }
LABEL_111:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v53 = *((void *)v2 + 2);
  unint64_t v52 = *((void *)v2 + 3);
  if (v53 >= v52 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v52 > 1), v53 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v53 + 1;
  uint64_t v54 = &v2[16 * v53];
  *((void *)v54 + 4) = 30324;
  *((void *)v54 + 5) = 0xE200000000000000;
  if ((a1 & 0x20000) == 0)
  {
LABEL_49:
    if ((a1 & 0x40000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_121;
  }
LABEL_116:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v56 = *((void *)v2 + 2);
  unint64_t v55 = *((void *)v2 + 3);
  if (v56 >= v55 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v55 > 1), v56 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v56 + 1;
  uint64_t v57 = &v2[16 * v56];
  *((void *)v57 + 4) = 0x646E65697266;
  *((void *)v57 + 5) = 0xE600000000000000;
  if ((a1 & 0x40000) == 0)
  {
LABEL_50:
    if ((a1 & 0x80000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_126;
  }
LABEL_121:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v59 = *((void *)v2 + 2);
  unint64_t v58 = *((void *)v2 + 3);
  if (v59 >= v58 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v58 > 1), v59 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v59 + 1;
  Swift::String v60 = &v2[16 * v59];
  *((void *)v60 + 4) = 0x6863756F74;
  *((void *)v60 + 5) = 0xE500000000000000;
  if ((a1 & 0x80000) == 0)
  {
LABEL_51:
    if ((a1 & 0x100000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_131;
  }
LABEL_126:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v62 = *((void *)v2 + 2);
  unint64_t v61 = *((void *)v2 + 3);
  if (v62 >= v61 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v61 > 1), v62 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v62 + 1;
  Swift::String v63 = &v2[16 * v62];
  *((void *)v63 + 4) = 0x72656E776FLL;
  *((void *)v63 + 5) = 0xE500000000000000;
  if ((a1 & 0x100000) == 0)
  {
LABEL_52:
    if ((a1 & 0x200000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_136;
  }
LABEL_131:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v65 = *((void *)v2 + 2);
  unint64_t v64 = *((void *)v2 + 3);
  if (v65 >= v64 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v64 > 1), v65 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v65 + 1;
  uint64_t v66 = &v2[16 * v65];
  *((void *)v66 + 4) = 0x64756F6C63;
  *((void *)v66 + 5) = 0xE500000000000000;
  if ((a1 & 0x200000) == 0)
  {
LABEL_53:
    if ((a1 & 0x400000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_141;
  }
LABEL_136:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v68 = *((void *)v2 + 2);
  unint64_t v67 = *((void *)v2 + 3);
  if (v68 >= v67 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v67 > 1), v68 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v68 + 1;
  unint64_t v69 = &v2[16 * v68];
  *((void *)v69 + 4) = 0x496E676953707061;
  *((void *)v69 + 5) = 0xE90000000000006ELL;
  if ((a1 & 0x400000) == 0)
  {
LABEL_54:
    if ((a1 & 0x800000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_146;
  }
LABEL_141:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v71 = *((void *)v2 + 2);
  unint64_t v70 = *((void *)v2 + 3);
  if (v71 >= v70 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v70 > 1), v71 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v71 + 1;
  char v72 = &v2[16 * v71];
  *((void *)v72 + 4) = 0x646E61486C6C6163;
  *((void *)v72 + 5) = 0xEB0000000066666FLL;
  if ((a1 & 0x800000) == 0)
  {
LABEL_55:
    if ((a1 & 0x1000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_151;
  }
LABEL_146:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v74 = *((void *)v2 + 2);
  unint64_t v73 = *((void *)v2 + 3);
  if (v74 >= v73 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v73 > 1), v74 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v74 + 1;
  uint64_t v75 = &v2[16 * v74];
  *((void *)v75 + 4) = 0x796150656C707061;
  *((void *)v75 + 5) = 0xE800000000000000;
  if ((a1 & 0x1000000) == 0)
  {
LABEL_56:
    if ((a1 & 0x2000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_156;
  }
LABEL_151:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v77 = *((void *)v2 + 2);
  unint64_t v76 = *((void *)v2 + 3);
  if (v77 >= v76 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v76 > 1), v77 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v77 + 1;
  id v78 = &v2[16 * v77];
  *((void *)v78 + 4) = 6452085;
  *((void *)v78 + 5) = 0xE300000000000000;
  if ((a1 & 0x2000000) == 0)
  {
LABEL_57:
    if ((a1 & 0x4000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_161;
  }
LABEL_156:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v80 = *((void *)v2 + 2);
  unint64_t v79 = *((void *)v2 + 3);
  if (v80 >= v79 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v79 > 1), v80 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v80 + 1;
  id v81 = &v2[16 * v80];
  strcpy(v81 + 32, "awdlDegraded");
  v81[45] = 0;
  *((_WORD *)v81 + 23) = -5120;
  if ((a1 & 0x4000000) == 0)
  {
LABEL_58:
    if ((a1 & 0x800000000) == 0) {
      goto LABEL_59;
    }
LABEL_166:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v86 = *((void *)v2 + 2);
    unint64_t v85 = *((void *)v2 + 3);
    if (v86 >= v85 >> 1) {
      uint64_t v2 = sub_10008892C((char *)(v85 > 1), v86 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v86 + 1;
    char v87 = &v2[16 * v86];
    strcpy(v87 + 32, "communalDevice");
    v87[47] = -18;
    goto LABEL_171;
  }
LABEL_161:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v83 = *((void *)v2 + 2);
  unint64_t v82 = *((void *)v2 + 3);
  if (v83 >= v82 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v82 > 1), v83 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v83 + 1;
  uint64_t v84 = &v2[16 * v83];
  *((void *)v84 + 4) = 0x727465526C647761;
  *((void *)v84 + 5) = 0xE90000000000006FLL;
  if ((a1 & 0x800000000) != 0) {
    goto LABEL_166;
  }
LABEL_59:
  if (!*((void *)v2 + 2))
  {
    swift_bridgeObjectRelease();
    return 1701736302;
  }
LABEL_171:
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_10000B010((unint64_t *)&qword_10035E7F0, (uint64_t *)&unk_100367D40);
  uint64_t v88 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v90 = v89;
  swift_bridgeObjectRelease();
  v91._uint64_t countAndFlagsBits = v88;
  v91._object = v90;
  String.append(_:)(v91);
  swift_bridgeObjectRelease();
  v92._uint64_t countAndFlagsBits = 93;
  v92._object = (void *)0xE100000000000000;
  String.append(_:)(v92);
  return 91;
}

uint64_t sub_100189F9C(void **a1, uint64_t a2, Swift::Int a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *a1;
  _StringGuts.grow(_:)(a3);
  swift_bridgeObjectRelease();
  uint64_t v17 = a4;
  unint64_t v18 = a5;
  id v9 = [v8 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;

  v13._uint64_t countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x205347414C4620;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = RPStatusFlags.description.getter((uint64_t)[v8 statusFlags]);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  sub_10016ABE4(v17, v18, 0, a2, (uint64_t)&off_10032C040);

  return swift_bridgeObjectRelease();
}

uint64_t RPCompanionLinkFlags.description.getter(__int16 a1)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v2 = (char *)_swiftEmptyArrayStorage;
    if ((a1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  uint64_t v2 = sub_10008892C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  id v5 = &v2[16 * v4];
  *((void *)v5 + 4) = 0x687475616E75;
  *((void *)v5 + 5) = 0xE600000000000000;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v7 = *((void *)v2 + 2);
    unint64_t v6 = *((void *)v2 + 3);
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_10008892C((char *)(v6 > 1), v7 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v7 + 1;
    uint64_t v8 = &v2[16 * v7];
    *((void *)v8 + 4) = 0x72656B61657073;
    *((void *)v8 + 5) = 0xE700000000000000;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v10 = *((void *)v2 + 2);
    unint64_t v9 = *((void *)v2 + 3);
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_10008892C((char *)(v9 > 1), v10 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v10 + 1;
    int v11 = &v2[16 * v10];
    *((void *)v11 + 4) = 1936941424;
    *((void *)v11 + 5) = 0xE400000000000000;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0) {
        goto LABEL_31;
      }
      goto LABEL_26;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v13 = *((void *)v2 + 2);
  unint64_t v12 = *((void *)v2 + 3);
  if (v13 >= v12 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v12 > 1), v13 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v13 + 1;
  Swift::String v14 = &v2[16 * v13];
  *((void *)v14 + 4) = 1701670760;
  *((void *)v14 + 5) = 0xE400000000000000;
  if ((a1 & 0x10) != 0)
  {
LABEL_26:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v16 = *((void *)v2 + 2);
    unint64_t v15 = *((void *)v2 + 3);
    if (v16 >= v15 >> 1) {
      uint64_t v2 = sub_10008892C((char *)(v15 > 1), v16 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v16 + 1;
    uint64_t v17 = &v2[16 * v16];
    *((void *)v17 + 4) = 7352944;
    *((void *)v17 + 5) = 0xE300000000000000;
  }
LABEL_31:
  if ((a1 & 0x20) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v20 = *((void *)v2 + 2);
    unint64_t v19 = *((void *)v2 + 3);
    if (v20 >= v19 >> 1) {
      uint64_t v2 = sub_10008892C((char *)(v19 > 1), v20 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v20 + 1;
    uint64_t v21 = &v2[16 * v20];
    *((void *)v21 + 4) = 0x6669576365736E75;
    *((void *)v21 + 5) = 0xE900000000000069;
    if ((a1 & 0x40) == 0)
    {
LABEL_33:
      if ((a1 & 0x80) == 0) {
        goto LABEL_34;
      }
      goto LABEL_52;
    }
  }
  else if ((a1 & 0x40) == 0)
  {
    goto LABEL_33;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v23 = *((void *)v2 + 2);
  unint64_t v22 = *((void *)v2 + 3);
  if (v23 >= v22 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v22 > 1), v23 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v23 + 1;
  uint64_t v24 = &v2[16 * v23];
  *((void *)v24 + 4) = 0x6C61636F6CLL;
  *((void *)v24 + 5) = 0xE500000000000000;
  if ((a1 & 0x80) == 0)
  {
LABEL_34:
    if ((a1 & 0x100) == 0) {
      goto LABEL_35;
    }
    goto LABEL_57;
  }
LABEL_52:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v26 = *((void *)v2 + 2);
  unint64_t v25 = *((void *)v2 + 3);
  if (v26 >= v25 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v25 > 1), v26 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v26 + 1;
  uint64_t v27 = &v2[16 * v26];
  *((void *)v27 + 4) = 0x72656461654C736DLL;
  *((void *)v27 + 5) = 0xE800000000000000;
  if ((a1 & 0x100) == 0)
  {
LABEL_35:
    if ((a1 & 0x200) == 0) {
      goto LABEL_36;
    }
    goto LABEL_62;
  }
LABEL_57:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v29 = *((void *)v2 + 2);
  unint64_t v28 = *((void *)v2 + 3);
  if (v29 >= v28 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v28 > 1), v29 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v29 + 1;
  uint64_t v30 = &v2[16 * v29];
  *((void *)v30 + 4) = 0x6E6F43616964656DLL;
  *((void *)v30 + 5) = 0xE800000000000000;
  if ((a1 & 0x200) == 0)
  {
LABEL_36:
    if ((a1 & 0x400) == 0) {
      goto LABEL_37;
    }
    goto LABEL_67;
  }
LABEL_62:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v32 = *((void *)v2 + 2);
  unint64_t v31 = *((void *)v2 + 3);
  if (v32 >= v31 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v31 > 1), v32 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v32 + 1;
  uint64_t v33 = &v2[16 * v32];
  *((void *)v33 + 4) = 0x6461654C72657375;
  *((void *)v33 + 5) = 0xEA00000000007265;
  if ((a1 & 0x400) == 0)
  {
LABEL_37:
    if ((a1 & 0x800) == 0) {
      goto LABEL_38;
    }
    goto LABEL_72;
  }
LABEL_67:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v35 = *((void *)v2 + 2);
  unint64_t v34 = *((void *)v2 + 3);
  if (v35 >= v34 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v34 > 1), v35 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v35 + 1;
  NSString v36 = &v2[16 * v35];
  *((void *)v36 + 4) = 6580584;
  *((void *)v36 + 5) = 0xE300000000000000;
  if ((a1 & 0x800) == 0)
  {
LABEL_38:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_77;
  }
LABEL_72:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v38 = *((void *)v2 + 2);
  unint64_t v37 = *((void *)v2 + 3);
  if (v38 >= v37 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v37 > 1), v38 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v38 + 1;
  unint64_t v39 = &v2[16 * v38];
  *((void *)v39 + 4) = 1769105779;
  *((void *)v39 + 5) = 0xE400000000000000;
  if ((a1 & 0x1000) == 0)
  {
LABEL_39:
    if ((a1 & 0x4000) == 0) {
      goto LABEL_40;
    }
LABEL_82:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v44 = *((void *)v2 + 2);
    unint64_t v43 = *((void *)v2 + 3);
    if (v44 >= v43 >> 1) {
      uint64_t v2 = sub_10008892C((char *)(v43 > 1), v44 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v44 + 1;
    NSString v45 = &v2[16 * v44];
    *((void *)v45 + 4) = 0x504165726F6E6769;
    *((void *)v45 + 5) = 0xE800000000000000;
    goto LABEL_87;
  }
LABEL_77:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008892C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v41 = *((void *)v2 + 2);
  unint64_t v40 = *((void *)v2 + 3);
  if (v41 >= v40 >> 1) {
    uint64_t v2 = sub_10008892C((char *)(v40 > 1), v41 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v41 + 1;
  unsigned __int16 v42 = &v2[16 * v41];
  *((void *)v42 + 4) = 0x75706E4974786574;
  *((void *)v42 + 5) = 0xE900000000000074;
  if ((a1 & 0x4000) != 0) {
    goto LABEL_82;
  }
LABEL_40:
  if (!*((void *)v2 + 2))
  {
    swift_bridgeObjectRelease();
    return 1701736302;
  }
LABEL_87:
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_10000B010((unint64_t *)&qword_10035E7F0, (uint64_t *)&unk_100367D40);
  uint64_t v46 = BidirectionalCollection<>.joined(separator:)();
  unsigned __int16 v48 = v47;
  swift_bridgeObjectRelease();
  v49._uint64_t countAndFlagsBits = v46;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._uint64_t countAndFlagsBits = 93;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  return 91;
}

uint64_t sub_10018A8B4()
{
  return RPCompanionLinkFlags.description.getter(*v0);
}

uint64_t sub_10018A8BC()
{
  return RPStatusFlags.description.getter(*v0);
}

uint64_t type metadata accessor for RapportProxy()
{
  return self;
}

uint64_t sub_10018A8E8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = v1;
  if (!v1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    return 0;
  }
  return result;
}

uint64_t sub_10018AA4C(uint64_t a1)
{
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = sub_1001F78E0();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  id v3 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 ulog:40 message:v4];
  swift_bridgeObjectRelease();

  uint64_t v5 = OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnectionFuture;
  if (*(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_pairedConnectionFuture))
  {
    id v6 = sub_1001F5E20();
    NSString v7 = String._bridgeToObjectiveC()();
    [v6 ulog:60 message:v7];
  }
  else
  {
    uint64_t v8 = sub_10018A8E8();
    if (!v8)
    {
      sub_10018B1F0();
      uint64_t result = swift_allocError();
      *int v11 = 3;
      return result;
    }
    unint64_t v9 = (void *)v8;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();

    id v12 = [objc_allocWithZone((Class)RPCompanionLinkClient) init];
    [v12 setDestinationDevice:v9];
    [v12 setFlags:1];
    [v12 setControlFlags:1028];
    *(void *)(swift_allocObject() + 16) = v12;
    sub_10000A38C(&qword_10036A378);
    swift_allocObject();
    id v13 = v12;
    uint64_t v14 = Future.init(_:)();

    *(void *)(a1 + v5) = v14;
    swift_release();
  }
  return 0;
}

void sub_10018ADE4(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = v2;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = a1;
    v6._object = a2;
    String.append(_:)(v6);
    id v7 = sub_1001F5E20();
    swift_bridgeObjectRetain();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v7 ulog:40 message:v8];
    swift_bridgeObjectRelease();

    if (a1 == 0xD000000000000012 && a2 == (void *)0x80000001002C1960) {
      goto LABEL_8;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || a1 == 0x776F6C6C41703270 && a2 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_8:
      unint64_t v9 = *(void **)(v3 + OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLClient);
      if (v9)
      {
        id v14 = v9;
        if ([v14 controlFlags] == (id)6)
        {
        }
        else
        {
          _StringGuts.grow(_:)(32);
          v10._uint64_t countAndFlagsBits = 0xD000000000000018;
          v10._object = (void *)0x80000001002C1980;
          String.append(_:)(v10);
          type metadata accessor for RPControlFlags(0);
          _print_unlocked<A, B>(_:_:)();
          v11._uint64_t countAndFlagsBits = 540945696;
          v11._object = (void *)0xE400000000000000;
          String.append(_:)(v11);
          _print_unlocked<A, B>(_:_:)();
          id v12 = sub_1001F5E20();
          swift_bridgeObjectRetain();
          NSString v13 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v12 ulog:40 message:v13];
          swift_bridgeObjectRelease();

          [v14 setControlFlags:6];
        }
      }
    }
  }
}

uint64_t sub_10018B0D0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t *sub_10018B118(uint64_t *a1)
{
  return sub_100188864(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void (**)(void, void, uint64_t))(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_10018B128()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10018B160()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 73, 7);
}

void sub_10018B1B8(void **a1)
{
  sub_1001889D8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(Class *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72));
}

unint64_t sub_10018B1F0()
{
  unint64_t result = qword_10036A388;
  if (!qword_10036A388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A388);
  }
  return result;
}

void sub_10018B254(uint64_t a1, uint64_t a2)
{
  sub_100188D9C(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_10018B264(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_10018B2A4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10018B2E4(uint64_t a1)
{
  return sub_100188EB8(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10018B2F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10018B300()
{
  return swift_release();
}

uint64_t sub_10018B308()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10018B348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100188BE4(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16), *(void *)(v3 + 24), *(unsigned char *)(v3 + 32));
}

uint64_t sub_10018B35C(void *a1)
{
  return sub_100186E7C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10018B36C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10018B3B4(void *a1)
{
  return sub_100187378(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10018B3C0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10018B3F8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10018B430(void *a1, char a2)
{
  sub_100187450(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void sub_10018B438(uint64_t a1)
{
}

uint64_t sub_10018B45C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10018B494(uint64_t a1, uint64_t a2, void (*a3)(void, void, uint64_t), uint64_t a4)
{
  return sub_1000B9994(a1, a2, a3, a4);
}

void sub_10018B4B8(uint64_t a1, uint64_t a2, void (*a3)(unint64_t, void, void), uint64_t a4)
{
}

uint64_t sub_10018B4DC()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10018B514(uint64_t a1, uint64_t a2)
{
  sub_100187D14(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10018B51C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018B554()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10018B58C(uint64_t a1)
{
  return sub_100187E34(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10018B598()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10018B5D0(uint64_t a1, objc_class *a2, uint64_t a3)
{
  sub_100187C2C(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_10018B5D8(uint64_t *a1@<X8>)
{
}

unint64_t sub_10018B5E0()
{
  unint64_t result = qword_10036A3D0;
  if (!qword_10036A3D0)
  {
    sub_10000A3D0(&qword_10036A3B8);
    sub_1000713A8(&qword_10035E348, &qword_10035E350);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A3D0);
  }
  return result;
}

void sub_10018B680()
{
}

uint64_t sub_10018B688()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10018B698(void **a1)
{
  return sub_100189F9C(a1, *(void *)(v1 + 16), 17, 0x20444E554F46, (void *)0xE600000000000000);
}

uint64_t sub_10018B6C8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10018B6D8(void **a1)
{
  return sub_100189F9C(a1, *(void *)(v1 + 16), 16, 0x2054534F4CLL, (void *)0xE500000000000000);
}

uint64_t sub_10018B758()
{
  return sub_100261488();
}

uint64_t _s17TransferCompletedVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s17TransferCompletedVwcp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  uint64_t v4 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v4;
  uint64_t v5 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v5;
  uint64_t v6 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v6;
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  uint64_t v7 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v7;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s17TransferCompletedVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v8;
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

uint64_t _s17TransferCompletedVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v5 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v5;
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  uint64_t v6 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  uint64_t v9 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

uint64_t _s17TransferCompletedVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 177)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s17TransferCompletedVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 176) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 177) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 177) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *_s17TransferCompletedVMa()
{
  return &_s17TransferCompletedVN;
}

unint64_t sub_10018BC10(uint64_t a1)
{
  unint64_t result = sub_10018BC38();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10018BC38()
{
  unint64_t result = qword_10036A3E8;
  if (!qword_10036A3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A3E8);
  }
  return result;
}

unint64_t sub_10018BC8C(uint64_t a1)
{
  unint64_t result = sub_10018BCB4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10018BCB4()
{
  unint64_t result = qword_10036A3F0;
  if (!qword_10036A3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A3F0);
  }
  return result;
}

uint64_t sub_10018BD08@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Retrier.RetryIntervalPolicy(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10018D7A0(v3, (uint64_t)v8);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result)
  {
    if (result == 1)
    {
      if (__OFSUB__(a1, 1))
      {
        __break(1u);
      }
      else
      {
        uint64_t v10 = *v8;
        unint64_t v11 = *(void *)(v10 + 16);
        if ((uint64_t)(v11 - 1) >= a1 - 1) {
          unint64_t v12 = a1 - 1;
        }
        else {
          unint64_t v12 = v11 - 1;
        }
        if (v12 < v11)
        {
          uint64_t v13 = type metadata accessor for DispatchTimeInterval();
          (*(void (**)(void *, unint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(a2, v10+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80))+ *(void *)(*(void *)(v13 - 8) + 72) * v12, v13);
          return swift_bridgeObjectRelease();
        }
      }
      __break(1u);
    }
    else
    {
      *a2 = 0;
      uint64_t v15 = enum case for DispatchTimeInterval.seconds(_:);
      uint64_t v16 = type metadata accessor for DispatchTimeInterval();
      return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(a2, v15, v16);
    }
  }
  else
  {
    uint64_t v14 = type metadata accessor for DispatchTimeInterval();
    return (*(uint64_t (**)(void *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 32))(a2, v8, v14);
  }
  return result;
}

void sub_10018BEC8()
{
  uint64_t v1 = v0;
  id v2 = sub_1001F63C4();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  uint64_t v4 = OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptState;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptState))
  {
    if (*(unsigned char *)(v1 + 48)) {
      goto LABEL_7;
    }
LABEL_6:
    if (*(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptCount) >= *(void *)(v1 + 40))
    {
LABEL_8:
      *(unsigned char *)(v1 + v4) = 3;
      _StringGuts.grow(_:)(16);
      v11._uint64_t countAndFlagsBits = 0x5374706D65747461;
      v11._object = (void *)0xEE00203A65746174;
      String.append(_:)(v11);
      _print_unlocked<A, B>(_:_:)();
      id v12 = sub_1001F63C4();
      swift_bridgeObjectRetain();
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v12 ulog:40 message:v13];
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptCount);
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
    return;
  }
  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptCount) = v7;
  *(unsigned char *)(v1 + v4) = 1;
  _StringGuts.grow(_:)(16);
  v8._uint64_t countAndFlagsBits = 0x5374706D65747461;
  v8._object = (void *)0xEE00203A65746174;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  id v9 = sub_1001F63C4();
  swift_bridgeObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 ulog:40 message:v10];
  swift_bridgeObjectRelease();

  if ((*(unsigned char *)(v1 + 48) & 1) == 0) {
    goto LABEL_6;
  }
LABEL_7:
  if (*(unsigned char *)(v1 + v4) == 2) {
    goto LABEL_8;
  }
  sub_10018C3BC();
}

void sub_10018C140()
{
  uint64_t v1 = v0;
  id v2 = sub_1001F63C4();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  *(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptState) = 0;
  _StringGuts.grow(_:)(16);
  v4._uint64_t countAndFlagsBits = 0x5374706D65747461;
  v4._object = (void *)0xEE00203A65746174;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  id v5 = sub_1001F63C4();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 ulog:40 message:v6];
  swift_bridgeObjectRelease();

  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptCount) = 0;
}

void sub_10018C298()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptState) == 2)
  {
    sub_10018CAA0();
  }
  else
  {
    _StringGuts.grow(_:)(45);
    v1._object = (void *)0x80000001002C1D40;
    v1._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v1);
    _print_unlocked<A, B>(_:_:)();
    id v2 = sub_1001F63C4();
    swift_bridgeObjectRetain();
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v2 ulog:60 message:v3];
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10018C3BC()
{
  Swift::String v1 = v0;
  uint64_t v39 = *v0;
  uint64_t v41 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  unint64_t v40 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  __chkstk_darwin(v3);
  unint64_t v37 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for DispatchTime();
  uint64_t v45 = *(void *)(v35 - 8);
  uint64_t v5 = __chkstk_darwin(v35);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v34 = (char *)&v32 - v8;
  uint64_t v9 = type metadata accessor for Retrier.RetryIntervalPolicy(0);
  __chkstk_darwin(v9 - 8);
  Swift::String v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for DispatchTimeInterval();
  uint64_t v38 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  NSString v13 = (uint64_t *)((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10018D7A0((uint64_t)v1 + OBJC_IVAR____TtC17proximitycontrold7Retrier_retryInterval, (uint64_t)v11);
  sub_10018BD08(*(void *)((char *)v1 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptCount), v13);
  sub_10018D4E0((uint64_t)v11);
  aBlock = 0;
  unint64_t v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  v14._object = (void *)0x80000001002C1CF0;
  v14._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v14);
  uint64_t v33 = v13;
  _print_unlocked<A, B>(_:_:)();
  id v15 = sub_1001F63C4();
  swift_bridgeObjectRetain();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 ulog:40 message:v16];
  swift_bridgeObjectRelease();

  uint64_t v17 = OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptState;
  *((unsigned char *)v1 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptState) = 2;
  aBlock = 0;
  unint64_t v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  v18._uint64_t countAndFlagsBits = 0x5374706D65747461;
  v18._object = (void *)0xEE00203A65746174;
  String.append(_:)(v18);
  LOBYTE(v46) = *((unsigned char *)v1 + v17);
  _print_unlocked<A, B>(_:_:)();
  id v19 = sub_1001F63C4();
  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 ulog:40 message:v20];
  swift_bridgeObjectRelease();

  uint64_t v32 = v1[4];
  static DispatchTime.now()();
  uint64_t v21 = v34;
  + infix(_:_:)();
  unint64_t v22 = *(void (**)(char *, uint64_t))(v45 + 8);
  v45 += 8;
  uint64_t v23 = v35;
  v22(v7, v35);
  uint64_t v24 = swift_allocObject();
  swift_weakInit();
  uint64_t v25 = swift_allocObject();
  uint64_t v26 = v39;
  *(void *)(v25 + 16) = v24;
  *(void *)(v25 + 24) = v26;
  unint64_t v51 = sub_10018D874;
  uint64_t v52 = v25;
  aBlock = _NSConcreteStackBlock;
  unint64_t v48 = 1107296256;
  Swift::String v49 = sub_10007A0AC;
  Swift::String v50 = &unk_10032C748;
  uint64_t v27 = _Block_copy(&aBlock);
  swift_retain();
  unint64_t v28 = v37;
  static DispatchQoS.unspecified.getter();
  uint64_t v46 = _swiftEmptyArrayStorage;
  sub_10004D1C4();
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10001683C();
  uint64_t v30 = v40;
  uint64_t v29 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v30, v29);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v28, v43);
  v22(v21, v23);
  (*(void (**)(void *, uint64_t))(v38 + 8))(v33, v36);
  swift_release();
  return swift_release();
}

void sub_10018CA0C(uint64_t a1, uint64_t a2)
{
  if (swift_weakLoadStrong())
  {
    sub_10018C298();
    swift_release();
  }
  else
  {
    sub_10016AE10(90, 0xD000000000000022, (void *)0x80000001002C1D10, 0, a2, (uint64_t)&off_10032C6C0);
  }
}

uint64_t sub_10018CAA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + 32);
  void *v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    uint64_t v9 = OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptCount;
    uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptCount);
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (!v11)
    {
      *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptCount) = v12;
      uint64_t v13 = OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptState;
      *(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptState) = 1;
      unint64_t v24 = 0;
      unint64_t v25 = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      v14._uint64_t countAndFlagsBits = 0x5374706D65747461;
      v14._object = (void *)0xEE00203A65746174;
      String.append(_:)(v14);
      LOBYTE(v23) = *(unsigned char *)(v1 + v13);
      _print_unlocked<A, B>(_:_:)();
      id v15 = sub_1001F63C4();
      swift_bridgeObjectRetain();
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v15 ulog:40 message:v16];
      swift_bridgeObjectRelease();

      unint64_t v24 = 0;
      unint64_t v25 = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      unint64_t v24 = 0xD00000000000001ALL;
      unint64_t v25 = 0x80000001002C1CD0;
      uint64_t v23 = *(void *)(v1 + v9);
      v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      id v18 = sub_1001F63C4();
      swift_bridgeObjectRetain();
      NSString v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v18 ulog:40 message:v19];
      swift_bridgeObjectRelease();

      NSString v20 = *(void (**)(uint64_t))(v1 + 16);
      uint64_t v21 = swift_retain();
      v20(v21);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10018CD78()
{
  uint64_t v1 = v0;
  id v2 = sub_1001F63C4();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptCount) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptState) = 0;
  _StringGuts.grow(_:)(16);
  v4._uint64_t countAndFlagsBits = 0x5374706D65747461;
  v4._object = (void *)0xEE00203A65746174;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  id v5 = sub_1001F63C4();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 ulog:40 message:v6];
  swift_bridgeObjectRelease();
}

uint64_t sub_10018CEC8()
{
  swift_release();

  sub_10018D4E0(v0 + OBJC_IVAR____TtC17proximitycontrold7Retrier_retryInterval);

  return swift_deallocClassInstance();
}

uint64_t sub_10018CF3C()
{
  return type metadata accessor for Retrier(0);
}

uint64_t type metadata accessor for Retrier(uint64_t a1)
{
  return sub_100014F7C(a1, qword_10036A430);
}

uint64_t sub_10018CF64()
{
  uint64_t result = type metadata accessor for Retrier.RetryIntervalPolicy(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Retrier.RetryIntervalPolicy(uint64_t a1)
{
  return sub_100014F7C(a1, qword_10036A608);
}

unsigned char *storeEnumTagSinglePayload for Retrier.AttemptState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10018D120);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Retrier.AttemptState()
{
  return &type metadata for Retrier.AttemptState;
}

uint64_t *sub_10018D158(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_10018D278(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!result)
  {
    uint64_t v3 = type metadata accessor for DispatchTimeInterval();
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *sub_10018D318(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTimeInterval();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10018D3F4(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10018D4E0((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_10018D4E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Retrier.RetryIntervalPolicy(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_10018D53C(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for DispatchTimeInterval();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10018D5F0(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10018D4E0((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_10018D6B4()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_10018D74C()
{
  unint64_t result = qword_10036A640;
  if (!qword_10036A640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A640);
  }
  return result;
}

uint64_t sub_10018D7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Retrier.RetryIntervalPolicy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018D804()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10018D83C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10018D874()
{
  sub_10018CA0C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10018D87C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10018D88C()
{
  return swift_release();
}

uint64_t destroy for ProxControlDemoClientMessage(uint64_t a1)
{
  return sub_10003A58C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t *initializeWithCopy for ProxControlDemoClientMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  sub_10003A4A8(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  return a1;
}

uint64_t *assignWithCopy for ProxControlDemoClientMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  sub_10003A4A8(*a2, v4, v5, v6);
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  unint64_t v12 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  sub_10003A58C(v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for ProxControlDemoClientMessage(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  long long v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = a2[2];
  sub_10003A58C(v3, v5, v4, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProxControlDemoClientMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 24) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ProxControlDemoClientMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 2 * -a2;
      *(void *)(result + 32) = 0;
      *(void *)(result + 40) = 0;
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_10018DA8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24) >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10018DAA8(uint64_t result)
{
  *(void *)(result + 24) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

void *sub_10018DAB8(void *result, uint64_t a2)
{
  if (a2 < 2)
  {
    result[3] = result[3] & 1 | (a2 << 62);
  }
  else
  {
    *unint64_t result = (a2 - 2);
    result[1] = 0;
    result[2] = 0;
    result[3] = 0x8000000000000000;
    result[4] = 0;
    result[5] = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage()
{
  return &type metadata for ProxControlDemoClientMessage;
}

uint64_t destroy for ProxControlDemoServerMessage(uint64_t a1)
{
  return sub_10018DB58(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(_WORD *)(a1 + 56), (uint64_t (*)(void))sub_100076598, (uint64_t (*)(void))sub_10007E784);
}

uint64_t sub_10018DB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int16 a8, uint64_t (*a9)(void), uint64_t (*a10)(void))
{
  int v10 = a8 >> 14;
  if (v10 == 3) {
    return a10();
  }
  if (v10 == 2) {
    return a9();
  }
  return result;
}

uint64_t initializeWithCopy for ProxControlDemoServerMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  unsigned __int16 v10 = *(_WORD *)(a2 + 56);
  sub_10018DB58(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, (uint64_t (*)(void))sub_10007653C, (uint64_t (*)(void))sub_10007EA08);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(_WORD *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for ProxControlDemoServerMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  unsigned __int16 v10 = *(_WORD *)(a2 + 56);
  sub_10018DB58(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, (uint64_t (*)(void))sub_10007653C, (uint64_t (*)(void))sub_10007EA08);
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  unsigned __int16 v18 = *(_WORD *)(a1 + 56);
  *(_WORD *)(a1 + 56) = v10;
  sub_10018DB58(v11, v12, v13, v14, v15, v16, v17, v18, (uint64_t (*)(void))sub_100076598, (uint64_t (*)(void))sub_10007E784);
  return a1;
}

__n128 initializeWithTake for RangingProxy2StateMessage(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ProxControlDemoServerMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  __int16 v4 = *(_WORD *)(a2 + 56);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v3;
  unsigned __int16 v13 = *(_WORD *)(a1 + 56);
  *(_WORD *)(a1 + 56) = v4;
  sub_10018DB58(v5, v7, v6, v8, v9, v10, v11, v13, (uint64_t (*)(void))sub_100076598, (uint64_t (*)(void))sub_10007E784);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProxControlDemoServerMessage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3D && *(unsigned char *)(a1 + 58)) {
    return (*(_DWORD *)a1 + 61);
  }
  unsigned int v3 = (HIBYTE(*(unsigned __int16 *)(a1 + 56)) & 0x3C | (*(unsigned __int16 *)(a1 + 56) >> 14)) ^ 0x3F;
  if (v3 >= 0x3C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ProxControlDemoServerMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3C)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 61;
    if (a3 >= 0x3D) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3D) {
      *(unsigned char *)(result + 58) = 0;
    }
    if (a2)
    {
      *(void *)(result + 48) = 0;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)__n128 result = 0u;
      *(_WORD *)(result + 56) = (((-a2 >> 2) & 0xF) - 16 * (_WORD)a2) << 10;
    }
  }
  return result;
}

uint64_t sub_10018DEC0(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 56) >> 14;
}

uint64_t sub_10018DECC(uint64_t result)
{
  *(_WORD *)(result + 56) &= 0x3FFFu;
  return result;
}

uint64_t sub_10018DEDC(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 56) = *(_WORD *)(result + 56) & 0x3FF | (a2 << 14);
  return result;
}

ValueMetadata *type metadata accessor for ProxControlDemoServerMessage()
{
  return &type metadata for ProxControlDemoServerMessage;
}

uint64_t sub_10018DF00(void *a1, uint64_t a2)
{
  uint64_t v20 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10036AD50);
  uint64_t v17 = *(void *)(v3 - 8);
  uint64_t v18 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036AD58);
  uint64_t v19 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036AD60);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  long long v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_10019B450();
  uint64_t v13 = v20;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v13 & 0x8000000000) != 0)
  {
    char v23 = 1;
    sub_10019B4A4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v22 = v13;
    sub_10019B3FC();
    uint64_t v14 = v18;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v14);
  }
  else
  {
    char v21 = 0;
    sub_10019B4F8();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10018E1F8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10036AAE0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_10019946C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_10000A38C(&qword_10036AAC8);
  sub_1001994C0(&qword_10036AAE8, (void (*)(void))sub_100199584);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10018E378()
{
  if (*v0) {
    return 0x6E6F69676572;
  }
  else {
    return 0x65636E6174736964;
  }
}

uint64_t sub_10018E3B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100192964(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10018E3D8(uint64_t a1)
{
  unint64_t v2 = sub_10019B450();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10018E414(uint64_t a1)
{
  unint64_t v2 = sub_10019B450();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10018E450(uint64_t a1)
{
  unint64_t v2 = sub_10019B4F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10018E48C(uint64_t a1)
{
  unint64_t v2 = sub_10019B4F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10018E4C8(uint64_t a1)
{
  unint64_t v2 = sub_10019B4A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10018E504(uint64_t a1)
{
  unint64_t v2 = sub_10019B4A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10018E540@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100192A50(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(unsigned char *)(a2 + 4) = BYTE4(result);
  }
  return result;
}

uint64_t sub_10018E574(void *a1)
{
  return sub_10018DF00(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32));
}

uint64_t sub_10018E598()
{
  return 0x7365756C6176;
}

uint64_t sub_10018E5AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7365756C6176 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10018E63C(uint64_t a1)
{
  unint64_t v2 = sub_10019946C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10018E678(uint64_t a1)
{
  unint64_t v2 = sub_10019946C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10018E6B4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100192EFC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10018E6E0(void *a1)
{
  return sub_10018E1F8(a1, *v1);
}

uint64_t sub_10018E6FC(void *a1, uint64_t a2, int a3)
{
  uint64_t v20 = a2;
  int v21 = a3;
  uint64_t v4 = sub_10000A38C(&qword_10036ACD8);
  uint64_t v18 = *(void *)(v4 - 8);
  uint64_t v19 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036ACE0);
  uint64_t v17 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10036ACE8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_10019AD58();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v14 = (uint64_t (**)(char *, uint64_t))(v11 + 8);
  if (v21)
  {
    LOBYTE(v22) = 1;
    sub_10019ADAC();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v22 = v20;
    sub_10019AEA8();
    uint64_t v15 = v19;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v15);
  }
  else
  {
    LOBYTE(v22) = 0;
    sub_10019AE54();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v22 = v20;
    sub_10019AEA8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v7);
  }
  return (*v14)(v13, v10);
}

uint64_t sub_10018EA0C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v25 = a3;
  int v29 = a5;
  uint64_t v20 = a4;
  uint64_t v24 = a2;
  uint64_t v6 = sub_10000A38C(&qword_10036A970);
  uint64_t v21 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036A978);
  uint64_t v22 = *(void *)(v9 - 8);
  uint64_t v23 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_10036A980);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100197944();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v29)
  {
    LOBYTE(v27) = 1;
    sub_100197998();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v27 = v24;
    LOBYTE(v28) = v25 & 1;
    sub_100197A94();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  }
  else
  {
    LOBYTE(v27) = 0;
    sub_1001979EC();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v27 = v24;
    uint64_t v28 = v25;
    char v30 = 0;
    sub_100197AE8();
    uint64_t v16 = v23;
    uint64_t v17 = v26;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (!v17)
    {
      uint64_t v27 = v20;
      char v30 = 1;
      sub_10000A38C(&qword_10036A930);
      sub_100197B3C((unint64_t *)&qword_10036A990, &qword_10036A998);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_10018EDB8(void *a1, uint64_t a2, int a3)
{
  int v14 = a3;
  uint64_t v13 = a2;
  uint64_t v4 = sub_10000A38C(&qword_10036A948);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036A950);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1001977A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1001977F4();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v15 = v13;
  char v16 = v14 & 1;
  sub_100197A94();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10018EFD0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000A38C(&qword_10036A6C0);
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000A38C(&qword_10036A6C8);
  uint64_t v38 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  unint64_t v37 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036A6D0);
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v42 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10000A38C(&qword_10036A6D8);
  uint64_t v35 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  unint64_t v34 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_10036A6E0);
  uint64_t v40 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  int v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_10036A6E8);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v45 = v15;
  uint64_t v46 = v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100195188();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10003A44C(v2, (uint64_t)&v50);
  uint64_t v19 = v50;
  char v20 = v53;
  if (v53 >> 62)
  {
    if (v53 >> 62 == 1)
    {
      v53 &= 0x3FFFFFFFFFFFFFFFuLL;
      sub_10019547C(&v50, (uint64_t)v56);
      LOBYTE(v48[0]) = 4;
      sub_1001951DC();
      uint64_t v21 = v45;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10019547C(v56, (uint64_t)v48);
      sub_100195494();
      uint64_t v22 = v44;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v22);
    }
    else
    {
      uint64_t v29 = v55 | v54;
      if (v53 != 0x8000000000000000 || v29 | v50 | v52 | v51)
      {
        if (v53 == 0x8000000000000000 && v50 == 1 && !(v29 | v52 | v51))
        {
          LOBYTE(v48[0]) = 1;
          sub_1001953D4();
          char v30 = v34;
          uint64_t v21 = v45;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v36);
        }
        else
        {
          LOBYTE(v48[0]) = 3;
          sub_100195284();
          unint64_t v31 = v37;
          uint64_t v21 = v45;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          sub_1001954E8();
          uint64_t v32 = v39;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v38 + 8))(v31, v32);
        }
      }
      else
      {
        LOBYTE(v48[0]) = 0;
        sub_100195428();
        uint64_t v21 = v45;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v12);
      }
    }
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v18, v21);
  }
  else
  {
    uint64_t v44 = v54;
    v53 &= 0x3FFFFFFFFFFFFFFFuLL;
    uint64_t v23 = v51;
    uint64_t v24 = v52;
    LOBYTE(v48[0]) = 2;
    sub_10019532C();
    uint64_t v25 = v45;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v48[0] = v19;
    v48[1] = v23;
    v48[2] = v24;
    char v49 = v20 & 1;
    char v57 = 0;
    sub_10019553C();
    uint64_t v26 = v42;
    uint64_t v27 = v47;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (!v27)
    {
      LOBYTE(v48[0]) = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v18, v25);
  }
}

uint64_t sub_10018F698(void *a1)
{
  uint64_t v28 = sub_10000A38C(&qword_10036A770);
  uint64_t v27 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v26 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000A38C(&qword_10036A778);
  uint64_t v24 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10036A780);
  uint64_t v23 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036A788);
  uint64_t v22 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000A38C(&qword_10036A790);
  uint64_t v29 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100195FB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100196254(v31, v33);
  switch(v34 >> 14)
  {
    case 1:
      v34 &= 0x3FFFu;
      int v37 = v33[0];
      char v38 = BYTE4(v33[0]);
      LOBYTE(v32[0]) = 1;
      sub_100196158();
      uint64_t v15 = v30;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LODWORD(v32[0]) = v37;
      BYTE4(v32[0]) = v38;
      sub_100196334();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v17 = *(void (**)(char *, uint64_t))(v23 + 8);
      uint64_t v18 = v7;
      uint64_t v20 = v5;
      goto LABEL_7;
    case 2:
      v34 &= 0x3FFFu;
      sub_1001962C8(v33, (uint64_t)v35);
      LOBYTE(v32[0]) = 2;
      sub_1001960B0();
      uint64_t v15 = v30;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1001962C8(v35, (uint64_t)v32);
      sub_1001962E0();
      uint64_t v16 = v25;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v17 = *(void (**)(char *, uint64_t))(v24 + 8);
      uint64_t v18 = v4;
      goto LABEL_5;
    case 3:
      v34 &= 0x3FFFu;
      sub_100196254(v33, &v36);
      LOBYTE(v32[0]) = 3;
      sub_100196008();
      uint64_t v19 = v26;
      uint64_t v15 = v30;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_100196254(&v36, v32);
      sub_100196274();
      uint64_t v16 = v28;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v17 = *(void (**)(char *, uint64_t))(v27 + 8);
      uint64_t v18 = v19;
LABEL_5:
      uint64_t v20 = v16;
LABEL_7:
      v17(v18, v20);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v12, v15);
      break;
    default:
      v34 &= 0x3FFFu;
      LOBYTE(v32[0]) = 0;
      sub_100196200();
      uint64_t v13 = v30;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v12, v13);
      break;
  }
  return result;
}

uint64_t sub_10018FCCC()
{
  if (*v0) {
    return 0x7465736E75;
  }
  else {
    return 7628147;
  }
}

uint64_t sub_10018FCFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001930A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10018FD24(uint64_t a1)
{
  unint64_t v2 = sub_10019AD58();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10018FD60(uint64_t a1)
{
  unint64_t v2 = sub_10019AD58();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10018FD9C(uint64_t a1)
{
  unint64_t v2 = sub_10019AE54();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10018FDD8(uint64_t a1)
{
  unint64_t v2 = sub_10019AE54();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10018FE14(uint64_t a1)
{
  unint64_t v2 = sub_10019ADAC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10018FE50(uint64_t a1)
{
  unint64_t v2 = sub_10019ADAC();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10018FE8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100193180(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t sub_10018FEC0(void *a1)
{
  return sub_10018E6FC(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

uint64_t sub_10018FEE0()
{
  if (*v0) {
    return 0x656469727265766FLL;
  }
  else {
    return 0x704168636E75616CLL;
  }
}

uint64_t sub_10018FF20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100193698(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10018FF48(uint64_t a1)
{
  unint64_t v2 = sub_100197944();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10018FF84(uint64_t a1)
{
  unint64_t v2 = sub_100197944();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10018FFC0()
{
  if (*v0) {
    return 0x736E6F6974706FLL;
  }
  else {
    return 12383;
  }
}

uint64_t sub_10018FFF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100193798(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100190018(uint64_t a1)
{
  unint64_t v2 = sub_1001979EC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100190054(uint64_t a1)
{
  unint64_t v2 = sub_1001979EC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100190090(uint64_t a1)
{
  unint64_t v2 = sub_100197998();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001900CC(uint64_t a1)
{
  unint64_t v2 = sub_100197998();

  return CodingKey.debugDescription.getter(a1, v2);
}

char *sub_100190108@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100193874(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(unsigned char *)(a2 + 24) = v7 & 1;
  }
  return result;
}

uint64_t sub_100190140(void *a1)
{
  return sub_10018EA0C(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_100190164()
{
  return 0x746E6573657270;
}

uint64_t sub_10019017C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x746E6573657270 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100190214(uint64_t a1)
{
  unint64_t v2 = sub_10019789C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100190250(uint64_t a1)
{
  unint64_t v2 = sub_10019789C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10019028C(uint64_t a1)
{
  unint64_t v2 = sub_1001978F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001902C8(uint64_t a1)
{
  unint64_t v2 = sub_1001978F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100190304(void *a1)
{
  return sub_100193E7C(a1);
}

uint64_t sub_10019031C(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036A960);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036A968);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_10019789C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1001978F0();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1001904EC()
{
  return 0x656469727265766FLL;
}

uint64_t sub_100190504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x656469727265766FLL && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10019059C(uint64_t a1)
{
  unint64_t v2 = sub_1001977A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001905D8(uint64_t a1)
{
  unint64_t v2 = sub_1001977A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100190614(uint64_t a1)
{
  unint64_t v2 = sub_1001977F4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100190650(uint64_t a1)
{
  unint64_t v2 = sub_1001977F4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10019068C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100194164(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t sub_1001906C0(void *a1)
{
  return sub_10018EDB8(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

uint64_t sub_1001906E0()
{
  uint64_t result = 0x5374736575716572;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1819044203;
      break;
    case 2:
      uint64_t result = 0x656369766564;
      break;
    case 3:
      uint64_t result = 0x6B63616264656566;
      break;
    case 4:
      uint64_t result = 0x6D6574737973;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100190784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001944E4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001907AC(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1001907B8(uint64_t a1)
{
  unint64_t v2 = sub_100195188();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001907F4(uint64_t a1)
{
  unint64_t v2 = sub_100195188();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100190830()
{
  if (*v0) {
    return 25705;
  }
  else {
    return 12383;
  }
}

uint64_t sub_10019084C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001946FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100190874(uint64_t a1)
{
  unint64_t v2 = sub_10019532C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001908B0(uint64_t a1)
{
  unint64_t v2 = sub_10019532C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001908EC(uint64_t a1)
{
  unint64_t v2 = sub_100195284();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100190928(uint64_t a1)
{
  unint64_t v2 = sub_100195284();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100190964(uint64_t a1)
{
  unint64_t v2 = sub_1001953D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001909A0(uint64_t a1)
{
  unint64_t v2 = sub_1001953D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001909DC(uint64_t a1)
{
  unint64_t v2 = sub_100195428();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100190A18(uint64_t a1)
{
  unint64_t v2 = sub_100195428();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100190A54(uint64_t a1)
{
  unint64_t v2 = sub_1001951DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100190A90(uint64_t a1)
{
  unint64_t v2 = sub_1001951DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100190ACC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001947C0(a1, v5);
  if (!v2) {
    return sub_10003A44C((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_100190B14(void *a1)
{
  sub_10003A44C(v1, (uint64_t)&v4);
  return sub_10018EFD0(a1);
}

uint64_t sub_100190B64()
{
  return 6580592;
}

uint64_t sub_100190B74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 6580592 && a2 == 0xE300000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100190BFC(uint64_t a1)
{
  unint64_t v2 = sub_100199370();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100190C38(uint64_t a1)
{
  unint64_t v2 = sub_100199370();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100190C74@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000A38C(&qword_10036AA40);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100199370();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000CC5C((uint64_t)a1);
  }
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_10000CC5C((uint64_t)a1);
  *(_DWORD *)a2 = v9;
  *(unsigned char *)(a2 + 4) = BYTE4(v9) & 1;
  return result;
}

uint64_t sub_100190DF0(void *a1)
{
  uint64_t v3 = sub_10000A38C(&qword_10036AAB0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v7 = *(unsigned char *)(v1 + 4);
  sub_10000D6E4(a1, a1[3]);
  sub_100199370();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[28] = v7;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_100190F34()
{
  unint64_t result = 6580592;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6574617473;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100190FC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100195590(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100190FEC(uint64_t a1)
{
  unint64_t v2 = sub_100195FB4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100191028(uint64_t a1)
{
  unint64_t v2 = sub_100195FB4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100191064(uint64_t a1)
{
  unint64_t v2 = sub_1001960B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001910A0(uint64_t a1)
{
  unint64_t v2 = sub_1001960B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001910DC(uint64_t a1)
{
  unint64_t v2 = sub_100196200();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100191118(uint64_t a1)
{
  unint64_t v2 = sub_100196200();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100191154(uint64_t a1)
{
  unint64_t v2 = sub_100196008();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100191190(uint64_t a1)
{
  unint64_t v2 = sub_100196008();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001911CC(uint64_t a1)
{
  unint64_t v2 = sub_100196158();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100191208(uint64_t a1)
{
  unint64_t v2 = sub_100196158();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100191244(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100195728(a1, (uint64_t)v4);
  if (!v2) {
    sub_100196254(v4, a2);
  }
}

uint64_t sub_10019128C(void *a1)
{
  sub_100196254(v1, v4);
  return sub_10018F698(a1);
}

uint64_t sub_1001912DC(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036AA88);
  uint64_t v30 = *(void *)(v2 - 8);
  uint64_t v31 = v2;
  __chkstk_darwin(v2);
  uint64_t v29 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10036AA90);
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036AA98);
  uint64_t v25 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10036AAA0);
  uint64_t v26 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000A38C(&qword_10036AAA8);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v33 = v13;
  uint64_t v34 = v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1001991CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1001962C8(v35, (uint64_t)&v36);
  switch(v37)
  {
    case 1:
      char v38 = 1;
      sub_1001992C8();
      uint64_t v20 = v33;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v7);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v16, v20);
      break;
    case 2:
      char v38 = 2;
      sub_100199274();
      uint64_t v21 = v33;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v22 = v28;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v22);
      goto LABEL_8;
    case 3:
      char v38 = 3;
      sub_100199220();
      uint64_t v23 = v29;
      uint64_t v21 = v33;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v24 = v31;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v24);
LABEL_8:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v16, v21);
      break;
    default:
      char v38 = 0;
      sub_10019931C();
      uint64_t v17 = v33;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v38 = 0;
      uint64_t v18 = v32;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      if (!v18)
      {
        char v38 = 1;
        KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v10);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v16, v17);
      break;
  }
  return result;
}

uint64_t sub_100191840(void *a1)
{
  uint64_t v20 = sub_10000A38C(&qword_10036AA50);
  uint64_t v19 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10036AA58);
  uint64_t v18 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036AA60);
  uint64_t v17 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000A38C(&qword_10036AA68);
  uint64_t v22 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100198FD4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100196254(v21, &v26);
  if (v28)
  {
    if (v28 == 1)
    {
      LOBYTE(v24) = 1;
      sub_1001990D0();
      uint64_t v12 = v23;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v4);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v11, v12);
    }
    sub_10001639C((uint64_t)&v26, (uint64_t)v31, &qword_10036AA70);
    LOBYTE(v24) = 2;
    sub_100199028();
    uint64_t v14 = v23;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_10001639C((uint64_t)v31, (uint64_t)&v24, &qword_10036AA70);
    sub_1001993C4();
    uint64_t v15 = v20;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v3, v15);
  }
  else
  {
    long long v29 = v26;
    v30[0] = v27[0];
    *(void *)((char *)v30 + 14) = *(void *)((char *)v27 + 14);
    LOBYTE(v24) = 0;
    sub_100199124();
    uint64_t v14 = v23;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    long long v24 = v29;
    v25[0] = v30[0];
    *(void *)((char *)v25 + 14) = *(void *)((char *)v30 + 14);
    sub_100199418();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v11, v14);
}

uint64_t sub_100191D1C()
{
  uint64_t result = 0x436E6F6973736573;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6168436574617473;
      break;
    case 2:
      uint64_t result = 0x746E657665;
      break;
    case 3:
      uint64_t result = 0x746365666665;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100191DB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100197C00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100191DE0(uint64_t a1)
{
  unint64_t v2 = sub_1001991CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100191E1C(uint64_t a1)
{
  unint64_t v2 = sub_1001991CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100191E58(uint64_t a1)
{
  unint64_t v2 = sub_100199220();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100191E94(uint64_t a1)
{
  unint64_t v2 = sub_100199220();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100191ED0(uint64_t a1)
{
  unint64_t v2 = sub_100199274();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100191F0C(uint64_t a1)
{
  unint64_t v2 = sub_100199274();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100191F48()
{
  if (*v0) {
    return 0x614E656369766564;
  }
  else {
    return 25705;
  }
}

uint64_t sub_100191F7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100197DE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100191FA4(uint64_t a1)
{
  unint64_t v2 = sub_10019931C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100191FE0(uint64_t a1)
{
  unint64_t v2 = sub_10019931C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10019201C(uint64_t a1)
{
  unint64_t v2 = sub_1001992C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100192058(uint64_t a1)
{
  unint64_t v2 = sub_1001992C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100192094@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100197ED0(a1, (uint64_t)v5);
  if (!v2) {
    return sub_1001962C8(v5, a2);
  }
  return result;
}

uint64_t sub_1001920DC(void *a1)
{
  sub_1001962C8(v1, (uint64_t)v4);
  return sub_1001912DC(a1);
}

uint64_t sub_10019212C()
{
  unint64_t v1 = 0x6F4C656369766564;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000013;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7055656369766564;
  }
}

uint64_t sub_100192198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100198780(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001921C0(uint64_t a1)
{
  unint64_t v2 = sub_100198FD4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001921FC(uint64_t a1)
{
  unint64_t v2 = sub_100198FD4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100192238(uint64_t a1)
{
  unint64_t v2 = sub_1001990D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100192274(uint64_t a1)
{
  unint64_t v2 = sub_1001990D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001922B0(uint64_t a1)
{
  unint64_t v2 = sub_100199124();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001922EC(uint64_t a1)
{
  unint64_t v2 = sub_100199124();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100192328(uint64_t a1)
{
  unint64_t v2 = sub_100199028();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100192364(uint64_t a1)
{
  unint64_t v2 = sub_100199028();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001923A0(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1001988F8(a1, (uint64_t *)v4);
  if (!v2) {
    sub_100196254(v4, a2);
  }
}

uint64_t sub_1001923E8(void *a1)
{
  sub_100196254(v1, v4);
  return sub_100191840(a1);
}

uint64_t sub_100192438()
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  if (*(void *)(v0 + 24))
  {
    uint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = *(void **)(v0 + 24);
  }
  else
  {
    uint64_t v4 = (void *)0xE700000000000000;
    uint64_t v3 = 0x454D414E5F4F4ELL;
  }
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x636E617473696420;
  v6._object = (void *)0xEA00000000003D65;
  String.append(_:)(v6);
  if (*(unsigned char *)(v0 + 36))
  {
    unint64_t v7 = 0xE300000000000000;
    uint64_t v8 = 7104878;
  }
  else
  {
    uint64_t v8 = String.init<A>(describing:)();
    unint64_t v7 = v9;
  }
  unint64_t v10 = v7;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 60;
}

uint64_t sub_1001925CC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000A38C(&qword_10036AD10);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D6E4(a1, a1[3]);
  sub_10019B354();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12[7] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v12[6] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = *(unsigned char *)(v3 + 36);
    v12[5] = 2;
    v12[1] = v9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_10001639C(v3 + 37, (uint64_t)&v13, &qword_10035AC68);
    sub_10001639C((uint64_t)&v13, (uint64_t)v12, &qword_10035AC68);
    void v11[6] = 3;
    sub_10019B3FC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001927C4()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1701667182;
      break;
    case 2:
      uint64_t result = 0x65636E6174736964;
      break;
    case 3:
      uint64_t result = 0x6E6F69676572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10019283C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10019AEFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100192864(uint64_t a1)
{
  unint64_t v2 = sub_10019B354();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001928A0(uint64_t a1)
{
  unint64_t v2 = sub_10019B354();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001928DC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10019B088(a1, (uint64_t)&v6);
  if (!v2)
  {
    double result = *(double *)&v6;
    long long v5 = *(_OWORD *)v7;
    *(_OWORD *)a2 = v6;
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 30) = *(void *)&v7[14];
  }
  return result;
}

uint64_t sub_100192924(void *a1)
{
  return sub_1001925CC(a1);
}

uint64_t sub_100192964(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65636E6174736964 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F69676572 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100192A50(void *a1)
{
  uint64_t v22 = sub_10000A38C(&qword_10036AD20);
  uint64_t v24 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10036AD28);
  uint64_t v23 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036AD30);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v25 = a1;
  uint64_t v12 = (uint64_t)sub_10000D6E4(a1, v11);
  sub_10019B450();
  uint64_t v13 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    uint64_t v26 = v8;
    uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v14 + 16) == 1)
    {
      if (*(unsigned char *)(v14 + 32))
      {
        char v29 = 1;
        sub_10019B4A4();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        sub_10019B3A8();
        uint64_t v15 = v22;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v24 + 8))(v3, v15);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v7);
        uint64_t v12 = v28 | 0x8000000000;
      }
      else
      {
        char v27 = 0;
        sub_10019B4F8();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v4);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v7);
        uint64_t v12 = v20 & 0x1FFFFFFFFLL;
      }
    }
    else
    {
      uint64_t v12 = (uint64_t)v10;
      uint64_t v16 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v18 = v17;
      sub_10000A38C(&qword_10035FAC0);
      *uint64_t v18 = &type metadata for ProxControlDemoClientMessage.OverrideMessage.Overrides.Value;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, enum case for DecodingError.typeMismatch(_:), v16);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v12, v7);
    }
  }
  sub_10000CC5C((uint64_t)v25);
  return v12;
}

void *sub_100192EFC(void *a1)
{
  uint64_t v3 = sub_10000A38C(&qword_10036AAB8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000D6E4(a1, a1[3]);
  sub_10019946C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000CC5C((uint64_t)a1);
  }
  else
  {
    sub_10000A38C(&qword_10036AAC8);
    sub_1001994C0(&qword_10036AAD0, (void (*)(void))sub_100199530);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    sub_10000CC5C((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_1001930A4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7628147 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7465736E75 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *sub_100193180(void *a1)
{
  uint64_t v26 = sub_10000A38C(&qword_10036ACA0);
  uint64_t v28 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10036ACA8);
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036ACB0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  char v29 = a1;
  uint64_t v12 = sub_10000D6E4(a1, v11);
  sub_10019AD58();
  uint64_t v13 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    uint64_t v25 = 0;
    uint64_t v30 = v8;
    uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v14 + 16) != 1)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v21 = v20;
      sub_10000A38C(&qword_10035FAC0);
      *uint64_t v21 = &type metadata for ProxControlDemoClientMessage.OverrideMessage;
      uint64_t v12 = v10;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, enum case for DecodingError.typeMismatch(_:), v19);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v7);
      goto LABEL_9;
    }
    if (*(unsigned char *)(v14 + 32))
    {
      LOBYTE(v31) = 1;
      sub_10019ADAC();
      uint64_t v15 = v3;
      uint64_t v16 = v10;
      uint64_t v12 = v10;
      uint64_t v17 = v25;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (!v17)
      {
        sub_10019AE00();
        uint64_t v18 = v26;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v18);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v7);
        uint64_t v12 = v31;
        goto LABEL_9;
      }
    }
    else
    {
      LOBYTE(v31) = 0;
      sub_10019AE54();
      uint64_t v16 = v10;
      uint64_t v12 = v10;
      uint64_t v22 = v25;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (!v22)
      {
        sub_10019AE00();
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v24 = v30;
        (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
        uint64_t v12 = v31;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v7);
  }
LABEL_9:
  sub_10000CC5C((uint64_t)v29);
  return v12;
}

uint64_t sub_100193698(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x704168636E75616CLL && a2 == 0xE900000000000070;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656469727265766FLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100193798(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

char *sub_100193874(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036A8F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v28 = v2;
  uint64_t v29 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036A900);
  uint64_t v30 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036A908);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v31 = a1;
  sub_10000D6E4(a1, v13);
  sub_100197944();
  uint64_t v14 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v15 = v14;
  if (v14)
  {
    uint64_t v16 = (uint64_t)v31;
LABEL_7:
    sub_10000CC5C(v16);
    return v15;
  }
  uint64_t v27 = v10;
  uint64_t v32 = v12;
  uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v17 + 16) != 1)
  {
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v21;
    sub_10000A38C(&qword_10035FAC0);
    *(void *)uint64_t v15 = &type metadata for ProxControlDemoClientMessage.DeviceMessage;
    uint64_t v22 = v32;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(char *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v15, enum case for DecodingError.typeMismatch(_:), v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v22, v9);
    uint64_t v16 = (uint64_t)v31;
    goto LABEL_7;
  }
  if (*(unsigned char *)(v17 + 32))
  {
    LOBYTE(v34) = 1;
    sub_100197998();
    uint64_t v18 = v5;
    uint64_t v19 = v32;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_100197848();
    uint64_t v24 = v28;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v24);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v19, v9);
    uint64_t v15 = v34;
  }
  else
  {
    LOBYTE(v34) = 0;
    sub_1001979EC();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    LOBYTE(v35) = 0;
    sub_100197A40();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v15 = v34;
    sub_10000A38C(&qword_10036A930);
    char v33 = 1;
    sub_100197B3C(&qword_10036A938, &qword_10036A940);
    uint64_t v29 = v6;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v25 = v27;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v32, v9);
  }
  sub_10000CC5C((uint64_t)v31);
  return v15;
}

uint64_t sub_100193E7C(void *a1)
{
  uint64_t v3 = sub_10000A38C(&qword_10036A8D8);
  uint64_t v16 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000A38C(&qword_10036A8E0);
  uint64_t v6 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_10019789C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v9 = v16;
    uint64_t v15 = v6;
    if (*(void *)(KeyedDecodingContainer.allKeys.getter() + 16) == 1)
    {
      sub_1001978F0();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v10 = v15;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v5, v3);
    }
    else
    {
      uint64_t v11 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v13 = v12;
      sub_10000A38C(&qword_10035FAC0);
      *uint64_t v13 = &type metadata for ProxControlDemoClientMessage.FeedbackMessage;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v13, enum case for DecodingError.typeMismatch(_:), v11);
      swift_willThrow();
      uint64_t v10 = v15;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v17);
  }
  return sub_10000CC5C((uint64_t)a1);
}

void *sub_100194164(void *a1)
{
  uint64_t v3 = sub_10000A38C(&qword_10036A8B0);
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000A38C(&qword_10036A8B8);
  uint64_t v6 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000D6E4(a1, a1[3]);
  sub_1001977A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    goto LABEL_5;
  }
  uint64_t v18 = a1;
  uint64_t v19 = v6;
  uint64_t v10 = v22;
  if (*(void *)(KeyedDecodingContainer.allKeys.getter() + 16) != 1)
  {
    uint64_t v12 = v10;
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    sub_10000A38C(&qword_10035FAC0);
    void *v15 = &type metadata for ProxControlDemoClientMessage.SystemMessage;
    uint64_t v9 = v8;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, enum case for DecodingError.typeMismatch(_:), v13);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v12);
    a1 = v18;
LABEL_5:
    sub_10000CC5C((uint64_t)a1);
    return v9;
  }
  sub_1001977F4();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v11 = v19;
  sub_100197848();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
  uint64_t v9 = v21;
  sub_10000CC5C((uint64_t)v18);
  return v9;
}

uint64_t sub_1001944E4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x5374736575716572 && a2 == 0xEC00000065746174;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1819044203 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656369766564 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6B63616264656566 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6D6574737973 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1001946FC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001947C0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v59 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10036A648);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v55 = v3;
  uint64_t v56 = v4;
  __chkstk_darwin(v3);
  unint64_t v58 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036A650);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v53 = v6;
  uint64_t v54 = v7;
  __chkstk_darwin(v6);
  unint64_t v61 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10000A38C(&qword_10036A658);
  uint64_t v57 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  Swift::String v60 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000A38C(&qword_10036A660);
  uint64_t v52 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_10036A668);
  uint64_t v49 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_10036A670);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a1[3];
  unint64_t v62 = a1;
  sub_10000D6E4(a1, v19);
  sub_100195188();
  uint64_t v20 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20) {
    return sub_10000CC5C((uint64_t)v62);
  }
  Swift::String v63 = v14;
  uint64_t v22 = v60;
  uint64_t v21 = v61;
  uint64_t v23 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v23 + 16) != 1)
  {
    uint64_t v25 = v15;
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v28 = v27;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v28 = &type metadata for ProxControlDemoClientMessage;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, enum case for DecodingError.typeMismatch(_:), v26);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v25);
    return sub_10000CC5C((uint64_t)v62);
  }
  switch(*(unsigned char *)(v23 + 32))
  {
    case 1:
      LOBYTE(v64) = 1;
      sub_1001953D4();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v11, v50);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      unint64_t v43 = 0x8000000000000000;
      uint64_t v38 = 1;
      goto LABEL_11;
    case 2:
      Swift::String v63 = (char *)v23;
      LOBYTE(v64) = 2;
      sub_10019532C();
      uint64_t v29 = v22;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v68 = 0;
      sub_100195380();
      uint64_t v30 = v51;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      unint64_t v61 = (char *)v15;
      uint64_t v38 = v64;
      uint64_t v39 = v65;
      unint64_t v58 = v66;
      unint64_t v43 = v67;
      char v68 = 1;
      uint64_t v41 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v44 = v30;
      uint64_t v42 = v45;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v29, v44);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *))(v16 + 8))(v18, v61);
      uint64_t v46 = (uint64_t)v62;
      uint64_t v40 = v58;
      uint64_t v47 = v59;
      goto LABEL_12;
    case 3:
      LOBYTE(v64) = 3;
      sub_100195284();
      uint64_t v31 = v21;
      uint64_t v32 = v18;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1001952D8();
      uint64_t v33 = v53;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v31, v33);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v32, v15);
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      unint64_t v43 = 0x8000000000000000;
      uint64_t v38 = 2;
      goto LABEL_11;
    case 4:
      LOBYTE(v64) = 4;
      sub_1001951DC();
      uint64_t v34 = v58;
      uint64_t v35 = v18;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_100195230();
      uint64_t v36 = v55;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v34, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v35, v15);
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      uint64_t v38 = v64;
      uint64_t v39 = v65;
      unint64_t v43 = 0x4000000000000000;
      goto LABEL_11;
    default:
      LOBYTE(v64) = 0;
      sub_100195428();
      uint64_t v24 = v63;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v24, v12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      unint64_t v43 = 0x8000000000000000;
LABEL_11:
      uint64_t v46 = (uint64_t)v62;
      uint64_t v47 = v59;
LABEL_12:
      uint64_t result = sub_10000CC5C(v46);
      *uint64_t v47 = v38;
      v47[1] = v39;
      v47[2] = (uint64_t)v40;
      v47[3] = v43;
      v47[4] = v41;
      v47[5] = v42;
      break;
  }
  return result;
}

unint64_t sub_100195188()
{
  unint64_t result = qword_10036A678;
  if (!qword_10036A678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A678);
  }
  return result;
}

unint64_t sub_1001951DC()
{
  unint64_t result = qword_10036A680;
  if (!qword_10036A680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A680);
  }
  return result;
}

unint64_t sub_100195230()
{
  unint64_t result = qword_10036A688;
  if (!qword_10036A688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A688);
  }
  return result;
}

unint64_t sub_100195284()
{
  unint64_t result = qword_10036A690;
  if (!qword_10036A690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A690);
  }
  return result;
}

unint64_t sub_1001952D8()
{
  unint64_t result = qword_10036A698;
  if (!qword_10036A698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A698);
  }
  return result;
}

unint64_t sub_10019532C()
{
  unint64_t result = qword_10036A6A0;
  if (!qword_10036A6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A6A0);
  }
  return result;
}

unint64_t sub_100195380()
{
  unint64_t result = qword_10036A6A8;
  if (!qword_10036A6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A6A8);
  }
  return result;
}

unint64_t sub_1001953D4()
{
  unint64_t result = qword_10036A6B0;
  if (!qword_10036A6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A6B0);
  }
  return result;
}

unint64_t sub_100195428()
{
  unint64_t result = qword_10036A6B8;
  if (!qword_10036A6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A6B8);
  }
  return result;
}

uint64_t sub_10019547C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a1 + 8);
  *(void *)a2 = v2;
  return a2;
}

unint64_t sub_100195494()
{
  unint64_t result = qword_10036A6F0;
  if (!qword_10036A6F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A6F0);
  }
  return result;
}

unint64_t sub_1001954E8()
{
  unint64_t result = qword_10036A6F8;
  if (!qword_10036A6F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A6F8);
  }
  return result;
}

unint64_t sub_10019553C()
{
  unint64_t result = qword_10036A700;
  if (!qword_10036A700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A700);
  }
  return result;
}

uint64_t sub_100195590(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6580592 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001002C1D70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001002C1D90)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

__n128 sub_100195728@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  uint64_t v50 = sub_10000A38C(&qword_10036A708);
  uint64_t v52 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  *(void *)&long long v55 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_10000A38C(&qword_10036A710);
  uint64_t v51 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v54 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000A38C(&qword_10036A718);
  uint64_t v48 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  char v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036A720);
  uint64_t v47 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10036A728);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  uint64_t v64 = a1;
  sub_10000D6E4(a1, v14);
  sub_100195FB4();
  unint64_t v15 = v57.n128_u64[0];
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
  {
LABEL_8:
    sub_10000CC5C((uint64_t)v64);
    return result;
  }
  uint64_t v16 = v9;
  uint64_t v43 = v7;
  uint64_t v44 = v6;
  uint64_t v18 = v53;
  uint64_t v17 = v54;
  uint64_t v45 = 0;
  uint64_t v19 = v55;
  uint64_t v46 = v11;
  uint64_t v20 = v56;
  v57.n128_u64[0] = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v57.n128_u64[0] + 16) != 1)
  {
    uint64_t v29 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v31 = v30;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v31 = &type metadata for ProxControlDemoServerMessage;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v29 - 8) + 104))(v31, enum case for DecodingError.typeMismatch(_:), v29);
    swift_willThrow();
LABEL_7:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v10);
    goto LABEL_8;
  }
  switch(*(unsigned char *)(v57.n128_u64[0] + 32))
  {
    case 1:
      LOBYTE(v58) = 1;
      sub_100196158();
      uint64_t v33 = v44;
      uint64_t v34 = v45;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v34) {
        goto LABEL_7;
      }
      sub_1001961AC();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v24 = 0;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v18);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v10);
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v35 = &_mh_execute_header;
      if (!BYTE4(v58)) {
        uint64_t v35 = 0;
      }
      __n128 v57 = 0u;
      long long v55 = (unint64_t)v35 | v58;
      __int16 v28 = 0x4000;
      goto LABEL_17;
    case 2:
      LOBYTE(v58) = 2;
      sub_1001960B0();
      uint64_t v36 = v17;
      uint64_t v37 = v45;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v37) {
        goto LABEL_7;
      }
      sub_100196104();
      uint64_t v38 = v49;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v24 = 0;
      uint64_t v39 = v46;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v36, v38);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v27 = 0;
      long long v55 = v58;
      __n128 v57 = v59;
      __int16 v28 = 0x8000;
      uint64_t v26 = v60;
      goto LABEL_17;
    case 3:
      LOBYTE(v58) = 3;
      sub_100196008();
      uint64_t v40 = v45;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v40) {
        goto LABEL_7;
      }
      sub_10019605C();
      uint64_t v41 = v50;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v42 = v46;
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v19, v41);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v10);
      long long v55 = v58;
      __n128 v57 = v59;
      uint64_t v26 = v60;
      uint64_t v24 = v61;
      uint64_t v27 = v62;
      __int16 v28 = v63 | 0xC000;
LABEL_17:
      uint64_t v25 = (uint64_t)v64;
      break;
    default:
      LOBYTE(v58) = 0;
      sub_100196200();
      uint64_t v21 = v45;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v21) {
        goto LABEL_7;
      }
      uint64_t v22 = v43;
      unsigned int v23 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v24 = 0;
      (*(void (**)(char *, uint64_t))(v47 + 8))(v16, v22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v10);
      uint64_t v25 = (uint64_t)v64;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      __int16 v28 = 0;
      __n128 v57 = 0u;
      long long v55 = v23;
      break;
  }
  sub_10000CC5C(v25);
  __n128 result = v57;
  *(_OWORD *)uint64_t v20 = v55;
  *(__n128 *)(v20 + 16) = result;
  *(void *)(v20 + 32) = v26;
  *(void *)(v20 + 40) = v24;
  *(void *)(v20 + 48) = v27;
  *(_WORD *)(v20 + 56) = v28;
  return result;
}

unint64_t sub_100195FB4()
{
  unint64_t result = qword_10036A730;
  if (!qword_10036A730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A730);
  }
  return result;
}

unint64_t sub_100196008()
{
  unint64_t result = qword_10036A738;
  if (!qword_10036A738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A738);
  }
  return result;
}

unint64_t sub_10019605C()
{
  unint64_t result = qword_10036A740;
  if (!qword_10036A740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A740);
  }
  return result;
}

unint64_t sub_1001960B0()
{
  unint64_t result = qword_10036A748;
  if (!qword_10036A748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A748);
  }
  return result;
}

unint64_t sub_100196104()
{
  unint64_t result = qword_10036A750;
  if (!qword_10036A750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A750);
  }
  return result;
}

unint64_t sub_100196158()
{
  unint64_t result = qword_10036A758;
  if (!qword_10036A758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A758);
  }
  return result;
}

unint64_t sub_1001961AC()
{
  unint64_t result = qword_10036A760;
  if (!qword_10036A760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A760);
  }
  return result;
}

unint64_t sub_100196200()
{
  unint64_t result = qword_10036A768;
  if (!qword_10036A768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A768);
  }
  return result;
}

_OWORD *sub_100196254(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[2];
  *(_OWORD *)((char *)a2 + 42) = *(long long *)((char *)a1 + 42);
  a2[1] = v3;
  a2[2] = v4;
  *a2 = v2;
  return a2;
}

unint64_t sub_100196274()
{
  unint64_t result = qword_10036A798;
  if (!qword_10036A798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A798);
  }
  return result;
}

uint64_t sub_1001962C8(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_1001962E0()
{
  unint64_t result = qword_10036A7A0;
  if (!qword_10036A7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A7A0);
  }
  return result;
}

unint64_t sub_100196334()
{
  unint64_t result = qword_10036A7A8;
  if (!qword_10036A7A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A7A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.OverrideMessage.Overrides()
{
  return &type metadata for ProxControlDemoClientMessage.OverrideMessage.Overrides;
}

ValueMetadata *type metadata accessor for ProxControlDemoServerMessage.CodingKeys()
{
  return &type metadata for ProxControlDemoServerMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoServerMessage.PidCodingKeys()
{
  return &type metadata for ProxControlDemoServerMessage.PidCodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoServerMessage.StateCodingKeys()
{
  return &type metadata for ProxControlDemoServerMessage.StateCodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoServerMessage.HandoffSessionMessageCodingKeys()
{
  return &type metadata for ProxControlDemoServerMessage.HandoffSessionMessageCodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoServerMessage.RangingProxyStateMessageCodingKeys()
{
  return &type metadata for ProxControlDemoServerMessage.RangingProxyStateMessageCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ProxControlDemoClientMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001964C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.CodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.RequestStateCodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.RequestStateCodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.KillCodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.KillCodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.DeviceCodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.DeviceCodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.FeedbackCodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.FeedbackCodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.SystemCodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.SystemCodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.FeedbackMessage()
{
  return &type metadata for ProxControlDemoClientMessage.FeedbackMessage;
}

uint64_t initializeBufferWithCopyOfBuffer for ProxControlDemoClientMessage.SystemMessage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ShareableContentEffect()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithTake for ProxControlDemoClientMessage.SystemMessage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.SystemMessage()
{
  return &type metadata for ProxControlDemoClientMessage.SystemMessage;
}

uint64_t destroy for ProxControlDemoClientMessage.DeviceMessage(uint64_t a1)
{
  return sub_10003A5EC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for ProxControlDemoClientMessage.DeviceMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_10003A508(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for ProxControlDemoClientMessage.DeviceMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_10003A508(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  sub_10003A5EC(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for ProxControlDemoClientMessage.DeviceMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  sub_10003A5EC(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProxControlDemoClientMessage.DeviceMessage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ProxControlDemoClientMessage.DeviceMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1001967B8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.DeviceMessage()
{
  return &type metadata for ProxControlDemoClientMessage.DeviceMessage;
}

uint64_t destroy for RangingProxy2StateMessage(uint64_t a1)
{
  return sub_10007E784(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56), *(unsigned char *)(a1 + 57));
}

uint64_t initializeWithCopy for RangingProxy2StateMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 57);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 56);
  sub_10007EA08(*(void *)a2, v4, v5, v6, v7, v8, v9, v11, v10);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 57) = v10;
  return a1;
}

uint64_t assignWithCopy for RangingProxy2StateMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 57);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 56);
  sub_10007EA08(*(void *)a2, v4, v5, v6, v7, v8, v9, v11, v10);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  char v19 = *(unsigned char *)(a1 + 57);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  unsigned __int8 v20 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 57) = v10;
  sub_10007E784(v12, v13, v14, v15, v16, v17, v18, v20, v19);
  return a1;
}

uint64_t assignWithTake for RangingProxy2StateMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  __int16 v4 = *(_WORD *)(a2 + 56);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  char v12 = *(unsigned char *)(a1 + 57);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v3;
  unsigned __int8 v14 = *(unsigned char *)(a1 + 56);
  *(_WORD *)(a1 + 56) = v4;
  sub_10007E784(v5, v7, v6, v8, v9, v10, v11, v14, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for RangingProxy2StateMessage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 58)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 57);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RangingProxy2StateMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 58) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 57) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100196A88(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 57);
}

uint64_t sub_100196A90(uint64_t result, char a2)
{
  *(unsigned char *)(result + 57) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RangingProxy2StateMessage()
{
  return &type metadata for RangingProxy2StateMessage;
}

uint64_t destroy for HandoffSessionMessage(uint64_t a1)
{
  return sub_100076598(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for HandoffSessionMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_10007653C(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for HandoffSessionMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_10007653C(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_100076598(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for HandoffSessionMessage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_100076598(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandoffSessionMessage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HandoffSessionMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100196C70(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_100196C78(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HandoffSessionMessage()
{
  return &type metadata for HandoffSessionMessage;
}

ValueMetadata *type metadata accessor for ProxControlDemoServerMessage.DaemonState()
{
  return &type metadata for ProxControlDemoServerMessage.DaemonState;
}

unint64_t sub_100196CA4()
{
  unint64_t result = qword_10036A7B0;
  if (!qword_10036A7B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A7B0);
  }
  return result;
}

unint64_t sub_100196CFC()
{
  unint64_t result = qword_10036A7B8;
  if (!qword_10036A7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A7B8);
  }
  return result;
}

unint64_t sub_100196D54()
{
  unint64_t result = qword_10036A7C0;
  if (!qword_10036A7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A7C0);
  }
  return result;
}

unint64_t sub_100196DAC()
{
  unint64_t result = qword_10036A7C8;
  if (!qword_10036A7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A7C8);
  }
  return result;
}

unint64_t sub_100196E04()
{
  unint64_t result = qword_10036A7D0;
  if (!qword_10036A7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A7D0);
  }
  return result;
}

unint64_t sub_100196E5C()
{
  unint64_t result = qword_10036A7D8;
  if (!qword_10036A7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A7D8);
  }
  return result;
}

unint64_t sub_100196EB4()
{
  unint64_t result = qword_10036A7E0;
  if (!qword_10036A7E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A7E0);
  }
  return result;
}

unint64_t sub_100196F0C()
{
  unint64_t result = qword_10036A7E8;
  if (!qword_10036A7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A7E8);
  }
  return result;
}

unint64_t sub_100196F64()
{
  unint64_t result = qword_10036A7F0;
  if (!qword_10036A7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A7F0);
  }
  return result;
}

unint64_t sub_100196FBC()
{
  unint64_t result = qword_10036A7F8;
  if (!qword_10036A7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A7F8);
  }
  return result;
}

unint64_t sub_100197014()
{
  unint64_t result = qword_10036A800;
  if (!qword_10036A800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A800);
  }
  return result;
}

unint64_t sub_10019706C()
{
  unint64_t result = qword_10036A808;
  if (!qword_10036A808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A808);
  }
  return result;
}

unint64_t sub_1001970C4()
{
  unint64_t result = qword_10036A810;
  if (!qword_10036A810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A810);
  }
  return result;
}

unint64_t sub_10019711C()
{
  unint64_t result = qword_10036A818;
  if (!qword_10036A818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A818);
  }
  return result;
}

unint64_t sub_100197174()
{
  unint64_t result = qword_10036A820;
  if (!qword_10036A820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A820);
  }
  return result;
}

unint64_t sub_1001971CC()
{
  unint64_t result = qword_10036A828;
  if (!qword_10036A828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A828);
  }
  return result;
}

unint64_t sub_100197224()
{
  unint64_t result = qword_10036A830;
  if (!qword_10036A830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A830);
  }
  return result;
}

unint64_t sub_10019727C()
{
  unint64_t result = qword_10036A838;
  if (!qword_10036A838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A838);
  }
  return result;
}

unint64_t sub_1001972D4()
{
  unint64_t result = qword_10036A840;
  if (!qword_10036A840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A840);
  }
  return result;
}

unint64_t sub_10019732C()
{
  unint64_t result = qword_10036A848;
  if (!qword_10036A848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A848);
  }
  return result;
}

unint64_t sub_100197384()
{
  unint64_t result = qword_10036A850;
  if (!qword_10036A850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A850);
  }
  return result;
}

unint64_t sub_1001973DC()
{
  unint64_t result = qword_10036A858;
  if (!qword_10036A858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A858);
  }
  return result;
}

unint64_t sub_100197434()
{
  unint64_t result = qword_10036A860;
  if (!qword_10036A860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A860);
  }
  return result;
}

unint64_t sub_10019748C()
{
  unint64_t result = qword_10036A868;
  if (!qword_10036A868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A868);
  }
  return result;
}

unint64_t sub_1001974E4()
{
  unint64_t result = qword_10036A870;
  if (!qword_10036A870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A870);
  }
  return result;
}

unint64_t sub_10019753C()
{
  unint64_t result = qword_10036A878;
  if (!qword_10036A878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A878);
  }
  return result;
}

unint64_t sub_100197594()
{
  unint64_t result = qword_10036A880;
  if (!qword_10036A880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A880);
  }
  return result;
}

unint64_t sub_1001975EC()
{
  unint64_t result = qword_10036A888;
  if (!qword_10036A888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A888);
  }
  return result;
}

unint64_t sub_100197644()
{
  unint64_t result = qword_10036A890;
  if (!qword_10036A890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A890);
  }
  return result;
}

unint64_t sub_10019769C()
{
  unint64_t result = qword_10036A898;
  if (!qword_10036A898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A898);
  }
  return result;
}

unint64_t sub_1001976F4()
{
  unint64_t result = qword_10036A8A0;
  if (!qword_10036A8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A8A0);
  }
  return result;
}

unint64_t sub_10019774C()
{
  unint64_t result = qword_10036A8A8;
  if (!qword_10036A8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A8A8);
  }
  return result;
}

unint64_t sub_1001977A0()
{
  unint64_t result = qword_10036A8C0;
  if (!qword_10036A8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A8C0);
  }
  return result;
}

unint64_t sub_1001977F4()
{
  unint64_t result = qword_10036A8C8;
  if (!qword_10036A8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A8C8);
  }
  return result;
}

unint64_t sub_100197848()
{
  unint64_t result = qword_10036A8D0;
  if (!qword_10036A8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A8D0);
  }
  return result;
}

unint64_t sub_10019789C()
{
  unint64_t result = qword_10036A8E8;
  if (!qword_10036A8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A8E8);
  }
  return result;
}

unint64_t sub_1001978F0()
{
  unint64_t result = qword_10036A8F0;
  if (!qword_10036A8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A8F0);
  }
  return result;
}

unint64_t sub_100197944()
{
  unint64_t result = qword_10036A910;
  if (!qword_10036A910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A910);
  }
  return result;
}

unint64_t sub_100197998()
{
  unint64_t result = qword_10036A918;
  if (!qword_10036A918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A918);
  }
  return result;
}

unint64_t sub_1001979EC()
{
  unint64_t result = qword_10036A920;
  if (!qword_10036A920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A920);
  }
  return result;
}

unint64_t sub_100197A40()
{
  unint64_t result = qword_10036A928;
  if (!qword_10036A928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A928);
  }
  return result;
}

unint64_t sub_100197A94()
{
  unint64_t result = qword_10036A958;
  if (!qword_10036A958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A958);
  }
  return result;
}

unint64_t sub_100197AE8()
{
  unint64_t result = qword_10036A988;
  if (!qword_10036A988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A988);
  }
  return result;
}

uint64_t sub_100197B3C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000A3D0(&qword_10036A930);
    sub_100197BBC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100197BBC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LaunchAppRequest.Option();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100197C00(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x436E6F6973736573 && a2 == 0xEE006465676E6168;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6168436574617473 && a2 == 0xEC0000006465676ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E657665 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746365666665 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100197DE8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x614E656369766564 && a2 == 0xEA0000000000656DLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100197ED0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v66 = sub_10000A38C(&qword_10036A9F0);
  uint64_t v62 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v65 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000A38C(&qword_10036A9F8);
  uint64_t v61 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v64 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_10000A38C(&qword_10036AA00);
  uint64_t v58 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  char v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036AA08);
  uint64_t v57 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unsigned __int8 v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10036AA10);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  long long v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  unsigned __int8 v67 = a1;
  sub_10000D6E4(a1, v14);
  sub_1001991CC();
  uint64_t v15 = v68;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    return sub_10000CC5C((uint64_t)v67);
  }
  char v68 = v6;
  uint64_t v16 = v9;
  uint64_t v17 = v64;
  uint64_t v18 = v65;
  uint64_t v56 = v7;
  uint64_t v19 = v66;
  uint64_t v20 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v21 = v10;
  if (*(void *)(v20 + 16) != 1)
  {
    uint64_t v24 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v26 = v25;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v26 = &type metadata for HandoffSessionMessage;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, enum case for DecodingError.typeMismatch(_:), v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return sub_10000CC5C((uint64_t)v67);
  }
  uint64_t v22 = *(unsigned __int8 *)(v20 + 32);
  uint64_t v23 = v11;
  uint64_t v55 = v22;
  switch(v22)
  {
    case 1:
      char v72 = 1;
      sub_1001992C8();
      uint64_t v27 = v68;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v28 = v60;
      uint64_t v43 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v29 = v27;
      uint64_t v45 = v39;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v29, v28);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v21);
      uint64_t v54 = 0;
      uint64_t v51 = 0;
      uint64_t v53 = (uint64_t)v67;
      goto LABEL_10;
    case 2:
      char v73 = 2;
      sub_100199274();
      uint64_t v30 = v17;
      uint64_t v31 = v21;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v32 = v59;
      uint64_t v33 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v41 = v40;
      uint64_t v42 = *(void (**)(char *, uint64_t))(v61 + 8);
      char v68 = (char *)v33;
      v42(v30, v32);
      uint64_t v45 = v41;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v31);
      uint64_t v54 = 0;
      uint64_t v51 = 0;
      uint64_t v53 = (uint64_t)v67;
      uint64_t v43 = (uint64_t)v68;
      goto LABEL_10;
    case 3:
      char v74 = 3;
      sub_100199220();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v68 = (char *)v21;
      uint64_t v36 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v37 = v18;
      uint64_t v45 = v47;
      uint64_t v48 = v36;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v37, v19);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *))(v11 + 8))(v13, v68);
      uint64_t v54 = 0;
      uint64_t v51 = 0;
      uint64_t v53 = (uint64_t)v67;
      uint64_t v49 = v63;
      uint64_t v43 = v48;
      goto LABEL_11;
    default:
      char v71 = 0;
      sub_10019931C();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v68 = (char *)v21;
      char v70 = 0;
      uint64_t v34 = v56;
      uint64_t v35 = v16;
      uint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v45 = v44;
      char v69 = 1;
      uint64_t v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v51 = v50;
      uint64_t v52 = *(void (**)(char *, uint64_t))(v57 + 8);
      uint64_t v66 = v46;
      v52(v35, v34);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *))(v23 + 8))(v13, v68);
      uint64_t v54 = v66;
      uint64_t v53 = (uint64_t)v67;
LABEL_10:
      uint64_t v49 = v63;
LABEL_11:
      uint64_t result = sub_10000CC5C(v53);
      *(void *)uint64_t v49 = v43;
      *(void *)(v49 + 8) = v45;
      *(void *)(v49 + 16) = v54;
      *(void *)(v49 + 24) = v51;
      *(unsigned char *)(v49 + 32) = v55;
      break;
  }
  return result;
}

uint64_t sub_100198780(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7055656369766564 && a2 == 0xEC00000065746164;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F4C656369766564 && a2 == 0xEA00000000007473 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001002C1DB0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

double sub_1001988F8@<D0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v42 = sub_10000A38C(&qword_10036A9A0);
  uint64_t v40 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v45 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000A38C(&qword_10036A9A8);
  uint64_t v39 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v5 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036A9B0);
  uint64_t v41 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036A9B8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v54 = a1;
  sub_10000D6E4(a1, v13);
  sub_100198FD4();
  uint64_t v14 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    goto LABEL_11;
  }
  uint64_t v38 = v6;
  uint64_t v15 = v44;
  uint64_t v16 = v45;
  *(void *)&long long v46 = v10;
  uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v17 + 16) != 1)
  {
    uint64_t v19 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v12;
    uint64_t v22 = v21;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v22 = &type metadata for RangingProxy2StateMessage;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v22, enum case for DecodingError.typeMismatch(_:), v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v20, v9);
LABEL_11:
    sub_10000CC5C((uint64_t)v54);
    return result;
  }
  v37[1] = v17;
  int v18 = *(unsigned __int8 *)(v17 + 32);
  if (*(unsigned char *)(v17 + 32))
  {
    if (v18 == 1)
    {
      LOBYTE(v47) = 1;
      sub_1001990D0();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v31 = v30;
      LODWORD(v41) = 1;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v5, v15);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v9);
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      char v35 = 0;
      long long v46 = 0u;
    }
    else
    {
      LOBYTE(v47) = 2;
      sub_100199028();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10019907C();
      uint64_t v27 = v42;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      uint64_t v28 = v46;
      LODWORD(v41) = v18;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v9);
      uint64_t v29 = v47;
      uint64_t v31 = v48;
      long long v46 = v49;
      unint64_t v32 = v50;
      uint64_t v33 = v51;
      uint64_t v34 = v52;
      char v35 = v53;
    }
  }
  else
  {
    LOBYTE(v47) = 0;
    sub_100199124();
    uint64_t v23 = v8;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_100199178();
    uint64_t v24 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v23, v24);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v9);
    LODWORD(v41) = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    char v35 = 0;
    uint64_t v29 = v47;
    uint64_t v31 = v48;
    long long v46 = v49;
    uint64_t v25 = &_mh_execute_header;
    if (!BYTE4(v50)) {
      uint64_t v25 = 0;
    }
    unint64_t v32 = (unint64_t)v25 | v50 | ((unint64_t)BYTE5(v50) << 40);
  }
  sub_10000CC5C((uint64_t)v54);
  uint64_t v36 = v43;
  uint64_t *v43 = v29;
  v36[1] = v31;
  double result = *(double *)&v46;
  *((_OWORD *)v36 + 1) = v46;
  v36[4] = v32;
  v36[5] = v33;
  v36[6] = v34;
  *((unsigned char *)v36 + 56) = v35;
  *((unsigned char *)v36 + 57) = v41;
  return result;
}

unint64_t sub_100198FD4()
{
  unint64_t result = qword_10036A9C0;
  if (!qword_10036A9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A9C0);
  }
  return result;
}

unint64_t sub_100199028()
{
  unint64_t result = qword_10036A9C8;
  if (!qword_10036A9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A9C8);
  }
  return result;
}

unint64_t sub_10019907C()
{
  unint64_t result = qword_10036A9D0;
  if (!qword_10036A9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A9D0);
  }
  return result;
}

unint64_t sub_1001990D0()
{
  unint64_t result = qword_10036A9D8;
  if (!qword_10036A9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A9D8);
  }
  return result;
}

unint64_t sub_100199124()
{
  unint64_t result = qword_10036A9E0;
  if (!qword_10036A9E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A9E0);
  }
  return result;
}

unint64_t sub_100199178()
{
  unint64_t result = qword_10036A9E8;
  if (!qword_10036A9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A9E8);
  }
  return result;
}

unint64_t sub_1001991CC()
{
  unint64_t result = qword_10036AA18;
  if (!qword_10036AA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AA18);
  }
  return result;
}

unint64_t sub_100199220()
{
  unint64_t result = qword_10036AA20;
  if (!qword_10036AA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AA20);
  }
  return result;
}

unint64_t sub_100199274()
{
  unint64_t result = qword_10036AA28;
  if (!qword_10036AA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AA28);
  }
  return result;
}

unint64_t sub_1001992C8()
{
  unint64_t result = qword_10036AA30;
  if (!qword_10036AA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AA30);
  }
  return result;
}

unint64_t sub_10019931C()
{
  unint64_t result = qword_10036AA38;
  if (!qword_10036AA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AA38);
  }
  return result;
}

unint64_t sub_100199370()
{
  unint64_t result = qword_10036AA48;
  if (!qword_10036AA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AA48);
  }
  return result;
}

unint64_t sub_1001993C4()
{
  unint64_t result = qword_10036AA78;
  if (!qword_10036AA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AA78);
  }
  return result;
}

unint64_t sub_100199418()
{
  unint64_t result = qword_10036AA80;
  if (!qword_10036AA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AA80);
  }
  return result;
}

unint64_t sub_10019946C()
{
  unint64_t result = qword_10036AAC0;
  if (!qword_10036AAC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AAC0);
  }
  return result;
}

uint64_t sub_1001994C0(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000A3D0(&qword_10036AAC8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100199530()
{
  unint64_t result = qword_10036AAD8;
  if (!qword_10036AAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AAD8);
  }
  return result;
}

unint64_t sub_100199584()
{
  unint64_t result = qword_10036AAF0;
  if (!qword_10036AAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AAF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.OverrideMessage.Overrides.CodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.OverrideMessage.Overrides.CodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoServerMessage.DaemonState.CodingKeys()
{
  return &type metadata for ProxControlDemoServerMessage.DaemonState.CodingKeys;
}

ValueMetadata *type metadata accessor for HandoffSessionMessage.CodingKeys()
{
  return &type metadata for HandoffSessionMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for HandoffSessionMessage.SessionChangedCodingKeys()
{
  return &type metadata for HandoffSessionMessage.SessionChangedCodingKeys;
}

ValueMetadata *type metadata accessor for HandoffSessionMessage.StateChangedCodingKeys()
{
  return &type metadata for HandoffSessionMessage.StateChangedCodingKeys;
}

ValueMetadata *type metadata accessor for HandoffSessionMessage.EventCodingKeys()
{
  return &type metadata for HandoffSessionMessage.EventCodingKeys;
}

ValueMetadata *type metadata accessor for HandoffSessionMessage.EffectCodingKeys()
{
  return &type metadata for HandoffSessionMessage.EffectCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for RangingProxy2StateMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100199714);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RangingProxy2StateMessage.CodingKeys()
{
  return &type metadata for RangingProxy2StateMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for RangingProxy2StateMessage.DeviceUpdateCodingKeys()
{
  return &type metadata for RangingProxy2StateMessage.DeviceUpdateCodingKeys;
}

ValueMetadata *type metadata accessor for RangingProxy2StateMessage.DeviceLostCodingKeys()
{
  return &type metadata for RangingProxy2StateMessage.DeviceLostCodingKeys;
}

ValueMetadata *type metadata accessor for RangingProxy2StateMessage.RangingSessionStateCodingKeys()
{
  return &type metadata for RangingProxy2StateMessage.RangingSessionStateCodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.DeviceMessage.CodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.DeviceMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.DeviceMessage.LaunchAppCodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.DeviceMessage.LaunchAppCodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.DeviceMessage.OverrideCodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.DeviceMessage.OverrideCodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.FeedbackMessage.CodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.FeedbackMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.FeedbackMessage.PresentCodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.FeedbackMessage.PresentCodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.SystemMessage.CodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.SystemMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.SystemMessage.OverrideCodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.SystemMessage.OverrideCodingKeys;
}

uint64_t getEnumTagSinglePayload for ProxControlDemoClientMessage.OverrideMessage.Overrides.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 4) >> 7) & 0xFFFFFF81 | (2 * ((*(unsigned __int8 *)(a1 + 4) >> 1) & 0x3F))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ProxControlDemoClientMessage.OverrideMessage.Overrides.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2)
    {
      *(_DWORD *)unint64_t result = 0;
      *(unsigned char *)(result + 4) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t sub_100199894(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4) >> 7;
}

uint64_t sub_1001998A0(uint64_t result)
{
  *(unsigned char *)(result + 4) &= ~0x80u;
  return result;
}

unsigned int *sub_1001998B8(unsigned int *result, uint64_t a2)
{
  *((unsigned char *)result + 4) = ((*result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32)) & 0x1FFFFFFFFLL | (a2 << 39)) >> 32;
  return result;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.OverrideMessage.Overrides.Value()
{
  return &type metadata for ProxControlDemoClientMessage.OverrideMessage.Overrides.Value;
}

uint64_t initializeWithCopy for NearbyDeviceStub(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NearbyDeviceStub(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  return a1;
}

__n128 initializeWithTake for NearbyDeviceStub(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 30) = *(void *)(a2 + 30);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for NearbyDeviceStub(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyDeviceStub(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 38)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyDeviceStub(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 38) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 38) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyDeviceStub()
{
  return &type metadata for NearbyDeviceStub;
}

uint64_t _s17proximitycontrold28ProxControlDemoClientMessageO15OverrideMessageOwca_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.OverrideMessage()
{
  return &type metadata for ProxControlDemoClientMessage.OverrideMessage;
}

unint64_t sub_100199B24()
{
  unint64_t result = qword_10036AAF8;
  if (!qword_10036AAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AAF8);
  }
  return result;
}

unint64_t sub_100199B7C()
{
  unint64_t result = qword_10036AB00;
  if (!qword_10036AB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB00);
  }
  return result;
}

unint64_t sub_100199BD4()
{
  unint64_t result = qword_10036AB08;
  if (!qword_10036AB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB08);
  }
  return result;
}

unint64_t sub_100199C2C()
{
  unint64_t result = qword_10036AB10;
  if (!qword_10036AB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB10);
  }
  return result;
}

unint64_t sub_100199C84()
{
  unint64_t result = qword_10036AB18;
  if (!qword_10036AB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB18);
  }
  return result;
}

unint64_t sub_100199CDC()
{
  unint64_t result = qword_10036AB20;
  if (!qword_10036AB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB20);
  }
  return result;
}

unint64_t sub_100199D34()
{
  unint64_t result = qword_10036AB28;
  if (!qword_10036AB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB28);
  }
  return result;
}

unint64_t sub_100199D8C()
{
  unint64_t result = qword_10036AB30;
  if (!qword_10036AB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB30);
  }
  return result;
}

unint64_t sub_100199DE4()
{
  unint64_t result = qword_10036AB38;
  if (!qword_10036AB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB38);
  }
  return result;
}

unint64_t sub_100199E3C()
{
  unint64_t result = qword_10036AB40;
  if (!qword_10036AB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB40);
  }
  return result;
}

unint64_t sub_100199E94()
{
  unint64_t result = qword_10036AB48;
  if (!qword_10036AB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB48);
  }
  return result;
}

unint64_t sub_100199EEC()
{
  unint64_t result = qword_10036AB50;
  if (!qword_10036AB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB50);
  }
  return result;
}

unint64_t sub_100199F44()
{
  unint64_t result = qword_10036AB58;
  if (!qword_10036AB58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB58);
  }
  return result;
}

unint64_t sub_100199F9C()
{
  unint64_t result = qword_10036AB60;
  if (!qword_10036AB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB60);
  }
  return result;
}

unint64_t sub_100199FF4()
{
  unint64_t result = qword_10036AB68;
  if (!qword_10036AB68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB68);
  }
  return result;
}

unint64_t sub_10019A04C()
{
  unint64_t result = qword_10036AB70;
  if (!qword_10036AB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB70);
  }
  return result;
}

unint64_t sub_10019A0A4()
{
  unint64_t result = qword_10036AB78;
  if (!qword_10036AB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB78);
  }
  return result;
}

unint64_t sub_10019A0FC()
{
  unint64_t result = qword_10036AB80;
  if (!qword_10036AB80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB80);
  }
  return result;
}

unint64_t sub_10019A154()
{
  unint64_t result = qword_10036AB88;
  if (!qword_10036AB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB88);
  }
  return result;
}

unint64_t sub_10019A1AC()
{
  unint64_t result = qword_10036AB90;
  if (!qword_10036AB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB90);
  }
  return result;
}

unint64_t sub_10019A204()
{
  unint64_t result = qword_10036AB98;
  if (!qword_10036AB98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AB98);
  }
  return result;
}

unint64_t sub_10019A25C()
{
  unint64_t result = qword_10036ABA0;
  if (!qword_10036ABA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ABA0);
  }
  return result;
}

unint64_t sub_10019A2B4()
{
  unint64_t result = qword_10036ABA8;
  if (!qword_10036ABA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ABA8);
  }
  return result;
}

unint64_t sub_10019A30C()
{
  unint64_t result = qword_10036ABB0;
  if (!qword_10036ABB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ABB0);
  }
  return result;
}

unint64_t sub_10019A364()
{
  unint64_t result = qword_10036ABB8;
  if (!qword_10036ABB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ABB8);
  }
  return result;
}

unint64_t sub_10019A3BC()
{
  unint64_t result = qword_10036ABC0;
  if (!qword_10036ABC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ABC0);
  }
  return result;
}

unint64_t sub_10019A414()
{
  unint64_t result = qword_10036ABC8;
  if (!qword_10036ABC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ABC8);
  }
  return result;
}

unint64_t sub_10019A46C()
{
  unint64_t result = qword_10036ABD0;
  if (!qword_10036ABD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ABD0);
  }
  return result;
}

unint64_t sub_10019A4C4()
{
  unint64_t result = qword_10036ABD8;
  if (!qword_10036ABD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ABD8);
  }
  return result;
}

unint64_t sub_10019A51C()
{
  unint64_t result = qword_10036ABE0;
  if (!qword_10036ABE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ABE0);
  }
  return result;
}

unint64_t sub_10019A574()
{
  unint64_t result = qword_10036ABE8;
  if (!qword_10036ABE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ABE8);
  }
  return result;
}

unint64_t sub_10019A5CC()
{
  unint64_t result = qword_10036ABF0;
  if (!qword_10036ABF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ABF0);
  }
  return result;
}

unint64_t sub_10019A624()
{
  unint64_t result = qword_10036ABF8;
  if (!qword_10036ABF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ABF8);
  }
  return result;
}

unint64_t sub_10019A67C()
{
  unint64_t result = qword_10036AC00;
  if (!qword_10036AC00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC00);
  }
  return result;
}

unint64_t sub_10019A6D4()
{
  unint64_t result = qword_10036AC08;
  if (!qword_10036AC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC08);
  }
  return result;
}

unint64_t sub_10019A72C()
{
  unint64_t result = qword_10036AC10;
  if (!qword_10036AC10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC10);
  }
  return result;
}

unint64_t sub_10019A784()
{
  unint64_t result = qword_10036AC18;
  if (!qword_10036AC18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC18);
  }
  return result;
}

unint64_t sub_10019A7DC()
{
  unint64_t result = qword_10036AC20;
  if (!qword_10036AC20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC20);
  }
  return result;
}

unint64_t sub_10019A834()
{
  unint64_t result = qword_10036AC28;
  if (!qword_10036AC28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC28);
  }
  return result;
}

unint64_t sub_10019A88C()
{
  unint64_t result = qword_10036AC30;
  if (!qword_10036AC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC30);
  }
  return result;
}

unint64_t sub_10019A8E4()
{
  unint64_t result = qword_10036AC38;
  if (!qword_10036AC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC38);
  }
  return result;
}

unint64_t sub_10019A93C()
{
  unint64_t result = qword_10036AC40;
  if (!qword_10036AC40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC40);
  }
  return result;
}

unint64_t sub_10019A994()
{
  unint64_t result = qword_10036AC48;
  if (!qword_10036AC48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC48);
  }
  return result;
}

unint64_t sub_10019A9EC()
{
  unint64_t result = qword_10036AC50;
  if (!qword_10036AC50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC50);
  }
  return result;
}

unint64_t sub_10019AA44()
{
  unint64_t result = qword_10036AC58;
  if (!qword_10036AC58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC58);
  }
  return result;
}

unint64_t sub_10019AA9C()
{
  unint64_t result = qword_10036AC60;
  if (!qword_10036AC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC60);
  }
  return result;
}

unint64_t sub_10019AAF4()
{
  unint64_t result = qword_10036AC68;
  if (!qword_10036AC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC68);
  }
  return result;
}

unint64_t sub_10019AB4C()
{
  unint64_t result = qword_10036AC70;
  if (!qword_10036AC70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC70);
  }
  return result;
}

unint64_t sub_10019ABA4()
{
  unint64_t result = qword_10036AC78;
  if (!qword_10036AC78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC78);
  }
  return result;
}

unint64_t sub_10019ABFC()
{
  unint64_t result = qword_10036AC80;
  if (!qword_10036AC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC80);
  }
  return result;
}

unint64_t sub_10019AC54()
{
  unint64_t result = qword_10036AC88;
  if (!qword_10036AC88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC88);
  }
  return result;
}

unint64_t sub_10019ACAC()
{
  unint64_t result = qword_10036AC90;
  if (!qword_10036AC90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC90);
  }
  return result;
}

unint64_t sub_10019AD04()
{
  unint64_t result = qword_10036AC98;
  if (!qword_10036AC98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AC98);
  }
  return result;
}

unint64_t sub_10019AD58()
{
  unint64_t result = qword_10036ACB8;
  if (!qword_10036ACB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ACB8);
  }
  return result;
}

unint64_t sub_10019ADAC()
{
  unint64_t result = qword_10036ACC0;
  if (!qword_10036ACC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ACC0);
  }
  return result;
}

unint64_t sub_10019AE00()
{
  unint64_t result = qword_10036ACC8;
  if (!qword_10036ACC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ACC8);
  }
  return result;
}

unint64_t sub_10019AE54()
{
  unint64_t result = qword_10036ACD0;
  if (!qword_10036ACD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ACD0);
  }
  return result;
}

unint64_t sub_10019AEA8()
{
  unint64_t result = qword_10036ACF0;
  if (!qword_10036ACF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ACF0);
  }
  return result;
}

uint64_t sub_10019AEFC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65636E6174736964 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F69676572 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10019B088@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000A38C(&qword_10036ACF8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_10019B354();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000CC5C((uint64_t)a1);
  }
  char v26 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v25 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v20 = v12;
  char v24 = 2;
  swift_bridgeObjectRetain();
  uint64_t v21 = v14;
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v22 = 3;
  sub_10019B3A8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOBYTE(v14) = v23;
  sub_10000CC5C((uint64_t)a1);
  uint64_t v15 = v21;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v20;
  *(void *)(a2 + 24) = v15;
  char v17 = BYTE4(v19);
  *(_DWORD *)(a2 + 32) = v19;
  *(unsigned char *)(a2 + 36) = v17 & 1;
  *(unsigned char *)(a2 + 37) = v14;
  return result;
}

unint64_t sub_10019B354()
{
  unint64_t result = qword_10036AD00;
  if (!qword_10036AD00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AD00);
  }
  return result;
}

unint64_t sub_10019B3A8()
{
  unint64_t result = qword_10036AD08;
  if (!qword_10036AD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AD08);
  }
  return result;
}

unint64_t sub_10019B3FC()
{
  unint64_t result = qword_10036AD18;
  if (!qword_10036AD18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AD18);
  }
  return result;
}

unint64_t sub_10019B450()
{
  unint64_t result = qword_10036AD38;
  if (!qword_10036AD38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AD38);
  }
  return result;
}

unint64_t sub_10019B4A4()
{
  unint64_t result = qword_10036AD40;
  if (!qword_10036AD40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AD40);
  }
  return result;
}

unint64_t sub_10019B4F8()
{
  unint64_t result = qword_10036AD48;
  if (!qword_10036AD48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AD48);
  }
  return result;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.OverrideMessage.Overrides.Value.CodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.OverrideMessage.Overrides.Value.CodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.OverrideMessage.Overrides.Value.DistanceCodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.OverrideMessage.Overrides.Value.DistanceCodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.OverrideMessage.Overrides.Value.RegionCodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.OverrideMessage.Overrides.Value.RegionCodingKeys;
}

unsigned char *_s17proximitycontrold28ProxControlDemoServerMessageO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10019B648);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyDeviceStub.CodingKeys()
{
  return &type metadata for NearbyDeviceStub.CodingKeys;
}

unsigned char *_s17proximitycontrold28ProxControlDemoClientMessageO16DeviceCodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10019B74CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.OverrideMessage.CodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.OverrideMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.OverrideMessage.SetCodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.OverrideMessage.SetCodingKeys;
}

unsigned char *_s17proximitycontrold28ProxControlDemoClientMessageO15FeedbackMessageOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10019B830);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProxControlDemoClientMessage.OverrideMessage.UnsetCodingKeys()
{
  return &type metadata for ProxControlDemoClientMessage.OverrideMessage.UnsetCodingKeys;
}

unint64_t sub_10019B86C()
{
  unint64_t result = qword_10036AD68;
  if (!qword_10036AD68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AD68);
  }
  return result;
}

unint64_t sub_10019B8C4()
{
  unint64_t result = qword_10036AD70;
  if (!qword_10036AD70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AD70);
  }
  return result;
}

unint64_t sub_10019B91C()
{
  unint64_t result = qword_10036AD78;
  if (!qword_10036AD78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AD78);
  }
  return result;
}

unint64_t sub_10019B974()
{
  unint64_t result = qword_10036AD80;
  if (!qword_10036AD80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AD80);
  }
  return result;
}

unint64_t sub_10019B9CC()
{
  unint64_t result = qword_10036AD88;
  if (!qword_10036AD88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AD88);
  }
  return result;
}

unint64_t sub_10019BA24()
{
  unint64_t result = qword_10036AD90;
  if (!qword_10036AD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AD90);
  }
  return result;
}

unint64_t sub_10019BA7C()
{
  unint64_t result = qword_10036AD98;
  if (!qword_10036AD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AD98);
  }
  return result;
}

unint64_t sub_10019BAD4()
{
  unint64_t result = qword_10036ADA0;
  if (!qword_10036ADA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ADA0);
  }
  return result;
}

unint64_t sub_10019BB2C()
{
  unint64_t result = qword_10036ADA8;
  if (!qword_10036ADA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ADA8);
  }
  return result;
}

unint64_t sub_10019BB84()
{
  unint64_t result = qword_10036ADB0;
  if (!qword_10036ADB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ADB0);
  }
  return result;
}

unint64_t sub_10019BBDC()
{
  unint64_t result = qword_10036ADB8;
  if (!qword_10036ADB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ADB8);
  }
  return result;
}

unint64_t sub_10019BC34()
{
  unint64_t result = qword_10036ADC0;
  if (!qword_10036ADC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ADC0);
  }
  return result;
}

unint64_t sub_10019BC8C()
{
  unint64_t result = qword_10036ADC8;
  if (!qword_10036ADC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ADC8);
  }
  return result;
}

unint64_t sub_10019BCE4()
{
  unint64_t result = qword_10036ADD0;
  if (!qword_10036ADD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ADD0);
  }
  return result;
}

unint64_t sub_10019BD3C()
{
  unint64_t result = qword_10036ADD8;
  if (!qword_10036ADD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ADD8);
  }
  return result;
}

unint64_t sub_10019BD94()
{
  unint64_t result = qword_10036ADE0;
  if (!qword_10036ADE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ADE0);
  }
  return result;
}

unint64_t sub_10019BDEC()
{
  unint64_t result = qword_10036ADE8;
  if (!qword_10036ADE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ADE8);
  }
  return result;
}

unint64_t sub_10019BE44()
{
  unint64_t result = qword_10036ADF0;
  if (!qword_10036ADF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ADF0);
  }
  return result;
}

unint64_t sub_10019BE9C()
{
  unint64_t result = qword_10036ADF8;
  if (!qword_10036ADF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036ADF8);
  }
  return result;
}

unint64_t sub_10019BEF4()
{
  unint64_t result = qword_10036AE00;
  if (!qword_10036AE00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AE00);
  }
  return result;
}

unint64_t sub_10019BF4C()
{
  unint64_t result = qword_10036AE08;
  if (!qword_10036AE08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AE08);
  }
  return result;
}

uint64_t sub_10019BFAC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      uint64_t v6 = 4;
      do
      {
        uint64_t v7 = v6 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v9 = v6 - 3;
          if (__OFADD__(v7, 1)) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v8 = *(void *)(a1 + 8 * v6);
          swift_retain();
          uint64_t v9 = v6 - 3;
          if (__OFADD__(v7, 1))
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        uint64_t v10 = sub_100098C94();
        swift_release();
        char v11 = sub_10019C160(a2, a3, (uint64_t)v10);
        swift_bridgeObjectRelease();
        if (v11)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v8;
        }
        swift_release();
        ++v6;
      }
      while (v9 != v5);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10019C160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      char v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

void *sub_10019C298(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v2) {
      break;
    }
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v5 = *(void *)(a1 + 8 * v4 + 32);
        swift_retain();
      }
      ++v4;
      id v6 = *(id *)(v5 + OBJC_IVAR____TtC17proximitycontrold12TrackedToken_token);
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10019C3E4()
{
  sub_10000A38C(&qword_10035E150);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 1;
  off_10036AE10 = (_UNKNOWN *)result;
  return result;
}

uint64_t sub_10019C424()
{
  if (qword_10035A618 != -1) {
    uint64_t result = swift_once();
  }
  byte_1003AC9E0 = byte_1003ACB40;
  return result;
}

uint64_t sub_10019C478()
{
  uint64_t v1 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy____lazy_storage___nearbyInteractionEventPublisher;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy____lazy_storage___nearbyInteractionEventPublisher))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC17proximitycontrold12RangingProxy____lazy_storage___nearbyInteractionEventPublisher);
  }
  else
  {
    uint64_t v3 = v0;
    sub_10000A38C(&qword_10036B068);
    sub_10000B010(&qword_10036B070, &qword_10036B068);
    uint64_t v2 = Publisher.eraseToAnyPublisher()();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_10019C53C()
{
  uint64_t v1 = sub_10000A38C(&qword_10036AF90);
  uint64_t v47 = *(void *)(v1 - 8);
  uint64_t v48 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10036AF98);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036AFA0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_10036AFA8);
  uint64_t v51 = *(void *)(v12 - 8);
  uint64_t v52 = v12;
  __chkstk_darwin(v12);
  long long v49 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000A38C(&qword_10036AFB0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v50 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000A38C(&qword_10036AFB8);
  __chkstk_darwin(v17);
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy____lazy_storage___localMotionStatePublisher))
  {
    uint64_t v21 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy____lazy_storage___localMotionStatePublisher);
  }
  else
  {
    uint64_t v45 = v20;
    uint64_t v46 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy____lazy_storage___localMotionStatePublisher;
    uint64_t v43 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v44 = v19;
    sub_10000A38C(&qword_10036AFC0);
    uint64_t v22 = swift_allocObject();
    uint64_t v42 = v14;
    char v23 = (void *)v22;
    *(_OWORD *)(v22 + 16) = xmmword_10028FDD0;
    uint64_t v39 = v0;
    swift_beginAccess();
    sub_10000A38C(&qword_10036AFC8);
    Published.projectedValue.getter();
    swift_endAccess();
    sub_10000B010(&qword_10036AFD0, &qword_10036AFA0);
    uint64_t v41 = v15;
    Publisher.map<A>(_:)();
    uint64_t v40 = &protocol conformance descriptor for Publishers.Map<A, B>;
    sub_10000B010(&qword_10036AFD8, &qword_10036AF98);
    uint64_t v24 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v23[4] = v24;
    uint64_t v25 = v39;
    swift_retain();
    uint64_t v53 = sub_100104D78();
    sub_10000A38C(&qword_10036AFE0);
    sub_10000B010(&qword_10036AFE8, &qword_10036AFE0);
    uint64_t v26 = Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    uint64_t v53 = v26;
    sub_10000A38C(&qword_10036AFF0);
    sub_10000B010(&qword_10036AFF8, &qword_10036AFF0);
    Publisher.map<A>(_:)();
    sub_10000B010((unint64_t *)&unk_10036B000, &qword_10036AF90);
    uint64_t v27 = v48;
    uint64_t v28 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v3, v27);
    swift_release();
    v23[5] = v28;
    uint64_t v53 = *(void *)(v25 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_localMotionStateDidChangeSubject);
    sub_10000A38C((uint64_t *)&unk_100367F90);
    sub_10000B010((unint64_t *)&unk_10036B010, (uint64_t *)&unk_100367F90);
    v23[6] = Publisher.eraseToAnyPublisher()();
    uint64_t v53 = (uint64_t)v23;
    specialized Array._endMutation()();
    sub_10000A38C((uint64_t *)&unk_100367FA0);
    sub_10000B010(&qword_10036B020, (uint64_t *)&unk_100367FA0);
    uint64_t v29 = v49;
    Publishers.MergeMany.init(_:)();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_10000A38C(&qword_10036B028);
    sub_10000B010(&qword_10036B030, &qword_10036AFA8);
    uint64_t v30 = v50;
    uint64_t v31 = v52;
    Publisher.map<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v29, v31);
    sub_10000B010(&qword_10036B038, &qword_10036AFB0);
    sub_1001A7994();
    uint64_t v33 = v42;
    unint64_t v32 = v43;
    Publisher<>.removeDuplicates()();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v33);
    sub_10000B010(&qword_10036B050, &qword_10036AFB8);
    uint64_t v34 = v44;
    char v35 = v32;
    uint64_t v36 = Publisher.share()();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v34);
    uint64_t v53 = v36;
    sub_10000A38C(&qword_10036B058);
    sub_10000B010(&qword_10036B060, &qword_10036B058);
    uint64_t v21 = Publisher.eraseToAnyPublisher()();
    swift_release();
    *(void *)(v25 + v46) = v21;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v21;
}

void sub_10019CDBC(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (char *)Strong;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v7)
    {
      int v4 = *(unsigned __int8 *)(*(void *)&v3[OBJC_IVAR____TtC17proximitycontrold12RangingProxy__sessionState] + 24);
      BOOL v5 = v4 != 2;
      if (v4 == 2) {
        id v6 = [v7 motionState];
      }
      else {
        id v6 = 0;
      }

      uint64_t v3 = v7;
    }
    else
    {
      id v6 = 0;
      BOOL v5 = 1;
    }
  }
  else
  {
    id v6 = 0;
    BOOL v5 = 1;
  }
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v5;
}

uint64_t sub_10019CECC()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  sub_10001D790(v0, qword_10036AE18);
  *(void *)sub_10001D758(v0, (uint64_t)qword_10036AE18) = 5;
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);

  return v1();
}

uint64_t sub_10019CF5C()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int v4 = (void *)((char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for Retrier.RetryIntervalPolicy(0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy____lazy_storage___reactivationRetrier);
  if (v8)
  {
    swift_retain();
  }
  else
  {
    v18[1] = v6;
    uint64_t v20 = (void *)((char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v21 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy____lazy_storage___reactivationRetrier;
    uint64_t v22 = v0;
    if (qword_10035A628 != -1) {
      swift_once();
    }
    uint64_t v24 = _swiftEmptyArrayStorage;
    id v19 = (id)qword_1003ACB50;
    sub_1000B551C(0, 5, 0);
    uint64_t v9 = 0;
    uint64_t v10 = v24;
    unsigned int v23 = enum case for DispatchTimeInterval.seconds(_:);
    char v11 = *(void (**)(void *, void, uint64_t))(v2 + 104);
    do
    {
      void *v4 = *(_UNKNOWN **)((char *)&off_10031E0D0 + v9 + 32);
      v11(v4, v23, v1);
      uint64_t v24 = v10;
      unint64_t v13 = v10[2];
      unint64_t v12 = v10[3];
      if (v13 >= v12 >> 1)
      {
        sub_1000B551C(v12 > 1, v13 + 1, 1);
        uint64_t v10 = v24;
      }
      v10[2] = v13 + 1;
      (*(void (**)(unint64_t, void *, uint64_t))(v2 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v13, v4, v1);
      v9 += 8;
    }
    while (v9 != 40);
    uint64_t v14 = (uint64_t)v20;
    *uint64_t v20 = v10;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = swift_allocObject();
    uint64_t v16 = v22;
    swift_unknownObjectWeakInit();
    type metadata accessor for Retrier(0);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptCount) = 0;
    *(unsigned char *)(v8 + OBJC_IVAR____TtC17proximitycontrold7Retrier_attemptState) = 0;
    *(void *)(v8 + 16) = sub_1001A7920;
    *(void *)(v8 + 24) = v15;
    *(void *)(v8 + 32) = v19;
    *(void *)(v8 + 40) = 0;
    *(unsigned char *)(v8 + 48) = 1;
    sub_1001A7928(v14, v8 + OBJC_IVAR____TtC17proximitycontrold7Retrier_retryInterval);
    *(void *)(v16 + v21) = v8;
    swift_retain();
    swift_release();
  }
  return v8;
}

void sub_10019D27C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_10019F4D4();
  }
}

void sub_10019D2D0()
{
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  unint64_t v1 = 0xE800000000000000;
  uint64_t v2 = 0x6576697463616E69;
  switch(*(unsigned char *)(*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy__sessionState) + 24))
  {
    case 1:
      unint64_t v1 = 0xE600000000000000;
      uint64_t v2 = 0x646573756170;
      break;
    case 2:
      unint64_t v1 = 0xE700000000000000;
      uint64_t v2 = 0x676E696E6E7572;
      break;
    case 3:
      unint64_t v1 = 0xE900000000000064;
      uint64_t v2 = 0x65646E6570737573;
      break;
    default:
      break;
  }
  unint64_t v3 = v1;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  id v4 = sub_1001F63A0();
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 ulog:40 message:v5];
  swift_bridgeObjectRelease();
}

uint64_t sub_10019D450()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

char *sub_10019D4C4(void *a1)
{
  uint64_t v2 = v1;
  id v72 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_10000A38C((uint64_t *)&unk_10036B078);
  uint64_t v62 = *(void *)(v3 - 8);
  uint64_t v63 = v3;
  __chkstk_darwin(v3);
  uint64_t v61 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C((uint64_t *)&unk_100367810);
  uint64_t v66 = *(void *)(v5 - 8);
  uint64_t v67 = v5;
  __chkstk_darwin(v5);
  uint64_t v64 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036B088);
  uint64_t v68 = *(void *)(v7 - 8);
  uint64_t v69 = v7;
  __chkstk_darwin(v7);
  uint64_t v65 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C((uint64_t *)&unk_10036B090);
  uint64_t v59 = *(void *)(v9 - 8);
  uint64_t v60 = v9;
  __chkstk_darwin(v9);
  uint64_t v58 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_10036AFC8);
  char v70 = *(char **)(v11 - 8);
  uint64_t v71 = v11;
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = &v1[OBJC_IVAR____TtC17proximitycontrold12RangingProxy_nearbyAgent];
  swift_unknownObjectWeakInit();
  uint64_t v14 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy_trackedTokens;
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000A38C(&qword_1003680F0);
  uint64_t v16 = swift_allocObject();
  *(unsigned char *)(v16 + 24) = 0;
  id v17 = objc_allocWithZone((Class)NSLock);
  uint64_t v18 = v2;
  *(void *)(v16 + 32) = [v17 init];
  sub_10000A38C(&qword_10036B0A0);
  swift_allocObject();
  uint64_t v19 = PassthroughSubject.init()();
  sub_10000A38C(&qword_10036B0A8);
  swift_allocObject();
  uint64_t v20 = PassthroughSubject.init()();
  swift_allocObject();
  uint64_t v21 = PassthroughSubject.init()();
  *(void *)(v16 + 40) = v19;
  *(void *)(v16 + 48) = v20;
  *(void *)(v16 + 56) = v21;
  *(void *)(v16 + 64) = &_swiftEmptyDictionarySingleton;
  *(void *)(v16 + 72) = 0;
  *(void *)(v16 + 16) = KeyPath;
  *(unsigned char *)(v16 + 24) = 0;
  *(void *)&v2[v14] = v16;
  uint64_t v22 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy_nearbyInteractionEventSubject;
  uint64_t v23 = sub_10000A38C(&qword_10036B068);
  swift_allocObject();
  *(void *)&v18[v22] = PassthroughSubject.init()();
  *(void *)&v18[OBJC_IVAR____TtC17proximitycontrold12RangingProxy____lazy_storage___nearbyInteractionEventPublisher] = 0;
  uint64_t v24 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy_localMotionStateDidChangeSubject;
  sub_10000A38C((uint64_t *)&unk_100367F90);
  swift_allocObject();
  *(void *)&v18[v24] = PassthroughSubject.init()();
  *(void *)&v18[OBJC_IVAR____TtC17proximitycontrold12RangingProxy____lazy_storage___localMotionStatePublisher] = 0;
  uint64_t v25 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy_defaults;
  if (qword_10035A520 != -1) {
    swift_once();
  }
  *(void *)&v18[v25] = qword_1003AC750;
  uint64_t v26 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy_lockscreenAnalytics;
  uint64_t v27 = qword_10035A5A0;
  swift_retain();
  if (v27 != -1) {
    swift_once();
  }
  *(void *)&v18[v26] = qword_1003AC8D8;
  *(void *)&v18[OBJC_IVAR____TtC17proximitycontrold12RangingProxy_numTokensAdded] = 0;
  *(void *)&v18[OBJC_IVAR____TtC17proximitycontrold12RangingProxy_reactivation] = 0;
  *(void *)&v18[OBJC_IVAR____TtC17proximitycontrold12RangingProxy____lazy_storage___reactivationRetrier] = 0;
  v18[OBJC_IVAR____TtC17proximitycontrold12RangingProxy_scheduledStopState] = 0;
  uint64_t v28 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy__sessionState;
  sub_10000A38C(&qword_10036B0B0);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = 0;
  *(unsigned char *)(v29 + 24) = 0;
  *(void *)&v18[v28] = v29;
  *(void *)&v18[OBJC_IVAR____TtC17proximitycontrold12RangingProxy_tasks] = &_swiftEmptySetSingleton;
  uint64_t v30 = &v18[OBJC_IVAR____TtC17proximitycontrold12RangingProxy__session];
  id v75 = 0;
  swift_retain();
  sub_10000A38C(&qword_10036AEE8);
  Published.init(initialValue:)();
  (*((void (**)(char *, char *, uint64_t))v70 + 4))(v30, v13, v71);
  id v75 = 0;
  unint64_t v76 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  id v75 = (id)0xD000000000000015;
  unint64_t v76 = (void *)0x80000001002C28E0;
  if (qword_10035A5C8 != -1) {
    swift_once();
  }
  uint64_t v31 = v23;
  if (byte_1003AC9E0) {
    uint64_t v32 = 0x726F68636E61;
  }
  else {
    uint64_t v32 = 0x656C69626F6DLL;
  }
  unint64_t v33 = 0xE600000000000000;
  String.append(_:)(*(Swift::String *)&v32);
  swift_bridgeObjectRelease();
  uint64_t v34 = ObjectType;
  sub_10016ABE4((uint64_t)v75, v76, 0, ObjectType, (uint64_t)&off_10032E260);
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakAssign();
  sub_10016ABE4(0xD000000000000013, (void *)0x80000001002C2900, 0, v34, (uint64_t)&off_10032E260);
  id v35 = [objc_allocWithZone((Class)NISession) init];
  if (qword_10035A628 != -1) {
    swift_once();
  }
  [v35 setDelegateQueue:qword_1003ACB50];
  swift_beginAccess();
  (*((void (**)(char *, uint64_t))v70 + 1))(v30, v71);
  id v74 = v35;
  Published.init(initialValue:)();
  swift_endAccess();

  uint64_t v36 = (objc_class *)type metadata accessor for RangingProxy();
  v73.receiver = v18;
  v73.super_class = v36;
  id v37 = [super init];
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v38 = (char *)v37;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  id v39 = v75;
  if (v75)
  {
    [v75 setDelegate:v38];
  }
  id v75 = (id)sub_10019C53C();
  sub_10000A38C(&qword_10036B0B8);
  sub_10000B010(&qword_10036B0C0, &qword_10036B0B8);
  uint64_t v40 = v58;
  Publisher.map<A>(_:)();
  swift_release();
  uint64_t v71 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy_nearbyInteractionEventSubject;
  sub_10000B010(&qword_10036B0C8, (uint64_t *)&unk_10036B090);
  uint64_t v41 = sub_10000B010(&qword_10036B0D0, &qword_10036B068);
  uint64_t v42 = v60;
  uint64_t v56 = (char *)v31;
  uint64_t ObjectType = v41;
  Publisher.subscribe<A>(_:)();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v40, v42);
  uint64_t v43 = &v38[OBJC_IVAR____TtC17proximitycontrold12RangingProxy_tasks];
  swift_beginAccess();
  char v70 = v43;
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  if (qword_10035A5C0 != -1) {
    swift_once();
  }
  swift_retain();
  id v75 = (id)sub_100104B88();
  sub_10000A38C((uint64_t *)&unk_10036BFE0);
  sub_10000B010((unint64_t *)&unk_100363D30, (uint64_t *)&unk_10036BFE0);
  uint64_t v44 = (void *)Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
  id v45 = sub_1001F63A0();
  id v75 = v44;
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = 0;
  *(void *)(v46 + 24) = 0;
  *(void *)(v46 + 32) = v44;
  *(void *)(v46 + 40) = 0xD000000000000015;
  *(void *)(v46 + 48) = 0x80000001002C2920;
  *(void *)(v46 + 56) = 0;
  *(void *)(v46 + 64) = 0xE000000000000000;
  *(void *)(v46 + 72) = v45;
  *(_DWORD *)(v46 + 80) = 40;
  swift_retain();
  id v47 = v45;
  sub_10000A38C(&qword_10035ACA0);
  sub_10000B010(&qword_10035ACB0, &qword_10035ACA0);
  uint64_t v48 = v61;
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10036B0D8, (uint64_t *)&unk_10036B078);
  uint64_t v49 = v63;
  unint64_t v50 = (void *)Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v48, v49);
  swift_release();

  id v75 = v50;
  uint64_t v51 = v64;
  Publisher<>.removeDuplicates()();
  swift_release();
  sub_10000B010(&qword_10036B0E0, (uint64_t *)&unk_100367810);
  uint64_t v52 = v65;
  uint64_t v53 = v67;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v51, v53);
  sub_10000B010(&qword_10036B0E8, &qword_10036B088);
  uint64_t v54 = v69;
  Publisher.subscribe<A>(_:)();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v52, v54);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();

  return v38;
}

uint64_t *sub_10019E148@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  if (*((unsigned char *)result + 8)) {
    uint64_t v2 = 0;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

unsigned __int8 *sub_10019E164@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 2;
  return result;
}

id sub_10019E178()
{
  uint64_t v1 = v0;
  id v2 = sub_1001F63A0();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  swift_retain();
  sub_1001A8358();
  swift_release();
  sub_1001A0DF4();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  [v6 invalidate];

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for RangingProxy();
  return [super dealloc];
}

uint64_t sub_10019E3EC()
{
  return type metadata accessor for RangingProxy();
}

uint64_t type metadata accessor for RangingProxy()
{
  uint64_t result = qword_10036AED0;
  if (!qword_10036AED0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10019E440()
{
  uint64_t ObjectType = swift_getObjectType();
  id v1 = sub_1001F63A0();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = ObjectType;
  sub_10000A38C((uint64_t *)&unk_100363D00);
  swift_allocObject();
  return Future.init(_:)();
}

uint64_t sub_10019E534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[0] = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v22[0] - 8);
  __chkstk_darwin(v22[0]);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  uint64_t v16 = qword_10035A628;
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  id v17 = (void *)qword_1003ACB50;
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = a3;
  v18[3] = sub_1000CF728;
  v18[4] = v15;
  v18[5] = a4;
  aBlock[4] = sub_1001A7914;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_10032E3B0;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v17;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v22[1] = _swiftEmptyArrayStorage;
  sub_1001A7A38((unint64_t *)&qword_100363D50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, void))(v12 + 8))(v14, v22[0]);
  return swift_release();
}

void sub_10019E874(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    if (sub_1001A17F4()) {
      sub_1001A04D4();
    }
    else {
      sub_10016ABE4(0xD00000000000003FLL, (void *)0x80000001002C2750, 0, a4, (uint64_t)&off_10032E260);
    }
    sub_10016ABE4(0x6574617669746341, (void *)0xE900000000000064, 0, a4, (uint64_t)&off_10032E260);
    ((void (*)(void, void))a2)(0, 0);
  }
  else
  {
    sub_10001A050();
    swift_allocError();
    *(void *)uint64_t v8 = 0x666C6573206C696ELL;
    *(void *)(v8 + 8) = 0xE800000000000000;
    *(unsigned char *)(v8 + 16) = 9;
    a2();
    swift_errorRelease();
  }
}

void sub_10019EAA0(void *a1)
{
  uint64_t v2 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (!v38)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    id v17 = [a1 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v20 = v19;

    v21._uint64_t countAndFlagsBits = v18;
    v21._object = v20;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    id v22 = sub_1001F63A0();
    swift_bridgeObjectRetain();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v22 ulog:60 message:v16];
    swift_bridgeObjectRelease();
LABEL_15:

    goto LABEL_16;
  }
  uint64_t v4 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy__sessionState;
  if (*(unsigned char *)(*(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy__sessionState) + 24) != 2)
  {
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    unint64_t v23 = 0xE800000000000000;
    uint64_t v24 = 0x6576697463616E69;
    switch(*(unsigned char *)(*(void *)(v1 + v4) + 24))
    {
      case 1:
        unint64_t v23 = 0xE600000000000000;
        uint64_t v24 = 0x646573756170;
        break;
      case 2:
        unint64_t v23 = 0xE700000000000000;
        uint64_t v24 = 0x676E696E6E7572;
        break;
      case 3:
        uint64_t v24 = 0x65646E6570737573;
        unint64_t v23 = 0xE900000000000064;
        break;
      default:
        break;
    }
    unint64_t v37 = v23;
    String.append(_:)(*(Swift::String *)&v24);
    swift_bridgeObjectRelease();
    id v22 = sub_1001F63A0();
    swift_bridgeObjectRetain();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v22 ulog:40 message:v16];
    swift_bridgeObjectRelease();

    goto LABEL_15;
  }
  uint64_t v5 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy_numTokensAdded;
  if (*(uint64_t *)(v1 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_numTokensAdded) > 29)
  {
    _StringGuts.grow(_:)(53);
    v25._uint64_t countAndFlagsBits = 0xD000000000000033;
    v25._object = (void *)0x80000001002C2880;
    String.append(_:)(v25);
    id v26 = [a1 description];
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;

    v30._uint64_t countAndFlagsBits = v27;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    id v31 = sub_1001F63A0();
    swift_bridgeObjectRetain();
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v31 ulog:60 message:v32];
    swift_bridgeObjectRelease();

    uint64_t v33 = *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_trackedTokens);
    uint64_t v34 = *(void **)(v33 + 32);
    swift_retain();
    [v34 lock];
    swift_beginAccess();
    uint64_t v35 = swift_bridgeObjectRetain();
    unint64_t v36 = (unint64_t)sub_1000F06FC(v35);
    swift_bridgeObjectRelease();
    [*(id *)(v33 + 32) unlock];
    swift_release();
    if ((v36 & 0x8000000000000000) == 0 && (v36 & 0x4000000000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  id v6 = [a1 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  id v11 = sub_1001F63A0();
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:40 message:v12];
  swift_bridgeObjectRelease();

  [v38 _addObject:a1];
  uint64_t v13 = *(void *)(v2 + v5);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_release();
LABEL_11:
    swift_release();
    sub_1002607B4();
    NSString v16 = v38;
    goto LABEL_16;
  }
  *(void *)(v2 + v5) = v15;
  NSString v16 = v38;
LABEL_16:
}

void sub_10019F064()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  if (sub_1001A17F4())
  {
    uint64_t v3 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy_scheduledStopState;
    if (*(unsigned char *)(v0 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_scheduledStopState) == 1)
    {
      id v4 = sub_1001F63A0();
      NSString v5 = String._bridgeToObjectiveC()();
      [v4 ulog:40 message:v5];

      *(unsigned char *)(v1 + v3) = 0;
    }
    id v6 = sub_10016B098(ObjectType, (uint64_t)&off_10032E260);
    sub_1001A23E4();
  }
  else
  {
    sub_1001A125C();
  }
}

void sub_10019F244(unsigned __int8 a1)
{
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x6E776F6E6B6E75;
  switch(a1)
  {
    case 1u:
      uint64_t v3 = 0x6E69747465736572;
      unint64_t v2 = 0xE900000000000067;
      break;
    case 2u:
      unint64_t v2 = 0xEB00000000646574;
      uint64_t v3 = 0x726F707075736E75;
      break;
    case 3u:
      unint64_t v2 = 0xEC00000064657A69;
      uint64_t v3 = 0x726F687475616E75;
      break;
    case 4u:
      uint64_t v3 = 0x4F64657265776F70;
      unint64_t v2 = 0xEA00000000006666;
      break;
    case 5u:
      uint64_t v3 = 0x4F64657265776F70;
      unint64_t v2 = 0xE90000000000006ELL;
      break;
    case 6u:
      uint64_t v3 = 0x7463697274736572;
      unint64_t v2 = 0xEA00000000006465;
      break;
    default:
      break;
  }
  unint64_t v4 = v2;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  id v5 = sub_1001F63A0();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 ulog:40 message:v6];
  swift_bridgeObjectRelease();

  if (sub_1001A57F8(a1))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
  }
}

void sub_10019F4D4()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy_reactivation;
  uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC17proximitycontrold12RangingProxy_reactivation];
  id v5 = sub_1001F63A0();
  if (v4)
  {
    NSString v17 = String._bridgeToObjectiveC()();
    [v5 ulog:60 message:v17];
  }
  else
  {
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 ulog:40 message:v6];

    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v18)
    {
      id v7 = sub_1001F63A0();
      NSString v8 = String._bridgeToObjectiveC()();
      [v7 ulog:40 message:v8];

      [v18 invalidate];
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v9 = v1;
      static Published.subscript.setter();
      if (qword_10035A5E0 != -1) {
        swift_once();
      }
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_unknownObjectWeakAssign();

      *(void *)&v9[OBJC_IVAR____TtC17proximitycontrold12RangingProxy_numTokensAdded] = 0;
    }
    id v10 = sub_1001F63A0();
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 ulog:40 message:v11];

    uint64_t v12 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    *(void *)(v13 + 24) = ObjectType;
    sub_10000A38C((uint64_t *)&unk_100363D00);
    swift_allocObject();
    Future.init(_:)();
    uint64_t v14 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v14;
    *(void *)(v15 + 24) = ObjectType;
    sub_10000B010(&qword_100368130, (uint64_t *)&unk_100363D00);
    uint64_t v16 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    *(void *)&v1[v3] = v16;
    swift_release();
  }
}

char *sub_10019F904(void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1)
  {
    swift_errorRetain();
    _StringGuts.grow(_:)(19);
    v4._object = (void *)0x80000001002BC950;
    v4._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v4);
    sub_10000A38C((uint64_t *)&unk_100365D60);
    _print_unlocked<A, B>(_:_:)();
    sub_10016AE10(90, 0, (void *)0xE000000000000000, 0, a3, (uint64_t)&off_10032E260);
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else
  {
    sub_10016ABE4(0x6176697463616552, (void *)0xEB00000000646574, 0, a3, (uint64_t)&off_10032E260);
  }
  swift_beginAccess();
  uint64_t result = (char *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    *(void *)&result[OBJC_IVAR____TtC17proximitycontrold12RangingProxy_reactivation] = 0;

    return (char *)swift_release();
  }
  return result;
}

void sub_10019FA64(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_trackedTokens);
  Swift::String v4 = *(void **)(v3 + 32);
  swift_retain();
  [v4 lock];
  swift_beginAccess();
  uint64_t v5 = swift_bridgeObjectRetain();
  NSString v6 = sub_1000F06FC(v5);
  swift_bridgeObjectRelease();
  [*(id *)(v3 + 32) unlock];
  swift_release();
  swift_retain();
  uint64_t v7 = sub_1001A5474((unint64_t)v6, a1);
  swift_release();
  swift_release();
  if (v7)
  {
    id v8 = *(id *)(v7 + OBJC_IVAR____TtC17proximitycontrold12TrackedToken_token);
    swift_release();
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    id v9 = [v8 description:0xD000000000000010, 0x80000001002C26E0];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    v13._uint64_t countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 0x206D6F726620;
    v14._object = (void *)0xE600000000000000;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = sub_1001F7514();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    id v16 = sub_1001F63A0();
    swift_bridgeObjectRetain();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 ulog:40 message:v17];
    swift_bridgeObjectRelease();

    sub_10019EAA0(v8);
  }
}

void sub_10019FC74(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = 0;
  unint64_t v32 = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  uint64_t v31 = 0x6465766965636552;
  unint64_t v32 = 0xE900000000000020;
  id v10 = [a1 description];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v13 = v12;

  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0x206D6F726620;
  v15._object = (void *)0xE600000000000000;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = sub_1001F7514();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  id v17 = sub_1001F63A0();
  swift_bridgeObjectRetain();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 ulog:40 message:v18];
  swift_bridgeObjectRelease();

  uint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_trackedTokens);
  id v20 = *(void **)(v19 + 32);
  swift_retain();
  [v20 lock];
  swift_beginAccess();
  uint64_t v21 = swift_bridgeObjectRetain();
  id v22 = sub_1000F06FC(v21);
  swift_bridgeObjectRelease();
  [*(id *)(v19 + 32) unlock];
  swift_release();
  swift_retain();
  uint64_t v23 = sub_1001A5474((unint64_t)v22, a2);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id, v6);
  type metadata accessor for TrackedToken();
  uint64_t v24 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v24 + OBJC_IVAR____TtC17proximitycontrold12TrackedToken_deviceID, v9, v6);
  *(void *)(v24 + OBJC_IVAR____TtC17proximitycontrold12TrackedToken_token) = a1;
  swift_retain();
  id v25 = a1;
  sub_1001222DC(v24);
  swift_release();
  swift_release();
  if (v23)
  {
    id v26 = *(void **)(v23 + OBJC_IVAR____TtC17proximitycontrold12TrackedToken_token);
    sub_100019E10(0, (unint64_t *)&qword_10036AF80);
    id v27 = v26;
    if (static NSObject.== infix(_:_:)())
    {
      id v28 = sub_1001F63A0();
      NSString v29 = String._bridgeToObjectiveC()();
      [v28 ulog:40 message:v29];

      swift_release();
      return;
    }
    sub_1001A01A8(v27);
  }
  sub_10019EAA0(v25);
  swift_release();
}

uint64_t sub_1001A0038(uint64_t a1)
{
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = sub_1001F7514();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  id v3 = sub_1001F63A0();
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 ulog:v4 message:0xD000000000000013, 0x80000001002C2680];
  swift_bridgeObjectRelease();

  uint64_t v5 = a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
  swift_retain();
  uint64_t v6 = sub_100123C5C(v5);
  uint64_t result = swift_release();
  if (v6)
  {
    id v8 = *(id *)(v6 + OBJC_IVAR____TtC17proximitycontrold12TrackedToken_token);
    sub_1001A01A8(v8);

    return swift_release();
  }
  return result;
}

void sub_1001A01A8(void *a1)
{
  uint64_t v2 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  NSString v4 = v22;
  if (v22)
  {
    uint64_t v5 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy__sessionState;
    if (*(unsigned char *)(*(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy__sessionState) + 24) == 2)
    {
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      id v6 = [a1 description:0x676E69766F6D6552 0xEF206E656B6F7420];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v9 = v8;

      v10._uint64_t countAndFlagsBits = v7;
      v10._object = v9;
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      id v11 = sub_1001F63A0();
      swift_bridgeObjectRetain();
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v11 ulog:40 message:v12];
      swift_bridgeObjectRelease();

      [v4 _removeObject:a1];
      uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_numTokensAdded);
      BOOL v14 = __OFSUB__(v13, 1);
      uint64_t v15 = v13 - 1;
      if (v14)
      {
        __break(1u);
        JUMPOUT(0x1001A04C4);
      }
      *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_numTokensAdded) = v15;
      NSString v16 = v4;
    }
    else
    {
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      unint64_t v18 = 0xE800000000000000;
      uint64_t v19 = 0x6576697463616E69;
      switch(*(unsigned char *)(*(void *)(v1 + v5) + 24))
      {
        case 1:
          unint64_t v18 = 0xE600000000000000;
          uint64_t v19 = 0x646573756170;
          break;
        case 2:
          unint64_t v18 = 0xE700000000000000;
          uint64_t v19 = 0x676E696E6E7572;
          break;
        case 3:
          unint64_t v18 = 0xE900000000000064;
          uint64_t v19 = 0x65646E6570737573;
          break;
        default:
          break;
      }
      unint64_t v20 = v18;
      String.append(_:)(*(Swift::String *)&v19);
      swift_bridgeObjectRelease();
      id v21 = sub_1001F63A0();
      swift_bridgeObjectRetain();
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v21 ulog:v16 message:0xD000000000000023, 0x80000001002C2650];
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    id v17 = sub_1001F63A0();
    NSString v16 = String._bridgeToObjectiveC()();
    [v17 ulog:60 message:v16];
  }
}

void sub_1001A04D4()
{
  Swift::Int v2 = v1;
  id v3 = v0;
  id v4 = sub_1001F63A0();
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 ulog:40 message:v5];

  if (![self isSupported])
  {
    sub_1000EC7C4();
    swift_allocError();
    char v8 = 8;
    goto LABEL_5;
  }
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy__sessionState;
  if (*(unsigned char *)(*(void *)&v3[OBJC_IVAR____TtC17proximitycontrold12RangingProxy__sessionState] + 24) == 2)
  {
    sub_1000EC7C4();
    swift_allocError();
    char v8 = 9;
LABEL_5:
    *uint64_t v7 = v8;
    swift_willThrow();
    return;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  uint64_t v59 = v3;
  if (!v61)
  {
    id v9 = sub_1001F63A0();
    NSString v10 = String._bridgeToObjectiveC()();
    [v9 ulog:40 message:v10];

    id v11 = [objc_allocWithZone((Class)NISession) init];
    if (qword_10035A628 == -1) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }
  while (1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (!v61)
    {
      sub_1000EC7C4();
      swift_allocError();
      char v8 = 5;
      goto LABEL_5;
    }
    uint64_t v58 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy_numTokensAdded;
    *(void *)&v3[OBJC_IVAR____TtC17proximitycontrold12RangingProxy_numTokensAdded] = 0;
    BOOL v14 = sub_1001A55A4();
    id v15 = [v14 description];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    v19._uint64_t countAndFlagsBits = v16;
    v19._object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    id v20 = sub_1001F63A0();
    swift_bridgeObjectRetain();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v20 ulog:40 message:v21];
    swift_bridgeObjectRelease();

    [v61 runWithConfiguration:v14];
    *(unsigned char *)(*(void *)&v3[v6] + 24) = 2;
    swift_retain();
    sub_100104D78();
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();
    sub_10019D2D0();
    uint64_t v22 = *(void *)&v3[OBJC_IVAR____TtC17proximitycontrold12RangingProxy_trackedTokens];
    uint64_t v23 = *(void **)(v22 + 32);
    swift_retain();
    [v23 lock];
    swift_beginAccess();
    uint64_t v24 = swift_bridgeObjectRetain();
    id v25 = sub_1000F06FC(v24);
    swift_bridgeObjectRelease();
    [*(id *)(v22 + 32) unlock];
    swift_release();
    uint64_t v26 = (uint64_t)sub_10019C298((unint64_t)v25);
    swift_release();
    uint64_t v6 = (unint64_t)v26 >> 62;
    uint64_t v27 = v26 & 0xFFFFFFFFFFFFFF8;
    if (!((unint64_t)v26 >> 62))
    {
      if (*(uint64_t *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 30) {
        uint64_t v28 = 30;
      }
      else {
        uint64_t v28 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if ((v26 & 0xC000000000000001) == 0) {
        goto LABEL_20;
      }
LABEL_17:
      if (v28)
      {
        sub_100019E10(0, (unint64_t *)&qword_10036AF80);
        Swift::Int v29 = 0;
        do
        {
          Swift::Int v2 = v29 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v29);
          Swift::Int v29 = v2;
        }
        while (v28 != v2);
      }
      goto LABEL_20;
    }
LABEL_34:
    id v11 = (id)(v26 < 0 ? v26 : v27);
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
    Swift::Int v2 = v26;
    swift_bridgeObjectRelease();
    if ((v53 & 0x8000000000000000) == 0) {
      break;
    }
    __break(1u);
LABEL_39:
    swift_once();
LABEL_8:
    [v11 setDelegateQueue:qword_1003ACB50, v56, v57];
    [v11 setDelegate:v59];
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v61 = v11;
    NSString v12 = v59;
    id v13 = v11;
    static Published.subscript.setter();
    if (qword_10035A5E0 != -1) {
      swift_once();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_unknownObjectWeakAssign();

    *(void *)&v12[OBJC_IVAR____TtC17proximitycontrold12RangingProxy_numTokensAdded] = 0;
    id v3 = v59;
  }
  while (1)
  {
    if (v28 >= 30) {
      uint64_t v54 = 30;
    }
    else {
      uint64_t v54 = v28;
    }
    if (v28 >= 0) {
      uint64_t v28 = v54;
    }
    else {
      uint64_t v28 = 30;
    }
    swift_bridgeObjectRetain();
    uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v55 < v28) {
      __break(1u);
    }
    uint64_t v26 = v2;
    if ((v2 & 0xC000000000000001) != 0) {
      goto LABEL_17;
    }
LABEL_20:
    if (v6) {
      break;
    }
    uint64_t v30 = 0;
    uint64_t v6 = v26 & 0xFFFFFFFFFFFFFF8;
    uint64_t v31 = (v26 & 0xFFFFFFFFFFFFFF8) + 32;
    uint64_t v33 = v28;
    BOOL v32 = v28 <= 0;
    if (!v28) {
      goto LABEL_31;
    }
LABEL_22:
    uint64_t v57 = v14;
    if (!v32)
    {
      type metadata accessor for RangingProxy();
      uint64_t v56 = v6;
      swift_unknownObjectRetain();
      uint64_t v34 = (id *)(v31 + 8 * v30);
      while (1)
      {
        id v60 = *v34;
        id v35 = [v60 description];
        uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v38 = v37;

        v39._uint64_t countAndFlagsBits = v36;
        v39._object = v38;
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        uint64_t v26 = 0xE900000000000020;
        sub_10000A38C(&qword_10036AF78);
        BOOL v14 = (void *)String.init<A>(describing:)();
        sub_10016B950(60, 0xE100000000000000, (uint64_t)v14, v40);
        if ((v41 & 1) == 0)
        {
          String.subscript.getter();
          swift_bridgeObjectRelease();
          BOOL v14 = (void *)static String._fromSubstring(_:)();
          swift_bridgeObjectRelease();
        }
        id v42 = objc_allocWithZone((Class)CULogHandle);
        NSString v43 = String._bridgeToObjectiveC()();
        NSString v44 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v45 = [v42 initWithSubsystem:v43 category:v44];

        swift_bridgeObjectRetain();
        NSString v46 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v45 ulog:40 message:v46];
        swift_bridgeObjectRelease();

        uint64_t v6 = (uint64_t)v60;
        [v61 _addObject:v60];
        uint64_t v47 = *(void *)&v59[v58];
        BOOL v48 = __OFADD__(v47, 1);
        uint64_t v27 = v47 + 1;
        if (v48) {
          break;
        }
        *(void *)&v59[v58] = v27;

        ++v34;
        if (!--v33)
        {

          swift_unknownObjectRelease_n();
          goto LABEL_32;
        }
      }
      __break(1u);
      goto LABEL_34;
    }
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.subscript.getter();
  uint64_t v31 = v49;
  uint64_t v30 = v50;
  unint64_t v52 = v51;
  swift_bridgeObjectRelease_n();
  uint64_t v28 = v52 >> 1;
  uint64_t v33 = v28 - v30;
  BOOL v32 = v28 <= v30;
  if (v28 != v30) {
    goto LABEL_22;
  }
LABEL_31:
  swift_unknownObjectRelease();

LABEL_32:
}

void sub_1001A0DF4()
{
  uint64_t v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v4)
  {
    id v2 = sub_1001F63A0();
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 ulog:40 message:v3];

    sub_10019CF5C();
    sub_10018C140();
    swift_release();
    [v4 pause];
    *(unsigned char *)(*(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy__sessionState) + 24) = 1;
    swift_retain();
    sub_100104D78();
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();
    sub_10019D2D0();
  }
}

uint64_t sub_1001A0F28(void *a1)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return 0;
  }
  NSString v3 = (char *)Strong;
  id v4 = [a1 deviceIdentifer];
  if (!v4) {
    goto LABEL_5;
  }
  NSString v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  uint64_t v9 = *(void *)(*(void *)&v3[OBJC_IVAR____TtC17proximitycontrold11NearbyAgent_state] + 16);
  NSString v10 = *(void **)(v9 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  [v10 lock];
  swift_beginAccess();
  uint64_t v11 = swift_bridgeObjectRetain();
  NSString v12 = sub_1000F06FC(v11);
  swift_bridgeObjectRelease();
  [*(id *)(v9 + 32) unlock];
  swift_release();
  uint64_t v13 = sub_10019BFAC((unint64_t)v12, v6, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v13)
  {
LABEL_5:
    id v14 = [a1 discoveryToken];
    uint64_t v15 = *(void *)(*(void *)&v3[OBJC_IVAR____TtC17proximitycontrold11NearbyAgent_state] + 16);
    uint64_t v16 = *(void **)(v15 + 32);
    id v32 = v14;
    swift_retain();
    [v16 lock];
    swift_beginAccess();
    uint64_t v17 = swift_bridgeObjectRetain();
    unint64_t v18 = (unint64_t)sub_1000F06FC(v17);
    swift_bridgeObjectRelease();
    [*(id *)(v15 + 32) unlock];
    swift_release();
    v30[1] = v30;
    id v31 = v3;
    if ((v18 & 0x8000000000000000) != 0 || (v18 & 0x4000000000000000) != 0)
    {
LABEL_19:
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      if (v19) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v19 = *(void *)(v18 + 16);
      swift_bridgeObjectRetain();
      if (v19)
      {
LABEL_8:
        uint64_t v20 = 4;
        do
        {
          uint64_t v21 = v20 - 4;
          if ((v18 & 0xC000000000000001) != 0)
          {
            uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            uint64_t v22 = v20 - 3;
            if (__OFADD__(v21, 1)) {
              goto LABEL_18;
            }
          }
          else
          {
            uint64_t v13 = *(void *)(v18 + 8 * v20);
            swift_retain();
            uint64_t v22 = v20 - 3;
            if (__OFADD__(v21, 1))
            {
LABEL_18:
              __break(1u);
              goto LABEL_19;
            }
          }
          uint64_t v23 = v13 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_discoveryTokenStateMachine;
          swift_beginAccess();
          uint64_t v24 = *(void **)(*(void *)v23 + 16);
          if (v24)
          {
            sub_100019E10(0, (unint64_t *)&qword_10036AF80);
            id v25 = v32;
            id v26 = v24;
            char v27 = static NSObject.== infix(_:_:)();

            if (v27)
            {

              swift_release_n();
              return v13;
            }
          }
          swift_release();
          ++v20;
        }
        while (v22 != v19);
      }
    }
    id v28 = v32;

    swift_release_n();
    return 0;
  }

  return v13;
}

uint64_t sub_1001A125C()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  NSString v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = __chkstk_darwin(v9);
  NSString v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = OBJC_IVAR____TtC17proximitycontrold12RangingProxy_scheduledStopState;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_scheduledStopState) & 1) == 0
    && *(unsigned char *)(*(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy__sessionState) + 24) == 2)
  {
    uint64_t v30 = v3;
    uint64_t v31 = v14;
    uint64_t v29 = v6;
    id v18 = sub_1001F63A0();
    NSString v19 = String._bridgeToObjectiveC()();
    [v18 ulog:40 message:v19];

    *(unsigned char *)(v1 + v17) = 1;
    if (qword_10035A628 != -1) {
      swift_once();
    }
    id v28 = (id)qword_1003ACB50;
    static DispatchTime.now()();
    if (qword_10035A5D0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for DispatchTimeInterval();
    sub_10001D758(v20, (uint64_t)qword_10036AE18);
    + infix(_:_:)();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v31 + 8);
    v31 += 8;
    char v27 = v21;
    v21(v12, v9);
    uint64_t v22 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v23 = swift_allocObject();
    uint64_t v24 = ObjectType;
    *(void *)(v23 + 16) = v22;
    *(void *)(v23 + 24) = v24;
    aBlock[4] = sub_1001A7864;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10007A0AC;
    aBlock[3] = &unk_10032E2E8;
    id v25 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v34 = _swiftEmptyArrayStorage;
    sub_1001A7A38((unint64_t *)&qword_100363D50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000A38C((uint64_t *)&unk_10035E800);
    sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    id v26 = v28;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v25);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v29);
    v27(v16, v9);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1001A1754(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    if (*(unsigned char *)(Strong + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_scheduledStopState) == 1)
    {
      *(unsigned char *)(Strong + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_scheduledStopState) = 0;
      sub_10016ABE4(0xD000000000000014, (void *)0x80000001002C25E0, 0, a2, (uint64_t)&off_10032E260);
      sub_1001A0DF4();
    }
  }
}

uint64_t sub_1001A17F4()
{
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v2 = *(id *)(qword_1003AC750 + 296);
  char v3 = sub_1000FD938();

  if ((v3 & 1) == 0)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong
      || (uint64_t v8 = (void *)Strong,
          uint64_t v9 = *(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent_bluetoothProxy),
          swift_retain(),
          v8,
          !v9))
    {
      id v14 = sub_1001F63A0();
      NSString v15 = String._bridgeToObjectiveC()();
      [v14 ulog:90 message:v15];

      return 0;
    }
    int DeviceClass = GestaltGetDeviceClass();
    if (DeviceClass == 7 || DeviceClass == 4)
    {
      uint64_t v11 = *(void **)(v9 + OBJC_IVAR____TtC17proximitycontrold14BluetoothProxy_cbDiscovery);
      if (v11)
      {
        id v12 = [v11 discoveredDevices];
        sub_100019E10(0, (unint64_t *)&unk_100365C90);
        unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        unint64_t v13 = (unint64_t)_swiftEmptyArrayStorage;
      }
      if (v13 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v17 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      _StringGuts.grow(_:)(67);
      v18._object = (void *)0x80000001002C2530;
      v18._uint64_t countAndFlagsBits = 0xD000000000000017;
      String.append(_:)(v18);
      BOOL v19 = v17 == 0;
      BOOL v6 = v17 != 0;
      if (v19) {
        uint64_t v20 = 0x65736C6166;
      }
      else {
        uint64_t v20 = 1702195828;
      }
      if (v19) {
        unint64_t v21 = 0xE500000000000000;
      }
      else {
        unint64_t v21 = 0xE400000000000000;
      }
      unint64_t v22 = v21;
      String.append(_:)(*(Swift::String *)&v20);
      swift_bridgeObjectRelease();
      v23._object = (void *)0x80000001002C2550;
      v23._uint64_t countAndFlagsBits = 0xD000000000000017;
      String.append(_:)(v23);
      if (v13 >> 62)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._uint64_t countAndFlagsBits = 0x776F6C6C61202C29;
      v25._object = (void *)0xEF3D737473657547;
      String.append(_:)(v25);
      v26._uint64_t countAndFlagsBits = 1702195828;
      v26._object = (void *)0xE400000000000000;
      String.append(_:)(v26);
LABEL_60:
      id v46 = sub_1001F63A0();
      swift_bridgeObjectRetain();
      NSString v47 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v46 ulog:40 message:v47];
      swift_bridgeObjectRelease();
      swift_release();

      return v6;
    }
    swift_retain();
    swift_retain();
    CurrentValueSubject.value.getter();
    if (v49 == 2)
    {
      CurrentValueSubject.value.getter();
      swift_release();
      swift_release();
      char v16 = v50;
    }
    else
    {
      swift_release();
      swift_release();
      char v16 = v49 & 1;
    }
    char v27 = *(void **)(v9 + OBJC_IVAR____TtC17proximitycontrold14BluetoothProxy_cbDiscovery);
    if (v27)
    {
      id v28 = [v27 discoveredDevices];
      sub_100019E10(0, (unint64_t *)&unk_100365C90);
      unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      unint64_t v29 = (unint64_t)_swiftEmptyArrayStorage;
    }
    if (v29 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v30) {
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v30) {
        goto LABEL_45;
      }
    }
    if (v30 < 1)
    {
      __break(1u);
      goto LABEL_64;
    }
    for (uint64_t i = 0; i != v30; ++i)
    {
      if ((v29 & 0xC000000000000001) != 0) {
        id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v32 = *(id *)(v29 + 8 * i + 32);
      }
      uint64_t v33 = v32;
      if (([v32 nearbyActionFlags] & 8) != 0
        || ([v33 nearbyActionFlags] & 0x10) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
    }
LABEL_45:
    swift_bridgeObjectRelease();
    uint64_t v30 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v0 = 0x65736C6166;
    uint64_t v1 = 1702195828;
    if (v16)
    {
      BOOL v6 = 1;
      uint64_t v34 = (void *)0xE400000000000000;
      uint64_t v35 = 1702195828;
      goto LABEL_51;
    }
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0
      && ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
    {
      uint64_t v36 = _swiftEmptyArrayStorage[2];
LABEL_50:
      BOOL v6 = v36 != 0;
      uint64_t v34 = (void *)0xE500000000000000;
      uint64_t v35 = 0x65736C6166;
LABEL_51:
      _StringGuts.grow(_:)(49);
      swift_bridgeObjectRelease();
      v37._uint64_t countAndFlagsBits = v35;
      v37._object = v34;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      v38._uint64_t countAndFlagsBits = 0x6469646E6163202CLL;
      v38._object = (void *)0xED00003D73657461;
      String.append(_:)(v38);
      if (v30 < 0 || (v30 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_release();
      }
      swift_release();
      v39._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      v40._uint64_t countAndFlagsBits = 41;
      v40._object = (void *)0xE100000000000000;
      String.append(_:)(v40);
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      if (v6) {
        uint64_t v41 = v1;
      }
      else {
        uint64_t v41 = v0;
      }
      if (v6) {
        unint64_t v42 = 0xE400000000000000;
      }
      else {
        unint64_t v42 = 0xE500000000000000;
      }
      unint64_t v43 = v42;
      String.append(_:)(*(Swift::String *)&v41);
      swift_bridgeObjectRelease();
      v44._uint64_t countAndFlagsBits = 32;
      v44._object = (void *)0xE100000000000000;
      String.append(_:)(v44);
      v45._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
      v45._object = (void *)0x80000001002C2570;
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      goto LABEL_60;
    }
LABEL_64:
    swift_retain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_50;
  }
  id v4 = sub_1001F63A0();
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 ulog:40 message:v5];

  return 1;
}

uint64_t sub_1001A1F74()
{
  id v0 = sub_1001F63A0();
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 ulog:40 message:v1];

  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    id v21 = sub_1001F63A0();
    NSString v22 = String._bridgeToObjectiveC()();
    [v21 ulog:90 message:v22];

    sub_1000EC7C4();
    swift_allocError();
    *Swift::String v23 = 2;
    return swift_willThrow();
  }
  Swift::String v24 = (void *)Strong;
  uint64_t v3 = *(void *)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent_state) + 16);
  id v4 = *(void **)(v3 + 32);
  swift_retain();
  [v4 lock];
  swift_beginAccess();
  uint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = (unint64_t)sub_1000F06FC(v5);
  swift_bridgeObjectRelease();
  [*(id *)(v3 + 32) unlock];
  swift_release();
  if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v7 = *(void *)(v6 + 16);
    uint64_t result = swift_retain();
    if (v7) {
      goto LABEL_5;
    }
LABEL_15:

    return swift_release_n();
  }
  swift_retain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v7 = result;
  if (!result) {
    goto LABEL_15;
  }
LABEL_5:
  if (v7 >= 1)
  {
    uint64_t v9 = 0;
    type metadata accessor for HandoffDevice();
    uint64_t v25 = v7;
    do
    {
      if ((v6 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      swift_retain();
      sub_1001BD544(5);
      swift_release();
      sub_10000A38C(&qword_10035B4B0);
      uint64_t v18 = String.init<A>(describing:)();
      sub_10016B950(60, 0xE100000000000000, v18, v19);
      if ((v20 & 1) == 0)
      {
        String.subscript.getter();
        swift_bridgeObjectRelease();
        static String._fromSubstring(_:)();
        swift_bridgeObjectRelease();
      }
      ++v9;
      v10._uint64_t countAndFlagsBits = sub_1001F7514();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v11._uint64_t countAndFlagsBits = 45;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v12 = objc_allocWithZone((Class)CULogHandle);
      NSString v13 = String._bridgeToObjectiveC()();
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v15 = [v12 initWithSubsystem:v13 category:v14];

      NSString v16 = String._bridgeToObjectiveC()();
      [v15 ulog:40 message:v16];

      swift_retain();
      sub_1001BD190(0x100000000uLL);
      swift_release();
      swift_release();
    }
    while (v25 != v9);
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

void sub_1001A23E4()
{
  if ((sub_1001A17F4() & 1) == 0) {
    return;
  }
  if (*(unsigned char *)(*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy__sessionState) + 24) != 2)
  {
    sub_1001A04D4();
    return;
  }
  id v1 = sub_1001F63A0();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  if (![self isSupported])
  {
    sub_1000EC7C4();
    swift_allocError();
    char v9 = 8;
LABEL_12:
    *uint64_t v8 = v9;
    swift_willThrow();
    return;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  id v3 = v17[0];
  if (!v17[0])
  {
    sub_1000EC7C4();
    swift_allocError();
    char v9 = 5;
    goto LABEL_12;
  }
  id v4 = sub_1001A55A4();
  id v5 = [v17[0] configuration];
  if (!v5)
  {
LABEL_8:

    return;
  }
  unint64_t v6 = v5;
  id v7 = [v5 enabledGestures];
  if (v7 == [v4 enabledGestures])
  {

    goto LABEL_8;
  }
  strcpy((char *)v17, "Running with ");
  HIWORD(v17[1]) = -4864;
  id v10 = [v4 description:v17[0] v17[1]];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v13 = v12;

  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  id v15 = sub_1001F63A0();
  swift_bridgeObjectRetain();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 ulog:40 message:v16];
  swift_bridgeObjectRelease();

  [v3 runWithConfiguration:v4];
}

void sub_1001A26C8()
{
  sub_1001A27AC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1001A27AC()
{
  if (!qword_10036AEE0)
  {
    sub_10000A3D0(&qword_10036AEE8);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10036AEE0);
    }
  }
}

uint64_t sub_1001A2870()
{
  uint64_t v1 = v0;
  sub_10000A38C((uint64_t *)&unk_10035E7E0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10028D430;
  *(void *)(v2 + 32) = 0xD000000000000012;
  *(void *)(v2 + 40) = 0x80000001002C23D0;
  if (qword_10035A5C8 != -1) {
    swift_once();
  }
  int v3 = byte_1003AC9E0;
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_trackedTokens);
  id v5 = *(void **)(v4 + 32);
  swift_retain();
  [v5 lock];
  swift_beginAccess();
  uint64_t v6 = swift_bridgeObjectRetain();
  unint64_t v7 = (unint64_t)sub_1000F06FC(v6);
  swift_bridgeObjectRelease();
  [*(id *)(v4 + 32) unlock];
  swift_release();
  if ((v7 & 0x8000000000000000) != 0 || (v7 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  swift_release();
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  if (v3) {
    uint64_t v8 = 0x726F68636E61;
  }
  else {
    uint64_t v8 = 0x656C69626F6DLL;
  }
  unint64_t v9 = 0xE600000000000000;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 8236;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0xD000000000000011;
  v12._object = (void *)0x80000001002C23F0;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x20736E656B6F7420;
  v14._object = (void *)0xED00006465646461;
  String.append(_:)(v14);
  if (*(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_reactivation))
  {
    v15._uint64_t countAndFlagsBits = 0x697463616572202CLL;
    v15._object = (void *)0xEE00676E69746176;
    String.append(_:)(v15);
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_scheduledStopState) == 1)
  {
    v16._object = (void *)0x80000001002C2410;
    v16._uint64_t countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v16);
  }
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  if (qword_10035A5C0 != -1) {
    swift_once();
  }
  if (*((unsigned char *)off_10036AE10 + 24)) {
    uint64_t v17 = 1702195828;
  }
  else {
    uint64_t v17 = 0x65736C6166;
  }
  if (*((unsigned char *)off_10036AE10 + 24)) {
    unint64_t v18 = 0xE400000000000000;
  }
  else {
    unint64_t v18 = 0xE500000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0xD000000000000016;
  v20._object = (void *)0x80000001002C2430;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  id v21 = (void *)(v1 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_tasks);
  swift_beginAccess();
  if ((*v21 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 0x3D736B736174202CLL;
  v23._object = (void *)0xE800000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  unint64_t v25 = *(void *)(v2 + 16);
  unint64_t v24 = *(void *)(v2 + 24);
  if (v25 >= v24 >> 1) {
    uint64_t v2 = (uint64_t)sub_10008892C((char *)(v24 > 1), v25 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v25 + 1;
  uint64_t v26 = v2 + 16 * v25;
  *(void *)(v26 + 32) = 0x3D656C6F52;
  *(void *)(v26 + 40) = 0xE500000000000000;
  unint64_t v27 = 0xE800000000000000;
  uint64_t v28 = 0x6576697463616E69;
  switch(*(unsigned char *)(*(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy__sessionState) + 24))
  {
    case 1:
      unint64_t v27 = 0xE600000000000000;
      uint64_t v28 = 0x646573756170;
      break;
    case 2:
      unint64_t v27 = 0xE700000000000000;
      uint64_t v28 = 0x676E696E6E7572;
      break;
    case 3:
      unint64_t v27 = 0xE900000000000064;
      uint64_t v28 = 0x65646E6570737573;
      break;
    default:
      break;
  }
  unint64_t v29 = v27;
  String.append(_:)(*(Swift::String *)&v28);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 41;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  unint64_t v32 = *(void *)(v2 + 16);
  unint64_t v31 = *(void *)(v2 + 24);
  if (v32 >= v31 >> 1) {
    uint64_t v2 = (uint64_t)sub_10008892C((char *)(v31 > 1), v32 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v32 + 1;
  uint64_t v33 = v2 + 16 * v32;
  *(void *)(v33 + 32) = 0x206E6F6973736553;
  *(void *)(v33 + 40) = 0xE900000000000028;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  id v34 = [(id)0x206E6F6973736553 description];
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v37 = v36;

  v38._uint64_t countAndFlagsBits = v35;
  v38._object = v37;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  unint64_t v40 = *(void *)(v2 + 16);
  unint64_t v39 = *(void *)(v2 + 24);
  if (v40 >= v39 >> 1) {
    uint64_t v2 = (uint64_t)sub_10008892C((char *)(v39 > 1), v40 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v40 + 1;
  uint64_t v41 = v2 + 16 * v40;
  *(void *)(v41 + 32) = 2108704;
  *(void *)(v41 + 40) = 0xE300000000000000;

  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_10000B010((unint64_t *)&qword_10035E7F0, (uint64_t *)&unk_100367D40);
  uint64_t v42 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v42;
}

void sub_1001A3074(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong && (Swift::String v10 = (void *)Strong, v11 = sub_1001A0F28(v8), v10, v11))
  {
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = sub_1001F7514();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = 0x6E6F73616572202CLL;
    v13._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v13);
    unint64_t v14 = 0xE100000000000000;
    uint64_t v15 = 63;
    if (a4 == 1)
    {
      uint64_t v15 = 0x65646E4572656570;
      unint64_t v14 = 0xE900000000000064;
    }
    if (a4) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0x74756F656D6974;
    }
    if (a4) {
      unint64_t v17 = v14;
    }
    else {
      unint64_t v17 = 0xE700000000000000;
    }
    unint64_t v18 = v17;
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease();
    sub_10016ABE4(0x204445564F4D4552, (void *)0xE800000000000000, 0, a5, (uint64_t)&off_10032E260);
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1001BD544(5);
    swift_release();
    sub_100040C78();
    sub_10014A1C0(v11);
    uint64_t v19 = *(void *)(a3 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_numTokensAdded);
    BOOL v20 = __OFSUB__(v19, 1);
    uint64_t v21 = v19 - 1;
    if (v20)
    {
      __break(1u);
    }
    else
    {
      *(void *)(a3 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy_numTokensAdded) = v21;
      swift_beginAccess();
      uint64_t v22 = swift_unknownObjectWeakLoadStrong();
      if (v22)
      {
        Swift::String v23 = (void *)v22;
        sub_10019FA64(v11);
      }
      swift_release();
    }
  }
  else
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = sub_10016CB90();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    id v25 = sub_1001F63A0();
    swift_bridgeObjectRetain();
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v25 ulog:v26 message:0xD000000000000024, 0x80000001002C2250];
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001A36F8(void *a1)
{
  _StringGuts.grow(_:)(24);
  v2._object = (void *)0x80000001002C1FE0;
  v2._uint64_t countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = 0x3D6574617473203ALL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  type metadata accessor for NIMotionActivityState(0);
  _print_unlocked<A, B>(_:_:)();
  v4._uint64_t countAndFlagsBits = 0x6F6973736573202CLL;
  v4._object = (void *)0xEA00000000003D6ELL;
  String.append(_:)(v4);
  id v5 = [a1 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  v9._uint64_t countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  id v10 = sub_1001F63A0();
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 ulog:40 message:v11];
  swift_bridgeObjectRelease();

  return PassthroughSubject.send(_:)();
}

unsigned char *storeEnumTagSinglePayload for RangingProxy.SessionState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001A39B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RangingProxy.SessionState()
{
  return &type metadata for RangingProxy.SessionState;
}

unsigned char *storeEnumTagSinglePayload for RangingProxy.ScheduledStopState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001A3ABCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RangingProxy.ScheduledStopState()
{
  return &type metadata for RangingProxy.ScheduledStopState;
}

uint64_t getEnumTagSinglePayload for NearbyInteractionEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyInteractionEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1001A3B80(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NearbyInteractionEvent()
{
  return &type metadata for NearbyInteractionEvent;
}

unint64_t sub_1001A3B9C()
{
  unint64_t result = qword_10036AF50;
  if (!qword_10036AF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AF50);
  }
  return result;
}

uint64_t sub_1001A3BF0()
{
  uint64_t result = 0x6576697463616E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x646573756170;
      break;
    case 2:
      uint64_t result = 0x676E696E6E7572;
      break;
    case 3:
      uint64_t result = 0x65646E6570737573;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001A3C84()
{
  unint64_t result = qword_10036AF58;
  if (!qword_10036AF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036AF58);
  }
  return result;
}

uint64_t sub_1001A3CD8(uint64_t *a1, void (*a2)(void *))
{
  uint64_t v4 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_1001F9540(v4);
    *a1 = v4;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  a2(v8);
  return specialized ContiguousArray._endMutation()();
}

void sub_1001A3D5C(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_132;
    }
    if (v4) {
      sub_1001A4C3C(0, v4, 1, a1);
    }
    return;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_140;
  }
  Swift::Int v7 = v5;
  unint64_t v110 = a1;
  if (v4 < 2)
  {
    id v10 = (char *)_swiftEmptyArrayStorage;
    uint64_t v119 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v118 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
LABEL_98:
      unsigned int v102 = v10;
      if (v13 >= 2)
      {
        uint64_t v103 = *v110;
        do
        {
          unint64_t v104 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_127;
          }
          if (!v103) {
            goto LABEL_139;
          }
          char v105 = v102;
          uint64_t v106 = *(void *)&v102[16 * v104 + 32];
          uint64_t v107 = *(void *)&v102[16 * v13 + 24];
          sub_1001A4E28((void **)(v103 + 8 * v106), (id *)(v103 + 8 * *(void *)&v102[16 * v13 + 16]), v103 + 8 * v107, v118);
          if (v2) {
            break;
          }
          if (v107 < v106) {
            goto LABEL_128;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v105 = sub_1001F9518((uint64_t)v105);
          }
          if (v104 >= *((void *)v105 + 2)) {
            goto LABEL_129;
          }
          uint64_t v108 = &v105[16 * v104 + 32];
          *(void *)uint64_t v108 = v106;
          *((void *)v108 + 1) = v107;
          unint64_t v109 = *((void *)v105 + 2);
          if (v13 > v109) {
            goto LABEL_130;
          }
          memmove(&v105[16 * v13 + 16], &v105[16 * v13 + 32], 16 * (v109 - v13));
          unsigned int v102 = v105;
          *((void *)v105 + 2) = v109 - 1;
          unint64_t v13 = v109 - 1;
        }
        while (v109 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v8 = v6 >> 1;
    sub_100019E10(0, &qword_100365CF0);
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    uint64_t v118 = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v119 = v9;
  }
  Swift::Int v114 = v7;
  Swift::Int v11 = 0;
  uint64_t v12 = *a1;
  uint64_t v111 = *a1 - 8;
  uint64_t v112 = *a1 + 16;
  id v10 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v115 = v4;
  while (1)
  {
    Swift::Int v14 = v11++;
    Swift::Int v116 = v14;
    if (v11 < v4)
    {
      uint64_t v15 = *(void **)(v12 + 8 * v14);
      id v16 = *(id *)(v12 + 8 * v11);
      id v17 = v15;
      [v16 radius];
      float v19 = v18;
      [v17 radius];
      float v21 = v20;

      Swift::Int v11 = v14 + 2;
      if (v14 + 2 < v4)
      {
        uint64_t v22 = (id *)(v112 + 8 * v14);
        while (1)
        {
          Swift::String v23 = *(v22 - 1);
          id v24 = *v22;
          id v25 = v23;
          [v24 radius];
          float v27 = v26;
          [v25 radius];
          float v29 = v28;

          if (v19 < v21 == v27 >= v29) {
            break;
          }
          ++v11;
          ++v22;
          if (v4 == v11)
          {
            Swift::Int v11 = v4;
            break;
          }
        }
        Swift::Int v14 = v116;
      }
      if (v19 < v21)
      {
        if (v11 < v14) {
          goto LABEL_133;
        }
        if (v14 < v11)
        {
          Swift::String v30 = (uint64_t *)(v111 + 8 * v11);
          Swift::Int v31 = v11;
          Swift::Int v32 = v14;
          uint64_t v33 = (uint64_t *)(v12 + 8 * v14);
          do
          {
            if (v32 != --v31)
            {
              if (!v12) {
                goto LABEL_138;
              }
              uint64_t v34 = *v33;
              *uint64_t v33 = *v30;
              *Swift::String v30 = v34;
            }
            ++v32;
            --v30;
            ++v33;
          }
          while (v32 < v31);
        }
      }
    }
    if (v11 >= v4) {
      goto LABEL_47;
    }
    if (__OFSUB__(v11, v14)) {
      goto LABEL_131;
    }
    if (v11 - v14 >= v114) {
      goto LABEL_47;
    }
    if (__OFADD__(v14, v114)) {
      goto LABEL_134;
    }
    Swift::Int v35 = v14 + v114 >= v4 ? v4 : v14 + v114;
    if (v35 < v14) {
      break;
    }
    if (v11 != v35)
    {
      uint64_t v113 = v10;
      uint64_t v36 = v111 + 8 * v11;
      do
      {
        Swift::String v37 = *(void **)(v12 + 8 * v11);
        Swift::Int v38 = v14;
        uint64_t v39 = v36;
        do
        {
          unint64_t v40 = *(void **)v39;
          id v41 = v37;
          id v42 = v40;
          [v41 radius];
          float v44 = v43;
          [v42 radius];
          float v46 = v45;

          if (v44 >= v46) {
            break;
          }
          if (!v12) {
            goto LABEL_136;
          }
          NSString v47 = *(void **)v39;
          Swift::String v37 = *(void **)(v39 + 8);
          *(void *)uint64_t v39 = v37;
          *(void *)(v39 + 8) = v47;
          v39 -= 8;
          ++v38;
        }
        while (v11 != v38);
        ++v11;
        v36 += 8;
        Swift::Int v14 = v116;
      }
      while (v11 != v35);
      Swift::Int v11 = v35;
      id v10 = v113;
    }
LABEL_47:
    if (v11 < v14) {
      goto LABEL_126;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v10 = sub_1001F92A0(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v49 = *((void *)v10 + 2);
    unint64_t v48 = *((void *)v10 + 3);
    unint64_t v13 = v49 + 1;
    if (v49 >= v48 >> 1) {
      id v10 = sub_1001F92A0((char *)(v48 > 1), v49 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v13;
    char v50 = v10 + 32;
    unint64_t v51 = &v10[16 * v49 + 32];
    *(void *)unint64_t v51 = v14;
    *((void *)v51 + 1) = v11;
    if (v49)
    {
      Swift::Int v117 = v11;
      while (1)
      {
        unint64_t v52 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v57 = &v50[16 * v13];
          uint64_t v58 = *((void *)v57 - 8);
          uint64_t v59 = *((void *)v57 - 7);
          BOOL v63 = __OFSUB__(v59, v58);
          uint64_t v60 = v59 - v58;
          if (v63) {
            goto LABEL_115;
          }
          uint64_t v62 = *((void *)v57 - 6);
          uint64_t v61 = *((void *)v57 - 5);
          BOOL v63 = __OFSUB__(v61, v62);
          uint64_t v55 = v61 - v62;
          char v56 = v63;
          if (v63) {
            goto LABEL_116;
          }
          unint64_t v64 = v13 - 2;
          uint64_t v65 = &v50[16 * v13 - 32];
          uint64_t v67 = *(void *)v65;
          uint64_t v66 = *((void *)v65 + 1);
          BOOL v63 = __OFSUB__(v66, v67);
          uint64_t v68 = v66 - v67;
          if (v63) {
            goto LABEL_118;
          }
          BOOL v63 = __OFADD__(v55, v68);
          uint64_t v69 = v55 + v68;
          if (v63) {
            goto LABEL_121;
          }
          if (v69 >= v60)
          {
            char v87 = &v50[16 * v52];
            uint64_t v89 = *(void *)v87;
            uint64_t v88 = *((void *)v87 + 1);
            BOOL v63 = __OFSUB__(v88, v89);
            uint64_t v90 = v88 - v89;
            if (v63) {
              goto LABEL_125;
            }
            BOOL v80 = v55 < v90;
            goto LABEL_85;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v81 = *((void *)v10 + 4);
            uint64_t v82 = *((void *)v10 + 5);
            BOOL v63 = __OFSUB__(v82, v81);
            uint64_t v74 = v82 - v81;
            char v75 = v63;
            goto LABEL_79;
          }
          uint64_t v54 = *((void *)v10 + 4);
          uint64_t v53 = *((void *)v10 + 5);
          BOOL v63 = __OFSUB__(v53, v54);
          uint64_t v55 = v53 - v54;
          char v56 = v63;
        }
        if (v56) {
          goto LABEL_117;
        }
        unint64_t v64 = v13 - 2;
        char v70 = &v50[16 * v13 - 32];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        BOOL v73 = __OFSUB__(v71, v72);
        uint64_t v74 = v71 - v72;
        char v75 = v73;
        if (v73) {
          goto LABEL_120;
        }
        unint64_t v76 = &v50[16 * v52];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        BOOL v63 = __OFSUB__(v77, v78);
        uint64_t v79 = v77 - v78;
        if (v63) {
          goto LABEL_123;
        }
        if (__OFADD__(v74, v79)) {
          goto LABEL_124;
        }
        if (v74 + v79 >= v55)
        {
          BOOL v80 = v55 < v79;
LABEL_85:
          if (v80) {
            unint64_t v52 = v64;
          }
          goto LABEL_87;
        }
LABEL_79:
        if (v75) {
          goto LABEL_119;
        }
        unint64_t v83 = &v50[16 * v52];
        uint64_t v85 = *(void *)v83;
        uint64_t v84 = *((void *)v83 + 1);
        BOOL v63 = __OFSUB__(v84, v85);
        uint64_t v86 = v84 - v85;
        if (v63) {
          goto LABEL_122;
        }
        if (v86 < v74) {
          goto LABEL_14;
        }
LABEL_87:
        unint64_t v91 = v52 - 1;
        if (v52 - 1 >= v13)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        uint64_t v92 = v12;
        if (!v12) {
          goto LABEL_137;
        }
        unsigned int v93 = v10;
        char v94 = &v50[16 * v91];
        uint64_t v95 = *(void *)v94;
        uint64_t v96 = v50;
        unint64_t v97 = v52;
        uint64_t v98 = &v50[16 * v52];
        uint64_t v99 = *((void *)v98 + 1);
        uint64_t v100 = v92;
        sub_1001A4E28((void **)(v92 + 8 * *(void *)v94), (id *)(v92 + 8 * *(void *)v98), v92 + 8 * v99, v118);
        if (v1) {
          goto LABEL_95;
        }
        if (v99 < v95) {
          goto LABEL_112;
        }
        if (v97 > *((void *)v93 + 2)) {
          goto LABEL_113;
        }
        *(void *)char v94 = v95;
        *(void *)&v96[16 * v91 + 8] = v99;
        unint64_t v101 = *((void *)v93 + 2);
        if (v97 >= v101) {
          goto LABEL_114;
        }
        id v10 = v93;
        unint64_t v13 = v101 - 1;
        memmove(v98, v98 + 16, 16 * (v101 - 1 - v97));
        char v50 = v96;
        *((void *)v93 + 2) = v101 - 1;
        uint64_t v12 = v100;
        Swift::Int v11 = v117;
        if (v101 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_14:
    Swift::Int v4 = v115;
    if (v11 >= v115)
    {
      uint64_t v2 = v1;
      goto LABEL_98;
    }
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1001A44C8(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_132;
    }
    if (v3) {
      sub_1001A4D34(0, v3, 1, a1);
    }
    return;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_140;
  }
  Swift::Int v104 = v4;
  uint64_t v99 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
    uint64_t v111 = (uint64_t)_swiftEmptyArrayStorage;
    unint64_t v110 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v11 = _swiftEmptyArrayStorage[2];
LABEL_98:
      if (v11 >= 2)
      {
        uint64_t v93 = *v99;
        do
        {
          unint64_t v94 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_127;
          }
          if (!v93) {
            goto LABEL_139;
          }
          uint64_t v95 = *(void *)&v8[16 * v94 + 32];
          uint64_t v96 = *(void *)&v8[16 * v11 + 24];
          sub_1001A5154((id *)(v93 + 8 * v95), (id *)(v93 + 8 * *(void *)&v8[16 * v11 + 16]), v93 + 8 * v96, v110);
          if (v1) {
            break;
          }
          if (v96 < v95) {
            goto LABEL_128;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = sub_1001F9518((uint64_t)v8);
          }
          if (v94 >= *((void *)v8 + 2)) {
            goto LABEL_129;
          }
          unint64_t v97 = &v8[16 * v94 + 32];
          *(void *)unint64_t v97 = v95;
          *((void *)v97 + 1) = v96;
          unint64_t v98 = *((void *)v8 + 2);
          if (v11 > v98) {
            goto LABEL_130;
          }
          memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v98 - v11));
          *((void *)v8 + 2) = v98 - 1;
          unint64_t v11 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_109:
      swift_bridgeObjectRelease();
      *(void *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    sub_100019E10(0, &qword_100365CF0);
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    unint64_t v110 = (void **)((v7 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v111 = v7;
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v100 = *a1 - 8;
  uint64_t v101 = *a1 + 16;
  uint64_t v8 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v107 = v3;
  while (1)
  {
    Swift::Int v12 = v9++;
    Swift::Int v108 = v12;
    if (v9 < v3)
    {
      unint64_t v13 = *(void **)(v10 + 8 * v12);
      id v14 = *(id *)(v10 + 8 * v9);
      id v15 = v13;
      id v105 = [v14 regionSizeCategory];
      id v16 = [v15 regionSizeCategory];

      Swift::Int v3 = v107;
      Swift::Int v9 = v12 + 2;
      if (v12 + 2 < v107)
      {
        unsigned int v102 = v8;
        id v17 = (id *)(v101 + 8 * v12);
        while (1)
        {
          float v18 = *(v17 - 1);
          id v19 = *v17;
          id v20 = v18;
          id v21 = [v19 regionSizeCategory];
          id v22 = [v20 regionSizeCategory];

          if ((uint64_t)v105 < (uint64_t)v16 == (uint64_t)v21 >= (uint64_t)v22) {
            break;
          }
          ++v9;
          ++v17;
          Swift::Int v3 = v107;
          if (v107 == v9)
          {
            Swift::Int v9 = v107;
            uint64_t v8 = v102;
            goto LABEL_22;
          }
        }
        uint64_t v8 = v102;
        Swift::Int v3 = v107;
LABEL_22:
        Swift::Int v12 = v108;
      }
      if ((uint64_t)v105 < (uint64_t)v16)
      {
        if (v9 < v12) {
          goto LABEL_133;
        }
        if (v12 < v9)
        {
          Swift::String v23 = (uint64_t *)(v100 + 8 * v9);
          Swift::Int v24 = v9;
          Swift::Int v25 = v12;
          float v26 = (uint64_t *)(v10 + 8 * v12);
          do
          {
            if (v25 != --v24)
            {
              if (!v10) {
                goto LABEL_138;
              }
              uint64_t v27 = *v26;
              *float v26 = *v23;
              *Swift::String v23 = v27;
            }
            ++v25;
            --v23;
            ++v26;
          }
          while (v25 < v24);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v12)) {
        goto LABEL_131;
      }
      if (v9 - v12 < v104) {
        break;
      }
    }
LABEL_48:
    if (v9 < v12) {
      goto LABEL_126;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v8 = sub_1001F92A0(0, *((void *)v8 + 2) + 1, 1, v8);
    }
    unint64_t v40 = *((void *)v8 + 2);
    unint64_t v39 = *((void *)v8 + 3);
    unint64_t v11 = v40 + 1;
    if (v40 >= v39 >> 1) {
      uint64_t v8 = sub_1001F92A0((char *)(v39 > 1), v40 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v11;
    id v41 = v8 + 32;
    id v42 = &v8[16 * v40 + 32];
    *(void *)id v42 = v12;
    *((void *)v42 + 1) = v9;
    if (v40)
    {
      Swift::Int v109 = v9;
      while (1)
      {
        unint64_t v43 = v11 - 1;
        if (v11 >= 4)
        {
          unint64_t v48 = &v41[16 * v11];
          uint64_t v49 = *((void *)v48 - 8);
          uint64_t v50 = *((void *)v48 - 7);
          BOOL v54 = __OFSUB__(v50, v49);
          uint64_t v51 = v50 - v49;
          if (v54) {
            goto LABEL_115;
          }
          uint64_t v53 = *((void *)v48 - 6);
          uint64_t v52 = *((void *)v48 - 5);
          BOOL v54 = __OFSUB__(v52, v53);
          uint64_t v46 = v52 - v53;
          char v47 = v54;
          if (v54) {
            goto LABEL_116;
          }
          unint64_t v55 = v11 - 2;
          char v56 = &v41[16 * v11 - 32];
          uint64_t v58 = *(void *)v56;
          uint64_t v57 = *((void *)v56 + 1);
          BOOL v54 = __OFSUB__(v57, v58);
          uint64_t v59 = v57 - v58;
          if (v54) {
            goto LABEL_118;
          }
          BOOL v54 = __OFADD__(v46, v59);
          uint64_t v60 = v46 + v59;
          if (v54) {
            goto LABEL_121;
          }
          if (v60 >= v51)
          {
            uint64_t v78 = &v41[16 * v43];
            uint64_t v80 = *(void *)v78;
            uint64_t v79 = *((void *)v78 + 1);
            BOOL v54 = __OFSUB__(v79, v80);
            uint64_t v81 = v79 - v80;
            if (v54) {
              goto LABEL_125;
            }
            BOOL v71 = v46 < v81;
            goto LABEL_86;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v72 = *((void *)v8 + 4);
            uint64_t v73 = *((void *)v8 + 5);
            BOOL v54 = __OFSUB__(v73, v72);
            uint64_t v65 = v73 - v72;
            char v66 = v54;
            goto LABEL_80;
          }
          uint64_t v45 = *((void *)v8 + 4);
          uint64_t v44 = *((void *)v8 + 5);
          BOOL v54 = __OFSUB__(v44, v45);
          uint64_t v46 = v44 - v45;
          char v47 = v54;
        }
        if (v47) {
          goto LABEL_117;
        }
        unint64_t v55 = v11 - 2;
        uint64_t v61 = &v41[16 * v11 - 32];
        uint64_t v63 = *(void *)v61;
        uint64_t v62 = *((void *)v61 + 1);
        BOOL v64 = __OFSUB__(v62, v63);
        uint64_t v65 = v62 - v63;
        char v66 = v64;
        if (v64) {
          goto LABEL_120;
        }
        uint64_t v67 = &v41[16 * v43];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        BOOL v54 = __OFSUB__(v68, v69);
        uint64_t v70 = v68 - v69;
        if (v54) {
          goto LABEL_123;
        }
        if (__OFADD__(v65, v70)) {
          goto LABEL_124;
        }
        if (v65 + v70 >= v46)
        {
          BOOL v71 = v46 < v70;
LABEL_86:
          if (v71) {
            unint64_t v43 = v55;
          }
          goto LABEL_88;
        }
LABEL_80:
        if (v66) {
          goto LABEL_119;
        }
        uint64_t v74 = &v41[16 * v43];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        BOOL v54 = __OFSUB__(v75, v76);
        uint64_t v77 = v75 - v76;
        if (v54) {
          goto LABEL_122;
        }
        if (v77 < v65) {
          goto LABEL_14;
        }
LABEL_88:
        unint64_t v82 = v43 - 1;
        if (v43 - 1 >= v11)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        uint64_t v83 = v10;
        if (!v10) {
          goto LABEL_137;
        }
        uint64_t v84 = v8;
        uint64_t v85 = &v41[16 * v82];
        uint64_t v86 = *(void *)v85;
        char v87 = v41;
        unint64_t v88 = v43;
        uint64_t v89 = &v41[16 * v43];
        uint64_t v90 = *((void *)v89 + 1);
        uint64_t v91 = v83;
        sub_1001A5154((id *)(v83 + 8 * *(void *)v85), (id *)(v83 + 8 * *(void *)v89), v83 + 8 * v90, v110);
        if (v1) {
          goto LABEL_109;
        }
        if (v90 < v86) {
          goto LABEL_112;
        }
        if (v88 > *((void *)v84 + 2)) {
          goto LABEL_113;
        }
        *(void *)uint64_t v85 = v86;
        *(void *)&v87[16 * v82 + 8] = v90;
        unint64_t v92 = *((void *)v84 + 2);
        if (v88 >= v92) {
          goto LABEL_114;
        }
        uint64_t v8 = v84;
        unint64_t v11 = v92 - 1;
        memmove(v89, v89 + 16, 16 * (v92 - 1 - v88));
        id v41 = v87;
        *((void *)v84 + 2) = v92 - 1;
        uint64_t v10 = v91;
        Swift::Int v9 = v109;
        if (v92 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_14:
    Swift::Int v3 = v107;
    if (v9 >= v107) {
      goto LABEL_98;
    }
  }
  if (__OFADD__(v12, v104)) {
    goto LABEL_134;
  }
  if (v12 + v104 >= v3) {
    Swift::Int v28 = v3;
  }
  else {
    Swift::Int v28 = v12 + v104;
  }
  if (v28 >= v12)
  {
    if (v9 != v28)
    {
      uint64_t v103 = v8;
      uint64_t v29 = v100 + 8 * v9;
      Swift::Int v106 = v28;
      do
      {
        Swift::String v30 = *(void **)(v10 + 8 * v9);
        Swift::Int v31 = v12;
        uint64_t v32 = v29;
        do
        {
          uint64_t v33 = *(void **)v32;
          id v34 = v30;
          id v35 = v33;
          id v36 = [v34 regionSizeCategory];
          id v37 = [v35 regionSizeCategory];

          if ((uint64_t)v36 >= (uint64_t)v37) {
            break;
          }
          if (!v10) {
            goto LABEL_136;
          }
          Swift::Int v38 = *(void **)v32;
          Swift::String v30 = *(void **)(v32 + 8);
          *(void *)uint64_t v32 = v30;
          *(void *)(v32 + 8) = v38;
          v32 -= 8;
          ++v31;
        }
        while (v9 != v31);
        ++v9;
        v29 += 8;
        Swift::Int v12 = v108;
      }
      while (v9 != v106);
      Swift::Int v9 = v106;
      uint64_t v8 = v103;
    }
    goto LABEL_48;
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1001A4C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = *a4;
    uint64_t v7 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v8 = *(void **)(v6 + 8 * v4);
    uint64_t v9 = a1;
    uint64_t v10 = v7;
    while (1)
    {
      unint64_t v11 = *(void **)v10;
      id v12 = v8;
      id v13 = v11;
      [v12 radius];
      float v15 = v14;
      [v13 radius];
      float v17 = v16;

      if (v15 >= v17)
      {
LABEL_4:
        ++v4;
        v7 += 8;
        if (v4 == a2) {
          return;
        }
        goto LABEL_5;
      }
      if (!v6) {
        break;
      }
      float v18 = *(void **)v10;
      uint64_t v8 = *(void **)(v10 + 8);
      *(void *)uint64_t v10 = v8;
      *(void *)(v10 + 8) = v18;
      v10 -= 8;
      if (v4 == ++v9) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

void sub_1001A4D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v7 = *(void **)(v5 + 8 * v4);
    uint64_t v8 = a1;
    uint64_t v17 = v6;
    while (1)
    {
      uint64_t v9 = *(void **)v6;
      id v10 = v7;
      id v11 = v9;
      id v12 = [v10 regionSizeCategory];
      id v13 = [v11 regionSizeCategory];

      if ((uint64_t)v12 >= (uint64_t)v13)
      {
LABEL_4:
        ++v4;
        uint64_t v6 = v17 + 8;
        if (v4 == a2) {
          return;
        }
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      float v14 = *(void **)v6;
      uint64_t v7 = *(void **)(v6 + 8);
      *(void *)uint64_t v6 = v7;
      *(void *)(v6 + 8) = v14;
      v6 -= 8;
      if (v4 == ++v8) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_1001A4E28(void **__src, id *a2, unint64_t a3, void **a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v8 = (char *)a2 - (char *)__src;
  }
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v11 = a3 - (void)a2;
  }
  uint64_t v12 = v11 >> 3;
  unint64_t v39 = __src;
  Swift::Int v38 = a4;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7) {
      goto LABEL_46;
    }
    if (a4 != a2 || &a2[v12] <= a4) {
      memmove(a4, a2, 8 * v12);
    }
    Swift::String v23 = &a4[v12];
    id v37 = (char *)v23;
    unint64_t v39 = v5;
    if (v6 >= v5 || v10 < 8) {
      goto LABEL_45;
    }
    Swift::Int v24 = (id *)(a3 - 8);
    Swift::Int v25 = v5;
    while (1)
    {
      float v26 = v24 + 1;
      uint64_t v27 = v23 - 1;
      Swift::Int v28 = *--v25;
      id v29 = *(v23 - 1);
      id v30 = v28;
      [v29 radius];
      float v32 = v31;
      [v30 radius];
      float v34 = v33;

      if (v32 < v34) {
        break;
      }
      id v37 = (char *)(v23 - 1);
      if (v26 < v23 || v24 >= v23)
      {
        *Swift::Int v24 = *v27;
        Swift::Int v25 = v5;
        --v23;
        goto LABEL_43;
      }
      if (v26 != v23) {
        *Swift::Int v24 = *v27;
      }
      Swift::Int v25 = v5;
      --v23;
      if (v5 <= v6) {
        goto LABEL_45;
      }
LABEL_44:
      --v24;
      uint64_t v5 = v25;
      if (v23 <= a4) {
        goto LABEL_45;
      }
    }
    if (v26 != v5 || v24 >= v5) {
      *Swift::Int v24 = *v25;
    }
    unint64_t v39 = v25;
LABEL_43:
    if (v25 <= v6) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (v7 >= -7)
  {
    if (a4 != __src || &__src[v9] <= a4) {
      memmove(a4, __src, 8 * v9);
    }
    id v13 = &a4[v9];
    id v37 = (char *)v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      float v14 = a4;
      do
      {
        float v15 = *v14;
        id v16 = *v5;
        id v17 = v15;
        [v16 radius];
        float v19 = v18;
        [v17 radius];
        float v21 = v20;

        if (v19 >= v21)
        {
          if (v6 != v14) {
            *uint64_t v6 = *v14;
          }
          Swift::Int v38 = ++v14;
          id v22 = v5;
        }
        else
        {
          id v22 = v5 + 1;
          if (v6 < v5 || v6 >= v22 || v6 != v5) {
            *uint64_t v6 = *v5;
          }
        }
        ++v6;
        if (v14 >= v13) {
          break;
        }
        uint64_t v5 = v22;
      }
      while ((unint64_t)v22 < a3);
      unint64_t v39 = v6;
    }
LABEL_45:
    sub_1001F939C(&v39, &v38, &v37);
    return 1;
  }
LABEL_46:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001A5154(id *__src, id *a2, unint64_t a3, void **a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = __src;
  int64_t v6 = (char *)a2 - (char *)__src;
  int64_t v7 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v7 = (char *)a2 - (char *)__src;
  }
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = a3 - (void)a2;
  uint64_t v10 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v10 = a3 - (void)a2;
  }
  uint64_t v11 = v10 >> 3;
  Swift::Int v38 = __src;
  id v37 = a4;
  if (v8 >= v10 >> 3)
  {
    if (v9 >= -7)
    {
      if (a4 != a2 || &a2[v11] <= a4) {
        memmove(a4, a2, 8 * v11);
      }
      id v22 = &a4[v11];
      id v36 = (char *)v22;
      Swift::Int v38 = v4;
      if (v5 < v4 && v9 >= 8)
      {
        Swift::String v23 = (id *)(a3 - 8);
        Swift::Int v24 = v4;
        float v32 = v5;
        do
        {
          id v35 = v4;
          Swift::Int v25 = v23 + 1;
          float v26 = *--v24;
          id v27 = *(v22 - 1);
          id v28 = v26;
          id v29 = [v27 regionSizeCategory];
          id v30 = [v28 regionSizeCategory];

          if ((uint64_t)v29 >= (uint64_t)v30)
          {
            id v36 = (char *)(v22 - 1);
            if (v25 < v22 || v23 >= v22 || v25 != v22) {
              *Swift::String v23 = *(v22 - 1);
            }
            Swift::Int v24 = v35;
            --v22;
          }
          else
          {
            if (v25 != v35 || v23 >= v35) {
              *Swift::String v23 = *v24;
            }
            Swift::Int v38 = v24;
          }
          if (v24 <= v32) {
            break;
          }
          --v23;
          uint64_t v4 = v24;
        }
        while (v22 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v6 >= -7)
  {
    if (a4 != __src || &__src[v8] <= a4) {
      memmove(a4, __src, 8 * v8);
    }
    uint64_t v12 = &a4[v8];
    id v36 = (char *)v12;
    if ((unint64_t)v4 < a3 && v6 >= 8)
    {
      id v13 = a4;
      do
      {
        float v14 = v5;
        float v15 = *v13;
        id v16 = *v4;
        id v17 = v15;
        id v18 = [v16 regionSizeCategory];
        id v19 = [v17 regionSizeCategory];

        if ((uint64_t)v18 >= (uint64_t)v19)
        {
          float v21 = v14;
          if (v14 != v13) {
            *float v14 = *v13;
          }
          id v37 = ++v13;
          float v20 = v4;
        }
        else
        {
          float v20 = v4 + 1;
          float v21 = v14;
          if (v14 < v4 || v14 >= v20 || v14 != v4) {
            *float v14 = *v4;
          }
        }
        uint64_t v5 = v21 + 1;
        if (v13 >= v12) {
          break;
        }
        uint64_t v4 = v20;
      }
      while ((unint64_t)v20 < a3);
      Swift::Int v38 = v5;
    }
LABEL_43:
    sub_1001F939C(&v38, &v37, &v36);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001A5474(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      a2 += OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
      uint64_t v5 = 4;
      do
      {
        uint64_t v6 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v8 = __OFADD__(v6, 1);
          uint64_t v9 = v5 - 3;
          if (v8) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(a1 + 8 * v5);
          swift_retain();
          BOOL v8 = __OFADD__(v6, 1);
          uint64_t v9 = v5 - 3;
          if (v8)
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        if (static UUID.== infix(_:_:)())
        {
          swift_bridgeObjectRelease();
          return v7;
        }
        swift_release();
        ++v5;
      }
      while (v9 != v4);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

id sub_1001A55A4()
{
  if (qword_10035A500 != -1) {
    swift_once();
  }
  unint64_t v0 = qword_1003AC6C8;
  if (qword_1003AC6C8 < 0 || (qword_1003AC6C8 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v1 = (uint64_t)sub_1000F0954(v0);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v1 = qword_1003AC6C8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
  }
  uint64_t v10 = (void *)v1;
  sub_1001A3CD8((uint64_t *)&v10, sub_1001A44C8);
  swift_bridgeObjectRelease();
  unint64_t v2 = (unint64_t)v10;
  swift_bridgeObjectRetain();
  if ((v2 & 0x8000000000000000) != 0 || (Swift::Int v3 = (void *)v2, (v2 & 0x4000000000000000) != 0))
  {
    Swift::Int v3 = sub_1000F0954(v2);
    swift_release();
  }
  uint64_t v10 = v3;
  sub_1001A3CD8((uint64_t *)&v10, sub_1001A3D5C);
  swift_release();
  id v4 = objc_allocWithZone((Class)NIHomeDeviceConfiguration);
  sub_100019E10(0, &qword_100365CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  id v6 = [v4 initWithRegions:isa];

  [v6 setAllowedDevices:6];
  if (qword_10035A5C8 != -1) {
    swift_once();
  }
  [v6 setAnchor:byte_1003AC9E0];
  id v7 = sub_1001F63A0();
  NSString v8 = String._bridgeToObjectiveC()();
  [v7 ulog:40 message:v8];

  [v6 setEnabledGestures:3];
  return v6;
}

BOOL sub_1001A57F8(unsigned __int8 a1)
{
  int v2 = a1;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = 0x6E776F6E6B6E75;
  switch(a1)
  {
    case 1u:
      unint64_t v3 = 0xE900000000000067;
      uint64_t v4 = 0x6E69747465736572;
      break;
    case 2u:
      unint64_t v3 = 0xEB00000000646574;
      uint64_t v4 = 0x726F707075736E75;
      break;
    case 3u:
      unint64_t v3 = 0xEC00000064657A69;
      uint64_t v4 = 0x726F687475616E75;
      break;
    case 4u:
      uint64_t v4 = 0x4F64657265776F70;
      unint64_t v3 = 0xEA00000000006666;
      break;
    case 5u:
      uint64_t v4 = 0x4F64657265776F70;
      unint64_t v3 = 0xE90000000000006ELL;
      break;
    case 6u:
      uint64_t v4 = 0x7463697274736572;
      unint64_t v3 = 0xEA00000000006465;
      break;
    default:
      break;
  }
  unint64_t v5 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x7669746341736920;
  v6._object = (void *)0xEA00000000003D65;
  String.append(_:)(v6);
  BOOL v7 = (v2 - 5) < 2;
  if ((v2 - 5) >= 2) {
    uint64_t v8 = 0x65736C6166;
  }
  else {
    uint64_t v8 = 1702195828;
  }
  if ((v2 - 5) >= 2) {
    unint64_t v9 = 0xE500000000000000;
  }
  else {
    unint64_t v9 = 0xE400000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  id v11 = sub_1001F63A0();
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:v12 message:0x6574617453205442, 0xE900000000000020];
  swift_bridgeObjectRelease();

  return v7;
}

void sub_1001A5A38(void *a1)
{
  swift_getKeyPath();
  swift_getKeyPath();
  unint64_t v5 = a1;
  id v3 = a1;
  uint64_t v4 = v1;
  static Published.subscript.setter();
  if (qword_10035A5E0 != -1) {
    swift_once();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_unknownObjectWeakAssign();

  *(void *)&v4[OBJC_IVAR____TtC17proximitycontrold12RangingProxy_numTokensAdded] = 0;
}

uint64_t sub_1001A5B50()
{
  unint64_t v0 = (void *)_convertErrorToNSError(_:)();
  id v1 = [v0 domain];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      _StringGuts.grow(_:)(42);
      v8._object = (void *)0x80000001002C22A0;
      v8._uint64_t countAndFlagsBits = 0xD000000000000028;
      String.append(_:)(v8);
      sub_10000A38C((uint64_t *)&unk_100365D60);
      _print_unlocked<A, B>(_:_:)();
      id v9 = sub_1001F63A0();
      swift_bridgeObjectRetain();
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v9 ulog:90 message:v10];
      swift_bridgeObjectRelease();

      return 0;
    }
  }
  id v11 = [v0 code];
  if (v11 == (id)-10017)
  {
    id v12 = sub_1001F63A0();
    NSString v13 = String._bridgeToObjectiveC()();
    [v12 ulog:40 message:v13];
    goto LABEL_12;
  }
  if (v11 == (id)-5889)
  {
    id v12 = sub_1001F63A0();
    NSString v13 = String._bridgeToObjectiveC()();
    [v12 ulog:90 message:v13];
LABEL_12:

    return 0;
  }
  _StringGuts.grow(_:)(43);
  v15._uint64_t countAndFlagsBits = 0xD000000000000029;
  v15._object = (void *)0x80000001002C22D0;
  String.append(_:)(v15);
  sub_10000A38C((uint64_t *)&unk_100365D60);
  _print_unlocked<A, B>(_:_:)();
  id v16 = sub_1001F63A0();
  swift_bridgeObjectRetain();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v16 ulog:40 message:v17];
  swift_bridgeObjectRelease();

  return 1;
}

void sub_1001A5E68(void *a1)
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  id v2 = [a1 description];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  id v7 = sub_1001F63A0();
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 ulog:40 message:v8];
  swift_bridgeObjectRelease();

  uint64_t v9 = sub_1001A0F28(a1);
  if (v9)
  {
    uint64_t v10 = v9;
    v11._uint64_t countAndFlagsBits = sub_1001F7514();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    id v12 = sub_1001F63A0();
    swift_bridgeObjectRetain();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v12 ulog:40 message:v13];
    swift_bridgeObjectRelease();

    sub_100149F28(v10);
    swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = sub_10016CB90();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    id v15 = sub_1001F63A0();
    swift_bridgeObjectRetain();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v15 ulog:60 message:v16];
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001A6100()
{
  id v1 = v0;
  _StringGuts.grow(_:)(23);
  v2._object = (void *)0x80000001002C2280;
  v2._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v2);
  sub_10000A38C((uint64_t *)&unk_100365D60);
  _print_unlocked<A, B>(_:_:)();
  id v3 = sub_1001F63A0();
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 ulog:40 message:v4];
  swift_bridgeObjectRelease();

  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v5 = v1;
  static Published.subscript.setter();
  if (qword_10035A5E0 != -1) {
    swift_once();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_unknownObjectWeakAssign();

  *(void *)&v5[OBJC_IVAR____TtC17proximitycontrold12RangingProxy_numTokensAdded] = 0;
  *(unsigned char *)(*(void *)&v5[OBJC_IVAR____TtC17proximitycontrold12RangingProxy__sessionState] + 24) = 0;
  swift_retain();
  sub_100104D78();
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_release();
  sub_10019D2D0();
  sub_1001A1F74();
  char v6 = sub_1001A5B50();
  sub_10019CF5C();
  if (v6) {
    sub_10018BEC8();
  }
  else {
    sub_10018C140();
  }
  return swift_release();
}

uint64_t sub_1001A6368(unint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  swift_unknownObjectWeakInit();
  if (!(a1 >> 62))
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return swift_unknownObjectWeakDestroy();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v6 = result;
  if (!result) {
    goto LABEL_10;
  }
LABEL_3:
  if (v6 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(a1 + 8 * v8 + 32);
      }
      uint64_t v10 = v9;
      ++v8;
      Swift::String v11 = v9;
      sub_1001A3074(&v11, (uint64_t)v12, v2, a2, ObjectType);
    }
    while (v6 != v8);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001A6488(unint64_t a1)
{
  swift_unknownObjectWeakInit();
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    return swift_unknownObjectWeakDestroy();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_19;
  }
LABEL_3:
  uint64_t v23 = v2 - 1;
  if (v2 >= 1)
  {
    swift_beginAccess();
    uint64_t v4 = 0;
    if ((a1 & 0xC000000000000001) == 0) {
      goto LABEL_6;
    }
LABEL_5:
    for (id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(); ; id i = *(id *)(a1 + 8 * v4 + 32))
    {
      uint64_t v6 = i;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong && (uint64_t v8 = (void *)Strong, v9 = sub_1001A0F28(v6), v8, v9))
      {
        uint64_t v10 = NINearbyObject.distance.getter();
        if ((v10 & 0x100000000) == 0)
        {
          unsigned int v11 = v10;
          swift_retain();
          sub_1001BD190(v11);
          swift_release();
        }
        sub_10014A374(v9);
        id v12 = [v6 distanceMeasurementQuality];
        uint64_t v13 = v9 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_lastDistanceMeasurementQuality;
        *(void *)uint64_t v13 = v12;
        *(unsigned char *)(v13 + 8) = 0;

        swift_release();
      }
      else
      {
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        v14._uint64_t countAndFlagsBits = sub_10016CB90();
        String.append(_:)(v14);
        swift_bridgeObjectRelease();
        type metadata accessor for RangingProxy();
        sub_10000A38C(&qword_10036AF78);
        uint64_t v15 = String.init<A>(describing:)();
        sub_10016B950(60, 0xE100000000000000, v15, v16);
        if ((v17 & 1) == 0)
        {
          String.subscript.getter();
          swift_bridgeObjectRelease();
          static String._fromSubstring(_:)();
          swift_bridgeObjectRelease();
        }
        id v18 = objc_allocWithZone((Class)CULogHandle);
        NSString v19 = String._bridgeToObjectiveC()();
        NSString v20 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v21 = [v18 initWithSubsystem:v19 category:v20];

        swift_bridgeObjectRetain();
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v21 ulog:60 message:v22];

        swift_bridgeObjectRelease();
      }
      if (v23 == v4) {
        break;
      }
      ++v4;
      if ((a1 & 0xC000000000000001) != 0) {
        goto LABEL_5;
      }
LABEL_6:
      ;
    }
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001A6810(char a1)
{
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  if (a1) {
    uint64_t v2 = 1702195828;
  }
  else {
    uint64_t v2 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v3 = 0xE400000000000000;
  }
  else {
    unint64_t v3 = 0xE500000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  id v5 = sub_1001F63A0();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 ulog:40 message:v6];
  swift_bridgeObjectRelease();

  if (qword_10035A5C0 != -1) {
    swift_once();
  }
  *((unsigned char *)off_10036AE10 + 24) = a1 & 1;
  swift_retain();
  sub_100104B88();
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_release();
  return PassthroughSubject.send(_:)();
}

void sub_1001A69AC(void *a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  id v7 = *(void **)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v12 = (char *)&v72 - v11;
  uint64_t v13 = sub_1001A0F28(a1);
  if (v13)
  {
    uint64_t v14 = v13;
    if (sub_1000299B8((uint64_t)[a1 distanceMeasurementQuality], (uint64_t)&off_10031ED38))
    {
      uint64_t v73 = v7;
      v74._uint64_t countAndFlagsBits = 0;
      v74._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(20);
      uint64_t v15 = sub_1001F7514();
      char v17 = v16;
      swift_bridgeObjectRelease();
      v74._uint64_t countAndFlagsBits = v15;
      v74._object = v17;
      v18._uint64_t countAndFlagsBits = 0x204E4F4947455220;
      v18._object = (void *)0xEF20455441445055;
      String.append(_:)(v18);
      v19._uint64_t countAndFlagsBits = sub_10016CB90();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._uint64_t countAndFlagsBits = 32;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      Swift::String v75 = v74;
      if (a3)
      {
        v74._uint64_t countAndFlagsBits = 0x3D76657270;
        v74._object = (void *)0xE500000000000000;
        id v21 = a3;
        id v22 = [v21 name];
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v25 = v24;

        v26._uint64_t countAndFlagsBits = v23;
        v26._object = v25;
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._uint64_t countAndFlagsBits = 32;
        v27._object = (void *)0xE100000000000000;
        String.append(_:)(v27);
        String.append(_:)(v74);

        swift_bridgeObjectRelease();
      }
      if (a2)
      {
        v74._uint64_t countAndFlagsBits = 0x3D72727563;
        v74._object = (void *)0xE500000000000000;
        id v28 = a2;
        id v29 = [v28 name];
        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        float v32 = v31;

        v33._uint64_t countAndFlagsBits = v30;
        v33._object = v32;
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._uint64_t countAndFlagsBits = 32;
        v34._object = (void *)0xE100000000000000;
        String.append(_:)(v34);
        String.append(_:)(v74);

        swift_bridgeObjectRelease();
      }
      id v35 = sub_1001F63A0();
      swift_bridgeObjectRetain();
      NSString v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v35 ulog:40 message:v36];
      swift_bridgeObjectRelease();

      uint64_t v37 = mach_continuous_time();
      uint64_t v38 = v14 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_regionTimestamp;
      *(void *)uint64_t v38 = v37;
      *(unsigned char *)(v38 + 8) = 0;
      if (a2) {
        char v39 = sub_1000797EC();
      }
      else {
        char v39 = 5;
      }
      swift_retain();
      sub_1001BD544(v39);
      swift_release();
      if (qword_10035A648 != -1) {
        swift_once();
      }
      if (*(unsigned char *)(qword_1003ACB70 + 32) != 1)
      {
        uint64_t v65 = *(void *)(qword_1003ACB70 + 24);
        uint64_t v66 = v14 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_regionResolutionSignpostPostedInstant;
        if ((*(unsigned char *)(v14
                       + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_regionResolutionSignpostPostedInstant
                       + 8) & 1) != 0
          || *(void *)v66 != v65)
        {
          static OSSignpostID.exclusive.getter();
          static os_signpost_type_t.event.getter();
          if (qword_10035A528 != -1) {
            swift_once();
          }
          uint64_t v67 = (void *)qword_1003AC758;
          sub_10000A38C((uint64_t *)&unk_10036AF60);
          uint64_t v68 = swift_allocObject();
          *(_OWORD *)(v68 + 16) = xmmword_10028FC10;
          *(void *)(v68 + 56) = &type metadata for String;
          unint64_t v69 = sub_100029904();
          *(void *)(v68 + 32) = 0xD00000000000002DLL;
          *(void *)(v68 + 40) = 0x80000001002C2180;
          *(void *)(v68 + 96) = &type metadata for UInt64;
          *(void *)(v68 + 104) = &protocol witness table for UInt64;
          *(void *)(v68 + 64) = v69;
          *(void *)(v68 + 72) = v65;
          id v70 = v67;
          static OSSignpostID.exclusive.getter();
          os_signpost(_:dso:log:name:signpostID:_:_:)();

          swift_bridgeObjectRelease();
          BOOL v71 = (void (*)(char *, uint64_t))v73[1];
          v71(v10, v6);
          v71(v12, v6);
          *(void *)uint64_t v66 = v65;
          *(unsigned char *)(v66 + 8) = 0;
        }
      }
      swift_release();
    }
    else
    {
      v75._uint64_t countAndFlagsBits = 0;
      v75._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      v75._uint64_t countAndFlagsBits = 0xD000000000000020;
      v75._object = (void *)0x80000001002C2150;
      id v58 = [a1 description];
      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v61 = v60;

      v62._uint64_t countAndFlagsBits = v59;
      v62._object = v61;
      String.append(_:)(v62);
      swift_bridgeObjectRelease();
      id v63 = sub_1001F63A0();
      swift_bridgeObjectRetain();
      uint64_t v73 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v63 ulog:40 message:v73];
      swift_bridgeObjectRelease();
      swift_release();

      BOOL v64 = v73;
    }
  }
  else
  {
    v75._uint64_t countAndFlagsBits = 0;
    v75._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v75._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v75._object = (void *)0x80000001002C2120;
    v40._uint64_t countAndFlagsBits = sub_10016CB90();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._uint64_t countAndFlagsBits = 8238;
    v41._object = (void *)0xE200000000000000;
    String.append(_:)(v41);
    if (a3)
    {
      v74._uint64_t countAndFlagsBits = 0x3D76657270;
      v74._object = (void *)0xE500000000000000;
      id v42 = a3;
      id v43 = [v42 name];
      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v46 = v45;

      v47._uint64_t countAndFlagsBits = v44;
      v47._object = v46;
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      v48._uint64_t countAndFlagsBits = 32;
      v48._object = (void *)0xE100000000000000;
      String.append(_:)(v48);
      String.append(_:)(v74);

      swift_bridgeObjectRelease();
    }
    if (a2)
    {
      v74._uint64_t countAndFlagsBits = 0x3D72727563;
      v74._object = (void *)0xE500000000000000;
      id v49 = a2;
      id v50 = [v49 name];
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v53 = v52;

      v54._uint64_t countAndFlagsBits = v51;
      v54._object = v53;
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      v55._uint64_t countAndFlagsBits = 32;
      v55._object = (void *)0xE100000000000000;
      String.append(_:)(v55);
      String.append(_:)(v74);

      swift_bridgeObjectRelease();
    }
    id v56 = sub_1001F63A0();
    swift_bridgeObjectRetain();
    NSString v57 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v56 ulog:60 message:v57];
    swift_bridgeObjectRelease();
  }
}

void sub_1001A71C0()
{
  if (qword_10035A5C0 != -1) {
    swift_once();
  }
  *((unsigned char *)off_10036AE10 + 24) = 1;
  swift_retain();
  sub_100104B88();
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_release();
  char v0 = sub_1001A17F4();
  id v1 = sub_1001F63A0();
  if ((v0 & 1) == 0)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    [v1 ulog:40 message:v3];

    return;
  }
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  sub_1001A04D4();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = (void *)Strong;
    uint64_t v6 = *(void *)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent_state) + 16);
    swift_retain();

    [*(id *)(v6 + 32) lock];
    swift_beginAccess();
    uint64_t v7 = swift_bridgeObjectRetain();
    unint64_t v8 = (unint64_t)sub_1000F06FC(v7);
    swift_bridgeObjectRelease();
    [*(id *)(v6 + 32) unlock];
    swift_release();
    if ((v8 & 0x8000000000000000) != 0 || (v8 & 0x4000000000000000) != 0)
    {
      swift_retain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      if (v9) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v9 = *(void *)(v8 + 16);
      swift_retain();
      if (v9)
      {
LABEL_11:
        if (v9 >= 1)
        {
          for (uint64_t i = 0; i != v9; ++i)
          {
            if ((v8 & 0xC000000000000001) != 0) {
              specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              swift_retain();
            }
            sub_100040D9C();
            swift_release();
          }
          goto LABEL_18;
        }
        __break(1u);
        return;
      }
    }
LABEL_18:
    swift_release_n();
  }
}

uint64_t sub_1001A7500(uint64_t a1)
{
  uint64_t v2 = v1;
  _StringGuts.grow(_:)(33);
  v4._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v4._object = (void *)0x80000001002C2010;
  String.append(_:)(v4);
  type metadata accessor for NISessionSuspensionReason(0);
  _print_unlocked<A, B>(_:_:)();
  id v5 = sub_1001F63A0();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 ulog:40 message:v6];
  swift_bridgeObjectRelease();

  *(unsigned char *)(*(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold12RangingProxy__sessionState) + 24) = 3;
  swift_retain();
  sub_100104D78();
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_release();
  sub_10019D2D0();
  if (a1 == 2)
  {
    id v7 = sub_1001F63A0();
    NSString v8 = String._bridgeToObjectiveC()();
    [v7 ulog:40 message:v8];

    if (qword_10035A5C0 != -1) {
      swift_once();
    }
    *((unsigned char *)off_10036AE10 + 24) = 0;
    swift_retain();
    sub_100104B88();
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();
  }
  sub_10019CF5C();
  sub_10018C140();
  swift_release();
  return sub_1001A1F74();
}

uint64_t sub_1001A77F4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A782C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001A7864()
{
  sub_1001A1754(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001A786C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001A787C()
{
  return swift_release();
}

uint64_t sub_1001A788C(uint64_t a1, uint64_t a2)
{
  return sub_10019E534(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

char *sub_1001A7894(void *a1)
{
  return sub_10019F904(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001A789C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A78D4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1001A7914()
{
  sub_10019E874(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void sub_1001A7920()
{
}

uint64_t sub_1001A7928(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Retrier.RetryIntervalPolicy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1001A798C(uint64_t a1@<X8>)
{
}

unint64_t sub_1001A7994()
{
  unint64_t result = qword_10036B040;
  if (!qword_10036B040)
  {
    sub_10000A3D0(&qword_10036B028);
    sub_1001A7A38(&qword_10036B048, type metadata accessor for NIMotionActivityState);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B040);
  }
  return result;
}

uint64_t sub_1001A7A38(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001A7A80()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 84, 7);
}

uint64_t sub_1001A7AE0@<X0>(char *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10003A038(*a1, *(uint64_t (**)(char *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void **)(v2 + 64), *(void **)(v2 + 72), *(_DWORD *)(v2 + 80));
  *a2 = result & 1;
  return result;
}

BOOL sub_1001A7B48(uint64_t a1)
{
  return sub_1001A7B88(a1, (uint64_t *)&unk_10036C0A0, (void (*)(void *, void *))sub_10000D7E8);
}

BOOL sub_1001A7B68(uint64_t a1)
{
  return sub_1001A7B88(a1, &qword_10035B618, (void (*)(void *, void *))sub_10000D7E8);
}

BOOL sub_1001A7B88(uint64_t a1, uint64_t *a2, void (*a3)(void *, void *))
{
  sub_10000D728(a1, (uint64_t)v13, a2);
  if (v13[3])
  {
    a3(v13, v14);
    uint64_t v6 = v15;
    uint64_t v5 = v16;
    sub_10000D6E4(v14, v15);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v6);
    uint64_t v8 = sub_1001A7C6C();
    uint64_t v9 = sub_1001C8154(v8, v7);
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void *)(v9 + 16);
    swift_release();
    BOOL v11 = v10 != 0;
    sub_10000CC5C((uint64_t)v14);
  }
  else
  {
    sub_10000D78C((uint64_t)v13, a2);
    return 0;
  }
  return v11;
}

uint64_t sub_1001A7C6C()
{
  sub_10000A38C(&qword_10035D8E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028FC10;
  id v2 = [v0 identifier];
  if (v2)
  {
    NSString v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  *(void *)(inited + 32) = v4;
  *(void *)(inited + 40) = v6;
  id v7 = [v0 idsDeviceID];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    *(void *)(inited + 48) = v9;
    *(void *)(inited + 56) = v11;
    if (v6) {
      goto LABEL_6;
    }
LABEL_11:
    id v12 = (char *)&_swiftEmptyArrayStorage;
    if (!v11) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  uint64_t v9 = 0;
  uint64_t v11 = 0;
  *(void *)(inited + 48) = 0;
  *(void *)(inited + 56) = 0;
  if (!v6) {
    goto LABEL_11;
  }
LABEL_6:
  swift_bridgeObjectRetain();
  id v12 = sub_10008892C(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  unint64_t v14 = *((void *)v12 + 2);
  unint64_t v13 = *((void *)v12 + 3);
  if (v14 >= v13 >> 1) {
    id v12 = sub_10008892C((char *)(v13 > 1), v14 + 1, 1, v12);
  }
  *((void *)v12 + 2) = v14 + 1;
  uint64_t v15 = &v12[16 * v14];
  *((void *)v15 + 4) = v4;
  *((void *)v15 + 5) = v6;
  if (v11)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v12 = sub_10008892C(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v17 = *((void *)v12 + 2);
    unint64_t v16 = *((void *)v12 + 3);
    if (v17 >= v16 >> 1) {
      id v12 = sub_10008892C((char *)(v16 > 1), v17 + 1, 1, v12);
    }
    *((void *)v12 + 2) = v17 + 1;
    Swift::String v18 = &v12[16 * v17];
    *((void *)v18 + 4) = v9;
    *((void *)v18 + 5) = v11;
  }
LABEL_17:
  swift_release();
  uint64_t v19 = sub_100038508((uint64_t)v12);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_1001A7E58(void *a1)
{
  id v2 = v1;
  uint64_t result = (uint64_t)[v2 identifier];
  if (result)
  {

    id v5 = [v2 nearbyAuthTag];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v9 = v8;

      id v10 = [v2 btAddressData];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v14 = v13;

        Class isa = Data._bridgeToObjectiveC()().super.isa;
        Class v16 = Data._bridgeToObjectiveC()().super.isa;
        id v24 = 0;
        unsigned __int8 v17 = [a1 verifyAuthTag:isa data:v16 type:2 error:&v24];

        if (v17)
        {
          id v18 = v24;
          sub_10000DBEC(v12, v14);
          sub_10000DBEC(v7, v9);
          return 1;
        }
        id v19 = v24;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10000DBEC(v7, v9);
        sub_10000DBEC(v12, v14);
        swift_errorRelease();
      }
      else
      {
        sub_10000DBEC(v7, v9);
      }
    }
    uint64_t v20 = sub_1000D215C();
    uint64_t v21 = sub_1001A7C6C();
    uint64_t v22 = sub_1001C8154(v21, v20);
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void *)(v22 + 16);
    swift_release();
    return v23 != 0;
  }
  return result;
}

uint64_t sub_1001A8058(void *a1)
{
  if (!a1) {
    goto LABEL_9;
  }
  id v2 = a1;
  id v3 = [v1 identifier];
  if (!v3)
  {

LABEL_9:
    char v13 = 0;
    return v13 & 1;
  }
  uint64_t v4 = v3;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  id v8 = [v2 identifier];
  if (!v8)
  {

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  unint64_t v9 = v8;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  if (v5 == v10 && v7 == v12) {
    char v13 = 1;
  }
  else {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v13 & 1;
}

uint64_t sub_1001A8158()
{
  return sub_1001A7C6C();
}

uint64_t sub_1001A817C(void *a1)
{
  return sub_1001A8058(a1) & 1;
}

BOOL sub_1001A81A4(uint64_t a1)
{
  return sub_1001A7B88(a1, (uint64_t *)&unk_10036C0A0, (void (*)(void *, void *))sub_10000D7E8);
}

BOOL sub_1001A81E8(uint64_t a1)
{
  return sub_1001A7B88(a1, &qword_10035B618, (void (*)(void *, void *))sub_10000D7E8);
}

void *sub_1001A822C(void *result)
{
  if (result)
  {
    id v1 = result;
    uint64_t v2 = sub_10024DF10();
    uint64_t v3 = sub_1001A7C6C();
    uint64_t v4 = sub_1001C8154(v3, v2);
    swift_bridgeObjectRelease();

    uint64_t v5 = *(void *)(v4 + 16);
    swift_release();
    return (void *)(v5 != 0);
  }
  return result;
}

uint64_t sub_1001A82A8(void *a1)
{
  return sub_1001A7E58(a1) & 1;
}

uint64_t sub_1001A82D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_1001A8324()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t sub_1001A8358()
{
  return sub_1001A90D8(&qword_1003680F0, &qword_1003680F8, (uint64_t (*)(uint64_t))sub_1000F06FC, 0, (void (*)(void))type metadata accessor for TrackedToken);
}

uint64_t sub_1001A8398()
{
  uint64_t v1 = v0;
  uint64_t v49 = sub_10000A38C((uint64_t *)&unk_100368060);
  sub_10000A38C((uint64_t *)&unk_100368100);
  String.init<A>(describing:)();
  id v2 = objc_allocWithZone((Class)CULogHandle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithSubsystem:v3 category:v4];

  NSString v6 = String._bridgeToObjectiveC()();
  [v5 ulog:40 message:v6];

  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 64) + 16))
  {
    uint64_t v8 = swift_bridgeObjectRetain();
    int64_t v9 = (int64_t)sub_1000F06FC(v8);
    swift_bridgeObjectRelease();
    [*(id *)(v1 + 32) lock];
    *(void *)(v1 + 64) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    [*(id *)(v1 + 32) unlock];
    if (v9 < 0 || (v9 & 0x4000000000000000) != 0) {
      goto LABEL_52;
    }
    uint64_t v10 = *(void *)(v9 + 16);
    swift_retain();
    if (v10)
    {
      while (1)
      {
        unint64_t v11 = 0;
        unint64_t v12 = v9 & 0xC000000000000001;
        char v39 = (void *)(v9 + 32);
        unint64_t v40 = v9 & 0xC000000000000001;
        uint64_t v41 = v10;
        id v42 = (void *)v9;
        uint64_t v43 = v1;
        while (1)
        {
          if (v12)
          {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
            if (__OFADD__(v11, 1)) {
              goto LABEL_49;
            }
            uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            ++v11;
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0) {
              goto LABEL_50;
            }
            if (v11 >= *(void *)(v9 + 16)) {
              goto LABEL_51;
            }
            uint64_t v19 = v39[v11];
            swift_retain();
            ++v11;
            swift_retain();
            uint64_t v18 = v19;
          }
          uint64_t v48 = v18;
          if (*(unsigned char *)(v1 + 24) == 1) {
            break;
          }
LABEL_7:
          swift_retain();
          PassthroughSubject.send(_:)();
          swift_release();
          swift_release();
          swift_release();
          if (v11 == v10) {
            goto LABEL_53;
          }
        }
        uint64_t v46 = type metadata accessor for HandoffDevice();
        Swift::String v47 = &off_100320960;
        v45[0] = v18;
        sub_10000D6E4(v45, v46);
        swift_retain();
        uint64_t v20 = sub_100043F8C();
        if ((v20 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          __CocoaSet.makeIterator()();
          type metadata accessor for AnyCancellable();
          sub_1001AB264(&qword_1003677E0, 255, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
          Set.Iterator.init(_cocoa:)();
          uint64_t v21 = v49;
          uint64_t v22 = v50;
          uint64_t v23 = v51;
          int64_t v9 = (int64_t)v52;
          unint64_t v24 = v53;
        }
        else
        {
          uint64_t v25 = -1 << *(unsigned char *)(v20 + 32);
          uint64_t v22 = v20 + 56;
          uint64_t v23 = ~v25;
          uint64_t v26 = -v25;
          uint64_t v27 = v26 < 64 ? ~(-1 << v26) : -1;
          unint64_t v24 = v27 & *(void *)(v20 + 56);
          int64_t v9 = 0;
          uint64_t v21 = swift_bridgeObjectRetain();
        }
        uint64_t v1 = v21 & 0x7FFFFFFFFFFFFFFFLL;
        int64_t v28 = (unint64_t)(v23 + 64) >> 6;
        if (v21 < 0) {
          break;
        }
LABEL_22:
        if (v24)
        {
          uint64_t v29 = (v24 - 1) & v24;
          unint64_t v30 = __clz(__rbit64(v24)) | (v9 << 6);
          int64_t v31 = v9;
          goto LABEL_45;
        }
        int64_t v33 = v9 + 1;
        if (!__OFADD__(v9, 1))
        {
          if (v33 < v28)
          {
            unint64_t v34 = *(void *)(v22 + 8 * v33);
            int64_t v31 = v9 + 1;
            if (v34) {
              goto LABEL_44;
            }
            int64_t v31 = v9 + 2;
            if (v9 + 2 < v28)
            {
              unint64_t v34 = *(void *)(v22 + 8 * v31);
              if (v34) {
                goto LABEL_44;
              }
              int64_t v31 = v9 + 3;
              if (v9 + 3 < v28)
              {
                unint64_t v34 = *(void *)(v22 + 8 * v31);
                if (v34) {
                  goto LABEL_44;
                }
                int64_t v31 = v9 + 4;
                if (v9 + 4 < v28)
                {
                  unint64_t v34 = *(void *)(v22 + 8 * v31);
                  if (v34) {
                    goto LABEL_44;
                  }
                  int64_t v31 = v9 + 5;
                  if (v9 + 5 < v28)
                  {
                    unint64_t v34 = *(void *)(v22 + 8 * v31);
                    if (v34) {
                      goto LABEL_44;
                    }
                    int64_t v31 = v9 + 6;
                    if (v9 + 6 < v28)
                    {
                      unint64_t v34 = *(void *)(v22 + 8 * v31);
                      if (!v34)
                      {
                        id v35 = (char *)(v9 + 7);
                        do
                        {
                          if ((char *)v28 == v35) {
                            goto LABEL_6;
                          }
                          unint64_t v34 = *(void *)(v22 + 8 * (void)v35++);
                        }
                        while (!v34);
                        int64_t v31 = (int64_t)(v35 - 1);
                      }
LABEL_44:
                      uint64_t v29 = (v34 - 1) & v34;
                      unint64_t v30 = __clz(__rbit64(v34)) + (v31 << 6);
LABEL_45:
                      uint64_t v36 = *(void *)(*(void *)(v21 + 48) + 8 * v30);
                      swift_retain();
                      if (v36) {
                        goto LABEL_46;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_6:
          sub_10002E7C4();
          swift_bridgeObjectRelease();
          uint64_t v13 = v46;
          unint64_t v14 = v47;
          sub_100071968((uint64_t)v45, v46);
          uint64_t v15 = (void (*)(void *, void))((uint64_t (*)(void *, uint64_t, _UNKNOWN **))v14[3])(v44, v13, v14);
          unsigned __int8 v17 = v16;
          swift_bridgeObjectRelease();
          *unsigned __int8 v17 = &_swiftEmptySetSingleton;
          v15(v44, 0);
          sub_10000CC5C((uint64_t)v45);
          int64_t v9 = (int64_t)v42;
          uint64_t v1 = v43;
          unint64_t v12 = v40;
          uint64_t v10 = v41;
          goto LABEL_7;
        }
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        swift_retain();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
        if (!v10) {
          goto LABEL_53;
        }
      }
      while (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for AnyCancellable();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v32 = v44[0];
        swift_unknownObjectRelease();
        int64_t v31 = v9;
        uint64_t v29 = v24;
        if (!v32) {
          break;
        }
LABEL_46:
        AnyCancellable.cancel()();
        swift_release();
        int64_t v9 = v31;
        unint64_t v24 = v29;
        if ((v21 & 0x8000000000000000) == 0) {
          goto LABEL_22;
        }
      }
      goto LABEL_6;
    }
LABEL_53:
    swift_release_n();
    swift_retain();
    uint64_t v37 = swift_bridgeObjectRetain();
    uint64_t v38 = sub_1000F06FC(v37);
    swift_bridgeObjectRelease();
    v45[0] = v38;
    PassthroughSubject.send(_:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1001A89B4()
{
  return sub_1001A8A24(&qword_100365080, qword_10036B460, (uint64_t (*)(uint64_t))sub_1000F0808, &qword_1003650B0, (int64_t)HMAccessory_ptr);
}

uint64_t sub_1001A89EC()
{
  return sub_1001A8A24(&qword_100365D20, (uint64_t *)&unk_100368200, (uint64_t (*)(uint64_t))sub_1000F0808, (unint64_t *)&unk_100365C90, (int64_t)CBDevice_ptr);
}

uint64_t sub_1001A8A24(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, int64_t a5)
{
  uint64_t v10 = v5;
  uint64_t v68 = sub_10000A38C(a1);
  sub_10000A38C(a2);
  String.init<A>(describing:)();
  id v11 = objc_allocWithZone((Class)CULogHandle);
  NSString v12 = String._bridgeToObjectiveC()();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v11 initWithSubsystem:v12 category:v13];

  NSString v15 = String._bridgeToObjectiveC()();
  [v14 ulog:40 message:v15];

  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(v10 + 64) + 16))
  {
    uint64_t v17 = swift_bridgeObjectRetain();
    uint64_t v18 = a3(v17);
    swift_bridgeObjectRelease();
    [*(id *)(v10 + 32) lock];
    *(void *)(v10 + 64) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    [*(id *)(v10 + 32) unlock];
    uint64_t v52 = a3;
    if (v18 < 0 || (v18 & 0x4000000000000000) != 0) {
      goto LABEL_55;
    }
    uint64_t v19 = *(void *)(v18 + 16);
    swift_retain();
    if (v19)
    {
      while (1)
      {
        unint64_t v20 = 0;
        unint64_t v21 = v18 & 0xC000000000000001;
        uint64_t v59 = v18 + 32;
        int64_t v57 = a5;
        uint64_t v58 = v10;
        unint64_t v53 = v18 & 0xC000000000000001;
        uint64_t v54 = v19;
        uint64_t v55 = v18;
        id v56 = a4;
        while (1)
        {
          if (v21)
          {
            uint64_t v23 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            if (__OFADD__(v20, 1)) {
              goto LABEL_52;
            }
            id v22 = (id)v23;
            unint64_t v24 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            ++v20;
          }
          else
          {
            if ((v20 & 0x8000000000000000) != 0) {
              goto LABEL_53;
            }
            if (v20 >= *(void *)(v18 + 16)) {
              goto LABEL_54;
            }
            id v25 = *(id *)(v59 + 8 * v20++);
            id v22 = v25;
            unint64_t v24 = v22;
          }
          id v67 = v24;
          if (*(unsigned char *)(v10 + 24) == 1) {
            break;
          }
LABEL_8:
          swift_retain();
          PassthroughSubject.send(_:)();
          swift_release();

          if (v20 == v19) {
            goto LABEL_56;
          }
        }
        id v60 = v22;
        uint64_t v63 = (uint64_t)v24;
        sub_100019E10(0, a4);
        id v26 = v24;
        sub_10000A38C(&qword_1003677D0);
        if (!swift_dynamicCast())
        {
          uint64_t v62 = 0;
          memset(v61, 0, sizeof(v61));
          sub_1001AB204((uint64_t)v61);
          goto LABEL_7;
        }
        sub_10000D7E8(v61, (uint64_t)v64);
        uint64_t v27 = v65;
        uint64_t v28 = v66;
        sub_10000D6E4(v64, v65);
        uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v27, v28);
        if ((v29 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          __CocoaSet.makeIterator()();
          type metadata accessor for AnyCancellable();
          sub_1001AB264(&qword_1003677E0, 255, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
          Set.Iterator.init(_cocoa:)();
          uint64_t v18 = v68;
          a4 = v69;
          uint64_t v30 = v70;
          uint64_t v31 = v71;
          unint64_t v32 = v72;
        }
        else
        {
          uint64_t v33 = -1 << *(unsigned char *)(v29 + 32);
          a4 = (unint64_t *)(v29 + 56);
          uint64_t v30 = ~v33;
          uint64_t v34 = -v33;
          if (v34 < 64) {
            uint64_t v35 = ~(-1 << v34);
          }
          else {
            uint64_t v35 = -1;
          }
          unint64_t v32 = v35 & *(void *)(v29 + 56);
          uint64_t v31 = 0;
          uint64_t v18 = swift_bridgeObjectRetain();
        }
        uint64_t v10 = v18 & 0x7FFFFFFFFFFFFFFFLL;
        a5 = (unint64_t)(v30 + 64) >> 6;
        if (v18 < 0)
        {
          while (1)
          {
            uint64_t v39 = __CocoaSet.Iterator.next()();
            if (!v39) {
              break;
            }
            uint64_t v63 = v39;
            type metadata accessor for AnyCancellable();
            swift_unknownObjectRetain();
            swift_dynamicCast();
            uint64_t v40 = *(void *)&v61[0];
            swift_unknownObjectRelease();
            uint64_t v38 = v31;
            uint64_t v36 = v32;
            if (!v40) {
              break;
            }
LABEL_48:
            AnyCancellable.cancel()();
            swift_release();
            uint64_t v31 = v38;
            unint64_t v32 = v36;
            if ((v18 & 0x8000000000000000) == 0) {
              goto LABEL_24;
            }
          }
LABEL_50:
          sub_10002E7C4();
          swift_bridgeObjectRelease();
          uint64_t v45 = v65;
          uint64_t v46 = v66;
          sub_100071968((uint64_t)v64, v65);
          Swift::String v47 = (void (*)(long long *, void))(*(uint64_t (**)(long long *, uint64_t, uint64_t))(v46 + 24))(v61, v45, v46);
          uint64_t v49 = v48;
          swift_bridgeObjectRelease();
          *uint64_t v49 = &_swiftEmptySetSingleton;
          v47(v61, 0);
          sub_10000CC5C((uint64_t)v64);
          a5 = v57;
          uint64_t v10 = v58;
          uint64_t v18 = v55;
          a4 = v56;
          unint64_t v21 = v53;
          uint64_t v19 = v54;
LABEL_7:
          id v22 = v60;
          goto LABEL_8;
        }
LABEL_24:
        if (v32) {
          break;
        }
        int64_t v41 = v31 + 1;
        if (!__OFADD__(v31, 1))
        {
          if (v41 >= a5) {
            goto LABEL_50;
          }
          unint64_t v42 = a4[v41];
          uint64_t v38 = v31 + 1;
          if (!v42)
          {
            uint64_t v38 = v31 + 2;
            if (v31 + 2 >= a5) {
              goto LABEL_50;
            }
            unint64_t v42 = a4[v38];
            if (!v42)
            {
              uint64_t v38 = v31 + 3;
              if (v31 + 3 >= a5) {
                goto LABEL_50;
              }
              unint64_t v42 = a4[v38];
              if (!v42)
              {
                uint64_t v38 = v31 + 4;
                if (v31 + 4 >= a5) {
                  goto LABEL_50;
                }
                unint64_t v42 = a4[v38];
                if (!v42)
                {
                  uint64_t v38 = v31 + 5;
                  if (v31 + 5 >= a5) {
                    goto LABEL_50;
                  }
                  unint64_t v42 = a4[v38];
                  if (!v42)
                  {
                    uint64_t v38 = v31 + 6;
                    if (v31 + 6 >= a5) {
                      goto LABEL_50;
                    }
                    unint64_t v42 = a4[v38];
                    if (!v42)
                    {
                      uint64_t v43 = v31 + 7;
                      do
                      {
                        if (a5 == v43) {
                          goto LABEL_50;
                        }
                        unint64_t v42 = a4[v43++];
                      }
                      while (!v42);
                      uint64_t v38 = v43 - 1;
                    }
                  }
                }
              }
            }
          }
          uint64_t v36 = (v42 - 1) & v42;
          unint64_t v37 = __clz(__rbit64(v42)) + (v38 << 6);
          goto LABEL_47;
        }
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        swift_retain();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        if (!v19) {
          goto LABEL_56;
        }
      }
      uint64_t v36 = (v32 - 1) & v32;
      unint64_t v37 = __clz(__rbit64(v32)) | (v31 << 6);
      uint64_t v38 = v31;
LABEL_47:
      uint64_t v44 = *(void *)(*(void *)(v18 + 48) + 8 * v37);
      swift_retain();
      if (v44) {
        goto LABEL_48;
      }
      goto LABEL_50;
    }
LABEL_56:
    swift_release_n();
    swift_retain();
    uint64_t v50 = swift_bridgeObjectRetain();
    uint64_t v51 = v52(v50);
    swift_bridgeObjectRelease();
    v64[0] = v51;
    PassthroughSubject.send(_:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1001A90A0()
{
  return sub_1001A8A24(&qword_100369930, &qword_10036B458, (uint64_t (*)(uint64_t))sub_1000F0808, &qword_100369900, (int64_t)IDSDevice_ptr);
}

uint64_t sub_1001A90D8(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t a4, void (*i)(void))
{
  uint64_t v10 = v5;
  uint64_t v64 = sub_10000A38C(a1);
  sub_10000A38C(a2);
  String.init<A>(describing:)();
  id v11 = objc_allocWithZone((Class)CULogHandle);
  NSString v12 = String._bridgeToObjectiveC()();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v11 initWithSubsystem:v12 category:v13];

  NSString v15 = String._bridgeToObjectiveC()();
  [v14 ulog:40 message:v15];

  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(v10 + 64) + 16))
  {
    uint64_t v17 = swift_bridgeObjectRetain();
    uint64_t v18 = a3(v17);
    swift_bridgeObjectRelease();
    [*(id *)(v10 + 32) lock];
    *(void *)(v10 + 64) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    [*(id *)(v10 + 32) unlock];
    uint64_t v48 = a3;
    if (v18 < 0 || (v18 & 0x4000000000000000) != 0) {
      goto LABEL_54;
    }
    uint64_t v19 = *(void *)(v18 + 16);
    swift_retain();
    if (v19)
    {
      while (1)
      {
        unint64_t v20 = 0;
        unint64_t v21 = v18 & 0xC000000000000001;
        uint64_t v55 = v18 + 32;
        unint64_t v53 = i;
        uint64_t v54 = v10;
        unint64_t v49 = v18 & 0xC000000000000001;
        uint64_t v50 = v19;
        uint64_t v51 = v18;
        unint64_t v52 = a4;
        while (1)
        {
          if (v21)
          {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
            if (__OFADD__(v20, 1)) {
              goto LABEL_51;
            }
            uint64_t v22 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            ++v20;
          }
          else
          {
            if ((v20 & 0x8000000000000000) != 0) {
              goto LABEL_52;
            }
            if (v20 >= *(void *)(v18 + 16)) {
              goto LABEL_53;
            }
            uint64_t v23 = *(void *)(v55 + 8 * v20);
            swift_retain();
            ++v20;
            swift_retain();
            uint64_t v22 = v23;
          }
          uint64_t v63 = v22;
          if (*(unsigned char *)(v10 + 24) == 1) {
            break;
          }
LABEL_7:
          swift_retain();
          PassthroughSubject.send(_:)();
          swift_release();
          swift_release();
          swift_release();
          if (v20 == v19) {
            goto LABEL_55;
          }
        }
        uint64_t v59 = v22;
        i(a4);
        swift_retain();
        sub_10000A38C(&qword_1003677D0);
        if (!swift_dynamicCast()) {
          break;
        }
        sub_10000D7E8(v57, (uint64_t)v60);
        uint64_t v24 = v61;
        uint64_t v25 = v62;
        sub_10000D6E4(v60, v61);
        uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
        if ((v26 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          __CocoaSet.makeIterator()();
          type metadata accessor for AnyCancellable();
          sub_1001AB264(&qword_1003677E0, 255, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
          Set.Iterator.init(_cocoa:)();
          uint64_t v18 = v64;
          uint64_t v56 = v65;
          uint64_t v27 = v66;
          uint64_t v28 = v67;
          a4 = v68;
        }
        else
        {
          uint64_t v29 = -1 << *(unsigned char *)(v26 + 32);
          uint64_t v56 = v26 + 56;
          uint64_t v27 = ~v29;
          uint64_t v30 = -v29;
          if (v30 < 64) {
            uint64_t v31 = ~(-1 << v30);
          }
          else {
            uint64_t v31 = -1;
          }
          a4 = v31 & *(void *)(v26 + 56);
          uint64_t v28 = 0;
          uint64_t v18 = swift_bridgeObjectRetain();
        }
        uint64_t v10 = v18 & 0x7FFFFFFFFFFFFFFFLL;
        for (uint64_t i = (void (*)(void))((unint64_t)(v27 + 64) >> 6); v18 < 0; a4 = v32)
        {
          uint64_t v35 = __CocoaSet.Iterator.next()();
          if (!v35) {
            goto LABEL_49;
          }
          uint64_t v59 = v35;
          type metadata accessor for AnyCancellable();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v36 = *(void *)&v57[0];
          swift_unknownObjectRelease();
          uint64_t v34 = v28;
          uint64_t v32 = a4;
          if (!v36) {
            goto LABEL_49;
          }
LABEL_47:
          AnyCancellable.cancel()();
          swift_release();
          uint64_t v28 = v34;
        }
        if (a4)
        {
          uint64_t v32 = (a4 - 1) & a4;
          unint64_t v33 = __clz(__rbit64(a4)) | (v28 << 6);
          uint64_t v34 = v28;
LABEL_46:
          uint64_t v40 = *(void *)(*(void *)(v18 + 48) + 8 * v33);
          swift_retain();
          if (v40) {
            goto LABEL_47;
          }
          goto LABEL_49;
        }
        uint64_t v37 = v28 + 1;
        if (!__OFADD__(v28, 1))
        {
          if (v37 < (uint64_t)i)
          {
            unint64_t v38 = *(void *)(v56 + 8 * v37);
            uint64_t v34 = v28 + 1;
            if (!v38)
            {
              uint64_t v34 = v28 + 2;
              if (v28 + 2 >= (uint64_t)i) {
                goto LABEL_49;
              }
              unint64_t v38 = *(void *)(v56 + 8 * v34);
              if (!v38)
              {
                uint64_t v34 = v28 + 3;
                if (v28 + 3 >= (uint64_t)i) {
                  goto LABEL_49;
                }
                unint64_t v38 = *(void *)(v56 + 8 * v34);
                if (!v38)
                {
                  uint64_t v34 = v28 + 4;
                  if (v28 + 4 >= (uint64_t)i) {
                    goto LABEL_49;
                  }
                  unint64_t v38 = *(void *)(v56 + 8 * v34);
                  if (!v38)
                  {
                    uint64_t v34 = v28 + 5;
                    if (v28 + 5 >= (uint64_t)i) {
                      goto LABEL_49;
                    }
                    unint64_t v38 = *(void *)(v56 + 8 * v34);
                    if (!v38)
                    {
                      uint64_t v34 = v28 + 6;
                      if (v28 + 6 >= (uint64_t)i) {
                        goto LABEL_49;
                      }
                      unint64_t v38 = *(void *)(v56 + 8 * v34);
                      if (!v38)
                      {
                        uint64_t v39 = (void (*)(void))(v28 + 7);
                        do
                        {
                          if (i == v39) {
                            goto LABEL_49;
                          }
                          unint64_t v38 = *(void *)(v56 + 8 * (void)v39);
                          uint64_t v39 = (void (*)(void))((char *)v39 + 1);
                        }
                        while (!v38);
                        uint64_t v34 = (uint64_t)v39 - 1;
                      }
                    }
                  }
                }
              }
            }
            uint64_t v32 = (v38 - 1) & v38;
            unint64_t v33 = __clz(__rbit64(v38)) + (v34 << 6);
            goto LABEL_46;
          }
LABEL_49:
          sub_10002E7C4();
          swift_bridgeObjectRelease();
          uint64_t v41 = v61;
          uint64_t v42 = v62;
          sub_100071968((uint64_t)v60, v61);
          uint64_t v43 = (void (*)(long long *, void))(*(uint64_t (**)(long long *, uint64_t, uint64_t))(v42 + 24))(v57, v41, v42);
          uint64_t v45 = v44;
          swift_bridgeObjectRelease();
          *uint64_t v45 = &_swiftEmptySetSingleton;
          v43(v57, 0);
          sub_10000CC5C((uint64_t)v60);
          uint64_t i = v53;
          uint64_t v10 = v54;
          uint64_t v18 = v51;
          a4 = v52;
          unint64_t v21 = v49;
          uint64_t v19 = v50;
          goto LABEL_7;
        }
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        swift_retain();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        if (!v19) {
          goto LABEL_55;
        }
      }
      uint64_t v58 = 0;
      memset(v57, 0, sizeof(v57));
      sub_1001AB204((uint64_t)v57);
      goto LABEL_7;
    }
LABEL_55:
    swift_release_n();
    swift_retain();
    uint64_t v46 = swift_bridgeObjectRetain();
    uint64_t v47 = v48(v46);
    swift_bridgeObjectRelease();
    v60[0] = v47;
    PassthroughSubject.send(_:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for RPIdentityWrapper()
{
  return self;
}

uint64_t sub_1001A9798()
{
  id v1 = [*(id *)(*(void *)v0 + 32) description];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_1001A97F4()
{
  swift_getWitnessTable();

  return sub_1001E29EC();
}

Swift::Int sub_1001A9860()
{
  return Hasher._finalize()();
}

uint64_t sub_1001A98C0()
{
  swift_getWitnessTable();

  return sub_1002028B8();
}

Swift::Int sub_1001A9920()
{
  return Hasher._finalize()();
}

uint64_t type metadata accessor for RPIdentitySourceState()
{
  return self;
}

uint64_t sub_1001A99A8()
{
  sub_10000A38C(&qword_10035E150);
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)(v0 + 16) = v1;
  sub_10000A38C(&qword_10036B448);
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = [objc_allocWithZone((Class)NSLock) init];
  sub_10000A38C(&qword_1003665E0);
  swift_allocObject();
  uint64_t v3 = PassthroughSubject.init()();
  sub_10000A38C(&qword_1003681B0);
  swift_allocObject();
  uint64_t v4 = PassthroughSubject.init()();
  swift_allocObject();
  uint64_t v5 = PassthroughSubject.init()();
  *(void *)(v2 + 40) = v3;
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 56) = v5;
  *(void *)(v2 + 64) = &_swiftEmptyDictionarySingleton;
  *(void *)(v2 + 72) = 0;
  type metadata accessor for RPIdentityWrapper();
  sub_1001AB264(&qword_10036B440, v6, (void (*)(uint64_t))type metadata accessor for RPIdentityWrapper);
  *(void *)(v2 + 16) = swift_getKeyPath();
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)(v0 + 24) = v2;
  return v0;
}

uint64_t sub_1001A9B20(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1000B4664(a1, WitnessTable);
}

uint64_t *sub_1001A9E64(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  v2[3] = 0;
  *((_DWORD *)v2 + 8) = -1;
  if (qword_10035A628 != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)qword_1003ACB50;
  v2[5] = qword_1003ACB50;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  id v6 = v5;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v4, (uint64_t)&off_10032E470);
  v2[2] = a1;
  return v2;
}

uint64_t sub_1001A9F34()
{
  id v1 = sub_1001F6920();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  swift_release();
  sub_10000F088(*(void *)(v0 + 48));
  sub_10000F088(*(void *)(v0 + 64));
  return v0;
}

uint64_t sub_1001A9FC4()
{
  sub_1001A9F34();

  return swift_deallocClassInstance();
}

void sub_1001A9FF8(void (*a1)(void))
{
  NSString v2 = v1;
  uint64_t v4 = *(void *)v1;
  id v5 = sub_1001F6920();
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 ulog:40 message:v6];

  if (*((void *)v2 + 3))
  {
    sub_10001A050();
    swift_allocError();
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0xE000000000000000;
    *(unsigned char *)(v7 + 16) = 1;
    a1();
    swift_errorRelease();
  }
  else
  {
    id v8 = [objc_allocWithZone((Class)RPClient) init];
    if (qword_10035A628 != -1) {
      swift_once();
    }
    [v8 setDispatchQueue:qword_1003ACB50];
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v4;
    uint64_t v24 = sub_1001AB2BC;
    uint64_t v25 = v9;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v22 = sub_10007A0AC;
    uint64_t v23 = &unk_10032E5F8;
    uint64_t v10 = _Block_copy(&aBlock);
    swift_release();
    [v8 setInvalidationHandler:v10];
    _Block_release(v10);
    id v11 = (void *)*((void *)v2 + 3);
    *((void *)v2 + 3) = v8;
    id v12 = v8;

    NSString v13 = (void *)qword_1003ACB50;
    uint64_t v14 = swift_allocObject();
    swift_weakInit();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v14;
    *(void *)(v15 + 24) = v4;
    uint64_t v24 = sub_1001AB308;
    uint64_t v25 = v15;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v22 = sub_1001A82D0;
    uint64_t v23 = &unk_10032E648;
    Class v16 = _Block_copy(&aBlock);
    uint64_t v17 = v13;
    swift_release();
    swift_beginAccess();
    notify_register_dispatch("com.apple.rapport.identitiesChanged", v2 + 8, v17, v16);
    swift_endAccess();
    _Block_release(v16);

    strcpy((char *)&aBlock, "notifyToken: ");
    HIWORD(aBlock) = -4864;
    v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    id v19 = sub_1001F6920();
    swift_bridgeObjectRetain();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v19 ulog:40 message:v20];
    swift_bridgeObjectRelease();

    sub_1001AA820();
    ((void (*)(void))a1)(0);
  }
}

uint64_t sub_1001AA404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10016ABE4(0xD000000000000025, (void *)0x80000001002C2B20, 0, a3, (uint64_t)&off_10032E470);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1001AA820();
    return swift_release();
  }
  return result;
}

void sub_1001AA51C()
{
  uint64_t v1 = v0;
  id v2 = sub_1001F6920();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  uint64_t v4 = *(void **)(v1 + 24);
  if (v4)
  {
    swift_beginAccess();
    int v5 = *(_DWORD *)(v1 + 32);
    id v6 = v4;
    notify_cancel(v5);
    *(_DWORD *)(v1 + 32) = -1;
    v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    id v8 = sub_1001F6920();
    swift_bridgeObjectRetain();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v8 ulog:40 message:v9];
    swift_bridgeObjectRelease();

    *(unsigned char *)(*(void *)(*(void *)(v1 + 16) + 16) + 24) = 0;
    swift_retain();
    sub_100104B88();
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();
    swift_retain();
    sub_1001A90D8(&qword_10036B448, &qword_10036B450, (uint64_t (*)(uint64_t))sub_1000F06FC, v10, (void (*)(void))type metadata accessor for RPIdentityWrapper);
    swift_release();
    [v6 invalidate];
    id v11 = *(void **)(v1 + 24);
    *(void *)(v1 + 24) = 0;

    id v12 = *(void (**)(uint64_t))(v1 + 48);
    if (v12)
    {
      uint64_t v13 = swift_retain();
      v12(v13);
      sub_10000F088((uint64_t)v12);
    }
  }
  else
  {
    id v14 = sub_1001F6920();
    NSString v15 = String._bridgeToObjectiveC()();
    [v14 ulog:40 message:v15];
  }
}

uint64_t type metadata accessor for RPClientProxy()
{
  return self;
}

void sub_1001AA820()
{
  uint64_t v1 = *v0;
  id v2 = sub_1001F6920();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  uint64_t v4 = (void *)v0[3];
  if (v4)
  {
    uint64_t v5 = swift_allocObject();
    swift_weakInit();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    *(void *)(v6 + 24) = v1;
    aBlock[4] = sub_1001AB1E4;
    aBlock[5] = v6;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001AAF2C;
    aBlock[3] = &unk_10032E5A8;
    Swift::String v7 = _Block_copy(aBlock);
    id v8 = v4;
    swift_release();
    [v8 getIdentitiesWithFlags:939 completion:v7];
    _Block_release(v7);
  }
  else
  {
    id v9 = sub_1001F6920();
    NSString v10 = String._bridgeToObjectiveC()();
    [v9 ulog:60 message:v10];
  }
}

uint64_t sub_1001AAA14(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v8 = result;
    if (a2)
    {
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      swift_getErrorValue();
      v9._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      sub_10016AE10(90, 0xD00000000000002DLL, (void *)0x80000001002C2AA0, 0, a4, (uint64_t)&off_10032E470);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if (a1) {
      unint64_t v10 = (unint64_t)a1;
    }
    else {
      unint64_t v10 = (unint64_t)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    uint64_t v29 = 0xD000000000000015;
    uint64_t v30 = (void *)0x80000001002C2A80;
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 0x7469746E65646920;
    v12._object = (void *)0xEB00000000736569;
    String.append(_:)(v12);
    sub_10016AE10(10, v29, v30, 0, a4, (uint64_t)&off_10032E470);
    swift_bridgeObjectRelease();
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v13 = result;
      if (result) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v13)
      {
LABEL_11:
        if (v13 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v14 = 0;
        unint64_t v15 = v10 & 0xC000000000000001;
        do
        {
          if (v15) {
            id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v16 = *(id *)(v10 + 8 * v14 + 32);
          }
          uint64_t v17 = v16;
          ++v14;
          uint64_t v29 = (uint64_t)v16;
          sub_1001AAE64((id *)&v29, a4);
        }
        while (v13 != v14);
        swift_bridgeObjectRelease();
        uint64_t v29 = (uint64_t)_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (v15) {
            id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v19 = *(id *)(v10 + 8 * i + 32);
          }
          NSString v20 = v19;
          id v21 = [v19 identifier];
          if (v21)
          {
            uint64_t v22 = v21;
            uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v25 = v24;

            type metadata accessor for RPIdentityWrapper();
            uint64_t v26 = (void *)swift_allocObject();
            v26[2] = v23;
            v26[3] = v25;
            v26[4] = v20;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v27 = (void *)v29;
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = _swiftEmptyArrayStorage;
LABEL_30:
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1001C1048((unint64_t)v27);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void *)(*(void *)(v8 + 16) + 16);
    *(unsigned char *)(v28 + 24) = 1;
    swift_retain();
    swift_retain();
    sub_100104B88();
    LOBYTE(v29) = *(unsigned char *)(v28 + 24);
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1001AAE64(id *a1, uint64_t a2)
{
  id v3 = [*a1 description];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  sub_10016AE10(10, 0x203A646E756F46, v9, 0, a2, (uint64_t)&off_10032E470);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001AAF2C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_100019E10(0, (unint64_t *)&qword_100360A50);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001AAFD0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1001AB264(&qword_10036B428, a2, (void (*)(uint64_t))type metadata accessor for RPIdentitySourceState);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001AB028(uint64_t a1, uint64_t a2)
{
  return sub_1001AB264(&qword_10036B430, a2, (void (*)(uint64_t))type metadata accessor for RPIdentityWrapper);
}

uint64_t sub_1001AB070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AB0B0(a1, a2, a3, &qword_10036B438);
}

uint64_t sub_1001AB090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AB0B0(a1, a2, a3, &qword_10036B430);
}

uint64_t sub_1001AB0B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  *(void *)(a1 + 8) = sub_1001AB264(a4, a2, (void (*)(uint64_t))type metadata accessor for RPIdentityWrapper);
  uint64_t result = sub_1001AB264(&qword_10036B440, v5, (void (*)(uint64_t))type metadata accessor for RPIdentityWrapper);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1001AB120()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t sub_1001AB154()
{
  return 24;
}

__n128 sub_1001AB160(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1001AB174()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001AB1AC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001AB1E4(void *a1, uint64_t a2)
{
  return sub_1001AAA14(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001AB1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001AB1FC()
{
  return swift_release();
}

uint64_t sub_1001AB204(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_1003677D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001AB264(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001AB2AC()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001AB2BC()
{
  sub_10016ABE4(0xD000000000000014, (void *)0x80000001002C2B50, 0, *(void *)(v0 + 16), (uint64_t)&off_10032E470);
}

uint64_t sub_1001AB308(uint64_t a1)
{
  return sub_1001AA404(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001AB310()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001AB374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_1001AB37C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1001AB428(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    Swift::String v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *Swift::String v12 = *v13;
    uint64_t v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    uint64_t v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    id v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v14, v15, v4);
    uint64_t v17 = (void *)((v7 + v15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v18 = v17[1];
    id v19 = (void *)((v7 + v14) & 0xFFFFFFFFFFFFFFF8);
    *id v19 = *v17;
    v19[1] = v18;
  }
  swift_retain();
  return a1;
}

uint64_t sub_1001AB574(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));

  return swift_release();
}

void *sub_1001AB618(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)(a3 + 16);
  int v8 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 8) & ~v10;
  unint64_t v12 = (v10 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(v11, v12, v7);
  uint64_t v13 = *(void *)(v9 + 48) + 7;
  uint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  swift_retain();
  return a1;
}

void *sub_1001AB6F0(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  *uint64_t v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 8) & ~v10;
  unint64_t v12 = (v10 + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  (*(void (**)(uint64_t, unint64_t))(v8 + 24))(v11, (v10 + 8 + v7) & ~v10);
  uint64_t v13 = *(void *)(v9 + 40) + 7;
  uint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_1001AB7E4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)v4 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)v5 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v9, v10);
  *(_OWORD *)((*(void *)(v7 + 32) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v7 + 32) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_1001AB898(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v6 = *(void *)v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  uint64_t v11 = (v9 + 8 + v5) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  *(_OWORD *)((*(void *)(v8 + 24) + 7 + v10) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v8 + 24) + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_1001AB974(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1001ABAD4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
  }
                                                                  + v6
                                                                  + 8) & ~v6);
  uint64_t v17 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_1001ABAE8(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v19 = (((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9;
              NSString v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v18 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v18 = a2 - 1;
              }
              *(void *)a1 = v18;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1001ABCE0);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t _s6FilterVMa()
{
  return sub_10000F2E4();
}

uint64_t sub_1001ABD20()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_1001ABD3C()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_1001ABD58()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_1001ABD74(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t sub_1001ABD7C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for AppleDevice.Category()
{
  return &type metadata for AppleDevice.Category;
}

unsigned char *_s17proximitycontrold11AppleDeviceOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001ABE9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleDevice()
{
  return &type metadata for AppleDevice;
}

void sub_1001ABED4(void *a1@<X8>)
{
  *a1 = &off_10031D2F8;
}

unint64_t sub_1001ABEE8()
{
  unint64_t result = qword_10036B5A0;
  if (!qword_10036B5A0)
  {
    sub_10000A3D0(&qword_10036B5A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B5A0);
  }
  return result;
}

unint64_t sub_1001ABF48()
{
  unint64_t result = qword_10036B5B0;
  if (!qword_10036B5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B5B0);
  }
  return result;
}

uint64_t sub_1001ABF9C(unsigned __int8 *a1, char *a2)
{
  return sub_10005DE00(*a1, *a2);
}

Swift::Int sub_1001ABFA8()
{
  return sub_10015EE3C();
}

uint64_t sub_1001ABFB4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001AC0A4()
{
  return sub_10015EE3C();
}

unint64_t sub_1001AC0AC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001AC8F8(*a1);
  *a2 = result;
  return result;
}

void sub_1001AC0DC(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x646F50656D6F48;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1684099177;
      goto LABEL_3;
    case 2:
      *a1 = 0x656E6F685069;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 1685016681;
      a1[1] = 0xE400000000000000;
      break;
    case 4:
      *a1 = 6513005;
      a1[1] = 0xE300000000000000;
      break;
    case 5:
      *a1 = 30324;
      a1[1] = 0xE200000000000000;
      break;
    case 6:
      *a1 = 0x6863746177;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unint64_t sub_1001AC1B4()
{
  unint64_t result = qword_10036B5B8;
  if (!qword_10036B5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B5B8);
  }
  return result;
}

BOOL sub_1001AC208(char *a1, char *a2)
{
  return qword_1002A2180[*a1] == qword_1002A2180[*a2];
}

Swift::Int sub_1001AC22C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1002A2180[v1]);
  return Hasher._finalize()();
}

void sub_1001AC27C()
{
  Hasher._combine(_:)(qword_1002A2180[*v0]);
}

Swift::Int sub_1001AC2B4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1002A2180[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1001AC300@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1001AC510();
  *a1 = result;
  return result;
}

void sub_1001AC32C(void *a1@<X8>)
{
  *a1 = qword_1002A2180[*v1];
}

uint64_t sub_1001AC344(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 7;
  uint64_t v5 = &byte_10031D318;
  while (2)
  {
    unsigned int v7 = *v5++;
    uint64_t v6 = v7;
    unint64_t v8 = 0x80000001002C2BB0;
    unint64_t v9 = 0xD000000000000011;
    switch(v7)
    {
      case 1u:
        unint64_t v8 = 0x80000001002C2B90;
        if (a1 == 0xD000000000000011) {
          goto LABEL_15;
        }
        goto LABEL_16;
      case 2u:
        unint64_t v8 = 0x80000001002C2B70;
        if (a1 != 0xD000000000000011) {
          goto LABEL_16;
        }
        goto LABEL_15;
      case 3u:
        uint64_t v10 = 0x3231656E6F685069;
        goto LABEL_14;
      case 4u:
        unint64_t v8 = 0xEA0000000000352CLL;
        if (a1 != 0x3231656E6F685069) {
          goto LABEL_16;
        }
        goto LABEL_15;
      case 5u:
        unint64_t v9 = 0x3531656E6F685069;
        unint64_t v8 = 0xEA0000000000322CLL;
        goto LABEL_11;
      case 6u:
        uint64_t v10 = 0x3531656E6F685069;
LABEL_14:
        unint64_t v8 = 0xEA0000000000332CLL;
        if (v10 == a1) {
          goto LABEL_15;
        }
        goto LABEL_16;
      default:
LABEL_11:
        if (v9 != a1) {
          goto LABEL_16;
        }
LABEL_15:
        if (v8 == a2)
        {
          swift_bridgeObjectRelease();
          return v6;
        }
LABEL_16:
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v11) {
          return v6;
        }
        if (--v2) {
          continue;
        }
        return 7;
    }
  }
}

uint64_t sub_1001AC510()
{
  return 1;
}

uint64_t sub_1001AC620(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    sub_1001534DC(result, a2, 10);
    char v8 = v24;
    goto LABEL_44;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v25[0] = result;
    v25[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_58;
      }
      if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_31;
      }
      if (v3 != 2)
      {
        if ((BYTE2(result) - 48) > 9u) {
          goto LABEL_31;
        }
        uint64_t v9 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        uint64_t v10 = v3 - 3;
        if (v10)
        {
          char v11 = (unsigned __int8 *)v25 + 3;
          while (1)
          {
            unsigned int v12 = *v11 - 48;
            if (v12 > 9) {
              goto LABEL_31;
            }
            uint64_t v13 = 10 * v9;
            if ((unsigned __int128)(v9 * (__int128)10) >> 64 != (10 * v9) >> 63) {
              goto LABEL_31;
            }
            uint64_t v9 = v13 + v12;
            if (__OFADD__(v13, v12)) {
              goto LABEL_31;
            }
            char v8 = 0;
            ++v11;
            if (!--v10) {
              goto LABEL_44;
            }
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            if (v3 == 2)
            {
              char v8 = 0;
              goto LABEL_44;
            }
            if ((BYTE2(result) - 48) <= 9u)
            {
              uint64_t v19 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
              uint64_t v20 = v3 - 3;
              if (!v20) {
                goto LABEL_43;
              }
              id v21 = (unsigned __int8 *)v25 + 3;
              while (1)
              {
                unsigned int v22 = *v21 - 48;
                if (v22 > 9) {
                  break;
                }
                uint64_t v23 = 10 * v19;
                if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63) {
                  break;
                }
                uint64_t v19 = v23 - v22;
                if (__OFSUB__(v23, v22)) {
                  break;
                }
                char v8 = 0;
                ++v21;
                if (!--v20) {
                  goto LABEL_44;
                }
              }
            }
          }
LABEL_31:
          char v8 = 1;
          goto LABEL_44;
        }
        __break(1u);
LABEL_58:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_31;
      }
      if (v3 != 1)
      {
        if ((BYTE1(result) - 48) > 9u) {
          goto LABEL_31;
        }
        uint64_t v14 = 10 * (result - 48) + (BYTE1(result) - 48);
        uint64_t v15 = v3 - 2;
        if (v15)
        {
          int v16 = (unsigned __int8 *)v25 + 2;
          while (1)
          {
            unsigned int v17 = *v16 - 48;
            if (v17 > 9) {
              goto LABEL_31;
            }
            uint64_t v18 = 10 * v14;
            if ((unsigned __int128)(v14 * (__int128)10) >> 64 != (10 * v14) >> 63) {
              goto LABEL_31;
            }
            uint64_t v14 = v18 + v17;
            if (__OFADD__(v18, v17)) {
              goto LABEL_31;
            }
            char v8 = 0;
            ++v16;
            if (!--v15) {
              goto LABEL_44;
            }
          }
        }
      }
    }
LABEL_43:
    char v8 = 0;
    goto LABEL_44;
  }
  if ((result & 0x1000000000000000) != 0) {
    uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  sub_1001534C4(v6, v4, 10);
  char v8 = v7 & 1;
LABEL_44:
  swift_bridgeObjectRelease();
  if (v8) {
    return 11;
  }
  uint64_t result = sub_1001AC510();
  if (result == 11) {
    return 11;
  }
  return result;
}

unint64_t sub_1001AC8F8(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10031ED60, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

unsigned char *storeEnumTagSinglePayload for AppleDevice.Color(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001ACA10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleDevice.Color()
{
  return &type metadata for AppleDevice.Color;
}

unint64_t sub_1001ACA4C()
{
  unint64_t result = qword_10036B5C0;
  if (!qword_10036B5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B5C0);
  }
  return result;
}

uint64_t sub_1001ACAA0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17proximitycontrold12TrackedToken_deviceID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1001ACB50()
{
  return type metadata accessor for TrackedToken();
}

uint64_t type metadata accessor for TrackedToken()
{
  uint64_t result = qword_10036B5F0;
  if (!qword_10036B5F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001ACBA4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1001ACC40()
{
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  uint64_t v1 = static String._fromSubstring(_:)();
  int v3 = v2;
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x3D6E6B7420;
  v5._object = (void *)0xE500000000000000;
  String.append(_:)(v5);
  id v6 = *(id *)(v0 + OBJC_IVAR____TtC17proximitycontrold12TrackedToken_token);
  id v7 = [v6 description];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);

  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 0xD000000000000012;
}

unint64_t sub_1001ACDB0()
{
  return sub_1001ACC40();
}

uint64_t destroy for NoticeEvent(uint64_t a1)
{
  return sub_10002052C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
}

uint64_t initializeWithCopy for NoticeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  sub_10001FAFC(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for NoticeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  sub_10001FAFC(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = *(void *)a1;
  unint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  char v18 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v10;
  sub_10002052C(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for NoticeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  char v4 = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v3;
  char v13 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v4;
  sub_10002052C(v5, v7, v6, v8, v9, v10, v11, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for NoticeEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NoticeEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 56) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1001AD024(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 56) <= 2u) {
    return *(unsigned __int8 *)(a1 + 56);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_1001AD03C(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 56) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NoticeEvent()
{
  return &type metadata for NoticeEvent;
}

char *sub_1001AD074(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *(void *)a1 = *a2;
    a1 = &v17[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v19 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v19;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v20 = a2[2];
      if (v20 == (char *)1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((void *)a1 + 2) = a2[2];
      }
      else
      {
        id v21 = *a2;
        char v22 = *((unsigned char *)a2 + 8);
        *(void *)a1 = *a2;
        a1[8] = v22;
        *((void *)a1 + 2) = v20;
        uint64_t v23 = v21;
        swift_retain();
      }
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v8;
      a1[16] = *((unsigned char *)a2 + 16);
      uint64_t v9 = (int *)type metadata accessor for NoticeContext(0);
      uint64_t v10 = v9[6];
      uint64_t v11 = (uint64_t *)&a1[v10];
      long long v12 = (uint64_t *)((char *)a2 + v10);
      uint64_t v13 = type metadata accessor for NoticeTapAction(0);
      swift_bridgeObjectRetain();
      int v14 = swift_getEnumCaseMultiPayload();
      if (v14 == 1)
      {
        uint64_t v24 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v24 - 8) + 16))(v11, v12, v24);
        swift_storeEnumTagMultiPayload();
      }
      else if (v14)
      {
        memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        uint64_t v16 = *v12;
        unint64_t v15 = v12[1];
        sub_10001F8BC(v16, v15);
        *uint64_t v11 = v16;
        v11[1] = v15;
        swift_storeEnumTagMultiPayload();
      }
      a1[v9[7]] = *((unsigned char *)a2 + v9[7]);
      uint64_t v25 = v9[8];
      uint64_t v26 = &a1[v25];
      uint64_t v27 = (char **)((char *)a2 + v25);
      type metadata accessor for NoticeContent(0);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v31 = v27[1];
        *(void *)uint64_t v26 = *v27;
        *((void *)v26 + 1) = v31;
        uint64_t v47 = type metadata accessor for ShareableContentExposedContext(0);
        uint64_t v32 = *(int *)(v47 + 20);
        unint64_t v33 = &v26[v32];
        uint64_t v34 = (char *)v27 + v32;
        uint64_t v35 = *(void *)((char *)v27 + v32 + 8);
        *(void *)unint64_t v33 = *(void *)((char *)v27 + v32);
        *((void *)v33 + 1) = v35;
        uint64_t v36 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
        __dst = &v33[v36];
        uint64_t v45 = &v34[v36];
        uint64_t v37 = type metadata accessor for URL();
        uint64_t v38 = *(void *)(v37 - 8);
        uint64_t v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v44(v45, 1, v37))
        {
          uint64_t v39 = type metadata accessor for ShareableContentType(0);
          memcpy(__dst, v45, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v38 + 16))(__dst, v45, v37);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
        }
        uint64_t v40 = *(int *)(v47 + 24);
        uint64_t v41 = &v26[v40];
        uint64_t v42 = (void *)((char *)v27 + v40);
        uint64_t v43 = v42[1];
        *(void *)uint64_t v41 = *v42;
        *((void *)v41 + 1) = v43;
      }
      else
      {
        uint64_t v28 = v27[1];
        *(void *)uint64_t v26 = *v27;
        *((void *)v26 + 1) = v28;
        uint64_t v29 = v27[2];
        uint64_t v30 = v27[3];
        *((void *)v26 + 2) = v29;
        *((void *)v26 + 3) = v30;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1001AD4A0(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch(result)
  {
    case 2:
LABEL_18:
      return swift_bridgeObjectRelease();
    case 1:
      if (*(void *)(a1 + 16) != 1)
      {

        return swift_release();
      }
      break;
    case 0:
      swift_bridgeObjectRelease();
      uint64_t v3 = type metadata accessor for NoticeContext(0);
      uint64_t v4 = a1 + *(int *)(v3 + 24);
      type metadata accessor for NoticeTapAction(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v6 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
      }
      else if (!EnumCaseMultiPayload)
      {
        sub_10000DBEC(*(void *)v4, *(void *)(v4 + 8));
      }
      uint64_t v7 = a1 + *(int *)(v3 + 32);
      type metadata accessor for NoticeContent(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
        case 1:
        case 2:
          swift_bridgeObjectRelease();
          goto LABEL_18;
        case 3:
          swift_bridgeObjectRelease();
          uint64_t v8 = v7 + *(int *)(type metadata accessor for ShareableContentExposedContext(0) + 20);
          swift_bridgeObjectRelease();
          uint64_t v9 = v8 + *(int *)(type metadata accessor for ShareableContent(0) + 20);
          uint64_t v10 = type metadata accessor for URL();
          uint64_t v11 = *(void *)(v10 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
            (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
          }
          goto LABEL_18;
        default:
          return result;
      }
  }
  return result;
}

void *sub_1001AD6EC(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      swift_bridgeObjectRetain();
LABEL_22:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      uint64_t v17 = a2[2];
      if (v17 == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = a2[2];
      }
      else
      {
        char v18 = (void *)*a2;
        char v19 = *((unsigned char *)a2 + 8);
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = v19;
        a1[2] = v17;
        id v20 = v18;
        swift_retain();
      }
      goto LABEL_22;
    case 0:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      uint64_t v8 = (int *)type metadata accessor for NoticeContext(0);
      uint64_t v9 = v8[6];
      uint64_t v10 = (void *)((char *)a1 + v9);
      uint64_t v11 = (void *)((char *)a2 + v9);
      uint64_t v12 = type metadata accessor for NoticeTapAction(0);
      swift_bridgeObjectRetain();
      int v13 = swift_getEnumCaseMultiPayload();
      if (v13 == 1)
      {
        uint64_t v21 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v21 - 8) + 16))(v10, v11, v21);
        swift_storeEnumTagMultiPayload();
      }
      else if (v13)
      {
        memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        uint64_t v15 = *v11;
        unint64_t v14 = v11[1];
        sub_10001F8BC(v15, v14);
        *uint64_t v10 = v15;
        v10[1] = v14;
        swift_storeEnumTagMultiPayload();
      }
      *((unsigned char *)a1 + v8[7]) = *((unsigned char *)a2 + v8[7]);
      uint64_t v22 = v8[8];
      uint64_t v23 = (void *)((char *)a1 + v22);
      uint64_t v24 = (void *)((char *)a2 + v22);
      type metadata accessor for NoticeContent(0);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v28 = v24[1];
        *uint64_t v23 = *v24;
        v23[1] = v28;
        uint64_t v45 = type metadata accessor for ShareableContentExposedContext(0);
        uint64_t v29 = *(int *)(v45 + 20);
        uint64_t v30 = (void *)((char *)v23 + v29);
        uint64_t v31 = (char *)v24 + v29;
        uint64_t v32 = *(void *)((char *)v24 + v29 + 8);
        *uint64_t v30 = *(void *)((char *)v24 + v29);
        v30[1] = v32;
        uint64_t v33 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
        __dst = (char *)v30 + v33;
        uint64_t v43 = &v31[v33];
        uint64_t v34 = type metadata accessor for URL();
        uint64_t v35 = *(void *)(v34 - 8);
        uint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v42(v43, 1, v34))
        {
          uint64_t v36 = type metadata accessor for ShareableContentType(0);
          memcpy(__dst, v43, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v35 + 16))(__dst, v43, v34);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v34);
        }
        uint64_t v37 = *(int *)(v45 + 24);
        uint64_t v38 = (void *)((char *)v23 + v37);
        uint64_t v39 = (void *)((char *)v24 + v37);
        uint64_t v40 = v39[1];
        *uint64_t v38 = *v39;
        v38[1] = v40;
      }
      else
      {
        uint64_t v25 = v24[1];
        *uint64_t v23 = *v24;
        v23[1] = v25;
        uint64_t v26 = v24[2];
        uint64_t v27 = v24[3];
        void v23[2] = v26;
        void v23[3] = v27;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      goto LABEL_22;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *sub_1001ADACC(void *a1, void *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  sub_1001B28FC((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
LABEL_23:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      if (a2[2] == 1)
      {
        long long v15 = *(_OWORD *)a2;
        a1[2] = a2[2];
        *(_OWORD *)a1 = v15;
      }
      else
      {
        uint64_t v16 = (void *)*a2;
        char v17 = *((unsigned char *)a2 + 8);
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = v17;
        a1[2] = a2[2];
        id v18 = v16;
        swift_retain();
      }
      goto LABEL_23;
    case 0:
      *a1 = *a2;
      a1[1] = a2[1];
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      uint64_t v7 = (int *)type metadata accessor for NoticeContext(0);
      uint64_t v8 = v7[6];
      uint64_t v9 = (void *)((char *)a1 + v8);
      uint64_t v10 = (void *)((char *)a2 + v8);
      uint64_t v11 = type metadata accessor for NoticeTapAction(0);
      swift_bridgeObjectRetain();
      int v12 = swift_getEnumCaseMultiPayload();
      if (v12 == 1)
      {
        uint64_t v19 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v19 - 8) + 16))(v9, v10, v19);
        swift_storeEnumTagMultiPayload();
      }
      else if (v12)
      {
        memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        uint64_t v14 = *v10;
        unint64_t v13 = v10[1];
        sub_10001F8BC(v14, v13);
        *uint64_t v9 = v14;
        v9[1] = v13;
        swift_storeEnumTagMultiPayload();
      }
      *((unsigned char *)a1 + v7[7]) = *((unsigned char *)a2 + v7[7]);
      uint64_t v20 = v7[8];
      uint64_t v21 = (void *)((char *)a1 + v20);
      uint64_t v22 = (void *)((char *)a2 + v20);
      type metadata accessor for NoticeContent(0);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        *uint64_t v21 = *v22;
        v21[1] = v22[1];
        uint64_t v37 = type metadata accessor for ShareableContentExposedContext(0);
        uint64_t v23 = *(int *)(v37 + 20);
        uint64_t v24 = (void *)((char *)v21 + v23);
        uint64_t v25 = (char *)v22 + v23;
        *uint64_t v24 = *(void *)((char *)v22 + v23);
        v24[1] = *(void *)((char *)v22 + v23 + 8);
        uint64_t v26 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
        __dst = (char *)v24 + v26;
        uint64_t v35 = &v25[v26];
        uint64_t v27 = type metadata accessor for URL();
        uint64_t v28 = *(void *)(v27 - 8);
        uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v34(v35, 1, v27))
        {
          uint64_t v29 = type metadata accessor for ShareableContentType(0);
          memcpy(__dst, v35, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dst, v35, v27);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
        }
        uint64_t v30 = *(int *)(v37 + 24);
        uint64_t v31 = (void *)((char *)v21 + v30);
        uint64_t v32 = (void *)((char *)v22 + v30);
        *uint64_t v31 = *v32;
        v31[1] = v32[1];
      }
      else
      {
        *uint64_t v21 = *v22;
        v21[1] = v22[1];
        void v21[2] = v22[2];
        v21[3] = v22[3];
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      goto LABEL_23;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t type metadata accessor for NoticeEffect()
{
  uint64_t result = qword_10036B6F0;
  if (!qword_10036B6F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unsigned char *sub_1001ADF58(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[16] = a2[16];
    uint64_t v6 = (int *)type metadata accessor for NoticeContext(0);
    uint64_t v7 = v6[6];
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    uint64_t v10 = type metadata accessor for NoticeTapAction(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    a1[v6[7]] = a2[v6[7]];
    uint64_t v12 = v6[8];
    unint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    uint64_t v15 = type metadata accessor for NoticeContent(0);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      *unint64_t v13 = *v14;
      uint64_t v16 = type metadata accessor for ShareableContentExposedContext(0);
      uint64_t v17 = *(int *)(v16 + 20);
      id v18 = (char *)v13 + v17;
      uint64_t v19 = (char *)v14 + v17;
      *(_OWORD *)((char *)v13 + v17) = *(_OWORD *)((char *)v14 + v17);
      uint64_t v20 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
      uint64_t v21 = &v18[v20];
      uint64_t v22 = &v19[v20];
      uint64_t v23 = type metadata accessor for URL();
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = type metadata accessor for ShareableContentType(0);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      *(_OWORD *)((char *)v13 + *(int *)(v16 + 24)) = *(_OWORD *)((char *)v14 + *(int *)(v16 + 24));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

unsigned char *sub_1001AE21C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001B28FC((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      uint64_t v6 = (int *)type metadata accessor for NoticeContext(0);
      uint64_t v7 = v6[6];
      uint64_t v8 = &a1[v7];
      uint64_t v9 = &a2[v7];
      uint64_t v10 = type metadata accessor for NoticeTapAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v11 = type metadata accessor for URL();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
      }
      a1[v6[7]] = a2[v6[7]];
      uint64_t v12 = v6[8];
      unint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      uint64_t v15 = type metadata accessor for NoticeContent(0);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        *unint64_t v13 = *v14;
        uint64_t v16 = type metadata accessor for ShareableContentExposedContext(0);
        uint64_t v17 = *(int *)(v16 + 20);
        id v18 = (char *)v13 + v17;
        uint64_t v19 = (char *)v14 + v17;
        *(_OWORD *)((char *)v13 + v17) = *(_OWORD *)((char *)v14 + v17);
        uint64_t v20 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
        uint64_t v21 = &v18[v20];
        uint64_t v22 = &v19[v20];
        uint64_t v23 = type metadata accessor for URL();
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          uint64_t v25 = type metadata accessor for ShareableContentType(0);
          memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        *(_OWORD *)((char *)v13 + *(int *)(v16 + 24)) = *(_OWORD *)((char *)v14 + *(int *)(v16 + 24));
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1001AE504()
{
  uint64_t result = type metadata accessor for NoticeContext(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_1001AE5A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_100369D60);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  int v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v37 - v6;
  uint64_t v8 = type metadata accessor for NoticeContext(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v37 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v18 = type metadata accessor for NoticeEffect();
  __chkstk_darwin(v18);
  uint64_t v20 = (void **)((char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001B282C(v1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
  unint64_t v21 = 0xD000000000000012;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v25 = *v20;
      uint64_t v24 = (uint64_t)v20[1];
      uint64_t v26 = (uint64_t)v20[2];
      uint64_t v38 = 0;
      unint64_t v39 = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      unint64_t v41 = 0xD000000000000010;
      unint64_t v42 = 0x80000001002C2C70;
      if (v26 == 1)
      {
        uint64_t v27 = 7104878;
        unint64_t v28 = 0xE300000000000000;
      }
      else
      {
        uint64_t v38 = (uint64_t)v25;
        LOBYTE(v39) = v24 & 1;
        uint64_t v40 = v26;
        swift_retain();
        id v29 = v25;
        uint64_t v27 = String.init<A>(describing:)();
        unint64_t v28 = v30;
      }
      unint64_t v31 = v28;
      String.append(_:)(*(Swift::String *)&v27);
      swift_bridgeObjectRelease();
      v32._uint64_t countAndFlagsBits = 41;
      v32._object = (void *)0xE100000000000000;
      String.append(_:)(v32);
      sub_10017A610(v25, v24, v26);
      unint64_t v21 = v41;
      break;
    case 2u:
      swift_bridgeObjectRelease();
      unint64_t v21 = 0x7373696D736964;
      break;
    case 3u:
      return v21;
    default:
      sub_1001B27C8((uint64_t)v20, (uint64_t)v17);
      uint64_t v38 = 0x28746E6573657270;
      unint64_t v39 = 0xE800000000000000;
      sub_1001B282C((uint64_t)v17, (uint64_t)v7, type metadata accessor for NoticeContext);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
      sub_1001B2894((uint64_t)v7, (uint64_t)v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
      {
        uint64_t v22 = 7104878;
        uint64_t v23 = (void *)0xE300000000000000;
      }
      else
      {
        sub_1001B27C8((uint64_t)v5, (uint64_t)v15);
        sub_1001B282C((uint64_t)v15, (uint64_t)v12, type metadata accessor for NoticeContext);
        uint64_t v22 = String.init<A>(describing:)();
        uint64_t v23 = v33;
        sub_1001B28FC((uint64_t)v15, type metadata accessor for NoticeContext);
      }
      sub_10000D78C((uint64_t)v7, &qword_100369D60);
      v34._uint64_t countAndFlagsBits = v22;
      v34._object = v23;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = 41;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      unint64_t v21 = v38;
      sub_1001B28FC((uint64_t)v17, type metadata accessor for NoticeContext);
      break;
  }
  return v21;
}

unint64_t sub_1001AEA0C()
{
  uint64_t v1 = v0;
  sub_100174AE4(v0, (uint64_t)v12);
  uint64_t v2 = v12[0];
  unint64_t v3 = v12[1];
  sub_100174AE4(v1, (uint64_t)&v13);
  unint64_t result = 0xD000000000000010;
  switch(v17)
  {
    case 1:
      strcpy((char *)v18, "buttonTapped(");
      HIWORD(v18[0]) = -4864;
      if (*((void *)&v13 + 1) >> 60 == 15) {
        uint64_t v7 = 7104878;
      }
      else {
        uint64_t v7 = 1701670771;
      }
      if (*((void *)&v13 + 1) >> 60 == 15) {
        uint64_t v8 = (void *)0xE300000000000000;
      }
      else {
        uint64_t v8 = (void *)0xE400000000000000;
      }
      sub_10001FBBC(v2, v3);
      v9._uint64_t countAndFlagsBits = v7;
      v9._object = v8;
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      sub_100179E94(v1, (void (*)(void, void, void, void, void, void, void, void))sub_10002052C);
      goto LABEL_10;
    case 2:
      v18[0] = v13;
      v18[1] = v14;
      void v18[2] = v15;
      uint64_t v19 = v16;
      _StringGuts.grow(_:)(17);
      v10._uint64_t countAndFlagsBits = 0x46746E6573657270;
      v10._object = (void *)0xEE002864656C6961;
      String.append(_:)(v10);
      _print_unlocked<A, B>(_:_:)();
      v11._uint64_t countAndFlagsBits = 41;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      unint64_t result = 0;
      break;
    case 3:
      return result;
    default:
      strcpy((char *)v18, "bannerEvent(");
      BYTE13(v18[0]) = 0;
      HIWORD(v18[0]) = -5120;
      v5._uint64_t countAndFlagsBits = sub_1001AF738(v13, *((void **)&v13 + 1), v14);
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v6._uint64_t countAndFlagsBits = 41;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
LABEL_10:
      unint64_t result = *(void *)&v18[0];
      break;
  }
  return result;
}

uint64_t sub_1001AEC40(void *a1)
{
  uint64_t v2 = v1;
  sub_100174AE4(v2, (uint64_t)v42);
  unint64_t v30 = v42[1];
  uint64_t v31 = v42[0];
  uint64_t v4 = sub_10000A38C(&qword_10036B780);
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  __chkstk_darwin(v4);
  Swift::String v32 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036B788);
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v37 = v6;
  __chkstk_darwin(v6);
  uint64_t v33 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036B790);
  uint64_t v28 = *(void *)(v8 - 8);
  uint64_t v29 = v8;
  __chkstk_darwin(v8);
  Swift::String v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_10036B798);
  uint64_t v27 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  long long v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000A38C(&qword_10036B7A0);
  uint64_t v38 = *(void *)(v14 - 8);
  uint64_t v39 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1001B257C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100174AE4(v2, (uint64_t)v43);
  switch(v45)
  {
    case 1:
      __n128 v23 = v43[0];
      v40[0].n128_u8[0] = 1;
      sub_10001FBBC(v31, v30);
      sub_1001B2678();
      uint64_t v24 = v39;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v40[0] = v23;
      sub_100155470();
      uint64_t v25 = v29;
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v25);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v16, v24);
      uint64_t result = sub_100179E94(v2, (void (*)(void, void, void, void, void, void, void, void))sub_10002052C);
      break;
    case 2:
      __n128 v47 = v43[0];
      __n128 v48 = v43[1];
      __n128 v49 = v43[2];
      uint64_t v50 = v44;
      v40[0].n128_u8[0] = 2;
      sub_1001B2624();
      uint64_t v18 = v33;
      uint64_t v17 = v39;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v40[0] = v47;
      v40[1] = v48;
      v40[2] = v49;
      uint64_t v41 = v50;
      sub_1000D9C6C();
      uint64_t v19 = v37;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v19);
      goto LABEL_4;
    case 3:
      v40[0].n128_u8[0] = 3;
      sub_1001B25D0();
      unint64_t v21 = v32;
      uint64_t v22 = v39;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v35);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v16, v22);
      break;
    default:
      sub_100179E38(v43, &v46);
      v40[0].n128_u8[0] = 0;
      sub_1001B26CC();
      uint64_t v17 = v39;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_100179E38(&v46, v40);
      sub_1001B2774();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
LABEL_4:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v16, v17);
      break;
  }
  return result;
}

uint64_t sub_1001AF21C(uint64_t a1)
{
  unint64_t v2 = sub_1001B26CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AF258(uint64_t a1)
{
  unint64_t v2 = sub_1001B26CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001AF294()
{
  return 0x634172656461656CLL;
}

uint64_t sub_1001AF2B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x634172656461656CLL && a2 == 0xEC0000006E6F6974)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1001AF364(uint64_t a1)
{
  unint64_t v2 = sub_1001B2678();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AF3A0(uint64_t a1)
{
  unint64_t v2 = sub_1001B2678();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1001AF3DC()
{
  unint64_t result = 0x764572656E6E6162;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x61546E6F74747562;
      break;
    case 2:
      unint64_t result = 0x46746E6573657270;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001AF48C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001B1B78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001AF4B4(uint64_t a1)
{
  unint64_t v2 = sub_1001B257C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AF4F0(uint64_t a1)
{
  unint64_t v2 = sub_1001B257C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001AF52C(uint64_t a1)
{
  unint64_t v2 = sub_1001B2624();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AF568(uint64_t a1)
{
  unint64_t v2 = sub_1001B2624();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001AF5A4(uint64_t a1)
{
  unint64_t v2 = sub_1001B25D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AF5E0(uint64_t a1)
{
  unint64_t v2 = sub_1001B25D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001AF61C(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1001B1D84(a1, (uint64_t)v4);
  if (!v2) {
    sub_100174AE4((uint64_t)v4, a2);
  }
}

uint64_t sub_1001AF664(void *a1)
{
  sub_100174AE4(v1, (uint64_t)&v4);
  return sub_1001AEC40(a1);
}

unint64_t sub_1001AF6B4()
{
  sub_100174AE4(v0, (uint64_t)&v2);
  return sub_1001AEA0C();
}

uint64_t sub_1001AF6EC(uint64_t a1, uint64_t a2)
{
  sub_100174AE4(a1, (uint64_t)v4);
  sub_100174AE4(a2, (uint64_t)v5);
  return sub_1001B1004((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t sub_1001AF738(uint64_t a1, void *a2, char a3)
{
  switch(a3)
  {
    case 1:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      uint64_t v5 = 0x617369446C6C6977;
      goto LABEL_6;
    case 2:
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      uint64_t v5 = 0x7061736944646964;
      goto LABEL_6;
    case 3:
      uint64_t result = 0x676E6964616F6CLL;
      switch(a1)
      {
        case 1:
          uint64_t result = 0x64616F4C646964;
          break;
        case 2:
          uint64_t result = 0x657070416C6C6977;
          break;
        case 3:
          uint64_t result = 0x6165707041646964;
          break;
        case 4:
          uint64_t result = 0x6E6172546C6C6977;
          break;
        case 5:
          uint64_t result = 0x736E617254646964;
          break;
        default:
          return result;
      }
      return result;
    default:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      uint64_t v5 = 0x41746F4E6C6C6977;
LABEL_6:
      uint64_t v9 = v5;
      v6._uint64_t countAndFlagsBits = a1;
      v6._object = a2;
      String.append(_:)(v6);
      v7._uint64_t countAndFlagsBits = 41;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      return v9;
  }
}

uint64_t sub_1001AF958(char a1)
{
  uint64_t result = 0x676E6964616F6CLL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x64616F4C646964;
      break;
    case 2:
      uint64_t result = 0x41746F4E6C6C6977;
      break;
    case 3:
      uint64_t result = 0x657070416C6C6977;
      break;
    case 4:
      uint64_t result = 0x6165707041646964;
      break;
    case 5:
      uint64_t result = 0x6E6172546C6C6977;
      break;
    case 6:
      uint64_t result = 0x736E617254646964;
      break;
    case 7:
      uint64_t result = 0x617369446C6C6977;
      break;
    case 8:
      uint64_t result = 0x7061736944646964;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001AFAA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v67 = a4;
  uint64_t v64 = a3;
  uint64_t v68 = a2;
  uint64_t v5 = sub_10000A38C(&qword_10036B8C8);
  uint64_t v62 = *(void *)(v5 - 8);
  uint64_t v63 = v5;
  __chkstk_darwin(v5);
  uint64_t v61 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036B8D0);
  uint64_t v59 = *(void *)(v7 - 8);
  uint64_t v60 = v7;
  __chkstk_darwin(v7);
  uint64_t v58 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036B8D8);
  uint64_t v55 = *(void *)(v9 - 8);
  uint64_t v56 = v9;
  __chkstk_darwin(v9);
  uint64_t v54 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_10036B8E0);
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v53 = v11;
  __chkstk_darwin(v11);
  uint64_t v51 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000A38C(&qword_10036B8E8);
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  __n128 v48 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000A38C(&qword_10036B8F0);
  uint64_t v46 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  char v45 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_10036B8F8);
  uint64_t v57 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000A38C(&qword_10036B900);
  uint64_t v43 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000A38C(&qword_10036B908);
  uint64_t v42 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000A38C(&qword_10036B910);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v65 = v23;
  uint64_t v66 = v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v42 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1001B4170();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch((char)v67)
  {
    case 1:
      char v76 = 7;
      sub_1001B4218();
      uint64_t v28 = v58;
      uint64_t v27 = v65;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v60;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v30 = v59;
      goto LABEL_5;
    case 2:
      char v77 = 8;
      sub_1001B41C4();
      uint64_t v28 = v61;
      uint64_t v27 = v65;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v63;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v30 = v62;
LABEL_5:
      (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v29);
      return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v26, v27);
    case 3:
      switch(v68)
      {
        case 1:
          char v70 = 1;
          sub_1001B4410();
          uint64_t v33 = v65;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v34 = *(void (**)(char *, uint64_t))(v43 + 8);
          uint64_t v35 = v19;
          uint64_t v36 = &v78;
          goto LABEL_11;
        case 2:
          char v72 = 3;
          sub_1001B4368();
          uint64_t v37 = v45;
          uint64_t v33 = v65;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v34 = *(void (**)(char *, uint64_t))(v46 + 8);
          uint64_t v35 = v37;
          uint64_t v36 = &v79;
LABEL_11:
          uint64_t v38 = *(v36 - 32);
          goto LABEL_16;
        case 3:
          char v73 = 4;
          sub_1001B4314();
          uint64_t v39 = v48;
          uint64_t v33 = v65;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v50);
          goto LABEL_17;
        case 4:
          char v74 = 5;
          sub_1001B42C0();
          uint64_t v40 = v51;
          uint64_t v33 = v65;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v41 = v52;
          uint64_t v38 = v53;
          goto LABEL_15;
        case 5:
          char v75 = 6;
          sub_1001B426C();
          uint64_t v40 = v54;
          uint64_t v33 = v65;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v41 = v55;
          uint64_t v38 = v56;
LABEL_15:
          uint64_t v34 = *(void (**)(char *, uint64_t))(v41 + 8);
          uint64_t v35 = v40;
LABEL_16:
          v34(v35, v38);
LABEL_17:
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v26, v33);
          break;
        default:
          char v69 = 0;
          sub_1001B4464();
          uint64_t v32 = v65;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v42 + 8))(v22, v20);
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v26, v32);
          break;
      }
      return result;
    default:
      char v71 = 2;
      sub_1001B43BC();
      uint64_t v27 = v65;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v17, v15);
      return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v26, v27);
  }
}

uint64_t sub_1001B0404()
{
  return sub_1001AF958(*v0);
}

uint64_t sub_1001B040C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001B2F84(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001B0434(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1001B0440(uint64_t a1)
{
  unint64_t v2 = sub_1001B4170();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B047C(uint64_t a1)
{
  unint64_t v2 = sub_1001B4170();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B04B8(uint64_t a1)
{
  unint64_t v2 = sub_1001B4314();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B04F4(uint64_t a1)
{
  unint64_t v2 = sub_1001B4314();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B0530(uint64_t a1)
{
  unint64_t v2 = sub_1001B41C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B056C(uint64_t a1)
{
  unint64_t v2 = sub_1001B41C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B05A8(uint64_t a1)
{
  unint64_t v2 = sub_1001B4410();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B05E4(uint64_t a1)
{
  unint64_t v2 = sub_1001B4410();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B0620(uint64_t a1)
{
  unint64_t v2 = sub_1001B426C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B065C(uint64_t a1)
{
  unint64_t v2 = sub_1001B426C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B0698(uint64_t a1)
{
  unint64_t v2 = sub_1001B4464();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B06D4(uint64_t a1)
{
  unint64_t v2 = sub_1001B4464();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B0710(uint64_t a1)
{
  unint64_t v2 = sub_1001B4368();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B074C(uint64_t a1)
{
  unint64_t v2 = sub_1001B4368();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B0788(uint64_t a1)
{
  unint64_t v2 = sub_1001B4218();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B07C4(uint64_t a1)
{
  unint64_t v2 = sub_1001B4218();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B0800(uint64_t a1)
{
  unint64_t v2 = sub_1001B43BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B083C(uint64_t a1)
{
  unint64_t v2 = sub_1001B43BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B0878(uint64_t a1)
{
  unint64_t v2 = sub_1001B42C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B08B4(uint64_t a1)
{
  unint64_t v2 = sub_1001B42C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B08F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001B33EC(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1001B0920(void *a1)
{
  return sub_1001AFAA4(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1001B0940()
{
  return sub_1001AF738(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_1001B094C(uint64_t a1, uint64_t a2)
{
  return sub_1001B19CC(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t sub_1001B0968@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_10001F8BC(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1001B0BCCLL);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_10000DBEC(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_1001B0BDC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_1001B0968((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_1001B0CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_1001B0968(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_1001B0D6C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x1001B0FD4);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_10001F8BC(a3, a4);
                  sub_10001F8BC(a1, a2);
                  char v17 = sub_1001B0CB4((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_10000DBEC(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_10001F8BC(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_1001B0CB4(v21, v22, v20, a3, a4);
                  sub_10000DBEC(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_10001F8BC(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_10001F8BC(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_1001B0BDC(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_10000DBEC(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1001B1004(uint64_t a1, uint64_t a2)
{
  sub_100174AE4(a2, (uint64_t)v23);
  uint64_t v4 = v23[0];
  unint64_t v5 = v23[1];
  sub_100174AE4(a1, (uint64_t)&v31);
  switch(v37)
  {
    case 1:
      unint64_t v8 = v31.n128_u64[1];
      uint64_t v9 = v31.n128_u64[0];
      sub_100174AE4(a2, (uint64_t)v27);
      if (v30 != 1) {
        return 0;
      }
      long long v10 = *(_OWORD *)v27;
      if (v8 >> 60 == 15)
      {
        if (*(void *)&v27[8] >> 60 == 15)
        {
          sub_10001FBBC(v4, v5);
          return 1;
        }
        goto LABEL_24;
      }
      if (*(void *)&v27[8] >> 60 == 15)
      {
LABEL_24:
        sub_100179E94(a2, (void (*)(void, void, void, void, void, void, void, void))sub_10001FAFC);
        sub_100179E94(a1, (void (*)(void, void, void, void, void, void, void, void))sub_10001FAFC);
        sub_10000DBD8(v9, v8);
        sub_10000DBD8(v10, *((unint64_t *)&v10 + 1));
        return 0;
      }
      sub_100179E94(a2, (void (*)(void, void, void, void, void, void, void, void))sub_10001FAFC);
      sub_100179E94(a1, (void (*)(void, void, void, void, void, void, void, void))sub_10001FAFC);
      char v22 = sub_1001B0D6C(v9, v8, v10, *((unint64_t *)&v10 + 1));
      sub_100179E94(a2, (void (*)(void, void, void, void, void, void, void, void))sub_10002052C);
      sub_100179E94(a1, (void (*)(void, void, void, void, void, void, void, void))sub_10002052C);
      return (v22 & 1) != 0;
    case 2:
      unint64_t v12 = v31.n128_u64[1];
      unint64_t v11 = v31.n128_u64[0];
      unint64_t v14 = v32;
      unint64_t v13 = v33;
      unint64_t v16 = v34;
      unint64_t v15 = v35;
      unint64_t v17 = v36;
      sub_100174AE4(a2, (uint64_t)v27);
      if (v30 != 2) {
        return 0;
      }
      if (v11 != *(void *)v27) {
        return 0;
      }
      int8x16_t v18 = v28;
      int8x16_t v19 = v29;
      if (__PAIR128__(v14, v12) != *(_OWORD *)&v27[8] && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0;
      }
      if (__PAIR128__(v16, v13) != *(_OWORD *)&v18 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0;
      }
      if (v17)
      {
        if (!v19.i64[1]) {
          return 0;
        }
        if (__PAIR128__(v17, v15) != *(_OWORD *)&v19)
        {
LABEL_32:
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return 0;
          }
        }
      }
      else if (v19.i64[1])
      {
        return 0;
      }
      return 1;
    case 3:
      sub_100174AE4(a2, (uint64_t)v27);
      if (v30 == 3)
      {
        int8x16_t v20 = vorrq_s8(v28, v29);
        if (!(*(void *)&vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)) | *(void *)&v27[16] | *(void *)&v27[8] | *(void *)v27)) {
          return 1;
        }
      }
      return 0;
    default:
      sub_100179E38(&v31, &v38);
      sub_100174AE4(a2, (uint64_t)v27);
      if (!v30)
      {
        sub_100179E38((__n128 *)v27, &v24);
        sub_100179E38(&v38, &v39);
        unint64_t v6 = v39.n128_u64[0];
        switch(v40)
        {
          case 1:
            unint64_t v7 = v39.n128_u64[1];
            sub_100179E38(&v24, &v25);
            if (v26 == 1) {
              goto LABEL_31;
            }
            return 0;
          case 2:
            unint64_t v7 = v39.n128_u64[1];
            sub_100179E38(&v24, &v25);
            if (v26 == 2) {
              goto LABEL_31;
            }
            return 0;
          case 3:
            switch(v39.n128_u64[0])
            {
              case 1uLL:
                sub_100179E38(&v24, &v25);
                return v26 == 3 && *(_OWORD *)&v25 == 1;
              case 2uLL:
                sub_100179E38(&v24, &v25);
                return v26 == 3 && *(_OWORD *)&v25 == 2;
              case 3uLL:
                sub_100179E38(&v24, &v25);
                return v26 == 3 && *(_OWORD *)&v25 == 3;
              case 4uLL:
                sub_100179E38(&v24, &v25);
                return v26 == 3 && *(_OWORD *)&v25 == 4;
              case 5uLL:
                sub_100179E38(&v24, &v25);
                return v26 == 3 && *(_OWORD *)&v25 == 5;
              default:
                sub_100179E38(&v24, &v25);
                return v26 == 3 && *(_OWORD *)&v25 == 0;
            }
          default:
            unint64_t v7 = v39.n128_u64[1];
            sub_100179E38(&v24, &v25);
            if (v26) {
              return 0;
            }
LABEL_31:
            if (__PAIR128__(v7, v6) != *(_OWORD *)&v25) {
              goto LABEL_32;
            }
            return 1;
        }
      }
      return 0;
  }
}

uint64_t sub_1001B1514(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NoticeContext(0);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = &v34[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for NoticeEffect();
  uint64_t v8 = __chkstk_darwin(v7);
  long long v10 = (uint64_t *)&v34[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __chkstk_darwin(v8);
  unint64_t v13 = (void **)&v34[-v12];
  __chkstk_darwin(v11);
  unint64_t v15 = &v34[-v14];
  uint64_t v16 = sub_10000A38C(&qword_10036B7B0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  int8x16_t v19 = &v34[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = (uint64_t)&v19[*(int *)(v17 + 56)];
  sub_1001B282C(a1, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
  sub_1001B282C(a2, v20, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1001B282C((uint64_t)v19, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
      __n128 v25 = *v13;
      uint64_t v26 = (uint64_t)v13[1];
      uint64_t v27 = (uint64_t)v13[2];
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        sub_10017A610(v25, v26, v27);
        goto LABEL_19;
      }
      int8x16_t v28 = *(void **)v20;
      uint64_t v29 = *(void *)(v20 + 8);
      uint64_t v30 = *(void *)(v20 + 16);
      if (v27 == 1)
      {
        if (v30 == 1) {
          goto LABEL_23;
        }
        sub_10017A610(*(void **)v20, *(void *)(v20 + 8), *(void *)(v20 + 16));
        goto LABEL_28;
      }
      if (v30 == 1)
      {

        swift_release();
        goto LABEL_28;
      }
      sub_1000790E8(*(id *)v20, *(void *)(v20 + 8), *(void *)(v20 + 16));
      sub_1000790E8(v25, v26, v27);
      v34[8] = v26 & 1;
      v34[0] = v29 & 1;
      char v33 = sub_100048094(v25, v26 & 1, v27, (uint64_t)v28, v29 & 1, v30);
      sub_10017A610(v28, v29, v30);

      swift_release();
      sub_10017A610(v25, v26, v27);

      swift_release();
      if (v33) {
        goto LABEL_23;
      }
      goto LABEL_28;
    case 2u:
      sub_1001B282C((uint64_t)v19, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
      uint64_t v22 = *v10;
      uint64_t v21 = v10[1];
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
      if (v22 == *(void *)v20 && v21 == *(void *)(v20 + 8))
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_23;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v24)
      {
LABEL_23:
        sub_1001B28FC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
        char v31 = 1;
        return v31 & 1;
      }
LABEL_28:
      sub_1001B28FC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
LABEL_20:
      char v31 = 0;
      return v31 & 1;
    case 3u:
      if (swift_getEnumCaseMultiPayload() == 3) {
        goto LABEL_23;
      }
      goto LABEL_19;
    default:
      sub_1001B282C((uint64_t)v19, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
      if (!swift_getEnumCaseMultiPayload())
      {
        sub_1001B27C8(v20, (uint64_t)v6);
        char v31 = sub_100230F74((uint64_t)v15, (uint64_t)v6);
        sub_1001B28FC((uint64_t)v6, type metadata accessor for NoticeContext);
        sub_1001B28FC((uint64_t)v15, type metadata accessor for NoticeContext);
        sub_1001B28FC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
        return v31 & 1;
      }
      sub_1001B28FC((uint64_t)v15, type metadata accessor for NoticeContext);
LABEL_19:
      sub_10000D78C((uint64_t)v19, &qword_10036B7B0);
      goto LABEL_20;
  }
}

uint64_t sub_1001B19CC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      if (a6 != 1) {
        goto LABEL_39;
      }
      if (a1 != a4 || a2 != a5) {
        goto LABEL_18;
      }
      uint64_t result = 1;
      break;
    case 2:
      if (a6 != 2) {
        goto LABEL_39;
      }
      if (a1 != a4 || a2 != a5) {
        goto LABEL_18;
      }
      uint64_t result = 1;
      break;
    case 3:
      switch(a1)
      {
        case 1:
          if (a6 != 3 || a4 != 1 || a5) {
            goto LABEL_39;
          }
          uint64_t result = 1;
          break;
        case 2:
          if (a6 != 3 || a4 != 2 || a5) {
            goto LABEL_39;
          }
          uint64_t result = 1;
          break;
        case 3:
          if (a6 != 3 || a4 != 3 || a5) {
            goto LABEL_39;
          }
          uint64_t result = 1;
          break;
        case 4:
          if (a6 != 3 || a4 != 4 || a5) {
            goto LABEL_39;
          }
          uint64_t result = 1;
          break;
        case 5:
          if (a6 != 3 || a4 != 5 || a5) {
            goto LABEL_39;
          }
          uint64_t result = 1;
          break;
        default:
          if (a6 != 3 || a5 | a4) {
            goto LABEL_39;
          }
          uint64_t result = 1;
          break;
      }
      break;
    default:
      if (a6)
      {
LABEL_39:
        uint64_t result = 0;
      }
      else if (a1 == a4 && a2 == a5)
      {
        uint64_t result = 1;
      }
      else
      {
LABEL_18:
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      break;
  }
  return result;
}

uint64_t sub_1001B1B78(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x764572656E6E6162 && a2 == 0xEB00000000746E65;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61546E6F74747562 && a2 == 0xEC00000064657070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x46746E6573657270 && a2 == 0xED000064656C6961 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001002C2C30)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

double sub_1001B1D84@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10036B728);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v45 = v3;
  uint64_t v46 = v4;
  __chkstk_darwin(v3);
  uint64_t v49 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_10000A38C(&qword_10036B730);
  uint64_t v47 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  __n128 v48 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036B738);
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10036B740);
  uint64_t v41 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000A38C(&qword_10036B748);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1[3];
  uint64_t v58 = a1;
  sub_10000D6E4(a1, v17);
  sub_1001B257C();
  uint64_t v18 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18) {
    goto LABEL_6;
  }
  __n128 v39 = v12;
  uint64_t v38 = v10;
  uint64_t v20 = v48;
  int8x16_t v19 = v49;
  uint64_t v40 = v14;
  uint64_t v21 = v50;
  *(void *)&long long v51 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v51 + 16) != 1)
  {
    uint64_t v30 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v32 = v31;
    sub_10000A38C(&qword_10035FAC0);
    *unint64_t v32 = &type metadata for NoticeEvent;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v30 - 8) + 104))(v32, enum case for DecodingError.typeMismatch(_:), v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v13);
LABEL_6:
    sub_10000CC5C((uint64_t)v58);
    return result;
  }
  uint64_t v22 = *(unsigned __int8 *)(v51 + 32);
  switch(*(unsigned char *)(v51 + 32))
  {
    case 1:
      LOBYTE(v52) = 1;
      sub_1001B2678();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10015531C();
      uint64_t v34 = v44;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      uint64_t v41 = v22;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v9, v34);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v13);
      uint64_t v29 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      long long v51 = v52;
      break;
    case 2:
      LOBYTE(v52) = 2;
      sub_1001B2624();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v41 = v22;
      sub_1000D9A74();
      uint64_t v35 = v42;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v36 = v40;
      (*(void (**)(char *, uint64_t))(v47 + 8))(v20, v35);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v13);
      long long v51 = v52;
      uint64_t v29 = v53;
      uint64_t v25 = v54;
      uint64_t v26 = v55;
      uint64_t v27 = v56;
      uint64_t v28 = v57;
      break;
    case 3:
      LOBYTE(v52) = 3;
      sub_1001B25D0();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v41 = v22;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v45);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v13);
      uint64_t v29 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      long long v51 = 0u;
      break;
    default:
      LOBYTE(v52) = 0;
      sub_1001B26CC();
      int v23 = v39;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1001B2720();
      uint64_t v24 = v38;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v23, v24);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v13);
      uint64_t v41 = v22;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      long long v51 = v52;
      uint64_t v29 = v53;
      break;
  }
  sub_10000CC5C((uint64_t)v58);
  double result = *(double *)&v51;
  *(_OWORD *)uint64_t v21 = v51;
  *(void *)(v21 + 16) = v29;
  *(void *)(v21 + 24) = v25;
  *(void *)(v21 + 32) = v26;
  *(void *)(v21 + 40) = v27;
  *(void *)(v21 + 48) = v28;
  *(unsigned char *)(v21 + 56) = v41;
  return result;
}

unint64_t sub_1001B257C()
{
  unint64_t result = qword_10036B750;
  if (!qword_10036B750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B750);
  }
  return result;
}

unint64_t sub_1001B25D0()
{
  unint64_t result = qword_10036B758;
  if (!qword_10036B758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B758);
  }
  return result;
}

unint64_t sub_1001B2624()
{
  unint64_t result = qword_10036B760;
  if (!qword_10036B760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B760);
  }
  return result;
}

unint64_t sub_1001B2678()
{
  unint64_t result = qword_10036B768;
  if (!qword_10036B768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B768);
  }
  return result;
}

unint64_t sub_1001B26CC()
{
  unint64_t result = qword_10036B770;
  if (!qword_10036B770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B770);
  }
  return result;
}

unint64_t sub_1001B2720()
{
  unint64_t result = qword_10036B778;
  if (!qword_10036B778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B778);
  }
  return result;
}

unint64_t sub_1001B2774()
{
  unint64_t result = qword_10036B7A8;
  if (!qword_10036B7A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B7A8);
  }
  return result;
}

uint64_t sub_1001B27C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NoticeContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B282C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001B2894(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_100369D60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B28FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for NoticeEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B2A28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NoticeEvent.CodingKeys()
{
  return &type metadata for NoticeEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for NoticeEvent.BannerEventCodingKeys()
{
  return &type metadata for NoticeEvent.BannerEventCodingKeys;
}

ValueMetadata *type metadata accessor for NoticeEvent.ButtonTappedCodingKeys()
{
  return &type metadata for NoticeEvent.ButtonTappedCodingKeys;
}

ValueMetadata *type metadata accessor for NoticeEvent.PresentFailedCodingKeys()
{
  return &type metadata for NoticeEvent.PresentFailedCodingKeys;
}

ValueMetadata *type metadata accessor for NoticeEvent.PresentSucceededCodingKeys()
{
  return &type metadata for NoticeEvent.PresentSucceededCodingKeys;
}

ValueMetadata *type metadata accessor for BannerPresentableEvent()
{
  return &type metadata for BannerPresentableEvent;
}

unint64_t sub_1001B2AB8()
{
  unint64_t result = qword_10036B7B8;
  if (!qword_10036B7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B7B8);
  }
  return result;
}

unint64_t sub_1001B2B10()
{
  unint64_t result = qword_10036B7C0;
  if (!qword_10036B7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B7C0);
  }
  return result;
}

unint64_t sub_1001B2B68()
{
  unint64_t result = qword_10036B7C8;
  if (!qword_10036B7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B7C8);
  }
  return result;
}

unint64_t sub_1001B2BC0()
{
  unint64_t result = qword_10036B7D0;
  if (!qword_10036B7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B7D0);
  }
  return result;
}

unint64_t sub_1001B2C18()
{
  unint64_t result = qword_10036B7D8;
  if (!qword_10036B7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B7D8);
  }
  return result;
}

unint64_t sub_1001B2C70()
{
  unint64_t result = qword_10036B7E0;
  if (!qword_10036B7E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B7E0);
  }
  return result;
}

unint64_t sub_1001B2CC8()
{
  unint64_t result = qword_10036B7E8;
  if (!qword_10036B7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B7E8);
  }
  return result;
}

unint64_t sub_1001B2D20()
{
  unint64_t result = qword_10036B7F0;
  if (!qword_10036B7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B7F0);
  }
  return result;
}

unint64_t sub_1001B2D78()
{
  unint64_t result = qword_10036B7F8;
  if (!qword_10036B7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B7F8);
  }
  return result;
}

unint64_t sub_1001B2DD0()
{
  unint64_t result = qword_10036B800;
  if (!qword_10036B800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B800);
  }
  return result;
}

unint64_t sub_1001B2E28()
{
  unint64_t result = qword_10036B808;
  if (!qword_10036B808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B808);
  }
  return result;
}

unint64_t sub_1001B2E80()
{
  unint64_t result = qword_10036B810;
  if (!qword_10036B810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B810);
  }
  return result;
}

unint64_t sub_1001B2ED8()
{
  unint64_t result = qword_10036B818;
  if (!qword_10036B818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B818);
  }
  return result;
}

unint64_t sub_1001B2F30()
{
  unint64_t result = qword_10036B820;
  if (!qword_10036B820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B820);
  }
  return result;
}

uint64_t sub_1001B2F84(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E6964616F6CLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64616F4C646964 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x41746F4E6C6C6977 && a2 == 0xED00007261657070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657070416C6C6977 && a2 == 0xEA00000000007261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6165707041646964 && a2 == 0xE900000000000072 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E6172546C6C6977 && a2 == 0xEE006E6F69746973 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x736E617254646964 && a2 == 0xED00006E6F697469 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x617369446C6C6977 && a2 == 0xED00007261657070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7061736944646964 && a2 == 0xEC00000072616570)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t sub_1001B33EC(void *a1)
{
  uint64_t v78 = sub_10000A38C(&qword_10036B828);
  uint64_t v63 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  unint64_t v82 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000A38C(&qword_10036B830);
  uint64_t v76 = *(void *)(v3 - 8);
  uint64_t v77 = v3;
  __chkstk_darwin(v3);
  uint64_t v86 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_10000A38C(&qword_10036B838);
  uint64_t v75 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v81 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036B840);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v73 = v6;
  uint64_t v74 = v7;
  __chkstk_darwin(v6);
  uint64_t v84 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036B848);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v71 = v9;
  uint64_t v72 = v10;
  __chkstk_darwin(v9);
  uint64_t v83 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000A38C(&qword_10036B850);
  uint64_t v68 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v79 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_10000A38C(&qword_10036B858);
  uint64_t v69 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v80 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000A38C(&qword_10036B860);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000A38C(&qword_10036B868);
  uint64_t v64 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000A38C(&qword_10036B870);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a1[3];
  char v87 = a1;
  sub_10000D6E4(a1, v23);
  sub_1001B4170();
  uint64_t v24 = v88;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v24)
  {
    uint64_t v61 = v18;
    uint64_t v60 = v16;
    uint64_t v26 = v83;
    uint64_t v25 = v84;
    uint64_t v62 = 0;
    uint64_t v28 = v85;
    uint64_t v27 = v86;
    uint64_t v88 = v20;
    uint64_t v29 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v20 = v29;
    if (*(void *)(v29 + 16) == 1)
    {
      switch(*(unsigned char *)(v29 + 32))
      {
        case 1:
          char v90 = 1;
          sub_1001B4410();
          uint64_t v35 = v62;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v35) {
            goto LABEL_22;
          }
          (*(void (**)(char *, uint64_t))(v66 + 8))(v15, v67);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v88 + 8))(v22, v19);
          uint64_t v20 = 1;
          break;
        case 2:
          char v91 = 2;
          sub_1001B43BC();
          uint64_t v36 = v80;
          uint64_t v37 = v62;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v37) {
            goto LABEL_22;
          }
          uint64_t v38 = v19;
          __n128 v39 = v22;
          uint64_t v40 = v65;
          uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v69 + 8))(v36, v40);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v88 + 8))(v39, v38);
          break;
        case 3:
          char v92 = 3;
          sub_1001B4368();
          uint64_t v41 = v79;
          uint64_t v42 = v62;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v42) {
            goto LABEL_22;
          }
          (*(void (**)(char *, uint64_t))(v68 + 8))(v41, v70);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v88 + 8))(v22, v19);
          uint64_t v20 = 2;
          break;
        case 4:
          char v93 = 4;
          sub_1001B4314();
          uint64_t v43 = v62;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v43) {
            goto LABEL_22;
          }
          (*(void (**)(char *, uint64_t))(v72 + 8))(v26, v71);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v88 + 8))(v22, v19);
          uint64_t v20 = 3;
          break;
        case 5:
          char v94 = 5;
          sub_1001B42C0();
          uint64_t v44 = v62;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v44) {
            goto LABEL_22;
          }
          (*(void (**)(char *, uint64_t))(v74 + 8))(v25, v73);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v88 + 8))(v22, v19);
          uint64_t v20 = 4;
          break;
        case 6:
          char v95 = 6;
          sub_1001B426C();
          uint64_t v45 = v81;
          uint64_t v46 = v62;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v46) {
            goto LABEL_22;
          }
          (*(void (**)(char *, uint64_t))(v75 + 8))(v45, v28);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v88 + 8))(v22, v19);
          uint64_t v20 = 5;
          break;
        case 7:
          char v96 = 7;
          sub_1001B4218();
          uint64_t v47 = v27;
          uint64_t v48 = v62;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v48) {
            goto LABEL_22;
          }
          uint64_t v49 = v19;
          uint64_t v50 = v77;
          uint64_t v51 = KeyedDecodingContainer.decode(_:forKey:)();
          uint64_t v52 = v88;
          uint64_t v20 = v51;
          (*(void (**)(char *, uint64_t))(v76 + 8))(v47, v50);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v52 + 8))(v22, v49);
          break;
        case 8:
          char v97 = 8;
          sub_1001B41C4();
          uint64_t v53 = v82;
          uint64_t v54 = v62;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v54) {
            goto LABEL_22;
          }
          uint64_t v86 = (char *)v19;
          uint64_t v56 = v78;
          uint64_t v57 = KeyedDecodingContainer.decode(_:forKey:)();
          uint64_t v58 = v88;
          uint64_t v20 = v57;
          (*(void (**)(char *, uint64_t))(v63 + 8))(v53, v56);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, char *))(v58 + 8))(v22, v86);
          break;
        default:
          char v89 = 0;
          sub_1001B4464();
          uint64_t v30 = v61;
          uint64_t v31 = v62;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v31)
          {
LABEL_22:
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v88 + 8))(v22, v19);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v64 + 8))(v30, v60);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v88 + 8))(v22, v19);
            uint64_t v20 = 0;
          }
          break;
      }
    }
    else
    {
      uint64_t v32 = v19;
      uint64_t v33 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v20 = v34;
      sub_10000A38C(&qword_10035FAC0);
      *(void *)uint64_t v20 = &type metadata for BannerPresentableEvent;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v33 - 8) + 104))(v20, enum case for DecodingError.typeMismatch(_:), v33);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v88 + 8))(v22, v32);
    }
  }
  sub_10000CC5C((uint64_t)v87);
  return v20;
}

unint64_t sub_1001B4170()
{
  unint64_t result = qword_10036B878;
  if (!qword_10036B878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B878);
  }
  return result;
}

unint64_t sub_1001B41C4()
{
  unint64_t result = qword_10036B880;
  if (!qword_10036B880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B880);
  }
  return result;
}

unint64_t sub_1001B4218()
{
  unint64_t result = qword_10036B888;
  if (!qword_10036B888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B888);
  }
  return result;
}

unint64_t sub_1001B426C()
{
  unint64_t result = qword_10036B890;
  if (!qword_10036B890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B890);
  }
  return result;
}

unint64_t sub_1001B42C0()
{
  unint64_t result = qword_10036B898;
  if (!qword_10036B898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B898);
  }
  return result;
}

unint64_t sub_1001B4314()
{
  unint64_t result = qword_10036B8A0;
  if (!qword_10036B8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B8A0);
  }
  return result;
}

unint64_t sub_1001B4368()
{
  unint64_t result = qword_10036B8A8;
  if (!qword_10036B8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B8A8);
  }
  return result;
}

unint64_t sub_1001B43BC()
{
  unint64_t result = qword_10036B8B0;
  if (!qword_10036B8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B8B0);
  }
  return result;
}

unint64_t sub_1001B4410()
{
  unint64_t result = qword_10036B8B8;
  if (!qword_10036B8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B8B8);
  }
  return result;
}

unint64_t sub_1001B4464()
{
  unint64_t result = qword_10036B8C0;
  if (!qword_10036B8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B8C0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BannerPresentableEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B4584);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BannerPresentableEvent.CodingKeys()
{
  return &type metadata for BannerPresentableEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for BannerPresentableEvent.LoadingCodingKeys()
{
  return &type metadata for BannerPresentableEvent.LoadingCodingKeys;
}

ValueMetadata *type metadata accessor for BannerPresentableEvent.DidLoadCodingKeys()
{
  return &type metadata for BannerPresentableEvent.DidLoadCodingKeys;
}

ValueMetadata *type metadata accessor for BannerPresentableEvent.WillNotAppearCodingKeys()
{
  return &type metadata for BannerPresentableEvent.WillNotAppearCodingKeys;
}

ValueMetadata *type metadata accessor for BannerPresentableEvent.WillAppearCodingKeys()
{
  return &type metadata for BannerPresentableEvent.WillAppearCodingKeys;
}

ValueMetadata *type metadata accessor for BannerPresentableEvent.DidAppearCodingKeys()
{
  return &type metadata for BannerPresentableEvent.DidAppearCodingKeys;
}

ValueMetadata *type metadata accessor for BannerPresentableEvent.WillTransitionCodingKeys()
{
  return &type metadata for BannerPresentableEvent.WillTransitionCodingKeys;
}

ValueMetadata *type metadata accessor for BannerPresentableEvent.DidTransitionCodingKeys()
{
  return &type metadata for BannerPresentableEvent.DidTransitionCodingKeys;
}

ValueMetadata *type metadata accessor for BannerPresentableEvent.WillDisappearCodingKeys()
{
  return &type metadata for BannerPresentableEvent.WillDisappearCodingKeys;
}

unsigned char *_s17proximitycontrold11NoticeEventO21BannerEventCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001B46D8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BannerPresentableEvent.DidDisappearCodingKeys()
{
  return &type metadata for BannerPresentableEvent.DidDisappearCodingKeys;
}

unint64_t sub_1001B4714()
{
  unint64_t result = qword_10036B918;
  if (!qword_10036B918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B918);
  }
  return result;
}

unint64_t sub_1001B476C()
{
  unint64_t result = qword_10036B920;
  if (!qword_10036B920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B920);
  }
  return result;
}

unint64_t sub_1001B47C4()
{
  unint64_t result = qword_10036B928;
  if (!qword_10036B928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B928);
  }
  return result;
}

unint64_t sub_1001B481C()
{
  unint64_t result = qword_10036B930;
  if (!qword_10036B930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B930);
  }
  return result;
}

unint64_t sub_1001B4874()
{
  unint64_t result = qword_10036B938;
  if (!qword_10036B938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B938);
  }
  return result;
}

unint64_t sub_1001B48CC()
{
  unint64_t result = qword_10036B940;
  if (!qword_10036B940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B940);
  }
  return result;
}

unint64_t sub_1001B4924()
{
  unint64_t result = qword_10036B948;
  if (!qword_10036B948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B948);
  }
  return result;
}

unint64_t sub_1001B497C()
{
  unint64_t result = qword_10036B950;
  if (!qword_10036B950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B950);
  }
  return result;
}

unint64_t sub_1001B49D4()
{
  unint64_t result = qword_10036B958;
  if (!qword_10036B958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B958);
  }
  return result;
}

unint64_t sub_1001B4A2C()
{
  unint64_t result = qword_10036B960;
  if (!qword_10036B960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B960);
  }
  return result;
}

unint64_t sub_1001B4A84()
{
  unint64_t result = qword_10036B968;
  if (!qword_10036B968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B968);
  }
  return result;
}

unint64_t sub_1001B4ADC()
{
  unint64_t result = qword_10036B970;
  if (!qword_10036B970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B970);
  }
  return result;
}

unint64_t sub_1001B4B34()
{
  unint64_t result = qword_10036B978;
  if (!qword_10036B978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B978);
  }
  return result;
}

unint64_t sub_1001B4B8C()
{
  unint64_t result = qword_10036B980;
  if (!qword_10036B980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B980);
  }
  return result;
}

unint64_t sub_1001B4BE4()
{
  unint64_t result = qword_10036B988;
  if (!qword_10036B988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B988);
  }
  return result;
}

unint64_t sub_1001B4C3C()
{
  unint64_t result = qword_10036B990;
  if (!qword_10036B990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B990);
  }
  return result;
}

unint64_t sub_1001B4C94()
{
  unint64_t result = qword_10036B998;
  if (!qword_10036B998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B998);
  }
  return result;
}

unint64_t sub_1001B4CEC()
{
  unint64_t result = qword_10036B9A0;
  if (!qword_10036B9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B9A0);
  }
  return result;
}

unint64_t sub_1001B4D44()
{
  unint64_t result = qword_10036B9A8;
  if (!qword_10036B9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B9A8);
  }
  return result;
}

unint64_t sub_1001B4D9C()
{
  unint64_t result = qword_10036B9B0;
  if (!qword_10036B9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B9B0);
  }
  return result;
}

unint64_t sub_1001B4DF4()
{
  unint64_t result = qword_10036B9B8;
  if (!qword_10036B9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B9B8);
  }
  return result;
}

unint64_t sub_1001B4E4C()
{
  unint64_t result = qword_10036B9C0;
  if (!qword_10036B9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B9C0);
  }
  return result;
}

unint64_t sub_1001B4EA4()
{
  unint64_t result = qword_10036B9C8;
  if (!qword_10036B9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B9C8);
  }
  return result;
}

unint64_t sub_1001B4EFC()
{
  unint64_t result = qword_10036B9D0;
  if (!qword_10036B9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036B9D0);
  }
  return result;
}

id sub_1001B4F50()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC17proximitycontrold28HandoffEnabledSettingManager__transferToHomePod;
  uint64_t v3 = qword_10035A508;
  unsigned int v4 = v1;
  if (v3 != -1) {
    swift_once();
  }
  id v5 = *(id *)(qword_1003AC738 + 24);
  char v6 = sub_1000FD938();

  sub_10000A38C(&qword_10035E150);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  *(unsigned char *)(v7 + 24) = v6 & 1;
  *(void *)&v1[v2] = v7;
  *(void *)&v4[OBJC_IVAR____TtC17proximitycontrold28HandoffEnabledSettingManager_tasks] = &_swiftEmptySetSingleton;

  v15.receiver = v4;
  v15.super_class = (Class)type metadata accessor for HandoffEnabledSettingManager();
  id v8 = [super init];
  uint64_t v9 = qword_10035A588;
  id v10 = v8;
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v11 = (void *)qword_1003AC858;
  if (qword_1003AC858)
  {
    id v12 = v10;
    NSString v13 = String._bridgeToObjectiveC()();
    [v11 addObserver:v12 forKeyPath:v13 options:1 context:0];
  }
  return v10;
}

id sub_1001B5100()
{
  id v1 = sub_1001F67B4();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  if (qword_10035A588 != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)qword_1003AC858;
  if (qword_1003AC858)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    [v3 removeObserver:v0 forKeyPath:v4];
  }
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for HandoffEnabledSettingManager();
  return [super dealloc];
}

uint64_t type metadata accessor for HandoffEnabledSettingManager()
{
  return self;
}

uint64_t sub_1001B53D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10036BF50);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = sub_1001F67B4();
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 ulog:40 message:v7];

  sub_1001B58E8();
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v8 = *(id *)(qword_1003AC750 + 640);
  int v9 = sub_100100D88();

  id v10 = *(void **)(qword_1003AC750 + 640);
  if (v9 == 2)
  {
    uint64_t v11 = *(void **)((char *)v10 + *(void *)((swift_isaMask & *v10) + 0x70));
    if (v11)
    {
      uint64_t v12 = *(unsigned __int8 *)(*(void *)(v1
                                           + OBJC_IVAR____TtC17proximitycontrold28HandoffEnabledSettingManager__transferToHomePod)
                               + 24);
      NSString v13 = v10;
      id v14 = v11;
      NSString v15 = String._bridgeToObjectiveC()();
      [v14 setBool:v12 forKey:v15];
    }
  }
  else
  {
    uint64_t v16 = v10;
    char v17 = sub_100100D88();

    int v18 = *(unsigned __int8 *)(*(void *)(v1
                                         + OBJC_IVAR____TtC17proximitycontrold28HandoffEnabledSettingManager__transferToHomePod)
                             + 24);
    if (v17 == 2 || v18 != (v17 & 1)) {
      sub_1001B6790(v18);
    }
  }
  swift_retain();
  uint64_t v23 = sub_100104B88();
  sub_10000A38C((uint64_t *)&unk_10036BFE0);
  sub_10000B010((unint64_t *)&unk_100363D30, (uint64_t *)&unk_10036BFE0);
  uint64_t v20 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
  uint64_t v23 = v20;
  sub_10000A38C(&qword_10035ACA0);
  sub_10000B010(&qword_10035ACB0, &qword_10035ACA0);
  Publisher.filter(_:)();
  swift_release();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_10000B010(&qword_10036BFF0, &qword_10036BF50);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1001B57F8(char *a1)
{
  char v1 = *a1;
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v2 = *(id *)(qword_1003AC750 + 640);
  char v3 = sub_100100D88();

  if (v3 == 2) {
    char v4 = 1;
  }
  else {
    char v4 = v3 ^ v1;
  }
  return v4 & 1;
}

void sub_1001B588C(char *a1)
{
  char v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    char v3 = (void *)Strong;
    sub_1001B6790(v1);
  }
}

uint64_t sub_1001B58E8()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v49 = *(void *)(v0 - 8);
  uint64_t v50 = v0;
  __chkstk_darwin(v0);
  uint64_t v47 = (char *)&v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for DispatchQoS();
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v45 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v52 = v3;
  uint64_t v53 = v4;
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v44 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v51 = (char *)&v41 - v7;
  uint64_t v8 = sub_10000A38C(&qword_10035E158);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  id v14 = (char *)&v41 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  char v17 = (char *)&v41 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v41 - v18;
  id v20 = sub_1001F67B4();
  NSString v21 = String._bridgeToObjectiveC()();
  [v20 ulog:40 message:v21];

  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v22 = *(id *)(qword_1003AC750 + 608);
  sub_1000FDE78((uint64_t)v19);

  sub_1000B03BC((uint64_t)v19, (uint64_t)v14);
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  if (v25(v14, 1, v23) == 1)
  {
    sub_10000D78C((uint64_t)v14, &qword_10035E158);
    uint64_t v26 = 1;
  }
  else
  {
    id v27 = *(id *)(qword_1003AC750 + 616);
    sub_1000FEB94();

    Date.advanced(by:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v23);
    uint64_t v26 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v17, v26, 1, v23);
  sub_1000B03BC((uint64_t)v17, (uint64_t)v11);
  if (v25(v11, 1, v23) == 1)
  {
    sub_10000D78C((uint64_t)v11, &qword_10035E158);
LABEL_12:
    uint64_t v40 = sub_1001B6084();
    sub_1001B58E8(v40);
    sub_10000D78C((uint64_t)v17, &qword_10035E158);
    return sub_10000D78C((uint64_t)v19, &qword_10035E158);
  }
  Date.timeIntervalSinceNow.getter();
  double v29 = v28;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v23);
  if (v29 <= 0.0) {
    goto LABEL_12;
  }
  if (qword_10035A628 != -1) {
    swift_once();
  }
  id v42 = (id)qword_1003ACB50;
  uint64_t v30 = v44;
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v53 + 8);
  v53 += 8;
  uint64_t v43 = v31;
  v31(v30, v52);
  uint64_t v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_1001B62B4;
  aBlock[5] = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_10032F058;
  uint64_t v33 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v34 = v45;
  static DispatchQoS.unspecified.getter();
  uint64_t v54 = _swiftEmptyArrayStorage;
  sub_1001B6A88((unint64_t *)&qword_100363D50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
  uint64_t v35 = v47;
  uint64_t v36 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v37 = v51;
  uint64_t v38 = v42;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v49 + 8))(v35, v36);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v48);
  v43(v37, v52);
  sub_10000D78C((uint64_t)v17, &qword_10035E158);
  sub_10000D78C((uint64_t)v19, &qword_10035E158);
  swift_release();
  return swift_release();
}

void sub_1001B6004()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_1001B6084();
  }
  swift_beginAccess();
  uint64_t v2 = swift_unknownObjectWeakLoadStrong();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    sub_1001B58E8();
  }
}

uint64_t sub_1001B6084()
{
  uint64_t v0 = sub_10000A38C(&qword_10035E158);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v1);
  uint64_t v5 = &v15[-v4];
  id v6 = sub_1001F67B4();
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 ulog:40 message:v7];

  if (qword_10035A508 != -1) {
    swift_once();
  }
  id v8 = *(id *)(qword_1003AC738 + 24);
  char v9 = sub_1000FD938();

  sub_100260018(v9 & 1);
  if (qword_10035A520 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1003AC750;
  Date.init()();
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 0, 1, v11);
  uint64_t v12 = *(void **)(v10 + 608);
  sub_1000B03BC((uint64_t)v5, (uint64_t)v3);
  id v13 = v12;
  sub_10012BB2C((uint64_t)v3);

  return sub_10000D78C((uint64_t)v5, &qword_10035E158);
}

uint64_t sub_1001B627C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001B62B4()
{
}

uint64_t sub_1001B62BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001B62CC()
{
  return swift_release();
}

void sub_1001B62D4(char *a1)
{
}

void sub_1001B62DC()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v31 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v30 - v4;
  uint64_t v6 = sub_10000A38C(&qword_10035E158);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  char v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v30 - v10;
  id v12 = sub_1001F67B4();
  NSString v13 = String._bridgeToObjectiveC()();
  [v12 ulog:40 message:v13];

  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v14 = *(id *)(qword_1003AC750 + 632);
  uint64_t v32 = sub_1000FE668();

  id v15 = *(id *)(qword_1003AC750 + 624);
  sub_1000FDE78((uint64_t)v11);

  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 48);
  int v17 = v16(v11, 1, v0);
  if (v17)
  {
    sub_10000D78C((uint64_t)v11, &qword_10035E158);
    uint64_t v18 = 0;
    goto LABEL_10;
  }
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v5, v11, v0);
  sub_10000D78C((uint64_t)v11, &qword_10035E158);
  Date.timeIntervalSinceNow.getter();
  if ((~*(void *)&v19 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v19 <= -9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v19 >= 9.22337204e18)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v20 = (uint64_t)v19;
  uint64_t v18 = (uint64_t)v19 / 86400;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v5, v0);
  if (v20 < -86399) {
    uint64_t v18 = -v18;
  }
LABEL_10:
  id v21 = *(id *)(qword_1003AC750 + 592);
  sub_1000FDE78((uint64_t)v9);

  int v22 = v16(v9, 1, v0);
  if (v22)
  {
    sub_10000D78C((uint64_t)v9, &qword_10035E158);
    uint64_t v23 = 0;
    goto LABEL_18;
  }
  uint64_t v24 = v31;
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v31, v9, v0);
  sub_10000D78C((uint64_t)v9, &qword_10035E158);
  Date.timeIntervalSinceNow.getter();
  if ((~*(void *)&v25 & 0x7FF0000000000000) == 0) {
    goto LABEL_24;
  }
  if (v25 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v25 >= 9.22337204e18)
  {
LABEL_26:
    __break(1u);
    return;
  }
  uint64_t v26 = (uint64_t)v25;
  uint64_t v27 = (uint64_t)v25 / 86400;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v24, v0);
  if (v26 >= -86399) {
    uint64_t v23 = v27;
  }
  else {
    uint64_t v23 = -v27;
  }
LABEL_18:
  if (qword_10035A508 != -1) {
    swift_once();
  }
  id v28 = *(id *)(qword_1003AC738 + 24);
  char v29 = sub_1000FD938();

  uint64_t v33 = v32;
  char v34 = 0;
  uint64_t v35 = v18;
  BOOL v36 = v17 != 0;
  uint64_t v37 = v23;
  BOOL v38 = v22 != 0;
  char v39 = v29 & 1;
  sub_100260278();
}

void sub_1001B6790(char a1)
{
  id v2 = sub_1001F67B4();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  if (qword_10035A520 != -1) {
    swift_once();
  }
  uint64_t v4 = *(void **)(qword_1003AC750 + 640);
  uint64_t v5 = *(void **)((char *)v4 + *(void *)((swift_isaMask & *v4) + 0x70));
  if (v5)
  {
    uint64_t v6 = v4;
    id v7 = v5;
    NSString v8 = String._bridgeToObjectiveC()();
    [v7 setBool:a1 & 1 forKey:v8];
  }
  sub_1001B62DC();
  if (a1)
  {
    sub_1001E2704();
  }
}

uint64_t sub_1001B6918(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (a2) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = 7104878;
  }
  if (a2) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (void *)0xE300000000000000;
  }
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  id v7 = sub_1001F67B4();
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 ulog:v8 message:0xD000000000000035, 0x80000001002C2DA0];
  swift_bridgeObjectRelease();

  if (qword_10035A508 != -1) {
    swift_once();
  }
  id v9 = *(id *)(qword_1003AC738 + 24);
  char v10 = sub_1000FD938();

  *(unsigned char *)(*(void *)(v3 + OBJC_IVAR____TtC17proximitycontrold28HandoffEnabledSettingManager__transferToHomePod)
           + 24) = v10 & 1;
  swift_retain();
  sub_100104B88();
  CurrentValueSubject.send(_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_1001B6A88(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001B6AD0(void *a1)
{
  uint64_t v32 = sub_10000A38C(&qword_10036BAE8);
  uint64_t v29 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10000A38C(&qword_10036BAF0);
  uint64_t v30 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  BOOL v38 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v37 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v9 = (char *)&v28 - v8;
  uint64_t v10 = _s8CardInfoOMa();
  __chkstk_darwin(v10);
  id v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000A38C(&qword_10036BAF8);
  uint64_t v35 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  id v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1001B8180();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1001B82E0(v36, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = v29;
    BOOL v38 = (char *)*((void *)v12 + 2);
    char v45 = 1;
    sub_1001B81D4();
    uint64_t v16 = v39;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v44 = 0;
    uint64_t v17 = v32;
    uint64_t v18 = v34;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    if (!v18)
    {
      char v43 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v3, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v14, v16);
  }
  else
  {
    double v19 = &v12[*(int *)(sub_10000A38C(&qword_10035E428) + 48)];
    uint64_t v20 = v31;
    id v21 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v21(v9, v12, v5);
    v21(v37, v19, v5);
    char v42 = 0;
    sub_1001B828C();
    uint64_t v22 = v39;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v41 = 0;
    sub_1001B8344(&qword_100363E00);
    uint64_t v23 = v33;
    uint64_t v24 = v34;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v24)
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v38, v23);
      double v25 = *(void (**)(char *, uint64_t))(v20 + 8);
      v25(v37, v5);
      v25(v9, v5);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v14, v22);
    }
    else
    {
      char v40 = 1;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v38, v23);
      uint64_t v27 = *(void (**)(char *, uint64_t))(v20 + 8);
      v27(v37, v5);
      v27(v9, v5);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v14, v39);
    }
  }
}

uint64_t sub_1001B7080@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10036BAB8);
  uint64_t v51 = *(void *)(v3 - 8);
  uint64_t v52 = v3;
  __chkstk_darwin(v3);
  uint64_t v57 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10036BAC0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v53 = v5;
  uint64_t v54 = v6;
  __chkstk_darwin(v5);
  uint64_t v56 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036BAC8);
  uint64_t v55 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = _s8CardInfoOMa();
  uint64_t v12 = __chkstk_darwin(v11);
  id v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v47 - v16;
  __chkstk_darwin(v15);
  double v19 = (char *)&v47 - v18;
  uint64_t v20 = a1[3];
  uint64_t v59 = a1;
  sub_10000D6E4(a1, v20);
  sub_1001B8180();
  uint64_t v21 = v60;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v21)
  {
    uint64_t v48 = (uint64_t *)v14;
    uint64_t v49 = v19;
    uint64_t v22 = v56;
    uint64_t v23 = v57;
    uint64_t v50 = (uint64_t *)v17;
    uint64_t v60 = v11;
    uint64_t v24 = v58;
    uint64_t v25 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v26 = v25;
    uint64_t v27 = (char *)v8;
    if (*(void *)(v25 + 16) == 1)
    {
      if (*(unsigned char *)(v25 + 32))
      {
        char v66 = 1;
        sub_1001B81D4();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        char v65 = 0;
        uint64_t v28 = v52;
        uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v37 = v36;
        uint64_t v54 = v29;
        uint64_t v47 = v26;
        uint64_t v56 = v27;
        char v64 = 1;
        uint64_t v38 = KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v39 = (void (**)(char *, char *))(v55 + 8);
        uint64_t v43 = v42;
        char v44 = *(void (**)(char *, uint64_t))(v51 + 8);
        uint64_t v55 = v38;
        v44(v23, v28);
        swift_bridgeObjectRelease();
        (*v39)(v10, v56);
        char v45 = v48;
        *uint64_t v48 = v54;
        v45[1] = v37;
        v45[2] = v55;
        void v45[3] = v43;
      }
      else
      {
        char v63 = 0;
        sub_1001B828C();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v47 = v26;
        type metadata accessor for UUID();
        char v62 = 0;
        sub_1001B8344(&qword_100363E18);
        char v45 = v50;
        uint64_t v34 = v22;
        uint64_t v35 = v53;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        sub_10000A38C(&qword_10035E428);
        char v61 = 1;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v40 = v35;
        uint64_t v41 = v55;
        (*(void (**)(char *, uint64_t))(v54 + 8))(v34, v40);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v8);
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v46 = (uint64_t)v49;
      sub_1001B8228((uint64_t)v45, (uint64_t)v49);
      sub_1001B8228(v46, v24);
    }
    else
    {
      uint64_t v30 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v32 = v31;
      sub_10000A38C(&qword_10035FAC0);
      *uint64_t v32 = v60;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v30 - 8) + 104))(v32, enum case for DecodingError.typeMismatch(_:), v30);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v10, v8);
    }
  }
  return sub_10000CC5C((uint64_t)v59);
}

uint64_t sub_1001B777C()
{
  if (*v0) {
    return 0x756F52616964656DLL;
  }
  else {
    return 0x74696B656D6F68;
  }
}

uint64_t sub_1001B77BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001B87C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B77E4(uint64_t a1)
{
  unint64_t v2 = sub_1001B8180();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B7820(uint64_t a1)
{
  unint64_t v2 = sub_1001B8180();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B785C()
{
  if (*v0) {
    return 0x4449656D6F68;
  }
  else {
    return 0x726F737365636361;
  }
}

uint64_t sub_1001B789C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001B88C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B78C4(uint64_t a1)
{
  unint64_t v2 = sub_1001B828C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B7900(uint64_t a1)
{
  unint64_t v2 = sub_1001B828C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B793C()
{
  if (*v0) {
    return 1701667182;
  }
  else {
    return 25705;
  }
}

uint64_t sub_1001B7964@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001B89CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B798C(uint64_t a1)
{
  unint64_t v2 = sub_1001B81D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B79C8(uint64_t a1)
{
  unint64_t v2 = sub_1001B81D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B7A04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001B7080(a1, a2);
}

uint64_t sub_1001B7A1C(void *a1)
{
  return sub_1001B6AD0(a1);
}

uint64_t *sub_1001B7A34(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      uint64_t v7 = a2[2];
      uint64_t v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v10 = type metadata accessor for UUID();
      uint64_t v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16);
      v11(a1, a2, v10);
      uint64_t v12 = sub_10000A38C(&qword_10035E428);
      v11((uint64_t *)((char *)a1 + *(int *)(v12 + 48)), (uint64_t *)((char *)a2 + *(int *)(v12 + 48)), v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1001B7B78(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = type metadata accessor for UUID();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v5)((void *)(v3 - 8), a1, v3);
    uint64_t v4 = a1 + *(int *)(sub_10000A38C(&qword_10035E428) + 48);
    return v5(v4, v3);
  }
}

void *sub_1001B7C50(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    uint64_t v5 = a2[2];
    uint64_t v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = sub_10000A38C(&qword_10035E428);
    v8((void *)((char *)a1 + *(int *)(v9 + 48)), (void *)((char *)a2 + *(int *)(v9 + 48)), v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_1001B7D44(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_1001B7E58((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v4 = type metadata accessor for UUID();
      uint64_t v5 = *(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16);
      v5(a1, a2, v4);
      uint64_t v6 = sub_10000A38C(&qword_10035E428);
      v5((void *)((char *)a1 + *(int *)(v6 + 48)), (void *)((char *)a2 + *(int *)(v6 + 48)), v4);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1001B7E58(uint64_t a1)
{
  uint64_t v2 = _s8CardInfoOMa();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s8CardInfoOMa()
{
  uint64_t result = qword_10036BA80;
  if (!qword_10036BA80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *sub_1001B7F00(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for UUID();
    uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    uint64_t v8 = sub_10000A38C(&qword_10035E428);
    v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_1001B7FE8(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001B7E58((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for UUID();
      uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      uint64_t v8 = sub_10000A38C(&qword_10035E428);
      v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1001B80E0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    _OWORD v2[4] = v2;
    v2[5] = " ";
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_1001B8180()
{
  unint64_t result = qword_10036BAD0;
  if (!qword_10036BAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036BAD0);
  }
  return result;
}

unint64_t sub_1001B81D4()
{
  unint64_t result = qword_10036BAD8;
  if (!qword_10036BAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036BAD8);
  }
  return result;
}

uint64_t sub_1001B8228(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s8CardInfoOMa();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001B828C()
{
  unint64_t result = qword_10036BAE0;
  if (!qword_10036BAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036BAE0);
  }
  return result;
}

uint64_t sub_1001B82E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s8CardInfoOMa();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B8344(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *_s8CardInfoO10CodingKeysOMa()
{
  return &_s8CardInfoO10CodingKeysON;
}

ValueMetadata *_s8CardInfoO17HomekitCodingKeysOMa()
{
  return &_s8CardInfoO17HomekitCodingKeysON;
}

unsigned char *_s8CardInfoO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B8478);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s8CardInfoO20MediaRouteCodingKeysOMa()
{
  return &_s8CardInfoO20MediaRouteCodingKeysON;
}

unint64_t sub_1001B84B4()
{
  unint64_t result = qword_10036BB00;
  if (!qword_10036BB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036BB00);
  }
  return result;
}

unint64_t sub_1001B850C()
{
  unint64_t result = qword_10036BB08;
  if (!qword_10036BB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036BB08);
  }
  return result;
}

unint64_t sub_1001B8564()
{
  unint64_t result = qword_10036BB10;
  if (!qword_10036BB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036BB10);
  }
  return result;
}

unint64_t sub_1001B85BC()
{
  unint64_t result = qword_10036BB18;
  if (!qword_10036BB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036BB18);
  }
  return result;
}

unint64_t sub_1001B8614()
{
  unint64_t result = qword_10036BB20;
  if (!qword_10036BB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036BB20);
  }
  return result;
}

unint64_t sub_1001B866C()
{
  unint64_t result = qword_10036BB28;
  if (!qword_10036BB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036BB28);
  }
  return result;
}

unint64_t sub_1001B86C4()
{
  unint64_t result = qword_10036BB30;
  if (!qword_10036BB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036BB30);
  }
  return result;
}

unint64_t sub_1001B871C()
{
  unint64_t result = qword_10036BB38;
  if (!qword_10036BB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036BB38);
  }
  return result;
}

unint64_t sub_1001B8774()
{
  unint64_t result = qword_10036BB40;
  if (!qword_10036BB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036BB40);
  }
  return result;
}

uint64_t sub_1001B87C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74696B656D6F68 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x756F52616964656DLL && a2 == 0xEA00000000006574)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001B88C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726F737365636361 && a2 == 0xEB00000000444979;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4449656D6F68 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001B89CC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t RPIdentityType.description.getter(unsigned int a1)
{
  sub_1001B8AC0(a1);

  return String.init(cString:)();
}

const char *sub_1001B8AC0(unsigned int a1)
{
  if (a1 > 0x10) {
    return "?";
  }
  else {
    return (&off_10032F268)[a1];
  }
}

uint64_t sub_1001B8AE4()
{
  sub_1001B8AC0(*v0);

  return String.init(cString:)();
}

unsigned char *storeEnumTagSinglePayload for HapticPattern(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B8BDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HapticPattern()
{
  return &type metadata for HapticPattern;
}

void sub_1001B8C14()
{
  qword_1003AC9F8 = (uint64_t)&off_10031E558;
}

uint64_t sub_1001B8C28@<X0>(void *a1@<X8>)
{
  if (qword_10035A5D8 != -1) {
    swift_once();
  }
  *a1 = qword_1003AC9F8;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001B8C94()
{
  uint64_t result = 6710895;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x726567656967;
      break;
    case 2:
      uint64_t result = 1700948342;
      break;
    case 3:
      uint64_t result = 0x726570706174;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001B8D10()
{
  unint64_t result = qword_10036BB48;
  if (!qword_10036BB48)
  {
    sub_10000A3D0(&qword_10036BB50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036BB48);
  }
  return result;
}

unint64_t sub_1001B8D70()
{
  unint64_t result = qword_10036BB58;
  if (!qword_10036BB58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036BB58);
  }
  return result;
}

uint64_t sub_1001B8DC4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000A38C((uint64_t *)&unk_1003718E0);
    BOOL v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    BOOL v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  unsigned int v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_100027B10(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    void v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100027B00(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_100027B00(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_100027B00(v36, v37);
    sub_100027B00(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_100027B00(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_10002E7C4();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_1001B918C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_10000A38C(&qword_100371980);
    BOOL v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    BOOL v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v36 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v35 = (unint64_t)(63 - v3) >> 6;
  unsigned int v6 = &v41;
  uint64_t v7 = &v43;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = (char *)&type metadata for Any + 8;
  unint64_t v11 = &type metadata for Data;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v35) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v36 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v35) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v35) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v35) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v36 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v35)
          {
            unint64_t v21 = *(void *)(v36 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v35) {
                break;
              }
              unint64_t v21 = *(void *)(v36 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_10002E7C4();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v38 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    uint64_t v24 = 16 * v19;
    BOOL v25 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v26 = (uint64_t *)(*(void *)(v1 + 56) + v24);
    uint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    uint64_t v39 = *v25;
    uint64_t v40 = v25[1];
    swift_bridgeObjectRetain();
    sub_10001F8BC(v27, v28);
    swift_dynamicCast();
    sub_100027B00(v6, v7);
    sub_100027B00(v7, v44);
    sub_100027B00(v44, &v42);
    unint64_t result = sub_100269CBC(v39, v40);
    unint64_t v29 = result;
    if (v30)
    {
      int64_t v37 = i;
      unint64_t v12 = v7;
      int64_t v13 = v6;
      uint64_t v14 = v1;
      int64_t v15 = v11;
      int64_t v16 = v10;
      uint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v17 = v39;
      v17[1] = v40;
      uint64_t v10 = v16;
      unint64_t v11 = v15;
      uint64_t v1 = v14;
      unsigned int v6 = v13;
      uint64_t v7 = v12;
      int64_t i = v37;
      uint64_t v18 = (_OWORD *)(v2[7] + 32 * v29);
      sub_10000CC5C((uint64_t)v18);
      unint64_t result = (unint64_t)sub_100027B00(&v42, v18);
      unint64_t v5 = v38;
      if (!v38) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v31 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v31 = v39;
    v31[1] = v40;
    unint64_t result = (unint64_t)sub_100027B00(&v42, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v32 = v2[2];
    BOOL v33 = __OFADD__(v32, 1);
    uint64_t v34 = v32 + 1;
    if (v33) {
      goto LABEL_34;
    }
    v2[2] = v34;
    unint64_t v5 = v38;
    if (!v38) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v38 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1001B94FC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000A38C((uint64_t *)&unk_1003718E0);
    BOOL v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    BOOL v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  unsigned int v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_100027B00(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_100027B00(v35, v36);
    sub_100027B00(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_100027B00(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_10002E7C4();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1001B98A8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000A38C((uint64_t *)&unk_1003718E0);
    BOOL v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    BOOL v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  unsigned int v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_100027B00(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_100027B00(v35, v36);
    sub_100027B00(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_100027B00(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_10002E7C4();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1001B9C68()
{
  type metadata accessor for HandoffFeedbackManager_Legacy();
  swift_allocObject();
  uint64_t result = sub_1001B9CA4();
  qword_1003ACA00 = result;
  return result;
}

uint64_t sub_1001B9CA4()
{
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 24) = 0;
  sub_10000A38C(&qword_10035E810);
  swift_allocObject();
  *(void *)(v0 + 32) = PassthroughSubject.init()();
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(void *)(v0 + 152) = &_swiftEmptySetSingleton;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(void *)(v0 + 176) = 0x3FF0000000000000;
  *(void *)(v0 + 184) = 18;
  *(_DWORD *)(v0 + 192) = 0;
  *(unsigned char *)(v0 + 196) = 1;
  *(_WORD *)(v0 + 197) = 0;
  return v0;
}

id sub_1001B9D48()
{
  uint64_t v1 = *v0;
  id v2 = sub_1001F65E8();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  id v4 = [objc_allocWithZone((Class)CUUserAlert) init];
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v18 = sub_1001BBEA0;
  uint64_t v19 = v5;
  unint64_t v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  int64_t v16 = sub_1001BA0EC;
  uint64_t v17 = &unk_10032F480;
  unsigned int v6 = _Block_copy(&v14);
  swift_release();
  [v4 setActionHandler:v6];
  _Block_release(v6);
  NSString v7 = String._bridgeToObjectiveC()();
  [v4 setAlternativeButtonTitleKey:v7];

  NSString v8 = String._bridgeToObjectiveC()();
  [v4 setDefaultButtonTitleKey:v8];

  if (qword_10035A628 != -1) {
    swift_once();
  }
  [v4 setDispatchQueue:qword_1003ACB50];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v1;
  uint64_t v18 = sub_1001BBEB8;
  uint64_t v19 = v9;
  unint64_t v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  int64_t v16 = sub_10007A0AC;
  uint64_t v17 = &unk_10032F4D0;
  uint64_t v10 = _Block_copy(&v14);
  swift_release();
  [v4 setInvalidationHandler:v10];
  _Block_release(v10);
  NSString v11 = String._bridgeToObjectiveC()();
  [v4 setTitleKey:v11];

  NSString v12 = String._bridgeToObjectiveC()();
  [v4 setSubtitleKey:v12];

  return v4;
}

uint64_t sub_1001BA08C(unint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1001BA140(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1001BA0EC(uint64_t a1, uint64_t a2)
{
  NSString v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

void sub_1001BA140(unint64_t a1)
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  sub_1001BB94C(a1);
  v2._uint64_t countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  id v3 = sub_1001F65E8();
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 ulog:v4 message:0xD000000000000011, 0x80000001002C3430];
  swift_bridgeObjectRelease();

  swift_retain();
  PassthroughSubject.send(_:)();
  swift_release();
  if (a1 == 2)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong) {
      goto LABEL_10;
    }
    NSString v8 = (NSString)Strong;
    sub_1001BA350(1);
LABEL_9:

    goto LABEL_10;
  }
  if (a1 != 1)
  {
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    id v10 = sub_1001F65E8();
    swift_bridgeObjectRetain();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v10 ulog:v8 message:0xD000000000000012 0x80000001002C3450];
    swift_bridgeObjectRelease();

    goto LABEL_9;
  }
  uint64_t v5 = swift_unknownObjectWeakLoadStrong();
  if (v5)
  {
    unsigned int v6 = (void *)v5;
    sub_1001BA350(0);
  }
  sub_1001BB67C();
LABEL_10:
  sub_1001BA52C();
}

void sub_1001BA350(char a1)
{
  Swift::String v2 = v1;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  BOOL v4 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v5 = 0xD000000000000011;
  }
  else {
    uint64_t v5 = 0x6C695065736C6146;
  }
  if (v4) {
    unsigned int v6 = (void *)0xE90000000000006CLL;
  }
  else {
    unsigned int v6 = (void *)0x80000001002C34A0;
  }
  v7._uint64_t countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  id v8 = sub_1001EAE9C();
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 ulog:40 message:v9];
  swift_bridgeObjectRelease();

  sub_10000A38C((uint64_t *)&unk_10036BDA0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028FC10;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v11;
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v6;
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v12;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v13;
  unint64_t v14 = sub_100268D5C(inited);
  sub_1001B98A8(v14);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 _provideTruthTag:isa];
}

void sub_1001BA52C()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    uint64_t v2 = v0;
    id v3 = v1;
    sub_10000A38C(&qword_10036BD98);
    v4._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    id v5 = sub_1001F65E8();
    swift_bridgeObjectRetain();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v5 ulog:40 message:v6];
    swift_bridgeObjectRelease();

    [*(id *)(v2 + 24) invalidate];
    Swift::String v7 = *(void **)(v2 + 24);
    *(void *)(v2 + 24) = 0;
  }
}

uint64_t sub_1001BA62C(char a1)
{
  id v3 = sub_1001F65E8();
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 ulog:40 message:v4];

  if (a1 & 1) != 0 || (sub_1001BA724()) {
    sub_1001BADD8();
  }
  id v5 = sub_1001F65E8();
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 ulog:40 message:v6];

  *(void *)(v1 + 152) = &_swiftEmptySetSingleton;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 160) = 0;
  *(unsigned char *)(v1 + 168) = 1;
  *(_WORD *)(v1 + 197) = 0;
  return result;
}

uint64_t sub_1001BA724()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035E158);
  __chkstk_darwin(v2 - 8);
  NSString v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  NSString v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v36 - v10;
  if (!IsAppleInternalBuild())
  {
    uint64_t v37 = 0;
    unint64_t v38 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    id v13 = sub_1001F65E8();
    goto LABEL_7;
  }
  uint64_t v39 = &type metadata for Feature;
  unint64_t v40 = sub_10000CC08();
  LOBYTE(v37) = 4;
  char v12 = isFeatureEnabled(_:)();
  sub_10000CC5C((uint64_t)&v37);
  if ((v12 & 1) == 0)
  {
    uint64_t v37 = 0;
    unint64_t v38 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    id v13 = sub_1001F65E8();
    goto LABEL_7;
  }
  if (*(unsigned char *)(v1 + 197))
  {
    uint64_t v37 = 0;
    unint64_t v38 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    id v13 = sub_1001F65E8();
LABEL_7:
    NSString v14 = String._bridgeToObjectiveC()();
    [v13 ulog:40 message:v14];

    return 0;
  }
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v16 = *(id *)(qword_1003AC750 + 584);
  sub_1000FDE78((uint64_t)v4);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000B0424((uint64_t)v4);
    if (*(unsigned char *)(v1 + 198))
    {
LABEL_21:
      id v26 = sub_1001F65E8();
      NSString v27 = String._bridgeToObjectiveC()();
      [v26 ulog:40 message:v27];

      return 1;
    }
LABEL_17:
    if (*(unsigned char *)(v1 + 168))
    {
      uint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease();
      id v13 = sub_1001F65E8();
      goto LABEL_7;
    }
    if (*(double *)(v1 + 160) >= 1.0)
    {
      uint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      v28._object = (void *)0x80000001002C3210;
      v28._uint64_t countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v28);
      v29._uint64_t countAndFlagsBits = 0xD000000000000012;
      v29._object = (void *)0x80000001002C32F0;
      String.append(_:)(v29);
      Double.write<A>(to:)();
      id v30 = sub_1001F65E8();
      swift_bridgeObjectRetain();
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v30 ulog:40 message:v31];
      swift_bridgeObjectRelease();

      return 0;
    }
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
  Date.init()();
  Date.timeIntervalSince(_:)();
  double v18 = v17;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19(v9, v5);
  double v20 = v18 / 3600.0;
  sub_1001BB9C0((uint64_t)&v37, v20);
  if ((v38 & 1) == 0)
  {
    if (v37 <= 18)
    {
      uint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      v21._object = (void *)0x80000001002C3210;
      v21._uint64_t countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v21);
      v22._uint64_t countAndFlagsBits = 0xD000000000000014;
      v22._object = (void *)0x80000001002C3360;
      String.append(_:)(v22);
      double v36 = v20;
      _print_unlocked<A, B>(_:_:)();
      v23._uint64_t countAndFlagsBits = 0x61207372756F6820;
      v23._object = (void *)0xEB000000002E6F67;
      String.append(_:)(v23);
      id v24 = sub_1001F65E8();
      swift_bridgeObjectRetain();
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v24 ulog:40 message:v25];
      swift_bridgeObjectRelease();

      v19(v11, v5);
      return 0;
    }
    v19(v11, v5);
    if (*(unsigned char *)(v1 + 198)) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v37 = 0;
  unint64_t v38 = 0xE000000000000000;
  _StringGuts.grow(_:)(80);
  v32._uint64_t countAndFlagsBits = 0x656C62756F44;
  v32._object = (void *)0xE600000000000000;
  String.append(_:)(v32);
  v33._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v33._object = (void *)0x80000001002C3310;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = 7630409;
  v34._object = (void *)0xE300000000000000;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  v35._object = (void *)0x80000001002C3330;
  String.append(_:)(v35);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001BADD8()
{
  uint64_t v53 = *v0;
  uint64_t v57 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v60 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v56 = &v44[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v2 = type metadata accessor for DispatchQoS();
  uint64_t v58 = *(void *)(v2 - 8);
  uint64_t v59 = v2;
  __chkstk_darwin(v2);
  uint64_t v55 = &v44[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v4 = sub_1001F65E8();
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 ulog:40 message:v5];

  if (qword_10035A5E8 != -1) {
    swift_once();
  }
  uint64_t v48 = qword_1003ACA10;
  uint64_t v52 = byte_1003ACA18;
  uint64_t v6 = qword_1003ACA20;
  uint64_t v7 = unk_1003ACA28;
  uint64_t v8 = qword_1003ACA30;
  uint64_t v9 = unk_1003ACA38;
  uint64_t v10 = qword_1003ACA40;
  uint64_t v11 = unk_1003ACA48;
  uint64_t v12 = qword_1003ACA50;
  id v13 = (void *)unk_1003ACA58;
  uint64_t v51 = byte_1003ACA60;
  uint64_t v14 = unk_1003ACA70;
  uint64_t v50 = qword_1003ACA68;
  uint64_t v49 = v0[20];
  int v47 = *((unsigned __int8 *)v0 + 168);
  int v46 = *((unsigned __int8 *)v0 + 197);
  int v45 = *((unsigned __int8 *)v0 + 198);
  swift_bridgeObjectRetain();
  sub_1000BD7E0(v6, v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v64 = v13;
  swift_bridgeObjectRetain();
  uint64_t v54 = v6;
  uint64_t v62 = v11;
  uint64_t v63 = v10;
  sub_1000BD7E0(v6, v7);
  swift_bridgeObjectRetain();
  uint64_t v61 = v14;
  swift_bridgeObjectRetain();
  uint64_t v49 = sub_1001BBC10(v49, v47, v46, v45);
  uint64_t v16 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = v7;
  if (*(void *)(v0[19] + 16))
  {
    uint64_t v18 = swift_bridgeObjectRetain();
    uint64_t v19 = sub_1000F0820(v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = v64;
  }
  char v64 = v19;
  swift_bridgeObjectRetain();
  uint64_t v20 = v54;
  uint64_t v22 = v62;
  uint64_t v21 = v63;
  sub_1000BD7E0(v54, v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100167774(v20, v17);
  swift_bridgeObjectRelease();
  uint64_t v23 = v0[5];
  uint64_t v24 = v0[6];
  uint64_t v25 = v0[7];
  uint64_t v26 = v0[8];
  uint64_t v27 = v0[9];
  uint64_t v28 = v0[10];
  uint64_t v29 = v0[11];
  uint64_t v30 = v0[12];
  long long v31 = *(_OWORD *)(v0 + 13);
  v0[5] = v49;
  v0[6] = v16;
  v0[7] = v52;
  v0[8] = v20;
  v0[9] = v17;
  v0[10] = v8;
  v0[11] = v9;
  v0[12] = v21;
  v0[13] = v22;
  v0[14] = v12;
  uint64_t v32 = v51;
  v0[15] = (uint64_t)v19;
  v0[16] = v32;
  uint64_t v33 = v61;
  v0[17] = v50;
  v0[18] = v33;
  sub_1001BBB48(v23, v24, v25, v26, v27, v28, v29, v30, v31, *((uint64_t *)&v31 + 1));
  uint64_t v52 = v12;
  uint64_t v50 = v8;
  uint64_t v51 = v9;
  uint64_t v49 = v16;
  if (qword_10035A628 != -1) {
    swift_once();
  }
  Swift::String v34 = (void *)qword_1003ACB50;
  uint64_t v35 = swift_allocObject();
  swift_weakInit();
  uint64_t v36 = swift_allocObject();
  uint64_t v37 = v53;
  *(void *)(v36 + 16) = v35;
  *(void *)(v36 + 24) = v37;
  aBlock[4] = sub_1001BBE40;
  aBlock[5] = v36;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_10032F408;
  unint64_t v38 = _Block_copy(aBlock);
  id v39 = v34;
  swift_retain();
  unint64_t v40 = v55;
  static DispatchQoS.unspecified.getter();
  char v65 = _swiftEmptyArrayStorage;
  sub_10004D1C4();
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10001683C();
  long long v42 = v56;
  uint64_t v41 = v57;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v38);

  (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v42, v41);
  (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v40, v59);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_100167774(v20, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001BB3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000A38C(&qword_10035E158);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&aBlock[-1] - v7;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    sub_1001BA52C();
    id v11 = sub_1001B9D48();
    uint64_t v12 = *(void **)(v10 + 24);
    *(void *)(v10 + 24) = v11;

    id v13 = *(void **)(v10 + 24);
    if (v13)
    {
      id v14 = v13;
      id v15 = sub_10016B098(a2, (uint64_t)&off_10032F380);
      uint64_t v16 = (void *)swift_allocObject();
      v16[2] = 0x6361207472656C41;
      void v16[3] = 0xEF64657461766974;
      v16[4] = v15;
      aBlock[4] = sub_10004D170;
      aBlock[5] = v16;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100119FC4;
      aBlock[3] = &unk_10032F458;
      uint64_t v17 = _Block_copy(aBlock);
      swift_release();
      [v14 activateWithCompletion:v17];
      _Block_release(v17);
    }
    if (qword_10035A520 != -1) {
      swift_once();
    }
    uint64_t v18 = qword_1003AC750;
    Date.init()();
    uint64_t v19 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, 0, 1, v19);
    uint64_t v20 = *(void **)(v18 + 584);
    sub_1000B03BC((uint64_t)v8, (uint64_t)v6);
    id v21 = v20;
    sub_10012BB2C((uint64_t)v6);

    sub_1000B0424((uint64_t)v8);
    return swift_release();
  }
  return result;
}

void sub_1001BB67C()
{
  uint64_t v1 = v0;
  id v2 = sub_1001F65E8();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  uint64_t v4 = *(void *)(v1 + 112);
  if (v4)
  {
    uint64_t v5 = *(void *)(v1 + 64);
    uint64_t v6 = *(void *)(v1 + 72);
    uint64_t v7 = *(void *)(v1 + 88);
    uint64_t v19 = *(void *)(v1 + 80);
    uint64_t v9 = *(void *)(v1 + 96);
    uint64_t v8 = *(void *)(v1 + 104);
    uint64_t v21 = *(void *)(v1 + 56);
    uint64_t v22 = *(void *)(v1 + 40);
    uint64_t v20 = *(void *)(v1 + 48);
    swift_bridgeObjectRetain();
    sub_1000BD7E0(v5, v6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000BCA10(0, 0);
    sub_1001BBB48(v22, v20, v21, v5, v6, v19, v7, v9, v8, v4);
    uint64_t v10 = *(void *)(v1 + 40);
    uint64_t v11 = *(void *)(v1 + 48);
    uint64_t v12 = *(void *)(v1 + 56);
    uint64_t v13 = *(void *)(v1 + 64);
    uint64_t v14 = *(void *)(v1 + 72);
    uint64_t v15 = *(void *)(v1 + 80);
    uint64_t v16 = *(void *)(v1 + 88);
    uint64_t v17 = *(void *)(v1 + 96);
    long long v18 = *(_OWORD *)(v1 + 104);
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_OWORD *)(v1 + 88) = 0u;
    *(_OWORD *)(v1 + 104) = 0u;
    *(_OWORD *)(v1 + 120) = 0u;
    *(_OWORD *)(v1 + 136) = 0u;
    sub_1001BBB48(v10, v11, v12, v13, v14, v15, v16, v17, v18, *((uint64_t *)&v18 + 1));
  }
}

uint64_t sub_1001BB82C()
{
  swift_unknownObjectWeakDestroy();

  swift_release();
  sub_1001BBB48(*(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

double sub_1001BB8AC()
{
  qword_1003ACA08 = 0;
  qword_1003ACA10 = 0;
  byte_1003ACA18 = 5;
  *(_OWORD *)&qword_1003ACA20 = xmmword_1002A3870;
  qword_1003ACA30 = 0xD000000000000011;
  unk_1003ACA38 = 0x80000001002C0780;
  *(void *)&double result = 7105601;
  *(_OWORD *)&qword_1003ACA40 = xmmword_1002A3880;
  qword_1003ACA50 = (uint64_t)&_swiftEmptyArrayStorage;
  unk_1003ACA58 = 0;
  byte_1003ACA60 = 1;
  qword_1003ACA68 = 0xD00000000000002BLL;
  unk_1003ACA70 = 0x80000001002C31E0;
  return result;
}

uint64_t CUUserAlertAction.description.getter(unint64_t a1)
{
  sub_1001BB94C(a1);

  return String.init(cString:)();
}

const char *sub_1001BB94C(unint64_t a1)
{
  if (a1 > 0xB) {
    return "?";
  }
  else {
    return off_10032F4F8[a1];
  }
}

uint64_t sub_1001BB970()
{
  sub_1001BB94C(*v0);

  return String.init(cString:)();
}

uint64_t type metadata accessor for HandoffFeedbackManager_Legacy()
{
  return self;
}

BOOL sub_1001BB9C0(uint64_t a1, double a2)
{
  uint64_t v4 = (*(void *)&a2 >> 52) & 0x7FFLL;
  unint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v6 = v4 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    uint64_t v12 = 0;
    BOOL result = 1;
    goto LABEL_25;
  }
  if (v4 == 2047) {
    goto LABEL_28;
  }
  uint64_t v7 = Double.exponent.getter();
  if (v7 > 63) {
    goto LABEL_28;
  }
  uint64_t v8 = v7;
  uint64_t v9 = Double.significandWidth.getter();
  BOOL result = v8 >= v9;
  uint64_t v11 = v9 + __clz(__rbit64(v5));
  uint64_t v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
LABEL_27:
    if (a2 < 0.0)
    {
LABEL_36:
      LOBYTE(v6) = 0;
      uint64_t v12 = 0x8000000000000000;
      goto LABEL_25;
    }
LABEL_28:
    uint64_t v12 = 0;
    BOOL result = 0;
    LOBYTE(v6) = 1;
    goto LABEL_25;
  }
  if (v11 > 63)
  {
    if (v12 < -64 || v12 > 64) {
      goto LABEL_11;
    }
  }
  else if (v12 < -64 || v12 > 64)
  {
    goto LABEL_11;
  }
  if (v12 < 0) {
    goto LABEL_32;
  }
  if ((unint64_t)v12 < 0x40)
  {
    unint64_t v14 = v5 << v12;
    if (v8 != 63) {
      goto LABEL_17;
    }
LABEL_34:
    if (a2 < 0.0 && !v14) {
      goto LABEL_36;
    }
    goto LABEL_28;
  }
LABEL_11:
  if (v8 == 63) {
    goto LABEL_27;
  }
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  if (v8 < 0) {
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v13 = 1 << v8;
LABEL_20:
  while (1)
  {
    uint64_t v12 = v14 | v13;
    if (a2 >= 0.0) {
      break;
    }
    if ((v12 & 0x8000000000000000) == 0)
    {
      LOBYTE(v6) = 0;
      uint64_t v12 = -v12;
      goto LABEL_25;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFC0) {
      goto LABEL_11;
    }
    unint64_t v14 = v5 >> -(char)v12;
    if (v8 == 63) {
      goto LABEL_34;
    }
LABEL_17:
    if ((v8 & 0x8000000000000000) == 0) {
      goto LABEL_19;
    }
    uint64_t v13 = 0;
  }
  if (v12 < 0) {
    goto LABEL_31;
  }
  LOBYTE(v6) = 0;
LABEL_25:
  *(void *)a1 = v12;
  *(unsigned char *)(a1 + 8) = v6;
  return result;
}

uint64_t sub_1001BBB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    swift_bridgeObjectRelease();
    sub_100167774(a4, a5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001BBC10(uint64_t a1, char a2, char a3, char a4)
{
  if (a2)
  {
    uint64_t v6 = 63;
    uint64_t v8 = (void *)0xE100000000000000;
  }
  else
  {
    uint64_t v6 = sub_1000DC438(*(double *)&a1);
    uint64_t v8 = v7;
  }
  uint64_t v9 = 1702195828;
  if (a3) {
    uint64_t v10 = 1702195828;
  }
  else {
    uint64_t v10 = 0x65736C6166;
  }
  if (a3) {
    unint64_t v11 = 0xE400000000000000;
  }
  else {
    unint64_t v11 = 0xE500000000000000;
  }
  if (a3 == 2) {
    uint64_t v12 = 63;
  }
  else {
    uint64_t v12 = v10;
  }
  if (a3 == 2) {
    uint64_t v13 = (void *)0xE100000000000000;
  }
  else {
    uint64_t v13 = (void *)v11;
  }
  if (a4)
  {
    unint64_t v14 = 0xE400000000000000;
  }
  else
  {
    uint64_t v9 = 0x65736C6166;
    unint64_t v14 = 0xE500000000000000;
  }
  if (a4 == 2) {
    uint64_t v15 = 63;
  }
  else {
    uint64_t v15 = v9;
  }
  if (a4 == 2) {
    uint64_t v16 = (void *)0xE100000000000000;
  }
  else {
    uint64_t v16 = (void *)v14;
  }
  _StringGuts.grow(_:)(98);
  v17._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  v17._object = (void *)0x80000001002C2F60;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = v6;
  v18._object = v8;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._object = (void *)0x80000001002C2F90;
  v19._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = v12;
  v20._object = v13;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._object = (void *)0x80000001002C2FB0;
  v21._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = v15;
  v22._object = v16;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  return 0x1000000000000203;
}

uint64_t sub_1001BBDD0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001BBE08()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001BBE40()
{
  return sub_1001BB3F4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001BBE48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001BBE58()
{
  return swift_release();
}

uint64_t sub_1001BBE60()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001BBEA0(unint64_t a1)
{
  return sub_1001BA08C(a1);
}

uint64_t sub_1001BBEA8()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001BBEB8()
{
  sub_10016ABE4(0xD000000000000011, (void *)0x80000001002C3560, 0, *(void *)(v0 + 16), (uint64_t)&off_10032F380);
}

uint64_t sub_1001BBF1C(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((void)v62)
  {
    id v4 = (id)v62;
    id v5 = v1;
    uint64_t v6 = sub_10024DF10();
    uint64_t v7 = sub_1001A7C6C();
    uint64_t v8 = sub_1001C8154(v7, v6);
    swift_bridgeObjectRelease();

    uint64_t v9 = *(void *)(v8 + 16);
    swift_release();
    if (v9) {
      return 1;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v59[0])
  {
    *((void *)&v63 + 1) = sub_100019E10(0, &qword_1003650B0);
    char v64 = &off_10031F600;
    *(void *)&long long v62 = v59[0];
  }
  else
  {
    char v64 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
  }
  sub_10000D728((uint64_t)&v62, (uint64_t)v59, (uint64_t *)&unk_10036C0A0);
  uint64_t v10 = v60;
  if (v60)
  {
    uint64_t v11 = v61;
    sub_10000D6E4(v59, v60);
    uint64_t v12 = sub_10024DF10();
    BOOL v13 = sub_100148A48(v12, v10, *(void *)(v11 + 8));
    swift_bridgeObjectRelease();
    sub_10000CC5C((uint64_t)v59);
    sub_10000D78C((uint64_t)&v62, (uint64_t *)&unk_10036C0A0);
    if (v13) {
      return 1;
    }
  }
  else
  {
    sub_10000D78C((uint64_t)v59, (uint64_t *)&unk_10036C0A0);
    sub_10000D78C((uint64_t)&v62, (uint64_t *)&unk_10036C0A0);
  }
  unint64_t v14 = *(void **)(a1 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice);
  if (v14)
  {
    *((void *)&v63 + 1) = sub_100019E10(0, &qword_100369900);
    char v64 = &off_100320750;
    *(void *)&long long v62 = v14;
  }
  else
  {
    char v64 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
  }
  sub_10000D728((uint64_t)&v62, (uint64_t)&v57, &qword_10035B618);
  if (v58)
  {
    sub_10000D7E8(&v57, (uint64_t)v59);
    uint64_t v15 = v60;
    uint64_t v16 = v61;
    sub_10000D6E4(v59, v60);
    uint64_t v17 = *(void *)(v16 + 8);
    Swift::String v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 40);
    id v19 = v14;
    char v20 = v18(v2, v15, v17);
    sub_10000CC5C((uint64_t)v59);
    sub_10000D78C((uint64_t)&v62, &qword_10035B618);
    if (v20) {
      return 1;
    }
  }
  else
  {
    id v21 = v14;
    sub_10000D78C((uint64_t)&v57, &qword_10035B618);
    sub_10000D78C((uint64_t)&v62, &qword_10035B618);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  Swift::String v22 = (void *)v62;
  if ((void)v62)
  {
    sub_100019E10(0, (unint64_t *)&qword_10035C098);
    id v23 = v22;
    if (static NSObject.== infix(_:_:)())
    {
LABEL_22:

      return 1;
    }
    uint64_t v24 = sub_10024DF10();
    uint64_t v25 = sub_10024DF10();
    uint64_t v26 = sub_1001C8154(v25, v24);
    swift_bridgeObjectRelease();

    uint64_t v27 = *(void *)(v26 + 16);
    swift_release();
    if (v27) {
      return 1;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v28 = (void *)v62;
  if ((void)v62)
  {
    sub_100019E10(0, (unint64_t *)&qword_10035C098);
    id v23 = v28;
    if (static NSObject.== infix(_:_:)()) {
      goto LABEL_22;
    }
    uint64_t v29 = sub_10024DF10();
    uint64_t v30 = sub_10024DF10();
    uint64_t v31 = sub_1001C8154(v30, v29);
    swift_bridgeObjectRelease();

    uint64_t v32 = *(void *)(v31 + 16);
    swift_release();
    if (v32) {
      return 1;
    }
  }
  if (*(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities)) {
    unint64_t v33 = *(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities);
  }
  else {
    unint64_t v33 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (!(v33 >> 62))
  {
    Swift::String v34 = *(char **)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v34) {
      goto LABEL_29;
    }
LABEL_36:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String v34 = (char *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v34) {
    goto LABEL_36;
  }
LABEL_29:
  unint64_t v36 = v33 & 0xC000000000000001;
  if ((v33 & 0xC000000000000001) != 0)
  {
LABEL_54:
    id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    id v37 = *(id *)(v33 + 32);
  }
  unint64_t v38 = v37;
  uint64_t v39 = sub_1000D215C();
  uint64_t v40 = sub_10024DF10();
  uint64_t v41 = sub_1001C8154(v40, v39);
  swift_bridgeObjectRelease();
  uint64_t v42 = *(void *)(v41 + 16);

  uint64_t result = swift_release();
  if (v42)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v34 == (char *)1) {
    goto LABEL_36;
  }
  if (v36)
  {
    id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_41:
    char v44 = v43;
    uint64_t v45 = sub_1000D215C();
    uint64_t v46 = sub_10024DF10();
    uint64_t v47 = sub_1001C8154(v46, v45);
    swift_bridgeObjectRelease();
    uint64_t v48 = *(void *)(v47 + 16);

    uint64_t result = swift_release();
    if (v48) {
      goto LABEL_33;
    }
    uint64_t v49 = 0;
    uint64_t v50 = v34 - 2;
    while (v50 != v49)
    {
      uint64_t v51 = v49 + 2;
      if (v36)
      {
        uint64_t v52 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((unint64_t)v51 >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_56;
        }
        uint64_t v52 = (char *)*(id *)(v33 + 8 * (void)v49 + 48);
      }
      Swift::String v34 = v52;
      if (__OFADD__(v51, 1))
      {
        __break(1u);
        goto LABEL_54;
      }
      uint64_t v53 = sub_1000D215C();
      uint64_t v54 = sub_10024DF10();
      uint64_t v55 = sub_1001C8154(v54, v53);
      swift_bridgeObjectRelease();
      uint64_t v56 = *(void *)(v55 + 16);

      uint64_t result = swift_release();
      ++v49;
      if (v56) {
        goto LABEL_33;
      }
    }
    goto LABEL_36;
  }
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    id v43 = *(id *)(v33 + 40);
    goto LABEL_41;
  }
LABEL_57:
  __break(1u);
  return result;
}

uint64_t sub_1001BC5CC(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((void)v68)
  {
    id v4 = (id)v68;
    uint64_t v5 = sub_1001A7C6C();
    sub_10000A38C((uint64_t *)&unk_10035E7E0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10028D430;
    id v7 = [v2 uniqueIdentifier];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    *(void *)(inited + 32) = v8;
    *(void *)(inited + 40) = v10;
    Swift::Int v11 = sub_1001C9F78(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v12 = sub_1001C8154(v11, v5);
    swift_bridgeObjectRelease();

    uint64_t v13 = *(void *)(v12 + 16);
    swift_release();
    BOOL v14 = 1;
    if (v13) {
      return v14;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((void)v68)
  {
    *((void *)&v69 + 1) = sub_100019E10(0, &qword_1003650B0);
    uint64_t v70 = &off_10031F600;
  }
  else
  {
    uint64_t v70 = 0;
    long long v68 = 0u;
    long long v69 = 0u;
  }
  BOOL v15 = sub_1001C02E8((uint64_t)&v68, (uint64_t *)&unk_10036C0A0, (void (*)(unsigned char *, void *))sub_10000D7E8);
  sub_10000D78C((uint64_t)&v68, (uint64_t *)&unk_10036C0A0);
  if (v15) {
    return 1;
  }
  uint64_t v16 = *(void **)(a1 + OBJC_IVAR____TtC17proximitycontrold8Identity_idsDevice);
  if (v16)
  {
    *((void *)&v69 + 1) = sub_100019E10(0, &qword_100369900);
    uint64_t v70 = &off_100320750;
    *(void *)&long long v68 = v16;
  }
  else
  {
    uint64_t v70 = 0;
    long long v68 = 0u;
    long long v69 = 0u;
  }
  id v17 = v16;
  BOOL v18 = sub_1001C02E8((uint64_t)&v68, &qword_10035B618, (void (*)(unsigned char *, void *))sub_10000D7E8);
  sub_10000D78C((uint64_t)&v68, &qword_10035B618);
  if (v18) {
    return 1;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((void)v68)
  {
    id v20 = (id)v68;
    uint64_t v21 = sub_10024DF10();
    sub_10000A38C((uint64_t *)&unk_10035E7E0);
    uint64_t v22 = swift_initStackObject();
    *(_OWORD *)(v22 + 16) = xmmword_10028D430;
    id v23 = [v2 uniqueIdentifier];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    *(void *)(v22 + 32) = v24;
    *(void *)(v22 + 40) = v26;
    Swift::Int v27 = sub_1001C9F78(v22);
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v28 = sub_1001C8154(v27, v21);
    swift_bridgeObjectRelease();

    uint64_t v29 = *(void *)(v28 + 16);
    swift_release();
    BOOL v14 = 1;
    if (v29) {
      return v14;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((void)v68)
  {
    id v30 = (id)v68;
    uint64_t v31 = sub_10024DF10();
    sub_10000A38C((uint64_t *)&unk_10035E7E0);
    uint64_t v32 = swift_initStackObject();
    *(_OWORD *)(v32 + 16) = xmmword_10028D430;
    id v33 = [v2 uniqueIdentifier];
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v35;

    *(void *)(v32 + 32) = v34;
    *(void *)(v32 + 40) = v36;
    Swift::Int v37 = sub_1001C9F78(v32);
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v38 = sub_1001C8154(v37, v31);
    swift_bridgeObjectRelease();

    uint64_t v39 = *(void *)(v38 + 16);
    swift_release();
    BOOL v14 = 1;
    if (v39) {
      return v14;
    }
  }
  if (*(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities)) {
    unint64_t v40 = *(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold8Identity_rapportIdentities);
  }
  else {
    unint64_t v40 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v40 >> 62) {
    goto LABEL_40;
  }
  uint64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v41)
  {
LABEL_27:
    BOOL v14 = 0;
LABEL_28:
    swift_bridgeObjectRelease();
    return v14;
  }
  while (1)
  {
    if ((v40 & 0xC000000000000001) != 0)
    {
      id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_25;
    }
    if (!*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      break;
    }
    id v42 = *(id *)(v40 + 32);
LABEL_25:
    id v43 = v42;
    uint64_t v44 = sub_1000D215C();
    sub_10000A38C((uint64_t *)&unk_10035E7E0);
    uint64_t v45 = swift_initStackObject();
    *(_OWORD *)(v45 + 16) = xmmword_10028D430;
    id v46 = [v2 uniqueIdentifier];
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v49 = v48;

    *(void *)(v45 + 32) = v47;
    *(void *)(v45 + 40) = v49;
    Swift::Int v50 = sub_1001C9F78(v45);
    swift_setDeallocating();
    BOOL v14 = 1;
    swift_arrayDestroy();
    uint64_t v51 = sub_1001C8154(v50, v44);
    swift_bridgeObjectRelease();
    uint64_t v52 = *(void *)(v51 + 16);

    swift_release();
    if (v52) {
      goto LABEL_28;
    }
    if (v41 != 1)
    {
      uint64_t v67 = v41;
      uint64_t v53 = 5;
      while (1)
      {
        unint64_t v54 = v53 - 4;
        if ((v40 & 0xC000000000000001) != 0)
        {
          id v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v54 >= *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_39;
          }
          id v55 = *(id *)(v40 + 8 * v53);
        }
        uint64_t v56 = v55;
        uint64_t v57 = v53 - 3;
        if (__OFADD__(v54, 1)) {
          break;
        }
        uint64_t v58 = sub_1000D215C();
        uint64_t v59 = swift_initStackObject();
        *(_OWORD *)(v59 + 16) = xmmword_10028D430;
        id v60 = [v2 uniqueIdentifier];
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v63 = v62;

        *(void *)(v59 + 32) = v61;
        *(void *)(v59 + 40) = v63;
        Swift::Int v64 = sub_1001C9F78(v59);
        swift_setDeallocating();
        swift_arrayDestroy();
        uint64_t v65 = sub_1001C8154(v64, v58);
        swift_bridgeObjectRelease();
        uint64_t v66 = *(void *)(v65 + 16);

        swift_release();
        BOOL v14 = v66 != 0;
        if (!v66)
        {
          ++v53;
          if (v57 != v67) {
            continue;
          }
        }
        goto LABEL_28;
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v41) {
        continue;
      }
    }
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001BCD58(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_1001BCD80(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v29 = a1;
  char v30 = a2;
  CurrentValueSubject.send(_:)();
  if (!*(void *)(v3 + *(void *)(*(void *)v3 + 128) + 8))
  {
    sub_100038A4C(a1, a2);
    return;
  }
  *(void *)&long long v27 = a1;
  BYTE8(v27) = a2;
  swift_bridgeObjectRetain();
  sub_100038A38(a1, a2);
  sub_10000A38C(&qword_10035D058);
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  self;
  uint64_t v6 = swift_dynamicCastObjCClass();
  swift_unknownObjectRelease();
  if (v6)
  {
    sub_100038A4C(a1, a2);
    id v7 = *(void **)(v2 + *(void *)(*(void *)v2 + 112));
    if (v7)
    {
      id v8 = v7;
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v8 removeObjectForKey:v9];

      return;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  if ((*(unsigned char *)(v2 + *(void *)(*(void *)v2 + 120)) & 1) == 0)
  {
    uint64_t v10 = *(void **)(v2 + *(void *)(*(void *)v2 + 112));
    if (v10)
    {
      *(void *)&long long v27 = a1;
      BYTE8(v27) = a2;
      id v11 = v10;
      uint64_t v12 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v11 setValue:v12 forKey:v13];

      swift_unknownObjectRelease();
      return;
    }
    sub_100038A4C(a1, a2);
    goto LABEL_13;
  }
  uint64_t v25 = a1;
  char v26 = a2;
  sub_10000A38C(&qword_10036C018);
  if (swift_dynamicCast())
  {
    sub_1001C9E88(v24, &v27);
    sub_10000D6E4(&v27, v28);
    uint64_t v14 = sub_100116E88();
    uint64_t v18 = v14;
    unint64_t v19 = v15;
    id v20 = *(void **)(v3 + *(void *)(*(void *)v3 + 112));
    if (v20)
    {
      id v21 = v20;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      NSString v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v21 setValue:isa forKey:v23];
      sub_10000DBEC(v18, v19);
    }
    else
    {
      sub_10000DBEC(v14, v15);
      swift_bridgeObjectRelease();
    }
    sub_10000CC5C((uint64_t)&v27);
  }
  else
  {
    memset(v24, 0, sizeof(v24));
    swift_bridgeObjectRelease();
    sub_10000D78C((uint64_t)v24, (uint64_t *)&unk_10036C020);
    id v16 = sub_1001F63E8();
    NSString v17 = String._bridgeToObjectiveC()();
    [v16 ulog:60 message:v17];
  }
}

void sub_1001BD190(unint64_t a1)
{
  uint64_t v2 = v1;
  int v3 = a1;
  int v29 = a1;
  uint64_t v4 = HIDWORD(a1) & 1;
  char v30 = BYTE4(a1) & 1;
  CurrentValueSubject.send(_:)();
  if (*(void *)((char *)v2 + *(void *)(*v2 + 128) + 8))
  {
    LODWORD(v27) = v3;
    BYTE4(v27) = v4;
    swift_bridgeObjectRetain();
    sub_10000A38C((uint64_t *)&unk_10036C110);
    _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    self;
    uint64_t v5 = swift_dynamicCastObjCClass();
    swift_unknownObjectRelease();
    uint64_t v6 = *v1;
    if (v5)
    {
      id v7 = *(void **)((char *)v1 + *(void *)(v6 + 112));
      if (v7)
      {
        id v8 = v7;
        NSString v9 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v8 removeObjectForKey:v9];

        return;
      }
LABEL_8:
      swift_bridgeObjectRelease();
      return;
    }
    if ((*((unsigned char *)v1 + *(void *)(v6 + 120)) & 1) == 0)
    {
      uint64_t v10 = *(void **)((char *)v1 + *(void *)(v6 + 112));
      if (v10)
      {
        LODWORD(v27) = v3;
        BYTE4(v27) = v4;
        id v11 = v10;
        uint64_t v12 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        NSString v13 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v11 setValue:v12 forKey:v13];

        swift_unknownObjectRelease();
        return;
      }
      goto LABEL_8;
    }
    int v25 = v3;
    char v26 = v4;
    sub_10000A38C(&qword_10036C018);
    if (swift_dynamicCast())
    {
      sub_1001C9E88(v24, &v27);
      sub_10000D6E4(&v27, v28);
      uint64_t v14 = sub_100116E88();
      uint64_t v18 = v14;
      unint64_t v19 = v15;
      id v20 = *(void **)((char *)v2 + *(void *)(*v2 + 112));
      if (v20)
      {
        id v21 = v20;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        NSString v23 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v21 setValue:isa forKey:v23];
        sub_10000DBEC(v18, v19);
      }
      else
      {
        sub_10000DBEC(v14, v15);
        swift_bridgeObjectRelease();
      }
      sub_10000CC5C((uint64_t)&v27);
    }
    else
    {
      memset(v24, 0, sizeof(v24));
      swift_bridgeObjectRelease();
      sub_10000D78C((uint64_t)v24, (uint64_t *)&unk_10036C020);
      id v16 = sub_1001F650C();
      NSString v17 = String._bridgeToObjectiveC()();
      [v16 ulog:60 message:v17];
    }
  }
}

void sub_1001BD544(char a1)
{
  uint64_t v2 = v1;
  char v27 = a1;
  CurrentValueSubject.send(_:)();
  if (*(void *)((char *)v2 + *(void *)(*v2 + 128) + 8))
  {
    LOBYTE(v25) = a1;
    swift_bridgeObjectRetain();
    sub_10000A38C(&qword_10035AC68);
    _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    self;
    uint64_t v4 = swift_dynamicCastObjCClass();
    swift_unknownObjectRelease();
    uint64_t v5 = *v1;
    if (v4)
    {
      uint64_t v6 = *(void **)((char *)v1 + *(void *)(v5 + 112));
      if (v6)
      {
        id v7 = v6;
        NSString v8 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v7 removeObjectForKey:v8];

        return;
      }
LABEL_8:
      swift_bridgeObjectRelease();
      return;
    }
    if ((*((unsigned char *)v1 + *(void *)(v5 + 120)) & 1) == 0)
    {
      NSString v9 = *(void **)((char *)v1 + *(void *)(v5 + 112));
      if (v9)
      {
        LOBYTE(v25) = a1;
        id v10 = v9;
        uint64_t v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        NSString v12 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v10 setValue:v11 forKey:v12];

        swift_unknownObjectRelease();
        return;
      }
      goto LABEL_8;
    }
    char v24 = a1;
    sub_10000A38C(&qword_10036C018);
    if (swift_dynamicCast())
    {
      sub_1001C9E88(v23, &v25);
      sub_10000D6E4(&v25, v26);
      uint64_t v13 = sub_100116E88();
      uint64_t v17 = v13;
      unint64_t v18 = v14;
      unint64_t v19 = *(void **)((char *)v2 + *(void *)(*v2 + 112));
      if (v19)
      {
        id v20 = v19;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v20 setValue:isa forKey:v22];
        sub_10000DBEC(v17, v18);
      }
      else
      {
        sub_10000DBEC(v13, v14);
        swift_bridgeObjectRelease();
      }
      sub_10000CC5C((uint64_t)&v25);
    }
    else
    {
      memset(v23, 0, sizeof(v23));
      swift_bridgeObjectRelease();
      sub_10000D78C((uint64_t)v23, (uint64_t *)&unk_10036C020);
      id v15 = sub_1001F6520();
      NSString v16 = String._bridgeToObjectiveC()();
      [v15 ulog:60 message:v16];
    }
  }
}

void sub_1001BD8E4(__int16 a1)
{
  uint64_t v2 = v1;
  __int16 v27 = a1;
  CurrentValueSubject.send(_:)();
  if (*(void *)((char *)v2 + *(void *)(*v2 + 128) + 8))
  {
    LOWORD(v25) = a1;
    swift_bridgeObjectRetain();
    _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    self;
    uint64_t v4 = swift_dynamicCastObjCClass();
    swift_unknownObjectRelease();
    uint64_t v5 = *v1;
    if (v4)
    {
      uint64_t v6 = *(void **)((char *)v1 + *(void *)(v5 + 112));
      if (v6)
      {
        id v7 = v6;
        NSString v8 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v7 removeObjectForKey:v8];

        return;
      }
LABEL_8:
      swift_bridgeObjectRelease();
      return;
    }
    if ((*((unsigned char *)v1 + *(void *)(v5 + 120)) & 1) == 0)
    {
      NSString v9 = *(void **)((char *)v1 + *(void *)(v5 + 112));
      if (v9)
      {
        LOWORD(v25) = a1;
        id v10 = v9;
        uint64_t v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        NSString v12 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v10 setValue:v11 forKey:v12];

        swift_unknownObjectRelease();
        return;
      }
      goto LABEL_8;
    }
    __int16 v24 = a1;
    sub_10000A38C(&qword_10036C018);
    if (swift_dynamicCast())
    {
      sub_1001C9E88(v23, &v25);
      sub_10000D6E4(&v25, v26);
      uint64_t v13 = sub_100116E88();
      uint64_t v17 = v13;
      unint64_t v18 = v14;
      unint64_t v19 = *(void **)((char *)v2 + *(void *)(*v2 + 112));
      if (v19)
      {
        id v20 = v19;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v20 setValue:isa forKey:v22];
        sub_10000DBEC(v17, v18);
      }
      else
      {
        sub_10000DBEC(v13, v14);
        swift_bridgeObjectRelease();
      }
      sub_10000CC5C((uint64_t)&v25);
    }
    else
    {
      memset(v23, 0, sizeof(v23));
      swift_bridgeObjectRelease();
      sub_10000D78C((uint64_t)v23, (uint64_t *)&unk_10036C020);
      id v15 = sub_1001F6644();
      NSString v16 = String._bridgeToObjectiveC()();
      [v15 ulog:60 message:v16];
    }
  }
}

uint64_t sub_1001BDC78(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  id v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  NSString v9 = (char *)v30 - v8;
  CurrentValueSubject.send(_:)();
  id v10 = (void *)((char *)v2 + *(void *)(*v2 + 128));
  if (v10[1])
  {
    v30[1] = *v10;
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
    v11(v9, a1, v4);
    swift_bridgeObjectRetain();
    _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    self;
    uint64_t v12 = swift_dynamicCastObjCClass();
    swift_unknownObjectRelease();
    uint64_t v13 = *v1;
    if (v12)
    {
      unint64_t v14 = *(void **)((char *)v1 + *(void *)(v13 + 112));
      if (v14)
      {
        id v15 = v14;
        NSString v16 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v15 removeObjectForKey:v16];
LABEL_5:

        return (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(a1, v4);
      }
      goto LABEL_13;
    }
    if ((*((unsigned char *)v1 + *(void *)(v13 + 120)) & 1) == 0)
    {
      unint64_t v19 = *(void **)((char *)v1 + *(void *)(v13 + 112));
      if (v19)
      {
        v11(v9, a1, v4);
        id v20 = v19;
        uint64_t v21 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v20 setValue:v21 forKey:v22];

        swift_unknownObjectRelease();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(a1, v4);
      }
LABEL_13:
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a1, v4);
      return swift_bridgeObjectRelease();
    }
    v11(v7, a1, v4);
    sub_10000A38C(&qword_10036C018);
    if (!swift_dynamicCast())
    {
      memset(v32, 0, sizeof(v32));
      swift_bridgeObjectRelease();
      sub_10000D78C((uint64_t)v32, (uint64_t *)&unk_10036C020);
      id v15 = sub_1001F6658();
      NSString v16 = String._bridgeToObjectiveC()();
      [v15 ulog:60 message:v16];
      goto LABEL_5;
    }
    sub_1001C9E88(v32, &v33);
    sub_10000D6E4(&v33, v34);
    uint64_t v23 = sub_100116E88();
    unint64_t v25 = v24;
    uint64_t v26 = *(void **)((char *)v2 + *(void *)(*v2 + 112));
    if (v26)
    {
      id v27 = v26;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v27 setValue:isa forKey:v29];
      sub_10000DBEC(v23, v25);

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a1, v4);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a1, v4);
      sub_10000DBEC(v23, v25);
      swift_bridgeObjectRelease();
    }
    return sub_10000CC5C((uint64_t)&v33);
  }
  else
  {
    unint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
    return v18(a1, v4);
  }
}

void sub_1001BE19C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v26 = a1;
  CurrentValueSubject.send(_:)();
  if (!*(void *)((char *)v2 + *(void *)(*v2 + 128) + 8)) {
    goto LABEL_9;
  }
  *(void *)&long long v24 = a1;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000A38C((uint64_t *)&unk_10036C080);
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  swift_unknownObjectRelease();
  uint64_t v5 = *v1;
  if (v4)
  {
    uint64_t v6 = *(void **)((char *)v1 + *(void *)(v5 + 112));
    if (v6)
    {
      id v7 = v6;
      NSString v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v7 removeObjectForKey:v8];
      swift_unknownObjectRelease();

      return;
    }
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_9:
    swift_unknownObjectRelease();
    return;
  }
  if ((*((unsigned char *)v1 + *(void *)(v5 + 120)) & 1) == 0)
  {
    NSString v9 = *(void **)((char *)v1 + *(void *)(v5 + 112));
    if (v9)
    {
      *(void *)&long long v24 = a1;
      swift_unknownObjectRetain();
      id v10 = v9;
      uint64_t v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v10 setValue:v11 forKey:v12];
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_8;
  }
  uint64_t v23 = a1;
  swift_unknownObjectRetain();
  sub_10000A38C(&qword_10036C018);
  if (!swift_dynamicCast())
  {
    memset(v22, 0, sizeof(v22));
    swift_bridgeObjectRelease();
    sub_10000D78C((uint64_t)v22, (uint64_t *)&unk_10036C020);
    id v13 = sub_1001F6690();
    NSString v14 = String._bridgeToObjectiveC()();
    [v13 ulog:60 message:v14];

    goto LABEL_9;
  }
  sub_1001C9E88(v22, &v24);
  sub_10000D6E4(&v24, v25);
  uint64_t v15 = sub_100116E88();
  unint64_t v17 = v16;
  unint64_t v18 = *(void **)((char *)v2 + *(void *)(*v2 + 112));
  if (v18)
  {
    id v19 = v18;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v19 setValue:isa forKey:v21];
    sub_10000DBEC(v15, v17);

    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    sub_10000DBEC(v15, v17);
    swift_bridgeObjectRelease();
  }
  sub_10000CC5C((uint64_t)&v24);
}

void sub_1001BE580(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v26 = a1;
  CurrentValueSubject.send(_:)();
  if (!*(void *)((char *)v2 + *(void *)(*v2 + 128) + 8)) {
    goto LABEL_9;
  }
  *(void *)&long long v24 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000A38C((uint64_t *)&unk_10036C0B0);
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  swift_unknownObjectRelease();
  uint64_t v5 = *v1;
  if (v4)
  {
    uint64_t v6 = *(void **)((char *)v1 + *(void *)(v5 + 112));
    if (v6)
    {
      id v7 = v6;
      NSString v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v7 removeObjectForKey:v8];
      swift_bridgeObjectRelease();

      return;
    }
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    return;
  }
  if ((*((unsigned char *)v1 + *(void *)(v5 + 120)) & 1) == 0)
  {
    NSString v9 = *(void **)((char *)v1 + *(void *)(v5 + 112));
    if (v9)
    {
      *(void *)&long long v24 = a1;
      swift_bridgeObjectRetain();
      id v10 = v9;
      uint64_t v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v10 setValue:v11 forKey:v12];
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_8;
  }
  uint64_t v23 = a1;
  swift_bridgeObjectRetain();
  sub_10000A38C(&qword_10036C018);
  if (!swift_dynamicCast())
  {
    memset(v22, 0, sizeof(v22));
    swift_bridgeObjectRelease();
    sub_10000D78C((uint64_t)v22, (uint64_t *)&unk_10036C020);
    id v13 = sub_1001F6758();
    NSString v14 = String._bridgeToObjectiveC()();
    [v13 ulog:60 message:v14];

    goto LABEL_9;
  }
  sub_1001C9E88(v22, &v24);
  sub_10000D6E4(&v24, v25);
  uint64_t v15 = sub_100116E88();
  unint64_t v17 = v16;
  unint64_t v18 = *(void **)((char *)v2 + *(void *)(*v2 + 112));
  if (v18)
  {
    id v19 = v18;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v19 setValue:isa forKey:v21];
    sub_10000DBEC(v15, v17);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10000DBEC(v15, v17);
  }
  swift_bridgeObjectRelease();
  sub_10000CC5C((uint64_t)&v24);
}

void *sub_1001BE964(void *a1)
{
  uint64_t v2 = v1;
  sub_10001639C((uint64_t)a1, (uint64_t)&v26, (uint64_t *)&unk_10036C120);
  CurrentValueSubject.send(_:)();
  if (!*(void *)((char *)v2 + *(void *)(*v2 + 128) + 8)) {
    return sub_1001CABC8(a1, (void (*)(void, void, void, void, void))sub_1000CA484);
  }
  sub_10001639C((uint64_t)a1, (uint64_t)&v24, (uint64_t *)&unk_10036C120);
  swift_bridgeObjectRetain();
  sub_1001CABC8(a1, (void (*)(void, void, void, void, void))sub_1000CA400);
  sub_10000A38C((uint64_t *)&unk_10036C120);
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  swift_unknownObjectRelease();
  uint64_t v5 = *v1;
  if (v4)
  {
    uint64_t v6 = *(void **)((char *)v1 + *(void *)(v5 + 112));
    if (v6)
    {
      id v7 = v6;
      NSString v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v7 removeObjectForKey:v8];

LABEL_8:
      return sub_1001CABC8(a1, (void (*)(void, void, void, void, void))sub_1000CA484);
    }
LABEL_10:
    sub_1001CABC8(a1, (void (*)(void, void, void, void, void))sub_1000CA484);
    return (void *)swift_bridgeObjectRelease();
  }
  if ((*((unsigned char *)v1 + *(void *)(v5 + 120)) & 1) == 0)
  {
    NSString v9 = *(void **)((char *)v1 + *(void *)(v5 + 112));
    if (v9)
    {
      sub_10001639C((uint64_t)a1, (uint64_t)&v24, (uint64_t *)&unk_10036C120);
      sub_1001CABC8(a1, (void (*)(void, void, void, void, void))sub_1000CA400);
      id v10 = v9;
      uint64_t v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      NSString v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v10 setValue:v11 forKey:v8];

      swift_unknownObjectRelease();
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  sub_10001639C((uint64_t)a1, (uint64_t)v23, (uint64_t *)&unk_10036C120);
  sub_1001CABC8(a1, (void (*)(void, void, void, void, void))sub_1000CA400);
  sub_10000A38C(&qword_10036C018);
  if (swift_dynamicCast())
  {
    sub_1001C9E88(v22, &v24);
    sub_10000D6E4(&v24, v25);
    uint64_t v15 = sub_100116E88();
    unint64_t v17 = v16;
    unint64_t v18 = *(void **)((char *)v2 + *(void *)(*v2 + 112));
    if (v18)
    {
      id v19 = v18;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v19 setValue:isa forKey:v21];
      sub_10000DBEC(v15, v17);

      sub_1000CA484(v26, v27, v28);
    }
    else
    {
      sub_1000CA484(v26, v27, v28);
      sub_10000DBEC(v15, v17);
      swift_bridgeObjectRelease();
    }
    return (void *)sub_10000CC5C((uint64_t)&v24);
  }
  else
  {
    memset(v22, 0, sizeof(v22));
    swift_bridgeObjectRelease();
    sub_10000D78C((uint64_t)v22, (uint64_t *)&unk_10036C020);
    id v13 = sub_1001F67D8();
    NSString v14 = String._bridgeToObjectiveC()();
    [v13 ulog:60 message:v14];

    return (void *)sub_1000CA484(v26, v27, v28);
  }
}

void sub_1001BEDF8(char a1)
{
  uint64_t v2 = v1;
  char v28 = a1;
  CurrentValueSubject.send(_:)();
  if (*(void *)((char *)v2 + *(void *)(*v2 + 128) + 8))
  {
    char v4 = a1 & 1;
    LOBYTE(v26) = a1 & 1;
    swift_bridgeObjectRetain();
    _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    self;
    uint64_t v5 = swift_dynamicCastObjCClass();
    swift_unknownObjectRelease();
    uint64_t v6 = *v1;
    if (v5)
    {
      id v7 = *(void **)((char *)v1 + *(void *)(v6 + 112));
      if (v7)
      {
        id v8 = v7;
        NSString v9 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v8 removeObjectForKey:v9];

        return;
      }
LABEL_8:
      swift_bridgeObjectRelease();
      return;
    }
    if ((*((unsigned char *)v1 + *(void *)(v6 + 120)) & 1) == 0)
    {
      id v10 = *(void **)((char *)v1 + *(void *)(v6 + 112));
      if (v10)
      {
        LOBYTE(v26) = v4;
        id v11 = v10;
        uint64_t v12 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        NSString v13 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v11 setValue:v12 forKey:v13];

        swift_unknownObjectRelease();
        return;
      }
      goto LABEL_8;
    }
    char v25 = v4;
    sub_10000A38C(&qword_10036C018);
    if (swift_dynamicCast())
    {
      sub_1001C9E88(v24, &v26);
      sub_10000D6E4(&v26, v27);
      uint64_t v14 = sub_100116E88();
      uint64_t v18 = v14;
      unint64_t v19 = v15;
      id v20 = *(void **)((char *)v2 + *(void *)(*v2 + 112));
      if (v20)
      {
        id v21 = v20;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        NSString v23 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v21 setValue:isa forKey:v23];
        sub_10000DBEC(v18, v19);
      }
      else
      {
        sub_10000DBEC(v14, v15);
        swift_bridgeObjectRelease();
      }
      sub_10000CC5C((uint64_t)&v26);
    }
    else
    {
      memset(v24, 0, sizeof(v24));
      swift_bridgeObjectRelease();
      sub_10000D78C((uint64_t)v24, (uint64_t *)&unk_10036C020);
      id v16 = sub_1001F68A0();
      NSString v17 = String._bridgeToObjectiveC()();
      [v16 ulog:60 message:v17];
    }
  }
}

void sub_1001BF190(void *a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = v3;
  id v34 = a1;
  CurrentValueSubject.send(_:)();
  if (!*(uint64_t *)((char *)v6 + *(void *)(*v6 + 128) + 8))
  {

    return;
  }
  *(void *)&long long v32 = a1;
  id v8 = a1;
  swift_bridgeObjectRetain();
  sub_10000A38C(a2);
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  self;
  uint64_t v9 = swift_dynamicCastObjCClass();
  swift_unknownObjectRelease();
  uint64_t v10 = *v6;
  if (v9)
  {
    id v11 = *(void **)((char *)v6 + *(void *)(v10 + 112));
    if (v11)
    {
      id v12 = v11;
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v12 removeObjectForKey:v13];

      return;
    }
LABEL_9:
    swift_bridgeObjectRelease();

    return;
  }
  if ((*((unsigned char *)v6 + *(void *)(v10 + 120)) & 1) == 0)
  {
    uint64_t v14 = *(void **)((char *)v6 + *(void *)(v10 + 112));
    if (v14)
    {
      *(void *)&long long v32 = a1;
      id v15 = v8;
      id v16 = v14;
      uint64_t v17 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v16 setValue:v17 forKey:v18];

      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_9;
  }
  uint64_t v31 = a1;
  id v19 = v8;
  sub_10000A38C(&qword_10036C018);
  if (swift_dynamicCast())
  {
    sub_1001C9E88(v30, &v32);
    sub_10000D6E4(&v32, v33);
    uint64_t v23 = sub_100116E88();
    unint64_t v25 = v24;
    long long v26 = *(void **)((char *)v6 + *(void *)(*v6 + 112));
    if (v26)
    {
      id v27 = v26;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v27 setValue:isa forKey:v29];
      sub_10000DBEC(v23, v25);
    }
    else
    {

      sub_10000DBEC(v23, v25);
      swift_bridgeObjectRelease();
    }
    sub_10000CC5C((uint64_t)&v32);
  }
  else
  {
    memset(v30, 0, sizeof(v30));
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_10000D78C((uint64_t)v30, (uint64_t *)&unk_10036C020);
    id v21 = (void *)a3(v20);
    NSString v22 = String._bridgeToObjectiveC()();
    [v21 ulog:60 message:v22];
  }
}

void sub_1001BF584(char a1)
{
  uint64_t v2 = v1;
  char v27 = a1;
  CurrentValueSubject.send(_:)();
  if (*(void *)((char *)v2 + *(void *)(*v2 + 128) + 8))
  {
    LOBYTE(v25) = a1;
    swift_bridgeObjectRetain();
    _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    self;
    uint64_t v4 = swift_dynamicCastObjCClass();
    swift_unknownObjectRelease();
    uint64_t v5 = *v1;
    if (v4)
    {
      uint64_t v6 = *(void **)((char *)v1 + *(void *)(v5 + 112));
      if (v6)
      {
        id v7 = v6;
        NSString v8 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v7 removeObjectForKey:v8];

        return;
      }
LABEL_8:
      swift_bridgeObjectRelease();
      return;
    }
    if ((*((unsigned char *)v1 + *(void *)(v5 + 120)) & 1) == 0)
    {
      uint64_t v9 = *(void **)((char *)v1 + *(void *)(v5 + 112));
      if (v9)
      {
        LOBYTE(v25) = a1;
        id v10 = v9;
        uint64_t v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        NSString v12 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v10 setValue:v11 forKey:v12];

        swift_unknownObjectRelease();
        return;
      }
      goto LABEL_8;
    }
    char v24 = a1;
    sub_10000A38C(&qword_10036C018);
    if (swift_dynamicCast())
    {
      sub_1001C9E88(v23, &v25);
      sub_10000D6E4(&v25, v26);
      uint64_t v13 = sub_100116E88();
      uint64_t v17 = v13;
      unint64_t v18 = v14;
      id v19 = *(void **)((char *)v2 + *(void *)(*v2 + 112));
      if (v19)
      {
        id v20 = v19;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v20 setValue:isa forKey:v22];
        sub_10000DBEC(v17, v18);
      }
      else
      {
        sub_10000DBEC(v13, v14);
        swift_bridgeObjectRelease();
      }
      sub_10000CC5C((uint64_t)&v25);
    }
    else
    {
      memset(v23, 0, sizeof(v23));
      swift_bridgeObjectRelease();
      sub_10000D78C((uint64_t)v23, (uint64_t *)&unk_10036C020);
      id v15 = sub_1001F6AC8();
      NSString v16 = String._bridgeToObjectiveC()();
      [v15 ulog:60 message:v16];
    }
  }
}

void sub_1001BF918(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v31 = a1;
  char v6 = a2 & 1;
  char v32 = a2 & 1;
  CurrentValueSubject.send(_:)();
  if (*(void *)((char *)v3 + *(void *)(*v3 + 128) + 8))
  {
    *(void *)&long long v29 = a1;
    BYTE8(v29) = v6;
    swift_bridgeObjectRetain();
    sub_10000A38C(&qword_100366230);
    _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    self;
    uint64_t v7 = swift_dynamicCastObjCClass();
    swift_unknownObjectRelease();
    uint64_t v8 = *v2;
    if (v7)
    {
      uint64_t v9 = *(void **)((char *)v2 + *(void *)(v8 + 112));
      if (v9)
      {
        id v10 = v9;
        NSString v11 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v10 removeObjectForKey:v11];

        return;
      }
LABEL_8:
      swift_bridgeObjectRelease();
      return;
    }
    if ((*((unsigned char *)v2 + *(void *)(v8 + 120)) & 1) == 0)
    {
      NSString v12 = *(void **)((char *)v2 + *(void *)(v8 + 112));
      if (v12)
      {
        *(void *)&long long v29 = a1;
        BYTE8(v29) = a2 & 1;
        id v13 = v12;
        uint64_t v14 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        NSString v15 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v13 setValue:v14 forKey:v15];

        swift_unknownObjectRelease();
        return;
      }
      goto LABEL_8;
    }
    uint64_t v27 = a1;
    char v28 = a2 & 1;
    sub_10000A38C(&qword_10036C018);
    if (swift_dynamicCast())
    {
      sub_1001C9E88(v26, &v29);
      sub_10000D6E4(&v29, v30);
      uint64_t v16 = sub_100116E88();
      uint64_t v20 = v16;
      unint64_t v21 = v17;
      NSString v22 = *(void **)((char *)v3 + *(void *)(*v3 + 112));
      if (v22)
      {
        id v23 = v22;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        NSString v25 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v23 setValue:isa forKey:v25];
        sub_10000DBEC(v20, v21);
      }
      else
      {
        sub_10000DBEC(v16, v17);
        swift_bridgeObjectRelease();
      }
      sub_10000CC5C((uint64_t)&v29);
    }
    else
    {
      memset(v26, 0, sizeof(v26));
      swift_bridgeObjectRelease();
      sub_10000D78C((uint64_t)v26, (uint64_t *)&unk_10036C020);
      id v18 = sub_1001F6ADC();
      NSString v19 = String._bridgeToObjectiveC()();
      [v18 ulog:60 message:v19];
    }
  }
}

uint64_t *sub_1001BFCD8(void *a1, void (*a2)(void **__return_ptr, void **), uint64_t a3)
{
  uint64_t v4 = v3;
  CurrentValueSubject.value.getter();
  uint64_t v8 = v16;
  if (v16 == (void *)1)
  {
    CurrentValueSubject.value.getter();
    uint64_t v8 = v17;
  }
  uint64_t v16 = v8;
  a2(&v17, &v16);

  uint64_t v9 = v17;
  char v10 = v18;
  sub_10000A38C(&qword_10036BF40);
  swift_allocObject();
  NSString v11 = sub_1001EC5EC(v9, v10, 0, 0, 0);
  unint64_t v17 = a1;
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  id v13 = (void *)swift_allocObject();
  void v13[2] = v12;
  v13[3] = a2;
  v13[4] = a3;
  void v13[5] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000A38C(&qword_10036BF88);
  sub_10000B010(&qword_10036C010, &qword_10036BF88);
  uint64_t v14 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  *(uint64_t *)((char *)v11 + *(void *)(*v11 + 144)) = v14;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v11;
}

uint64_t *sub_1001BFED8(void *a1, void (*a2)(void **__return_ptr, void **), uint64_t a3)
{
  uint64_t v4 = v3;
  CurrentValueSubject.value.getter();
  uint64_t v8 = v16;
  if (v16 == (void *)1)
  {
    CurrentValueSubject.value.getter();
    uint64_t v8 = v17;
  }
  uint64_t v16 = v8;
  a2(&v17, &v16);

  uint64_t v9 = v17;
  char v10 = v18;
  sub_10000A38C(&qword_10036BF40);
  swift_allocObject();
  NSString v11 = sub_1001EC5EC(v9, v10, 0, 0, 0);
  unint64_t v17 = a1;
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  id v13 = (void *)swift_allocObject();
  void v13[2] = v12;
  v13[3] = a2;
  v13[4] = a3;
  void v13[5] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000A38C(&qword_10036BF80);
  sub_10000B010(&qword_10036C050, &qword_10036BF80);
  uint64_t v14 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  *(uint64_t *)((char *)v11 + *(void *)(*v11 + 144)) = v14;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v11;
}

uint64_t *sub_1001C00D8(void *a1, void (*a2)(uint64_t *__return_ptr, void **), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = (void **)&v17;
  CurrentValueSubject.value.getter();
  char v9 = v18;
  if (v18 == 254)
  {
    uint64_t v8 = &v19;
    CurrentValueSubject.value.getter();
    char v9 = v20;
  }
  char v10 = *v8;
  NSString v19 = v10;
  char v20 = v9;
  a2(&v17, &v19);
  sub_100038A4C(v10, v9);
  uint64_t v11 = v17;
  sub_10000A38C((uint64_t *)&unk_10036C060);
  swift_allocObject();
  uint64_t v12 = sub_1001EEE24(v11, 0, 0, 0);
  NSString v19 = a1;
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = v13;
  void v14[3] = a2;
  v14[4] = a3;
  v14[5] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000A38C(&qword_10036BF40);
  sub_10000B010(&qword_10036BFB0, &qword_10036BF40);
  uint64_t v15 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  *(uint64_t *)((char *)v12 + *(void *)(*v12 + 144)) = v15;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v12;
}

BOOL sub_1001C02E8(uint64_t a1, uint64_t *a2, void (*a3)(unsigned char *, void *))
{
  char v6 = v3;
  sub_10000D728(a1, (uint64_t)v20, a2);
  if (v21)
  {
    a3(v20, v22);
    uint64_t v7 = v23;
    uint64_t v8 = v24;
    sub_10000D6E4(v22, v23);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
    sub_10000A38C((uint64_t *)&unk_10035E7E0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10028D430;
    id v11 = [v6 uniqueIdentifier];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    *(void *)(inited + 32) = v12;
    *(void *)(inited + 40) = v14;
    Swift::Int v15 = sub_1001C9F78(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v16 = sub_1001C8154(v15, v9);
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(v16 + 16);
    swift_release();
    BOOL v18 = v17 != 0;
    sub_10000CC5C((uint64_t)v22);
  }
  else
  {
    sub_10000D78C((uint64_t)v20, a2);
    return 0;
  }
  return v18;
}

void *sub_1001C0450(uint64_t a1, unint64_t a2)
{
  return sub_1001C0820(a1, a2, (void (*)(void))sub_10005577C, (void (*)(void))sub_100058EEC);
}

void (*sub_1001C047C(uint64_t a1, unint64_t a2, void (*a3)(void), void (*a4)(void)))(void)
{
  uint64_t v35 = a3;
  uint64_t v41 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v44 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  char v10 = (char *)&v33 - v9;
  if (a2 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    if (v11) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11)
    {
LABEL_3:
      id v34 = a4;
      unint64_t v40 = a2 & 0xC000000000000001;
      id v42 = (void (**)(uint64_t, char *, uint64_t))(v36 + 16);
      Swift::Int v37 = (void (**)(uint64_t, uint64_t))(v36 + 8);
      uint64_t v12 = (void (*)(void))&_swiftEmptyDictionarySingleton;
      uint64_t v13 = 4;
      uint64_t v38 = v11;
      unint64_t v39 = a2;
      while (1)
      {
        if (v40) {
          uint64_t v16 = (void (*)(void))specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v16 = (void (*)(void))*(id *)(a2 + 8 * v13);
        }
        a4 = v16;
        if (__OFADD__(v13 - 4, 1))
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        uint64_t v43 = v13 - 3;
        id v46 = v16;
        swift_bridgeObjectRetain();
        swift_getAtKeyPath();
        uint64_t v17 = *v42;
        uint64_t v18 = (uint64_t)v44;
        NSString v19 = v10;
        char v20 = v10;
        char v10 = (char *)v6;
        (*v42)((uint64_t)v44, v20, v6);
        a2 = a4;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v45 = v12;
        a4 = v12;
        unint64_t v23 = sub_100269DA0(v18);
        uint64_t v24 = *((void *)v12 + 2);
        BOOL v25 = (v22 & 1) == 0;
        if (__OFADD__(v24, v25)) {
          goto LABEL_23;
        }
        char v26 = v22;
        if (*((void *)v12 + 3) >= v24 + v25)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            a4 = v45;
            if (v22) {
              goto LABEL_4;
            }
          }
          else
          {
            v34();
            a4 = v45;
            if (v26) {
              goto LABEL_4;
            }
          }
        }
        else
        {
          v35();
          unint64_t v27 = sub_100269DA0((uint64_t)v44);
          if ((v26 & 1) != (v28 & 1))
          {
            uint64_t result = (void (*)(void))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v23 = v27;
          a4 = v45;
          if (v26)
          {
LABEL_4:
            uint64_t v14 = *((void *)a4 + 7);

            *(void *)(v14 + 8 * v23) = a2;
            uint64_t v6 = (uint64_t)v10;
            goto LABEL_5;
          }
        }
        *((void *)a4 + (v23 >> 6) + 8) |= 1 << v23;
        uint64_t v6 = (uint64_t)v10;
        v17(*((void *)a4 + 6) + *(void *)(v36 + 72) * v23, v44, (uint64_t)v10);
        *(void *)(*((void *)a4 + 7) + 8 * v23) = a2;
        uint64_t v29 = *((void *)a4 + 2);
        BOOL v30 = __OFADD__(v29, 1);
        uint64_t v31 = v29 + 1;
        if (v30) {
          goto LABEL_24;
        }
        *((void *)a4 + 2) = v31;
LABEL_5:
        swift_bridgeObjectRelease();
        Swift::Int v15 = *v37;
        (*v37)((uint64_t)v44, v6);
        char v10 = v19;
        v15((uint64_t)v19, v6);
        swift_bridgeObjectRelease();

        ++v13;
        uint64_t v12 = a4;
        a2 = v39;
        if (v43 == v38)
        {
          swift_bridgeObjectRelease();
          return a4;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return (void (*)(void))&_swiftEmptyDictionarySingleton;
}

void *sub_1001C0820(uint64_t a1, unint64_t a2, void (*a3)(void), void (*a4)(void))
{
  unint64_t v5 = a2;
  if (a2 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      char v26 = a4;
      unint64_t v29 = v5 & 0xC000000000000001;
      uint64_t v7 = &_swiftEmptyDictionarySingleton;
      uint64_t v8 = 4;
      unint64_t v28 = v5;
      while (1)
      {
        uint64_t v10 = v8 - 4;
        if (v29)
        {
          uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v12 = v8 - 3;
          if (__OFADD__(v10, 1)) {
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v11 = *(void *)(v5 + 8 * v8);
          swift_retain();
          uint64_t v12 = v8 - 3;
          if (__OFADD__(v10, 1))
          {
LABEL_23:
            __break(1u);
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
            goto LABEL_26;
          }
        }
        BOOL v30 = (void (*)(void))v12;
        a4 = (void (*)(void))v6;
        swift_bridgeObjectRetain();
        swift_getAtKeyPath();
        swift_bridgeObjectRetain();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v5 = sub_100269CBC(v31, v32);
        uint64_t v15 = v7[2];
        BOOL v16 = (v14 & 1) == 0;
        if (__OFADD__(v15, v16)) {
          goto LABEL_24;
        }
        char v17 = v14;
        if (v7[3] >= v15 + v16)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            char v20 = v7;
            if (v14) {
              goto LABEL_4;
            }
          }
          else
          {
            v26();
            char v20 = v7;
            if (v17) {
              goto LABEL_4;
            }
          }
        }
        else
        {
          a3();
          unint64_t v18 = sub_100269CBC(v31, v32);
          if ((v17 & 1) != (v19 & 1))
          {
            uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v5 = v18;
          char v20 = v7;
          if (v17)
          {
LABEL_4:
            uint64_t v9 = v20[7];
            swift_release();
            *(void *)(v9 + 8 * v5) = v11;
            goto LABEL_5;
          }
        }
        v20[(v5 >> 6) + 8] |= 1 << v5;
        uint64_t v21 = (uint64_t *)(v20[6] + 16 * v5);
        *uint64_t v21 = v31;
        v21[1] = v32;
        *(void *)(v20[7] + 8 * v5) = v11;
        uint64_t v22 = v20[2];
        BOOL v23 = __OFADD__(v22, 1);
        uint64_t v24 = v22 + 1;
        if (v23) {
          goto LABEL_25;
        }
        v20[2] = v24;
        swift_bridgeObjectRetain();
LABEL_5:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        ++v8;
        uint64_t v7 = v20;
        uint64_t v6 = (uint64_t)a4;
        unint64_t v5 = v28;
        if (v30 == a4)
        {
          swift_bridgeObjectRelease();
          return v20;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return &_swiftEmptyDictionarySingleton;
}

void *sub_1001C0ADC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (a2 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      unint64_t v25 = v2 & 0xC000000000000001;
      uint64_t v4 = &_swiftEmptyDictionarySingleton;
      uint64_t v5 = 4;
      unint64_t v24 = v2;
      while (1)
      {
        if (v25) {
          id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v7 = *(id *)(v2 + 8 * v5);
        }
        uint64_t v8 = v7;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        uint64_t v26 = v5 - 3;
        swift_bridgeObjectRetain();
        swift_getAtKeyPath();
        swift_bridgeObjectRetain();
        unint64_t v2 = v8;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v11 = sub_100269CBC(v27, v28);
        uint64_t v12 = v4[2];
        BOOL v13 = (v10 & 1) == 0;
        uint64_t v14 = v12 + v13;
        if (__OFADD__(v12, v13)) {
          goto LABEL_23;
        }
        char v15 = v10;
        if (v4[3] >= v14)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            unint64_t v18 = v4;
            if (v10) {
              goto LABEL_4;
            }
          }
          else
          {
            sub_100059C00();
            unint64_t v18 = v4;
            if (v15) {
              goto LABEL_4;
            }
          }
        }
        else
        {
          sub_100056B78(v14, isUniquelyReferenced_nonNull_native);
          unint64_t v16 = sub_100269CBC(v27, v28);
          if ((v15 & 1) != (v17 & 1))
          {
            uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v11 = v16;
          unint64_t v18 = v4;
          if (v15)
          {
LABEL_4:
            uint64_t v6 = v18[7];

            *(void *)(v6 + 8 * v11) = v2;
            goto LABEL_5;
          }
        }
        v18[(v11 >> 6) + 8] |= 1 << v11;
        char v19 = (uint64_t *)(v18[6] + 16 * v11);
        *char v19 = v27;
        v19[1] = v28;
        *(void *)(v18[7] + 8 * v11) = v2;
        uint64_t v20 = v18[2];
        BOOL v21 = __OFADD__(v20, 1);
        uint64_t v22 = v20 + 1;
        if (v21) {
          goto LABEL_24;
        }
        void v18[2] = v22;
        swift_bridgeObjectRetain();
LABEL_5:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        ++v5;
        uint64_t v4 = v18;
        unint64_t v2 = v24;
        if (v26 == v3)
        {
          swift_bridgeObjectRelease();
          return v18;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return &_swiftEmptyDictionarySingleton;
}

uint64_t sub_1001C0D64(unint64_t a1)
{
  return sub_1001C0F54(a1, (void (*)(void))sub_100055758, (void (*)(void))sub_100058EC8, sub_10002A810, (void (*)(uint64_t))sub_1000F0808);
}

uint64_t sub_1001C0DB8(unint64_t a1)
{
  return sub_1001C0E0C(a1, (void (*)(void))sub_10005577C, (void (*)(void))sub_100058EEC, sub_10002A814, (void (*)(uint64_t))sub_1000F06FC);
}

uint64_t sub_1001C0E0C(unint64_t a1, void (*a2)(void), void (*a3)(void), uint64_t (*a4)(uint64_t), void (*a5)(uint64_t))
{
  swift_beginAccess();
  uint64_t v11 = *(void *)(v5 + 64);
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_retain();
  BOOL v13 = sub_1001C0820(v12, a1, a2, a3);
  swift_release();
  [*(id *)(v5 + 32) lock];
  *(void *)(v5 + 64) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  [*(id *)(v5 + 32) unlock];
  sub_1001C1360(v11, (uint64_t)v13, a4, a5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001C0F00(unint64_t a1)
{
  return sub_1001C0F54(a1, (void (*)(void))sub_10005676C, (void (*)(void))sub_100059954, sub_10002A810, (void (*)(uint64_t))sub_1000F0808);
}

uint64_t sub_1001C0F54(unint64_t a1, void (*a2)(void), void (*a3)(void), uint64_t (*a4)(uint64_t), void (*a5)(uint64_t))
{
  swift_beginAccess();
  uint64_t v11 = *(void *)(v5 + 64);
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_retain();
  BOOL v13 = sub_1001C047C(v12, a1, a2, a3);
  swift_release();
  [*(id *)(v5 + 32) lock];
  *(void *)(v5 + 64) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  [*(id *)(v5 + 32) unlock];
  sub_1001C118C(v11, (uint64_t)v13, a4, a5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001C1048(unint64_t a1)
{
  return sub_1001C0E0C(a1, (void (*)(void))sub_100056B6C, (void (*)(void))sub_100059BF4, sub_10002A814, (void (*)(uint64_t))sub_1000F06FC);
}

uint64_t sub_1001C109C(unint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 64);
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_retain();
  uint64_t v5 = sub_1001C0ADC(v4, a1);
  swift_release();
  [*(id *)(v1 + 32) lock];
  *(void *)(v1 + 64) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  [*(id *)(v1 + 32) unlock];
  sub_1001C1534(v3, (uint64_t)v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001C1160(uint64_t a1, uint64_t a2)
{
  return sub_1001C1360(a1, a2, sub_10002A814, (void (*)(uint64_t))sub_1000F06FC);
}

uint64_t sub_1001C118C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), void (*a4)(uint64_t))
{
  uint64_t v7 = v4;
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = a3(v10);
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = a3(v12);
  uint64_t v14 = v13;
  if (*(void *)(v11 + 16) <= *(void *)(v13 + 16) >> 3)
  {
    char v19 = (void *)v13;
    swift_bridgeObjectRetain();
    sub_100035044(v11);
    char v15 = v19;
  }
  else
  {
    swift_bridgeObjectRetain();
    char v15 = sub_100035B4C(v11, v14);
  }
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1001C8C78((uint64_t)v15, a2, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v14 + 16) <= *(void *)(v11 + 16) >> 3)
  {
    sub_100035044(v14);
    swift_bridgeObjectRelease();
    uint64_t v16 = v11;
  }
  else
  {
    uint64_t v16 = (uint64_t)sub_100035B4C(v14, v11);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1001C902C(v16, a1, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  swift_retain();
  uint64_t v17 = swift_bridgeObjectRetain();
  a4(v17);
  swift_bridgeObjectRelease();
  PassthroughSubject.send(_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_1001C1360(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), void (*a4)(uint64_t))
{
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = a3(v8);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = a3(v10);
  uint64_t v12 = v11;
  if (*(void *)(v9 + 16) <= *(void *)(v11 + 16) >> 3)
  {
    uint64_t v17 = (unint64_t *)v11;
    swift_bridgeObjectRetain();
    sub_1000353CC(v9);
    uint64_t v13 = v17;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_100036218(v9, v12);
  }
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1001C93E0((uint64_t)v13, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v12 + 16) <= *(void *)(v9 + 16) >> 3)
  {
    sub_1000353CC(v12);
    swift_bridgeObjectRelease();
    uint64_t v14 = (unint64_t *)v9;
  }
  else
  {
    uint64_t v14 = sub_100036218(v12, v9);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1001C95C8((uint64_t)v14, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  swift_retain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a4(v15);
  swift_bridgeObjectRelease();
  PassthroughSubject.send(_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_1001C1534(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_10002A814(v4);
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_10002A814(v6);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16) <= *(void *)(v7 + 16) >> 3)
  {
    uint64_t v13 = (unint64_t *)v7;
    swift_bridgeObjectRetain();
    sub_1000353CC(v5);
    uint64_t v9 = v13;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_100036218(v5, v8);
  }
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1001C97B0((uint64_t)v9, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v8 + 16) <= *(void *)(v5 + 16) >> 3)
  {
    sub_1000353CC(v8);
    swift_bridgeObjectRelease();
    uint64_t v10 = (unint64_t *)v5;
  }
  else
  {
    uint64_t v10 = sub_100036218(v8, v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1001C9994((uint64_t)v10, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  swift_retain();
  uint64_t v11 = swift_bridgeObjectRetain();
  sub_1000F0808(v11);
  swift_bridgeObjectRelease();
  PassthroughSubject.send(_:)();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for TelephonyProxyState()
{
  return self;
}

uint64_t sub_1001C1718(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1000B4664(a1, WitnessTable);
}

id sub_1001C176C@<X0>(uint64_t *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  int v4 = *((unsigned __int8 *)a1 + 8);
  if (v4 == 255)
  {
    id result = 0;
  }
  else
  {
    uint64_t v7 = *a1;
    id v8 = objc_allocWithZone((Class)PCTelephonyActivity);
    uint64_t v9 = &selRef_initFromKnownCall_;
    if ((a2 & 1) == 0) {
      uint64_t v9 = &selRef_initFromSensitiveCall_;
    }
    uint64_t v10 = &selRef_initFromKnownConversation_;
    if ((a2 & 1) == 0) {
      uint64_t v10 = &selRef_initFromSensitiveConversation_;
    }
    if (v4) {
      uint64_t v9 = v10;
    }
    id result = [v8 *v9 v7];
  }
  *a3 = result;
  return result;
}

uint64_t sub_1001C1800(uint64_t a1, char a2)
{
  return sub_1001CA438(a2);
}

void *sub_1001C1828()
{
  type metadata accessor for TelephonyProxyState();
  uint64_t v0 = swift_allocObject();
  sub_10000A38C(&qword_10036BF40);
  swift_allocObject();
  *(void *)(v0 + 16) = sub_1001EC5EC(0, 255, 0, 0, 0);
  id v1 = objc_allocWithZone((Class)type metadata accessor for TelephonyProxy());
  id result = sub_1001C1A04(v0);
  qword_1003ACA78 = (uint64_t)result;
  return result;
}

void sub_1001C18B4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 uniqueIdentifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t sub_1001C190C()
{
  swift_retain();
  CurrentValueSubject.value.getter();
  if (v1 != (void *)1)
  {
    swift_release();
    unint64_t v2 = v1;

    if (!v1) {
      goto LABEL_5;
    }
    return 1;
  }
  CurrentValueSubject.value.getter();
  swift_release();

  if (v2) {
    return 1;
  }
LABEL_5:
  swift_retain();
  CurrentValueSubject.value.getter();
  if (v1 == (void *)1)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    if (v2)
    {

      return 1;
    }
  }
  else
  {
    swift_release();
  }
  return 0;
}

void *sub_1001C1A04(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_10000A38C(&qword_10036BF48);
  uint64_t v96 = *(void *)(v3 - 8);
  uint64_t v97 = v3;
  __chkstk_darwin(v3);
  char v95 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10036BF50);
  uint64_t v93 = *(void *)(v5 - 8);
  uint64_t v94 = v5;
  __chkstk_darwin(v5);
  char v92 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C((uint64_t *)&unk_10036BF58);
  uint64_t v90 = *(void *)(v7 - 8);
  uint64_t v91 = v7;
  __chkstk_darwin(v7);
  char v89 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10035AC20);
  __chkstk_darwin(v9 - 8);
  uint64_t v83 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000A38C(&qword_10036BF68);
  uint64_t v87 = *(void *)(v88 - 8);
  uint64_t v11 = __chkstk_darwin(v88);
  uint64_t v85 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = v12;
  __chkstk_darwin(v11);
  uint64_t v100 = (char *)&v77 - v13;
  uint64_t v81 = sub_10000A38C(&qword_10036BF70);
  uint64_t v80 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v78 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000A38C(&qword_10036BF78);
  uint64_t v82 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v79 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_callCenter;
  uint64_t v17 = self;
  unint64_t v18 = v1;
  *(void *)&v1[v16] = [v17 sharedInstance];
  uint64_t v19 = OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_conversationManager;
  id v20 = [v17 sharedInstance];
  id v21 = [v20 conversationManager];

  *(void *)&v18[v19] = v21;
  uint64_t v22 = OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy__activeAudioCall;
  sub_10000A38C(&qword_10036BF80);
  swift_allocObject();
  *(void *)&v18[v22] = sub_1001EBE58(0, 0, 0, 0, 0, 0);
  uint64_t v23 = OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy__activeVideoCall;
  swift_allocObject();
  *(void *)&v18[v23] = sub_1001EBE58(0, 0, 0, 0, 0, 0);
  uint64_t v24 = OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy__activeConversation;
  sub_10000A38C(&qword_10036BF88);
  swift_allocObject();
  *(void *)&v18[v24] = sub_1001EBE00(0, 0, 0, 0, 0, 0);
  uint64_t v25 = OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_homepodRoutes;
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000A38C(&qword_10036BF90);
  uint64_t v27 = swift_allocObject();
  *(unsigned char *)(v27 + 24) = 0;
  *(void *)(v27 + 32) = [objc_allocWithZone((Class)NSLock) init];
  sub_10000A38C(&qword_10036BF98);
  swift_allocObject();
  uint64_t v28 = PassthroughSubject.init()();
  sub_10000A38C((uint64_t *)&unk_10036BFA0);
  swift_allocObject();
  uint64_t v29 = PassthroughSubject.init()();
  swift_allocObject();
  uint64_t v30 = PassthroughSubject.init()();
  *(void *)(v27 + 40) = v28;
  *(void *)(v27 + 48) = v29;
  *(void *)(v27 + 56) = v30;
  *(void *)(v27 + 64) = &_swiftEmptyDictionarySingleton;
  *(void *)(v27 + 72) = 0;
  *(void *)(v27 + 16) = KeyPath;
  *(unsigned char *)(v27 + 24) = 0;
  *(void *)&v18[v25] = v27;
  *(void *)&v18[OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_tasks] = &_swiftEmptySetSingleton;
  *(void *)&v18[OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_state] = a1;
  uint64_t v99 = a1;
  swift_retain();

  uint64_t v31 = (objc_class *)type metadata accessor for TelephonyProxy();
  v104.receiver = v18;
  v104.super_class = v31;
  id v32 = [super init];
  v103[3] = &type metadata for Feature;
  v103[4] = sub_10000CC08();
  LOBYTE(v103[0]) = 9;
  uint64_t v33 = (char *)v32;
  char v34 = isFeatureEnabled(_:)();
  sub_10000CC5C((uint64_t)v103);
  uint64_t v35 = *(void **)&v33[OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy__activeAudioCall];
  sub_10000A38C(&qword_10036BF40);
  swift_retain();
  v103[0] = sub_1001BFED8(v35, (void (*)(void **__return_ptr, void **))sub_1001CAC04, 0);
  if (v34)
  {
    uint64_t v36 = (void *)swift_retain();
    unsigned int v102 = sub_1001BFED8(v36, (void (*)(void **__return_ptr, void **))sub_1001C2A38, 0);
    Swift::Int v37 = (void *)swift_retain();
    uint64_t v101 = sub_1001BFCD8(v37, (void (*)(void **__return_ptr, void **))sub_1001C2A50, 0);
    sub_10000B010(&qword_10036BFB0, &qword_10036BF40);
    uint64_t v38 = v78;
    Publishers.CombineLatest3.init(_:_:_:)();
    sub_10000A38C(&qword_10035D058);
    sub_10000B010(&qword_10036C000, &qword_10036BF70);
    unint64_t v39 = v79;
    uint64_t v40 = v81;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v38, v40);
    sub_10000B010(&qword_10036C008, &qword_10036BF78);
    uint64_t v41 = v86;
    uint64_t v42 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v39, v41);
  }
  else
  {
    sub_10000B010(&qword_10036BFB0, &qword_10036BF40);
    uint64_t v42 = Publisher.eraseToAnyPublisher()();
    swift_release();
  }
  uint64_t v86 = (uint64_t)v33;
  v103[0] = v42;
  uint64_t v43 = qword_10035A628;
  uint64_t v82 = v42;
  swift_retain();
  if (v43 != -1) {
    swift_once();
  }
  uint64_t v44 = (void *)qword_1003ACB50;
  unsigned int v102 = (uint64_t *)qword_1003ACB50;
  uint64_t v45 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v46 = (uint64_t)v83;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v83, 1, 1, v45);
  id v47 = v44;
  uint64_t v81 = sub_10000A38C((uint64_t *)&unk_10036BFB8);
  sub_100019E10(0, (unint64_t *)&qword_10035A680);
  uint64_t v80 = sub_10000B010(&qword_10036BFC8, (uint64_t *)&unk_10036BFB8);
  sub_1000713A8((unint64_t *)&qword_10035AC60, (unint64_t *)&qword_10035A680);
  uint64_t v48 = v100;
  Publisher.receive<A>(on:options:)();
  sub_10000D78C(v46, &qword_10035AC20);

  swift_release();
  id v49 = sub_1001F5FD0();
  uint64_t v50 = v87;
  uint64_t v51 = v85;
  uint64_t v52 = v88;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v85, v48, v88);
  unint64_t v53 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
  unint64_t v54 = (v84 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v55 = (v54 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v56 = (v55 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = sub_1001C2B14;
  *(void *)(v57 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v50 + 32))(v57 + v53, v51, v52);
  uint64_t v58 = (void *)(v57 + v54);
  *uint64_t v58 = 0xD000000000000010;
  v58[1] = 0x80000001002C36D0;
  uint64_t v59 = (void *)(v57 + v55);
  *uint64_t v59 = 0;
  v59[1] = 0xE000000000000000;
  *(void *)(v57 + v56) = v49;
  *(_DWORD *)(v57 + ((v56 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  id v60 = v49;
  sub_10000A38C(&qword_10035D058);
  sub_10000B010(&qword_10036BFD0, &qword_10036BF68);
  uint64_t v61 = v89;
  uint64_t v62 = v100;
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10036BFD8, (uint64_t *)&unk_10036BF58);
  uint64_t v63 = v91;
  uint64_t v64 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v61, v63);

  (*(void (**)(char *, uint64_t))(v50 + 8))(v62, v52);
  v103[0] = v64;
  swift_retain();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  uint64_t v65 = (void *)v86;
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  if (qword_10035A648 != -1) {
    swift_once();
  }
  swift_retain();
  v103[0] = sub_100104B88();
  sub_10000A38C((uint64_t *)&unk_10036BFE0);
  sub_10000B010((unint64_t *)&unk_100363D30, (uint64_t *)&unk_10036BFE0);
  uint64_t v66 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
  v103[0] = v66;
  sub_10000A38C(&qword_10035ACA0);
  sub_10000B010(&qword_10035ACB0, &qword_10035ACA0);
  uint64_t v67 = v92;
  Publisher.filter(_:)();
  swift_release();
  sub_10000B010(&qword_10036BFF0, &qword_10036BF50);
  uint64_t v69 = v94;
  long long v68 = v95;
  Publisher.map<A>(_:)();
  sub_10000B010(&qword_10036BFF8, &qword_10036BF48);
  uint64_t v70 = v97;
  uint64_t v71 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v68, v70);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v67, v69);
  v103[0] = v71;
  uint64_t v72 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v73 = swift_allocObject();
  uint64_t v74 = ObjectType;
  *(void *)(v73 + 16) = v72;
  *(void *)(v73 + 24) = v74;
  uint64_t v75 = swift_allocObject();
  *(void *)(v75 + 16) = sub_1001C8B08;
  *(void *)(v75 + 24) = v73;
  sub_10000A38C((uint64_t *)&unk_100367FA0);
  sub_10000B010(&qword_10036B020, (uint64_t *)&unk_100367FA0);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  return v65;
}

id sub_1001C2A38@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *a1;
  if (v2) {
    char v3 = 0;
  }
  else {
    char v3 = -1;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  return v2;
}

id sub_1001C2A50@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *a1;
  if (v2) {
    char v3 = 1;
  }
  else {
    char v3 = -1;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  return v2;
}

id sub_1001C2A6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(void **)a1;
  int v4 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  if (v4 == 255)
  {
    uint64_t v7 = *(void **)(a1 + 16);
    int v8 = *(unsigned __int8 *)(a1 + 24);
    uint64_t v5 = v7;
    char v6 = *(unsigned char *)(a1 + 24);
    if (v8 == 255)
    {
      uint64_t v5 = *(void **)(a1 + 32);
      char v6 = *(unsigned char *)(a1 + 40);
      sub_100038A38(v5, v6);
    }
    sub_100038A38(v7, v8);
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v6;

  return sub_100038A38(v3, v4);
}

uint64_t sub_1001C2B14(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) == 255) {
    return 7104878;
  }
  id v2 = *(id *)a1;
  return String.init<A>(describing:)();
}

uint64_t sub_1001C2B70(uint64_t a1)
{
  id v1 = *(id *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  sub_100038A38(*(id *)a1, v2);
  swift_retain();
  sub_1001BCD80(v1, v2);

  return swift_release();
}

void sub_1001C2BD4(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    int v4 = (void *)Strong;
    swift_retain();
    CurrentValueSubject.value.getter();
    uint64_t v5 = v6;
    if (v6 == (void *)1)
    {
      CurrentValueSubject.value.getter();
      swift_release();
      uint64_t v5 = v7;
      if (v7)
      {
LABEL_4:

        goto LABEL_10;
      }
    }
    else
    {
      swift_release();
      if (v6) {
        goto LABEL_4;
      }
    }
    swift_retain();
    CurrentValueSubject.value.getter();
    if (v6 != (void *)1)
    {
      swift_release();

LABEL_11:
      return;
    }
    CurrentValueSubject.value.getter();
    swift_release();

    if (!v7) {
      goto LABEL_11;
    }
LABEL_10:
    sub_10016ABE4(0xD000000000000028, (void *)0x80000001002C3730, 0, a2, (uint64_t)&off_10032F558);
    sub_1001C2D64((uint64_t)sub_1001C9F3C, (uint64_t)&unk_10032F730);
    sub_1001C2D64((uint64_t)sub_1001C9EA0, (uint64_t)&unk_10032F708);
    goto LABEL_11;
  }
}

uint64_t sub_1001C2D64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019E10(0, (unint64_t *)&qword_10035A680);
  uint64_t v11 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = a1;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = a2;
  uint64_t v13 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1001C9EF4((unint64_t *)&qword_100363D50, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v16);
}

id sub_1001C303C()
{
  id v1 = [self defaultCenter];
  [v1 removeObserver:v0];

  [*(id *)&v0[OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_conversationManager] removeDelegate:v0];
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for TelephonyProxy();
  [super dealloc];
}

uint64_t sub_1001C321C()
{
  uint64_t ObjectType = swift_getObjectType();
  id v1 = sub_1001F5FD0();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = ObjectType;
  sub_10000A38C((uint64_t *)&unk_100363D00);
  swift_allocObject();
  return Future.init(_:)();
}

uint64_t sub_1001C330C(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10000A38C(&qword_10036C0D8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_retain();
  if (Strong)
  {
    uint64_t v18 = sub_1001C3680();
    uint64_t v21 = sub_1001C3680();
    uint64_t v20 = sub_1001C3680();
    sub_10000A38C((uint64_t *)&unk_100363D00);
    sub_10000B010(&qword_100368130, (uint64_t *)&unk_100363D00);
    Publishers.Zip3.init(_:_:_:)();
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v14 = (void *)swift_allocObject();
    void v14[2] = v13;
    void v14[3] = sub_1000CF728;
    v14[4] = v11;
    v14[5] = a4;
    sub_10000B010(&qword_10036C0F0, &qword_10036C0D8);
    Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();

    return swift_release();
  }
  else
  {
    swift_release();
    sub_10001A050();
    uint64_t v16 = swift_allocError();
    *(void *)uint64_t v17 = 0x666C6573206C696ELL;
    *(void *)(v17 + 8) = 0xE800000000000000;
    *(unsigned char *)(v17 + 16) = 9;
    uint64_t v18 = v16;
    char v19 = 1;
    a1(&v18);
    return swift_errorRelease();
  }
}

uint64_t sub_1001C3680()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = ObjectType;
  sub_10000A38C((uint64_t *)&unk_100363D00);
  swift_allocObject();
  id v3 = v0;
  return Future.init(_:)();
}

void sub_1001C3700(uint64_t *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = (void *)Strong;
    if (v7)
    {
      swift_errorRetain();
      _StringGuts.grow(_:)(25);
      v10._object = (void *)0x80000001002BE350;
      v10._uint64_t countAndFlagsBits = 0xD000000000000017;
      String.append(_:)(v10);
      sub_10000A38C((uint64_t *)&unk_100365D60);
      _print_unlocked<A, B>(_:_:)();
      id v11 = sub_1001F5FD0();
      swift_bridgeObjectRetain();
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v11 ulog:90 message:v12 v7 0 0xE000000000000000];
      swift_bridgeObjectRelease();

      swift_errorRetain();
      ((void (*)(uint64_t, uint64_t))a3)(v7, 1);

      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      id v14 = sub_1001F5FD0();
      NSString v15 = String._bridgeToObjectiveC()();
      [v14 ulog:40 message:v15];

      sub_1001C419C();
      ((void (*)(void, void))a3)(0, 0);
    }
  }
  else
  {
    sub_10016AE10(90, 0xD000000000000020, (void *)0x80000001002C3A00, 0, a5, (uint64_t)&off_10032F558);
    sub_10001A050();
    swift_allocError();
    *(void *)uint64_t v13 = 0x666C6573206C696ELL;
    *(void *)(v13 + 8) = 0xE800000000000000;
    *(unsigned char *)(v13 + 16) = 9;
    a3();
    swift_errorRelease();
  }
}

void *sub_1001C396C(void *a1)
{
  id v73 = a1;
  uint64_t v70 = sub_10000A38C(&qword_100366648);
  __chkstk_darwin(v70);
  uint64_t v71 = (char *)&v61 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_10000A38C(&qword_10036C090);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v61 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  id v11 = (char *)&v61 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  id v14 = (char *)&v61 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v61 - v15;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v69 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v74 = (char *)&v61 - v21;
  swift_retain();
  CurrentValueSubject.value.getter();
  int v22 = v76;
  uint64_t v72 = v8;
  if (v76 == 254)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    uint64_t v23 = v77;
    LOBYTE(v22) = v78;
    if (v78 == 255) {
      return v23;
    }
LABEL_5:
    id v24 = v23;
    uint64_t v25 = v24;
    uint64_t v66 = v5;
    long long v68 = v11;
    if (v22)
    {
      id v35 = [v24 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100038A4C(v23, v22);
    }
    else
    {
      uint64_t v65 = v18;
      id v26 = [v24 callUUID];
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v28;

      sub_100038A4C(v23, v22);
      id v30 = [v73 callUUID];
      if (v30)
      {
        uint64_t v31 = v30;
        uint64_t v67 = v23;
        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v34 = v33;

        if (v32 == v27 && v34 == v29)
        {
          swift_bridgeObjectRelease_n();
          return v67;
        }
        char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v23 = v67;
        if (v36) {
          return v23;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      Swift::Int v37 = self;
      id v38 = v25;
      id v39 = [v37 sharedInstance];
      id v40 = [v39 activeConversationForCall:v38];

      if (!v40)
      {
        sub_100038A4C(v23, v22);
        uint64_t v18 = v65;
        uint64_t v42 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v65 + 7);
        v42(v14, 1, 1, v17);
LABEL_16:
        sub_10001639C((uint64_t)v14, (uint64_t)v16, &qword_10036C090);
        uint64_t v43 = (unsigned int (*)(char *, uint64_t, uint64_t))*((void *)v18 + 6);
        if (v43(v16, 1, v17) == 1)
        {
          sub_100038A4C(v23, v22);
          sub_10000D78C((uint64_t)v16, &qword_10036C090);
          return 0;
        }
        uint64_t v65 = v43;
        uint64_t v67 = v23;
        int v64 = v22 & 1;
        uint64_t v62 = (void (*)(char *, char *, uint64_t))*((void *)v18 + 4);
        uint64_t v63 = (void *)((char *)v18 + 32);
        v62(v74, v16, v17);
        id v44 = [v73 conversationUUID];
        if (v44)
        {
          uint64_t v45 = v44;
          uint64_t v46 = (uint64_t)v68;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v47 = v46;
          uint64_t v48 = 0;
        }
        else
        {
          uint64_t v46 = (uint64_t)v68;
          uint64_t v47 = (uint64_t)v68;
          uint64_t v48 = 1;
        }
        v42((char *)v47, v48, 1, v17);
        uint64_t v49 = (uint64_t)v71;
        uint64_t v50 = (uint64_t)v72;
        uint64_t v51 = v74;
        (*((void (**)(char *, char *, uint64_t))v18 + 2))(v72, v74, v17);
        v42((char *)v50, 0, 1, v17);
        uint64_t v52 = v49 + *(int *)(v70 + 48);
        sub_10000D728(v46, v49, &qword_10036C090);
        sub_10000D728(v50, v52, &qword_10036C090);
        unint64_t v53 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v65;
        if (v65((char *)v49, 1, v17) == 1)
        {
          sub_10000D78C(v50, &qword_10036C090);
          sub_10000D78C(v46, &qword_10036C090);
          (*((void (**)(char *, uint64_t))v18 + 1))(v51, v17);
          uint64_t v54 = v49;
          if (v53(v52, 1, v17) == 1)
          {
            sub_10000D78C(v49, &qword_10036C090);
            return v67;
          }
        }
        else
        {
          uint64_t v55 = (uint64_t)v66;
          sub_10000D728(v49, (uint64_t)v66, &qword_10036C090);
          uint64_t v54 = v49;
          if (v53(v52, 1, v17) != 1)
          {
            uint64_t v57 = v69;
            v62(v69, (char *)v52, v17);
            sub_1001C9EF4((unint64_t *)&qword_10036C0C0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
            char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v59 = (void (*)(char *, uint64_t))*((void *)v18 + 1);
            v59(v57, v17);
            sub_10000D78C((uint64_t)v72, &qword_10036C090);
            sub_10000D78C((uint64_t)v68, &qword_10036C090);
            v59(v74, v17);
            v59((char *)v55, v17);
            sub_10000D78C(v49, &qword_10036C090);
            uint64_t v23 = v67;
            if (v58) {
              return v23;
            }
            goto LABEL_29;
          }
          sub_10000D78C((uint64_t)v72, &qword_10036C090);
          sub_10000D78C((uint64_t)v68, &qword_10036C090);
          unint64_t v56 = (void (*)(char *, uint64_t))*((void *)v18 + 1);
          v56(v74, v17);
          v56((char *)v55, v17);
        }
        sub_10000D78C(v54, &qword_100366648);
        uint64_t v23 = v67;
LABEL_29:
        sub_100038A4C(v23, v22);
        return 0;
      }
      id v41 = [v40 UUID];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100038A4C(v23, v22);
      uint64_t v18 = v65;
    }
    uint64_t v42 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v18 + 7);
    v42(v14, 0, 1, v17);
    goto LABEL_16;
  }
  uint64_t v23 = v75;
  swift_release();
  if (v22 != 255) {
    goto LABEL_5;
  }
  return v23;
}

uint64_t sub_1001C419C()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = sub_1001F5FD0();
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 ulog:40 message:v9];

  sub_100019E10(0, (unint64_t *)&qword_10035A680);
  uint64_t v10 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = ObjectType;
  aBlock[4] = sub_1001CAA30;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_10032F898;
  uint64_t v13 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1001C9EF4((unint64_t *)&qword_100363D50, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v16);
}

void sub_1001C44F8(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    id v5 = [*(id *)(Strong + OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_callCenter) routeController];
    id v6 = [v5 routes];

    sub_100019E10(0, &qword_10036C098);
    unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v20 = (uint64_t)_swiftEmptyArrayStorage;
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v8) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v8)
      {
LABEL_4:
        if (v8 < 1)
        {
          __break(1u);
          goto LABEL_34;
        }
        for (uint64_t i = 0; i != v8; ++i)
        {
          if ((v7 & 0xC000000000000001) != 0) {
            id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v10 = *(id *)(v7 + 8 * i + 32);
          }
          uint64_t v11 = v10;
          if ([v10 isHomePodFamily])
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
          }
        }
        swift_bridgeObjectRelease();
        int64_t v12 = v20;
LABEL_16:
        uint64_t v20 = 0x20646E756F46;
        uint64_t v21 = (void *)0xE600000000000000;
        BOOL v13 = v12 < 0 || (v12 & 0x4000000000000000) != 0;
        if (v13)
        {
          swift_bridgeObjectRetain();
          _CocoaArrayWrapper.endIndex.getter();
          swift_release();
        }
        v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v14);
        swift_bridgeObjectRelease();
        v15._uint64_t countAndFlagsBits = 0x736574756F7220;
        v15._object = (void *)0xE700000000000000;
        String.append(_:)(v15);
        sub_10016ABE4(v20, v21, 0, a2, (uint64_t)&off_10032F558);
        swift_bridgeObjectRelease();
        if (v13)
        {
          swift_retain();
          uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
          if (!v16) {
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v16 = *(void *)(v12 + 16);
          swift_retain();
          if (!v16)
          {
LABEL_31:
            swift_release();
            swift_retain();
            sub_1001C109C(v12);

            swift_release();
            swift_release();
            return;
          }
        }
        if (v16 >= 1)
        {
          uint64_t v17 = 0;
          do
          {
            if ((v12 & 0xC000000000000001) != 0) {
              id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v18 = *(id *)(v12 + 8 * v17 + 32);
            }
            uint64_t v19 = v18;
            ++v17;
            uint64_t v20 = (uint64_t)v18;
            sub_1001C4854((id *)&v20, a2);
          }
          while (v16 != v17);
          goto LABEL_31;
        }
LABEL_34:
        __break(1u);
        return;
      }
    }
    swift_bridgeObjectRelease();
    int64_t v12 = (int64_t)_swiftEmptyArrayStorage;
    goto LABEL_16;
  }
}

uint64_t sub_1001C4854(id *a1, uint64_t a2)
{
  id v3 = [*a1 description];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = v5;

  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  sub_10016AE10(10, 0x203A646E756F46, v9, 0, a2, (uint64_t)&off_10032F558);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for TelephonyProxy()
{
  return self;
}

void sub_1001C4970()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10036C090);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  v42[0] = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  id v6 = (char *)v42 - v5;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (void *)((char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v43 = (void *)0xD000000000000018;
  unint64_t v44 = 0x80000001002C3800;
  swift_retain();
  uint64_t v11 = sub_1001F7514();
  BOOL v13 = v12;
  swift_release();
  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  id v15 = sub_1001F5FD0();
  swift_bridgeObjectRetain();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 ulog:40 message:v16];
  swift_bridgeObjectRelease();

  sub_100019E10(0, (unint64_t *)&qword_10035A680);
  *id v10 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if (v16)
  {
    id v17 = [*(id *)(v1 + OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_callCenter) routeController];
    id v18 = [v17 routes];

    sub_100019E10(0, &qword_10036C098);
    unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v43 = _swiftEmptyArrayStorage;
    if (!(v1 >> 62))
    {
      uint64_t v19 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v19) {
        goto LABEL_4;
      }
LABEL_16:
      swift_bridgeObjectRelease();
      uint64_t v23 = _swiftEmptyArrayStorage;
      goto LABEL_17;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v19) {
    goto LABEL_16;
  }
LABEL_4:
  if (v19 >= 1)
  {
    for (uint64_t i = 0; i != v19; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v21 = *(id *)(v1 + 8 * i + 32);
      }
      int v22 = v21;
      if ([v21 isHomePodFamily])
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v23 = v43;
LABEL_17:
    swift_retain();
    id v24 = sub_1001CA11C((unint64_t)v23);
    swift_release();
    if (v24)
    {
      swift_release();
      uint64_t v43 = 0;
      unint64_t v44 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      uint64_t v43 = (void *)0xD000000000000014;
      unint64_t v44 = 0x80000001002C3850;
      id v25 = [v24 description];
LABEL_19:
      id v26 = v25;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v28;

      v30._uint64_t countAndFlagsBits = v27;
      v30._object = v29;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      id v31 = sub_1001F5FD0();
      swift_bridgeObjectRetain();
      NSString v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v31 ulog:40 message:v32];
      swift_bridgeObjectRelease();
LABEL_30:

      return;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    id v33 = v43;
    if (v43)
    {
      id v34 = [v43 mediaSystemIdentifier];

      if (v34)
      {
        uint64_t v35 = v42[0];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v36 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 0, 1, v36);
      }
      else
      {
        uint64_t v36 = type metadata accessor for UUID();
        uint64_t v35 = v42[0];
        (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v42[0], 1, 1, v36);
      }
      sub_10001639C(v35, (uint64_t)v6, &qword_10036C090);
      type metadata accessor for UUID();
      uint64_t v37 = *(void *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v6, 1, v36) == 1)
      {
        swift_release();
        sub_10000D78C((uint64_t)v6, &qword_10036C090);
      }
      else
      {
        uint64_t v38 = UUID.uuidString.getter();
        uint64_t v40 = v39;
        (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v36);
        swift_bridgeObjectRetain();
        id v41 = sub_1001CA290((unint64_t)v23, v38, v40);
        swift_release();
        swift_bridgeObjectRelease_n();
        if (v41)
        {
          uint64_t v43 = 0;
          unint64_t v44 = 0xE000000000000000;
          _StringGuts.grow(_:)(41);
          swift_bridgeObjectRelease();
          uint64_t v43 = (void *)0xD000000000000027;
          unint64_t v44 = 0x80000001002C3820;
          id v25 = [v41 description];
          goto LABEL_19;
        }
      }
    }
    else
    {
      swift_release();
    }
    id v31 = sub_1001F5FD0();
    NSString v32 = String._bridgeToObjectiveC()();
    [v31 ulog:40 message:v32];
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t sub_1001C5108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  BOOL v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  sub_100019E10(0, (unint64_t *)&qword_10035A680);
  swift_retain();
  id v15 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v17 = (void *)swift_allocObject();
  id v17[2] = v16;
  v17[3] = sub_1001CAC94;
  v17[4] = v14;
  v17[5] = a4;
  aBlock[4] = sub_1001CAB6C;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_10032FC30;
  id v18 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1001C9EF4((unint64_t *)&qword_100363D50, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v21);
}

void sub_1001C5450(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = (char *)Strong;
    sub_10016ABE4(0xD000000000000020, (void *)0x80000001002C3AF0, 0, a4, (uint64_t)&off_10032F558);
    uint64_t v9 = *(void **)&v8[OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_callCenter];
    id v10 = (void *)swift_allocObject();
    v10[2] = v8;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    aBlock[4] = sub_1001CABBC;
    aBlock[5] = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10007A0AC;
    aBlock[3] = &unk_10032FC80;
    uint64_t v11 = _Block_copy(aBlock);
    id v12 = v9;
    BOOL v13 = v8;
    swift_retain();
    swift_release();
    [v12 registerWithCompletionHandler:v11];
    _Block_release(v11);
  }
  else
  {
    sub_10001A050();
    swift_allocError();
    *(void *)uint64_t v14 = 0x666C6573206C696ELL;
    *(void *)(v14 + 8) = 0xE800000000000000;
    *(unsigned char *)(v14 + 16) = 9;
    a2();
    swift_errorRelease();
  }
}

uint64_t sub_1001C5614(uint64_t a1, uint64_t (*a2)(void, void), uint64_t a3, uint64_t a4)
{
  return a2(0, 0);
}

uint64_t sub_1001C56C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  BOOL v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  sub_100019E10(0, (unint64_t *)&qword_10035A680);
  swift_retain();
  id v15 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v17 = (void *)swift_allocObject();
  id v17[2] = v16;
  v17[3] = sub_1001CAC94;
  v17[4] = v14;
  v17[5] = a4;
  aBlock[4] = sub_1001CAAF4;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_10032FAF0;
  id v18 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1001C9EF4((unint64_t *)&qword_100363D50, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v21);
}

void sub_1001C5A10(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = (char *)Strong;
    sub_10016ABE4(0xD000000000000029, (void *)0x80000001002C3A90, 0, a4, (uint64_t)&off_10032F558);
    uint64_t v9 = OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_conversationManager;
    uint64_t v10 = qword_10035A628;
    id v11 = *(id *)&v8[OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_conversationManager];
    uint64_t v12 = v8;
    if (v10 != -1) {
      swift_once();
    }
    [v11 addDelegate:v12 queue:qword_1003ACB50];

    BOOL v13 = *(void **)&v8[v9];
    uint64_t v14 = (void *)swift_allocObject();
    void v14[2] = v12;
    void v14[3] = a2;
    v14[4] = a3;
    v14[5] = a4;
    aBlock[4] = sub_1001CAB04;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10007A0AC;
    aBlock[3] = &unk_10032FB40;
    id v15 = _Block_copy(aBlock);
    uint64_t v16 = v12;
    id v17 = v13;
    swift_retain();
    swift_release();
    [v17 registerWithCompletionHandler:v15];
    _Block_release(v15);
  }
  else
  {
    sub_10001A050();
    swift_allocError();
    *(void *)uint64_t v18 = 0x666C6573206C696ELL;
    *(void *)(v18 + 8) = 0xE800000000000000;
    *(unsigned char *)(v18 + 16) = 9;
    a2();
    swift_errorRelease();
  }
}

uint64_t sub_1001C5C44(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v21[0] - 8);
  __chkstk_darwin(v21[0]);
  uint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10035A628 != -1) {
    swift_once();
  }
  id v15 = (void *)qword_1003ACB50;
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a1;
  void v16[3] = a2;
  v16[4] = a3;
  v16[5] = a4;
  aBlock[4] = sub_1001CAB14;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_10032FB90;
  id v17 = _Block_copy(aBlock);
  id v18 = v15;
  id v19 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v21[1] = _swiftEmptyArrayStorage;
  sub_1001C9EF4((unint64_t *)&qword_100363D50, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, void))(v12 + 8))(v14, v21[0]);
  return swift_release();
}

uint64_t sub_1001C5F58(char *a1, uint64_t (*a2)(void, void), uint64_t a3, uint64_t a4)
{
  sub_10016ABE4(0xD00000000000002BLL, (void *)0x80000001002C3AC0, 0, a4, (uint64_t)&off_10032F558);
  id v6 = [*(id *)&a1[OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_conversationManager] activeConversations];
  sub_100019E10(0, &qword_10036C0F8);
  sub_1000713A8((unint64_t *)&unk_10036C100, &qword_10036C0F8);
  uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = a1;
  sub_1001C9B78(v7, v8);
  swift_bridgeObjectRelease();

  return a2(0, 0);
}

uint64_t sub_1001C608C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  sub_100019E10(0, (unint64_t *)&qword_10035A680);
  swift_retain();
  id v15 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v17 = (void *)swift_allocObject();
  id v17[2] = v16;
  v17[3] = sub_1001CAC94;
  v17[4] = v14;
  v17[5] = a4;
  aBlock[4] = sub_1001CAACC;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_10032F9B0;
  id v18 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1001C9EF4((unint64_t *)&qword_100363D50, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v21);
}

uint64_t sub_1001C63D4(uint64_t a1, uint64_t (*a2)(void, void), uint64_t a3, uint64_t a4)
{
  id v6 = self;
  id v7 = [v6 defaultCenter];
  uint64_t v8 = TUCallCenterCallStatusChangedNotification;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a4;
  uint64_t v23 = sub_1001CAAD8;
  uint64_t v24 = v9;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v20 = 1107296256;
  uint64_t v21 = sub_1001C66F0;
  int v22 = &unk_10032FA00;
  uint64_t v10 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v11 = [v7 addObserverForName:v8 object:0 queue:0 usingBlock:v10];
  _Block_release(v10);
  swift_unknownObjectRelease();

  id v12 = [v6 defaultCenter];
  uint64_t v13 = TUCallCenterVideoCallStatusChangedNotification;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a4;
  uint64_t v23 = sub_1001CAAE0;
  uint64_t v24 = v14;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v20 = 1107296256;
  uint64_t v21 = sub_1001C66F0;
  int v22 = &unk_10032FA50;
  id v15 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v16 = [v12 addObserverForName:v13 object:0 queue:0 usingBlock:v15];
  _Block_release(v15);
  swift_unknownObjectRelease();

  return a2(0, 0);
}

void sub_1001C6624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10016ABE4(0xD000000000000013, (void *)0x80000001002C3A70, 0, a3, (uint64_t)&off_10032F558);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    sub_1001C2D64((uint64_t)sub_1001C9F3C, (uint64_t)&unk_10032F730);
  }
  swift_beginAccess();
  uint64_t v5 = swift_unknownObjectWeakLoadStrong();
  if (v5)
  {
    id v6 = (void *)v5;
    sub_1001C419C();
  }
}

uint64_t sub_1001C66F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_1001C67E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10016ABE4(0xD000000000000019, (void *)0x80000001002C3A50, 0, a3, (uint64_t)&off_10032F558);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    sub_1001C2D64((uint64_t)sub_1001C9EA0, (uint64_t)&unk_10032F708);
  }
}

uint64_t sub_1001C6884()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10035E158);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v11 = (char *)&v69 - v10;
  id v12 = [v0 sourceIdentifier];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v70 = v1;
    uint64_t v14 = v11;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v17 = v16;

    strcpy((char *)v71, "source=");
    v71[1] = 0xE700000000000000;
    v18._uint64_t countAndFlagsBits = v15;
    v18._object = v17;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    uint64_t v19 = v71[0];
    uint64_t v20 = v71[1];
    uint64_t v21 = sub_10008892C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v23 = *((void *)v21 + 2);
    unint64_t v22 = *((void *)v21 + 3);
    if (v23 >= v22 >> 1) {
      uint64_t v21 = sub_10008892C((char *)(v22 > 1), v23 + 1, 1, v21);
    }
    *((void *)v21 + 2) = v23 + 1;
    uint64_t v24 = &v21[16 * v23];
    *((void *)v24 + 4) = v19;
    *((void *)v24 + 5) = v20;
    id v11 = v14;
    unint64_t v1 = v70;
  }
  else
  {
    uint64_t v21 = (char *)_swiftEmptyArrayStorage;
  }
  id v25 = [v1 dateConnected];
  if (!v25)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_14;
  }
  id v26 = v25;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v27(v4, v9, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_14:
    sub_10000D78C((uint64_t)v4, &qword_10035E158);
    goto LABEL_15;
  }
  v27(v11, v4, v5);
  v71[0] = 0x3D65746164;
  v71[1] = 0xE500000000000000;
  sub_1001C9EF4((unint64_t *)&qword_10036C040, 255, (void (*)(uint64_t))&type metadata accessor for Date);
  v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  uint64_t v29 = v71[0];
  uint64_t v30 = v71[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v21 = sub_10008892C(0, *((void *)v21 + 2) + 1, 1, v21);
  }
  unint64_t v32 = *((void *)v21 + 2);
  unint64_t v31 = *((void *)v21 + 3);
  if (v32 >= v31 >> 1) {
    uint64_t v21 = sub_10008892C((char *)(v31 > 1), v32 + 1, 1, v21);
  }
  *((void *)v21 + 2) = v32 + 1;
  id v33 = &v21[16 * v32];
  *((void *)v33 + 4) = v29;
  *((void *)v33 + 5) = v30;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
LABEL_15:
  id v34 = [v1 suggestedDisplayName];
  if (v34)
  {
    uint64_t v35 = v34;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;

    v71[0] = 0;
    v71[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v71[0] = 0xD000000000000015;
    v71[1] = 0x80000001002C3780;
    v39._uint64_t countAndFlagsBits = v36;
    v39._object = v38;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    uint64_t v40 = v71[0];
    uint64_t v41 = v71[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v21 = sub_10008892C(0, *((void *)v21 + 2) + 1, 1, v21);
    }
    unint64_t v43 = *((void *)v21 + 2);
    unint64_t v42 = *((void *)v21 + 3);
    if (v43 >= v42 >> 1) {
      uint64_t v21 = sub_10008892C((char *)(v42 > 1), v43 + 1, 1, v21);
    }
    *((void *)v21 + 2) = v43 + 1;
    unint64_t v44 = &v21[16 * v43];
    *((void *)v44 + 4) = v40;
    *((void *)v44 + 5) = v41;
  }
  strcpy((char *)v71, "displayName=");
  BYTE5(v71[1]) = 0;
  HIWORD(v71[1]) = -5120;
  id v45 = [v1 displayName];
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v48 = v47;

  v49._uint64_t countAndFlagsBits = v46;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  uint64_t v50 = v71[0];
  uint64_t v51 = v71[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v21 = sub_10008892C(0, *((void *)v21 + 2) + 1, 1, v21);
  }
  unint64_t v53 = *((void *)v21 + 2);
  unint64_t v52 = *((void *)v21 + 3);
  if (v53 >= v52 >> 1) {
    uint64_t v21 = sub_10008892C((char *)(v52 > 1), v53 + 1, 1, v21);
  }
  *((void *)v21 + 2) = v53 + 1;
  uint64_t v54 = &v21[16 * v53];
  *((void *)v54 + 4) = v50;
  *((void *)v54 + 5) = v51;
  id v55 = [v1 handle];
  if (v55)
  {
    unint64_t v56 = v55;
    id v57 = [v55 value];

    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v60 = v59;

    strcpy((char *)v71, "handleValue=");
    BYTE5(v71[1]) = 0;
    HIWORD(v71[1]) = -5120;
    v61._uint64_t countAndFlagsBits = v58;
    v61._object = v60;
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    uint64_t v62 = v71[0];
    uint64_t v63 = v71[1];
    unint64_t v65 = *((void *)v21 + 2);
    unint64_t v64 = *((void *)v21 + 3);
    if (v65 >= v64 >> 1) {
      uint64_t v21 = sub_10008892C((char *)(v64 > 1), v65 + 1, 1, v21);
    }
    *((void *)v21 + 2) = v65 + 1;
    uint64_t v66 = &v21[16 * v65];
    *((void *)v66 + 4) = v62;
    *((void *)v66 + 5) = v63;
  }
  v71[0] = v21;
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_10000B010((unint64_t *)&qword_10035E7F0, (uint64_t *)&unk_100367D40);
  uint64_t v67 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v67;
}

void sub_1001C6F40(uint64_t a1, SEL *a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    id v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(Strong
                                                               + OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_callCenter), *a2));
    sub_100019E10(0, (unint64_t *)&unk_10036C030);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v6 >> 62) {
      goto LABEL_19;
    }
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v8 = 4;
      while (1)
      {
        id v9 = (v6 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : *(id *)(v6 + 8 * v8);
        uint64_t v10 = v9;
        uint64_t v11 = v8 - 3;
        if (__OFADD__(v8 - 4, 1)) {
          break;
        }
        if ([v9 isActive])
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_13;
        }

        ++v8;
        if (v11 == v7) {
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_19:
      swift_bridgeObjectRetain();
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
    uint64_t v10 = 0;
LABEL_13:
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    if (v10)
    {
      id v12 = v10;
      sub_1001C6884();

      uint64_t v13 = String.init<A>(describing:)();
      unint64_t v15 = v14;
    }
    else
    {
      unint64_t v15 = 0xE300000000000000;
      uint64_t v13 = 7104878;
    }
    unint64_t v16 = v15;
    String.append(_:)(*(Swift::String *)&v13);
    swift_bridgeObjectRelease();
    id v17 = sub_1001F5FD0();
    swift_bridgeObjectRetain();
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v17 ulog:40 message:v18];
    swift_bridgeObjectRelease();

    id v19 = v10;
    swift_retain();
    sub_1001BF190(v10, &qword_10036C048, (uint64_t (*)(uint64_t))sub_1001F697C);

    swift_release();
  }
}

uint64_t sub_1001C71E4(char a1, void *a2)
{
  char v4 = a1 & 1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019E10(0, (unint64_t *)&qword_10035A680);
  id v12 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v13 = swift_allocObject();
  *(unsigned char *)(v13 + 16) = v4;
  *(void *)(v13 + 24) = a2;
  *(void *)(v13 + 32) = v2;
  aBlock[4] = sub_1001CA9EC;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_10032F848;
  unint64_t v14 = _Block_copy(aBlock);
  id v15 = a2;
  id v16 = v2;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1001C9EF4((unint64_t *)&qword_100363D50, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v19);
}

uint64_t sub_1001C74D8(char a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_100366648);
  __chkstk_darwin(v10);
  id v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000A38C(&qword_10036C090);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v47 = (uint64_t)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v43 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v43 - v19;
  id v21 = [a2 state];
  if ((a1 & 1) != 0 || v21 != (id)3)
  {
    unint64_t v44 = v9;
    uint64_t v45 = OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy__activeConversation;
    swift_retain();
    CurrentValueSubject.value.getter();
    unint64_t v31 = v50;
    if (v50 == (void *)1)
    {
      CurrentValueSubject.value.getter();
      swift_release();
      unint64_t v31 = (void *)v48;
    }
    else
    {
      swift_release();
    }
    uint64_t v46 = a3;
    if (v31)
    {
      id v32 = [v31 UUID];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      id v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
      v33(v20, 0, 1, v6);
    }
    else
    {
      id v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
      v33(v20, 1, 1, v6);
    }
    id v34 = [a2 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v33(v18, 0, 1, v6);
    uint64_t v35 = (uint64_t)&v12[*(int *)(v10 + 48)];
    sub_10000D728((uint64_t)v20, (uint64_t)v12, &qword_10036C090);
    sub_10000D728((uint64_t)v18, v35, &qword_10036C090);
    uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    if (v36((uint64_t)v12, 1, v6) == 1)
    {
      sub_10000D78C((uint64_t)v18, &qword_10036C090);
      sub_10000D78C((uint64_t)v20, &qword_10036C090);
      if (v36(v35, 1, v6) == 1)
      {
        sub_10000D78C((uint64_t)v12, &qword_10036C090);
LABEL_19:
        id v41 = sub_1001F5FD0();
        NSString v42 = String._bridgeToObjectiveC()();
        [v41 ulog:40 message:v42];

        swift_retain();
        sub_1001BF190(0, (uint64_t *)&unk_10036C0C8, (uint64_t (*)(uint64_t))sub_1001F6A90);
        return swift_release();
      }
    }
    else
    {
      uint64_t v37 = v47;
      sub_10000D728((uint64_t)v12, v47, &qword_10036C090);
      if (v36(v35, 1, v6) != 1)
      {
        uint64_t v38 = v44;
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v44, v35, v6);
        sub_1001C9EF4((unint64_t *)&qword_10036C0C0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v40 = *(void (**)(char *, uint64_t))(v7 + 8);
        v40(v38, v6);
        sub_10000D78C((uint64_t)v18, &qword_10036C090);
        sub_10000D78C((uint64_t)v20, &qword_10036C090);
        v40((char *)v37, v6);
        uint64_t result = sub_10000D78C((uint64_t)v12, &qword_10036C090);
        if ((v39 & 1) == 0) {
          return result;
        }
        goto LABEL_19;
      }
      sub_10000D78C((uint64_t)v18, &qword_10036C090);
      sub_10000D78C((uint64_t)v20, &qword_10036C090);
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v37, v6);
    }
    return sub_10000D78C((uint64_t)v12, &qword_100366648);
  }
  unint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  unint64_t v48 = 0xD00000000000001CLL;
  unint64_t v49 = 0x80000001002C3950;
  id v22 = [a2 description];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v25 = v24;

  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  id v27 = sub_1001F5FD0();
  swift_bridgeObjectRetain();
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v27 ulog:40 message:v28];
  swift_bridgeObjectRelease();

  id v29 = a2;
  swift_retain();
  sub_1001BF190(a2, (uint64_t *)&unk_10036C0C8, (uint64_t (*)(uint64_t))sub_1001F6A90);

  return swift_release();
}

uint64_t sub_1001C7D88(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1001C9EF4(&qword_10036BF38, a2, (void (*)(uint64_t))type metadata accessor for TelephonyProxyState);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001C7DE4()
{
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(80);
  uint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  v1._uint64_t countAndFlagsBits = 0xD000000000000026;
  v1._object = (void *)0x80000001002C3870;
  String.append(_:)(v1);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_state);
  v13[3] = type metadata accessor for TelephonyProxyState();
  v13[0] = v2;
  swift_retain_n();
  uint64_t v3 = sub_1000287B4(v13);
  uint64_t v5 = v4;
  sub_10000CC5C((uint64_t)v13);
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_release();
  swift_bridgeObjectRelease();
  v7._object = (void *)0x80000001002C38A0;
  v7._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v7);
  swift_beginAccess();
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x80000001002C38C0;
  v9._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v9);
  uint64_t v10 = (void *)(v0 + OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_tasks);
  swift_beginAccess();
  if ((*v10 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1001C7FE0()
{
  id v1 = [v0 sourceIdentifier];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v3 = 0xD000000000000015;
    switch([v0 service])
    {
      case 1u:
        return v3;
      case 2u:
      case 3u:
        uint64_t v3 = 0xD000000000000012;
        break;
      default:
        id v5 = [v0 provider];
        id v6 = [v5 bundleIdentifier];

        if (v6)
        {
          uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        else
        {
          uint64_t v3 = 0;
        }
        break;
    }
  }
  return v3;
}

uint64_t sub_1001C8154(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if (v4 & 0x3Fu) <= 0xD || (swift_stdlib_isStackAllocationSafe())
  {
    __chkstk_darwin();
    bzero((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = sub_1001C82DC((uint64_t)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, a2, a1);
    swift_release();
  }
  else
  {
    Swift::String v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v7 = sub_1001C82DC((uint64_t)v8, v5, a2, a1);
    swift_release();
    swift_slowDealloc();
  }
  return v7;
}

uint64_t sub_1001C82DC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  id v57 = (unint64_t *)result;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v6 = 0;
    uint64_t v58 = a4 + 56;
    uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(a4 + 56);
    int64_t v59 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v61 = 0;
    uint64_t v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          unint64_t v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          int64_t v62 = v6;
          unint64_t v12 = v11 | (v6 << 6);
        }
        else
        {
          int64_t v13 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_81;
          }
          if (v13 >= v59) {
            goto LABEL_79;
          }
          unint64_t v14 = *(void *)(v58 + 8 * v13);
          int64_t v15 = v6 + 1;
          if (!v14)
          {
            int64_t v15 = v6 + 2;
            if (v6 + 2 >= v59) {
              goto LABEL_79;
            }
            unint64_t v14 = *(void *)(v58 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v6 + 3;
              if (v6 + 3 >= v59) {
                goto LABEL_79;
              }
              unint64_t v14 = *(void *)(v58 + 8 * v15);
              if (!v14)
              {
                uint64_t v16 = v6 + 4;
                if (v6 + 4 >= v59) {
                  goto LABEL_79;
                }
                unint64_t v14 = *(void *)(v58 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    int64_t v15 = v16 + 1;
                    if (__OFADD__(v16, 1)) {
                      goto LABEL_83;
                    }
                    if (v15 >= v59) {
                      goto LABEL_79;
                    }
                    unint64_t v14 = *(void *)(v58 + 8 * v15);
                    ++v16;
                    if (v14) {
                      goto LABEL_22;
                    }
                  }
                }
                int64_t v15 = v6 + 4;
              }
            }
          }
LABEL_22:
          unint64_t v9 = (v14 - 1) & v14;
          int64_t v62 = v15;
          unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
        }
        uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
        uint64_t v19 = *v17;
        uint64_t v18 = v17[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v20 = Hasher._finalize()();
        uint64_t v21 = -1 << *(unsigned char *)(v5 + 32);
        unint64_t v22 = v20 & ~v21;
        unint64_t v23 = v22 >> 6;
        uint64_t v24 = 1 << v22;
        if (((1 << v22) & *(void *)(v10 + 8 * (v22 >> 6))) != 0) {
          break;
        }
LABEL_6:
        uint64_t result = swift_bridgeObjectRelease();
        int64_t v6 = v62;
        uint64_t v5 = a3;
        uint64_t v4 = a4;
      }
      uint64_t v25 = *(void *)(a3 + 48);
      Swift::String v26 = (void *)(v25 + 16 * v22);
      BOOL v27 = *v26 == v19 && v26[1] == v18;
      if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v28 = ~v21;
        for (unint64_t i = v22 + 1; ; unint64_t i = v30 + 1)
        {
          unint64_t v30 = i & v28;
          if (((*(void *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0) {
            break;
          }
          unint64_t v31 = (void *)(v25 + 16 * v30);
          BOOL v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v23 = v30 >> 6;
            uint64_t v24 = 1 << v30;
            goto LABEL_38;
          }
        }
        goto LABEL_6;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_38:
      int64_t v6 = v62;
      uint64_t v5 = a3;
      v57[v23] |= v24;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v4 = a4;
      if (v33) {
        goto LABEL_82;
      }
    }
  }
  int64_t v34 = 0;
  uint64_t v60 = a3 + 56;
  uint64_t v61 = 0;
  uint64_t v35 = 1 << *(unsigned char *)(a3 + 32);
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  else {
    uint64_t v36 = -1;
  }
  unint64_t v37 = v36 & *(void *)(a3 + 56);
  int64_t v63 = (unint64_t)(v35 + 63) >> 6;
  uint64_t v38 = a4 + 56;
  while (1)
  {
    if (v37)
    {
      unint64_t v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      unint64_t v40 = v39 | (v34 << 6);
      goto LABEL_63;
    }
    int64_t v41 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v41 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v41);
    ++v34;
    if (!v42)
    {
      int64_t v34 = v41 + 1;
      if (v41 + 1 >= v63) {
        goto LABEL_79;
      }
      unint64_t v42 = *(void *)(v60 + 8 * v34);
      if (!v42)
      {
        int64_t v34 = v41 + 2;
        if (v41 + 2 >= v63) {
          goto LABEL_79;
        }
        unint64_t v42 = *(void *)(v60 + 8 * v34);
        if (!v42) {
          break;
        }
      }
    }
LABEL_62:
    unint64_t v37 = (v42 - 1) & v42;
    unint64_t v40 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_63:
    unint64_t v44 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v40);
    uint64_t v46 = *v44;
    uint64_t v45 = v44[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v47 = Hasher._finalize()();
    uint64_t v48 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v49 = v47 & ~v48;
    if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
      goto LABEL_46;
    }
    uint64_t v50 = *(void *)(a4 + 48);
    uint64_t v51 = (void *)(v50 + 16 * v49);
    BOOL v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_76:
      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v5 = a3;
      uint64_t v4 = a4;
      if (v33)
      {
        __break(1u);
LABEL_79:
        swift_retain();
        return sub_1000346D0(v57, a2, v61, v5);
      }
    }
    else
    {
      uint64_t v53 = ~v48;
      while (1)
      {
        unint64_t v49 = (v49 + 1) & v53;
        if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
          break;
        }
        uint64_t v54 = (void *)(v50 + 16 * v49);
        BOOL v55 = *v54 == v46 && v54[1] == v45;
        if (v55 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_76;
        }
      }
LABEL_46:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v5 = a3;
      uint64_t v4 = a4;
    }
  }
  int64_t v43 = v41 + 3;
  if (v43 >= v63) {
    goto LABEL_79;
  }
  unint64_t v42 = *(void *)(v60 + 8 * v43);
  if (v42)
  {
    int64_t v34 = v43;
    goto LABEL_62;
  }
  while (1)
  {
    int64_t v34 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v34 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v34);
    ++v43;
    if (v42) {
      goto LABEL_62;
    }
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t sub_1001C881C(uint64_t *a1, uint64_t a2, void (*a3)(void **__return_ptr, uint64_t *))
{
  uint64_t v7 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3(&v5, &v7);
    sub_1001BCD80(v5, v6);
    return swift_release();
  }
  return result;
}

uint64_t sub_1001C88A8()
{
  uint64_t v1 = sub_10000A38C(&qword_10036BF68);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  uint64_t v5 = (v3 + 32) & ~v3;
  unint64_t v6 = (((((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, (v6 + 11) & 0xFFFFFFFFFFFFFFF8 | 4, v3 | 7);
}

id sub_1001C89CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_10000A38C(&qword_10036BF68) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = sub_100038800(*(void **)a1, *(unsigned char *)(a1 + 8), *(uint64_t (**)(void **))(v2 + 16), *(void *)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void *)(v2 + v8), *(void **)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v10;

  return sub_100038A38(v9, v10);
}

uint64_t sub_1001C8AC8(uint64_t a1)
{
  return sub_1001C2B70(a1);
}

uint64_t sub_1001C8AD0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001C8B08()
{
  sub_1001C2BD4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001C8B10()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1001C8B38()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C8B74(uint64_t *a1)
{
  return sub_1001C881C(a1, *(void *)(v1 + 16), *(void (**)(void **__return_ptr, uint64_t *))(v1 + 24));
}

id sub_1001C8B94()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100098724();
  id v1 = v0;
  swift_release();
  if (v1)
  {
    id v2 = objc_allocWithZone((Class)TUNearbyDeviceHandle);
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v1 = [v2 initWithType:1 identifier:v3 name:0];
  }
  return v1;
}

uint64_t sub_1001C8C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036C090);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(a1 + 56);
  uint64_t v16 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v38 = v6 + 48;
  uint64_t v39 = v6 + 16;
  unint64_t v37 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  int64_t v35 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v36 = (uint64_t (**)(char *, uint64_t))(v6 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  uint64_t v32 = a1 + 56;
  BOOL v33 = v11;
  unint64_t v31 = v8;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v40 = v18;
      unint64_t v20 = v19 | (v18 << 6);
      goto LABEL_23;
    }
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v35) {
      goto LABEL_27;
    }
    unint64_t v22 = *(void *)(v12 + 8 * v21);
    int64_t v23 = v18 + 1;
    if (!v22)
    {
      int64_t v23 = v18 + 2;
      if (v18 + 2 >= v35) {
        goto LABEL_27;
      }
      unint64_t v22 = *(void *)(v12 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v18 + 3;
        if (v18 + 3 >= v35) {
          goto LABEL_27;
        }
        unint64_t v22 = *(void *)(v12 + 8 * v23);
        if (!v22)
        {
          int64_t v23 = v18 + 4;
          if (v18 + 4 >= v35) {
            goto LABEL_27;
          }
          unint64_t v22 = *(void *)(v12 + 8 * v23);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v15 = (v22 - 1) & v22;
    int64_t v40 = v23;
    unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_23:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(void *)(a1 + 48) + *(void *)(v6 + 72) * v20, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1) {
      return swift_release();
    }
    (*v37)(v8, v11, v5);
    if (*(void *)(a2 + 16))
    {
      unint64_t v25 = sub_100269DA0((uint64_t)v8);
      if (v26)
      {
        id v41 = *(id *)(*(void *)(a2 + 56) + 8 * v25);
        uint64_t v27 = v6;
        uint64_t v28 = a1;
        id v29 = v41;
        swift_retain();
        PassthroughSubject.send(_:)();

        a1 = v28;
        uint64_t v6 = v27;
        unint64_t v11 = v33;
        unint64_t v8 = v31;
        uint64_t v12 = v32;
        swift_release();
      }
    }
    uint64_t result = (*v36)(v8, v5);
    int64_t v18 = v40;
  }
  uint64_t v24 = v18 + 5;
  if (v18 + 5 >= v35)
  {
LABEL_27:
    (*v16)(v11, 1, 1, v5);
    return swift_release();
  }
  unint64_t v22 = *(void *)(v12 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v18 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v35) {
      goto LABEL_27;
    }
    unint64_t v22 = *(void *)(v12 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1001C902C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036C090);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(a1 + 56);
  uint64_t v16 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v38 = v6 + 48;
  uint64_t v39 = v6 + 16;
  unint64_t v37 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  int64_t v35 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v36 = (uint64_t (**)(char *, uint64_t))(v6 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  uint64_t v32 = a1 + 56;
  BOOL v33 = v11;
  unint64_t v31 = v8;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v40 = v18;
      unint64_t v20 = v19 | (v18 << 6);
      goto LABEL_23;
    }
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v35) {
      goto LABEL_27;
    }
    unint64_t v22 = *(void *)(v12 + 8 * v21);
    int64_t v23 = v18 + 1;
    if (!v22)
    {
      int64_t v23 = v18 + 2;
      if (v18 + 2 >= v35) {
        goto LABEL_27;
      }
      unint64_t v22 = *(void *)(v12 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v18 + 3;
        if (v18 + 3 >= v35) {
          goto LABEL_27;
        }
        unint64_t v22 = *(void *)(v12 + 8 * v23);
        if (!v22)
        {
          int64_t v23 = v18 + 4;
          if (v18 + 4 >= v35) {
            goto LABEL_27;
          }
          unint64_t v22 = *(void *)(v12 + 8 * v23);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v15 = (v22 - 1) & v22;
    int64_t v40 = v23;
    unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_23:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(void *)(a1 + 48) + *(void *)(v6 + 72) * v20, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1) {
      return swift_release();
    }
    (*v37)(v8, v11, v5);
    if (*(void *)(a2 + 16))
    {
      unint64_t v25 = sub_100269DA0((uint64_t)v8);
      if (v26)
      {
        id v41 = *(id *)(*(void *)(a2 + 56) + 8 * v25);
        uint64_t v27 = v6;
        uint64_t v28 = a1;
        id v29 = v41;
        swift_retain();
        PassthroughSubject.send(_:)();

        a1 = v28;
        uint64_t v6 = v27;
        unint64_t v11 = v33;
        unint64_t v8 = v31;
        uint64_t v12 = v32;
        swift_release();
      }
    }
    uint64_t result = (*v36)(v8, v5);
    int64_t v18 = v40;
  }
  uint64_t v24 = v18 + 5;
  if (v18 + 5 >= v35)
  {
LABEL_27:
    (*v16)(v11, 1, 1, v5);
    return swift_release();
  }
  unint64_t v22 = *(void *)(v12 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v18 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v35) {
      goto LABEL_27;
    }
    unint64_t v22 = *(void *)(v12 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1001C93E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    while (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      if (*(void *)(a2 + 16))
      {
LABEL_24:
        uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
        uint64_t v17 = *v16;
        uint64_t v18 = v16[1];
        swift_bridgeObjectRetain();
        sub_100269CBC(v17, v18);
        if (v19)
        {
          swift_retain();
          swift_retain();
          PassthroughSubject.send(_:)();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t result = swift_release();
        }
        else
        {
          uint64_t result = swift_bridgeObjectRelease();
        }
      }
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v14 = *(void *)(v4 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    if (*(void *)(a2 + 16)) {
      goto LABEL_24;
    }
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v8) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1001C95C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    while (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      if (*(void *)(a2 + 16))
      {
LABEL_24:
        uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
        uint64_t v17 = *v16;
        uint64_t v18 = v16[1];
        swift_bridgeObjectRetain();
        sub_100269CBC(v17, v18);
        if (v19)
        {
          swift_retain();
          swift_retain();
          PassthroughSubject.send(_:)();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t result = swift_release();
        }
        else
        {
          uint64_t result = swift_bridgeObjectRelease();
        }
      }
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v14 = *(void *)(v4 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    if (*(void *)(a2 + 16)) {
      goto LABEL_24;
    }
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v8) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1001C97B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    while (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      if (*(void *)(a2 + 16))
      {
LABEL_24:
        uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
        uint64_t v17 = *v16;
        uint64_t v18 = v16[1];
        swift_bridgeObjectRetain();
        unint64_t v19 = sub_100269CBC(v17, v18);
        if (v20)
        {
          id v21 = *(id *)(*(void *)(a2 + 56) + 8 * v19);
          swift_retain();
          PassthroughSubject.send(_:)();
          swift_bridgeObjectRelease();

          uint64_t result = swift_release();
        }
        else
        {
          uint64_t result = swift_bridgeObjectRelease();
        }
      }
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v14 = *(void *)(v4 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    if (*(void *)(a2 + 16)) {
      goto LABEL_24;
    }
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v8) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1001C9994(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    while (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      if (*(void *)(a2 + 16))
      {
LABEL_24:
        uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
        uint64_t v17 = *v16;
        uint64_t v18 = v16[1];
        swift_bridgeObjectRetain();
        unint64_t v19 = sub_100269CBC(v17, v18);
        if (v20)
        {
          id v21 = *(id *)(*(void *)(a2 + 56) + 8 * v19);
          swift_retain();
          PassthroughSubject.send(_:)();
          swift_bridgeObjectRelease();

          uint64_t result = swift_release();
        }
        else
        {
          uint64_t result = swift_bridgeObjectRelease();
        }
      }
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v14 = *(void *)(v4 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    if (*(void *)(a2 + 16)) {
      goto LABEL_24;
    }
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v8) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1001C9B78(uint64_t a1, char *a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_100019E10(0, &qword_10036C0F8);
    sub_1000713A8((unint64_t *)&unk_10036C100, &qword_10036C0F8);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v19;
    uint64_t v18 = v20;
    uint64_t v4 = v21;
    uint64_t v5 = v22;
    unint64_t v6 = v23;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v17 = (unint64_t)(v4 + 64) >> 6;
  if (v3 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v6)
    {
      uint64_t v10 = (v6 - 1) & v6;
      unint64_t v11 = __clz(__rbit64(v6)) | (v5 << 6);
      uint64_t v12 = v5;
      goto LABEL_29;
    }
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v14 >= v17) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v18 + 8 * v14);
    uint64_t v12 = v5 + 1;
    if (!v15)
    {
      uint64_t v12 = v5 + 2;
      if (v5 + 2 >= v17) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v18 + 8 * v12);
      if (!v15)
      {
        uint64_t v12 = v5 + 3;
        if (v5 + 3 >= v17) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v18 + 8 * v12);
        if (!v15)
        {
          uint64_t v12 = v5 + 4;
          if (v5 + 4 >= v17) {
            goto LABEL_32;
          }
          unint64_t v15 = *(void *)(v18 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v5 + 5;
            if (v5 + 5 >= v17) {
              goto LABEL_32;
            }
            unint64_t v15 = *(void *)(v18 + 8 * v12);
            if (!v15)
            {
              uint64_t v16 = v5 + 6;
              while (v17 != v16)
              {
                unint64_t v15 = *(void *)(v18 + 8 * v16++);
                if (v15)
                {
                  uint64_t v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_10002E7C4();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
    id v13 = *(id *)(*(void *)(v3 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_32;
    }
    while (1)
    {
      [a2 conversationManager:*(void *)&a2[OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_conversationManager] stateChangedForConversation:v13];

      uint64_t v5 = v12;
      unint64_t v6 = v10;
      if ((v3 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_100019E10(0, &qword_10036C0F8);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v13 = v24;
        swift_unknownObjectRelease();
        uint64_t v12 = v5;
        uint64_t v10 = v6;
        if (v24) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

_OWORD *sub_1001C9E88(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

void sub_1001C9EA0()
{
  sub_1001C6F40(v0, (SEL *)&selRef_currentVideoCalls);
}

uint64_t sub_1001C9EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001C9EEC()
{
  return swift_release();
}

uint64_t sub_1001C9EF4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1001C9F3C()
{
  sub_1001C6F40(v0, (SEL *)&selRef_currentCalls);
}

Swift::Int sub_1001C9F78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000A38C(&qword_10035D080);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      unint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void *sub_1001CA11C(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      char v7 = sub_1001BC5CC(v9);
      swift_release();
      if (v7)
      {
        swift_bridgeObjectRelease();
        return v5;
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return 0;
}

void *sub_1001CA290(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = a1;
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      uint64_t v22 = v4;
      unint64_t v23 = v7;
      unint64_t v24 = v7 & 0xC000000000000001;
      uint64_t v4 = 4;
      do
      {
        uint64_t v9 = v4 - 4;
        if (v24)
        {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v11 = v4 - 3;
          if (__OFADD__(v9, 1)) {
            goto LABEL_19;
          }
        }
        else
        {
          id v10 = *(id *)(v7 + 8 * v4);
          uint64_t v11 = v4 - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        uint64_t v12 = v8;
        uint64_t v13 = v10;
        uint64_t v14 = a3;
        id v15 = [v10 uniqueIdentifier:v22];
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        a3 = v14;
        BOOL v19 = v16 == a2 && v18 == v14;
        if (v19)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v13;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_18;
        }

        ++v4;
        uint64_t v8 = v12;
        BOOL v19 = v11 == v12;
        unint64_t v7 = v23;
      }
      while (!v19);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1001CA438(char a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036C058);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 16) = a1;
  sub_10000A38C((uint64_t *)&unk_10036C060);
  unint64_t v7 = (void *)swift_retain();
  v10[1] = sub_1001C00D8(v7, (void (*)(uint64_t *__return_ptr, void **))sub_1001CA7B0, v6);
  sub_10000A38C((uint64_t *)&unk_100365D60);
  sub_10000B010(&qword_10036C070, (uint64_t *)&unk_10036C060);
  Publisher<>.setFailureType<A>(to:)();
  swift_release();
  sub_10000B010(&qword_10036C078, &qword_10036C058);
  uint64_t v8 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v8;
}

uint64_t sub_1001CA618(void *a1, char a2)
{
  uint64_t v9 = &type metadata for Feature;
  unint64_t v10 = sub_10000CC08();
  v8[0] = 9;
  char v4 = isFeatureEnabled(_:)();
  sub_10000CC5C((uint64_t)v8);
  if (v4)
  {
    unsigned int v5 = [a1 service];
    if (v5 == 3)
    {
      char v6 = 1;
    }
    else if (v5 == 2)
    {
      char v6 = a2;
    }
    else
    {
      char v6 = 0;
    }
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t sub_1001CA6B4(void *a1, char a2)
{
  if (sub_1001CA618(a1, a2))
  {
    id v4 = [self sharedInstance];
    id v5 = [v4 activeConversationForCall:a1];

    if (v5
      && (id v6 = [v5 presentationContext],
          unint64_t v7 = (unint64_t)[v6 mode],
          v5,
          v6,
          v7 <= 2))
    {
      return qword_1002A3BF8[v7];
    }
    else
    {
      return 0;
    }
  }
  else if ([a1 isEndpointOnCurrentDevice])
  {
    return 1;
  }
  else
  {
    return 2;
  }
}

uint64_t sub_1001CA7A0()
{
  return _swift_deallocObject(v0, 17, 7);
}

id sub_1001CA7B0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1001C176C(a1, *(unsigned char *)(v2 + 16), a2);
}

uint64_t sub_1001CA7BC(uint64_t a1)
{
  return sub_1001CA7D4(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)(v1 + 16), *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 24));
}

uint64_t sub_1001CA7D4(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v8 = a1;
  char v9 = a2;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a4(&v7, &v8);
    uint64_t v6 = swift_unknownObjectRetain();
    sub_1001BE19C(v6);
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1001CA894(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  id v8 = [a1 description:a2, a3];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  v12._uint64_t countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  id v13 = sub_1001F5FD0();
  swift_bridgeObjectRetain();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 ulog:40 message:v14];
  swift_bridgeObjectRelease();

  return sub_1001C71E4(a4, a1);
}

uint64_t sub_1001CA9AC()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001CA9EC()
{
  return sub_1001C74D8(*(unsigned char *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1001CA9F8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001CAA30()
{
  sub_1001C44F8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001CAA38(void (*a1)(uint64_t *), uint64_t a2)
{
  return sub_1001C330C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001CAA40()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001CAA7C(uint64_t *a1)
{
  sub_1001C3700(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1001CAA88()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001CAAC0(uint64_t a1, uint64_t a2)
{
  return sub_1001C608C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001CAACC()
{
  return sub_1001C63D4(*(void *)(v0 + 16), *(uint64_t (**)(void, void))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void sub_1001CAAD8(uint64_t a1)
{
  sub_1001C6624(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_1001CAAE0(uint64_t a1)
{
  sub_1001C67E4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001CAAE8(uint64_t a1, uint64_t a2)
{
  return sub_1001C56C8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void sub_1001CAAF4()
{
  sub_1001C5A10(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001CAB04()
{
  return sub_1001C5C44(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001CAB14()
{
  return sub_1001C5F58(*(char **)(v0 + 16), *(uint64_t (**)(void, void))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001CAB20(uint64_t a1, uint64_t a2)
{
  return sub_1001C5108(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001CAB2C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1001CAB6C()
{
  sub_1001C5450(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001CAB7C()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001CABBC()
{
  return sub_1001C5614(*(void *)(v0 + 16), *(uint64_t (**)(void, void))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void *sub_1001CABC8(void *a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

void **assignWithCopy for MRNowPlayingPlayerResponseWrapper(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void **assignWithTake for MRNowPlayingPlayerResponseWrapper(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for MRNowPlayingPlayerResponseWrapper(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MRNowPlayingPlayerResponseWrapper(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MRNowPlayingPlayerResponseWrapper()
{
  return &type metadata for MRNowPlayingPlayerResponseWrapper;
}

uint64_t sub_1001CADC0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10036C150);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1001CB2B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_10000A38C(&qword_10036C140);
  sub_1001CB30C(&qword_10036C158);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1001CAF2C()
{
  return 0x6E6F70736552726DLL;
}

uint64_t sub_1001CAF48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E6F70736552726DLL && a2 == 0xEA00000000006573)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1001CAFEC(uint64_t a1)
{
  unint64_t v2 = sub_1001CB2B8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CB028(uint64_t a1)
{
  unint64_t v2 = sub_1001CB2B8();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1001CB064@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1001CB124(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1001CB090(void *a1)
{
  return sub_1001CADC0(a1, *v1);
}

uint64_t sub_1001CB0AC(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1)
  {
    if (v3)
    {
      sub_100147EAC();
      id v4 = v3;
      id v5 = v2;
      char v6 = static NSObject.== infix(_:_:)();

      if (v6) {
        return 1;
      }
    }
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

void *sub_1001CB124(void *a1)
{
  uint64_t v3 = sub_10000A38C(&qword_10036C130);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = sub_10000D6E4(a1, a1[3]);
  sub_1001CB2B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000CC5C((uint64_t)a1);
  }
  else
  {
    sub_10000A38C(&qword_10036C140);
    sub_1001CB30C(&qword_10036C148);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    char v7 = (void *)v9[1];
    sub_10000CC5C((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1001CB2B8()
{
  unint64_t result = qword_10036C138;
  if (!qword_10036C138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C138);
  }
  return result;
}

uint64_t sub_1001CB30C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000A3D0(&qword_10036C140);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MRNowPlayingPlayerResponseWrapper.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001CB3F0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MRNowPlayingPlayerResponseWrapper.CodingKeys()
{
  return &type metadata for MRNowPlayingPlayerResponseWrapper.CodingKeys;
}

unint64_t sub_1001CB42C()
{
  unint64_t result = qword_10036C160;
  if (!qword_10036C160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C160);
  }
  return result;
}

unint64_t sub_1001CB484()
{
  unint64_t result = qword_10036C168;
  if (!qword_10036C168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C168);
  }
  return result;
}

unint64_t sub_1001CB4DC()
{
  unint64_t result = qword_10036C170;
  if (!qword_10036C170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C170);
  }
  return result;
}

unint64_t sub_1001CB530()
{
  sub_10000A38C(&qword_1003645E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100291160;
  AnyHashable.init<A>(_:)();
  uint64_t v2 = type metadata accessor for UUID();
  *(void *)(inited + 96) = v2;
  int v3 = sub_10000D680((uint64_t *)(inited + 72));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v3, v0, v2);
  AnyHashable.init<A>(_:)();
  uint64_t v4 = type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionStarted(0);
  uint64_t v5 = (uint64_t *)(v0 + *(int *)(v4 + 20));
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v7;
  *(void *)(inited + 152) = v6;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  Date.timeIntervalSinceReferenceDate.getter();
  *(void *)(inited + 240) = &type metadata for Double;
  *(void *)(inited + 216) = v8;
  AnyHashable.init<A>(_:)();
  uint64_t v9 = *(void *)(v0 + *(int *)(v4 + 28));
  *(void *)(inited + 312) = &type metadata for Double;
  *(void *)(inited + 288) = v9;
  AnyHashable.init<A>(_:)();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  JSONEncoder.init()();
  sub_10000A38C(&qword_10036C178);
  sub_1001CB9E8();
  uint64_t v10 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  swift_release();
  if (v14)
  {
    sub_1000BA108(inited + 320);
    sub_1001CBAB0(inited + 248);
    sub_1001CBAB0(inited + 176);
    sub_1001CBAB0(inited + 104);
    sub_1001CBAB0(inited + 32);
    swift_setDeallocating();
    sub_10000A38C(&qword_10036C190);
    return swift_arrayDestroy();
  }
  else
  {
    *(void *)(inited + 384) = &type metadata for Data;
    *(void *)(inited + 360) = v10;
    *(void *)(inited + 368) = v12;
    return sub_100268E80(inited);
  }
}

unint64_t sub_1001CB82C()
{
  return 0xD000000000000014;
}

unint64_t sub_1001CB848()
{
  return sub_1001CB530();
}

unint64_t sub_1001CB860()
{
  sub_10000A38C(&qword_1003645E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028FC10;
  AnyHashable.init<A>(_:)();
  uint64_t v2 = type metadata accessor for UUID();
  *(void *)(inited + 96) = v2;
  int v3 = sub_10000D680((uint64_t *)(inited + 72));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v3, v0, v2);
  AnyHashable.init<A>(_:)();
  uint64_t v4 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionEnded(0) + 20));
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v6;
  *(void *)(inited + 152) = v5;
  swift_bridgeObjectRetain();
  return sub_100268E80(inited);
}

unint64_t sub_1001CB994()
{
  return 0xD000000000000012;
}

unint64_t sub_1001CB9B0()
{
  return sub_1001CB860();
}

uint64_t type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionStarted(uint64_t a1)
{
  return sub_100014F7C(a1, qword_10036C1F8);
}

unint64_t sub_1001CB9E8()
{
  unint64_t result = qword_10036C180;
  if (!qword_10036C180)
  {
    sub_10000A3D0(&qword_10036C178);
    sub_1001CBA5C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C180);
  }
  return result;
}

unint64_t sub_1001CBA5C()
{
  unint64_t result = qword_10036C188;
  if (!qword_10036C188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C188);
  }
  return result;
}

uint64_t sub_1001CBAB0(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036C190);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionEnded(uint64_t a1)
{
  return sub_100014F7C(a1, qword_10036C298);
}

uint64_t sub_1001CBB30()
{
  sub_10000A38C(&qword_1003645E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100291180;
  uint64_t v21 = 25705;
  unint64_t v22 = 0xE200000000000000;
  AnyHashable.init<A>(_:)();
  uint64_t v3 = type metadata accessor for UUID();
  *(void *)(inited + 96) = v3;
  uint64_t v4 = sub_10000D680((uint64_t *)(inited + 72));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v4, v0, v3);
  uint64_t v21 = 0x496E6F6973736573;
  unint64_t v22 = 0xE900000000000044;
  AnyHashable.init<A>(_:)();
  uint64_t v5 = (int *)type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionOutput(0);
  uint64_t v6 = (uint64_t *)(v0 + v5[5]);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v8;
  *(void *)(inited + 152) = v7;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  Date.timeIntervalSinceReferenceDate.getter();
  *(void *)(inited + 240) = &type metadata for Double;
  *(void *)(inited + 216) = v9;
  uint64_t v21 = 0x74757074756FLL;
  unint64_t v22 = 0xE600000000000000;
  AnyHashable.init<A>(_:)();
  LOBYTE(v21) = *(unsigned char *)(v0 + v5[7]);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_1001CBE84();
  uint64_t v10 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v12 = v11;
  swift_release();
  if (v1)
  {
    sub_1000BA108(inited + 248);
    sub_1001CBAB0(inited + 176);
    sub_1001CBAB0(inited + 104);
    sub_1001CBAB0(inited + 32);
    swift_setDeallocating();
    sub_10000A38C(&qword_10036C190);
    swift_arrayDestroy();
  }
  else
  {
    *(void *)(inited + 312) = &type metadata for Data;
    *(void *)(inited + 288) = v10;
    *(void *)(inited + 296) = v12;
    uint64_t inited = sub_100268E80(inited);
    id v13 = (uint64_t *)(v0 + v5[8]);
    uint64_t v14 = v13[1];
    if (v14)
    {
      uint64_t v15 = *v13;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      char v20 = &type metadata for String;
      *(void *)&long long v19 = v15;
      *((void *)&v19 + 1) = v14;
      sub_100027B00(&v19, v18);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v23 = inited;
      sub_1002650FC(v18, (uint64_t)&v21, isUniquelyReferenced_nonNull_native);
      uint64_t inited = v23;
      swift_bridgeObjectRelease();
      sub_1000BA108((uint64_t)&v21);
    }
  }
  return inited;
}

uint64_t type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionOutput(uint64_t a1)
{
  return sub_100014F7C(a1, qword_10036C328);
}

unint64_t sub_1001CBE84()
{
  unint64_t result = qword_10036C198;
  if (!qword_10036C198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C198);
  }
  return result;
}

uint64_t *sub_1001CBED8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    id v13 = (char *)a1 + v9;
    uint64_t v14 = (char *)a2 + v9;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
    uint64_t v17 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)a1 + v17) = *(uint64_t *)((char *)a2 + v17);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1001CC02C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001CC0F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  uint64_t v16 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001CC1FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001CC310(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  return a1;
}

uint64_t sub_1001CC3EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001CC4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001CC4F8);
}

uint64_t sub_1001CC4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001CC510);
}

uint64_t sub_1001CC514()
{
  return sub_1001CD3C4();
}

uint64_t *sub_1001CC52C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1001CC604(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001CC67C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001CC704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001CC7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1001CC81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001CC8A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001CC8BC);
}

uint64_t sub_1001CC8BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001CC980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001CC994);
}

uint64_t sub_1001CC994(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1001CCA54()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1001CCAE8(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unint64_t v10 = (void *)((char *)a1 + v8);
    uint64_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (char *)a1 + v9;
    uint64_t v14 = (char *)a2 + v9;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
    uint64_t v17 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    uint64_t v18 = (void *)((char *)a1 + v17);
    long long v19 = (void *)((char *)a2 + v17);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1001CCC44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001CCD14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  unint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  uint64_t v16 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001CCE20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  void *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001CCF44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

uint64_t sub_1001CD020(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001CD120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001CD134);
}

uint64_t sub_1001CD138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 24);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1001CD268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001CD27C);
}

uint64_t sub_1001CD280(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_1001CD3B0()
{
  return sub_1001CD3C4();
}

uint64_t sub_1001CD3C4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for Handoff2UIEvent(uint64_t a1)
{
  return sub_1001485C4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s17proximitycontrold15Handoff2UIEventOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_10017AE64(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Handoff2UIEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_10017AE64(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1001485C4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Handoff2UIEvent(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1001485C4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Handoff2UIEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Handoff2UIEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffRemotePeerInterface.Request.Handoff2Output()
{
  return &type metadata for HandoffRemotePeerInterface.Request.Handoff2Output;
}

ValueMetadata *type metadata accessor for HandoffRemotePeerInterface()
{
  return &type metadata for HandoffRemotePeerInterface;
}

ValueMetadata *type metadata accessor for HandoffRemotePeerInterface.Request()
{
  return &type metadata for HandoffRemotePeerInterface.Request;
}

uint64_t destroy for RangingSessionState(uint64_t a1)
{
  return sub_10007E820(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
}

uint64_t initializeWithCopy for RangingSessionState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 56);
  sub_10007EA9C(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for RangingSessionState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 56);
  sub_10007EA9C(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  unsigned __int8 v18 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v10;
  sub_10007E820(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for RangingSessionState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  char v4 = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v3;
  unsigned __int8 v13 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v4;
  sub_10007E820(v5, v7, v6, v8, v9, v10, v11, v13);
  return a1;
}

ValueMetadata *type metadata accessor for RangingSessionState()
{
  return &type metadata for RangingSessionState;
}

uint64_t sub_1001CD828()
{
  sub_1000D84D4(v0, &v10);
  uint64_t countAndFlagsBits = v10._countAndFlagsBits;
  switch(v14)
  {
    case 1:
      Swift::String v15 = v10;
      long long v16 = v11;
      long long v17 = v12;
      uint64_t v18 = v13;
      uint64_t v2 = 0x202864656C696166;
      unint64_t v3 = 0xE800000000000000;
      goto LABEL_4;
    case 2:
      object = v10._object;
      v15._uint64_t countAndFlagsBits = 0x65646E6570737573;
      v15._object = (void *)0xEB00000000202864;
      String.append(_:)(*(Swift::String *)&countAndFlagsBits);
      v7._uint64_t countAndFlagsBits = 10528;
      v7._object = (void *)0xE200000000000000;
      String.append(_:)(v7);
      uint64_t result = v15._countAndFlagsBits;
      break;
    case 3:
      uint64_t v8 = *((void *)&v11 + 1) | v11 | (__int128)v10._object;
      if (*((void *)&v12 + 1) | v13 | v10._countAndFlagsBits | (unint64_t)v12 | v8)
      {
        uint64_t v9 = *((void *)&v12 + 1) | v13 | v12 | v8;
        if (v10._countAndFlagsBits != 1 || v9)
        {
          if (v10._countAndFlagsBits != 2 || v9)
          {
            if (v10._countAndFlagsBits == 3 && v9 == 0) {
              uint64_t result = 0x676E69646E6570;
            }
            else {
              uint64_t result = 0x6E65707375736E75;
            }
          }
          else
          {
            uint64_t result = 0x676E696E6E7572;
          }
        }
        else
        {
          uint64_t result = 0x646573756170;
        }
      }
      else
      {
        uint64_t result = 0x6576697463616E69;
      }
      break;
    default:
      Swift::String v15 = v10;
      long long v16 = v11;
      long long v17 = v12;
      uint64_t v18 = v13;
      _StringGuts.grow(_:)(17);
      uint64_t v2 = 0x6164696C61766E69;
      unint64_t v3 = 0xED00002028646574;
LABEL_4:
      String.append(_:)(*(Swift::String *)&v2);
      _print_unlocked<A, B>(_:_:)();
      v4._uint64_t countAndFlagsBits = 10528;
      v4._object = (void *)0xE200000000000000;
      String.append(_:)(v4);
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1001CDA90(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036C400);
  uint64_t v47 = *(void *)(v2 - 8);
  uint64_t v48 = v2;
  __chkstk_darwin(v2);
  uint64_t v46 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10036C408);
  uint64_t v61 = *(void *)(v4 - 8);
  uint64_t v62 = v4;
  __chkstk_darwin(v4);
  uint64_t v60 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036C410);
  uint64_t v44 = *(void *)(v6 - 8);
  uint64_t v45 = v6;
  __chkstk_darwin(v6);
  int64_t v43 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036C418);
  uint64_t v50 = *(void *)(v8 - 8);
  uint64_t v51 = v8;
  __chkstk_darwin(v8);
  unint64_t v49 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10036C420);
  uint64_t v53 = *(void *)(v10 - 8);
  uint64_t v54 = v10;
  __chkstk_darwin(v10);
  BOOL v52 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_10036C428);
  uint64_t v58 = *(void *)(v12 - 8);
  uint64_t v59 = v12;
  __chkstk_darwin(v12);
  char v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_10036C430);
  uint64_t v56 = *(void *)(v15 - 8);
  uint64_t v57 = v15;
  __chkstk_darwin(v15);
  long long v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000A38C(&qword_10036C438);
  uint64_t v55 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000A38C(&qword_10036C440);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v64 = v21;
  uint64_t v65 = v22;
  __chkstk_darwin(v21);
  unint64_t v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1001CFE34();
  int64_t v63 = v24;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1000D84D4(v83, &v70);
  switch(v74)
  {
    case 1:
      long long v79 = v70;
      long long v80 = v71;
      long long v81 = v72;
      uint64_t v82 = v73;
      LOBYTE(v66) = 2;
      sub_1001D002C();
      char v26 = v63;
      uint64_t v25 = v64;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v66 = v79;
      long long v67 = v80;
      long long v68 = v81;
      uint64_t v69 = v82;
      sub_1000D9C6C();
      uint64_t v28 = v59;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v14, v28);
      goto LABEL_4;
    case 2:
      LOBYTE(v66) = 6;
      sub_1001CFEDC();
      uint64_t v30 = v60;
      uint64_t v32 = v63;
      uint64_t v31 = v64;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v33 = v62;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v30, v33);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v32, v31);
      break;
    case 3:
      uint64_t v34 = *((void *)&v71 + 1) | v71 | *((void *)&v70 + 1);
      if (*((void *)&v72 + 1) | v73 | (unint64_t)v70 | (unint64_t)v72 | v34)
      {
        uint64_t v35 = *((void *)&v72 + 1) | v73 | v72 | v34;
        if ((void)v70 != 1 || v35)
        {
          if ((void)v70 != 2 || v35)
          {
            if ((void)v70 != 3 || v35)
            {
              LOBYTE(v66) = 7;
              sub_1001CFE88();
              uint64_t v36 = v46;
              unint64_t v37 = v63;
              uint64_t v38 = v64;
              KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
              uint64_t v40 = v47;
              uint64_t v39 = v48;
            }
            else
            {
              LOBYTE(v66) = 5;
              sub_1001CFF30();
              uint64_t v36 = v43;
              unint64_t v37 = v63;
              uint64_t v38 = v64;
              KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
              uint64_t v40 = v44;
              uint64_t v39 = v45;
            }
          }
          else
          {
            LOBYTE(v66) = 4;
            sub_1001CFF84();
            uint64_t v36 = v49;
            unint64_t v37 = v63;
            uint64_t v38 = v64;
            KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
            uint64_t v40 = v50;
            uint64_t v39 = v51;
          }
        }
        else
        {
          LOBYTE(v66) = 3;
          sub_1001CFFD8();
          uint64_t v36 = v52;
          unint64_t v37 = v63;
          uint64_t v38 = v64;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v40 = v53;
          uint64_t v39 = v54;
        }
        (*(void (**)(char *, uint64_t))(v40 + 8))(v36, v39);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v37, v38);
      }
      else
      {
        LOBYTE(v66) = 0;
        sub_1001D00D4();
        id v41 = v63;
        uint64_t v42 = v64;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v20, v18);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v41, v42);
      }
      break;
    default:
      long long v75 = v70;
      long long v76 = v71;
      long long v77 = v72;
      uint64_t v78 = v73;
      LOBYTE(v66) = 1;
      sub_1001D0080();
      char v26 = v63;
      uint64_t v25 = v64;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v66 = v75;
      long long v67 = v76;
      long long v68 = v77;
      uint64_t v69 = v78;
      sub_1000D9C6C();
      uint64_t v27 = v57;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v17, v27);
LABEL_4:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v26, v25);
      break;
  }
  return result;
}

uint64_t sub_1001CE38C()
{
  uint64_t result = 0x6576697463616E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6164696C61766E69;
      break;
    case 2:
      uint64_t result = 0x64656C696166;
      break;
    case 3:
      uint64_t result = 0x646573756170;
      break;
    case 4:
      unsigned int v2 = 1852732786;
      goto LABEL_7;
    case 5:
      unsigned int v2 = 1684956528;
LABEL_7:
      uint64_t result = v2 | 0x676E6900000000;
      break;
    case 6:
      uint64_t result = 0x65646E6570737573;
      break;
    case 7:
      uint64_t result = 0x6E65707375736E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001CE494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001CEDAC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001CE4BC(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1001CE4C8(uint64_t a1)
{
  unint64_t v2 = sub_1001CFE34();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CE504(uint64_t a1)
{
  unint64_t v2 = sub_1001CFE34();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001CE540(uint64_t a1)
{
  unint64_t v2 = sub_1001D002C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CE57C(uint64_t a1)
{
  unint64_t v2 = sub_1001D002C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001CE5B8(uint64_t a1)
{
  unint64_t v2 = sub_1001D00D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CE5F4(uint64_t a1)
{
  unint64_t v2 = sub_1001D00D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001CE630(uint64_t a1)
{
  unint64_t v2 = sub_1001D0080();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CE66C(uint64_t a1)
{
  unint64_t v2 = sub_1001D0080();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001CE6A8(uint64_t a1)
{
  unint64_t v2 = sub_1001CFFD8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CE6E4(uint64_t a1)
{
  unint64_t v2 = sub_1001CFFD8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001CE720(uint64_t a1)
{
  unint64_t v2 = sub_1001CFF30();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CE75C(uint64_t a1)
{
  unint64_t v2 = sub_1001CFF30();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001CE798(uint64_t a1)
{
  unint64_t v2 = sub_1001CFF84();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CE7D4(uint64_t a1)
{
  unint64_t v2 = sub_1001CFF84();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001CE810(uint64_t a1)
{
  unint64_t v2 = sub_1001CFEDC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CE84C(uint64_t a1)
{
  unint64_t v2 = sub_1001CFEDC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001CE888(uint64_t a1)
{
  unint64_t v2 = sub_1001CFE88();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CE8C4(uint64_t a1)
{
  unint64_t v2 = sub_1001CFE88();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001CE900(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1001CF114(a1, (uint64_t)v4);
  if (!v2) {
    sub_1000D84D4(v4, a2);
  }
}

uint64_t sub_1001CE948(void *a1)
{
  sub_1000D84D4(v1, v4);
  return sub_1001CDA90(a1);
}

uint64_t sub_1001CE998()
{
  sub_1000D84D4(v0, v2);
  return sub_1001CD828();
}

uint64_t sub_1001CE9D0(long long *a1, long long *a2)
{
  sub_1000D84D4(a1, v4);
  sub_1000D84D4(a2, v5);
  return sub_1001CEA1C(v4, v5) & 1;
}

uint64_t sub_1001CEA1C(long long *a1, long long *a2)
{
  sub_1000D84D4(a1, &v32);
  uint64_t v3 = v32;
  switch(v38)
  {
    case 1:
      unint64_t v13 = *((void *)&v32 + 1);
      unint64_t v14 = v33;
      unint64_t v15 = v34;
      unint64_t v16 = v35;
      uint64_t v9 = v36;
      uint64_t v8 = v37;
      sub_1000D84D4(a2, &v27);
      if (v31 != 1) {
        goto LABEL_53;
      }
      if (v3 != v27) {
        goto LABEL_53;
      }
      int8x16_t v17 = v29;
      uint64_t v11 = v30.i64[1];
      uint64_t v12 = v30.i64[0];
      if (__PAIR128__(v14, v13) != v28 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_53;
      }
      if (__PAIR128__(v16, v15) != *(_OWORD *)&v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_53;
      }
      if (!v8) {
        goto LABEL_9;
      }
      goto LABEL_18;
    case 2:
      uint64_t v18 = *((void *)&v32 + 1);
      sub_1000D84D4(a2, &v27);
      if (v31 != 2) {
        goto LABEL_53;
      }
      if (v3 == v27 && v18 == (void)v28) {
        goto LABEL_45;
      }
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      return v20 & 1;
    case 3:
      uint64_t v21 = v34 | v33 | *((void *)&v32 + 1);
      if (v36 | v37 | (unint64_t)v32 | v35 | v21)
      {
        uint64_t v22 = v36 | v37 | v35 | v21;
        if ((void)v32 == 1 && v22 == 0)
        {
          sub_1000D84D4(a2, &v27);
          if (v31 != 3 || v27 != 1) {
            goto LABEL_53;
          }
        }
        else if ((void)v32 != 2 || v22)
        {
          if ((void)v32 != 3 || v22)
          {
            sub_1000D84D4(a2, &v27);
            if (v31 != 3 || v27 != 4) {
              goto LABEL_53;
            }
          }
          else
          {
            sub_1000D84D4(a2, &v27);
            if (v31 != 3 || v27 != 3) {
              goto LABEL_53;
            }
          }
        }
        else
        {
          sub_1000D84D4(a2, &v27);
          if (v31 != 3 || v27 != 2) {
            goto LABEL_53;
          }
        }
        int8x16_t v25 = vorrq_s8(v29, v30);
        if (*(void *)&vorr_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)) | *((void *)&v28 + 1) | (unint64_t)v28) {
          goto LABEL_53;
        }
      }
      else
      {
        sub_1000D84D4(a2, &v27);
        if (v31 != 3) {
          goto LABEL_53;
        }
        int8x16_t v24 = vorrq_s8(v29, v30);
        if (*(void *)&vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)) | *((void *)&v28 + 1) | (unint64_t)v28 | v27) {
          goto LABEL_53;
        }
      }
      goto LABEL_45;
    default:
      unint64_t v4 = *((void *)&v32 + 1);
      unint64_t v5 = v33;
      unint64_t v6 = v34;
      unint64_t v7 = v35;
      uint64_t v9 = v36;
      uint64_t v8 = v37;
      sub_1000D84D4(a2, &v27);
      if (v31) {
        goto LABEL_53;
      }
      if (v3 != v27) {
        goto LABEL_53;
      }
      int8x16_t v10 = v29;
      uint64_t v11 = v30.i64[1];
      uint64_t v12 = v30.i64[0];
      if (__PAIR128__(v5, v4) != v28 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_53;
      }
      if (__PAIR128__(v7, v6) != *(_OWORD *)&v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_53;
      }
      if (v8)
      {
LABEL_18:
        if (v11 && (v9 == v12 && v8 == v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
          goto LABEL_45;
        }
      }
      else
      {
LABEL_9:
        if (!v11)
        {
LABEL_45:
          char v20 = 1;
          return v20 & 1;
        }
      }
LABEL_53:
      char v20 = 0;
      return v20 & 1;
  }
}

uint64_t sub_1001CEDAC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6576697463616E69 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6164696C61766E69 && a2 == 0xEB00000000646574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64656C696166 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x646573756170 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x676E696E6E7572 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x676E69646E6570 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x65646E6570737573 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6E65707375736E75 && a2 == 0xEB00000000646564)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

double sub_1001CF114@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v76 = a2;
  uint64_t v73 = sub_10000A38C(&qword_10036C370);
  uint64_t v71 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  long long v81 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_10000A38C(&qword_10036C378);
  uint64_t v74 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  long long v80 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000A38C(&qword_10036C380);
  uint64_t v69 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  long long v79 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000A38C(&qword_10036C388);
  uint64_t v68 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v78 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_10000A38C(&qword_10036C390);
  uint64_t v64 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  long long v77 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_10000A38C(&qword_10036C398);
  uint64_t v65 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  long long v75 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10000A38C(&qword_10036C3A0);
  uint64_t v61 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  int8x16_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_10036C3A8);
  uint64_t v60 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000A38C(&qword_10036C3B0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  int8x16_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1[3];
  char v89 = a1;
  sub_10000D6E4(a1, v18);
  sub_1001CFE34();
  uint64_t v19 = v82;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19) {
    goto LABEL_22;
  }
  uint64_t v57 = v13;
  uint64_t v56 = v11;
  uint64_t v58 = v10;
  uint64_t v21 = v77;
  char v20 = v78;
  uint64_t v59 = 0;
  uint64_t v23 = v79;
  uint64_t v22 = v80;
  int8x16_t v24 = v81;
  *(void *)&long long v82 = v15;
  uint64_t v25 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v25 + 16) != 1)
  {
    unint64_t v33 = v17;
    uint64_t v34 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v35 = v14;
    uint64_t v37 = v36;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v37 = &type metadata for RangingSessionState;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v34 - 8) + 104))(v37, enum case for DecodingError.typeMismatch(_:), v34);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v33, v35);
LABEL_22:
    sub_10000CC5C((uint64_t)v89);
    return result;
  }
  switch(*(unsigned char *)(v25 + 32))
  {
    case 1:
      LOBYTE(v83) = 1;
      sub_1001D0080();
      char v38 = v58;
      uint64_t v39 = v59;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v39) {
        goto LABEL_21;
      }
      sub_1000D9A74();
      uint64_t v40 = v62;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v38, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v17, v14);
      char v41 = 0;
      uint64_t v28 = v83;
      uint64_t v29 = v84;
      uint64_t v30 = v85;
      uint64_t v31 = v86;
      uint64_t v32 = v87;
      goto LABEL_24;
    case 2:
      LOBYTE(v83) = 2;
      sub_1001D002C();
      uint64_t v42 = v75;
      uint64_t v43 = v59;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v43) {
        goto LABEL_21;
      }
      sub_1000D9A74();
      uint64_t v44 = v66;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v45 = v82;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v42, v44);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v14);
      uint64_t v28 = v83;
      uint64_t v29 = v84;
      uint64_t v30 = v85;
      uint64_t v31 = v86;
      uint64_t v32 = v87;
      char v41 = 1;
LABEL_24:
      long long v82 = v88;
      goto LABEL_25;
    case 3:
      LOBYTE(v83) = 3;
      sub_1001CFFD8();
      uint64_t v46 = v59;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v46) {
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v64 + 8))(v21, v63);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v17, v14);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      long long v82 = 0u;
      char v41 = 3;
      uint64_t v28 = 1;
      goto LABEL_25;
    case 4:
      LOBYTE(v83) = 4;
      sub_1001CFF84();
      uint64_t v47 = v59;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v47) {
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v68 + 8))(v20, v67);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v17, v14);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      long long v82 = 0u;
      char v41 = 3;
      uint64_t v28 = 2;
      goto LABEL_25;
    case 5:
      LOBYTE(v83) = 5;
      sub_1001CFF30();
      uint64_t v48 = v59;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v48) {
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v69 + 8))(v23, v70);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v17, v14);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      long long v82 = 0u;
      uint64_t v28 = 3;
      goto LABEL_17;
    case 6:
      LOBYTE(v83) = 6;
      sub_1001CFEDC();
      uint64_t v49 = v59;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v49) {
        goto LABEL_21;
      }
      uint64_t v50 = v17;
      uint64_t v51 = v72;
      uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v29 = v54;
      (*(void (**)(char *, uint64_t))(v74 + 8))(v22, v51);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v50, v14);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      long long v82 = 0u;
      char v41 = 2;
      goto LABEL_25;
    case 7:
      LOBYTE(v83) = 7;
      sub_1001CFE88();
      uint64_t v52 = v59;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v52) {
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v71 + 8))(v24, v73);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v17, v14);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      long long v82 = 0u;
      char v41 = 3;
      uint64_t v28 = 4;
      goto LABEL_25;
    default:
      LOBYTE(v83) = 0;
      sub_1001D00D4();
      char v26 = v57;
      uint64_t v27 = v59;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v27)
      {
LABEL_21:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v82 + 8))(v17, v14);
        goto LABEL_22;
      }
      (*(void (**)(char *, uint64_t))(v60 + 8))(v26, v56);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v17, v14);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      long long v82 = 0u;
LABEL_17:
      char v41 = 3;
LABEL_25:
      uint64_t v55 = v76;
      sub_10000CC5C((uint64_t)v89);
      *(void *)uint64_t v55 = v28;
      *(void *)(v55 + 8) = v29;
      *(void *)(v55 + 16) = v30;
      *(void *)(v55 + 24) = v31;
      *(void *)(v55 + 32) = v32;
      double result = *(double *)&v82;
      *(_OWORD *)(v55 + 40) = v82;
      *(unsigned char *)(v55 + 56) = v41;
      break;
  }
  return result;
}

unint64_t sub_1001CFE34()
{
  unint64_t result = qword_10036C3B8;
  if (!qword_10036C3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C3B8);
  }
  return result;
}

unint64_t sub_1001CFE88()
{
  unint64_t result = qword_10036C3C0;
  if (!qword_10036C3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C3C0);
  }
  return result;
}

unint64_t sub_1001CFEDC()
{
  unint64_t result = qword_10036C3C8;
  if (!qword_10036C3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C3C8);
  }
  return result;
}

unint64_t sub_1001CFF30()
{
  unint64_t result = qword_10036C3D0;
  if (!qword_10036C3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C3D0);
  }
  return result;
}

unint64_t sub_1001CFF84()
{
  unint64_t result = qword_10036C3D8;
  if (!qword_10036C3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C3D8);
  }
  return result;
}

unint64_t sub_1001CFFD8()
{
  unint64_t result = qword_10036C3E0;
  if (!qword_10036C3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C3E0);
  }
  return result;
}

unint64_t sub_1001D002C()
{
  unint64_t result = qword_10036C3E8;
  if (!qword_10036C3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C3E8);
  }
  return result;
}

unint64_t sub_1001D0080()
{
  unint64_t result = qword_10036C3F0;
  if (!qword_10036C3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C3F0);
  }
  return result;
}

unint64_t sub_1001D00D4()
{
  unint64_t result = qword_10036C3F8;
  if (!qword_10036C3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C3F8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RangingSessionState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001D01F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RangingSessionState.CodingKeys()
{
  return &type metadata for RangingSessionState.CodingKeys;
}

ValueMetadata *type metadata accessor for RangingSessionState.InactiveCodingKeys()
{
  return &type metadata for RangingSessionState.InactiveCodingKeys;
}

ValueMetadata *type metadata accessor for RangingSessionState.InvalidatedCodingKeys()
{
  return &type metadata for RangingSessionState.InvalidatedCodingKeys;
}

ValueMetadata *type metadata accessor for RangingSessionState.FailedCodingKeys()
{
  return &type metadata for RangingSessionState.FailedCodingKeys;
}

ValueMetadata *type metadata accessor for RangingSessionState.PausedCodingKeys()
{
  return &type metadata for RangingSessionState.PausedCodingKeys;
}

ValueMetadata *type metadata accessor for RangingSessionState.RunningCodingKeys()
{
  return &type metadata for RangingSessionState.RunningCodingKeys;
}

ValueMetadata *type metadata accessor for RangingSessionState.PendingCodingKeys()
{
  return &type metadata for RangingSessionState.PendingCodingKeys;
}

unsigned char *_s17proximitycontrold19RangingSessionStateO21InvalidatedCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001D032CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for RangingSessionState.SuspendedCodingKeys()
{
  return &type metadata for RangingSessionState.SuspendedCodingKeys;
}

ValueMetadata *type metadata accessor for RangingSessionState.UnsuspendedCodingKeys()
{
  return &type metadata for RangingSessionState.UnsuspendedCodingKeys;
}

unint64_t sub_1001D0378()
{
  unint64_t result = qword_10036C448;
  if (!qword_10036C448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C448);
  }
  return result;
}

unint64_t sub_1001D03D0()
{
  unint64_t result = qword_10036C450;
  if (!qword_10036C450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C450);
  }
  return result;
}

unint64_t sub_1001D0428()
{
  unint64_t result = qword_10036C458;
  if (!qword_10036C458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C458);
  }
  return result;
}

unint64_t sub_1001D0480()
{
  unint64_t result = qword_10036C460;
  if (!qword_10036C460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C460);
  }
  return result;
}

unint64_t sub_1001D04D8()
{
  unint64_t result = qword_10036C468;
  if (!qword_10036C468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C468);
  }
  return result;
}

unint64_t sub_1001D0530()
{
  unint64_t result = qword_10036C470;
  if (!qword_10036C470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C470);
  }
  return result;
}

unint64_t sub_1001D0588()
{
  unint64_t result = qword_10036C478;
  if (!qword_10036C478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C478);
  }
  return result;
}

unint64_t sub_1001D05E0()
{
  unint64_t result = qword_10036C480;
  if (!qword_10036C480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C480);
  }
  return result;
}

unint64_t sub_1001D0638()
{
  unint64_t result = qword_10036C488;
  if (!qword_10036C488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C488);
  }
  return result;
}

unint64_t sub_1001D0690()
{
  unint64_t result = qword_10036C490;
  if (!qword_10036C490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C490);
  }
  return result;
}

unint64_t sub_1001D06E8()
{
  unint64_t result = qword_10036C498;
  if (!qword_10036C498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C498);
  }
  return result;
}

unint64_t sub_1001D0740()
{
  unint64_t result = qword_10036C4A0;
  if (!qword_10036C4A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C4A0);
  }
  return result;
}

unint64_t sub_1001D0798()
{
  unint64_t result = qword_10036C4A8;
  if (!qword_10036C4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C4A8);
  }
  return result;
}

unint64_t sub_1001D07F0()
{
  unint64_t result = qword_10036C4B0;
  if (!qword_10036C4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C4B0);
  }
  return result;
}

unint64_t sub_1001D0848()
{
  unint64_t result = qword_10036C4B8;
  if (!qword_10036C4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C4B8);
  }
  return result;
}

unint64_t sub_1001D08A0()
{
  unint64_t result = qword_10036C4C0;
  if (!qword_10036C4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C4C0);
  }
  return result;
}

unint64_t sub_1001D08F8()
{
  unint64_t result = qword_10036C4C8;
  if (!qword_10036C4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C4C8);
  }
  return result;
}

unint64_t sub_1001D0950()
{
  unint64_t result = qword_10036C4D0;
  if (!qword_10036C4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C4D0);
  }
  return result;
}

unint64_t sub_1001D09A8()
{
  unint64_t result = qword_10036C4D8;
  if (!qword_10036C4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C4D8);
  }
  return result;
}

unint64_t sub_1001D0A00()
{
  unint64_t result = qword_10036C4E0;
  if (!qword_10036C4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C4E0);
  }
  return result;
}

unint64_t sub_1001D0A58()
{
  unint64_t result = qword_10036C4E8;
  if (!qword_10036C4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C4E8);
  }
  return result;
}

unint64_t sub_1001D0AB0()
{
  unint64_t result = qword_10036C4F0;
  if (!qword_10036C4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C4F0);
  }
  return result;
}

id sub_1001D0B04()
{
  id v0 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithFrame:0.0, 0.0, 200.0, 200.0];
  unint64_t v1 = self;
  id v2 = v0;
  id v3 = [v1 configurationWithScale:3];
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [self systemImageNamed:v4 withConfiguration:v3];

  [v2 setImage:v5 forState:0];
  id v6 = [self systemBlueColor];
  [v2 setTintColor:v6];

  return v2;
}

void sub_1001D0C48()
{
  qword_1003ACA80 = (uint64_t)&off_10031DC20;
}

unint64_t sub_1001D0C5C()
{
  return sub_100260DEC();
}

uint64_t destroy for RangingTokenLimitEvent()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RangingTokenLimitEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RangingTokenLimitEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  return a1;
}

uint64_t assignWithTake for RangingTokenLimitEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for RangingTokenLimitEvent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RangingTokenLimitEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RangingTokenLimitEvent()
{
  return &type metadata for RangingTokenLimitEvent;
}

unint64_t sub_1001D0EDC(uint64_t a1)
{
  unint64_t result = sub_1001D0F04();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001D0F04()
{
  unint64_t result = qword_10036C4F8;
  if (!qword_10036C4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C4F8);
  }
  return result;
}

void *sub_1001D0F58(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return v4;
  }
  *(void *)a1 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  uint64_t v7 = (void *)a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v9 = *(int *)(v8 + 32);
  int8x16_t v10 = (void *)((char *)v4 + v9);
  uint64_t v11 = (uint64_t *)((char *)a2 + v9);
  uint64_t v12 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  swift_bridgeObjectRetain();
  id v13 = v7;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v87 = v12;
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v83 = (void *)v8;
    uint64_t v17 = v11[1];
    *int8x16_t v10 = *v11;
    v10[1] = v17;
    uint64_t v18 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    __dst = (char *)v10 + v18;
    uint64_t v19 = (char *)v11 + v18;
    uint64_t v20 = type metadata accessor for Date();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    swift_bridgeObjectRetain();
    if (v22(v19, 1, v20))
    {
      uint64_t v23 = sub_10000A38C(&qword_10035E158);
      memcpy(__dst, v19, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dst, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    uint64_t v8 = (uint64_t)v83;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v84 = (void *)v8;
    uint64_t v24 = v11[1];
    *int8x16_t v10 = *v11;
    v10[1] = v24;
    uint64_t v25 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v26 = *(int *)(v25 + 20);
    uint64_t v78 = v25;
    __dsta = (char *)v10 + v26;
    long long v77 = (char *)v11 + v26;
    uint64_t v27 = type metadata accessor for Date();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    swift_bridgeObjectRetain();
    if (v29(v77, 1, v27))
    {
      uint64_t v30 = sub_10000A38C(&qword_10035E158);
      memcpy(__dsta, v77, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dsta, v77, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(__dsta, 0, 1, v27);
    }
    uint64_t v8 = (uint64_t)v84;
    uint64_t v12 = v87;
    uint64_t v31 = *(int *)(v78 + 24);
    uint64_t v32 = (void *)((char *)v10 + v31);
    unint64_t v33 = (void *)((char *)v11 + v31);
    uint64_t v34 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v34;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
      goto LABEL_17;
    }
    uint64_t v15 = v11[1];
    *int8x16_t v10 = *v11;
    v10[1] = v15;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_17:
  uint64_t v35 = *(int *)(v8 + 36);
  uint64_t v36 = (void *)((char *)v4 + v35);
  uint64_t v37 = (uint64_t *)((char *)a2 + v35);
  int v38 = swift_getEnumCaseMultiPayload();
  switch(v38)
  {
    case 2:
      uint64_t v40 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v40;
      uint64_t v41 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      uint64_t v85 = (char *)v36 + v41;
      uint64_t v42 = (char *)v37 + v41;
      uint64_t v43 = type metadata accessor for Date();
      uint64_t v44 = *(void *)(v43 - 8);
      uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
      swift_bridgeObjectRetain();
      if (v45(v42, 1, v43))
      {
        uint64_t v46 = sub_10000A38C(&qword_10035E158);
        memcpy(v85, v42, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v85, v42, v43);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v85, 0, 1, v43);
      }
      goto LABEL_29;
    case 1:
      uint64_t v47 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v47;
      uint64_t v48 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      uint64_t v49 = *(int *)(v48 + 20);
      __dstb = (int *)v48;
      uint64_t v86 = (char *)v36 + v49;
      long long v79 = (char *)v37 + v49;
      uint64_t v50 = type metadata accessor for Date();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
      swift_bridgeObjectRetain();
      if (v52(v79, 1, v50))
      {
        uint64_t v53 = sub_10000A38C(&qword_10035E158);
        memcpy(v86, v79, *(void *)(*(void *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v86, v79, v50);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v86, 0, 1, v50);
      }
      uint64_t v54 = __dstb[6];
      uint64_t v55 = (void *)((char *)v36 + v54);
      uint64_t v56 = (void *)((char *)v37 + v54);
      uint64_t v57 = v56[1];
      *uint64_t v55 = *v56;
      v55[1] = v57;
      swift_bridgeObjectRetain();
      goto LABEL_29;
    case 0:
      uint64_t v39 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v39;
      swift_bridgeObjectRetain();
LABEL_29:
      swift_storeEnumTagMultiPayload();
      goto LABEL_30;
  }
  memcpy(v36, v37, *(void *)(*(void *)(v12 - 8) + 64));
LABEL_30:
  uint64_t v58 = a3[6];
  *((unsigned char *)v4 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  uint64_t v59 = *(void **)((char *)a2 + v58);
  *(void *)((char *)v4 + v58) = v59;
  uint64_t v60 = a3[7];
  uint64_t v61 = (char *)v4 + v60;
  uint64_t v62 = (uint64_t)a2 + v60;
  uint64_t v63 = *(void **)((char *)a2 + v60);
  id v64 = v59;
  if (v63 == (void *)1)
  {
    *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
  }
  else
  {
    uint64_t v65 = *(void *)(v62 + 8);
    *(void *)uint64_t v61 = v63;
    *((void *)v61 + 1) = v65;
    id v66 = v63;
  }
  uint64_t v67 = a3[8];
  uint64_t v68 = (void *)((char *)v4 + v67);
  uint64_t v69 = (uint64_t *)((char *)a2 + v67);
  _s8CardInfoOMa();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v70 = v69[1];
    *uint64_t v68 = *v69;
    v68[1] = v70;
    uint64_t v71 = v69[2];
    uint64_t v72 = v69[3];
    _OWORD v68[2] = v71;
    v68[3] = v72;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v73 = type metadata accessor for UUID();
    uint64_t v74 = *(void (**)(void *, void *, uint64_t))(*(void *)(v73 - 8) + 16);
    v74(v68, v69, v73);
    uint64_t v75 = sub_10000A38C(&qword_10035E428);
    v74((void *)((char *)v68 + *(int *)(v75 + 48)), (void *)((char *)v69 + *(int *)(v75 + 48)), v73);
  }
  swift_storeEnumTagMultiPayload();
  *(void *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  return v4;
}

uint64_t sub_1001D16C0(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();

  uint64_t v4 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v5 = a1 + *(int *)(v4 + 32);
  type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = v5 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = v5 + *(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20);
      uint64_t v11 = type metadata accessor for Date();
      uint64_t v12 = *(void *)(v11 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      }
    }
    else if (EnumCaseMultiPayload)
    {
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
  }
LABEL_10:
  uint64_t v13 = a1 + *(int *)(v4 + 36);
  int v14 = swift_getEnumCaseMultiPayload();
  if (v14 == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = v13 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v17 = *(void *)(v16 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16)) {
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    }
  }
  else
  {
    if (v14 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v18 = v13 + *(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20);
      uint64_t v19 = type metadata accessor for Date();
      uint64_t v20 = *(void *)(v19 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      }
    }
    else if (v14)
    {
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
  }
LABEL_19:

  uint64_t v21 = *(void **)(a1 + a2[7]);
  if (v21 != (void *)1) {

  }
  uint64_t v22 = a1 + a2[8];
  _s8CardInfoOMa();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = type metadata accessor for UUID();
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v26)((void *)(v24 - 8), v22, v24);
    uint64_t v25 = v22 + *(int *)(sub_10000A38C(&qword_10035E428) + 48);
    return v26(v25, v24);
  }
}

uint64_t sub_1001D1AEC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  id v6 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  swift_bridgeObjectRetain();
  id v12 = v6;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v85 = a3;
  if (EnumCaseMultiPayload == 2)
  {
    long long v81 = (void *)v7;
    uint64_t v15 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v15;
    uint64_t v16 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    __dst = (char *)v9 + v16;
    uint64_t v17 = (char *)v10 + v16;
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain();
    if (v20(v17, 1, v18))
    {
      uint64_t v21 = sub_10000A38C(&qword_10035E158);
      memcpy(__dst, v17, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(__dst, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v7 = (uint64_t)v81;
    a3 = v85;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v76 = v11;
    long long v82 = (void *)v7;
    uint64_t v22 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v22;
    uint64_t v75 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v23 = *(int *)(v75 + 20);
    __dsta = (char *)v9 + v23;
    uint64_t v24 = (char *)v10 + v23;
    uint64_t v25 = type metadata accessor for Date();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_bridgeObjectRetain();
    if (v27(v24, 1, v25))
    {
      uint64_t v28 = sub_10000A38C(&qword_10035E158);
      memcpy(__dsta, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(__dsta, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(__dsta, 0, 1, v25);
    }
    uint64_t v7 = (uint64_t)v82;
    uint64_t v11 = v76;
    uint64_t v29 = *(int *)(v75 + 24);
    uint64_t v30 = (void *)((char *)v9 + v29);
    uint64_t v31 = (void *)((char *)v10 + v29);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    a3 = v85;
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v14 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v14;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v33 = *(int *)(v7 + 36);
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  int v36 = swift_getEnumCaseMultiPayload();
  if (v36 == 2)
  {
    uint64_t v38 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v38;
    uint64_t v39 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v83 = (char *)v34 + v39;
    uint64_t v40 = (char *)v35 + v39;
    uint64_t v41 = type metadata accessor for Date();
    uint64_t v42 = *(void *)(v41 - 8);
    uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
    swift_bridgeObjectRetain();
    if (v43(v40, 1, v41))
    {
      uint64_t v44 = sub_10000A38C(&qword_10035E158);
      memcpy(v83, v40, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v83, v40, v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v83, 0, 1, v41);
    }
    a3 = v85;
  }
  else if (v36 == 1)
  {
    uint64_t v45 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v45;
    uint64_t v46 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v47 = *(int *)(v46 + 20);
    __dstb = (int *)v46;
    uint64_t v84 = (char *)v34 + v47;
    long long v77 = (char *)v35 + v47;
    uint64_t v48 = type metadata accessor for Date();
    uint64_t v49 = *(void *)(v48 - 8);
    uint64_t v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
    swift_bridgeObjectRetain();
    if (v50(v77, 1, v48))
    {
      uint64_t v51 = sub_10000A38C(&qword_10035E158);
      memcpy(v84, v77, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v84, v77, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v84, 0, 1, v48);
    }
    a3 = v85;
    uint64_t v52 = __dstb[6];
    uint64_t v53 = (void *)((char *)v34 + v52);
    uint64_t v54 = (void *)((char *)v35 + v52);
    uint64_t v55 = v54[1];
    *uint64_t v53 = *v54;
    v53[1] = v55;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v36)
    {
      memcpy(v34, v35, *(void *)(*(void *)(v11 - 8) + 64));
      goto LABEL_28;
    }
    uint64_t v37 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v37;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_28:
  uint64_t v56 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v57 = *(void **)(a2 + v56);
  *(void *)(a1 + v56) = v57;
  uint64_t v58 = a3[7];
  uint64_t v59 = a1 + v58;
  uint64_t v60 = a2 + v58;
  uint64_t v61 = *(void **)(a2 + v58);
  id v62 = v57;
  if (v61 == (void *)1)
  {
    *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
  }
  else
  {
    uint64_t v63 = *(void *)(v60 + 8);
    *(void *)uint64_t v59 = v61;
    *(void *)(v59 + 8) = v63;
    id v64 = v61;
  }
  uint64_t v65 = a3[8];
  id v66 = (void *)(a1 + v65);
  uint64_t v67 = (void *)(a2 + v65);
  _s8CardInfoOMa();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v68 = v67[1];
    void *v66 = *v67;
    v66[1] = v68;
    uint64_t v69 = v67[2];
    uint64_t v70 = v67[3];
    v66[2] = v69;
    v66[3] = v70;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v71 = type metadata accessor for UUID();
    uint64_t v72 = *(void (**)(void *, void *, uint64_t))(*(void *)(v71 - 8) + 16);
    v72(v66, v67, v71);
    uint64_t v73 = sub_10000A38C(&qword_10035E428);
    v72((void *)((char *)v66 + *(int *)(v73 + 48)), (void *)((char *)v67 + *(int *)(v73 + 48)), v71);
  }
  swift_storeEnumTagMultiPayload();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1001D2214(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = (void *)a2[5];
  *(void *)(a1 + 40) = v8;
  id v9 = v8;

  uint64_t v10 = type metadata accessor for ActivityDisplayContext(0);
  if ((uint64_t *)a1 == a2) {
    goto LABEL_30;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(int *)(v10 + 32);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  sub_1001D48F4(a1 + v12, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  uint64_t v15 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v77 = v15;
  uint64_t v78 = a3;
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *uint64_t v13 = *v14;
      v13[1] = v14[1];
      uint64_t v17 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      __dst = (char *)v13 + v17;
      uint64_t v18 = (char *)v14 + v17;
      uint64_t v19 = type metadata accessor for Date();
      uint64_t v20 = *(void *)(v19 - 8);
      uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
      swift_bridgeObjectRetain();
      if (v21(v18, 1, v19))
      {
        uint64_t v22 = sub_10000A38C(&qword_10035E158);
        memcpy(__dst, v18, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
      }
      a3 = v78;
      goto LABEL_15;
    case 1:
      *uint64_t v13 = *v14;
      v13[1] = v14[1];
      uint64_t v23 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      uint64_t v24 = *(int *)(v23 + 20);
      uint64_t v72 = (char *)v13 + v24;
      __dsta = (int *)v23;
      uint64_t v71 = (char *)v14 + v24;
      uint64_t v25 = type metadata accessor for Date();
      uint64_t v26 = *(void *)(v25 - 8);
      uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
      swift_bridgeObjectRetain();
      if (v27(v71, 1, v25))
      {
        uint64_t v28 = sub_10000A38C(&qword_10035E158);
        memcpy(v72, v71, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v72, v71, v25);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v72, 0, 1, v25);
      }
      uint64_t v15 = v77;
      uint64_t v29 = __dsta[6];
      uint64_t v30 = (void *)((char *)v13 + v29);
      uint64_t v31 = (void *)((char *)v14 + v29);
      *uint64_t v30 = *v31;
      v30[1] = v31[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      a3 = v78;
      goto LABEL_16;
    case 0:
      *uint64_t v13 = *v14;
      v13[1] = v14[1];
      swift_bridgeObjectRetain();
LABEL_15:
      swift_storeEnumTagMultiPayload();
      goto LABEL_16;
  }
  memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
LABEL_16:
  uint64_t v32 = *(int *)(v11 + 36);
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (uint64_t *)((char *)a2 + v32);
  sub_1001D48F4(a1 + v32, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  int v35 = swift_getEnumCaseMultiPayload();
  if (v35 == 2)
  {
    *uint64_t v33 = *v34;
    v33[1] = v34[1];
    uint64_t v36 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v37 = (char *)v33 + v36;
    uint64_t v38 = (char *)v34 + v36;
    uint64_t v39 = type metadata accessor for Date();
    uint64_t v40 = *(void *)(v39 - 8);
    uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
    swift_bridgeObjectRetain();
    if (v41(v38, 1, v39))
    {
      uint64_t v42 = sub_10000A38C(&qword_10035E158);
      memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
    a3 = v78;
LABEL_29:
    swift_storeEnumTagMultiPayload();
    goto LABEL_30;
  }
  if (v35 != 1)
  {
    if (v35)
    {
      memcpy(v33, v34, *(void *)(*(void *)(v15 - 8) + 64));
      goto LABEL_30;
    }
    *uint64_t v33 = *v34;
    v33[1] = v34[1];
    swift_bridgeObjectRetain();
    goto LABEL_29;
  }
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  uint64_t v43 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
  uint64_t v44 = *(int *)(v43 + 20);
  uint64_t v73 = (char *)v33 + v44;
  __dstb = (int *)v43;
  uint64_t v45 = (char *)v34 + v44;
  uint64_t v46 = type metadata accessor for Date();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  swift_bridgeObjectRetain();
  if (v48(v45, 1, v46))
  {
    uint64_t v49 = sub_10000A38C(&qword_10035E158);
    memcpy(v73, v45, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v73, v45, v46);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v73, 0, 1, v46);
  }
  uint64_t v50 = __dstb[6];
  uint64_t v51 = (void *)((char *)v33 + v50);
  uint64_t v52 = (void *)((char *)v34 + v50);
  void *v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  a3 = v78;
LABEL_30:
  *(unsigned char *)(a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  uint64_t v53 = a3[6];
  uint64_t v54 = *(void **)(a1 + v53);
  uint64_t v55 = *(void **)((char *)a2 + v53);
  *(void *)(a1 + v53) = v55;
  id v56 = v55;

  uint64_t v57 = a3[7];
  uint64_t v58 = (void *)(a1 + v57);
  uint64_t v59 = (uint64_t)a2 + v57;
  uint64_t v60 = *(void **)(a1 + v57);
  uint64_t v61 = *(void **)((char *)a2 + v57);
  if (v60 == (void *)1)
  {
    if (v61 != (void *)1)
    {
      *uint64_t v58 = v61;
      v58[1] = *(void *)(v59 + 8);
      id v62 = v61;
      if ((uint64_t *)a1 == a2) {
        goto LABEL_43;
      }
      goto LABEL_39;
    }
  }
  else
  {
    if (v61 != (void *)1)
    {
      *uint64_t v58 = v61;
      id v63 = v61;

      v58[1] = *(void *)(v59 + 8);
      if ((uint64_t *)a1 == a2) {
        goto LABEL_43;
      }
      goto LABEL_39;
    }
    sub_1001D2A44((uint64_t)v58);
  }
  *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
  if ((uint64_t *)a1 == a2) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v64 = a3[8];
  uint64_t v65 = (void *)(a1 + v64);
  id v66 = (uint64_t *)((char *)a2 + v64);
  sub_1001D48F4(a1 + v64, (uint64_t (*)(void))_s8CardInfoOMa);
  _s8CardInfoOMa();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v65 = *v66;
    v65[1] = v66[1];
    v65[2] = v66[2];
    v65[3] = v66[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v67 = type metadata accessor for UUID();
    uint64_t v68 = *(void (**)(void *, void *, uint64_t))(*(void *)(v67 - 8) + 16);
    v68(v65, v66, v67);
    uint64_t v69 = sub_10000A38C(&qword_10035E428);
    v68((void *)((char *)v65 + *(int *)(v69 + 48)), (void *)((char *)v66 + *(int *)(v69 + 48)), v67);
  }
  swift_storeEnumTagMultiPayload();
LABEL_43:
  *(void *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t sub_1001D2A44(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036C500);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001D2AA4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  id v9 = (_OWORD *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *uint64_t v8 = *v9;
    uint64_t v18 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v19 = (char *)v8 + v18;
    uint64_t v20 = (char *)v9 + v18;
    uint64_t v21 = type metadata accessor for Date();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = sub_10000A38C(&qword_10035E158);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
      goto LABEL_12;
    }
    *uint64_t v8 = *v9;
    uint64_t v12 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v13 = *(int *)(v12 + 20);
    uint64_t v49 = v12;
    __dst = (char *)v8 + v13;
    uint64_t v14 = (char *)v9 + v13;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_10000A38C(&qword_10035E158);
      memcpy(__dst, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(__dst, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    *(_OWORD *)((char *)v8 + *(int *)(v49 + 24)) = *(_OWORD *)((char *)v9 + *(int *)(v49 + 24));
  }
  swift_storeEnumTagMultiPayload();
LABEL_12:
  uint64_t v24 = *(int *)(v6 + 36);
  uint64_t v25 = (_OWORD *)(a1 + v24);
  uint64_t v26 = (_OWORD *)(a2 + v24);
  int v27 = swift_getEnumCaseMultiPayload();
  if (v27 == 2)
  {
    *uint64_t v25 = *v26;
    uint64_t v34 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    int v35 = (char *)v25 + v34;
    uint64_t v36 = (char *)v26 + v34;
    uint64_t v37 = type metadata accessor for Date();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = sub_10000A38C(&qword_10035E158);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
  }
  else
  {
    if (v27 != 1)
    {
      memcpy(v25, v26, *(void *)(*(void *)(v10 - 8) + 64));
      goto LABEL_23;
    }
    *uint64_t v25 = *v26;
    uint64_t v28 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v29 = *(int *)(v28 + 20);
    __dsta = (char *)v25 + v29;
    uint64_t v30 = (char *)v26 + v29;
    uint64_t v31 = type metadata accessor for Date();
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      uint64_t v33 = sub_10000A38C(&qword_10035E158);
      memcpy(__dsta, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(__dsta, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(__dsta, 0, 1, v31);
    }
    *(_OWORD *)((char *)v25 + *(int *)(v28 + 24)) = *(_OWORD *)((char *)v26 + *(int *)(v28 + 24));
  }
  swift_storeEnumTagMultiPayload();
LABEL_23:
  uint64_t v40 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v40) = *(void *)(a2 + v40);
  uint64_t v41 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v42 = (char *)(a1 + v41);
  uint64_t v43 = (char *)(a2 + v41);
  uint64_t v44 = _s8CardInfoOMa();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    uint64_t v45 = type metadata accessor for UUID();
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32);
    v46(v42, v43, v45);
    uint64_t v47 = sub_10000A38C(&qword_10035E428);
    v46(&v42[*(int *)(v47 + 48)], &v43[*(int *)(v47 + 48)], v45);
    swift_storeEnumTagMultiPayload();
  }
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1001D30D4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  uint64_t v7 = type metadata accessor for ActivityDisplayContext(0);
  if (a1 == a2) {
    goto LABEL_24;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(int *)(v7 + 32);
  uint64_t v10 = (_OWORD *)(a1 + v9);
  uint64_t v11 = (_OWORD *)(a2 + v9);
  sub_1001D48F4(a1 + v9, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  uint64_t v12 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *uint64_t v10 = *v11;
    uint64_t v20 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v21 = (char *)v10 + v20;
    uint64_t v22 = (char *)v11 + v20;
    uint64_t v23 = type metadata accessor for Date();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_10000A38C(&qword_10035E158);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
LABEL_12:
    swift_storeEnumTagMultiPayload();
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *uint64_t v10 = *v11;
    uint64_t v14 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v15 = *(int *)(v14 + 20);
    uint64_t v56 = v14;
    __dst = (char *)v10 + v15;
    uint64_t v16 = (char *)v11 + v15;
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_10000A38C(&qword_10035E158);
      memcpy(__dst, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(__dst, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    *(_OWORD *)((char *)v10 + *(int *)(v56 + 24)) = *(_OWORD *)((char *)v11 + *(int *)(v56 + 24));
    goto LABEL_12;
  }
  memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
LABEL_13:
  uint64_t v26 = *(int *)(v8 + 36);
  int v27 = (_OWORD *)(a1 + v26);
  uint64_t v28 = (_OWORD *)(a2 + v26);
  sub_1001D48F4(a1 + v26, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  int v29 = swift_getEnumCaseMultiPayload();
  if (v29 == 2)
  {
    *int v27 = *v28;
    uint64_t v36 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v37 = (char *)v27 + v36;
    uint64_t v38 = (char *)v28 + v36;
    uint64_t v39 = type metadata accessor for Date();
    uint64_t v40 = *(void *)(v39 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      uint64_t v41 = sub_10000A38C(&qword_10035E158);
      memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v37, v38, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
  }
  else
  {
    if (v29 != 1)
    {
      memcpy(v27, v28, *(void *)(*(void *)(v12 - 8) + 64));
      goto LABEL_24;
    }
    *int v27 = *v28;
    uint64_t v30 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v31 = *(int *)(v30 + 20);
    __dsta = (char *)v27 + v31;
    uint64_t v32 = (char *)v28 + v31;
    uint64_t v33 = type metadata accessor for Date();
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = sub_10000A38C(&qword_10035E158);
      memcpy(__dsta, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(__dsta, v32, v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(__dsta, 0, 1, v33);
    }
    *(_OWORD *)((char *)v27 + *(int *)(v30 + 24)) = *(_OWORD *)((char *)v28 + *(int *)(v30 + 24));
  }
  swift_storeEnumTagMultiPayload();
LABEL_24:
  uint64_t v42 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v43 = *(void **)(a1 + v42);
  *(void *)(a1 + v42) = *(void *)(a2 + v42);

  uint64_t v44 = a3[7];
  uint64_t v45 = (void *)(a1 + v44);
  uint64_t v46 = (void *)(a2 + v44);
  uint64_t v47 = *(void **)(a1 + v44);
  if (v47 != (void *)1)
  {
    if (*v46 != 1)
    {
      *uint64_t v45 = *v46;

      v45[1] = v46[1];
      if (a1 == a2) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
    sub_1001D2A44((uint64_t)v45);
  }
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
  if (a1 == a2) {
    goto LABEL_33;
  }
LABEL_30:
  uint64_t v48 = a3[8];
  uint64_t v49 = (char *)(a1 + v48);
  uint64_t v50 = (char *)(a2 + v48);
  sub_1001D48F4(a1 + v48, (uint64_t (*)(void))_s8CardInfoOMa);
  uint64_t v51 = _s8CardInfoOMa();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    uint64_t v52 = type metadata accessor for UUID();
    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32);
    v53(v49, v50, v52);
    uint64_t v54 = sub_10000A38C(&qword_10035E428);
    v53(&v49[*(int *)(v54 + 48)], &v50[*(int *)(v54 + 48)], v52);
    swift_storeEnumTagMultiPayload();
  }
LABEL_33:
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1001D37C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D37DC);
}

uint64_t sub_1001D37DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v12 = _s8CardInfoOMa();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 32);
    return v13(v15, a2, v14);
  }
}

uint64_t sub_1001D3914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D3928);
}

uint64_t sub_1001D3928(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = a2;
  }
  else
  {
    uint64_t v11 = _s8CardInfoOMa();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 32);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for ClassicCardViewServiceContext()
{
  uint64_t result = qword_10036C560;
  if (!qword_10036C560) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001D3AA0()
{
  uint64_t result = type metadata accessor for ActivityDisplayContext(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = _s8CardInfoOMa();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1001D3B90(char a1)
{
  unint64_t result = 0xD00000000000001DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x436C616974696E69;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 4:
      unint64_t result = 0x6F666E4964726163;
      break;
    case 5:
      unint64_t result = 0x7341656369766564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001D3C80(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000A38C(&qword_10036C5E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1001D4780();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for ActivityDisplayContext(0);
  sub_1001D49A8(&qword_10036C5E8, (void (*)(uint64_t))type metadata accessor for ActivityDisplayContext);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for ClassicCardViewServiceContext();
    LOBYTE(v11) = *(unsigned char *)(v3 + v9[5]);
    char v12 = 1;
    sub_1000D9E10();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v11 = *(void *)(v3 + v9[6]);
    char v12 = 2;
    sub_10000A38C(&qword_10036C140);
    sub_1001CB30C(&qword_10036C158);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + v9[7]);
    char v12 = 3;
    sub_1001D4954();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 4;
    _s8CardInfoOMa();
    sub_1001D49A8(&qword_10036C5F8, (void (*)(uint64_t))_s8CardInfoOMa);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v11 = *(void *)(v3 + v9[9]);
    char v12 = 5;
    type metadata accessor for PCActivityAssetType(0);
    sub_1001D49A8(&qword_100366118, type metadata accessor for PCActivityAssetType);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1001D3FF4(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v3 = _s8CardInfoOMa();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v6);
  uint64_t v22 = (uint64_t)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036C5B8);
  uint64_t v20 = *(void *)(v8 - 8);
  uint64_t v21 = v8;
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v11 = (int *)type metadata accessor for ClassicCardViewServiceContext();
  uint64_t v13 = *(int *)(__chkstk_darwin(v11) + 24);
  uint64_t v14 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = a1;
  uint64_t v25 = v13;
  *(void *)&v14[v13] = 0;
  sub_10000D6E4(a1, a1[3]);
  sub_1001D4780();
  uint64_t v23 = v10;
  uint64_t v15 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
  {
    uint64_t v18 = v25;
    sub_10000CC5C((uint64_t)v24);
  }
  else
  {
    uint64_t v16 = v20;
    LOBYTE(v27) = 0;
    sub_1001D49A8(&qword_10036C5C8, (void (*)(uint64_t))type metadata accessor for ActivityDisplayContext);
    uint64_t v17 = v21;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1001D4828(v22, (uint64_t)v14, type metadata accessor for ActivityDisplayContext);
    char v28 = 1;
    sub_1000D9DBC();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v14[v11[5]] = v27;
    sub_10000A38C(&qword_10036C140);
    char v28 = 2;
    sub_1001CB30C(&qword_10036C148);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v14[v25] = v27;
    char v28 = 3;
    sub_1001D47D4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v14[v11[7]] = v27;
    LOBYTE(v27) = 4;
    sub_1001D49A8(&qword_10036C5D8, (void (*)(uint64_t))_s8CardInfoOMa);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1001D4828((uint64_t)v5, (uint64_t)&v14[v11[8]], (uint64_t (*)(void))_s8CardInfoOMa);
    type metadata accessor for PCActivityAssetType(0);
    char v28 = 5;
    sub_1001D49A8(&qword_1003660E8, type metadata accessor for PCActivityAssetType);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v17);
    *(void *)&v14[v11[9]] = v27;
    sub_1001D4890((uint64_t)v14, v19);
    sub_10000CC5C((uint64_t)v24);
    sub_1001D48F4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ClassicCardViewServiceContext);
  }
}

unint64_t sub_1001D4608()
{
  return sub_1001D3B90(*v0);
}

uint64_t sub_1001D4610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001D4BFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001D4638(uint64_t a1)
{
  unint64_t v2 = sub_1001D4780();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D4674(uint64_t a1)
{
  unint64_t v2 = sub_1001D4780();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1001D46B0()
{
  return 0xD00000000000001DLL;
}

void sub_1001D46CC(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1001D46E4(void *a1)
{
  return sub_1001D3C80(a1);
}

uint64_t sub_1001D46FC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1001D49A8(&qword_10036C5A8, (void (*)(uint64_t))type metadata accessor for ClassicCardViewServiceContext);
  uint64_t result = sub_1001D49A8(&qword_10036C5B0, (void (*)(uint64_t))type metadata accessor for ClassicCardViewServiceContext);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1001D4780()
{
  unint64_t result = qword_10036C5C0;
  if (!qword_10036C5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C5C0);
  }
  return result;
}

unint64_t sub_1001D47D4()
{
  unint64_t result = qword_10036C5D0;
  if (!qword_10036C5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C5D0);
  }
  return result;
}

uint64_t sub_1001D4828(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001D4890(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClassicCardViewServiceContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D48F4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1001D4954()
{
  unint64_t result = qword_10036C5F0;
  if (!qword_10036C5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C5F0);
  }
  return result;
}

uint64_t sub_1001D49A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ClassicCardViewServiceContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001D4ABCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClassicCardViewServiceContext.CodingKeys()
{
  return &type metadata for ClassicCardViewServiceContext.CodingKeys;
}

unint64_t sub_1001D4AF8()
{
  unint64_t result = qword_10036C600;
  if (!qword_10036C600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C600);
  }
  return result;
}

unint64_t sub_1001D4B50()
{
  unint64_t result = qword_10036C608;
  if (!qword_10036C608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C608);
  }
  return result;
}

unint64_t sub_1001D4BA8()
{
  unint64_t result = qword_10036C610;
  if (!qword_10036C610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C610);
  }
  return result;
}

uint64_t sub_1001D4BFC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001DLL && a2 == 0x80000001002C3BC0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x436C616974696E69 && a2 == 0xEF65646F4D647261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001002C3BE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001002C3C00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F666E4964726163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7341656369766564 && a2 == 0xEF65707954746573)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

void *sub_1001D4EB0(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    unint64_t v7 = a2[2];
    if (v7 - 7 >= 2 && v7 >= 7)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v10 = a2[3];
      uint64_t v11 = a2[4];
      a1[2] = v7;
      a1[3] = v10;
      uint64_t v12 = a2[5];
      uint64_t v13 = a2[6];
      a1[4] = v11;
      a1[5] = v12;
      a1[6] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v8 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v8;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      a1[6] = a2[6];
    }
    uint64_t v14 = *(int *)(a3 + 20);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return a1;
}

uint64_t sub_1001D4FE8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) >= 9uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_1001D5078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 16);
  if (v6 - 7 >= 2 && v6 >= 7)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 24);
    uint64_t v9 = *(void *)(a2 + 32);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v8;
    uint64_t v10 = *(void *)(a2 + 40);
    uint64_t v11 = *(void *)(a2 + 48);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t sub_1001D5160(uint64_t a1, long long *a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *((void *)a2 + 2);
  unint64_t v8 = v7 - 7;
  if (v6 - 7 < 2)
  {
    if (v8 < 2) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v8 < 2)
  {
    sub_10014CAFC(a1);
LABEL_12:
    long long v13 = a2[1];
    long long v12 = a2[2];
    long long v14 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 16) = v13;
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)a1 = v14;
    goto LABEL_13;
  }
  if (v6 >= 7)
  {
    if (v7 >= 7)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    sub_10014CAA8(a1);
    goto LABEL_12;
  }
LABEL_7:
  if (v7 >= 7)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_13;
  }
LABEL_8:
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = v11;
  *(_OWORD *)a1 = v9;
LABEL_13:
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t)a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t sub_1001D5328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_1001D53B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 16);
  if (v6 - 7 >= 2)
  {
    unint64_t v7 = *(void *)(a2 + 16);
    if (v7 - 7 >= 2)
    {
      if (v6 >= 7)
      {
        if (v7 >= 7)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v7;
          swift_bridgeObjectRelease();
          uint64_t v14 = *(void *)(a2 + 32);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(void *)(a1 + 32) = v14;
          swift_bridgeObjectRelease();
          uint64_t v15 = *(void *)(a2 + 48);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          *(void *)(a1 + 48) = v15;
          swift_bridgeObjectRelease();
          goto LABEL_8;
        }
        sub_10014CAA8(a1);
      }
    }
    else
    {
      sub_10014CAFC(a1);
    }
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
LABEL_8:
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_1001D54C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D54D4);
}

uint64_t sub_1001D54D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483638)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 7;
    if (v5 < 0) {
      int v5 = -1;
    }
    if (v5 >= 2) {
      return (v5 - 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_1001D559C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D55B0);
}

uint64_t sub_1001D55B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483638)
  {
    *(void *)(result + 16) = (a2 + 8);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for PermissionToHandoff()
{
  uint64_t result = qword_10036C670;
  if (!qword_10036C670) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001D56A8()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for HandoffNotPermittedReason(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  if (v3 < 0xFFFFFFFF)
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v4 = *(void *)(a2 + 24);
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 16) = v3;
    *(void *)(a1 + 24) = v4;
    uint64_t v6 = *(void *)(a2 + 40);
    uint64_t v7 = *(void *)(a2 + 48);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for HandoffNotPermittedReason(void *a1, void *a2)
{
  unint64_t v4 = a2[2];
  if (a1[2] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v5 = *(_OWORD *)a2;
    long long v6 = *((_OWORD *)a2 + 1);
    long long v7 = *((_OWORD *)a2 + 2);
    a1[6] = a2[6];
    *((_OWORD *)a1 + 1) = v6;
    *((_OWORD *)a1 + 2) = v7;
    *(_OWORD *)a1 = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for HandoffNotPermittedReason(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    return a1;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HandoffNotPermittedReason(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFF9 && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 2147483641);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 6;
  if (v4 >= 8) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for HandoffNotPermittedReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF9)
  {
    *(void *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 2147483641;
    if (a3 >= 0x7FFFFFF9) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF9) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 6;
    }
  }
  return result;
}

uint64_t sub_1001D5A70(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double sub_1001D5A88(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 16) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffNotPermittedReason()
{
  return &type metadata for HandoffNotPermittedReason;
}

unint64_t sub_1001D5AC8()
{
  sub_1001D9FFC(v0, (uint64_t)v5);
  unint64_t result = 0x6961764120746F4ELL;
  switch(v6)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0x6F726E4520746F4ELL;
      break;
    case 2:
      unint64_t result = 0x7269615020746F4ELL;
      break;
    case 3:
      unint64_t result = 0x6F63655220746F4ELL;
      break;
    case 4:
      unint64_t result = 0x6F73655220746F4ELL;
      break;
    case 5:
      unint64_t result = 0x7070755320746F4ELL;
      break;
    case 6:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      uint64_t v2 = v7;
      unint64_t v3 = v8;
      swift_bridgeObjectRetain();
      v4._uint64_t countAndFlagsBits = v2;
      v4._object = v3;
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      unint64_t result = 0x203A726F727245;
      break;
  }
  return result;
}

uint64_t sub_1001D5C6C()
{
  sub_1001D9FFC(v0, (uint64_t)&v5);
  if (v6 == 7) {
    return 0x657474696D726570;
  }
  if (v6 == 8) {
    return 0x6E776F6E6B6E75;
  }
  sub_1001D9FFC(&v5, (uint64_t)v7);
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v4, "notPermitted(");
  v2._uint64_t countAndFlagsBits = sub_1001D6B88();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return v4[0];
}

uint64_t sub_1001D5D60(void *a1)
{
  uint64_t v19 = sub_10000A38C(&qword_10036C8B8);
  uint64_t v18 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v17 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000A38C(&qword_10036C8C0);
  uint64_t v20 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  Swift::String v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10036C8C8);
  uint64_t v16 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036C8D0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1001DB1EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1001D9FFC(v26, (uint64_t)&v23);
  if (v24 == 8)
  {
    v22[0] = 2;
    sub_1001DB240();
    uint64_t v12 = v17;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v12, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (v24 == 7)
  {
    v22[0] = 0;
    sub_1001DB33C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  sub_1001D9FFC(&v23, (uint64_t)v25);
  v22[0] = 1;
  sub_1001DB294();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  sub_1001D9FFC(v25, (uint64_t)v22);
  sub_1001DB390();
  uint64_t v14 = v21;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1001D6194(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000A38C(&qword_10036C6D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D6E4(a1, a1[3]);
  sub_1001D7E80();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = *((void *)v3 + 6);
  long long v10 = v3[1];
  long long v13 = *v3;
  long long v14 = v10;
  long long v15 = v3[2];
  uint64_t v16 = v9;
  v12[15] = 0;
  sub_1001D7FE8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for PermissionToHandoff();
    LOBYTE(v13) = 1;
    type metadata accessor for Date();
    sub_1001D803C(&qword_100366018, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001D6374@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036C6B8);
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t v23 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PermissionToHandoff();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1001D7E80();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000CC5C((uint64_t)a1);
  }
  uint64_t v12 = (uint64_t)v11;
  uint64_t v18 = v9;
  uint64_t v13 = v21;
  char v28 = 0;
  sub_1001D7ED4();
  uint64_t v14 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v15 = v27;
  long long v16 = v25;
  *(_OWORD *)uint64_t v12 = v24;
  *(_OWORD *)(v12 + 16) = v16;
  *(_OWORD *)(v12 + 32) = v26;
  *(void *)(v12 + 48) = v15;
  LOBYTE(v24) = 1;
  sub_1001D803C(&qword_100366008, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v12 + *(int *)(v18 + 20), v5, v13);
  sub_1001D7F28(v12, v20);
  sub_10000CC5C((uint64_t)a1);
  return sub_1001D7F8C(v12);
}

uint64_t sub_1001D66B8()
{
  uint64_t v1 = 0x696D726550746F6ELL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E776F6E6B6E75;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x657474696D726570;
  }
}

uint64_t sub_1001D6720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001D877C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001D6748(uint64_t a1)
{
  unint64_t v2 = sub_1001DB1EC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D6784(uint64_t a1)
{
  unint64_t v2 = sub_1001DB1EC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D67C0(uint64_t a1)
{
  unint64_t v2 = sub_1001DB294();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D67FC(uint64_t a1)
{
  unint64_t v2 = sub_1001DB294();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D6838(uint64_t a1)
{
  unint64_t v2 = sub_1001DB33C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D6874(uint64_t a1)
{
  unint64_t v2 = sub_1001DB33C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D68B0(uint64_t a1)
{
  unint64_t v2 = sub_1001DB240();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D68EC(uint64_t a1)
{
  unint64_t v2 = sub_1001DB240();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1001D6928@<X0>(uint64_t a1@<X8>)
{
  return sub_1001D7C58((void *(*)(void *__return_ptr))sub_1001D88F8, (uint64_t (*)(void *, uint64_t))sub_1001D9FFC, a1);
}

uint64_t sub_1001D6968(void *a1)
{
  sub_1001D9FFC(v1, (uint64_t)v4);
  return sub_1001D5D60(a1);
}

uint64_t sub_1001D69B8()
{
  sub_1001D9FFC(v0, (uint64_t)v2);
  return sub_1001D5C6C();
}

uint64_t sub_1001D69F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001D7D68(a1, a2, a3, a4, (void (*)(uint64_t, unsigned char *))sub_1001D9FFC, (uint64_t (*)(unsigned char *, unsigned char *))sub_1001D8084);
}

uint64_t sub_1001D6A1C()
{
  if (*v0) {
    return 0x6D617473656D6974;
  }
  else {
    return 0x737574617473;
  }
}

uint64_t sub_1001D6A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001D8F10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001D6A80(uint64_t a1)
{
  unint64_t v2 = sub_1001D7E80();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D6ABC(uint64_t a1)
{
  unint64_t v2 = sub_1001D7E80();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D6AF8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D6374(a1, a2);
}

uint64_t sub_1001D6B10(void *a1)
{
  return sub_1001D6194(a1);
}

uint64_t sub_1001D6B2C(uint64_t a1)
{
  _OWORD v5[3] = a1;
  unint64_t v2 = sub_10000D680(v5);
  sub_1001D7F28(v1, (uint64_t)v2);
  uint64_t v3 = sub_100271C38((uint64_t)v5);
  sub_10000CC5C((uint64_t)v5);
  return v3;
}

uint64_t sub_1001D6B88()
{
  sub_1001D9FFC(v0, (uint64_t)&v4);
  uint64_t result = 0x6C69617641746F6ELL;
  switch((uint64_t)v5)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0x6C6F726E45746F6ELL;
      break;
    case 2:
      uint64_t result = 0x6572696150746F6ELL;
      break;
    case 3:
      uint64_t result = 0x676F636552746F6ELL;
      break;
    case 4:
      uint64_t result = 0x6C6F736552746F6ELL;
      break;
    case 5:
      uint64_t result = 0x6F70707553746F6ELL;
      break;
    case 6:
      uint64_t result = 0x636F6C6E55746F6ELL;
      break;
    default:
      long long v8 = v4;
      long long v9 = v5;
      long long v10 = v6;
      uint64_t v11 = v7;
      v2._uint64_t countAndFlagsBits = 0x28726F727265;
      v2._object = (void *)0xE600000000000000;
      String.append(_:)(v2);
      _print_unlocked<A, B>(_:_:)();
      v3._uint64_t countAndFlagsBits = 41;
      v3._object = (void *)0xE100000000000000;
      String.append(_:)(v3);
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1001D6D70(void *a1)
{
  uint64_t v46 = sub_10000A38C(&qword_10036C770);
  uint64_t v45 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v44 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000A38C(&qword_10036C778);
  uint64_t v42 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v41 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000A38C(&qword_10036C780);
  uint64_t v39 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v38 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10000A38C(&qword_10036C788);
  uint64_t v36 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v35 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_10000A38C(&qword_10036C790);
  uint64_t v33 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v32 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10000A38C(&qword_10036C798);
  uint64_t v30 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  long long v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036C7A0);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_10036C7A8);
  uint64_t v29 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000A38C(&qword_10036C7B0);
  uint64_t v48 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  long long v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1001DA01C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1001D9FFC((long long *)v61[1], (uint64_t)&v53);
  switch((uint64_t)v54)
  {
    case 0:
      LOBYTE(v49) = 1;
      sub_1001DA268();
      uint64_t v17 = v47;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v9);
      goto LABEL_11;
    case 1:
      LOBYTE(v49) = 2;
      sub_1001DA214();
      uint64_t v17 = v47;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = *(void (**)(char *, void))(v30 + 8);
      uint64_t v21 = v8;
      uint64_t v22 = &v56;
      goto LABEL_10;
    case 2:
      LOBYTE(v49) = 3;
      sub_1001DA1C0();
      uint64_t v23 = v32;
      uint64_t v17 = v47;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = *(void (**)(char *, void))(v33 + 8);
      uint64_t v21 = v23;
      uint64_t v22 = (uint64_t *)&v58;
      goto LABEL_10;
    case 3:
      LOBYTE(v49) = 4;
      sub_1001DA16C();
      long long v24 = v35;
      uint64_t v17 = v47;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = *(void (**)(char *, void))(v36 + 8);
      uint64_t v21 = v24;
      uint64_t v22 = (uint64_t *)&v59 + 1;
      goto LABEL_10;
    case 4:
      LOBYTE(v49) = 5;
      sub_1001DA118();
      long long v25 = v38;
      uint64_t v17 = v47;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = *(void (**)(char *, void))(v39 + 8);
      uint64_t v21 = v25;
      uint64_t v22 = v61;
      goto LABEL_10;
    case 5:
      LOBYTE(v49) = 6;
      sub_1001DA0C4();
      long long v26 = v41;
      uint64_t v17 = v47;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = *(void (**)(char *, void))(v42 + 8);
      uint64_t v21 = v26;
      uint64_t v22 = &v62;
      goto LABEL_10;
    case 6:
      LOBYTE(v49) = 7;
      sub_1001DA070();
      uint64_t v27 = v44;
      uint64_t v17 = v47;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = *(void (**)(char *, void))(v45 + 8);
      uint64_t v21 = v27;
      uint64_t v22 = &v63;
LABEL_10:
      v20(v21, *(v22 - 32));
LABEL_11:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v16, v17);
      break;
    default:
      long long v57 = v53;
      long long v58 = v54;
      long long v59 = v55;
      uint64_t v60 = v56;
      LOBYTE(v49) = 0;
      sub_1001DA2BC();
      uint64_t v18 = v47;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v49 = v57;
      long long v50 = v58;
      long long v51 = v59;
      uint64_t v52 = v60;
      sub_1000D9C6C();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v12);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v16, v18);
      break;
  }
  return result;
}

uint64_t sub_1001D767C()
{
  uint64_t result = 0x726F727265;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6C69617641746F6ELL;
      break;
    case 2:
      uint64_t result = 0x6C6F726E45746F6ELL;
      break;
    case 3:
      uint64_t result = 0x6572696150746F6ELL;
      break;
    case 4:
      uint64_t result = 0x676F636552746F6ELL;
      break;
    case 5:
      uint64_t result = 0x6C6F736552746F6ELL;
      break;
    case 6:
      uint64_t result = 0x6F70707553746F6ELL;
      break;
    case 7:
      uint64_t result = 0x636F6C6E55746F6ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001D77B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001D9008(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001D77E0(uint64_t a1)
{
  unint64_t v2 = sub_1001DA01C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D781C(uint64_t a1)
{
  unint64_t v2 = sub_1001DA01C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D7858(uint64_t a1)
{
  unint64_t v2 = sub_1001DA2BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D7894(uint64_t a1)
{
  unint64_t v2 = sub_1001DA2BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D78D0(uint64_t a1)
{
  unint64_t v2 = sub_1001DA268();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D790C(uint64_t a1)
{
  unint64_t v2 = sub_1001DA268();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D7948(uint64_t a1)
{
  unint64_t v2 = sub_1001DA214();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D7984(uint64_t a1)
{
  unint64_t v2 = sub_1001DA214();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D79C0(uint64_t a1)
{
  unint64_t v2 = sub_1001DA1C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D79FC(uint64_t a1)
{
  unint64_t v2 = sub_1001DA1C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D7A38(uint64_t a1)
{
  unint64_t v2 = sub_1001DA16C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D7A74(uint64_t a1)
{
  unint64_t v2 = sub_1001DA16C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D7AB0(uint64_t a1)
{
  unint64_t v2 = sub_1001DA118();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D7AEC(uint64_t a1)
{
  unint64_t v2 = sub_1001DA118();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D7B28(uint64_t a1)
{
  unint64_t v2 = sub_1001DA0C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D7B64(uint64_t a1)
{
  unint64_t v2 = sub_1001DA0C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D7BA0(uint64_t a1)
{
  unint64_t v2 = sub_1001DA070();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D7BDC(uint64_t a1)
{
  unint64_t v2 = sub_1001DA070();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1001D7C18@<X0>(uint64_t a1@<X8>)
{
  return sub_1001D7C58((void *(*)(void *__return_ptr))sub_1001D93C4, (uint64_t (*)(void *, uint64_t))sub_1001D9FFC, a1);
}

void *sub_1001D7C58@<X0>(void *(*a1)(void *__return_ptr)@<X3>, uint64_t (*a2)(void *, uint64_t)@<X4>, uint64_t a3@<X8>)
{
  uint64_t result = a1(v7);
  if (!v3) {
    return (void *)a2(v7, a3);
  }
  return result;
}

uint64_t sub_1001D7CB4(void *a1)
{
  sub_1001D9FFC(v1, (uint64_t)v4);
  return sub_1001D6D70(a1);
}

uint64_t sub_1001D7D04()
{
  sub_1001D9FFC(v0, (uint64_t)v2);
  return sub_1001D6B88();
}

uint64_t sub_1001D7D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001D7D68(a1, a2, a3, a4, (void (*)(uint64_t, unsigned char *))sub_1001D9FFC, (uint64_t (*)(unsigned char *, unsigned char *))sub_1001D8550);
}

uint64_t sub_1001D7D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, unsigned char *), uint64_t (*a6)(unsigned char *, unsigned char *))
{
  a5(a1, v10);
  a5(a2, v11);
  return a6(v10, v11) & 1;
}

uint64_t sub_1001D7DD0(uint64_t a1)
{
  uint64_t result = sub_1001D803C(&qword_10036C6A8, (void (*)(uint64_t))type metadata accessor for PermissionToHandoff);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001D7E28(uint64_t a1)
{
  uint64_t result = sub_1001D803C(&qword_10036C6B0, (void (*)(uint64_t))type metadata accessor for PermissionToHandoff);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001D7E80()
{
  unint64_t result = qword_10036C6C0;
  if (!qword_10036C6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C6C0);
  }
  return result;
}

unint64_t sub_1001D7ED4()
{
  unint64_t result = qword_10036C6C8;
  if (!qword_10036C6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C6C8);
  }
  return result;
}

uint64_t sub_1001D7F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PermissionToHandoff();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D7F8C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PermissionToHandoff();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001D7FE8()
{
  unint64_t result = qword_10036C6D8;
  if (!qword_10036C6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C6D8);
  }
  return result;
}

uint64_t sub_1001D803C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001D8084(long long *a1, long long *a2)
{
  sub_1001D9FFC(a1, (uint64_t)&v24);
  if (v25 == 8)
  {
    sub_1001D9FFC(a2, (uint64_t)v27);
    return v28 == 8;
  }
  if (v25 != 7)
  {
    sub_1001D9FFC(&v24, (uint64_t)v26);
    sub_1001D9FFC(a2, (uint64_t)&v15);
    if ((unint64_t)(v16 - 7) >= 2)
    {
      sub_1001D9FFC(&v15, (uint64_t)v17);
      sub_1001D9FFC(v26, (uint64_t)v27);
      uint64_t v4 = v28;
      switch(v28)
      {
        case 0:
          sub_1001D9FFC(v17, (uint64_t)v18);
          return !v19;
        case 1:
          sub_1001D9FFC(v17, (uint64_t)v18);
          return v19 == 1;
        case 2:
          sub_1001D9FFC(v17, (uint64_t)v18);
          return v19 == 2;
        case 3:
          sub_1001D9FFC(v17, (uint64_t)v18);
          return v19 == 3;
        case 4:
          sub_1001D9FFC(v17, (uint64_t)v18);
          return v19 == 4;
        case 5:
          sub_1001D9FFC(v17, (uint64_t)v18);
          return v19 == 5;
        case 6:
          sub_1001D9FFC(v17, (uint64_t)v18);
          return v19 == 6;
        default:
          uint64_t v5 = v27[0];
          uint64_t v6 = v27[1];
          uint64_t v7 = v29;
          uint64_t v8 = v30;
          uint64_t v10 = v31;
          uint64_t v9 = v32;
          sub_1001D9FFC(v17, (uint64_t)v18);
          if (v19 < 7 || v5 != v18[0]) {
            return 0;
          }
          uint64_t v11 = v20;
          uint64_t v12 = v21;
          uint64_t v14 = v22;
          uint64_t v13 = v23;
          if ((v6 != v18[1] || v4 != v19) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return 0;
          }
          if ((v7 != v11 || v8 != v12) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return 0;
          }
          if (!v9) {
            return !v13;
          }
          if (v13 && (v10 == v14 && v9 == v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
            return 1;
          }
          break;
      }
    }
    return 0;
  }
  sub_1001D9FFC(a2, (uint64_t)v27);
  return v28 == 7;
}

uint64_t sub_1001D8340(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = a2[2];
  if (v4 == 8)
  {
    if (v5 != 8) {
      return 0;
    }
  }
  else
  {
    if (v4 != 7)
    {
      if (v5 - 7 >= 2)
      {
        switch(v4)
        {
          case 0:
            if (!v5) {
              goto LABEL_6;
            }
            return 0;
          case 1:
            if (v5 != 1) {
              return 0;
            }
            goto LABEL_6;
          case 2:
            if (v5 != 2) {
              return 0;
            }
            goto LABEL_6;
          case 3:
            if (v5 != 3) {
              return 0;
            }
            goto LABEL_6;
          case 4:
            if (v5 != 4) {
              return 0;
            }
            goto LABEL_6;
          case 5:
            if (v5 != 5) {
              return 0;
            }
            goto LABEL_6;
          case 6:
            if (v5 != 6) {
              return 0;
            }
            goto LABEL_6;
          default:
            if (v5 < 7 || *a1 != *a2) {
              return 0;
            }
            uint64_t v7 = a1[3];
            uint64_t v8 = a1[4];
            uint64_t v10 = a1[5];
            uint64_t v9 = a1[6];
            uint64_t v11 = a2[3];
            uint64_t v12 = a2[4];
            uint64_t v14 = a2[5];
            uint64_t v13 = a2[6];
            if ((a1[1] != a2[1] || v4 != v5) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              return 0;
            }
            if ((v7 != v11 || v8 != v12) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              return 0;
            }
            if (!v9)
            {
              if (v13) {
                return 0;
              }
              goto LABEL_6;
            }
            if (v13 && (v10 == v14 && v9 == v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
              goto LABEL_6;
            }
            break;
        }
      }
      return 0;
    }
    if (v5 != 7) {
      return 0;
    }
  }
LABEL_6:
  uint64_t v6 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);

  return static Date.== infix(_:_:)((char *)a1 + v6, (char *)a2 + v6);
}

BOOL sub_1001D8550(long long *a1, long long *a2)
{
  sub_1001D9FFC(a1, (uint64_t)v21);
  uint64_t v3 = v22;
  switch(v22)
  {
    case 0:
      sub_1001D9FFC(a2, (uint64_t)v15);
      return !v16;
    case 1:
      sub_1001D9FFC(a2, (uint64_t)v15);
      return v16 == 1;
    case 2:
      sub_1001D9FFC(a2, (uint64_t)v15);
      return v16 == 2;
    case 3:
      sub_1001D9FFC(a2, (uint64_t)v15);
      return v16 == 3;
    case 4:
      sub_1001D9FFC(a2, (uint64_t)v15);
      return v16 == 4;
    case 5:
      sub_1001D9FFC(a2, (uint64_t)v15);
      return v16 == 5;
    case 6:
      sub_1001D9FFC(a2, (uint64_t)v15);
      return v16 == 6;
    default:
      uint64_t v4 = v21[0];
      uint64_t v5 = v21[1];
      uint64_t v6 = v23;
      uint64_t v7 = v24;
      uint64_t v9 = v25;
      uint64_t v8 = v26;
      sub_1001D9FFC(a2, (uint64_t)v15);
      if (v16 < 7 || v4 != v15[0]) {
        return 0;
      }
      uint64_t v10 = v17;
      uint64_t v11 = v18;
      uint64_t v13 = v19;
      uint64_t v12 = v20;
      if ((v5 != v15[1] || v3 != v16) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0;
      }
      if ((v6 != v10 || v7 != v11) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0;
      }
      if (v8) {
        return v12 && (v9 == v13 && v8 == v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
      }
      return !v12;
  }
}

uint64_t sub_1001D877C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x657474696D726570 && a2 == 0xE900000000000064;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696D726550746F6ELL && a2 == 0xEC00000064657474 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1001D88F8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10036C870);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v37 = v3;
  uint64_t v38 = v4;
  __chkstk_darwin(v3);
  uint64_t v43 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036C878);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v39 = v6;
  uint64_t v40 = v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10036C880);
  uint64_t v42 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000A38C(&qword_10036C888);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1[3];
  uint64_t v44 = a1;
  sub_10000D6E4(a1, v17);
  sub_1001DB1EC();
  uint64_t v18 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18) {
    return sub_10000CC5C((uint64_t)v44);
  }
  uint64_t v20 = v42;
  uint64_t v19 = v43;
  uint64_t v36 = v10;
  uint64_t v52 = v14;
  uint64_t v21 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v21 + 16) != 1)
  {
    uint64_t v22 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v13;
    uint64_t v25 = v24;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v25 = &type metadata for PermissionToHandoff.Status;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v22 - 8) + 104))(v25, enum case for DecodingError.typeMismatch(_:), v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v23);
    return sub_10000CC5C((uint64_t)v44);
  }
  if (*(unsigned char *)(v21 + 32))
  {
    if (*(unsigned char *)(v21 + 32) == 1)
    {
      LOBYTE(v45) = 1;
      sub_1001DB294();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1001DB2E8();
      uint64_t v27 = v39;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v13);
      uint64_t v28 = v45;
      uint64_t v29 = v46;
      uint64_t v31 = v47;
      uint64_t v30 = v48;
      uint64_t v32 = v49;
      uint64_t v33 = v50;
      uint64_t v34 = v51;
    }
    else
    {
      LOBYTE(v45) = 2;
      sub_1001DB240();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v13);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v31 = 8;
    }
  }
  else
  {
    LOBYTE(v45) = 0;
    sub_1001DB33C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v36);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v13);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v31 = 7;
  }
  uint64_t result = sub_10000CC5C((uint64_t)v44);
  uint64_t v35 = v41;
  *uint64_t v41 = v28;
  v35[1] = v29;
  _OWORD v35[2] = v31;
  v35[3] = v30;
  v35[4] = v32;
  v35[5] = v33;
  v35[6] = v34;
  return result;
}

uint64_t sub_1001D8F10(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x737574617473 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001D9008(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726F727265 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C69617641746F6ELL && a2 == 0xEC000000656C6261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C6F726E45746F6ELL && a2 == 0xEB0000000064656CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6572696150746F6ELL && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x676F636552746F6ELL && a2 == 0xED000064657A696ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C6F736552746F6ELL && a2 == 0xEB00000000646576 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6F70707553746F6ELL && a2 == 0xEC00000064657472 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x636F6C6E55746F6ELL && a2 == 0xEB0000000064656BLL)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_1001D93C4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v74 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10036C6E0);
  uint64_t v69 = *(void *)(v3 - 8);
  uint64_t v70 = v3;
  __chkstk_darwin(v3);
  uint64_t v77 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10036C6E8);
  uint64_t v67 = *(void *)(v5 - 8);
  uint64_t v68 = v5;
  __chkstk_darwin(v5);
  uint64_t v76 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036C6F0);
  uint64_t v65 = *(void *)(v7 - 8);
  uint64_t v66 = v7;
  __chkstk_darwin(v7);
  uint64_t v75 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000A38C(&qword_10036C6F8);
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v71 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10000A38C(&qword_10036C700);
  uint64_t v61 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v73 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_10000A38C(&qword_10036C708);
  uint64_t v59 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v72 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_10000A38C(&qword_10036C710);
  uint64_t v57 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000A38C(&qword_10036C718);
  uint64_t v56 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000A38C(&qword_10036C720);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = a1[3];
  uint64_t v78 = a1;
  sub_10000D6E4(a1, v21);
  sub_1001DA01C();
  uint64_t v22 = v86;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v23 = v22;
  if (v22) {
    return sub_10000CC5C((uint64_t)v78);
  }
  long long v55 = v16;
  uint64_t v54 = v14;
  uint64_t v24 = v75;
  uint64_t v25 = v76;
  uint64_t v26 = v77;
  uint64_t v86 = v18;
  uint64_t v27 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v27 + 16) != 1)
  {
    uint64_t v37 = v20;
    uint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v39;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v40 = &type metadata for HandoffNotPermittedReason;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v38 - 8) + 104))(v40, enum case for DecodingError.typeMismatch(_:), v38);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v37, v17);
    return sub_10000CC5C((uint64_t)v78);
  }
  switch(*(unsigned char *)(v27 + 32))
  {
    case 1:
      uint64_t v41 = v86;
      LOBYTE(v79) = 1;
      sub_1001DA268();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v13, v58);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v20, v17);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v34 = 0;
      uint64_t v33 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      break;
    case 2:
      uint64_t v42 = v86;
      LOBYTE(v79) = 2;
      sub_1001DA214();
      uint64_t v43 = v72;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v43, v60);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v17);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v34 = 1;
      break;
    case 3:
      uint64_t v44 = v86;
      LOBYTE(v79) = 3;
      sub_1001DA1C0();
      uint64_t v45 = v73;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v45, v62);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v20, v17);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v34 = 2;
      break;
    case 4:
      uint64_t v46 = v86;
      LOBYTE(v79) = 4;
      sub_1001DA16C();
      uint64_t v47 = v71;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v47, v64);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v20, v17);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v34 = 3;
      break;
    case 5:
      uint64_t v48 = v86;
      LOBYTE(v79) = 5;
      sub_1001DA118();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v24, v66);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v17);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v34 = 4;
      break;
    case 6:
      uint64_t v49 = v86;
      LOBYTE(v79) = 6;
      sub_1001DA0C4();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v25, v68);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v20, v17);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v34 = 5;
      break;
    case 7:
      uint64_t v51 = v86;
      LOBYTE(v79) = 7;
      sub_1001DA070();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v26, v70);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v20, v17);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v34 = 6;
      break;
    default:
      uint64_t v28 = v86;
      LOBYTE(v79) = 0;
      sub_1001DA2BC();
      uint64_t v29 = v55;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1000D9A74();
      uint64_t v30 = v54;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v29, v30);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v17);
      uint64_t v31 = v79;
      uint64_t v32 = v80;
      uint64_t v34 = v81;
      uint64_t v33 = v82;
      uint64_t v35 = v83;
      uint64_t v36 = v84;
      uint64_t v23 = v85;
      break;
  }
  uint64_t v52 = v74;
  uint64_t result = sub_10000CC5C((uint64_t)v78);
  *uint64_t v52 = v31;
  v52[1] = v32;
  v52[2] = v34;
  v52[3] = v33;
  v52[4] = v35;
  v52[5] = v36;
  v52[6] = v23;
  return result;
}

uint64_t sub_1001D9FFC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[2];
  *(void *)(a2 + 48) = *((void *)a1 + 6);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

unint64_t sub_1001DA01C()
{
  unint64_t result = qword_10036C728;
  if (!qword_10036C728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C728);
  }
  return result;
}

unint64_t sub_1001DA070()
{
  unint64_t result = qword_10036C730;
  if (!qword_10036C730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C730);
  }
  return result;
}

unint64_t sub_1001DA0C4()
{
  unint64_t result = qword_10036C738;
  if (!qword_10036C738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C738);
  }
  return result;
}

unint64_t sub_1001DA118()
{
  unint64_t result = qword_10036C740;
  if (!qword_10036C740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C740);
  }
  return result;
}

unint64_t sub_1001DA16C()
{
  unint64_t result = qword_10036C748;
  if (!qword_10036C748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C748);
  }
  return result;
}

unint64_t sub_1001DA1C0()
{
  unint64_t result = qword_10036C750;
  if (!qword_10036C750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C750);
  }
  return result;
}

unint64_t sub_1001DA214()
{
  unint64_t result = qword_10036C758;
  if (!qword_10036C758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C758);
  }
  return result;
}

unint64_t sub_1001DA268()
{
  unint64_t result = qword_10036C760;
  if (!qword_10036C760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C760);
  }
  return result;
}

unint64_t sub_1001DA2BC()
{
  unint64_t result = qword_10036C768;
  if (!qword_10036C768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C768);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for HandoffNotPermittedReason.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001DA3DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffNotPermittedReason.CodingKeys()
{
  return &type metadata for HandoffNotPermittedReason.CodingKeys;
}

ValueMetadata *type metadata accessor for HandoffNotPermittedReason.ErrorCodingKeys()
{
  return &type metadata for HandoffNotPermittedReason.ErrorCodingKeys;
}

ValueMetadata *type metadata accessor for HandoffNotPermittedReason.NotAvailableCodingKeys()
{
  return &type metadata for HandoffNotPermittedReason.NotAvailableCodingKeys;
}

ValueMetadata *type metadata accessor for HandoffNotPermittedReason.NotEnrolledCodingKeys()
{
  return &type metadata for HandoffNotPermittedReason.NotEnrolledCodingKeys;
}

ValueMetadata *type metadata accessor for HandoffNotPermittedReason.NotPairedCodingKeys()
{
  return &type metadata for HandoffNotPermittedReason.NotPairedCodingKeys;
}

ValueMetadata *type metadata accessor for HandoffNotPermittedReason.NotRecognizedCodingKeys()
{
  return &type metadata for HandoffNotPermittedReason.NotRecognizedCodingKeys;
}

ValueMetadata *type metadata accessor for HandoffNotPermittedReason.NotResolvedCodingKeys()
{
  return &type metadata for HandoffNotPermittedReason.NotResolvedCodingKeys;
}

ValueMetadata *type metadata accessor for HandoffNotPermittedReason.NotSupportedCodingKeys()
{
  return &type metadata for HandoffNotPermittedReason.NotSupportedCodingKeys;
}

ValueMetadata *type metadata accessor for HandoffNotPermittedReason.NotUnlockedCodingKeys()
{
  return &type metadata for HandoffNotPermittedReason.NotUnlockedCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for PermissionToHandoff.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001DA564);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PermissionToHandoff.CodingKeys()
{
  return &type metadata for PermissionToHandoff.CodingKeys;
}

unint64_t destroy for TransferState(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 16);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for PermissionToHandoff.Status(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if ((v4 + 1) <= 7 && v4 == -1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 24);
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 16) = v3;
    *(void *)(a1 + 24) = v6;
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v9 = *(void *)(a2 + 48);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for PermissionToHandoff.Status(uint64_t a1, long long *a2)
{
  if (*(void *)(a1 + 16) >= 0xFFFFFFFFuLL) {
    LODWORD(v4) = -1;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 16);
  }
  unsigned int v5 = v4 + 1;
  unint64_t v6 = *((void *)a2 + 2);
  if (v6 >= 0xFFFFFFFF) {
    LODWORD(v6) = -1;
  }
  unsigned int v7 = v6 + 1;
  if (v5 > 7)
  {
    if (v7 <= 7 && v6 == -1) {
      goto LABEL_13;
    }
LABEL_18:
    long long v8 = *a2;
    long long v9 = a2[1];
    long long v10 = a2[2];
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)a1 = v8;
    return a1;
  }
  if (v7 > 7)
  {
    if (v5) {
      goto LABEL_18;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  if (!v5)
  {
    if (v6 == -1)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    goto LABEL_17;
  }
  if (v6 != -1) {
    goto LABEL_18;
  }
LABEL_13:
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithTake for PermissionToHandoff.Status(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  int v6 = v5 + 1;
  if ((v5 + 1) > 7) {
    goto LABEL_12;
  }
  unint64_t v7 = *(void *)(a2 + 16);
  LODWORD(v8) = -1;
  if (v7 < 0xFFFFFFFF) {
    uint64_t v8 = *(void *)(a2 + 16);
  }
  unsigned int v9 = v8 + 1;
  if (v9 > 7)
  {
    if (!v6) {
      goto LABEL_11;
    }
LABEL_12:
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    return a1;
  }
  if (v6) {
    goto LABEL_12;
  }
  if (v9)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PermissionToHandoff.Status(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF6 && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 2147483639);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 6;
  if (v4 < 8) {
    unsigned int v5 = 0;
  }
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PermissionToHandoff.Status(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF7)
  {
    *(void *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_DWORD *)unint64_t result = a2 - 2147483639;
    if (a3 >= 0x7FFFFFF7) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF7) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 8;
    }
  }
  return result;
}

uint64_t sub_1001DA994(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  unsigned int v2 = v1 + 1;
  unsigned int v3 = v1 - 6;
  if (v2 >= 8) {
    return v3;
  }
  else {
    return 0;
  }
}

double sub_1001DA9B8(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x7FFFFFF8)
  {
    *(void *)(a1 + 48) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_DWORD *)a1 = a2 - 2147483641;
  }
  else if (a2)
  {
    *(void *)(a1 + 16) = a2 + 6;
  }
  return result;
}

ValueMetadata *type metadata accessor for PermissionToHandoff.Status()
{
  return &type metadata for PermissionToHandoff.Status;
}

unint64_t sub_1001DAA08()
{
  unint64_t result = qword_10036C7B8;
  if (!qword_10036C7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C7B8);
  }
  return result;
}

unint64_t sub_1001DAA60()
{
  unint64_t result = qword_10036C7C0;
  if (!qword_10036C7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C7C0);
  }
  return result;
}

unint64_t sub_1001DAAB8()
{
  unint64_t result = qword_10036C7C8;
  if (!qword_10036C7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C7C8);
  }
  return result;
}

unint64_t sub_1001DAB10()
{
  unint64_t result = qword_10036C7D0;
  if (!qword_10036C7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C7D0);
  }
  return result;
}

unint64_t sub_1001DAB68()
{
  unint64_t result = qword_10036C7D8;
  if (!qword_10036C7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C7D8);
  }
  return result;
}

unint64_t sub_1001DABC0()
{
  unint64_t result = qword_10036C7E0;
  if (!qword_10036C7E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C7E0);
  }
  return result;
}

unint64_t sub_1001DAC18()
{
  unint64_t result = qword_10036C7E8;
  if (!qword_10036C7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C7E8);
  }
  return result;
}

unint64_t sub_1001DAC70()
{
  unint64_t result = qword_10036C7F0;
  if (!qword_10036C7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C7F0);
  }
  return result;
}

unint64_t sub_1001DACC8()
{
  unint64_t result = qword_10036C7F8;
  if (!qword_10036C7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C7F8);
  }
  return result;
}

unint64_t sub_1001DAD20()
{
  unint64_t result = qword_10036C800;
  if (!qword_10036C800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C800);
  }
  return result;
}

unint64_t sub_1001DAD78()
{
  unint64_t result = qword_10036C808;
  if (!qword_10036C808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C808);
  }
  return result;
}

unint64_t sub_1001DADD0()
{
  unint64_t result = qword_10036C810;
  if (!qword_10036C810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C810);
  }
  return result;
}

unint64_t sub_1001DAE28()
{
  unint64_t result = qword_10036C818;
  if (!qword_10036C818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C818);
  }
  return result;
}

unint64_t sub_1001DAE80()
{
  unint64_t result = qword_10036C820;
  if (!qword_10036C820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C820);
  }
  return result;
}

unint64_t sub_1001DAED8()
{
  unint64_t result = qword_10036C828;
  if (!qword_10036C828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C828);
  }
  return result;
}

unint64_t sub_1001DAF30()
{
  unint64_t result = qword_10036C830;
  if (!qword_10036C830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C830);
  }
  return result;
}

unint64_t sub_1001DAF88()
{
  unint64_t result = qword_10036C838;
  if (!qword_10036C838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C838);
  }
  return result;
}

unint64_t sub_1001DAFE0()
{
  unint64_t result = qword_10036C840;
  if (!qword_10036C840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C840);
  }
  return result;
}

unint64_t sub_1001DB038()
{
  unint64_t result = qword_10036C848;
  if (!qword_10036C848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C848);
  }
  return result;
}

unint64_t sub_1001DB090()
{
  unint64_t result = qword_10036C850;
  if (!qword_10036C850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C850);
  }
  return result;
}

unint64_t sub_1001DB0E8()
{
  unint64_t result = qword_10036C858;
  if (!qword_10036C858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C858);
  }
  return result;
}

unint64_t sub_1001DB140()
{
  unint64_t result = qword_10036C860;
  if (!qword_10036C860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C860);
  }
  return result;
}

unint64_t sub_1001DB198()
{
  unint64_t result = qword_10036C868;
  if (!qword_10036C868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C868);
  }
  return result;
}

unint64_t sub_1001DB1EC()
{
  unint64_t result = qword_10036C890;
  if (!qword_10036C890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C890);
  }
  return result;
}

unint64_t sub_1001DB240()
{
  unint64_t result = qword_10036C898;
  if (!qword_10036C898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C898);
  }
  return result;
}

unint64_t sub_1001DB294()
{
  unint64_t result = qword_10036C8A0;
  if (!qword_10036C8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C8A0);
  }
  return result;
}

unint64_t sub_1001DB2E8()
{
  unint64_t result = qword_10036C8A8;
  if (!qword_10036C8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C8A8);
  }
  return result;
}

unint64_t sub_1001DB33C()
{
  unint64_t result = qword_10036C8B0;
  if (!qword_10036C8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C8B0);
  }
  return result;
}

unint64_t sub_1001DB390()
{
  unint64_t result = qword_10036C8D8;
  if (!qword_10036C8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C8D8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PermissionToHandoff.Status.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001DB4B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PermissionToHandoff.Status.CodingKeys()
{
  return &type metadata for PermissionToHandoff.Status.CodingKeys;
}

ValueMetadata *type metadata accessor for PermissionToHandoff.Status.PermittedCodingKeys()
{
  return &type metadata for PermissionToHandoff.Status.PermittedCodingKeys;
}

unsigned char *_s17proximitycontrold25HandoffNotPermittedReasonO15ErrorCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001DB594);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PermissionToHandoff.Status.NotPermittedCodingKeys()
{
  return &type metadata for PermissionToHandoff.Status.NotPermittedCodingKeys;
}

ValueMetadata *type metadata accessor for PermissionToHandoff.Status.UnknownCodingKeys()
{
  return &type metadata for PermissionToHandoff.Status.UnknownCodingKeys;
}

unint64_t sub_1001DB5E0()
{
  unint64_t result = qword_10036C8E0;
  if (!qword_10036C8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C8E0);
  }
  return result;
}

unint64_t sub_1001DB638()
{
  unint64_t result = qword_10036C8E8;
  if (!qword_10036C8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C8E8);
  }
  return result;
}

unint64_t sub_1001DB690()
{
  unint64_t result = qword_10036C8F0;
  if (!qword_10036C8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C8F0);
  }
  return result;
}

unint64_t sub_1001DB6E8()
{
  unint64_t result = qword_10036C8F8;
  if (!qword_10036C8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C8F8);
  }
  return result;
}

unint64_t sub_1001DB740()
{
  unint64_t result = qword_10036C900;
  if (!qword_10036C900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C900);
  }
  return result;
}

unint64_t sub_1001DB798()
{
  unint64_t result = qword_10036C908;
  if (!qword_10036C908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C908);
  }
  return result;
}

unint64_t sub_1001DB7F0()
{
  unint64_t result = qword_10036C910;
  if (!qword_10036C910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C910);
  }
  return result;
}

unint64_t sub_1001DB848()
{
  unint64_t result = qword_10036C918;
  if (!qword_10036C918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C918);
  }
  return result;
}

unint64_t sub_1001DB8A0()
{
  unint64_t result = qword_10036C920;
  if (!qword_10036C920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C920);
  }
  return result;
}

unint64_t sub_1001DB8F8()
{
  unint64_t result = qword_10036C928;
  if (!qword_10036C928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036C928);
  }
  return result;
}

void sub_1001DB94C()
{
  uint64_t v1 = v0;
  id v2 = sub_1001F5994();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  uint64_t v4 = OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_published;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_published) & 1) == 0)
  {
    sub_1001DD4E8((uint64_t)v8);
    sub_10025F5B8();
    sub_1001DEBF4((uint64_t)v8);
    *(unsigned char *)(v1 + v4) = 1;
    unint64_t v7 = *(void (**)(uint64_t))(v1 + 16);
    if (!v7) {
      return;
    }
    goto LABEL_5;
  }
  id v5 = sub_1001F5994();
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 ulog:60 message:v6];

  unint64_t v7 = *(void (**)(uint64_t))(v1 + 16);
  if (v7)
  {
LABEL_5:
    swift_retain();
    v7(v1);
    sub_10000F088((uint64_t)v7);
  }
}

uint64_t sub_1001DBA88()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = sub_1001F5994();
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 ulog:40 message:v10];

  if (qword_10035A628 != -1) {
    swift_once();
  }
  uint64_t v11 = (void *)qword_1003ACB50;
  aBlock[4] = sub_1001DEC80;
  aBlock[5] = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_100330B60;
  long long v12 = _Block_copy(aBlock);
  id v13 = v11;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_1001DEC9C((unint64_t *)&qword_100363D50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10001683C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

void sub_1001DBD8C()
{
  uint64_t v1 = type metadata accessor for ExperienceEvent(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v21 - v6;
  uint64_t v8 = sub_10000A38C(&qword_10035F278);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v13 = (char *)v21 - v12;
  v21[4] = 0xD000000000000016;
  v21[5] = 0x80000001002C3D40;
  uint64_t v14 = v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_dismissEffectTrigger;
  swift_beginAccess();
  sub_10000D728(v14, (uint64_t)v13, &qword_10035F278);
  sub_10000D728((uint64_t)v13, (uint64_t)v11, &qword_10035F278);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 1, v1) == 1)
  {
    uint64_t v15 = (void *)0xE300000000000000;
    uint64_t v16 = 7104878;
  }
  else
  {
    sub_1001DEB90((uint64_t)v11, (uint64_t)v7);
    sub_10004D310((uint64_t)v7, (uint64_t)v5);
    uint64_t v16 = String.init<A>(describing:)();
    uint64_t v15 = v17;
    sub_10004D374((uint64_t)v7);
  }
  sub_10000D78C((uint64_t)v13, &qword_10035F278);
  v18._uint64_t countAndFlagsBits = v16;
  v18._object = v15;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  id v19 = sub_1001F5994();
  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 ulog:40 message:v20];
  swift_bridgeObjectRelease();
}

uint64_t sub_1001DC00C()
{
  uint64_t v1 = sub_10000A38C(&qword_1003653F8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10035F278);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ExperienceEvent(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t *)(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_dismissed);
  swift_beginAccess();
  uint64_t v12 = sub_10000A38C(&qword_10036C9A0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12)
    || !v11[1])
  {
    uint64_t v13 = v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_dismissEffectTrigger;
    swift_beginAccess();
    sub_10000D728(v13, (uint64_t)v6, &qword_10035F278);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_10000D78C((uint64_t)v6, &qword_10035F278);
      uint64_t v14 = v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_sessionEnded;
      swift_beginAccess();
      sub_10000D728(v14, (uint64_t)v3, &qword_1003653F8);
      uint64_t v15 = sub_10000A38C(&qword_1003652D0);
      LODWORD(v14) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v3, 1, v15);
      sub_10000D78C((uint64_t)v3, &qword_1003653F8);
      if (v14 == 1) {
        return 0;
      }
      else {
        return 0x206E6F6973736553;
      }
    }
    else
    {
      sub_1001DEB90((uint64_t)v6, (uint64_t)v10);
      uint64_t v16 = sub_10025B6EC();
      sub_10004D374((uint64_t)v10);
    }
  }
  else
  {
    uint64_t v16 = *v11;
    swift_bridgeObjectRetain();
  }
  return v16;
}

uint64_t sub_1001DC318()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_remoteAlertFailed;
  swift_beginAccess();
  uint64_t v2 = sub_10000A38C((uint64_t *)&unk_1003652E0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2)) {
    goto LABEL_5;
  }
  uint64_t v3 = (void *)(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardFailed);
  swift_beginAccess();
  uint64_t v4 = sub_10000A38C(&qword_10036C990);
  uint64_t v5 = 0;
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4))
  {
    if (!*v3) {
      return 0;
    }
LABEL_5:
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v6 = (void *)sub_100117140(v8);
    [v6 code];

    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    swift_errorRelease();
  }
  return v5;
}

uint64_t sub_1001DC4A4(uint64_t *a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v51 = a4;
  uint64_t v47 = a1;
  uint64_t v7 = sub_10000A38C(a1);
  uint64_t v52 = *(void *)(v7 - 8);
  uint64_t v53 = v7;
  __chkstk_darwin(v7);
  uint64_t v45 = (uint64_t)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10035E158);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v48 = (char *)&v43 - v13;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v46 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v19 = (char *)&v43 - v18;
  uint64_t v49 = a2;
  uint64_t v20 = sub_10000A38C(a2);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *a3;
  uint64_t v50 = v4;
  uint64_t v25 = v4 + v24;
  swift_beginAccess();
  uint64_t v26 = 1;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v25, 1, v20)) {
    return 0;
  }
  uint64_t v43 = v17;
  uint64_t v44 = v12;
  uint64_t v28 = v47;
  sub_10000D728(v25, (uint64_t)v23, v49);
  uint64_t v29 = v46;
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  v30(v19, v23, v14);
  uint64_t v31 = v50 + *v51;
  swift_beginAccess();
  int v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v31, 1, v53);
  uint64_t v33 = (uint64_t)v48;
  uint64_t v34 = v29;
  if (!v32)
  {
    uint64_t v35 = v31;
    uint64_t v36 = v45;
    sub_10000D728(v35, v45, v28);
    v30((char *)v33, (char *)v36, v14);
    uint64_t v26 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v33, v26, 1, v14);
  uint64_t v37 = (uint64_t)v44;
  sub_10000D728(v33, (uint64_t)v44, &qword_10035E158);
  int v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v37, 1, v14);
  uint64_t v39 = v43;
  if (v38 == 1)
  {
    sub_10000D78C(v37, &qword_10035E158);
    uint64_t v27 = 0;
  }
  else
  {
    v30(v43, (char *)v37, v14);
    Date.timeIntervalSince(_:)();
    uint64_t v41 = v40;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v39, v14);
    uint64_t v27 = v41;
  }
  sub_10000D78C(v33, &qword_10035E158);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v14);
  return v27;
}

uint64_t sub_1001DC8F0()
{
  uint64_t v1 = sub_10000A38C(&qword_10035E158);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v43 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v46 = (char *)&v39 - v4;
  uint64_t v45 = type metadata accessor for Date();
  uint64_t v42 = *(void *)(v45 - 8);
  uint64_t v5 = __chkstk_darwin(v45);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v39 - v8;
  uint64_t v10 = sub_10000A38C(&qword_1003652D0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t v44 = v0;
  uint64_t v17 = v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_remoteAlertActivated;
  swift_beginAccess();
  uint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v18(v17, 1, v10)) {
    return 0;
  }
  uint64_t v39 = v14;
  uint64_t v41 = v7;
  uint64_t v20 = (uint64_t)v43;
  sub_10000D728(v17, (uint64_t)v16, &qword_1003652D0);
  uint64_t v21 = v42;
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
  uint64_t v40 = v9;
  uint64_t v23 = v9;
  uint64_t v24 = v45;
  uint64_t v25 = v22;
  v22((uint64_t)v23, (uint64_t)v16, v45);
  uint64_t v26 = v44 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_remoteAlertRequested;
  swift_beginAccess();
  uint64_t v27 = 1;
  unsigned int v28 = v18(v26, 1, v10);
  uint64_t v29 = (uint64_t)v46;
  if (!v28)
  {
    uint64_t v30 = v26;
    uint64_t v31 = (uint64_t)v39;
    sub_10000D728(v30, (uint64_t)v39, &qword_1003652D0);
    v25(v29, v31, v24);
    uint64_t v27 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v29, v27, 1, v24);
  sub_10000D728(v29, v20, &qword_10035E158);
  int v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v20, 1, v24);
  uint64_t v33 = v41;
  if (v32 == 1)
  {
    sub_10000D78C(v20, &qword_10035E158);
    uint64_t v19 = 0;
    uint64_t v37 = v21;
    uint64_t v34 = v40;
  }
  else
  {
    v25((uint64_t)v41, v20, v24);
    uint64_t v34 = v40;
    Date.timeIntervalSince(_:)();
    uint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v33, v24);
    uint64_t v19 = v36;
    uint64_t v37 = v21;
  }
  sub_10000D78C(v29, &qword_10035E158);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v24);
  return v19;
}

uint64_t sub_1001DCD0C()
{
  uint64_t v1 = sub_10000A38C(&qword_10035E158);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v41 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v44 = (char *)&v38 - v4;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v42 = *(void *)(v5 - 8);
  uint64_t v43 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = sub_10000A38C(&qword_1003652D0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v38 - v16;
  uint64_t v45 = v0;
  uint64_t v18 = v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_xpcConnected;
  uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v19(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_xpcConnected, 1, v11)) {
    return 0;
  }
  int v38 = v15;
  uint64_t v40 = v8;
  uint64_t v21 = (uint64_t)v41;
  sub_10000D728(v18, (uint64_t)v17, &qword_1003652D0);
  uint64_t v22 = v42;
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
  uint64_t v39 = v10;
  uint64_t v24 = v10;
  uint64_t v25 = v43;
  v23(v24, v17, v43);
  uint64_t v26 = v45 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_xpcRequested;
  uint64_t v27 = 1;
  unsigned int v28 = v19(v45 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_xpcRequested, 1, v11);
  uint64_t v29 = (uint64_t)v44;
  if (!v28)
  {
    uint64_t v30 = (uint64_t)v38;
    sub_10000D728(v26, (uint64_t)v38, &qword_1003652D0);
    v23((char *)v29, (char *)v30, v25);
    uint64_t v27 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v29, v27, 1, v25);
  sub_10000D728(v29, v21, &qword_10035E158);
  int v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v21, 1, v25);
  int v32 = v40;
  if (v31 == 1)
  {
    sub_10000D78C(v21, &qword_10035E158);
    uint64_t v20 = 0;
    uint64_t v36 = v22;
    uint64_t v33 = v39;
  }
  else
  {
    v23(v40, (char *)v21, v25);
    uint64_t v33 = v39;
    Date.timeIntervalSince(_:)();
    uint64_t v35 = v34;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v32, v25);
    uint64_t v20 = v35;
    uint64_t v36 = v22;
  }
  sub_10000D78C(v29, &qword_10035E158);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v25);
  return v20;
}

uint64_t sub_1001DD0FC()
{
  uint64_t v1 = sub_10000A38C(&qword_10036C980);
  uint64_t v32 = *(void *)(v1 - 8);
  uint64_t v33 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10035E158);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v30 = (char *)&v28 - v8;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_dismissed;
  swift_beginAccess();
  uint64_t v16 = sub_10000A38C(&qword_10036C9A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16)) {
    return 0;
  }
  uint64_t v29 = v12;
  uint64_t v18 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v14, v15 + *(int *)(v16 + 28), v9);
  uint64_t v19 = v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardPresenting;
  swift_beginAccess();
  uint64_t v20 = 1;
  int v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v19, 1, v33);
  uint64_t v22 = (uint64_t)v30;
  if (!v21)
  {
    sub_10000D728(v19, (uint64_t)v3, &qword_10036C980);
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v22, v3, v9);
    uint64_t v20 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v22, v20, 1, v9);
  sub_10000D728(v22, (uint64_t)v7, &qword_10035E158);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v7, 1, v9);
  uint64_t v24 = v29;
  if (v23 == 1)
  {
    sub_10000D78C((uint64_t)v7, &qword_10035E158);
    uint64_t v17 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v29, v7, v9);
    Date.timeIntervalSince(_:)();
    uint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v9);
    uint64_t v17 = v26;
  }
  sub_10000D78C(v22, &qword_10035E158);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v9);
  return v17;
}

void sub_1001DD4E8(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = sub_10000A38C(&qword_10036CAC0);
  __chkstk_darwin(v5 - 8);
  uint64_t v121 = (uint64_t)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_1003653F0);
  __chkstk_darwin(v7 - 8);
  uint64_t v122 = (uint64_t)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036C980);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v141 = 0xD000000000000015;
  unint64_t v142 = 0x80000001002BD810;
  v143[3] = v4;
  v143[0] = v2;
  swift_retain();
  uint64_t v13 = sub_10002834C(v143);
  uint64_t v15 = v14;
  sub_10000CC5C((uint64_t)v143);
  v16._uint64_t countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  id v17 = sub_1001F5994();
  swift_bridgeObjectRetain();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 ulog:40 message:v18];
  swift_bridgeObjectRelease();

  uint64_t v19 = (uint64_t)v2 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardPresenting;
  swift_beginAccess();
  double v20 = 0.0;
  LODWORD(v126) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v19, 1, v9);
  if (!v126)
  {
    sub_10000D728(v19, (uint64_t)v12, &qword_10036C980);
    sub_10000A38C(&qword_10036CAB8);
    Date.timeIntervalSince(_:)();
    double v20 = v21;
    uint64_t v22 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v12, v22);
  }
  uint64_t v23 = sub_1001DC4A4(&qword_10036C980, &qword_1003652D0, &OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardLoaded, &OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardRequested);
  int v25 = v24;
  uint64_t v26 = sub_1001DC4A4(&qword_1003652D0, &qword_10036C980, &OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardPresenting, &OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardLoaded);
  int v125 = v27;
  uint64_t v28 = sub_1001DC8F0();
  int v124 = v29;
  int v117 = v25;
  if (v25)
  {
    uint64_t v30 = (double *)_swiftEmptyArrayStorage;
    int v31 = v126;
    if (v125) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v30 = (double *)sub_1000895B4(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v33 = *((void *)v30 + 2);
    unint64_t v32 = *((void *)v30 + 3);
    if (v33 >= v32 >> 1) {
      uint64_t v30 = (double *)sub_1000895B4((void *)(v32 > 1), v33 + 1, 1, v30);
    }
    int v31 = v126;
    *((void *)v30 + 2) = v33 + 1;
    *(void *)&v30[v33 + 4] = v23;
    if (v125)
    {
LABEL_5:
      if (v124) {
        goto LABEL_6;
      }
LABEL_16:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v30 = (double *)sub_1000895B4(0, *((void *)v30 + 2) + 1, 1, v30);
      }
      unint64_t v37 = *((void *)v30 + 2);
      unint64_t v36 = *((void *)v30 + 3);
      if (v37 >= v36 >> 1) {
        uint64_t v30 = (double *)sub_1000895B4((void *)(v36 > 1), v37 + 1, 1, v30);
      }
      *((void *)v30 + 2) = v37 + 1;
      *(void *)&v30[v37 + 4] = v28;
      if (v37 != 2) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v30 = (double *)sub_1000895B4(0, *((void *)v30 + 2) + 1, 1, v30);
  }
  unint64_t v35 = *((void *)v30 + 2);
  unint64_t v34 = *((void *)v30 + 3);
  if (v35 >= v34 >> 1) {
    uint64_t v30 = (double *)sub_1000895B4((void *)(v34 > 1), v35 + 1, 1, v30);
  }
  *((void *)v30 + 2) = v35 + 1;
  *(void *)&v30[v35 + 4] = v26;
  if ((v124 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_6:
  if (*((void *)v30 + 2) != 3) {
    goto LABEL_22;
  }
LABEL_21:
  if (v31)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    int v116 = 1;
    double v38 = 0.0;
    goto LABEL_23;
  }
  double v91 = v30[4] + 0.0 + v30[5];
  double v92 = v30[6];
  swift_bridgeObjectRelease();
  int v116 = 0;
  double v38 = v20 - (v91 + v92);
LABEL_23:
  if (qword_10035A590 != -1) {
    swift_once();
  }
  sub_100141858();
  uint64_t v39 = sub_1001426E0(1);
  uint64_t v114 = 0;
  uint64_t v115 = v39;
  swift_release();
  sub_100141858();
  uint64_t v40 = sub_1001426E0(28);
  uint64_t v112 = 0;
  uint64_t v113 = v40;
  swift_release();
  uint64_t v110 = v2[4];
  sub_100141858();
  uint64_t v41 = sub_1001426E0(7);
  uint64_t v119 = v26;
  uint64_t v120 = v23;
  uint64_t v118 = v28;
  uint64_t v107 = 0;
  uint64_t v111 = v41;
  swift_release();
  uint64_t v42 = sub_1001DC00C();
  uint64_t v108 = v43;
  uint64_t v109 = v42;
  uint64_t v44 = (uint64_t)v2 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_remoteAlertFailed;
  swift_beginAccess();
  uint64_t v45 = v122;
  sub_10000D728(v44, v122, &qword_1003653F0);
  uint64_t v46 = sub_10000A38C((uint64_t *)&unk_1003652E0);
  uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48);
  BOOL v123 = 1;
  int v48 = v47(v45, 1, v46);
  sub_10000D78C(v45, &qword_1003653F0);
  if (v48 == 1)
  {
    uint64_t v49 = (uint64_t)v2 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardFailed;
    swift_beginAccess();
    uint64_t v50 = v49;
    uint64_t v51 = v121;
    sub_10000D728(v50, v121, &qword_10036CAC0);
    uint64_t v52 = sub_10000A38C(&qword_10036C990);
    BOOL v123 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48))(v51, 1, v52) != 1;
    sub_10000D78C(v51, &qword_10036CAC0);
  }
  uint64_t v53 = sub_1001DC318();
  uint64_t v105 = v54;
  uint64_t v106 = v53;
  if (!v47(v44, 1, v46))
  {
    objc_super v104 = v47;
    goto LABEL_32;
  }
  long long v55 = (void *)((char *)v2 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardFailed);
  swift_beginAccess();
  uint64_t v56 = sub_10000A38C(&qword_10036C990);
  int v57 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 48))(v55, 1, v56);
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  if (v57) {
    goto LABEL_33;
  }
  if (*v55)
  {
    objc_super v104 = v47;
LABEL_32:
    swift_getErrorValue();
    uint64_t v58 = v127;
    swift_errorRetain();
    uint64_t v59 = (void *)sub_100117140(v58);
    swift_errorRelease();
    id v60 = [v59 domain];

    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v121 = v62;
    uint64_t v122 = v61;

    uint64_t v47 = v104;
    goto LABEL_33;
  }
  uint64_t v121 = 0;
  uint64_t v122 = 0;
LABEL_33:
  if (v47(v44, 1, v46))
  {
    uint64_t v63 = (void *)((char *)v2 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardFailed);
    swift_beginAccess();
    uint64_t v64 = sub_10000A38C(&qword_10036C990);
    int v65 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v64 - 8) + 48))(v63, 1, v64);
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    int v68 = v126;
    uint64_t v69 = (void *)&unk_1003AC000;
    if (v65) {
      goto LABEL_39;
    }
    if (!*v63)
    {
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      goto LABEL_39;
    }
  }
  else
  {
    int v68 = v126;
    uint64_t v69 = &unk_1003AC000;
  }
  swift_getErrorValue();
  swift_errorRetain();
  uint64_t v66 = Error.localizedDescription.getter();
  uint64_t v67 = v70;
  swift_errorRelease();
LABEL_39:
  uint64_t v103 = v67;
  objc_super v104 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v66;
  int v100 = *((unsigned __int8 *)v2 + 56);
  uint64_t v71 = v2[6];
  uint64_t v99 = v2[5];
  swift_bridgeObjectRetain();
  uint64_t v102 = sub_1001DCD0C();
  int v95 = v72;
  uint64_t v101 = sub_1001DD0FC();
  int v94 = v73;
  uint64_t v74 = (char *)v2 + v69[337];
  uint64_t v75 = &v74[*(int *)(sub_10000A38C(&qword_10036CAB8) + 32)];
  int v98 = *(_DWORD *)v75;
  char v76 = v75[4];
  uint64_t v77 = sub_10025B6EC();
  uint64_t v96 = v78;
  uint64_t v97 = v77;
  if (qword_10035A518 != -1) {
    swift_once();
  }
  BOOL v79 = v107 != 0;
  BOOL v80 = v112 != 0;
  BOOL v81 = v114 != 0;
  BOOL v82 = v68 != 0;
  id v83 = *(id *)(qword_1003AC748 + 80);
  uint64_t v126 = sub_1001003AC();
  char v85 = v84;

  BOOL v137 = v79;
  char v135 = v116;
  BOOL v132 = v82;
  char v129 = v76;
  *(void *)a1 = v115;
  *(void *)(a1 + 16) = v113;
  *(void *)(a1 + 32) = v110;
  BOOL v140 = v81;
  BOOL v139 = v80;
  char v138 = 0;
  char v136 = v117 & 1;
  char v134 = v125 & 1;
  char v133 = v124 & 1;
  char v131 = v95 & 1;
  char v130 = v94 & 1;
  char v128 = v85 & 1;
  *(unsigned char *)(a1 + 8) = v81;
  *(unsigned char *)(a1 + 24) = v80;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = v111;
  *(unsigned char *)(a1 + 56) = v137;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v86 = v108;
  *(void *)(a1 + 80) = v109;
  *(void *)(a1 + 88) = v86;
  *(unsigned char *)(a1 + 96) = v123;
  uint64_t v87 = v105;
  *(void *)(a1 + 104) = v106;
  *(void *)(a1 + 112) = v87;
  uint64_t v88 = v121;
  *(void *)(a1 + 120) = v122;
  *(void *)(a1 + 128) = v88;
  uint64_t v89 = v103;
  *(void *)(a1 + 136) = v104;
  *(void *)(a1 + 144) = v89;
  *(unsigned char *)(a1 + 152) = v100;
  *(void *)(a1 + 160) = v99;
  *(void *)(a1 + 168) = v71;
  *(void *)(a1 + 176) = v120;
  *(unsigned char *)(a1 + 184) = v136;
  *(double *)(a1 + 192) = v38;
  *(unsigned char *)(a1 + 200) = v135;
  *(void *)(a1 + 208) = v119;
  *(unsigned char *)(a1 + 216) = v134;
  *(void *)(a1 + 224) = v118;
  *(unsigned char *)(a1 + 232) = v133;
  *(double *)(a1 + 240) = v20;
  *(unsigned char *)(a1 + 248) = v132;
  *(void *)(a1 + 256) = v102;
  *(unsigned char *)(a1 + 264) = v131;
  *(void *)(a1 + 272) = v101;
  *(unsigned char *)(a1 + 280) = v130;
  *(_DWORD *)(a1 + 284) = v98;
  *(unsigned char *)(a1 + 288) = v129;
  uint64_t v90 = v96;
  *(void *)(a1 + 296) = v97;
  *(void *)(a1 + 304) = v90;
  *(void *)(a1 + 312) = v126;
  *(unsigned char *)(a1 + 320) = v128;
}

uint64_t sub_1001DE0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v11 = *(void *)v8;
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  uint64_t v12 = v8 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_remoteAlertRequested;
  uint64_t v34 = v11;
  uint64_t v13 = sub_10000A38C(&qword_1003652D0);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  v14(v8 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_remoteAlertActivated, 1, 1, v13);
  uint64_t v15 = v8 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_remoteAlertFailed;
  uint64_t v16 = sub_10000A38C((uint64_t *)&unk_1003652E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = v8 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardRequested;
  uint64_t v18 = sub_10000A38C(&qword_10036C980);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  v19(v17, 1, 1, v18);
  v14(v8 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardLoaded, 1, 1, v13);
  v19(v8 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardPresenting, 1, 1, v18);
  uint64_t v20 = a7;
  uint64_t v21 = v8 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardFailed;
  uint64_t v22 = sub_10000A38C(&qword_10036C990);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v14(v8 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_xpcRequested, 1, 1, v13);
  v14(v8 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_xpcConnected, 1, 1, v13);
  uint64_t v23 = v8 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_dismissed;
  uint64_t v24 = sub_10000A38C(&qword_10036C9A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v14(v8 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_sessionEnded, 1, 1, v13);
  uint64_t v25 = v8 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_dismissEffectTrigger;
  uint64_t v26 = type metadata accessor for ExperienceEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  *(unsigned char *)(v8 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_published) = 0;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v34, (uint64_t)&off_100330B28);
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  *(void *)(v8 + 48) = a3;
  *(unsigned char *)(v8 + 56) = a5;
  uint64_t v27 = v8 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_presentEffect;
  sub_10004D310(v20, v8 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_presentEffect);
  uint64_t v28 = sub_10000A38C(&qword_10036CAB8);
  uint64_t v29 = v27 + *(int *)(v28 + 28);
  uint64_t v30 = type metadata accessor for Date();
  uint64_t v31 = *(void *)(v30 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v29, a4, v30);
  uint64_t v32 = v27 + *(int *)(v28 + 32);
  *(_DWORD *)uint64_t v32 = a6;
  *(unsigned char *)(v32 + 4) = BYTE4(a6) & 1;
  if (qword_10035A590 != -1) {
    swift_once();
  }
  sub_100141858();
  sub_10014215C();
  swift_release();
  sub_10004D374(v20);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a4, v30);
  return v8;
}

uint64_t sub_1001DE558()
{
  id v1 = sub_1001F5994();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  sub_10000F088(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_presentEffect, &qword_10036CAB8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_remoteAlertRequested, &qword_1003653F8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_remoteAlertActivated, &qword_1003653F8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_remoteAlertFailed, &qword_1003653F0);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardRequested, &qword_10036CAC8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardLoaded, &qword_1003653F8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardPresenting, &qword_10036CAC8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardFailed, &qword_10036CAC0);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_xpcRequested, &qword_1003653F8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_xpcConnected, &qword_1003653F8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_dismissed, &qword_10036CAD0);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_sessionEnded, &qword_1003653F8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_dismissEffectTrigger, &qword_10035F278);
  return v0;
}

uint64_t sub_1001DE6F8()
{
  sub_1001DE558();

  return swift_deallocClassInstance();
}

uint64_t sub_1001DE750()
{
  return type metadata accessor for CardPresentationRecord();
}

uint64_t type metadata accessor for CardPresentationRecord()
{
  uint64_t result = qword_10036C960;
  if (!qword_10036C960) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001DE7A4()
{
  sub_1001DEA54(319, &qword_10036C970, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StateUpdateWithDistance);
  if (v0 <= 0x3F)
  {
    sub_1000E4A6C(319, &qword_1003652C8, &qword_1003652D0);
    if (v1 <= 0x3F)
    {
      sub_1000E4A6C(319, &qword_1003652D8, (uint64_t *)&unk_1003652E0);
      if (v2 <= 0x3F)
      {
        sub_1000E4A6C(319, &qword_10036C978, &qword_10036C980);
        if (v3 <= 0x3F)
        {
          sub_1000E4A6C(319, &qword_10036C988, &qword_10036C990);
          if (v4 <= 0x3F)
          {
            sub_1000E4A6C(319, &qword_10036C998, &qword_10036C9A0);
            if (v5 <= 0x3F)
            {
              sub_1001DEA54(319, (unint64_t *)&unk_10036C9A8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
              if (v6 <= 0x3F) {
                swift_updateClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

void sub_1001DEA54(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for ExperienceEvent(255);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1001DEAB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001DEAE0(uint64_t a1)
{
  uint64_t v2 = *v1;
  _OWORD v5[3] = a1;
  v5[0] = v2;
  swift_retain();
  uint64_t v3 = sub_10002834C(v5);
  sub_10000CC5C((uint64_t)v5);
  return v3;
}

uint64_t sub_1001DEB38(uint64_t a1)
{
  uint64_t result = sub_1001DEC9C(&qword_10036CAB0, (void (*)(uint64_t))type metadata accessor for CardPresentationRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001DEB90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ExperienceEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001DEBF4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001DEC84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001DEC94()
{
  return swift_release();
}

uint64_t sub_1001DEC9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1001DECE4()
{
  uint64_t v1 = v0;
  id v2 = sub_1001F5B18();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  uint64_t v4 = OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_published;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_published) & 1) == 0)
  {
    sub_1001DFE7C((uint64_t)v8);
    sub_10025F834();
    sub_1001E0EC4((uint64_t)v8);
    *(unsigned char *)(v1 + v4) = 1;
    unint64_t v7 = *(void (**)(uint64_t))(v1 + 16);
    if (!v7) {
      return;
    }
    goto LABEL_5;
  }
  id v5 = sub_1001F5B18();
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 ulog:60 message:v6];

  unint64_t v7 = *(void (**)(uint64_t))(v1 + 16);
  if (v7)
  {
LABEL_5:
    swift_retain();
    v7(v1);
    sub_10000F088((uint64_t)v7);
  }
}

void sub_1001DEE20()
{
  uint64_t v1 = type metadata accessor for ExperienceEvent(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  id v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v7 = (char *)v21 - v6;
  uint64_t v8 = sub_10000A38C(&qword_10035F278);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v21 - v12;
  v21[4] = 0xD000000000000016;
  v21[5] = 0x80000001002C3D40;
  uint64_t v14 = v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_dismissEffectTrigger;
  swift_beginAccess();
  sub_10000D728(v14, (uint64_t)v13, &qword_10035F278);
  sub_10000D728((uint64_t)v13, (uint64_t)v11, &qword_10035F278);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 1, v1) == 1)
  {
    uint64_t v15 = (void *)0xE300000000000000;
    uint64_t v16 = 7104878;
  }
  else
  {
    sub_1001DEB90((uint64_t)v11, (uint64_t)v7);
    sub_10004D310((uint64_t)v7, (uint64_t)v5);
    uint64_t v16 = String.init<A>(describing:)();
    uint64_t v15 = v17;
    sub_10004D374((uint64_t)v7);
  }
  sub_10000D78C((uint64_t)v13, &qword_10035F278);
  v18._uint64_t countAndFlagsBits = v16;
  v18._object = v15;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  id v19 = sub_1001F5B18();
  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 ulog:40 message:v20];
  swift_bridgeObjectRelease();
}

uint64_t sub_1001DF0A0()
{
  uint64_t v1 = sub_10000A38C(&qword_1003653F8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v18[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = sub_10000A38C(&qword_10035F278);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for ExperienceEvent(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = (uint64_t *)(v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_dismissed);
  swift_beginAccess();
  uint64_t v12 = sub_10000A38C(&qword_10036C9A0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12)
    || !v11[1])
  {
    uint64_t v13 = v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_dismissEffectTrigger;
    swift_beginAccess();
    sub_10000D728(v13, (uint64_t)v6, &qword_10035F278);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_10000D78C((uint64_t)v6, &qword_10035F278);
      sub_10000D728(v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_sessionEnded, (uint64_t)v3, &qword_1003653F8);
      uint64_t v14 = sub_10000A38C(&qword_1003652D0);
      int v15 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v3, 1, v14);
      sub_10000D78C((uint64_t)v3, &qword_1003653F8);
      if (v15 == 1) {
        return 0;
      }
      else {
        return 0x206E6F6973736553;
      }
    }
    else
    {
      sub_1001DEB90((uint64_t)v6, (uint64_t)v10);
      uint64_t v16 = sub_10025B6EC();
      sub_10004D374((uint64_t)v10);
    }
  }
  else
  {
    uint64_t v16 = *v11;
    swift_bridgeObjectRetain();
  }
  return v16;
}

uint64_t sub_1001DF394()
{
  uint64_t v1 = sub_10000A38C(&qword_10035E158);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v76 = (uint64_t)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v77 = (char *)&v67 - v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v67 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v67 - v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v78 = v11;
  uint64_t v79 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  int v73 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v75 = (char *)&v67 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  id v19 = (char *)&v67 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v67 - v20;
  uint64_t v22 = sub_10000A38C(&qword_1003652D0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v74 = (uint64_t)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v67 - v26;
  uint64_t v28 = v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_completedPresented;
  swift_beginAccess();
  uint64_t v29 = *(unsigned int (**)(void, void, void))(v23 + 48);
  if (!v29(v28, 1, v22))
  {
    uint64_t v69 = v19;
    uint64_t v71 = v8;
    int v72 = v10;
    sub_10000D728(v28, (uint64_t)v27, &qword_1003652D0);
    uint64_t v30 = v0;
    uint64_t v31 = v79;
    uint64_t v32 = v29;
    uint64_t v33 = v78;
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v79 + 32);
    v34(v21, v27, v78);
    uint64_t v68 = v30;
    uint64_t v35 = v30 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_hintPresented;
    swift_beginAccess();
    uint64_t v36 = 1;
    uint64_t v70 = v32;
    if (!v32(v35, 1, v22))
    {
      uint64_t v37 = v35;
      uint64_t v38 = v74;
      sub_10000D728(v37, v74, &qword_1003652D0);
      v34(v72, (char *)v38, v33);
      uint64_t v36 = 0;
    }
    uint64_t v39 = (uint64_t)v72;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v72, v36, 1, v33);
    uint64_t v40 = (uint64_t)v71;
    sub_10000D728(v39, (uint64_t)v71, &qword_10035E158);
    uint64_t v41 = v31;
    uint64_t v42 = v40;
    int v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v40, 1, v33);
    uint64_t v44 = (void (**)(char *, uint64_t))(v41 + 8);
    if (v43 != 1)
    {
      uint64_t v59 = v69;
      v34(v69, (char *)v42, v33);
      Date.timeIntervalSince(_:)();
      uint64_t v61 = v60;
      uint64_t v62 = *v44;
      (*v44)(v59, v33);
      uint64_t v47 = v61;
      sub_10000D78C(v39, &qword_10035E158);
      v62(v21, v33);
      return v47;
    }
    sub_10000D78C(v42, &qword_10035E158);
    sub_10000D78C(v39, &qword_10035E158);
    (*v44)(v21, v33);
    uint64_t v0 = v68;
    uint64_t v29 = v70;
  }
  uint64_t v45 = v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_dismissed;
  swift_beginAccess();
  uint64_t v46 = sub_10000A38C(&qword_10036C9A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v45, 1, v46)) {
    return 0;
  }
  uint64_t v48 = v45 + *(int *)(v46 + 28);
  uint64_t v49 = v78;
  uint64_t v50 = v79;
  uint64_t v51 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v75, v48, v78);
  uint64_t v52 = v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_hintPresented;
  swift_beginAccess();
  uint64_t v53 = 1;
  unsigned int v54 = v29(v52, 1, v22);
  uint64_t v55 = (uint64_t)v77;
  if (!v54)
  {
    uint64_t v56 = v52;
    uint64_t v57 = v74;
    sub_10000D728(v56, v74, &qword_1003652D0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v55, v57, v49);
    uint64_t v53 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v55, v53, 1, v49);
  uint64_t v58 = v76;
  sub_10000D728(v55, v76, &qword_10035E158);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v58, 1, v49) == 1)
  {
    sub_10000D78C(v58, &qword_10035E158);
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v63 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v73, v58, v49);
    Date.timeIntervalSince(_:)();
    uint64_t v65 = v64;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v63, v49);
    uint64_t v47 = v65;
  }
  sub_10000D78C(v55, &qword_10035E158);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v49);
  return v47;
}

uint64_t sub_1001DFA90()
{
  uint64_t v1 = sub_10000A38C(&qword_1003652D0);
  uint64_t v32 = *(void *)(v1 - 8);
  uint64_t v33 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10035E158);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v30 = (char *)&v28 - v8;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_dismissed;
  swift_beginAccess();
  uint64_t v16 = sub_10000A38C(&qword_10036C9A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16)) {
    return 0;
  }
  uint64_t v29 = v12;
  uint64_t v18 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v14, v15 + *(int *)(v16 + 28), v9);
  uint64_t v19 = v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_completedPresented;
  swift_beginAccess();
  uint64_t v20 = 1;
  int v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v19, 1, v33);
  uint64_t v22 = (uint64_t)v30;
  if (!v21)
  {
    sub_10000D728(v19, (uint64_t)v3, &qword_1003652D0);
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v22, v3, v9);
    uint64_t v20 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v22, v20, 1, v9);
  sub_10000D728(v22, (uint64_t)v7, &qword_10035E158);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v7, 1, v9);
  uint64_t v24 = v29;
  if (v23 == 1)
  {
    sub_10000D78C((uint64_t)v7, &qword_10035E158);
    uint64_t v17 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v29, v7, v9);
    Date.timeIntervalSince(_:)();
    uint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v9);
    uint64_t v17 = v26;
  }
  sub_10000D78C(v22, &qword_10035E158);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v9);
  return v17;
}

uint64_t sub_1001DFE7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = sub_10000A38C(&qword_10036CAC0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = &v75[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_10000A38C(&qword_1003653F0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = &v75[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_10000A38C(&qword_1003653F8);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  int v94 = &v75[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v93 = &v75[-v15];
  __chkstk_darwin(v14);
  uint64_t v17 = &v75[-v16];
  unint64_t v103 = 0xD000000000000015;
  unint64_t v104 = 0x80000001002BD810;
  v105[3] = v4;
  v105[0] = v2;
  swift_retain();
  uint64_t v18 = sub_100027F24(v105);
  uint64_t v20 = v19;
  sub_10000CC5C((uint64_t)v105);
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  id v22 = sub_1001F5B18();
  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v22 ulog:40 message:v23];
  swift_bridgeObjectRelease();

  uint64_t v92 = sub_1001DFA90();
  int v91 = v24;
  uint64_t v25 = (uint64_t)v2 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_completedPresented;
  swift_beginAccess();
  sub_10000D728(v25, (uint64_t)v17, &qword_1003653F8);
  uint64_t v26 = sub_10000A38C(&qword_1003652D0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48);
  BOOL v29 = 1;
  uint64_t v88 = v26;
  uint64_t v85 = v27 + 48;
  uint64_t v86 = v28;
  int v84 = ((uint64_t (*)(unsigned char *, uint64_t))v28)(v17, 1);
  sub_10000D78C((uint64_t)v17, &qword_1003653F8);
  uint64_t v30 = sub_1001DF0A0();
  uint64_t v89 = v31;
  uint64_t v90 = v30;
  uint64_t v32 = (uint64_t)v2 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_remoteAlertFailed;
  swift_beginAccess();
  sub_10000D728(v32, (uint64_t)v10, &qword_1003653F0);
  uint64_t v33 = sub_10000A38C((uint64_t *)&unk_1003652E0);
  LODWORD(v32) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v10, 1, v33);
  sub_10000D78C((uint64_t)v10, &qword_1003653F0);
  if (v32 == 1)
  {
    uint64_t v34 = (uint64_t)v2 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_cardFailed;
    swift_beginAccess();
    sub_10000D728(v34, (uint64_t)v7, &qword_10036CAC0);
    uint64_t v35 = sub_10000A38C(&qword_10036C990);
    BOOL v29 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v7, 1, v35) != 1;
    sub_10000D78C((uint64_t)v7, &qword_10036CAC0);
  }
  BOOL v87 = v29;
  uint64_t v36 = (void *)((char *)v2 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_cardFailed);
  swift_beginAccess();
  uint64_t v37 = sub_10000A38C(&qword_10036C990);
  uint64_t v38 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48);
  int v39 = v38(v36, 1, v37);
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  if (!v39)
  {
    if (*v36)
    {
      swift_getErrorValue();
      uint64_t v40 = v98;
      uint64_t v96 = v97;
      swift_errorRetain();
      uint64_t v41 = (void *)sub_100117140(v40);
      id v42 = [v41 code];

      id v102 = v42;
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v95 = v44;
      uint64_t v96 = v43;
      swift_errorRelease();
    }
    else
    {
      uint64_t v95 = 0;
      uint64_t v96 = 0;
    }
  }
  if (v38(v36, 1, v37) || !*v36)
  {
    uint64_t v82 = 0;
    uint64_t v83 = 0;
  }
  else
  {
    swift_getErrorValue();
    uint64_t v45 = v100;
    uint64_t v83 = v99;
    swift_errorRetain();
    uint64_t v46 = (void *)sub_100117140(v45);
    swift_errorRelease();
    id v47 = [v46 domain];

    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v82 = v49;
    uint64_t v83 = v48;
  }
  if (v38(v36, 1, v37) || !*v36)
  {
    uint64_t v80 = 0;
    uint64_t v81 = 0;
  }
  else
  {
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v50 = Error.localizedDescription.getter();
    uint64_t v80 = v51;
    uint64_t v81 = v50;
    swift_errorRelease();
  }
  BOOL v78 = v84 != 1;
  int v84 = *((unsigned __int8 *)v2 + 56);
  uint64_t v79 = sub_1001DF394();
  int v77 = v52;
  uint64_t v53 = (uint64_t)v2 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_hintPresented;
  swift_beginAccess();
  uint64_t v54 = v53;
  uint64_t v55 = v93;
  sub_10000D728(v54, (uint64_t)v93, &qword_1003653F8);
  uint64_t v56 = v88;
  uint64_t v57 = v86;
  BOOL v76 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v86)(v55, 1, v88) != 1;
  sub_10000D78C((uint64_t)v55, &qword_1003653F8);
  uint64_t v58 = v2[5];
  uint64_t v59 = v2[6];
  uint64_t v60 = (uint64_t)v2 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_subtitleSwipedBack;
  swift_beginAccess();
  uint64_t v61 = v60;
  uint64_t v62 = v94;
  sub_10000D728(v61, (uint64_t)v94, &qword_1003653F8);
  LOBYTE(v56) = v57(v62, 1, v56) != 1;
  swift_bridgeObjectRetain();
  sub_10000D78C((uint64_t)v62, &qword_1003653F8);
  uint64_t v63 = (char *)v2 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_presentEffect;
  uint64_t v64 = &v63[*(int *)(sub_10000A38C(&qword_10036CAB8) + 32)];
  int v65 = *(_DWORD *)v64;
  char v66 = v64[4];
  uint64_t result = sub_10025B6EC();
  char v68 = v91 & 1;
  char v69 = v77 & 1;
  char v101 = v66;
  *(void *)a1 = v92;
  *(unsigned char *)(a1 + 8) = v68;
  *(unsigned char *)(a1 + 9) = v78;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v70 = v89;
  *(void *)(a1 + 32) = v90;
  *(void *)(a1 + 40) = v70;
  *(unsigned char *)(a1 + 48) = v87;
  uint64_t v71 = v95;
  *(void *)(a1 + 56) = v96;
  *(void *)(a1 + 64) = v71;
  uint64_t v72 = v82;
  *(void *)(a1 + 72) = v83;
  *(void *)(a1 + 80) = v72;
  uint64_t v73 = v80;
  *(void *)(a1 + 88) = v81;
  *(void *)(a1 + 96) = v73;
  *(unsigned char *)(a1 + 104) = v84;
  *(void *)(a1 + 112) = v79;
  *(unsigned char *)(a1 + 120) = v69;
  *(unsigned char *)(a1 + 121) = v76;
  *(void *)(a1 + 128) = v58;
  *(void *)(a1 + 136) = v59;
  *(unsigned char *)(a1 + 144) = v56;
  *(_DWORD *)(a1 + 148) = v65;
  *(unsigned char *)(a1 + 152) = v101;
  *(void *)(a1 + 160) = result;
  *(void *)(a1 + 168) = v74;
  return result;
}

uint64_t *sub_1001E0650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v13 = *v7;
  v7[2] = 0;
  _OWORD v7[3] = 0;
  uint64_t v14 = (char *)v7 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_remoteAlertFailed;
  uint64_t v15 = v13;
  uint64_t v16 = sub_10000A38C((uint64_t *)&unk_1003652E0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 1, 1, v16);
  uint64_t v17 = (char *)v8 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_cardFailed;
  uint64_t v18 = sub_10000A38C(&qword_10036C990);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v19 = (char *)v8 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_hintPresented;
  uint64_t v20 = sub_10000A38C(&qword_1003652D0);
  Swift::String v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  v21(v19, 1, 1, v20);
  v21((char *)v8 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_subtitleSwipedBack, 1, 1, v20);
  v21((char *)v8 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_completedPresented, 1, 1, v20);
  id v22 = (char *)v8 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_dismissed;
  uint64_t v23 = sub_10000A38C(&qword_10036C9A0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v21((char *)v8 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_sessionEnded, 1, 1, v20);
  int v24 = (char *)v8 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_dismissEffectTrigger;
  uint64_t v25 = type metadata accessor for ExperienceEvent(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  *((unsigned char *)v8 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_published) = 0;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v15, (uint64_t)&off_100330BD0);
  v8[4] = a1;
  void v8[5] = a2;
  v8[6] = a3;
  *((unsigned char *)v8 + 56) = a6;
  uint64_t v26 = (char *)v8 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_presentEffect;
  sub_1001DEB90(a7, (uint64_t)v8 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_presentEffect);
  uint64_t v27 = sub_10000A38C(&qword_10036CAB8);
  uint64_t v28 = &v26[*(int *)(v27 + 28)];
  uint64_t v29 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32))(v28, a4, v29);
  uint64_t v30 = &v26[*(int *)(v27 + 32)];
  *(_DWORD *)uint64_t v30 = a5;
  v30[4] = BYTE4(a5) & 1;
  return v8;
}

uint64_t sub_1001E0998()
{
  id v1 = sub_1001F5B18();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  sub_10000F088(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_presentEffect, &qword_10036CAB8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_remoteAlertFailed, &qword_1003653F0);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_cardFailed, &qword_10036CAC0);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_hintPresented, &qword_1003653F8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_subtitleSwipedBack, &qword_1003653F8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_completedPresented, &qword_1003653F8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_dismissed, &qword_10036CAD0);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_sessionEnded, &qword_1003653F8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_dismissEffectTrigger, &qword_10035F278);
  return v0;
}

uint64_t sub_1001E0AE0()
{
  sub_1001E0998();

  return swift_deallocClassInstance();
}

uint64_t sub_1001E0B38()
{
  return type metadata accessor for EducationPresentationRecord();
}

uint64_t type metadata accessor for EducationPresentationRecord()
{
  uint64_t result = qword_10036CB08;
  if (!qword_10036CB08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001E0B8C()
{
  sub_1001DEA54(319, &qword_10036C970, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StateUpdateWithDistance);
  if (v0 <= 0x3F)
  {
    sub_1000E4A6C(319, &qword_1003652D8, (uint64_t *)&unk_1003652E0);
    if (v1 <= 0x3F)
    {
      sub_1000E4A6C(319, &qword_10036C988, &qword_10036C990);
      if (v2 <= 0x3F)
      {
        sub_1000E4A6C(319, &qword_1003652C8, &qword_1003652D0);
        if (v3 <= 0x3F)
        {
          sub_1000E4A6C(319, &qword_10036C998, &qword_10036C9A0);
          if (v4 <= 0x3F)
          {
            sub_1001DEA54(319, (unint64_t *)&unk_10036C9A8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
            if (v5 <= 0x3F) {
              swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1001E0DEC(uint64_t a1)
{
  uint64_t v2 = *v1;
  _OWORD v5[3] = a1;
  v5[0] = v2;
  swift_retain();
  uint64_t v3 = sub_100027F24(v5);
  sub_10000CC5C((uint64_t)v5);
  return v3;
}

unint64_t sub_1001E0E44(uint64_t a1)
{
  unint64_t result = sub_1001E0E6C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001E0E6C()
{
  unint64_t result = qword_10036CBF8;
  if (!qword_10036CBF8)
  {
    type metadata accessor for EducationPresentationRecord();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CBF8);
  }
  return result;
}

uint64_t sub_1001E0EC4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001E0F50(char *a1, char *a2)
{
  return sub_10005D7B4(*a1, *a2);
}

Swift::Int sub_1001E0F5C()
{
  return Hasher._finalize()();
}

uint64_t sub_1001E0FF4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001E1078()
{
  return Hasher._finalize()();
}

uint64_t sub_1001E110C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10031D240, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1001E116C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6F69746163756465;
  if (*v1) {
    uint64_t v2 = 0x4872616C75676572;
  }
  unint64_t v3 = 0xED0000746E69486ELL;
  if (*v1) {
    unint64_t v3 = 0xEB00000000746E69;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1001E11C0(void *a1@<X8>)
{
  *a1 = &off_10031E580;
}

uint64_t sub_1001E11D0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001E1230()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001E1280()
{
  if (*v0) {
    return 0x4872616C75676572;
  }
  else {
    return 0x6F69746163756465;
  }
}

uint64_t *sub_1001E12D0()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  swift_weakInit();
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v2, (uint64_t)&off_100330CC8);
  swift_weakAssign();
  swift_release();
  return v1;
}

uint64_t sub_1001E136C()
{
  id v0 = sub_1001F5FAC();
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 ulog:40 message:v1];

  id v2 = [self sharedLocalEndpoint];
  id v3 = [v2 outputDevices];

  if (v3)
  {
    sub_1001E24B4();
    unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v4 >> 62)) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v4 = (unint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_3:
      uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v5) {
        goto LABEL_4;
      }
LABEL_14:
      swift_bridgeObjectRelease_n();
      uint64_t Strong = swift_weakLoadStrong();
      if (!Strong) {
        goto LABEL_21;
      }
      uint64_t v14 = *(void **)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__mediaRemoteDisplayContext)
                     + 24);
      id v15 = v14;
      swift_release();
      if (!v14) {
        goto LABEL_21;
      }
      id v16 = [v15 selectedDeviceState];

      if (!v16) {
        goto LABEL_21;
      }
      id v17 = [v16 playerPath];

      if (v17)
      {
        id v18 = [v17 origin];

        if (v18)
        {
          unsigned __int8 v19 = [v18 isLocal];

          if (v19) {
            return 1;
          }
        }
      }
LABEL_21:
      id v20 = sub_1001F5FAC();
      NSString v21 = String._bridgeToObjectiveC()();
      [v20 ulog:40 message:v21];
LABEL_26:

      return 0;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  if (!v5) {
    goto LABEL_14;
  }
LABEL_4:
  uint64_t v6 = 4;
  while (1)
  {
    uint64_t result = (v4 & 0xC000000000000001) != 0
           ? specialized _ArrayBuffer._getElementSlowPath(_:)()
           : (uint64_t)*(id *)(v4 + 8 * v6);
    uint64_t v8 = (void *)result;
    uint64_t v9 = v6 - 3;
    if (__OFADD__(v6 - 4, 1)) {
      break;
    }
    unsigned int v10 = [(id)result deviceType];
    unsigned int v11 = [v8 deviceSubtype] & 0xFFFFFFFE;
    if (v10 == 1 || v11 == 12)
    {
      swift_bridgeObjectRelease_n();
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      id v22 = [v8 description:0xD00000000000002DLL, 0x80000001002C3FB0];
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      v26._uint64_t countAndFlagsBits = v23;
      v26._object = v25;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      id v20 = sub_1001F5FAC();
      swift_bridgeObjectRetain();
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v20 ulog:40 message:v21];
      swift_bridgeObjectRelease();

      goto LABEL_26;
    }

    ++v6;
    if (v9 == v5) {
      goto LABEL_14;
    }
  }
  __break(1u);
  return result;
}