uint64_t sub_1001E1728()
{
  void *v0;
  uint64_t v1;
  id v2;
  char v3;
  void *v4;
  NSString v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  NSString v10;
  uint64_t v11;
  Swift::String v12;
  id v13;
  NSString v14;
  void v16[2];

  if (qword_10035A520 != -1) {
    swift_once();
  }
  v0 = (void *)0xEB00000000746E69;
  v1 = 0x4872616C75676572;
  v2 = *(id *)(qword_1003AC750 + 432);
  v3 = sub_100101268();

  if (v3 == 2)
  {
    if (qword_10035A4D0 != -1) {
      swift_once();
    }
    v4 = *(void **)(*(void *)(qword_1003AC500 + 16) + 32);
    swift_retain();
    v5 = String._bridgeToObjectiveC()();
    LODWORD(v4) = [v4 BOOLForKey:v5];
    swift_release();

    if (v4)
    {
      strcpy((char *)v16, "hintPolicy: ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
LABEL_17:
      v11 = 1;
      goto LABEL_18;
    }
    strcpy((char *)v16, "hintPolicy: ");
    BYTE5(v16[1]) = 0;
    HIWORD(v16[1]) = -5120;
    if ((sub_1001E1A0C() & 1) == 0) {
      goto LABEL_17;
    }
  }
  else
  {
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    v16[0] = 0xD000000000000018;
    v16[1] = 0x80000001002C3F40;
    if (v3) {
      v6 = 0x4872616C75676572;
    }
    else {
      v6 = 0x6F69746163756465;
    }
    if (v3) {
      v7 = 0xEB00000000746E69;
    }
    else {
      v7 = 0xED0000746E69486ELL;
    }
    v8 = v7;
    String.append(_:)(*(Swift::String *)&v6);
    swift_bridgeObjectRelease();
    v9 = sub_1001F5FAC();
    swift_bridgeObjectRetain();
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 ulog:40 message:v10, v16[0], v16[1]];
    swift_bridgeObjectRelease();

    strcpy((char *)v16, "hintPolicy: ");
    BYTE5(v16[1]) = 0;
    HIWORD(v16[1]) = -5120;
    if (v3) {
      goto LABEL_17;
    }
  }
  v11 = 0;
  v1 = 0x6F69746163756465;
  v0 = (void *)0xED0000746E69486ELL;
LABEL_18:
  v12._countAndFlagsBits = v1;
  v12._object = v0;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13 = sub_1001F5FAC();
  swift_bridgeObjectRetain();
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 ulog:40 message:v14, v16[0], v16[1]];
  swift_bridgeObjectRelease();

  return v11;
}

uint64_t sub_1001E1A0C()
{
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v0 = *(id *)(qword_1003AC750 + 472);
  char v1 = sub_1000FD938();

  if ((v1 & 1) == 0)
  {
    swift_weakLoadStrong();
    swift_release();
    if (qword_10035A4D0 != -1) {
      swift_once();
    }
    v7 = *(void **)(*(void *)(qword_1003AC500 + 24) + 32);
    swift_retain();
    NSString v8 = String._bridgeToObjectiveC()();
    LOBYTE(v7) = [v7 BOOLForKey:v8];
    swift_release();

    if ((v7 & 1) == 0 && (sub_1001E1FE0() & 1) == 0 && (sub_1001E2180() & 1) == 0)
    {
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v10 = Strong;
        v11 = sub_1000783A4(Strong, (uint64_t)&off_10031D2D0);
        if (v13 == 1
          || (v14 = v11, BOOL v15 = sub_100078AB8(v11, v12 & 1, v13, v10), v14, swift_release(), !v15))
        {
          swift_release();
        }
        else
        {
          char v16 = sub_1001E136C();
          swift_release();
          if (v16) {
            goto LABEL_5;
          }
        }
      }
      else
      {
        id v17 = sub_1001F5FAC();
        NSString v18 = String._bridgeToObjectiveC()();
        [v17 ulog:60 message:v18];
      }
    }
    uint64_t v5 = 0;
    unint64_t v4 = 0xE500000000000000;
    uint64_t v6 = 0x65736C6166;
    goto LABEL_19;
  }
  id v2 = sub_1001F5FAC();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

LABEL_5:
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1;
  uint64_t v6 = 1702195828;
LABEL_19:
  unint64_t v19 = v4;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  id v20 = sub_1001F5FAC();
  swift_bridgeObjectRetain();
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v20 ulog:v21 message:0xD000000000000021 0x80000001002C3E60];
  swift_bridgeObjectRelease();

  return v5;
}

uint64_t sub_1001E1CF8()
{
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HandoffEducationFlowPolicy()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for HintPolicyType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001E1E20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HintPolicyType()
{
  return &type metadata for HintPolicyType;
}

unint64_t sub_1001E1E58(uint64_t a1)
{
  unint64_t result = sub_1001E1E80();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001E1E80()
{
  unint64_t result = qword_10036CCF0;
  if (!qword_10036CCF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CCF0);
  }
  return result;
}

unint64_t sub_1001E1ED8()
{
  unint64_t result = qword_10036CCF8;
  if (!qword_10036CCF8)
  {
    sub_10000A3D0(&qword_10036CD00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CCF8);
  }
  return result;
}

unint64_t sub_1001E1F38()
{
  unint64_t result = qword_10036CD08;
  if (!qword_10036CD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CD08);
  }
  return result;
}

unint64_t sub_1001E1F8C()
{
  unint64_t result = qword_10036CD10;
  if (!qword_10036CD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CD10);
  }
  return result;
}

uint64_t sub_1001E1FE0()
{
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v0 = *(id *)(qword_1003AC750 + 448);
  char v1 = sub_100100D88();

  if (v1 == 2)
  {
    if (qword_10035A5F0 != -1) {
      swift_once();
    }
    NSString v2 = (id)qword_1003ACA78;
    LOBYTE(v3) = sub_1001C190C();
  }
  else
  {
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    int v3 = v1 & 1;
    if (v3) {
      uint64_t v4 = 1702195828;
    }
    else {
      uint64_t v4 = 0x65736C6166;
    }
    if (v3) {
      unint64_t v5 = 0xE400000000000000;
    }
    else {
      unint64_t v5 = 0xE500000000000000;
    }
    unint64_t v6 = v5;
    String.append(_:)(*(Swift::String *)&v4);
    swift_bridgeObjectRelease();
    id v7 = sub_1001F5FAC();
    swift_bridgeObjectRetain();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v7 ulog:v2 message:0xD000000000000020, 0x80000001002C3F10];
    swift_bridgeObjectRelease();
  }
  return v3 & 1;
}

uint64_t sub_1001E2180()
{
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v0 = *(id *)(qword_1003AC750 + 440);
  char v1 = sub_100100D88();

  if (v1 == 2)
  {
    uint64_t v3 = 0xD00000000000001CLL;
    NSString v2 = "com.apple.MediaRemoteUI";
    uint64_t v4 = qword_10035A538;
    swift_bridgeObjectRetain();
    if (v4 != -1) {
      swift_once();
    }
    swift_retain();
    char v5 = sub_1000BD940(0xD00000000000001CLL, "com.apple.MediaRemoteUI");
    swift_release();
    if (v5) {
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
    uint64_t v3 = 0xD000000000000018;
    NSString v2 = "com.apple.sidecar";
    uint64_t v6 = qword_10035A538;
    swift_bridgeObjectRetain();
    if (v6 != -1) {
      swift_once();
    }
    swift_retain();
    char v7 = sub_1000BD940(0xD000000000000018, "com.apple.sidecar");
    swift_release();
    if (v7)
    {
LABEL_10:
      swift_arrayDestroy();
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      v8._countAndFlagsBits = v3;
      v8._object = v2;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      id v9 = sub_1001F5FAC();
      swift_bridgeObjectRetain();
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v9 ulog:v10 message:0xD000000000000027, 0x80000001002C3EB0];
      swift_bridgeObjectRelease();

      char v11 = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      char v11 = 0;
    }
  }
  else
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    char v11 = v1 & 1;
    if (v1) {
      uint64_t v12 = 1702195828;
    }
    else {
      uint64_t v12 = 0x65736C6166;
    }
    if (v1) {
      unint64_t v13 = 0xE400000000000000;
    }
    else {
      unint64_t v13 = 0xE500000000000000;
    }
    unint64_t v14 = v13;
    String.append(_:)(*(Swift::String *)&v12);
    swift_bridgeObjectRelease();
    id v15 = sub_1001F5FAC();
    swift_bridgeObjectRetain();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v15 ulog:v16 message:0xD00000000000002BLL, 0x80000001002C3EE0];
    swift_bridgeObjectRelease();
  }
  return v11 & 1;
}

unint64_t sub_1001E24B4()
{
  unint64_t result = qword_10036CD18;
  if (!qword_10036CD18)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10036CD18);
  }
  return result;
}

uint64_t sub_1001E24F4()
{
  uint64_t v0 = sub_10000A38C(&qword_10035E158);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  char v5 = (char *)&v15 - v4;
  id v6 = sub_1001F5FAC();
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 ulog:40 message:v7];

  if (qword_10035A4D0 != -1) {
    swift_once();
  }
  Swift::String v8 = *(void **)(*(void *)(qword_1003AC500 + 24) + 32);
  swift_retain();
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 setBool:1 forKey:v9];
  swift_release();

  if (qword_10035A520 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1003AC750;
  Date.init()();
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 0, 1, v11);
  uint64_t v12 = *(void **)(v10 + 624);
  sub_1000B03BC((uint64_t)v5, (uint64_t)v3);
  id v13 = v12;
  sub_10012BB2C((uint64_t)v3);

  return sub_1000B0424((uint64_t)v5);
}

void sub_1001E2704()
{
  id v0 = sub_1001F6D08();
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 ulog:40 message:v1];

  if (qword_10035A4D0 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void **)(*(void *)(qword_1003AC500 + 16) + 32);
  swift_retain();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setBool:0 forKey:v3];
  swift_release();

  uint64_t v4 = *(void **)(*(void *)(qword_1003AC500 + 24) + 32);
  swift_retain();
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setBool:0 forKey:v5];
  swift_release();

  if (qword_10035A520 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_1003AC750;
  NSString v7 = *(void **)(qword_1003AC750 + 624);
  uint64_t v8 = swift_isaMask;
  NSString v9 = *(void **)((char *)v7 + *(void *)((swift_isaMask & *v7) + 0x70));
  if (v9)
  {
    uint64_t v10 = v7;
    NSString v11 = String._bridgeToObjectiveC()();
    [v9 removeObjectForKey:v11];

    uint64_t v6 = qword_1003AC750;
    uint64_t v8 = swift_isaMask;
  }
  uint64_t v12 = *(void **)(v6 + 632);
  id v13 = *(void **)((char *)v12 + *(void *)((v8 & *v12) + 0x70));
  if (v13)
  {
    unint64_t v14 = v12;
    id v15 = v13;
    NSString v16 = String._bridgeToObjectiveC()();
    [v15 setInteger:0 forKey:v16];
  }
}

uint64_t sub_1001E29EC()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v2 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v10 - v5;
  dispatch thunk of Identifiable.id.getter();
  dispatch thunk of Identifiable.id.getter();
  swift_getAssociatedConformanceWitness();
  char v7 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, AssociatedTypeWitness);
  v8(v6, AssociatedTypeWitness);
  return v7 & 1;
}

uint64_t *sub_1001E2B78(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1001E2CC4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_1001E2D94(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_1001E2EA4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_1001E3018(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_1001E3128(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_1001E329C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E32B0);
}

uint64_t sub_1001E32B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1001E331C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E3330);
}

uint64_t sub_1001E3330(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_1001E33B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_1001E3418(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t type metadata accessor for ShareableContentType(uint64_t a1)
{
  return sub_100014F7C(a1, (uint64_t *)&unk_10036CD90);
}

uint64_t sub_1001E34A8()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1001E3520(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    NSString v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      uint64_t v12 = type metadata accessor for ShareableContentType(0);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t sub_1001E3690(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

void *sub_1001E3760(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    uint64_t v11 = type metadata accessor for ShareableContentType(0);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

void *sub_1001E3880(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = type metadata accessor for ShareableContentType(0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

_OWORD *sub_1001E3A14(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = type metadata accessor for ShareableContentType(0);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *sub_1001E3B24(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = type metadata accessor for ShareableContentType(0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_1001E3CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E3CBC);
}

uint64_t sub_1001E3CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for ShareableContentType(0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_1001E3D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E3D8C);
}

uint64_t sub_1001E3D8C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for ShareableContentType(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ShareableContent(uint64_t a1)
{
  return sub_100014F7C(a1, qword_10036CDF8);
}

uint64_t sub_1001E3E54()
{
  uint64_t result = type metadata accessor for ShareableContentType(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001E3EEC(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036CE78);
  uint64_t v22 = *(void *)(v2 - 8);
  uint64_t v23 = v2;
  __chkstk_darwin(v2);
  NSString v21 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10036CE80);
  uint64_t v25 = *(void *)(v4 - 8);
  uint64_t v26 = v4;
  __chkstk_darwin(v4);
  v24 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  v28 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ShareableContentType(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_10036CE88);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1001E5680();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1001E5834(v27, (uint64_t)v11, type metadata accessor for ShareableContentType);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6) == 1)
  {
    char v30 = 1;
    sub_1001E56D4();
    NSString v16 = v21;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v28, v11, v6);
    char v29 = 0;
    sub_1001E578C();
    NSString v18 = v24;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_1001E5300(&qword_100368F30, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v19 = v26;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v28, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_1001E4358@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v38 = sub_10000A38C(&qword_10036CE48);
  uint64_t v36 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  v43 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10000A38C(&qword_10036CE50);
  uint64_t v39 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  v42 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10036CE58);
  uint64_t v41 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ShareableContentType(0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v33 - v12;
  sub_10000D6E4(a1, a1[3]);
  sub_1001E5680();
  uint64_t v14 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    goto LABEL_7;
  }
  v34 = v11;
  v35 = v13;
  NSString v16 = v42;
  uint64_t v15 = v43;
  v44 = a1;
  uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v18 = v5;
  uint64_t v19 = v7;
  if (*(void *)(v17 + 16) != 1)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v23 = v8;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, enum case for DecodingError.typeMismatch(_:), v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v5);
    a1 = v44;
LABEL_7:
    uint64_t v25 = (uint64_t)a1;
    return sub_10000CC5C(v25);
  }
  uint64_t v20 = (uint64_t)v44;
  if (*(unsigned char *)(v17 + 32))
  {
    char v46 = 1;
    sub_1001E56D4();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v38);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v5);
    uint64_t v27 = type metadata accessor for URL();
    uint64_t v28 = (uint64_t)v35;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v35, 1, 1, v27);
  }
  else
  {
    char v45 = 0;
    sub_1001E578C();
    v24 = v16;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v29 = type metadata accessor for URL();
    sub_1001E5300(&qword_100368E90, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v30 = (uint64_t)v34;
    uint64_t v31 = v37;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v18);
    v32 = v44;
    uint64_t v28 = (uint64_t)v35;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v30, 0, 1, v29);
    sub_1001E5728(v30, v28);
    uint64_t v20 = (uint64_t)v32;
  }
  sub_1001E5728(v28, v40);
  uint64_t v25 = v20;
  return sub_10000CC5C(v25);
}

uint64_t sub_1001E494C()
{
  if (*v0) {
    return 1701736302;
  }
  else {
    return 7107189;
  }
}

uint64_t sub_1001E4978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001E61F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001E49A0(uint64_t a1)
{
  unint64_t v2 = sub_1001E5680();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E49DC(uint64_t a1)
{
  unint64_t v2 = sub_1001E5680();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001E4A18(uint64_t a1)
{
  unint64_t v2 = sub_1001E56D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E4A54(uint64_t a1)
{
  unint64_t v2 = sub_1001E56D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001E4A90(uint64_t a1)
{
  unint64_t v2 = sub_1001E578C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E4ACC(uint64_t a1)
{
  unint64_t v2 = sub_1001E578C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001E4B08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001E4358(a1, a2);
}

uint64_t sub_1001E4B20(void *a1)
{
  return sub_1001E3EEC(a1);
}

uint64_t sub_1001E4B38(uint64_t a1)
{
  __chkstk_darwin(a1 - 8);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001E5834(v1, (uint64_t)v3, type metadata accessor for ShareableContentType);
  uint64_t v4 = type metadata accessor for URL();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4) == 1) {
    return 1701736302;
  }
  sub_1001E589C((uint64_t)v3, type metadata accessor for ShareableContentType);
  return 0x6C72753C286C7275;
}

uint64_t sub_1001E4C40(void *a1)
{
  uint64_t v3 = sub_10000A38C(&qword_10036CEA8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D6E4(a1, a1[3]);
  sub_1001E57E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ShareableContent(0);
    v8[14] = 1;
    type metadata accessor for ShareableContentType(0);
    sub_1001E5300(&qword_10036CEB0, (void (*)(uint64_t))type metadata accessor for ShareableContentType);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1001E4DF8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v19 = type metadata accessor for ShareableContentType(0);
  __chkstk_darwin(v19);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036CE90);
  uint64_t v20 = *(void *)(v6 - 8);
  uint64_t v21 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ShareableContent(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D6E4(a1, a1[3]);
  sub_1001E57E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000CC5C((uint64_t)a1);
  }
  uint64_t v17 = v9;
  uint64_t v12 = v20;
  uint64_t v13 = v21;
  char v23 = 0;
  uint64_t *v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v11[1] = v14;
  char v22 = 1;
  sub_1001E5300(&qword_10036CEA0, (void (*)(uint64_t))type metadata accessor for ShareableContentType);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v13);
  sub_1001E5728((uint64_t)v5, (uint64_t)v11 + *(int *)(v17 + 20));
  sub_1001E5834((uint64_t)v11, v18, type metadata accessor for ShareableContent);
  sub_10000CC5C((uint64_t)a1);
  return sub_1001E589C((uint64_t)v11, type metadata accessor for ShareableContent);
}

uint64_t sub_1001E50D0()
{
  if (*v0) {
    return 0x746E65746E6F63;
  }
  else {
    return 0x4449656C646E7562;
  }
}

uint64_t sub_1001E510C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001E62C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001E5134(uint64_t a1)
{
  unint64_t v2 = sub_1001E57E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E5170(uint64_t a1)
{
  unint64_t v2 = sub_1001E57E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001E51AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001E4DF8(a1, a2);
}

uint64_t sub_1001E51C4(void *a1)
{
  return sub_1001E4C40(a1);
}

uint64_t sub_1001E51E0(uint64_t a1)
{
  v5[3] = a1;
  unint64_t v2 = sub_10000D680(v5);
  sub_1001E5834(v1, (uint64_t)v2, type metadata accessor for ShareableContent);
  uint64_t v3 = sub_100271C6C((uint64_t)v5);
  sub_10000CC5C((uint64_t)v5);
  return v3;
}

uint64_t sub_1001E5250(uint64_t a1)
{
  uint64_t result = sub_1001E5300(&qword_10036CE30, (void (*)(uint64_t))type metadata accessor for ShareableContent);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001E52A8(uint64_t a1)
{
  uint64_t result = sub_1001E5300(&qword_10036CE38, (void (*)(uint64_t))type metadata accessor for ShareableContent);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001E5300(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001E5348(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ShareableContentType(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_10036CE40);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_1001E5834(a1, (uint64_t)v14, type metadata accessor for ShareableContentType);
  sub_1001E5834(a2, v15, type metadata accessor for ShareableContentType);
  uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v16((uint64_t)v14, 1, v4) != 1)
  {
    sub_1001E5834((uint64_t)v14, (uint64_t)v10, type metadata accessor for ShareableContentType);
    if (v16(v15, 1, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      char v17 = static URL.== infix(_:_:)();
      uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
      v18(v7, v4);
      v18(v10, v4);
      sub_1001E589C((uint64_t)v14, type metadata accessor for ShareableContentType);
      return v17 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    goto LABEL_6;
  }
  if (v16(v15, 1, v4) != 1)
  {
LABEL_6:
    sub_1001E5620((uint64_t)v14);
    char v17 = 0;
    return v17 & 1;
  }
  sub_1001E589C((uint64_t)v14, type metadata accessor for ShareableContentType);
  char v17 = 1;
  return v17 & 1;
}

uint64_t sub_1001E5620(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036CE40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001E5680()
{
  unint64_t result = qword_10036CE60;
  if (!qword_10036CE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CE60);
  }
  return result;
}

unint64_t sub_1001E56D4()
{
  unint64_t result = qword_10036CE68;
  if (!qword_10036CE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CE68);
  }
  return result;
}

uint64_t sub_1001E5728(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareableContentType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001E578C()
{
  unint64_t result = qword_10036CE70;
  if (!qword_10036CE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CE70);
  }
  return result;
}

unint64_t sub_1001E57E0()
{
  unint64_t result = qword_10036CE98;
  if (!qword_10036CE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CE98);
  }
  return result;
}

uint64_t sub_1001E5834(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001E589C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001E58FC(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ShareableContentType(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_10036CE40);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[1];
  uint64_t v15 = a2[1];
  if (!v14)
  {
    if (v15) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v15) {
    return 0;
  }
  if (*a1 == *a2 && v14 == v15 || (char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v16 & 1) != 0))
  {
LABEL_8:
    uint64_t v18 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
    uint64_t v19 = (uint64_t)a1 + v18;
    uint64_t v20 = (uint64_t)a2 + v18;
    uint64_t v21 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_1001E5834(v19, (uint64_t)v13, type metadata accessor for ShareableContentType);
    sub_1001E5834(v20, v21, type metadata accessor for ShareableContentType);
    char v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v22((uint64_t)v13, 1, v4) == 1)
    {
      if (v22(v21, 1, v4) == 1) {
        goto LABEL_16;
      }
      goto LABEL_13;
    }
    sub_1001E5834((uint64_t)v13, (uint64_t)v10, type metadata accessor for ShareableContentType);
    if (v22(v21, 1, v4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_13:
      sub_1001E5620((uint64_t)v13);
      return 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v21, v4);
    char v23 = static URL.== infix(_:_:)();
    v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v7, v4);
    v24(v10, v4);
    if (v23)
    {
LABEL_16:
      sub_1001E589C((uint64_t)v13, type metadata accessor for ShareableContentType);
      return 1;
    }
    sub_1001E589C((uint64_t)v13, type metadata accessor for ShareableContentType);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareableContent.CodingKeys()
{
  return &type metadata for ShareableContent.CodingKeys;
}

unsigned char *_s17proximitycontrold16ShareableContentV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001E5D0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareableContentType.CodingKeys()
{
  return &type metadata for ShareableContentType.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ShareableContentType.UrlCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001E5DE0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareableContentType.UrlCodingKeys()
{
  return &type metadata for ShareableContentType.UrlCodingKeys;
}

ValueMetadata *type metadata accessor for ShareableContentType.NoneCodingKeys()
{
  return &type metadata for ShareableContentType.NoneCodingKeys;
}

unint64_t sub_1001E5E2C()
{
  unint64_t result = qword_10036CEB8;
  if (!qword_10036CEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CEB8);
  }
  return result;
}

unint64_t sub_1001E5E84()
{
  unint64_t result = qword_10036CEC0;
  if (!qword_10036CEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CEC0);
  }
  return result;
}

unint64_t sub_1001E5EDC()
{
  unint64_t result = qword_10036CEC8;
  if (!qword_10036CEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CEC8);
  }
  return result;
}

unint64_t sub_1001E5F34()
{
  unint64_t result = qword_10036CED0;
  if (!qword_10036CED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CED0);
  }
  return result;
}

unint64_t sub_1001E5F8C()
{
  unint64_t result = qword_10036CED8;
  if (!qword_10036CED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CED8);
  }
  return result;
}

unint64_t sub_1001E5FE4()
{
  unint64_t result = qword_10036CEE0;
  if (!qword_10036CEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CEE0);
  }
  return result;
}

unint64_t sub_1001E603C()
{
  unint64_t result = qword_10036CEE8;
  if (!qword_10036CEE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CEE8);
  }
  return result;
}

unint64_t sub_1001E6094()
{
  unint64_t result = qword_10036CEF0;
  if (!qword_10036CEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CEF0);
  }
  return result;
}

unint64_t sub_1001E60EC()
{
  unint64_t result = qword_10036CEF8;
  if (!qword_10036CEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CEF8);
  }
  return result;
}

unint64_t sub_1001E6144()
{
  unint64_t result = qword_10036CF00;
  if (!qword_10036CF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CF00);
  }
  return result;
}

unint64_t sub_1001E619C()
{
  unint64_t result = qword_10036CF08;
  if (!qword_10036CF08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CF08);
  }
  return result;
}

uint64_t sub_1001E61F0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7107189 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701736302 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001E62C4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4449656C646E7562 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_1001E63B8()
{
  return sub_1002613D0();
}

uint64_t _s18EducationPresentedVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s18EducationPresentedVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  uint64_t v8 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v8;
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  uint64_t v9 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s18EducationPresentedVwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = a2[9];
  *(void *)(a1 + 80) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = a2[11];
  *(void *)(a1 + 96) = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  uint64_t v5 = a2[14];
  *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
  *(void *)(a1 + 112) = v5;
  *(unsigned char *)(a1 + 121) = *((unsigned char *)a2 + 121);
  *(void *)(a1 + 128) = a2[16];
  *(void *)(a1 + 136) = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
  int v6 = *((_DWORD *)a2 + 37);
  *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
  *(_DWORD *)(a1 + 148) = v6;
  *(void *)(a1 + 160) = a2[20];
  *(void *)(a1 + 168) = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 _s18EducationPresentedVwtk(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t _s18EducationPresentedVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  uint64_t v10 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s18EducationPresentedVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 176)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s18EducationPresentedVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 176) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *_s18EducationPresentedVMa()
{
  return &_s18EducationPresentedVN;
}

unint64_t sub_1001E68D0(uint64_t a1)
{
  unint64_t result = sub_1001E68F8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001E68F8()
{
  unint64_t result = qword_10036CF10;
  if (!qword_10036CF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CF10);
  }
  return result;
}

unint64_t sub_1001E694C(uint64_t a1)
{
  unint64_t result = sub_1001E6974();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001E6974()
{
  unint64_t result = qword_10036CF18;
  if (!qword_10036CF18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036CF18);
  }
  return result;
}

uint64_t sub_1001E69C8(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1001E6CA4(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1001E6A28()
{
  id v1 = sub_1001F6AA4();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  sub_10000CC5C(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + OBJC_IVAR____TtC17proximitycontrold13HintViewModel__isModulating;
  uint64_t v4 = sub_10000A38C(&qword_100367F40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1001E6B30()
{
  sub_1001E6A28();

  return swift_deallocClassInstance();
}

uint64_t sub_1001E6B88()
{
  return type metadata accessor for HintViewModel();
}

uint64_t type metadata accessor for HintViewModel()
{
  uint64_t result = qword_10036CF80;
  if (!qword_10036CF80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001E6BDC()
{
  sub_1000DBFA4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1001E6CA4(uint64_t a1)
{
  NSString v2 = v1;
  uint64_t v56 = *v1;
  uint64_t v4 = sub_10000A38C(&qword_10036D268);
  uint64_t v47 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v48 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v48 + 64);
  __chkstk_darwin(v7);
  uint64_t v49 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C((uint64_t *)&unk_10036D270);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000A38C(&qword_100366138);
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  v50 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000A38C(&qword_10036D280);
  uint64_t v54 = *(void *)(v13 - 8);
  uint64_t v55 = v13;
  __chkstk_darwin(v13);
  v52 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_10036D288);
  uint64_t v58 = *(void *)(v15 - 8);
  uint64_t v59 = v15;
  __chkstk_darwin(v15);
  v57 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = 0;
  unint64_t v61 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  unint64_t v63 = 0xD00000000000003CLL;
  unint64_t v64 = 0x80000001002C42D0;
  uint64_t v62 = v7;
  char v17 = sub_10000D680(&v60);
  sub_1001E90F4(a1, (uint64_t)v17);
  uint64_t v18 = sub_10002836C(&v60);
  uint64_t v20 = v19;
  sub_10000CC5C((uint64_t)&v60);
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  id v22 = sub_1001F6AA4();
  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v22 ulog:40 message:v23];
  swift_bridgeObjectRelease();

  v2[18] = 0;
  swift_release();
  if (*(unsigned char *)(a1 + 8)) {
    goto LABEL_2;
  }
  if (*(void *)a1 < 2uLL)
  {
    uint64_t v60 = sub_1000F7C78();
    sub_10000A38C(&qword_10036D290);
    sub_10000B010(&qword_10036D298, &qword_10036D290);
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010((unint64_t *)&unk_10036D2A0, &qword_10036D268);
    uint64_t v44 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v6, v4);
    uint64_t v60 = v44;
    swift_allocObject();
    swift_weakInit();
    sub_10000A38C((uint64_t *)&unk_100367F70);
    sub_10000B010(&qword_10035D148, (uint64_t *)&unk_100367F70);
    uint64_t v45 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v2[18] = v45;
    return swift_release();
  }
  if ((unint64_t)(*(void *)a1 - 3) > 1)
  {
LABEL_2:
    if (qword_10035A600 != -1) {
      swift_once();
    }
    uint64_t v24 = *(void *)algn_10036CF28;
    uint64_t v25 = *(void *)((char *)v2 + OBJC_IVAR____TtC17proximitycontrold13HintViewModel__subtitle);
    *(void *)(v25 + 24) = qword_10036CF20;
    *(void *)(v25 + 32) = v24;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRelease();
    sub_10010526C();
    unint64_t v26 = *(void *)(v25 + 32);
    uint64_t v60 = *(void *)(v25 + 24);
    unint64_t v61 = v26;
    swift_bridgeObjectRetain();
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = swift_allocObject();
    *(unsigned char *)(v27 + 16) = 1;
    sub_1000FBDC0();
    if (qword_10035A520 != -1) {
      swift_once();
    }
    id v28 = *(id *)(qword_1003AC750 + 1296);
    sub_1000FEB94();

    id v29 = [self mainRunLoop];
    uint64_t v30 = type metadata accessor for NSRunLoop.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v11, 1, 1, v30);
    uint64_t v31 = static NSTimer.publish(every:tolerance:on:in:options:)();

    sub_1001E91BC((uint64_t)v11);
    uint64_t v60 = v31;
    type metadata accessor for NSTimer.TimerPublisher();
    sub_1001E921C();
    uint64_t v32 = ConnectablePublisher.autoconnect()();
    swift_release();
    uint64_t v60 = v32;
    sub_10000A38C(&qword_100363558);
    type metadata accessor for Date();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10028D430;
    Date.init()();
    sub_10000A38C((uint64_t *)&unk_10036D2C0);
    sub_10000B010(&qword_100366150, (uint64_t *)&unk_10036D2C0);
    uint64_t v33 = v50;
    Publisher.prepend(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v34 = v49;
    sub_1001E90F4(a1, v49);
    unint64_t v35 = (*(unsigned __int8 *)(v48 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
    unint64_t v36 = (v8 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = v27;
    sub_1001E9630(v34, v37 + v35);
    *(void *)(v37 + v36) = v56;
    swift_retain();
    sub_10000A38C((uint64_t *)&unk_100367F70);
    sub_10000B010(&qword_10036D2D0, &qword_100366138);
    uint64_t v39 = v52;
    uint64_t v38 = v53;
    Publisher.map<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v33, v38);
    sub_10000B010(&qword_10036D2D8, &qword_10036D280);
    sub_10000B010(&qword_10035D148, (uint64_t *)&unk_100367F70);
    uint64_t v40 = v57;
    uint64_t v41 = v55;
    Publisher<>.switchToLatest()();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v39, v41);
    swift_allocObject();
    swift_weakInit();
    sub_10000B010(&qword_10036D2E0, &qword_10036D288);
    uint64_t v42 = v59;
    uint64_t v43 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v40, v42);
    v2[18] = v43;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1001E7780@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v19 = a2;
  Swift::String v21 = a4;
  uint64_t v6 = sub_10000A38C(&qword_10036D2E8);
  uint64_t v20 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036D268);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (unsigned char *)(a1 + 16);
  uint64_t v26 = 0;
  unint64_t v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  uint64_t v24 = 0xD00000000000002ELL;
  uint64_t v25 = (void *)0x80000001002C4310;
  swift_beginAccess();
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v14 = 1702195828;
  }
  else {
    uint64_t v14 = 0x65736C6166;
  }
  if (*(unsigned char *)(a1 + 16)) {
    unint64_t v15 = 0xE400000000000000;
  }
  else {
    unint64_t v15 = 0xE500000000000000;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  sub_10016ABE4(v24, v25, 0, a3, (uint64_t)&off_1003312D0);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (*(unsigned char *)(a1 + 16) == 1)
  {
    swift_beginAccess();
    *uint64_t v13 = 0;
    type metadata accessor for ActivityDisplayContext(0);
    uint64_t v22 = sub_1000F7C78();
    sub_10000A38C(&qword_10036D290);
    sub_10000B010(&qword_10036D298, &qword_10036D290);
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010((unint64_t *)&unk_10036D2A0, &qword_10036D268);
    uint64_t v17 = Publisher.eraseToAnyPublisher()();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    swift_beginAccess();
    *uint64_t v13 = 1;
    if (qword_10035A600 != -1) {
      swift_once();
    }
    uint64_t v22 = qword_10036CF20;
    uint64_t v23 = *(void *)algn_10036CF28;
    swift_bridgeObjectRetain();
    Just.init(_:)();
    sub_10000B010((unint64_t *)&unk_10036D2F0, &qword_10036D2E8);
    uint64_t v17 = Publisher.eraseToAnyPublisher()();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v8, v6);
  }
  *Swift::String v21 = v17;
  return result;
}

uint64_t sub_1001E7B7C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = *(void *)(result + OBJC_IVAR____TtC17proximitycontrold13HintViewModel__subtitle);
    *(void *)(v4 + 24) = v2;
    *(void *)(v4 + 32) = v1;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRelease();
    sub_10010526C();
    swift_bridgeObjectRetain();
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1001E7C58()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1001E7CCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_100367EF0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold13HintViewModel____lazy_storage___isModulatingPublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold13HintViewModel____lazy_storage___isModulatingPublisher))
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold13HintViewModel____lazy_storage___isModulatingPublisher);
  }
  else
  {
    swift_beginAccess();
    sub_10000A38C(&qword_100367F40);
    Published.projectedValue.getter();
    swift_endAccess();
    sub_10000B010(&qword_10036D260, &qword_100367EF0);
    uint64_t v7 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_1001E7E4C()
{
  uint64_t v1 = OBJC_IVAR____TtC17proximitycontrold13HintViewModel____lazy_storage___subtitlePublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold13HintViewModel____lazy_storage___subtitlePublisher))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold13HintViewModel____lazy_storage___subtitlePublisher);
  }
  else
  {
    uint64_t v3 = v0;
    swift_retain();
    sub_10010526C();
    sub_10000A38C((uint64_t *)&unk_10036D250);
    sub_10000B010(&qword_100364A60, (uint64_t *)&unk_10036D250);
    Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    sub_10000A38C((uint64_t *)&unk_100367F70);
    sub_10000B010(&qword_10035D148, (uint64_t *)&unk_100367F70);
    uint64_t v2 = Publisher.eraseToAnyPublisher()();
    swift_release();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1001E7F98()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001E8064()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 64);
  sub_10000D6E4((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_1001E80C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 104);
  sub_10000D6E4((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_1001E811C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 104);
  sub_10000D6E4((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_1001E8178()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 112);
  sub_10000D6E4((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_1001E81D4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 112);
  sub_10000D6E4((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_1001E8230()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 120);
  sub_10000D6E4((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_1001E828C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 128);
  sub_10000D6E4((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_1001E82E8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 136);
  sub_10000D6E4((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_1001E8344()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  sub_10000D6E4((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_1001E83A0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)((swift_isaMask & *(void *)v1) + 0x50)
                                                                - 8)
                                                    + 16))(a1, &v1[*(void *)((swift_isaMask & *(void *)v1) + 0x78)]);
}

void sub_1001E840C(uint64_t a1)
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  if (a1)
  {
    swift_unknownObjectRetain();
    sub_10000A38C(&qword_10036D248);
    uint64_t v2 = String.init<A>(describing:)();
    unint64_t v4 = v3;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v2 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for ClassicBannerPresenter();
  sub_10016ADD8(0xD00000000000002CLL, (void *)0x80000001002C4220, 0, v6, (uint64_t)&off_1003311B0);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1001E8574(void *a1, uint64_t a2, uint64_t a3)
{
  swift_unknownObjectRetain();
  id v5 = a1;
  sub_1001E840C(a3);
}

void sub_1001E85A4()
{
}

id sub_1001E85E8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClassicBannerPresenter();
  return [super dealloc];
}

uint64_t sub_1001E865C(char *a1)
{
  uint64_t v2 = swift_isaMask & *(void *)a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(char *))(*(void *)(*(void *)(v2 + 80) - 8) + 8))(&a1[*(void *)((swift_isaMask & *(void *)a1)
                                                                                                 + 0x78)]);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for ClassicBannerPresenter()
{
  return sub_10000F2E4();
}

void sub_1001E880C(void *a1, uint64_t a2, void *a3, char a4)
{
  id v5 = v4;
  uint64_t v10 = swift_isaMask & *(void *)v4;
  uint64_t v11 = *(void *)(v10 + 0x50);
  uint64_t v58 = *(void *)(v11 - 8);
  __chkstk_darwin(a1);
  uint64_t v56 = (char *)&v55 - v12;
  unint64_t v60 = 0;
  unint64_t v61 = 0xE000000000000000;
  uint64_t v62 = v4;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  unint64_t v60 = 0xD000000000000032;
  unint64_t v61 = 0x80000001002C4160;
  id v13 = [a1 description];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;

  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x3D746E657665202CLL;
  v18._object = (void *)0xE800000000000000;
  String.append(_:)(v18);
  uint64_t v55 = a3;
  v19._countAndFlagsBits = sub_10004D820(a2, a3, a4);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  uint64_t v21 = v60;
  uint64_t v20 = (void *)v61;
  uint64_t v22 = *(void *)(v10 + 88);
  uint64_t v57 = v11;
  uint64_t v23 = type metadata accessor for ClassicBannerPresenter();
  sub_10016ADD8(v21, v20, 0, v23, (uint64_t)&off_1003311B0);
  swift_bridgeObjectRelease();
  uint64_t v59 = &OBJC_PROTOCOL___BNPresentable;
  uint64_t v24 = swift_dynamicCastObjCProtocolConditional();
  if (v24)
  {
    uint64_t v25 = (void *)v24;
    id v26 = a1;
    id v27 = [v25 requestIdentifier];
    if (!v27)
    {
      __break(1u);
      JUMPOUT(0x1001E9028);
    }
    id v28 = v27;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v30;

    switch(a4)
    {
      case 1:
        uint64_t v32 = v56;
        (*(void (**)(char *, char *))(*(void *)(*(void *)((swift_isaMask & *(void *)v5) + 0x50) - 8)
                                               + 16))(v56, &v5[*(void *)((swift_isaMask & *(void *)v5) + 0x78)]);
        uint64_t v33 = v29;
        uint64_t v44 = v55;
        v45._countAndFlagsBits = sub_10004D820(a2, v55, 1);
        unint64_t v60 = 0xD000000000000014;
        unint64_t v61 = 0x80000001002C41D0;
        String.append(_:)(v45);
        swift_bridgeObjectRelease();
        unint64_t v36 = v60;
        unint64_t v37 = v61;
        uint64_t v38 = *(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v22 + 8) + 8);
        uint64_t v54 = *(void *)(v22 + 8);
        uint64_t v39 = a2;
        uint64_t v40 = v44;
        uint64_t v41 = 2;
        goto LABEL_8;
      case 2:
        uint64_t v32 = v56;
        (*(void (**)(char *, char *))(*(void *)(*(void *)((swift_isaMask & *(void *)v5) + 0x50) - 8)
                                               + 16))(v56, &v5[*(void *)((swift_isaMask & *(void *)v5) + 0x78)]);
        uint64_t v33 = v29;
        uint64_t v42 = v55;
        v43._countAndFlagsBits = sub_10004D820(a2, v55, 2);
        unint64_t v60 = 0xD000000000000014;
        unint64_t v61 = 0x80000001002C41D0;
        String.append(_:)(v43);
        swift_bridgeObjectRelease();
        unint64_t v36 = v60;
        unint64_t v37 = v61;
        uint64_t v38 = *(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v22 + 8) + 8);
        uint64_t v54 = *(void *)(v22 + 8);
        uint64_t v39 = a2;
        uint64_t v40 = v42;
        uint64_t v41 = 3;
        goto LABEL_8;
      case 3:
        switch(a2)
        {
          case 2:
            uint64_t v32 = v56;
            (*(void (**)(char *, char *))(*(void *)(*(void *)((swift_isaMask & *(void *)v5) + 0x50)
                                                               - 8)
                                                   + 16))(v56, &v5[*(void *)((swift_isaMask & *(void *)v5) + 0x78)]);
            v48._countAndFlagsBits = sub_10004D820(a2, v55, 3);
            unint64_t v60 = 0xD000000000000014;
            unint64_t v61 = 0x80000001002C41D0;
            String.append(_:)(v48);
            swift_bridgeObjectRelease();
            unint64_t v36 = v60;
            unint64_t v37 = v61;
            uint64_t v38 = *(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v22 + 8) + 8);
            uint64_t v54 = *(void *)(v22 + 8);
            uint64_t v39 = 1;
            uint64_t v40 = 0;
            uint64_t v41 = 4;
            uint64_t v46 = v29;
            goto LABEL_9;
          case 3:
            uint64_t v49 = v26;
            v50 = v56;
            (*(void (**)(char *, char *))(*(void *)(*(void *)((swift_isaMask & *(void *)v5) + 0x50)
                                                               - 8)
                                                   + 16))(v56, &v5[*(void *)((swift_isaMask & *(void *)v5) + 0x78)]);
            v51._countAndFlagsBits = sub_10004D820(a2, v55, 3);
            unint64_t v60 = 0xD000000000000014;
            unint64_t v61 = 0x80000001002C41D0;
            String.append(_:)(v51);
            swift_bridgeObjectRelease();
            uint64_t v52 = v29;
            uint64_t v53 = v57;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, void))(*(void *)(v22 + 8) + 8))(2, 0, 4, v52, v31, v60, v61, v57, *(void *)(v22 + 8));
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v58 + 8))(v50, v53);
            unint64_t v60 = (unint64_t)v5;
            sub_10016ADD8(0xD000000000000029, (void *)0x80000001002C41F0, 0, v23, (uint64_t)&off_1003311B0);

            break;
          default:

            swift_bridgeObjectRelease();
            break;
        }
        return;
      default:
        uint64_t v32 = v56;
        (*(void (**)(char *, char *))(*(void *)(*(void *)((swift_isaMask & *(void *)v5) + 0x50) - 8)
                                               + 16))(v56, &v5[*(void *)((swift_isaMask & *(void *)v5) + 0x78)]);
        uint64_t v33 = v29;
        uint64_t v34 = v55;
        v35._countAndFlagsBits = sub_10004D820(a2, v55, 0);
        unint64_t v60 = 0xD000000000000014;
        unint64_t v61 = 0x80000001002C41D0;
        String.append(_:)(v35);
        swift_bridgeObjectRelease();
        unint64_t v36 = v60;
        unint64_t v37 = v61;
        uint64_t v38 = *(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v22 + 8) + 8);
        uint64_t v54 = *(void *)(v22 + 8);
        uint64_t v39 = a2;
        uint64_t v40 = v34;
        uint64_t v41 = 1;
LABEL_8:
        uint64_t v46 = v33;
LABEL_9:
        uint64_t v47 = v57;
        v38(v39, v40, v41, v46, v31, v36, v37, v57, v54);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v58 + 8))(v32, v47);
        break;
    }
  }
  else
  {
    unint64_t v60 = (unint64_t)v5;
    sub_10016AECC(60, 0xD000000000000027, (void *)0x80000001002C41A0, 0, v23, (uint64_t)&off_1003311B0);
  }
}

void sub_1001E9054()
{
  id v0 = [self localizedStringForKey:16];
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  qword_10036CF20 = v1;
  *(void *)algn_10036CF28 = v3;
}

void sub_1001E90BC()
{
}

uint64_t sub_1001E90F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActivityDisplayContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E9158()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001E9190(uint64_t *a1)
{
  return sub_1001E7B7C(a1);
}

uint64_t sub_1001E91AC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001E91BC(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C((uint64_t *)&unk_10036D270);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001E921C()
{
  unint64_t result = qword_10036D2B0;
  if (!qword_10036D2B0)
  {
    type metadata accessor for NSTimer.TimerPublisher();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036D2B0);
  }
  return result;
}

uint64_t sub_1001E9274()
{
  uint64_t v1 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();

  uint64_t v6 = v0 + v3 + *(int *)(v1 + 32);
  type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease();
      uint64_t v8 = v6 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      uint64_t v9 = type metadata accessor for Date();
      uint64_t v10 = *(void *)(v9 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      }
      break;
    case 1:
      uint64_t v23 = v4;
      swift_bridgeObjectRelease();
      uint64_t v11 = v6 + *(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20);
      uint64_t v12 = type metadata accessor for Date();
      uint64_t v13 = *(void *)(v12 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
      }
      swift_bridgeObjectRelease();
      uint64_t v4 = v23;
      uint64_t v3 = (v2 + 24) & ~v2;
      break;
    case 0:
      swift_bridgeObjectRelease();
      break;
  }
  uint64_t v14 = v5 + *(int *)(v1 + 36);
  int v15 = swift_getEnumCaseMultiPayload();
  if (v15 == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = v14 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v18 = *(void *)(v17 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    }
  }
  else
  {
    if (v15 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v19 = v14 + *(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20);
      uint64_t v20 = type metadata accessor for Date();
      uint64_t v21 = *(void *)(v20 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20)) {
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
      }
    }
    else if (v15)
    {
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
  }
LABEL_19:

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1001E9630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActivityDisplayContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E9694@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for ActivityDisplayContext(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1001E7780(v5, v1 + v4, v6, a1);
}

id sub_1001E9744()
{
  return sub_1001E9884((void (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext, &qword_100369990);
}

id sub_1001E9764()
{
  return sub_1001E9884((void (*)(void))type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionStarted, &qword_100369A28);
}

id sub_1001E9784()
{
  return sub_1001E9884((void (*)(void))type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionOutput, &qword_100369A38);
}

id sub_1001E97A4()
{
  return sub_1001E9884((void (*)(void))type metadata accessor for HandoffRemotePeerInterface.Request.LeaderSessionEnded, &qword_100369A30);
}

id sub_1001E97C4()
{
  return sub_1001E9884((void (*)(void))type metadata accessor for ActivityDisplayContext, &qword_10035CC40);
}

id sub_1001E97E4()
{
  return sub_1001E9884((void (*)(void))type metadata accessor for ActivityDisplayContext.TimerDisplayContext, &qword_1003699D0);
}

id sub_1001E9804()
{
  return sub_1001E9884((void (*)(void))type metadata accessor for ActivityDisplayContext.CallDisplayContext, &qword_1003699D8);
}

id sub_1001E9824()
{
  return sub_1001E9884((void (*)(void))type metadata accessor for PermissionToHandoff, &qword_1003699B8);
}

id sub_1001E9844()
{
  return sub_1001E9884((void (*)(void))type metadata accessor for ShareableContent, &qword_1003699C8);
}

id sub_1001E9864()
{
  return sub_1001E9884((void (*)(void))type metadata accessor for NoticeTapAction, &qword_100369998);
}

id sub_1001E9884(void (*a1)(void), uint64_t *a2)
{
  a1(0);
  sub_10000A38C(a2);
  uint64_t v3 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v3, v4);
  if ((v5 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v6 = objc_allocWithZone((Class)CULogHandle);
  NSString v7 = String._bridgeToObjectiveC()();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [v6 initWithSubsystem:v7 category:v8];

  return v9;
}

id sub_1001E99C8()
{
  type metadata accessor for XPCConnectionManager();
  sub_10000A38C(&qword_10036D588);
  uint64_t v0 = String.init<A>(describing:)();
  unint64_t v2 = v1;
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v3 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    unint64_t v2 = v4;
    swift_bridgeObjectRelease();
  }
  swift_retain();
  UUID.uuidString.getter();
  swift_release();
  sub_100089A9C(8);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  sub_10000CCAC();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = v0;
  unint64_t v16 = v2;
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 45;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v10 = objc_allocWithZone((Class)CULogHandle);
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v10 initWithSubsystem:v11 category:v12, v15, v16, v6, v8];

  return v13;
}

id sub_1001E9BD0()
{
  sub_10000A38C(&qword_100369A10);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001E9D0C()
{
  sub_10000A38C(&qword_100369968);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001E9E48()
{
  sub_10000A38C(&qword_100369958);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001E9F84()
{
  sub_10000A38C(&qword_100369978);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001EA0C0()
{
  sub_10000A38C(&qword_100369960);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001EA1FC()
{
  sub_10000A38C(&qword_1003699F8);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001EA338()
{
  sub_10000A38C(&qword_1003699F0);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001EA474()
{
  sub_10000A38C(&qword_100369980);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001EA5B0()
{
  sub_10000A38C(&qword_100369970);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001EA6EC()
{
  sub_10000A38C(&qword_100369A00);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001EA828()
{
  return sub_1001EAD58((void (*)(void))type metadata accessor for ActivityDisplayContext, &qword_10035CC40);
}

id sub_1001EA848()
{
  sub_10000A38C(&qword_1003699E8);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001EA984()
{
  sub_10000A38C(&qword_100369A18);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001EAAC0()
{
  sub_10000A38C(&qword_1003699C0);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001EABFC()
{
  sub_10000A38C(&qword_100369A08);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001EAD38()
{
  return sub_1001EAD58((void (*)(void))type metadata accessor for NoticeTapAction, &qword_100369998);
}

id sub_1001EAD58(void (*a1)(void), uint64_t *a2)
{
  a1(0);
  sub_10000A38C(a2);
  uint64_t v3 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v3, v4);
  if ((v5 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v6 = objc_allocWithZone((Class)CULogHandle);
  NSString v7 = String._bridgeToObjectiveC()();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [v6 initWithSubsystem:v7 category:v8];

  return v9;
}

id sub_1001EAE9C()
{
  return sub_1001EAEC0(0, (void (*)(void))type metadata accessor for HandoffFeedbackManager_Legacy, &qword_10036D780);
}

id sub_1001EAEC0(uint64_t a1, void (*a2)(void), uint64_t *a3)
{
  a2();
  sub_10000A38C(a3);
  uint64_t v4 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v4, v5);
  if ((v6 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v7 = objc_allocWithZone((Class)CULogHandle);
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithSubsystem:v8 category:v9];

  return v10;
}

uint64_t sub_1001EAFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10036D900);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v17 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  NSString v8 = (char *)&v17 - v7;
  NSString v9 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v19 = a1;
  v9((char *)&v17 - v7, a1, v3);
  unint64_t v10 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v18 = swift_allocObject();
  NSString v11 = *(void (**)(unint64_t, char *, uint64_t))(v4 + 32);
  NSString v12 = v8;
  uint64_t v13 = v3;
  v11(v18 + v10, v12, v3);
  uint64_t v14 = v17;
  v9(v17, a1, v13);
  uint64_t v15 = swift_allocObject();
  v11(v15 + v10, v14, v13);
  sub_10000A38C(&qword_10036D8F8);
  sub_10000B010(&qword_10036D908, &qword_10036D8F8);
  Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  return AsyncThrowingStream.Continuation.onTermination.setter();
}

uint64_t sub_1001EB260(char a1)
{
  if ((a1 & 1) == 0 && !_getErrorEmbeddedNSError<A>(_:)()) {
    swift_allocError();
  }
  sub_10000A38C(&qword_10036D900);
  return AsyncThrowingStream.Continuation.finish(throwing:)();
}

uint64_t *sub_1001EB2E4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  LODWORD(v84) = a4;
  uint64_t v85 = a2;
  uint64_t v91 = a1;
  uint64_t v86 = *v4;
  uint64_t v7 = sub_10000A38C(&qword_10035D170);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v88 = (uint64_t)v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v90 = (uint64_t)v77 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v81 = (uint64_t)v77 - v14;
  __chkstk_darwin(v13);
  uint64_t v82 = (uint64_t)v77 - v15;
  uint64_t v16 = sub_10000A38C(&qword_10035D168);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  v89 = (char *)v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v87 = (uint64_t)v77 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v83 = (char *)v77 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v80 = (char *)v77 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  id v27 = (char *)v77 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)v77 - v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = (char *)v5 + *(void *)(*v5 + 104);
  uint64_t v31 = sub_10000A38C(&qword_10036D930);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  uint64_t v32 = *(void *)(*v5 + 112);
  *(uint64_t *)((char *)v5 + v32) = 0;
  uint64_t v33 = *(void *)(*v5 + 120);
  *((unsigned char *)v5 + v33) = 2;
  uint64_t v34 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 128));
  uint64_t *v34 = 0;
  v34[1] = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 136)) = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 144)) = 0;
  v93 = v29;
  uint64_t v94 = v8;
  unint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v35 = v8 + 56;
  v92 = v36;
  v36(v29, 1, 1, v7);
  if (!a3) {
    goto LABEL_27;
  }
  if (qword_10035A578 != -1) {
    swift_once();
  }
  uint64_t v37 = qword_1003AC848;
  if (!qword_1003AC848)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  v78 = v27;
  v77[1] = v35;
  uint64_t v79 = v7;
  int v38 = v84 & 1;
  *(void *)&long long v95 = 0;
  *((void *)&v95 + 1) = 0xE000000000000000;
  id v84 = (id)qword_1003AC848;
  _StringGuts.grow(_:)(32);
  v101[0] = v95;
  v39._countAndFlagsBits = 0xD00000000000001ELL;
  v39._object = (void *)0x80000001002C44C0;
  String.append(_:)(v39);
  uint64_t v40 = v85;
  *(void *)&long long v95 = v85;
  *((void *)&v95 + 1) = a3;
  LOBYTE(v96) = v38;
  sub_10000A38C(&qword_10036D5C8);
  _print_unlocked<A, B>(_:_:)();
  sub_10016ABE4(*(uint64_t *)&v101[0], *((void **)&v101[0] + 1), 0, v86, (uint64_t)&off_1003274C8);
  swift_bridgeObjectRelease();
  uint64_t *v34 = v40;
  v34[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v5 + v33) = v38;
  uint64_t v41 = *(void **)((char *)v5 + v32);
  *(uint64_t *)((char *)v5 + v32) = v37;
  id v42 = v84;

  swift_bridgeObjectRetain();
  NSString v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v44 = [v42 valueForKey:v43];

  if (v44)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v95 = 0u;
    long long v96 = 0u;
  }
  uint64_t v7 = v79;
  uint64_t v45 = (uint64_t)v93;
  uint64_t v46 = (uint64_t)v78;
  sub_10001639C((uint64_t)&v95, (uint64_t)v101, &qword_100371910);
  swift_bridgeObjectRelease();
  if (v38)
  {
    uint64_t v49 = sub_1001F6990(v7);
    if (!v49)
    {
      sub_10016AE10(60, 0xD000000000000014, (void *)0x80000001002C44E0, 0, v86, (uint64_t)&off_1003274C8);
      uint64_t v7 = v79;
      goto LABEL_17;
    }
    uint64_t v52 = v49;
    uint64_t v53 = v50;
    uint64_t v54 = v51;
    sub_10000D728((uint64_t)v101, (uint64_t)&v95, &qword_100371910);
    if (*((void *)&v96 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v55 = v99;
        unint64_t v56 = v100;
        *((void *)&v96 + 1) = v52;
        uint64_t v97 = v53;
        uint64_t v98 = v54;
        sub_10000D680((uint64_t *)&v95);
        sub_1000292C0();
        sub_10000D78C(v45, &qword_10035D168);
        sub_10000DBEC(v55, v56);
        sub_10000A38C(&qword_10036C018);
        v75 = v80;
        uint64_t v7 = v79;
        int v76 = swift_dynamicCast();
        v92(v75, v76 ^ 1u, 1, v7);
        uint64_t v48 = (uint64_t)v75;
        goto LABEL_11;
      }
    }
    else
    {
      sub_10000D78C((uint64_t)&v95, &qword_100371910);
    }
    uint64_t v57 = (uint64_t)v83;
    sub_10016AE10(60, 0xD00000000000001ALL, (void *)0x80000001002C4500, 0, v86, (uint64_t)&off_1003274C8);
    uint64_t v7 = v79;
    goto LABEL_20;
  }
  sub_10000D78C(v45, &qword_10035D168);
  sub_10000D728((uint64_t)v101, (uint64_t)&v95, &qword_100371910);
  sub_10000A38C(&qword_100371910);
  int v47 = swift_dynamicCast();
  v92((char *)v46, v47 ^ 1u, 1, v7);
  uint64_t v48 = v46;
LABEL_11:
  sub_10001639C(v48, v45, &qword_10035D168);
LABEL_17:
  uint64_t v57 = (uint64_t)v83;
LABEL_20:
  uint64_t v58 = 7104878;
  *(void *)&long long v95 = 0x206C616974696E49;
  *((void *)&v95 + 1) = 0xE800000000000000;
  unint64_t v59 = v34[1];
  if (v59)
  {
    uint64_t v99 = *v34;
    unint64_t v100 = v59;
    swift_bridgeObjectRetain();
    uint64_t v60 = String.init<A>(describing:)();
    unint64_t v62 = v61;
  }
  else
  {
    unint64_t v62 = 0xE300000000000000;
    uint64_t v60 = 7104878;
  }
  unint64_t v63 = v62;
  String.append(_:)(*(Swift::String *)&v60);
  swift_bridgeObjectRelease();
  v64._countAndFlagsBits = 8250;
  v64._object = (void *)0xE200000000000000;
  String.append(_:)(v64);
  sub_10000D728(v45, v57, &qword_10035D168);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v57, 1, v7) == 1)
  {
    v65 = (void *)0xE300000000000000;
  }
  else
  {
    uint64_t v66 = v82;
    sub_10001639C(v57, v82, &qword_10035D170);
    sub_10000D728(v66, v81, &qword_10035D170);
    uint64_t v58 = String.init<A>(describing:)();
    v65 = v67;
    sub_10000D78C(v66, &qword_10035D170);
  }
  v68._countAndFlagsBits = v58;
  v68._object = v65;
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  sub_10016ABE4(v95, *((void **)&v95 + 1), 0, v86, (uint64_t)&off_1003274C8);

  swift_bridgeObjectRelease();
  sub_10000D78C((uint64_t)v101, &qword_100371910);
LABEL_27:
  uint64_t v69 = (uint64_t)v93;
  uint64_t v70 = v87;
  sub_10000D728((uint64_t)v93, v87, &qword_10035D168);
  uint64_t v71 = v91;
  uint64_t v72 = v88;
  sub_10000D728(v91, v88, &qword_10035D170);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v70, 1, v7) == 1)
  {
    sub_10001639C(v72, v90, &qword_10035D170);
    sub_10000D78C(v70, &qword_10035D168);
  }
  else
  {
    sub_10000D78C(v72, &qword_10035D170);
    sub_10001639C(v70, v90, &qword_10035D170);
  }
  sub_10000A38C(&qword_10036D938);
  swift_allocObject();
  v5[2] = CurrentValueSubject.init(_:)();
  v92(v89, 1, 1, v7);
  sub_10000A38C(&qword_10036D940);
  swift_allocObject();
  uint64_t v73 = CurrentValueSubject.init(_:)();
  sub_10000D78C(v71, &qword_10035D170);
  sub_10000D78C(v69, &qword_10035D168);
  v5[3] = v73;
  return v5;
}

uint64_t *sub_1001EBE00(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return sub_1001EBEB0(a1, a2, a3, a4, a5, a6, &qword_10036D5B0, (uint64_t *)&unk_10036C0C8, &qword_10036D5B8, &qword_10036D5C0, (void (*)(uint64_t))sub_100027B6C);
}

uint64_t *sub_1001EBE58(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return sub_1001EBEB0(a1, a2, a3, a4, a5, a6, &qword_10036D5D0, &qword_10036C048, &qword_10036D5D8, &qword_10036D5E0, (void (*)(uint64_t))sub_1001F70AC);
}

uint64_t *sub_1001EBEB0(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, void (*a11)(uint64_t))
{
  uint64_t v13 = v11;
  uint64_t v17 = a11;
  uint64_t v59 = *v13;
  swift_bridgeObjectRelease();
  uint64_t v18 = (char *)v13 + *(void *)(*v13 + 104);
  uint64_t v19 = sub_10000A38C(a7);
  uint64_t v20 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  uint64_t v21 = *(void *)(*v13 + 112);
  *(uint64_t *)((char *)v13 + v21) = 0;
  uint64_t v22 = *(void *)(*v13 + 120);
  *((unsigned char *)v13 + v22) = 2;
  uint64_t v23 = (uint64_t *)((char *)v13 + *(void *)(*v13 + 128));
  *uint64_t v23 = 0;
  v23[1] = 0;
  *(uint64_t *)((char *)v13 + *(void *)(*v13 + 136)) = 0;
  *(uint64_t *)((char *)v13 + *(void *)(*v13 + 144)) = 0;
  if (!a3) {
    goto LABEL_8;
  }
  if (qword_10035A578 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_1003AC848;
  if (!qword_1003AC848)
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
LABEL_8:
    uint64_t v32 = (uint64_t)a1;
    uint64_t v31 = a10;
    uint64_t v33 = a9;
    goto LABEL_28;
  }
  int v25 = a4 & 1;
  *(void *)&long long v61 = 0;
  *((void *)&v61 + 1) = 0xE000000000000000;
  id v56 = (id)qword_1003AC848;
  _StringGuts.grow(_:)(32);
  v67[0] = v61;
  v26._countAndFlagsBits = 0xD00000000000001ELL;
  v26._object = (void *)0x80000001002C44C0;
  String.append(_:)(v26);
  *(void *)&long long v61 = a2;
  *((void *)&v61 + 1) = a3;
  LOBYTE(v62) = a4 & 1;
  sub_10000A38C(&qword_10036D5C8);
  _print_unlocked<A, B>(_:_:)();
  sub_10016ABE4(*(uint64_t *)&v67[0], *((void **)&v67[0] + 1), 0, v59, (uint64_t)&off_1003274C8);
  swift_bridgeObjectRelease();
  *uint64_t v23 = a2;
  v23[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v13 + v22) = v25;
  id v27 = *(void **)((char *)v13 + v21);
  *(uint64_t *)((char *)v13 + v21) = v24;
  id v28 = v56;

  swift_bridgeObjectRetain();
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v30 = [v28 valueForKey:v29];

  if (v30)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v61 = 0u;
    long long v62 = 0u;
  }
  sub_10001639C((uint64_t)&v61, (uint64_t)v67, &qword_100371910);
  swift_bridgeObjectRelease();
  uint64_t v57 = v28;
  if (!v25)
  {
    sub_10000D728((uint64_t)v67, (uint64_t)&v61, &qword_100371910);
    sub_10000A38C(&qword_100371910);
    sub_10000A38C(a8);
    if (swift_dynamicCast()) {
      uint64_t v20 = v65;
    }
    else {
      uint64_t v20 = 1;
    }
    uint64_t v17 = a11;
    goto LABEL_22;
  }
  uint64_t v34 = sub_10000A38C(a8);
  uint64_t v35 = sub_1001F6990(v34);
  if (!v35)
  {
    sub_10016AE10(60, 0xD000000000000014, (void *)0x80000001002C44E0, 0, v59, (uint64_t)&off_1003274C8);
    uint64_t v20 = 1;
    uint64_t v17 = a11;
    goto LABEL_22;
  }
  uint64_t v38 = v35;
  uint64_t v39 = v36;
  uint64_t v40 = v37;
  sub_10000D728((uint64_t)v67, (uint64_t)&v61, &qword_100371910);
  uint64_t v17 = a11;
  if (!*((void *)&v62 + 1))
  {
    sub_10000D78C((uint64_t)&v61, &qword_100371910);
    goto LABEL_21;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_21:
    sub_10016AE10(60, 0xD00000000000001ALL, (void *)0x80000001002C4500, 0, v59, (uint64_t)&off_1003274C8);
    uint64_t v20 = 1;
    goto LABEL_22;
  }
  uint64_t v41 = v65;
  unint64_t v42 = v66;
  *((void *)&v62 + 1) = v38;
  uint64_t v63 = v39;
  uint64_t v64 = v40;
  sub_10000D680((uint64_t *)&v61);
  sub_1000292C0();
  sub_10000DBEC(v41, v42);
  sub_10000A38C(&qword_10036C018);
  if (swift_dynamicCast()) {
    uint64_t v20 = v65;
  }
  else {
    uint64_t v20 = 1;
  }
LABEL_22:
  uint64_t v32 = (uint64_t)a1;
  uint64_t v31 = a10;
  uint64_t v33 = a9;
  *(void *)&long long v61 = 0x206C616974696E49;
  *((void *)&v61 + 1) = 0xE800000000000000;
  unint64_t v43 = v23[1];
  if (v43)
  {
    uint64_t v65 = *v23;
    unint64_t v66 = v43;
    swift_bridgeObjectRetain();
    uint64_t v44 = String.init<A>(describing:)();
    unint64_t v46 = v45;
  }
  else
  {
    unint64_t v46 = 0xE300000000000000;
    uint64_t v44 = 7104878;
  }
  unint64_t v47 = v46;
  String.append(_:)(*(Swift::String *)&v44);
  swift_bridgeObjectRelease();
  v48._countAndFlagsBits = 8250;
  v48._object = (void *)0xE200000000000000;
  String.append(_:)(v48);
  if (v20 == 1)
  {
    v49._countAndFlagsBits = 7104878;
    v49._object = (void *)0xE300000000000000;
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    sub_10016ABE4(v61, *((void **)&v61 + 1), 0, v59, (uint64_t)&off_1003274C8);

    swift_bridgeObjectRelease();
    sub_10000D78C((uint64_t)v67, &qword_100371910);
  }
  else
  {
    uint64_t v65 = v20;
    id v50 = (id)v20;
    sub_10000A38C(a8);
    v51._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    sub_10016ABE4(v61, *((void **)&v61 + 1), 0, v59, (uint64_t)&off_1003274C8);

    swift_bridgeObjectRelease();
    sub_10000D78C((uint64_t)v67, &qword_100371910);
    id v52 = v50;

    uint64_t v32 = v20;
  }
LABEL_28:
  *(void *)&long long v61 = v32;
  sub_10000A38C(v33);
  swift_allocObject();
  v13[2] = CurrentValueSubject.init(_:)();
  *(void *)&long long v61 = 1;
  sub_10000A38C(v31);
  swift_allocObject();
  uint64_t v53 = CurrentValueSubject.init(_:)();
  v17(v20);
  v13[3] = v53;
  return v13;
}

uint64_t *sub_1001EC5EC(void *a1, char a2, void *a3, void *a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v49 = *v6;
  swift_bridgeObjectRelease();
  uint64_t v12 = (char *)v6 + *(void *)(*v6 + 104);
  uint64_t v13 = sub_10000A38C(&qword_10036D5E8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = *(void *)(*v6 + 112);
  *(uint64_t *)((char *)v6 + v14) = 0;
  uint64_t v15 = *(void *)(*v6 + 120);
  *((unsigned char *)v6 + v15) = 2;
  uint64_t v16 = (void **)((char *)v6 + *(void *)(*v6 + 128));
  *uint64_t v16 = 0;
  v16[1] = 0;
  *(uint64_t *)((char *)v6 + *(void *)(*v6 + 136)) = 0;
  *(uint64_t *)((char *)v6 + *(void *)(*v6 + 144)) = 0;
  if (!a4)
  {
    unsigned __int8 v24 = -2;
    goto LABEL_31;
  }
  if (qword_10035A578 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_1003AC848;
  if (!qword_1003AC848)
  {
    swift_bridgeObjectRelease();
    a4 = 0;
    unsigned __int8 v24 = -2;
    goto LABEL_31;
  }
  unint64_t v47 = a1;
  char v46 = a2;
  int v18 = a5 & 1;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = 0xE000000000000000;
  id v48 = (id)qword_1003AC848;
  _StringGuts.grow(_:)(32);
  v56[0] = v50;
  v19._countAndFlagsBits = 0xD00000000000001ELL;
  v19._object = (void *)0x80000001002C44C0;
  String.append(_:)(v19);
  *(void *)&long long v50 = a3;
  *((void *)&v50 + 1) = a4;
  LOBYTE(v51) = a5 & 1;
  sub_10000A38C(&qword_10036D5C8);
  _print_unlocked<A, B>(_:_:)();
  sub_10016ABE4(*(uint64_t *)&v56[0], *((void **)&v56[0] + 1), 0, v49, (uint64_t)&off_1003274C8);
  swift_bridgeObjectRelease();
  *uint64_t v16 = a3;
  v16[1] = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v6 + v15) = v18;
  uint64_t v20 = *(void **)((char *)v6 + v14);
  *(uint64_t *)((char *)v6 + v14) = v17;
  id v21 = v48;

  swift_bridgeObjectRetain();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v23 = [v21 valueForKey:v22];

  if (v23)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v50 = 0u;
    long long v51 = 0u;
  }
  sub_10001639C((uint64_t)&v50, (uint64_t)v56, &qword_100371910);
  swift_bridgeObjectRelease();
  if (!v18)
  {
    sub_10000D728((uint64_t)v56, (uint64_t)&v50, &qword_100371910);
    sub_10000A38C(&qword_100371910);
    sub_10000A38C(&qword_10035D058);
    int v25 = swift_dynamicCast();
    if (v25) {
      unsigned __int8 v24 = v55;
    }
    else {
      unsigned __int8 v24 = -2;
    }
    if (v25) {
      a4 = v54;
    }
    else {
      a4 = 0;
    }
    a2 = v46;
    goto LABEL_25;
  }
  uint64_t v26 = sub_10000A38C(&qword_10035D058);
  uint64_t v27 = sub_1001F6990(v26);
  if (!v27)
  {
    sub_10016AE10(60, 0xD000000000000014, (void *)0x80000001002C44E0, 0, v49, (uint64_t)&off_1003274C8);
    a4 = 0;
    unsigned __int8 v24 = -2;
    a2 = v46;
    goto LABEL_25;
  }
  uint64_t v30 = v27;
  uint64_t v31 = v28;
  uint64_t v32 = v29;
  sub_10000D728((uint64_t)v56, (uint64_t)&v50, &qword_100371910);
  a2 = v46;
  if (!*((void *)&v51 + 1))
  {
    sub_10000D78C((uint64_t)&v50, &qword_100371910);
    goto LABEL_24;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_24:
    sub_10016AE10(60, 0xD00000000000001ALL, (void *)0x80000001002C4500, 0, v49, (uint64_t)&off_1003274C8);
    a4 = 0;
    unsigned __int8 v24 = -2;
    goto LABEL_25;
  }
  uint64_t v33 = (uint64_t)v54;
  unint64_t v34 = v55;
  *((void *)&v51 + 1) = v30;
  uint64_t v52 = v31;
  uint64_t v53 = v32;
  sub_10000D680((uint64_t *)&v50);
  sub_1000292C0();
  sub_10000DBEC(v33, v34);
  sub_10000A38C(&qword_10036C018);
  int v45 = swift_dynamicCast();
  if (v45) {
    unsigned __int8 v24 = v55;
  }
  else {
    unsigned __int8 v24 = -2;
  }
  if (v45) {
    a4 = v54;
  }
  else {
    a4 = 0;
  }
LABEL_25:
  *(void *)&long long v50 = 0x206C616974696E49;
  *((void *)&v50 + 1) = 0xE800000000000000;
  uint64_t v35 = v16[1];
  if (v35)
  {
    uint64_t v54 = *v16;
    unint64_t v55 = (unint64_t)v35;
    swift_bridgeObjectRetain();
    uint64_t v36 = String.init<A>(describing:)();
    unint64_t v38 = v37;
  }
  else
  {
    unint64_t v38 = 0xE300000000000000;
    uint64_t v36 = 7104878;
  }
  unint64_t v39 = v38;
  String.append(_:)(*(Swift::String *)&v36);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 8250;
  v40._object = (void *)0xE200000000000000;
  String.append(_:)(v40);
  if (v24 == 254)
  {
    v41._countAndFlagsBits = 7104878;
    v41._object = (void *)0xE300000000000000;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    sub_10016ABE4(v50, *((void **)&v50 + 1), 0, v49, (uint64_t)&off_1003274C8);

    swift_bridgeObjectRelease();
    sub_10000D78C((uint64_t)v56, &qword_100371910);
    unsigned __int8 v24 = -2;
    a1 = v47;
  }
  else
  {
    uint64_t v54 = a4;
    LOBYTE(v55) = v24;
    sub_100038A38(a4, v24);
    sub_10000A38C(&qword_10035D058);
    v42._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    sub_10016ABE4(v50, *((void **)&v50 + 1), 0, v49, (uint64_t)&off_1003274C8);

    swift_bridgeObjectRelease();
    sub_10000D78C((uint64_t)v56, &qword_100371910);
    sub_100038A38(a4, v24);
    sub_100038A4C(v47, a2);
    a1 = a4;
    a2 = v24;
  }
LABEL_31:
  *(void *)&long long v50 = a1;
  BYTE8(v50) = a2;
  sub_10000A38C(&qword_10036D5F0);
  swift_allocObject();
  v6[2] = CurrentValueSubject.init(_:)();
  *(void *)&long long v50 = 0;
  BYTE8(v50) = -2;
  sub_10000A38C(&qword_10036D5F8);
  swift_allocObject();
  uint64_t v43 = CurrentValueSubject.init(_:)();
  sub_1001F6A6C(a4, v24);
  v6[3] = v43;
  return v6;
}

uint64_t *sub_1001ECD70(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  LODWORD(v93) = a4;
  uint64_t v94 = a2;
  uint64_t v96 = *v4;
  uint64_t v8 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v98 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v84 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v90 = (char *)&v84 - v16;
  __chkstk_darwin(v15);
  uint64_t v91 = (char *)&v84 - v17;
  uint64_t v18 = sub_10000A38C((uint64_t *)&unk_100367BD0);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v99 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v97 = (uint64_t)&v84 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v95 = (uint64_t)&v84 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v87 = (char *)&v84 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v89 = (char *)&v84 - v28;
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v84 - v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = (char *)v5 + *(void *)(*v5 + 104);
  uint64_t v32 = sub_10000A38C(&qword_10036D8A0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  uint64_t v33 = *(void *)(*v5 + 112);
  *(uint64_t *)((char *)v5 + v33) = 0;
  uint64_t v34 = *(void *)(*v5 + 120);
  *((unsigned char *)v5 + v34) = 2;
  uint64_t v35 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 128));
  uint64_t *v35 = 0;
  v35[1] = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 136)) = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 144)) = 0;
  uint64_t v36 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56);
  uint64_t v101 = v9 + 56;
  v102 = v30;
  unint64_t v100 = v36;
  v36((uint64_t)v30, 1, 1, v8);
  if (!a3) {
    goto LABEL_27;
  }
  v92 = v14;
  if (qword_10035A578 != -1) {
    swift_once();
  }
  uint64_t v37 = qword_1003AC848;
  if (!qword_1003AC848)
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = v92;
    goto LABEL_27;
  }
  uint64_t v88 = v8;
  uint64_t v85 = v9;
  uint64_t v86 = a1;
  int v38 = v93 & 1;
  *(void *)&long long v103 = 0;
  *((void *)&v103 + 1) = 0xE000000000000000;
  id v84 = (id)qword_1003AC848;
  _StringGuts.grow(_:)(32);
  long long v109 = v103;
  v39._countAndFlagsBits = 0xD00000000000001ELL;
  v39._object = (void *)0x80000001002C44C0;
  String.append(_:)(v39);
  uint64_t v40 = v94;
  *(void *)&long long v103 = v94;
  *((void *)&v103 + 1) = a3;
  LOBYTE(v104) = v38;
  sub_10000A38C(&qword_10036D5C8);
  _print_unlocked<A, B>(_:_:)();
  sub_10016ABE4(v109, *((void **)&v109 + 1), 0, v96, (uint64_t)&off_1003274C8);
  swift_bridgeObjectRelease();
  uint64_t *v35 = v40;
  v35[1] = a3;
  v93 = v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v41 = v38;
  *((unsigned char *)v5 + v34) = v38;
  Swift::String v42 = *(void **)((char *)v5 + v33);
  *(uint64_t *)((char *)v5 + v33) = v37;
  id v43 = v84;

  swift_bridgeObjectRetain();
  NSString v44 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v45 = [v43 valueForKey:v44];

  if (v45)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v103 = 0u;
    long long v104 = 0u;
  }
  uint64_t v46 = (uint64_t)v102;
  sub_10001639C((uint64_t)&v103, (uint64_t)&v109, &qword_100371910);
  swift_bridgeObjectRelease();
  uint64_t v14 = v92;
  unint64_t v47 = v93;
  uint64_t v9 = v85;
  if (v41)
  {
    id v51 = v43;
    uint64_t v52 = sub_1001F6990(v88);
    if (v52)
    {
      uint64_t v55 = v52;
      uint64_t v56 = v53;
      uint64_t v57 = v54;
      sub_10000D728((uint64_t)&v109, (uint64_t)&v103, &qword_100371910);
      if (*((void *)&v104 + 1))
      {
        if (swift_dynamicCast())
        {
          uint64_t v58 = v107;
          unint64_t v59 = v108;
          *((void *)&v104 + 1) = v55;
          uint64_t v105 = v56;
          uint64_t v106 = v57;
          sub_10000D680((uint64_t *)&v103);
          sub_1000292C0();
          uint64_t v79 = (uint64_t)v102;
          sub_10000D78C((uint64_t)v102, (uint64_t *)&unk_100367BD0);
          uint64_t v80 = v58;
          uint64_t v46 = v79;
          sub_10000DBEC(v80, v59);
          sub_10000A38C(&qword_10036C018);
          uint64_t v81 = (uint64_t)v87;
          uint64_t v82 = v88;
          int v83 = swift_dynamicCast();
          v100(v81, v83 ^ 1u, 1, v82);
          sub_10001639C(v81, v46, (uint64_t *)&unk_100367BD0);
LABEL_19:
          id v43 = v51;
          goto LABEL_20;
        }
      }
      else
      {
        sub_10000D78C((uint64_t)&v103, &qword_100371910);
      }
      uint64_t v61 = 0xD00000000000001ALL;
      uint64_t v60 = (void *)0x80000001002C4500;
    }
    else
    {
      uint64_t v60 = (void *)0x80000001002C44E0;
      uint64_t v61 = 0xD000000000000014;
    }
    sub_10016AE10(60, v61, v60, 0, v96, (uint64_t)&off_1003274C8);
    goto LABEL_19;
  }
  sub_10000D78C(v46, (uint64_t *)&unk_100367BD0);
  sub_10000D728((uint64_t)&v109, (uint64_t)&v103, &qword_100371910);
  sub_10000A38C(&qword_100371910);
  uint64_t v48 = (uint64_t)v89;
  uint64_t v49 = v88;
  int v50 = swift_dynamicCast();
  v100(v48, v50 ^ 1u, 1, v49);
  sub_10001639C(v48, v46, (uint64_t *)&unk_100367BD0);
LABEL_20:
  uint64_t v62 = 7104878;
  *(void *)&long long v103 = 0x206C616974696E49;
  *((void *)&v103 + 1) = 0xE800000000000000;
  unint64_t v63 = v47[1];
  if (v63)
  {
    uint64_t v107 = *v47;
    unint64_t v108 = v63;
    swift_bridgeObjectRetain();
    uint64_t v64 = String.init<A>(describing:)();
    unint64_t v66 = v65;
  }
  else
  {
    unint64_t v66 = 0xE300000000000000;
    uint64_t v64 = 7104878;
  }
  unint64_t v67 = v66;
  String.append(_:)(*(Swift::String *)&v64);
  swift_bridgeObjectRelease();
  v68._countAndFlagsBits = 8250;
  v68._object = (void *)0xE200000000000000;
  String.append(_:)(v68);
  uint64_t v69 = v95;
  sub_10000D728(v46, v95, (uint64_t *)&unk_100367BD0);
  uint64_t v8 = v88;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v69, 1, v88) == 1)
  {
    uint64_t v70 = (void *)0xE300000000000000;
  }
  else
  {
    uint64_t v71 = v91;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v91, v69, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v90, v71, v8);
    uint64_t v62 = String.init<A>(describing:)();
    uint64_t v70 = v72;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v71, v8);
  }
  v73._countAndFlagsBits = v62;
  v73._object = v70;
  String.append(_:)(v73);
  swift_bridgeObjectRelease();
  sub_10016ABE4(v103, *((void **)&v103 + 1), 0, v96, (uint64_t)&off_1003274C8);

  swift_bridgeObjectRelease();
  sub_10000D78C((uint64_t)&v109, &qword_100371910);
  a1 = v86;
LABEL_27:
  uint64_t v74 = (uint64_t)v102;
  uint64_t v75 = v97;
  sub_10000D728((uint64_t)v102, v97, (uint64_t *)&unk_100367BD0);
  int v76 = v98;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v98, a1, v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v75, 1, v8) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v76, v8);
    sub_10000D78C(v75, (uint64_t *)&unk_100367BD0);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v76, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v14, v75, v8);
  }
  sub_10000A38C(&qword_10036D8A8);
  swift_allocObject();
  v5[2] = CurrentValueSubject.init(_:)();
  v100((uint64_t)v99, 1, 1, v8);
  sub_10000A38C(&qword_10036D8B0);
  swift_allocObject();
  uint64_t v77 = CurrentValueSubject.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  sub_10000D78C(v74, (uint64_t *)&unk_100367BD0);
  v5[3] = v77;
  return v5;
}

uint64_t *sub_1001ED8D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v5;
  swift_bridgeObjectRelease();
  uint64_t v11 = (char *)v5 + *(void *)(*v5 + 104);
  uint64_t v12 = sub_10000A38C(&qword_10036D6C0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = *(void *)(*v5 + 112);
  *(uint64_t *)((char *)v5 + v13) = 0;
  uint64_t v14 = *(void *)(*v5 + 120);
  *((unsigned char *)v5 + v14) = 2;
  uint64_t v15 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 128));
  *uint64_t v15 = 0;
  v15[1] = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 136)) = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 144)) = 0;
  if (!a3) {
    goto LABEL_27;
  }
  if (qword_10035A578 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_1003AC848;
  if (!qword_1003AC848)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  uint64_t v48 = a1;
  uint64_t v50 = v14;
  uint64_t v17 = v10;
  uint64_t v18 = v15;
  int v19 = a4 & 1;
  *(void *)&long long v51 = 0;
  *((void *)&v51 + 1) = 0xE000000000000000;
  id v49 = (id)qword_1003AC848;
  _StringGuts.grow(_:)(32);
  v57[0] = v51;
  v20._countAndFlagsBits = 0xD00000000000001ELL;
  v20._object = (void *)0x80000001002C44C0;
  String.append(_:)(v20);
  *(void *)&long long v51 = a2;
  *((void *)&v51 + 1) = a3;
  LOBYTE(v52) = a4 & 1;
  sub_10000A38C(&qword_10036D5C8);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v47 = v17;
  sub_10016ABE4(*(uint64_t *)&v57[0], *((void **)&v57[0] + 1), 0, v17, (uint64_t)&off_1003274C8);
  swift_bridgeObjectRelease();
  *uint64_t v18 = a2;
  v18[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v5 + v50) = v19;
  uint64_t v21 = *(void **)((char *)v5 + v13);
  *(uint64_t *)((char *)v5 + v13) = v16;
  id v22 = v49;

  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v24 = [v22 valueForKey:v23];

  if (v24)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v51 = 0u;
    long long v52 = 0u;
  }
  sub_10001639C((uint64_t)&v51, (uint64_t)v57, &qword_100371910);
  swift_bridgeObjectRelease();
  if (!v19)
  {
    sub_10000D728((uint64_t)v57, (uint64_t)&v51, &qword_100371910);
    sub_10000A38C(&qword_100371910);
    sub_10000A38C((uint64_t *)&unk_10036C0B0);
    if (swift_dynamicCast()) {
      uint64_t v25 = v55;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = v17;
    goto LABEL_21;
  }
  uint64_t v27 = sub_10000A38C((uint64_t *)&unk_10036C0B0);
  uint64_t v28 = sub_1001F6990(v27);
  if (!v28)
  {
    uint64_t v26 = v17;
    sub_10016AE10(60, 0xD000000000000014, (void *)0x80000001002C44E0, 0, v17, (uint64_t)&off_1003274C8);
    uint64_t v25 = 0;
    goto LABEL_21;
  }
  uint64_t v31 = v28;
  uint64_t v32 = v29;
  uint64_t v33 = v30;
  sub_10000D728((uint64_t)v57, (uint64_t)&v51, &qword_100371910);
  if (!*((void *)&v52 + 1))
  {
    sub_10000D78C((uint64_t)&v51, &qword_100371910);
    goto LABEL_20;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_20:
    uint64_t v26 = v17;
    sub_10016AE10(60, 0xD00000000000001ALL, (void *)0x80000001002C4500, 0, v17, (uint64_t)&off_1003274C8);
    uint64_t v25 = 0;
    goto LABEL_21;
  }
  uint64_t v35 = v55;
  unint64_t v34 = v56;
  *((void *)&v52 + 1) = v31;
  uint64_t v53 = v32;
  uint64_t v54 = v33;
  sub_10000D680((uint64_t *)&v51);
  sub_1000292C0();
  sub_10000DBEC(v35, v34);
  sub_10000A38C(&qword_10036C018);
  if (swift_dynamicCast()) {
    uint64_t v25 = v55;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = v47;
  a1 = v48;
LABEL_21:
  *(void *)&long long v51 = 0x206C616974696E49;
  *((void *)&v51 + 1) = 0xE800000000000000;
  unint64_t v36 = v18[1];
  if (v36)
  {
    uint64_t v55 = *v18;
    unint64_t v56 = v36;
    swift_bridgeObjectRetain();
    uint64_t v37 = String.init<A>(describing:)();
    unint64_t v39 = v38;
  }
  else
  {
    unint64_t v39 = 0xE300000000000000;
    uint64_t v37 = 7104878;
  }
  unint64_t v40 = v39;
  String.append(_:)(*(Swift::String *)&v37);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 8250;
  v41._object = (void *)0xE200000000000000;
  String.append(_:)(v41);
  if (v25)
  {
    uint64_t v55 = v25;
    swift_bridgeObjectRetain();
    sub_10000A38C((uint64_t *)&unk_10036C0B0);
    v42._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    sub_10016ABE4(v51, *((void **)&v51 + 1), 0, v26, (uint64_t)&off_1003274C8);

    swift_bridgeObjectRelease();
    sub_10000D78C((uint64_t)v57, &qword_100371910);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1 = v25;
  }
  else
  {
    v43._countAndFlagsBits = 7104878;
    v43._object = (void *)0xE300000000000000;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    sub_10016ABE4(v51, *((void **)&v51 + 1), 0, v26, (uint64_t)&off_1003274C8);

    swift_bridgeObjectRelease();
    sub_10000D78C((uint64_t)v57, &qword_100371910);
  }
LABEL_27:
  *(void *)&long long v51 = a1;
  sub_10000A38C(&qword_10036D6C8);
  swift_allocObject();
  v5[2] = CurrentValueSubject.init(_:)();
  *(void *)&long long v51 = 0;
  sub_10000A38C(&qword_10035CA48);
  swift_allocObject();
  uint64_t v44 = CurrentValueSubject.init(_:)();
  swift_bridgeObjectRelease();
  v5[3] = v44;
  return v5;
}

uint64_t *sub_1001EE024(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  int v9 = a1;
  uint64_t v51 = *v5;
  uint64_t v10 = HIDWORD(a1) & 1;
  swift_bridgeObjectRelease();
  uint64_t v11 = (char *)v5 + *(void *)(*v5 + 104);
  uint64_t v12 = sub_10000A38C(&qword_10036D738);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = *(void *)(*v5 + 112);
  *(uint64_t *)((char *)v5 + v13) = 0;
  uint64_t v14 = *(void *)(*v5 + 120);
  *((unsigned char *)v5 + v14) = 2;
  uint64_t v15 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 128));
  *uint64_t v15 = 0;
  v15[1] = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 136)) = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 144)) = 0;
  if (!a3) {
    goto LABEL_29;
  }
  if (qword_10035A578 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_1003AC848;
  if (!qword_1003AC848)
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  int v48 = v9;
  char v49 = v10;
  int v17 = a4 & 1;
  *(void *)&long long v52 = 0;
  *((void *)&v52 + 1) = 0xE000000000000000;
  id v50 = (id)qword_1003AC848;
  _StringGuts.grow(_:)(32);
  v58[0] = v52;
  v18._countAndFlagsBits = 0xD00000000000001ELL;
  v18._object = (void *)0x80000001002C44C0;
  String.append(_:)(v18);
  *(void *)&long long v52 = a2;
  *((void *)&v52 + 1) = a3;
  LOBYTE(v53) = a4 & 1;
  sub_10000A38C(&qword_10036D5C8);
  _print_unlocked<A, B>(_:_:)();
  sub_10016ABE4(*(uint64_t *)&v58[0], *((void **)&v58[0] + 1), 0, v51, (uint64_t)&off_1003274C8);
  swift_bridgeObjectRelease();
  *uint64_t v15 = a2;
  v15[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v5 + v14) = v17;
  int v19 = *(void **)((char *)v5 + v13);
  *(uint64_t *)((char *)v5 + v13) = v16;
  id v20 = v50;

  swift_bridgeObjectRetain();
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v22 = [v20 valueForKey:v21];

  if (v22)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v52 = 0u;
    long long v53 = 0u;
  }
  sub_10001639C((uint64_t)&v52, (uint64_t)v58, &qword_100371910);
  swift_bridgeObjectRelease();
  if (!v17)
  {
    sub_10000D728((uint64_t)v58, (uint64_t)&v52, &qword_100371910);
    sub_10000A38C(&qword_100371910);
    sub_10000A38C((uint64_t *)&unk_10036C110);
    int v23 = swift_dynamicCast();
    if (v23) {
      unint64_t v24 = v56 | ((unint64_t)BYTE4(v56) << 32);
    }
    else {
      unint64_t v24 = 0;
    }
    char v25 = v23 ^ 1;
    uint64_t v26 = HIDWORD(v24) & 1;
    goto LABEL_19;
  }
  uint64_t v27 = sub_10000A38C((uint64_t *)&unk_10036C110);
  uint64_t v28 = sub_1001F6990(v27);
  if (v28)
  {
    uint64_t v31 = v28;
    uint64_t v32 = v29;
    uint64_t v33 = v30;
    sub_10000D728((uint64_t)v58, (uint64_t)&v52, &qword_100371910);
    if (*((void *)&v53 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v35 = v56;
        unint64_t v34 = v57;
        *((void *)&v53 + 1) = v31;
        uint64_t v54 = v32;
        uint64_t v55 = v33;
        sub_10000D680((uint64_t *)&v52);
        sub_1000292C0();
        sub_10000DBEC(v35, v34);
        sub_10000A38C(&qword_10036C018);
        int v47 = swift_dynamicCast();
        if (v47) {
          unint64_t v24 = v56 | ((unint64_t)BYTE4(v56) << 32);
        }
        else {
          unint64_t v24 = 0;
        }
        char v25 = v47 ^ 1;
        uint64_t v26 = HIDWORD(v24) & 1;
        goto LABEL_19;
      }
    }
    else
    {
      sub_10000D78C((uint64_t)&v52, &qword_100371910);
    }
    LOBYTE(v10) = v49;
    sub_10016AE10(60, 0xD00000000000001ALL, (void *)0x80000001002C4500, 0, v51, (uint64_t)&off_1003274C8);
    LODWORD(v24) = 0;
    LOBYTE(v26) = 0;
    char v25 = 1;
    goto LABEL_22;
  }
  sub_10016AE10(60, 0xD000000000000014, (void *)0x80000001002C44E0, 0, v51, (uint64_t)&off_1003274C8);
  LODWORD(v24) = 0;
  LOBYTE(v26) = 0;
  char v25 = 1;
LABEL_19:
  LOBYTE(v10) = v49;
LABEL_22:
  uint64_t v36 = 7104878;
  *(void *)&long long v52 = 0x206C616974696E49;
  *((void *)&v52 + 1) = 0xE800000000000000;
  unint64_t v37 = v15[1];
  if (v37)
  {
    uint64_t v56 = *v15;
    unint64_t v57 = v37;
    swift_bridgeObjectRetain();
    uint64_t v38 = String.init<A>(describing:)();
    unint64_t v40 = v39;
  }
  else
  {
    unint64_t v40 = 0xE300000000000000;
    uint64_t v38 = 7104878;
  }
  unint64_t v41 = v40;
  String.append(_:)(*(Swift::String *)&v38);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = 8250;
  v42._object = (void *)0xE200000000000000;
  String.append(_:)(v42);
  if (v25)
  {
    Swift::String v43 = (void *)0xE300000000000000;
    int v9 = v48;
  }
  else
  {
    LODWORD(v56) = v24;
    BYTE4(v56) = v26;
    sub_10000A38C((uint64_t *)&unk_10036C110);
    uint64_t v36 = String.init<A>(describing:)();
    Swift::String v43 = v44;
    LOBYTE(v10) = v26;
    int v9 = v24;
  }
  v45._countAndFlagsBits = v36;
  v45._object = v43;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  sub_10016ABE4(v52, *((void **)&v52 + 1), 0, v51, (uint64_t)&off_1003274C8);

  swift_bridgeObjectRelease();
  sub_10000D78C((uint64_t)v58, &qword_100371910);
LABEL_29:
  LODWORD(v52) = v9;
  BYTE4(v52) = v10;
  sub_10000A38C(&qword_10036D740);
  swift_allocObject();
  v5[2] = CurrentValueSubject.init(_:)();
  LODWORD(v52) = 0;
  WORD2(v52) = 256;
  sub_10000A38C(&qword_10036D748);
  swift_allocObject();
  v5[3] = CurrentValueSubject.init(_:)();
  return v5;
}

uint64_t *sub_1001EE71C(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v5;
  swift_bridgeObjectRelease();
  uint64_t v11 = (char *)v5 + *(void *)(*v5 + 104);
  uint64_t v12 = sub_10000A38C(&qword_10036D728);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = *(void *)(*v5 + 112);
  *(uint64_t *)((char *)v5 + v13) = 0;
  uint64_t v14 = *(void *)(*v5 + 120);
  *((unsigned char *)v5 + v14) = 2;
  uint64_t v15 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 128));
  *uint64_t v15 = 0;
  v15[1] = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 136)) = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 144)) = 0;
  if (!a3) {
    goto LABEL_27;
  }
  if (qword_10035A578 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_1003AC848;
  if (!qword_1003AC848)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  char v47 = a1;
  uint64_t v49 = v14;
  uint64_t v17 = v10;
  Swift::String v18 = v15;
  int v19 = a4 & 1;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = 0xE000000000000000;
  id v48 = (id)qword_1003AC848;
  _StringGuts.grow(_:)(32);
  v56[0] = v50;
  v20._countAndFlagsBits = 0xD00000000000001ELL;
  v20._object = (void *)0x80000001002C44C0;
  String.append(_:)(v20);
  *(void *)&long long v50 = a2;
  *((void *)&v50 + 1) = a3;
  LOBYTE(v51) = a4 & 1;
  sub_10000A38C(&qword_10036D5C8);
  _print_unlocked<A, B>(_:_:)();
  sub_10016ABE4(*(uint64_t *)&v56[0], *((void **)&v56[0] + 1), 0, v17, (uint64_t)&off_1003274C8);
  swift_bridgeObjectRelease();
  *Swift::String v18 = a2;
  v18[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v5 + v49) = v19;
  NSString v21 = *(void **)((char *)v5 + v13);
  *(uint64_t *)((char *)v5 + v13) = v16;
  id v22 = v48;

  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v24 = [v22 valueForKey:v23];

  if (v24)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v50 = 0u;
    long long v51 = 0u;
  }
  sub_10001639C((uint64_t)&v50, (uint64_t)v56, &qword_100371910);
  swift_bridgeObjectRelease();
  if (!v19)
  {
    sub_10000D728((uint64_t)v56, (uint64_t)&v50, &qword_100371910);
    sub_10000A38C(&qword_100371910);
    sub_10000A38C(&qword_10035AC68);
    if (swift_dynamicCast()) {
      char v25 = v54;
    }
    else {
      char v25 = 6;
    }
    goto LABEL_20;
  }
  uint64_t v26 = sub_10000A38C(&qword_10035AC68);
  uint64_t v27 = sub_1001F6990(v26);
  if (!v27)
  {
    sub_10016AE10(60, 0xD000000000000014, (void *)0x80000001002C44E0, 0, v17, (uint64_t)&off_1003274C8);
    char v25 = 6;
    goto LABEL_20;
  }
  uint64_t v30 = v27;
  uint64_t v31 = v28;
  uint64_t v32 = v29;
  sub_10000D728((uint64_t)v56, (uint64_t)&v50, &qword_100371910);
  if (!*((void *)&v51 + 1))
  {
    sub_10000D78C((uint64_t)&v50, &qword_100371910);
    goto LABEL_19;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    sub_10016AE10(60, 0xD00000000000001ALL, (void *)0x80000001002C4500, 0, v17, (uint64_t)&off_1003274C8);
    char v25 = 6;
    goto LABEL_20;
  }
  uint64_t v33 = v54;
  unint64_t v34 = v55;
  *((void *)&v51 + 1) = v30;
  uint64_t v52 = v31;
  uint64_t v53 = v32;
  sub_10000D680((uint64_t *)&v50);
  sub_1000292C0();
  sub_10000DBEC(v33, v34);
  sub_10000A38C(&qword_10036C018);
  if (swift_dynamicCast()) {
    char v25 = v54;
  }
  else {
    char v25 = 6;
  }
  a1 = v47;
LABEL_20:
  uint64_t v35 = 7104878;
  *(void *)&long long v50 = 0x206C616974696E49;
  *((void *)&v50 + 1) = 0xE800000000000000;
  unint64_t v36 = v18[1];
  if (v36)
  {
    uint64_t v54 = *v18;
    unint64_t v55 = v36;
    swift_bridgeObjectRetain();
    uint64_t v37 = String.init<A>(describing:)();
    unint64_t v39 = v38;
  }
  else
  {
    unint64_t v39 = 0xE300000000000000;
    uint64_t v37 = 7104878;
  }
  unint64_t v40 = v39;
  String.append(_:)(*(Swift::String *)&v37);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 8250;
  v41._object = (void *)0xE200000000000000;
  String.append(_:)(v41);
  if (v25 == 6)
  {
    Swift::String v42 = (void *)0xE300000000000000;
  }
  else
  {
    LOBYTE(v54) = v25;
    sub_10000A38C(&qword_10035AC68);
    uint64_t v35 = String.init<A>(describing:)();
    Swift::String v42 = v43;
    a1 = v25;
  }
  v44._countAndFlagsBits = v35;
  v44._object = v42;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  sub_10016ABE4(v50, *((void **)&v50 + 1), 0, v17, (uint64_t)&off_1003274C8);

  swift_bridgeObjectRelease();
  sub_10000D78C((uint64_t)v56, &qword_100371910);
LABEL_27:
  LOBYTE(v50) = a1;
  sub_10000A38C(&qword_100364A68);
  swift_allocObject();
  v5[2] = CurrentValueSubject.init(_:)();
  LOBYTE(v50) = 6;
  sub_10000A38C(&qword_10036D730);
  swift_allocObject();
  v5[3] = CurrentValueSubject.init(_:)();
  return v5;
}

uint64_t *sub_1001EEE24(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v5;
  swift_bridgeObjectRelease();
  uint64_t v11 = (char *)v5 + *(void *)(*v5 + 104);
  uint64_t v12 = sub_10000A38C(&qword_10036D648);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = *(void *)(*v5 + 112);
  *(uint64_t *)((char *)v5 + v13) = 0;
  uint64_t v14 = *(void *)(*v5 + 120);
  *((unsigned char *)v5 + v14) = 2;
  uint64_t v15 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 128));
  *uint64_t v15 = 0;
  v15[1] = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 136)) = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 144)) = 0;
  if (!a3) {
    goto LABEL_25;
  }
  if (qword_10035A578 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_1003AC848;
  if (!qword_1003AC848)
  {
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  uint64_t v48 = a1;
  uint64_t v50 = v14;
  uint64_t v17 = v10;
  Swift::String v18 = v15;
  int v19 = a4 & 1;
  *(void *)&long long v51 = 0;
  *((void *)&v51 + 1) = 0xE000000000000000;
  id v49 = (id)qword_1003AC848;
  _StringGuts.grow(_:)(32);
  v57[0] = v51;
  v20._countAndFlagsBits = 0xD00000000000001ELL;
  v20._object = (void *)0x80000001002C44C0;
  String.append(_:)(v20);
  *(void *)&long long v51 = a2;
  *((void *)&v51 + 1) = a3;
  LOBYTE(v52) = a4 & 1;
  sub_10000A38C(&qword_10036D5C8);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v47 = v17;
  sub_10016ABE4(*(uint64_t *)&v57[0], *((void **)&v57[0] + 1), 0, v17, (uint64_t)&off_1003274C8);
  swift_bridgeObjectRelease();
  *Swift::String v18 = a2;
  v18[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v5 + v50) = v19;
  NSString v21 = *(void **)((char *)v5 + v13);
  *(uint64_t *)((char *)v5 + v13) = v16;
  id v22 = v49;

  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v24 = [v22 valueForKey:v23];

  if (v24)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v51 = 0u;
    long long v52 = 0u;
  }
  sub_10001639C((uint64_t)&v51, (uint64_t)v57, &qword_100371910);
  swift_bridgeObjectRelease();
  if (!v19)
  {
    sub_10000D728((uint64_t)v57, (uint64_t)&v51, &qword_100371910);
    sub_10000A38C(&qword_100371910);
    sub_10000A38C((uint64_t *)&unk_10036C080);
    if (swift_dynamicCast()) {
      uint64_t v25 = v55;
    }
    else {
      uint64_t v25 = 1;
    }
    goto LABEL_20;
  }
  uint64_t v26 = sub_10000A38C((uint64_t *)&unk_10036C080);
  uint64_t v27 = sub_1001F6990(v26);
  if (!v27)
  {
    sub_10016AE10(60, 0xD000000000000014, (void *)0x80000001002C44E0, 0, v17, (uint64_t)&off_1003274C8);
    uint64_t v25 = 1;
    goto LABEL_20;
  }
  uint64_t v30 = v27;
  uint64_t v31 = v28;
  uint64_t v32 = v29;
  sub_10000D728((uint64_t)v57, (uint64_t)&v51, &qword_100371910);
  if (!*((void *)&v52 + 1))
  {
    sub_10000D78C((uint64_t)&v51, &qword_100371910);
    goto LABEL_19;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    uint64_t v17 = v47;
    sub_10016AE10(60, 0xD00000000000001ALL, (void *)0x80000001002C4500, 0, v47, (uint64_t)&off_1003274C8);
    uint64_t v25 = 1;
    goto LABEL_20;
  }
  uint64_t v34 = v55;
  unint64_t v33 = v56;
  *((void *)&v52 + 1) = v30;
  uint64_t v53 = v31;
  uint64_t v54 = v32;
  sub_10000D680((uint64_t *)&v51);
  sub_1000292C0();
  sub_10000DBEC(v34, v33);
  sub_10000A38C(&qword_10036C018);
  if (swift_dynamicCast()) {
    uint64_t v25 = v55;
  }
  else {
    uint64_t v25 = 1;
  }
  uint64_t v17 = v47;
  a1 = v48;
LABEL_20:
  *(void *)&long long v51 = 0x206C616974696E49;
  *((void *)&v51 + 1) = 0xE800000000000000;
  unint64_t v35 = v18[1];
  if (v35)
  {
    uint64_t v55 = *v18;
    unint64_t v56 = v35;
    swift_bridgeObjectRetain();
    uint64_t v36 = String.init<A>(describing:)();
    unint64_t v38 = v37;
  }
  else
  {
    unint64_t v38 = 0xE300000000000000;
    uint64_t v36 = 7104878;
  }
  unint64_t v39 = v38;
  String.append(_:)(*(Swift::String *)&v36);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 8250;
  v40._object = (void *)0xE200000000000000;
  String.append(_:)(v40);
  if (v25 != 1)
  {
    uint64_t v55 = v25;
    swift_unknownObjectRetain();
    sub_10000A38C((uint64_t *)&unk_10036C080);
    v45._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    sub_10016ABE4(v51, *((void **)&v51 + 1), 0, v17, (uint64_t)&off_1003274C8);

    swift_bridgeObjectRelease();
    sub_10000D78C((uint64_t)v57, &qword_100371910);
    swift_unknownObjectRetain();
    uint64_t v42 = v25;
    goto LABEL_26;
  }
  v41._countAndFlagsBits = 7104878;
  v41._object = (void *)0xE300000000000000;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  sub_10016ABE4(v51, *((void **)&v51 + 1), 0, v17, (uint64_t)&off_1003274C8);

  swift_bridgeObjectRelease();
  sub_10000D78C((uint64_t)v57, &qword_100371910);
LABEL_25:
  swift_unknownObjectRetain();
  uint64_t v42 = 1;
  uint64_t v25 = a1;
LABEL_26:
  *(void *)&long long v51 = v25;
  sub_10000A38C(&qword_10035E148);
  swift_allocObject();
  v5[2] = CurrentValueSubject.init(_:)();
  *(void *)&long long v51 = 1;
  sub_10000A38C(&qword_10036D650);
  swift_allocObject();
  uint64_t v43 = CurrentValueSubject.init(_:)();
  swift_unknownObjectRelease();
  sub_1001F6A80(v42);
  v5[3] = v43;
  return v5;
}

uint64_t *sub_1001EF584(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  int v9 = (void *)a1;
  uint64_t v59 = *v5;
  sub_10001639C(a1, (uint64_t)v69, (uint64_t *)&unk_10036C120);
  uint64_t v57 = v69[1];
  uint64_t v58 = v69[0];
  uint64_t v55 = v69[3];
  uint64_t v56 = v69[2];
  uint64_t v54 = v69[4];
  swift_bridgeObjectRelease();
  uint64_t v10 = (char *)v5 + *(void *)(*v5 + 104);
  uint64_t v11 = sub_10000A38C(&qword_10036D7A8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = *(void *)(*v5 + 112);
  *(uint64_t *)((char *)v5 + v12) = 0;
  uint64_t v13 = *(void *)(*v5 + 120);
  *((unsigned char *)v5 + v13) = 2;
  uint64_t v14 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 128));
  void *v14 = 0;
  v14[1] = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 136)) = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 144)) = 0;
  if (!a3)
  {
    sub_1000CA448(v9, (void (*)(void, void, void, void, void))sub_1000CA400);
LABEL_9:
    uint64_t v22 = 0;
    uint64_t v23 = 2;
    goto LABEL_31;
  }
  uint64_t v53 = v9;
  if (qword_10035A578 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_1003AC848;
  if (!qword_1003AC848)
  {
    swift_bridgeObjectRelease();
    sub_1000CA448(v9, (void (*)(void, void, void, void, void))sub_1000CA400);
    a3 = 0;
    goto LABEL_9;
  }
  int v16 = a4 & 1;
  *(void *)&long long v64 = 0;
  *((void *)&v64 + 1) = 0xE000000000000000;
  id v51 = (id)qword_1003AC848;
  _StringGuts.grow(_:)(32);
  long long v60 = v64;
  v17._countAndFlagsBits = 0xD00000000000001ELL;
  v17._object = (void *)0x80000001002C44C0;
  String.append(_:)(v17);
  *(void *)&long long v64 = a2;
  *((void *)&v64 + 1) = a3;
  LOBYTE(v65) = a4 & 1;
  sub_10000A38C(&qword_10036D5C8);
  _print_unlocked<A, B>(_:_:)();
  sub_10016ABE4(v60, *((void **)&v60 + 1), 0, v59, (uint64_t)&off_1003274C8);
  swift_bridgeObjectRelease();
  void *v14 = a2;
  v14[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v5 + v13) = v16;
  Swift::String v18 = *(void **)((char *)v5 + v12);
  *(uint64_t *)((char *)v5 + v12) = v15;
  id v19 = v51;

  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v21 = [v19 valueForKey:v20];

  if (v21)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v64 = 0u;
    long long v65 = 0u;
  }
  sub_10001639C((uint64_t)&v64, (uint64_t)v68, &qword_100371910);
  swift_bridgeObjectRelease();
  long long v52 = v19;
  if (v16)
  {
    uint64_t v26 = sub_10000A38C((uint64_t *)&unk_10036C120);
    uint64_t v27 = sub_1001F6990(v26);
    if (v27)
    {
      uint64_t v30 = v27;
      uint64_t v31 = v28;
      uint64_t v32 = v29;
      sub_10000D728((uint64_t)v68, (uint64_t)&v64, &qword_100371910);
      if (*((void *)&v65 + 1))
      {
        if (swift_dynamicCast())
        {
          *((void *)&v65 + 1) = v30;
          uint64_t v66 = v31;
          uint64_t v67 = v32;
          sub_10000D680((uint64_t *)&v64);
          sub_1000292C0();
          sub_10000DBEC(v60, *((unint64_t *)&v60 + 1));
          sub_10000A38C(&qword_10036C018);
          if (swift_dynamicCast())
          {
            uint64_t v22 = *((void *)&v60 + 1);
            a3 = v60;
            uint64_t v23 = v61;
            uint64_t v24 = v62;
            uint64_t v25 = v63;
            goto LABEL_26;
          }
          goto LABEL_24;
        }
      }
      else
      {
        sub_10000D78C((uint64_t)&v64, &qword_100371910);
      }
      uint64_t v34 = 0xD00000000000001ALL;
      unint64_t v33 = (void *)0x80000001002C4500;
    }
    else
    {
      unint64_t v33 = (void *)0x80000001002C44E0;
      uint64_t v34 = 0xD000000000000014;
    }
    sub_10016AE10(60, v34, v33, 0, v59, (uint64_t)&off_1003274C8);
    a3 = 0;
    uint64_t v22 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
LABEL_25:
    uint64_t v23 = 2;
    goto LABEL_26;
  }
  sub_10000D728((uint64_t)v68, (uint64_t)&v60, &qword_100371910);
  sub_10000A38C(&qword_100371910);
  sub_10000A38C((uint64_t *)&unk_10036C120);
  if (!swift_dynamicCast())
  {
LABEL_24:
    uint64_t v25 = 0;
    uint64_t v24 = 0;
    uint64_t v22 = 0;
    a3 = 0;
    goto LABEL_25;
  }
  uint64_t v22 = *((void *)&v64 + 1);
  a3 = v64;
  uint64_t v24 = *((void *)&v65 + 1);
  uint64_t v23 = v65;
  uint64_t v25 = v66;
LABEL_26:
  *(void *)&long long v60 = 0x206C616974696E49;
  *((void *)&v60 + 1) = 0xE800000000000000;
  uint64_t v36 = v14[1];
  if (v36)
  {
    *(void *)&long long v64 = *v14;
    *((void *)&v64 + 1) = v36;
    swift_bridgeObjectRetain();
    uint64_t v37 = String.init<A>(describing:)();
    unint64_t v39 = v38;
  }
  else
  {
    unint64_t v39 = 0xE300000000000000;
    uint64_t v37 = 7104878;
  }
  int v9 = v53;
  unint64_t v40 = v39;
  String.append(_:)(*(Swift::String *)&v37);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 8250;
  v41._object = (void *)0xE200000000000000;
  String.append(_:)(v41);
  if (v23 != 2)
  {
    *(void *)&long long v64 = a3;
    *((void *)&v64 + 1) = v22;
    *(void *)&long long v65 = v23;
    *((void *)&v65 + 1) = v24;
    uint64_t v66 = v25;
    sub_1000CA400(a3, v22, v23);
    sub_10000A38C((uint64_t *)&unk_10036C120);
    v50._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    sub_10016ABE4(v60, *((void **)&v60 + 1), 0, v59, (uint64_t)&off_1003274C8);

    swift_bridgeObjectRelease();
    sub_10000D78C((uint64_t)v68, &qword_100371910);
    sub_1000CA400(a3, v22, v23);
    uint64_t v43 = a3;
    uint64_t v44 = v22;
    uint64_t v45 = v23;
    uint64_t v46 = v24;
    uint64_t v47 = v25;
    goto LABEL_32;
  }
  v42._countAndFlagsBits = 7104878;
  v42._object = (void *)0xE300000000000000;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  sub_10016ABE4(v60, *((void **)&v60 + 1), 0, v59, (uint64_t)&off_1003274C8);

  swift_bridgeObjectRelease();
  sub_10000D78C((uint64_t)v68, &qword_100371910);
  sub_1000CA448(v53, (void (*)(void, void, void, void, void))sub_1000CA400);
LABEL_31:
  uint64_t v44 = v57;
  uint64_t v43 = v58;
  uint64_t v46 = v55;
  uint64_t v45 = v56;
  uint64_t v47 = v54;
LABEL_32:
  *(void *)&long long v64 = v43;
  *((void *)&v64 + 1) = v44;
  *(void *)&long long v65 = v45;
  *((void *)&v65 + 1) = v46;
  uint64_t v66 = v47;
  sub_10000A38C(&qword_10036D7B0);
  swift_allocObject();
  v5[2] = CurrentValueSubject.init(_:)();
  long long v64 = 0uLL;
  uint64_t v66 = 0;
  long long v65 = 2uLL;
  sub_10000A38C(&qword_10036D7B8);
  swift_allocObject();
  uint64_t v48 = CurrentValueSubject.init(_:)();
  sub_1000CA448(v9, (void (*)(void, void, void, void, void))sub_1000CA484);
  sub_1001F6D2C(a3, v22, v23);
  v5[3] = v48;
  return v5;
}

uint64_t *sub_1001EFDD8(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v45 = *v5;
  swift_bridgeObjectRelease();
  uint64_t v10 = (char *)v5 + *(void *)(*v5 + 104);
  uint64_t v11 = sub_10000A38C(&qword_10036D808);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = *(void *)(*v5 + 112);
  *(uint64_t *)((char *)v5 + v12) = 0;
  uint64_t v13 = *(void *)(*v5 + 120);
  *((unsigned char *)v5 + v13) = 2;
  uint64_t v14 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 128));
  uint64_t *v14 = 0;
  v14[1] = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 136)) = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 144)) = 0;
  if (!a3) {
    goto LABEL_29;
  }
  if (qword_10035A578 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_1003AC848;
  if (!qword_1003AC848)
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  char v43 = a1;
  int v16 = a4 & 1;
  *(void *)&long long v46 = 0;
  *((void *)&v46 + 1) = 0xE000000000000000;
  id v44 = (id)qword_1003AC848;
  _StringGuts.grow(_:)(32);
  v52[0] = v46;
  v17._countAndFlagsBits = 0xD00000000000001ELL;
  v17._object = (void *)0x80000001002C44C0;
  String.append(_:)(v17);
  *(void *)&long long v46 = a2;
  *((void *)&v46 + 1) = a3;
  LOBYTE(v47) = a4 & 1;
  sub_10000A38C(&qword_10036D5C8);
  _print_unlocked<A, B>(_:_:)();
  sub_10016ABE4(*(uint64_t *)&v52[0], *((void **)&v52[0] + 1), 0, v45, (uint64_t)&off_1003274C8);
  swift_bridgeObjectRelease();
  uint64_t *v14 = a2;
  v14[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v5 + v13) = v16;
  Swift::String v18 = *(void **)((char *)v5 + v12);
  *(uint64_t *)((char *)v5 + v12) = v15;
  id v19 = v44;

  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v21 = [v19 valueForKey:v20];

  if (v21)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v46 = 0u;
    long long v47 = 0u;
  }
  sub_10001639C((uint64_t)&v46, (uint64_t)v52, &qword_100371910);
  swift_bridgeObjectRelease();
  if (!v16)
  {
    sub_10000D728((uint64_t)v52, (uint64_t)&v46, &qword_100371910);
    uint64_t v22 = &qword_100371910;
    goto LABEL_11;
  }
  uint64_t v24 = sub_1001F6990((uint64_t)&type metadata for Bool);
  if (v24)
  {
    uint64_t v27 = v24;
    uint64_t v28 = v25;
    uint64_t v29 = v26;
    sub_10000D728((uint64_t)v52, (uint64_t)&v46, &qword_100371910);
    if (*((void *)&v47 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v30 = v50;
        unint64_t v31 = v51;
        *((void *)&v47 + 1) = v27;
        uint64_t v48 = v28;
        uint64_t v49 = v29;
        sub_10000D680((uint64_t *)&v46);
        sub_1000292C0();
        sub_10000DBEC(v30, v31);
        uint64_t v22 = &qword_10036C018;
LABEL_11:
        sub_10000A38C(v22);
        if (swift_dynamicCast()) {
          char v23 = v50;
        }
        else {
          char v23 = 2;
        }
        goto LABEL_19;
      }
    }
    else
    {
      sub_10000D78C((uint64_t)&v46, &qword_100371910);
    }
    sub_10016AE10(60, 0xD00000000000001ALL, (void *)0x80000001002C4500, 0, v45, (uint64_t)&off_1003274C8);
    char v23 = 2;
    goto LABEL_22;
  }
  sub_10016AE10(60, 0xD000000000000014, (void *)0x80000001002C44E0, 0, v45, (uint64_t)&off_1003274C8);
  char v23 = 2;
LABEL_19:
  a1 = v43;
LABEL_22:
  uint64_t v32 = 7104878;
  *(void *)&long long v46 = 0x206C616974696E49;
  *((void *)&v46 + 1) = 0xE800000000000000;
  unint64_t v33 = v14[1];
  if (v33)
  {
    uint64_t v50 = *v14;
    unint64_t v51 = v33;
    swift_bridgeObjectRetain();
    uint64_t v34 = String.init<A>(describing:)();
    unint64_t v36 = v35;
  }
  else
  {
    unint64_t v36 = 0xE300000000000000;
    uint64_t v34 = 7104878;
  }
  unint64_t v37 = v36;
  String.append(_:)(*(Swift::String *)&v34);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 8250;
  v38._object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  if (v23 == 2)
  {
    unint64_t v39 = (void *)0xE300000000000000;
  }
  else
  {
    a1 = v23 & 1;
    LOBYTE(v50) = v23 & 1;
    uint64_t v32 = String.init<A>(describing:)();
    unint64_t v39 = v40;
  }
  v41._countAndFlagsBits = v32;
  v41._object = v39;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  sub_10016ABE4(v46, *((void **)&v46 + 1), 0, v45, (uint64_t)&off_1003274C8);

  swift_bridgeObjectRelease();
  sub_10000D78C((uint64_t)v52, &qword_100371910);
LABEL_29:
  LOBYTE(v46) = a1 & 1;
  sub_10000A38C((uint64_t *)&unk_10036BFE0);
  swift_allocObject();
  v5[2] = CurrentValueSubject.init(_:)();
  LOBYTE(v46) = 2;
  sub_10000A38C(&qword_10036D810);
  swift_allocObject();
  v5[3] = CurrentValueSubject.init(_:)();
  return v5;
}

uint64_t *sub_1001F0458(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v51 = *v6;
  char v11 = a2 & 1;
  swift_bridgeObjectRelease();
  uint64_t v12 = (char *)v6 + *(void *)(*v6 + 104);
  uint64_t v13 = sub_10000A38C(&qword_10036D700);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = *(void *)(*v6 + 112);
  *(uint64_t *)((char *)v6 + v14) = 0;
  uint64_t v15 = *(void *)(*v6 + 120);
  *((unsigned char *)v6 + v15) = 2;
  int v16 = (uint64_t *)((char *)v6 + *(void *)(*v6 + 128));
  *int v16 = 0;
  v16[1] = 0;
  *(uint64_t *)((char *)v6 + *(void *)(*v6 + 136)) = 0;
  *(uint64_t *)((char *)v6 + *(void *)(*v6 + 144)) = 0;
  if (!a4) {
    goto LABEL_30;
  }
  if (qword_10035A578 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_1003AC848;
  if (!qword_1003AC848)
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  char v49 = v11;
  uint64_t v48 = a1;
  int v18 = a5 & 1;
  *(void *)&long long v52 = 0;
  *((void *)&v52 + 1) = 0xE000000000000000;
  id v50 = (id)qword_1003AC848;
  _StringGuts.grow(_:)(32);
  v58[0] = v52;
  v19._countAndFlagsBits = 0xD00000000000001ELL;
  v19._object = (void *)0x80000001002C44C0;
  String.append(_:)(v19);
  *(void *)&long long v52 = a3;
  *((void *)&v52 + 1) = a4;
  LOBYTE(v53) = a5 & 1;
  sub_10000A38C(&qword_10036D5C8);
  _print_unlocked<A, B>(_:_:)();
  sub_10016ABE4(*(uint64_t *)&v58[0], *((void **)&v58[0] + 1), 0, v51, (uint64_t)&off_1003274C8);
  swift_bridgeObjectRelease();
  *int v16 = a3;
  v16[1] = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v6 + v15) = v18;
  NSString v20 = *(void **)((char *)v6 + v14);
  *(uint64_t *)((char *)v6 + v14) = v17;
  id v21 = v50;

  swift_bridgeObjectRetain();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v23 = [v21 valueForKey:v22];

  if (v23)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v52 = 0u;
    long long v53 = 0u;
  }
  sub_10001639C((uint64_t)&v52, (uint64_t)v58, &qword_100371910);
  swift_bridgeObjectRelease();
  if (!v18)
  {
    sub_10000D728((uint64_t)v58, (uint64_t)&v52, &qword_100371910);
    sub_10000A38C(&qword_100371910);
    sub_10000A38C(&qword_100366230);
LABEL_11:
    int v24 = swift_dynamicCast();
    char v25 = v24 & v57;
    if (v24) {
      uint64_t v26 = v56;
    }
    else {
      uint64_t v26 = 0;
    }
    char v27 = v24 ^ 1;
    goto LABEL_20;
  }
  uint64_t v28 = sub_10000A38C(&qword_100366230);
  uint64_t v29 = sub_1001F6990(v28);
  if (v29)
  {
    uint64_t v32 = v29;
    uint64_t v33 = v30;
    uint64_t v34 = v31;
    sub_10000D728((uint64_t)v58, (uint64_t)&v52, &qword_100371910);
    if (*((void *)&v53 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v36 = v56;
        unint64_t v35 = v57;
        *((void *)&v53 + 1) = v32;
        uint64_t v54 = v33;
        uint64_t v55 = v34;
        sub_10000D680((uint64_t *)&v52);
        sub_1000292C0();
        sub_10000DBEC(v36, v35);
        sub_10000A38C(&qword_10036C018);
        goto LABEL_11;
      }
    }
    else
    {
      sub_10000D78C((uint64_t)&v52, &qword_100371910);
    }
    char v11 = v49;
    sub_10016AE10(60, 0xD00000000000001ALL, (void *)0x80000001002C4500, 0, v51, (uint64_t)&off_1003274C8);
    uint64_t v26 = 0;
    char v25 = 0;
    char v27 = 1;
    goto LABEL_23;
  }
  sub_10016AE10(60, 0xD000000000000014, (void *)0x80000001002C44E0, 0, v51, (uint64_t)&off_1003274C8);
  uint64_t v26 = 0;
  char v25 = 0;
  char v27 = 1;
LABEL_20:
  char v11 = v49;
LABEL_23:
  uint64_t v37 = 7104878;
  *(void *)&long long v52 = 0x206C616974696E49;
  *((void *)&v52 + 1) = 0xE800000000000000;
  unint64_t v38 = v16[1];
  if (v38)
  {
    uint64_t v56 = *v16;
    unint64_t v57 = v38;
    swift_bridgeObjectRetain();
    uint64_t v39 = String.init<A>(describing:)();
    unint64_t v41 = v40;
  }
  else
  {
    unint64_t v41 = 0xE300000000000000;
    uint64_t v39 = 7104878;
  }
  unint64_t v42 = v41;
  String.append(_:)(*(Swift::String *)&v39);
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 8250;
  v43._object = (void *)0xE200000000000000;
  String.append(_:)(v43);
  if (v27)
  {
    id v44 = (void *)0xE300000000000000;
    a1 = v48;
  }
  else
  {
    uint64_t v56 = v26;
    LOBYTE(v57) = v25;
    sub_10000A38C(&qword_100366230);
    uint64_t v37 = String.init<A>(describing:)();
    id v44 = v45;
    char v11 = v25;
    a1 = v26;
  }
  v46._countAndFlagsBits = v37;
  v46._object = v44;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  sub_10016ABE4(v52, *((void **)&v52 + 1), 0, v51, (uint64_t)&off_1003274C8);

  swift_bridgeObjectRelease();
  sub_10000D78C((uint64_t)v58, &qword_100371910);
LABEL_30:
  *(void *)&long long v52 = a1;
  BYTE8(v52) = v11;
  sub_10000A38C(&qword_10036D708);
  swift_allocObject();
  v6[2] = CurrentValueSubject.init(_:)();
  *(void *)&long long v52 = 0;
  WORD4(v52) = 256;
  sub_10000A38C(&qword_10036D710);
  swift_allocObject();
  v6[3] = CurrentValueSubject.init(_:)();
  return v6;
}

uint64_t *sub_1001F0B2C(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v5;
  swift_bridgeObjectRelease();
  char v11 = (char *)v5 + *(void *)(*v5 + 104);
  uint64_t v12 = sub_10000A38C(&qword_10036D6E8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = *(void *)(*v5 + 112);
  *(uint64_t *)((char *)v5 + v13) = 0;
  uint64_t v14 = *(void *)(*v5 + 120);
  *((unsigned char *)v5 + v14) = 2;
  uint64_t v15 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 128));
  *uint64_t v15 = 0;
  v15[1] = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 136)) = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 144)) = 0;
  if (!a3) {
    goto LABEL_27;
  }
  if (qword_10035A578 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_1003AC848;
  if (!qword_1003AC848)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  char v46 = a1;
  uint64_t v48 = v14;
  uint64_t v17 = v10;
  int v18 = v15;
  int v19 = a4 & 1;
  *(void *)&long long v49 = 0;
  *((void *)&v49 + 1) = 0xE000000000000000;
  id v47 = (id)qword_1003AC848;
  _StringGuts.grow(_:)(32);
  v55[0] = v49;
  v20._countAndFlagsBits = 0xD00000000000001ELL;
  v20._object = (void *)0x80000001002C44C0;
  String.append(_:)(v20);
  *(void *)&long long v49 = a2;
  *((void *)&v49 + 1) = a3;
  LOBYTE(v50) = a4 & 1;
  sub_10000A38C(&qword_10036D5C8);
  _print_unlocked<A, B>(_:_:)();
  sub_10016ABE4(*(uint64_t *)&v55[0], *((void **)&v55[0] + 1), 0, v17, (uint64_t)&off_1003274C8);
  swift_bridgeObjectRelease();
  *int v18 = a2;
  v18[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v5 + v48) = v19;
  id v21 = *(void **)((char *)v5 + v13);
  *(uint64_t *)((char *)v5 + v13) = v16;
  id v22 = v47;

  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v24 = [v22 valueForKey:v23];

  if (v24)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v49 = 0u;
    long long v50 = 0u;
  }
  sub_10001639C((uint64_t)&v49, (uint64_t)v55, &qword_100371910);
  swift_bridgeObjectRelease();
  if (!v19)
  {
    sub_10000D728((uint64_t)v55, (uint64_t)&v49, &qword_100371910);
    sub_10000A38C(&qword_100371910);
    if (swift_dynamicCast()) {
      char v25 = v53;
    }
    else {
      char v25 = 3;
    }
    goto LABEL_20;
  }
  uint64_t v26 = sub_1001F6990((uint64_t)&type metadata for AccessControlLevel);
  if (!v26)
  {
    sub_10016AE10(60, 0xD000000000000014, (void *)0x80000001002C44E0, 0, v17, (uint64_t)&off_1003274C8);
    char v25 = 3;
    goto LABEL_20;
  }
  uint64_t v29 = v26;
  uint64_t v30 = v27;
  uint64_t v31 = v28;
  sub_10000D728((uint64_t)v55, (uint64_t)&v49, &qword_100371910);
  if (!*((void *)&v50 + 1))
  {
    sub_10000D78C((uint64_t)&v49, &qword_100371910);
    goto LABEL_19;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    sub_10016AE10(60, 0xD00000000000001ALL, (void *)0x80000001002C4500, 0, v17, (uint64_t)&off_1003274C8);
    char v25 = 3;
    goto LABEL_20;
  }
  uint64_t v32 = v53;
  unint64_t v33 = v54;
  *((void *)&v50 + 1) = v29;
  uint64_t v51 = v30;
  uint64_t v52 = v31;
  sub_10000D680((uint64_t *)&v49);
  sub_1000292C0();
  sub_10000DBEC(v32, v33);
  sub_10000A38C(&qword_10036C018);
  if (swift_dynamicCast()) {
    char v25 = v53;
  }
  else {
    char v25 = 3;
  }
  a1 = v46;
LABEL_20:
  uint64_t v34 = 7104878;
  *(void *)&long long v49 = 0x206C616974696E49;
  *((void *)&v49 + 1) = 0xE800000000000000;
  unint64_t v35 = v18[1];
  if (v35)
  {
    uint64_t v53 = *v18;
    unint64_t v54 = v35;
    swift_bridgeObjectRetain();
    uint64_t v36 = String.init<A>(describing:)();
    unint64_t v38 = v37;
  }
  else
  {
    unint64_t v38 = 0xE300000000000000;
    uint64_t v36 = 7104878;
  }
  unint64_t v39 = v38;
  String.append(_:)(*(Swift::String *)&v36);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 8250;
  v40._object = (void *)0xE200000000000000;
  String.append(_:)(v40);
  if (v25 == 3)
  {
    unint64_t v41 = (void *)0xE300000000000000;
  }
  else
  {
    LOBYTE(v53) = v25;
    uint64_t v34 = String.init<A>(describing:)();
    unint64_t v41 = v42;
    a1 = v25;
  }
  v43._countAndFlagsBits = v34;
  v43._object = v41;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  sub_10016ABE4(v49, *((void **)&v49 + 1), 0, v17, (uint64_t)&off_1003274C8);

  swift_bridgeObjectRelease();
  sub_10000D78C((uint64_t)v55, &qword_100371910);
LABEL_27:
  LOBYTE(v49) = a1;
  sub_10000A38C(&qword_10036D6F0);
  swift_allocObject();
  v5[2] = CurrentValueSubject.init(_:)();
  LOBYTE(v49) = 3;
  sub_10000A38C(&qword_10036D6F8);
  swift_allocObject();
  v5[3] = CurrentValueSubject.init(_:)();
  return v5;
}

uint64_t *sub_1001F121C()
{
  type metadata accessor for ProximityHandoffService();
  uint64_t v0 = swift_allocObject();
  unint64_t result = ProximityHandoffService.init()();
  qword_1003ACB38 = v0;
  return result;
}

uint64_t ProximityHandoffService.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  ProximityHandoffService.init()();
  return v0;
}

uint64_t *property wrapper backing initializer of ProximityHandoffService.proximityHandoffInteraction(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10035D170);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D728(a1, (uint64_t)v4, &qword_10035D170);
  sub_10000A38C(&qword_10036D300);
  swift_allocObject();
  uint64_t v5 = sub_1001EB2E4((uint64_t)v4, 0, 0, 0);
  sub_10000D78C(a1, &qword_10035D170);
  return v5;
}

uint64_t *ProximityHandoffService.init()()
{
  unint64_t v1 = v0;
  uint64_t v42 = *v0;
  uint64_t v2 = sub_10000A38C(&qword_10036D308);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v45 = v2;
  uint64_t v46 = v3;
  __chkstk_darwin(v2);
  id v44 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000A38C(&qword_10035D170);
  uint64_t v5 = __chkstk_darwin(v43);
  uint64_t v41 = (uint64_t)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v39 - v7;
  uint64_t v40 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v9 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  char v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v12);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v13 - 8);
  v0[3] = 0;
  swift_unknownObjectWeakInit();
  v39[1] = sub_100019E10(0, (unint64_t *)&qword_10035A680);
  static DispatchQoS.default.getter();
  id v47 = _swiftEmptyArrayStorage;
  sub_1001F7064(&qword_10035A688, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000A38C(&qword_10035A690);
  sub_10000B010((unint64_t *)&qword_10035A698, &qword_10035A690);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v40);
  v0[5] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v14 = type metadata accessor for SFProximityHandoff.Interaction();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 1, 1, v14);
  uint64_t v15 = v41;
  sub_10000D728((uint64_t)v8, v41, &qword_10035D170);
  sub_10000A38C(&qword_10036D300);
  swift_allocObject();
  uint64_t v16 = sub_1001EB2E4(v15, 0, 0, 0);
  sub_10000D78C((uint64_t)v8, &qword_10035D170);
  v1[6] = (uint64_t)v16;
  *((unsigned char *)v1 + 56) = 0;
  v1[8] = 0;
  v1[9] = 0;
  v1[10] = (uint64_t)&_swiftEmptySetSingleton;
  uint64_t v17 = v42;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v42, (uint64_t)&off_100331480);
  uint64_t v18 = SFProximityHandoffMachServiceName.getter();
  Swift::String v20 = v19;
  id v47 = 0;
  uint64_t v48 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  id v47 = (void *)0xD000000000000019;
  uint64_t v48 = (void *)0x80000001002C4340;
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  sub_10016ABE4((uint64_t)v47, v48, 0, v17, (uint64_t)&off_100331480);
  swift_bridgeObjectRelease();
  sub_10000A38C(&qword_10036D310);
  id v22 = (id)v1[5];
  NSString v23 = (void *)SFXPCListener.__allocating_init(machServiceName:queue:)();
  v1[4] = (uint64_t)v23;
  id v24 = v23;
  swift_retain();
  SFXPCListener.contextProvider.setter();

  char v25 = (void *)v1[4];
  *(void *)(swift_allocObject() + 16) = v17;
  id v26 = v25;
  SFXPCListener.didAddConnectionHandler.setter();

  uint64_t v27 = (void *)v1[4];
  *(void *)(swift_allocObject() + 16) = v17;
  id v28 = v27;
  SFXPCListener.didRemoveConnectionHandler.setter();

  id v29 = (id)v1[4];
  SFXPCListener.resume()();

  uint64_t v30 = (void *)v1[6];
  uint64_t v31 = swift_retain();
  id v32 = sub_1001F6D3C(v31, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
  id v47 = v30;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = sub_1001F1D4C;
  *(void *)(v33 + 24) = 0;
  *(void *)(v33 + 32) = v30;
  *(void *)(v33 + 40) = 0xD000000000000021;
  *(void *)(v33 + 48) = 0x80000001002C4360;
  *(void *)(v33 + 56) = 0;
  *(void *)(v33 + 64) = 0xE000000000000000;
  *(void *)(v33 + 72) = v32;
  *(_DWORD *)(v33 + 80) = 40;
  sub_10000B010(&qword_10036D318, &qword_10036D300);
  swift_retain();
  id v34 = v32;
  unint64_t v35 = v44;
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10036D320, &qword_10036D308);
  uint64_t v36 = v45;
  unint64_t v37 = (void *)Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v36);
  swift_release();

  id v47 = v37;
  swift_allocObject();
  swift_weakInit();
  sub_10000A38C(&qword_10036D328);
  sub_10000B010(&qword_10036D330, &qword_10036D328);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  return v1;
}

uint64_t sub_1001F1B98@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return swift_retain();
}

uint64_t sub_1001F1BB8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F1BC8(int a1)
{
  return sub_1001F1C08(a1, *(void *)(v1 + 16), 16, 0x6120746E65696C43, (void *)0xEE00203A64656464);
}

uint64_t sub_1001F1C08(int a1, uint64_t a2, Swift::Int a3, uint64_t a4, void *a5)
{
  _StringGuts.grow(_:)(a3);
  swift_bridgeObjectRelease();
  type metadata accessor for SFClientIdentity();
  sub_1001F7064(&qword_10036D928, (void (*)(uint64_t))&type metadata accessor for SFClientIdentity);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  sub_10016ABE4(a4, a5, 0, a2, (uint64_t)&off_100331480);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001F1D04()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F1D14(int a1)
{
  return sub_1001F1C08(a1, *(void *)(v1 + 16), 18, 0xD000000000000010, (void *)0x80000001002C49B0);
}

uint64_t sub_1001F1D4C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SFProximityHandoff.Interaction();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::String v8 = (char *)&v14 - v7;
  uint64_t v9 = sub_10000A38C(&qword_10035D170);
  __chkstk_darwin(v9 - 8);
  char v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D728(a1, (uint64_t)v11, &qword_10035D170);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1) {
    return 7104878;
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v11, v2);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  uint64_t v12 = String.init<A>(describing:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v12;
}

uint64_t sub_1001F1F28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SFProximityHandoff.Interaction();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2) == 1)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    id v4 = sub_1001F6D3C(result, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
    NSString v5 = String._bridgeToObjectiveC()();
    [v4 ulog:40 message:v5];

    sub_1001F2874(v6);
  }
  else
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    sub_1001F205C(result);
  }
  return swift_release();
}

uint64_t sub_1001F205C(uint64_t a1)
{
  uint64_t v2 = *v1;
  id v3 = sub_1001F6D3C(a1, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 ulog:40 message:v4];

  id v6 = sub_1001F6D3C(v5, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 ulog:40 message:v7];

  *((unsigned char *)v1 + 56) = 1;
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v2;
  sub_1001F2A0C(sub_1001F70C0);

  return swift_release();
}

uint64_t sub_1001F21E8(uint64_t a1)
{
  uint64_t v2 = *v1;
  id v3 = sub_1001F6D3C(a1, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 ulog:40 message:v4];

  *((unsigned char *)v1 + 56) = 1;
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v2;
  sub_1001F2A0C(sub_1001F6CDC, v6);

  return swift_release();
}

void sub_1001F2310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v6 = Strong;
    if (a1)
    {
      swift_errorRetain();
      _StringGuts.grow(_:)(34);
      v7._countAndFlagsBits = 0xD000000000000020;
      v7._object = (void *)0x80000001002C4960;
      String.append(_:)(v7);
      sub_10000A38C((uint64_t *)&unk_100365D60);
      _print_unlocked<A, B>(_:_:)();
      sub_10016AE10(90, 0, (void *)0xE000000000000000, 0, a3, (uint64_t)&off_100331480);
      swift_bridgeObjectRelease();
      swift_errorRelease();
LABEL_12:
      swift_release();
      return;
    }
    if (*(void *)(Strong + 64))
    {
      uint64_t v8 = "Not taking assertion to ensure AirDropUI is active because assertion was already taken";
LABEL_11:
      sub_10016ABE4(0xD000000000000056, (void *)((unint64_t)(v8 - 32) | 0x8000000000000000), 0, a3, (uint64_t)&off_100331480);
      goto LABEL_12;
    }
    if (*(unsigned char *)(Strong + 56) != 1)
    {
      uint64_t v8 = "Not taking assertion to ensure AirDropUI is active because service is no longer active";
      goto LABEL_11;
    }
    NSString v9 = String._bridgeToObjectiveC()();
    id v10 = [self predicateMatchingBundleIdentifier:v9];

    char v11 = self;
    id v33 = 0;
    id v12 = v10;
    id v13 = [v11 handleForPredicate:v12 error:&v33];
    if (v13)
    {
      uint64_t v14 = v13;
      id v15 = v33;

      id v16 = [v14 identity];
      id v17 = [self targetWithProcessIdentity:v16];

      NSString v18 = String._bridgeToObjectiveC()();
      NSString v19 = String._bridgeToObjectiveC()();
      id v20 = [self attributeWithDomain:v18 name:v19];

      sub_10000A38C(&qword_10035C280);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_100293270;
      *(void *)(v21 + 32) = v20;
      id v33 = (id)v21;
      specialized Array._endMutation()();
      id v22 = objc_allocWithZone((Class)RBSAssertion);
      id v23 = v17;
      id v32 = v20;
      NSString v24 = String._bridgeToObjectiveC()();
      sub_100019E10(0, &qword_10036D760);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v26 = [v22 initWithExplanation:v24 target:v23 attributes:isa];

      id v33 = 0;
      if ([v26 acquireWithError:&v33])
      {
        id v27 = v33;
        sub_10016ABE4(0xD00000000000001FLL, (void *)0x80000001002C4940, 0, a3, (uint64_t)&off_100331480);

        id v28 = *(void **)(v6 + 64);
        *(void *)(v6 + 64) = v26;
        swift_release();

        return;
      }
      id v30 = v33;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    else
    {
      id v29 = v33;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      id v23 = v12;
    }

    id v33 = 0;
    id v34 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(67);
    v31._countAndFlagsBits = 0xD000000000000041;
    v31._object = (void *)0x80000001002C48D0;
    String.append(_:)(v31);
    sub_10000A38C((uint64_t *)&unk_100365D60);
    _print_unlocked<A, B>(_:_:)();
    sub_10016AE10(90, (uint64_t)v33, v34, 0, a3, (uint64_t)&off_100331480);
    swift_bridgeObjectRelease();
    swift_release();
    swift_errorRelease();
  }
}

void sub_1001F2874(uint64_t a1)
{
  id v2 = sub_1001F6D3C(a1, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  *(unsigned char *)(v1 + 56) = 0;
  uint64_t v5 = *(void **)(v1 + 64);
  if (v5)
  {
    id v6 = v5;
    id v7 = sub_1001F6D3C((uint64_t)[v6 invalidate], (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
    NSString v8 = String._bridgeToObjectiveC()();
    [v7 ulog:40 message:v8];

    NSString v9 = *(void **)(v1 + 64);
    *(void *)(v1 + 64) = 0;
  }
  else
  {
    id v10 = sub_1001F6D3C(v4, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 ulog:40 message:v11];

    NSString v9 = v11;
  }
}

void sub_1001F2A0C(void (*a1)(uint64_t))
{
  id v2 = v1;
  uint64_t v4 = *v1;
  id v5 = sub_1001F6D3C((uint64_t)a1, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 ulog:40 message:v6];

  if (v2[9])
  {
    id v8 = sub_1001F6D3C(v7, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
    NSString v9 = String._bridgeToObjectiveC()();
    [v8 ulog:40 message:v9];

    a1(0);
  }
  else
  {
    id v10 = [objc_allocWithZone((Class)type metadata accessor for SFProximityHandoffUIClient()) init];
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v2;
    *(void *)(v11 + 24) = v4;
    swift_retain();
    SFProximityHandoffUIClient.invalidationHandler.setter();
    SFProximityHandoffUIClient.activate()();
    if (v12)
    {
      _StringGuts.grow(_:)(49);
      v13._countAndFlagsBits = 0xD00000000000002FLL;
      v13._object = (void *)0x80000001002C45B0;
      String.append(_:)(v13);
      sub_10000A38C((uint64_t *)&unk_100365D60);
      uint64_t v14 = _print_unlocked<A, B>(_:_:)();
      id v15 = sub_1001F6D3C(v14, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
      swift_bridgeObjectRetain();
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v15 ulog:90 message:v16 v12];
      swift_bridgeObjectRelease();

      swift_errorRetain();
      a1(v12);
      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      id v17 = (void *)v2[9];
      v2[9] = v10;
      id v18 = v10;

      id v20 = sub_1001F6D3C(v19, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
      NSString v21 = String._bridgeToObjectiveC()();
      [v20 ulog:40 message:v21];

      swift_allocObject();
      uint64_t v22 = swift_weakInit();
      __chkstk_darwin(v22);
      SFProximityHandoffUIClient.registerForProximityHandoffInteractionUpdates(completion:)();

      swift_release();
    }
  }
}

uint64_t sub_1001F2DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v17 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10035A628 != -1) {
    swift_once();
  }
  NSString v9 = (void *)qword_1003ACB50;
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = a2;
  aBlock[4] = sub_1001F6CBC;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_100331508;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = v9;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v18 = _swiftEmptyArrayStorage;
  sub_1001F7064((unint64_t *)&qword_100363D50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v16);
  swift_release();
  return swift_release();
}

uint64_t sub_1001F30F0(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = type metadata accessor for SFNearbySharingInteractionViewState();
  uint64_t v30 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  id v28 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  id v26 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10035D168);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10035D170);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SFProximityHandoff.Interaction();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v17 = result;
    uint64_t v31 = a2;
    swift_retain();
    CurrentValueSubject.value.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      CurrentValueSubject.value.getter();
      sub_10000D78C((uint64_t)v7, &qword_10035D168);
    }
    else
    {
      sub_10001639C((uint64_t)v7, (uint64_t)v11, &qword_10035D170);
    }
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      sub_10000D78C((uint64_t)v11, &qword_10035D170);
      uint64_t v18 = v31;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      uint64_t v18 = v31;
      if (Strong)
      {
        uint64_t v20 = (uint64_t)v26;
        SFProximityHandoff.Interaction.id.getter();
        uint64_t v21 = v30;
        uint64_t v22 = (uint64_t)v28;
        (*(void (**)(char *, void, uint64_t))(v30 + 104))(v28, enum case for SFNearbySharingInteractionViewState.idle(_:), v32);
        sub_1000E778C(v20, v22);
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v32);
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v20, v29);
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }
    id v23 = *(void **)(v17 + 72);
    *(void *)(v17 + 72) = 0;

    if (*(unsigned char *)(v17 + 56) == 1)
    {
      sub_10016ABE4(0xD000000000000036, (void *)0x80000001002C46A0, 0, v18, (uint64_t)&off_100331480);
      sub_1001F2874(v24);
      sub_1001F21E8(v25);
    }
    else
    {
      sub_10016ABE4(0xD000000000000025, (void *)0x80000001002C4670, 0, v18, (uint64_t)&off_100331480);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1001F35C0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    swift_errorRetain();
    _StringGuts.grow(_:)(49);
    v8._countAndFlagsBits = 0xD00000000000002FLL;
    v8._object = (void *)0x80000001002C4640;
    String.append(_:)(v8);
    sub_10000A38C((uint64_t *)&unk_100365D60);
    _print_unlocked<A, B>(_:_:)();
    sub_10016AE10(90, 0, (void *)0xE000000000000000, 0, a5, (uint64_t)&off_100331480);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v10 = *(void **)(Strong + 72);
      *(void *)(Strong + 72) = 0;
      swift_release();
    }
    swift_errorRetain();
    a3(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10016ABE4(0xD00000000000002CLL, (void *)0x80000001002C4610, 0, a5, (uint64_t)&off_100331480);
    return ((uint64_t (*)(void))a3)(0);
  }
}

uint64_t sub_1001F3750@<X0>(uint64_t a1@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v2 = sub_10000A38C(&qword_10036D8F0);
  uint64_t v21 = *(void *)(v2 - 8);
  uint64_t v22 = v2;
  __chkstk_darwin(v2);
  uint64_t v20 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10036D308);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036D8F8);
  uint64_t v18 = *(void *)(v8 - 8);
  uint64_t v19 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v1 + 48);
  uint64_t v12 = swift_retain();
  id v13 = sub_1001F6D3C(v12, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
  uint64_t v25 = v11;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v11;
  *(void *)(v14 + 24) = 0xD00000000000001DLL;
  *(void *)(v14 + 32) = 0x80000001002C4990;
  *(void *)(v14 + 40) = v13;
  *(_DWORD *)(v14 + 48) = 40;
  swift_retain();
  id v15 = v13;
  sub_10000A38C(&qword_10036D300);
  sub_10000A38C(&qword_10035D170);
  sub_10000B010(&qword_10036D318, &qword_10036D300);
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10036D320, &qword_10036D308);
  uint64_t v16 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_release();

  uint64_t v25 = v16;
  sub_10000A38C(&qword_10036D328);
  sub_10000A38C(&qword_10036D370);
  sub_10000B010(&qword_10036D330, &qword_10036D328);
  Publisher.map<A>(_:)();
  swift_release();
  uint64_t v24 = v10;
  (*(void (**)(char *, void, uint64_t))(v21 + 104))(v20, enum case for AsyncThrowingStream.Continuation.BufferingPolicy.unbounded<A, B>(_:), v22);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v10, v19);
}

uint64_t sub_1001F3B60@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SFProximityHandoff.Interaction();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10035D170);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D728(a1, (uint64_t)v10, &qword_10035D170);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
  if (result == 1)
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  else
  {
    id v13 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v13(v7, v10, v4);
    sub_10000A38C(&qword_10036D918);
    unint64_t v14 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v12 = (void *)swift_allocObject();
    *((_OWORD *)v12 + 1) = xmmword_10028D430;
    uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v13)((char *)v12 + v14, v7, v4);
  }
  *a2 = v12;
  return result;
}

id *ProximityHandoffService.deinit()
{
  sub_100024144((uint64_t)(v0 + 2));

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ProximityHandoffService.__deallocating_deinit()
{
  sub_100024144((uint64_t)(v0 + 2));

  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.invoke(with:context:client:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001F3DF0, 0, 0);
}

uint64_t sub_1001F3DF0()
{
  _StringGuts.grow(_:)(27);
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v1._object = (void *)0x80000001002C4390;
  v1._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v1);
  type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0);
  uint64_t v2 = _print_unlocked<A, B>(_:_:)();
  id v3 = sub_1001EAEC0(v2, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 ulog:40 message:v4];

  swift_bridgeObjectRelease();
  if (qword_10035A678 != -1) {
    swift_once();
  }
  v0[6] = qword_1003ACC48;
  return ((uint64_t (*)(uint64_t (*)()))_swift_task_switch)(sub_1001F3F68);
}

uint64_t sub_1001F3F68()
{
  sub_10026DB34(*(void *)(v0 + 40));
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001F4018, 0, 0);
}

uint64_t sub_1001F4018()
{
  VoidResponse.init()();
  Swift::String v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001F407C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = v8;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v14 + 16) = v15;
  uint64_t v16 = sub_1001F7064(&qword_10036D8E8, (void (*)(uint64_t))type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction);
  *uint64_t v15 = v14;
  v15[1] = sub_1001F41B0;
  return _AnySFXPCAsyncInvocableProtocol<>.invoke(with:context:client:parametersAsyncSequenceContainer:parametersBlocksContainer:responseAsyncSequenceContainer:responseXPCBlocksContainer:)(a1, a2, a3, a4, a5, a6, a7, a8, v16);
}

uint64_t sub_1001F41B0(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

uint64_t sub_1001F42C0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100076840;
  uint64_t v5[4] = a1;
  v5[5] = a2;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001F3DF0, 0, 0);
}

uint64_t SFProximityHandoffInvocations.NearbySharingInteractionViewUpdate.invoke(with:context:client:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for SFNearbySharingInteractionViewState();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001F4490, 0, 0);
}

uint64_t sub_1001F4490()
{
  _StringGuts.grow(_:)(46);
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v1._object = (void *)0x80000001002C43B0;
  v1._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v1);
  type metadata accessor for SFProximityHandoffInvocations.NearbySharingInteractionViewUpdate.Parameters();
  uint64_t v2 = _print_unlocked<A, B>(_:_:)();
  id v3 = sub_1001EAEC0(v2, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 ulog:40 message:v4];

  swift_bridgeObjectRelease();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v6 = v0[11];
    uint64_t v5 = v0[12];
    uint64_t v8 = v0[9];
    uint64_t v7 = v0[10];
    uint64_t v9 = v0[7];
    uint64_t v10 = v0[8];
    SFProximityHandoffInvocations.NearbySharingInteractionViewUpdate.Parameters.interactionID.getter();
    SFProximityHandoffInvocations.NearbySharingInteractionViewUpdate.Parameters.viewState.getter();
    sub_1000E778C(v5, v8);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  VoidResponse.init()();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1001F467C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = v8;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v14 + 16) = v15;
  uint64_t v16 = sub_1001F7064(&qword_10036D8E0, (void (*)(uint64_t))&type metadata accessor for SFProximityHandoffInvocations.NearbySharingInteractionViewUpdate);
  *uint64_t v15 = v14;
  v15[1] = sub_1001F70B0;
  return _AnySFXPCAsyncInvocableProtocol<>.invoke(with:context:client:parametersAsyncSequenceContainer:parametersBlocksContainer:responseAsyncSequenceContainer:responseXPCBlocksContainer:)(a1, a2, a3, a4, a5, a6, a7, a8, v16);
}

uint64_t sub_1001F47B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10007EB64;
  return SFProximityHandoffInvocations.NearbySharingInteractionViewUpdate.invoke(with:context:client:)(a1, a2, v6);
}

uint64_t SFProximityHandoffInvocations.PerformHandoffContentAction.invoke(with:context:client:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for SFProximityHandoff.Content.Action();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFProximityHandoff.Content();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001F4980, 0, 0);
}

uint64_t sub_1001F4980()
{
  _StringGuts.grow(_:)(39);
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v1._object = (void *)0x80000001002C43E0;
  v1._countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v1);
  type metadata accessor for SFProximityHandoffInvocations.PerformHandoffContentAction.Parameters();
  uint64_t v2 = _print_unlocked<A, B>(_:_:)();
  id v3 = sub_1001EAEC0(v2, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 ulog:40 message:v4];

  swift_bridgeObjectRelease();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v6 = v0[11];
    uint64_t v5 = v0[12];
    uint64_t v8 = v0[9];
    uint64_t v7 = v0[10];
    uint64_t v9 = v0[7];
    uint64_t v10 = v0[8];
    SFProximityHandoffInvocations.PerformHandoffContentAction.Parameters.content.getter();
    SFProximityHandoffInvocations.PerformHandoffContentAction.Parameters.action.getter();
    sub_1000E82EC(v5, v8);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  VoidResponse.init()();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1001F4B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = v8;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v14 + 16) = v15;
  uint64_t v16 = sub_1001F7064(&qword_10036D8D8, (void (*)(uint64_t))&type metadata accessor for SFProximityHandoffInvocations.PerformHandoffContentAction);
  *uint64_t v15 = v14;
  v15[1] = sub_1001F70B0;
  return _AnySFXPCAsyncInvocableProtocol<>.invoke(with:context:client:parametersAsyncSequenceContainer:parametersBlocksContainer:responseAsyncSequenceContainer:responseXPCBlocksContainer:)(a1, a2, a3, a4, a5, a6, a7, a8, v16);
}

uint64_t sub_1001F4CA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10007EB64;
  return SFProximityHandoffInvocations.PerformHandoffContentAction.invoke(with:context:client:)(a1, a2, v6);
}

uint64_t SFProximityHandoffInvocations.ProximityHandoffInteractions.invoke(with:context:client:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  uint64_t v4 = sub_10000A38C(&qword_10036D358);
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001F4E18, 0, 0);
}

uint64_t sub_1001F4E18()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  _StringGuts.grow(_:)(40);
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v4._object = (void *)0x80000001002C4410;
  v4._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v4);
  type metadata accessor for VoidParameters();
  uint64_t v5 = _print_unlocked<A, B>(_:_:)();
  id v6 = sub_1001EAEC0(v5, (void (*)(void))type metadata accessor for ProximityHandoffService, &qword_10036D920);
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 ulog:40 message:v7];

  swift_bridgeObjectRelease();
  sub_1001F3750(v1);
  sub_10000B010(&qword_10036D360, &qword_10036D358);
  sub_1001F61C8(&qword_10036D368, &qword_10036D378);
  sub_1001F61C8(&qword_10036D380, (unint64_t *)&unk_10036D388);
  AsyncSequence<>.xpc.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001F506C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = v8;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v14 + 16) = v15;
  uint64_t v16 = sub_1001F7064(&qword_10036D8D0, (void (*)(uint64_t))&type metadata accessor for SFProximityHandoffInvocations.ProximityHandoffInteractions);
  *uint64_t v15 = v14;
  v15[1] = sub_1001F70B0;
  return _AnySFXPCAsyncInvocableProtocol<>.invoke(with:context:client:parametersAsyncSequenceContainer:parametersBlocksContainer:responseAsyncSequenceContainer:responseXPCBlocksContainer:)(a1, a2, a3, a4, a5, a6, a7, a8, v16);
}

uint64_t sub_1001F51A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  NSString v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10007EB64;
  return SFProximityHandoffInvocations.ProximityHandoffInteractions.invoke(with:context:client:)(a1, a2, v6);
}

uint64_t sub_1001F5250(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036D910);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[1] = *a1;
  swift_bridgeObjectRetain();
  sub_10000A38C(&qword_10036D900);
  AsyncThrowingStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1001F5348@<X0>(uint64_t a1@<X0>, void *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  if (a2)
  {
    id v7 = a2;
    NSString v8 = String._bridgeToObjectiveC()();
    [v7 ulog:a3 message:v8];
  }
  else
  {
    NSLog(_:_:)();
  }
  return sub_10000D728(a1, a4, &qword_10035D170);
}

id sub_1001F53F0()
{
  sub_10000A38C(&qword_1003699E0);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001F552C()
{
  sub_10000A38C(&qword_100369A48);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001F5668()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for HandoffSession, &qword_100369948);
}

id sub_1001F568C()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for SessionHistory, &qword_1003699A0);
}

id sub_1001F56B0()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for TransferRecord, &qword_10035CC18);
}

id sub_1001F56D4()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for GuestHostDevice, &qword_10035CBD8);
}

id sub_1001F56F8()
{
  sub_10000A38C(&qword_1003699A8);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001F5834()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for HandoffEnvironment, &qword_100369988);
}

id sub_1001F5858()
{
  sub_10000A38C(&qword_100369A50);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001F5994()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for CardPresentationRecord, &qword_10035CC28);
}

id sub_1001F59B8()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for HintPresentationRecord, &qword_10035CC38);
}

id sub_1001F59DC()
{
  sub_10000A38C(&qword_100369A40);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001F5B18()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for EducationPresentationRecord, &qword_10035CC30);
}

id sub_1001F5B3C()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for MockHandoffDeviceServiceServer, &qword_100369950);
}

id sub_1001F5B60()
{
  sub_10000A38C(&qword_1003699B0);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001F5C9C()
{
  type metadata accessor for PCActivityAssetType(0);
  sub_10000A38C(&qword_100369A20);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_1001F5DD8()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for BatteryStateMonitor, &qword_10036D868);
}

id sub_1001F5DFC()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for ActivityProxy, &qword_10035CC20);
}

id sub_1001F5E20()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for RapportProxy, &qword_10036D6A8);
}

id sub_1001F5E44()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for HandoffSessionManager, &qword_10036D890);
}

id sub_1001F5E68()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for RemoteFollowerPresenter, &qword_10036D7C8);
}

id sub_1001F5E8C()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for RemoteFollowerNoticePresenter, &qword_10036D828);
}

id sub_1001F5EB0()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for HandoffTransferManager, &qword_10036D608);
}

id sub_1001F5ED4()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for NanoPreferencesSyncServer, &qword_10036D7F0);
}

id sub_1001F5EF8()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for ProxControlDemoLinkServerManager, &qword_10036D678);
}

id sub_1001F5F1C()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for AirDropUIPresenter, &qword_10036D820);
}

id sub_1001F5F40()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for SetupAssistantMonitor, &qword_10036D670);
}

id sub_1001F5F64()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for FrontBoardMonitorState, &qword_10036D880);
}

id sub_1001F5F88()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for ApplicationBlocker, &qword_10036D6B0);
}

id sub_1001F5FAC()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for HandoffEducationFlowPolicy, &qword_10036D770);
}

id sub_1001F5FD0()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for TelephonyProxy, &qword_10036D5A8);
}

id sub_1001F5FF4()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for LockscreenControlsAgent, &qword_10036D590);
}

id sub_1001F6018()
{
  return sub_1001F6AF0(&qword_100367800, &qword_10036D610);
}

id sub_1001F602C()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for Handoff3DevicePrewarmer, &qword_10036D720);
}

id sub_1001F6050()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for MediaRemoteProxy, &qword_10036D6A0);
}

id sub_1001F6074()
{
  return sub_1001F6AF0(&qword_100367350, &qword_10036D600);
}

id sub_1001F6088()
{
  return sub_1001F6AF0(&qword_100367348, &qword_10036D618);
}

id sub_1001F609C()
{
  return sub_1001F6AF0(&qword_100367D50, &qword_10036D620);
}

id sub_1001F60B0()
{
  return sub_1001F6AF0(&qword_100367DC0, &qword_10036D638);
}

id sub_1001F60C4()
{
  return sub_1001F6AF0(&qword_100367E28, (uint64_t *)&unk_100367FD0);
}

id sub_1001F60D8()
{
  return sub_1001F6AF0(&qword_100367E58, &qword_10036D628);
}

uint64_t sub_1001F60EC()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 84, 7);
}

uint64_t sub_1001F614C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10002EDFC(a1, *(uint64_t (**)(uint64_t))(v2 + 16), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void **)(v2 + 64), a2, *(void **)(v2 + 72), *(_DWORD *)(v2 + 80));
}

uint64_t sub_1001F6188()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F61C0(uint64_t a1)
{
  return sub_1001F1F28(a1);
}

uint64_t sub_1001F61C8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000A3D0(&qword_10036D370);
    sub_1001F7064(a2, (void (*)(uint64_t))&type metadata accessor for SFProximityHandoff.Interaction);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001F625C()
{
  return sub_1001F7064(qword_10036D398, (void (*)(uint64_t))type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction);
}

uint64_t sub_1001F62A4()
{
  return sub_1001F7064(qword_10036D3B0, (void (*)(uint64_t))&type metadata accessor for SFProximityHandoffInvocations.NearbySharingInteractionViewUpdate);
}

uint64_t sub_1001F62EC()
{
  return sub_1001F7064(qword_10036D3C8, (void (*)(uint64_t))&type metadata accessor for SFProximityHandoffInvocations.PerformHandoffContentAction);
}

uint64_t sub_1001F6334()
{
  return sub_1001F7064((unint64_t *)&unk_10036D3E0, (void (*)(uint64_t))&type metadata accessor for SFProximityHandoffInvocations.ProximityHandoffInteractions);
}

uint64_t type metadata accessor for ProximityHandoffService()
{
  return self;
}

id sub_1001F63A0()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for RangingProxy, &qword_10036AF78);
}

id sub_1001F63C4()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for Retrier, &qword_10036D798);
}

id sub_1001F63E8()
{
  return sub_1001F6AF0(&qword_10036BF40, &qword_10036D598);
}

id sub_1001F63FC()
{
  return sub_1001F6AF0(&qword_10035F240, &qword_10036D580);
}

id sub_1001F6410()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for Identity, &qword_10036D888);
}

id sub_1001F6434()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for AssetManager, &qword_10036D750);
}

id sub_1001F6458()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for DiscoveryTokenStateMachine, &qword_100369048);
}

id sub_1001F647C()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for BacklightMonitor, &qword_10036D8C8);
}

id sub_1001F64A0()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for DeviceHistory, &qword_10036D658);
}

id sub_1001F64C4()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for FeatureUsageOverTime, &qword_10036D7E8);
}

id sub_1001F64E8()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for XPCPublisher, &qword_10036D840);
}

id sub_1001F650C()
{
  return sub_1001F6AF0(&qword_10035E118, &qword_10035F888);
}

id sub_1001F6520()
{
  return sub_1001F6AF0(&qword_10035E120, &qword_10035F880);
}

id sub_1001F6534()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for ContextDeliveryModeStateMachine, &qword_100369070);
}

id sub_1001F6558()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for SharingProxy, &qword_10036D850);
}

id sub_1001F657C()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for Handoff3LeaderAgent, &qword_10036D718);
}

id sub_1001F65A0()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for XPCConnection, &qword_10036D830);
}

id sub_1001F65C4()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for ActivityProxyClientContext, &qword_10036D8C0);
}

id sub_1001F65E8()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for HandoffFeedbackManager_Legacy, &qword_10036D780);
}

id sub_1001F660C()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for LockscreenControlsAnalyticsManager, &qword_10036D7E0);
}

id sub_1001F6630()
{
  return sub_1001F6AF0(&qword_10035EDB8, &qword_10035EDC0);
}

id sub_1001F6644()
{
  return sub_1001F6AF0(&qword_10035F228, &qword_10036D7C0);
}

id sub_1001F6658()
{
  return sub_1001F6AF0(&qword_10035F318, &qword_10036D898);
}

id sub_1001F666C()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for ProxControlDemoBridgeServer, &qword_10035F878);
}

id sub_1001F6690()
{
  return sub_1001F6AF0((uint64_t *)&unk_10036C060, &qword_10036D640);
}

id sub_1001F66A4()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for DeviceActivityServer, &qword_10036D668);
}

id sub_1001F66C8()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for DeviceActivity, &qword_10036D758);
}

id sub_1001F66EC()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for PeerActivityObserver, &qword_10036D8B8);
}

id sub_1001F6710()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for BannerViewControllerBase, &qword_10036D630);
}

id sub_1001F6734()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for HandoffViewServiceHandle, &qword_10036D680);
}

id sub_1001F6758()
{
  return sub_1001F6AF0(&qword_100363B08, &qword_10036D6B8);
}

id sub_1001F676C()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for FrontBoardMonitor, &qword_10036D878);
}

id sub_1001F6790()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for Application, &qword_10036D870);
}

id sub_1001F67B4()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for HandoffEnabledSettingManager, &qword_10036D788);
}

id sub_1001F67D8()
{
  return sub_1001F6AF0(&qword_1003645E0, &qword_10036D858);
}

id sub_1001F67EC()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for WiFiMonitor, &qword_10036D860);
}

id sub_1001F6810()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for PillView3, &qword_10036D848);
}

id sub_1001F6834()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for XPCServer, &qword_10036D838);
}

id sub_1001F6858()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for HomeKitProxy, &qword_1003650A8);
}

id sub_1001F687C()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for NearbyAgent, &qword_10036D7A0);
}

id sub_1001F68A0()
{
  return sub_1001F6AF0(&qword_100365D38, &qword_10036D818);
}

id sub_1001F68B4()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for BluetoothProxy, &qword_10036D800);
}

id sub_1001F68D8()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for AccessControlLevelMonitor, &qword_10036D6E0);
}

id sub_1001F68FC()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for IDSProxy, &qword_10036D7D8);
}

id sub_1001F6920()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for RPClientProxy, &qword_10036D790);
}

id sub_1001F6944()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for RapportDiscoveryService, &qword_10036D7F8);
}

id sub_1001F6968()
{
  return sub_1001F6AF0(&qword_10035F4C0, &qword_10036D7D0);
}

id sub_1001F697C()
{
  return sub_1001F6AF0(&qword_10036BF80, &qword_10036D5A0);
}

uint64_t sub_1001F6990(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2()) {
      return a1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001F6A18(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

void sub_1001F6A6C(id a1, char a2)
{
  if (a2 != 254) {
    sub_100038A4C(a1, a2);
  }
}

uint64_t sub_1001F6A80(uint64_t result)
{
  if (result != 1) {
    return swift_unknownObjectRelease();
  }
  return result;
}

id sub_1001F6A90()
{
  return sub_1001F6AF0(&qword_10036BF88, &qword_10036D778);
}

id sub_1001F6AA4()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for HintViewModel, &qword_10036D768);
}

id sub_1001F6AC8()
{
  return sub_1001F6AF0(&qword_10036D6D0, &qword_10036D6D8);
}

id sub_1001F6ADC()
{
  return sub_1001F6AF0(&qword_10036D690, &qword_10036D698);
}

id sub_1001F6AF0(uint64_t *a1, uint64_t *a2)
{
  sub_10000A38C(a1);
  sub_10000A38C(a2);
  uint64_t v3 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v3, v4);
  if ((v5 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v6 = objc_allocWithZone((Class)CULogHandle);
  NSString v7 = String._bridgeToObjectiveC()();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [v6 initWithSubsystem:v7 category:v8];

  return v9;
}

id sub_1001F6C28()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for HapticPlayer, &qword_10036D688);
}

id sub_1001F6C4C()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for TempProvider, &qword_10036D660);
}

uint64_t sub_1001F6C70()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001F6CA8()
{
  return sub_1001F2DBC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001F6CB0(uint64_t a1)
{
  return sub_1001F35C0(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1001F6CBC()
{
  return sub_1001F30F0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001F6CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001F6CD4()
{
  return swift_release();
}

void sub_1001F6CDC(uint64_t a1)
{
  sub_1001F2310(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

id sub_1001F6CE4()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for ActivityProxy, &qword_10035CC20);
}

id sub_1001F6D08()
{
  return sub_1001F6D3C(0, (void (*)(void))type metadata accessor for HandoffEducationFlowPolicy, &qword_10036D770);
}

uint64_t sub_1001F6D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 2) {
    return sub_1000CA484(a1, a2, a3);
  }
  return a1;
}

id sub_1001F6D3C(uint64_t a1, void (*a2)(void), uint64_t *a3)
{
  a2();
  sub_10000A38C(a3);
  uint64_t v4 = String.init<A>(describing:)();
  sub_10016B950(60, 0xE100000000000000, v4, v5);
  if ((v6 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v7 = objc_allocWithZone((Class)CULogHandle);
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithSubsystem:v8 category:v9];

  return v10;
}

uint64_t sub_1001F6E78()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 52, 7);
}

uint64_t sub_1001F6EC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001F5348(a1, *(void **)(v2 + 40), *(unsigned int *)(v2 + 48), a2);
}

uint64_t sub_1001F6ED4(uint64_t a1)
{
  return sub_1001EAFFC(a1, *(void *)(v1 + 16));
}

uint64_t sub_1001F6EE0(char *a1)
{
  sub_10000A38C(&qword_10036D900);
  char v2 = *a1;

  return sub_1001EB260(v2);
}

uint64_t sub_1001F6F58()
{
  uint64_t v1 = sub_10000A38C(&qword_10036D900);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001F6FEC(void *a1)
{
  sub_10000A38C(&qword_10036D900);

  return sub_1001F5250(a1);
}

uint64_t sub_1001F7064(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1001F7150(void *a1)
{
  id v1 = a1;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 BOOLForKey:v2];

  return v3;
}

void sub_1001F71D4(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setBool:a3 forKey:v5];
}

double sub_1001F72A8(void *a1)
{
  id v1 = a1;
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 doubleForKey:v2];
  double v4 = v3;

  return v4;
}

void sub_1001F7334(void *a1, double a2)
{
  id v3 = a1;
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 setDouble:v4 forKey:a2];
}

id sub_1001F7410(void *a1)
{
  id v1 = a1;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 integerForKey:v2];

  return v3;
}

void sub_1001F7494(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setInteger:a3 forKey:v5];
}

uint64_t sub_1001F7514()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v0 = sub_100098144();
  NSString v2 = v1;
  swift_release();
  v3._countAndFlagsBits = v0;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 32;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  uint64_t v5 = static String._fromSubstring(_:)();
  id v7 = v6;
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 62;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 60;
}

uint64_t sub_1001F7670@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1001F76F0()
{
  return static Published.subscript.setter();
}

uint64_t sub_1001F776C()
{
  v0._countAndFlagsBits = sub_1001F7514();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 45;
}

uint64_t sub_1001F77BC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (!v3) {
    return UUID.uuidString.getter();
  }
  id v0 = [v3 effectiveIdentifier];

  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v1;
}

uint64_t sub_1001F78E0()
{
  uint64_t v1 = v0;
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  uint64_t v2 = static String._fromSubstring(_:)();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_10008892C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v7 = *((void *)v5 + 2);
  unint64_t v6 = *((void *)v5 + 3);
  if (v7 >= v6 >> 1) {
    uint64_t v5 = sub_10008892C((char *)(v6 > 1), v7 + 1, 1, v5);
  }
  *((void *)v5 + 2) = v7 + 1;
  Swift::String v8 = &v5[16 * v7];
  *((void *)v8 + 4) = v2;
  *((void *)v8 + 5) = v4;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v9 = sub_10009BB90();
  uint64_t v11 = v10;
  swift_release();
  unint64_t v13 = *((void *)v5 + 2);
  unint64_t v12 = *((void *)v5 + 3);
  if (v13 >= v12 >> 1) {
    uint64_t v5 = sub_10008892C((char *)(v12 > 1), v13 + 1, 1, v5);
  }
  *((void *)v5 + 2) = v13 + 1;
  uint64_t v14 = &v5[16 * v13];
  *((void *)v14 + 4) = v9;
  *((void *)v14 + 5) = v11;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  unint64_t v113 = 0xD000000000000013;
  unint64_t v114 = 0x80000001002C4A30;
  if (sub_10000C78C())
  {
    char v15 = sub_10000C78C();
    uint64_t v16 = sub_1000E14C0(v15);
    unint64_t v18 = v17;
  }
  else
  {
    unint64_t v18 = 0xE200000000000000;
    uint64_t v16 = 23899;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  unint64_t v20 = v113;
  unint64_t v21 = v114;
  unint64_t v23 = *((void *)v5 + 2);
  unint64_t v22 = *((void *)v5 + 3);
  if (v23 >= v22 >> 1) {
    uint64_t v5 = sub_10008892C((char *)(v22 > 1), v23 + 1, 1, v5);
  }
  *((void *)v5 + 2) = v23 + 1;
  uint64_t v24 = &v5[16 * v23];
  *((void *)v24 + 4) = v20;
  *((void *)v24 + 5) = v21;
  uint64_t v25 = (uint64_t *)(v1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_tasks);
  swift_beginAccess();
  uint64_t v26 = *v25;
  if ((v26 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = *(void *)(v26 + 16);
  }
  v112[0] = v27;
  v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  unint64_t v30 = *((void *)v5 + 2);
  unint64_t v29 = *((void *)v5 + 3);
  if (v30 >= v29 >> 1) {
    uint64_t v5 = sub_10008892C((char *)(v29 > 1), v30 + 1, 1, v5);
  }
  *((void *)v5 + 2) = v30 + 1;
  uint64_t v31 = &v5[16 * v30];
  *((void *)v31 + 4) = 0x3D736B736174;
  *((void *)v31 + 5) = 0xE600000000000000;
  unint64_t v32 = 0xE400000000000000;
  v112[0] = 1030646644;
  v112[1] = 0xE400000000000000;
  swift_beginAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v33 = 1701602409;
  switch((char)v109)
  {
    case 1:
      break;
    case 2:
      unint64_t v32 = 0xE800000000000000;
      uint64_t v33 = 0x6465727265666564;
      break;
    case 3:
      unint64_t v32 = 0xE600000000000000;
      uint64_t v33 = 0x64656C696166;
      break;
    case 4:
      uint64_t v33 = 1953391987;
      break;
    case 5:
      unint64_t v32 = 0xE700000000000000;
      uint64_t v33 = 0x746E6573657270;
      break;
    default:
      unint64_t v32 = 0xE700000000000000;
      uint64_t v33 = 0x64657269736564;
      break;
  }
  unint64_t v34 = v32;
  String.append(_:)(*(Swift::String *)&v33);
  swift_bridgeObjectRelease();
  uint64_t v35 = v112[0];
  uint64_t v36 = v112[1];
  unint64_t v38 = *((void *)v5 + 2);
  unint64_t v37 = *((void *)v5 + 3);
  if (v38 >= v37 >> 1) {
    uint64_t v5 = sub_10008892C((char *)(v37 > 1), v38 + 1, 1, v5);
  }
  uint64_t v39 = 7104878;
  *((void *)v5 + 2) = v38 + 1;
  uint64_t v40 = &v5[16 * v38];
  *((void *)v40 + 4) = v35;
  *((void *)v40 + 5) = v36;
  strcpy((char *)v112, "activity=");
  WORD1(v112[1]) = 0;
  HIDWORD(v112[1]) = -385875968;
  uint64_t v41 = sub_1001F9EE0();
  if (v41)
  {
    uint64_t v109 = v41;
    sub_10000A38C((uint64_t *)&unk_10036E690);
    uint64_t v42 = String.init<A>(describing:)();
    unint64_t v44 = v43;
  }
  else
  {
    unint64_t v44 = 0xE300000000000000;
    uint64_t v42 = 7104878;
  }
  unint64_t v45 = v44;
  String.append(_:)(*(Swift::String *)&v42);
  swift_bridgeObjectRelease();
  uint64_t v46 = v112[0];
  uint64_t v47 = v112[1];
  unint64_t v49 = *((void *)v5 + 2);
  unint64_t v48 = *((void *)v5 + 3);
  if (v49 >= v48 >> 1) {
    uint64_t v5 = sub_10008892C((char *)(v48 > 1), v49 + 1, 1, v5);
  }
  *((void *)v5 + 2) = v49 + 1;
  long long v50 = &v5[16 * v49];
  *((void *)v50 + 4) = v46;
  *((void *)v50 + 5) = v47;
  strcpy((char *)v112, "distance=");
  WORD1(v112[1]) = 0;
  HIDWORD(v112[1]) = -385875968;
  swift_retain();
  CurrentValueSubject.value.getter();
  if ((v109 & 0x10000000000) != 0)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    if ((v111 & 1) == 0)
    {
      char v51 = v110;
LABEL_32:
      LOBYTE(v109) = v51;
      uint64_t v52 = String.init<A>(describing:)();
      unint64_t v54 = v53;
      goto LABEL_34;
    }
  }
  else
  {
    char v51 = v109;
    swift_release();
    if (((v109 | ((unint64_t)BYTE4(v109) << 32)) & 0x100000000) == 0) {
      goto LABEL_32;
    }
  }
  unint64_t v54 = 0xE300000000000000;
  uint64_t v52 = 7104878;
LABEL_34:
  unint64_t v55 = v54;
  String.append(_:)(*(Swift::String *)&v52);
  swift_bridgeObjectRelease();
  uint64_t v56 = v112[0];
  uint64_t v57 = v112[1];
  unint64_t v59 = *((void *)v5 + 2);
  unint64_t v58 = *((void *)v5 + 3);
  if (v59 >= v58 >> 1) {
    uint64_t v5 = sub_10008892C((char *)(v58 > 1), v59 + 1, 1, v5);
  }
  *((void *)v5 + 2) = v59 + 1;
  long long v60 = &v5[16 * v59];
  *((void *)v60 + 4) = v56;
  *((void *)v60 + 5) = v57;
  v112[0] = 0x3D656D616ELL;
  v112[1] = 0xE500000000000000;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v61 = sub_100098144();
  uint64_t v63 = v62;
  swift_release();
  v64._countAndFlagsBits = v61;
  v64._object = v63;
  String.append(_:)(v64);
  swift_bridgeObjectRelease();
  unint64_t v66 = *((void *)v5 + 2);
  unint64_t v65 = *((void *)v5 + 3);
  if (v66 >= v65 >> 1) {
    uint64_t v5 = sub_10008892C((char *)(v65 > 1), v66 + 1, 1, v5);
  }
  *((void *)v5 + 2) = v66 + 1;
  uint64_t v67 = &v5[16 * v66];
  *((void *)v67 + 4) = 0x3D656D616ELL;
  *((void *)v67 + 5) = 0xE500000000000000;
  strcpy((char *)v112, "mediaRouteID=");
  HIWORD(v112[1]) = -4864;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v68 = sub_100098724();
  unint64_t v70 = v69;
  swift_release();
  if (v70) {
    uint64_t v71 = v68;
  }
  else {
    uint64_t v71 = 7104878;
  }
  if (v70) {
    unint64_t v72 = v70;
  }
  else {
    unint64_t v72 = 0xE300000000000000;
  }
  unint64_t v73 = v72;
  String.append(_:)(*(Swift::String *)&v71);
  swift_bridgeObjectRelease();
  uint64_t v74 = v112[0];
  uint64_t v75 = v112[1];
  unint64_t v77 = *((void *)v5 + 2);
  unint64_t v76 = *((void *)v5 + 3);
  if (v77 >= v76 >> 1) {
    uint64_t v5 = sub_10008892C((char *)(v76 > 1), v77 + 1, 1, v5);
  }
  *((void *)v5 + 2) = v77 + 1;
  v78 = &v5[16 * v77];
  *((void *)v78 + 4) = v74;
  *((void *)v78 + 5) = v75;
  strcpy((char *)v112, "region=");
  v112[1] = 0xE700000000000000;
  swift_retain();
  CurrentValueSubject.value.getter();
  if (v110 == 6)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    if (v109 != 5)
    {
LABEL_48:
      uint64_t v79 = String.init<A>(describing:)();
      unint64_t v81 = v80;
      goto LABEL_51;
    }
  }
  else
  {
    swift_release();
    if (v110 != 5) {
      goto LABEL_48;
    }
  }
  unint64_t v81 = 0xE300000000000000;
  uint64_t v79 = 7104878;
LABEL_51:
  unint64_t v82 = v81;
  String.append(_:)(*(Swift::String *)&v79);
  swift_bridgeObjectRelease();
  uint64_t v83 = v112[0];
  uint64_t v84 = v112[1];
  unint64_t v86 = *((void *)v5 + 2);
  unint64_t v85 = *((void *)v5 + 3);
  if (v86 >= v85 >> 1) {
    uint64_t v5 = sub_10008892C((char *)(v85 > 1), v86 + 1, 1, v5);
  }
  *((void *)v5 + 2) = v86 + 1;
  uint64_t v87 = &v5[16 * v86];
  *((void *)v87 + 4) = v83;
  *((void *)v87 + 5) = v84;
  v112[0] = 1031172978;
  v112[1] = 0xE400000000000000;
  sub_10003E1FC();
  v88._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v88);
  swift_bridgeObjectRelease();
  unint64_t v90 = *((void *)v5 + 2);
  unint64_t v89 = *((void *)v5 + 3);
  if (v90 >= v89 >> 1) {
    uint64_t v5 = sub_10008892C((char *)(v89 > 1), v90 + 1, 1, v5);
  }
  *((void *)v5 + 2) = v90 + 1;
  uint64_t v91 = &v5[16 * v90];
  *((void *)v91 + 4) = 1031172978;
  *((void *)v91 + 5) = 0xE400000000000000;
  strcpy((char *)v112, "uxRegion=");
  WORD1(v112[1]) = 0;
  HIDWORD(v112[1]) = -385875968;
  if (sub_10003E708() == 4)
  {
    v92 = (void *)0xE300000000000000;
  }
  else
  {
    uint64_t v39 = String.init<A>(describing:)();
    v92 = v93;
  }
  v94._countAndFlagsBits = v39;
  v94._object = v92;
  String.append(_:)(v94);
  swift_bridgeObjectRelease();
  uint64_t v95 = v112[0];
  uint64_t v96 = v112[1];
  unint64_t v98 = *((void *)v5 + 2);
  unint64_t v97 = *((void *)v5 + 3);
  if (v98 >= v97 >> 1) {
    uint64_t v5 = sub_10008892C((char *)(v97 > 1), v98 + 1, 1, v5);
  }
  *((void *)v5 + 2) = v98 + 1;
  uint64_t v99 = &v5[16 * v98];
  *((void *)v99 + 4) = v95;
  *((void *)v99 + 5) = v96;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v112[0] = 0x6341656369766564;
  v112[1] = 0xEF3D797469766974;
  swift_retain();
  v100._countAndFlagsBits = sub_1001FB05C();
  String.append(_:)(v100);
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v102 = *((void *)v5 + 2);
  unint64_t v101 = *((void *)v5 + 3);
  if (v102 >= v101 >> 1) {
    uint64_t v5 = sub_10008892C((char *)(v101 > 1), v102 + 1, 1, v5);
  }
  *((void *)v5 + 2) = v102 + 1;
  long long v103 = &v5[16 * v102];
  *((void *)v103 + 4) = 0x6341656369766564;
  *((void *)v103 + 5) = 0xEF3D797469766974;
  v112[0] = (uint64_t)v5;
  swift_bridgeObjectRetain();
  sub_1001F87DC(v112);
  swift_bridgeObjectRelease();
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_100089B9C();
  uint64_t v104 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v106 = v105;
  swift_release();
  strcpy((char *)v112, "HandoffDevice ");
  HIBYTE(v112[1]) = -18;
  v107._countAndFlagsBits = v104;
  v107._object = v106;
  String.append(_:)(v107);
  swift_bridgeObjectRelease();
  return v112[0];
}

uint64_t sub_1001F8478()
{
  return sub_1001F78E0();
}

uint64_t sub_1001F849C()
{
  return sub_1001F7514();
}

Swift::Int sub_1001F84C0()
{
  return Hasher._finalize()();
}

uint64_t sub_1001F855C()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_1001F85E8()
{
  return Hasher._finalize()();
}

uint64_t sub_1001F8680()
{
  return static UUID.== infix(_:_:)();
}

uint64_t sub_1001F86A0()
{
  return sub_1001F9564(&qword_10036D948, (void (*)(uint64_t))type metadata accessor for HandoffDevice);
}

uint64_t sub_1001F86E8@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1001F8768()
{
  return static Published.subscript.setter();
}

Swift::Int sub_1001F87DC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1001F952C(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1001F8848(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1001F8848(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_1001F8F34(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  unint64_t v102 = a1;
  if (v3 < 2)
  {
    Swift::String v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      Swift::String v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          unint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_1001F9004((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v97 = sub_1001F9518((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          Swift::String v100 = &v97[16 * v96 + 32];
          *(void *)Swift::String v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          Swift::String v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v104[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v106 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    unint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    unint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      unint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1001F92A0(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = sub_1001F92A0((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    unint64_t v43 = &v11[16 * v41 + 32];
    *(void *)unint64_t v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      Swift::Int v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          unint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        uint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        uint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        unint64_t v85 = v11;
        unint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        Swift::String v88 = v42;
        unint64_t v89 = v44;
        unint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_1001F9004((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)unint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        Swift::Int v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      Swift::String v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    Swift::Int v32 = v3;
  }
  else {
    Swift::Int v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      uint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        unint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        Swift::Int v37 = v13;
        unint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)unint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F8F34(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      Swift::Int result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001F9004(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  Swift::Int v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      unint64_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      Swift::Int v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        unint64_t v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          Swift::Int v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)unint64_t v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
            }
            Swift::Int v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      Swift::Int v27 = v7;
    }
LABEL_50:
    sub_1001F93A0((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1001F92A0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A38C(&qword_10036D950);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1001F93A0(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_1001F945C(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_1001F9518(uint64_t a1)
{
  return sub_1001F92A0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001F952C(uint64_t a1)
{
  return sub_1000B5A44(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001F9540(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1001F9564(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1001F95B8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_1000B54DC(0, v1, 0);
  uint64_t result = (void *)sub_1001FB3FC(v2);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = v2 + 64;
  uint64_t v28 = v2 + 80;
  int64_t v29 = v1;
  uint64_t v31 = v2 + 64;
  uint64_t v32 = v2;
  int v30 = v4;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v2 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    if (*(_DWORD *)(v2 + 36) != v4) {
      goto LABEL_27;
    }
    int64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
    uint64_t v12 = *(void **)(*(void *)(v2 + 56) + 8 * v5);
    uint64_t v33 = *v11;
    uint64_t v34 = v11[1];
    id v13 = v12;
    swift_bridgeObjectRetain_n();
    v14._countAndFlagsBits = 61;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    if (v12)
    {
      sub_100019E10(0, &qword_10036DB98);
      id v15 = v13;
      uint64_t v16 = String.init<A>(describing:)();
      unint64_t v18 = v17;
    }
    else
    {
      unint64_t v18 = 0xE300000000000000;
      uint64_t v16 = 7104878;
    }
    unint64_t v19 = v18;
    String.append(_:)(*(Swift::String *)&v16);

    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    unint64_t v21 = _swiftEmptyArrayStorage[2];
    unint64_t v20 = _swiftEmptyArrayStorage[3];
    if (v21 >= v20 >> 1) {
      uint64_t result = (void *)sub_1000B54DC(v20 > 1, v21 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v21 + 1;
    uint64_t v22 = &_swiftEmptyArrayStorage[2 * v21];
    v22[4] = v33;
    v22[5] = v34;
    uint64_t v2 = v32;
    int64_t v8 = 1 << *(unsigned char *)(v32 + 32);
    if (v5 >= v8) {
      goto LABEL_28;
    }
    uint64_t v7 = v31;
    uint64_t v23 = *(void *)(v31 + 8 * v10);
    if ((v23 & (1 << v5)) == 0) {
      goto LABEL_29;
    }
    int v4 = v30;
    if (*(_DWORD *)(v32 + 36) != v30) {
      goto LABEL_30;
    }
    unint64_t v24 = v23 & (-2 << (v5 & 0x3F));
    if (v24)
    {
      int64_t v8 = __clz(__rbit64(v24)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v29;
    }
    else
    {
      unint64_t v25 = v10 + 1;
      unint64_t v26 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v29;
      if (v10 + 1 < v26)
      {
        unint64_t v27 = *(void *)(v31 + 8 * v25);
        if (v27)
        {
LABEL_23:
          int64_t v8 = __clz(__rbit64(v27)) + (v25 << 6);
        }
        else
        {
          while (v26 - 2 != v10)
          {
            unint64_t v27 = *(void *)(v28 + 8 * v10++);
            if (v27)
            {
              unint64_t v25 = v10 + 1;
              goto LABEL_23;
            }
          }
        }
      }
    }
    ++v6;
    uint64_t v5 = v8;
    if (v6 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1001F985C()
{
  uint64_t v1 = sub_10000A38C(&qword_10036DBB0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10036DBB8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036AFA8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000A38C(&qword_10036DBC0);
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + 64))
  {
    uint64_t v18 = *(void *)(v0 + 64);
  }
  else
  {
    uint64_t v41 = v14;
    uint64_t v42 = v15;
    unint64_t v40 = v17;
    sub_10000A38C(&qword_10036AFC0);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_10028FC10;
    uint64_t v37 = v2;
    swift_retain();
    uint64_t v33 = v0;
    uint64_t v19 = sub_100104EC4();
    uint64_t v38 = v9;
    uint64_t v43 = v19;
    sub_10000A38C(&qword_100366438);
    uint64_t v39 = v10;
    uint64_t v36 = v1;
    sub_10000B010(&qword_10036DBC8, &qword_100366438);
    uint64_t v20 = Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    uint64_t v43 = v20;
    sub_10000A38C(&qword_10036DBD0);
    uint64_t v34 = &protocol conformance descriptor for AnyPublisher<A, B>;
    sub_10000B010(&qword_10036DBD8, &qword_10036DBD0);
    uint64_t v32 = (char *)&type metadata for () + 8;
    Publisher.map<A>(_:)();
    sub_10000B010(&qword_10036DBE0, &qword_10036DBB8);
    uint64_t v21 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_release();
    uint64_t v22 = v35;
    *(void *)(v35 + 32) = v21;
    uint64_t v23 = v33;
    swift_retain();
    uint64_t v43 = sub_100104ED0();
    sub_10000A38C(&qword_100366450);
    sub_10000B010(&qword_10036DBE8, &qword_100366450);
    uint64_t v24 = Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    uint64_t v43 = v24;
    sub_10000A38C(&qword_10035E228);
    sub_10000B010(&qword_10035E230, &qword_10035E228);
    Publisher.map<A>(_:)();
    sub_10000B010(&qword_10036DBF0, &qword_10036DBB0);
    uint64_t v25 = v36;
    uint64_t v26 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v4, v25);
    swift_release();
    *(void *)(v22 + 40) = v26;
    uint64_t v43 = v22;
    specialized Array._endMutation()();
    sub_10000A38C((uint64_t *)&unk_100367FA0);
    sub_10000B010(&qword_10036B020, (uint64_t *)&unk_100367FA0);
    Publishers.MergeMany.init(_:)();
    swift_allocObject();
    uint64_t v27 = v23;
    swift_weakInit();
    type metadata accessor for DeviceActivity();
    sub_10000B010(&qword_10036B030, &qword_10036AFA8);
    uint64_t v28 = v40;
    uint64_t v29 = v38;
    Publisher.compactMap<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v29);
    sub_10000B010(qword_10036DBF8, &qword_10036DBC0);
    uint64_t v30 = v41;
    uint64_t v18 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v28, v30);
    *(void *)(v27 + 64) = v18;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v18;
}

uint64_t sub_1001F9EE0()
{
  sub_10000A38C(&qword_10036DBA8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100291160;
  uint64_t v2 = *(void **)(v0[3] + 24);
  *(void *)(inited + 32) = v2;
  uint64_t v3 = *(void **)(v0[4] + 24);
  *(void *)(inited + 40) = v3;
  int v4 = *(void **)(v0[5] + 24);
  if (v4)
  {
    id v5 = v3;
    id v6 = v2;
    if (([v4 isVideo] & 1) == 0)
    {
      uint64_t v7 = *(void **)(v0[5] + 24);
      if (v7)
      {
        *(void *)(inited + 48) = v7;
        id v8 = v7;
        goto LABEL_7;
      }
    }
  }
  else
  {
    id v9 = v2;
    id v10 = v3;
  }
  *(void *)(inited + 48) = 0;
LABEL_7:
  uint64_t v11 = *(void **)(v0[6] + 24);
  *(void *)(inited + 56) = v11;
  uint64_t v12 = *(void **)(v0[7] + 24);
  *(void *)(inited + 64) = v12;
  specialized Array._endMutation()();
  uint64_t v26 = _swiftEmptyArrayStorage;
  if (!*(void *)(inited + 32))
  {
    id v15 = v12;
    id v16 = v11;
    if (!*(void *)(inited + 40)) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  swift_unknownObjectRetain();
  id v13 = v11;
  id v14 = v12;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (*(void *)(inited + 40))
  {
LABEL_13:
    swift_unknownObjectRetain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
LABEL_16:
  if (*(void *)(inited + 48))
  {
    swift_unknownObjectRetain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (*(void *)(inited + 56))
  {
    swift_unknownObjectRetain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (*(void *)(inited + 64))
  {
    swift_unknownObjectRetain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  swift_bridgeObjectRelease();
  if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
  {
    uint64_t v17 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v17) {
      goto LABEL_30;
    }
LABEL_35:
    swift_bridgeObjectRelease_n();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v17 = result;
  if (!result) {
    goto LABEL_35;
  }
LABEL_30:
  unint64_t v19 = (unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v20 = (void *)result;
    unint64_t v21 = v17 - 1;
    if (v17 == 1) {
      goto LABEL_33;
    }
  }
  else
  {
    if (!*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_50;
    }
    uint64_t v20 = (void *)_swiftEmptyArrayStorage[4];
    uint64_t result = swift_unknownObjectRetain();
    unint64_t v21 = v17 - 1;
    if (v17 == 1)
    {
LABEL_33:
      swift_bridgeObjectRelease_n();
      return (uint64_t)v20;
    }
  }
  if (v17 < 2)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v19
    || (unint64_t v22 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10), v22 >= 2)
    && v21 < v22)
  {
    uint64_t v23 = 0;
    do
    {
      if (v19)
      {
        uint64_t v24 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v24 = (void *)_swiftEmptyArrayStorage[v23 + 5];
        swift_unknownObjectRetain();
      }
      id v25 = [v24 pcactivityType:v26];
      if (v25 < [v20 pcactivityType]) {
        uint64_t v20 = v24;
      }
      swift_unknownObjectRelease();
      ++v23;
    }
    while (v21 != v23);
    goto LABEL_33;
  }
LABEL_51:
  __break(1u);
  return result;
}

void sub_1001FA324()
{
  qword_10036D958 = 0x40F5144000000000;
}

void sub_1001FA338(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v67 = *v1;
  uint64_t v4 = sub_10000A38C(&qword_10035E158);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v64 - v11;
  __chkstk_darwin(v10);
  id v14 = (char *)&v64 - v13;
  aBlock = (void **)0xD000000000000017;
  unint64_t v71 = 0x80000001002C4B40;
  uint64_t v68 = v15;
  if (a1)
  {
    uint64_t v69 = a1;
    sub_100019E10(0, &qword_10036DBA0);
    id v16 = a1;
    uint64_t v17 = String.init<A>(describing:)();
    unint64_t v19 = v18;
  }
  else
  {
    unint64_t v19 = 0xE300000000000000;
    uint64_t v17 = 7104878;
  }
  unint64_t v20 = v19;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  id v21 = sub_1001F66C8();
  swift_bridgeObjectRetain();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v21 ulog:40 message:v22];
  swift_bridgeObjectRelease();

  [(id)v2[10] invalidate];
  uint64_t v23 = (void *)v2[10];
  v2[10] = 0;

  if (!a1) {
    goto LABEL_13;
  }
  id v24 = a1;
  id v25 = [v24 fireDate];
  if (!v25)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_12;
  }
  uint64_t v26 = v25;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v27(v6, v12, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_12:

    sub_1000B0424((uint64_t)v6);
LABEL_13:
    uint64_t v42 = v2[3];
    uint64_t v43 = *(void **)(v42 + 24);
    *(void *)(v42 + 24) = 0;
    swift_retain();

    sub_100105124();
    aBlock = *(void ***)(v42 + 24);
    unint64_t v44 = aBlock;
    CurrentValueSubject.send(_:)();
    swift_release();

    swift_release();
    return;
  }
  v27(v14, v6, v7);
  if (qword_10035A610 != -1) {
    swift_once();
  }
  uint64_t v28 = v68;
  Date.advanced(by:)();
  Date.init()();
  char v29 = static Date.< infix(_:_:)();
  BOOL v65 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v66 = v8 + 8;
  v65(v12, v7);
  uint64_t v30 = v14;
  aBlock = 0;
  unint64_t v71 = 0xE000000000000000;
  if (v29)
  {
    _StringGuts.grow(_:)(53);
    v31._countAndFlagsBits = 0xD000000000000031;
    v31._object = (void *)0x80000001002C4BC0;
    String.append(_:)(v31);
    sub_1001FB574((unint64_t *)&qword_10036C040, (void (*)(uint64_t))&type metadata accessor for Date);
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 10528;
    v33._object = (void *)0xE200000000000000;
    String.append(_:)(v33);
    uint64_t v34 = v28;
    id v35 = sub_1001F66C8();
    swift_bridgeObjectRetain();
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v35 ulog:40 message:v36];
    swift_bridgeObjectRelease();

    uint64_t v37 = v2[3];
    uint64_t v38 = *(void **)(v37 + 24);
    *(void *)(v37 + 24) = a1;
    id v39 = v24;
    swift_retain();

    sub_100105124();
    aBlock = *(void ***)(v37 + 24);
    unint64_t v40 = aBlock;
    CurrentValueSubject.send(_:)();
    swift_release();

    swift_release();
    uint64_t v41 = v65;
    v65(v34, v7);
    v41(v30, v7);
  }
  else
  {
    _StringGuts.grow(_:)(56);
    v45._countAndFlagsBits = 0xD000000000000034;
    v45._object = (void *)0x80000001002C4B60;
    String.append(_:)(v45);
    sub_1001FB574((unint64_t *)&qword_10036C040, (void (*)(uint64_t))&type metadata accessor for Date);
    v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v47 = v28;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 10528;
    v48._object = (void *)0xE200000000000000;
    String.append(_:)(v48);
    id v49 = sub_1001F66C8();
    swift_bridgeObjectRetain();
    NSString v50 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v49 ulog:40 message:v50];
    swift_bridgeObjectRelease();

    uint64_t v51 = v2[3];
    uint64_t v52 = *(void **)(v51 + 24);
    *(void *)(v51 + 24) = 0;
    swift_retain();

    sub_100105124();
    aBlock = *(void ***)(v51 + 24);
    uint64_t v53 = aBlock;
    CurrentValueSubject.send(_:)();
    swift_release();

    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v47, v7);
    uint64_t v54 = (void *)swift_allocObject();
    v54[2] = v2;
    v54[3] = v24;
    v54[4] = v67;
    BOOL v55 = v30;
    id v56 = objc_allocWithZone((Class)NSTimer);
    id v57 = v24;
    swift_retain();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v74 = sub_1001FB4C4;
    uint64_t v75 = v54;
    aBlock = _NSConcreteStackBlock;
    unint64_t v71 = 1107296256;
    BOOL v72 = sub_10004B62C;
    uint64_t v73 = &unk_100331668;
    uint64_t v59 = _Block_copy(&aBlock);
    id v60 = [v56 initWithFireDate:isa interval:0 repeats:v59 block:0.0];
    _Block_release(v59);

    uint64_t v61 = (void (*)(uint64_t, uint64_t))v65;
    v65(v12, v7);
    swift_release();
    id v62 = [self mainRunLoop];
    [v62 addTimer:v60 forMode:NSRunLoopCommonModes];

    v61((uint64_t)v47, v7);
    v61((uint64_t)v55, v7);
    uint64_t v63 = (void *)v2[10];
    v2[10] = v60;
  }
}

uint64_t sub_1001FABD8(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10035A628 != -1) {
    swift_once();
  }
  uint64_t v13 = (void *)qword_1003ACB50;
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  id v15 = (void *)swift_allocObject();
  v15[2] = a1;
  v15[3] = v14;
  v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_1001FB568;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_1003316E0;
  id v16 = _Block_copy(aBlock);
  id v17 = v13;
  id v18 = a1;
  swift_retain();
  id v19 = a3;
  static DispatchQoS.unspecified.getter();
  id v24 = _swiftEmptyArrayStorage;
  sub_1001FB574((unint64_t *)&qword_100363D50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v22);
  swift_release();
  return swift_release();
}

uint64_t sub_1001FAF20(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  [a1 invalidate];
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = *(void **)(Strong + 80);
    *(void *)(Strong + 80) = 0;
    swift_release();
  }
  sub_10016ABE4(0xD000000000000028, (void *)0x80000001002C4C00, 0, a4, (uint64_t)&off_100331608);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v9 = *(void *)(result + 24);
    uint64_t v10 = *(void **)(v9 + 24);
    *(void *)(v9 + 24) = a3;
    id v11 = a3;
    swift_retain();

    sub_100105124();
    id v12 = *(id *)(v9 + 24);
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();

    return swift_release();
  }
  return result;
}

unint64_t sub_1001FB05C()
{
  sub_10000A38C(&qword_10036DB90);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100291160;
  *(void *)(inited + 32) = 0x6D72616C61;
  *(void *)(inited + 40) = 0xE500000000000000;
  uint64_t v2 = *(void **)(v0[3] + 24);
  *(void *)(inited + 48) = v2;
  strcpy((char *)(inited + 56), "announcement");
  *(unsigned char *)(inited + 69) = 0;
  *(_WORD *)(inited + 70) = -5120;
  uint64_t v3 = *(void **)(v0[4] + 24);
  *(void *)(inited + 72) = v3;
  *(void *)(inited + 80) = 1819042147;
  *(void *)(inited + 88) = 0xE400000000000000;
  uint64_t v4 = *(void **)(v0[5] + 24);
  *(void *)(inited + 96) = v4;
  *(void *)(inited + 104) = 0x616964656DLL;
  *(void *)(inited + 112) = 0xE500000000000000;
  uint64_t v5 = *(void **)(v0[6] + 24);
  *(void *)(inited + 120) = v5;
  *(void *)(inited + 128) = 0x72656D6974;
  *(void *)(inited + 136) = 0xE500000000000000;
  id v6 = *(void **)(v0[7] + 24);
  *(void *)(inited + 144) = v6;
  id v7 = v6;
  id v8 = v2;
  id v9 = v3;
  id v10 = v4;
  id v11 = v5;
  unint64_t v12 = sub_100268A50(inited);
  sub_1001F95B8(v12);
  swift_bridgeObjectRelease();
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_10000B010((unint64_t *)&qword_10035E7F0, (uint64_t *)&unk_100367D40);
  uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
  id v15 = v14;
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 62;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  return 0xD000000000000010;
}

uint64_t sub_1001FB25C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return v0;
}

uint64_t sub_1001FB2BC()
{
  sub_1001FB25C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DeviceActivity()
{
  return self;
}

void *sub_1001FB314()
{
  v0[2] = 0;
  sub_10000A38C(&qword_10036DB68);
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  v0[3] = v1;
  sub_10000A38C(&qword_10036DB70);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  v0[4] = v2;
  sub_10000A38C(&qword_10036DB78);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  v0[5] = v3;
  sub_10000A38C(&qword_10036DB80);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  v0[6] = v4;
  sub_10000A38C(&qword_10036DB88);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  v0[7] = v5;
  v0[8] = 0;
  v0[9] = 0;
  v0[10] = 0;
  return v0;
}

unint64_t sub_1001FB3D4()
{
  return sub_1001FB05C();
}

uint64_t sub_1001FB3FC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  id v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1001FB484()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001FB4C4(void *a1)
{
  return sub_1001FABD8(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1001FB4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001FB4E0()
{
  return swift_release();
}

uint64_t sub_1001FB4E8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001FB520()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001FB568()
{
  return sub_1001FAF20(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001FB574(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001FB5BC@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_1001FB610()
{
  uint64_t result = type metadata accessor for ClosedRange();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void **sub_1001FB6FC(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = v7 + v6;
  uint64_t v9 = ((v7 + v6) & ~v6) + v7;
  uint64_t v10 = v7 + 7;
  unint64_t v11 = ((v7 + 7 + ((v9 + v6 + ((v6 + 8) & ~v6)) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 16;
  int v12 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v13 = (char *)*a2;
  *a1 = *a2;
  if (v6 > 7 || v12 != 0 || v11 > 0x18)
  {
    Swift::String v16 = &v13[(v6 & 0xF8 ^ 0x1F8) & (v6 + 16)];
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v6;
    uint64_t v26 = (uint64_t)a1 + v6 + 8;
    uint64_t v18 = v26 & ~v6;
    uint64_t v27 = (uint64_t)a2 + v6 + 8;
    uint64_t v28 = a1;
    uint64_t v19 = v27 & ~v6;
    unint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    uint64_t v21 = v13;
    v20(v18, v19, v4);
    v20((v8 + v18) & v17, (v8 + v19) & v17, v4);
    v20(((v26 | v6) + v9) & v17, ((v27 | v6) + v9) & v17, v4);
    unint64_t v22 = (v10 + (((v26 | v6) + v9) & ~v6)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = (v10 + (((v27 | v6) + v9) & ~v6)) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v23 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
    }
    else
    {
      uint64_t v24 = *(void *)(v23 + 8);
      *(void *)unint64_t v22 = *(void *)v23;
      *(void *)(v22 + 8) = v24;
      swift_retain();
    }
    return v28;
  }
  return (void **)v16;
}

uint64_t sub_1001FB8D8(id *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v7 = v5 + 8;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  v6(v9, v4);
  uint64_t v10 = *(void *)(v7 + 56);
  uint64_t v11 = v10 + v8 + v9;
  v6(v11 & ~v8, v4);
  uint64_t v12 = (v11 + ((v10 + v8) & ~v8)) & ~v8;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v6)(v12, v4);
  if (*(void *)((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

void **sub_1001FB9E8(void **a1, void **a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v9 = (unint64_t)a1 + v8 + 8;
  unint64_t v10 = (unint64_t)a2 + v8 + 8;
  id v11 = v3;
  v6(v9 & ~v8, v10 & ~v8, v4);
  uint64_t v12 = *(void *)(v7 + 48);
  v6((v12 + v8 + (v9 & ~v8)) & ~v8, (v12 + v8 + (v10 & ~v8)) & ~v8, v4);
  uint64_t v13 = ((v12 + v8) & ~v8) + v12;
  unint64_t v14 = ((v9 | v8) + v13) & ~v8;
  unint64_t v15 = ((v10 | v8) + v13) & ~v8;
  v6(v14, v15, v4);
  unint64_t v16 = (v12 + 7 + v14) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v12 + 7 + v15) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v17 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
  }
  else
  {
    uint64_t v18 = *(void *)(v17 + 8);
    *(void *)unint64_t v16 = *(void *)v17;
    *(void *)(v16 + 8) = v18;
    swift_retain();
  }
  return a1;
}

void **sub_1001FBB2C(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  id v11 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 24);
  uint64_t v12 = v10 + 24;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  unint64_t v14 = (unint64_t)a1 + v13 + 8;
  unint64_t v15 = (unint64_t)a2 + v13 + 8;
  v11(v14 & ~v13, v15 & ~v13, v9);
  uint64_t v16 = *(void *)(v12 + 40);
  v11((v16 + v13 + (v14 & ~v13)) & ~v13, (v16 + v13 + (v15 & ~v13)) & ~v13, v9);
  uint64_t v17 = ((v16 + v13) & ~v13) + v16;
  unint64_t v18 = ((v14 | v13) + v17) & ~v13;
  unint64_t v19 = ((v15 | v13) + v17) & ~v13;
  v11(v18, v19, v9);
  unint64_t v20 = (void *)((v16 + 7 + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (unint64_t *)((v16 + 7 + v19) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = *v21;
  if (*v20 < 0xFFFFFFFFuLL)
  {
    if (v22 >= 0xFFFFFFFF)
    {
      unint64_t v24 = v21[1];
      *unint64_t v20 = v22;
      v20[1] = v24;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
    return a1;
  }
  if (v22 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v23 = v21[1];
  *unint64_t v20 = v22;
  v20[1] = v23;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_1001FBCC4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 32);
  uint64_t v6 = v4 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v8 = (unint64_t)a1 + v7 + 8;
  unint64_t v9 = (unint64_t)a2 + v7 + 8;
  v5(v8 & ~v7, v9 & ~v7, v3);
  uint64_t v10 = *(void *)(v6 + 32);
  v5((v10 + v7 + (v8 & ~v7)) & ~v7, (v10 + v7 + (v9 & ~v7)) & ~v7, v3);
  uint64_t v11 = ((v10 + v7) & ~v7) + v10;
  unint64_t v12 = ((v8 | v7) + v11) & ~v7;
  unint64_t v13 = ((v9 | v7) + v11) & ~v7;
  v5(v12, v13, v3);
  unint64_t v14 = (v10 + 7 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (uint64_t *)((v10 + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = *v15;
  if ((unint64_t)*v15 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v17 = v15[1];
    *(void *)unint64_t v14 = v16;
    *(void *)(v14 + 8) = v17;
  }
  return a1;
}

void **sub_1001FBE00(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40);
  uint64_t v10 = v8 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  unint64_t v12 = (unint64_t)a1 + v11 + 8;
  unint64_t v13 = (unint64_t)a2 + v11 + 8;
  v9(v12 & ~v11, v13 & ~v11, v7);
  uint64_t v14 = *(void *)(v10 + 24);
  v9((v14 + v11 + (v12 & ~v11)) & ~v11, (v14 + v11 + (v13 & ~v11)) & ~v11, v7);
  uint64_t v15 = ((v14 + v11) & ~v11) + v14;
  unint64_t v16 = ((v12 | v11) + v15) & ~v11;
  unint64_t v17 = ((v13 | v11) + v15) & ~v11;
  v9(v16, v17, v7);
  unint64_t v18 = (void *)((v14 + 7 + v16) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = (unint64_t *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = *v19;
  if (*v18 < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      unint64_t v22 = v19[1];
      *unint64_t v18 = v20;
      v18[1] = v22;
      return a1;
    }
LABEL_7:
    *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
    return a1;
  }
  if (v20 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v21 = v19[1];
  *unint64_t v18 = v20;
  v18[1] = v21;
  swift_release();
  return a1;
}

uint64_t sub_1001FBF88(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    unint64_t v9 = ((v7 + ((v7 + v6 + ((v7 + v6) & ~v6) + ((v6 + 8) & ~v6)) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v10 = a2 - v8;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1001FC0F4);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v8 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
  }
  uint64_t v18 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

void sub_1001FC108(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v11 = ((v10 + v9) & ~v9) + v10;
  size_t v12 = ((v10 + ((((v9 + 8) | v9) + v11) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v16 = 0;
    int v17 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v16)
      {
        case 1:
          a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_56;
        case 4:
          *(_DWORD *)&a1[v12] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v21 = (unsigned char *)((unint64_t)&a1[v9 + 8] & ~v9);
              if (v7 >= a2)
              {
                id v25 = *(void (**)(unint64_t))(v6 + 56);
                unint64_t v26 = (unint64_t)&a1[v9 + 8] & ~v9;
                v25(v26);
              }
              else
              {
                if (v11 <= 3) {
                  int v22 = ~(-1 << (8 * v11));
                }
                else {
                  int v22 = -1;
                }
                if (v11)
                {
                  int v23 = v22 & (~v7 + a2);
                  if (v11 <= 3) {
                    int v24 = v11;
                  }
                  else {
                    int v24 = 4;
                  }
                  bzero(v21, v11);
                  switch(v24)
                  {
                    case 2:
                      *(_WORD *)unint64_t v21 = v23;
                      break;
                    case 3:
                      *(_WORD *)unint64_t v21 = v23;
                      v21[2] = BYTE2(v23);
                      break;
                    case 4:
                      *(_DWORD *)unint64_t v21 = v23;
                      break;
                    default:
                      *unint64_t v21 = v23;
                      break;
                  }
                }
              }
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              *(void *)a1 = v20;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v13 = a3 - v8;
    if (((v10 + ((((v9 + 8) | v9) + v11) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    int v17 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (v12) {
    int v18 = 1;
  }
  else {
    int v18 = v17;
  }
  if (v12)
  {
    int v19 = ~v8 + a2;
    bzero(a1, v12);
    *(_DWORD *)a1 = v19;
  }
  switch(v16)
  {
    case 1:
      a1[v12] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v12] = v18;
      break;
    case 3:
LABEL_56:
      __break(1u);
      JUMPOUT(0x1001FC3A0);
    case 4:
      *(_DWORD *)&a1[v12] = v18;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for Clamping()
{
  return sub_10000F2E4();
}

unsigned char *storeEnumTagSinglePayload for PeerActivityTransportError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001FC4BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PeerActivityTransportError()
{
  return &type metadata for PeerActivityTransportError;
}

unint64_t sub_1001FC4F8()
{
  unint64_t result = qword_10036DC80;
  if (!qword_10036DC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DC80);
  }
  return result;
}

uint64_t sub_1001FC54C(uint64_t a1)
{
  unint64_t v2 = &_swiftEmptyDictionarySingleton;
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v30 = a1 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  unint64_t v44 = &_swiftEmptyDictionarySingleton;
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & v3;
  int64_t v29 = (unint64_t)(63 - v4) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v8 << 6);
      goto LABEL_25;
    }
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v12 >= v29) {
      goto LABEL_39;
    }
    unint64_t v13 = *(void *)(v30 + 8 * v12);
    int64_t v14 = v8 + 1;
    if (!v13)
    {
      int64_t v14 = v8 + 2;
      if (v8 + 2 >= v29) {
        goto LABEL_39;
      }
      unint64_t v13 = *(void *)(v30 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v8 + 3;
        if (v8 + 3 >= v29) {
          goto LABEL_39;
        }
        unint64_t v13 = *(void *)(v30 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v8 + 4;
          if (v8 + 4 >= v29) {
            goto LABEL_39;
          }
          unint64_t v13 = *(void *)(v30 + 8 * v14);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v8 = v14;
LABEL_25:
    sub_10005C374(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v41);
    sub_1001FF064(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v42 + 8);
    v39[0] = v42[0];
    v39[1] = v42[1];
    uint64_t v40 = v43;
    long long v37 = v41[0];
    long long v38 = v41[1];
    sub_1001FF064((uint64_t)v39 + 8, (uint64_t)&v32);
    if (*((void *)&v33 + 1))
    {
      sub_100027B00(&v32, v36);
      long long v32 = v37;
      long long v33 = v38;
      uint64_t v34 = *(void *)&v39[0];
      sub_1001FF0CC((uint64_t)v39 + 8, (uint64_t)v35);
      sub_100027B00(v36, v31);
      unint64_t v16 = v2[2];
      if (v2[3] <= v16)
      {
        sub_100054E60(v16 + 1, 1);
        unint64_t v2 = v44;
      }
      uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
      int v17 = (char *)(v2 + 8);
      uint64_t v18 = -1 << *((unsigned char *)v2 + 32);
      unint64_t v19 = result & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~v2[(v19 >> 6) + 8]) != 0)
      {
        unint64_t v21 = __clz(__rbit64((-1 << v19) & ~v2[(v19 >> 6) + 8])) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v24 = v20 == v23;
          if (v20 == v23) {
            unint64_t v20 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)&v17[8 * v20];
        }
        while (v25 == -1);
        unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
      }
      *(void *)&v17[(v21 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v21;
      uint64_t v26 = v2[6] + 40 * v21;
      long long v27 = v32;
      long long v28 = v33;
      *(void *)(v26 + 32) = v34;
      *(_OWORD *)uint64_t v26 = v27;
      *(_OWORD *)(v26 + 16) = v28;
      sub_100027B00(v31, (_OWORD *)(v2[7] + 32 * v21));
      ++v2[2];
      uint64_t v9 = (long long *)v35;
    }
    else
    {
      sub_10000D78C((uint64_t)&v37, &qword_10036DC98);
      uint64_t v9 = &v32;
    }
    uint64_t result = sub_10000D78C((uint64_t)v9, &qword_100371910);
  }
  int64_t v15 = v8 + 5;
  if (v8 + 5 >= v29)
  {
LABEL_39:
    sub_10002E7C4();
    return (uint64_t)v2;
  }
  unint64_t v13 = *(void *)(v30 + 8 * v15);
  if (v13)
  {
    int64_t v14 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_39;
    }
    unint64_t v13 = *(void *)(v30 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_24;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001FC8E4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LaunchAppRequest.Option();
  __chkstk_darwin(v9);
  unint64_t v11 = (uint64_t *)((char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001FFF20(v0, (uint64_t)v11);
  uint64_t v12 = 0x55794D6563726F66;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v8, v11, v5);
      unint64_t v27 = 0;
      unint64_t v28 = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v16._countAndFlagsBits = 0xD000000000000031;
      v16._object = (void *)0x80000001002C4C90;
      String.append(_:)(v16);
      goto LABEL_6;
    case 2u:
      uint64_t v19 = *v11;
      unint64_t v20 = (void *)v11[1];
      unint64_t v27 = 0;
      unint64_t v28 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      unint64_t v27 = 0xD00000000000002ALL;
      unint64_t v28 = 0x80000001002C4C60;
      v21._countAndFlagsBits = v19;
      v21._object = v20;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 41;
      v22._object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      uint64_t v12 = v27;
      break;
    case 3u:
      char v13 = *((unsigned char *)v11 + *(int *)(sub_10000A38C(&qword_10036DCA0) + 48));
      (*(void (**)(char *, uint64_t *, uint64_t))(v2 + 32))(v4, v11, v1);
      unint64_t v27 = 678195829;
      unint64_t v28 = 0xE400000000000000;
      if (v13)
      {
        unint64_t v14 = 0xE500000000000000;
        uint64_t v15 = 0x3E6C72753CLL;
      }
      else
      {
        uint64_t v15 = URL.absoluteString.getter();
        unint64_t v14 = v23;
      }
      unint64_t v24 = v14;
      String.append(_:)(*(Swift::String *)&v15);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 41;
      v25._object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      uint64_t v12 = v27;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
    case 4u:
      return v12;
    default:
      (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v8, v11, v5);
      unint64_t v27 = 0;
      unint64_t v28 = 0xE000000000000000;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      unint64_t v27 = 0xD000000000000021;
      unint64_t v28 = 0x80000001002C4CD0;
LABEL_6:
      sub_10020018C((unint64_t *)&qword_10035F778, (void (*)(uint64_t))&type metadata accessor for UUID);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 41;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      uint64_t v12 = v27;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      break;
  }
  return v12;
}

void sub_1001FCD20()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LaunchAppRequest.Option();
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001FFF20(v0, (uint64_t)v11);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
      Swift::UInt v12 = 1;
      goto LABEL_4;
    case 2u:
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      break;
    case 3u:
      Swift::UInt8 v13 = v11[*(int *)(sub_10000A38C(&qword_10036DCA0) + 48)];
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v11, v1);
      Hasher._combine(_:)(4uLL);
      sub_10020018C(&qword_10036DDF0, (void (*)(uint64_t))&type metadata accessor for URL);
      dispatch thunk of Hashable.hash(into:)();
      Hasher._combine(_:)(v13);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
    case 4u:
      Hasher._combine(_:)(3uLL);
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
      Swift::UInt v12 = 0;
LABEL_4:
      Hasher._combine(_:)(v12);
      sub_10020018C((unint64_t *)&qword_10035CFF0, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      break;
  }
}

unint64_t sub_1001FD090(char a1)
{
  unint64_t result = 0xD000000000000016;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 2:
      unint64_t result = 0xD000000000000024;
      break;
    case 3:
      unint64_t result = 0x55794D6563726F66;
      break;
    case 4:
      unint64_t result = 7107189;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001FD13C(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036DD60);
  uint64_t v60 = *(void *)(v2 - 8);
  uint64_t v61 = v2;
  __chkstk_darwin(v2);
  id v57 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v59 = v4;
  __chkstk_darwin(v4);
  id v62 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036DD68);
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  __chkstk_darwin(v6);
  uint64_t v51 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_10000A38C(&qword_10036DD70);
  uint64_t v52 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  NSString v50 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000A38C(&qword_10036DD78);
  uint64_t v47 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  id v49 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000A38C(&qword_10036DD80);
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  unint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v63 = *(void *)(v12 - 8);
  uint64_t v64 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  Swift::String v17 = (char *)&v45 - v16;
  uint64_t v18 = type metadata accessor for LaunchAppRequest.Option();
  __chkstk_darwin(v18);
  unint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000A38C(&qword_10036DD88);
  uint64_t v65 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  Swift::String v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1001FFECC();
  uint64_t v66 = v22;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1001FFF20(v69, (uint64_t)v20);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v29 = v63;
      uint64_t v28 = v64;
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v15, v20, v64);
      char v71 = 1;
      sub_100200080();
      uint64_t v30 = v49;
      long long v32 = v66;
      uint64_t v31 = v67;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10020018C(&qword_100363E00, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v33 = v53;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v30, v33);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v28);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v32, v31);
      break;
    case 2u:
      char v72 = 2;
      sub_10020002C();
      id v35 = v50;
      long long v37 = v66;
      uint64_t v36 = v67;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v38 = v54;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v35, v38);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v37, v36);
      break;
    case 3u:
      LODWORD(v69) = v20[*(int *)(sub_10000A38C(&qword_10036DCA0) + 48)];
      uint64_t v24 = v58;
      uint64_t v23 = v59;
      Swift::String v17 = v62;
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v62, v20, v59);
      char v76 = 4;
      sub_1001FFF84();
      id v39 = v57;
      uint64_t v26 = v66;
      uint64_t v25 = v67;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v75 = 0;
      sub_10020018C(&qword_100368F30, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v40 = v61;
      uint64_t v41 = v68;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v41)
      {
        (*(void (**)(char *, uint64_t))(v60 + 8))(v39, v40);
        goto LABEL_7;
      }
      char v74 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v39, v40);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v62, v23);
      goto LABEL_10;
    case 4u:
      char v73 = 3;
      sub_1001FFFD8();
      uint64_t v42 = v51;
      unint64_t v44 = v66;
      uint64_t v43 = v67;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v42, v56);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v44, v43);
      break;
    default:
      uint64_t v24 = v63;
      uint64_t v23 = v64;
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v17, v20, v64);
      char v70 = 0;
      sub_1002000D4();
      uint64_t v26 = v66;
      uint64_t v25 = v67;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10020018C(&qword_100363E00, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = v48;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v27);
LABEL_7:
      (*(void (**)(char *, uint64_t))(v24 + 8))(v17, v23);
LABEL_10:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v26, v25);
      break;
  }
  return result;
}

uint64_t sub_1001FDAB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v83 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10036DDC0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v81 = v3;
  uint64_t v82 = v4;
  __chkstk_darwin(v3);
  unint64_t v93 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_10000A38C(&qword_10036DDC8);
  uint64_t v87 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  unint64_t v86 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036DDD0);
  uint64_t v79 = *(void *)(v7 - 8);
  uint64_t v80 = v7;
  __chkstk_darwin(v7);
  unint64_t v85 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036DDD8);
  uint64_t v77 = *(void *)(v9 - 8);
  uint64_t v78 = v9;
  __chkstk_darwin(v9);
  uint64_t v84 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000A38C(&qword_10036DDE0);
  uint64_t v75 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  unint64_t v90 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_10000A38C(&qword_10036DDE8);
  uint64_t v89 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for LaunchAppRequest.Option();
  uint64_t v14 = __chkstk_darwin(v88);
  uint64_t v16 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (uint64_t *)((char *)&v70 - v18);
  uint64_t v20 = __chkstk_darwin(v17);
  Swift::String v22 = (char *)&v70 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v70 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v70 - v26;
  uint64_t v28 = a1[3];
  uint64_t v95 = a1;
  sub_10000D6E4(a1, v28);
  sub_1001FFECC();
  Swift::String v94 = v13;
  uint64_t v29 = v96;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v29) {
    goto LABEL_11;
  }
  char v71 = v19;
  uint64_t v96 = (uint64_t)v25;
  char v73 = v22;
  uint64_t v30 = v90;
  char v72 = v16;
  uint64_t v32 = v92;
  uint64_t v31 = v93;
  char v74 = v27;
  uint64_t v33 = v91;
  uint64_t v34 = v94;
  uint64_t v35 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v35 + 16) != 1)
  {
    uint64_t v44 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v46 = v45;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v46 = v88;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v44 - 8) + 104))(v46, enum case for DecodingError.typeMismatch(_:), v44);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v34, v33);
LABEL_11:
    uint64_t v42 = (uint64_t)v95;
    return sub_10000CC5C(v42);
  }
  uint64_t v36 = v32;
  uint64_t v37 = v87;
  uint64_t v38 = v96;
  switch(*(unsigned char *)(v35 + 32))
  {
    case 1:
      char v98 = 1;
      sub_100200080();
      uint64_t v47 = v84;
      uint64_t v48 = v94;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for UUID();
      sub_10020018C(&qword_100363E18, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v49 = v78;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v77 + 8))(v47, v49);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v89 + 8))(v48, v33);
      uint64_t v42 = (uint64_t)v95;
      uint64_t v50 = (uint64_t)v73;
      swift_storeEnumTagMultiPayload();
      uint64_t v43 = v50;
      goto LABEL_7;
    case 2:
      char v99 = 2;
      sub_10020002C();
      uint64_t v52 = v85;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v53 = v80;
      uint64_t v62 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v64 = v63;
      (*(void (**)(char *, uint64_t))(v79 + 8))(v52, v53);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v89 + 8))(v94, v33);
      uint64_t v65 = v71;
      *char v71 = v62;
      v65[1] = v64;
      swift_storeEnumTagMultiPayload();
      uint64_t v66 = (uint64_t)v65;
      goto LABEL_13;
    case 3:
      char v100 = 3;
      sub_1001FFFD8();
      uint64_t v54 = v86;
      uint64_t v55 = v94;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v54, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v89 + 8))(v55, v33);
      uint64_t v51 = (uint64_t)v74;
      swift_storeEnumTagMultiPayload();
      goto LABEL_14;
    case 4:
      char v103 = 4;
      sub_1001FFF84();
      uint64_t v56 = v31;
      id v57 = v94;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v58 = type metadata accessor for URL();
      char v102 = 0;
      sub_10020018C(&qword_100368E90, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v59 = (uint64_t)v72;
      uint64_t v60 = v81;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v96 = v58;
      char v101 = 1;
      char v67 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v68 = v89;
      char v69 = v67;
      uint64_t v96 = *(int *)(sub_10000A38C(&qword_10036DCA0) + 48);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v56, v60);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v57, v33);
      *(unsigned char *)(v59 + v96) = v69 & 1;
      swift_storeEnumTagMultiPayload();
      uint64_t v66 = v59;
LABEL_13:
      uint64_t v51 = (uint64_t)v74;
      sub_100200128(v66, (uint64_t)v74);
LABEL_14:
      uint64_t v42 = (uint64_t)v95;
      break;
    default:
      char v97 = 0;
      sub_1002000D4();
      id v39 = v30;
      uint64_t v40 = v94;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for UUID();
      sub_10020018C(&qword_100363E18, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v41 = v76;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v75 + 8))(v39, v41);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v89 + 8))(v40, v33);
      uint64_t v42 = (uint64_t)v95;
      swift_storeEnumTagMultiPayload();
      uint64_t v43 = v38;
LABEL_7:
      uint64_t v51 = (uint64_t)v74;
      sub_100200128(v43, (uint64_t)v74);
      break;
  }
  sub_100200128(v51, v83);
  return sub_10000CC5C(v42);
}

uint64_t sub_1001FE6A4()
{
  return 0x444955556C6C6163;
}

uint64_t sub_1001FE6BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x444955556C6C6163 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1001FE754(uint64_t a1)
{
  unint64_t v2 = sub_1002000D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FE790(uint64_t a1)
{
  unint64_t v2 = sub_1002000D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1001FE7CC()
{
  return sub_1001FD090(*v0);
}

uint64_t sub_1001FE7D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10020102C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001FE7FC(uint64_t a1)
{
  unint64_t v2 = sub_1001FFECC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FE838(uint64_t a1)
{
  unint64_t v2 = sub_1001FFECC();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1001FE874()
{
  return 0xD000000000000010;
}

uint64_t sub_1001FE890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100201240(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1001FE8BC(uint64_t a1)
{
  unint64_t v2 = sub_100200080();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FE8F8(uint64_t a1)
{
  unint64_t v2 = sub_100200080();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001FE934(uint64_t a1)
{
  unint64_t v2 = sub_1001FFFD8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FE970(uint64_t a1)
{
  unint64_t v2 = sub_1001FFFD8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001FE9AC()
{
  return 0x79654B726F66;
}

uint64_t sub_1001FE9C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x79654B726F66 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1001FEA50(uint64_t a1)
{
  unint64_t v2 = sub_10020002C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FEA8C(uint64_t a1)
{
  unint64_t v2 = sub_10020002C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001FEAC8()
{
  if (*v0) {
    return 0x7469736E65537369;
  }
  else {
    return 12383;
  }
}

uint64_t sub_1001FEB00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002012C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001FEB28(uint64_t a1)
{
  unint64_t v2 = sub_1001FFF84();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FEB64(uint64_t a1)
{
  unint64_t v2 = sub_1001FFF84();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001FEBA0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001FDAB0(a1, a2);
}

uint64_t sub_1001FEBB8(void *a1)
{
  return sub_1001FD13C(a1);
}

Swift::Int sub_1001FEBD4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001FEC18()
{
  return Hasher._finalize()();
}

uint64_t sub_1001FEC58(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_10000A38C(&qword_10036DC88);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028FDD0;
  AnyHashable.init<A>(_:)();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  sub_10001F9D4(a1, a2);
  JSONEncoder.init()();
  sub_100197AE8();
  uint64_t v7 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v9 = v8;
  swift_release();
  if (v3)
  {
    sub_100020414(a1, a2);
    sub_1000BA108(inited + 32);
    *(void *)(inited + 16) = 0;
    swift_release();
  }
  else
  {
    sub_100020414(a1, a2);
    *(void *)(inited + 96) = &type metadata for Data;
    *(void *)(inited + 72) = v7;
    *(void *)(inited + 80) = v9;
    AnyHashable.init<A>(_:)();
    if (a3)
    {
      uint64_t v10 = sub_10000A38C(&qword_10035C7C0);
      uint64_t v11 = a3;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v10 = 0;
      *(void *)(inited + 152) = 0;
      *(void *)(inited + 160) = 0;
    }
    *(void *)(inited + 144) = v11;
    *(void *)(inited + 168) = v10;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    swift_allocObject();
    swift_bridgeObjectRetain();
    JSONEncoder.init()();
    sub_10000A38C(&qword_10036A930);
    sub_1001FEF74();
    uint64_t v12 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(inited + 240) = &type metadata for Data;
    *(void *)(inited + 216) = v12;
    *(void *)(inited + 224) = v14;
    unint64_t v16 = sub_100269108(inited);
    uint64_t inited = sub_1001FC54C(v16);
    swift_bridgeObjectRelease();
  }
  return inited;
}

unint64_t sub_1001FEF38()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1001FEF54()
{
  return sub_1001FEC58(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

unint64_t sub_1001FEF74()
{
  unint64_t result = qword_10036A990;
  if (!qword_10036A990)
  {
    sub_10000A3D0(&qword_10036A930);
    sub_10020018C(&qword_10036A998, (void (*)(uint64_t))type metadata accessor for LaunchAppRequest.Option);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036A990);
  }
  return result;
}

uint64_t type metadata accessor for LaunchAppRequest.Option()
{
  uint64_t result = qword_10036DD18;
  if (!qword_10036DD18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001FF064(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_100371910);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001FF0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_100371910);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_1001FF134(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v11 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        uint64_t v12 = sub_10000A38C(&qword_10036DCA0);
        *((unsigned char *)a1 + *(int *)(v12 + 48)) = *((unsigned char *)a2 + *(int *)(v12 + 48));
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1001FF33C(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
      uint64_t v3 = type metadata accessor for UUID();
      goto LABEL_7;
    case 2:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 3:
      uint64_t v3 = type metadata accessor for URL();
LABEL_7:
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

void *sub_1001FF418(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_6;
    case 2u:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 3u:
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = sub_10000A38C(&qword_10036DCA0);
      *((unsigned char *)a1 + *(int *)(v9 + 48)) = *((unsigned char *)a2 + *(int *)(v9 + 48));
LABEL_6:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_1001FF5D0(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001FF7A0((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_7;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_7;
      case 3u:
        uint64_t v7 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = sub_10000A38C(&qword_10036DCA0);
        *((unsigned char *)a1 + *(int *)(v8 + 48)) = *((unsigned char *)a2 + *(int *)(v8 + 48));
LABEL_7:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1001FF7A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LaunchAppRequest.Option();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *sub_1001FF7FC(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v8 = type metadata accessor for URL();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    uint64_t v9 = sub_10000A38C(&qword_10036DCA0);
    a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

unsigned char *sub_1001FF978(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001FF7A0((uint64_t)a1);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      uint64_t v9 = sub_10000A38C(&qword_10036DCA0);
      a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1001FFB04()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64;
    uint64_t v5 = v4;
    uint64_t v6 = &unk_1002A6E08;
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v7 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for LaunchAppRequest(uint64_t a1)
{
  if (*(void *)(a1 + 8) >= 5uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for LaunchAppRequest(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >= 5)
  {
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LaunchAppRequest(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] >= 5uLL)
  {
    if (v4 >= 5)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_10000D78C((uint64_t)a1, &qword_10036DD50);
    goto LABEL_6;
  }
  if (v4 < 5)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
LABEL_8:
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for LaunchAppRequest(void *a1, void *a2)
{
  if (a1[1] >= 5uLL)
  {
    unint64_t v4 = a2[1];
    if (v4 >= 5)
    {
      *a1 = *a2;
      a1[1] = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_10000D78C((uint64_t)a1, &qword_10036DD50);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LaunchAppRequest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LaunchAppRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LaunchAppRequest()
{
  return &type metadata for LaunchAppRequest;
}

uint64_t sub_1001FFE84()
{
  return sub_10020018C(&qword_10036DD58, (void (*)(uint64_t))type metadata accessor for LaunchAppRequest.Option);
}

unint64_t sub_1001FFECC()
{
  unint64_t result = qword_10036DD90;
  if (!qword_10036DD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DD90);
  }
  return result;
}

uint64_t sub_1001FFF20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LaunchAppRequest.Option();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001FFF84()
{
  unint64_t result = qword_10036DD98;
  if (!qword_10036DD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DD98);
  }
  return result;
}

unint64_t sub_1001FFFD8()
{
  unint64_t result = qword_10036DDA0;
  if (!qword_10036DDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DDA0);
  }
  return result;
}

unint64_t sub_10020002C()
{
  unint64_t result = qword_10036DDA8;
  if (!qword_10036DDA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DDA8);
  }
  return result;
}

unint64_t sub_100200080()
{
  unint64_t result = qword_10036DDB0;
  if (!qword_10036DDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DDB0);
  }
  return result;
}

unint64_t sub_1002000D4()
{
  unint64_t result = qword_10036DDB8;
  if (!qword_10036DDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DDB8);
  }
  return result;
}

uint64_t sub_100200128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LaunchAppRequest.Option();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10020018C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002001D4(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v51 = *(void *)(v3 - 8);
  uint64_t v52 = v3;
  __chkstk_darwin(v3);
  uint64_t v50 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v53 = *(void *)(v5 - 8);
  uint64_t v54 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v50 - v9;
  uint64_t v11 = type metadata accessor for LaunchAppRequest.Option();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (uint64_t *)((char *)&v50 - v16);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v50 - v19;
  __chkstk_darwin(v18);
  Swift::String v22 = (char *)&v50 - v21;
  uint64_t v23 = sub_10000A38C(&qword_10036DDF8);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v26 = (char *)&v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = &v26[*(int *)(v24 + 56)];
  sub_1001FFF20(a1, (uint64_t)v26);
  sub_1001FFF20(v55, (uint64_t)v27);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1001FFF20((uint64_t)v26, (uint64_t)v20);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v35 = v53;
        uint64_t v34 = v54;
        (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v8, v27, v54);
        char v36 = static UUID.== infix(_:_:)();
        uint64_t v37 = *(void (**)(char *, uint64_t))(v35 + 8);
        v37(v8, v34);
        v37(v20, v34);
        goto LABEL_25;
      }
      (*(void (**)(char *, uint64_t))(v53 + 8))(v20, v54);
      goto LABEL_21;
    case 2u:
      sub_1001FFF20((uint64_t)v26, (uint64_t)v17);
      uint64_t v29 = *v17;
      uint64_t v28 = v17[1];
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      uint64_t v30 = *(void *)v27;
      uint64_t v31 = *((void *)v27 + 1);
      if (v29 == v30 && v28 == v31)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v33 & 1) == 0) {
          goto LABEL_23;
        }
      }
LABEL_27:
      sub_1001FF7A0((uint64_t)v26);
      char v36 = 1;
      return v36 & 1;
    case 3u:
      sub_1001FFF20((uint64_t)v26, (uint64_t)v14);
      uint64_t v38 = *(int *)(sub_10000A38C(&qword_10036DCA0) + 48);
      char v39 = v14[v38];
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        (*(void (**)(char *, uint64_t))(v51 + 8))(v14, v52);
        goto LABEL_21;
      }
      char v40 = v27[v38];
      uint64_t v42 = v50;
      uint64_t v41 = v51;
      uint64_t v43 = v52;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v50, v27, v52);
      char v44 = static URL.== infix(_:_:)();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v41 + 8);
      v45(v42, v43);
      v45(v14, v43);
      if (v44)
      {
        sub_1001FF7A0((uint64_t)v26);
        char v36 = v39 ^ v40 ^ 1;
        return v36 & 1;
      }
LABEL_23:
      sub_1001FF7A0((uint64_t)v26);
      goto LABEL_22;
    case 4u:
      if (swift_getEnumCaseMultiPayload() == 4) {
        goto LABEL_27;
      }
      goto LABEL_21;
    default:
      sub_1001FFF20((uint64_t)v26, (uint64_t)v22);
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v53 + 8))(v22, v54);
LABEL_21:
        sub_10000D78C((uint64_t)v26, &qword_10036DDF8);
LABEL_22:
        char v36 = 0;
      }
      else
      {
        uint64_t v47 = v53;
        uint64_t v46 = v54;
        (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v10, v27, v54);
        char v36 = static UUID.== infix(_:_:)();
        uint64_t v48 = *(void (**)(char *, uint64_t))(v47 + 8);
        v48(v10, v46);
        v48(v22, v46);
LABEL_25:
        sub_1001FF7A0((uint64_t)v26);
      }
      return v36 & 1;
  }
}

unsigned char *storeEnumTagSinglePayload for LaunchAppRequest.Option.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100200810);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LaunchAppRequest.Option.CodingKeys()
{
  return &type metadata for LaunchAppRequest.Option.CodingKeys;
}

ValueMetadata *type metadata accessor for LaunchAppRequest.Option.CallTransferStagingURLCodingKeys()
{
  return &type metadata for LaunchAppRequest.Option.CallTransferStagingURLCodingKeys;
}

ValueMetadata *type metadata accessor for LaunchAppRequest.Option.ConversationTransferStagingURLCodingKeys()
{
  return &type metadata for LaunchAppRequest.Option.ConversationTransferStagingURLCodingKeys;
}

unsigned char *_s17proximitycontrold16LaunchAppRequestV6OptionO32CallTransferStagingURLCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100200908);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LaunchAppRequest.Option.IncludeUniqueUserIdentifierInPayloadCodingKeys()
{
  return &type metadata for LaunchAppRequest.Option.IncludeUniqueUserIdentifierInPayloadCodingKeys;
}

ValueMetadata *type metadata accessor for LaunchAppRequest.Option.ForceMyUserCodingKeys()
{
  return &type metadata for LaunchAppRequest.Option.ForceMyUserCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for LaunchAppRequest.Option.UrlCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100200A1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LaunchAppRequest.Option.UrlCodingKeys()
{
  return &type metadata for LaunchAppRequest.Option.UrlCodingKeys;
}

unint64_t sub_100200A58()
{
  unint64_t result = qword_10036DE00;
  if (!qword_10036DE00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE00);
  }
  return result;
}

unint64_t sub_100200AB0()
{
  unint64_t result = qword_10036DE08;
  if (!qword_10036DE08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE08);
  }
  return result;
}

unint64_t sub_100200B08()
{
  unint64_t result = qword_10036DE10;
  if (!qword_10036DE10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE10);
  }
  return result;
}

unint64_t sub_100200B60()
{
  unint64_t result = qword_10036DE18;
  if (!qword_10036DE18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE18);
  }
  return result;
}

unint64_t sub_100200BB8()
{
  unint64_t result = qword_10036DE20;
  if (!qword_10036DE20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE20);
  }
  return result;
}

unint64_t sub_100200C10()
{
  unint64_t result = qword_10036DE28;
  if (!qword_10036DE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE28);
  }
  return result;
}

unint64_t sub_100200C68()
{
  unint64_t result = qword_10036DE30;
  if (!qword_10036DE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE30);
  }
  return result;
}

unint64_t sub_100200CC0()
{
  unint64_t result = qword_10036DE38;
  if (!qword_10036DE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE38);
  }
  return result;
}

unint64_t sub_100200D18()
{
  unint64_t result = qword_10036DE40;
  if (!qword_10036DE40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE40);
  }
  return result;
}

unint64_t sub_100200D70()
{
  unint64_t result = qword_10036DE48;
  if (!qword_10036DE48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE48);
  }
  return result;
}

unint64_t sub_100200DC8()
{
  unint64_t result = qword_10036DE50;
  if (!qword_10036DE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE50);
  }
  return result;
}

unint64_t sub_100200E20()
{
  unint64_t result = qword_10036DE58;
  if (!qword_10036DE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE58);
  }
  return result;
}

unint64_t sub_100200E78()
{
  unint64_t result = qword_10036DE60;
  if (!qword_10036DE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE60);
  }
  return result;
}

unint64_t sub_100200ED0()
{
  unint64_t result = qword_10036DE68;
  if (!qword_10036DE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE68);
  }
  return result;
}

unint64_t sub_100200F28()
{
  unint64_t result = qword_10036DE70;
  if (!qword_10036DE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE70);
  }
  return result;
}

unint64_t sub_100200F80()
{
  unint64_t result = qword_10036DE78;
  if (!qword_10036DE78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE78);
  }
  return result;
}

unint64_t sub_100200FD8()
{
  unint64_t result = qword_10036DE80;
  if (!qword_10036DE80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE80);
  }
  return result;
}

uint64_t sub_10020102C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000016 && a2 == 0x80000001002C4D00
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x80000001002C4D20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000024 && a2 == 0x80000001002C4D40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x55794D6563726F66 && a2 == 0xEB00000000726573 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100201240(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001002B7150)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_1002012C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7469736E65537369 && a2 == 0xEB00000000657669)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002013BC()
{
  uint64_t result = sub_1002013E0();
  byte_1003ACB40 = result & 1;
  return result;
}

uint64_t sub_1002013E0()
{
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v0 = *(id *)(qword_1003AC750 + 1528);
  char v1 = sub_100100D88();

  if (v1)
  {
    id v8 = sub_1001EA6EC();
    NSString v9 = String._bridgeToObjectiveC()();
    [v8 ulog:40 message:v9];

    return 1;
  }
  int DeviceClass = GestaltGetDeviceClass();
  if (DeviceClass == 7 || DeviceClass == 4)
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    unint64_t v4 = 0x6D6F632073692029;
    unint64_t v5 = 0xED00006C616E756DLL;
LABEL_7:
    String.append(_:)(*(Swift::String *)&v4);
    id v6 = sub_1001EA6EC();
    swift_bridgeObjectRetain();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v6 ulog:40 message:v7];
    swift_bridgeObjectRelease();

    return 1;
  }
  if ((DeviceClass - 4) >= 0xFFFFFFFD)
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    uint64_t v15 = 0x6E61682073692029;
    unint64_t v16 = 0xED0000646C656864;
  }
  else
  {
    NSString v11 = sub_1000EC788();
    if (!v11)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v12 = v11;
    unsigned int v13 = [v12 hasPrefix:@"Watch"];

    if (!v13)
    {
      _StringGuts.grow(_:)(56);
      v20._countAndFlagsBits = 0x6320656369766544;
      v20._object = (void *)0xEE0028207373616CLL;
      String.append(_:)(v20);
      v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000028;
      unint64_t v5 = 0x80000001002C4D70;
      goto LABEL_7;
    }
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    uint64_t v15 = 0x7461772073692029;
    unint64_t v16 = 0xEA00000000006863;
  }
  String.append(_:)(*(Swift::String *)&v15);
  id v18 = sub_1001EA6EC();
  swift_bridgeObjectRetain();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v18 ulog:40 message:v19];
  swift_bridgeObjectRelease();

  return 0;
}

uint64_t sub_1002017EC()
{
  if (*v0) {
    return 0x726F68636E61;
  }
  else {
    return 0x656C69626F6DLL;
  }
}

unsigned char *storeEnumTagSinglePayload for RangingRole(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002018E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RangingRole()
{
  return &type metadata for RangingRole;
}

unint64_t sub_100201920()
{
  unint64_t result = qword_10036DE88;
  if (!qword_10036DE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE88);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Feature(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100201A40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Feature()
{
  return &type metadata for Feature;
}

unint64_t sub_100201A7C()
{
  unint64_t result = qword_10036DE90;
  if (!qword_10036DE90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DE90);
  }
  return result;
}

const char *sub_100201AD0(char a1)
{
  unint64_t result = "Fix_97690291";
  switch(a1)
  {
    case 1:
      unint64_t result = "Handoff_Animation";
      break;
    case 2:
      unint64_t result = "Handoff_v2";
      break;
    case 3:
      unint64_t result = "Handoff_v3";
      break;
    case 4:
      unint64_t result = "Handoff_Trigger_Feedback";
      break;
    case 5:
      unint64_t result = "Lockscreen_Media_Controls";
      break;
    case 6:
      unint64_t result = "NowPlaying_AutoLaunch";
      break;
    case 7:
      unint64_t result = "NowPlaying_AutoLaunch_Guest_Tinker_Support";
      break;
    case 8:
      unint64_t result = "NowPlaying_AutoLaunch_Inner_Region";
      break;
    case 9:
      unint64_t result = "Prototypes";
      break;
    default:
      return result;
  }
  return result;
}

const char *sub_100201BD0()
{
  return "ProximityControl";
}

const char *sub_100201BE4()
{
  return sub_100201AD0(*v0);
}

unsigned char *storeEnumTagSinglePayload for FollowerOutput(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100201CD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FollowerOutput()
{
  return &type metadata for FollowerOutput;
}

uint64_t sub_100201D08(void *a1, int a2)
{
  int v13 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10036DE98);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036DEA0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1002020F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10020214C();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  char v14 = v13;
  sub_1002021A0();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100201F10()
{
  return 0x657461745364656CLL;
}

uint64_t sub_100201F28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x657461745364656CLL && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100201FC0(uint64_t a1)
{
  unint64_t v2 = sub_1002020F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100201FFC(uint64_t a1)
{
  unint64_t v2 = sub_1002020F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100202038(uint64_t a1)
{
  unint64_t v2 = sub_10020214C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100202074(uint64_t a1)
{
  unint64_t v2 = sub_10020214C();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1002020B0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002021F4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1002020DC(void *a1)
{
  return sub_100201D08(a1, *v1);
}

unint64_t sub_1002020F8()
{
  unint64_t result = qword_10036DEA8;
  if (!qword_10036DEA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DEA8);
  }
  return result;
}

unint64_t sub_10020214C()
{
  unint64_t result = qword_10036DEB0;
  if (!qword_10036DEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DEB0);
  }
  return result;
}

unint64_t sub_1002021A0()
{
  unint64_t result = qword_10036DEB8;
  if (!qword_10036DEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DEB8);
  }
  return result;
}

unint64_t sub_1002021F4(void *a1)
{
  uint64_t v3 = sub_10000A38C(&qword_10036DEC0);
  uint64_t v19 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000A38C(&qword_10036DEC8);
  uint64_t v6 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = (unint64_t)sub_10000D6E4(a1, a1[3]);
  sub_1002020F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    goto LABEL_5;
  }
  Swift::String v17 = a1;
  uint64_t v18 = v6;
  uint64_t v10 = v20;
  if (*(void *)(KeyedDecodingContainer.allKeys.getter() + 16) != 1)
  {
    uint64_t v12 = v10;
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v15 = &type metadata for FollowerOutput;
    unint64_t v9 = (unint64_t)v8;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, enum case for DecodingError.typeMismatch(_:), v13);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v12);
    a1 = v17;
LABEL_5:
    sub_10000CC5C((uint64_t)a1);
    return v9;
  }
  sub_10020214C();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v11 = v18;
  sub_10020256C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
  unint64_t v9 = v21;
  sub_10000CC5C((uint64_t)v17);
  return v9;
}

unint64_t sub_10020256C()
{
  unint64_t result = qword_10036DED0;
  if (!qword_10036DED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DED0);
  }
  return result;
}

ValueMetadata *type metadata accessor for FollowerOutput.CodingKeys()
{
  return &type metadata for FollowerOutput.CodingKeys;
}

unsigned char *_s17proximitycontrold14FollowerOutputO10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100202670);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FollowerOutput.LedStateCodingKeys()
{
  return &type metadata for FollowerOutput.LedStateCodingKeys;
}

unint64_t sub_1002026AC()
{
  unint64_t result = qword_10036DED8;
  if (!qword_10036DED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DED8);
  }
  return result;
}

unint64_t sub_100202704()
{
  unint64_t result = qword_10036DEE0;
  if (!qword_10036DEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DEE0);
  }
  return result;
}

unint64_t sub_10020275C()
{
  unint64_t result = qword_10036DEE8;
  if (!qword_10036DEE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DEE8);
  }
  return result;
}

unint64_t sub_1002027B4()
{
  unint64_t result = qword_10036DEF0;
  if (!qword_10036DEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DEF0);
  }
  return result;
}

unint64_t sub_10020280C()
{
  unint64_t result = qword_10036DEF8;
  if (!qword_10036DEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DEF8);
  }
  return result;
}

unint64_t sub_100202864()
{
  unint64_t result = qword_10036DF00;
  if (!qword_10036DF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DF00);
  }
  return result;
}

uint64_t sub_1002028B8()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  int v3 = (char *)&v5 - v2;
  dispatch thunk of Identifiable.id.getter();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

uint64_t sub_1002029E4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1002029FC(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Handoff2UIEvent()
{
  return &type metadata for Handoff2UIEvent;
}

uint64_t sub_100202A24(uint64_t a1, void *a2, char a3)
{
  if (!a3)
  {
    uint64_t v5 = 0x7061736944646964;
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    uint64_t v5 = 0x617369446C6C6977;
LABEL_5:
    uint64_t v8 = v5;
    v6._countAndFlagsBits = a1;
    v6._object = a2;
    String.append(_:)(v6);
    return v8;
  }
  uint64_t result = 0x6465736F6C63;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6165707041646964;
      break;
    case 2:
      uint64_t result = 0x6465646E61707865;
      break;
    case 3:
      uint64_t result = 0x646570706174;
      break;
    case 4:
      uint64_t result = 0x657070416C6C6977;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100202B88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_100202C18(a1, a2);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_100202BB4()
{
  return sub_100202A24(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

unint64_t sub_100202BC4()
{
  unint64_t result = qword_10036DF08;
  if (!qword_10036DF08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036DF08);
  }
  return result;
}

uint64_t sub_100202C18(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6465736F6C63 && a2 == 0xE600000000000000;
  if (!v2 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (a1 == 0x6165707041646964 && a2 == 0xE900000000000072
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    if (a1 == 0x6465646E61707865 && a2 == 0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    if (a1 == 0x646570706174 && a2 == 0xE600000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    if (a1 == 0x657070416C6C6977 && a2 == 0xEA00000000007261
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 4;
    }
    sub_100016790();
    if (*(void *)(StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)() + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v5 = static String._fromSubstring(_:)();
      swift_bridgeObjectRelease();
      if (StringProtocol.contains<A>(_:)())
      {
        swift_bridgeObjectRelease();
        return v5;
      }
      char v7 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if (v7) {
        return v5;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100202FD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DispatchTimeInterval.seconds(_:))
  {
    char v7 = *(uint64_t (**)(uint64_t *, uint64_t))(v3 + 96);
    v3 += 96;
    int v6 = v7(v5, v2);
    uint64_t v8 = 1000000000 * *v5;
    if ((unsigned __int128)(*v5 * (__int128)1000000000) >> 64 == v8 >> 63) {
      return v8 / 1000000;
    }
    __break(1u);
  }
  if (v6 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    unint64_t v9 = *(uint64_t (**)(uint64_t *, uint64_t))(v3 + 96);
    v3 += 96;
    int v6 = v9(v5, v2);
    uint64_t v8 = 1000000 * *v5;
    if ((unsigned __int128)(*v5 * (__int128)1000000) >> 64 == v8 >> 63) {
      return v8 / 1000000;
    }
    __break(1u);
  }
  if (v6 != enum case for DispatchTimeInterval.microseconds(_:)) {
    goto LABEL_10;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t *, uint64_t))(v3 + 96);
  v3 += 96;
  int v6 = v10(v5, v2);
  uint64_t v8 = 1000 * *v5;
  if ((unsigned __int128)(*v5 * (__int128)1000) >> 64 == v8 >> 63) {
    return v8 / 1000000;
  }
  __break(1u);
LABEL_10:
  if (v6 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v8 = *v5;
    return v8 / 1000000;
  }
  if (v6 == enum case for DispatchTimeInterval.never(_:))
  {
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    return v8 / 1000000;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100203244()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_100019E10(0, (unint64_t *)&qword_10035A680);
  static DispatchQoS.default.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_100203F94(&qword_10035A688, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000A38C(&qword_10035A690);
  sub_100168C60((unint64_t *)&qword_10035A698, &qword_10035A690);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_1003ACB48 = result;
  return result;
}

uint64_t sub_100203494()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue_serial.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_100019E10(0, &qword_10036DFB0);
  static DispatchQoS.default.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_100203F94(&qword_10036DFB8, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes);
  sub_10000A38C(&qword_10036DFC0);
  sub_100168C60(&qword_10036DFC8, &qword_10036DFC0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  uint64_t result = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_1003ACB50 = result;
  return result;
}

uint64_t sub_1002036E8()
{
  type metadata accessor for WorkActor();
  uint64_t v0 = swift_allocObject();
  if (qword_10035A628 != -1) {
    swift_once();
  }
  uint64_t result = OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()();
  *(void *)(v0 + 16) = result;
  *(void *)(v0 + 24) = v2;
  qword_1003ACB58 = v0;
  return result;
}

uint64_t sub_100203760()
{
  return swift_deallocClassInstance();
}

uint64_t sub_100203770()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_100203778()
{
  if (qword_10035A630 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t sub_1002037D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for WorkActor();

  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

uint64_t sub_10020380C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  LODWORD(result) = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (result == enum case for DispatchTimeInterval.seconds(_:))
  {
    char v7 = *(void (**)(uint64_t *, uint64_t))(v3 + 96);
    v3 += 96;
    v7(v5, v2);
    uint64_t result = 1000000000 * *v5;
    if ((unsigned __int128)(*v5 * (__int128)1000000000) >> 64 == result >> 63) {
      return result;
    }
    __break(1u);
  }
  if (result == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t))(v3 + 96);
    v3 += 96;
    v8(v5, v2);
    uint64_t result = 1000000 * *v5;
    if ((unsigned __int128)(*v5 * (__int128)1000000) >> 64 == result >> 63) {
      return result;
    }
    __break(1u);
  }
  if (result == enum case for DispatchTimeInterval.microseconds(_:))
  {
    unint64_t v9 = *(void (**)(uint64_t *, uint64_t))(v3 + 96);
    v3 += 96;
    v9(v5, v2);
    uint64_t result = 1000 * *v5;
    if ((unsigned __int128)(*v5 * (__int128)1000) >> 64 == result >> 63) {
      return result;
    }
    __break(1u);
  }
  if (result == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    return *v5;
  }
  else if (result == enum case for DispatchTimeInterval.never(_:))
  {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

BOOL static DispatchTimeInterval.< infix(_:_:)()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = enum case for DispatchTimeInterval.never(_:);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v5(v3, enum case for DispatchTimeInterval.never(_:), v0);
  char v6 = static DispatchTimeInterval.== infix(_:_:)();
  char v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v3, v0);
  if (v6) {
    return 0;
  }
  v5(v3, v4, v0);
  char v9 = static DispatchTimeInterval.== infix(_:_:)();
  v7(v3, v0);
  if (v9) {
    return 1;
  }
  uint64_t v10 = sub_10020380C();
  return v10 < sub_10020380C();
}

uint64_t sub_100203BEC()
{
  return sub_100203F94(&qword_10035C090, 255, (void (*)(uint64_t))&type metadata accessor for DispatchTimeInterval);
}

BOOL sub_100203C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  char v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = enum case for DispatchTimeInterval.never(_:);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  ((void (*)(char *, void))v8)(v6, enum case for DispatchTimeInterval.never(_:));
  char v9 = static DispatchTimeInterval.== infix(_:_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, a3);
  if (v9) {
    return 0;
  }
  v8(v6, v7, a3);
  char v12 = static DispatchTimeInterval.== infix(_:_:)();
  v10(v6, a3);
  if (v12) {
    return 1;
  }
  uint64_t v13 = sub_10020380C();
  return v13 < sub_10020380C();
}

BOOL sub_100203DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  char v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = enum case for DispatchTimeInterval.never(_:);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  ((void (*)(char *, void))v8)(v6, enum case for DispatchTimeInterval.never(_:));
  char v9 = static DispatchTimeInterval.== infix(_:_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, a3);
  if (v9) {
    return 0;
  }
  v8(v6, v7, a3);
  char v12 = static DispatchTimeInterval.== infix(_:_:)();
  v10(v6, a3);
  if (v12) {
    return 1;
  }
  uint64_t v13 = sub_10020380C();
  return v13 < sub_10020380C();
}

uint64_t type metadata accessor for WorkActor()
{
  return self;
}

uint64_t sub_100203F4C(uint64_t a1, uint64_t a2)
{
  return sub_100203F94(&qword_100369D70, a2, (void (*)(uint64_t))type metadata accessor for WorkActor);
}

uint64_t sub_100203F94(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100203FDC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100204050()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10036E1F0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000A38C(&qword_10036E1F8);
  swift_allocObject();
  *(void *)(v0 + 24) = PassthroughSubject.init()();
  uint64_t v6 = v0 + OBJC_IVAR____TtC17proximitycontrold31ContextDeliveryModeStateMachine__state;
  v9[15] = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v3 + 32))(v6, v5, v2);
  sub_10000A38C(&qword_100363568);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100291190;
  *(void *)(v7 + 32) = _swiftEmptyArrayStorage;
  *(_WORD *)(v7 + 40) = 1025;
  *(void *)(v7 + 48) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v7 + 56) = 0;
  *(void *)(v7 + 64) = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  *(void *)(v7 + 72) = 0;
  *(void *)(v7 + 80) = _swiftEmptyArrayStorage;
  *(_WORD *)(v7 + 88) = 514;
  *(void *)(v7 + 96) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v7 + 104) = 1;
  *(void *)(v7 + 112) = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  *(void *)(v7 + 120) = 0;
  *(void *)(v7 + 128) = _swiftEmptyArrayStorage;
  *(_WORD *)(v7 + 136) = 0;
  *(void *)(v7 + 144) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v7 + 152) = 2;
  *(void *)(v7 + 160) = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  *(void *)(v7 + 168) = 0;
  *(void *)(v7 + 176) = _swiftEmptyArrayStorage;
  *(_WORD *)(v7 + 184) = 256;
  *(void *)(v7 + 192) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v7 + 200) = 2;
  *(void *)(v7 + 208) = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  *(void *)(v7 + 216) = 0;
  *(void *)(v7 + 224) = _swiftEmptyArrayStorage;
  *(_WORD *)(v7 + 232) = 768;
  *(void *)(v7 + 240) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v7 + 248) = 2;
  *(void *)(v7 + 256) = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  *(void *)(v7 + 264) = 0;
  *(void *)(v7 + 272) = _swiftEmptyArrayStorage;
  *(_WORD *)(v7 + 280) = 1025;
  *(void *)(v7 + 288) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v7 + 296) = 2;
  *(void *)(v7 + 304) = static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter;
  *(void *)(v7 + 312) = 0;
  *(void *)(v1 + 16) = v7;
  return v1;
}

uint64_t sub_10020423C()
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC17proximitycontrold31ContextDeliveryModeStateMachine__state;
  uint64_t v2 = sub_10000A38C(&qword_10036E1F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1002042F0()
{
  return type metadata accessor for ContextDeliveryModeStateMachine();
}

uint64_t type metadata accessor for ContextDeliveryModeStateMachine()
{
  uint64_t result = qword_10036E000;
  if (!qword_10036E000) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100204344()
{
  sub_1002043F0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1002043F0()
{
  if (!qword_10036E010)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10036E010);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ContextDeliveryModeStateMachine.Output(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002044E4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextDeliveryModeStateMachine.Output()
{
  return &type metadata for ContextDeliveryModeStateMachine.Output;
}

unsigned char *storeEnumTagSinglePayload for ContextDeliveryModeStateMachine.Input(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002045E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextDeliveryModeStateMachine.Input()
{
  return &type metadata for ContextDeliveryModeStateMachine.Input;
}

unint64_t sub_100204620(uint64_t a1)
{
  unint64_t result = sub_100204648();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100204648()
{
  unint64_t result = qword_10036E100;
  if (!qword_10036E100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E100);
  }
  return result;
}

uint64_t sub_1002046A0@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ContextDeliveryModeStateMachine();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

unint64_t sub_1002046E0(uint64_t a1)
{
  unint64_t result = sub_100204708();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100204708()
{
  unint64_t result = qword_10036E108;
  if (!qword_10036E108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E108);
  }
  return result;
}

unint64_t sub_100204760(uint64_t a1)
{
  unint64_t result = sub_100204788();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100204788()
{
  unint64_t result = qword_10036E110;
  if (!qword_10036E110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E110);
  }
  return result;
}

unint64_t sub_1002047E0()
{
  unint64_t result = qword_10036E118;
  if (!qword_10036E118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E118);
  }
  return result;
}

unint64_t sub_100204838()
{
  unint64_t result = qword_10036E120;
  if (!qword_10036E120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E120);
  }
  return result;
}

unint64_t sub_100204890()
{
  unint64_t result = qword_10036E128;
  if (!qword_10036E128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E128);
  }
  return result;
}

void *sub_1002048E4()
{
  return &protocol self-conformance witness table for Error;
}

unint64_t sub_1002048F0(uint64_t a1)
{
  unint64_t result = sub_100204918();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100204918()
{
  unint64_t result = qword_10036E1E8;
  if (!qword_10036E1E8)
  {
    type metadata accessor for ContextDeliveryModeStateMachine();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E1E8);
  }
  return result;
}

uint64_t sub_100204970@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1002049F0()
{
  return static Published.subscript.setter();
}

void sub_100204A6C(Swift::UInt a1)
{
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_100204D78(a1);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  id v7 = sub_1001F6434();
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 ulog:v8 message:0xD00000000000001FLL 0x80000001002C5020];
  swift_bridgeObjectRelease();

  swift_beginAccess();
  LOBYTE(v8) = sub_1000300BC(&v20, a1);
  swift_endAccess();
  if (v8)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    char v9 = sub_100204D78(a1);
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v12 = v11;

    v13._countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    id v14 = sub_1001F6434();
    swift_bridgeObjectRetain();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 ulog:v15 message:0xD000000000000016, 0x80000001002C5060];
    swift_bridgeObjectRelease();

    unint64_t v16 = self;
    id v17 = [v16 sharedInstance];
    [v17 prewarmBundleForAssetType:a1];

    NSString v18 = [v16 sharedInstance];
    [v18 prewarmAlternateBundleForAssetType:a1];
  }
  else
  {
    id v19 = sub_1001F6434();
    NSString v18 = String._bridgeToObjectiveC()();
    [v19 ulog:40 message:v18];
  }
}

uint64_t sub_100204D14()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AssetManager()
{
  return self;
}

__CFString *sub_100204D78(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v1 = @"miniDark";
      goto LABEL_11;
    case 2:
      uint64_t v1 = @"miniLight";
      goto LABEL_11;
    case 3:
      uint64_t v1 = @"FPO_B";
      goto LABEL_11;
    case 4:
      uint64_t v1 = @"FPO_Y";
      goto LABEL_11;
    case 5:
      uint64_t v1 = @"FPO_O";
      goto LABEL_11;
    case 6:
      uint64_t v1 = @"miniBasalt";
      goto LABEL_11;
    case 7:
      uint64_t v1 = @"b620Dark";
      goto LABEL_11;
    case 8:
      uint64_t v1 = @"b620Light";
LABEL_11:
      uint64_t v2 = v1;
      break;
    default:
      uint64_t v1 = +[NSString stringWithFormat:@"? (%ld)", a1];
      break;
  }

  return v1;
}

void sub_100204E84(uint64_t a1)
{
  uint64_t v3 = v1;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = sub_1001F7514();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  id v6 = sub_1001F6050();
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 ulog:v7 message:0xD000000000000017, 0x80000001002C50B0];
  swift_bridgeObjectRelease();

  if (*(unsigned char *)(v3 + 96))
  {
    char v8 = 2;
LABEL_3:
    sub_1000C752C();
    swift_allocError();
    *char v9 = v8;
    swift_willThrow();
    return;
  }
  sub_10020505C();
  if (!v2)
  {
    if (!*(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_mediaRouteIDActive + 8))
    {
      char v8 = 0;
      goto LABEL_3;
    }
    id v10 = objc_allocWithZone((Class)PCProximityEvent);
    swift_bridgeObjectRetain();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v12 = [v10 initWithType:1 mediaRemoteID:v11 info:0];

    [v12 setExpectsDisplayContext:1];
    sub_1000C6B74(v12);
  }
}

uint64_t sub_10020505C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v0 = sub_100098724();
  unint64_t v2 = v1;
  swift_release();
  if (!v2) {
    goto LABEL_5;
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v4 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v4 = v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4)
  {
LABEL_5:
    sub_1000C752C();
    swift_allocError();
    *Swift::String v5 = 0;
    return swift_willThrow();
  }
  return result;
}

unsigned char *_s6ReasonOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100205214);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s6ReasonOMa()
{
  return &_s6ReasonON;
}

unint64_t sub_100205250()
{
  unint64_t result = qword_10036E300;
  if (!qword_10036E300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10036E300);
  }
  return result;
}

uint64_t sub_1002052A4(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  type metadata accessor for MainActor();
  v3[10] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[11] = v5;
  v3[12] = v4;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_100205340, v5, v4);
}

uint64_t sub_100205340()
{
  unint64_t v1 = *(void **)(v0 + 64);
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v2 = sub_1001F7514();
  uint64_t v4 = v3;
  swift_release();
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x3D6C6C6163202CLL;
  v6._object = (void *)0xE700000000000000;
  String.append(_:)(v6);
  id v7 = [v1 description:0xD000000000000023, 0x80000001002C50D0];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  id v12 = sub_1001F5FD0();
  swift_bridgeObjectRetain();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 ulog:40 message:v13];

  swift_bridgeObjectRelease();
  *(void *)(v0 + 40) = &type metadata for Feature;
  unint64_t v14 = sub_10000CC08();
  *(unsigned char *)(v0 + 16) = 9;
  *(void *)(v0 + 48) = v14;
  LOBYTE(v8) = isFeatureEnabled(_:)();
  sub_10000CC5C(v0 + 16);
  if ((v8 & 1) != 0 && [*(id *)(v0 + 64) service] == 3)
  {
    id v15 = [*(id *)(*(void *)(v0 + 72) + OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_callCenter) activeConversationForCall:*(void *)(v0 + 64)];
    *(void *)(v0 + 120) = v15;
    if (v15)
    {
      uint64_t v16 = (uint64_t)v15;
      id v17 = (void *)swift_task_alloc();
      *(void *)(v0 + 128) = v17;
      *id v17 = v0;
      v17[1] = sub_100205828;
      uint64_t v18 = *(void *)(v0 + 56);
      return sub_1002064BC(v18, v16);
    }
    else
    {
      swift_release();
      sub_100207810();
      swift_allocError();
      *(void *)uint64_t v22 = 5;
      *(unsigned char *)(v22 + 8) = 2;
      swift_willThrow();
      uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
      return v23();
    }
  }
  else
  {
    Swift::UInt v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v20;
    *Swift::UInt v20 = v0;
    v20[1] = sub_100205688;
    uint64_t v21 = *(void *)(v0 + 56);
    return sub_100205AA0(v21);
  }
}

uint64_t sub_100205688()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 96);
  uint64_t v4 = *(void *)(v2 + 88);
  if (v0) {
    Swift::String v5 = sub_1002059D0;
  }
  else {
    Swift::String v5 = sub_1002057C4;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v5, v4, v3);
}

uint64_t sub_1002057C4()
{
  swift_release();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100205828()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 96);
  uint64_t v4 = *(void *)(v2 + 88);
  if (v0) {
    Swift::String v5 = sub_100205A34;
  }
  else {
    Swift::String v5 = sub_100205964;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v5, v4, v3);
}

uint64_t sub_100205964()
{
  swift_release();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002059D0()
{
  swift_release();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100205A34()
{
  unint64_t v1 = *(void **)(v0 + 120);
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100205AA0(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  v2[9] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for ContinuousClock();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[13] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[14] = v5;
  v2[15] = v4;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_100205BA0, v5, v4);
}

uint64_t sub_100205BA0()
{
  swift_retain();
  uint64_t v1 = sub_1001F7514();
  uint64_t v3 = v2;
  swift_release();
  v4._countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  id v5 = sub_1001F5FD0();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 ulog:40 message:v6];

  swift_bridgeObjectRelease();
  sub_1001C4970();
  *(void *)(v0 + 128) = v7;
  if (!v7)
  {
    swift_release();
    sub_100207810();
    swift_allocError();
    *(void *)uint64_t v19 = 1;
    *(unsigned char *)(v19 + 8) = 2;
    swift_willThrow();
LABEL_19:
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  uint64_t v8 = v7;
  if (![v7 isHomePodFamily])
  {
    swift_release();
    id v20 = [v8 deviceType];
    sub_100207810();
    swift_allocError();
    *(void *)uint64_t v18 = v20;
    char v21 = 1;
LABEL_17:
    *(unsigned char *)(v18 + 8) = v21;
LABEL_18:
    swift_willThrow();

    goto LABEL_19;
  }
  swift_retain();
  CurrentValueSubject.value.getter();
  int v9 = *(unsigned __int8 *)(v0 + 40);
  if (v9 == 254)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    id v10 = *(void **)(v0 + 16);
    int v9 = *(unsigned __int8 *)(v0 + 24);
    if (v9 == 255) {
      goto LABEL_15;
    }
  }
  else
  {
    id v10 = *(void **)(v0 + 32);
    swift_release();
    if (v9 == 255) {
      goto LABEL_15;
    }
  }
  if (v9)
  {
    sub_100038A4C(v10, v9);
LABEL_15:
    swift_release();
    sub_100207810();
    swift_allocError();
    *(void *)uint64_t v18 = 0;
    goto LABEL_16;
  }
  unsigned int v11 = [v10 callStatus];
  sub_100038A4C(v10, v9);
  if (v11 - 1 >= 2)
  {
    swift_release();
    sub_100207810();
    swift_allocError();
    *(void *)uint64_t v24 = v11;
    *(unsigned char *)(v24 + 8) = 0;
    goto LABEL_18;
  }
  unsigned int v12 = [v8 isCurrentlyPicked];
  id v13 = sub_1001F5FD0();
  if (v12)
  {
    uint64_t v14 = *(void *)(v0 + 64);
    NSString v15 = String._bridgeToObjectiveC()();
    [v13 ulog:40 message:v15];

    id v16 = [*(id *)(v14 + OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_callCenter) routeController];
    id v17 = [v16 receiverRoute];

    if (!v17)
    {
      swift_release();
      sub_100207810();
      swift_allocError();
      *(void *)uint64_t v18 = 1;
LABEL_16:
      char v21 = 2;
      goto LABEL_17;
    }
  }
  else
  {
    NSString v25 = String._bridgeToObjectiveC()();
    [v13 ulog:40 message:v25];

    id v17 = v8;
  }
  *(void *)(v0 + 136) = v17;
  uint64_t v26 = *(void *)(v0 + 64);
  uint64_t v27 = *(void *)(v0 + 72);
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  id v28 = v17;
  id v29 = [v28 description];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  v33._countAndFlagsBits = v30;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();

  id v34 = sub_1001F5FD0();
  swift_bridgeObjectRetain();
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v34 ulog:40 message:v35];

  swift_bridgeObjectRelease();
  id v36 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v26
                                                              + OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_callCenter), "routeController"));
  [v36 pickRoute:v28];

  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 48) = 2;
  v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 115;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  sub_10016ABE4(0xD000000000000016, (void *)0x80000001002C5170, 0, v27, (uint64_t)&off_10032F558);
  swift_bridgeObjectRelease();
  ContinuousClock.init()();
  char v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10036E328 + dword_10036E328);
  char v39 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v39;
  *char v39 = v0;
  v39[1] = sub_100206234;
  return v40(2000000000000000000, 0, 0, 0, 1);
}

uint64_t sub_100206234()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[11] + 8))(v2[12], v2[10]);
  uint64_t v3 = v2[15];
  uint64_t v4 = v2[14];
  if (v0) {
    id v5 = sub_100206440;
  }
  else {
    id v5 = sub_1002063BC;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v5, v4, v3);
}

uint64_t sub_1002063BC()
{
  uint64_t v1 = *(void **)(v0 + 128);

  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100206440()
{
  uint64_t v1 = *(void **)(v0 + 128);

  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1002064BC(uint64_t a1, uint64_t a2)
{
  v3[29] = a2;
  v3[30] = v2;
  v3[28] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[31] = v4;
  v3[32] = *(void *)(v4 - 8);
  v3[33] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[34] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[35] = v6;
  v3[36] = v5;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_1002065B4, v6, v5);
}

uint64_t sub_1002065B4()
{
  uint64_t v1 = *(void **)(v0 + 232);
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v2 = sub_1001F7514();
  uint64_t v4 = v3;
  swift_release();
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x7265766E6F63202CLL;
  v6._object = (void *)0xEF3D6E6F69746173;
  String.append(_:)(v6);
  id v7 = [v1 description:0xD000000000000033, 0x80000001002C51B0];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  id v12 = sub_1001F5FD0();
  swift_bridgeObjectRetain();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 ulog:40 message:v13];

  swift_bridgeObjectRelease();
  id v14 = sub_1001C8B94();
  *(void *)(v0 + 296) = v14;
  if (v14)
  {
    NSString v15 = v14;
    id v16 = [*(id *)(v0 + 232) presentationContext];
    id v17 = [v16 mode];

    if (v17 == (id)2)
    {
      uint64_t v18 = v0 + 16;
      uint64_t v29 = *(void *)(v0 + 256);
      uint64_t v28 = *(void *)(v0 + 264);
      uint64_t v30 = *(void *)(v0 + 248);
      uint64_t v31 = *(void **)(v0 + 232);
      id v32 = [*(id *)(*(void *)(v0 + 240) + OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_callCenter) neighborhoodActivityConduit];
      *(void *)(v0 + 328) = v32;
      id v33 = [v31 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 336) = isa;
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 352;
      *(void *)(v0 + 24) = sub_100206C78;
      uint64_t v35 = swift_continuation_init();
      *(void *)(v0 + 144) = _NSConcreteStackBlock;
      *(void *)(v0 + 152) = 0x40000000;
      *(void *)(v0 + 160) = sub_100206F5C;
      *(void *)(v0 + 168) = &unk_100332188;
      *(void *)(v0 + 176) = v35;
      [v32 pullConversation:isa fromTVDevice:v15 completion:v0 + 144];
      goto LABEL_7;
    }
    if (!v17)
    {
      uint64_t v18 = v0 + 80;
      uint64_t v20 = *(void *)(v0 + 256);
      uint64_t v19 = *(void *)(v0 + 264);
      uint64_t v21 = *(void *)(v0 + 248);
      uint64_t v22 = *(void **)(v0 + 232);
      id v23 = [*(id *)(*(void *)(v0 + 240) + OBJC_IVAR____TtC17proximitycontrold14TelephonyProxy_callCenter) neighborhoodActivityConduit];
      *(void *)(v0 + 304) = v23;
      id v24 = [v22 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      Class v25 = UUID._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 312) = v25;
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
      *(void *)(v0 + 80) = v0;
      *(void *)(v0 + 120) = v0 + 353;
      *(void *)(v0 + 88) = sub_100206AC0;
      uint64_t v26 = swift_continuation_init();
      *(void *)(v0 + 184) = _NSConcreteStackBlock;
      *(void *)(v0 + 192) = 0x40000000;
      *(void *)(v0 + 200) = sub_100206F5C;
      *(void *)(v0 + 208) = &unk_1003321A0;
      *(void *)(v0 + 216) = v26;
      [v23 handoffConversation:v25 toTVDevice:v15 completion:v0 + 184];
LABEL_7:
      return _swift_continuation_await(v18);
    }
    swift_release();
    sub_100207810();
    swift_allocError();
    *(void *)uint64_t v36 = 2;
    *(unsigned char *)(v36 + 8) = 2;
    swift_willThrow();
  }
  else
  {
    swift_release();
    sub_100207810();
    swift_allocError();
    *(void *)uint64_t v27 = 4;
    *(unsigned char *)(v27 + 8) = 2;
    swift_willThrow();
  }
  swift_task_dealloc();
  Swift::String v37 = *(uint64_t (**)(void))(v0 + 8);
  return v37();
}

uint64_t sub_100206AC0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 112);
  *(void *)(*v0 + 320) = v2;
  uint64_t v3 = *(void *)(v1 + 288);
  uint64_t v4 = *(void *)(v1 + 280);
  if (v2) {
    Swift::String v5 = sub_100206E30;
  }
  else {
    Swift::String v5 = sub_100206BF0;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v5, v4, v3);
}

uint64_t sub_100206BF0()
{
  uint64_t v1 = (void *)v0[38];
  uint64_t v2 = (void *)v0[39];
  uint64_t v3 = (void *)v0[37];
  swift_release();

  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100206C78()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 344) = v2;
  uint64_t v3 = *(void *)(v1 + 288);
  uint64_t v4 = *(void *)(v1 + 280);
  if (v2) {
    Swift::String v5 = sub_100206EC4;
  }
  else {
    Swift::String v5 = sub_100206DA8;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v5, v4, v3);
}

uint64_t sub_100206DA8()
{
  uint64_t v1 = (void *)v0[41];
  uint64_t v2 = (void *)v0[42];
  uint64_t v3 = (void *)v0[37];
  swift_release();

  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100206E30()
{
  uint64_t v1 = (void *)v0[39];
  uint64_t v3 = (void *)v0[37];
  uint64_t v2 = (void *)v0[38];
  swift_release();
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100206EC4()
{
  uint64_t v1 = (void *)v0[42];
  uint64_t v2 = (void *)v0[41];
  uint64_t v3 = (void *)v0[37];
  swift_release();
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100206F5C(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10000A38C((uint64_t *)&unk_100365D60);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(unsigned char **)(*(void *)(v3 + 64) + 40) = a2;
    return _swift_continuation_throwingResume(v3);
  }
}

unint64_t sub_100207010(uint64_t a1, char a2)
{
  if (a2)
  {
    if (a2 == 1)
    {
      unint64_t v6 = 0;
      _StringGuts.grow(_:)(22);
      v3._countAndFlagsBits = 0xD000000000000014;
      v3._object = (void *)0x80000001002C5250;
      String.append(_:)(v3);
      type metadata accessor for TURouteDeviceType(0);
      _print_unlocked<A, B>(_:_:)();
      return v6;
    }
    unint64_t result = 0x6C6C6163206F4ELL;
    switch(a1)
    {
      case 1:
        unint64_t result = 0x6574756F72206F4ELL;
        break;
      case 2:
        unint64_t result = 0xD000000000000011;
        break;
      case 3:
        unint64_t result = 0x6F7220656C617453;
        break;
      case 4:
        unint64_t result = 0xD000000000000010;
        break;
      case 5:
        unint64_t result = 0x7265766E6F436F6ELL;
        break;
      default:
        return result;
    }
  }
  else
  {
    if ((a1 & 0x100000000) == 0)
    {
      v4._countAndFlagsBits = TUCallStatus.description.getter(a1);
      unint64_t v6 = 0xD000000000000010;
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      return v6;
    }
    return 0xD000000000000013;
  }
  return result;
}

uint64_t TUCallStatus.description.getter(int a1)
{
  uint64_t result = 1701602409;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0x657669746361;
      break;
    case 2:
      uint64_t result = 1684825448;
      break;
    case 3:
      unsigned int v4 = 1684956531;
      goto LABEL_7;
    case 4:
      unsigned int v4 = 1735289202;
LABEL_7:
      uint64_t result = v4 | 0x676E6900000000;
      break;
    case 5:
    case 6:
      uint64_t result = 0x656E6E6F63736964;
      break;
    default:
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      uint64_t result = 2629695;
      break;
  }
  return result;
}

unint64_t sub_100207330()
{
  return sub_100207010(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_10020733C()
{
  return TUCallStatus.description.getter(*v0);
}

uint64_t sub_100207344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_100207448, 0, 0);
}

uint64_t sub_100207448()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_100207864(&qword_10036A2B0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_100207864(&qword_10036E330, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  id v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  void *v7 = v0;
  v7[1] = sub_1002075E8;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_1002075E8()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(void *)(v5 + 8);
    __asm { BRAA            X1, X16 }
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1002077A4, 0, 0);
}

uint64_t sub_1002077A4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_100207810()
{
  unint64_t result = qword_10036E318;
  if (!qword_10036E318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10036E318);
  }
  return result;
}

uint64_t sub_100207864(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002078AC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1002078C4(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *_s6ReasonOMa_0()
{
  return &_s6ReasonON_0;
}

id sub_1002078EC()
{
  if (qword_10035A520 != -1) {
    swift_once();
  }
  uint64_t v0 = (id *)qword_1003AC750;
  id v1 = *(id *)(qword_1003AC750 + 1448);
  double v2 = sub_1000FEB94();

  id v3 = v0[182];
  double v4 = sub_1000FEB94();

  id v5 = v0[183];
  double v6 = sub_1000FEB94();

  id v7 = v0[184];
  double v8 = sub_1000FEB94();

  double v9 = nullsub_1(v2, v4, v6, v8);
  double v11 = v10;
  double v13 = v12;
  double v15 = v14;
  id v16 = v0[185];
  double v17 = sub_1000FEB94();

  id v18 = objc_allocWithZone((Class)FluidSpring);

  return [v18 initWithParameters:v9 retargetImpuse:v11];
}

uint64_t getEnumTagSinglePayload for SpringParameters(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SpringParameters(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SpringParameters()
{
  return &type metadata for SpringParameters;
}

BOOL sub_100207A88(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

ValueMetadata *type metadata accessor for Edges()
{
  return &type metadata for Edges;
}

uint64_t type metadata accessor for TransactionManager()
{
  return self;
}

unint64_t sub_100207AF8()
{
  memcpy(v2, v0, sizeof(v2));
  return sub_100261570();
}

uint64_t _s13HintPresentedVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s13HintPresentedVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v3;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v4;
  uint64_t v5 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v5;
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  uint64_t v6 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v6;
  uint64_t v7 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v7;
  uint64_t v8 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v8;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  uint64_t v9 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v9;
  uint64_t v10 = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 216) = v10;
  uint64_t v11 = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 232) = v11;
  uint64_t v12 = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(void *)(a1 + 248) = v12;
  uint64_t v13 = *(void *)(a2 + 264);
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  *(void *)(a1 + 264) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 276);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(_DWORD *)(a1 + 276) = v13;
  uint64_t v14 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v14;
  uint64_t v15 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s13HintPresentedVwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  *(void *)(a1 + 88) = a2[11];
  *(void *)(a1 + 96) = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = a2[13];
  *(void *)(a1 + 112) = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
  *(void *)(a1 + 128) = a2[16];
  *(void *)(a1 + 136) = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = a2[18];
  *(void *)(a1 + 152) = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = a2[20];
  *(void *)(a1 + 168) = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
  uint64_t v8 = a2[23];
  *(unsigned char *)(a1 + 192) = *((unsigned char *)a2 + 192);
  *(void *)(a1 + 184) = v8;
  *(void *)(a1 + 200) = a2[25];
  *(void *)(a1 + 208) = a2[26];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[27];
  *(unsigned char *)(a1 + 224) = *((unsigned char *)a2 + 224);
  *(void *)(a1 + 216) = v9;
  uint64_t v10 = a2[29];
  *(unsigned char *)(a1 + 240) = *((unsigned char *)a2 + 240);
  *(void *)(a1 + 232) = v10;
  uint64_t v11 = a2[31];
  *(unsigned char *)(a1 + 256) = *((unsigned char *)a2 + 256);
  *(void *)(a1 + 248) = v11;
  uint64_t v12 = a2[33];
  *(unsigned char *)(a1 + 272) = *((unsigned char *)a2 + 272);
  *(void *)(a1 + 264) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 69);
  *(unsigned char *)(a1 + 280) = *((unsigned char *)a2 + 280);
  *(_DWORD *)(a1 + 276) = v12;
  *(void *)(a1 + 288) = a2[36];
  *(void *)(a1 + 296) = a2[37];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a2[38];
  *(unsigned char *)(a1 + 312) = *((unsigned char *)a2 + 312);
  *(void *)(a1 + 304) = v13;
  return a1;
}

void *_s13HintPresentedVwtk(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x139uLL);
}

uint64_t _s13HintPresentedVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  uint64_t v7 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  uint64_t v10 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  int v11 = *(_DWORD *)(a2 + 276);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(_DWORD *)(a1 + 276) = v11;
  uint64_t v12 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v12;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  return a1;
}

uint64_t _s13HintPresentedVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 313)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 72);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s13HintPresentedVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 312) = 0;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 313) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 313) = 0;
    }
    if (a2) {
      *(void *)(result + 72) = a2;
    }
  }
  return result;
}

ValueMetadata *_s13HintPresentedVMa()
{
  return &_s13HintPresentedVN;
}

unint64_t sub_1002081A4(uint64_t a1)
{
  unint64_t result = sub_1002081CC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002081CC()
{
  unint64_t result = qword_10036E400;
  if (!qword_10036E400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E400);
  }
  return result;
}

unint64_t sub_100208220(uint64_t a1)
{
  unint64_t result = sub_100208248();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100208248()
{
  unint64_t result = qword_10036E408;
  if (!qword_10036E408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E408);
  }
  return result;
}

uint64_t sub_1002082A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DaemonError(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for DaemonError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for DaemonError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DaemonError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DaemonError()
{
  return &type metadata for DaemonError;
}

uint64_t sub_100208408(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  uint64_t v6 = sub_10000A38C(&qword_10036E430);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100208D90();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v14 = v12;
    char v13 = 1;
    sub_100208E38();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100208590()
{
  if (*v0) {
    return 1684957547;
  }
  else {
    return 1868983913;
  }
}

uint64_t sub_1002085B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100208AB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002085DC(uint64_t a1)
{
  unint64_t v2 = sub_100208D90();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100208618(uint64_t a1)
{
  unint64_t v2 = sub_100208D90();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100208654(uint64_t a1)
{
  unint64_t v2 = sub_1002087D4();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100208690(uint64_t a1)
{
  unint64_t v2 = sub_1002087D4();

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1002086CC()
{
  return qword_1002A8A40[*(char *)(v0 + 16)];
}

uint64_t sub_1002086E0()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void **)(v0 + 8);
  v3._countAndFlagsBits = sub_100208828(*(unsigned char *)(v0 + 16));
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 656423463;
  v4._object = (void *)0xE400000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v1;
  v5._object = v2;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 39;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 39;
}

uint64_t sub_100208780@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100208B88(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1002087B0(void *a1)
{
  return sub_100208408(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

unint64_t sub_1002087D4()
{
  unint64_t result = qword_10036E410;
  if (!qword_10036E410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E410);
  }
  return result;
}

unint64_t sub_100208828(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x4979646165726C41;
      break;
    case 4:
      unint64_t result = 0x7075727265746E69;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x6974696E49746F4ELL;
      break;
    case 7:
      unint64_t result = 0x6F6974617265704FLL;
      break;
    case 8:
      unint64_t result = 0x74756F656D6954;
      break;
    case 9:
      unint64_t result = 0x7463657078656E55;
      break;
    case 10:
      unint64_t result = 0xD000000000000011;
      break;
    case 11:
      unint64_t result = 0x6E776F6E6B6E55;
      break;
    case 12:
      unint64_t result = 0x726F707075736E55;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1002089D0@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002092D8(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1002089FC()
{
  return sub_100208828(*v0);
}

uint64_t sub_100208A04()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100208A64()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100208AB4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1868983913 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1684957547 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100208B88(void *a1)
{
  uint64_t v3 = sub_10000A38C(&qword_10036E418);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_10000D6E4(a1, a1[3]);
  sub_100208D90();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000CC5C((uint64_t)a1);
  }
  else
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[13] = 1;
    sub_100208DE4();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    sub_10000CC5C((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_100208D90()
{
  unint64_t result = qword_10036E420;
  if (!qword_10036E420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E420);
  }
  return result;
}

unint64_t sub_100208DE4()
{
  unint64_t result = qword_10036E428;
  if (!qword_10036E428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E428);
  }
  return result;
}

unint64_t sub_100208E38()
{
  unint64_t result = qword_10036E438;
  if (!qword_10036E438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E438);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DaemonError.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100208F58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DaemonError.CodingKeys()
{
  return &type metadata for DaemonError.CodingKeys;
}

uint64_t getEnumTagSinglePayload for DaemonError.Kind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DaemonError.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002090ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DaemonError.Kind()
{
  return &type metadata for DaemonError.Kind;
}

unint64_t sub_100209128()
{
  unint64_t result = qword_10036E440;
  if (!qword_10036E440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E440);
  }
  return result;
}

unint64_t sub_100209180()
{
  unint64_t result = qword_10036E448;
  if (!qword_10036E448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E448);
  }
  return result;
}

unint64_t sub_1002091D8()
{
  unint64_t result = qword_10036E450;
  if (!qword_10036E450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E450);
  }
  return result;
}

unint64_t sub_100209230()
{
  unint64_t result = qword_10036E458;
  if (!qword_10036E458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E458);
  }
  return result;
}

unint64_t sub_100209284()
{
  unint64_t result = qword_10036E460;
  if (!qword_10036E460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E460);
  }
  return result;
}

unint64_t sub_1002092D8(unint64_t result)
{
  if (result >= 0xD) {
    return 13;
  }
  return result;
}

uint64_t sub_1002092E8(void (*a1)(void ***), uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_retain();
  if (Strong
    && (id v12 = [Strong dispatchQueue], Strong, v12))
  {
    uint64_t v13 = swift_allocObject();
    swift_beginAccess();
    char v14 = (void *)swift_unknownObjectWeakLoadStrong();
    swift_unknownObjectWeakInit();

    char v15 = (void *)swift_allocObject();
    v15[2] = v13;
    v15[3] = sub_10020C134;
    v15[4] = v10;
    uint64_t v28 = sub_10020C324;
    uint64_t v29 = v15;
    aBlock = _NSConcreteStackBlock;
    uint64_t v25 = 1107296256;
    uint64_t v26 = sub_10007A0AC;
    uint64_t v27 = &unk_100332AA8;
    id v16 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    id v23 = _swiftEmptyArrayStorage;
    sub_1000954B4((unint64_t *)&qword_100363D50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000A38C((uint64_t *)&unk_10035E800);
    sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
    swift_release();
    return swift_release();
  }
  else
  {
    swift_release();
    sub_10001A050();
    uint64_t v18 = swift_allocError();
    *(void *)uint64_t v19 = 0xD00000000000001CLL;
    *(void *)(v19 + 8) = 0x80000001002C5440;
    *(unsigned char *)(v19 + 16) = 9;
    aBlock = (void **)v18;
    LOBYTE(v25) = 1;
    a1(&aBlock);
    return swift_errorRelease();
  }
}

uint64_t sub_100209700(void (*a1)(void ***), uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v20 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  swift_beginAccess();
  uint64_t Strong = (void *)swift_weakLoadStrong();
  swift_retain();
  if (Strong && (id v12 = [Strong dispatchQueue], swift_release(), v12))
  {
    uint64_t v13 = swift_allocObject();
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    char v14 = (void *)swift_allocObject();
    v14[2] = v13;
    v14[3] = sub_10020C134;
    v14[4] = v10;
    uint64_t v27 = sub_10020C228;
    uint64_t v28 = v14;
    aBlock = _NSConcreteStackBlock;
    uint64_t v24 = 1107296256;
    uint64_t v25 = sub_10007A0AC;
    uint64_t v26 = &unk_1003329B8;
    char v15 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v22 = _swiftEmptyArrayStorage;
    sub_1000954B4((unint64_t *)&qword_100363D50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000A38C((uint64_t *)&unk_10035E800);
    sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v7);
    swift_release();
    return swift_release();
  }
  else
  {
    swift_release();
    sub_10001A050();
    uint64_t v17 = swift_allocError();
    *(void *)uint64_t v18 = 0xD00000000000001CLL;
    *(void *)(v18 + 8) = 0x80000001002C5440;
    *(unsigned char *)(v18 + 16) = 9;
    aBlock = (void **)v17;
    LOBYTE(v24) = 1;
    a1(&aBlock);
    return swift_errorRelease();
  }
}

uint64_t sub_100209B20(void (*a1)(void ***), uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_retain();
  if (Strong
    && (id v12 = [Strong dispatchQueue], Strong, v12))
  {
    uint64_t v13 = swift_allocObject();
    swift_beginAccess();
    char v14 = (void *)swift_unknownObjectWeakLoadStrong();
    swift_unknownObjectWeakInit();

    char v15 = (void *)swift_allocObject();
    v15[2] = v13;
    v15[3] = sub_10020C134;
    v15[4] = v10;
    uint64_t v28 = sub_10020C1DC;
    uint64_t v29 = v15;
    aBlock = _NSConcreteStackBlock;
    uint64_t v25 = 1107296256;
    uint64_t v26 = sub_10007A0AC;
    uint64_t v27 = &unk_1003328C8;
    id v16 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    id v23 = _swiftEmptyArrayStorage;
    sub_1000954B4((unint64_t *)&qword_100363D50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000A38C((uint64_t *)&unk_10035E800);
    sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
    swift_release();
    return swift_release();
  }
  else
  {
    swift_release();
    sub_10001A050();
    uint64_t v18 = swift_allocError();
    *(void *)uint64_t v19 = 0xD00000000000001CLL;
    *(void *)(v19 + 8) = 0x80000001002C5440;
    *(unsigned char *)(v19 + 16) = 9;
    aBlock = (void **)v18;
    LOBYTE(v25) = 1;
    a1(&aBlock);
    return swift_errorRelease();
  }
}

uint64_t sub_100209F38(void (*a1)(void ***), uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v20 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  swift_beginAccess();
  uint64_t Strong = (void *)swift_weakLoadStrong();
  swift_retain();
  if (Strong && (id v12 = [Strong dispatchQueue], swift_release(), v12))
  {
    uint64_t v13 = swift_allocObject();
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    char v14 = (void *)swift_allocObject();
    v14[2] = v13;
    v14[3] = sub_10020C134;
    v14[4] = v10;
    uint64_t v27 = sub_10020C13C;
    uint64_t v28 = v14;
    aBlock = _NSConcreteStackBlock;
    uint64_t v24 = 1107296256;
    uint64_t v25 = sub_10007A0AC;
    uint64_t v26 = &unk_100332710;
    char v15 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v22 = _swiftEmptyArrayStorage;
    sub_1000954B4((unint64_t *)&qword_100363D50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000A38C((uint64_t *)&unk_10035E800);
    sub_10000B010(qword_100363D60, (uint64_t *)&unk_10035E800);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v7);
    swift_release();
    return swift_release();
  }
  else
  {
    swift_release();
    sub_10001A050();
    uint64_t v17 = swift_allocError();
    *(void *)uint64_t v18 = 0xD00000000000001CLL;
    *(void *)(v18 + 8) = 0x80000001002C5440;
    *(unsigned char *)(v18 + 16) = 9;
    aBlock = (void **)v17;
    LOBYTE(v24) = 1;
    a1(&aBlock);
    return swift_errorRelease();
  }
}

uint64_t sub_10020A358(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *))
{
  uint64_t v4 = a1;
  char v5 = a2 & 1;
  return a3(&v4);
}

void sub_10020A398(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    id v12 = (void *)swift_allocObject();
    v12[2] = 0;
    v12[3] = 0;
    v12[4] = a2;
    v12[5] = a3;
    v12[6] = 0;
    aBlock[4] = a5;
    aBlock[5] = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100119FC4;
    aBlock[3] = a6;
    uint64_t v13 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v11 activateWithCompletion:v13];
    _Block_release(v13);
  }
  else
  {
    sub_10001A050();
    swift_allocError();
    *(void *)uint64_t v14 = 0x666C6573206C696ELL;
    *(void *)(v14 + 8) = 0xE800000000000000;
    *(unsigned char *)(v14 + 16) = 9;
    a2();
    swift_errorRelease();
  }
}

uint64_t sub_10020A4FC(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    id v12 = (void *)swift_allocObject();
    v12[2] = 0;
    v12[3] = 0;
    v12[4] = a2;
    v12[5] = a3;
    v12[6] = 0;
    aBlock[4] = a5;
    aBlock[5] = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100119FC4;
    aBlock[3] = a6;
    uint64_t v13 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v11 activateWithCompletion:v13];
    _Block_release(v13);
    return swift_release();
  }
  else
  {
    sub_10001A050();
    swift_allocError();
    *(void *)uint64_t v15 = 0x666C6573206C696ELL;
    *(void *)(v15 + 8) = 0xE800000000000000;
    *(unsigned char *)(v15 + 16) = 9;
    a2();
    return swift_errorRelease();
  }
}

void sub_10020A664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a1 && a3 && (*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v6._countAndFlagsBits = 32;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    v7._countAndFlagsBits = sub_1000B6A98();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    if (a5)
    {
      id v8 = a5;
      NSString v9 = String._bridgeToObjectiveC()();
      [v8 ulog:40 message:v9];
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSLog(_:_:)();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
}

id sub_10020A934()
{
  id v1 = sub_1001F657C();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for Handoff3LeaderAgent();
  return [super dealloc];
}

void sub_10020AAC8(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v62 = a1;
  uint64_t v63 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = sub_10000A38C(&qword_10036E4C0);
  uint64_t v59 = *(void *)(v4 - 8);
  uint64_t v60 = v4;
  __chkstk_darwin(v4);
  uint64_t v58 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10035AC20);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036E4C8);
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  uint64_t v10 = *(void *)(v56 + 64);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v55 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v52 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v18 = sub_1001F657C();
  NSString v19 = String._bridgeToObjectiveC()();
  [v18 ulog:40 message:v19];

  if (v3[OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_isActive])
  {
    id v20 = sub_1001F657C();
    NSString v21 = String._bridgeToObjectiveC()();
    [v20 ulog:40 message:v21];

    uint64_t v22 = *(void *)&v3[OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_environment];
    if (!v22) {
      return;
    }
    uint64_t v23 = *(void *)(v22 + OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment__isEnabled);
    *(unsigned char *)(v23 + 24) = 1;
    swift_retain();
    swift_retain();
    sub_100104B88();
    LOBYTE(v64) = *(unsigned char *)(v23 + 24);
    CurrentValueSubject.send(_:)();
    swift_release();
  }
  else
  {
    v3[OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_isActive] = 1;
    if (qword_10035A628 != -1) {
      swift_once();
    }
    uint64_t v24 = qword_1003ACB50;
    *uint64_t v17 = qword_1003ACB50;
    (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
    id v25 = (id)v24;
    LOBYTE(v24) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
    if ((v24 & 1) == 0)
    {
      __break(1u);
      return;
    }
    type metadata accessor for Stopwatch();
    uint64_t v26 = swift_allocObject();
    *(unsigned char *)(v26 + 16) = 1;
    *(void *)(v26 + 24) = 0;
    *(unsigned char *)(v26 + 32) = 1;
    *(void *)(v26 + 40) = 0;
    *(unsigned char *)(v26 + 48) = 1;
    *(void *)(v26 + 24) = UpTicks()();
    *(unsigned char *)(v26 + 32) = 0;
    *(unsigned char *)(v26 + 16) = 0;
    type metadata accessor for HandoffEnvironment();
    swift_allocObject();
    uint64_t v27 = sub_1001259FC();
    *(void *)&v3[OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_environment] = v27;
    uint64_t v28 = v3;
    uint64_t v53 = v3;
    uint64_t v29 = v27;
    swift_retain();
    swift_release();
    uint64_t v30 = *(void *)(v29 + OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment__isEnabled);
    uint64_t v54 = v29;
    *(unsigned char *)(v30 + 24) = 1;
    swift_retain();
    sub_100104B88();
    LOBYTE(v64) = *(unsigned char *)(v30 + 24);
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();
    swift_allocObject();
    swift_weakInit();
    sub_10000A38C((uint64_t *)&unk_100363D00);
    swift_allocObject();
    uint64_t v64 = Future.init(_:)();
    id v65 = *(id *)&v28[OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_dispatchQueue];
    id v31 = v65;
    uint64_t v32 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v8, 1, 1, v32);
    sub_10000A34C();
    sub_10000B010(&qword_100368130, (uint64_t *)&unk_100363D00);
    sub_1000954B4((unint64_t *)&qword_10035AC60, (void (*)(uint64_t))sub_10000A34C);
    id v33 = v31;
    id v34 = v13;
    Publisher.receive<A>(on:options:)();
    sub_10000AC28((uint64_t)v8);

    swift_release();
    swift_retain();
    uint64_t v35 = ObjectType;
    id v36 = sub_10016B098(ObjectType, (uint64_t)&off_1003325E0);
    Swift::String v37 = v55;
    uint64_t v38 = v56;
    uint64_t v39 = v57;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v55, v34, v57);
    unint64_t v40 = (*(unsigned __int8 *)(v38 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = v26;
    *(_OWORD *)(v41 + 24) = xmmword_100295990;
    (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))(v41 + v40, v37, v39);
    *(void *)(v41 + ((v10 + v40 + 7) & 0xFFFFFFFFFFFFFFF8)) = v36;
    sub_10000B010(&qword_10036E4D0, &qword_10036E4C8);
    swift_retain();
    id v42 = v36;
    uint64_t v43 = v58;
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000B010(&qword_10036E4D8, &qword_10036E4C0);
    uint64_t v44 = v60;
    uint64_t v45 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v43, v44);
    swift_release();

    (*(void (**)(char *, uint64_t))(v38 + 8))(v34, v39);
    uint64_t v46 = swift_allocObject();
    uint64_t v47 = v53;
    *(void *)(v46 + 16) = v53;
    v47;
    id v48 = sub_10016B098(v35, (uint64_t)&off_1003325E0);
    uint64_t v64 = v45;
    uint64_t v49 = swift_allocObject();
    uint64_t v50 = v63;
    *(void *)(v49 + 16) = v62;
    *(void *)(v49 + 24) = v50;
    *(void *)(v49 + 32) = v45;
    strcpy((char *)(v49 + 40), "### Activate");
    *(unsigned char *)(v49 + 53) = 0;
    *(_WORD *)(v49 + 54) = -5120;
    *(void *)(v49 + 56) = v48;
    *(void *)(v49 + 64) = sub_10020BB64;
    *(void *)(v49 + 72) = v46;
    swift_retain();
    swift_retain();
    id v51 = v48;
    swift_retain();
    sub_10000A38C(&qword_10036E4E0);
    sub_10000B010(&qword_10036E4E8, &qword_10036E4E0);
    Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();

    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  swift_release();
  swift_release();
}

void sub_10020B414()
{
  id v0 = sub_1001F657C();
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 ulog:40 message:v1];
}

void sub_10020B520()
{
  id v1 = sub_1001F657C();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_environment);
  if (v3)
  {
    *(unsigned char *)(*(void *)(v3 + OBJC_IVAR____TtC17proximitycontrold18HandoffEnvironment__isEnabled) + 24) = 0;
    swift_retain();
    swift_retain();
    sub_100104B88();
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t type metadata accessor for Handoff3LeaderAgent()
{
  return self;
}

uint64_t sub_10020B700()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(44);
  v2._object = (void *)0x80000001002C53E0;
  v2._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v2);
  if (qword_10035A640 != -1) {
    swift_once();
  }
  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.value.getter();
  if (v12 == 3) {
    CurrentValueSubject.value.getter();
  }
  swift_release();
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x203A736B7361540ALL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  uint64_t v4 = (void *)(v0 + OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_tasks);
  swift_beginAccess();
  if ((*v4 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 2570;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  if (*(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_environment))
  {
    type metadata accessor for HandoffEnvironment();
    swift_retain();
    uint64_t v7 = String.init<A>(describing:)();
    unint64_t v9 = v8;
  }
  else
  {
    unint64_t v9 = 0xEF6C696E3D746E65;
    uint64_t v7 = 0x6D6E6F7269766E65;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10020B950()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020B988(void (*a1)(void ***), uint64_t a2)
{
  return sub_100209F38(a1, a2);
}

uint64_t sub_10020B990()
{
  uint64_t v1 = sub_10000A38C(&qword_10036E4C8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10020BA84()
{
  uint64_t v1 = *(void *)(sub_10000A38C(&qword_10036E4C8) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  unint64_t v6 = *(void **)((char *)v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_10020A664(v3, v4, v5, (uint64_t)v0 + v2, v6);
}

uint64_t sub_10020BB2C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10020BB64()
{
}

uint64_t sub_10020BB6C()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + 64)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10020BBD4(uint64_t *a1)
{
  return sub_10020BF5C(*a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 40), *(void **)(v1 + 48), *(void **)(v1 + 56), *(uint64_t (**)(uint64_t))(v1 + 64));
}

id sub_10020BBEC(void *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = &v1[OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_invalidationHandler];
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v5 = &v1[OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_interruptionHandler];
  *uint64_t v5 = 0;
  v5[1] = 0;
  *(void *)&v1[OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_environment] = 0;
  v1[OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_isActive] = 0;
  *(void *)&v1[OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_tasks] = &_swiftEmptySetSingleton;
  unint64_t v6 = v1;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, ObjectType, (uint64_t)&off_1003325E0);
  *(void *)&v6[OBJC_IVAR____TtC17proximitycontrold19Handoff3LeaderAgent_dispatchQueue] = a1;
  id v7 = a1;

  v9.receiver = v6;
  v9.super_class = (Class)type metadata accessor for Handoff3LeaderAgent();
  return [super init];
}

uint64_t sub_10020BCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a2 && a4 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = 32;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9._countAndFlagsBits = sub_1000B6A98();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    if (a6)
    {
      id v10 = a6;
      NSString v11 = String._bridgeToObjectiveC()();
      [v10 ulog:40 message:v11 a3:a4];
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSLog(_:_:)();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  return a1;
}

void sub_10020BDDC(uint64_t a1, void (*a2)(void), uint64_t a3, Swift::String a4, void *a5, void (*a6)(uint64_t))
{
  if (a1)
  {
    if (a2) {
      a1 = ((uint64_t (*)(void, void (*)(void), uint64_t, uint64_t, void *))a2)(0, a2, a3, a4._countAndFlagsBits, a4._object);
    }
  }
  else
  {
    String.append(_:)(a4);
    v9._countAndFlagsBits = 32;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    _print_unlocked<A, B>(_:_:)();
    if (a5)
    {
      id v10 = a5;
      NSString v11 = String._bridgeToObjectiveC()();
      [v10 ulog:90 message:v11];
      swift_bridgeObjectRelease();

      if (!a2) {
        goto LABEL_11;
      }
    }
    else
    {
      NSLog(_:_:)();
      a1 = swift_bridgeObjectRelease();
      if (!a2) {
        goto LABEL_11;
      }
    }
    if (!_getErrorEmbeddedNSError<A>(_:)()) {
      swift_allocError();
    }
    a2();
    a1 = swift_errorRelease();
  }
LABEL_11:
  if (a6) {
    a6(a1);
  }
}

uint64_t sub_10020BF5C(uint64_t result, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t (*a7)(uint64_t))
{
  if (result)
  {
    uint64_t v12 = result;
    swift_errorRetain();
    v13._countAndFlagsBits = a4;
    v13._object = a5;
    String.append(_:)(v13);
    v14._countAndFlagsBits = 32;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    sub_10000A38C((uint64_t *)&unk_100365D60);
    _print_unlocked<A, B>(_:_:)();
    if (a6)
    {
      id v15 = a6;
      NSString v16 = String._bridgeToObjectiveC()();
      [v15 ulog:90 message:v16];
      swift_bridgeObjectRelease();

      if (!a2) {
        goto LABEL_12;
      }
    }
    else
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
      if (!a2)
      {
LABEL_12:
        unint64_t result = swift_errorRelease();
        goto LABEL_13;
      }
    }
    swift_errorRetain();
    uint64_t v17 = _getErrorEmbeddedNSError<A>(_:)();
    if (v17)
    {
      uint64_t v18 = v17;
      swift_errorRelease();
    }
    else
    {
      uint64_t v18 = swift_allocError();
      *NSString v19 = v12;
    }
    a2(v18);
    swift_errorRelease();
    goto LABEL_12;
  }
  if (a2) {
    unint64_t result = ((uint64_t (*)(void))a2)(0);
  }
LABEL_13:
  if (a7) {
    return a7(result);
  }
  return result;
}

uint64_t sub_10020C13C()
{
  return sub_10020A4FC(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), (uint64_t)&unk_100332748, (uint64_t)sub_10020C19C, (uint64_t)&unk_100332760);
}

uint64_t sub_10020C180(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10020C190()
{
  return swift_release();
}

uint64_t sub_10020C1A0()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10020C1DC()
{
  sub_10020A398(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), (uint64_t)&unk_100332900, (uint64_t)sub_10020C19C, (uint64_t)&unk_100332918);
}

uint64_t sub_10020C228()
{
  return sub_10020A4FC(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), (uint64_t)&unk_1003329F0, (uint64_t)sub_10020C19C, (uint64_t)&unk_100332A08);
}

uint64_t sub_10020C270()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10020C2A8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020C2E4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10020C324()
{
  sub_10020A398(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), (uint64_t)&unk_100332AE0, (uint64_t)sub_10020C19C, (uint64_t)&unk_100332AF8);
}

uint64_t sub_10020C36C()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10020C418()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t sub_10020C514()
{
  return swift_unknownObjectWeakLoadStrong();
}

unint64_t sub_10020C564(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 7104878;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  if (a1)
  {
    swift_unknownObjectRetain();
    sub_10000A38C((uint64_t *)&unk_10036E690);
    uint64_t v5 = String.init<A>(describing:)();
    unint64_t v7 = v6;
  }
  else
  {
    unint64_t v7 = 0xE300000000000000;
    uint64_t v5 = 7104878;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x3D6C61636F6C202CLL;
  v9._object = (void *)0xE800000000000000;
  String.append(_:)(v9);
  if (a2)
  {
    swift_unknownObjectRetain();
    sub_10000A38C((uint64_t *)&unk_10036E690);
    uint64_t v4 = String.init<A>(describing:)();
    NSString v11 = v10;
  }
  else
  {
    NSString v11 = (void *)0xE300000000000000;
  }
  v12._countAndFlagsBits = v4;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return 0xD000000000000017;
}

void sub_10020C698(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  sub_10020ECD4();
}

id sub_10020C6C0()
{
  unint64_t v1 = (objc_class *)type metadata accessor for ApertureViewControllerCustom();
  sub_10016ADD8(0x74696E696544, (void *)0xE600000000000000, 0, (uint64_t)v1, (uint64_t)&off_100332BD8);
  v3.receiver = v0;
  v3.super_class = v1;
  return [super dealloc];
}

id sub_10020C778(void *a1)
{
  id v1 = a1;
  return sub_10020C6C0();
}

uint64_t sub_10020C7A0(char *a1)
{
  uint64_t v2 = swift_isaMask & *(void *)a1;
  sub_100024144((uint64_t)&a1[*(void *)(v2 + 0x60)]);
  (*(void (**)(char *))(*(void *)(*(void *)(v2 + 80) - 8) + 8))(&a1[*(void *)((swift_isaMask & *(void *)a1)
                                                                                                 + 0x68)]);

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  sub_100024144((uint64_t)&a1[*(void *)((swift_isaMask & *(void *)a1) + 0xA0)]);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

id sub_10020C9EC()
{
  uint64_t v0 = (void *)sub_10020CA20();

  return v0;
}

uint64_t sub_10020CA20()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_10020CA4C()
{
  return sub_10020EFF4();
}

uint64_t sub_10020CA74()
{
  return 1;
}

id sub_10020CA7C()
{
  static String._fromUTF8Repairing(_:)();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v0;
}

id sub_10020CAD0(void *a1)
{
  id v1 = a1;
  sub_10020CB48();
  uint64_t v3 = v2;

  if (v3)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v4 = 0;
  }

  return v4;
}

uint64_t sub_10020CB48()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)((swift_isaMask & *v0) + 0x58) + 40) + 8))(*(void *)((swift_isaMask & *v0) + 0x50));
}

id sub_10020CBD4()
{
  id v0 = (id)sub_10020F024();

  return v0;
}

void sub_10020CC10(void *a1)
{
}

void sub_10020CC30(void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10020CC48(void *a1, uint64_t a2)
{
  return sub_10020D118(a1, a2, 0xD000000000000035, (void *)0x80000001002BAEC0, 2u);
}

void sub_10020CC68(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
}

void sub_10020CC80(void *a1)
{
}

void sub_10020CCA0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v8 = v4;
  uint64_t v10 = type metadata accessor for ApertureViewControllerCustom();
  sub_10016ADD8(a2, a3, 0, v10, (uint64_t)&off_100332BD8);
  if (!a1)
  {
    __break(1u);
    return;
  }
  id v11 = [a1 requestIdentifier];
  if (v11)
  {
    Swift::String v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)(*(void *)((swift_isaMask & *v8) + 0x58) + 40) + 8))(*(void *)((swift_isaMask & *v8) + 0x50));
    if (v17)
    {
      if (v13 == v16 && v17 == v15)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_15;
      }
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v19)
      {
LABEL_15:
        uint64_t v23 = (char *)v8 + *(void *)((swift_isaMask & *v8) + 0x60);
        if (swift_unknownObjectWeakLoadStrong())
        {
          uint64_t v24 = *((void *)v23 + 1);
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(void *, uint64_t, void, uint64_t, uint64_t, uint64_t))(v24 + 8))(v8, a4, 0, 3, ObjectType, v24);
          swift_unknownObjectRelease();
        }
        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  id v20 = [a1 requestIdentifier];
  if (v20)
  {
    NSString v21 = v20;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  sub_10000A38C(&qword_10035F850);
  v22._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  sub_10016AECC(90, 0xD00000000000001BLL, (void *)0x80000001002BAE60, 0, v10, (uint64_t)&off_100332BD8);
  swift_bridgeObjectRelease();
}

void sub_10020CF9C(void *a1, uint64_t a2, uint64_t a3)
{
}

void sub_10020CFB4(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_unknownObjectRetain();
  id v7 = a1;
  a4(a3);
  swift_unknownObjectRelease();
}

uint64_t sub_10020D02C(void *a1, uint64_t a2)
{
  return sub_10020D118(a1, a2, 0xD000000000000036, (void *)0x80000001002BAE80, 1u);
}

void sub_10020D04C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
}

void sub_10020D064(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, void *))
{
  swift_unknownObjectRetain();
  id v9 = a4;
  id v10 = a1;
  a5(a3, a4);
  swift_unknownObjectRelease();
}

uint64_t sub_10020D0F8(void *a1, uint64_t a2)
{
  return sub_10020D118(a1, a2, 0xD000000000000036, (void *)0x80000001002BAE20, 0);
}

uint64_t sub_10020D118(void *a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5)
{
  unint64_t v8 = v5;
  if (a2)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v12 = v11;
  }
  else
  {
    Swift::String v12 = (void *)0xE700000000000000;
    uint64_t v10 = 0x6E776F6E6B6E75;
  }
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  uint64_t v14 = type metadata accessor for ApertureViewControllerCustom();
  sub_10016ADD8(a3, a4, 0, v14, (uint64_t)&off_100332BD8);
  uint64_t result = swift_bridgeObjectRelease();
  if (!a1)
  {
    __break(1u);
    return result;
  }
  id v16 = [a1 requestIdentifier];
  if (!v16)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    id v25 = [a1 requestIdentifier];
    if (v25)
    {
      uint64_t v26 = v25;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    sub_10000A38C(&qword_10035F850);
    v27._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    sub_10016AECC(90, 0xD00000000000001BLL, (void *)0x80000001002BAE60, 0, v14, (uint64_t)&off_100332BD8);
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = v16;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  uint64_t v21 = (*(uint64_t (**)(void))(*(void *)(*(void *)((swift_isaMask & *v8) + 0x58) + 40) + 8))(*(void *)((swift_isaMask & *v8) + 0x50));
  if (!v22)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (v18 == v21 && v22 == v20)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0) {
      goto LABEL_14;
    }
  }
  uint64_t v28 = (char *)v8 + *(void *)((swift_isaMask & *v8) + 0x60);
  if (!swift_unknownObjectWeakLoadStrong()) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v29 = *((void *)v28 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void *, uint64_t, void *, void, uint64_t, uint64_t))(v29 + 8))(v8, v10, v12, a5, ObjectType, v29);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

void sub_10020D47C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
}

void sub_10020D494(void *a1, uint64_t a2, uint64_t a3)
{
}

void sub_10020D4B0(void *a1, uint64_t a2, uint64_t a3)
{
}

void sub_10020D4CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  swift_unknownObjectRetain();
  id v8 = a1;
  sub_10020F02C(a4, a5);
  swift_unknownObjectRelease();
}

uint64_t sub_10020D544()
{
  return 1;
}

uint64_t sub_10020D54C()
{
  return 1;
}

id sub_10020D554(void *a1)
{
  id v1 = a1;
  sub_10020D5BC();

  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v2;
}

uint64_t sub_10020D5BC()
{
  swift_getObjectType();
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = sub_10016B148();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x80000001002C5780;
  v2._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v2);
  (*(void (**)(void))(*(void *)(*(void *)((swift_isaMask & *v0) + 0x58) + 40) + 8))(*(void *)((swift_isaMask & *v0) + 0x50));
  if (v3)
  {
    uint64_t v4 = String.init<A>(describing:)();
    unint64_t v6 = v5;
  }
  else
  {
    unint64_t v6 = 0xE300000000000000;
    uint64_t v4 = 7104878;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 62;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 60;
}

uint64_t sub_10020D728()
{
  return sub_10020D74C();
}

uint64_t sub_10020D74C()
{
  return *(void *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0xA8));
}

uint64_t sub_10020D778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10020D7A0(a3);
}

uint64_t sub_10020D7A0(uint64_t result)
{
  *(void *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0xA8)) = result;
  return result;
}

id sub_10020D7CC()
{
  return 0;
}

id sub_10020D7D4()
{
  return 0;
}

uint64_t sub_10020D7DC()
{
  return 1;
}

uint64_t sub_10020D7E4()
{
  return 4;
}

uint64_t sub_10020D7EC()
{
  return 4;
}

uint64_t sub_10020D7F4()
{
  return 4;
}

uint64_t sub_10020D7FC()
{
  return 8;
}

uint64_t sub_10020D804()
{
  return 1;
}

id sub_10020D80C()
{
  return 0;
}

id sub_10020D814()
{
  return 0;
}

id sub_10020D81C()
{
  return 0;
}

uint64_t sub_10020D824()
{
  _StringGuts.grow(_:)(18);
  v0._object = (void *)0x80000001002C56F0;
  v0._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 0x6964726F6F63203ALL;
  v1._object = (void *)0xEE003D726F74616ELL;
  String.append(_:)(v1);
  sub_10000A38C((uint64_t *)&unk_10036E700);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v2 = type metadata accessor for ApertureViewControllerCustom();
  sub_10016ADD8(0, (void *)0xE000000000000000, 0, v2, (uint64_t)&off_100332BD8);
  return swift_bridgeObjectRelease();
}

void sub_10020D968(void *a1)
{
  swift_unknownObjectRetain();
  id v2 = a1;
  sub_10020D824();
  swift_unknownObjectRelease();
}

id sub_10020D9D0()
{
  sub_10020F024();
  Swift::String v0 = (void *)swift_unknownObjectRetain();

  return v0;
}

id sub_10020DA08()
{
  sub_10020F024();
  Swift::String v0 = (void *)swift_unknownObjectRetain();

  return v0;
}

id sub_10020DA40()
{
  uint64_t v1 = *(void *)((swift_isaMask & *v0) + 0xD0);
  id v2 = *(void **)((char *)v0 + v1);
  if (v2)
  {
    id v3 = *(id *)((char *)v0 + v1);
LABEL_6:
    id v12 = v2;
    return v3;
  }
  id result = [v0 view];
  if (result)
  {
    unint64_t v5 = result;
    id v6 = [result heightAnchor];

    id result = [v0 view];
    if (result)
    {
      unint64_t v7 = result;
      id v8 = [result SBUISA_systemApertureObstructedAreaLayoutGuide];

      id v9 = [v8 heightAnchor];
      id v10 = [v6 constraintEqualToAnchor:v9 constant:*(double *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0xC0))];

      id v11 = *(void **)((char *)v0 + v1);
      *(void *)((char *)v0 + v1) = v10;
      id v3 = v10;

      id v2 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_10020DBA8()
{
  uint64_t v1 = *(void *)((swift_isaMask & *(void *)v0) + 0xD8);
  if (*(void *)&v0[v1])
  {
    uint64_t v2 = *(void *)&v0[v1];
LABEL_6:
    swift_bridgeObjectRetain();
    return (id)v2;
  }
  id v3 = v0;
  sub_10000A38C(&qword_10035C280);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10028F670;
  id result = [v0 view];
  if (result)
  {
    id v6 = result;
    id v7 = [result centerYAnchor];

    id result = [v3 view];
    if (result)
    {
      id v8 = result;
      id v9 = [result SBUISA_systemApertureObstructedAreaLayoutGuide];

      id v10 = [v9 centerYAnchor];
      id v11 = [v7 constraintEqualToAnchor:v10];

      *(void *)(v4 + 32) = v11;
      *(void *)(v4 + 40) = sub_10020DA40();
      specialized Array._endMutation()();
      uint64_t v2 = v4;
      *(void *)&v3[v1] = v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_10020DD48()
{
  uint64_t v1 = swift_isaMask & *v0;
  uint64_t v2 = *(void *)(v1 + 0xE0);
  if (*(void *)((char *)v0 + v2))
  {
    uint64_t v3 = *(void *)((char *)v0 + v2);
LABEL_7:
    swift_bridgeObjectRetain();
    return (id)v3;
  }
  uint64_t v4 = v0;
  sub_10000A38C(&qword_10035C280);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1002A8B10;
  unint64_t v5 = *(void **)((char *)v4 + *(void *)(v1 + 120));
  id v6 = [v5 leadingAnchor];
  id result = [v4 view];
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v8 = result;
  id v9 = [result leadingAnchor];

  id v10 = [v6 constraintEqualToAnchor:v9 constant:*(double *)((char *)v4 + *(void *)((swift_isaMask & *v4) + 0xC8))];
  *(void *)(v3 + 32) = v10;
  id v11 = [v5 trailingAnchor];
  id result = [v4 view];
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  id v12 = result;
  id v13 = [result SBUISA_systemApertureObstructedAreaLayoutGuide];

  id v14 = [v13 leadingAnchor];
  id v15 = [v11 constraintEqualToAnchor:v14];

  *(void *)(v3 + 40) = v15;
  id v16 = [v5 centerYAnchor];
  id result = [v4 view];
  if (result)
  {
    uint64_t v17 = result;
    id v18 = [result SBUISA_systemApertureObstructedAreaLayoutGuide];

    id v19 = [v18 centerYAnchor];
    id v20 = [v16 constraintEqualToAnchor:v19];

    *(void *)(v3 + 48) = v20;
    id v21 = [v5 widthAnchor];
    id v22 = [v5 heightAnchor];
    id v23 = [v21 constraintEqualToAnchor:v22];

    *(void *)(v3 + 56) = v23;
    id v24 = [v5 heightAnchor];
    id v25 = [v24 constraintEqualToConstant:*(double *)((char *)v4 + *(void *)((swift_isaMask & *v4) + 0xB0))];

    *(void *)(v3 + 64) = v25;
    specialized Array._endMutation()();
    *(void *)((char *)v4 + v2) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

id sub_10020E0F4()
{
  uint64_t v1 = swift_isaMask & *v0;
  uint64_t v2 = *(void *)(v1 + 0xE8);
  if (*(void *)((char *)v0 + v2))
  {
    uint64_t v3 = *(void *)((char *)v0 + v2);
LABEL_7:
    swift_bridgeObjectRetain();
    return (id)v3;
  }
  uint64_t v4 = v0;
  sub_10000A38C(&qword_10035C280);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1002A8B10;
  unint64_t v5 = *(void **)((char *)v4 + *(void *)(v1 + 112));
  id v6 = [v5 trailingAnchor];
  id result = [v4 view];
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v8 = result;
  id v9 = [result trailingAnchor];

  id v10 = [v6 constraintEqualToAnchor:v9 constant:-*(double *)((char *)v4 + *(void *)((swift_isaMask & *v4) + 0xC8))];
  *(void *)(v3 + 32) = v10;
  id v11 = [v5 leadingAnchor];
  id result = [v4 view];
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  id v12 = result;
  id v13 = [result SBUISA_systemApertureObstructedAreaLayoutGuide];

  id v14 = [v13 trailingAnchor];
  id v15 = [v11 constraintEqualToAnchor:v14];

  *(void *)(v3 + 40) = v15;
  id v16 = [v5 centerYAnchor];
  id result = [v4 view];
  if (result)
  {
    uint64_t v17 = result;
    id v18 = [result SBUISA_systemApertureObstructedAreaLayoutGuide];

    id v19 = [v18 centerYAnchor];
    id v20 = [v16 constraintEqualToAnchor:v19];

    *(void *)(v3 + 48) = v20;
    id v21 = [v5 widthAnchor];
    id v22 = [v5 heightAnchor];
    id v23 = [v21 constraintEqualToAnchor:v22];

    *(void *)(v3 + 56) = v23;
    id v24 = [v5 heightAnchor];
    id v25 = [v24 constraintEqualToConstant:*(double *)((char *)v4 + *(void *)((swift_isaMask & *v4) + 0xB8))];

    *(void *)(v3 + 64) = v25;
    specialized Array._endMutation()();
    *(void *)((char *)v4 + v2) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

void sub_10020E4A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = (objc_class *)type metadata accessor for ApertureViewControllerCustom();
  v17.receiver = v0;
  v17.super_class = v2;
  [super viewDidLoad];
  sub_10016ADD8(0x4C64694477656976, (void *)0xED0000292864616FLL, 0, (uint64_t)v2, (uint64_t)&off_100332BD8);
  sub_10000A38C(&qword_10035C280);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028F670;
  uint64_t v4 = swift_isaMask;
  unint64_t v5 = *(void **)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x78));
  *(void *)(inited + 32) = v5;
  id v6 = *(void **)((char *)v1 + *(void *)((*v1 & v4) + 0x70));
  *(void *)(inited + 40) = v6;
  id v7 = v5;
  id v8 = v6;
  id v9 = [v0 view];
  if (!v9)
  {
    swift_release();
    __break(1u);
    goto LABEL_6;
  }
  id v10 = v9;
  [v10 addSubview:v7];
  [v10 addSubview:v8];

  swift_setDeallocating();
  swift_arrayDestroy();

  uint64_t v11 = *(void *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x90));
  [*(id *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x90)) addTarget:v1 action:"didTap"];
  id v12 = [v1 view];
  if (!v12)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  id v13 = v12;
  [v12 addGestureRecognizer:v11];

  id v14 = [v1 view];
  if (v14)
  {
    id v15 = v14;
    id v16 = [v14 layer];

    [v16 setHitTestsAsOpaque:1];
    return;
  }
LABEL_7:
  __break(1u);
}

void sub_10020E73C(void *a1)
{
  id v1 = a1;
  sub_10020E4A4();
}

void sub_10020E784(void *a1, char a2)
{
  uint64_t v3 = v2;
  id v6 = (objc_class *)type metadata accessor for ApertureViewControllerCustom();
  v24.receiver = v3;
  v24.super_class = v6;
  [super viewDidMoveToWindow:a1 shouldAppearOrDisappear:a2 & 1];
  if (a1)
  {
    id v23 = a1;
    sub_100019E10(0, &qword_10036E728);
    id v7 = a1;
    v8._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    sub_10016ADD8(0xD000000000000031, (void *)0x80000001002C5740, 0, (uint64_t)v6, (uint64_t)&off_100332BD8);
    swift_bridgeObjectRelease();
    sub_10000A38C((uint64_t *)&unk_10036E710);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10028FDD0;
    *(void *)(inited + 32) = [v3 view:v23];
    uint64_t v10 = swift_isaMask;
    uint64_t v11 = *(void **)((char *)v3 + *(void *)((swift_isaMask & *v3) + 0x78));
    *(void *)(inited + 40) = v11;
    id v12 = *(void **)((char *)v3 + *(void *)((*v3 & v10) + 0x70));
    *(void *)(inited + 48) = v12;
    specialized Array._endMutation()();
    id v13 = v11;
    id v14 = v12;
    uint64_t v15 = 4;
    id v16 = *(void **)(inited + 32);
    if (!v16) {
      goto LABEL_4;
    }
LABEL_3:
    [v16 setTranslatesAutoresizingMaskIntoConstraints:0];
LABEL_4:
    while (v15 != 6)
    {
      ++v15;
      id v16 = *(void **)(inited + 8 * v15);
      if (v16) {
        goto LABEL_3;
      }
    }
    swift_bridgeObjectRelease();
    sub_10020DBA8();
    sub_10020DD48();
    sub_10020E0F4();
    unint64_t v17 = swift_bridgeObjectRetain();
    sub_10008E2FC(v17);
    unint64_t v18 = swift_bridgeObjectRetain();
    sub_10008E2FC(v18);
    unint64_t v19 = swift_bridgeObjectRetain();
    sub_10008E2FC(v19);
    sub_10000A38C(&qword_100365CD0);
    swift_arrayDestroy();
    id v20 = self;
    sub_100019E10(0, &qword_10036E720);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v20 activateConstraints:isa];
  }
  else
  {
    v22._countAndFlagsBits = 7104878;
    v22._object = (void *)0xE300000000000000;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    sub_10016ADD8(0xD000000000000031, (void *)0x80000001002C5740, 0, (uint64_t)v6, (uint64_t)&off_100332BD8);
    swift_bridgeObjectRelease();
  }
}

void sub_10020EAB4(void *a1, uint64_t a2, void *a3, char a4)
{
  id v7 = a3;
  id v8 = a1;
  sub_10020E784(a3, a4);
}

uint64_t sub_10020EB28()
{
  uint64_t v0 = type metadata accessor for ApertureViewControllerCustom();
  sub_10016ADD8(0x2928706154646964, (void *)0xE800000000000000, 0, v0, (uint64_t)&off_100332BD8);
  swift_retain();
  PassthroughSubject.send(_:)();
  return swift_release();
}

void sub_10020EC00(void *a1)
{
  id v1 = a1;
  sub_10020EB28();
}

void sub_10020EC48(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4 = a4;

  sub_10020F0C8();
}

uint64_t type metadata accessor for ApertureViewControllerCustom()
{
  return sub_10000F2E4();
}

void sub_10020ECD4()
{
  id v1 = v0;
  *(void *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x60) + 8) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v2 = *(void *)((swift_isaMask & *v0) + 0x70);
  *(void *)((char *)v1 + v2) = [objc_allocWithZone((Class)UIImageView) init];
  uint64_t v3 = *(void *)((swift_isaMask & *v1) + 0x78);
  *(void *)((char *)v1 + v3) = [objc_allocWithZone((Class)UIImageView) init];
  uint64_t v4 = *(void *)((swift_isaMask & *v1) + 0x80);
  sub_10000A38C(&qword_100367E60);
  swift_allocObject();
  *(void *)((char *)v1 + v4) = PassthroughSubject.init()();
  *(void *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x88)) = 0;
  uint64_t v5 = *(void *)((swift_isaMask & *v1) + 0x90);
  *(void *)((char *)v1 + v5) = [objc_allocWithZone((Class)UITapGestureRecognizer) init];
  *(void *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x98)) = &_swiftEmptySetSingleton;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0xA8)) = 1;
  *(void *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0xB0)) = 0x4036000000000000;
  *(void *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0xB8)) = 0x4036000000000000;
  *(void *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0xC0)) = 0x3FF0000000000000;
  *(void *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0xC8)) = 0x4020000000000000;
  *(void *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0xD0)) = 0;
  *(void *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0xD8)) = 0;
  *(void *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0xE0)) = 0;
  *(void *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0xE8)) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10020EFF4()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_10020F024()
{
  return v0;
}

void sub_10020F02C(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for ApertureViewControllerCustom();
  sub_10016ADD8(a1, a2, 0, v4, (uint64_t)&off_100332BD8);
}

void sub_10020F0C8()
{
}

unsigned char *storeEnumTagSinglePayload for DeviceEffect(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *id result = a2;
        return result;
      case 2:
        *(_WORD *)id result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)id result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *id result = 0;
      break;
    case 2:
      *(_WORD *)id result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10020F198);
    case 4:
      *(_DWORD *)id result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEffect()
{
  return &type metadata for DeviceEffect;
}

uint64_t sub_10020F1D0(unsigned __int8 a1)
{
  int v1 = a1 - 5;
  uint64_t result = 0x7265766F63736964;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 1953722220;
      break;
    case 2:
      uint64_t result = 0x7078456C6C657764;
      break;
    case 3:
      uint64_t result = 0x6D69546C6C657764;
      break;
    case 4:
      uint64_t result = 0x456572756C696166;
      break;
    default:
      v3._countAndFlagsBits = 0x6E6F696765527875;
      v3._object = (void *)0xEA00000000002028;
      String.append(_:)(v3);
      sub_10020F3B0();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v4._countAndFlagsBits = 10528;
      v4._object = (void *)0xE200000000000000;
      String.append(_:)(v4);
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_10020F328()
{
  return sub_10020F1D0(*v0);
}

uint64_t sub_10020F330(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10020F5F8(*a1, *a2);
}

unint64_t sub_10020F33C()
{
  return 0xD000000000000019;
}

unint64_t sub_10020F35C()
{
  unint64_t result = qword_10036E730;
  if (!qword_10036E730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E730);
  }
  return result;
}

unint64_t sub_10020F3B0()
{
  unint64_t result = qword_10036E738[0];
  if (!qword_10036E738[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10036E738);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceEvent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF7)
  {
    unsigned int v2 = a2 + 9;
    if (a2 + 9 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 9;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 9;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10020F4BCLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 9;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 4;
  unsigned int v9 = v7 - 4;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 < 2) {
    unsigned int v9 = 0;
  }
  if (v9 >= 6) {
    return v9 - 5;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for DeviceEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 9;
  if (a3 + 9 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xF7) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v7 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x10020F5A4);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

uint64_t sub_10020F5CC(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 4;
  unsigned int v3 = v1 - 4;
  if (!v2) {
    unsigned int v3 = -1;
  }
  if (v3 + 1 >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

ValueMetadata *type metadata accessor for DeviceEvent()
{
  return &type metadata for DeviceEvent;
}

uint64_t sub_10020F5F8(unsigned __int8 a1, unsigned __int8 a2)
{
  switch(a1)
  {
    case 5u:
      if (a2 != 5) {
        goto LABEL_19;
      }
      uint64_t result = 1;
      break;
    case 6u:
      if (a2 != 6) {
        goto LABEL_19;
      }
      uint64_t result = 1;
      break;
    case 7u:
      if (a2 != 7) {
        goto LABEL_19;
      }
      uint64_t result = 1;
      break;
    case 8u:
      if (a2 != 8) {
        goto LABEL_19;
      }
      uint64_t result = 1;
      break;
    case 9u:
      if (a2 != 9) {
        goto LABEL_19;
      }
      uint64_t result = 1;
      break;
    default:
      if (a2 - 5 >= 5)
      {
        if (a1 == 4)
        {
          if (a2 == 4) {
            return 1;
          }
        }
        else if (a2 != 4 && a1 == a2)
        {
          return 1;
        }
      }
LABEL_19:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_10020F6D4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10020F72C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10020F75C()
{
  sub_10020F72C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SimpleCache()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for SystemEvent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x7B) {
    goto LABEL_17;
  }
  if (a2 + 133 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 133) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 133;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 133;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 133;
    }
  }
LABEL_17:
  unsigned int v6 = ((*a1 >> 5) & 0xFFFFFF87 | (8 * ((*a1 >> 1) & 0xF))) ^ 0x7F;
  if (v6 >= 0x7A) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

unsigned char *storeEnumTagSinglePayload for SystemEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 133 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 133) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x7B) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x7A)
  {
    unsigned int v6 = ((a2 - 123) >> 8) + 1;
    *uint64_t result = a2 - 123;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10020F920);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
        break;
    }
  }
  return result;
}

uint64_t sub_10020F948(unsigned __int8 *a1)
{
  return *a1 >> 5;
}

unsigned char *sub_10020F954(unsigned char *result)
{
  *result &= 0x1Fu;
  return result;
}

unsigned char *sub_10020F964(unsigned char *result, char a2)
{
  *uint64_t result = *result & 1 | (32 * a2);
  return result;
}

ValueMetadata *type metadata accessor for SystemEvent()
{
  return &type metadata for SystemEvent;
}

unint64_t sub_10020F988(unsigned __int8 a1)
{
  switch(a1 >> 5)
  {
    case 1:
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      unint64_t v2 = 0xD000000000000025;
      goto LABEL_5;
    case 3:
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease();
      unint64_t v2 = 0xD00000000000001CLL;
      goto LABEL_5;
    case 4:
    case 5:
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      unint64_t v8 = 0xD00000000000001ALL;
      goto LABEL_7;
    default:
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      unint64_t v2 = 0xD00000000000001FLL;
LABEL_5:
      unint64_t v8 = v2;
LABEL_7:
      if (a1) {
        uint64_t v3 = 1702195828;
      }
      else {
        uint64_t v3 = 0x65736C6166;
      }
      if (a1) {
        unint64_t v4 = 0xE400000000000000;
      }
      else {
        unint64_t v4 = 0xE500000000000000;
      }
      unint64_t v5 = v4;
      String.append(_:)(*(Swift::String *)&v3);
      swift_bridgeObjectRelease();
      v6._countAndFlagsBits = 10528;
      v6._object = (void *)0xE200000000000000;
      String.append(_:)(v6);
      return v8;
  }
}

unint64_t sub_10020FB80()
{
  return sub_10020F988(*v0);
}

uint64_t sub_10020FB88(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10020FB94(*a1, *a2);
}

uint64_t sub_10020FB94(unsigned __int8 a1, unsigned __int8 a2)
{
  switch(a1 >> 5)
  {
    case 1:
      char v4 = ((a1 & 1) == 0) ^ a2;
      BOOL v5 = (a2 & 0xE0) == 32;
      goto LABEL_11;
    case 2:
      char v4 = ((a1 & 1) == 0) ^ a2;
      BOOL v5 = (a2 & 0xE0) == 64;
      goto LABEL_11;
    case 3:
      char v4 = ((a1 & 1) == 0) ^ a2;
      BOOL v5 = (a2 & 0xE0) == 96;
      goto LABEL_11;
    case 4:
      char v4 = ((a1 & 1) == 0) ^ a2;
      BOOL v5 = (a2 & 0xE0) == 128;
      goto LABEL_11;
    case 5:
      char v4 = ((a1 & 1) == 0) ^ a2;
      BOOL v5 = (a2 & 0xE0) == 160;
LABEL_11:
      if (!v5) {
        char v4 = 0;
      }
      uint64_t result = v4 & 1;
      break;
    default:
      if (a2 >= 0x20u) {
        char v2 = 0;
      }
      else {
        char v2 = ((a1 & 1) == 0) ^ a2;
      }
      uint64_t result = v2 & 1;
      break;
  }
  return result;
}

uint64_t sub_10020FC74()
{
  type metadata accessor for ApplicationBlocker();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = &off_10031D1D0;
  qword_1003ACB60 = result;
  return result;
}

uint64_t sub_10020FCAC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 1;
  }
  swift_bridgeObjectRetain();
  for (i = (void **)(v1 + 40); ; i += 2)
  {
    uint64_t v5 = (uint64_t)*(i - 1);
    char v4 = *i;
    uint64_t v6 = qword_10035A538;
    swift_bridgeObjectRetain();
    if (v6 != -1) {
      swift_once();
    }
    swift_retain();
    char v7 = sub_1000BD940(v5, v4);
    swift_release();
    if (v7) {
      break;
    }
    swift_bridgeObjectRelease();
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(52);
  v8._object = (void *)0x80000001002C5930;
  v8._countAndFlagsBits = 0xD000000000000032;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v5;
  v9._object = v4;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  id v10 = sub_1001F5F88();
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 ulog:40 message:v11];
  swift_bridgeObjectRelease();

  return 0;
}

uint64_t type metadata accessor for ApplicationBlocker()
{
  return self;
}

uint64_t sub_10020FE78()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = &off_10031D1D0;
  return result;
}

unint64_t sub_10020FE8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10035E158);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  char v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  Swift::String v9 = &v26[-v8];
  uint64_t v10 = type metadata accessor for Date();
  NSString v11 = *(void **)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = &v26[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  id v16 = &v26[-v15];
  sub_1000B03BC(a1, (uint64_t)v9);
  unint64_t v17 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v11[6];
  if (v17(v9, 1, v10) == 1)
  {
    uint64_t v18 = (uint64_t)v9;
  }
  else
  {
    unint64_t v19 = v9;
    id v20 = (void (*)(unsigned char *, unsigned char *, uint64_t))v11[4];
    v20(v16, v19, v10);
    sub_1000B03BC(a2, (uint64_t)v7);
    if (v17(v7, 1, v10) != 1)
    {
      v20(v14, v7, v10);
      Date.timeIntervalSince(_:)();
      *(float *)&double v23 = v23;
      uint64_t v21 = LODWORD(v23) & 0x7FFFFFFF;
      objc_super v24 = (void (*)(unsigned char *, uint64_t))v11[1];
      v24(v14, v10);
      v24(v16, v10);
      unsigned __int8 v22 = 0;
      return v21 | ((unint64_t)v22 << 32);
    }
    ((void (*)(unsigned char *, uint64_t))v11[1])(v16, v10);
    uint64_t v18 = (uint64_t)v7;
  }
  sub_1000B0424(v18);
  uint64_t v21 = 0;
  unsigned __int8 v22 = 1;
  return v21 | ((unint64_t)v22 << 32);
}

unint64_t sub_1002100FC()
{
  return sub_100210148();
}

unint64_t sub_100210148()
{
  sub_1002102F4(v0);
  uint64_t v1 = sub_10025ECC0();
  sub_10014AC1C(v0);
  sub_10014AA08((uint64_t)v1, (void (*)(uint64_t, uint64_t, id))sub_10014AC14);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease_n();
  return 0xD000000000000046;
}

uint64_t sub_100210228(uint64_t a1, void *a2, void *a3)
{
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 2105402;
  v4._object = (void *)0xE300000000000000;
  String.append(_:)(v4);
  id v5 = [a3 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 10;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  String.append(_:)(v12);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002102F4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10021034C(unint64_t a1, char a2)
{
  if (a2) {
    return 0;
  }
  if (a1 < 4) {
    return *(void *)&aUnspecifuwb[8 * a1];
  }
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 2629695;
}

uint64_t sub_100210400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v43 = a7;
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  uint64_t v38 = a3;
  uint64_t v45 = a13;
  unint64_t v46 = a8;
  uint64_t v50 = a11;
  uint64_t v40 = a12;
  int v42 = a10 & 1;
  uint64_t v17 = sub_10000A38C(&qword_10035E158);
  __chkstk_darwin(v17 - 8);
  unint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v44 = v21;
  unsigned __int8 v22 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v39 = a1;
  v22(v19, a1, v20);
  double v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56);
  v23(v19, 0, 1, v20);
  uint64_t v41 = a2;
  unint64_t v47 = sub_10020FE8C((uint64_t)v19, a2);
  sub_1000B0424((uint64_t)v19);
  uint64_t v24 = a2;
  uint64_t v25 = v38;
  unint64_t v48 = sub_10020FE8C(v24, v38);
  unint64_t v49 = sub_10020FE8C(v25, a4);
  v22(v19, a1, v20);
  v23(v19, 0, 1, v20);
  unint64_t v26 = sub_10020FE8C((uint64_t)v19, a4);
  sub_1000B0424((uint64_t)v19);
  uint64_t v27 = v40;
  swift_bridgeObjectRetain();
  uint64_t v28 = v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  unint64_t v46 = sub_10021034C(v46, v42);
  uint64_t v30 = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = sub_1000B44B8(v45);
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_100089B9C();
  uint64_t v45 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v32 = v31;
  sub_1000B0424(a4);
  sub_1000B0424(v25);
  sub_1000B0424(v41);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v39, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  *(void *)a9 = v50;
  *(void *)(a9 + 8) = v27;
  char v34 = BYTE4(v47);
  *(_DWORD *)(a9 + 16) = v47;
  *(unsigned char *)(a9 + 20) = v34 & 1;
  char v35 = BYTE4(v51);
  *(_DWORD *)(a9 + 24) = v51;
  *(unsigned char *)(a9 + 28) = v35 & 1;
  *(_DWORD *)(a9 + 32) = v26;
  *(unsigned char *)(a9 + 36) = BYTE4(v26) & 1;
  char v36 = BYTE4(v48);
  *(_DWORD *)(a9 + 40) = v48;
  *(unsigned char *)(a9 + 44) = v36 & 1;
  *(void *)(a9 + 48) = v52;
  *(void *)(a9 + 56) = v28;
  char v37 = BYTE4(v49);
  *(_DWORD *)(a9 + 64) = v49;
  *(unsigned char *)(a9 + 68) = v37 & 1;
  *(void *)(a9 + 72) = v46;
  *(void *)(a9 + 80) = v30;
  *(void *)(a9 + 88) = v45;
  *(void *)(a9 + 96) = v32;
  return result;
}

uint64_t _s31LockscreenControlsAppearedEventVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s31LockscreenControlsAppearedEventVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  int v4 = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s31LockscreenControlsAppearedEventVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  int v5 = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = v5;
  int v6 = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v6;
  int v7 = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v8 = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s31LockscreenControlsAppearedEventVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s31LockscreenControlsAppearedEventVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s31LockscreenControlsAppearedEventVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *_s31LockscreenControlsAppearedEventVMa()
{
  return &_s31LockscreenControlsAppearedEventVN;
}

unint64_t sub_100210ADC(uint64_t a1)
{
  unint64_t result = sub_100210B04();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100210B04()
{
  unint64_t result = qword_10036E868;
  if (!qword_10036E868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E868);
  }
  return result;
}

unint64_t sub_100210B58(uint64_t a1)
{
  unint64_t result = sub_100210B80();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100210B80()
{
  unint64_t result = qword_10036E870;
  if (!qword_10036E870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E870);
  }
  return result;
}

uint64_t *sub_100210BD4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for NearbySharingInteractionDisplayContext();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(int *)(v4 + 20);
    int v8 = (char *)a1 + v7;
    Swift::String v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
    NSString v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_100210CC4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
  uint64_t v3 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

void *sub_100210D40(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
  int v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  int v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_100210DE4(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
  int v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

void *sub_100210E7C(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
  int v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_100210F04(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
  int v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_100210F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100210FA8);
}

uint64_t sub_100210FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbySharingInteractionDisplayContext();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100211014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100211028);
}

uint64_t sub_100211028(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbySharingInteractionDisplayContext();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for NearbySharingInteractionViewServiceContext()
{
  uint64_t result = qword_10036E8D0;
  if (!qword_10036E8D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002110E4()
{
  uint64_t result = type metadata accessor for NearbySharingInteractionDisplayContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100211170@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for NearbySharingInteractionDisplayContext();
  __chkstk_darwin(v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036E918);
  uint64_t v14 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NearbySharingInteractionViewServiceContext();
  __chkstk_darwin(v9 - 8);
  NSString v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1002116C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_100211780(&qword_10036E928, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionDisplayContext);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    sub_100211718(v15, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
    sub_100211718((uint64_t)v11, v13, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionViewServiceContext);
  }
  return sub_10000CC5C((uint64_t)a1);
}

unint64_t sub_1002113D8()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_1002113F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002119A4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100211420(uint64_t a1)
{
  unint64_t v2 = sub_1002116C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10021145C(uint64_t a1)
{
  unint64_t v2 = sub_1002116C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100211498()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1002114B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100211170(a1, a2);
}

uint64_t sub_1002114CC(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036E930);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1002116C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for NearbySharingInteractionDisplayContext();
  sub_100211780(&qword_10036E938, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionDisplayContext);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100211640(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100211780(&qword_10036E908, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewServiceContext);
  uint64_t result = sub_100211780(&qword_10036E910, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewServiceContext);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1002116C4()
{
  unint64_t result = qword_10036E920;
  if (!qword_10036E920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E920);
  }
  return result;
}

uint64_t sub_100211718(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100211780(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NearbySharingInteractionViewServiceContext.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100211864);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewServiceContext.CodingKeys()
{
  return &type metadata for NearbySharingInteractionViewServiceContext.CodingKeys;
}

unint64_t sub_1002118A0()
{
  unint64_t result = qword_10036E940;
  if (!qword_10036E940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E940);
  }
  return result;
}

unint64_t sub_1002118F8()
{
  unint64_t result = qword_10036E948;
  if (!qword_10036E948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E948);
  }
  return result;
}

unint64_t sub_100211950()
{
  unint64_t result = qword_10036E950;
  if (!qword_10036E950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036E950);
  }
  return result;
}

uint64_t sub_1002119A4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000002DLL && a2 == 0x80000001002C5970)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t BYSetupState.description.getter(uint64_t a1)
{
  uint64_t result = 0x6E776F6E6B6E75;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0x676E696E6E7572;
      break;
    case 2:
      uint64_t result = 0x64656873696E6966;
      break;
    case 3:
      uint64_t result = 0x74616E696D726574;
      break;
    default:
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = 41;
      v4._object = (void *)0xE100000000000000;
      String.append(_:)(v4);
      uint64_t result = 2629695;
      break;
  }
  return result;
}

uint64_t sub_100211B40()
{
  return BYSetupState.description.getter(*v0);
}

void sub_100211B48(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v29 = 0xD000000000000014;
  unint64_t v30 = 0x80000001002B1B30;
  swift_retain();
  uint64_t v11 = sub_1001F7514();
  uint64_t v13 = v12;
  swift_release();
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  id v15 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 ulog:40 message:v16];
  swift_bridgeObjectRelease();

  uint64_t v17 = a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id, v7);
  swift_beginAccess();
  if (*(void *)(*(void *)(v2 + 40) + 16))
  {
    swift_bridgeObjectRetain();
    sub_100269DA0((uint64_t)v10);
    if (v18)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      swift_release();
      id v19 = sub_1001F5EB0();
      NSString v20 = String._bridgeToObjectiveC()();
      [v19 ulog:40 message:v20];
LABEL_10:

      return;
    }
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v21 = sub_100098724();
  uint64_t v23 = v22;
  swift_release();
  if (!v23)
  {
    id v19 = sub_1001F5EB0();
    NSString v20 = String._bridgeToObjectiveC()();
    [v19 ulog:115 message:v20, v27];
    goto LABEL_10;
  }
  sub_100116F18();
  OSSignpostID.init(_:)();
  static os_signpost_type_t.begin.getter();
  if (qword_10035A528 != -1) {
    swift_once();
  }
  id v24 = (id)qword_1003AC758;
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
  uint64_t v25 = (uint64_t *)(a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_mediaRouteIDActive);
  *uint64_t v25 = v21;
  v25[1] = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v28 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = 0x8000000000000000;
  sub_10026496C(a1, v17, isUniquelyReferenced_nonNull_native);
  *(void *)(v2 + 40) = v28;
  swift_bridgeObjectRelease();
  swift_endAccess();
  sub_10021E628(3uLL);
  swift_bridgeObjectRelease();
}

void sub_100212048(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[3] = (id)0xD000000000000014;
  v22[4] = (id)0x80000001002B1B10;
  swift_retain();
  uint64_t v8 = sub_1001F7514();
  uint64_t v10 = v9;
  swift_release();
  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  id v12 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 ulog:40 message:v13];
  swift_bridgeObjectRelease();

  uint64_t v14 = a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id, v4);
  swift_beginAccess();
  if (!*(void *)(*(void *)(v2 + 40) + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  sub_100269DA0((uint64_t)v7);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    id v20 = sub_1001F5EB0();
    NSString v21 = String._bridgeToObjectiveC()();
    [v20 ulog:40 message:v21];
    goto LABEL_7;
  }
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_release();
  NSString v16 = (void *)(a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_mediaRouteIDActive);
  if (*(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_mediaRouteIDActive + 8))
  {
    *NSString v16 = 0;
    v16[1] = 0;
    swift_beginAccess();
    sub_1001301E8(v14);
    swift_endAccess();
    swift_release();
    sub_10021E628(8uLL);
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(a1 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__mediaRemoteDisplayContext);
    char v18 = *(void **)(v17 + 24);
    *(void *)(v17 + 24) = 0;
    swift_retain();

    sub_100104E08();
    v22[0] = *(id *)(v17 + 24);
    id v19 = v22[0];
    CurrentValueSubject.send(_:)();
    swift_release();

    swift_release();
    return;
  }
  id v20 = sub_1001F5EB0();
  NSString v21 = String._bridgeToObjectiveC()();
  [v20 ulog:115 message:v21];
LABEL_7:
}

uint64_t sub_1002123BC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = sub_10000A38C(&qword_100364278);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v12 + v11, (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  uint64_t v13 = a3[3];
  uint64_t v14 = a3[4];
  char v15 = sub_10000D6E4(a3, v13);
  sub_10026FEA0((uint64_t)v15, a4, (uint64_t)sub_100220008, v12, a2, v13, v14);
  return swift_release();
}

uint64_t sub_10021252C(uint64_t a1)
{
  return sub_10021258C(a1, (uint64_t)&type metadata for Int, &qword_10035D010, (uint64_t *)&unk_100368230, (uint64_t (*)())sub_1001232D0);
}

uint64_t sub_10021255C(uint64_t a1)
{
  return sub_10021258C(a1, (uint64_t)&type metadata for ObjectIdentifier, &qword_10035FEA8, &qword_100368240, (uint64_t (*)())sub_100123460);
}

uint64_t sub_10021258C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t (*a5)())
{
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  v8._countAndFlagsBits = 0x5F2865766F6D6572;
  v8._object = (void *)0xEA0000000000293ALL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x3D79656B203ALL;
  v9._object = (void *)0xE600000000000000;
  String.append(_:)(v9);
  _print_unlocked<A, B>(_:_:)();
  sub_10000A38C(a3);
  sub_10000A38C(a4);
  String.init<A>(describing:)();
  id v10 = objc_allocWithZone((Class)CULogHandle);
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v10 initWithSubsystem:v11 category:v12];

  swift_bridgeObjectRetain();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 ulog:40 message:v14];
  swift_bridgeObjectRelease();

  return a5();
}

uint64_t sub_100212764(uint64_t a1)
{
  return sub_1002127DC(a1, &qword_10035FEC8, (uint64_t *)&unk_100368220, (uint64_t (*)())sub_1001234A0);
}

uint64_t sub_10021278C(uint64_t a1)
{
  return sub_1002129C8(a1, (uint64_t *)&unk_100368060, (uint64_t *)&unk_100368100, (uint64_t (*)(char *))sub_100123700);
}

uint64_t sub_1002127B4(uint64_t a1)
{
  return sub_1002127DC(a1, &qword_100365D20, (uint64_t *)&unk_100368200, (uint64_t (*)())sub_100123AD4);
}

uint64_t sub_1002127DC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)())
{
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  v7._countAndFlagsBits = 0x5F2865766F6D6572;
  v7._object = (void *)0xEA0000000000293ALL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0x3D79656B203ALL;
  v8._object = (void *)0xE600000000000000;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  sub_10000A38C(a2);
  sub_10000A38C(a3);
  String.init<A>(describing:)();
  id v9 = objc_allocWithZone((Class)CULogHandle);
  NSString v10 = String._bridgeToObjectiveC()();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v9 initWithSubsystem:v10 category:v11];

  swift_bridgeObjectRetain();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 ulog:40 message:v13];
  swift_bridgeObjectRelease();

  uint64_t v14 = a4();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1002129C8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(char *))
{
  id v20 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  NSString v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a1;
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  uint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  v11._countAndFlagsBits = 0x5F2865766F6D6572;
  v11._object = (void *)0xEA0000000000293ALL;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x3D79656B203ALL;
  v12._object = (void *)0xE600000000000000;
  String.append(_:)(v12);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v21 = sub_10000A38C(a2);
  sub_10000A38C(a3);
  String.init<A>(describing:)();
  id v13 = objc_allocWithZone((Class)CULogHandle);
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [v13 initWithSubsystem:v14 category:v15];

  swift_bridgeObjectRetain();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v16 ulog:40 message:v17];
  swift_bridgeObjectRelease();

  uint64_t v18 = v20(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v18;
}

uint64_t sub_100212C30(double a1)
{
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 102;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  sub_10000A38C((uint64_t *)&unk_10036AF60);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10028D430;
  *(void *)(v4 + 56) = &type metadata for Double;
  *(void *)(v4 + 64) = &protocol witness table for Double;
  *(double *)(v4 + 32) = a1;
  uint64_t v5 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100212D1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_100269E60((uint64_t)v9), (v5 & 1) != 0))
  {
    sub_100027B10(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v10);
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
  }
  sub_1000BA108((uint64_t)v9);
  if (*((void *)&v11 + 1))
  {
    if (swift_dynamicCast())
    {
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      uint64_t v6 = type metadata accessor for PermissionToHandoffRequest.Response();
      sub_10021EF4C(&qword_100368B38, (void (*)(uint64_t))type metadata accessor for PermissionToHandoffRequest.Response);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a2, 0, 1, v6);
      return sub_10000DBEC(0x65736E6F70736572, 0xE800000000000000);
    }
  }
  else
  {
    sub_10000D78C((uint64_t)&v10, &qword_100371910);
  }
  uint64_t v7 = type metadata accessor for PermissionToHandoffRequest.Response();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 1, 1, v7);
}

uint64_t *sub_1002130FC(uint64_t a1)
{
  Swift::String v2 = v1;
  uint64_t v29 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = sub_10000A38C(&qword_1003673D0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  uint64_t v33 = v5;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036EB78);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  uint64_t v35 = v9;
  __chkstk_darwin(v8);
  long long v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_10036EB80);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v36 = v12;
  uint64_t v37 = v13;
  __chkstk_darwin(v12);
  uint64_t v31 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[3] = (uint64_t)&_swiftEmptyDictionarySingleton;
  v1[4] = (uint64_t)&_swiftEmptyDictionarySingleton;
  v1[5] = (uint64_t)&_swiftEmptyDictionarySingleton;
  sub_10000A38C(&qword_100368040);
  uint64_t v15 = swift_allocObject();
  *(unsigned char *)(v15 + 24) = 0;
  *(void *)(v15 + 32) = [objc_allocWithZone((Class)NSLock) init];
  sub_10000A38C(&qword_100367570);
  swift_allocObject();
  uint64_t v16 = PassthroughSubject.init()();
  sub_10000A38C(&qword_10036EB88);
  swift_allocObject();
  uint64_t v17 = PassthroughSubject.init()();
  swift_allocObject();
  uint64_t v18 = PassthroughSubject.init()();
  *(void *)(v15 + 40) = v16;
  *(void *)(v15 + 48) = v17;
  *(void *)(v15 + 56) = v18;
  *(void *)(v15 + 64) = &_swiftEmptyDictionarySingleton;
  *(void *)(v15 + 72) = 0;
  uint64_t v38 = sub_10000A38C(&qword_10035B578);
  uint64_t v39 = type metadata accessor for UUID();
  uint64_t v40 = sub_10000B010(&qword_10036EB90, &qword_10035B578);
  *(void *)(v15 + 16) = swift_getKeyPath();
  *(unsigned char *)(v15 + 24) = 0;
  v1[6] = v15;
  v1[7] = 0;
  v1[8] = (uint64_t)&_swiftEmptySetSingleton;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v3, (uint64_t)&off_100333080);
  v1[2] = v29;
  swift_retain();
  uint64_t v41 = sub_100117AF4();
  swift_allocObject();
  swift_weakInit();
  sub_10000A38C(&qword_10035AC80);
  unint64_t v30 = &protocol conformance descriptor for AnyPublisher<A, B>;
  sub_10000B010(&qword_10035AC88, &qword_10035AC80);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v41 = sub_100117AF4();
  type metadata accessor for HandoffSession();
  Publisher.compactMap<A>(_:)();
  swift_release();
  sub_10000A38C(&qword_10036EB98);
  uint64_t v19 = v32;
  Publishers.CompactMap.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v19);
  sub_10000B010(&qword_10036EBA0, &qword_10036EB78);
  sub_10000B010(&qword_10036EBA8, &qword_10036EB98);
  id v20 = v31;
  uint64_t v21 = v34;
  Publisher<>.switchToLatest()();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v21);
  uint64_t v22 = swift_allocObject();
  swift_weakInit();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_10021E140;
  *(void *)(v23 + 24) = v22;
  sub_10000B010(&qword_10036EBB0, &qword_10036EB80);
  uint64_t v24 = v36;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v24);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v41 = sub_1000C5658();
  swift_allocObject();
  swift_weakInit();
  sub_10000A38C(&qword_10035FFB8);
  sub_10000B010(&qword_10035FFC0, &qword_10035FFB8);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v41 = sub_1000C57C0();
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = sub_10021E1C4;
  *(void *)(v26 + 24) = v25;
  sub_10000A38C(&qword_10036EBB8);
  sub_10000B010(&qword_10036EBC0, &qword_10036EBB8);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_release();
  return v2;
}

uint64_t sub_10021390C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10021EB1C(v1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10021396C()
{
  return swift_release();
}

uint64_t sub_100213A44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void **)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)a3 = *(void *)a1;
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v6;
  char v7 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a3 + 24) = v7;
  *(void *)(a3 + 32) = a2;
  sub_10001F914(v5, v4, v6, v7);

  return swift_retain();
}

uint64_t sub_100213A9C(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100214950(a1, a2, a3, a4, a5);
    return swift_release();
  }
  return result;
}

uint64_t sub_100213B30(void **a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100213D04(v1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100213B90(void *a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100214368(a1, a2, a3);
    return swift_release();
  }
  return result;
}

uint64_t sub_100213C0C()
{
  id v1 = sub_1001F5EB0();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100213CAC()
{
  sub_100213C0C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HandoffTransferManager()
{
  return self;
}

void sub_100213D04(void *a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  unint64_t v48 = *(void (***)(char *, uint64_t))(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v49 = (id)0xD00000000000002DLL;
  unint64_t v50 = 0x80000001002C62E0;
  id v5 = [a1 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  id v10 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 ulog:40 message:v11];
  swift_bridgeObjectRelease();

  self;
  uint64_t v12 = swift_dynamicCastObjCClass();
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    id v47 = a1;
    id v14 = [v13 mediaRemoteID];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    swift_bridgeObjectRetain();
    uint64_t v18 = swift_retain();
    uint64_t v19 = sub_1001115EC(v18, v15, v17);
    swift_release();
    swift_bridgeObjectRelease_n();
    if (v19)
    {
      id v49 = 0;
      unint64_t v50 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      id v49 = (id)0xD000000000000019;
      unint64_t v50 = 0x80000001002C6360;
      swift_retain();
      uint64_t v20 = sub_1001F7514();
      uint64_t v22 = v21;
      swift_release();
      v23._countAndFlagsBits = v20;
      v23._object = v22;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 0x7865746E6F63203ALL;
      v24._object = (void *)0xEA00000000003D74;
      String.append(_:)(v24);
      id v25 = [v13 description];
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v27;

      v29._countAndFlagsBits = v26;
      v29._object = v28;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      id v30 = sub_1001F5EB0();
      swift_bridgeObjectRetain();
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v30 ulog:40 message:v31];
      swift_bridgeObjectRelease();

      uint64_t v32 = *(void *)(v19 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__mediaRemoteDisplayContext);
      uint64_t v33 = *(void **)(v32 + 24);
      *(void *)(v32 + 24) = v13;
      id v34 = v47;
      swift_retain();

      sub_100104E08();
      id v49 = *(id *)(v32 + 24);
      id v35 = v49;
      CurrentValueSubject.send(_:)();
      swift_release();

      swift_release();
      id v36 = sub_1001EA5B0();
      NSString v37 = String._bridgeToObjectiveC()();
      [v36 ulog:40 message:v37];

      sub_100116F18();
      OSSignpostID.init(_:)();
      static os_signpost_type_t.end.getter();
      if (qword_10035A528 != -1) {
        swift_once();
      }
      id v38 = (id)qword_1003AC758;
      os_signpost(_:dso:log:name:signpostID:_:_:)();

      swift_release();
      v48[1](v4, v2);
      return;
    }
    id v49 = 0;
    unint64_t v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    id v49 = (id)0xD000000000000021;
    unint64_t v50 = 0x80000001002C6330;
    id v41 = [v13 mediaRemoteID];
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;

    v45._countAndFlagsBits = v42;
    v45._object = v44;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    id v40 = sub_1001F5EB0();
    swift_bridgeObjectRetain();
    unint64_t v48 = (void (**)(char *, uint64_t))String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v40 ulog:60 message:v48];
    swift_bridgeObjectRelease();
  }
  else
  {
    id v49 = 0;
    unint64_t v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    id v49 = (id)0xD00000000000001DLL;
    unint64_t v50 = 0x80000001002C6310;
    swift_getObjectType();
    v39._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    id v40 = sub_1001F5EB0();
    swift_bridgeObjectRetain();
    unint64_t v48 = (void (**)(char *, uint64_t))String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v40 ulog:60 message:v48];
    swift_bridgeObjectRelease();
  }

  unint64_t v46 = v48;
}

void sub_100214368(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  sub_100045BD0((uint64_t)a1, (uint64_t)v66);
  uint64_t v56 = v66[1];
  uint64_t v57 = v66[0];
  uint64_t v54 = v66[3];
  uint64_t v55 = v66[2];
  uint64_t v52 = v66[5];
  uint64_t v53 = v66[4];
  uint64_t v51 = v66[6];
  v8._countAndFlagsBits = 0xD000000000000029;
  v8._object = (void *)0x80000001002C6220;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x3D6574617473203ALL;
  v9._object = (void *)0xE800000000000000;
  String.append(_:)(v9);
  uint64_t v58 = a1;
  sub_100045BD0((uint64_t)a1, (uint64_t)&v59);
  _print_unlocked<A, B>(_:_:)();
  id v10 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v12 = (SEL *)&unk_100356000;
  [v10 ulog:40 message:v11];
  swift_bridgeObjectRelease();

  swift_beginAccess();
  uint64_t v13 = *(void *)(v4 + 32);
  if (*(void *)(v13 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v14 = sub_100269CBC(a2, (uint64_t)a3);
    if (v15)
    {
      uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void **)(v16 + qword_100370E40);
      uint64_t v18 = v17[3];
      uint64_t v19 = v17[4];
      unint64_t v20 = v17[5];
      uint64_t v50 = a2;
      sub_100045BD0((uint64_t)a1, (uint64_t)(v17 + 3));
      sub_100220664(a1, (void (*)(void, void, void, void, void, void, void))sub_10003A3A4);
      sub_100220664(a1, (void (*)(void, void, void, void, void, void, void))sub_10003A3A4);
      swift_retain();
      sub_10003A3F8(v18, v19, v20);
      sub_100104EA4();
      uint64_t v21 = v17[3];
      uint64_t v22 = v17[4];
      unint64_t v23 = v17[5];
      uint64_t v24 = v17[6];
      uint64_t v25 = v17[7];
      uint64_t v27 = v17[8];
      uint64_t v26 = v17[9];
      unint64_t v59 = v21;
      unint64_t v60 = v22;
      unint64_t v61 = v23;
      uint64_t v62 = v24;
      uint64_t v63 = v25;
      uint64_t v64 = v27;
      uint64_t v65 = v26;
      sub_10003A3A4(v21, v22, v23);
      CurrentValueSubject.send(_:)();
      swift_release();
      uint64_t v28 = v22;
      a2 = v50;
      uint64_t v12 = (SEL *)&unk_100356000;
      sub_10003A3F8(v21, v28, v23);
      sub_100220664(v58, (void (*)(void, void, void, void, void, void, void))sub_10003A3F8);
      swift_release();
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v59 = 0;
  unint64_t v60 = 0xE000000000000000;
  _StringGuts.grow(_:)(102);
  v29._countAndFlagsBits = 0xD00000000000001ELL;
  v29._object = (void *)0x80000001002C6250;
  String.append(_:)(v29);
  v30._countAndFlagsBits = a2;
  v30._object = a3;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0xD000000000000046;
  v31._object = (void *)0x80000001002C6270;
  String.append(_:)(v31);
  id v32 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v32 ulog:60 message:v33];
  swift_bridgeObjectRelease();

LABEL_6:
  swift_bridgeObjectRetain();
  uint64_t v34 = swift_retain();
  uint64_t v35 = sub_1001115EC(v34, a2, a3);
  swift_release();
  swift_bridgeObjectRelease();
  if (v35)
  {
    id v36 = *(void **)(v35 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__v1TransferState);
    uint64_t v37 = v36[3];
    uint64_t v38 = v36[4];
    unint64_t v39 = v36[5];
    v36[3] = v57;
    v36[4] = v56;
    v36[5] = v55;
    v36[6] = v54;
    v36[7] = v53;
    v36[8] = v52;
    v36[9] = v51;
    sub_100220664(v58, (void (*)(void, void, void, void, void, void, void))sub_10003A3A4);
    sub_100220664(v58, (void (*)(void, void, void, void, void, void, void))sub_10003A3A4);
    swift_retain();
    sub_10003A680(v37, v38, v39);
    sub_10010501C();
    uint64_t v40 = v36[3];
    uint64_t v41 = v36[4];
    unint64_t v42 = v36[5];
    uint64_t v43 = v36[6];
    uint64_t v44 = v36[7];
    uint64_t v45 = v36[8];
    uint64_t v46 = v36[9];
    unint64_t v59 = v40;
    unint64_t v60 = v41;
    unint64_t v61 = v42;
    uint64_t v62 = v43;
    uint64_t v63 = v44;
    uint64_t v64 = v45;
    uint64_t v65 = v46;
    sub_10003A630(v40, v41, v42);
    CurrentValueSubject.send(_:)();
    swift_release();
    sub_10003A680(v40, v41, v42);
    sub_100220664(v58, (void (*)(void, void, void, void, void, void, void))sub_10003A3F8);
    swift_release();
    swift_release();
  }
  else
  {
    unint64_t v59 = 0;
    unint64_t v60 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    unint64_t v59 = 0xD00000000000001CLL;
    unint64_t v60 = 0x80000001002C62C0;
    v47._countAndFlagsBits = a2;
    v47._object = a3;
    String.append(_:)(v47);
    id v48 = sub_1001F5EB0();
    swift_bridgeObjectRetain();
    NSString v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v48 v12[158]:60:v49];
    swift_bridgeObjectRelease();
  }
}

void sub_100214950(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v10 - 8);
  v35[0] = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v37 = 0;
  unint64_t v38 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  unint64_t v37 = 0xD000000000000025;
  unint64_t v38 = 0x80000001002C60F0;
  v12._countAndFlagsBits = sub_100272398(a1, a2, a3, a4);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x6F6973736573202CLL;
  v13._object = (void *)0xEA00000000003D6ELL;
  String.append(_:)(v13);
  v36._countAndFlagsBits = 60;
  v36._object = (void *)0xE100000000000000;
  swift_retain();
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 32;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  uint64_t v16 = *(void *)(a5 + 24);
  swift_retain();
  uint64_t v17 = sub_1001F7514();
  uint64_t v19 = v18;
  swift_release();
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 62;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  swift_release();
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  id v22 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v22 ulog:40 message:v23];

  swift_bridgeObjectRelease();
  switch(a4)
  {
    case 1:
      swift_retain();
      id v25 = (id)a1;
      LOBYTE(v37) = a2 & 1;
      sub_100217D68(a5, (void *)a1, a2 & 1, a3);

      goto LABEL_4;
    case 2:
      sub_100218B80(a5, a1, a2);
      return;
    case 3:
      sub_10021F13C(a1);
      return;
    case 4:
      unint64_t v26 = a3 | a2;
      if (a3 | a2 | a1)
      {
        if (a1 == 1 && !v26)
        {
          sub_10021D15C(a5, 0xD000000000000022, (void *)0x80000001002C6120);
          return;
        }
        if (a1 == 2 && !v26)
        {
          uint64_t v27 = *(void *)(v16 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__executedThisSession);
          *(unsigned char *)(v27 + 24) = 0;
          swift_retain();
          sub_100104B88();
          LOBYTE(v37) = *(unsigned char *)(v27 + 24);
          CurrentValueSubject.send(_:)();
          swift_release();
LABEL_6:
          swift_release();
          return;
        }
        if (a1 == 3 && !v26)
        {
          uint64_t v28 = type metadata accessor for TaskPriority();
          uint64_t v29 = v35[0];
          (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v35[0], 1, 1, v28);
          uint64_t v30 = qword_10035A630;
          swift_retain();
          uint64_t v31 = v35[1];
          swift_retain();
          if (v30 != -1) {
            swift_once();
          }
          uint64_t v32 = qword_1003ACB58;
          uint64_t v33 = sub_10021EF4C(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
          uint64_t v34 = (void *)swift_allocObject();
          v34[2] = v32;
          v34[3] = v33;
          v34[4] = v31;
          v34[5] = a5;
          swift_retain();
          sub_100255A24(v29, (uint64_t)&unk_10036ECC8, (uint64_t)v34);
          goto LABEL_6;
        }
        sub_100215CDC(a5);
      }
      else
      {
        sub_10021A290(a5, 0, 0, 1, 0);
      }
      return;
    default:
      swift_retain();
      id v24 = (id)a1;
      sub_10021A290(a5, (void *)a1, a2 & 1, a3, 0);

LABEL_4:
      goto LABEL_6;
  }
}

uint64_t sub_100214F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[9] = a4;
  v5[10] = a5;
  v5[11] = sub_10000A38C((uint64_t *)&unk_10035E840);
  v5[12] = swift_task_alloc();
  v5[13] = type metadata accessor for ExperienceEvent(0);
  v5[14] = swift_task_alloc();
  v5[15] = type metadata accessor for TransferEvent();
  v5[16] = swift_task_alloc();
  if (qword_10035A630 != -1) {
    swift_once();
  }
  type metadata accessor for WorkActor();
  sub_10021EF4C(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[17] = v7;
  v5[18] = v6;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_1002150EC, v7, v6);
}

uint64_t sub_1002150EC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 80) + 24);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1002151C4;
  uint64_t v3 = **(void **)(v0 + 72);
  v2[16] = v1;
  v2[17] = v3;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10021572C, 0, 0);
}

uint64_t sub_1002151C4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 144);
  uint64_t v4 = *(void *)(v2 + 136);
  if (v0) {
    uint64_t v5 = sub_1002154D4;
  }
  else {
    uint64_t v5 = sub_100215300;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v5, v4, v3);
}

uint64_t sub_100215300()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[14];
  uint64_t v4 = v0[11];
  uint64_t v3 = v0[12];
  swift_storeEnumTagMultiPayload();
  swift_retain();
  swift_retain();
  uint64_t v5 = UUID.uuidString.getter();
  uint64_t v7 = v6;
  swift_release();
  sub_1002203D0(v1, v2, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_storeEnumTagMultiPayload();
  Swift::String v8 = (uint64_t *)(v3 + *(int *)(v4 + 48));
  uint64_t v9 = (void *)(v3 + *(int *)(v4 + 64));
  sub_1002203D0(v2, v3, type metadata accessor for ExperienceEvent);
  *Swift::String v8 = v5;
  v8[1] = v7;
  *uint64_t v9 = 0;
  v9[1] = 0xE000000000000000;
  swift_bridgeObjectRetain();
  PassthroughSubject.send(_:)();
  sub_10000D78C(v3, (uint64_t *)&unk_10035E840);
  sub_1002204A0(v2, type metadata accessor for ExperienceEvent);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1002204A0(v0[16], (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1002154D4()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 96);
  swift_retain();
  swift_errorRetain();
  sub_100146144(v1, (void *)(v0 + 16));
  long long v6 = *(_OWORD *)(v0 + 16);
  long long v7 = *(_OWORD *)(v0 + 32);
  long long v8 = *(_OWORD *)(v0 + 48);
  *(void *)(v2 + 48) = *(void *)(v0 + 64);
  *(_OWORD *)(v2 + 16) = v7;
  *(_OWORD *)(v2 + 32) = v8;
  *(_OWORD *)uint64_t v2 = v6;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  uint64_t v9 = UUID.uuidString.getter();
  uint64_t v11 = v10;
  swift_release();
  sub_1002203D0(v2, v3, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = (uint64_t *)(v5 + *(int *)(v4 + 48));
  Swift::String v13 = (void *)(v5 + *(int *)(v4 + 64));
  sub_1002203D0(v3, v5, type metadata accessor for ExperienceEvent);
  *uint64_t v12 = v9;
  v12[1] = v11;
  *Swift::String v13 = 0;
  v13[1] = 0xE000000000000000;
  swift_bridgeObjectRetain();
  PassthroughSubject.send(_:)();
  sub_10000D78C(v5, (uint64_t *)&unk_10035E840);
  sub_1002204A0(v3, type metadata accessor for ExperienceEvent);
  swift_bridgeObjectRelease();
  swift_release();
  swift_errorRelease();
  sub_1002204A0(*(void *)(v0 + 128), (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_1002156E8(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = v3;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10021572C, 0, 0);
}

uint64_t sub_10021572C()
{
  swift_retain();
  uint64_t v1 = sub_1001F7514();
  uint64_t v3 = v2;
  swift_release();
  v4._countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  id v5 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 ulog:40 message:v6];
  swift_bridgeObjectRelease();

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100098724();
  uint64_t v8 = v7;
  swift_release();
  if (v8)
  {
    id v9 = objc_allocWithZone((Class)MRUpdateActiveSystemEndpointRequest);
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v9 initWithOutputDeviceUID:v10 reason:v11];
    v0[18] = v12;

    sub_100019E10(0, (unint64_t *)&qword_10035A680);
    uint64_t v13 = static OS_dispatch_queue.main.getter();
    v0[19] = v13;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_100215A88;
    uint64_t v14 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_10021E5D4;
    v0[13] = &unk_100333298;
    v0[14] = v14;
    [v12 perform:v13 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    sub_10000A38C(&qword_10036ECD8);
    sub_10000B010(&qword_10036ECE0, &qword_10036ECD8);
    swift_allocError();
    *Swift::String v15 = xmmword_1002A9200;
    swift_willThrow();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t sub_100215A88()
{
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_100215B68, 0, 0);
}

uint64_t sub_100215B68()
{
  uint64_t v1 = *(void **)(v0 + 120);

  id v2 = [v1 error];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)(v0 + 136);
    id v5 = *(void **)(v0 + 144);
    _StringGuts.grow(_:)(37);
    *(void *)(v0 + 80) = 0;
    *(void *)(v0 + 88) = 0xE000000000000000;
    v6._object = (void *)0x80000001002C61C0;
    v6._countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v6);
    *(void *)(v0 + 120) = v3;
    sub_10000A38C((uint64_t *)&unk_100365D60);
    _print_unlocked<A, B>(_:_:)();
    sub_10016AE10(90, *(void *)(v0 + 80), *(void **)(v0 + 88), 0, v4, (uint64_t)&off_100333080);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  else
  {
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100215CDC(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  NSString v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = sub_1001F5EB0();
  NSString v13 = String._bridgeToObjectiveC()();
  [v12 ulog:40 message:v13];

  sub_100116F18();
  OSSignpostID.init(_:)();
  static os_signpost_type_t.begin.getter();
  if (qword_10035A528 != -1) {
    swift_once();
  }
  id v14 = (id)qword_1003AC758;
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 1, 1, v15);
  uint64_t v16 = qword_10035A630;
  swift_retain();
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_1003ACB58;
  uint64_t v18 = sub_10021EF4C(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v17;
  v19[3] = v18;
  v19[4] = a1;
  v19[5] = v2;
  v19[6] = v4;
  swift_retain();
  sub_100255A24((uint64_t)v7, (uint64_t)&unk_10036EC90, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_100216038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[20] = a5;
  v6[21] = a6;
  v6[19] = a4;
  v6[22] = type metadata accessor for PermissionToHandoff();
  v6[23] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OSSignpostID();
  v6[24] = v7;
  v6[25] = *(void *)(v7 - 8);
  v6[26] = swift_task_alloc();
  v6[27] = sub_10000A38C((uint64_t *)&unk_10035E840);
  v6[28] = swift_task_alloc();
  v6[29] = type metadata accessor for ExperienceEvent(0);
  v6[30] = swift_task_alloc();
  v6[31] = type metadata accessor for TransferEvent();
  v6[32] = swift_task_alloc();
  sub_10000A38C(&qword_10036EC98);
  v6[33] = swift_task_alloc();
  v6[34] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for PermissionToHandoffRequest.Response();
  v6[35] = v8;
  v6[36] = *(void *)(v8 - 8);
  v6[37] = swift_task_alloc();
  if (qword_10035A630 != -1) {
    swift_once();
  }
  type metadata accessor for WorkActor();
  sub_10021EF4C(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[38] = v10;
  v6[39] = v9;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_1002162E8, v10, v9);
}

uint64_t sub_1002162E8()
{
  *(void *)(v0 + 320) = *(void *)(*(void *)(v0 + 152) + 24);
  uint64_t v1 = sub_10003E5A8();
  *(void *)(v0 + 328) = v1;
  if (!v1)
  {
    sub_10000A38C(&qword_100369DA0);
    sub_10000B010(&qword_100369DA8, &qword_100369DA0);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = 0xD000000000000018;
    v6[1] = 0x80000001002C1030;
    uint64_t v33 = v5;
    swift_willThrow();
    goto LABEL_8;
  }
  id v2 = (void *)v1;
  swift_retain();
  id v3 = (void *)sub_100125088()[4];
  *(void *)(v0 + 336) = v3;
  id v4 = v3;
  swift_release();
  swift_release();
  if (!v3)
  {
    sub_10000A38C(&qword_10036EC50);
    sub_10000B010(&qword_10036EC58, &qword_10036EC50);
    uint64_t v7 = swift_allocError();
    *uint64_t v8 = 0xD000000000000016;
    v8[1] = 0x80000001002C5ED0;
    uint64_t v33 = v7;
    swift_willThrow();

LABEL_8:
    uint64_t v9 = *(uint64_t **)(v0 + 256);
    uint64_t v10 = *(void *)(v0 + 240);
    uint64_t v11 = *(void *)(v0 + 224);
    uint64_t v12 = *(void *)(v0 + 184);
    uint64_t v13 = *(void *)(v0 + 168);
    uint64_t v32 = *(void *)(v0 + 216);
    _StringGuts.grow(_:)(36);
    *(void *)(v0 + 104) = 0;
    *(void *)(v0 + 112) = 0xE000000000000000;
    v14._countAndFlagsBits = 0xD000000000000022;
    v14._object = (void *)0x80000001002C6060;
    String.append(_:)(v14);
    *(void *)(v0 + 136) = v33;
    sub_10000A38C((uint64_t *)&unk_100365D60);
    _print_unlocked<A, B>(_:_:)();
    sub_10016AE10(90, *(void *)(v0 + 104), *(void **)(v0 + 112), 0, v13, (uint64_t)&off_100333080);
    swift_bridgeObjectRelease();
    static Date.now.getter();
    uint64_t v31 = v12;
    *(void *)uint64_t v12 = 0;
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 8;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    sub_1002203D0(v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
    swift_storeEnumTagMultiPayload();
    swift_retain();
    swift_retain();
    uint64_t v15 = UUID.uuidString.getter();
    uint64_t v17 = v16;
    swift_release();
    sub_1002203D0((uint64_t)v9, v10, (uint64_t (*)(void))type metadata accessor for TransferEvent);
    swift_storeEnumTagMultiPayload();
    uint64_t v18 = (uint64_t *)(v11 + *(int *)(v32 + 48));
    uint64_t v19 = (void *)(v11 + *(int *)(v32 + 64));
    sub_1002203D0(v10, v11, type metadata accessor for ExperienceEvent);
    *uint64_t v18 = v15;
    v18[1] = v17;
    *uint64_t v19 = 0x64656C696146;
    v19[1] = 0xE600000000000000;
    swift_bridgeObjectRetain();
    PassthroughSubject.send(_:)();
    sub_10000D78C(v11, (uint64_t *)&unk_10035E840);
    sub_1002204A0(v10, type metadata accessor for ExperienceEvent);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1002204A0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TransferEvent);
    *uint64_t v9 = v33 | 0x4000000000000000;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    swift_retain();
    swift_errorRetain();
    uint64_t v20 = UUID.uuidString.getter();
    uint64_t v22 = v21;
    swift_release();
    sub_1002203D0((uint64_t)v9, v10, (uint64_t (*)(void))type metadata accessor for TransferEvent);
    swift_storeEnumTagMultiPayload();
    NSString v23 = (uint64_t *)(v11 + *(int *)(v32 + 48));
    id v24 = (void *)(v11 + *(int *)(v32 + 64));
    sub_1002203D0(v10, v11, type metadata accessor for ExperienceEvent);
    *NSString v23 = v20;
    v23[1] = v22;
    void *v24 = 0x64656C696146;
    v24[1] = 0xE600000000000000;
    swift_bridgeObjectRetain();
    PassthroughSubject.send(_:)();
    sub_10000D78C(v11, (uint64_t *)&unk_10035E840);
    sub_1002204A0(v10, type metadata accessor for ExperienceEvent);
    swift_release();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    sub_1002204A0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TransferEvent);
    sub_1002204A0(v31, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
    sub_100116F18();
    OSSignpostID.init(_:)();
    static os_signpost_type_t.end.getter();
    if (qword_10035A528 != -1) {
      swift_once();
    }
    uint64_t v26 = *(void *)(v0 + 200);
    uint64_t v25 = *(void *)(v0 + 208);
    uint64_t v27 = *(void *)(v0 + 192);
    id v28 = (id)qword_1003AC758;
    os_signpost(_:dso:log:name:signpostID:_:_:)();

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = *(void *)(v0 + 8);
    __asm { BRAA            X1, X16 }
  }
  *(void *)(v0 + 88) = &type metadata for PermissionToHandoffRequest;
  *(void *)(v0 + 96) = &off_10032A168;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1002169D0, 0, 0);
}

uint64_t sub_1002169D0()
{
  uint64_t v2 = v0[41];
  uint64_t v1 = v0[42];
  id v3 = (void *)swift_task_alloc();
  v0[43] = v3;
  v3[2] = v1;
  v3[3] = v0 + 8;
  v3[4] = v2;
  id v4 = (void *)swift_task_alloc();
  v0[44] = v4;
  uint64_t v5 = sub_10000A38C(&qword_10035F8A8);
  *id v4 = v0;
  v4[1] = sub_100216AE4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 15, 0, 0, 0xD000000000000012, 0x80000001002B5950, sub_1002206B4, v3, v5);
}

uint64_t sub_100216AE4()
{
  *(void *)(*(void *)v1 + 360) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100217798;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100216C00;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_100216C00()
{
  *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 120);
  sub_10000CC5C(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_100216C6C, v1, v2);
}

uint64_t sub_100216C6C()
{
  uint64_t v1 = *(void *)(v0 + 368);
  if (!v1)
  {
    uint64_t v12 = *(void **)(v0 + 328);
    uint64_t v11 = *(void **)(v0 + 336);
    sub_10000A38C(&qword_10036ECA0);
    sub_10000B010(&qword_10036ECA8, &qword_10036ECA0);
    uint64_t v13 = swift_allocError();
    void *v14 = 0xD000000000000013;
    v14[1] = 0x80000001002C6090;
    uint64_t v81 = v13;
    swift_willThrow();

    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 272);
  swift_bridgeObjectRelease();
  sub_100212D1C(v1, v4);
  swift_bridgeObjectRelease();
  sub_10000D728(v4, v5, &qword_10036EC98);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v2) == 1)
  {
    uint64_t v7 = *(void **)(v0 + 328);
    uint64_t v6 = *(void **)(v0 + 336);
    uint64_t v8 = *(void *)(v0 + 272);
    sub_10000A38C(&qword_10036ECB0);
    sub_10000B010(&qword_10036ECB8, &qword_10036ECB0);
    uint64_t v9 = swift_allocError();
    *uint64_t v10 = 0xD00000000000003DLL;
    v10[1] = 0x80000001002C60B0;
    uint64_t v81 = v9;
    swift_willThrow();
    sub_10000D78C(v8, &qword_10036EC98);

LABEL_5:
    uint64_t v15 = *(uint64_t **)(v0 + 256);
    uint64_t v16 = *(void *)(v0 + 240);
    uint64_t v17 = *(void *)(v0 + 224);
    uint64_t v18 = *(void *)(v0 + 184);
    uint64_t v19 = *(void *)(v0 + 168);
    uint64_t v76 = *(void *)(v0 + 216);
    _StringGuts.grow(_:)(36);
    *(void *)(v0 + 104) = 0;
    *(void *)(v0 + 112) = 0xE000000000000000;
    v20._countAndFlagsBits = 0xD000000000000022;
    v20._object = (void *)0x80000001002C6060;
    String.append(_:)(v20);
    *(void *)(v0 + 136) = v81;
    sub_10000A38C((uint64_t *)&unk_100365D60);
    _print_unlocked<A, B>(_:_:)();
    sub_10016AE10(90, *(void *)(v0 + 104), *(void **)(v0 + 112), 0, v19, (uint64_t)&off_100333080);
    swift_bridgeObjectRelease();
    static Date.now.getter();
    uint64_t v74 = v18;
    *(void *)uint64_t v18 = 0;
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = 8;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    sub_1002203D0(v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
    swift_storeEnumTagMultiPayload();
    swift_retain();
    swift_retain();
    uint64_t v21 = UUID.uuidString.getter();
    uint64_t v23 = v22;
    swift_release();
    sub_1002203D0((uint64_t)v15, v16, (uint64_t (*)(void))type metadata accessor for TransferEvent);
    swift_storeEnumTagMultiPayload();
    id v24 = (uint64_t *)(v17 + *(int *)(v76 + 48));
    uint64_t v25 = (void *)(v17 + *(int *)(v76 + 64));
    sub_1002203D0(v16, v17, type metadata accessor for ExperienceEvent);
    uint64_t *v24 = v21;
    v24[1] = v23;
    *uint64_t v25 = 0x64656C696146;
    v25[1] = 0xE600000000000000;
    swift_bridgeObjectRetain();
    PassthroughSubject.send(_:)();
    sub_10000D78C(v17, (uint64_t *)&unk_10035E840);
    sub_1002204A0(v16, type metadata accessor for ExperienceEvent);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1002204A0((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for TransferEvent);
    *uint64_t v15 = v81 | 0x4000000000000000;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    swift_retain();
    swift_errorRetain();
    uint64_t v26 = UUID.uuidString.getter();
    uint64_t v28 = v27;
    swift_release();
    sub_1002203D0((uint64_t)v15, v16, (uint64_t (*)(void))type metadata accessor for TransferEvent);
    swift_storeEnumTagMultiPayload();
    uint64_t v29 = (uint64_t *)(v17 + *(int *)(v76 + 48));
    uint64_t v30 = (void *)(v17 + *(int *)(v76 + 64));
    sub_1002203D0(v16, v17, type metadata accessor for ExperienceEvent);
    *uint64_t v29 = v26;
    v29[1] = v28;
    *uint64_t v30 = 0x64656C696146;
    v30[1] = 0xE600000000000000;
    swift_bridgeObjectRetain();
    PassthroughSubject.send(_:)();
    sub_10000D78C(v17, (uint64_t *)&unk_10035E840);
    sub_1002204A0(v16, type metadata accessor for ExperienceEvent);
    swift_release();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    sub_1002204A0((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for TransferEvent);
    uint64_t v31 = type metadata accessor for PermissionToHandoff;
    uint64_t v32 = v74;
    goto LABEL_10;
  }
  uint64_t v79 = *(void *)(v0 + 320);
  uint64_t v33 = *(void *)(v0 + 296);
  uint64_t v34 = *(void *)(v0 + 272);
  uint64_t v35 = *(void *)(v0 + 280);
  uint64_t v36 = *(void *)(v0 + 256);
  uint64_t v37 = *(void *)(v0 + 240);
  uint64_t v38 = *(void *)(v0 + 224);
  uint64_t v39 = *(void *)(v0 + 216);
  uint64_t v77 = v33;
  sub_100220438(*(void *)(v0 + 264), v33, (uint64_t (*)(void))type metadata accessor for PermissionToHandoffRequest.Response);
  sub_10000D78C(v34, &qword_10036EC98);
  sub_1002203D0(v33 + *(int *)(v35 + 20), v36, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
  uint64_t v40 = v36;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  swift_retain();
  uint64_t v41 = UUID.uuidString.getter();
  uint64_t v43 = v42;
  swift_release();
  sub_1002203D0(v40, v37, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_storeEnumTagMultiPayload();
  uint64_t v44 = (uint64_t *)(v38 + *(int *)(v39 + 48));
  uint64_t v82 = v39;
  uint64_t v45 = (void *)(v38 + *(int *)(v39 + 64));
  sub_1002203D0(v37, v38, type metadata accessor for ExperienceEvent);
  uint64_t *v44 = v41;
  v44[1] = v43;
  *uint64_t v45 = 1701736260;
  v45[1] = 0xE400000000000000;
  swift_bridgeObjectRetain();
  PassthroughSubject.send(_:)();
  sub_10000D78C(v38, (uint64_t *)&unk_10035E840);
  sub_1002204A0(v37, type metadata accessor for ExperienceEvent);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1002204A0(v40, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  uint64_t v46 = *(void *)(v79 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_deviceActivity);
  uint64_t v47 = *(void *)(v77 + 8);
  if (v47 == 1)
  {
    swift_retain();
    id v48 = 0;
  }
  else
  {
    uint64_t v49 = *(void *)(v0 + 296);
    uint64_t v51 = *(void *)(v49 + 24);
    uint64_t v50 = *(void *)(v49 + 32);
    uint64_t v52 = *(void *)(v49 + 16);
    uint64_t v53 = *(void *)v49;
    char v54 = *(unsigned char *)(v49 + 40);
    *(void *)(v0 + 16) = *(void *)v49;
    *(void *)(v0 + 24) = v47;
    *(void *)(v0 + 32) = v52;
    *(void *)(v0 + 40) = v51;
    *(unsigned char *)(v0 + 48) = v50 & 1;
    *(_DWORD *)(v0 + 52) = HIDWORD(v50);
    *(unsigned char *)(v0 + 56) = v54 & 1;
    swift_retain();
    sub_100220500(v53, v47);
    id v48 = sub_100095878();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v75 = *(void **)(v0 + 336);
  uint64_t v78 = *(void **)(v0 + 328);
  uint64_t v80 = *(void *)(v0 + 296);
  uint64_t v55 = *(void **)(v0 + 256);
  uint64_t v56 = *(void *)(v0 + 240);
  uint64_t v57 = *(void *)(v0 + 224);
  uint64_t v58 = *(void *)(v46 + 40);
  unint64_t v59 = *(void **)(v58 + 24);
  *(void *)(v58 + 24) = v48;
  id v60 = v48;
  swift_retain();

  sub_100104EC4();
  unint64_t v61 = *(void **)(v58 + 24);
  *(void *)(v0 + 144) = v61;
  id v62 = v61;
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_release();

  swift_release();
  *uint64_t v55 = 0x8000000000000008;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  swift_retain();
  uint64_t v63 = UUID.uuidString.getter();
  uint64_t v65 = v64;
  swift_release();
  sub_1002203D0((uint64_t)v55, v56, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_storeEnumTagMultiPayload();
  uint64_t v66 = (uint64_t *)(v57 + *(int *)(v82 + 48));
  char v67 = (void *)(v57 + *(int *)(v82 + 64));
  sub_1002203D0(v56, v57, type metadata accessor for ExperienceEvent);
  *uint64_t v66 = v63;
  v66[1] = v65;
  void *v67 = 1701736260;
  v67[1] = 0xE400000000000000;
  swift_bridgeObjectRetain();
  PassthroughSubject.send(_:)();
  sub_10000D78C(v57, (uint64_t *)&unk_10035E840);
  sub_1002204A0(v56, type metadata accessor for ExperienceEvent);

  swift_release();
  swift_bridgeObjectRelease();
  sub_1002204A0((uint64_t)v55, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  uint64_t v31 = type metadata accessor for PermissionToHandoffRequest.Response;
  uint64_t v32 = v80;
LABEL_10:
  sub_1002204A0(v32, (uint64_t (*)(void))v31);
  sub_100116F18();
  OSSignpostID.init(_:)();
  static os_signpost_type_t.end.getter();
  if (qword_10035A528 != -1) {
    swift_once();
  }
  uint64_t v69 = *(void *)(v0 + 200);
  uint64_t v68 = *(void *)(v0 + 208);
  uint64_t v70 = *(void *)(v0 + 192);
  id v71 = (id)qword_1003AC758;
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v72 = *(uint64_t (**)(void))(v0 + 8);
  return v72();
}

uint64_t sub_100217798()
{
  swift_task_dealloc();
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_1002177FC, v1, v2);
}

uint64_t sub_1002177FC()
{
  uint64_t v1 = *(void **)(v0 + 328);

  sub_10000CC5C(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v27 = v2;
  uint64_t v3 = *(uint64_t **)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 184);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v26 = *(void *)(v0 + 216);
  _StringGuts.grow(_:)(36);
  *(void *)(v0 + 104) = 0;
  *(void *)(v0 + 112) = 0xE000000000000000;
  v8._object = (void *)0x80000001002C6060;
  v8._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v8);
  *(void *)(v0 + 136) = v2;
  sub_10000A38C((uint64_t *)&unk_100365D60);
  _print_unlocked<A, B>(_:_:)();
  sub_10016AE10(90, *(void *)(v0 + 104), *(void **)(v0 + 112), 0, v7, (uint64_t)&off_100333080);
  swift_bridgeObjectRelease();
  static Date.now.getter();
  uint64_t v25 = v6;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 8;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  sub_1002203D0(v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
  swift_storeEnumTagMultiPayload();
  swift_retain();
  swift_retain();
  uint64_t v9 = UUID.uuidString.getter();
  uint64_t v11 = v10;
  swift_release();
  sub_1002203D0((uint64_t)v3, v4, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = (uint64_t *)(v5 + *(int *)(v26 + 48));
  uint64_t v13 = (void *)(v5 + *(int *)(v26 + 64));
  sub_1002203D0(v4, v5, type metadata accessor for ExperienceEvent);
  *uint64_t v12 = v9;
  v12[1] = v11;
  *uint64_t v13 = 0x64656C696146;
  v13[1] = 0xE600000000000000;
  swift_bridgeObjectRetain();
  PassthroughSubject.send(_:)();
  sub_10000D78C(v5, (uint64_t *)&unk_10035E840);
  sub_1002204A0(v4, type metadata accessor for ExperienceEvent);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1002204A0((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  *uint64_t v3 = v27 | 0x4000000000000000;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  swift_release();
  sub_1002203D0((uint64_t)v3, v4, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = (uint64_t *)(v5 + *(int *)(v26 + 48));
  uint64_t v18 = (void *)(v5 + *(int *)(v26 + 64));
  sub_1002203D0(v4, v5, type metadata accessor for ExperienceEvent);
  *uint64_t v17 = v14;
  v17[1] = v16;
  *uint64_t v18 = 0x64656C696146;
  v18[1] = 0xE600000000000000;
  swift_bridgeObjectRetain();
  PassthroughSubject.send(_:)();
  sub_10000D78C(v5, (uint64_t *)&unk_10035E840);
  sub_1002204A0(v4, type metadata accessor for ExperienceEvent);
  swift_release();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  sub_1002204A0((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  sub_1002204A0(v25, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
  sub_100116F18();
  OSSignpostID.init(_:)();
  static os_signpost_type_t.end.getter();
  if (qword_10035A528 != -1) {
    swift_once();
  }
  uint64_t v20 = *(void *)(v0 + 200);
  uint64_t v19 = *(void *)(v0 + 208);
  uint64_t v21 = *(void *)(v0 + 192);
  id v22 = (id)qword_1003AC758;
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_100217D68(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  HIDWORD(v31) = a3;
  uint64_t v8 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v33 = 0xD00000000000002FLL;
  unint64_t v34 = 0x80000001002C5F40;
  v32._countAndFlagsBits = 60;
  v32._object = (void *)0xE100000000000000;
  swift_retain();
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  uint64_t v11 = v4;
  v12._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 32;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_retain();
  uint64_t v14 = sub_1001F7514();
  uint64_t v16 = v15;
  swift_release();
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 62;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  swift_release();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 8236;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  char v20 = BYTE4(v31) & 1;
  v21._countAndFlagsBits = sub_100047CE4(a2, BYTE4(v31) & 1, a4);
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  id v22 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v22 ulog:40 message:v23];

  swift_bridgeObjectRelease();
  uint64_t v24 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v10, 1, 1, v24);
  uint64_t v25 = qword_10035A630;
  swift_retain();
  swift_retain();
  id v26 = a2;
  swift_retain();
  if (v25 != -1) {
    swift_once();
  }
  uint64_t v27 = qword_1003ACB58;
  uint64_t v28 = sub_10021EF4C(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v27;
  *(void *)(v29 + 24) = v28;
  *(void *)(v29 + 32) = a1;
  *(void *)(v29 + 40) = v11;
  *(void *)(v29 + 48) = a2;
  *(unsigned char *)(v29 + 56) = v20;
  *(void *)(v29 + 64) = a4;
  swift_retain();
  sub_100255A24((uint64_t)v10, (uint64_t)&unk_10036EC78, v29);
  return swift_release();
}

uint64_t sub_1002180CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 224) = a7;
  *(void *)(v8 + 88) = a6;
  *(void *)(v8 + 96) = a8;
  *(void *)(v8 + 72) = a4;
  *(void *)(v8 + 80) = a5;
  *(void *)(v8 + 104) = sub_10000A38C((uint64_t *)&unk_10035E840);
  *(void *)(v8 + 112) = swift_task_alloc();
  *(void *)(v8 + 120) = type metadata accessor for ExperienceEvent(0);
  *(void *)(v8 + 128) = swift_task_alloc();
  *(void *)(v8 + 136) = type metadata accessor for TransferEvent();
  *(void *)(v8 + 144) = swift_task_alloc();
  if (qword_10035A630 != -1) {
    swift_once();
  }
  type metadata accessor for WorkActor();
  sub_10021EF4C(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v8 + 152) = v10;
  *(void *)(v8 + 160) = v9;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_100218258, v10, v9);
}

uint64_t sub_100218258()
{
  uint64_t v1 = sub_10003E5A8();
  *(void *)(v0 + 168) = v1;
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = sub_10021F200(*(void **)(v0 + 88), *(unsigned char *)(v0 + 224) & 1, *(void *)(v0 + 96));
    uint64_t v5 = v4;
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    *(void *)(v0 + 176) = v3;
    *(void *)(v0 + 184) = v4;
    *(void *)(v0 + 192) = v6;
    *(void *)(v0 + 200) = v8;
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_1002185C0;
    return sub_1002199F4(v3, v5, v7, v9, v2);
  }
  else
  {
    sub_10000A38C(&qword_100369DA0);
    sub_10000B010(&qword_100369DA8, &qword_100369DA0);
    uint64_t v12 = swift_allocError();
    *Swift::String v13 = 0xD000000000000018;
    v13[1] = 0x80000001002C1030;
    swift_willThrow();
    uint64_t v14 = *(void *)(v0 + 144);
    uint64_t v15 = *(void *)(v0 + 128);
    uint64_t v16 = *(void *)(v0 + 104);
    uint64_t v17 = *(void *)(v0 + 112);
    swift_retain();
    swift_errorRetain();
    sub_100146144(v12, (void *)(v0 + 16));
    long long v18 = *(_OWORD *)(v0 + 16);
    long long v19 = *(_OWORD *)(v0 + 32);
    long long v20 = *(_OWORD *)(v0 + 48);
    *(void *)(v14 + 48) = *(void *)(v0 + 64);
    *(_OWORD *)(v14 + 16) = v19;
    *(_OWORD *)(v14 + 32) = v20;
    *(_OWORD *)uint64_t v14 = v18;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    uint64_t v21 = UUID.uuidString.getter();
    uint64_t v23 = v22;
    swift_release();
    sub_1002203D0(v14, v15, (uint64_t (*)(void))type metadata accessor for TransferEvent);
    swift_storeEnumTagMultiPayload();
    uint64_t v24 = (uint64_t *)(v17 + *(int *)(v16 + 48));
    uint64_t v25 = (void *)(v17 + *(int *)(v16 + 64));
    sub_1002203D0(v15, v17, type metadata accessor for ExperienceEvent);
    uint64_t *v24 = v21;
    v24[1] = v23;
    *uint64_t v25 = 0xD000000000000027;
    v25[1] = 0x80000001002C5F10;
    swift_bridgeObjectRetain();
    PassthroughSubject.send(_:)();
    sub_10000D78C(v17, (uint64_t *)&unk_10035E840);
    sub_1002204A0(v15, type metadata accessor for ExperienceEvent);
    swift_bridgeObjectRelease();
    swift_release();
    swift_errorRelease();
    sub_1002204A0(*(void *)(v0 + 144), (uint64_t (*)(void))type metadata accessor for TransferEvent);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
}

uint64_t sub_1002185C0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  sub_100020414(v2[22], v2[23]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v2[20];
  uint64_t v4 = v2[19];
  if (v0) {
    uint64_t v5 = sub_100218950;
  }
  else {
    uint64_t v5 = sub_100218768;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v5, v4, v3);
}

uint64_t sub_100218768()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[16];
  uint64_t v12 = (void *)v0[21];
  uint64_t v4 = v0[13];
  uint64_t v3 = v0[14];
  swift_storeEnumTagMultiPayload();
  swift_retain();
  swift_retain();
  uint64_t v5 = UUID.uuidString.getter();
  uint64_t v7 = v6;
  swift_release();
  sub_1002203D0(v1, v2, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = (uint64_t *)(v3 + *(int *)(v4 + 48));
  uint64_t v9 = (void *)(v3 + *(int *)(v4 + 64));
  sub_1002203D0(v2, v3, type metadata accessor for ExperienceEvent);
  *uint64_t v8 = v5;
  v8[1] = v7;
  *uint64_t v9 = 1701736260;
  v9[1] = 0xE400000000000000;
  swift_bridgeObjectRetain();
  PassthroughSubject.send(_:)();
  sub_10000D78C(v3, (uint64_t *)&unk_10035E840);
  sub_1002204A0(v2, type metadata accessor for ExperienceEvent);
  swift_bridgeObjectRelease();
  swift_release();

  sub_1002204A0(v0[18], (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100218950()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  swift_retain();
  swift_errorRetain();
  sub_100146144(v1, (void *)(v0 + 16));
  long long v6 = *(_OWORD *)(v0 + 16);
  long long v7 = *(_OWORD *)(v0 + 32);
  long long v8 = *(_OWORD *)(v0 + 48);
  *(void *)(v2 + 48) = *(void *)(v0 + 64);
  *(_OWORD *)(v2 + 16) = v7;
  *(_OWORD *)(v2 + 32) = v8;
  *(_OWORD *)uint64_t v2 = v6;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  uint64_t v9 = UUID.uuidString.getter();
  uint64_t v11 = v10;
  swift_release();
  sub_1002203D0(v2, v3, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = (uint64_t *)(v5 + *(int *)(v4 + 48));
  uint64_t v13 = (void *)(v5 + *(int *)(v4 + 64));
  sub_1002203D0(v3, v5, type metadata accessor for ExperienceEvent);
  *uint64_t v12 = v9;
  v12[1] = v11;
  *uint64_t v13 = 0xD000000000000027;
  v13[1] = 0x80000001002C5F10;
  swift_bridgeObjectRetain();
  PassthroughSubject.send(_:)();
  sub_10000D78C(v5, (uint64_t *)&unk_10035E840);
  sub_1002204A0(v3, type metadata accessor for ExperienceEvent);
  swift_bridgeObjectRelease();
  swift_release();
  swift_errorRelease();
  sub_1002204A0(*(void *)(v0 + 144), (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100218B80(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v31 = 0xD00000000000001DLL;
  unint64_t v32 = 0x80000001002C5EF0;
  v30._countAndFlagsBits = 60;
  v30._object = (void *)0xE100000000000000;
  swift_retain();
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 32;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  swift_retain();
  uint64_t v13 = sub_1001F7514();
  uint64_t v15 = v14;
  swift_release();
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 62;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  swift_release();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 8236;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  long long v19 = (void *)0xE800000000000000;
  uint64_t v20 = 0x656D695465636146;
  switch(a3)
  {
    case 0uLL:
      break;
    case 1uLL:
      long long v19 = (void *)0xE500000000000000;
      uint64_t v20 = 0x636973754DLL;
      break;
    case 2uLL:
      long long v19 = (void *)0xEB00000000676E69;
      uint64_t v20 = 0x79616C5020776F4ELL;
      break;
    case 3uLL:
      long long v19 = (void *)0xEF6F6D65446C6F72;
      uint64_t v20 = 0x746E6F43786F7250;
      break;
    case 4uLL:
      long long v19 = (void *)0xE600000000000000;
      uint64_t v20 = 0x697261666153;
      break;
    default:
      uint64_t v20 = a2;
      long long v19 = (void *)a3;
      break;
  }
  sub_10001F9D4(a2, a3);
  v21._countAndFlagsBits = v20;
  v21._object = v19;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  id v22 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v22 ulog:40 message:v23];

  swift_bridgeObjectRelease();
  uint64_t v24 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v10, 1, 1, v24);
  swift_retain();
  sub_10001F9D4(a2, a3);
  uint64_t v25 = qword_10035A630;
  swift_retain();
  if (v25 != -1) {
    swift_once();
  }
  uint64_t v26 = qword_1003ACB58;
  uint64_t v27 = sub_10021EF4C(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
  uint64_t v28 = (void *)swift_allocObject();
  v28[2] = v26;
  v28[3] = v27;
  v28[4] = a1;
  v28[5] = a2;
  v28[6] = a3;
  v28[7] = v4;
  swift_retain();
  sub_100255A24((uint64_t)v10, (uint64_t)&unk_10036EC68, (uint64_t)v28);
  return swift_release();
}

uint64_t sub_100218F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  v7[13] = sub_10000A38C((uint64_t *)&unk_10035E840);
  v7[14] = swift_task_alloc();
  v7[15] = type metadata accessor for ExperienceEvent(0);
  v7[16] = swift_task_alloc();
  v7[17] = type metadata accessor for TransferEvent();
  v7[18] = swift_task_alloc();
  if (qword_10035A630 != -1) {
    swift_once();
  }
  type metadata accessor for WorkActor();
  sub_10021EF4C(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v7[19] = v9;
  v7[20] = v8;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_10021911C, v9, v8);
}

uint64_t sub_10021911C()
{
  uint64_t v1 = sub_10003E5A8();
  *(void *)(v0 + 168) = v1;
  if (v1)
  {
    uint64_t v2 = v1;
    sub_10001F9D4(*(void *)(v0 + 80), *(void *)(v0 + 88));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10021946C;
    uint64_t v4 = *(void *)(v0 + 88);
    uint64_t v5 = *(void *)(v0 + 80);
    return sub_1002199F4(v5, v4, 0, (uint64_t)_swiftEmptyArrayStorage, v2);
  }
  else
  {
    sub_10000A38C(&qword_100369DA0);
    sub_10000B010(&qword_100369DA8, &qword_100369DA0);
    uint64_t v7 = swift_allocError();
    *uint64_t v8 = 0xD000000000000018;
    v8[1] = 0x80000001002C1030;
    swift_willThrow();
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 104);
    uint64_t v12 = *(void *)(v0 + 112);
    swift_retain();
    swift_errorRetain();
    sub_100146144(v7, (void *)(v0 + 16));
    long long v13 = *(_OWORD *)(v0 + 16);
    long long v14 = *(_OWORD *)(v0 + 32);
    long long v15 = *(_OWORD *)(v0 + 48);
    *(void *)(v9 + 48) = *(void *)(v0 + 64);
    *(_OWORD *)(v9 + 16) = v14;
    *(_OWORD *)(v9 + 32) = v15;
    *(_OWORD *)uint64_t v9 = v13;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    uint64_t v16 = UUID.uuidString.getter();
    uint64_t v18 = v17;
    swift_release();
    sub_1002203D0(v9, v10, (uint64_t (*)(void))type metadata accessor for TransferEvent);
    swift_storeEnumTagMultiPayload();
    long long v19 = (uint64_t *)(v12 + *(int *)(v11 + 48));
    uint64_t v20 = (void *)(v12 + *(int *)(v11 + 64));
    sub_1002203D0(v10, v12, type metadata accessor for ExperienceEvent);
    *long long v19 = v16;
    v19[1] = v18;
    *uint64_t v20 = 0xD000000000000027;
    v20[1] = 0x80000001002C5F10;
    swift_bridgeObjectRetain();
    PassthroughSubject.send(_:)();
    sub_10000D78C(v12, (uint64_t *)&unk_10035E840);
    sub_1002204A0(v10, type metadata accessor for ExperienceEvent);
    swift_bridgeObjectRelease();
    swift_release();
    swift_errorRelease();
    sub_1002204A0(*(void *)(v0 + 144), (uint64_t (*)(void))type metadata accessor for TransferEvent);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
}

uint64_t sub_10021946C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  sub_100020414(v2[10], v2[11]);
  uint64_t v3 = v2[20];
  uint64_t v4 = v2[19];
  if (v0) {
    uint64_t v5 = sub_1002197C0;
  }
  else {
    uint64_t v5 = sub_1002195D4;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v5, v4, v3);
}

uint64_t sub_1002195D4()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[16];
  uint64_t v12 = (void *)v0[21];
  uint64_t v4 = v0[13];
  uint64_t v3 = v0[14];
  swift_storeEnumTagMultiPayload();
  swift_retain();
  swift_retain();
  uint64_t v5 = UUID.uuidString.getter();
  uint64_t v7 = v6;
  swift_release();
  sub_1002203D0(v1, v2, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = (uint64_t *)(v3 + *(int *)(v4 + 48));
  uint64_t v9 = (void *)(v3 + *(int *)(v4 + 64));
  sub_1002203D0(v2, v3, type metadata accessor for ExperienceEvent);
  *uint64_t v8 = v5;
  v8[1] = v7;
  *uint64_t v9 = 1701736260;
  v9[1] = 0xE400000000000000;
  swift_bridgeObjectRetain();
  PassthroughSubject.send(_:)();
  sub_10000D78C(v3, (uint64_t *)&unk_10035E840);
  sub_1002204A0(v2, type metadata accessor for ExperienceEvent);
  swift_bridgeObjectRelease();
  swift_release();

  sub_1002204A0(v0[18], (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1002197C0()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  swift_retain();
  swift_errorRetain();
  sub_100146144(v1, (void *)(v0 + 16));
  long long v6 = *(_OWORD *)(v0 + 16);
  long long v7 = *(_OWORD *)(v0 + 32);
  long long v8 = *(_OWORD *)(v0 + 48);
  *(void *)(v2 + 48) = *(void *)(v0 + 64);
  *(_OWORD *)(v2 + 16) = v7;
  *(_OWORD *)(v2 + 32) = v8;
  *(_OWORD *)uint64_t v2 = v6;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  uint64_t v9 = UUID.uuidString.getter();
  uint64_t v11 = v10;
  swift_release();
  sub_1002203D0(v2, v3, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = (uint64_t *)(v5 + *(int *)(v4 + 48));
  uint64_t v13 = (void *)(v5 + *(int *)(v4 + 64));
  sub_1002203D0(v3, v5, type metadata accessor for ExperienceEvent);
  *uint64_t v12 = v9;
  v12[1] = v11;
  *uint64_t v13 = 0xD000000000000027;
  v13[1] = 0x80000001002C5F10;
  swift_bridgeObjectRetain();
  PassthroughSubject.send(_:)();
  sub_10000D78C(v5, (uint64_t *)&unk_10035E840);
  sub_1002204A0(v3, type metadata accessor for ExperienceEvent);
  swift_bridgeObjectRelease();
  swift_release();
  swift_errorRelease();
  sub_1002204A0(*(void *)(v0 + 144), (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_1002199F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[19] = a5;
  v6[20] = v5;
  v6[17] = a3;
  v6[18] = a4;
  v6[15] = a1;
  v6[16] = a2;
  uint64_t v7 = type metadata accessor for OSSignpostID();
  v6[21] = v7;
  v6[22] = *(void *)(v7 - 8);
  v6[23] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_100219ABC, 0, 0);
}

uint64_t sub_100219ABC()
{
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  long long v25 = *(_OWORD *)(v0 + 120);
  *(void *)(v0 + 88) = 0;
  *(void *)(v0 + 96) = 0xE000000000000000;
  v3._countAndFlagsBits = 0xD00000000000001ELL;
  v3._object = (void *)0x80000001002C5EB0;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  *(_OWORD *)(v0 + 56) = v25;
  *(void *)(v0 + 72) = v2;
  *(void *)(v0 + 80) = v1;
  _print_unlocked<A, B>(_:_:)();
  id v5 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 ulog:40 message:v6];

  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v7 = (void *)sub_100125088()[4];
  *(void *)(v0 + 192) = v7;
  id v8 = v7;
  swift_release();
  swift_release();
  if (v7)
  {
    if (qword_10035A528 != -1) {
      swift_once();
    }
    uint64_t v9 = *(void *)(v0 + 128);
    id v10 = (id)qword_1003AC758;
    OSSignpostID.init(log:)();
    if (v9)
    {
      char v11 = 18;
    }
    else
    {
      static os_signpost_type_t.begin.getter();
      id v15 = v10;
      os_signpost(_:dso:log:name:signpostID:_:_:)();

      char v11 = 13;
    }
    *(unsigned char *)(v0 + 224) = v11;
    uint64_t v16 = *(void *)(v0 + 144);
    uint64_t v17 = *(void *)(v0 + 152);
    unint64_t v19 = *(void *)(v0 + 128);
    uint64_t v18 = *(void *)(v0 + 136);
    uint64_t v20 = *(void *)(v0 + 120);
    *(void *)(v0 + 40) = &type metadata for LaunchAppRequest;
    *(void *)(v0 + 48) = &off_100331810;
    Swift::String v21 = (void *)swift_allocObject();
    *(void *)(v0 + 16) = v21;
    v21[2] = v20;
    v21[3] = v19;
    v21[4] = v18;
    v21[5] = v16;
    sub_10001F9D4(v20, v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v22;
    v22[2] = v8;
    v22[3] = v0 + 16;
    v22[4] = v17;
    NSString v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v23;
    uint64_t v24 = sub_10000A38C(&qword_10035F8A8);
    *NSString v23 = v0;
    v23[1] = sub_100219EC8;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 104, 0, 0, 0xD000000000000012, 0x80000001002B5950, sub_100076984, v22, v24);
  }
  else
  {
    sub_10000A38C(&qword_10036EC50);
    sub_10000B010(&qword_10036EC58, &qword_10036EC50);
    swift_allocError();
    *uint64_t v12 = 0xD000000000000016;
    v12[1] = 0x80000001002C5ED0;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

uint64_t sub_100219EC8()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10021A14C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100219FE4;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_100219FE4()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000CC5C(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 192);
    (*(void (**)(void, void))(*(void *)(v0 + 176) + 8))(*(void *)(v0 + 184), *(void *)(v0 + 168));
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 184);
    uint64_t v4 = *(void **)(v0 + 192);
    uint64_t v5 = *(void *)(v0 + 168);
    uint64_t v6 = *(void *)(v0 + 176);
    char v7 = *(unsigned char *)(v0 + 224);
    static os_signpost_type_t.end.getter();
    id v8 = (void *)qword_1003AC758;
    sub_1000B6EDC(v7);
    id v9 = v8;
    os_signpost(_:dso:log:name:signpostID:_:_:)();

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  }
  swift_task_dealloc();
  id v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10021A14C()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_task_dealloc();
  sub_10000CC5C(v0 + 16);
  if (!v1)
  {
    uint64_t v2 = *(unsigned __int8 *)(v0 + 224);
    static os_signpost_type_t.end.getter();
    uint64_t v3 = (void *)qword_1003AC758;
    sub_1000B6EDC(v2);
    id v4 = v3;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
  }
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = *(void **)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v8 = *(void *)(v0 + 176);
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v5, v7);
  swift_task_dealloc();
  id v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10021A290(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v31 = a5;
  uint64_t v9 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v33 = 0xD000000000000037;
  unint64_t v34 = 0x80000001002C5C80;
  v32._countAndFlagsBits = 60;
  v32._object = (void *)0xE100000000000000;
  swift_retain();
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 32;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  uint64_t v14 = *(void *)(a1 + 24);
  swift_retain();
  uint64_t v15 = sub_1001F7514();
  uint64_t v17 = v16;
  swift_release();
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 62;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  swift_release();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  id v20 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v20 ulog:40 message:v21];

  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(v14 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__executedThisSession);
  uint64_t v23 = v30;
  *(unsigned char *)(v22 + 24) = 1;
  swift_retain();
  sub_100104B88();
  LOBYTE(v33) = *(unsigned char *)(v22 + 24);
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_release();
  uint64_t v24 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v11, 1, 1, v24);
  swift_retain();
  sub_1000790E8(a2, a3, a4);
  uint64_t v25 = qword_10035A630;
  swift_retain();
  if (v25 != -1) {
    swift_once();
  }
  uint64_t v26 = qword_1003ACB58;
  uint64_t v27 = sub_10021EF4C(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v26;
  *(void *)(v28 + 24) = v27;
  *(void *)(v28 + 32) = a2;
  *(void *)(v28 + 40) = a3;
  *(void *)(v28 + 48) = a4;
  *(void *)(v28 + 56) = a1;
  *(void *)(v28 + 64) = v23;
  *(unsigned char *)(v28 + 72) = v31 & 1;
  swift_retain();
  sub_100255A24((uint64_t)v11, (uint64_t)&unk_10036EC08, v28);
  return swift_release();
}

uint64_t sub_10021A61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 168) = v13;
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 48) = a8;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 56) = sub_10000A38C((uint64_t *)&unk_10035E840);
  *(void *)(v8 + 64) = swift_task_alloc();
  *(void *)(v8 + 72) = type metadata accessor for ExperienceEvent(0);
  *(void *)(v8 + 80) = swift_task_alloc();
  *(void *)(v8 + 88) = type metadata accessor for TransferEvent();
  *(void *)(v8 + 96) = swift_task_alloc();
  if (qword_10035A630 != -1) {
    swift_once();
  }
  type metadata accessor for WorkActor();
  sub_10021EF4C(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v8 + 104) = v10;
  *(void *)(v8 + 112) = v9;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_10021A7B4, v10, v9);
}

uint64_t sub_10021A7B4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1 == 1)
  {
    uint64_t v2 = sub_10003CF3C();
    if (v4 == 1)
    {
      sub_10000A38C(&qword_10036EC10);
      sub_10000B010(&qword_10036EC18, &qword_10036EC10);
      uint64_t v5 = swift_allocError();
      *uint64_t v6 = 0xD000000000000018;
      v6[1] = 0x80000001002C5CC0;
      swift_willThrow();
      uint64_t v7 = *(uint64_t **)(v0 + 96);
      uint64_t v8 = *(void *)(v0 + 80);
      uint64_t v10 = *(void *)(v0 + 56);
      uint64_t v9 = *(void *)(v0 + 64);
      uint64_t *v7 = v5;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      swift_errorRetain();
      swift_retain();
      uint64_t v30 = UUID.uuidString.getter();
      uint64_t v12 = v11;
      swift_release();
      sub_1002203D0((uint64_t)v7, v8, (uint64_t (*)(void))type metadata accessor for TransferEvent);
      swift_storeEnumTagMultiPayload();
      char v13 = (uint64_t *)(v9 + *(int *)(v10 + 48));
      uint64_t v14 = (void *)(v9 + *(int *)(v10 + 64));
      sub_1002203D0(v8, v9, type metadata accessor for ExperienceEvent);
      *char v13 = v30;
      v13[1] = v12;
      void *v14 = 0xD000000000000025;
      v14[1] = 0x80000001002C5CE0;
      swift_bridgeObjectRetain();
      PassthroughSubject.send(_:)();
      sub_10000D78C(v9, (uint64_t *)&unk_10035E840);
      sub_1002204A0(v8, type metadata accessor for ExperienceEvent);
      swift_release();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      sub_1002204A0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for TransferEvent);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
      return v15();
    }
    Swift::String v19 = v2;
    char v20 = v3;
    uint64_t v21 = v4;
    uint64_t v18 = *(void *)(v0 + 24);
    uint64_t v1 = *(void *)(v0 + 32);
    uint64_t v17 = *(char **)(v0 + 16);
  }
  else
  {
    uint64_t v17 = *(char **)(v0 + 16);
    uint64_t v18 = *(void *)(v0 + 24);
    Swift::String v19 = v17;
    char v20 = v18;
    uint64_t v21 = *(void *)(v0 + 32);
  }
  *(void *)(v0 + 120) = v19;
  *(void *)(v0 + 128) = v21;
  sub_1000790E8(v17, v18, v1);
  if (v20)
  {
    uint64_t v26 = v19;
    uint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_10021ACD8;
    char v28 = *(unsigned char *)(v0 + 168);
    uint64_t v29 = *(void *)(v0 + 40);
    return sub_10021C070(v29, (uint64_t)v26, v28);
  }
  else
  {
    uint64_t v22 = v19;
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_10021AB9C;
    char v24 = *(unsigned char *)(v0 + 168);
    uint64_t v25 = *(void *)(v0 + 40);
    return sub_10021B2B4(v25, (uint64_t)v22, v24);
  }
}

uint64_t sub_10021AB9C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 112);
  uint64_t v4 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v5 = sub_10021AE9C;
  }
  else {
    uint64_t v5 = sub_10021AE14;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v5, v4, v3);
}

uint64_t sub_10021ACD8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 112);
  uint64_t v4 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v5 = sub_10021B0A8;
  }
  else {
    uint64_t v5 = sub_1002206C0;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v5, v4, v3);
}

uint64_t sub_10021AE14()
{
  uint64_t v1 = *(void **)(v0 + 120);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10021AE9C()
{
  uint64_t v1 = (void *)v0[15];
  swift_release();

  uint64_t v2 = (void *)v0[12];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  *uint64_t v2 = v0[18];
  swift_storeEnumTagMultiPayload();
  swift_retain();
  swift_errorRetain();
  swift_retain();
  uint64_t v6 = UUID.uuidString.getter();
  uint64_t v8 = v7;
  swift_release();
  sub_1002203D0((uint64_t)v2, v3, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = (uint64_t *)(v5 + *(int *)(v4 + 48));
  uint64_t v10 = (void *)(v5 + *(int *)(v4 + 64));
  sub_1002203D0(v3, v5, type metadata accessor for ExperienceEvent);
  *uint64_t v9 = v6;
  v9[1] = v8;
  *uint64_t v10 = 0xD000000000000025;
  v10[1] = 0x80000001002C5CE0;
  swift_bridgeObjectRetain();
  PassthroughSubject.send(_:)();
  sub_10000D78C(v5, (uint64_t *)&unk_10035E840);
  sub_1002204A0(v3, type metadata accessor for ExperienceEvent);
  swift_bridgeObjectRelease();
  swift_release();
  swift_errorRelease();
  sub_1002204A0((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10021B0A8()
{
  uint64_t v1 = (void *)v0[15];
  swift_release();

  uint64_t v2 = (void *)v0[12];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  *uint64_t v2 = v0[20];
  swift_storeEnumTagMultiPayload();
  swift_retain();
  swift_errorRetain();
  swift_retain();
  uint64_t v6 = UUID.uuidString.getter();
  uint64_t v8 = v7;
  swift_release();
  sub_1002203D0((uint64_t)v2, v3, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = (uint64_t *)(v5 + *(int *)(v4 + 48));
  uint64_t v10 = (void *)(v5 + *(int *)(v4 + 64));
  sub_1002203D0(v3, v5, type metadata accessor for ExperienceEvent);
  *uint64_t v9 = v6;
  v9[1] = v8;
  *uint64_t v10 = 0xD000000000000025;
  v10[1] = 0x80000001002C5CE0;
  swift_bridgeObjectRetain();
  PassthroughSubject.send(_:)();
  sub_10000D78C(v5, (uint64_t *)&unk_10035E840);
  sub_1002204A0(v3, type metadata accessor for ExperienceEvent);
  swift_bridgeObjectRelease();
  swift_release();
  swift_errorRelease();
  sub_1002204A0((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10021B2B4(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 280) = a2;
  *(void *)(v4 + 288) = v3;
  *(unsigned char *)(v4 + 161) = a3;
  *(void *)(v4 + 272) = a1;
  uint64_t v5 = type metadata accessor for OSSignpostID();
  *(void *)(v4 + 296) = v5;
  *(void *)(v4 + 304) = *(void *)(v5 - 8);
  *(void *)(v4 + 312) = swift_task_alloc();
  uint64_t v6 = sub_10000A38C(&qword_10036EC30);
  *(void *)(v4 + 320) = v6;
  *(void *)(v4 + 328) = *(void *)(v6 - 8);
  *(void *)(v4 + 336) = swift_task_alloc();
  if (qword_10035A630 != -1) {
    swift_once();
  }
  type metadata accessor for WorkActor();
  sub_10021EF4C(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_10021B468, v8, v7);
}

uint64_t sub_10021B468()
{
  uint64_t v1 = *(void *)(v0 + 272);
  swift_retain();
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 32;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  uint64_t v4 = *(void *)(v1 + 24);
  swift_retain();
  uint64_t v5 = sub_1001F7514();
  uint64_t v7 = v6;
  swift_release();
  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 62;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  swift_release();
  v10._countAndFlagsBits = 60;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  id v11 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:40 message:v12];
  swift_bridgeObjectRelease();

  uint64_t v13 = *(void **)(*(void *)(v4 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__mediaRemoteDisplayContext) + 24);
  if (!v13)
  {
    sub_10021F0E8();
    swift_allocError();
    *(void *)uint64_t v42 = 0xD00000000000001CLL;
    *(void *)(v42 + 8) = 0x80000001002C5D50;
    *(unsigned char *)(v42 + 16) = 1;
    swift_willThrow();
LABEL_11:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_12;
  }
  id v14 = v13;
  id v15 = [v14 selectedDeviceState];
  if (!v15)
  {
    id v15 = [v14 proxDeviceState];
    if (!v15)
    {
      sub_10021F0E8();
      swift_allocError();
      *(void *)uint64_t v45 = 0xD000000000000020;
      *(void *)(v45 + 8) = 0x80000001002C5D70;
      *(unsigned char *)(v45 + 16) = 1;
      swift_willThrow();

      goto LABEL_11;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v16 = sub_100098724();
  uint64_t v18 = v17;
  swift_release();
  if (!v18)
  {
    sub_10021F0E8();
    swift_allocError();
    *(_OWORD *)uint64_t v43 = xmmword_1002A9200;
    *(unsigned char *)(v43 + 16) = 1;
    swift_willThrow();

    goto LABEL_11;
  }
  uint64_t v50 = *(void *)(v0 + 336);
  uint64_t v53 = *(void *)(v0 + 328);
  uint64_t v52 = *(void *)(v0 + 320);
  char v56 = *(unsigned char *)(v0 + 161);
  uint64_t v19 = *(void *)(v0 + 288);
  char v54 = *(void **)(v0 + 280);
  uint64_t v51 = *(void *)(v0 + 272);
  swift_retain();
  id v49 = [v14 interactionDirection];
  swift_retain();
  uint64_t v20 = UUID.uuidString.getter();
  uint64_t v48 = v21;
  swift_release();
  *(void *)(v0 + 128) = v16;
  *(void *)(v0 + 136) = v18;
  *(void *)(v0 + 144) = v15;
  *(void *)(v0 + 152) = v13;
  *(unsigned char *)(v0 + 160) = 1;
  sub_10000A38C(&qword_10035B578);
  uint64_t v22 = swift_allocObject();
  id v23 = v14;
  swift_bridgeObjectRetain();
  uint64_t v57 = v16;
  id v24 = v15;
  id v25 = v54;
  uint64_t v26 = sub_10021FC24(v25, v56, v4, (uint64_t)v49, v20, v48, v0 + 128, v22);

  swift_release();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v58 = *(void *)(v19 + 32);
  *(void *)(v19 + 32) = 0x8000000000000000;
  sub_100265EAC(v26, v57, v18, isUniquelyReferenced_nonNull_native);
  *(void *)(v19 + 32) = v58;
  uint64_t v55 = (void *)v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_retain();
  sub_1001228F8(v26);
  swift_release();
  uint64_t v28 = *(void *)(v4 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__transfer);
  *(void *)(v28 + 24) = v26;
  swift_retain_n();
  swift_retain();
  swift_release();
  sub_100104C18();
  *(void *)(v0 + 248) = *(void *)(v28 + 24);
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_release_n();
  swift_release();
  swift_release();
  swift_retain();
  *(void *)(v0 + 264) = sub_100104EA4();
  sub_10000A38C(&qword_10035F3C0);
  sub_10000B010(&qword_10035F3C8, &qword_10035F3C0);
  uint64_t v29 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
  *(void *)(v0 + 240) = v29;
  sub_10000A38C(&qword_10035F3D0);
  sub_10000B010(&qword_10035F3D8, &qword_10035F3D0);
  Publisher.filter(_:)();
  swift_release();
  uint64_t v30 = swift_allocObject();
  swift_weakInit();
  uint64_t v31 = (void *)swift_allocObject();
  _OWORD v31[2] = v30;
  v31[3] = v26;
  v31[4] = v51;
  sub_10000B010(&qword_10036EC40, &qword_10036EC30);
  swift_retain();
  swift_retain();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v50, v52);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  sub_100116F18();
  OSSignpostID.init(_:)();
  static os_signpost_type_t.begin.getter();
  if (qword_10035A528 != -1) {
    swift_once();
  }
  uint64_t v33 = *(void *)(v0 + 304);
  uint64_t v32 = *(void *)(v0 + 312);
  uint64_t v34 = *(void *)(v0 + 296);
  id v35 = (id)qword_1003AC758;
  LOBYTE(v47) = 2;
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v36 = sub_1001F7514();
  uint64_t v38 = v37;
  swift_release();
  v39._countAndFlagsBits = v36;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  id v40 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v40 ulog:40 message:v41 count:19 data:v47 emptyArrayStorage:_swiftEmptyArrayStorage];
  swift_bridgeObjectRelease();

  swift_retain();
  sub_1000C7004(v57, v55);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
LABEL_12:
  return v44();
}

uint64_t sub_10021C070(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 288) = a2;
  *(void *)(v4 + 296) = v3;
  *(unsigned char *)(v4 + 217) = a3;
  *(void *)(v4 + 280) = a1;
  *(void *)(v4 + 304) = *v3;
  if (qword_10035A630 != -1) {
    swift_once();
  }
  type metadata accessor for WorkActor();
  sub_10021EF4C(&qword_100369D70, (void (*)(uint64_t))type metadata accessor for WorkActor);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v4 + 312) = v6;
  *(void *)(v4 + 320) = v5;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_10021C190, v6, v5);
}

uint64_t sub_10021C190()
{
  uint64_t v1 = *(void *)(v0 + 280);
  swift_retain();
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 32;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  uint64_t v4 = *(void *)(v1 + 24);
  swift_retain();
  uint64_t v5 = sub_1001F7514();
  uint64_t v7 = v6;
  swift_release();
  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 62;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  swift_release();
  v10._countAndFlagsBits = 60;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  id v11 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:40 message:v12];
  swift_bridgeObjectRelease();

  if (qword_10035A5F0 != -1) {
    swift_once();
  }
  uint64_t v13 = *(void **)(v0 + 288);
  id v14 = (id)qword_1003ACA78;
  id v15 = sub_1001C396C(v13);
  char v17 = v16;
  LODWORD(v13) = ~v16;

  *(void *)(v0 + 328) = v15;
  *(unsigned char *)(v0 + 218) = v17;
  if (v13)
  {
    uint64_t v50 = v15;
    char v49 = v17;
    if (v17)
    {
      id v26 = [v15 presentationContext];
      unint64_t v27 = (unint64_t)[v26 mode];

      sub_100038A4C(v15, v17);
      if (v27 > 2) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = qword_1002A93A0[v27];
      }
      uint64_t v48 = v28;
      id v29 = [*(id *)(v0 + 288) bundleIdentifier];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = v30;
    }
    else
    {
      sub_100038A38(v15, v17);
      uint64_t v48 = sub_1001CA6B4(v15, 0);
      sub_100038A4C(v15, v17);
      id v18 = v15;
      uint64_t v19 = sub_1001C7FE0();
      char v20 = v17;
      uint64_t v22 = v21;
      sub_100038A4C(v15, v20);
    }
    uint64_t v32 = *(void **)(v0 + 288);
    uint64_t v31 = *(void *)(v0 + 296);
    char v33 = *(unsigned char *)(v0 + 217);
    swift_retain();
    swift_retain();
    uint64_t v34 = UUID.uuidString.getter();
    uint64_t v36 = v35;
    swift_release();
    *(void *)(v0 + 184) = v19;
    *(void *)(v0 + 192) = v22;
    *(void *)(v0 + 200) = 0;
    *(void *)(v0 + 208) = 0;
    *(unsigned char *)(v0 + 216) = 0;
    sub_10000A38C(&qword_10035B578);
    uint64_t v37 = swift_allocObject();
    id v38 = v32;
    uint64_t v39 = sub_10021FC24(v38, v33, v4, v48, v34, v36, v0 + 184, v37);
    *(void *)(v0 + 336) = v39;

    swift_release();
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v40 = UUID.uuidString.getter();
    uint64_t v42 = v41;
    swift_release();
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v51 = *(void *)(v31 + 24);
    *(void *)(v31 + 24) = 0x8000000000000000;
    sub_100265EAC(v39, v40, v42, isUniquelyReferenced_nonNull_native);
    *(void *)(v31 + 24) = v51;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_retain();
    sub_1001228F8(v39);
    swift_release();
    uint64_t v44 = *(void *)(v4 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__transfer);
    *(void *)(v44 + 24) = v39;
    swift_retain_n();
    swift_retain();
    swift_release();
    sub_100104C18();
    *(void *)(v0 + 264) = *(void *)(v44 + 24);
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
    uint64_t v45 = (void *)qword_1003ACA78;
    *(void *)(v0 + 344) = qword_1003ACA78;
    sub_100038A38(v50, v49);
    if (v49)
    {
      v45;
      uint64_t v47 = (void *)swift_task_alloc();
      *(void *)(v0 + 368) = v47;
      *uint64_t v47 = v0;
      v47[1] = sub_10021C954;
      return sub_1002064BC(v4, (uint64_t)v50);
    }
    else
    {
      v45;
      uint64_t v46 = (void *)swift_task_alloc();
      *(void *)(v0 + 352) = v46;
      *uint64_t v46 = v0;
      v46[1] = sub_10021C838;
      return sub_1002052A4(v4, (uint64_t)v50);
    }
  }
  else
  {
    sub_10021F0E8();
    swift_allocError();
    *(_OWORD *)uint64_t v23 = xmmword_1002A9210;
    *(unsigned char *)(v23 + 16) = 0;
    swift_willThrow();
    id v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
}

uint64_t sub_10021C838()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 360) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 312);
    uint64_t v4 = *(void *)(v2 + 320);
    uint64_t v5 = sub_10021CC34;
  }
  else
  {

    uint64_t v3 = *(void *)(v2 + 312);
    uint64_t v4 = *(void *)(v2 + 320);
    uint64_t v5 = sub_10021CA70;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v5, v3, v4);
}

uint64_t sub_10021C954()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 312);
    uint64_t v4 = *(void *)(v2 + 320);
    uint64_t v5 = sub_10021CEC8;
  }
  else
  {

    uint64_t v3 = *(void *)(v2 + 312);
    uint64_t v4 = *(void *)(v2 + 320);
    uint64_t v5 = sub_1002206BC;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v5, v3, v4);
}

uint64_t sub_10021CA70()
{
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 304);
  sub_100038A4C(*(id *)(v0 + 328), *(unsigned char *)(v0 + 218));
  sub_10016ABE4(0xD000000000000016, (void *)0x80000001002C5E90, 0, v2, (uint64_t)&off_100333080);
  uint64_t v3 = *(void *)(v1 + qword_100370E40);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  unint64_t v6 = *(void *)(v3 + 40);
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 2;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  swift_retain();
  sub_10003A3F8(v4, v5, v6);
  sub_100104EA4();
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  unint64_t v9 = *(void *)(v3 + 40);
  uint64_t v10 = *(void *)(v3 + 48);
  uint64_t v11 = *(void *)(v3 + 56);
  uint64_t v12 = *(void *)(v3 + 64);
  uint64_t v13 = *(void *)(v3 + 72);
  *(void *)(v0 + 16) = v7;
  *(void *)(v0 + 24) = v8;
  *(void *)(v0 + 32) = v9;
  *(void *)(v0 + 40) = v10;
  *(void *)(v0 + 48) = v11;
  *(void *)(v0 + 56) = v12;
  *(void *)(v0 + 64) = v13;
  sub_10003A3A4(v7, v8, v9);
  CurrentValueSubject.send(_:)();
  swift_release();
  sub_10003A3F8(v7, v8, v9);
  swift_release();
  id v14 = *(void **)(v0 + 328);
  LOBYTE(v8) = *(unsigned char *)(v0 + 218);
  sub_10021E220(*(void *)(v0 + 336));
  swift_release();
  sub_100038A4C(v14, v8);
  id v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_10021CC34()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v3 = *(void **)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 304);
  char v5 = *(unsigned char *)(v0 + 218);

  sub_100038A4C(v3, v5);
  _StringGuts.grow(_:)(36);
  *(void *)(v0 + 248) = 0;
  *(void *)(v0 + 256) = 0xE000000000000000;
  v6._object = (void *)0x80000001002C5E60;
  v6._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v6);
  *(void *)(v0 + 272) = v1;
  sub_10000A38C((uint64_t *)&unk_100365D60);
  _print_unlocked<A, B>(_:_:)();
  sub_10016AE10(90, *(void *)(v0 + 248), *(void **)(v0 + 256), 0, v4, (uint64_t)&off_100333080);
  swift_bridgeObjectRelease();
  swift_errorRetain();
  sub_100146144(v1, (void *)(v0 + 72));
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 96);
  uint64_t v9 = *(void *)(v0 + 104);
  uint64_t v10 = *(void *)(v2 + qword_100370E40);
  uint64_t v11 = *(void *)(v10 + 24);
  uint64_t v12 = *(void *)(v10 + 32);
  unint64_t v13 = *(void *)(v10 + 40);
  long long v14 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(v0 + 72);
  *(void *)(v10 + 40) = v7;
  *(void *)(v10 + 48) = v8;
  *(void *)(v10 + 56) = v9;
  *(_OWORD *)(v10 + 64) = v14;
  swift_retain();
  sub_10017A994(v0 + 72);
  sub_10003A3F8(v11, v12, v13);
  sub_100104EA4();
  uint64_t v15 = *(void *)(v10 + 24);
  uint64_t v16 = *(void *)(v10 + 32);
  unint64_t v17 = *(void *)(v10 + 40);
  uint64_t v18 = *(void *)(v10 + 48);
  uint64_t v19 = *(void *)(v10 + 56);
  uint64_t v20 = *(void *)(v10 + 64);
  uint64_t v21 = *(void *)(v10 + 72);
  *(void *)(v0 + 128) = v15;
  *(void *)(v0 + 136) = v16;
  *(void *)(v0 + 144) = v17;
  *(void *)(v0 + 152) = v18;
  *(void *)(v0 + 160) = v19;
  *(void *)(v0 + 168) = v20;
  *(void *)(v0 + 176) = v21;
  sub_10003A3A4(v15, v16, v17);
  CurrentValueSubject.send(_:)();
  swift_release();
  sub_10003A3F8(v15, v16, v17);
  sub_10017A9E0(v0 + 72);
  swift_release();
  swift_errorRelease();
  uint64_t v22 = *(void **)(v0 + 328);
  LOBYTE(v10) = *(unsigned char *)(v0 + 218);
  sub_10021E220(*(void *)(v0 + 336));
  swift_release();
  sub_100038A4C(v22, v10);
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_10021CEC8()
{
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v3 = *(void **)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 304);
  char v5 = *(unsigned char *)(v0 + 218);

  sub_100038A4C(v3, v5);
  _StringGuts.grow(_:)(36);
  *(void *)(v0 + 248) = 0;
  *(void *)(v0 + 256) = 0xE000000000000000;
  v6._object = (void *)0x80000001002C5E60;
  v6._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v6);
  *(void *)(v0 + 272) = v1;
  sub_10000A38C((uint64_t *)&unk_100365D60);
  _print_unlocked<A, B>(_:_:)();
  sub_10016AE10(90, *(void *)(v0 + 248), *(void **)(v0 + 256), 0, v4, (uint64_t)&off_100333080);
  swift_bridgeObjectRelease();
  swift_errorRetain();
  sub_100146144(v1, (void *)(v0 + 72));
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 96);
  uint64_t v9 = *(void *)(v0 + 104);
  uint64_t v10 = *(void *)(v2 + qword_100370E40);
  uint64_t v11 = *(void *)(v10 + 24);
  uint64_t v12 = *(void *)(v10 + 32);
  unint64_t v13 = *(void *)(v10 + 40);
  long long v14 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(v0 + 72);
  *(void *)(v10 + 40) = v7;
  *(void *)(v10 + 48) = v8;
  *(void *)(v10 + 56) = v9;
  *(_OWORD *)(v10 + 64) = v14;
  swift_retain();
  sub_10017A994(v0 + 72);
  sub_10003A3F8(v11, v12, v13);
  sub_100104EA4();
  uint64_t v15 = *(void *)(v10 + 24);
  uint64_t v16 = *(void *)(v10 + 32);
  unint64_t v17 = *(void *)(v10 + 40);
  uint64_t v18 = *(void *)(v10 + 48);
  uint64_t v19 = *(void *)(v10 + 56);
  uint64_t v20 = *(void *)(v10 + 64);
  uint64_t v21 = *(void *)(v10 + 72);
  *(void *)(v0 + 128) = v15;
  *(void *)(v0 + 136) = v16;
  *(void *)(v0 + 144) = v17;
  *(void *)(v0 + 152) = v18;
  *(void *)(v0 + 160) = v19;
  *(void *)(v0 + 168) = v20;
  *(void *)(v0 + 176) = v21;
  sub_10003A3A4(v15, v16, v17);
  CurrentValueSubject.send(_:)();
  swift_release();
  sub_10003A3F8(v15, v16, v17);
  sub_10017A9E0(v0 + 72);
  swift_release();
  swift_errorRelease();
  uint64_t v22 = *(void **)(v0 + 328);
  LOBYTE(v10) = *(unsigned char *)(v0 + 218);
  sub_10021E220(*(void *)(v0 + 336));
  swift_release();
  sub_100038A4C(v22, v10);
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

char *sub_10021D15C(uint64_t a1, uint64_t a2, void *a3)
{
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  swift_retain();
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  uint64_t v8 = *(void *)(a1 + 24);
  swift_retain();
  uint64_t v9 = sub_1001F7514();
  uint64_t v11 = v10;
  swift_release();
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_release();
  v14._countAndFlagsBits = 60;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x6E6F73616572202CLL;
  v15._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v15);
  v16._countAndFlagsBits = a2;
  v16._object = a3;
  String.append(_:)(v16);
  id v17 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 ulog:40 message:v18];

  swift_bridgeObjectRelease();
  uint64_t result = sub_10003CF3C();
  if (v21 != 1)
  {
    uint64_t v22 = result;
    uint64_t v23 = v21;
    if ((v20 & 1) != 0
      || *(void *)(*(void *)(v8 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__mediaRemoteDisplayContext)
                   + 24))
    {
      uint64_t v24 = v20 & 1;
      BOOL v25 = sub_100078AB8(result, v24 != 0, v21, v8);
      id v26 = sub_1001F5EB0();
      if (v25)
      {
        NSString v27 = String._bridgeToObjectiveC()();
        [v26 ulog:40 message:v27];

        swift_retain();
        uint64_t v28 = v22;
        sub_10021A290(a1, v22, v24, v23, 1);

        swift_release();
      }
      else
      {
        NSString v29 = String._bridgeToObjectiveC()();
        [v26 ulog:40 message:v29];
      }
    }
    else
    {
      id v30 = sub_1001F5EB0();
      NSString v31 = String._bridgeToObjectiveC()();
      [v30 ulog:60 message:v31];

      sub_10021D508(a1);
    }
    return (char *)swift_release();
  }
  return result;
}

uint64_t sub_10021D508(uint64_t a1)
{
  uint64_t v64 = *v1;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v66 = *(void *)(v3 - 8);
  uint64_t v67 = v3;
  __chkstk_darwin(v3);
  uint64_t v65 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10035AC20);
  __chkstk_darwin(v5 - 8);
  Swift::String v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036EBE0);
  uint64_t v57 = *(void *)(v8 - 8);
  uint64_t v58 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_10036EBE8);
  uint64_t v61 = *(void *)(v11 - 8);
  uint64_t v62 = v11;
  __chkstk_darwin(v11);
  id v60 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v68 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v54 = v15;
  uint64_t v55 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  id v17 = (char *)&v52 - v16;
  Date.init()();
  uint64_t v70 = 0;
  unint64_t v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  uint64_t v70 = 0xD000000000000036;
  unint64_t v71 = 0x80000001002C5A60;
  v72._countAndFlagsBits = 60;
  v72._object = (void *)0xE100000000000000;
  swift_retain();
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 32;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  uint64_t v20 = *(void *)(a1 + 24);
  swift_retain();
  uint64_t v21 = sub_1001F7514();
  uint64_t v23 = v22;
  swift_release();
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 62;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  uint64_t v59 = a1;
  swift_release();
  String.append(_:)(v72);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x7473656D6974202CLL;
  v26._object = (void *)0xEC0000003D706D61;
  String.append(_:)(v26);
  sub_10021EF4C((unint64_t *)&qword_10036C040, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v69 = v17;
  uint64_t v63 = v13;
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  id v28 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v28 ulog:40 message:v29];

  swift_bridgeObjectRelease();
  uint64_t v53 = v20;
  uint64_t v70 = sub_10003CBBC();
  if (qword_10035A628 != -1) {
    swift_once();
  }
  id v30 = (void *)qword_1003ACB50;
  v72._countAndFlagsBits = qword_1003ACB50;
  uint64_t v31 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v7, 1, 1, v31);
  id v32 = v30;
  sub_10000A38C(&qword_10035E208);
  sub_100019E10(0, (unint64_t *)&qword_10035A680);
  sub_10000B010(&qword_10035E210, &qword_10035E208);
  sub_10003A8C0();
  Publisher.receive<A>(on:options:)();
  sub_10000D78C((uint64_t)v7, &qword_10035AC20);

  swift_release();
  sub_100019E10(0, &qword_10035E258);
  sub_10000B010(&qword_10036EBF0, &qword_10036EBE0);
  char v33 = v60;
  uint64_t v34 = v58;
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v10, v34);
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = v56;
  swift_weakInit();
  uint64_t v37 = v68;
  id v38 = v55;
  uint64_t v39 = v63;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v55, v69, v63);
  unint64_t v40 = (*(unsigned __int8 *)(v37 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  unint64_t v41 = (v54 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = v35;
  (*(void (**)(unint64_t, char *, uint64_t))(v37 + 32))(v42 + v40, v38, v39);
  *(void *)(v42 + v41) = v59;
  *(void *)(v42 + ((v41 + 15) & 0xFFFFFFFFFFFFFFF8)) = v64;
  sub_10000B010(&qword_10036EBF8, &qword_10036EBE8);
  swift_retain();
  uint64_t v43 = v62;
  uint64_t v44 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v33, v43);
  *(void *)(v36 + 56) = v44;
  swift_release();
  uint64_t v45 = v53;
  uint64_t v47 = (uint64_t)v65;
  uint64_t v46 = v66;
  uint64_t v48 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v53 + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice_id, v67);
  swift_beginAccess();
  char v49 = v69;
  if (!*(void *)(*(void *)(v36 + 40) + 16)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  sub_100269DA0(v47);
  if ((v50 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
    sub_100211B48(v45);
    return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v49, v39);
  }
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v49, v39);
}

uint64_t sub_10021DDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v22 - v12;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v15 = result;
    Date.timeIntervalSinceNow.getter();
    double v17 = -v16;
    uint64_t v23 = 0;
    Swift::String v24 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    uint64_t v23 = 0xD000000000000019;
    Swift::String v24 = (void *)0x80000001002C5AE0;
    v18._countAndFlagsBits = sub_100212C30(v17);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._object = (void *)0x80000001002C5B00;
    v19._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v19);
    sub_10016ABE4(v23, v24, 0, a5, (uint64_t)&off_100333080);
    swift_bridgeObjectRelease();
    if (qword_10035A520 != -1) {
      swift_once();
    }
    id v20 = *(id *)(qword_1003AC750 + 776);
    sub_1000FEB94();

    static Date.+ infix(_:_:)();
    Date.init()();
    LOBYTE(v20) = static Date.< infix(_:_:)();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
    v21(v11, v7);
    if (v20) {
      sub_10021D15C(a4, 0xD00000000000002DLL, 0x80000001002C5B60);
    }
    else {
      sub_10016AE10(60, 0xD000000000000034, (void *)0x80000001002C5B20, 0, a5, (uint64_t)&off_100333080);
    }
    v21(v13, v7);
    *(void *)(v15 + 56) = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10021E0E0()
{
  return 24;
}

__n128 sub_10021E0EC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_10021E100()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10021E138(uint64_t *a1)
{
  return sub_10021390C(a1);
}

uint64_t sub_10021E140(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_100213A9C(a1, a2, a3, a4, a5);
}

uint64_t sub_10021E148()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10021E180(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(v1 + 16))(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t sub_10021E1BC(void **a1)
{
  return sub_100213B30(a1);
}

uint64_t sub_10021E1C4(void *a1, uint64_t a2, void *a3)
{
  return sub_100213B90(a1, a2, a3);
}

uint64_t sub_10021E1CC(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(unsigned char *, void, void))(v1 + 16);
  sub_100045BD0(a1, (uint64_t)v5);
  return v3(v5, *(void *)(a1 + 56), *(void *)(a1 + 64));
}

uint64_t sub_10021E218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100213A44(a1, v2, a2);
}

uint64_t sub_10021E220(uint64_t a1)
{
  swift_retain();
  uint64_t v2 = sub_10021E820();
  uint64_t v4 = v3;
  swift_release();
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  id v6 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 ulog:40 message:v7];
  swift_bridgeObjectRelease();

  swift_retain();
  sub_1002129C8(a1, &qword_100368040, &qword_100368048, (uint64_t (*)(char *))sub_100123DE0);
  swift_release();
  swift_release();
  uint64_t v8 = (uint64_t *)(a1 + qword_1003ACBD0);
  if (*(unsigned char *)(a1 + qword_1003ACBD0 + 32) == 1)
  {
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_retain();
    uint64_t v9 = UUID.uuidString.getter();
    uint64_t v10 = v11;
    swift_release();
  }
  swift_beginAccess();
  sub_100130B80(v9, v10);
  swift_endAccess();
  swift_bridgeObjectRelease();
  return swift_release();
}

BOOL sub_10021E3FC(uint64_t a1)
{
  return *(void *)(a1 + 16) > 1uLL;
}

uint64_t sub_10021E40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  NSString v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_10021E220(a3);
    swift_release();
  }
  sub_100116F18();
  OSSignpostID.init(_:)();
  static os_signpost_type_t.end.getter();
  if (qword_10035A528 != -1) {
    swift_once();
  }
  id v8 = (id)qword_1003AC758;
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10021E5D4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  **(void **)(*(void *)(v2 + 64) + 40) = a2;
  id v3 = a2;

  return _swift_continuation_resume(v2);
}

uint64_t sub_10021E628(unint64_t a1)
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  strcpy((char *)v14, "Sending event ");
  HIBYTE(v14[1]) = -18;
  uint64_t v2 = sub_10021EEE8(a1);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x6964654D206F7420;
  v7._object = (void *)0xEF65746F6D655261;
  String.append(_:)(v7);
  id v8 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 ulog:40 message:v9, v14[0], v14[1]];
  swift_bridgeObjectRelease();

  id v10 = objc_allocWithZone((Class)PCProximityEvent);
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v10 initWithType:a1 mediaRemoteID:v11 info:0];

  [v12 setExpectsDisplayContext:(a1 < 0xA) & (0x2FAu >> a1)];
  swift_retain();
  sub_1000C6B74(v12);

  return swift_release();
}

uint64_t sub_10021E820()
{
  _StringGuts.grow(_:)(23);
  v0._countAndFlagsBits = 60;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  UUID.uuidString.getter();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x3D65636976656420;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = sub_1001F7514();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x3D657461747320;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0;
}

uint64_t sub_10021E9B8(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_10021E9F4(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_10021EA2C(uint64_t (*a1)(void))
{
  return a1();
}

unsigned char **sub_10021EA54(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  Swift::String v4 = *result;
  *Swift::String v4 = a4;
  *__n128 result = v4 + 1;
  return result;
}

void sub_10021EA64(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  Swift::String v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  id v8 = *a2;
  if (*a2)
  {
    *id v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

void sub_10021EB1C(uint64_t a1)
{
  if (a1)
  {
    swift_retain();
    UUID.uuidString.getter();
    sub_100089A9C(8);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = 32;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    swift_retain();
    uint64_t v4 = sub_1001F7514();
    Swift::String v6 = v5;
    swift_release();
    v7._countAndFlagsBits = v4;
    v7._object = v6;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 62;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    swift_release();
    uint64_t v9 = 60;
    unint64_t v10 = 0xE100000000000000;
  }
  else
  {
    unint64_t v10 = 0xE300000000000000;
    uint64_t v9 = 7104878;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  id v12 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 ulog:40 message:v13];
  swift_bridgeObjectRelease();

  if (a1)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 24) + OBJC_IVAR____TtC17proximitycontrold13HandoffDevice__executedThisSession)
             + 24) = 0;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100104B88();
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t sub_10021ED44()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10021EE34(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_10021DDFC(a1, v6, v1 + v4, v7, v8);
}

__CFString *sub_10021EEE8(unint64_t a1)
{
  if (a1 > 9)
  {
    uint64_t v1 = @"?";
    uint64_t v2 = @"?";
  }
  else
  {
    uint64_t v1 = *(&off_100333340 + a1);
    uint64_t v2 = *(&off_100333390 + a1);
  }
  uint64_t v3 = v1;

  return v2;
}

uint64_t sub_10021EF4C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10021EF94()
{
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 48) != 1)
  {

    swift_release();
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 73, 7);
}

uint64_t sub_10021EFF8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_10007EB64;
  return sub_10021A61C(a1, v4, v5, v6, v7, v8, v9, v10);
}

unint64_t sub_10021F0E8()
{
  unint64_t result = qword_10036EC38;
  if (!qword_10036EC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036EC38);
  }
  return result;
}

void sub_10021F13C(uint64_t a1)
{
  v1._countAndFlagsBits = sub_10027276C(a1);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  id v2 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 ulog:40 message:v3];
  swift_bridgeObjectRelease();
}

uint64_t sub_10021F200(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = a2 & 1;
  uint64_t v7 = type metadata accessor for LaunchAppRequest.Option();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v75 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v76 = (uint64_t)&v67 - v11;
  uint64_t v12 = sub_10000A38C(&qword_10036C090);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v74 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  char v73 = (char *)&v67 - v15;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v77 = *(void *)(v16 - 8);
  uint64_t v78 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  Swift::String v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  Swift::String v72 = (char *)&v67 - v21;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v67 - v22;
  uint64_t v24 = sub_10000A38C(&qword_10036EC80);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v79 = (uint64_t)&v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v80 = (uint64_t)&v67 - v27;
  unint64_t v82 = 0xD000000000000038;
  unint64_t v83 = 0x80000001002C5F70;
  v28._countAndFlagsBits = sub_100047CE4(a1, v6, a3);
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  id v29 = sub_1001F5EB0();
  swift_bridgeObjectRetain();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 ulog:40 message:v30];
  swift_bridgeObjectRelease();

  if ((a2 & 1) == 0) {
    return 0;
  }
  sub_10000A38C(&qword_1003600B8);
  uint64_t v31 = *(void *)(v8 + 72);
  unint64_t v32 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_10028D430;
  swift_storeEnumTagMultiPayload();
  if (a3) {
    return 0;
  }
  uint64_t v68 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v68(v80, 1, 1, v7);
  id v34 = a1;
  unsigned int v35 = [v34 service];
  id v70 = v34;
  uint64_t v71 = v7;
  uint64_t v69 = v8;
  if (v35 - 2 < 2)
  {
    id v43 = [v34 conversationUUID];
    if (v43)
    {
      uint64_t v44 = v43;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v46 = v77;
      uint64_t v45 = v78;
      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
      uint64_t v48 = v74;
      v47(v74, v19, v78);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v48, 0, 1, v45);
      int v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48))(v48, 1, v45);
      uint64_t v50 = (uint64_t)v48;
      if (v49 != 1)
      {
        uint64_t v37 = v80;
        sub_10000D78C(v80, &qword_10036EC80);
        uint64_t v51 = v72;
        v47(v72, (char *)v50, v45);
        v47((char *)v37, v51, v45);
        uint64_t v52 = v71;
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v50 = (uint64_t)v74;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56))(v74, 1, 1, v78);
    }
    sub_10000D78C(v50, &qword_10036C090);
    uint64_t v37 = v80;
    goto LABEL_19;
  }
  unsigned int v36 = v35;
  if (!v35)
  {
    id v53 = sub_1001F5EB0();
    NSString v54 = String._bridgeToObjectiveC()();
    [v53 ulog:60 message:v54];

    uint64_t v37 = v80;
    goto LABEL_19;
  }
  uint64_t v37 = v80;
  if (v35 != 1)
  {
    unint64_t v82 = 0;
    unint64_t v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v55._countAndFlagsBits = 0xD00000000000001ALL;
    v55._object = (void *)0x80000001002C5FB0;
    String.append(_:)(v55);
    unsigned int v81 = v36;
    type metadata accessor for TUCallService(0);
    _print_unlocked<A, B>(_:_:)();
    id v56 = sub_1001F5EB0();
    swift_bridgeObjectRetain();
    NSString v57 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v56 ulog:60 message:v57];
    swift_bridgeObjectRelease();

    goto LABEL_19;
  }
  id v38 = [v34 callUUID];
  if (v38)
  {
    uint64_t v39 = v38;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v40 = (uint64_t)v73;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v42 = v77;
    uint64_t v41 = v78;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v40, 1, v78) == 1)
    {
      sub_10000D78C(v40, &qword_10036C090);
      goto LABEL_19;
    }
    sub_10000D78C(v37, &qword_10036EC80);
    uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 32);
    v58(v23, v40, v41);
    v58((char *)v37, (uint64_t)v23, v41);
    uint64_t v52 = v71;
LABEL_18:
    swift_storeEnumTagMultiPayload();
    v68(v37, 0, 1, v52);
  }
LABEL_19:
  uint64_t v59 = v79;
  sub_10000D728(v37, v79, &qword_10036EC80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v59, 1, v71) == 1)
  {
    sub_10000D78C(v59, &qword_10036EC80);
    unint64_t v82 = 0;
    unint64_t v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    id v60 = sub_1001F5EB0();
    NSString v61 = String._bridgeToObjectiveC()();
    [v60 ulog:60 message:v61];
  }
  else
  {
    uint64_t v62 = v76;
    sub_100220438(v59, v76, (uint64_t (*)(void))type metadata accessor for LaunchAppRequest.Option);
    uint64_t v63 = v75;
    sub_1002203D0(v62, v75, (uint64_t (*)(void))type metadata accessor for LaunchAppRequest.Option);
    unint64_t v65 = *(void *)(v33 + 16);
    unint64_t v64 = *(void *)(v33 + 24);
    if (v65 >= v64 >> 1) {
      unint64_t v33 = sub_100089A68(v64 > 1, v65 + 1, 1, v33);
    }
    *(void *)(v33 + 16) = v65 + 1;
    sub_100220438(v63, v33 + v32 + v65 * v31, (uint64_t (*)(void))type metadata accessor for LaunchAppRequest.Option);

    sub_1002204A0(v62, (uint64_t (*)(void))type metadata accessor for LaunchAppRequest.Option);
  }
  sub_10000D78C(v37, &qword_10036EC80);
  return 0;
}

uint64_t sub_10021FADC()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10021FB24(uint64_t a1)
{
  return sub_10021E40C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10021FB30(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10021FB8C(uint64_t a1)
{
  return a1;
}

id sub_10021FBC4(uint64_t a1, uint64_t a2, void *a3, void *a4, char a5)
{
  if (a5)
  {
    swift_bridgeObjectRetain();
    id v7 = a3;
    return a4;
  }
  else
  {
    return (id)swift_bridgeObjectRetain();
  }
}

uint64_t sub_10021FC24(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  UUID.init()();
  uint64_t v16 = qword_100370E40;
  sub_10000A38C(&qword_10036EC48);
  uint64_t v17 = (_OWORD *)swift_allocObject();
  v17[1] = 0u;
  v17[2] = 0u;
  *(void *)(a8 + v16) = v17;
  *(void *)(a8 + qword_100370E48) = 0;
  *(void *)(a8 + qword_1003ACBA0) = a1;
  v17[3] = 0u;
  v17[4] = 0u;
  *(unsigned char *)(a8 + qword_1003ACBA8) = a2;
  *(void *)(a8 + qword_1003ACBB8) = a3;
  *(void *)(a8 + qword_1003ACBC0) = a4;
  uint64_t v18 = (void *)(a8 + qword_1003ACBC8);
  *uint64_t v18 = a5;
  v18[1] = a6;
  sub_10021FB30(a7, a8 + qword_1003ACBD0);
  sub_10021FB30(a7, (uint64_t)&v33);
  if (v36)
  {
    Swift::String v19 = v35;
    id v20 = a1;
    swift_retain();
    sub_10021FB8C(a7);
    id v21 = v19;
    char v22 = sub_100088744();

    *(unsigned char *)(a8 + qword_1003ACBB0) = v22;
  }
  else
  {
    uint64_t v23 = v34;
    if (v34)
    {
      uint64_t v24 = v33;
      if (v33 == 0xD000000000000015 && v34 == 0x80000001002C37E0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        char v25 = 2;
      }
      else if (v24 == 0xD000000000000012 && v23 == 0x80000001002C37C0)
      {
        char v25 = 0;
      }
      else if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        char v25 = 0;
      }
      else
      {
        char v25 = 4;
      }
    }
    else
    {
      char v25 = 6;
    }
    *(unsigned char *)(a8 + qword_1003ACBB0) = v25;
    id v26 = a1;
    swift_retain();
    sub_10021FB8C(a7);
  }
  sub_10000C604();
  id v27 = objc_allocWithZone((Class)CULogHandle);
  NSString v28 = String._bridgeToObjectiveC()();
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v30 = [v27 initWithSubsystem:v28 category:v29];

  NSString v31 = String._bridgeToObjectiveC()();
  [v30 ulog:40 message:v31];

  return a8;
}

uint64_t sub_10021FF24()
{
  if (*(void *)(v0 + 24) >= 5uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10021FF74()
{
  uint64_t v1 = sub_10000A38C(&qword_100364278);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100220008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000A38C(&qword_100364278);

  return sub_1000C77C8(a1, a2, a3);
}

uint64_t sub_100220094()
{
  swift_unknownObjectRelease();
  swift_release();
  if (*(void *)(v0 + 48) >= 5uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1002200EC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10007EB64;
  return sub_100218F94(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1002201C0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100220218(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  char v9 = *(unsigned char *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_10007EB64;
  return sub_1002180CC(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100220300()
{
  return sub_100220550(56);
}

uint64_t sub_100220308(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  char v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *char v9 = v2;
  v9[1] = sub_10007EB64;
  return sub_100216038(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1002203D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100220438(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002204A0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100220500(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100220548()
{
  return sub_100220550(48);
}

uint64_t sub_100220550(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1002205A4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100076840;
  return sub_100214F68(a1, v4, v5, v7, v6);
}

void *sub_100220664(void *a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

ValueMetadata *type metadata accessor for TransferManagerError()
{
  return &type metadata for TransferManagerError;
}

char *sub_1002206C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v26.receiver = (id)0x656B203A74696E49;
  v26.super_class = (Class)0xEA00000000003D79;
  uint64_t v12 = v6;
  v13._countAndFlagsBits = a3;
  v13._object = a4;
  String.append(_:)(v13);
  sub_10016ABE4(0x656B203A74696E49, (void *)0xEA00000000003D79, 0, (uint64_t)ObjectType, (uint64_t)&off_100323A18);
  swift_bridgeObjectRelease();
  id v14 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [v14 initWithSuiteName:v15];

  if (v16)
  {
    *(void *)&v12[qword_1003603A8] = v16;
    uint64_t v17 = (uint64_t *)&v12[qword_1003603B0];
    *uint64_t v17 = a3;
    v17[1] = (uint64_t)a4;
    uint64_t v18 = &v12[qword_1003603B8];
    *(void *)uint64_t v18 = a5;
    *((void *)v18 + 1) = a6;
    swift_bridgeObjectRetain();
    swift_retain();
    id v19 = v16;

    v27.receiver = v12;
    v27.super_class = ObjectType;
    id v20 = (char *)[super init];
    NSString v21 = String._bridgeToObjectiveC()();
    [v19 addObserver:v20 forKeyPath:v21 options:1 context:0];

    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v23 = [v19 objectForKey:v22];

    if (v23)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_100027B00(&v25, &v26);
    }
    else
    {
      memset(&v26, 0, 32);
    }
    sub_10000A38C(&qword_100371910);
    if (swift_dynamicCast())
    {
      v26.receiver = (id)v25;
      LOBYTE(v26.super_class) = 0;
      (*(void (**)(objc_super *))&v20[qword_1003603B8])(&v26);
    }
    else
    {
      *(void *)&long long v25 = 0;
      BYTE8(v25) = 1;
    }

    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();

    swift_deallocPartialClassInstance();
    return 0;
  }
  return v20;
}

uint64_t sub_10022098C(void *a1, int a2)
{
  int v24 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10036EEA0);
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  __chkstk_darwin(v3);
  NSString v21 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10036EEA8);
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036EEB0);
  uint64_t v18 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_10036EEB8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100222560();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v24)
  {
    if (v24 == 1)
    {
      char v26 = 1;
      sub_100222608();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v20);
    }
    else
    {
      char v27 = 2;
      sub_1002225B4();
      NSString v15 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    }
  }
  else
  {
    char v25 = 0;
    sub_10022265C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_100220CF8()
{
  uint64_t v1 = 0x7774654E656D6173;
  if (*v0 != 1) {
    uint64_t v1 = 0x656D6F48656D6173;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656E6F7972657665;
  }
}

uint64_t sub_100220D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100221E80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100220D84(uint64_t a1)
{
  unint64_t v2 = sub_100222560();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100220DC0(uint64_t a1)
{
  unint64_t v2 = sub_100222560();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100220DFC(uint64_t a1)
{
  unint64_t v2 = sub_10022265C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100220E38(uint64_t a1)
{
  unint64_t v2 = sub_10022265C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100220E74(uint64_t a1)
{
  unint64_t v2 = sub_1002225B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100220EB0(uint64_t a1)
{
  unint64_t v2 = sub_1002225B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100220EEC(uint64_t a1)
{
  unint64_t v2 = sub_100222608();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100220F28(uint64_t a1)
{
  unint64_t v2 = sub_100222608();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100220F64@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100221FF0(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_100220F90(void *a1)
{
  return sub_10022098C(a1, *v1);
}

void *sub_100220FAC()
{
  type metadata accessor for AccessControlLevelMonitor();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_100221228();
  qword_1003ACB68 = v0;
  return result;
}

char *sub_100220FE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(char **)(v0 + 40);
  uint64_t v3 = v2;
  if (v2 == (char *)1)
  {
    id v4 = objc_allocWithZone((Class)sub_10000A38C(&qword_10036EEC0));
    swift_retain();
    uint64_t v3 = sub_1002206C4(0xD000000000000011, 0x80000001002BEA80, 0xD000000000000012, (void *)0x80000001002C1960, (uint64_t)sub_1002226B8, v1);
    uint64_t v5 = *(void **)(v1 + 40);
    *(void *)(v1 + 40) = v3;
    uint64_t v6 = v3;
    sub_100027B6C(v5);
  }
  sub_100027B7C(v2);
  return v3;
}

uint64_t sub_1002210B0(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  swift_retain();
  sub_1001BF918(v1, v2);

  return swift_release();
}

char *sub_10022110C()
{
  uint64_t v1 = v0;
  char v2 = *(char **)(v0 + 48);
  uint64_t v3 = v2;
  if (v2 == (char *)1)
  {
    id v4 = objc_allocWithZone((Class)sub_10000A38C(&qword_10036EEC0));
    swift_retain();
    uint64_t v3 = sub_1002206C4(0xD000000000000011, 0x80000001002BEA80, 0x776F6C6C41703270, (void *)0xE800000000000000, (uint64_t)sub_1002226B0, v1);
    uint64_t v5 = *(void **)(v1 + 48);
    *(void *)(v1 + 48) = v3;
    uint64_t v6 = v3;
    sub_100027B6C(v5);
  }
  sub_100027B7C(v2);
  return v3;
}

uint64_t sub_1002211CC(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  swift_retain();
  sub_1001BF918(v1, v2);

  return swift_release();
}

void *sub_100221228()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = sub_10000A38C(&qword_10036EEC8);
  uint64_t v62 = *(void *)(v2 - 8);
  uint64_t v63 = v2;
  __chkstk_darwin(v2);
  NSString v61 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_10000A38C(&qword_10036EED0);
  uint64_t v54 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036EED8);
  uint64_t v57 = *(void *)(v6 - 8);
  uint64_t v58 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_10000A38C(&qword_10036EEE0);
  uint64_t v52 = *(void *)(v60 - 8);
  uint64_t v9 = __chkstk_darwin(v60);
  uint64_t v59 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v50 - v11;
  sub_10000A38C(&qword_10036D690);
  swift_allocObject();
  *(void *)(v0 + 24) = sub_1001F0458(0, 1, 0, 0, 0);
  swift_allocObject();
  *(void *)(v0 + 32) = sub_1001F0458(0, 1, 0, 0, 0);
  *(int64x2_t *)(v0 + 40) = vdupq_n_s64(1uLL);
  uint64_t v13 = (void *)v0;
  *(void *)(v0 + 56) = 0;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v1, (uint64_t)&off_1003334A8);
  id v14 = [self standardUserDefaults];
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v14 persistentDomainForName:v15];

  if (!v16) {
    goto LABEL_9;
  }
  uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v17 + 16)
    || (unint64_t v18 = sub_100269CBC(0xD000000000000012, 0x80000001002C1960), (v19 & 1) == 0)
    || (sub_100027B10(*(void *)(v17 + 56) + 32 * v18, (uint64_t)&v64), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v20 = v68;
  if (*(void *)(v17 + 16) && (unint64_t v21 = sub_100269CBC(0x776F6C6C41703270, 0xE800000000000000), (v22 & 1) != 0))
  {
    sub_100027B10(*(void *)(v17 + 56) + 32 * v21, (uint64_t)&v64);
  }
  else
  {
    long long v64 = 0u;
    long long v65 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v65 + 1))
  {
    sub_1000911A4((uint64_t)&v64);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    sub_10016ABE4(0xD000000000000023, (void *)0x80000001002C6530, 0, v1, (uint64_t)&off_1003334A8);
    swift_beginAccess();
    sub_10000A38C(&qword_10036D6D0);
    swift_allocObject();
    v13[2] = sub_1001F0B2C(2, 0, 0, 0);
    swift_endAccess();
    goto LABEL_10;
  }
  if (v20 == 1) {
    char v49 = 2;
  }
  else {
    char v49 = (void)v68 != 1;
  }
  swift_beginAccess();
  sub_10000A38C(&qword_10036D6D0);
  swift_allocObject();
  v13[2] = sub_1001F0B2C(v49, 0, 0, 0);
  swift_endAccess();
LABEL_10:
  *(void *)&long long v64 = 0;
  *((void *)&v64 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  long long v68 = v64;
  v23._countAndFlagsBits = 0xD00000000000001CLL;
  v23._object = (void *)0x80000001002C6560;
  String.append(_:)(v23);
  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.value.getter();
  char v24 = v67;
  if (v67 == 3)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    char v24 = v66;
  }
  else
  {
    swift_release();
  }
  LOBYTE(v66) = v24;
  _print_unlocked<A, B>(_:_:)();
  sub_10016ABE4(v68, *((void **)&v68 + 1), 0, v1, (uint64_t)&off_1003334A8);
  swift_bridgeObjectRelease();
  id v53 = v13;
  uint64_t v25 = v13[4];
  *(void *)&long long v68 = v13[3];
  uint64_t v66 = v25;
  sub_10000B010(&qword_10036EEE8, &qword_10036D690);
  swift_retain();
  swift_retain();
  Publishers.CombineLatest.init(_:_:)();
  sub_10000B010(&qword_10036EEF0, &qword_10036EED0);
  uint64_t v26 = v56;
  Publisher.dropFirst(_:)();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v5, v26);
  sub_10000B010(&qword_10036EEF8, &qword_10036EED8);
  char v27 = v12;
  uint64_t v51 = v12;
  uint64_t v28 = v58;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v8, v28);
  id v29 = sub_1001F68D8();
  uint64_t v30 = v52;
  unint64_t v32 = v59;
  uint64_t v31 = v60;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v59, v27, v60);
  unint64_t v33 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  unint64_t v34 = (v55 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (v34 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v35 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = 0;
  *(void *)(v37 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v37 + v33, v32, v31);
  id v38 = (void *)(v37 + v34);
  *id v38 = 0xD000000000000018;
  v38[1] = 0x80000001002C6580;
  uint64_t v39 = (void *)(v37 + v35);
  *uint64_t v39 = 0;
  v39[1] = 0xE000000000000000;
  *(void *)(v37 + v36) = v29;
  *(_DWORD *)(v37 + ((v36 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  sub_10000B010(&qword_10036EF00, &qword_10036EEE0);
  id v40 = v29;
  uint64_t v41 = v61;
  uint64_t v42 = v51;
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_10036EF08, &qword_10036EEC8);
  uint64_t v43 = v63;
  uint64_t v44 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v41, v43);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v42, v31);
  *(void *)&long long v68 = v44;
  swift_allocObject();
  uint64_t v45 = v53;
  swift_weakInit();
  sub_10000A38C(&qword_10036EF10);
  sub_10000B010(&qword_10036EF18, &qword_10036EF10);
  uint64_t v46 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  v45[7] = v46;
  swift_release();
  uint64_t v47 = sub_100220FE8();

  return v45;
}

uint64_t sub_100221CBC@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (*(unsigned char *)(result + 8))
  {
    *a2 = 2;
  }
  else
  {
    char v2 = *(void *)(result + 16) != 1;
    if (*(void *)result == 1) {
      char v2 = 2;
    }
    if (*(unsigned char *)(result + 24)) {
      char v2 = 2;
    }
    *a2 = v2;
  }
  return result;
}

uint64_t sub_100221D00(char *a1)
{
  char v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    swift_retain();
    sub_1001BF584(v1);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100221D90()
{
  swift_release();
  swift_release();
  swift_release();
  sub_100027B6C(*(id *)(v0 + 40));
  sub_100027B6C(*(id *)(v0 + 48));
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AccessControlLevelMonitor()
{
  return self;
}

ValueMetadata *type metadata accessor for AccessControlLevel()
{
  return &type metadata for AccessControlLevel;
}

unint64_t sub_100221E2C()
{
  unint64_t result = qword_10036EE58;
  if (!qword_10036EE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036EE58);
  }
  return result;
}

uint64_t sub_100221E80(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656E6F7972657665 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7774654E656D6173 && a2 == 0xEB000000006B726FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D6F48656D6173 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_100221FF0(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036EE60);
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v26 = v2;
  __chkstk_darwin(v2);
  id v29 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000A38C(&qword_10036EE68);
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036EE70);
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036EE78);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D6E4(a1, a1[3]);
  sub_100222560();
  uint64_t v12 = (uint64_t)v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v22 = v6;
  uint64_t v13 = v29;
  uint64_t v30 = a1;
  id v14 = v11;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v11 = v18;
    sub_10000A38C(&qword_10035FAC0);
    void *v11 = &type metadata for AccessControlLevel;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v11, enum case for DecodingError.typeMismatch(_:), v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
    a1 = v30;
LABEL_7:
    sub_10000CC5C((uint64_t)a1);
    return v11;
  }
  uint64_t v11 = (void *)*(unsigned __int8 *)(v15 + 32);
  if (*(unsigned char *)(v15 + 32))
  {
    if (v11 == 1)
    {
      char v32 = 1;
      sub_100222608();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v16 = v28;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v16 + 8))(v14, v9);
    }
    else
    {
      char v33 = 2;
      sub_1002225B4();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v28;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v20 + 8))(v14, v9);
    }
  }
  else
  {
    char v31 = 0;
    sub_10022265C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
  }
  sub_10000CC5C((uint64_t)v30);
  return v11;
}

unint64_t sub_100222560()
{
  unint64_t result = qword_10036EE80;
  if (!qword_10036EE80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036EE80);
  }
  return result;
}

unint64_t sub_1002225B4()
{
  unint64_t result = qword_10036EE88;
  if (!qword_10036EE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036EE88);
  }
  return result;
}

unint64_t sub_100222608()
{
  unint64_t result = qword_10036EE90;
  if (!qword_10036EE90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036EE90);
  }
  return result;
}

unint64_t sub_10022265C()
{
  unint64_t result = qword_10036EE98;
  if (!qword_10036EE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036EE98);
  }
  return result;
}

uint64_t sub_1002226B0(uint64_t a1)
{
  return sub_1002211CC(a1);
}

uint64_t sub_1002226B8(uint64_t a1)
{
  return sub_1002210B0(a1);
}

uint64_t sub_1002226C0()
{
  uint64_t v1 = sub_10000A38C(&qword_10036EEE0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  uint64_t v5 = (v3 + 32) & ~v3;
  unint64_t v6 = (((((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, (v6 + 11) & 0xFFFFFFFFFFFFFFF8 | 4, v3 | 7);
}

uint64_t sub_1002227E4@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_10000A38C(&qword_10036EEE0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t result = sub_10002FF6C(*a1, *(uint64_t (**)(char *))(v2 + 16), *(void *)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void *)(v2 + v8), *(void **)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));
  *a2 = result;
  return result;
}

uint64_t sub_1002228C8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100222900(char *a1)
{
  return sub_100221D00(a1);
}

unsigned char *_s17proximitycontrold18AccessControlLevelOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002229D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessControlLevel.CodingKeys()
{
  return &type metadata for AccessControlLevel.CodingKeys;
}

ValueMetadata *type metadata accessor for AccessControlLevel.EveryoneCodingKeys()
{
  return &type metadata for AccessControlLevel.EveryoneCodingKeys;
}

ValueMetadata *type metadata accessor for AccessControlLevel.SameNetworkCodingKeys()
{
  return &type metadata for AccessControlLevel.SameNetworkCodingKeys;
}

ValueMetadata *type metadata accessor for AccessControlLevel.SameHomeCodingKeys()
{
  return &type metadata for AccessControlLevel.SameHomeCodingKeys;
}

unint64_t sub_100222A40()
{
  unint64_t result = qword_10036EF20;
  if (!qword_10036EF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036EF20);
  }
  return result;
}

unint64_t sub_100222A98()
{
  unint64_t result = qword_10036EF28;
  if (!qword_10036EF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036EF28);
  }
  return result;
}

unint64_t sub_100222AF0()
{
  unint64_t result = qword_10036EF30;
  if (!qword_10036EF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036EF30);
  }
  return result;
}

unint64_t sub_100222B48()
{
  unint64_t result = qword_10036EF38;
  if (!qword_10036EF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036EF38);
  }
  return result;
}

unint64_t sub_100222BA0()
{
  unint64_t result = qword_10036EF40;
  if (!qword_10036EF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036EF40);
  }
  return result;
}

unint64_t sub_100222BF8()
{
  unint64_t result = qword_10036EF48;
  if (!qword_10036EF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036EF48);
  }
  return result;
}

unint64_t sub_100222C50()
{
  unint64_t result = qword_10036EF50;
  if (!qword_10036EF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036EF50);
  }
  return result;
}

unint64_t sub_100222CA8()
{
  unint64_t result = qword_10036EF58;
  if (!qword_10036EF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036EF58);
  }
  return result;
}

unint64_t sub_100222D00()
{
  unint64_t result = qword_10036EF60;
  if (!qword_10036EF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036EF60);
  }
  return result;
}

void sub_100222D54(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void sub_100222F48()
{
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_startDistance + 4))
  {
    unint64_t v1 = 0xE300000000000000;
    uint64_t v2 = 7104878;
  }
  else
  {
    uint64_t v2 = String.init<A>(describing:)();
    unint64_t v1 = v3;
  }
  unint64_t v4 = v1;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  id v5 = sub_1001F6C28();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 ulog:40 message:v6];
  swift_bridgeObjectRelease();
}

void sub_100223060()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  id v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v7 = (char *)v21 - v6;
  uint64_t v8 = sub_10000A38C(&qword_10035E158);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v21 - v12;
  v21[4] = 0x6D69547472617473;
  v21[5] = 0xEB00000000203A65;
  uint64_t v14 = v0 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_startTime;
  swift_beginAccess();
  sub_1000B03BC(v14, (uint64_t)v13);
  sub_1000B03BC((uint64_t)v13, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 1, v1) == 1)
  {
    uint64_t v15 = (void *)0xE300000000000000;
    uint64_t v16 = 7104878;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v7, v11, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
    uint64_t v16 = String.init<A>(describing:)();
    uint64_t v15 = v17;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  }
  sub_1000B0424((uint64_t)v13);
  v18._countAndFlagsBits = v16;
  v18._object = v15;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  id v19 = sub_1001F6C28();
  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 ulog:40 message:v20];
  swift_bridgeObjectRelease();
}

id sub_10022333C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HapticPlayer();
  return [super dealloc];
}

uint64_t sub_100223438()
{
  return type metadata accessor for HapticPlayer();
}

uint64_t type metadata accessor for HapticPlayer()
{
  uint64_t result = qword_10036F018;
  if (!qword_10036F018) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10022348C()
{
  sub_1000F3B5C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1002235A0(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v6 = (void *)Strong;
    sub_100223610(a2, a3);
  }
}

void sub_100223610(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_dispatchQueue;
  uint64_t v11 = *(void **)&v2[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_dispatchQueue];
  *uint64_t v9 = v11;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) == 0) {
    __break(1u);
  }
  id v13 = sub_1001F6C28();
  NSString v14 = String._bridgeToObjectiveC()();
  [v13 ulog:40 message:v14];

  id v15 = objc_allocWithZone((Class)CHHapticEngine);
  aBlock = 0;
  id v16 = [v15 initAndReturnError:&aBlock];
  uint64_t v17 = aBlock;
  if (v16)
  {
    Swift::String v18 = v16;
    uint64_t v19 = swift_allocObject();
    swift_unknownObjectWeakInit();
    NSString v20 = (void *)swift_allocObject();
    v20[2] = v19;
    v20[3] = a1;
    v20[4] = a2;
    v20[5] = ObjectType;
    uint64_t v41 = sub_1002260A0;
    uint64_t v42 = v20;
    aBlock = _NSConcreteStackBlock;
    unint64_t v38 = 1107296256;
    uint64_t v39 = sub_100119FC4;
    id v40 = &unk_1003337B8;
    uint64_t v21 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v22 = v17;
    swift_release();
    [v18 startWithCompletionHandler:v21];
    _Block_release(v21);
    uint64_t v23 = *(void **)&v2[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_hapticEngine];
    *(void *)&v2[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_hapticEngine] = v18;
    id v24 = v18;

    if (v2[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_frequency + 8])
    {
    }
    else
    {
      uint64_t v30 = *(void **)&v2[v10];
      double v31 = 1.0 / *(double *)&v2[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_frequency];
      type metadata accessor for RepeatingTimer();
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 48) = v30;
      *(void *)(v32 + 56) = 0;
      *(double *)(v32 + 32) = v31;
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = v2;
      *(void *)(v32 + 16) = sub_1002260E4;
      *(void *)(v32 + 24) = v33;
      id v34 = v30;
      unint64_t v35 = v2;
      sub_10000F088(0);
      *(unsigned char *)(v32 + 40) = 1;
      sub_100168244();
      swift_getObjectType();
      OS_dispatch_source.resume()();
      swift_unknownObjectRelease();
      *(void *)&v35[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_repeater] = v32;

      swift_release();
    }
  }
  else
  {
    uint64_t v25 = aBlock;
    uint64_t v26 = _convertNSErrorToError(_:)();

    swift_willThrow();
    aBlock = 0;
    unint64_t v38 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v27._countAndFlagsBits = 0x6974634120232323;
    v27._object = (void *)0xEE00203A65746176;
    String.append(_:)(v27);
    uint64_t v43 = v26;
    sub_10000A38C((uint64_t *)&unk_100365D60);
    _print_unlocked<A, B>(_:_:)();
    id v28 = sub_1001F6C28();
    swift_bridgeObjectRetain();
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v28 ulog:90 message:v29];
    swift_bridgeObjectRelease();

    swift_errorRetain();
    a1(v26);
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_100223B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = a3;
  uint64_t v23 = a5;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  NSString v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    id v16 = (void *)result;
    id v17 = *(id *)(result + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_dispatchQueue);

    Swift::String v18 = (void *)swift_allocObject();
    uint64_t v19 = v22;
    v18[2] = a1;
    v18[3] = v19;
    v18[4] = a4;
    v18[5] = a2;
    v18[6] = v23;
    aBlock[4] = sub_100226538;
    aBlock[5] = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10007A0AC;
    aBlock[3] = &unk_100333830;
    NSString v20 = _Block_copy(aBlock);
    swift_errorRetain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v25 = _swiftEmptyArrayStorage;
    sub_10004D1C4();
    sub_10000A38C((uint64_t *)&unk_10035E800);
    sub_10001683C();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v24);
    return swift_release();
  }
  return result;
}

void sub_100223DFC(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    swift_errorRetain();
    _StringGuts.grow(_:)(16);
    v8._countAndFlagsBits = 0x6974634120232323;
    v8._object = (void *)0xEE00203A65746176;
    String.append(_:)(v8);
    sub_10000A38C((uint64_t *)&unk_100365D60);
    _print_unlocked<A, B>(_:_:)();
    sub_10016AE10(90, 0, (void *)0xE000000000000000, 0, a5, (uint64_t)&off_100333640);
    swift_bridgeObjectRelease();
    swift_errorRetain();
    a2(a1);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    sub_10016ABE4(0x6574617669746341, (void *)0xE900000000000064, 0, a5, (uint64_t)&off_100333640);
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v10 = (void *)Strong;
      sub_100223F7C((uint64_t (*)(void))a2);
    }
  }
}

uint64_t sub_100223F7C(uint64_t (*a1)(void))
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_dispatchQueue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    id v10 = sub_1002078EC();
    uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_fluidSpring);
    *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_fluidSpring) = v10;

    sub_100226548();
    return a1(0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002241C4()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v13[0] - 8);
  __chkstk_darwin(v13[0]);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v0 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_activated) = 0;
  id v8 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_dispatchQueue);
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_100224934;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_1003336A0;
  id v10 = _Block_copy(aBlock);
  id v11 = v8;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v13[1] = _swiftEmptyArrayStorage;
  sub_10004D1C4();
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10001683C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, void))(v5 + 8))(v7, v13[0]);
  swift_release();
  return swift_release();
}

void sub_100224460()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_1002244B4();
  }
}

uint64_t sub_1002244B4()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_10000A38C(&qword_10035E158);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v10 = *(void **)(v1 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_dispatchQueue);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    id v13 = sub_1001F6C28();
    NSString v14 = String._bridgeToObjectiveC()();
    [v13 ulog:40 message:v14];

    uint64_t v15 = OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_repeater;
    uint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_repeater);
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + 16);
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      sub_10000F088(v17);
      uint64_t v18 = *(void *)(v1 + v15);
      if (v18 && *(unsigned char *)(v18 + 40) == 1)
      {
        *(unsigned char *)(v18 + 40) = 0;
        swift_retain();
        sub_100168244();
        swift_getObjectType();
        OS_dispatch_source.suspend()();
        swift_release();
        swift_unknownObjectRelease();
      }
      *(void *)(v1 + v15) = 0;
      swift_release();
    }
    uint64_t v19 = OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_hapticEngine;
    NSString v20 = *(void **)(v1 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_hapticEngine);
    if (v20)
    {
      id v21 = v20;
      id v22 = sub_10016B098(ObjectType, (uint64_t)&off_100333640);
      uint64_t v23 = (void *)swift_allocObject();
      v23[2] = 0xD000000000000011;
      v23[3] = 0x80000001002C6670;
      v23[4] = v22;
      aBlock[4] = sub_10004D170;
      aBlock[5] = v23;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100119FC4;
      aBlock[3] = &unk_1003336F0;
      uint64_t v24 = _Block_copy(aBlock);
      swift_release();
      [v21 stopWithCompletionHandler:v24];
      _Block_release(v24);
      uint64_t v25 = *(void **)(v1 + v19);
      *(void *)(v1 + v19) = 0;
    }
    uint64_t v26 = v1 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_startDistance;
    *(_DWORD *)uint64_t v26 = 0;
    *(unsigned char *)(v26 + 4) = 1;
    sub_100222F48();
    uint64_t v27 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v5, 1, 1, v27);
    uint64_t v28 = v1 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_startTime;
    swift_beginAccess();
    sub_1002258A8((uint64_t)v5, v28);
    swift_endAccess();
    sub_100223060();
    uint64_t result = sub_1000B0424((uint64_t)v5);
    NSString v29 = *(void (**)(uint64_t))(v1 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_invalidationHandler);
    if (v29)
    {
      uint64_t v30 = swift_retain();
      v29(v30);
      return sub_10000F088((uint64_t)v29);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002248FC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100224934()
{
}

uint64_t sub_10022493C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10022494C()
{
  return swift_release();
}

void sub_100224954(char a1, float a2)
{
  if (a2 < 0.0 || a2 > 1.0)
  {
    sub_100225FE4();
    swift_allocError();
    char v8 = 2;
LABEL_44:
    char *v7 = v8;
    swift_willThrow();
    return;
  }
  uint64_t v9 = v2;
  float v10 = a2;
  if (a1)
  {
    id v11 = *(id *)(v2 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_fluidSpring);
    [v11 step:CACurrentMediaTime() progress:a2];
    double v13 = v12;

    float v10 = v13;
  }
  uint64_t v14 = v9 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_hapticPlayers;
  swift_beginAccess();
  if (!(*(void *)v14 >> 62))
  {
    if (*(void *)((*(void *)v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
  swift_bridgeObjectRetain();
  uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_43:
    sub_100225FE4();
    swift_allocError();
    char v8 = 4;
    goto LABEL_44;
  }
LABEL_11:
  uint64_t v15 = (char *)OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_defaults;
  uint64_t v16 = *(void **)(*(void *)(v9 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_defaults) + 984);
  swift_retain();
  id v17 = v16;
  float v18 = sub_1000FF7A8();
  swift_release();

  uint64_t v19 = *(void **)&v15[v9];
  NSString v20 = (void *)v19[122];
  swift_retain();
  uint64_t v21 = v20;
  float v22 = sub_1000FF7A8();
  swift_release();

  if (v18 > v22)
  {
    __break(1u);
    goto LABEL_46;
  }
  float v23 = (float)((float)(1.0 - v10) * v18) + (float)(v10 * v22);
  if (v10 >= 1.0) {
    float v23 = v22;
  }
  if (v10 > 0.0) {
    float v18 = v23;
  }
  v66[0] = 0;
  v66[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(53);
  v24._countAndFlagsBits = 0xD00000000000002BLL;
  v24._object = (void *)0x80000001002C6700;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x726F74636166203ALL;
  v25._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v25);
  Float.write<A>(to:)();
  v26._object = (void *)0x80000001002C6730;
  v26._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v26);
  Float.write<A>(to:)();
  v27._object = (void *)0x80000001002C6750;
  v27._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v27);
  Float.write<A>(to:)();
  id v28 = sub_1001F6C28();
  swift_bridgeObjectRetain();
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v28 ulog:40 message:v29];
  swift_bridgeObjectRelease();

  CHHapticDynamicParameterID v30 = CHHapticDynamicParameterIDHapticIntensityControl;
  id v31 = objc_allocWithZone((Class)CHHapticDynamicParameter);
  *(float *)&double v32 = v18;
  uint64_t v15 = (char *)[v31 initWithParameterID:v30 value:v32 relativeTime:0.0];
  CHHapticDynamicParameterID v33 = CHHapticDynamicParameterIDHapticSharpnessControl;
  id v34 = objc_allocWithZone((Class)CHHapticDynamicParameter);
  LODWORD(v35) = 1054615798;
  int64_t v3 = (int64_t)[v34 initWithParameterID:v33 value:v35 relativeTime:0.0];
  id v36 = objc_allocWithZone((Class)CHHapticDynamicParameter);
  LODWORD(v37) = 0.25;
  uint64_t v19 = [v36 initWithParameterID:v33 value:v37 relativeTime:0.0];
  uint64_t v21 = *(void *)v14;
  if (*(void *)v14 >> 62)
  {
LABEL_46:
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_18;
    }
LABEL_47:
    swift_bridgeObjectRelease();
    sub_100225FE4();
    swift_allocError();
    *uint64_t v60 = 4;
    swift_willThrow();

    return;
  }
  uint64_t v38 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v38) {
    goto LABEL_47;
  }
LABEL_18:
  id v67 = v19;
  if ((v21 & 0xC000000000000001) != 0)
  {
    uint64_t v39 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    uint64_t v39 = *(void *)(v21 + 32);
    swift_unknownObjectRetain();
  }
  swift_bridgeObjectRelease();
  sub_10000A38C(&qword_10035C280);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_10028F670;
  *(void *)(v40 + 32) = v15;
  *(void *)(v40 + 40) = v3;
  v66[0] = v40;
  specialized Array._endMutation()();
  uint64_t v41 = v66[0];
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100293270;
  *(void *)(inited + 32) = v39;
  v66[0] = inited;
  specialized Array._endMutation()();
  uint64_t v43 = v15;
  id v63 = (id)v3;
  swift_unknownObjectRetain();
  sub_100226114(v41, v66[0]);
  swift_bridgeObjectRelease();
  uint64_t v4 = v43;
  swift_bridgeObjectRelease();
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_10028F670;
  id v45 = v67;
  *(void *)(v44 + 32) = v43;
  *(void *)(v44 + 40) = v45;
  v66[0] = v44;
  uint64_t v21 = (uint64_t)v66;
  specialized Array._endMutation()();
  long long v64 = v43;
  unint64_t v65 = v66[0];
  uint64_t v46 = *(void *)v14;
  uint64_t v47 = *(void *)v14 >> 62;
  if (!v47)
  {
    int64_t v3 = *(void *)((*(void *)v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3 >= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = *(void *)((*(void *)v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    id v48 = v4;
    swift_bridgeObjectRetain();
    id v49 = v45;
    if (v3 >= (unint64_t)v14)
    {
LABEL_26:
      if ((v46 & 0xC000000000000001) != 0 && (unint64_t)v3 >= 2)
      {
        Swift::Int v50 = v14;
        do
        {
          sub_10000A38C(&qword_100365CB0);
          _ArrayBuffer._typeCheckSlowPath(_:)(v50++);
        }
        while (v3 != v50);
      }
      if (v47)
      {
        swift_bridgeObjectRetain();
        uint64_t v4 = (void *)_CocoaArrayWrapper.subscript.getter();
        uint64_t v21 = v51;
        uint64_t v14 = v52;
        int64_t v3 = v53;
        swift_bridgeObjectRelease_n();
        if (v3) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v4 = (void *)(v46 & 0xFFFFFFFFFFFFFF8);
        uint64_t v21 = (v46 & 0xFFFFFFFFFFFFFF8) + 32;
        int64_t v3 = (2 * v3) | 1;
        if (v3)
        {
LABEL_35:
          type metadata accessor for __ContiguousArrayStorageBase();
          swift_unknownObjectRetain_n();
          uint64_t v57 = (void *)swift_dynamicCastClass();
          if (!v57)
          {
            swift_unknownObjectRelease();
            uint64_t v57 = _swiftEmptyArrayStorage;
          }
          uint64_t v58 = v57[2];
          swift_release();
          if (!__OFSUB__((unint64_t)v3 >> 1, v14))
          {
            if (v58 == ((unint64_t)v3 >> 1) - v14)
            {
              uint64_t v54 = (void *)swift_dynamicCastClass();
              uint64_t v55 = v63;
              uint64_t v56 = v65;
              if (!v54)
              {
                swift_unknownObjectRelease();
                uint64_t v54 = _swiftEmptyArrayStorage;
              }
              goto LABEL_41;
            }
            goto LABEL_62;
          }
LABEL_61:
          __break(1u);
LABEL_62:
          swift_unknownObjectRelease();
        }
      }
      uint64_t v54 = sub_1000F0A74((uint64_t)v4, v21, v14, v3);
      uint64_t v55 = v63;
      uint64_t v56 = v65;
LABEL_41:
      swift_unknownObjectRelease();
      sub_100226114(v56, (unint64_t)v54);

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v46 < 0) {
    uint64_t v21 = *(void *)v14;
  }
  else {
    uint64_t v21 = *(void *)v14 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain_n();
  id v61 = v4;
  id v62 = v45;
  int64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if ((v3 & 0x8000000000000000) == 0)
  {
    if (v3 >= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v3;
    }
    swift_bridgeObjectRetain();
    uint64_t v4 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((uint64_t)v4 >= v14)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v21 >= v3) {
        goto LABEL_26;
      }
      __break(1u);
    }
    goto LABEL_59;
  }
  __break(1u);
}

void sub_100225118(float a1)
{
  int64_t v3 = *(void **)(*(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_defaults) + 1496);
  swift_retain();
  id v4 = v3;
  char v5 = sub_1000FD938();
  swift_release();

  sub_100224954(v5 & 1, a1);
}

uint64_t sub_100225268()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_hapticPlayers);
  uint64_t result = swift_beginAccess();
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v25) {
      return result;
    }
  }
  else if (!*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  id v30 = (id)0xD000000000000015;
  unint64_t v31 = 0x80000001002C67F0;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  id v5 = sub_1001F6C28();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 ulog:40 message:v6];
  swift_bridgeObjectRelease();

  uint64_t v7 = *v1;
  Swift::String v26 = v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_7:
      if (v8 < 1) {
        __break(1u);
      }
      uint64_t v9 = 0;
      unint64_t v10 = v7 & 0xC000000000000001;
      id v11 = &selRef_setAnchor_;
      uint64_t v28 = v8;
      uint64_t v29 = v7;
      unint64_t v27 = v7 & 0xC000000000000001;
      do
      {
        if (v10)
        {
          double v13 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          double v13 = *(void **)(v7 + 8 * v9 + 32);
          swift_unknownObjectRetain();
        }
        id v30 = 0;
        if (objc_msgSend(v13, v11[99], &v30, v26))
        {
          id v12 = v30;
        }
        else
        {
          id v14 = v30;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          id v30 = 0;
          unint64_t v31 = 0xE000000000000000;
          _StringGuts.grow(_:)(34);
          v15._countAndFlagsBits = 0xD00000000000001BLL;
          v15._object = (void *)0x80000001002C6810;
          String.append(_:)(v15);
          sub_10000A38C(&qword_100365CB0);
          _print_unlocked<A, B>(_:_:)();
          v16._countAndFlagsBits = 2112041;
          v16._object = (void *)0xE300000000000000;
          String.append(_:)(v16);
          sub_10000A38C((uint64_t *)&unk_100365D60);
          _print_unlocked<A, B>(_:_:)();
          id v30 = (id)type metadata accessor for HapticPlayer();
          sub_10000A38C(&qword_10036D688);
          uint64_t v17 = String.init<A>(describing:)();
          sub_10016B950(60, 0xE100000000000000, v17, v18);
          if ((v19 & 1) == 0)
          {
            String.subscript.getter();
            swift_bridgeObjectRelease();
            static String._fromSubstring(_:)();
            swift_bridgeObjectRelease();
          }
          id v20 = objc_allocWithZone((Class)CULogHandle);
          NSString v21 = String._bridgeToObjectiveC()();
          NSString v22 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v23 = [v20 initWithSubsystem:v21 category:v22];

          swift_bridgeObjectRetain();
          NSString v24 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v23 ulog:90 message:v24];

          swift_errorRelease();
          swift_bridgeObjectRelease();
          uint64_t v8 = v28;
          uint64_t v7 = v29;
          unint64_t v10 = v27;
          id v11 = &selRef_setAnchor_;
        }
        ++v9;
        swift_unknownObjectRelease();
      }
      while (v8 != v9);
    }
  }
  swift_bridgeObjectRelease();
  *Swift::String v26 = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease();
}

id sub_100225778()
{
  sub_100019E10(0, &qword_10036F0B8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_100019E10(0, (unint64_t *)&unk_10036F0A0);
  Class v2 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v7 = 0;
  id v3 = [v0 initWithEvents:isa parameters:v2 error:&v7];

  if (v3)
  {
    id v4 = v7;
  }
  else
  {
    id v5 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_1002258A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_10035E158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100225910()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

id sub_100225950(void *a1)
{
  id v3 = &v1[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_interruptionHandler];
  *id v3 = 0;
  v3[1] = 0;
  uint64_t v4 = &v1[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_invalidationHandler];
  *uint64_t v4 = 0;
  v4[1] = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_progress] = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_factor] = 0;
  id v5 = &v1[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_frequency];
  *(void *)id v5 = 0;
  v5[8] = 1;
  v1[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_activeDeviceClass] = 0;
  v1[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_activated] = 0;
  uint64_t v6 = OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_defaults;
  uint64_t v7 = qword_10035A520;
  uint64_t v8 = v1;
  if (v7 != -1) {
    swift_once();
  }
  *(void *)&v8[v6] = qword_1003AC750;
  uint64_t v9 = OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_fluidSpring;
  swift_retain();
  *(void *)&v8[v9] = sub_1002078EC();
  *(void *)&v8[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_hapticEngine] = 0;
  *(void *)&v8[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_hapticPlayers] = _swiftEmptyArrayStorage;
  v8[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_hapticPattern] = 1;
  *(void *)&v8[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_repeater] = 0;
  unint64_t v10 = &v8[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_startDistance];
  *(_DWORD *)unint64_t v10 = 0;
  v10[4] = 1;
  id v11 = &v8[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_startTime];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(void *)&v8[OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_dispatchQueue] = a1;
  id v13 = a1;

  v15.receiver = v8;
  v15.super_class = (Class)type metadata accessor for HapticPlayer();
  return [super init];
}

uint64_t sub_100225B18(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  uint64_t v12 = self;
  _Block_copy(a2);
  unsigned int v13 = [[[v12 capabilitiesForHardware] supportsHaptics];
  swift_unknownObjectRelease();
  if (v13)
  {
    id v30 = v6;
    uint64_t v31 = v7;
    uint64_t v32 = v8;
    if ((*(unsigned char *)(a1 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_activated) & 1) == 0)
    {
      NSString v21 = v10;
      *(unsigned char *)(a1 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_activated) = 1;
      NSString v22 = *(void **)(a1 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_dispatchQueue);
      uint64_t v23 = swift_allocObject();
      swift_unknownObjectWeakInit();
      NSString v24 = (void *)swift_allocObject();
      v24[2] = v23;
      v24[3] = sub_10004C9CC;
      v24[4] = v11;
      aBlock[4] = sub_100226040;
      aBlock[5] = v24;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10007A0AC;
      aBlock[3] = &unk_100333768;
      uint64_t v25 = _Block_copy(aBlock);
      id v26 = v22;
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      id v34 = _swiftEmptyArrayStorage;
      sub_10004D1C4();
      uint64_t v27 = v33;
      sub_10000A38C((uint64_t *)&unk_10035E800);
      sub_10001683C();
      uint64_t v28 = v30;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v25);

      (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v4);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v21, v31);
      swift_release();
      swift_release();
      return swift_release();
    }
    sub_100225FE4();
    swift_allocError();
    unsigned char *v14 = 0;
    objc_super v15 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a2)[2](a2, v15);

    swift_errorRelease();
  }
  else
  {
    id v16 = sub_1001F6C28();
    NSString v17 = String._bridgeToObjectiveC()();
    [v16 ulog:60 message:v17];

    sub_100225FE4();
    swift_allocError();
    *unint64_t v18 = 5;
    char v19 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a2)[2](a2, v19);

    swift_errorRelease();
  }

  return swift_release();
}

uint64_t sub_100225FAC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_100225FE4()
{
  unint64_t result = qword_10036F090;
  if (!qword_10036F090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F090);
  }
  return result;
}

uint64_t sub_100226038()
{
  return sub_100226054(40);
}

void sub_100226040()
{
  sub_1002235A0(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10022604C()
{
  return sub_100226054(48);
}

uint64_t sub_100226054(uint64_t a1)
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1002260A0(uint64_t a1)
{
  return sub_100223B28(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1002260AC()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002260E4()
{
  sub_100225118(*(float *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_progress));
}

uint64_t sub_100226114(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      if (v3 < 1) {
        __break(1u);
      }
      uint64_t v4 = 0;
      unint64_t v5 = v2 & 0xC000000000000001;
      unint64_t v23 = v2;
      unint64_t v21 = v2 & 0xC000000000000001;
      uint64_t v22 = v3;
      do
      {
        if (v5)
        {
          uint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v7 = *(void **)(v2 + 8 * v4 + 32);
          swift_unknownObjectRetain();
        }
        sub_100019E10(0, (unint64_t *)&unk_10036F0A0);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        v24[0] = 0;
        unsigned int v9 = [v7 sendParameters:isa atTime:v24 error:0.0];

        if (v9)
        {
          id v6 = v24[0];
        }
        else
        {
          id v10 = v24[0];
          _convertNSErrorToError(_:)();

          swift_willThrow();
          v24[0] = 0;
          v24[1] = (id)0xE000000000000000;
          _StringGuts.grow(_:)(31);
          v11._countAndFlagsBits = 0xD00000000000001DLL;
          v11._object = (void *)0x80000001002C6770;
          String.append(_:)(v11);
          sub_10000A38C((uint64_t *)&unk_100365D60);
          _print_unlocked<A, B>(_:_:)();
          v24[0] = (id)type metadata accessor for HapticPlayer();
          sub_10000A38C(&qword_10036D688);
          uint64_t v12 = String.init<A>(describing:)();
          sub_10016B950(60, 0xE100000000000000, v12, v13);
          if ((v14 & 1) == 0)
          {
            String.subscript.getter();
            swift_bridgeObjectRelease();
            static String._fromSubstring(_:)();
            swift_bridgeObjectRelease();
          }
          id v15 = objc_allocWithZone((Class)CULogHandle);
          NSString v16 = String._bridgeToObjectiveC()();
          NSString v17 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v18 = [v15 initWithSubsystem:v16 category:v17];

          swift_bridgeObjectRetain();
          NSString v19 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v18 ulog:90 message:v19];

          swift_errorRelease();
          swift_bridgeObjectRelease();
          unint64_t v2 = v23;
          unint64_t v5 = v21;
          uint64_t v3 = v22;
        }
        ++v4;
        swift_unknownObjectRelease();
      }
      while (v3 != v4);
      return swift_bridgeObjectRelease();
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002264F0()
{
  swift_errorRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100226538()
{
  sub_100223DFC(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

void sub_100226548()
{
  id v2 = sub_1001F6C28();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  sub_100225268();
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_hapticEngine);
  if (v4)
  {
    CHHapticEventParameterID v5 = CHHapticEventParameterIDHapticIntensity;
    id v6 = objc_allocWithZone((Class)CHHapticEventParameter);
    id v93 = v4;
    LODWORD(v7) = 1.0;
    id v95 = [v6 initWithParameterID:v5 value:v7];
    uint64_t v8 = OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_defaults;
    unsigned int v9 = *(void **)(*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_defaults) + 1424);
    uint64_t v10 = v0;
    uint64_t v88 = v0;
    Swift::String v11 = CHHapticEventParameterIDHapticSharpness;
    swift_retain();
    id v12 = v9;
    float v13 = sub_1000FF7A8();
    swift_release();

    id v14 = objc_allocWithZone((Class)CHHapticEventParameter);
    *(float *)&double v15 = v13;
    id v16 = [v14 initWithParameterID:v11 value:v15];

    NSString v17 = *(void **)(*(void *)(v10 + v8) + 1432);
    id v18 = CHHapticEventParameterIDHapticSharpness;
    swift_retain();
    id v19 = v17;
    float v20 = sub_1000FF7A8();
    swift_release();

    id v21 = objc_allocWithZone((Class)CHHapticEventParameter);
    *(float *)&double v22 = v20;
    id v23 = [v21 initWithParameterID:v18 value:v22];

    sub_10000A38C(&qword_10035C280);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_10028F670;
    *(void *)(v24 + 32) = v95;
    *(void *)(v24 + 40) = v16;
    specialized Array._endMutation()();
    CHHapticEventType v25 = CHHapticEventTypeHapticContinuous;
    id v26 = objc_allocWithZone((Class)CHHapticEvent);
    sub_100019E10(0, &qword_10036F0B0);
    id v27 = v95;
    id v92 = v16;
    uint64_t v28 = v25;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v89 = [v26 initWithEventType:v28 parameters:isa relativeTime:0.0 duration:1.79769313e308];
    swift_bridgeObjectRelease();

    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_10028F670;
    *(void *)(v30 + 32) = v27;
    *(void *)(v30 + 40) = v23;
    v98[0] = (id)v30;
    specialized Array._endMutation()();
    uint64_t v31 = *(void **)(*(void *)(v88 + v8) + 1440);
    id v94 = v27;
    id v96 = v23;
    swift_retain();
    id v32 = v31;
    double v33 = sub_1000FEB94();
    swift_release();

    CHHapticEventType v34 = CHHapticEventTypeHapticContinuous;
    id v35 = objc_allocWithZone((Class)CHHapticEvent);
    id v36 = v34;
    swift_bridgeObjectRetain();
    Class v37 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v38 = [v35 initWithEventType:v36 parameters:v37 relativeTime:v33 duration:1.79769313e308];
    swift_bridgeObjectRelease();

    uint64_t v39 = *(void **)(*(void *)(v88 + v8) + 1416);
    uint64_t v40 = CHHapticDynamicParameterIDHapticIntensityControl;
    swift_retain();
    id v41 = v39;
    float v42 = sub_1000FF7A8();
    swift_release();

    id v43 = objc_allocWithZone((Class)CHHapticDynamicParameter);
    *(float *)&double v44 = v42;
    id v45 = [v43 initWithParameterID:v40 value:v44 relativeTime:0.0];

    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_100293270;
    *(void *)(v46 + 32) = v89;
    v98[0] = (id)v46;
    specialized Array._endMutation()();
    objc_allocWithZone((Class)CHHapticPattern);
    id v47 = v89;
    id v48 = sub_100225778();
    if (v1)
    {

      return;
    }
    uint64_t v91 = v48;
    uint64_t v50 = swift_allocObject();
    *(_OWORD *)(v50 + 16) = xmmword_100293270;
    *(void *)(v50 + 32) = v38;
    v98[0] = (id)v50;
    specialized Array._endMutation()();
    objc_allocWithZone((Class)CHHapticPattern);
    id v51 = v38;
    id v52 = sub_100225778();
    unint64_t v85 = v51;
    unint64_t v86 = v47;
    v98[0] = 0;
    id v53 = [v93 createAdvancedPlayerWithPattern:v91 error:v98];
    id v54 = v98[0];
    id v87 = v53;
    if (v53)
    {
      v98[0] = 0;
      id v55 = v54;
      id v56 = [v93 createAdvancedPlayerWithPattern:v52 error:v98];
      uint64_t v57 = v52;
      id v58 = v98[0];
      if (v56)
      {
        id v59 = v56;
        uint64_t v60 = swift_allocObject();
        *(_OWORD *)(v60 + 16) = xmmword_100293270;
        *(void *)(v60 + 32) = v45;
        v98[0] = (id)v60;
        specialized Array._endMutation()();
        id v61 = v98[0];
        id v62 = (unint64_t *)(v88 + OBJC_IVAR____TtC17proximitycontrold12HapticPlayer_hapticPlayers);
        swift_beginAccess();
        uint64_t v84 = v62;
        unint64_t v63 = *v62;
        id v64 = v58;
        id v90 = v45;
        swift_bridgeObjectRetain();
        sub_100226114((uint64_t)v61, v63);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10028F670;
        *(void *)(inited + 32) = v87;
        *(void *)(inited + 40) = v59;
        v97[0] = (id)inited;
        specialized Array._endMutation()();
        unint64_t v66 = (unint64_t)v97[0];
        id v67 = *(void **)(*(void *)(v88 + v8) + 1488);
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_retain();
        id v68 = v67;
        LOBYTE(v63) = sub_1000FD938();
        swift_release();

        if (v63)
        {
          swift_bridgeObjectRelease();
          id v69 = sub_1001F6C28();
          NSString v70 = String._bridgeToObjectiveC()();
          [v69 ulog:40 message:v70];

          uint64_t v71 = swift_allocObject();
          *(_OWORD *)(v71 + 16) = xmmword_100293270;
          *(void *)(v71 + 32) = v87;
          v97[0] = (id)v71;
          specialized Array._endMutation()();
          unint64_t v66 = (unint64_t)v97[0];
          swift_unknownObjectRetain();
        }
        Swift::String v72 = v96;
        swift_beginAccess();
        sub_10008E4E8(v66);
        swift_endAccess();
        unint64_t v73 = *v84;
        if (*v84 >> 62)
        {
LABEL_26:
          swift_bridgeObjectRetain_n();
          uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
          if (v74) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v74 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (v74)
          {
LABEL_13:
            uint64_t v75 = 4;
            do
            {
              Swift::String v72 = (void *)(v75 - 4);
              if ((v73 & 0xC000000000000001) != 0)
              {
                uint64_t v76 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
                uint64_t v77 = v75 - 3;
                if (__OFADD__(v72, 1)) {
                  goto LABEL_25;
                }
              }
              else
              {
                uint64_t v76 = *(void **)(v73 + 8 * v75);
                swift_unknownObjectRetain();
                uint64_t v77 = v75 - 3;
                if (__OFADD__(v72, 1))
                {
LABEL_25:
                  __break(1u);
                  goto LABEL_26;
                }
              }
              v97[0] = 0;
              if (![v76 startAtTime:v97 error:0.0])
              {
                id v83 = v97[0];
                _convertNSErrorToError(_:)();

                swift_willThrow();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();

                swift_bridgeObjectRelease_n();
                swift_unknownObjectRelease();
                return;
              }
              id v78 = v97[0];
              swift_unknownObjectRelease();
              ++v75;
              Swift::String v72 = v96;
            }
            while (v77 != v74);
          }
        }

        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        uint64_t v79 = v92;
      }
      else
      {
        id v82 = v98[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_unknownObjectRelease();

        uint64_t v79 = v94;
      }
    }
    else
    {
      uint64_t v80 = v52;
      id v81 = v98[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    sub_100225FE4();
    swift_allocError();
    *id v49 = 3;
    swift_willThrow();
  }
}

uint64_t getEnumTagSinglePayload for AirDropUIEvent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x3E) {
    goto LABEL_17;
  }
  if (a2 + 194 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 194) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 194;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 194;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 194;
    }
  }
LABEL_17:
  unsigned int v6 = (*a1 & 0x3C | (*a1 >> 6)) ^ 0x3F;
  if (v6 >= 0x3D) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

unsigned char *storeEnumTagSinglePayload for AirDropUIEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 194 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 194) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x3E) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x3D)
  {
    unsigned int v6 = ((a2 - 62) >> 8) + 1;
    *unint64_t result = a2 - 62;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10022714CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
        break;
    }
  }
  return result;
}

uint64_t sub_100227174(unsigned char *a1)
{
  int v1 = (char)*a1;
  if (v1 >= 0) {
    return *a1 >> 6;
  }
  else {
    return (v1 & 3u) + 2;
  }
}

unsigned char *sub_100227190(unsigned char *result)
{
  *result &= 0x3Fu;
  return result;
}

unsigned char *sub_1002271A0(unsigned char *result, unsigned int a2)
{
  if (a2 < 2) {
    *unint64_t result = *result & 3 | ((_BYTE)a2 << 6);
  }
  else {
    *unint64_t result = (a2 + 2) & 3 | 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropUIEvent()
{
  return &type metadata for AirDropUIEvent;
}

BOOL sub_1002271E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 6;
  BOOL v6 = v3 < 0x40 && v2 == v3;
  BOOL v7 = ((v3 ^ v2) & 0x3F) == 0;
  if ((v3 & 0xC0) != 0x40) {
    BOOL v7 = 0;
  }
  BOOL v8 = v3 == 128;
  if (v4 != 1) {
    BOOL v7 = v8;
  }
  if (v4) {
    return v7;
  }
  else {
    return v6;
  }
}

unint64_t sub_10022722C(uint64_t a1)
{
  unint64_t result = sub_100227254();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100227254()
{
  unint64_t result = qword_10036F0C0;
  if (!qword_10036F0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F0C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for NoticeStyle()
{
  return &type metadata for NoticeStyle;
}

uint64_t *sub_1002272BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    unsigned int v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8 + 8);
    *unsigned int v9 = *(uint64_t *)((char *)a2 + v8);
    v9[1] = v11;
    uint64_t v12 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
    __dst = (char *)v9 + v12;
    float v13 = &v10[v12];
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v15 = *(void *)(v14 - 8);
    id v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      uint64_t v17 = type metadata accessor for ShareableContentType(0);
      memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v19 = *(int *)(a3 + 24);
    float v20 = (uint64_t *)((char *)v4 + v19);
    id v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *float v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100227488(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for ShareableContent(0) + 20);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }

  return swift_bridgeObjectRelease();
}

void *sub_100227574(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *(void *)((char *)a2 + v6 + 8);
  void *v7 = *(void *)((char *)a2 + v6);
  v7[1] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
  uint64_t v11 = (char *)v7 + v10;
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = type metadata accessor for ShareableContentType(0);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = *(int *)(a3 + 24);
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1002276EC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (char *)a2 + v6;
  void *v7 = *(void *)((char *)a2 + v6);
  v7[1] = *(void *)((char *)a2 + v6 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
  uint64_t v10 = (char *)v7 + v9;
  uint64_t v11 = &v8[v9];
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = type metadata accessor for ShareableContentType(0);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1002278E8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(_OWORD *)((char *)a1 + v6) = *(_OWORD *)((char *)a2 + v6);
  uint64_t v9 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
  uint64_t v10 = &v7[v9];
  uint64_t v11 = &v8[v9];
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = type metadata accessor for ShareableContentType(0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_100227A30(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = *(void *)((char *)a2 + v7 + 8);
  *uint64_t v8 = *(void *)((char *)a2 + v7);
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
  uint64_t v12 = (char *)v8 + v11;
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  int v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = type metadata accessor for ShareableContentType(0);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  uint64_t v20 = *(int *)(a3 + 24);
  id v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *id v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100227BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100227C10);
}

uint64_t sub_100227C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for ShareableContent(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100227CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100227CD4);
}

uint64_t sub_100227CD4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for ShareableContent(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ShareableContentExposedContext(uint64_t a1)
{
  return sub_100014F7C(a1, qword_10036F120);
}

uint64_t sub_100227D9C()
{
  uint64_t result = type metadata accessor for ShareableContent(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100227E3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
        uint64_t v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        uint64_t v27 = type metadata accessor for ShareableContentExposedContext(0);
        uint64_t v11 = *(int *)(v27 + 20);
        uint64_t v12 = (uint64_t *)((char *)a1 + v11);
        uint64_t v13 = (char *)a2 + v11;
        uint64_t v14 = *(uint64_t *)((char *)a2 + v11 + 8);
        *uint64_t v12 = *(uint64_t *)((char *)a2 + v11);
        v12[1] = v14;
        uint64_t v15 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
        __dst = (char *)v12 + v15;
        int v16 = &v13[v15];
        uint64_t v17 = type metadata accessor for URL();
        uint64_t v18 = *(void *)(v17 - 8);
        uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v19(v16, 1, v17))
        {
          uint64_t v20 = type metadata accessor for ShareableContentType(0);
          memcpy(__dst, v16, *(void *)(*(void *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v16, v17);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
        }
        uint64_t v21 = *(int *)(v27 + 24);
        uint64_t v22 = (uint64_t *)((char *)a1 + v21);
        uint64_t v23 = (uint64_t *)((char *)a2 + v21);
        uint64_t v24 = v23[1];
        *uint64_t v22 = *v23;
        v22[1] = v24;
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = a2[1];
        *a1 = *a2;
        a1[1] = v6;
        uint64_t v7 = a2[2];
        uint64_t v8 = a2[3];
        a1[2] = v7;
        a1[3] = v8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1002280EC(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3:
      swift_bridgeObjectRelease();
      uint64_t v3 = a1 + *(int *)(type metadata accessor for ShareableContentExposedContext(0) + 20);
      swift_bridgeObjectRelease();
      uint64_t v4 = v3 + *(int *)(type metadata accessor for ShareableContent(0) + 20);
      uint64_t v5 = type metadata accessor for URL();
      uint64_t v6 = *(void *)(v5 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
      }
LABEL_5:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *sub_100228248(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v23 = type metadata accessor for ShareableContentExposedContext(0);
    uint64_t v8 = *(int *)(v23 + 20);
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(void *)((char *)a2 + v8 + 8);
    *uint64_t v9 = *(void *)((char *)a2 + v8);
    v9[1] = v11;
    uint64_t v12 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
    __dst = (char *)v9 + v12;
    uint64_t v13 = &v10[v12];
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v15 = *(void *)(v14 - 8);
    int v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      uint64_t v17 = type metadata accessor for ShareableContentType(0);
      memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v18 = *(int *)(v23 + 24);
    uint64_t v19 = (void *)((char *)a1 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
  }
  else
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    uint64_t v5 = a2[2];
    uint64_t v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_100228448(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_100228E64((uint64_t)a1, type metadata accessor for NoticeContent);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v18 = type metadata accessor for ShareableContentExposedContext(0);
      uint64_t v4 = *(int *)(v18 + 20);
      uint64_t v5 = (void *)((char *)a1 + v4);
      uint64_t v6 = (char *)a2 + v4;
      *uint64_t v5 = *(void *)((char *)a2 + v4);
      v5[1] = *(void *)((char *)a2 + v4 + 8);
      uint64_t v7 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
      __dst = (char *)v5 + v7;
      uint64_t v8 = &v6[v7];
      uint64_t v9 = type metadata accessor for URL();
      uint64_t v10 = *(void *)(v9 - 8);
      uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v11(v8, 1, v9))
      {
        uint64_t v12 = type metadata accessor for ShareableContentType(0);
        memcpy(__dst, v8, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
      }
      uint64_t v13 = *(int *)(v18 + 24);
      uint64_t v14 = (void *)((char *)a1 + v13);
      uint64_t v15 = (void *)((char *)a2 + v13);
      void *v14 = *v15;
      v14[1] = v15[1];
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for NoticeContent(uint64_t a1)
{
  return sub_100014F7C(a1, qword_10036F1D0);
}

_OWORD *sub_1002286B4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    *a1 = *a2;
    uint64_t v6 = type metadata accessor for ShareableContentExposedContext(0);
    uint64_t v7 = *(int *)(v6 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    *(_OWORD *)((char *)a1 + v7) = *(_OWORD *)((char *)a2 + v7);
    uint64_t v10 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
    uint64_t v11 = &v8[v10];
    uint64_t v12 = &v9[v10];
    uint64_t v13 = type metadata accessor for URL();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = type metadata accessor for ShareableContentType(0);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 24));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *sub_100228850(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100228E64((uint64_t)a1, type metadata accessor for NoticeContent);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      *a1 = *a2;
      uint64_t v6 = type metadata accessor for ShareableContentExposedContext(0);
      uint64_t v7 = *(int *)(v6 + 20);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      *(_OWORD *)((char *)a1 + v7) = *(_OWORD *)((char *)a2 + v7);
      uint64_t v10 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
      uint64_t v11 = &v8[v10];
      uint64_t v12 = &v9[v10];
      uint64_t v13 = type metadata accessor for URL();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = type metadata accessor for ShareableContentType(0);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 24));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100228A18()
{
  uint64_t result = type metadata accessor for ShareableContentExposedContext(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_100228AB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v9 = *a2;
      unint64_t v8 = a2[1];
      sub_10001F8BC(v9, v8);
      *a1 = v9;
      a1[1] = v8;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100228BD8(uint64_t *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v5 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(a1, v5);
  }
  else if (!result)
  {
    uint64_t v3 = *a1;
    unint64_t v4 = a1[1];
    return sub_10000DBEC(v3, v4);
  }
  return result;
}

uint64_t *sub_100228C78(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v9 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = *a2;
    unint64_t v7 = a2[1];
    sub_10001F8BC(v8, v7);
    *a1 = v8;
    a1[1] = v7;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t *sub_100228D5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100228E64((uint64_t)a1, type metadata accessor for NoticeTapAction);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v8 = *a2;
      unint64_t v7 = a2[1];
      sub_10001F8BC(v8, v7);
      *a1 = v8;
      a1[1] = v7;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100228E64(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for NoticeTapAction(uint64_t a1)
{
  return sub_100014F7C(a1, qword_10036F278);
}

void *sub_100228EE4(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100228F9C(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100228E64((uint64_t)a1, type metadata accessor for NoticeTapAction);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100229078()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_10022910C(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = a3[6];
    uint64_t v9 = (uint64_t *)(a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for NoticeTapAction(0);
    swift_bridgeObjectRetain();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v16 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v16 - 8) + 16))(v9, v10, v16);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      uint64_t v14 = *v10;
      unint64_t v13 = v10[1];
      sub_10001F8BC(v14, v13);
      *uint64_t v9 = v14;
      v9[1] = v13;
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v17 = a3[8];
    *((unsigned char *)v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    uint64_t v18 = (void *)((char *)v4 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    type metadata accessor for NoticeContent(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
        uint64_t v23 = v19[1];
        *uint64_t v18 = *v19;
        v18[1] = v23;
        uint64_t v40 = type metadata accessor for ShareableContentExposedContext(0);
        uint64_t v24 = *(int *)(v40 + 20);
        CHHapticEventType v25 = (void *)((char *)v18 + v24);
        id v26 = (char *)v19 + v24;
        uint64_t v27 = *(void *)((char *)v19 + v24 + 8);
        *CHHapticEventType v25 = *(void *)((char *)v19 + v24);
        v25[1] = v27;
        uint64_t v28 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
        __dst = (char *)v25 + v28;
        uint64_t v29 = &v26[v28];
        uint64_t v30 = type metadata accessor for URL();
        uint64_t v31 = *(void *)(v30 - 8);
        id v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v32(v29, 1, v30))
        {
          uint64_t v33 = type metadata accessor for ShareableContentType(0);
          memcpy(__dst, v29, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v31 + 16))(__dst, v29, v30);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
        }
        uint64_t v34 = *(int *)(v40 + 24);
        id v35 = (void *)((char *)v18 + v34);
        id v36 = (void *)((char *)v19 + v34);
        uint64_t v37 = v36[1];
        void *v35 = *v36;
        v35[1] = v37;
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v20 = v19[1];
        *uint64_t v18 = *v19;
        v18[1] = v20;
        uint64_t v21 = v19[2];
        uint64_t v22 = v19[3];
        v18[2] = v21;
        v18[3] = v22;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_1002294C0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  type metadata accessor for NoticeTapAction(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
  }
  else if (!EnumCaseMultiPayload)
  {
    sub_10000DBEC(*(void *)v4, *(void *)(v4 + 8));
  }
  uint64_t v7 = a1 + *(int *)(a2 + 32);
  type metadata accessor for NoticeContent(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 3:
      swift_bridgeObjectRelease();
      uint64_t v9 = v7 + *(int *)(type metadata accessor for ShareableContentExposedContext(0) + 20);
      swift_bridgeObjectRelease();
      uint64_t v10 = v9 + *(int *)(type metadata accessor for ShareableContent(0) + 20);
      uint64_t v11 = type metadata accessor for URL();
      uint64_t v12 = *(void *)(v11 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      }
LABEL_9:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002296AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = a3[6];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = type metadata accessor for NoticeTapAction(0);
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(v8, v9, v14);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v13 = *v9;
    unint64_t v12 = v9[1];
    sub_10001F8BC(v13, v12);
    *uint64_t v8 = v13;
    v8[1] = v12;
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v15 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  type metadata accessor for NoticeContent(0);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v21 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v21;
    uint64_t v37 = type metadata accessor for ShareableContentExposedContext(0);
    uint64_t v22 = *(int *)(v37 + 20);
    uint64_t v23 = (void *)((char *)v16 + v22);
    uint64_t v24 = (char *)v17 + v22;
    uint64_t v25 = *(void *)((char *)v17 + v22 + 8);
    *uint64_t v23 = *(void *)((char *)v17 + v22);
    v23[1] = v25;
    uint64_t v26 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
    __dst = (char *)v23 + v26;
    id v36 = &v24[v26];
    uint64_t v27 = type metadata accessor for URL();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29(v36, 1, v27))
    {
      uint64_t v30 = type metadata accessor for ShareableContentType(0);
      memcpy(__dst, v36, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dst, v36, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
    }
    uint64_t v31 = *(int *)(v37 + 24);
    id v32 = (void *)((char *)v16 + v31);
    uint64_t v33 = (void *)((char *)v17 + v31);
    uint64_t v34 = v33[1];
    void *v32 = *v33;
    v32[1] = v34;
  }
  else
  {
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = v17[2];
    uint64_t v20 = v17[3];
    v16[2] = v19;
    v16[3] = v20;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1002299B4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
    return a1;
  }
  uint64_t v6 = a3[6];
  uint64_t v7 = (uint64_t *)(a1 + v6);
  uint64_t v8 = (uint64_t *)(a2 + v6);
  sub_100228E64(a1 + v6, type metadata accessor for NoticeTapAction);
  uint64_t v9 = type metadata accessor for NoticeTapAction(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v13 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(v7, v8, v13);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
      goto LABEL_9;
    }
    uint64_t v12 = *v8;
    unint64_t v11 = v8[1];
    sub_10001F8BC(v12, v11);
    uint64_t *v7 = v12;
    v7[1] = v11;
  }
  swift_storeEnumTagMultiPayload();
LABEL_9:
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  sub_100228E64(a1 + v14, type metadata accessor for NoticeContent);
  type metadata accessor for NoticeContent(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
      *uint64_t v15 = *v16;
      v15[1] = v16[1];
      uint64_t v31 = type metadata accessor for ShareableContentExposedContext(0);
      uint64_t v17 = *(int *)(v31 + 20);
      uint64_t v18 = (void *)((char *)v15 + v17);
      uint64_t v19 = (char *)v16 + v17;
      *uint64_t v18 = *(void *)((char *)v16 + v17);
      v18[1] = *(void *)((char *)v16 + v17 + 8);
      uint64_t v20 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
      __dst = (char *)v18 + v20;
      uint64_t v21 = &v19[v20];
      uint64_t v22 = type metadata accessor for URL();
      uint64_t v23 = *(void *)(v22 - 8);
      uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v24(v21, 1, v22))
      {
        uint64_t v25 = type metadata accessor for ShareableContentType(0);
        memcpy(__dst, v21, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 16))(__dst, v21, v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
      }
      uint64_t v26 = *(int *)(v31 + 24);
      uint64_t v27 = (void *)((char *)v15 + v26);
      uint64_t v28 = (void *)((char *)v16 + v26);
      *uint64_t v27 = *v28;
      v27[1] = v28[1];
      swift_bridgeObjectRetain();
      break;
    default:
      *uint64_t v15 = *v16;
      v15[1] = v16[1];
      v15[2] = v16[2];
      v15[3] = v16[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100229DC0(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for NoticeTapAction(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for NoticeContent(0);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    *uint64_t v12 = *v13;
    uint64_t v15 = type metadata accessor for ShareableContentExposedContext(0);
    uint64_t v16 = *(int *)(v15 + 20);
    uint64_t v17 = (char *)v12 + v16;
    uint64_t v18 = (char *)v13 + v16;
    *(_OWORD *)((char *)v12 + v16) = *(_OWORD *)((char *)v13 + v16);
    uint64_t v19 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
    uint64_t v20 = &v17[v19];
    uint64_t v21 = &v18[v19];
    uint64_t v22 = type metadata accessor for URL();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = type metadata accessor for ShareableContentType(0);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    *(_OWORD *)((char *)v12 + *(int *)(v15 + 24)) = *(_OWORD *)((char *)v13 + *(int *)(v15 + 24));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10022A030(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  }
  else
  {
    uint64_t v7 = a3[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_100228E64(a1 + v7, type metadata accessor for NoticeTapAction);
    uint64_t v10 = type metadata accessor for NoticeTapAction(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    uint64_t v12 = a3[8];
    *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
    uint64_t v13 = (_OWORD *)(a1 + v12);
    uint64_t v14 = (_OWORD *)(a2 + v12);
    sub_100228E64(a1 + v12, type metadata accessor for NoticeContent);
    uint64_t v15 = type metadata accessor for NoticeContent(0);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      *uint64_t v13 = *v14;
      uint64_t v16 = type metadata accessor for ShareableContentExposedContext(0);
      uint64_t v17 = *(int *)(v16 + 20);
      uint64_t v18 = (char *)v13 + v17;
      uint64_t v19 = (char *)v14 + v17;
      *(_OWORD *)((char *)v13 + v17) = *(_OWORD *)((char *)v14 + v17);
      uint64_t v20 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
      uint64_t v21 = &v18[v20];
      uint64_t v22 = &v19[v20];
      uint64_t v23 = type metadata accessor for URL();
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = type metadata accessor for ShareableContentType(0);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      *(_OWORD *)((char *)v13 + *(int *)(v16 + 24)) = *(_OWORD *)((char *)v14 + *(int *)(v16 + 24));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10022A2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10022A30C);
}

uint64_t sub_10022A30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for NoticeTapAction(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for NoticeContent(0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10022A438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10022A44C);
}

uint64_t sub_10022A44C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for NoticeTapAction(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for NoticeContent(0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for NoticeContext(uint64_t a1)
{
  return sub_100014F7C(a1, qword_10036F308);
}

uint64_t sub_10022A598()
{
  uint64_t result = type metadata accessor for NoticeTapAction(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NoticeContent(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_10022A67C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  type metadata accessor for LeaderNoticeTapAction(0);
  sub_100231240(&qword_10036F518, (void (*)(uint64_t))type metadata accessor for LeaderNoticeTapAction);
  uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v4 = v3;
  swift_release();
  *a1 = v2;
  a1[1] = v4;
  type metadata accessor for NoticeTapAction(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10022A7D4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000A38C(&qword_10036F4F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D6E4(a1, a1[3]);
  sub_1002317C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[14] = *(unsigned char *)(v3 + 16);
    v11[13] = 1;
    sub_1002318C4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v9 = type metadata accessor for NoticeContext(0);
    v11[12] = 2;
    type metadata accessor for NoticeTapAction(0);
    sub_100231240(&qword_10036F500, (void (*)(uint64_t))type metadata accessor for NoticeTapAction);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[11] = *(unsigned char *)(v3 + *(int *)(v9 + 28));
    v11[10] = 3;
    sub_100231918();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[9] = 4;
    type metadata accessor for NoticeContent(0);
    sub_100231240(&qword_10036F510, (void (*)(uint64_t))type metadata accessor for NoticeContent);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10022AA8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v24 = type metadata accessor for NoticeContent(0);
  __chkstk_darwin(v24);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NoticeTapAction(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036F4C0);
  uint64_t v25 = *(void *)(v8 - 8);
  uint64_t v26 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (int *)type metadata accessor for NoticeContext(0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  uint64_t v28 = a1;
  sub_10000D6E4(a1, v14);
  sub_1002317C8();
  uint64_t v27 = v10;
  uint64_t v15 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    return sub_10000CC5C((uint64_t)v28);
  }
  uint64_t v16 = (uint64_t)v7;
  uint64_t v18 = v25;
  uint64_t v17 = v26;
  uint64_t v29 = v4;
  char v36 = 0;
  *(void *)uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v13 + 1) = v19;
  char v34 = 1;
  sub_10023181C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v13[16] = v35;
  char v33 = 2;
  sub_100231240(&qword_10036F4D8, (void (*)(uint64_t))type metadata accessor for NoticeTapAction);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_100231184(v16, (uint64_t)&v13[v11[6]], type metadata accessor for NoticeTapAction);
  char v31 = 3;
  sub_100231870();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v13[v11[7]] = v32;
  char v30 = 4;
  sub_100231240(&qword_10036F4E8, (void (*)(uint64_t))type metadata accessor for NoticeContent);
  uint64_t v21 = (uint64_t)v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v27, v17);
  sub_100231184(v21, (uint64_t)&v13[v11[8]], type metadata accessor for NoticeContent);
  sub_1002310C8((uint64_t)v13, v23, type metadata accessor for NoticeContext);
  sub_10000CC5C((uint64_t)v28);
  return sub_100228E64((uint64_t)v13, type metadata accessor for NoticeContext);
}

uint64_t sub_10022AF54()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656C797473;
      break;
    case 2:
      uint64_t result = 0x6F69746341706174;
      break;
    case 3:
      uint64_t result = 0x6E65746E49706174;
      break;
    case 4:
      uint64_t result = 0x746E65746E6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10022AFFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100233168(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10022B024(uint64_t a1)
{
  unint64_t v2 = sub_1002317C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022B060(uint64_t a1)
{
  unint64_t v2 = sub_1002317C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022B09C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10022AA8C(a1, a2);
}

uint64_t sub_10022B0B4(void *a1)
{
  return sub_10022A7D4(a1);
}

uint64_t sub_10022B0D0(char *a1, char *a2)
{
  return sub_10005DB88(*a1, *a2);
}

Swift::Int sub_10022B0DC()
{
  return Hasher._finalize()();
}

uint64_t sub_10022B168()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10022B1E0()
{
  return Hasher._finalize()();
}

uint64_t sub_10022B268@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10031E8F8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_10022B2C8(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x647261646E617473;
  if (*v1) {
    uint64_t v2 = 0x4866666F646E6168;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xEB00000000746E69;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_10022B310(void *a1@<X8>)
{
  *a1 = &off_10031E4E0;
}

uint64_t sub_10022B320()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10022B380()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10022B3D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NoticeTapAction(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002310C8(v1, (uint64_t)v8, type metadata accessor for NoticeTapAction);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
      v14[0] = 0x284C52556E65706FLL;
      v14[1] = 0xE800000000000000;
      sub_100231240(&qword_100363918, (void (*)(uint64_t))&type metadata accessor for URL);
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._countAndFlagsBits = 41;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      uint64_t v12 = v14[0];
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      return 1701736302;
    }
  }
  else
  {
    sub_10000DBEC(*(void *)v8, *((void *)v8 + 1));
    return 0xD000000000000014;
  }
  return v12;
}

uint64_t sub_10022B5F8(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036F4A0);
  uint64_t v38 = *(void *)(v2 - 8);
  uint64_t v39 = v2;
  __chkstk_darwin(v2);
  char v35 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v37 = v4;
  __chkstk_darwin(v4);
  char v34 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036F4A8);
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036F4B0);
  uint64_t v31 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  Swift::String v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NoticeTapAction(0);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = sub_10000A38C(&qword_10036F4B8);
  uint64_t v41 = *(void *)(v15 - 8);
  uint64_t v42 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100231678();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1002310C8(v40, (uint64_t)v14, type metadata accessor for NoticeTapAction);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v20 = v36;
      uint64_t v19 = v37;
      uint64_t v21 = v34;
      (*(void (**)(char *, uint64_t *, uint64_t))(v36 + 32))(v34, v14, v37);
      LOBYTE(v43) = 2;
      sub_1002316CC();
      uint64_t v22 = v35;
      uint64_t v23 = v42;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_100231240(&qword_100368F30, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v24 = v39;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v24);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v19);
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v17, v23);
    }
    else
    {
      LOBYTE(v43) = 0;
      sub_100231774();
      uint64_t v30 = v42;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v9);
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v17, v30);
    }
  }
  else
  {
    uint64_t v26 = *v14;
    unint64_t v27 = v14[1];
    LOBYTE(v43) = 1;
    sub_100231720();
    uint64_t v28 = v42;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v43 = v26;
    unint64_t v44 = v27;
    sub_100155470();
    uint64_t v29 = v33;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v29);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v28);
    return sub_10000DBEC(v26, v27);
  }
}

uint64_t sub_10022BB94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10036F460);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  uint64_t v50 = v4;
  __chkstk_darwin(v3);
  id v55 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036F468);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  uint64_t v48 = v7;
  __chkstk_darwin(v6);
  id v54 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036F470);
  uint64_t v45 = *(void *)(v9 - 8);
  uint64_t v46 = v9;
  __chkstk_darwin(v9);
  id v53 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_10036F478);
  uint64_t v52 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for NoticeTapAction(0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v43 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v43 - v21;
  uint64_t v23 = a1[3];
  id v56 = a1;
  sub_10000D6E4(a1, v23);
  sub_100231678();
  uint64_t v24 = (uint64_t)v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v24)
  {
    uint64_t v43 = v20;
    unint64_t v44 = v17;
    uint64_t v25 = v53;
    uint64_t v26 = v54;
    unint64_t v27 = v55;
    id v58 = v22;
    uint64_t v28 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v29 = (char *)v28;
    if (*(void *)(v28 + 16) == 1)
    {
      if (*(unsigned char *)(v28 + 32))
      {
        if (*(unsigned char *)(v28 + 32) == 1)
        {
          LOBYTE(v57) = 1;
          sub_100231720();
          uint64_t v30 = v26;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          sub_10015531C();
          uint64_t v31 = v47;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v30, v31);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v52 + 8))(v13, v11);
          uint64_t v32 = v43;
          _OWORD *v43 = v57;
          swift_storeEnumTagMultiPayload();
          uint64_t v33 = (uint64_t)v32;
        }
        else
        {
          LOBYTE(v57) = 2;
          sub_1002316CC();
          uint64_t v38 = v27;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          id v53 = (char *)v14;
          id v54 = v29;
          type metadata accessor for URL();
          sub_100231240(&qword_100368E90, (void (*)(uint64_t))&type metadata accessor for URL);
          uint64_t v40 = (uint64_t)v44;
          uint64_t v41 = v49;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v42 = v52;
          (*(void (**)(char *, uint64_t))(v50 + 8))(v38, v41);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v11);
          swift_storeEnumTagMultiPayload();
          uint64_t v33 = v40;
        }
        uint64_t v37 = (uint64_t)v58;
        sub_100231184(v33, (uint64_t)v58, type metadata accessor for NoticeTapAction);
      }
      else
      {
        LOBYTE(v57) = 0;
        sub_100231774();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v25, v46);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v52 + 8))(v13, v11);
        uint64_t v37 = (uint64_t)v58;
        swift_storeEnumTagMultiPayload();
      }
      sub_100231184(v37, v51, type metadata accessor for NoticeTapAction);
    }
    else
    {
      uint64_t v34 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v36 = v35;
      sub_10000A38C(&qword_10035FAC0);
      *uint64_t v36 = v14;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v34 - 8) + 104))(v36, enum case for DecodingError.typeMismatch(_:), v34);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v13, v11);
    }
  }
  return sub_10000CC5C((uint64_t)v56);
}

uint64_t sub_10022C2EC()
{
  uint64_t v1 = 0x634172656461656CLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x4C52556E65706FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701736302;
  }
}

uint64_t sub_10022C348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100233378(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10022C370(uint64_t a1)
{
  unint64_t v2 = sub_100231678();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022C3AC(uint64_t a1)
{
  unint64_t v2 = sub_100231678();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022C3E8(uint64_t a1)
{
  unint64_t v2 = sub_100231720();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022C424(uint64_t a1)
{
  unint64_t v2 = sub_100231720();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022C460(uint64_t a1)
{
  unint64_t v2 = sub_100231774();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022C49C(uint64_t a1)
{
  unint64_t v2 = sub_100231774();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022C4D8(uint64_t a1)
{
  unint64_t v2 = sub_1002316CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022C514(uint64_t a1)
{
  unint64_t v2 = sub_1002316CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022C550@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10022BB94(a1, a2);
}

uint64_t sub_10022C568(void *a1)
{
  return sub_10022B5F8(a1);
}

uint64_t sub_10022C588()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LeaderNoticeTapAction(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1002310C8(v1, (uint64_t)v8, type metadata accessor for LeaderNoticeTapAction);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    uint64_t v10 = 0x726566736E617274;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = *v8;
      uint64_t v12 = (void *)v8[1];
      v18[0] = 0;
      v18[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)v18, "transferCall(");
      HIWORD(v18[1]) = -4864;
      v13._countAndFlagsBits = v11;
      v13._object = v12;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = 41;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      return v18[0];
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v5, v8, v2);
    strcpy((char *)v18, "openURL(");
    BYTE1(v18[1]) = 0;
    WORD1(v18[1]) = 0;
    HIDWORD(v18[1]) = -402653184;
    sub_100231240(&qword_100363918, (void (*)(uint64_t))&type metadata accessor for URL);
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 41;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    uint64_t v10 = v18[0];
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v10;
}

uint64_t sub_10022C7FC(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036F7E0);
  uint64_t v38 = *(void *)(v2 - 8);
  uint64_t v39 = v2;
  __chkstk_darwin(v2);
  uint64_t v32 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10036F7E8);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10000A38C(&qword_10036F7F0);
  uint64_t v31 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for LeaderNoticeTapAction(0);
  __chkstk_darwin(v12);
  Swift::String v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A38C(&qword_10036F7F8);
  uint64_t v41 = *(void *)(v15 - 8);
  uint64_t v42 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100234494();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1002310C8(v40, (uint64_t)v14, type metadata accessor for LeaderNoticeTapAction);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      char v44 = 1;
      sub_10023453C();
      uint64_t v19 = v42;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v36;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v20);
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v17, v19);
    }
    else
    {
      char v45 = 2;
      sub_1002344E8();
      uint64_t v28 = v32;
      uint64_t v29 = v42;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v39);
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v17, v29);
    }
  }
  else
  {
    uint64_t v22 = v31;
    uint64_t v23 = v33;
    uint64_t v24 = v14;
    uint64_t v25 = v34;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v11, v24, v34);
    char v43 = 0;
    sub_100234590();
    uint64_t v26 = v42;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_100231240(&qword_100368F30, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v27 = v37;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v27);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v17, v26);
  }
}

uint64_t sub_10022CD6C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10036F7A0);
  uint64_t v51 = *(void *)(v3 - 8);
  uint64_t v52 = v3;
  __chkstk_darwin(v3);
  long long v57 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000A38C(&qword_10036F7A8);
  uint64_t v53 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  id v56 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036F7B0);
  uint64_t v49 = *(void *)(v6 - 8);
  uint64_t v50 = v6;
  __chkstk_darwin(v6);
  id v55 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036F7B8);
  uint64_t v54 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LeaderNoticeTapAction(0);
  uint64_t v12 = __chkstk_darwin(v11);
  Swift::String v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v45 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v45 - v18;
  uint64_t v20 = a1[3];
  id v59 = a1;
  sub_10000D6E4(a1, v20);
  sub_100234494();
  uint64_t v21 = v60;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21) {
    return sub_10000CC5C((uint64_t)v59);
  }
  char v45 = v14;
  uint64_t v46 = v17;
  uint64_t v22 = v55;
  uint64_t v23 = v56;
  uint64_t v47 = v19;
  uint64_t v60 = v11;
  uint64_t v24 = v57;
  uint64_t v25 = v58;
  uint64_t v26 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v26 + 16) != 1)
  {
    uint64_t v33 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v35 = v34;
    sub_10000A38C(&qword_10035FAC0);
    uint64_t *v35 = v60;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v33 - 8) + 104))(v35, enum case for DecodingError.typeMismatch(_:), v33);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v10, v8);
    return sub_10000CC5C((uint64_t)v59);
  }
  if (*(unsigned char *)(v26 + 32))
  {
    if (*(unsigned char *)(v26 + 32) == 1)
    {
      char v62 = 1;
      sub_10023453C();
      uint64_t v27 = v23;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v28 = v8;
      uint64_t v29 = v48;
      uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v31 = v27;
      uint64_t v32 = v54;
      uint64_t v42 = v41;
      long long v57 = (char *)v30;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v29);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v28);
      uint64_t v43 = (uint64_t)v45;
      *char v45 = v57;
      *(void *)(v43 + 8) = v42;
      swift_storeEnumTagMultiPayload();
      uint64_t v44 = (uint64_t)v47;
      sub_100231184(v43, (uint64_t)v47, type metadata accessor for LeaderNoticeTapAction);
    }
    else
    {
      char v63 = 2;
      sub_1002344E8();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v24, v52);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v10, v8);
      uint64_t v44 = (uint64_t)v47;
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v39 = (uint64_t)v59;
  }
  else
  {
    char v61 = 0;
    sub_100234590();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for URL();
    sub_100231240(&qword_100368E90, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v36 = (uint64_t)v46;
    uint64_t v37 = v8;
    uint64_t v38 = v50;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v22, v38);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v10, v37);
    uint64_t v39 = (uint64_t)v59;
    swift_storeEnumTagMultiPayload();
    uint64_t v44 = (uint64_t)v47;
    sub_100231184(v36, (uint64_t)v47, type metadata accessor for LeaderNoticeTapAction);
  }
  sub_100231184(v44, v25, type metadata accessor for LeaderNoticeTapAction);
  return sub_10000CC5C(v39);
}

uint64_t sub_10022D500()
{
  if (*v0) {
    return 0x726566736E617274;
  }
  else {
    return 0x4C52556E65706FLL;
  }
}

uint64_t sub_10022D570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002334D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10022D598(uint64_t a1)
{
  unint64_t v2 = sub_100234494();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022D5D4(uint64_t a1)
{
  unint64_t v2 = sub_100234494();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022D610(uint64_t a1)
{
  unint64_t v2 = sub_100234590();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022D64C(uint64_t a1)
{
  unint64_t v2 = sub_100234590();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022D688()
{
  return 1684632949;
}

uint64_t sub_10022D698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1684632949 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10022D720(uint64_t a1)
{
  unint64_t v2 = sub_10023453C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022D75C(uint64_t a1)
{
  unint64_t v2 = sub_10023453C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022D798(uint64_t a1)
{
  unint64_t v2 = sub_1002344E8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022D7D4(uint64_t a1)
{
  unint64_t v2 = sub_1002344E8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022D810@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10022CD6C(a1, a2);
}

uint64_t sub_10022D828(void *a1)
{
  return sub_10022C7FC(a1);
}

uint64_t sub_10022D848(void *a1, int a2)
{
  int v24 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10036F780);
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  __chkstk_darwin(v3);
  uint64_t v21 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10036F788);
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin(v5);
  char v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036F790);
  uint64_t v18 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A38C(&qword_10036F798);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  Swift::String v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100234344();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v24)
  {
    if (v24 == 1)
    {
      char v26 = 1;
      sub_1002343EC();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v20);
    }
    else
    {
      char v27 = 2;
      sub_100234398();
      uint64_t v15 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    }
  }
  else
  {
    char v25 = 0;
    sub_100234440();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10022DBB4(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036F418);
  uint64_t v52 = *(void *)(v2 - 8);
  uint64_t v53 = v2;
  __chkstk_darwin(v2);
  uint64_t v51 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for ShareableContentExposedContext(0);
  __chkstk_darwin(v49);
  uint64_t v50 = (uint64_t)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10036F420);
  uint64_t v47 = *(void *)(v5 - 8);
  uint64_t v48 = v5;
  __chkstk_darwin(v5);
  uint64_t v46 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036F428);
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10036F430);
  uint64_t v43 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for NoticeContent(0);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = sub_10000A38C(&qword_10036F438);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v54 = v16;
  uint64_t v55 = v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1002312DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1002310C8(v60, (uint64_t)v15, type metadata accessor for NoticeContent);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v38 = *v15;
      uint64_t v37 = v15[1];
      uint64_t v40 = v15[2];
      uint64_t v39 = v15[3];
      LOBYTE(v56) = 1;
      sub_10023142C();
      uint64_t v41 = v54;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v56 = v38;
      uint64_t v57 = v37;
      uint64_t v58 = v40;
      uint64_t v59 = v39;
      sub_1002315D0();
      uint64_t v42 = v45;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v42);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v19, v41);
      goto LABEL_6;
    case 2u:
      uint64_t v25 = *v15;
      uint64_t v26 = v15[1];
      uint64_t v27 = v15[2];
      uint64_t v28 = v15[3];
      LOBYTE(v56) = 2;
      sub_100231384();
      uint64_t v29 = v46;
      uint64_t v30 = v54;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v56 = v25;
      uint64_t v57 = v26;
      uint64_t v58 = v27;
      uint64_t v59 = v28;
      sub_10023157C();
      uint64_t v31 = v48;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v29, v31);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v19, v30);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 3u:
      uint64_t v32 = v50;
      sub_100231184((uint64_t)v15, v50, type metadata accessor for ShareableContentExposedContext);
      LOBYTE(v56) = 3;
      sub_100231330();
      uint64_t v33 = v51;
      uint64_t v34 = v54;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_100231240(&qword_10036F440, (void (*)(uint64_t))type metadata accessor for ShareableContentExposedContext);
      uint64_t v35 = v53;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v33, v35);
      sub_100228E64(v32, type metadata accessor for ShareableContentExposedContext);
      return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v19, v34);
    default:
      uint64_t v21 = *v15;
      uint64_t v20 = v15[1];
      uint64_t v23 = v15[2];
      uint64_t v22 = v15[3];
      LOBYTE(v56) = 0;
      sub_1002314D4();
      uint64_t v24 = v54;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v56 = v21;
      uint64_t v57 = v20;
      uint64_t v58 = v23;
      uint64_t v59 = v22;
      sub_100231624();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v10);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v19, v24);
LABEL_6:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10022E2B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v65 = sub_10000A38C(&qword_10036F3A8);
  uint64_t v70 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v74 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000A38C(&qword_10036F3B0);
  uint64_t v66 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  unint64_t v73 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10036F3B8);
  uint64_t v62 = *(void *)(v5 - 8);
  uint64_t v63 = v5;
  __chkstk_darwin(v5);
  id v69 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036F3C0);
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v61 = v7;
  __chkstk_darwin(v7);
  id v68 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036F3C8);
  uint64_t v71 = *(void *)(v9 - 8);
  uint64_t v72 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for NoticeContent(0);
  uint64_t v12 = __chkstk_darwin(v75);
  uint64_t v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v56 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v56 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v56 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v56 - v24;
  uint64_t v26 = a1[3];
  uint64_t v76 = a1;
  sub_10000D6E4(a1, v26);
  sub_1002312DC();
  uint64_t v27 = (uint64_t)v80;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v27)
  {
    uint64_t v57 = v23;
    uint64_t v58 = v20;
    uint64_t v59 = v17;
    uint64_t v28 = (uint64_t)v14;
    uint64_t v29 = v73;
    uint64_t v30 = v74;
    uint64_t v80 = v25;
    uint64_t v31 = v72;
    uint64_t v32 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v32 + 16) == 1)
    {
      uint64_t v33 = v70;
      switch(*(unsigned char *)(v32 + 32))
      {
        case 1:
          LOBYTE(v77) = 1;
          sub_10023142C();
          uint64_t v43 = v69;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          sub_100231480();
          uint64_t v44 = v63;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v62 + 8))(v43, v44);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v71 + 8))(v11, v31);
          uint64_t v45 = v78;
          uint64_t v46 = v79;
          uint64_t v38 = (uint64_t)v58;
          *uint64_t v58 = v77;
          *(void *)(v38 + 16) = v45;
          *(void *)(v38 + 24) = v46;
          goto LABEL_8;
        case 2:
          LOBYTE(v77) = 2;
          sub_100231384();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          sub_1002313D8();
          uint64_t v48 = v64;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v49 = v71;
          (*(void (**)(char *, uint64_t))(v66 + 8))(v29, v48);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v49 + 8))(v11, v31);
          uint64_t v53 = v78;
          uint64_t v54 = v79;
          uint64_t v55 = (uint64_t)v59;
          *uint64_t v59 = v77;
          *(void *)(v55 + 16) = v53;
          *(void *)(v55 + 24) = v54;
          swift_storeEnumTagMultiPayload();
          uint64_t v47 = (uint64_t)v80;
          sub_100231184(v55, (uint64_t)v80, type metadata accessor for NoticeContent);
          break;
        case 3:
          LOBYTE(v77) = 3;
          sub_100231330();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          type metadata accessor for ShareableContentExposedContext(0);
          uint64_t v50 = v30;
          sub_100231240(&qword_10036F3E0, (void (*)(uint64_t))type metadata accessor for ShareableContentExposedContext);
          uint64_t v51 = v65;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v52 = v71;
          unint64_t v73 = 0;
          (*(void (**)(char *, uint64_t))(v33 + 8))(v50, v51);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v52 + 8))(v11, v31);
          swift_storeEnumTagMultiPayload();
          uint64_t v47 = (uint64_t)v80;
          sub_100231184(v28, (uint64_t)v80, type metadata accessor for NoticeContent);
          break;
        default:
          LOBYTE(v77) = 0;
          sub_1002314D4();
          uint64_t v34 = v68;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          sub_100231528();
          uint64_t v35 = v61;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v60 + 8))(v34, v35);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v71 + 8))(v11, v31);
          uint64_t v36 = v78;
          uint64_t v37 = v79;
          uint64_t v38 = (uint64_t)v57;
          _OWORD *v57 = v77;
          *(void *)(v38 + 16) = v36;
          *(void *)(v38 + 24) = v37;
LABEL_8:
          swift_storeEnumTagMultiPayload();
          uint64_t v47 = (uint64_t)v80;
          sub_100231184(v38, (uint64_t)v80, type metadata accessor for NoticeContent);
          break;
      }
      sub_100231184(v47, v67, type metadata accessor for NoticeContent);
    }
    else
    {
      uint64_t v39 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v41 = v40;
      sub_10000A38C(&qword_10035FAC0);
      *uint64_t v41 = v75;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v39 - 8) + 104))(v41, enum case for DecodingError.typeMismatch(_:), v39);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v11, v31);
    }
  }
  return sub_10000CC5C((uint64_t)v76);
}

uint64_t sub_10022ECB4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10022ED68(a1, a2, a3, a4, a5, &qword_10036F738, (void (*)(void *, uint64_t, uint64_t))sub_1002342F0);
}

uint64_t sub_10022ECF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10022ED68(a1, a2, a3, a4, a5, &qword_10036F730, (void (*)(void *, uint64_t, uint64_t))sub_10023429C);
}

uint64_t sub_10022ED2C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10022ED68(a1, a2, a3, a4, a5, &qword_10036F728, (void (*)(void *, uint64_t, uint64_t))sub_100234248);
}

uint64_t sub_10022ED68(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, void (*a7)(void *, uint64_t, uint64_t))
{
  void v18[2] = a3;
  v18[0] = a4;
  v18[1] = a5;
  uint64_t v9 = sub_10000A38C(a6);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000D6E4(a1, a1[3]);
  a7(v13, v14, v15);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v20 = 0;
  uint64_t v16 = v18[3];
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v16)
  {
    char v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10022EEDC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000A38C(&qword_10036F398);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D6E4(a1, a1[3]);
  sub_100231130();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for ShareableContentExposedContext(0);
    LOBYTE(v12) = 1;
    type metadata accessor for ShareableContent(0);
    sub_100231240(&qword_100368B88, (void (*)(uint64_t))type metadata accessor for ShareableContent);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    sub_100231288();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10022F0DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v4 = type metadata accessor for ShareableContent(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036F380);
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v26 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ShareableContentExposedContext(0);
  __chkstk_darwin(v10);
  long long v12 = (uint64_t *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = a1[3];
  uint64_t v27 = a1;
  sub_10000D6E4(a1, v13);
  sub_100231130();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000CC5C((uint64_t)v27);
  }
  uint64_t v14 = v6;
  uint64_t v23 = v10;
  uint64_t v15 = v25;
  uint64_t v16 = v26;
  LOBYTE(v28) = 0;
  uint64_t v17 = (uint64_t)v12;
  *long long v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v12[1] = v18;
  LOBYTE(v28) = 1;
  sub_100231240(&qword_100368B68, (void (*)(uint64_t))type metadata accessor for ShareableContent);
  uint64_t v19 = (uint64_t)v14;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v20 = v23;
  sub_100231184(v19, v17 + *(int *)(v23 + 20), type metadata accessor for ShareableContent);
  char v29 = 2;
  sub_1002311EC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v16);
  *(_OWORD *)(v17 + *(int *)(v20 + 24)) = v28;
  sub_1002310C8(v17, v24, type metadata accessor for ShareableContentExposedContext);
  sub_10000CC5C((uint64_t)v27);
  return sub_100228E64(v17, type metadata accessor for ShareableContentExposedContext);
}

uint64_t sub_10022F488()
{
  uint64_t v1 = 0x65766965636572;
  if (*v0 != 1) {
    uint64_t v1 = 1684956531;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701736302;
  }
}

uint64_t sub_10022F4D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100233664(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10022F4FC(uint64_t a1)
{
  unint64_t v2 = sub_100234344();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022F538(uint64_t a1)
{
  unint64_t v2 = sub_100234344();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022F574(uint64_t a1)
{
  unint64_t v2 = sub_100234440();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022F5B0(uint64_t a1)
{
  unint64_t v2 = sub_100234440();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022F5EC(uint64_t a1)
{
  unint64_t v2 = sub_1002343EC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022F628(uint64_t a1)
{
  unint64_t v2 = sub_1002343EC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022F664(uint64_t a1)
{
  unint64_t v2 = sub_100234398();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022F6A0(uint64_t a1)
{
  unint64_t v2 = sub_100234398();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10022F6DC(void *a1@<X8>)
{
  *a1 = &off_10031E620;
}

void *sub_10022F6EC@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10023379C(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_10022F718(void *a1)
{
  return sub_10022D848(a1, *v1);
}

uint64_t sub_10022F734(uint64_t a1)
{
  unint64_t v2 = sub_1002314D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022F770(uint64_t a1)
{
  unint64_t v2 = sub_1002314D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10022F7AC()
{
  unint64_t result = 1819042147;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x636972656E6567;
      break;
    case 2:
      unint64_t result = 0x616964656DLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10022F834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100233D0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10022F85C(uint64_t a1)
{
  unint64_t v2 = sub_1002312DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022F898(uint64_t a1)
{
  unint64_t v2 = sub_1002312DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022F8D4(uint64_t a1)
{
  unint64_t v2 = sub_10023142C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022F910(uint64_t a1)
{
  unint64_t v2 = sub_10023142C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022F94C(uint64_t a1)
{
  unint64_t v2 = sub_100231384();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022F988(uint64_t a1)
{
  unint64_t v2 = sub_100231384();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022F9C4(uint64_t a1)
{
  unint64_t v2 = sub_100231330();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022FA00(uint64_t a1)
{
  unint64_t v2 = sub_100231330();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022FA3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10022E2B8(a1, a2);
}

uint64_t sub_10022FA54(void *a1)
{
  return sub_10022DBB4(a1);
}

uint64_t sub_10022FA70(uint64_t a1)
{
  unint64_t v2 = sub_1002342F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022FAAC(uint64_t a1)
{
  unint64_t v2 = sub_1002342F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022FAE8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10022FC20(a1, &qword_10036F718, (void (*)(void))sub_1002342F0, a2);
}

uint64_t sub_10022FB24(void *a1)
{
  return sub_10022ED68(a1, *v1, v1[1], v1[2], v1[3], &qword_10036F738, (void (*)(void *, uint64_t, uint64_t))sub_1002342F0);
}

uint64_t sub_10022FB6C(uint64_t a1)
{
  unint64_t v2 = sub_10023429C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022FBA8(uint64_t a1)
{
  unint64_t v2 = sub_10023429C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022FBE4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10022FC20(a1, &qword_10036F708, (void (*)(void))sub_10023429C, a2);
}

uint64_t sub_10022FC20@<X0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_100233EAC(a1, a2, a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

uint64_t sub_10022FC5C(void *a1)
{
  return sub_10022ED68(a1, *v1, v1[1], v1[2], v1[3], &qword_10036F730, (void (*)(void *, uint64_t, uint64_t))sub_10023429C);
}

uint64_t sub_10022FCA0(uint64_t a1)
{
  unint64_t v2 = sub_100234248();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022FCDC(uint64_t a1)
{
  unint64_t v2 = sub_100234248();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022FD18@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10022FC20(a1, &qword_10036F6F8, (void (*)(void))sub_100234248, a2);
}

uint64_t sub_10022FD54(void *a1)
{
  return sub_10022ED68(a1, *v1, v1[1], v1[2], v1[3], &qword_10036F728, (void (*)(void *, uint64_t, uint64_t))sub_100234248);
}

uint64_t sub_10022FD98(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t sub_10022FE3C()
{
  unint64_t v1 = 0xD000000000000010;
  if (*v0 != 1) {
    unint64_t v1 = 0x656369766564;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 25705;
  }
}

uint64_t sub_10022FE8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002340C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10022FEB4(uint64_t a1)
{
  unint64_t v2 = sub_100231130();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022FEF0(uint64_t a1)
{
  unint64_t v2 = sub_100231130();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10022FF2C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10022F0DC(a1, a2);
}

uint64_t sub_10022FF44(void *a1)
{
  return sub_10022EEDC(a1);
}

uint64_t sub_10022FF60()
{
  return sub_100047AD0(&qword_10036F350, &qword_10036F358);
}

unint64_t sub_10022FF8C()
{
  unint64_t result = qword_10036F360;
  if (!qword_10036F360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F360);
  }
  return result;
}

unint64_t sub_10022FFE0()
{
  unint64_t result = qword_10036F368;
  if (!qword_10036F368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F368);
  }
  return result;
}

uint64_t sub_100230034()
{
  return 1701667182;
}

uint64_t sub_100230044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1002300CC(uint64_t a1)
{
  unint64_t v2 = sub_1002341F4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100230108(uint64_t a1)
{
  unint64_t v2 = sub_1002341F4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100230144@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000A38C(&qword_10036F6E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1002341F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000CC5C((uint64_t)a1);
  }
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_10000CC5C((uint64_t)a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t sub_1002302BC(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036F6F0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1002341F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1002303F4(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      BOOL v5 = *a1 == *a2 && v3 == v4;
      if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
    }
  }
  else if (!v4)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_100230450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v28 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NoticeTapAction(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  long long v12 = (uint64_t *)((char *)&v27 - v11);
  uint64_t v13 = sub_10000A38C(&qword_10036F378);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (uint64_t *)&v16[*(int *)(v14 + 56)];
  sub_1002310C8(a1, (uint64_t)v16, type metadata accessor for NoticeTapAction);
  sub_1002310C8(a2, (uint64_t)v17, type metadata accessor for NoticeTapAction);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_1002310C8((uint64_t)v16, (uint64_t)v12, type metadata accessor for NoticeTapAction);
    uint64_t v22 = *v12;
    unint64_t v23 = v12[1];
    if (!swift_getEnumCaseMultiPayload())
    {
      uint64_t v24 = *v17;
      unint64_t v25 = v17[1];
      char v20 = sub_1001B0D6C(v22, v23, *v17, v25);
      sub_10000DBEC(v24, v25);
      sub_10000DBEC(v22, v23);
      goto LABEL_12;
    }
    sub_10000DBEC(v22, v23);
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_1002310C8((uint64_t)v16, (uint64_t)v10, type metadata accessor for NoticeTapAction);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = v28;
      (*(void (**)(char *, uint64_t *, uint64_t))(v28 + 32))(v6, v17, v4);
      char v20 = static URL.== infix(_:_:)();
      uint64_t v21 = *(void (**)(char *, uint64_t))(v19 + 8);
      v21(v6, v4);
      v21(v10, v4);
LABEL_12:
      sub_100228E64((uint64_t)v16, type metadata accessor for NoticeTapAction);
      return v20 & 1;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v4);
    goto LABEL_10;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
LABEL_10:
    sub_10000D78C((uint64_t)v16, &qword_10036F378);
    char v20 = 0;
    return v20 & 1;
  }
  sub_100228E64((uint64_t)v16, type metadata accessor for NoticeTapAction);
  char v20 = 1;
  return v20 & 1;
}

uint64_t sub_1002307B8(void *a1, void *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1])
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v5 & 1) == 0) {
      return result;
    }
  }
  uint64_t v7 = type metadata accessor for ShareableContentExposedContext(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (void *)((char *)a2 + v8);
  uint64_t v11 = *(void *)((char *)a1 + v8 + 8);
  uint64_t v12 = *(void *)((char *)a2 + v8 + 8);
  if (!v11)
  {
    if (v12) {
      return 0;
    }
    goto LABEL_15;
  }
  if (!v12) {
    return 0;
  }
  BOOL v13 = *v9 == *v10 && v11 == v12;
  if (v13 || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v14 & 1) != 0))
  {
LABEL_15:
    uint64_t v15 = type metadata accessor for ShareableContent(0);
    if (sub_1001E5348((uint64_t)v9 + *(int *)(v15 + 20), (uint64_t)v10 + *(int *)(v15 + 20)))
    {
      uint64_t v16 = *(int *)(v7 + 24);
      uint64_t v17 = (void *)((char *)a1 + v16);
      uint64_t v18 = *(void *)((char *)a1 + v16 + 8);
      uint64_t v19 = (void *)((char *)a2 + v16);
      uint64_t v20 = v19[1];
      if (v18)
      {
        if (v20)
        {
          BOOL v21 = *v17 == *v19 && v18 == v20;
          if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            return 1;
          }
        }
      }
      else if (!v20)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1002308D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareableContentExposedContext(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for NoticeContent(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __chkstk_darwin(v8);
  BOOL v13 = (uint64_t *)((char *)&v64 - v12);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (uint64_t *)((char *)&v64 - v15);
  __chkstk_darwin(v14);
  uint64_t v18 = (uint64_t *)((char *)&v64 - v17);
  uint64_t v19 = sub_10000A38C(&qword_10036F370);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v22 = (uint64_t *)((char *)&v64 + *(int *)(v20 + 56) - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = a1;
  uint64_t v24 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002310C8(v23, (uint64_t)v24, type metadata accessor for NoticeContent);
  sub_1002310C8(a2, (uint64_t)v22, type metadata accessor for NoticeContent);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1002310C8((uint64_t)v24, (uint64_t)v16, type metadata accessor for NoticeContent);
      uint64_t v38 = *v16;
      uint64_t v37 = v16[1];
      uint64_t v40 = v16[2];
      uint64_t v39 = v16[3];
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_38;
      }
      uint64_t v41 = v24;
      uint64_t v42 = *v22;
      uint64_t v43 = v22[1];
      uint64_t v45 = v22[2];
      uint64_t v44 = v22[3];
      BOOL v46 = v38 == v42 && v37 == v43;
      if (v46 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v40 == v45 && v39 == v44)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          uint64_t v49 = (uint64_t)v41;
          goto LABEL_50;
        }
        char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v49 = (uint64_t)v41;
        if (v48) {
          goto LABEL_50;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v49 = (uint64_t)v41;
      }
      sub_100228E64(v49, type metadata accessor for NoticeContent);
      goto LABEL_43;
    case 2u:
      sub_1002310C8((uint64_t)v24, (uint64_t)v13, type metadata accessor for NoticeContent);
      uint64_t v51 = *v13;
      uint64_t v50 = v13[1];
      uint64_t v53 = v13[2];
      uint64_t v52 = v13[3];
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_38;
      }
      uint64_t v54 = (uint64_t)v24;
      uint64_t v55 = *v22;
      uint64_t v56 = v22[1];
      uint64_t v58 = v22[2];
      uint64_t v57 = v22[3];
      BOOL v59 = v51 == v55 && v50 == v56;
      if (v59 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v53 == v58 && v52 == v57)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
        }
        else
        {
          char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v61 & 1) == 0) {
            goto LABEL_55;
          }
        }
        uint64_t v49 = v54;
        goto LABEL_50;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_55:
      sub_100228E64(v54, type metadata accessor for NoticeContent);
LABEL_43:
      char v62 = 0;
      return v62 & 1;
    case 3u:
      sub_1002310C8((uint64_t)v24, (uint64_t)v10, type metadata accessor for NoticeContent);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        sub_100231184((uint64_t)v22, (uint64_t)v6, type metadata accessor for ShareableContentExposedContext);
        char v62 = sub_1002307B8(v10, v6);
        sub_100228E64((uint64_t)v6, type metadata accessor for ShareableContentExposedContext);
        sub_100228E64((uint64_t)v10, type metadata accessor for ShareableContentExposedContext);
        sub_100228E64((uint64_t)v24, type metadata accessor for NoticeContent);
        return v62 & 1;
      }
      sub_100228E64((uint64_t)v10, type metadata accessor for ShareableContentExposedContext);
      goto LABEL_42;
    default:
      sub_1002310C8((uint64_t)v24, (uint64_t)v18, type metadata accessor for NoticeContent);
      uint64_t v26 = *v18;
      uint64_t v25 = v18[1];
      uint64_t v28 = v18[2];
      uint64_t v27 = v18[3];
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_38:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_42:
        sub_10000D78C((uint64_t)v24, &qword_10036F370);
        goto LABEL_43;
      }
      uint64_t v29 = (uint64_t)v24;
      uint64_t v30 = *v22;
      uint64_t v31 = v22[1];
      uint64_t v33 = v22[2];
      uint64_t v32 = v22[3];
      BOOL v34 = v26 == v30 && v25 == v31;
      if (!v34 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_57:
        sub_100228E64(v29, type metadata accessor for NoticeContent);
        goto LABEL_43;
      }
      if (v28 == v33 && v27 == v32)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v36 & 1) == 0) {
          goto LABEL_57;
        }
      }
      uint64_t v49 = v29;
LABEL_50:
      sub_100228E64(v49, type metadata accessor for NoticeContent);
      char v62 = 1;
      return v62 & 1;
  }
}

uint64_t sub_100230F74(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v5 = 0x4866666F646E6168;
  }
  else {
    uint64_t v5 = 0x647261646E617473;
  }
  if (*(unsigned char *)(a1 + 16)) {
    unint64_t v6 = 0xEB00000000746E69;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v7 = 0x4866666F646E6168;
  }
  else {
    uint64_t v7 = 0x647261646E617473;
  }
  if (*(unsigned char *)(a2 + 16)) {
    unint64_t v8 = 0xEB00000000746E69;
  }
  else {
    unint64_t v8 = 0xE800000000000000;
  }
  if (v5 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v11 = (int *)type metadata accessor for NoticeContext(0);
  if ((sub_100230450(a1 + v11[6], a2 + v11[6]) & 1) == 0
    || *(unsigned __int8 *)(a1 + v11[7]) != *(unsigned __int8 *)(a2 + v11[7]))
  {
    return 0;
  }
  uint64_t v12 = v11[8];

  return sub_1002308D8(a1 + v12, a2 + v12);
}

uint64_t sub_1002310C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_100231130()
{
  unint64_t result = qword_10036F388;
  if (!qword_10036F388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F388);
  }
  return result;
}

uint64_t sub_100231184(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1002311EC()
{
  unint64_t result = qword_10036F390;
  if (!qword_10036F390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F390);
  }
  return result;
}

uint64_t sub_100231240(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100231288()
{
  unint64_t result = qword_10036F3A0;
  if (!qword_10036F3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F3A0);
  }
  return result;
}

unint64_t sub_1002312DC()
{
  unint64_t result = qword_10036F3D0;
  if (!qword_10036F3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F3D0);
  }
  return result;
}

unint64_t sub_100231330()
{
  unint64_t result = qword_10036F3D8;
  if (!qword_10036F3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F3D8);
  }
  return result;
}

unint64_t sub_100231384()
{
  unint64_t result = qword_10036F3E8;
  if (!qword_10036F3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F3E8);
  }
  return result;
}

unint64_t sub_1002313D8()
{
  unint64_t result = qword_10036F3F0;
  if (!qword_10036F3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F3F0);
  }
  return result;
}

unint64_t sub_10023142C()
{
  unint64_t result = qword_10036F3F8;
  if (!qword_10036F3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F3F8);
  }
  return result;
}

unint64_t sub_100231480()
{
  unint64_t result = qword_10036F400;
  if (!qword_10036F400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F400);
  }
  return result;
}

unint64_t sub_1002314D4()
{
  unint64_t result = qword_10036F408;
  if (!qword_10036F408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F408);
  }
  return result;
}

unint64_t sub_100231528()
{
  unint64_t result = qword_10036F410;
  if (!qword_10036F410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F410);
  }
  return result;
}

unint64_t sub_10023157C()
{
  unint64_t result = qword_10036F448;
  if (!qword_10036F448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F448);
  }
  return result;
}

unint64_t sub_1002315D0()
{
  unint64_t result = qword_10036F450;
  if (!qword_10036F450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F450);
  }
  return result;
}

unint64_t sub_100231624()
{
  unint64_t result = qword_10036F458;
  if (!qword_10036F458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F458);
  }
  return result;
}

unint64_t sub_100231678()
{
  unint64_t result = qword_10036F480;
  if (!qword_10036F480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F480);
  }
  return result;
}

unint64_t sub_1002316CC()
{
  unint64_t result = qword_10036F488;
  if (!qword_10036F488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F488);
  }
  return result;
}

unint64_t sub_100231720()
{
  unint64_t result = qword_10036F490;
  if (!qword_10036F490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F490);
  }
  return result;
}

unint64_t sub_100231774()
{
  unint64_t result = qword_10036F498;
  if (!qword_10036F498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F498);
  }
  return result;
}

unint64_t sub_1002317C8()
{
  unint64_t result = qword_10036F4C8;
  if (!qword_10036F4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F4C8);
  }
  return result;
}

unint64_t sub_10023181C()
{
  unint64_t result = qword_10036F4D0;
  if (!qword_10036F4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F4D0);
  }
  return result;
}

unint64_t sub_100231870()
{
  unint64_t result = qword_10036F4E0;
  if (!qword_10036F4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F4E0);
  }
  return result;
}

unint64_t sub_1002318C4()
{
  unint64_t result = qword_10036F4F8;
  if (!qword_10036F4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F4F8);
  }
  return result;
}

unint64_t sub_100231918()
{
  unint64_t result = qword_10036F508;
  if (!qword_10036F508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F508);
  }
  return result;
}

uint64_t type metadata accessor for LeaderNoticeTapAction(uint64_t a1)
{
  return sub_100014F7C(a1, qword_10036F590);
}

uint64_t *sub_10023198C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100231AAC(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!result)
  {
    uint64_t v3 = type metadata accessor for URL();
    BOOL v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *sub_100231B4C(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_100231C28(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100228E64((uint64_t)a1, type metadata accessor for LeaderNoticeTapAction);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *sub_100231D30(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_100231DE4(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100228E64((uint64_t)a1, type metadata accessor for LeaderNoticeTapAction);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100231EBC()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NoticeContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100232018);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NoticeContext.CodingKeys()
{
  return &type metadata for NoticeContext.CodingKeys;
}

ValueMetadata *type metadata accessor for NoticeTapAction.CodingKeys()
{
  return &type metadata for NoticeTapAction.CodingKeys;
}

ValueMetadata *type metadata accessor for NoticeTapAction.NoneCodingKeys()
{
  return &type metadata for NoticeTapAction.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for NoticeTapAction.LeaderActionCodingKeys()
{
  return &type metadata for NoticeTapAction.LeaderActionCodingKeys;
}

ValueMetadata *type metadata accessor for NoticeTapAction.OpenURLCodingKeys()
{
  return &type metadata for NoticeTapAction.OpenURLCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for NoticeContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100232164);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NoticeContent.CodingKeys()
{
  return &type metadata for NoticeContent.CodingKeys;
}

ValueMetadata *type metadata accessor for NoticeContent.CallCodingKeys()
{
  return &type metadata for NoticeContent.CallCodingKeys;
}

ValueMetadata *type metadata accessor for NoticeContent.GenericCodingKeys()
{
  return &type metadata for NoticeContent.GenericCodingKeys;
}

ValueMetadata *type metadata accessor for NoticeContent.MediaCodingKeys()
{
  return &type metadata for NoticeContent.MediaCodingKeys;
}

ValueMetadata *type metadata accessor for NoticeContent.ShareableContentExposedCodingKeys()
{
  return &type metadata for NoticeContent.ShareableContentExposedCodingKeys;
}

ValueMetadata *type metadata accessor for ShareableContentExposedContext.CodingKeys()
{
  return &type metadata for ShareableContentExposedContext.CodingKeys;
}

ValueMetadata *type metadata accessor for HandoffLeaderStub()
{
  return &type metadata for HandoffLeaderStub;
}

ValueMetadata *type metadata accessor for MediaNoticeContent()
{
  return &type metadata for MediaNoticeContent;
}

ValueMetadata *type metadata accessor for GenericNoticeContent()
{
  return &type metadata for GenericNoticeContent;
}

ValueMetadata *type metadata accessor for CallNoticeContent()
{
  return &type metadata for CallNoticeContent;
}

ValueMetadata *type metadata accessor for NoticeTapIntent()
{
  return &type metadata for NoticeTapIntent;
}

uint64_t sub_100232254()
{
  return sub_100047AD0(&qword_10036F5C8, &qword_10036F5D0);
}

unint64_t sub_100232280()
{
  unint64_t result = qword_10036F5D8;
  if (!qword_10036F5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F5D8);
  }
  return result;
}

unint64_t sub_1002322D8()
{
  unint64_t result = qword_10036F5E0;
  if (!qword_10036F5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F5E0);
  }
  return result;
}

unint64_t sub_100232330()
{
  unint64_t result = qword_10036F5E8;
  if (!qword_10036F5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F5E8);
  }
  return result;
}

unint64_t sub_100232388()
{
  unint64_t result = qword_10036F5F0;
  if (!qword_10036F5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F5F0);
  }
  return result;
}

unint64_t sub_1002323E0()
{
  unint64_t result = qword_10036F5F8;
  if (!qword_10036F5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F5F8);
  }
  return result;
}

unint64_t sub_100232438()
{
  unint64_t result = qword_10036F600;
  if (!qword_10036F600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F600);
  }
  return result;
}

unint64_t sub_100232490()
{
  unint64_t result = qword_10036F608;
  if (!qword_10036F608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F608);
  }
  return result;
}

unint64_t sub_1002324E8()
{
  unint64_t result = qword_10036F610;
  if (!qword_10036F610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F610);
  }
  return result;
}

unint64_t sub_100232540()
{
  unint64_t result = qword_10036F618;
  if (!qword_10036F618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F618);
  }
  return result;
}

unint64_t sub_100232598()
{
  unint64_t result = qword_10036F620;
  if (!qword_10036F620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F620);
  }
  return result;
}

unint64_t sub_1002325F0()
{
  unint64_t result = qword_10036F628;
  if (!qword_10036F628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F628);
  }
  return result;
}

unint64_t sub_100232648()
{
  unint64_t result = qword_10036F630;
  if (!qword_10036F630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F630);
  }
  return result;
}

unint64_t sub_1002326A0()
{
  unint64_t result = qword_10036F638;
  if (!qword_10036F638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F638);
  }
  return result;
}

unint64_t sub_1002326F8()
{
  unint64_t result = qword_10036F640;
  if (!qword_10036F640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F640);
  }
  return result;
}

unint64_t sub_100232750()
{
  unint64_t result = qword_10036F648;
  if (!qword_10036F648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F648);
  }
  return result;
}

unint64_t sub_1002327A8()
{
  unint64_t result = qword_10036F650;
  if (!qword_10036F650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F650);
  }
  return result;
}

unint64_t sub_100232800()
{
  unint64_t result = qword_10036F658;
  if (!qword_10036F658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F658);
  }
  return result;
}

unint64_t sub_100232858()
{
  unint64_t result = qword_10036F660;
  if (!qword_10036F660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F660);
  }
  return result;
}

unint64_t sub_1002328B0()
{
  unint64_t result = qword_10036F668;
  if (!qword_10036F668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F668);
  }
  return result;
}

unint64_t sub_100232908()
{
  unint64_t result = qword_10036F670;
  if (!qword_10036F670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F670);
  }
  return result;
}

unint64_t sub_100232960()
{
  unint64_t result = qword_10036F678;
  if (!qword_10036F678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F678);
  }
  return result;
}

unint64_t sub_1002329B8()
{
  unint64_t result = qword_10036F680;
  if (!qword_10036F680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F680);
  }
  return result;
}

unint64_t sub_100232A10()
{
  unint64_t result = qword_10036F688;
  if (!qword_10036F688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F688);
  }
  return result;
}

unint64_t sub_100232A68()
{
  unint64_t result = qword_10036F690;
  if (!qword_10036F690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F690);
  }
  return result;
}

unint64_t sub_100232AC0()
{
  unint64_t result = qword_10036F698;
  if (!qword_10036F698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F698);
  }
  return result;
}

unint64_t sub_100232B18()
{
  unint64_t result = qword_10036F6A0;
  if (!qword_10036F6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F6A0);
  }
  return result;
}

unint64_t sub_100232B70()
{
  unint64_t result = qword_10036F6A8;
  if (!qword_10036F6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F6A8);
  }
  return result;
}

unint64_t sub_100232BC8()
{
  unint64_t result = qword_10036F6B0;
  if (!qword_10036F6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F6B0);
  }
  return result;
}

unint64_t sub_100232C20()
{
  unint64_t result = qword_10036F6B8;
  if (!qword_10036F6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F6B8);
  }
  return result;
}

unint64_t sub_100232C78()
{
  unint64_t result = qword_10036F6C0;
  if (!qword_10036F6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F6C0);
  }
  return result;
}

unint64_t sub_100232CD0()
{
  unint64_t result = qword_10036F6C8;
  if (!qword_10036F6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F6C8);
  }
  return result;
}

unint64_t sub_100232D28()
{
  unint64_t result = qword_10036F6D0;
  if (!qword_10036F6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F6D0);
  }
  return result;
}

unint64_t sub_100232D80()
{
  unint64_t result = qword_10036F6D8;
  if (!qword_10036F6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F6D8);
  }
  return result;
}

uint64_t sub_100232DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v28 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LeaderNoticeTapAction(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = sub_10000A38C(&qword_10036F800);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = &v16[*(int *)(v14 + 56)];
  sub_1002310C8(a1, (uint64_t)v16, type metadata accessor for LeaderNoticeTapAction);
  sub_1002310C8(a2, (uint64_t)v17, type metadata accessor for LeaderNoticeTapAction);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v23 = v28;
    sub_1002310C8((uint64_t)v16, (uint64_t)v12, type metadata accessor for LeaderNoticeTapAction);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v6, v17, v4);
      char v24 = static URL.== infix(_:_:)();
      uint64_t v25 = *(void (**)(char *, uint64_t))(v23 + 8);
      v25(v6, v4);
      v25(v12, v4);
      sub_100228E64((uint64_t)v16, type metadata accessor for LeaderNoticeTapAction);
      return v24 & 1;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v4);
    goto LABEL_15;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      goto LABEL_19;
    }
LABEL_15:
    sub_10000D78C((uint64_t)v16, &qword_10036F800);
    goto LABEL_16;
  }
  sub_1002310C8((uint64_t)v16, (uint64_t)v10, type metadata accessor for LeaderNoticeTapAction);
  uint64_t v20 = *v10;
  uint64_t v19 = v10[1];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (v20 == *(void *)v17 && v19 == *((void *)v17 + 1))
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_19;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v22)
  {
LABEL_19:
    sub_100228E64((uint64_t)v16, type metadata accessor for LeaderNoticeTapAction);
    char v24 = 1;
    return v24 & 1;
  }
  sub_100228E64((uint64_t)v16, type metadata accessor for LeaderNoticeTapAction);
LABEL_16:
  char v24 = 0;
  return v24 & 1;
}

uint64_t sub_100233168(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F69746341706174 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E65746E49706174 && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100233378(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x634172656461656CLL && a2 == 0xEC0000006E6F6974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4C52556E65706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1002334D8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4C52556E65706FLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726566736E617274 && a2 == 0xEC0000006C6C6143 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726566736E617274 && a2 == 0xED0000616964654DLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100233664(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65766965636572 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1684956531 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_10023379C(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10036F740);
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v26 = v2;
  __chkstk_darwin(v2);
  uint64_t v29 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000A38C(&qword_10036F748);
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036F750);
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036F758);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D6E4(a1, a1[3]);
  sub_100234344();
  uint64_t v12 = (uint64_t)v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v22 = v6;
  uint64_t v13 = v29;
  uint64_t v30 = a1;
  uint64_t v14 = v11;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v11 = v18;
    sub_10000A38C(&qword_10035FAC0);
    void *v11 = &type metadata for NoticeTapIntent;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v11, enum case for DecodingError.typeMismatch(_:), v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
    a1 = v30;
LABEL_7:
    sub_10000CC5C((uint64_t)a1);
    return v11;
  }
  uint64_t v11 = (void *)*(unsigned __int8 *)(v15 + 32);
  if (*(unsigned char *)(v15 + 32))
  {
    if (v11 == 1)
    {
      char v32 = 1;
      sub_1002343EC();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v16 = v28;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v16 + 8))(v14, v9);
    }
    else
    {
      char v33 = 2;
      sub_100234398();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v28;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v20 + 8))(v14, v9);
    }
  }
  else
  {
    char v31 = 0;
    sub_100234440();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
  }
  sub_10000CC5C((uint64_t)v30);
  return v11;
}

uint64_t sub_100233D0C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1819042147 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636972656E6567 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x616964656DLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001002C6890)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100233EAC(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v6 = sub_10000A38C(a2);
  uint64_t v13 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  sub_10000D6E4(a1, v9);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v3)
  {
    sub_10000CC5C((uint64_t)a1);
  }
  else
  {
    uint64_t v10 = v13;
    char v15 = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    char v14 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v6);
    swift_bridgeObjectRetain();
    sub_10000CC5C((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t sub_1002340C4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001002C0310 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656369766564 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_1002341F4()
{
  unint64_t result = qword_10036F6E8;
  if (!qword_10036F6E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F6E8);
  }
  return result;
}

unint64_t sub_100234248()
{
  unint64_t result = qword_10036F700;
  if (!qword_10036F700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F700);
  }
  return result;
}

unint64_t sub_10023429C()
{
  unint64_t result = qword_10036F710;
  if (!qword_10036F710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F710);
  }
  return result;
}

unint64_t sub_1002342F0()
{
  unint64_t result = qword_10036F720;
  if (!qword_10036F720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F720);
  }
  return result;
}

unint64_t sub_100234344()
{
  unint64_t result = qword_10036F760;
  if (!qword_10036F760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F760);
  }
  return result;
}

unint64_t sub_100234398()
{
  unint64_t result = qword_10036F768;
  if (!qword_10036F768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F768);
  }
  return result;
}

unint64_t sub_1002343EC()
{
  unint64_t result = qword_10036F770;
  if (!qword_10036F770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F770);
  }
  return result;
}

unint64_t sub_100234440()
{
  unint64_t result = qword_10036F778;
  if (!qword_10036F778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F778);
  }
  return result;
}

unint64_t sub_100234494()
{
  unint64_t result = qword_10036F7C0;
  if (!qword_10036F7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F7C0);
  }
  return result;
}

unint64_t sub_1002344E8()
{
  unint64_t result = qword_10036F7C8;
  if (!qword_10036F7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F7C8);
  }
  return result;
}

unint64_t sub_10023453C()
{
  unint64_t result = qword_10036F7D0;
  if (!qword_10036F7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F7D0);
  }
  return result;
}

unint64_t sub_100234590()
{
  unint64_t result = qword_10036F7D8;
  if (!qword_10036F7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F7D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for LeaderNoticeTapAction.CodingKeys()
{
  return &type metadata for LeaderNoticeTapAction.CodingKeys;
}

ValueMetadata *type metadata accessor for LeaderNoticeTapAction.OpenURLCodingKeys()
{
  return &type metadata for LeaderNoticeTapAction.OpenURLCodingKeys;
}

ValueMetadata *type metadata accessor for LeaderNoticeTapAction.TransferCallCodingKeys()
{
  return &type metadata for LeaderNoticeTapAction.TransferCallCodingKeys;
}

ValueMetadata *type metadata accessor for LeaderNoticeTapAction.TransferMediaCodingKeys()
{
  return &type metadata for LeaderNoticeTapAction.TransferMediaCodingKeys;
}

unsigned char *_s17proximitycontrold15NoticeTapIntentOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002346F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NoticeTapIntent.CodingKeys()
{
  return &type metadata for NoticeTapIntent.CodingKeys;
}

ValueMetadata *type metadata accessor for NoticeTapIntent.NoneCodingKeys()
{
  return &type metadata for NoticeTapIntent.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for NoticeTapIntent.ReceiveCodingKeys()
{
  return &type metadata for NoticeTapIntent.ReceiveCodingKeys;
}

ValueMetadata *type metadata accessor for NoticeTapIntent.SendCodingKeys()
{
  return &type metadata for NoticeTapIntent.SendCodingKeys;
}

ValueMetadata *type metadata accessor for CallNoticeContent.CodingKeys()
{
  return &type metadata for CallNoticeContent.CodingKeys;
}

ValueMetadata *type metadata accessor for GenericNoticeContent.CodingKeys()
{
  return &type metadata for GenericNoticeContent.CodingKeys;
}

unsigned char *_s17proximitycontrold11NoticeStyleOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100234844);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaNoticeContent.CodingKeys()
{
  return &type metadata for MediaNoticeContent.CodingKeys;
}

unsigned char *_s17proximitycontrold15NoticeTapActionO22LeaderActionCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100234918);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffLeaderStub.CodingKeys()
{
  return &type metadata for HandoffLeaderStub.CodingKeys;
}

unint64_t sub_100234954()
{
  unint64_t result = qword_10036F808;
  if (!qword_10036F808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F808);
  }
  return result;
}

unint64_t sub_1002349AC()
{
  unint64_t result = qword_10036F810;
  if (!qword_10036F810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F810);
  }
  return result;
}

unint64_t sub_100234A04()
{
  unint64_t result = qword_10036F818;
  if (!qword_10036F818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F818);
  }
  return result;
}

unint64_t sub_100234A5C()
{
  unint64_t result = qword_10036F820;
  if (!qword_10036F820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F820);
  }
  return result;
}

unint64_t sub_100234AB4()
{
  unint64_t result = qword_10036F828;
  if (!qword_10036F828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F828);
  }
  return result;
}

unint64_t sub_100234B0C()
{
  unint64_t result = qword_10036F830;
  if (!qword_10036F830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F830);
  }
  return result;
}

unint64_t sub_100234B64()
{
  unint64_t result = qword_10036F838;
  if (!qword_10036F838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F838);
  }
  return result;
}

unint64_t sub_100234BBC()
{
  unint64_t result = qword_10036F840;
  if (!qword_10036F840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F840);
  }
  return result;
}

unint64_t sub_100234C14()
{
  unint64_t result = qword_10036F848;
  if (!qword_10036F848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F848);
  }
  return result;
}

unint64_t sub_100234C6C()
{
  unint64_t result = qword_10036F850;
  if (!qword_10036F850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F850);
  }
  return result;
}

unint64_t sub_100234CC4()
{
  unint64_t result = qword_10036F858;
  if (!qword_10036F858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F858);
  }
  return result;
}

unint64_t sub_100234D1C()
{
  unint64_t result = qword_10036F860;
  if (!qword_10036F860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F860);
  }
  return result;
}

unint64_t sub_100234D74()
{
  unint64_t result = qword_10036F868;
  if (!qword_10036F868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F868);
  }
  return result;
}

unint64_t sub_100234DCC()
{
  unint64_t result = qword_10036F870;
  if (!qword_10036F870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F870);
  }
  return result;
}

unint64_t sub_100234E24()
{
  unint64_t result = qword_10036F878;
  if (!qword_10036F878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F878);
  }
  return result;
}

unint64_t sub_100234E7C()
{
  unint64_t result = qword_10036F880;
  if (!qword_10036F880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F880);
  }
  return result;
}

unint64_t sub_100234ED4()
{
  unint64_t result = qword_10036F888;
  if (!qword_10036F888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F888);
  }
  return result;
}

unint64_t sub_100234F2C()
{
  unint64_t result = qword_10036F890;
  if (!qword_10036F890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F890);
  }
  return result;
}

unint64_t sub_100234F84()
{
  unint64_t result = qword_10036F898;
  if (!qword_10036F898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F898);
  }
  return result;
}

unint64_t sub_100234FDC()
{
  unint64_t result = qword_10036F8A0;
  if (!qword_10036F8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F8A0);
  }
  return result;
}

unint64_t sub_100235034()
{
  unint64_t result = qword_10036F8A8;
  if (!qword_10036F8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F8A8);
  }
  return result;
}

unint64_t sub_10023508C()
{
  unint64_t result = qword_10036F8B0;
  if (!qword_10036F8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F8B0);
  }
  return result;
}

unint64_t sub_1002350E4()
{
  unint64_t result = qword_10036F8B8;
  if (!qword_10036F8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F8B8);
  }
  return result;
}

unint64_t sub_10023513C()
{
  unint64_t result = qword_10036F8C0;
  if (!qword_10036F8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F8C0);
  }
  return result;
}

unint64_t sub_100235194()
{
  unint64_t result = qword_10036F8C8;
  if (!qword_10036F8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F8C8);
  }
  return result;
}

unint64_t sub_1002351EC()
{
  unint64_t result = qword_10036F8D0;
  if (!qword_10036F8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F8D0);
  }
  return result;
}

unint64_t sub_100235244()
{
  unint64_t result = qword_10036F8D8;
  if (!qword_10036F8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F8D8);
  }
  return result;
}

unint64_t sub_10023529C()
{
  unint64_t result = qword_10036F8E0;
  if (!qword_10036F8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F8E0);
  }
  return result;
}

unint64_t sub_1002352F4()
{
  unint64_t result = qword_10036F8E8;
  if (!qword_10036F8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F8E8);
  }
  return result;
}

unint64_t sub_10023534C()
{
  unint64_t result = qword_10036F8F0;
  if (!qword_10036F8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F8F0);
  }
  return result;
}

unint64_t sub_1002353A4()
{
  unint64_t result = qword_10036F8F8;
  if (!qword_10036F8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F8F8);
  }
  return result;
}

unint64_t sub_1002353FC()
{
  unint64_t result = qword_10036F900;
  if (!qword_10036F900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036F900);
  }
  return result;
}

uint64_t sub_10023545C()
{
  if (*(void *)(v0 + 48))
  {
    uint64_t v1 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v2 = v0;
    sub_10000A38C(&qword_10036FA00);
    sub_100235A98();
    uint64_t v1 = Publisher.eraseToAnyPublisher()();
    *(void *)(v2 + 48) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t *sub_1002354EC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  v2[2] = 0;
  sub_10000A38C(&qword_10036FA00);
  swift_allocObject();
  v2[5] = PassthroughSubject.init()();
  v2[6] = 0;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v5, (uint64_t)&off_1003347D0);
  v2[3] = a1;
  v2[4] = a2;
  return v2;
}

uint64_t sub_1002355A0()
{
  id v1 = sub_1001F6734();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HandoffViewServiceHandle()
{
  return self;
}

void sub_100235664(uint64_t a1)
{
  uint64_t v2 = v1;
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  v4._countAndFlagsBits = 0x28746E6573657270;
  v4._object = (void *)0xEE00293A68746977;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x7865746E6F63203ALL;
  v5._object = (void *)0xEA00000000003D74;
  String.append(_:)(v5);
  sub_10000A38C(&qword_10036FA08);
  _print_unlocked<A, B>(_:_:)();
  id v6 = sub_1001F6734();
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 ulog:40 message:v7];
  swift_bridgeObjectRelease();

  if (*(void *)(v2 + 16))
  {
    id v8 = sub_1001F6734();
    NSString v9 = String._bridgeToObjectiveC()();
    [v8 ulog:60 message:v9];
  }
  else
  {
    sub_1000291F4(a1, (uint64_t)v14);
    uint64_t v10 = swift_allocObject();
    swift_weakInit();
    id v11 = objc_allocWithZone((Class)type metadata accessor for PCViewServiceHandle());
    id v12 = sub_1000772F4(0xD000000000000012, 0x80000001002C69A0, (uint64_t)v14, (uint64_t)sub_1000C75B8, v10);
    swift_release();
    sub_100076E00();
    uint64_t v13 = *(void **)(v2 + 16);
    *(void *)(v2 + 16) = v12;
  }
}

void sub_100235930()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(v0 + 16);
  if (v2)
  {
    type metadata accessor for PCViewServiceHandle();
    id v3 = v2;
    uint64_t v4 = String.init<A>(describing:)();
    unint64_t v6 = v5;
  }
  else
  {
    unint64_t v6 = 0xE300000000000000;
    uint64_t v4 = 7104878;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  id v8 = sub_1001F6734();
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 ulog:40 message:v9];
  swift_bridgeObjectRelease();

  uint64_t v10 = *(void **)(v1 + 16);
  if (v10)
  {
    id v11 = v10;
    sub_100076B64();

    uint64_t v10 = *(void **)(v1 + 16);
  }
  *(void *)(v1 + 16) = 0;
}

uint64_t sub_100235A60()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_100235A98()
{
  unint64_t result = qword_10036FA10;
  if (!qword_10036FA10)
  {
    sub_10000A3D0(&qword_10036FA00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FA10);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ContextDeliveryMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100235BC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextDeliveryMode()
{
  return &type metadata for ContextDeliveryMode;
}

uint64_t sub_100235BFC()
{
  type metadata accessor for ScreenOnMonitor();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_100235C38();
  qword_1003ACB70 = v0;
  return result;
}

uint64_t sub_100235C38()
{
  sub_10000A38C(&qword_10035E150);
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  id v2 = [objc_allocWithZone((Class)CUSystemMonitor) init];
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = qword_10035A628;
  id v4 = v2;
  if (v3 != -1) {
    swift_once();
  }
  [v4 setDispatchQueue:qword_1003ACB50];

  uint64_t v5 = *(void **)(v0 + 40);
  uint64_t v16 = sub_100236078;
  uint64_t v17 = v0;
  id v12 = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256;
  char v14 = sub_10007A0AC;
  char v15 = &unk_1003348F8;
  unsigned int v6 = _Block_copy(&v12);
  id v7 = v5;
  swift_retain();
  swift_release();
  [v7 setScreenStateChangedHandler:v6];
  _Block_release(v6);

  id v8 = *(void **)(v0 + 40);
  uint64_t v16 = sub_10023606C;
  uint64_t v17 = v0;
  id v12 = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256;
  char v14 = sub_10007A0AC;
  char v15 = &unk_100334920;
  NSString v9 = _Block_copy(&v12);
  swift_retain();
  id v10 = v8;
  swift_release();
  [v10 activateWithCompletion:v9];
  _Block_release(v9);

  return v0;
}

uint64_t sub_100235E4C()
{
  [*(id *)(v0 + 40) invalidate];
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScreenOnMonitor()
{
  return self;
}

uint64_t sub_100235EC0()
{
  uint64_t v1 = *(void *)v0;
  unsigned int v2 = [*(id *)(v0 + 40) screenState];
  int v3 = v2 == 40;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  unint64_t v4 = 0xE200000000000000;
  uint64_t v5 = 28271;
  if (v2 == 30)
  {
    int v3 = 1;
  }
  else if (v2 != 40)
  {
    uint64_t v5 = 6710895;
    unint64_t v4 = 0xE300000000000000;
  }
  unint64_t v6 = v4;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  sub_10016ABE4(0xD000000000000016, (void *)0x80000001002C6A30, 0, v1, (uint64_t)&off_1003348C0);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v0 + 16);
  if (v3 != *(unsigned __int8 *)(v8 + 24))
  {
    if (v2 == 40 || v2 == 30)
    {
      uint64_t v9 = mach_continuous_time();
      char v10 = 0;
      uint64_t v8 = *(void *)(v0 + 16);
    }
    else
    {
      uint64_t v9 = 0;
      char v10 = 1;
    }
    *(void *)(v0 + 24) = v9;
    *(unsigned char *)(v0 + 32) = v10;
    *(unsigned char *)(v8 + 24) = v3;
    swift_retain();
    sub_100104B88();
    CurrentValueSubject.send(_:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100236054(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100236064()
{
  return swift_release();
}

uint64_t sub_10023607C()
{
  sub_1000D84F4(v0, (uint64_t)v16);
  sub_1000D84F4(v0, (uint64_t)&v17);
  if (v21)
  {
    uint64_t v1 = v17;
    if (v21 == 1)
    {
      uint64_t v2 = (void *)*((void *)&v17 + 1);
      *(void *)&long long v22 = 0;
      *((void *)&v22 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(void *)&long long v22 = 0xD000000000000012;
      *((void *)&v22 + 1) = 0x80000001002B21A0;
      v3._countAndFlagsBits = v1;
      v3._object = v2;
      String.append(_:)(v3);
      v4._countAndFlagsBits = 10528;
      v4._object = (void *)0xE200000000000000;
      String.append(_:)(v4);
      return v22;
    }
    else
    {
      uint64_t v11 = *((void *)&v18 + 1) | v18 | *((void *)&v17 + 1);
      if (*((void *)&v19 + 1) | v20 | (unint64_t)v17 | (unint64_t)v19 | v11)
      {
        uint64_t v12 = *((void *)&v19 + 1) | v20 | v19 | v11;
        if ((void)v17 != 1 || v12)
        {
          if ((void)v17 != 2 || v12)
          {
            if ((void)v17 != 3 || v12)
            {
              if ((void)v17 == 4 && v12 == 0) {
                return 0xD00000000000001DLL;
              }
              else {
                return 0xD000000000000014;
              }
            }
            else
            {
              return 0x65746E6573657270;
            }
          }
          else
          {
            return 0x69746E6573657270;
          }
        }
        else
        {
          return 0x646564616F6CLL;
        }
      }
      else
      {
        return 0x6574736575716572;
      }
    }
  }
  else
  {
    long long v22 = v17;
    long long v23 = v18;
    long long v24 = v19;
    uint64_t v25 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    strcpy((char *)v15, "failed( error=");
    HIBYTE(v15[1]) = -18;
    sub_100236350();
    LocalizedError.errorDescription.getter();
    uint64_t v7 = v6;
    sub_1002363A4(v0);
    if (v7)
    {
      uint64_t v8 = String.init<A>(describing:)();
      unint64_t v10 = v9;
    }
    else
    {
      unint64_t v10 = 0xE300000000000000;
      uint64_t v8 = 7104878;
    }
    unint64_t v13 = v10;
    String.append(_:)(*(Swift::String *)&v8);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 10528;
    v14._object = (void *)0xE200000000000000;
    String.append(_:)(v14);
    return v15[0];
  }
}

unint64_t sub_100236350()
{
  unint64_t result = qword_10036FB08;
  if (!qword_10036FB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FB08);
  }
  return result;
}

uint64_t sub_1002363A4(uint64_t a1)
{
  return a1;
}

unint64_t sub_1002363E0(char a1)
{
  unint64_t result = 0x6574736575716572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x646564616F6CLL;
      break;
    case 2:
      unint64_t result = 0x64656C696166;
      break;
    case 3:
      unint64_t result = 0x69746E6573657270;
      break;
    case 4:
      unint64_t result = 0x65746E6573657270;
      break;
    case 5:
      unint64_t result = 0x657373696D736964;
      break;
    case 6:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002364EC(void *a1)
{
  uint64_t v41 = sub_10000A38C(&qword_10036FBA0);
  uint64_t v40 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v39 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_10000A38C(&qword_10036FBA8);
  uint64_t v37 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  char v36 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_10000A38C(&qword_10036FBB0);
  uint64_t v53 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000A38C(&qword_10036FBB8);
  uint64_t v43 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v42 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000A38C(&qword_10036FBC0);
  uint64_t v46 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v45 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_10036FBC8);
  uint64_t v52 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000A38C(&qword_10036FBD0);
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  char v48 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_10036FBD8);
  uint64_t v51 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  Swift::String v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_10000A38C(&qword_10036FBE0);
  uint64_t v57 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_1002386DC();
  uint64_t v55 = v16;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1000D84F4(v72, (uint64_t)&v62);
  if (v66)
  {
    if (v66 == 1)
    {
      LOBYTE(v58) = 5;
      sub_1002387D8();
      uint64_t v17 = v56;
      long long v18 = v55;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v54;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v5, v19);
      return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v18, v17);
    }
    else
    {
      uint64_t v23 = *((void *)&v63 + 1) | v63 | *((void *)&v62 + 1);
      if (*((void *)&v64 + 1) | v65 | (unint64_t)v62 | (unint64_t)v64 | v23)
      {
        uint64_t v24 = *((void *)&v64 + 1) | v65 | v64 | v23;
        if ((void)v62 != 1 || v24)
        {
          if ((void)v62 != 2 || v24)
          {
            if ((void)v62 != 3 || v24)
            {
              if ((void)v62 != 4 || v24)
              {
                LOBYTE(v58) = 7;
                sub_100238730();
                BOOL v34 = v39;
                uint64_t v26 = v56;
                uint64_t v27 = v55;
                KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
                uint64_t v28 = *(void (**)(char *, void))(v40 + 8);
                uint64_t v29 = v34;
                uint64_t v30 = (char *)&v65;
              }
              else
              {
                LOBYTE(v58) = 6;
                sub_100238784();
                char v33 = v36;
                uint64_t v26 = v56;
                uint64_t v27 = v55;
                KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
                uint64_t v28 = *(void (**)(char *, void))(v37 + 8);
                uint64_t v29 = v33;
                uint64_t v30 = (char *)&v63 + 8;
              }
            }
            else
            {
              LOBYTE(v58) = 4;
              sub_10023882C();
              char v32 = v42;
              uint64_t v26 = v56;
              uint64_t v27 = v55;
              KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
              uint64_t v28 = *(void (**)(char *, void))(v43 + 8);
              uint64_t v29 = v32;
              uint64_t v30 = (char *)&v67 + 8;
            }
          }
          else
          {
            LOBYTE(v58) = 3;
            sub_100238880();
            char v31 = v45;
            uint64_t v26 = v56;
            uint64_t v27 = v55;
            KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
            uint64_t v28 = *(void (**)(char *, void))(v46 + 8);
            uint64_t v29 = v31;
            uint64_t v30 = (char *)&v69;
          }
        }
        else
        {
          LOBYTE(v58) = 1;
          sub_100238928();
          uint64_t v25 = v48;
          uint64_t v26 = v56;
          uint64_t v27 = v55;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v28 = *(void (**)(char *, void))(v49 + 8);
          uint64_t v29 = v25;
          uint64_t v30 = &v71;
        }
        v28(v29, *((void *)v30 - 32));
      }
      else
      {
        LOBYTE(v58) = 0;
        sub_10023897C();
        uint64_t v26 = v56;
        uint64_t v27 = v55;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v51 + 8))(v14, v12);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v27, v26);
    }
  }
  else
  {
    long long v67 = v62;
    long long v68 = v63;
    long long v69 = v64;
    uint64_t v70 = v65;
    LOBYTE(v58) = 2;
    sub_1002388D4();
    uint64_t v21 = v56;
    long long v22 = v55;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    long long v58 = v67;
    long long v59 = v68;
    long long v60 = v69;
    uint64_t v61 = v70;
    sub_1000D9C6C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v10, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v22, v21);
  }
}

unint64_t sub_100236EC0()
{
  return sub_1002363E0(*v0);
}

uint64_t sub_100236EC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100237708(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100236EF0(uint64_t a1)
{
  unint64_t v2 = sub_1002386DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100236F2C(uint64_t a1)
{
  unint64_t v2 = sub_1002386DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100236F68(uint64_t a1)
{
  unint64_t v2 = sub_100238784();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100236FA4(uint64_t a1)
{
  unint64_t v2 = sub_100238784();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100236FE0(uint64_t a1)
{
  unint64_t v2 = sub_100238730();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10023701C(uint64_t a1)
{
  unint64_t v2 = sub_100238730();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100237058(uint64_t a1)
{
  unint64_t v2 = sub_1002387D8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100237094(uint64_t a1)
{
  unint64_t v2 = sub_1002387D8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002370D0(uint64_t a1)
{
  unint64_t v2 = sub_1002388D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10023710C(uint64_t a1)
{
  unint64_t v2 = sub_1002388D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100237148(uint64_t a1)
{
  unint64_t v2 = sub_100238928();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100237184(uint64_t a1)
{
  unint64_t v2 = sub_100238928();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002371C0(uint64_t a1)
{
  unint64_t v2 = sub_10023882C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002371FC(uint64_t a1)
{
  unint64_t v2 = sub_10023882C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100237238(uint64_t a1)
{
  unint64_t v2 = sub_100238880();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100237274(uint64_t a1)
{
  unint64_t v2 = sub_100238880();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002372B0(uint64_t a1)
{
  unint64_t v2 = sub_10023897C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002372EC(uint64_t a1)
{
  unint64_t v2 = sub_10023897C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100237328@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100237A5C(a1, (uint64_t)v5);
  if (!v2) {
    return sub_1000D84F4((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_100237370(void *a1)
{
  sub_1000D84F4(v1, (uint64_t)&v4);
  return sub_1002364EC(a1);
}

uint64_t sub_1002373C0()
{
  sub_1000D84F4(v0, (uint64_t)&v2);
  return sub_10023607C();
}

uint64_t destroy for HomeAccessoryViewEvent(uint64_t a1)
{
  return sub_1000204CC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
}

uint64_t initializeWithCopy for HomeAccessoryViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  sub_10001FA9C(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for HomeAccessoryViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  sub_10001FA9C(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  char v18 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v10;
  sub_1000204CC(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for HomeAccessoryViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  char v4 = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v3;
  char v13 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v4;
  sub_1000204CC(v5, v7, v6, v8, v9, v10, v11, v13);
  return a1;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent()
{
  return &type metadata for HomeAccessoryViewEvent;
}

BOOL sub_1002375BC(uint64_t *a1, uint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 56);
  if (*((unsigned char *)a1 + 56))
  {
    if (*((unsigned char *)a1 + 56) == 1) {
      return v2 == 1;
    }
    uint64_t v4 = *a1;
    uint64_t v3 = a1[1];
    uint64_t v6 = *a2;
    uint64_t v5 = a2[1];
    uint64_t v8 = a2[2];
    uint64_t v7 = a2[3];
    uint64_t v10 = a2[4];
    uint64_t v9 = a2[5];
    uint64_t v11 = a2[6];
    uint64_t v12 = a1[3];
    uint64_t v13 = a1[4];
    uint64_t v14 = a1[2];
    uint64_t v15 = a1[5] | a1[6];
    uint64_t v16 = v12 | v14 | v3;
    if (!(v15 | v4 | v13 | v16)) {
      return v2 == 2 && !(v8 | v5 | v6 | v7 | v10 | v9 | v11);
    }
    uint64_t v17 = v15 | v13 | v16;
    if (v4 != 1 || v17)
    {
      if (v4 != 2 || v17)
      {
        if (v4 != 3 || v17)
        {
          if (v4 != 4 || v17)
          {
            if (v2 != 2 || v6 != 5) {
              return 0;
            }
          }
          else if (v2 != 2 || v6 != 4)
          {
            return 0;
          }
        }
        else if (v2 != 2 || v6 != 3)
        {
          return 0;
        }
      }
      else if (v2 != 2 || v6 != 2)
      {
        return 0;
      }
    }
    else if (v2 != 2 || v6 != 1)
    {
      return 0;
    }
    if (!(v8 | v5 | v7 | v10 | v9 | v11)) {
      return 1;
    }
  }
  else if (!*((unsigned char *)a2 + 56))
  {
    return 1;
  }
  return 0;
}

uint64_t sub_100237708(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574736575716572 && a2 == 0xE900000000000064;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646564616F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64656C696166 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x69746E6573657270 && a2 == 0xEA0000000000676ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65746E6573657270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x657373696D736964 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001002C6A70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001002C6A50)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_100237A5C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v70 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10036FB10);
  uint64_t v65 = *(void *)(v3 - 8);
  uint64_t v66 = v3;
  __chkstk_darwin(v3);
  unint64_t v73 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10036FB18);
  uint64_t v63 = *(void *)(v5 - 8);
  uint64_t v64 = v5;
  __chkstk_darwin(v5);
  long long v69 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10000A38C(&qword_10036FB20);
  uint64_t v52 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v72 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_10000A38C(&qword_10036FB28);
  uint64_t v61 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  long long v67 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000A38C(&qword_10036FB30);
  uint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  char v71 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_10000A38C(&qword_10036FB38);
  uint64_t v57 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  long long v68 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10000A38C(&qword_10036FB40);
  uint64_t v54 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000A38C(&qword_10036FB48);
  uint64_t v53 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000A38C(&qword_10036FB50);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1[3];
  uint64_t v74 = a1;
  sub_10000D6E4(a1, v20);
  sub_1002386DC();
  uint64_t v21 = v82;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v22 = v21;
  if (v21) {
    return sub_10000CC5C((uint64_t)v74);
  }
  uint64_t v51 = v15;
  uint64_t v50 = v13;
  uint64_t v23 = v71;
  uint64_t v24 = v72;
  uint64_t v25 = v73;
  uint64_t v82 = v17;
  uint64_t v26 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v26 + 16) != 1)
  {
    uint64_t v34 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v35 = v19;
    uint64_t v36 = v16;
    uint64_t v38 = v37;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v38 = &type metadata for HomeAccessoryViewEvent;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v34 - 8) + 104))(v38, enum case for DecodingError.typeMismatch(_:), v34);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v35, v36);
    return sub_10000CC5C((uint64_t)v74);
  }
  switch(*(unsigned char *)(v26 + 32))
  {
    case 1:
      LOBYTE(v75) = 1;
      sub_100238928();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v68 = 0;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v55);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v16);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      char v39 = 2;
      uint64_t v28 = 1;
      break;
    case 2:
      LOBYTE(v75) = 2;
      sub_1002388D4();
      uint64_t v40 = v68;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1000D9A74();
      uint64_t v41 = v56;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v40, v41);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v16);
      long long v68 = 0;
      char v39 = 0;
      uint64_t v28 = v75;
      uint64_t v29 = v76;
      uint64_t v30 = v77;
      uint64_t v31 = v78;
      uint64_t v32 = v79;
      uint64_t v33 = v80;
      uint64_t v22 = v81;
      break;
    case 3:
      LOBYTE(v75) = 3;
      sub_100238880();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v68 = 0;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v23, v59);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v16);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v28 = 2;
      goto LABEL_9;
    case 4:
      LOBYTE(v75) = 4;
      sub_10023882C();
      uint64_t v42 = v67;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v68 = 0;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v42, v60);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v16);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      char v39 = 2;
      uint64_t v28 = 3;
      break;
    case 5:
      LOBYTE(v75) = 5;
      sub_1002387D8();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v43 = v62;
      uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v22 = 0;
      uint64_t v44 = v82;
      uint64_t v29 = v47;
      long long v68 = 0;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v24, v43);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v19, v16);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      char v39 = 1;
      break;
    case 6:
      LOBYTE(v75) = 6;
      sub_100238784();
      uint64_t v45 = v69;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v68 = 0;
      (*(void (**)(char *, uint64_t))(v63 + 8))(v45, v64);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v16);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      char v39 = 2;
      uint64_t v28 = 4;
      break;
    case 7:
      LOBYTE(v75) = 7;
      sub_100238730();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v68 = 0;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v25, v66);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v16);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      char v39 = 2;
      uint64_t v28 = 5;
      break;
    default:
      LOBYTE(v75) = 0;
      sub_10023897C();
      uint64_t v27 = v51;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v68 = 0;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v27, v50);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v16);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
LABEL_9:
      char v39 = 2;
      break;
  }
  uint64_t v48 = v70;
  uint64_t result = sub_10000CC5C((uint64_t)v74);
  *(void *)uint64_t v48 = v28;
  *(void *)(v48 + 8) = v29;
  *(void *)(v48 + 16) = v30;
  *(void *)(v48 + 24) = v31;
  *(void *)(v48 + 32) = v32;
  *(void *)(v48 + 40) = v33;
  *(void *)(v48 + 48) = v22;
  *(unsigned char *)(v48 + 56) = v39;
  return result;
}

unint64_t sub_1002386DC()
{
  unint64_t result = qword_10036FB58;
  if (!qword_10036FB58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FB58);
  }
  return result;
}

unint64_t sub_100238730()
{
  unint64_t result = qword_10036FB60;
  if (!qword_10036FB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FB60);
  }
  return result;
}

unint64_t sub_100238784()
{
  unint64_t result = qword_10036FB68;
  if (!qword_10036FB68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FB68);
  }
  return result;
}

unint64_t sub_1002387D8()
{
  unint64_t result = qword_10036FB70;
  if (!qword_10036FB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FB70);
  }
  return result;
}

unint64_t sub_10023882C()
{
  unint64_t result = qword_10036FB78;
  if (!qword_10036FB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FB78);
  }
  return result;
}

unint64_t sub_100238880()
{
  unint64_t result = qword_10036FB80;
  if (!qword_10036FB80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FB80);
  }
  return result;
}

unint64_t sub_1002388D4()
{
  unint64_t result = qword_10036FB88;
  if (!qword_10036FB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FB88);
  }
  return result;
}

unint64_t sub_100238928()
{
  unint64_t result = qword_10036FB90;
  if (!qword_10036FB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FB90);
  }
  return result;
}

unint64_t sub_10023897C()
{
  unint64_t result = qword_10036FB98;
  if (!qword_10036FB98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FB98);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for HomeAccessoryViewEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100238A9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.CodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.RequestedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.RequestedCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.LoadedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.LoadedCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.FailedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.FailedCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.PresentingCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.PresentingCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.PresentedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.PresentedCodingKeys;
}

unsigned char *_s17proximitycontrold22HomeAccessoryViewEventO16FailedCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100238BC4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.DismissedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.DismissedCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.CoordinatedDismissalRequestedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.CoordinatedDismissalRequestedCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.DisambigButtonTappedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.DisambigButtonTappedCodingKeys;
}

unint64_t sub_100238C20()
{
  unint64_t result = qword_10036FBE8;
  if (!qword_10036FBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FBE8);
  }
  return result;
}

unint64_t sub_100238C78()
{
  unint64_t result = qword_10036FBF0;
  if (!qword_10036FBF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FBF0);
  }
  return result;
}

unint64_t sub_100238CD0()
{
  unint64_t result = qword_10036FBF8;
  if (!qword_10036FBF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FBF8);
  }
  return result;
}

unint64_t sub_100238D28()
{
  unint64_t result = qword_10036FC00;
  if (!qword_10036FC00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC00);
  }
  return result;
}

unint64_t sub_100238D80()
{
  unint64_t result = qword_10036FC08;
  if (!qword_10036FC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC08);
  }
  return result;
}

unint64_t sub_100238DD8()
{
  unint64_t result = qword_10036FC10;
  if (!qword_10036FC10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC10);
  }
  return result;
}

unint64_t sub_100238E30()
{
  unint64_t result = qword_10036FC18;
  if (!qword_10036FC18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC18);
  }
  return result;
}

unint64_t sub_100238E88()
{
  unint64_t result = qword_10036FC20;
  if (!qword_10036FC20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC20);
  }
  return result;
}

unint64_t sub_100238EE0()
{
  unint64_t result = qword_10036FC28;
  if (!qword_10036FC28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC28);
  }
  return result;
}

unint64_t sub_100238F38()
{
  unint64_t result = qword_10036FC30;
  if (!qword_10036FC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC30);
  }
  return result;
}

unint64_t sub_100238F90()
{
  unint64_t result = qword_10036FC38;
  if (!qword_10036FC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC38);
  }
  return result;
}

unint64_t sub_100238FE8()
{
  unint64_t result = qword_10036FC40;
  if (!qword_10036FC40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC40);
  }
  return result;
}

unint64_t sub_100239040()
{
  unint64_t result = qword_10036FC48;
  if (!qword_10036FC48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC48);
  }
  return result;
}

unint64_t sub_100239098()
{
  unint64_t result = qword_10036FC50;
  if (!qword_10036FC50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC50);
  }
  return result;
}

unint64_t sub_1002390F0()
{
  unint64_t result = qword_10036FC58;
  if (!qword_10036FC58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC58);
  }
  return result;
}

unint64_t sub_100239148()
{
  unint64_t result = qword_10036FC60;
  if (!qword_10036FC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC60);
  }
  return result;
}

unint64_t sub_1002391A0()
{
  unint64_t result = qword_10036FC68;
  if (!qword_10036FC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC68);
  }
  return result;
}

unint64_t sub_1002391F8()
{
  unint64_t result = qword_10036FC70;
  if (!qword_10036FC70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC70);
  }
  return result;
}

unint64_t sub_100239250()
{
  unint64_t result = qword_10036FC78;
  if (!qword_10036FC78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC78);
  }
  return result;
}

unint64_t sub_1002392A8()
{
  unint64_t result = qword_10036FC80;
  if (!qword_10036FC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FC80);
  }
  return result;
}

unint64_t sub_100239300()
{
  unint64_t result = qword_10036FC88[0];
  if (!qword_10036FC88[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10036FC88);
  }
  return result;
}

uint64_t sub_100239354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v8 = a5 + *(int *)(type metadata accessor for OutputEventContext() + 36);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);

  return v9(v8, a2, a3);
}

uint64_t OutputEventContext.description.getter()
{
  v0._countAndFlagsBits = 60;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 0x3D7475706E69202CLL;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v2._countAndFlagsBits = 62;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t sub_1002394B4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100239584(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  unint64_t v11 = ((v6 + v9) & ~v9) + *(void *)(v8 + 64);
  uint64_t v12 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v12 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v16, ((unint64_t)a2 + v10) & v16, v7);
  }
  return v4;
}

uint64_t sub_1002396E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t sub_100239784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_10023982C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1002398D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_10023997C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_100239A24(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(void *)(a3 + 16);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void sub_100239C1C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x100239EE8);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for OutputEventContext()
{
  return sub_10000F2E4();
}

unsigned char *storeEnumTagSinglePayload for ShockwaveEffect(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100239FF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShockwaveEffect()
{
  return &type metadata for ShockwaveEffect;
}

unint64_t sub_10023A02C(uint64_t a1)
{
  unint64_t result = sub_10023A054();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10023A054()
{
  unint64_t result = qword_10036FD10;
  if (!qword_10036FD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FD10);
  }
  return result;
}

void sub_10023A0A8(void *a1@<X8>)
{
  *a1 = &off_10031E648;
}

uint64_t sub_10023A0B8()
{
  uint64_t v1 = 0x7661776B636F6873;
  if (*v0 != 1) {
    uint64_t v1 = 0x7373696D736964;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1953393000;
  }
}

unint64_t sub_10023A114()
{
  unint64_t result = qword_10036FD18;
  if (!qword_10036FD18)
  {
    sub_10000A3D0(&qword_10036FD20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FD18);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ShockwaveEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10023A240);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShockwaveEvent()
{
  return &type metadata for ShockwaveEvent;
}

unint64_t sub_10023A278(uint64_t a1)
{
  unint64_t result = sub_10023A2A0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10023A2A0()
{
  unint64_t result = qword_10036FD28;
  if (!qword_10036FD28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FD28);
  }
  return result;
}

uint64_t sub_10023A2F4()
{
  uint64_t result = 0x6465746E6968;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7661776B636F6873;
      break;
    case 2:
      uint64_t result = 0x64656C74746573;
      break;
    case 3:
      uint64_t result = 0x657373696D736964;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CardMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC)
  {
    unsigned int v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 4;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10023A43CLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 3) {
    unsigned int v8 = v7 - 2;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 3) {
    return v8 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for CardMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFC) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v7 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x10023A524);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t sub_10023A54C(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 3) {
    return v1 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *sub_10023A560(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CardMode()
{
  return &type metadata for CardMode;
}

unint64_t sub_10023A580(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v21 = *(void *)a2;
      uint64_t v22 = *(void *)(a2 + 8);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = *(void *)(a2 + 32);
      uint64_t v26 = *(void *)(a2 + 40);
      uint64_t v27 = *(void *)(a2 + 48);
      char v38 = *(unsigned char *)(a2 + 56);
      sub_10001FBD0(*(void *)a2, v22, v23, v24, v25, v26, v27, v38);
      *(void *)a1 = v21;
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + 16) = v23;
      *(void *)(a1 + 24) = v24;
      *(void *)(a1 + 32) = v25;
      *(void *)(a1 + 40) = v26;
      *(void *)(a1 + 48) = v27;
      *(unsigned char *)(a1 + 56) = v38;
      uint64_t v28 = *(int *)(sub_10000A38C(&qword_100367CE0) + 48);
      uint64_t v29 = a1 + v28;
      uint64_t v30 = a2 + v28;
      uint64_t v31 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v32 = *(int *)(sub_10000A38C(&qword_100367CE8) + 48);
      uint64_t v33 = a1 + v32;
      uint64_t v34 = a2 + v32;
      uint64_t v35 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy((void *)a1, (const void *)a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v11 = *(void *)(a2 + 24);
      uint64_t v12 = *(void *)(a2 + 32);
      uint64_t v13 = *(void *)(a2 + 40);
      uint64_t v14 = *(void *)(a2 + 48);
      unsigned __int8 v37 = *(unsigned char *)(a2 + 56);
      sub_10001FA00(*(void *)a2, v9, v10, v11, v12, v13, v14, v37);
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = v11;
      *(void *)(a1 + 32) = v12;
      *(void *)(a1 + 40) = v13;
      *(void *)(a1 + 48) = v14;
      *(unsigned char *)(a1 + 56) = v37;
      uint64_t v15 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v15;
      swift_bridgeObjectRetain();
      uint64_t v16 = *(int *)(sub_10000A38C(&qword_100367CF0) + 64);
      uint64_t v17 = a1 + v16;
      uint64_t v18 = a2 + v16;
      uint64_t v19 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_10023A844(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    sub_1000205C8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
    int v4 = &qword_100367CE0;
LABEL_7:
    uint64_t v3 = *(int *)(sub_10000A38C(v4) + 48);
    goto LABEL_8;
  }
  if (result == 1)
  {
    int v4 = &qword_100367CE8;
    goto LABEL_7;
  }
  if (result) {
    return result;
  }
  sub_100020430(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  swift_bridgeObjectRelease();
  uint64_t v3 = *(int *)(sub_10000A38C(&qword_100367CF0) + 64);
LABEL_8:
  uint64_t v5 = a1 + v3;
  uint64_t v6 = type metadata accessor for Date();
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_10023A938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v19 = *(void *)a2;
    uint64_t v20 = *(void *)(a2 + 8);
    uint64_t v21 = *(void *)(a2 + 16);
    uint64_t v22 = *(void *)(a2 + 24);
    uint64_t v23 = *(void *)(a2 + 32);
    uint64_t v24 = *(void *)(a2 + 40);
    uint64_t v25 = *(void *)(a2 + 48);
    char v36 = *(unsigned char *)(a2 + 56);
    sub_10001FBD0(*(void *)a2, v20, v21, v22, v23, v24, v25, v36);
    *(void *)a1 = v19;
    *(void *)(a1 + 8) = v20;
    *(void *)(a1 + 16) = v21;
    *(void *)(a1 + 24) = v22;
    *(void *)(a1 + 32) = v23;
    *(void *)(a1 + 40) = v24;
    *(void *)(a1 + 48) = v25;
    *(unsigned char *)(a1 + 56) = v36;
    uint64_t v26 = *(int *)(sub_10000A38C(&qword_100367CE0) + 48);
    uint64_t v27 = a1 + v26;
    uint64_t v28 = a2 + v26;
    uint64_t v29 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v30 = *(int *)(sub_10000A38C(&qword_100367CE8) + 48);
    uint64_t v31 = a1 + v30;
    uint64_t v32 = a2 + v30;
    uint64_t v33 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 24);
    uint64_t v11 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    uint64_t v13 = *(void *)(a2 + 48);
    unsigned __int8 v35 = *(unsigned char *)(a2 + 56);
    sub_10001FA00(*(void *)a2, v8, v9, v10, v11, v12, v13, v35);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v11;
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v13;
    *(unsigned char *)(a1 + 56) = v35;
    uint64_t v14 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v14;
    swift_bridgeObjectRetain();
    uint64_t v15 = *(int *)(sub_10000A38C(&qword_100367CF0) + 64);
    uint64_t v16 = a1 + v15;
    uint64_t v17 = a2 + v15;
    uint64_t v18 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10023ABB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10023CE7C(a1, type metadata accessor for ViewServiceOutput);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v18 = *(void *)a2;
      uint64_t v19 = *(void *)(a2 + 8);
      uint64_t v20 = *(void *)(a2 + 16);
      uint64_t v21 = *(void *)(a2 + 24);
      uint64_t v22 = *(void *)(a2 + 32);
      uint64_t v23 = *(void *)(a2 + 40);
      uint64_t v24 = *(void *)(a2 + 48);
      char v35 = *(unsigned char *)(a2 + 56);
      sub_10001FBD0(*(void *)a2, v19, v20, v21, v22, v23, v24, v35);
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v20;
      *(void *)(a1 + 24) = v21;
      *(void *)(a1 + 32) = v22;
      *(void *)(a1 + 40) = v23;
      *(void *)(a1 + 48) = v24;
      *(unsigned char *)(a1 + 56) = v35;
      uint64_t v25 = *(int *)(sub_10000A38C(&qword_100367CE0) + 48);
      uint64_t v26 = a1 + v25;
      uint64_t v27 = a2 + v25;
      uint64_t v28 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v29 = *(int *)(sub_10000A38C(&qword_100367CE8) + 48);
      uint64_t v30 = a1 + v29;
      uint64_t v31 = a2 + v29;
      uint64_t v32 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = *(void *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 24);
      uint64_t v11 = *(void *)(a2 + 32);
      uint64_t v12 = *(void *)(a2 + 40);
      uint64_t v13 = *(void *)(a2 + 48);
      unsigned __int8 v34 = *(unsigned char *)(a2 + 56);
      sub_10001FA00(*(void *)a2, v8, v9, v10, v11, v12, v13, v34);
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v9;
      *(void *)(a1 + 24) = v10;
      *(void *)(a1 + 32) = v11;
      *(void *)(a1 + 40) = v12;
      *(void *)(a1 + 48) = v13;
      *(unsigned char *)(a1 + 56) = v34;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      uint64_t v14 = *(int *)(sub_10000A38C(&qword_100367CF0) + 64);
      uint64_t v15 = a1 + v14;
      uint64_t v16 = a2 + v14;
      uint64_t v17 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata accessor for ViewServiceOutput(uint64_t a1)
{
  return sub_100014F7C(a1, qword_10036FDA0);
}

_OWORD *sub_10023AE84(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    long long v12 = a2[1];
    *a1 = *a2;
    a1[1] = v12;
    a1[2] = a2[2];
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    uint64_t v13 = *(int *)(sub_10000A38C(&qword_100367CE0) + 48);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v17 = *(int *)(sub_10000A38C(&qword_100367CE8) + 48);
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    long long v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    a1[4] = a2[4];
    uint64_t v8 = *(int *)(sub_10000A38C(&qword_100367CF0) + 64);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_10023B070(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10023CE7C((uint64_t)a1, type metadata accessor for ViewServiceOutput);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      long long v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      a1[2] = a2[2];
      *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      uint64_t v13 = *(int *)(sub_10000A38C(&qword_100367CE0) + 48);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v17 = *(int *)(sub_10000A38C(&qword_100367CE8) + 48);
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      long long v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      a1[2] = a2[2];
      *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      a1[4] = a2[4];
      uint64_t v8 = *(int *)(sub_10000A38C(&qword_100367CF0) + 64);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_10023B280()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    uint64_t v5 = &v4;
    swift_getTupleTypeLayout2();
    uint64_t v6 = &v3;
    swift_getTupleTypeLayout2();
    long long v7 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *sub_10023B368(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        long long v7 = (void *)*((void *)a2 + 5);
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *((void *)a1 + 5) = v7;
        uint64_t v8 = type metadata accessor for ActivityDisplayContext(0);
        uint64_t v9 = *(int *)(v8 + 32);
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        uint64_t v12 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
        swift_bridgeObjectRetain();
        id v13 = v7;
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v80 = v12;
        if (EnumCaseMultiPayload == 2)
        {
          uint64_t v77 = v8;
          uint64_t v29 = *((void *)v11 + 1);
          *(void *)uint64_t v10 = *(void *)v11;
          *((void *)v10 + 1) = v29;
          uint64_t v30 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
          __dst = &v10[v30];
          uint64_t v31 = &v11[v30];
          uint64_t v32 = type metadata accessor for Date();
          uint64_t v33 = *(void *)(v32 - 8);
          unsigned __int8 v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
          swift_bridgeObjectRetain();
          if (v34(v31, 1, v32))
          {
            uint64_t v35 = sub_10000A38C(&qword_10035E158);
            memcpy(__dst, v31, *(void *)(*(void *)(v35 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v33 + 16))(__dst, v31, v32);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
          }
          swift_storeEnumTagMultiPayload();
          uint64_t v8 = v77;
          goto LABEL_27;
        }
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v78 = v8;
          uint64_t v36 = *((void *)v11 + 1);
          *(void *)uint64_t v10 = *(void *)v11;
          *((void *)v10 + 1) = v36;
          uint64_t v37 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
          uint64_t v38 = *(int *)(v37 + 20);
          unint64_t v73 = &v10[v38];
          __dsta = (int *)v37;
          uint64_t v72 = &v11[v38];
          uint64_t v39 = type metadata accessor for Date();
          uint64_t v40 = *(void *)(v39 - 8);
          uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
          swift_bridgeObjectRetain();
          if (v41(v72, 1, v39))
          {
            uint64_t v42 = sub_10000A38C(&qword_10035E158);
            memcpy(v73, v72, *(void *)(*(void *)(v42 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v73, v72, v39);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v73, 0, 1, v39);
          }
          uint64_t v8 = v78;
          uint64_t v12 = v80;
          uint64_t v43 = __dsta[6];
          uint64_t v44 = &v10[v43];
          uint64_t v45 = &v11[v43];
          uint64_t v46 = *((void *)v45 + 1);
          *(void *)uint64_t v44 = *(void *)v45;
          *((void *)v44 + 1) = v46;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (EnumCaseMultiPayload)
          {
            memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
LABEL_27:
            uint64_t v47 = *(int *)(v8 + 36);
            uint64_t v48 = &a1[v47];
            uint64_t v49 = &a2[v47];
            int v50 = swift_getEnumCaseMultiPayload();
            if (v50 == 2)
            {
              uint64_t v52 = *((void *)v49 + 1);
              *(void *)uint64_t v48 = *(void *)v49;
              *((void *)v48 + 1) = v52;
              uint64_t v53 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
              uint64_t v54 = &v48[v53];
              uint64_t v55 = &v49[v53];
              uint64_t v56 = type metadata accessor for Date();
              uint64_t v57 = *(void *)(v56 - 8);
              uint64_t v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
              swift_bridgeObjectRetain();
              if (v58(v55, 1, v56))
              {
                uint64_t v59 = sub_10000A38C(&qword_10035E158);
                memcpy(v54, v55, *(void *)(*(void *)(v59 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v54, v55, v56);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
              }
            }
            else if (v50 == 1)
            {
              uint64_t v60 = *((void *)v49 + 1);
              *(void *)uint64_t v48 = *(void *)v49;
              *((void *)v48 + 1) = v60;
              uint64_t v61 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
              uint64_t v62 = *(int *)(v61 + 20);
              __dstb = &v48[v62];
              uint64_t v79 = v61;
              uint64_t v63 = &v49[v62];
              uint64_t v64 = type metadata accessor for Date();
              uint64_t v65 = *(void *)(v64 - 8);
              uint64_t v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
              swift_bridgeObjectRetain();
              if (v66(v63, 1, v64))
              {
                uint64_t v67 = sub_10000A38C(&qword_10035E158);
                memcpy(__dstb, v63, *(void *)(*(void *)(v67 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v65 + 16))(__dstb, v63, v64);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(__dstb, 0, 1, v64);
              }
              uint64_t v68 = *(int *)(v79 + 24);
              long long v69 = &v48[v68];
              uint64_t v70 = &v49[v68];
              uint64_t v71 = *((void *)v70 + 1);
              *(void *)long long v69 = *(void *)v70;
              *((void *)v69 + 1) = v71;
              swift_bridgeObjectRetain();
            }
            else
            {
              if (v50)
              {
                memcpy(v48, v49, *(void *)(*(void *)(v12 - 8) + 64));
                goto LABEL_16;
              }
              uint64_t v51 = *((void *)v49 + 1);
              *(void *)uint64_t v48 = *(void *)v49;
              *((void *)v48 + 1) = v51;
              swift_bridgeObjectRetain();
            }
            swift_storeEnumTagMultiPayload();
            goto LABEL_16;
          }
          uint64_t v15 = *((void *)v11 + 1);
          *(void *)uint64_t v10 = *(void *)v11;
          *((void *)v10 + 1) = v15;
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_27;
      case 2u:
        uint64_t v18 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v18;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 3u:
        uint64_t v19 = *(void **)a2;
        if (*(void *)a2 == 1)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          uint64_t v27 = *((void *)a2 + 1);
          *(void *)a1 = v19;
          *((void *)a1 + 1) = v27;
          id v28 = v19;
        }
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return a1;
      case 4u:
        uint64_t v20 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v21 = v20;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 6u:
        *(void *)a1 = *(void *)a2;
        uint64_t v22 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
        uint64_t v23 = &a1[v22];
        uint64_t v24 = &a2[v22];
        uint64_t v25 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
        uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
        swift_bridgeObjectRetain();
        v26(v23, v24, v25);
        swift_storeEnumTagMultiPayload();
        return a1;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
    }
  }
  uint64_t v16 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  a1 = (char *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

void sub_10023BB0C(void **a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();

      uint64_t v2 = type metadata accessor for ActivityDisplayContext(0);
      char v3 = (char *)a1 + *(int *)(v2 + 32);
      type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        swift_bridgeObjectRelease();
        uint64_t v11 = &v3[*(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20)];
        uint64_t v12 = type metadata accessor for Date();
        uint64_t v13 = *(void *)(v12 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
          (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
        }
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v14 = &v3[*(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20)];
          uint64_t v15 = type metadata accessor for Date();
          uint64_t v16 = *(void *)(v15 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
            (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
          }
        }
        else if (EnumCaseMultiPayload)
        {
          goto LABEL_21;
        }
        swift_bridgeObjectRelease();
      }
LABEL_21:
      uint64_t v17 = (char *)a1 + *(int *)(v2 + 36);
      int v18 = swift_getEnumCaseMultiPayload();
      switch(v18)
      {
        case 2:
          swift_bridgeObjectRelease();
          uint64_t v19 = &v17[*(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20)];
          uint64_t v20 = type metadata accessor for Date();
          uint64_t v24 = *(void *)(v20 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v19, 1, v20))
          {
            uint64_t v8 = *(void (**)(char *, uint64_t))(v24 + 8);
            uint64_t v10 = v19;
            uint64_t v9 = v20;
            goto LABEL_13;
          }
          break;
        case 1:
          swift_bridgeObjectRelease();
          id v21 = &v17[*(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20)];
          uint64_t v22 = type metadata accessor for Date();
          uint64_t v23 = *(void *)(v22 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22)) {
            (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
          }
          goto LABEL_24;
        case 0:
          goto LABEL_24;
      }
      return;
    case 2u:
LABEL_24:
      swift_bridgeObjectRelease();
      return;
    case 3u:
      int v5 = *a1;
      if (*a1 != (void *)1) {
        goto LABEL_9;
      }
      return;
    case 4u:
      int v5 = *a1;
LABEL_9:

      return;
    case 6u:
      swift_bridgeObjectRelease();
      uint64_t v6 = (char *)a1 + *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
      uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
      uint64_t v8 = *(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8);
      uint64_t v9 = v7;
      uint64_t v10 = v6;
LABEL_13:
      v8(v10, v9);
      return;
    default:
      return;
  }
}

char *sub_10023BF58(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      uint64_t v6 = (void *)*((void *)a2 + 5);
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *((void *)a1 + 5) = v6;
      uint64_t v7 = type metadata accessor for ActivityDisplayContext(0);
      uint64_t v8 = *(int *)(v7 + 32);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
      swift_bridgeObjectRetain();
      id v12 = v6;
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v78 = v11;
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v75 = v7;
        uint64_t v26 = *((void *)v10 + 1);
        *(void *)uint64_t v9 = *(void *)v10;
        *((void *)v9 + 1) = v26;
        uint64_t v27 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
        __dst = &v9[v27];
        id v28 = &v10[v27];
        uint64_t v29 = type metadata accessor for Date();
        uint64_t v30 = *(void *)(v29 - 8);
        uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
        swift_bridgeObjectRetain();
        if (v31(v28, 1, v29))
        {
          uint64_t v32 = sub_10000A38C(&qword_10035E158);
          memcpy(__dst, v28, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v30 + 16))(__dst, v28, v29);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v29);
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v7 = v75;
        goto LABEL_23;
      }
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v76 = v7;
        uint64_t v33 = *((void *)v10 + 1);
        *(void *)uint64_t v9 = *(void *)v10;
        *((void *)v9 + 1) = v33;
        uint64_t v34 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
        uint64_t v35 = *(int *)(v34 + 20);
        uint64_t v71 = &v9[v35];
        __dsta = (int *)v34;
        uint64_t v70 = &v10[v35];
        uint64_t v36 = type metadata accessor for Date();
        uint64_t v37 = *(void *)(v36 - 8);
        uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
        swift_bridgeObjectRetain();
        if (v38(v70, 1, v36))
        {
          uint64_t v39 = sub_10000A38C(&qword_10035E158);
          memcpy(v71, v70, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v71, v70, v36);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v71, 0, 1, v36);
        }
        uint64_t v7 = v76;
        uint64_t v11 = v78;
        uint64_t v40 = __dsta[6];
        uint64_t v41 = &v9[v40];
        uint64_t v42 = &v10[v40];
        uint64_t v43 = *((void *)v42 + 1);
        *(void *)uint64_t v41 = *(void *)v42;
        *((void *)v41 + 1) = v43;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
LABEL_23:
          uint64_t v44 = *(int *)(v7 + 36);
          uint64_t v45 = &a1[v44];
          uint64_t v46 = &a2[v44];
          int v47 = swift_getEnumCaseMultiPayload();
          if (v47 == 2)
          {
            uint64_t v49 = *((void *)v46 + 1);
            *(void *)uint64_t v45 = *(void *)v46;
            *((void *)v45 + 1) = v49;
            uint64_t v50 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
            uint64_t v51 = &v45[v50];
            uint64_t v52 = &v46[v50];
            uint64_t v53 = type metadata accessor for Date();
            uint64_t v54 = *(void *)(v53 - 8);
            uint64_t v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
            swift_bridgeObjectRetain();
            if (v55(v52, 1, v53))
            {
              uint64_t v56 = sub_10000A38C(&qword_10035E158);
              memcpy(v51, v52, *(void *)(*(void *)(v56 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v51, v52, v53);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
            }
          }
          else if (v47 == 1)
          {
            uint64_t v57 = *((void *)v46 + 1);
            *(void *)uint64_t v45 = *(void *)v46;
            *((void *)v45 + 1) = v57;
            uint64_t v58 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
            uint64_t v59 = *(int *)(v58 + 20);
            __dstb = &v45[v59];
            uint64_t v77 = v58;
            uint64_t v60 = &v46[v59];
            uint64_t v61 = type metadata accessor for Date();
            uint64_t v62 = *(void *)(v61 - 8);
            uint64_t v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
            swift_bridgeObjectRetain();
            if (v63(v60, 1, v61))
            {
              uint64_t v64 = sub_10000A38C(&qword_10035E158);
              memcpy(__dstb, v60, *(void *)(*(void *)(v64 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v62 + 16))(__dstb, v60, v61);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(__dstb, 0, 1, v61);
            }
            uint64_t v65 = *(int *)(v77 + 24);
            uint64_t v66 = &v45[v65];
            uint64_t v67 = &v46[v65];
            uint64_t v68 = *((void *)v67 + 1);
            *(void *)uint64_t v66 = *(void *)v67;
            *((void *)v66 + 1) = v68;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (v47)
            {
              memcpy(v45, v46, *(void *)(*(void *)(v11 - 8) + 64));
              goto LABEL_36;
            }
            uint64_t v48 = *((void *)v46 + 1);
            *(void *)uint64_t v45 = *(void *)v46;
            *((void *)v45 + 1) = v48;
            swift_bridgeObjectRetain();
          }
          swift_storeEnumTagMultiPayload();
          goto LABEL_36;
        }
        uint64_t v14 = *((void *)v10 + 1);
        *(void *)uint64_t v9 = *(void *)v10;
        *((void *)v9 + 1) = v14;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_23;
    case 2u:
      uint64_t v15 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v15;
      swift_bridgeObjectRetain();
      goto LABEL_36;
    case 3u:
      uint64_t v16 = *(void **)a2;
      if (*(void *)a2 == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        uint64_t v24 = *((void *)a2 + 1);
        *(void *)a1 = v16;
        *((void *)a1 + 1) = v24;
        id v25 = v16;
      }
      goto LABEL_36;
    case 4u:
      uint64_t v17 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v18 = v17;
      goto LABEL_36;
    case 6u:
      *(void *)a1 = *(void *)a2;
      uint64_t v19 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
      uint64_t v20 = &a1[v19];
      id v21 = &a2[v19];
      uint64_t v22 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
      swift_bridgeObjectRetain();
      v23(v20, v21, v22);
LABEL_36:
      swift_storeEnumTagMultiPayload();
      return a1;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
  }
}

char *sub_10023C6A8(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10023CE7C((uint64_t)a1, type metadata accessor for ViewServiceInput);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = *(void *)a2;
        a1[8] = a2[8];
        *(void *)a1 = v6;
        *((void *)a1 + 2) = *((void *)a2 + 2);
        *((void *)a1 + 3) = *((void *)a2 + 3);
        *((void *)a1 + 4) = *((void *)a2 + 4);
        uint64_t v7 = (void *)*((void *)a2 + 5);
        *((void *)a1 + 5) = v7;
        uint64_t v8 = type metadata accessor for ActivityDisplayContext(0);
        uint64_t v9 = *(int *)(v8 + 32);
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        uint64_t v12 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
        swift_bridgeObjectRetain();
        id v13 = v7;
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v69 = v12;
        if (EnumCaseMultiPayload == 2)
        {
          uint64_t v66 = (void *)v8;
          *(void *)uint64_t v10 = *(void *)v11;
          *((void *)v10 + 1) = *((void *)v11 + 1);
          uint64_t v24 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
          __dst = &v10[v24];
          id v25 = &v11[v24];
          uint64_t v26 = type metadata accessor for Date();
          uint64_t v27 = *(void *)(v26 - 8);
          id v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
          swift_bridgeObjectRetain();
          if (v28(v25, 1, v26))
          {
            uint64_t v29 = sub_10000A38C(&qword_10035E158);
            memcpy(__dst, v25, *(void *)(*(void *)(v29 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v25, v26);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
          }
          swift_storeEnumTagMultiPayload();
          uint64_t v8 = (uint64_t)v66;
          goto LABEL_24;
        }
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v67 = (void *)v8;
          *(void *)uint64_t v10 = *(void *)v11;
          *((void *)v10 + 1) = *((void *)v11 + 1);
          uint64_t v30 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
          uint64_t v31 = *(int *)(v30 + 20);
          uint64_t v62 = v30;
          __dsta = &v10[v31];
          uint64_t v61 = &v11[v31];
          uint64_t v32 = type metadata accessor for Date();
          uint64_t v33 = *(void *)(v32 - 8);
          uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
          swift_bridgeObjectRetain();
          if (v34(v61, 1, v32))
          {
            uint64_t v35 = sub_10000A38C(&qword_10035E158);
            memcpy(__dsta, v61, *(void *)(*(void *)(v35 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v33 + 16))(__dsta, v61, v32);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(__dsta, 0, 1, v32);
          }
          uint64_t v8 = (uint64_t)v67;
          uint64_t v12 = v69;
          uint64_t v36 = *(int *)(v62 + 24);
          uint64_t v37 = &v10[v36];
          uint64_t v38 = &v11[v36];
          *(void *)uint64_t v37 = *(void *)v38;
          *((void *)v37 + 1) = *((void *)v38 + 1);
          swift_bridgeObjectRetain();
        }
        else
        {
          if (EnumCaseMultiPayload)
          {
            memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
LABEL_24:
            uint64_t v39 = *(int *)(v8 + 36);
            uint64_t v40 = &a1[v39];
            uint64_t v41 = &a2[v39];
            int v42 = swift_getEnumCaseMultiPayload();
            if (v42 == 2)
            {
              *(void *)uint64_t v40 = *(void *)v41;
              *((void *)v40 + 1) = *((void *)v41 + 1);
              uint64_t v43 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
              uint64_t v44 = &v40[v43];
              uint64_t v45 = &v41[v43];
              uint64_t v46 = type metadata accessor for Date();
              uint64_t v47 = *(void *)(v46 - 8);
              uint64_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
              swift_bridgeObjectRetain();
              if (v48(v45, 1, v46))
              {
                uint64_t v49 = sub_10000A38C(&qword_10035E158);
                memcpy(v44, v45, *(void *)(*(void *)(v49 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
              }
            }
            else if (v42 == 1)
            {
              *(void *)uint64_t v40 = *(void *)v41;
              *((void *)v40 + 1) = *((void *)v41 + 1);
              uint64_t v50 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
              uint64_t v51 = *(int *)(v50 + 20);
              __dstb = (int *)v50;
              uint64_t v68 = &v40[v51];
              uint64_t v52 = &v41[v51];
              uint64_t v53 = type metadata accessor for Date();
              uint64_t v54 = *(void *)(v53 - 8);
              uint64_t v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
              swift_bridgeObjectRetain();
              if (v55(v52, 1, v53))
              {
                uint64_t v56 = sub_10000A38C(&qword_10035E158);
                memcpy(v68, v52, *(void *)(*(void *)(v56 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v68, v52, v53);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v68, 0, 1, v53);
              }
              uint64_t v57 = __dstb[6];
              uint64_t v58 = &v40[v57];
              uint64_t v59 = &v41[v57];
              *(void *)uint64_t v58 = *(void *)v59;
              *((void *)v58 + 1) = *((void *)v59 + 1);
              swift_bridgeObjectRetain();
            }
            else
            {
              if (v42)
              {
                memcpy(v40, v41, *(void *)(*(void *)(v12 - 8) + 64));
                goto LABEL_37;
              }
              *(void *)uint64_t v40 = *(void *)v41;
              *((void *)v40 + 1) = *((void *)v41 + 1);
              swift_bridgeObjectRetain();
            }
            swift_storeEnumTagMultiPayload();
            goto LABEL_37;
          }
          *(void *)uint64_t v10 = *(void *)v11;
          *((void *)v10 + 1) = *((void *)v11 + 1);
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_24;
      case 2u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_37;
      case 3u:
        uint64_t v15 = *(void **)a2;
        if (*(void *)a2 == 1)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          *(void *)a1 = v15;
          *((void *)a1 + 1) = *((void *)a2 + 1);
          id v23 = v15;
        }
        goto LABEL_37;
      case 4u:
        uint64_t v16 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v17 = v16;
        goto LABEL_37;
      case 6u:
        *(void *)a1 = *(void *)a2;
        uint64_t v18 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
        uint64_t v19 = &a1[v18];
        uint64_t v20 = &a2[v18];
        uint64_t v21 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
        uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
        swift_bridgeObjectRetain();
        v22(v19, v20, v21);
LABEL_37:
        swift_storeEnumTagMultiPayload();
        return a1;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

uint64_t sub_10023CE7C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for ViewServiceInput(uint64_t a1)
{
  return sub_100014F7C(a1, qword_10036FE48);
}

char *sub_10023CEFC(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 6)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v19 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
    uint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    uint64_t v22 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
    goto LABEL_27;
  }
  if (!EnumCaseMultiPayload)
  {
    *(void *)a1 = *(void *)a2;
    a1[8] = a2[8];
    *((void *)a1 + 2) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *((void *)a1 + 5) = *((void *)a2 + 5);
    uint64_t v7 = type metadata accessor for ActivityDisplayContext(0);
    uint64_t v8 = *(int *)(v7 + 32);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
    int v12 = swift_getEnumCaseMultiPayload();
    if (v12 == 2)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      uint64_t v23 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      uint64_t v24 = &v9[v23];
      id v25 = &v10[v23];
      uint64_t v26 = type metadata accessor for Date();
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v28 = sub_10000A38C(&qword_10035E158);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
    }
    else
    {
      if (v12 != 1)
      {
        memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
LABEL_16:
        uint64_t v29 = *(int *)(v7 + 36);
        uint64_t v30 = &a1[v29];
        uint64_t v31 = &a2[v29];
        int v32 = swift_getEnumCaseMultiPayload();
        if (v32 == 2)
        {
          *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
          uint64_t v40 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
          uint64_t v41 = &v30[v40];
          int v42 = &v31[v40];
          uint64_t v43 = type metadata accessor for Date();
          uint64_t v44 = *(void *)(v43 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
          {
            uint64_t v45 = sub_10000A38C(&qword_10035E158);
            memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v41, v42, v43);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
          }
LABEL_26:
          swift_storeEnumTagMultiPayload();
          goto LABEL_27;
        }
        if (v32 == 1)
        {
          *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
          uint64_t v33 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
          uint64_t v34 = *(int *)(v33 + 20);
          uint64_t v35 = &v30[v34];
          uint64_t v36 = &v31[v34];
          uint64_t v37 = type metadata accessor for Date();
          uint64_t v38 = *(void *)(v37 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
          {
            uint64_t v39 = sub_10000A38C(&qword_10035E158);
            memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
          }
          *(_OWORD *)&v30[*(int *)(v33 + 24)] = *(_OWORD *)&v31[*(int *)(v33 + 24)];
          goto LABEL_26;
        }
        memcpy(v30, v31, *(void *)(*(void *)(v11 - 8) + 64));
LABEL_27:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      uint64_t v13 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      uint64_t v14 = *(int *)(v13 + 20);
      uint64_t v47 = v13;
      __dst = &v9[v14];
      uint64_t v15 = &v10[v14];
      uint64_t v16 = type metadata accessor for Date();
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = sub_10000A38C(&qword_10035E158);
        memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(__dst, v15, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      *(_OWORD *)&v9[*(int *)(v47 + 24)] = *(_OWORD *)&v10[*(int *)(v47 + 24)];
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_16;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *sub_10023D4E4(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10023CE7C((uint64_t)a1, type metadata accessor for ViewServiceInput);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 6)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v19 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
      uint64_t v20 = &a1[v19];
      uint64_t v21 = &a2[v19];
      uint64_t v22 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
      goto LABEL_28;
    }
    if (!EnumCaseMultiPayload)
    {
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *((void *)a1 + 5) = *((void *)a2 + 5);
      uint64_t v7 = type metadata accessor for ActivityDisplayContext(0);
      uint64_t v8 = *(int *)(v7 + 32);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
      int v12 = swift_getEnumCaseMultiPayload();
      if (v12 == 2)
      {
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        uint64_t v23 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
        uint64_t v24 = &v9[v23];
        id v25 = &v10[v23];
        uint64_t v26 = type metadata accessor for Date();
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          uint64_t v28 = sub_10000A38C(&qword_10035E158);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
      }
      else
      {
        if (v12 != 1)
        {
          memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
LABEL_17:
          uint64_t v29 = *(int *)(v7 + 36);
          uint64_t v30 = &a1[v29];
          uint64_t v31 = &a2[v29];
          int v32 = swift_getEnumCaseMultiPayload();
          if (v32 == 2)
          {
            *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
            uint64_t v40 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
            uint64_t v41 = &v30[v40];
            int v42 = &v31[v40];
            uint64_t v43 = type metadata accessor for Date();
            uint64_t v44 = *(void *)(v43 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
            {
              uint64_t v45 = sub_10000A38C(&qword_10035E158);
              memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v41, v42, v43);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
            }
LABEL_27:
            swift_storeEnumTagMultiPayload();
            goto LABEL_28;
          }
          if (v32 == 1)
          {
            *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
            uint64_t v33 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
            uint64_t v34 = *(int *)(v33 + 20);
            uint64_t v35 = &v30[v34];
            uint64_t v36 = &v31[v34];
            uint64_t v37 = type metadata accessor for Date();
            uint64_t v38 = *(void *)(v37 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
            {
              uint64_t v39 = sub_10000A38C(&qword_10035E158);
              memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
            }
            *(_OWORD *)&v30[*(int *)(v33 + 24)] = *(_OWORD *)&v31[*(int *)(v33 + 24)];
            goto LABEL_27;
          }
          memcpy(v30, v31, *(void *)(*(void *)(v11 - 8) + 64));
LABEL_28:
          swift_storeEnumTagMultiPayload();
          return a1;
        }
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        uint64_t v13 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
        uint64_t v14 = *(int *)(v13 + 20);
        uint64_t v47 = v13;
        __dst = &v9[v14];
        uint64_t v15 = &v10[v14];
        uint64_t v16 = type metadata accessor for Date();
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
        {
          uint64_t v18 = sub_10000A38C(&qword_10035E158);
          memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v17 + 32))(__dst, v15, v16);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
        }
        *(_OWORD *)&v9[*(int *)(v47 + 24)] = *(_OWORD *)&v10[*(int *)(v47 + 24)];
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_17;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10023DAF0()
{
  uint64_t result = type metadata accessor for ActivityDisplayContext(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NearbySharingInteractionDisplayContext();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_10023DBE8(char a1)
{
  if (a1 == 3) {
    return 0x726F737365636361;
  }
  if (a1 == 4) {
    return 1701602409;
  }
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x736F6C4365766F6DLL;
    }
    else {
      uint64_t v3 = 0x6574656C706D6F63;
    }
    if (a1 == 1) {
      unint64_t v4 = 0xEA00000000007265;
    }
    else {
      unint64_t v4 = 0xE800000000000000;
    }
  }
  else
  {
    unint64_t v4 = 0xE500000000000000;
    uint64_t v3 = 0x6F72746E69;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 10528;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  return 0xD000000000000015;
}

uint64_t sub_10023DD10(void *a1, int a2)
{
  int v24 = a2;
  uint64_t v22 = sub_10000A38C(&qword_10036FEC8);
  uint64_t v20 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v19 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000A38C(&qword_10036FED0);
  uint64_t v21 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036FED8);
  uint64_t v18 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_10036FEE0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100242B5C();
  char v13 = v24;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v13 == 4)
  {
    char v28 = 2;
    sub_100242BB0();
    uint64_t v14 = v19;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  if (v13 == 3)
  {
    char v25 = 0;
    sub_100242CAC();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  char v27 = 1;
  sub_100242C04();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  char v26 = v13;
  sub_100242D00();
  uint64_t v16 = v23;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_10023E0E8(char a1)
{
  unint64_t result = 0xD000000000000016;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x65646F4D64726163;
      break;
    case 2:
      unint64_t result = 0x7373696D736964;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0x6E6F70736552726DLL;
      break;
    case 5:
      unint64_t result = 1735289200;
      break;
    case 6:
      unint64_t result = 0x73736572676F7270;
      break;
    case 7:
      unint64_t result = 0xD000000000000026;
      break;
    default:
      return result;
  }
  return result;
}

void sub_10023E1F4(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_100370040);
  uint64_t v83 = *(void *)(v2 - 8);
  uint64_t v84 = v2;
  __chkstk_darwin(v2);
  uint64_t v82 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for NearbySharingInteractionDisplayContext();
  __chkstk_darwin(v80);
  uint64_t v81 = (uint64_t)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_100370048);
  uint64_t v78 = *(void *)(v5 - 8);
  uint64_t v79 = v5;
  __chkstk_darwin(v5);
  uint64_t v77 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_100370050);
  uint64_t v73 = *(void *)(v7 - 8);
  uint64_t v74 = v7;
  __chkstk_darwin(v7);
  uint64_t v70 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_100370058);
  uint64_t v75 = *(void *)(v9 - 8);
  uint64_t v76 = v9;
  __chkstk_darwin(v9);
  uint64_t v72 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000A38C(&qword_100370060);
  uint64_t v69 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v68 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000A38C(&qword_100370068);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v65 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000A38C(&qword_100370070);
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v61 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10000A38C(&qword_100370078);
  uint64_t v60 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ViewServiceInput(0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000A38C(&qword_100370080);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v86 = v22;
  uint64_t v87 = v23;
  __chkstk_darwin(v22);
  char v25 = (char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100243144();
  unint64_t v85 = v25;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1002434A0(v88, (uint64_t)v21, type metadata accessor for ViewServiceInput);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      char v29 = *v21;
      LOBYTE(v89) = 1;
      sub_1002433F8();
      uint64_t v30 = v61;
      int v32 = v85;
      uint64_t v31 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v89) = v29;
      sub_1000D9E10();
      uint64_t v33 = v64;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v30, v33);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v32, v31);
      break;
    case 2u:
      LOBYTE(v89) = 2;
      sub_1002433A4();
      uint64_t v34 = v65;
      uint64_t v36 = v85;
      uint64_t v35 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v37 = v67;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v34, v37);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v36, v35);
      break;
    case 3u:
      uint64_t v39 = *(void **)v21;
      uint64_t v38 = *((void *)v21 + 1);
      LOBYTE(v89) = 3;
      sub_100243350();
      uint64_t v40 = v68;
      int v42 = v85;
      uint64_t v41 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      id v89 = v39;
      uint64_t v90 = v38;
      sub_1001D4954();
      uint64_t v43 = v71;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v40, v43);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v42, v41);
      sub_100027B6C(v39);
      break;
    case 4u:
      uint64_t v44 = *(void **)v21;
      LOBYTE(v89) = 4;
      sub_1002432FC();
      uint64_t v45 = v72;
      uint64_t v47 = v85;
      uint64_t v46 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      id v89 = v44;
      sub_100147E14();
      uint64_t v48 = v76;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v75 + 8))(v45, v48);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v47, v46);

      break;
    case 5u:
      LOBYTE(v89) = 6;
      sub_100243254();
      uint64_t v49 = v77;
      uint64_t v51 = v85;
      uint64_t v50 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v52 = v79;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v49, v52);
      goto LABEL_9;
    case 6u:
      uint64_t v53 = v81;
      sub_1002431EC((uint64_t)v21, v81, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
      LOBYTE(v89) = 7;
      sub_100243198();
      uint64_t v54 = v82;
      uint64_t v51 = v85;
      uint64_t v50 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_100243508(&qword_10036E938, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionDisplayContext);
      uint64_t v55 = v84;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v83 + 8))(v54, v55);
      sub_10023CE7C(v53, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
LABEL_9:
      (*(void (**)(char *, uint64_t))(v87 + 8))(v51, v50);
      break;
    case 7u:
      LOBYTE(v89) = 5;
      sub_1002432A8();
      uint64_t v56 = v70;
      uint64_t v58 = v85;
      uint64_t v57 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v73 + 8))(v56, v74);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v58, v57);
      break;
    default:
      sub_1002431EC((uint64_t)v21, (uint64_t)v18, type metadata accessor for ActivityDisplayContext);
      LOBYTE(v89) = 0;
      sub_10024344C();
      char v27 = v85;
      uint64_t v26 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_100243508(&qword_10036C5E8, (void (*)(uint64_t))type metadata accessor for ActivityDisplayContext);
      uint64_t v28 = v62;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v15, v28);
      sub_10023CE7C((uint64_t)v18, type metadata accessor for ActivityDisplayContext);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v27, v26);
      break;
  }
}

uint64_t sub_10023EE18@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v117 = a2;
  uint64_t v3 = sub_10000A38C(&qword_10036FFB0);
  uint64_t v103 = *(void *)(v3 - 8);
  uint64_t v104 = v3;
  __chkstk_darwin(v3);
  v112 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_10000A38C(&qword_10036FFB8);
  uint64_t v101 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  char v111 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000A38C(&qword_10036FFC0);
  uint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  char v110 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_10000A38C(&qword_10036FFC8);
  uint64_t v99 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v109 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_10000A38C(&qword_10036FFD0);
  uint64_t v95 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  v116 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_10000A38C(&qword_10036FFD8);
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  unint64_t v108 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_10000A38C(&qword_10036FFE0);
  uint64_t v91 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  Swift::Int v107 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_10000A38C(&qword_10036FFE8);
  uint64_t v89 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  Swift::Int v106 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_10000A38C(&qword_10036FFF0);
  uint64_t v113 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = type metadata accessor for ViewServiceInput(0);
  uint64_t v14 = __chkstk_darwin(v114);
  Swift::Int v105 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v87 = (_DWORD *)((char *)&v82 - v17);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v88 = (unsigned char **)((char *)&v82 - v19);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v82 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  char v25 = (uint64_t *)((char *)&v82 - v24);
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (char *)&v82 - v27;
  uint64_t v29 = __chkstk_darwin(v26);
  uint64_t v31 = (char *)&v82 - v30;
  __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v82 - v32;
  uint64_t v34 = a1[3];
  v118 = a1;
  sub_10000D6E4(a1, v34);
  sub_100243144();
  uint64_t v35 = v119;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v35)
  {
LABEL_22:
    uint64_t v44 = (uint64_t)v118;
    return sub_10000CC5C(v44);
  }
  uint64_t v82 = v28;
  uint64_t v83 = v25;
  unint64_t v85 = v31;
  uint64_t v84 = v22;
  uint64_t v36 = v116;
  uint64_t v119 = 0;
  uint64_t v37 = v114;
  uint64_t v86 = v33;
  uint64_t v38 = v117;
  uint64_t v39 = v115;
  uint64_t v40 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v40 + 16) != 1)
  {
    uint64_t v48 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v50 = v49;
    sub_10000A38C(&qword_10035FAC0);
    uint64_t *v50 = v37;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v48 - 8) + 104))(v50, enum case for DecodingError.typeMismatch(_:), v48);
    swift_willThrow();
LABEL_21:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v113 + 8))(v13, v39);
    goto LABEL_22;
  }
  uint64_t v41 = v119;
  switch(*(unsigned char *)(v40 + 32))
  {
    case 1:
      LOBYTE(v120) = 1;
      sub_1002433F8();
      uint64_t v51 = v107;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v41) {
        goto LABEL_21;
      }
      sub_1000D9DBC();
      uint64_t v52 = v92;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v51, v52);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v113 + 8))(v13, v39);
      uint64_t v53 = v82;
      *uint64_t v82 = v120;
      goto LABEL_24;
    case 2:
      LOBYTE(v120) = 2;
      sub_1002433A4();
      uint64_t v54 = v108;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v41) {
        goto LABEL_21;
      }
      uint64_t v55 = v54;
      uint64_t v56 = v94;
      uint64_t v72 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v73 = *(void (**)(char *, uint64_t))(v93 + 8);
      uint64_t v119 = v74;
      v73(v55, v56);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v113 + 8))(v13, v39);
      uint64_t v75 = v83;
      uint64_t v76 = v119;
      uint64_t *v83 = v72;
      v75[1] = v76;
      swift_storeEnumTagMultiPayload();
      uint64_t v77 = (uint64_t)v75;
      goto LABEL_25;
    case 3:
      LOBYTE(v120) = 3;
      sub_100243350();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v41) {
        goto LABEL_21;
      }
      sub_1001D47D4();
      uint64_t v57 = v36;
      uint64_t v58 = v96;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v59 = v113;
      (*(void (**)(char *, uint64_t))(v95 + 8))(v57, v58);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v13, v39);
      uint64_t v53 = v84;
      *uint64_t v84 = v120;
      goto LABEL_24;
    case 4:
      LOBYTE(v120) = 4;
      sub_1002432FC();
      uint64_t v60 = v109;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v41) {
        goto LABEL_21;
      }
      sub_100147D6C();
      uint64_t v61 = v60;
      uint64_t v62 = v100;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v63 = v113;
      (*(void (**)(char *, uint64_t))(v99 + 8))(v61, v62);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v13, v39);
      uint64_t v53 = v88;
      *uint64_t v88 = v120;
      goto LABEL_24;
    case 5:
      LOBYTE(v120) = 5;
      sub_1002432A8();
      uint64_t v64 = v110;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v41) {
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v97 + 8))(v64, v98);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v113 + 8))(v13, v39);
      uint64_t v47 = (uint64_t)v86;
      swift_storeEnumTagMultiPayload();
      goto LABEL_26;
    case 6:
      LOBYTE(v120) = 6;
      sub_100243254();
      uint64_t v65 = v111;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v41) {
        goto LABEL_21;
      }
      uint64_t v66 = v65;
      uint64_t v67 = v102;
      KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v68 = v113;
      int v79 = v78;
      (*(void (**)(char *, uint64_t))(v101 + 8))(v66, v67);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v13, v39);
      uint64_t v53 = v87;
      *uint64_t v87 = v79;
LABEL_24:
      swift_storeEnumTagMultiPayload();
      uint64_t v77 = (uint64_t)v53;
LABEL_25:
      uint64_t v47 = (uint64_t)v86;
      sub_1002431EC(v77, (uint64_t)v86, type metadata accessor for ViewServiceInput);
LABEL_26:
      uint64_t v44 = (uint64_t)v118;
      break;
    case 7:
      LOBYTE(v120) = 7;
      sub_100243198();
      uint64_t v69 = v112;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v41) {
        goto LABEL_21;
      }
      type metadata accessor for NearbySharingInteractionDisplayContext();
      sub_100243508(&qword_10036E928, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionDisplayContext);
      uint64_t v70 = v104;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v103 + 8))(v69, v70);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v113 + 8))(v13, v39);
      uint64_t v80 = v105;
      swift_storeEnumTagMultiPayload();
      uint64_t v81 = (uint64_t)v80;
      uint64_t v47 = (uint64_t)v86;
      sub_1002431EC(v81, (uint64_t)v86, type metadata accessor for ViewServiceInput);
      uint64_t v38 = v117;
      uint64_t v44 = (uint64_t)v118;
      break;
    default:
      LOBYTE(v120) = 0;
      sub_10024344C();
      int v42 = v106;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v41) {
        goto LABEL_21;
      }
      type metadata accessor for ActivityDisplayContext(0);
      sub_100243508(&qword_10036C5C8, (void (*)(uint64_t))type metadata accessor for ActivityDisplayContext);
      uint64_t v43 = v90;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v89 + 8))(v42, v43);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v113 + 8))(v13, v39);
      uint64_t v44 = (uint64_t)v118;
      uint64_t v45 = (uint64_t)v85;
      swift_storeEnumTagMultiPayload();
      uint64_t v46 = v45;
      uint64_t v47 = (uint64_t)v86;
      sub_1002431EC(v46, (uint64_t)v86, type metadata accessor for ViewServiceInput);
      break;
  }
  sub_1002431EC(v47, v38, type metadata accessor for ViewServiceInput);
  return sub_10000CC5C(v44);
}

unint64_t sub_10023FE48(char a1)
{
  unint64_t result = 0x6E65764564726163;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64656873696E6966;
      break;
    case 2:
      unint64_t result = 1735289200;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10023FF00(void *a1)
{
  uint64_t v79 = sub_10000A38C(&qword_10036FF68);
  uint64_t v69 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v78 = (uint64_t)&v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000A38C(&qword_10036FF70);
  uint64_t v68 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v75 = (uint64_t)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_10000A38C(&qword_10036FF78);
  uint64_t v71 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v5 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_10036FF80);
  uint64_t v70 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000A38C(&qword_10036FF88);
  uint64_t v67 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v74 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for Date();
  uint64_t v82 = *(void *)(v84 - 8);
  uint64_t v10 = __chkstk_darwin(v84);
  uint64_t v80 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v73 = (uint64_t)&v66 - v13;
  __chkstk_darwin(v12);
  uint64_t v81 = (char *)&v66 - v14;
  uint64_t v15 = type metadata accessor for ViewServiceOutput(0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000A38C(&qword_10036FF90);
  uint64_t v83 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v19 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100242D54();
  uint64_t v87 = v19;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1002434A0(v86, (uint64_t)v17, type metadata accessor for ViewServiceOutput);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      char v35 = *v17;
      uint64_t v36 = sub_10000A38C(&qword_100367CE8);
      uint64_t v37 = v82;
      uint64_t v38 = v73;
      uint64_t v39 = v84;
      (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v73, &v17[*(int *)(v36 + 48)], v84);
      LOBYTE(v89) = 3;
      sub_100242E50();
      uint64_t v40 = v75;
      int v42 = v87;
      uint64_t v41 = v88;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v89) = v35;
      char v97 = 0;
      sub_10024309C();
      uint64_t v43 = v77;
      uint64_t v44 = v85;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (!v44)
      {
        LOBYTE(v89) = 1;
        sub_100243508(&qword_100366018, (void (*)(uint64_t))&type metadata accessor for Date);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v40, v43);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v42, v41);
      break;
    case 2u:
      uint64_t v45 = *(void *)v17;
      uint64_t v46 = *((void *)v17 + 1);
      uint64_t v47 = *((void *)v17 + 3);
      uint64_t v86 = *((void *)v17 + 2);
      uint64_t v48 = *((void *)v17 + 4);
      uint64_t v81 = (char *)*((void *)v17 + 5);
      uint64_t v49 = *((void *)v17 + 6);
      LODWORD(v77) = v17[56];
      uint64_t v50 = sub_10000A38C(&qword_100367CE0);
      uint64_t v51 = v82;
      (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v80, &v17[*(int *)(v50 + 48)], v84);
      LOBYTE(v89) = 4;
      sub_100242DA8();
      uint64_t v52 = v78;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v76 = v45;
      uint64_t v89 = v45;
      uint64_t v90 = v46;
      uint64_t v75 = v46;
      uint64_t v53 = v86;
      uint64_t v91 = v86;
      uint64_t v92 = v47;
      uint64_t v74 = v48;
      uint64_t v93 = (char *)v48;
      uint64_t v54 = (uint64_t)v81;
      uint64_t v94 = v81;
      uint64_t v95 = v49;
      uint64_t v73 = v49;
      char v55 = v77;
      char v96 = v77;
      char v97 = 0;
      sub_100243048();
      uint64_t v56 = v79;
      uint64_t v57 = v85;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v57)
      {
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v52, v56);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v80, v84);
        (*(void (**)(char *, uint64_t))(v83 + 8))(v87, v88);
        uint64_t result = sub_1000205C8(v76, v75, v53, v47, v74, v54, v73, v55);
      }
      else
      {
        sub_1000205C8(v76, v75, v53, v47, v74, v54, v73, v55);
        LOBYTE(v89) = 1;
        sub_100243508(&qword_100366018, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v61 = v80;
        uint64_t v62 = v84;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v52, v56);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v61, v62);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v87, v88);
      }
      break;
    case 3u:
      LOBYTE(v89) = 1;
      sub_100242F4C();
      uint64_t v59 = v87;
      uint64_t v58 = v88;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v70 + 8))(v8, v6);
      goto LABEL_11;
    case 4u:
      LOBYTE(v89) = 2;
      sub_100242EF8();
      uint64_t v59 = v87;
      uint64_t v58 = v88;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v5, v72);
LABEL_11:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v59, v58);
      break;
    default:
      uint64_t v20 = *(void *)v17;
      uint64_t v21 = *((void *)v17 + 1);
      uint64_t v22 = *((void *)v17 + 3);
      uint64_t v86 = *((void *)v17 + 2);
      uint64_t v23 = (char *)*((void *)v17 + 4);
      uint64_t v24 = *((void *)v17 + 5);
      uint64_t v79 = *((void *)v17 + 6);
      uint64_t v80 = v23;
      int v25 = v17[56];
      uint64_t v70 = *((void *)v17 + 8);
      uint64_t v71 = *((void *)v17 + 9);
      uint64_t v26 = sub_10000A38C(&qword_100367CF0);
      uint64_t v27 = v82;
      (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v81, &v17[*(int *)(v26 + 64)], v84);
      LOBYTE(v89) = 0;
      sub_100242FA0();
      uint64_t v28 = v74;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v77 = v21;
      uint64_t v78 = v20;
      uint64_t v89 = v20;
      uint64_t v90 = v21;
      uint64_t v29 = v86;
      uint64_t v91 = v86;
      uint64_t v92 = v22;
      uint64_t v75 = v22;
      uint64_t v30 = (uint64_t)v80;
      uint64_t v93 = v80;
      uint64_t v94 = (char *)v24;
      uint64_t v73 = v24;
      uint64_t v31 = v79;
      uint64_t v95 = v79;
      LODWORD(v72) = v25;
      char v96 = v25;
      char v97 = 0;
      sub_1002430F0();
      uint64_t v32 = v76;
      uint64_t v33 = v85;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v33)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v28, v32);
        (*(void (**)(char *, uint64_t))(v27 + 8))(v81, v84);
        (*(void (**)(char *, uint64_t))(v83 + 8))(v87, v88);
        uint64_t result = sub_100020430(v78, v77, v29, v75, v30, v73, v31, v72);
      }
      else
      {
        uint64_t v60 = v88;
        sub_100020430(v78, v77, v29, v75, v30, v73, v31, v72);
        LOBYTE(v89) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
        swift_bridgeObjectRelease();
        LOBYTE(v89) = 2;
        sub_100243508(&qword_100366018, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v63 = v81;
        uint64_t v64 = v84;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v65 = v82;
        (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v28, v32);
        (*(void (**)(char *, uint64_t))(v65 + 8))(v63, v64);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v87, v60);
      }
      break;
  }
  return result;
}

uint64_t sub_100240BA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v85 = a2;
  uint64_t v84 = sub_10000A38C(&qword_10036FEF0);
  uint64_t v77 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v92 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000A38C(&qword_10036FEF8);
  uint64_t v91 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v89 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A38C(&qword_10036FF00);
  uint64_t v80 = *(void *)(v5 - 8);
  uint64_t v81 = v5;
  __chkstk_darwin(v5);
  uint64_t v87 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036FF08);
  uint64_t v78 = *(void *)(v7 - 8);
  uint64_t v79 = v7;
  __chkstk_darwin(v7);
  uint64_t v86 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_10000A38C(&qword_10036FF10);
  uint64_t v76 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v88 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_10000A38C(&qword_10036FF18);
  uint64_t v90 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ViewServiceOutput(0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v70 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v70 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v70 - v22;
  uint64_t v24 = a1[3];
  uint64_t v94 = a1;
  sub_10000D6E4(a1, v24);
  sub_100242D54();
  uint64_t v25 = v95;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v95 = v25;
  if (v25) {
    goto LABEL_22;
  }
  uint64_t v71 = v18;
  uint64_t v72 = v15;
  uint64_t v73 = v21;
  uint64_t v27 = v91;
  uint64_t v26 = v92;
  uint64_t v74 = v23;
  uint64_t v75 = v12;
  uint64_t v28 = v90;
  uint64_t v29 = v93;
  uint64_t v30 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v30 + 16) != 1)
  {
    uint64_t v37 = type metadata accessor for DecodingError();
    uint64_t v38 = v29;
    uint64_t v39 = swift_allocError();
    uint64_t v41 = v40;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v41 = v75;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v37 - 8) + 104))(v41, enum case for DecodingError.typeMismatch(_:), v37);
    uint64_t v95 = v39;
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v38);
LABEL_22:
    uint64_t v48 = (uint64_t)v94;
    return sub_10000CC5C(v48);
  }
  uint64_t v31 = v28;
  switch(*(unsigned char *)(v30 + 32))
  {
    case 1:
      char v100 = 1;
      sub_100242F4C();
      int v42 = v86;
      uint64_t v43 = v95;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v95 = v43;
      if (v43) {
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v78 + 8))(v42, v79);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v29);
      uint64_t v44 = (uint64_t)v74;
      goto LABEL_12;
    case 2:
      char v101 = 2;
      sub_100242EF8();
      uint64_t v45 = v87;
      uint64_t v46 = v95;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v95 = v46;
      if (v46) {
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v80 + 8))(v45, v81);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v29);
      uint64_t v44 = (uint64_t)v74;
LABEL_12:
      swift_storeEnumTagMultiPayload();
      goto LABEL_13;
    case 3:
      uint64_t v49 = v27;
      char v104 = 3;
      sub_100242E50();
      uint64_t v50 = v89;
      uint64_t v51 = v95;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v95 = v51;
      if (v51) {
        goto LABEL_21;
      }
      char v103 = 0;
      sub_100242EA4();
      uint64_t v52 = (uint64_t)v71;
      uint64_t v53 = v83;
      uint64_t v54 = v95;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v95 = v54;
      if (v54) {
        goto LABEL_17;
      }
      sub_10000A38C(&qword_100367CE8);
      type metadata accessor for Date();
      char v102 = 1;
      sub_100243508(&qword_100366008, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v53 = v83;
      uint64_t v55 = v95;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v95 = v55;
      if (v55)
      {
LABEL_17:
        (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v53);
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v53);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v29);
      swift_storeEnumTagMultiPayload();
      uint64_t v65 = v52;
      goto LABEL_32;
    case 4:
      char v107 = 4;
      sub_100242DA8();
      uint64_t v56 = v95;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v95 = v56;
      if (v56) {
        goto LABEL_21;
      }
      char v106 = 0;
      sub_100242DFC();
      uint64_t v57 = (uint64_t)v72;
      uint64_t v58 = v84;
      uint64_t v59 = v26;
      uint64_t v60 = v95;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v95 = v60;
      if (v60)
      {
        (*(void (**)(char *, uint64_t))(v77 + 8))(v26, v58);
        goto LABEL_21;
      }
      sub_10000A38C(&qword_100367CE0);
      type metadata accessor for Date();
      char v105 = 1;
      sub_100243508(&qword_100366008, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v63 = v84;
      uint64_t v64 = v95;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v95 = v64;
      if (v64)
      {
        (*(void (**)(char *, uint64_t))(v77 + 8))(v59, v63);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v29);
        sub_1000205C8(*(void *)v57, *(void *)(v57 + 8), *(void *)(v57 + 16), *(void *)(v57 + 24), *(void *)(v57 + 32), *(void *)(v57 + 40), *(void *)(v57 + 48), *(unsigned char *)(v57 + 56));
        goto LABEL_22;
      }
      (*(void (**)(char *, uint64_t))(v77 + 8))(v59, v63);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v29);
      swift_storeEnumTagMultiPayload();
      uint64_t v65 = v57;
      goto LABEL_32;
    default:
      char v99 = 0;
      sub_100242FA0();
      uint64_t v32 = v88;
      uint64_t v33 = v95;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v95 = v33;
      if (v33) {
        goto LABEL_21;
      }
      char v98 = 0;
      sub_100242FF4();
      uint64_t v34 = (uint64_t)v73;
      uint64_t v35 = v82;
      uint64_t v36 = v95;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v95 = v36;
      if (v36)
      {
        (*(void (**)(char *, uint64_t))(v76 + 8))(v32, v35);
LABEL_21:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v29);
        goto LABEL_22;
      }
      char v97 = 1;
      uint64_t v62 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v95 = 0;
      uint64_t v66 = v62;
      uint64_t v68 = v67;
      sub_10000A38C(&qword_100367CF0);
      *(void *)(v34 + 64) = v66;
      *(void *)(v34 + 72) = v68;
      type metadata accessor for Date();
      char v96 = 2;
      sub_100243508(&qword_100366008, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v69 = v95;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v32, v35);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v93);
      uint64_t v95 = v69;
      if (v69)
      {
        swift_bridgeObjectRelease();
        sub_100020430(*(void *)v34, *(void *)(v34 + 8), *(void *)(v34 + 16), *(void *)(v34 + 24), *(void *)(v34 + 32), *(void *)(v34 + 40), *(void *)(v34 + 48), *(unsigned char *)(v34 + 56));
        goto LABEL_22;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v65 = v34;
LABEL_32:
      uint64_t v44 = (uint64_t)v74;
      sub_1002431EC(v65, (uint64_t)v74, type metadata accessor for ViewServiceOutput);
LABEL_13:
      uint64_t v47 = (uint64_t)v94;
      sub_1002431EC(v44, v85, type metadata accessor for ViewServiceOutput);
      uint64_t v48 = v47;
      break;
  }
  return sub_10000CC5C(v48);
}

uint64_t sub_100241898(uint64_t a1)
{
  unint64_t v2 = sub_100242CAC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002418D4(uint64_t a1)
{
  unint64_t v2 = sub_100242CAC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100241910()
{
  uint64_t v1 = 0x6F69746163756465;
  if (*v0 != 1) {
    uint64_t v1 = 1701602409;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x726F737365636361;
  }
}

uint64_t sub_100241970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100242440(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100241998(uint64_t a1)
{
  unint64_t v2 = sub_100242B5C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002419D4(uint64_t a1)
{
  unint64_t v2 = sub_100242B5C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100241A10(uint64_t a1)
{
  unint64_t v2 = sub_100242C04();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100241A4C(uint64_t a1)
{
  unint64_t v2 = sub_100242C04();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100241A88(uint64_t a1)
{
  unint64_t v2 = sub_100242BB0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100241AC4(uint64_t a1)
{
  unint64_t v2 = sub_100242BB0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100241B00@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1002425B4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100241B2C(void *a1)
{
  return sub_10023DD10(a1, *v1);
}

uint64_t sub_100241B48()
{
  return sub_10023DBE8(*v0);
}

BOOL sub_100241B50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 4) {
    return v3 == 4;
  }
  if (v2 == 3) {
    return v3 == 3;
  }
  if ((v3 - 3) < 2) {
    return 0;
  }
  return v2 == v3;
}

uint64_t sub_100241BA4(uint64_t a1)
{
  unint64_t v2 = sub_10024344C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100241BE0(uint64_t a1)
{
  unint64_t v2 = sub_10024344C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100241C1C(uint64_t a1)
{
  unint64_t v2 = sub_1002433F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100241C58(uint64_t a1)
{
  unint64_t v2 = sub_1002433F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100241C94()
{
  return sub_10023E0E8(*v0);
}

uint64_t sub_100241C9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100244D00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100241CC4(uint64_t a1)
{
  unint64_t v2 = sub_100243144();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100241D00(uint64_t a1)
{
  unint64_t v2 = sub_100243144();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100241D3C(uint64_t a1)
{
  unint64_t v2 = sub_1002433A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100241D78(uint64_t a1)
{
  unint64_t v2 = sub_1002433A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100241DB4(uint64_t a1)
{
  unint64_t v2 = sub_100243350();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100241DF0(uint64_t a1)
{
  unint64_t v2 = sub_100243350();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100241E2C(uint64_t a1)
{
  unint64_t v2 = sub_1002432FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100241E68(uint64_t a1)
{
  unint64_t v2 = sub_1002432FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100241EA4(uint64_t a1)
{
  unint64_t v2 = sub_100243198();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100241EE0(uint64_t a1)
{
  unint64_t v2 = sub_100243198();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100241F1C(uint64_t a1)
{
  unint64_t v2 = sub_1002432A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100241F58(uint64_t a1)
{
  unint64_t v2 = sub_1002432A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100241F94(uint64_t a1)
{
  unint64_t v2 = sub_100243254();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100241FD0(uint64_t a1)
{
  unint64_t v2 = sub_100243254();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10024200C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10023EE18(a1, a2);
}

void sub_100242024(void *a1)
{
}

uint64_t sub_10024203C()
{
  uint64_t v1 = 0x6E6F73616572;
  if (*v0 != 1) {
    uint64_t v1 = 0x6D617473656D6974;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 12383;
  }
}

uint64_t sub_10024208C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100245034(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002420B4(uint64_t a1)
{
  unint64_t v2 = sub_100242FA0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002420F0(uint64_t a1)
{
  unint64_t v2 = sub_100242FA0();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10024212C()
{
  return sub_10023FE48(*v0);
}

uint64_t sub_100242134@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100245178(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10024215C(uint64_t a1)
{
  unint64_t v2 = sub_100242D54();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100242198(uint64_t a1)
{
  unint64_t v2 = sub_100242D54();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002421D4(uint64_t a1)
{
  unint64_t v2 = sub_100242F4C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100242210(uint64_t a1)
{
  unint64_t v2 = sub_100242F4C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10024224C()
{
  if (*v0) {
    return 0x6D617473656D6974;
  }
  else {
    return 12383;
  }
}

uint64_t sub_100242280@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100245388(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002422A8(uint64_t a1)
{
  unint64_t v2 = sub_100242DA8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002422E4(uint64_t a1)
{
  unint64_t v2 = sub_100242DA8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100242320(uint64_t a1)
{
  unint64_t v2 = sub_100242EF8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10024235C(uint64_t a1)
{
  unint64_t v2 = sub_100242EF8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100242398(uint64_t a1)
{
  unint64_t v2 = sub_100242E50();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002423D4(uint64_t a1)
{
  unint64_t v2 = sub_100242E50();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100242410@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100240BA4(a1, a2);
}

uint64_t sub_100242428(void *a1)
{
  return sub_10023FF00(a1);
}

uint64_t sub_100242440(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x726F737365636361 && a2 == 0xED00007765695679
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69746163756465 && a2 == 0xED0000776569566ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701602409 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1002425B4(void *a1)
{
  uint64_t v23 = sub_10000A38C(&qword_10036FE80);
  uint64_t v25 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v28 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000A38C(&qword_10036FE88);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v26 = v3;
  uint64_t v27 = v4;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036FE90);
  uint64_t v24 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10036FE98);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  uint64_t v29 = a1;
  sub_10000D6E4(a1, v14);
  sub_100242B5C();
  uint64_t v15 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    uint64_t v16 = v28;
    uint64_t v30 = v11;
    uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v17 + 16) == 1)
    {
      if (*(unsigned char *)(v17 + 32))
      {
        if (*(unsigned char *)(v17 + 32) == 1)
        {
          char v33 = 1;
          sub_100242C04();
          uint64_t v18 = v13;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          sub_100242C58();
          uint64_t v22 = v26;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v22);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v10);
          uint64_t v9 = v32;
        }
        else
        {
          char v34 = 2;
          sub_100242BB0();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v23);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v10);
          uint64_t v9 = 4;
        }
      }
      else
      {
        char v31 = 0;
        sub_100242CAC();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v9, v7);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v10);
        uint64_t v9 = 3;
      }
    }
    else
    {
      uint64_t v9 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v20 = v19;
      sub_10000A38C(&qword_10035FAC0);
      *uint64_t v20 = &type metadata for CardMode;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v20, enum case for DecodingError.typeMismatch(_:), v9);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v10);
    }
  }
  sub_10000CC5C((uint64_t)v29);
  return v9;
}

unint64_t sub_100242B5C()
{
  unint64_t result = qword_10036FEA0;
  if (!qword_10036FEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FEA0);
  }
  return result;
}

unint64_t sub_100242BB0()
{
  unint64_t result = qword_10036FEA8;
  if (!qword_10036FEA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FEA8);
  }
  return result;
}

unint64_t sub_100242C04()
{
  unint64_t result = qword_10036FEB0;
  if (!qword_10036FEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FEB0);
  }
  return result;
}

unint64_t sub_100242C58()
{
  unint64_t result = qword_10036FEB8;
  if (!qword_10036FEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FEB8);
  }
  return result;
}

unint64_t sub_100242CAC()
{
  unint64_t result = qword_10036FEC0;
  if (!qword_10036FEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FEC0);
  }
  return result;
}

unint64_t sub_100242D00()
{
  unint64_t result = qword_10036FEE8;
  if (!qword_10036FEE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FEE8);
  }
  return result;
}

unint64_t sub_100242D54()
{
  unint64_t result = qword_10036FF20;
  if (!qword_10036FF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FF20);
  }
  return result;
}

unint64_t sub_100242DA8()
{
  unint64_t result = qword_10036FF28;
  if (!qword_10036FF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FF28);
  }
  return result;
}

unint64_t sub_100242DFC()
{
  unint64_t result = qword_10036FF30;
  if (!qword_10036FF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FF30);
  }
  return result;
}

unint64_t sub_100242E50()
{
  unint64_t result = qword_10036FF38;
  if (!qword_10036FF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FF38);
  }
  return result;
}

unint64_t sub_100242EA4()
{
  unint64_t result = qword_10036FF40;
  if (!qword_10036FF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FF40);
  }
  return result;
}

unint64_t sub_100242EF8()
{
  unint64_t result = qword_10036FF48;
  if (!qword_10036FF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FF48);
  }
  return result;
}

unint64_t sub_100242F4C()
{
  unint64_t result = qword_10036FF50;
  if (!qword_10036FF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FF50);
  }
  return result;
}

unint64_t sub_100242FA0()
{
  unint64_t result = qword_10036FF58;
  if (!qword_10036FF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FF58);
  }
  return result;
}

unint64_t sub_100242FF4()
{
  unint64_t result = qword_10036FF60;
  if (!qword_10036FF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FF60);
  }
  return result;
}

unint64_t sub_100243048()
{
  unint64_t result = qword_10036FF98;
  if (!qword_10036FF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FF98);
  }
  return result;
}

unint64_t sub_10024309C()
{
  unint64_t result = qword_10036FFA0;
  if (!qword_10036FFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FFA0);
  }
  return result;
}

unint64_t sub_1002430F0()
{
  unint64_t result = qword_10036FFA8;
  if (!qword_10036FFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FFA8);
  }
  return result;
}

unint64_t sub_100243144()
{
  unint64_t result = qword_10036FFF8;
  if (!qword_10036FFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10036FFF8);
  }
  return result;
}

unint64_t sub_100243198()
{
  unint64_t result = qword_100370000;
  if (!qword_100370000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370000);
  }
  return result;
}

uint64_t sub_1002431EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100243254()
{
  unint64_t result = qword_100370008;
  if (!qword_100370008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370008);
  }
  return result;
}

unint64_t sub_1002432A8()
{
  unint64_t result = qword_100370010;
  if (!qword_100370010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370010);
  }
  return result;
}

unint64_t sub_1002432FC()
{
  unint64_t result = qword_100370018;
  if (!qword_100370018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370018);
  }
  return result;
}

unint64_t sub_100243350()
{
  unint64_t result = qword_100370020;
  if (!qword_100370020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370020);
  }
  return result;
}

unint64_t sub_1002433A4()
{
  unint64_t result = qword_100370028;
  if (!qword_100370028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370028);
  }
  return result;
}

unint64_t sub_1002433F8()
{
  unint64_t result = qword_100370030;
  if (!qword_100370030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370030);
  }
  return result;
}

unint64_t sub_10024344C()
{
  unint64_t result = qword_100370038;
  if (!qword_100370038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370038);
  }
  return result;
}

uint64_t sub_1002434A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100243508(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ViewServiceInput.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10024361CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewServiceInput.CodingKeys()
{
  return &type metadata for ViewServiceInput.CodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.ActivityDisplayContextCodingKeys()
{
  return &type metadata for ViewServiceInput.ActivityDisplayContextCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.CardModeCodingKeys()
{
  return &type metadata for ViewServiceInput.CardModeCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.DismissCodingKeys()
{
  return &type metadata for ViewServiceInput.DismissCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.MediaTransferStatusCodingKeys()
{
  return &type metadata for ViewServiceInput.MediaTransferStatusCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.MrResponseCodingKeys()
{
  return &type metadata for ViewServiceInput.MrResponseCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.PingCodingKeys()
{
  return &type metadata for ViewServiceInput.PingCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.ProgressCodingKeys()
{
  return &type metadata for ViewServiceInput.ProgressCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.NearbySharingInteractionDisplayContextCodingKeys()
{
  return &type metadata for ViewServiceInput.NearbySharingInteractionDisplayContextCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ViewServiceOutput.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002437A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.CodingKeys()
{
  return &type metadata for ViewServiceOutput.CodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.CardEventCodingKeys()
{
  return &type metadata for ViewServiceOutput.CardEventCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.FinishedCodingKeys()
{
  return &type metadata for ViewServiceOutput.FinishedCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.PingCodingKeys()
{
  return &type metadata for ViewServiceOutput.PingCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.XpcConnectionEventCodingKeys()
{
  return &type metadata for ViewServiceOutput.XpcConnectionEventCodingKeys;
}

unsigned char *_s17proximitycontrold17ViewServiceOutputO28XpcConnectionEventCodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002438F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.NearbySharingInteractionViewCodingKeys()
{
  return &type metadata for ViewServiceOutput.NearbySharingInteractionViewCodingKeys;
}

unsigned char *_s17proximitycontrold17ViewServiceOutputO19CardEventCodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002439F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CardMode.CodingKeys()
{
  return &type metadata for CardMode.CodingKeys;
}

ValueMetadata *type metadata accessor for CardMode.AccessoryViewCodingKeys()
{
  return &type metadata for CardMode.AccessoryViewCodingKeys;
}

unsigned char *_s17proximitycontrold16ViewServiceInputO32ActivityDisplayContextCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100243AD8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CardMode.EducationViewCodingKeys()
{
  return &type metadata for CardMode.EducationViewCodingKeys;
}

ValueMetadata *type metadata accessor for CardMode.IdleCodingKeys()
{
  return &type metadata for CardMode.IdleCodingKeys;
}

unint64_t sub_100243B24()
{
  unint64_t result = qword_100370088;
  if (!qword_100370088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370088);
  }
  return result;
}

unint64_t sub_100243B7C()
{
  unint64_t result = qword_100370090;
  if (!qword_100370090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370090);
  }
  return result;
}

unint64_t sub_100243BD4()
{
  unint64_t result = qword_100370098;
  if (!qword_100370098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370098);
  }
  return result;
}

unint64_t sub_100243C2C()
{
  unint64_t result = qword_1003700A0;
  if (!qword_1003700A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003700A0);
  }
  return result;
}

unint64_t sub_100243C84()
{
  unint64_t result = qword_1003700A8;
  if (!qword_1003700A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003700A8);
  }
  return result;
}

unint64_t sub_100243CDC()
{
  unint64_t result = qword_1003700B0;
  if (!qword_1003700B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003700B0);
  }
  return result;
}

unint64_t sub_100243D34()
{
  unint64_t result = qword_1003700B8;
  if (!qword_1003700B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003700B8);
  }
  return result;
}

unint64_t sub_100243D8C()
{
  unint64_t result = qword_1003700C0;
  if (!qword_1003700C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003700C0);
  }
  return result;
}

unint64_t sub_100243DE4()
{
  unint64_t result = qword_1003700C8;
  if (!qword_1003700C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003700C8);
  }
  return result;
}

unint64_t sub_100243E3C()
{
  unint64_t result = qword_1003700D0;
  if (!qword_1003700D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003700D0);
  }
  return result;
}

unint64_t sub_100243E94()
{
  unint64_t result = qword_1003700D8;
  if (!qword_1003700D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003700D8);
  }
  return result;
}

unint64_t sub_100243EEC()
{
  unint64_t result = qword_1003700E0;
  if (!qword_1003700E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003700E0);
  }
  return result;
}

unint64_t sub_100243F44()
{
  unint64_t result = qword_1003700E8;
  if (!qword_1003700E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003700E8);
  }
  return result;
}

unint64_t sub_100243F9C()
{
  unint64_t result = qword_1003700F0;
  if (!qword_1003700F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003700F0);
  }
  return result;
}

unint64_t sub_100243FF4()
{
  unint64_t result = qword_1003700F8;
  if (!qword_1003700F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003700F8);
  }
  return result;
}

unint64_t sub_10024404C()
{
  unint64_t result = qword_100370100;
  if (!qword_100370100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370100);
  }
  return result;
}

unint64_t sub_1002440A4()
{
  unint64_t result = qword_100370108;
  if (!qword_100370108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370108);
  }
  return result;
}

unint64_t sub_1002440FC()
{
  unint64_t result = qword_100370110;
  if (!qword_100370110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370110);
  }
  return result;
}

unint64_t sub_100244154()
{
  unint64_t result = qword_100370118;
  if (!qword_100370118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370118);
  }
  return result;
}

unint64_t sub_1002441AC()
{
  unint64_t result = qword_100370120;
  if (!qword_100370120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370120);
  }
  return result;
}

unint64_t sub_100244204()
{
  unint64_t result = qword_100370128;
  if (!qword_100370128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370128);
  }
  return result;
}

unint64_t sub_10024425C()
{
  unint64_t result = qword_100370130;
  if (!qword_100370130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370130);
  }
  return result;
}

unint64_t sub_1002442B4()
{
  unint64_t result = qword_100370138;
  if (!qword_100370138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370138);
  }
  return result;
}

unint64_t sub_10024430C()
{
  unint64_t result = qword_100370140;
  if (!qword_100370140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370140);
  }
  return result;
}

unint64_t sub_100244364()
{
  unint64_t result = qword_100370148;
  if (!qword_100370148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370148);
  }
  return result;
}

unint64_t sub_1002443BC()
{
  unint64_t result = qword_100370150;
  if (!qword_100370150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370150);
  }
  return result;
}

unint64_t sub_100244414()
{
  unint64_t result = qword_100370158;
  if (!qword_100370158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370158);
  }
  return result;
}

unint64_t sub_10024446C()
{
  unint64_t result = qword_100370160;
  if (!qword_100370160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370160);
  }
  return result;
}

unint64_t sub_1002444C4()
{
  unint64_t result = qword_100370168;
  if (!qword_100370168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370168);
  }
  return result;
}

unint64_t sub_10024451C()
{
  unint64_t result = qword_100370170;
  if (!qword_100370170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370170);
  }
  return result;
}

unint64_t sub_100244574()
{
  unint64_t result = qword_100370178;
  if (!qword_100370178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370178);
  }
  return result;
}

unint64_t sub_1002445CC()
{
  unint64_t result = qword_100370180;
  if (!qword_100370180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370180);
  }
  return result;
}

unint64_t sub_100244624()
{
  unint64_t result = qword_100370188;
  if (!qword_100370188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370188);
  }
  return result;
}

unint64_t sub_10024467C()
{
  unint64_t result = qword_100370190;
  if (!qword_100370190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370190);
  }
  return result;
}

unint64_t sub_1002446D4()
{
  unint64_t result = qword_100370198;
  if (!qword_100370198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370198);
  }
  return result;
}

unint64_t sub_10024472C()
{
  unint64_t result = qword_1003701A0;
  if (!qword_1003701A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003701A0);
  }
  return result;
}

unint64_t sub_100244784()
{
  unint64_t result = qword_1003701A8;
  if (!qword_1003701A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003701A8);
  }
  return result;
}

unint64_t sub_1002447DC()
{
  unint64_t result = qword_1003701B0;
  if (!qword_1003701B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003701B0);
  }
  return result;
}

unint64_t sub_100244834()
{
  unint64_t result = qword_1003701B8;
  if (!qword_1003701B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003701B8);
  }
  return result;
}

unint64_t sub_10024488C()
{
  unint64_t result = qword_1003701C0;
  if (!qword_1003701C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003701C0);
  }
  return result;
}

unint64_t sub_1002448E4()
{
  unint64_t result = qword_1003701C8;
  if (!qword_1003701C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003701C8);
  }
  return result;
}

unint64_t sub_10024493C()
{
  unint64_t result = qword_1003701D0;
  if (!qword_1003701D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003701D0);
  }
  return result;
}

unint64_t sub_100244994()
{
  unint64_t result = qword_1003701D8;
  if (!qword_1003701D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003701D8);
  }
  return result;
}

unint64_t sub_1002449EC()
{
  unint64_t result = qword_1003701E0;
  if (!qword_1003701E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003701E0);
  }
  return result;
}

unint64_t sub_100244A44()
{
  unint64_t result = qword_1003701E8;
  if (!qword_1003701E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003701E8);
  }
  return result;
}

unint64_t sub_100244A9C()
{
  unint64_t result = qword_1003701F0;
  if (!qword_1003701F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003701F0);
  }
  return result;
}

unint64_t sub_100244AF4()
{
  unint64_t result = qword_1003701F8;
  if (!qword_1003701F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003701F8);
  }
  return result;
}

unint64_t sub_100244B4C()
{
  unint64_t result = qword_100370200;
  if (!qword_100370200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370200);
  }
  return result;
}

unint64_t sub_100244BA4()
{
  unint64_t result = qword_100370208;
  if (!qword_100370208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370208);
  }
  return result;
}

unint64_t sub_100244BFC()
{
  unint64_t result = qword_100370210;
  if (!qword_100370210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370210);
  }
  return result;
}

unint64_t sub_100244C54()
{
  unint64_t result = qword_100370218;
  if (!qword_100370218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370218);
  }
  return result;
}

unint64_t sub_100244CAC()
{
  unint64_t result = qword_100370220;
  if (!qword_100370220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370220);
  }
  return result;
}

uint64_t sub_100244D00(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000016 && a2 == 0x80000001002C6AF0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65646F4D64726163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7373696D736964 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001002C6B10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F70736552726DLL && a2 == 0xEA00000000006573 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1735289200 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x73736572676F7270 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000026 && a2 == 0x80000001002C6B30)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_100245034(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F73616572 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100245178(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E65764564726163 && a2 == 0xE900000000000074;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64656873696E6966 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1735289200 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001002C6AB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000001002C6AD0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100245388(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100245478(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_100027B00((_OWORD *)a1, v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v2;
    *BOOL v2 = 0x8000000000000000;
    sub_1002650FC(v7, a2, isUniquelyReferenced_nonNull_native);
    *BOOL v2 = v6;
    swift_bridgeObjectRelease();
    return sub_1000BA108(a2);
  }
  else
  {
    sub_10000D78C(a1, &qword_100371910);
    sub_1001306C0(a2, v7);
    sub_1000BA108(a2);
    return sub_10000D78C((uint64_t)v7, &qword_100371910);
  }
}

uint64_t sub_100245538(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000A38C(&qword_10035E158);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10000D78C(a1, &qword_10035E158);
    sub_1001307BC(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10000D78C((uint64_t)v8, &qword_10035E158);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_1002658B8((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_100245764(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000A38C(&qword_100370238);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t active = type metadata accessor for PCUserAlertManager.ActiveAlertContext(0);
  __chkstk_darwin(active);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10000D78C(a1, &qword_100370238);
    sub_1001309A0(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10000D78C((uint64_t)v8, &qword_100370238);
  }
  else
  {
    sub_10024881C(a1, (uint64_t)v11, type metadata accessor for PCUserAlertManager.ActiveAlertContext);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100265ABC((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_100245984(void *a1)
{
  uint64_t v3 = sub_10000A38C(&qword_1003702E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D6E4(a1, a1[3]);
  sub_100248784();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for NoticeContext(0);
  sub_1002487D8(&qword_100370228);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for PresentNoticeRequest();
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100245B28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v4 = type metadata accessor for NoticeContext(0);
  __chkstk_darwin(v4);
  uint64_t v20 = (uint64_t)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000A38C(&qword_1003702D0);
  uint64_t v19 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PresentNoticeRequest();
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t *)&v11[*(int *)(v9 + 28)];
  *uint64_t v12 = 0;
  v12[1] = 0;
  sub_10000D6E4(a1, a1[3]);
  sub_100248784();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_10000CC5C((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = v19;
    char v23 = 0;
    sub_1002487D8(&qword_1003702E0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_10024881C(v20, (uint64_t)v11, type metadata accessor for NoticeContext);
    char v22 = 1;
    uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v21);
    swift_bridgeObjectRelease();
    *uint64_t v12 = v14;
    v12[1] = v16;
    sub_100248884((uint64_t)v11, v18);
    sub_10000CC5C((uint64_t)a1);
    return sub_1002488E8((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PresentNoticeRequest);
  }
}

uint64_t sub_100245E3C()
{
  if (*v0) {
    return 0x496E6F6973736573;
  }
  else {
    return 0x747865746E6F63;
  }
}

uint64_t sub_100245E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002465EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100245EA4(uint64_t a1)
{
  unint64_t v2 = sub_100248784();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100245EE0(uint64_t a1)
{
  unint64_t v2 = sub_100248784();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100245F1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100245B28(a1, a2);
}

uint64_t sub_100245F34(void *a1)
{
  return sub_100245984(a1);
}

unint64_t sub_100245F4C()
{
  uint64_t v2 = v0;
  sub_10000A38C(&qword_1003645E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028D430;
  v15[0] = 0x747865746E6F63;
  v15[1] = 0xE700000000000000;
  AnyHashable.init<A>(_:)();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  type metadata accessor for NoticeContext(0);
  sub_1002487D8(&qword_100370228);
  unint64_t v4 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v6 = v5;
  swift_release();
  if (v1)
  {
    sub_1000BA108(inited + 32);
    swift_setDeallocating();
    sub_10000A38C(&qword_10036C190);
    swift_arrayDestroy();
  }
  else
  {
    *(void *)(inited + 96) = &type metadata for Data;
    *(void *)(inited + 72) = v4;
    *(void *)(inited + 80) = v6;
    unint64_t v4 = sub_100268E80(inited);
    uint64_t v7 = (uint64_t *)(v2 + *(int *)(type metadata accessor for PresentNoticeRequest() + 20));
    uint64_t v8 = v7[1];
    if (v8)
    {
      uint64_t v9 = *v7;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      uint64_t v14 = &type metadata for String;
      *(void *)&long long v13 = v9;
      *((void *)&v13 + 1) = v8;
      sub_100027B00(&v13, v12);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v16 = v4;
      sub_1002650FC(v12, (uint64_t)v15, isUniquelyReferenced_nonNull_native);
      unint64_t v4 = v16;
      swift_bridgeObjectRelease();
      sub_1000BA108((uint64_t)v15);
    }
  }
  return v4;
}

unint64_t sub_100246168()
{
  return 0xD00000000000002FLL;
}

unint64_t sub_100246184()
{
  return sub_100245F4C();
}

uint64_t type metadata accessor for PresentNoticeRequest()
{
  uint64_t result = qword_100370298;
  if (!qword_100370298) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002461E8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000A38C(&qword_100370300);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D6E4(a1, a1[3]);
  sub_100248948();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100174AE4(v3 + 32, (uint64_t)v12);
    sub_100174AE4((uint64_t)v12, (uint64_t)v11);
    v10[15] = 2;
    sub_10024899C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100246398()
{
  uint64_t v1 = 0x496E6F6973736573;
  if (*v0 != 1) {
    uint64_t v1 = 0x746E657665;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x49747865746E6F63;
  }
}

uint64_t sub_1002463F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002466EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100246418(uint64_t a1)
{
  unint64_t v2 = sub_100248948();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100246454(uint64_t a1)
{
  unint64_t v2 = sub_100248948();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100246490@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100246854(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    a2[2] = v7[2];
    a2[3] = v5;
    a2[4] = v8[0];
    *(_OWORD *)((char *)a2 + 73) = *(_OWORD *)((char *)v8 + 9);
    double result = *(double *)v7;
    long long v6 = v7[1];
    *a2 = v7[0];
    a2[1] = v6;
  }
  return result;
}

uint64_t sub_1002464E4(void *a1)
{
  return sub_1002461E8(a1);
}

unint64_t sub_100246530()
{
  sub_10000A38C(&qword_1003645E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028D430;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  swift_bridgeObjectRelease();
  *(void *)(inited + 96) = &type metadata for Bool;
  *(unsigned char *)(inited + 72) = 1;
  unint64_t result = sub_100268E80(inited);
  qword_1003ACB78 = result;
  return result;
}

uint64_t sub_1002465EC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x747865746E6F63 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x496E6F6973736573 && a2 == 0xE900000000000044)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002466EC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x49747865746E6F63 && a2 == 0xE900000000000044;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x496E6F6973736573 && a2 == 0xE900000000000044 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E657665 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100246854@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000A38C(&qword_1003702F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100248948();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_10000CC5C((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v40) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    uint64_t v39 = v9;
    LOBYTE(v40) = 1;
    swift_bridgeObjectRetain();
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v14 = v13;
    uint64_t v38 = v12;
    char v49 = 2;
    sub_100246EF0();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v15 = v40;
    uint64_t v36 = v42;
    unint64_t v37 = v41;
    uint64_t v16 = v44;
    uint64_t v32 = v40;
    uint64_t v33 = v44;
    uint64_t v18 = v45;
    uint64_t v17 = v46;
    uint64_t v31 = v45;
    uint64_t v34 = v43;
    uint64_t v35 = v46;
    char v19 = v47;
    int v48 = v47;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = v15;
    uint64_t v21 = v34;
    sub_10001FAFC(v20, v37, v36, v34, v16, v18, v17, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000CC5C((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v32;
    uint64_t v23 = v33;
    uint64_t v25 = v36;
    unint64_t v24 = v37;
    uint64_t v26 = v21;
    uint64_t v27 = v31;
    uint64_t result = sub_10002052C(v32, v37, v36, v26, v33, v31, v35, v48);
    *(void *)a2 = v39;
    *(void *)(a2 + 8) = v11;
    *(void *)(a2 + 16) = v38;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v22;
    *(void *)(a2 + 40) = v24;
    uint64_t v29 = v34;
    *(void *)(a2 + 48) = v25;
    *(void *)(a2 + 56) = v29;
    *(void *)(a2 + 64) = v23;
    *(void *)(a2 + 72) = v27;
    *(void *)(a2 + 80) = v35;
    *(unsigned char *)(a2 + 88) = v48;
  }
  return result;
}

uint64_t sub_100246B9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = 0x49747865746E6F63;
  unint64_t v30 = 0xE900000000000044;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_100269E60((uint64_t)v26), (v5 & 1) != 0))
  {
    sub_100027B10(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  sub_1000BA108((uint64_t)v26);
  if (!*((void *)&v32 + 1)) {
    goto LABEL_15;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_16:
    uint64_t v8 = 0;
    unint64_t v7 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v18 = 0;
    char v19 = 0;
    long long v15 = 0uLL;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    goto LABEL_17;
  }
  uint64_t v8 = v29;
  unint64_t v7 = v30;
  uint64_t v29 = 0x746E657665;
  unint64_t v30 = 0xE500000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v9 = sub_100269E60((uint64_t)v26), (v10 & 1) != 0))
  {
    sub_100027B10(*(void *)(a1 + 56) + 32 * v9, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  sub_1000BA108((uint64_t)v26);
  if (!*((void *)&v32 + 1))
  {
    swift_bridgeObjectRelease();
LABEL_15:
    uint64_t result = sub_10000D78C((uint64_t)&v31, &qword_100371910);
    goto LABEL_16;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v11 = v29;
  unint64_t v12 = v30;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_100246EF0();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  uint64_t v25 = v11;
  long long v23 = v26[1];
  long long v24 = v26[0];
  long long v22 = v26[2];
  uint64_t v18 = v27;
  char v19 = v28;
  uint64_t v29 = 0x496E6F6973736573;
  unint64_t v30 = 0xE900000000000044;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v20 = sub_100269E60((uint64_t)v26), (v21 & 1) != 0))
  {
    sub_100027B10(*(void *)(a1 + 56) + 32 * v20, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  sub_10000DBEC(v25, v12);
  sub_1000BA108((uint64_t)v26);
  if (*((void *)&v32 + 1))
  {
    uint64_t result = swift_dynamicCast();
    uint64_t v13 = v29;
    unint64_t v14 = v30;
    if (!result)
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t result = sub_10000D78C((uint64_t)&v31, &qword_100371910);
    uint64_t v13 = 0;
    unint64_t v14 = 0;
  }
  long long v16 = v23;
  long long v15 = v24;
  long long v17 = v22;
LABEL_17:
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v14;
  *(_OWORD *)(a2 + 32) = v15;
  *(_OWORD *)(a2 + 48) = v16;
  *(_OWORD *)(a2 + 64) = v17;
  *(void *)(a2 + 80) = v18;
  *(unsigned char *)(a2 + 88) = v19;
  return result;
}

unint64_t sub_100246EF0()
{
  unint64_t result = qword_100370230;
  if (!qword_100370230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370230);
  }
  return result;
}

void *sub_100246F44(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = (int *)type metadata accessor for NoticeContext(0);
    uint64_t v9 = v8[6];
    char v10 = (void *)((char *)v4 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = type metadata accessor for NoticeTapAction(0);
    swift_bridgeObjectRetain();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v17 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v17 - 8) + 16))(v10, v11, v17);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v15 = *v11;
      unint64_t v14 = v11[1];
      sub_10001F8BC(v15, v14);
      *char v10 = v15;
      v10[1] = v14;
      swift_storeEnumTagMultiPayload();
    }
    *((unsigned char *)v4 + v8[7]) = *((unsigned char *)a2 + v8[7]);
    uint64_t v18 = v8[8];
    char v19 = (void *)((char *)v4 + v18);
    unint64_t v20 = (uint64_t *)((char *)a2 + v18);
    type metadata accessor for NoticeContent(0);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v24 = v20[1];
      *char v19 = *v20;
      v19[1] = v24;
      uint64_t v42 = type metadata accessor for ShareableContentExposedContext(0);
      uint64_t v25 = *(int *)(v42 + 20);
      uint64_t v26 = (void *)((char *)v19 + v25);
      uint64_t v27 = (char *)v20 + v25;
      uint64_t v28 = *(void *)((char *)v20 + v25 + 8);
      *uint64_t v26 = *(void *)((char *)v20 + v25);
      v26[1] = v28;
      uint64_t v29 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
      __dst = (char *)v26 + v29;
      uint64_t v44 = &v27[v29];
      uint64_t v30 = type metadata accessor for URL();
      uint64_t v41 = *(void *)(v30 - 8);
      uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v43(v44, 1, v30))
      {
        uint64_t v31 = type metadata accessor for ShareableContentType(0);
        memcpy(__dst, v44, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(__dst, v44, v30);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 1, v30);
      }
      uint64_t v32 = *(int *)(v42 + 24);
      uint64_t v33 = (void *)((char *)v19 + v32);
      uint64_t v34 = (void *)((char *)v20 + v32);
      uint64_t v35 = v34[1];
      *uint64_t v33 = *v34;
      v33[1] = v35;
    }
    else
    {
      uint64_t v21 = v20[1];
      *char v19 = *v20;
      v19[1] = v21;
      uint64_t v22 = v20[2];
      uint64_t v23 = v20[3];
      v19[2] = v22;
      v19[3] = v23;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    uint64_t v36 = *(int *)(a3 + 20);
    unint64_t v37 = (void *)((char *)v4 + v36);
    uint64_t v38 = (uint64_t *)((char *)a2 + v36);
    uint64_t v39 = v38[1];
    *unint64_t v37 = *v38;
    v37[1] = v39;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1002472CC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for NoticeContext(0);
  uint64_t v3 = a1 + *(int *)(v2 + 24);
  type metadata accessor for NoticeTapAction(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v3, v5);
  }
  else if (!EnumCaseMultiPayload)
  {
    sub_10000DBEC(*(void *)v3, *(void *)(v3 + 8));
  }
  uint64_t v6 = a1 + *(int *)(v2 + 32);
  type metadata accessor for NoticeContent(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 3u:
      swift_bridgeObjectRelease();
      uint64_t v7 = v6 + *(int *)(type metadata accessor for ShareableContentExposedContext(0) + 20);
      swift_bridgeObjectRelease();
      uint64_t v8 = v7 + *(int *)(type metadata accessor for ShareableContent(0) + 20);
      uint64_t v9 = type metadata accessor for URL();
      uint64_t v10 = *(void *)(v9 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      }
LABEL_9:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002474C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = (int *)type metadata accessor for NoticeContext(0);
  uint64_t v8 = v7[6];
  uint64_t v9 = (uint64_t *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v11 = type metadata accessor for NoticeTapAction(0);
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16))(v9, v10, v15);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v13 = *v10;
    unint64_t v14 = v10[1];
    sub_10001F8BC(v13, v14);
    *uint64_t v9 = v13;
    v9[1] = v14;
    swift_storeEnumTagMultiPayload();
  }
  *(unsigned char *)(a1 + v7[7]) = *(unsigned char *)(a2 + v7[7]);
  uint64_t v16 = v7[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  type metadata accessor for NoticeContent(0);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v43 = a3;
    uint64_t v21 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v21;
    uint64_t v41 = type metadata accessor for ShareableContentExposedContext(0);
    uint64_t v22 = *(int *)(v41 + 20);
    uint64_t v23 = (void *)((char *)v17 + v22);
    uint64_t v24 = (char *)v18 + v22;
    uint64_t v25 = *(void *)((char *)v18 + v22 + 8);
    *uint64_t v23 = *(void *)((char *)v18 + v22);
    v23[1] = v25;
    uint64_t v26 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
    __dst = (char *)v23 + v26;
    uint64_t v40 = &v24[v26];
    uint64_t v27 = type metadata accessor for URL();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v39(v40, 1, v27))
    {
      uint64_t v29 = type metadata accessor for ShareableContentType(0);
      memcpy(__dst, v40, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dst, v40, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
    }
    a3 = v43;
    uint64_t v30 = *(int *)(v41 + 24);
    uint64_t v31 = (void *)((char *)v17 + v30);
    uint64_t v32 = (void *)((char *)v18 + v30);
    uint64_t v33 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v33;
  }
  else
  {
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = v18[3];
    v17[2] = v18[2];
    v17[3] = v20;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = *(int *)(a3 + 20);
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  uint64_t v37 = v36[1];
  void *v35 = *v36;
  v35[1] = v37;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100247808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = type metadata accessor for NoticeContext(0);
  uint64_t v7 = v6;
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + *(int *)(v6 + 28)) = *(unsigned char *)(a2 + *(int *)(v6 + 28));
    goto LABEL_16;
  }
  uint64_t v8 = *(int *)(v6 + 24);
  uint64_t v9 = (uint64_t *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  sub_1002488E8(a1 + v8, type metadata accessor for NoticeTapAction);
  uint64_t v11 = type metadata accessor for NoticeTapAction(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16))(v9, v10, v15);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
      goto LABEL_9;
    }
    uint64_t v14 = *v10;
    unint64_t v13 = v10[1];
    sub_10001F8BC(v14, v13);
    *uint64_t v9 = v14;
    v9[1] = v13;
  }
  swift_storeEnumTagMultiPayload();
LABEL_9:
  *(unsigned char *)(a1 + *(int *)(v7 + 28)) = *(unsigned char *)(a2 + *(int *)(v7 + 28));
  uint64_t v16 = *(int *)(v7 + 32);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  sub_1002488E8(a1 + v16, type metadata accessor for NoticeContent);
  type metadata accessor for NoticeContent(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
      uint64_t v36 = a3;
      *uint64_t v17 = *v18;
      v17[1] = v18[1];
      uint64_t v35 = type metadata accessor for ShareableContentExposedContext(0);
      uint64_t v19 = *(int *)(v35 + 20);
      uint64_t v20 = (void *)((char *)v17 + v19);
      uint64_t v21 = (char *)v18 + v19;
      *uint64_t v20 = *(void *)((char *)v18 + v19);
      v20[1] = *(void *)((char *)v18 + v19 + 8);
      uint64_t v22 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
      __dst = (char *)v20 + v22;
      uint64_t v37 = &v21[v22];
      uint64_t v23 = type metadata accessor for URL();
      uint64_t v24 = *(void *)(v23 - 8);
      uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v25(v37, 1, v23))
      {
        uint64_t v26 = type metadata accessor for ShareableContentType(0);
        memcpy(__dst, v37, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(__dst, v37, v23);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
      }
      a3 = v36;
      uint64_t v27 = *(int *)(v35 + 24);
      uint64_t v28 = (void *)((char *)v17 + v27);
      uint64_t v29 = (void *)((char *)v18 + v27);
      void *v28 = *v29;
      v28[1] = v29[1];
      swift_bridgeObjectRetain();
      break;
    default:
      *uint64_t v17 = *v18;
      v17[1] = v18[1];
      v17[2] = v18[2];
      v17[3] = v18[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
LABEL_16:
  uint64_t v30 = *(int *)(a3 + 20);
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  *uint64_t v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100247C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = (int *)type metadata accessor for NoticeContext(0);
  uint64_t v7 = v6[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for NoticeTapAction(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  *(unsigned char *)(a1 + v6[7]) = *(unsigned char *)(a2 + v6[7]);
  uint64_t v12 = v6[8];
  unint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  uint64_t v15 = type metadata accessor for NoticeContent(0);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v27 = a3;
    *unint64_t v13 = *v14;
    uint64_t v16 = type metadata accessor for ShareableContentExposedContext(0);
    uint64_t v17 = *(int *)(v16 + 20);
    uint64_t v18 = (char *)v13 + v17;
    uint64_t v19 = (char *)v14 + v17;
    *(_OWORD *)((char *)v13 + v17) = *(_OWORD *)((char *)v14 + v17);
    uint64_t v20 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
    uint64_t v21 = &v18[v20];
    uint64_t v22 = &v19[v20];
    uint64_t v23 = type metadata accessor for URL();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = type metadata accessor for ShareableContentType(0);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    a3 = v27;
    *(_OWORD *)((char *)v13 + *(int *)(v16 + 24)) = *(_OWORD *)((char *)v14 + *(int *)(v16 + 24));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100247EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = type metadata accessor for NoticeContext(0);
  uint64_t v8 = v7;
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + *(int *)(v7 + 28)) = *(unsigned char *)(a2 + *(int *)(v7 + 28));
  }
  else
  {
    uint64_t v9 = *(int *)(v7 + 24);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (const void *)(a2 + v9);
    sub_1002488E8(a1 + v9, type metadata accessor for NoticeTapAction);
    uint64_t v12 = type metadata accessor for NoticeTapAction(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
    *(unsigned char *)(a1 + *(int *)(v8 + 28)) = *(unsigned char *)(a2 + *(int *)(v8 + 28));
    uint64_t v14 = *(int *)(v8 + 32);
    uint64_t v15 = (_OWORD *)(a1 + v14);
    uint64_t v16 = (_OWORD *)(a2 + v14);
    sub_1002488E8(a1 + v14, type metadata accessor for NoticeContent);
    uint64_t v17 = type metadata accessor for NoticeContent(0);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v34 = a3;
      *uint64_t v15 = *v16;
      uint64_t v18 = type metadata accessor for ShareableContentExposedContext(0);
      uint64_t v19 = *(int *)(v18 + 20);
      uint64_t v20 = (char *)v15 + v19;
      uint64_t v21 = (char *)v16 + v19;
      *(_OWORD *)((char *)v15 + v19) = *(_OWORD *)((char *)v16 + v19);
      uint64_t v22 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
      uint64_t v23 = &v20[v22];
      uint64_t v24 = &v21[v22];
      uint64_t v25 = type metadata accessor for URL();
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = type metadata accessor for ShareableContentType(0);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      a3 = v34;
      *(_OWORD *)((char *)v15 + *(int *)(v18 + 24)) = *(_OWORD *)((char *)v16 + *(int *)(v18 + 24));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
  }
  uint64_t v28 = *(int *)(a3 + 20);
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *uint64_t v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002481F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10024820C);
}

uint64_t sub_10024820C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NoticeContext(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_1002482DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002482F0);
}

uint64_t sub_1002482F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for NoticeContext(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t sub_1002483B0()
{
  uint64_t result = type metadata accessor for NoticeContext(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for NoticeEventRequest(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  char v9 = *(unsigned char *)(a1 + 88);

  return sub_10002052C(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t initializeWithCopy for NoticeEventRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  unint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 80);
  char v12 = *(unsigned char *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10001FAFC(v5, v6, v7, v8, v9, v10, v11, v12);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v11;
  *(unsigned char *)(a1 + 88) = v12;
  return a1;
}

uint64_t assignWithCopy for NoticeEventRequest(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v2[2];
  *(void *)(a1 + 24) = v2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = v2[4];
  unint64_t v5 = v2[5];
  uint64_t v6 = v2[6];
  uint64_t v7 = v2[7];
  uint64_t v8 = v2[8];
  uint64_t v9 = v2[9];
  uint64_t v10 = v2[10];
  LOBYTE(v2) = *((unsigned char *)v2 + 88);
  sub_10001FAFC(v4, v5, v6, v7, v8, v9, v10, (char)v2);
  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v16 = *(void *)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 80);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = v10;
  char v18 = *(unsigned char *)(a1 + 88);
  *(unsigned char *)(a1 + 88) = (_BYTE)v2;
  sub_10002052C(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

__n128 initializeWithTake for NoticeEventRequest(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for NoticeEventRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 80);
  char v7 = *(unsigned char *)(a2 + 88);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 80);
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v6;
  char v16 = *(unsigned char *)(a1 + 88);
  *(unsigned char *)(a1 + 88) = v7;
  sub_10002052C(v8, v9, v10, v11, v12, v13, v14, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NoticeEventRequest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 89)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NoticeEventRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NoticeEventRequest()
{
  return &type metadata for NoticeEventRequest;
}

unint64_t sub_100248784()
{
  unint64_t result = qword_1003702D8;
  if (!qword_1003702D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003702D8);
  }
  return result;
}

uint64_t sub_1002487D8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NoticeContext(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10024881C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100248884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PresentNoticeRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002488E8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100248948()
{
  unint64_t result = qword_1003702F8;
  if (!qword_1003702F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003702F8);
  }
  return result;
}

unint64_t sub_10024899C()
{
  unint64_t result = qword_100370308;
  if (!qword_100370308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370308);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NoticeEventRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100248ABCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NoticeEventRequest.CodingKeys()
{
  return &type metadata for NoticeEventRequest.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for PresentNoticeRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100248BC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentNoticeRequest.CodingKeys()
{
  return &type metadata for PresentNoticeRequest.CodingKeys;
}

unint64_t sub_100248BFC()
{
  unint64_t result = qword_100370310;
  if (!qword_100370310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370310);
  }
  return result;
}

unint64_t sub_100248C54()
{
  unint64_t result = qword_100370318;
  if (!qword_100370318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370318);
  }
  return result;
}

unint64_t sub_100248CAC()
{
  unint64_t result = qword_100370320;
  if (!qword_100370320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370320);
  }
  return result;
}

unint64_t sub_100248D04()
{
  unint64_t result = qword_100370328;
  if (!qword_100370328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370328);
  }
  return result;
}

unint64_t sub_100248D5C()
{
  unint64_t result = qword_100370330;
  if (!qword_100370330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370330);
  }
  return result;
}

unint64_t sub_100248DB4()
{
  unint64_t result = qword_100370338[0];
  if (!qword_100370338[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100370338);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LEDEffect(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD)
  {
    unsigned int v2 = a2 + 3;
    if (a2 + 3 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 3;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100248EB8);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 2) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 3) {
    return v8 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for LEDEffect(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFD) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v7 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x100248FA0);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LEDEffect()
{
  return &type metadata for LEDEffect;
}

uint64_t sub_100248FD8()
{
  int v1 = *v0;
  if (v1 == 2) {
    return 0x6D6F6F6C62;
  }
  if (v1 == 3) {
    return 1886352499;
  }
  v3._countAndFlagsBits = 0x2D776F6C67;
  v3._object = (void *)0xE500000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t sub_100249084(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2) {
    return v3 == 2;
  }
  if (v2 == 3) {
    return v3 == 3;
  }
  if ((v3 & 0xFE) == 2) {
    return 0;
  }
  return sub_10005C720(v2 & 1, v3 & 1);
}

uint64_t sub_1002490D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 72);
}

uint64_t sub_1002490E0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1002491DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v4 - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  unint64_t v8 = v7 + 8;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = *(void *)(v5 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v9 + v11;
  uint64_t v13 = (v9 + v11 + ((v7 + 8) & ~v7)) & ~v11;
  if (*(_DWORD *)(v10 + 84)) {
    uint64_t v14 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  else {
    uint64_t v14 = *(void *)(*(void *)(v5 - 8) + 64) + 1;
  }
  uint64_t v15 = v9 + 7;
  unint64_t v16 = ((v15 + ((v8 + ((v14 + 7 + v13) & 0xFFFFFFFFFFFFFFF8)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16;
  int v17 = (*(_DWORD *)(v10 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  uint64_t v18 = *a2;
  *a1 = *a2;
  if ((v11 | v7) > 7 || v17 != 0 || v16 > 0x18)
  {
    uint64_t v21 = (uint64_t *)(v18 + (((v11 | v7) & 0xF8 ^ 0x1F8) & ((v11 | v7) + 16)));
  }
  else
  {
    size_t __n = v14;
    uint64_t v37 = v14 + 7;
    uint64_t v22 = ~v11;
    uint64_t v41 = a1;
    uint64_t v23 = ((unint64_t)a1 + v7 + 8) & ~v7;
    uint64_t v39 = ~v7;
    uint64_t v40 = v15;
    uint64_t v24 = ((unint64_t)a2 + v7 + 8) & ~v7;
    uint64_t v25 = *(void (**)(void, void, void))(v6 + 16);
    swift_bridgeObjectRetain();
    uint64_t v38 = v25;
    v25(v23, v24, v4);
    uint64_t v26 = (void *)((v23 + v12) & v22);
    uint64_t v27 = (const void *)((v24 + v12) & v22);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v27, 1, v5))
    {
      memcpy(v26, v27, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v26, v27, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v26, 0, 1, v5);
    }
    uint64_t v28 = (void *)(((unint64_t)v26 + v37) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = (void *)(((unint64_t)v27 + v37) & 0xFFFFFFFFFFFFFFF8);
    void *v28 = *v29;
    unint64_t v30 = ((unint64_t)v28 + v8) & v39;
    unint64_t v31 = ((unint64_t)v29 + v8) & v39;
    swift_bridgeObjectRetain();
    v38(v30, v31, v4);
    uint64_t v32 = (void *)((v40 + v31) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v33 = v32[1];
    uint64_t v34 = (void *)((v40 + v30) & 0xFFFFFFFFFFFFFFF8);
    void *v34 = *v32;
    v34[1] = v33;
    uint64_t v21 = v41;
  }
  swift_retain();
  return v21;
}

uint64_t sub_100249498(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v7 = v5 + 8;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v8 + 8;
  uint64_t v10 = ~v8;
  uint64_t v11 = (v8 + 8 + a1) & ~v8;
  v6(v11, v4);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(v12 - 8);
  unint64_t v14 = (*(void *)(v7 + 56) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12)) {
    (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v14, v12);
  }
  unint64_t v15 = v14 + *(void *)(v13 + 64);
  if (!*(_DWORD *)(v13 + 84)) {
    ++v15;
  }
  unint64_t v16 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v6((v9 + v16) & v10, v4);

  return swift_release();
}

void *sub_100249610(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void (**)(unint64_t, unint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(void *)(v5 - 8) + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v9 = v8 + 8;
  uint64_t v33 = ~v8;
  uint64_t v10 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v11 = ((unint64_t)a2 + v8 + 8) & ~v8;
  swift_bridgeObjectRetain();
  uint64_t v34 = v6;
  v6(v10, v11, v5);
  uint64_t v12 = *(void *)(v7 + 48);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  unint64_t v16 = (void *)((v12 + v15 + v10) & ~v15);
  int v17 = (const void *)((v12 + v15 + v11) & ~v15);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v17, 1, v13))
  {
    int v18 = *(_DWORD *)(v14 + 84);
    uint64_t v19 = *(void *)(v14 + 64);
    if (v18) {
      size_t v20 = *(void *)(v14 + 64);
    }
    else {
      size_t v20 = v19 + 1;
    }
    memcpy(v16, v17, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v16, v17, v13);
    uint64_t v22 = *(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56);
    uint64_t v21 = v14 + 56;
    v22(v16, 0, 1, v13);
    int v18 = *(_DWORD *)(v21 + 28);
    uint64_t v19 = *(void *)(v21 + 8);
  }
  if (v18) {
    uint64_t v23 = v19;
  }
  else {
    uint64_t v23 = v19 + 1;
  }
  uint64_t v24 = (void *)(((unint64_t)v16 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)(((unint64_t)v17 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  void *v24 = *v25;
  unint64_t v26 = ((unint64_t)v24 + v9) & v33;
  unint64_t v27 = ((unint64_t)v25 + v9) & v33;
  swift_bridgeObjectRetain();
  v34(v26, v27, v5);
  uint64_t v28 = (uint64_t *)((v12 + 7 + v27) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  unint64_t v31 = (void *)((v12 + 7 + v26) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v31 = v30;
  v31[1] = v29;
  swift_retain();
  return a1;
}

void *sub_10024981C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v8 + 8;
  uint64_t v31 = ~v8;
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v6 + 24);
  uint64_t v10 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v11 = ((unint64_t)a2 + v8 + 8) & ~v8;
  uint64_t v33 = *(void *)(a3 + 16);
  v32(v10, v11);
  uint64_t v12 = *(void *)(a3 + 24);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v30 = *(void *)(v7 + 40);
  uint64_t v15 = (void *)((v30 + v14 + v10) & ~v14);
  unint64_t v16 = (void *)((v30 + v14 + v11) & ~v14);
  int v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v11) = v17(v15, 1, v12);
  int v18 = v17(v16, 1, v12);
  if (v11)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v15, v16, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
      goto LABEL_12;
    }
    int v19 = *(_DWORD *)(v13 + 84);
    size_t v20 = *(void *)(v13 + 64);
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v15, v16, v12);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
    int v19 = *(_DWORD *)(v13 + 84);
    size_t v20 = *(void *)(v13 + 64);
  }
  if (v19) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = v20 + 1;
  }
  memcpy(v15, v16, v21);
LABEL_12:
  if (*(_DWORD *)(v13 + 84)) {
    uint64_t v22 = *(void *)(v13 + 64);
  }
  else {
    uint64_t v22 = *(void *)(v13 + 64) + 1;
  }
  uint64_t v23 = (void *)(((unint64_t)v15 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (void *)(((unint64_t)v16 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v23 = *v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v25 = ((unint64_t)v24 + v9) & v31;
  ((void (*)(unint64_t, unint64_t, uint64_t))v32)(((unint64_t)v23 + v9) & v31, v25, v33);
  unint64_t v26 = (void *)((v30 + 7 + (((unint64_t)v23 + v9) & v31)) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v27 = (void *)((v30 + 7 + v25) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = v27[1];
  *unint64_t v26 = *v27;
  v26[1] = v28;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_100249AC4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v8 + 8;
  uint64_t v29 = ~v8;
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  uint64_t v10 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v11 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v30(v10, v11, v5);
  uint64_t v12 = *(void *)(v7 + 32);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  unint64_t v16 = (void *)((v12 + v15 + v10) & ~v15);
  int v17 = (const void *)((v12 + v15 + v11) & ~v15);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v17, 1, v13))
  {
    int v18 = *(_DWORD *)(v14 + 84);
    uint64_t v19 = *(void *)(v14 + 64);
    if (v18) {
      size_t v20 = *(void *)(v14 + 64);
    }
    else {
      size_t v20 = v19 + 1;
    }
    memcpy(v16, v17, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v16, v17, v13);
    uint64_t v22 = *(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56);
    uint64_t v21 = v14 + 56;
    v22(v16, 0, 1, v13);
    int v18 = *(_DWORD *)(v21 + 28);
    uint64_t v19 = *(void *)(v21 + 8);
  }
  if (v18) {
    uint64_t v23 = v19;
  }
  else {
    uint64_t v23 = v19 + 1;
  }
  uint64_t v24 = (void *)(((unint64_t)v16 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = (void *)(((unint64_t)v17 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  void *v24 = *v25;
  unint64_t v26 = ((unint64_t)v24 + v9) & v29;
  unint64_t v27 = ((unint64_t)v25 + v9) & v29;
  v30(v26, v27, v5);
  *(_OWORD *)((v12 + 7 + v26) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v12 + 7 + v27) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_100249CC0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v8 + 8;
  uint64_t v28 = ~v8;
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v6 + 40);
  uint64_t v10 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v11 = ((unint64_t)a2 + v8 + 8) & ~v8;
  uint64_t v30 = *(void *)(a3 + 16);
  v29(v10, v11);
  uint64_t v12 = *(void *)(a3 + 24);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v27 = *(void *)(v7 + 24);
  uint64_t v15 = (void *)((v27 + v14 + v10) & ~v14);
  unint64_t v16 = (void *)((v27 + v14 + v11) & ~v14);
  int v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v11) = v17(v15, 1, v12);
  int v18 = v17(v16, 1, v12);
  if (v11)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v15, v16, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
      goto LABEL_12;
    }
    int v19 = *(_DWORD *)(v13 + 84);
    size_t v20 = *(void *)(v13 + 64);
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v15, v16, v12);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
    int v19 = *(_DWORD *)(v13 + 84);
    size_t v20 = *(void *)(v13 + 64);
  }
  if (v19) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = v20 + 1;
  }
  memcpy(v15, v16, v21);
LABEL_12:
  if (*(_DWORD *)(v13 + 84)) {
    uint64_t v22 = *(void *)(v13 + 64);
  }
  else {
    uint64_t v22 = *(void *)(v13 + 64) + 1;
  }
  uint64_t v23 = (void *)(((unint64_t)v15 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (void *)(((unint64_t)v16 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v23 = *v24;
  swift_bridgeObjectRelease();
  unint64_t v25 = ((unint64_t)v24 + v9) & v28;
  ((void (*)(unint64_t, unint64_t, uint64_t))v29)(((unint64_t)v23 + v9) & v28, v25, v30);
  *(_OWORD *)((v27 + 7 + (((unint64_t)v23 + v9) & v28)) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v27 + 7 + v25) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_100249F50(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  unsigned int v10 = v9 - 1;
  if (!v9) {
    unsigned int v10 = 0;
  }
  if (v5 <= v10) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v4 + 84);
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = 7;
  if (!v9) {
    uint64_t v16 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v12 < a2)
  {
    unint64_t v17 = ((v14
          + ((v13
            + 8
            + ((v16 + *(void *)(*(void *)(v6 - 8) + 64) + ((v14 + v15 + ((v13 + 8) & ~v13)) & ~v15)) & 0xFFFFFFFFFFFFFFF8)) & ~v13)
          + 7) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    unsigned int v18 = a2 - v12;
    uint64_t v19 = v17 & 0xFFFFFFF8;
    if ((v17 & 0xFFFFFFF8) != 0) {
      unsigned int v20 = 2;
    }
    else {
      unsigned int v20 = v18 + 1;
    }
    if (v20 >= 0x10000) {
      unsigned int v21 = 4;
    }
    else {
      unsigned int v21 = 2;
    }
    if (v20 < 0x100) {
      unsigned int v21 = 1;
    }
    if (v20 >= 2) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    switch(v22)
    {
      case 1:
        int v23 = *((unsigned __int8 *)a1 + v17);
        if (!v23) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v23 = *(unsigned __int16 *)((char *)a1 + v17);
        if (v23) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10024A1B8);
      case 4:
        int v23 = *(int *)((char *)a1 + v17);
        if (!v23) {
          break;
        }
LABEL_28:
        int v24 = v23 - 1;
        if (v19)
        {
          int v24 = 0;
          int v25 = *a1;
        }
        else
        {
          int v25 = 0;
        }
        return v12 + (v25 | v24) + 1;
      default:
        break;
    }
  }
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v26 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v26) = -1;
    }
    return (v26 + 1);
  }
  uint64_t v28 = ((unint64_t)a1 + v13 + 8) & ~v13;
  if (v5 != v12)
  {
    if (v9 >= 2)
    {
      unsigned int v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v28 + v14 + v15) & ~v15, v9, v6);
      if (v30 >= 2) {
        return v30 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  uint64_t v29 = *(uint64_t (**)(uint64_t))(v4 + 48);

  return v29(v28);
}

void sub_10024A1CC(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v8 = *(void *)(a4 + 24);
  unsigned int v9 = *(_DWORD *)(v7 + 84);
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = *(void *)(v7 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  unsigned int v15 = v11 - 1;
  if (!v11) {
    unsigned int v15 = 0;
  }
  if (v9 <= v15) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v7 + 84);
  }
  if (v16 <= 0x7FFFFFFF) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  else {
    unsigned int v17 = v16;
  }
  uint64_t v18 = 7;
  if (!v11) {
    uint64_t v18 = 8;
  }
  size_t v19 = ((v13
        + ((v12
          + 8
          + ((v18 + *(void *)(*(void *)(v8 - 8) + 64) + ((v13 + v14 + ((v12 + 8) & ~v12)) & ~v14)) & 0xFFFFFFFFFFFFFFF8)) & ~v12)
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v17 < a3)
  {
    unsigned int v20 = a3 - v17;
    if (((v13
         + ((v12
           + 8
           + ((v18
             + *(_DWORD *)(*(void *)(v8 - 8) + 64)
             + ((v13 + v14 + ((v12 + 8) & ~v12)) & ~v14)) & 0xFFFFFFF8)) & ~v12)
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v21 = v20 + 1;
    else {
      unsigned int v21 = 2;
    }
    if (v21 >= 0x10000) {
      int v22 = 4;
    }
    else {
      int v22 = 2;
    }
    if (v21 < 0x100) {
      int v22 = 1;
    }
    if (v21 >= 2) {
      int v6 = v22;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v17)
  {
    if (((v13
         + ((v12
           + 8
           + ((v18
             + *(_DWORD *)(*(void *)(v8 - 8) + 64)
             + ((v13 + v14 + ((v12 + 8) & ~v12)) & ~v14)) & 0xFFFFFFF8)) & ~v12)
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      int v23 = a2 - v17;
    else {
      int v23 = 1;
    }
    if (((v13
         + ((v12
           + 8
           + ((v18
             + *(_DWORD *)(*(void *)(v8 - 8) + 64)
             + ((v13 + v14 + ((v12 + 8) & ~v12)) & ~v14)) & 0xFFFFFFF8)) & ~v12)
         + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v24 = ~v17 + a2;
      bzero(a1, v19);
      *(_DWORD *)a1 = v24;
    }
    switch(v6)
    {
      case 1:
        a1[v19] = v23;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v23;
        return;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)&a1[v19] = v23;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_38;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_38;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x10024A4A0);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_37;
    default:
LABEL_37:
      if (a2)
      {
LABEL_38:
        if ((v16 & 0x80000000) != 0)
        {
          unint64_t v26 = (unint64_t)&a1[v12 + 8] & ~v12;
          if (v9 == v17)
          {
            uint64_t v27 = *(void (**)(unint64_t))(v7 + 56);
            v27(v26);
          }
          else if (v11 >= 2)
          {
            unint64_t v28 = (v26 + v13 + v14) & ~v14;
            uint64_t v29 = a2 + 1;
            unsigned int v30 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
            v30(v28, v29);
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v25 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v25 = a2 - 1;
          }
          *(void *)a1 = v25;
        }
      }
      return;
  }
}

uint64_t _s7AnyEdgeVMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10024A4E0(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 56);
}

double MultiEdge.init(_:trigger:end:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v27 = a5;
  uint64_t v28 = a8;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a1;
  uint64_t v14 = *(void *)(a6 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(a1);
  unsigned int v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v16);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  size_t v19 = (char *)swift_allocObject();
  *((void *)v19 + 2) = v27;
  *((void *)v19 + 3) = a6;
  uint64_t v20 = v28;
  *((void *)v19 + 4) = a7;
  *((void *)v19 + 5) = v20;
  *((void *)v19 + 6) = a10;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v19[v17], v16, a6);
  unsigned int v21 = &v19[v18];
  uint64_t v23 = v30;
  uint64_t v22 = v31;
  *(void *)unsigned int v21 = v29;
  *((void *)v21 + 1) = v23;
  MultiEdge.init(startNodes:end:)(v22, (uint64_t)sub_10024B748, (uint64_t)v19, v32);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, a6);
  long long v24 = v32[1];
  *a9 = v32[0];
  a9[1] = v24;
  double result = *(double *)&v33;
  a9[2] = v33;
  return result;
}

double MultiEdge.init(_:triggers:end:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10)
{
  sub_10002A464(a5, a5);
  uint64_t v17 = *(void *)(a5 - 8);
  swift_allocObject();
  uint64_t v18 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v19, a1, a5);
  uint64_t v20 = sub_10001A0B4(v18);
  unsigned int v21 = (void *)swift_allocObject();
  v21[2] = a5;
  v21[3] = a6;
  v21[4] = a7;
  v21[5] = a8;
  void v21[6] = a10;
  v21[7] = a2;
  v21[8] = a3;
  v21[9] = a4;
  MultiEdge.init(startNodes:end:)(v20, (uint64_t)sub_10024BAF0, (uint64_t)v21, v26);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, a5);
  long long v22 = v26[1];
  *a9 = v26[0];
  a9[1] = v22;
  double result = *(double *)&v27;
  a9[2] = v27;
  return result;
}

double MultiEdge.init(_:to:triggers:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  sub_10002A464(a4, a4);
  uint64_t v17 = *(void *)(a4 - 8);
  swift_allocObject();
  uint64_t v18 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v19, a1, a4);
  uint64_t v20 = sub_10001A0B4(v18);
  double v21 = sub_10024BB24(v20, a3, a4, a5, a6, a7, a8, v26);
  long long v22 = *(void (**)(uint64_t, uint64_t, double))(v17 + 8);
  v22(a2, a4, v21);
  ((void (*)(uint64_t, uint64_t))v22)(a1, a4);
  long long v23 = v26[1];
  *a9 = v26[0];
  a9[1] = v23;
  double result = *(double *)&v27;
  a9[2] = v27;
  return result;
}

{
  double v12;
  long long v13;
  double result;
  _OWORD v15[2];
  long long v16;

  uint64_t v12 = sub_10024BB24(a1, a3, a4, a5, a6, a7, a8, v15);
  (*(void (**)(uint64_t, uint64_t, double))(*(void *)(a4 - 8) + 8))(a2, a4, v12);
  uint64_t v13 = v15[1];
  *a9 = v15[0];
  a9[1] = v13;
  double result = *(double *)&v16;
  a9[2] = v16;
  return result;
}

uint64_t MultiEdge.startNodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MultiEdge.end.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_retain();
  return v1;
}

uint64_t MultiEdge.end.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*MultiEdge.end.modify())()
{
  return nullsub_1;
}

uint64_t MultiEdge.actions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MultiEdge.actions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*MultiEdge.actions.modify())()
{
  return nullsub_1;
}

uint64_t MultiEdge.filters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MultiEdge.filters.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*MultiEdge.filters.modify())()
{
  return nullsub_1;
}

uint64_t MultiEdge.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MultiEdge.outputs.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*MultiEdge.outputs.modify())()
{
  return nullsub_1;
}

double MultiEdge.init(_:to:trigger:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  sub_10002A464(a5, a5);
  uint64_t v17 = *(void *)(a5 - 8);
  swift_allocObject();
  uint64_t v18 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v19, a3, a5);
  uint64_t v20 = sub_10001A0B4(v18);
  double v21 = sub_10024BB24(a1, v20, a4, a5, a6, a7, a8, v25);
  (*(void (**)(uint64_t, uint64_t, double))(v17 + 8))(a3, a5, v21);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
  long long v22 = v25[1];
  *a9 = v25[0];
  a9[1] = v22;
  double result = *(double *)&v26;
  a9[2] = v26;
  return result;
}

uint64_t sub_10024AD38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v30 = a9;
  uint64_t v31 = a8;
  uint64_t v29 = a1;
  uint64_t v15 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = v18;
  type metadata accessor for Array();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, a4);
    uint64_t v20 = v30;
    uint64_t v19 = v31;
    End.init(_:)((uint64_t)v17, a4, v30);
    uint64_t v32 = a4;
    uint64_t v33 = a5;
    uint64_t v34 = a6;
    uint64_t v35 = a7;
    uint64_t v36 = v19;
    uint64_t v21 = type metadata accessor for End();
    long long v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
    uint64_t v23 = v20;
  }
  else
  {
    uint64_t v32 = a2;
    swift_getWitnessTable();
    if ((Sequence<>.contains(_:)() & 1) == 0)
    {
      uint64_t v32 = a4;
      uint64_t v33 = a5;
      uint64_t v34 = a6;
      uint64_t v35 = a7;
      uint64_t v36 = v31;
      uint64_t v21 = type metadata accessor for End();
      long long v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
      uint64_t v23 = v30;
      uint64_t v27 = 1;
      return v22(v23, v27, 1, v21);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, a4);
    uint64_t v24 = v30;
    uint64_t v25 = a6;
    uint64_t v26 = v31;
    End.init(_:)((uint64_t)v17, a4, v30);
    uint64_t v32 = a4;
    uint64_t v33 = a5;
    uint64_t v34 = v25;
    uint64_t v35 = a7;
    uint64_t v36 = v26;
    uint64_t v21 = type metadata accessor for End();
    long long v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
    uint64_t v23 = v24;
  }
  uint64_t v27 = 0;
  return v22(v23, v27, 1, v21);
}

uint64_t MultiEdge.init(startNodes:end:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  swift_getFunctionTypeMetadata1();
  uint64_t v8 = static Array._allocateUninitialized(_:)();
  swift_getFunctionTypeMetadata1();
  uint64_t v9 = static Array._allocateUninitialized(_:)();
  type metadata accessor for Array();
  swift_getFunctionTypeMetadata1();
  uint64_t result = static Array._allocateUninitialized(_:)();
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  a4[3] = v8;
  a4[4] = v9;
  a4[5] = result;
  return result;
}

double MultiEdge.init(_:to:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = a4;
  v18[3] = a5;
  void v18[4] = a6;
  v18[5] = a7;
  v18[6] = a8;
  v18[7] = a2;
  v18[8] = a3;
  MultiEdge.init(startNodes:end:)(a1, (uint64_t)sub_10024BCD0, (uint64_t)v18, v21);
  long long v19 = v21[1];
  *a9 = v21[0];
  a9[1] = v19;
  double result = *(double *)&v22;
  a9[2] = v22;
  return result;
}

uint64_t sub_10024B188@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v35 = a8;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v31 - v14;
  uint64_t v16 = *(void *)(a3 - 8);
  uint64_t v17 = __chkstk_darwin(v13);
  long long v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v31 - v20;
  a2(a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t v36 = a3;
    uint64_t v37 = v31;
    uint64_t v38 = v32;
    uint64_t v39 = v33;
    uint64_t v40 = v34;
    uint64_t v22 = type metadata accessor for End();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v35, 1, 1, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v15, a3);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, a3);
    uint64_t v25 = v34;
    uint64_t v24 = v35;
    uint64_t v26 = (uint64_t)v19;
    uint64_t v28 = v31;
    uint64_t v27 = v32;
    uint64_t v29 = v33;
    End.init(_:)(v26, a3, v35);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, a3);
    uint64_t v36 = a3;
    uint64_t v37 = v28;
    uint64_t v38 = v27;
    uint64_t v39 = v29;
    uint64_t v40 = v25;
    uint64_t v30 = type metadata accessor for End();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v24, 0, 1, v30);
  }
}

uint64_t sub_10024B464@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t a3@<X8>)
{
  type metadata accessor for Array();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter()) {
    return a2(a1);
  }
  swift_getWitnessTable();
  if (Sequence<>.contains(_:)()) {
    return a2(a1);
  }
  uint64_t v7 = type metadata accessor for End();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a3, 1, 1, v7);
}

uint64_t sub_10024B5C0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t a3@<X8>)
{
  if (dispatch thunk of static Equatable.== infix(_:_:)()) {
    return a2(a1);
  }
  uint64_t v7 = type metadata accessor for End();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a3, 1, 1, v7);
}

uint64_t sub_10024B6A8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_10024B748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10024B5C0(a1, *(uint64_t (**)(uint64_t))(v2+ ((*(void *)(*(void *)(*(void *)(v2 + 24) - 8) + 64)+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 24) - 8) + 80)+ 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 24) - 8)+ 80))+ 7) & 0xFFFFFFFFFFFFFFF8)), a2);
}

uint64_t MultiEdge.asEdges()(void *a1)
{
  uint64_t v21 = *v1;
  uint64_t v2 = a1[3];
  uint64_t v12 = a1[2];
  uint64_t v13 = v2;
  uint64_t v3 = a1[5];
  uint64_t v14 = a1[4];
  uint64_t v15 = v3;
  uint64_t v4 = a1[6];
  uint64_t v5 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  uint64_t v16 = v12;
  uint64_t v17 = v2;
  uint64_t v18 = v14;
  uint64_t v19 = v3;
  uint64_t v20 = v4;
  uint64_t v6 = type metadata accessor for Edge2();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = sub_10004DDF8((void (*)(char *, char *))sub_10024BCE4, (uint64_t)&v11, v5, v6, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v8);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_10024B8D8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  __chkstk_darwin(a1);
  uint64_t v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v16);
  uint64_t v19 = a2[1];
  uint64_t v18 = a2[2];
  swift_retain();
  Edge2.init(start:end:)((uint64_t)v16, v19, v18, a3, a8);
  uint64_t v20 = a2[3];
  v28[1] = a3;
  v28[2] = a4;
  v28[3] = a5;
  v28[4] = a6;
  v28[5] = a7;
  uint64_t v21 = (int *)type metadata accessor for Edge2();
  uint64_t v22 = v21[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a8 + v22) = v20;
  uint64_t v23 = a2[4];
  uint64_t v24 = v21[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a8 + v24) = v23;
  uint64_t v25 = a2[5];
  uint64_t v26 = v21[18];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a8 + v26) = v25;
  return result;
}

uint64_t sub_10024BA74(void *a1)
{
  return MultiEdge.asEdges()(a1);
}

uint64_t sub_10024BAB0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10024BAF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10024B464(a1, *(uint64_t (**)(uint64_t))(v2 + 64), a2);
}

double sub_10024BB24@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _OWORD *a8@<X8>)
{
  uint64_t v21 = a7;
  uint64_t v22 = a1;
  uint64_t v14 = *(void *)(a3 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(a1);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v16);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = a3;
  *((void *)v18 + 3) = a4;
  *((void *)v18 + 4) = a5;
  *((void *)v18 + 5) = a6;
  *((void *)v18 + 6) = v21;
  *((void *)v18 + 7) = a2;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v18[v17], v16, a3);
  MultiEdge.init(startNodes:end:)(v22, (uint64_t)sub_10024C090, (uint64_t)v18, v23);
  long long v19 = v23[1];
  *a8 = v23[0];
  a8[1] = v19;
  double result = *(double *)&v24;
  a8[2] = v24;
  return result;
}

uint64_t sub_10024BC98()
{
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10024BCD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10024B188(a1, *(void (**)(uint64_t))(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), a2);
}

uint64_t sub_10024BCE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10024B8D8(a1, *(void **)(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), a2);
}

uint64_t sub_10024BD0C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10024BD48()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10024BD9C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10024BE10(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_10024BEB8(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10024BF20(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10024BF68(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for MultiEdge()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10024BFCC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10024C090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10024AD38(a1, v2[7], (uint64_t)v2+ ((*(unsigned __int8 *)(*(void *)(v2[2] - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2[2] - 8) + 80)), v2[2], v2[3], v2[4], v2[5], v2[6], a2);
}

unint64_t sub_10024C0D8()
{
  return sub_100261024(*v0);
}

uint64_t _s23HandoffEnabledHeartbeatVwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  if (v6 >= 2) {
    int v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v7 = -2;
  }
  if (v7 < 0) {
    int v7 = -1;
  }
  return (v7 + 1);
}

unsigned char *_s23HandoffEnabledHeartbeatVwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10024C258);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s23HandoffEnabledHeartbeatVMa()
{
  return &_s23HandoffEnabledHeartbeatVN;
}

unint64_t sub_10024C290(uint64_t a1)
{
  unint64_t result = sub_10024C2B8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10024C2B8()
{
  unint64_t result = qword_100370540;
  if (!qword_100370540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370540);
  }
  return result;
}

unint64_t sub_10024C30C(uint64_t a1)
{
  unint64_t result = sub_10024C334();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10024C334()
{
  unint64_t result = qword_100370548;
  if (!qword_100370548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370548);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareableContentPreviewEffect()
{
  return &type metadata for ShareableContentPreviewEffect;
}

BOOL sub_10024C398(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 16);
  unsigned int v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  swift_retain();
  id v6 = v2;
  swift_retain();
  id v7 = v4;
  if (![v6 isEqual:v7])
  {
    swift_release();

    goto LABEL_7;
  }
  if (v3)
  {
    if (v5)
    {
      swift_retain();
      swift_retain();
      char v8 = static UUID.== infix(_:_:)();
      swift_release_n();

      swift_release_n();
      return (v8 & 1) != 0;
    }
    swift_release();

LABEL_8:
    return 0;
  }

  if (v5)
  {
LABEL_7:
    swift_release();
    goto LABEL_8;
  }

  return 1;
}

unint64_t sub_10024C4B8(uint64_t a1)
{
  unint64_t result = sub_10024C4E0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10024C4E0()
{
  unint64_t result = qword_100370550;
  if (!qword_100370550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370550);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ShareableContentPreviewEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10024C600);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareableContentPreviewEvent()
{
  return &type metadata for ShareableContentPreviewEvent;
}

unint64_t sub_10024C638(uint64_t a1)
{
  unint64_t result = sub_10024C660();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10024C660()
{
  unint64_t result = qword_100370558;
  if (!qword_100370558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370558);
  }
  return result;
}

uint64_t sub_10024C6B4()
{
  uint64_t v1 = 0x546D7269666E6F63;
  if (*v0 != 1) {
    uint64_t v1 = 0x657373696D736964;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65746E6573657270;
  }
}

id sub_10024C720()
{
  return sub_10024C734(&qword_100366B00, &qword_100370698);
}

id sub_10024C734(uint64_t *a1, uint64_t *a2)
{
  sub_10000A38C(a1);
  sub_10000A38C(a2);
  String.init<A>(describing:)();
  id v4 = objc_allocWithZone((Class)CULogHandle);
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v4 initWithSubsystem:v5 category:v6];

  NSString v8 = String._bridgeToObjectiveC()();
  [v7 ulog:40 message:v8];

  return [*(id *)(v2 + qword_100368650) resume];
}

uint64_t sub_10024C850()
{
  id v1 = sub_1001F5EF8();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  swift_unownedRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ProxControlDemoLinkServerManager()
{
  return self;
}

id sub_10024C914()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_100370660);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  NSString v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = sub_1001F5EF8();
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 ulog:40 message:v7];

  uint64_t v15 = *(void *)(v1 + 24);
  uint64_t v8 = sub_1001148F4();
  id v9 = sub_1001F5EF8();
  uint64_t v16 = v8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = v8;
  *(void *)(v10 + 40) = 0x6B6E696C2077654ELL;
  *(void *)(v10 + 48) = 0xEA0000000000203ALL;
  *(void *)(v10 + 56) = 0;
  *(void *)(v10 + 64) = 0xE000000000000000;
  *(void *)(v10 + 72) = v9;
  *(_DWORD *)(v10 + 80) = 40;
  swift_retain();
  id v14 = v9;
  sub_10000A38C(&qword_100370668);
  sub_10000A38C(&qword_10035D078);
  sub_10000B010(&qword_100370670, &qword_100370668);
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000B010(&qword_100370678, &qword_100370660);
  uint64_t v11 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_release();

  uint64_t v16 = v11;
  swift_retain();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  return sub_10024C734(&qword_100366B88, (uint64_t *)&unk_100368120);
}

uint64_t sub_10024CC0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a2 + 16);
  swift_unownedRetainStrong();
  type metadata accessor for ProxControlDemoBridgeServer();
  swift_allocObject();
  swift_retain();
  uint64_t v4 = sub_100076310(v3, v2);
  swift_release();
  swift_release();
  sub_10024CFA8(&qword_100370680, 255, (void (*)(uint64_t))type metadata accessor for ProxControlDemoBridgeServer);
  uint64_t v5 = Identifiable<>.id.getter();
  sub_100122CD4((uint64_t)v4);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  uint64_t v8 = v4[6];
  v4[6] = (uint64_t)sub_10024D060;
  v4[7] = v7;
  sub_10000F088(v8);

  return swift_release();
}

uint64_t sub_10024CD58(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    sub_100123F50(a2);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10024CDE4(uint64_t a1, uint64_t a2)
{
  if (a1 == 7761509 && a2 == 0xE300000000000000) {
    return 0;
  }
  else {
    return (_stringCompareWithSmolCheck(_:_:expecting:)() ^ 1) & 1;
  }
}

uint64_t sub_10024CE38(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1000B4664(a1, WitnessTable);
}

uint64_t sub_10024CE8C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10024CFA8(&qword_100370658, a2, (void (*)(uint64_t))type metadata accessor for ProxControlDemoLinkServerManager);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10024CEE4()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 84, 7);
}

uint64_t sub_10024CF44@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = sub_10003A18C(*a1, *(uint64_t (**)(uint64_t *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void **)(v2 + 64), *(void **)(v2 + 72), *(_DWORD *)(v2 + 80));

  return swift_retain();
}

uint64_t sub_10024CFA0(uint64_t *a1)
{
  return sub_10024CC0C(a1, v1);
}

uint64_t sub_10024CFA8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10024CFF0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10024D028()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10024D060()
{
  return sub_10024CD58(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t *sub_10024D068(uint64_t a1)
{
  uint64_t v3 = *v1;
  id v4 = objc_allocWithZone((Class)sub_10000A38C(&qword_100366B88));
  v1[3] = (uint64_t)sub_100114A24(0xD00000000000002ELL, 0x80000001002C6BE0);
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000A38C(&qword_100368028);
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 24) = 0;
  *(void *)(v6 + 32) = [objc_allocWithZone((Class)NSLock) init];
  sub_10000A38C(&qword_100370688);
  swift_allocObject();
  uint64_t v7 = PassthroughSubject.init()();
  sub_10000A38C(&qword_100370690);
  swift_allocObject();
  uint64_t v8 = PassthroughSubject.init()();
  swift_allocObject();
  uint64_t v9 = PassthroughSubject.init()();
  *(void *)(v6 + 40) = v7;
  *(void *)(v6 + 48) = v8;
  *(void *)(v6 + 56) = v9;
  *(void *)(v6 + 64) = &_swiftEmptyDictionarySingleton;
  *(void *)(v6 + 72) = 0;
  *(void *)(v6 + 16) = KeyPath;
  *(unsigned char *)(v6 + 24) = 0;
  v1[4] = v6;
  v1[5] = (uint64_t)&_swiftEmptySetSingleton;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v3, (uint64_t)&off_100335D80);
  v1[2] = a1;
  swift_unownedRetain();
  return v1;
}

uint64_t sub_10024D214()
{
  return sub_10024CFA8(&qword_100370680, 255, (void (*)(uint64_t))type metadata accessor for ProxControlDemoBridgeServer);
}

uint64_t sub_10024D260@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ProxControlDemoBridgeServer();
  sub_10024CFA8(&qword_100370680, 255, (void (*)(uint64_t))type metadata accessor for ProxControlDemoBridgeServer);
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10024D2E0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t *sub_10024D354()
{
  type metadata accessor for SetupAssistantMonitor();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_10024D394();
  qword_1003ACB80 = v0;
  return result;
}

uint64_t *sub_10024D394()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_10000A38C(&qword_100367F40);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (char *)v0 + OBJC_IVAR____TtC17proximitycontrold21SetupAssistantMonitor__isSetUp;
  LOBYTE(aBlock[0]) = 1;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v5, v2);
  uint64_t v7 = OBJC_IVAR____TtC17proximitycontrold21SetupAssistantMonitor_setupAssistant;
  id v8 = [self sharedNotifier];
  *(uint64_t *)((char *)v0 + v7) = (uint64_t)v8;
  sub_10024D754((uint64_t)[v8 currentState]);
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v1;
  aBlock[4] = sub_10024DD3C;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10024D6F4;
  aBlock[3] = &unk_100335EF8;
  uint64_t v11 = _Block_copy(aBlock);
  id v12 = v8;
  swift_release();
  [v12 addStateChangeObserver:v11];
  _Block_release(v11);

  return v0;
}

uint64_t sub_10024D5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = BYSetupState.description.getter(a1);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 540945696;
  v8._object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = BYSetupState.description.getter(a2);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  sub_10016ABE4(0xD00000000000001ELL, (void *)0x80000001002C6CA0, 0, a4, (uint64_t)&off_100335E30);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10024D754(a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_10024D6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

uint64_t sub_10024D754(uint64_t a1)
{
  v2._countAndFlagsBits = BYSetupState.description.getter(a1);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  id v3 = sub_1001F5F40();
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 ulog:40 message:v4];
  swift_bridgeObjectRelease();

  if ((unint64_t)(a1 - 1) >= 2 && a1 != 3 && a1)
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    id v6 = sub_1001F5F40();
    swift_bridgeObjectRetain();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v6 ulog:60 message:v7];
    swift_bridgeObjectRelease();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_10024D958()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17proximitycontrold21SetupAssistantMonitor__isSetUp;
  uint64_t v2 = sub_10000A38C(&qword_100367F40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10024DA0C()
{
  return type metadata accessor for SetupAssistantMonitor();
}

uint64_t type metadata accessor for SetupAssistantMonitor()
{
  uint64_t result = qword_1003706D8;
  if (!qword_1003706D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10024DA60()
{
  sub_1000DBFA4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_10024DAFC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1000B4664(a1, WitnessTable);
}

unint64_t sub_10024DB50(uint64_t a1)
{
  unint64_t result = sub_10024DB78();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10024DB78()
{
  unint64_t result = qword_1003707A0[0];
  if (!qword_1003707A0[0])
  {
    type metadata accessor for SetupAssistantMonitor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1003707A0);
  }
  return result;
}

uint64_t sub_10024DBD0@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10024DC50()
{
  return static Published.subscript.setter();
}

uint64_t sub_10024DCCC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10024DD04()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10024DD3C(uint64_t a1, uint64_t a2)
{
  return sub_10024D5D0(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10024DD44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10024DD54()
{
  return swift_release();
}

unint64_t sub_10024DD5C()
{
  return sub_10024DD74();
}

unint64_t sub_10024DD74()
{
  sub_10000A38C(&qword_1003645E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028D430;
  AnyHashable.init<A>(_:)();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  type metadata accessor for PermissionToHandoffRequest.Response();
  sub_10024DEB8();
  uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v4 = v3;
  swift_release();
  if (v0)
  {
    sub_1000BA108(inited + 32);
    swift_setDeallocating();
    sub_10000A38C(&qword_10036C190);
    return swift_arrayDestroy();
  }
  else
  {
    *(void *)(inited + 96) = &type metadata for Data;
    *(void *)(inited + 72) = v2;
    *(void *)(inited + 80) = v4;
    return sub_100268E80(inited);
  }
}

unint64_t sub_10024DEB8()
{
  unint64_t result = qword_100368B40;
  if (!qword_100368B40)
  {
    type metadata accessor for PermissionToHandoffRequest.Response();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100368B40);
  }
  return result;
}

uint64_t sub_10024DF10()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A38C(&qword_10036C090);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  Swift::String v5 = &v80[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  NSString v7 = &v80[-v6];
  long long v81 = xmmword_100291150;
  id v8 = [v1 effectiveIdentifier];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  uint64_t v82 = v9;
  uint64_t v83 = v11;
  id v12 = [v1 identifier];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v84 = v14;
  uint64_t v85 = v16;
  id v17 = [v1 homeKitIdentifier];
  if (v17)
  {
    uint64_t v18 = v17;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v5, 0, 1, v19);
  }
  else
  {
    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v5, 1, 1, v19);
  }
  sub_100110784((uint64_t)v5, (uint64_t)v7);
  type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48))(v7, 1, v19) == 1)
  {
    sub_10000D78C((uint64_t)v7, &qword_10036C090);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v21 = UUID.uuidString.getter();
    uint64_t v22 = v23;
    (*(void (**)(unsigned char *, uint64_t))(v20 + 8))(v7, v19);
  }
  uint64_t v86 = v21;
  uint64_t v87 = v22;
  id v24 = [v1 idsDeviceIdentifier];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v28 = 0;
  }
  uint64_t v88 = v26;
  uint64_t v89 = v28;
  id v29 = [v1 mediaRemoteIdentifier];
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v33 = 0;
  }
  uint64_t v90 = v31;
  uint64_t v91 = v33;
  id v34 = [v1 mediaRouteIdentifier];
  if (v34)
  {
    uint64_t v35 = v34;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v38 = 0;
  }
  uint64_t v92 = v36;
  uint64_t v93 = v38;
  id v39 = [v1 publicIdentifier];
  if (v39)
  {
    uint64_t v40 = v39;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v43 = v42;
  }
  else
  {
    uint64_t v41 = 0;
    uint64_t v43 = 0;
  }
  uint64_t v94 = v41;
  uint64_t v95 = v43;
  uint64_t v44 = v83;
  if (!v83)
  {
    uint64_t v46 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v50 = v85;
    if (!v85) {
      goto LABEL_33;
    }
    goto LABEL_28;
  }
  uint64_t v45 = v82;
  swift_bridgeObjectRetain();
  uint64_t v46 = sub_10008892C(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  unint64_t v48 = *((void *)v46 + 2);
  unint64_t v47 = *((void *)v46 + 3);
  if (v48 >= v47 >> 1) {
    uint64_t v46 = sub_10008892C((char *)(v47 > 1), v48 + 1, 1, v46);
  }
  *((void *)v46 + 2) = v48 + 1;
  char v49 = &v46[16 * v48];
  *((void *)v49 + 4) = v45;
  *((void *)v49 + 5) = v44;
  uint64_t v50 = v85;
  if (v85)
  {
LABEL_28:
    uint64_t v51 = v84;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v46 = sub_10008892C(0, *((void *)v46 + 2) + 1, 1, v46);
    }
    unint64_t v53 = *((void *)v46 + 2);
    unint64_t v52 = *((void *)v46 + 3);
    if (v53 >= v52 >> 1) {
      uint64_t v46 = sub_10008892C((char *)(v52 > 1), v53 + 1, 1, v46);
    }
    *((void *)v46 + 2) = v53 + 1;
    uint64_t v54 = &v46[16 * v53];
    *((void *)v54 + 4) = v51;
    *((void *)v54 + 5) = v50;
    uint64_t v21 = v86;
    uint64_t v22 = v87;
  }
LABEL_33:
  if (v22)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v46 = sub_10008892C(0, *((void *)v46 + 2) + 1, 1, v46);
    }
    unint64_t v56 = *((void *)v46 + 2);
    unint64_t v55 = *((void *)v46 + 3);
    if (v56 >= v55 >> 1) {
      uint64_t v46 = sub_10008892C((char *)(v55 > 1), v56 + 1, 1, v46);
    }
    *((void *)v46 + 2) = v56 + 1;
    uint64_t v57 = &v46[16 * v56];
    *((void *)v57 + 4) = v21;
    *((void *)v57 + 5) = v22;
  }
  uint64_t v58 = v89;
  if (v89)
  {
    uint64_t v59 = v88;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v46 = sub_10008892C(0, *((void *)v46 + 2) + 1, 1, v46);
    }
    unint64_t v61 = *((void *)v46 + 2);
    unint64_t v60 = *((void *)v46 + 3);
    if (v61 >= v60 >> 1) {
      uint64_t v46 = sub_10008892C((char *)(v60 > 1), v61 + 1, 1, v46);
    }
    *((void *)v46 + 2) = v61 + 1;
    uint64_t v62 = &v46[16 * v61];
    *((void *)v62 + 4) = v59;
    *((void *)v62 + 5) = v58;
  }
  uint64_t v63 = v91;
  if (v91)
  {
    uint64_t v64 = v90;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v46 = sub_10008892C(0, *((void *)v46 + 2) + 1, 1, v46);
    }
    unint64_t v66 = *((void *)v46 + 2);
    unint64_t v65 = *((void *)v46 + 3);
    if (v66 >= v65 >> 1) {
      uint64_t v46 = sub_10008892C((char *)(v65 > 1), v66 + 1, 1, v46);
    }
    *((void *)v46 + 2) = v66 + 1;
    uint64_t v67 = &v46[16 * v66];
    *((void *)v67 + 4) = v64;
    *((void *)v67 + 5) = v63;
  }
  uint64_t v68 = v93;
  if (v93)
  {
    uint64_t v69 = v92;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v46 = sub_10008892C(0, *((void *)v46 + 2) + 1, 1, v46);
    }
    unint64_t v71 = *((void *)v46 + 2);
    unint64_t v70 = *((void *)v46 + 3);
    if (v71 >= v70 >> 1) {
      uint64_t v46 = sub_10008892C((char *)(v70 > 1), v71 + 1, 1, v46);
    }
    *((void *)v46 + 2) = v71 + 1;
    uint64_t v72 = &v46[16 * v71];
    *((void *)v72 + 4) = v69;
    *((void *)v72 + 5) = v68;
  }
  uint64_t v73 = v95;
  if (v95)
  {
    uint64_t v74 = v94;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v46 = sub_10008892C(0, *((void *)v46 + 2) + 1, 1, v46);
    }
    unint64_t v76 = *((void *)v46 + 2);
    unint64_t v75 = *((void *)v46 + 3);
    if (v76 >= v75 >> 1) {
      uint64_t v46 = sub_10008892C((char *)(v75 > 1), v76 + 1, 1, v46);
    }
    *((void *)v46 + 2) = v76 + 1;
    uint64_t v77 = &v46[16 * v76];
    *((void *)v77 + 4) = v74;
    *((void *)v77 + 5) = v73;
  }
  sub_10000A38C(&qword_10035F850);
  swift_arrayDestroy();
  uint64_t v78 = sub_100038508((uint64_t)v46);
  swift_bridgeObjectRelease();
  return v78;
}

BOOL sub_10024E624(BOOL result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    sub_1000160DC();
    id v2 = v1;
    if (static NSObject.== infix(_:_:)())
    {

      return 1;
    }
    else
    {
      uint64_t v3 = sub_10024DF10();
      uint64_t v4 = sub_10024DF10();
      uint64_t v5 = sub_1001C8154(v4, v3);
      swift_bridgeObjectRelease();

      uint64_t v6 = *(void *)(v5 + 16);
      swift_release();
      return v6 != 0;
    }
  }
  return result;
}

uint64_t sub_10024E6C8()
{
  return sub_10024DF10();
}

void *sub_10024E6EC(void *result)
{
  if (result)
  {
    id v2 = *v1;
    id v3 = result;
    id v4 = v2;
    uint64_t v5 = sub_10024DF10();
    uint64_t v6 = sub_1001A7C6C();
    uint64_t v7 = sub_1001C8154(v6, v5);
    swift_bridgeObjectRelease();

    uint64_t v8 = *(void *)(v7 + 16);
    swift_release();
    return (void *)(v8 != 0);
  }
  return result;
}

uint64_t sub_10024E774(uint64_t a1)
{
  sub_10000D728(a1, (uint64_t)v5, (uint64_t *)&unk_10036C0A0);
  uint64_t v1 = v6;
  if (v6)
  {
    uint64_t v2 = v7;
    sub_10000D6E4(v5, v6);
    uint64_t v3 = sub_10024DF10();
    LOBYTE(v1) = sub_100148A48(v3, v1, *(void *)(v2 + 8));
    swift_bridgeObjectRelease();
    sub_10000CC5C((uint64_t)v5);
  }
  else
  {
    sub_10000D78C((uint64_t)v5, (uint64_t *)&unk_10036C0A0);
  }
  return v1 & 1;
}

uint64_t sub_10024E81C(uint64_t a1)
{
  uint64_t v2 = *v1;
  sub_10000D728(a1, (uint64_t)&v7, &qword_10035B618);
  if (v8)
  {
    sub_10000D7E8(&v7, (uint64_t)v9);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    sub_10000D6E4(v9, v10);
    char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 + 8) + 40))(v2, v3);
    sub_10000CC5C((uint64_t)v9);
  }
  else
  {
    sub_10000D78C((uint64_t)&v7, &qword_10035B618);
    char v5 = 0;
  }
  return v5 & 1;
}

BOOL sub_10024E8CC(BOOL a1)
{
  return sub_10024E624(a1);
}

BOOL sub_10024E8F4()
{
  uint64_t v0 = sub_1000D215C();
  uint64_t v1 = sub_10024DF10();
  uint64_t v2 = sub_1001C8154(v1, v0);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 16);
  swift_release();
  return v3 != 0;
}

uint64_t sub_10024E95C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10024E9FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(a1);
  char v5 = (char *)v11 - v4;
  v11[0] = 0;
  v11[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  v6._countAndFlagsBits = 0x64616F6C7961703CLL;
  v6._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + *(void *)(*(void *)v1 + 88), v2);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v7._object = (void *)0x80000001002C6E60;
  v7._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v7);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 62;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return v11[0];
}

uint64_t sub_10024EBC4()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10024EC50()
{
  sub_10024EBC4();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Handoff3RemoteLeaderSessionRequest.Request()
{
  return sub_10000F2E4();
}

uint64_t sub_10024ECC0(uint64_t a1)
{
  return sub_10024E9FC(a1);
}

uint64_t sub_10024ECE4()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = 0;
  unint64_t v13 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  uint64_t v12 = 0x6E6F69737365733CLL;
  unint64_t v13 = 0xEB000000003D4449;
  uint64_t v5 = *(void *)(v0 + 16);
  Swift::String v6 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x7473656D6974202CLL;
  v8._object = (void *)0xEC0000003D706D61;
  String.append(_:)(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtCO17proximitycontrold34Handoff3RemoteLeaderSessionRequest7Started_timestamp, v1);
  sub_10014ACD4();
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v10._countAndFlagsBits = 62;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return v12;
}

uint64_t sub_10024EE90()
{
  return sub_10024F26C(&OBJC_IVAR____TtCO17proximitycontrold34Handoff3RemoteLeaderSessionRequest7Started_timestamp);
}

uint64_t sub_10024EE9C()
{
  return type metadata accessor for Handoff3RemoteLeaderSessionRequest.Started(0);
}

uint64_t type metadata accessor for Handoff3RemoteLeaderSessionRequest.Started(uint64_t a1)
{
  return sub_100014F7C(a1, qword_100370850);
}

uint64_t sub_10024EEC4()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10024EF60()
{
  return sub_10024ECE4();
}

uint64_t sub_10024EF84()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Handoff3RemoteLeaderSessionRequest.Ended()
{
  return self;
}

uint64_t sub_10024EFE0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void **)(*(void *)v0 + 24);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x6E6F69737365733CLL;
}

uint64_t sub_10024F068()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  Swift::String v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = 0;
  unint64_t v16 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  v5._countAndFlagsBits = 0x6E6F69737365733CLL;
  v5._object = (void *)0xEB000000003D4449;
  String.append(_:)(v5);
  uint64_t v6 = *(void *)(v0 + 16);
  Swift::String v7 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x61745364656C202CLL;
  v9._object = (void *)0xEB000000003D6574;
  String.append(_:)(v9);
  v14[15] = *(unsigned char *)(v0 + 32);
  _print_unlocked<A, B>(_:_:)();
  v10._countAndFlagsBits = 0x7473656D6974202CLL;
  v10._object = (void *)0xEC0000003D706D61;
  String.append(_:)(v10);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtCO17proximitycontrold34Handoff3RemoteLeaderSessionRequest6Update_timestamp, v1);
  sub_10014ACD4();
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  v12._countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return v15;
}

uint64_t sub_10024F260()
{
  return sub_10024F26C(&OBJC_IVAR____TtCO17proximitycontrold34Handoff3RemoteLeaderSessionRequest6Update_timestamp);
}

uint64_t sub_10024F26C(void *a1)
{
  swift_bridgeObjectRelease();
  uint64_t v3 = v1 + *a1;
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_10024F314()
{
  return type metadata accessor for Handoff3RemoteLeaderSessionRequest.Update(0);
}

uint64_t type metadata accessor for Handoff3RemoteLeaderSessionRequest.Update(uint64_t a1)
{
  return sub_100014F7C(a1, qword_100370A00);
}

uint64_t sub_10024F33C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10024F3E0()
{
  return sub_10024F068();
}

unint64_t sub_10024F404()
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  char v3 = *(unsigned char *)(v0 + 32);
  sub_10017AE64(v1, (uint64_t)v2, v3);
  v4._countAndFlagsBits = sub_100202A24(v1, v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  sub_1001485C4(v1, (uint64_t)v2, v3);
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0xD000000000000011;
}

uint64_t sub_10024F4D4()
{
  sub_1001485C4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Handoff3RemoteLeaderSessionRequest.Handoff2Output()
{
  return self;
}

unint64_t sub_10024F534()
{
  return sub_10024F404();
}

uint64_t End.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (int *)type metadata accessor for End();
  uint64_t v7 = v6[15];
  swift_getFunctionTypeMetadata1();
  *(void *)(a3 + v7) = static Array._allocateUninitialized(_:)();
  uint64_t v8 = v6[16];
  swift_getFunctionTypeMetadata1();
  *(void *)(a3 + v8) = static Array._allocateUninitialized(_:)();
  uint64_t v9 = v6[17];
  type metadata accessor for Array();
  swift_getFunctionTypeMetadata1();
  *(void *)(a3 + v9) = static Array._allocateUninitialized(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t type metadata accessor for End()
{
  return swift_getGenericMetadata();
}

uint64_t End.actions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t End.actions.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 60);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*End.actions.modify())()
{
  return nullsub_1;
}

uint64_t sub_10024F708()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10024F7A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    Swift::String v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    Swift::String v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *Swift::String v10 = *v11;
    Swift::String v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *Swift::String v12 = *v13;
    *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10024F8E4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10024F96C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  Swift::String v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10024FA1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  void *v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Swift::String v10 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *Swift::String v10 = *(void *)v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10024FAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  Swift::String v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_10024FB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  swift_bridgeObjectRelease();
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  Swift::String v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10024FC38(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10024FD94);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_10024FDA8(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x10024FFA0);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t *sub_10024FFC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    *(void *)uint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
  }
  return a1;
}

uint64_t sub_1002500A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_100250108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t sub_100250194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  return a1;
}

uint64_t sub_100250220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t sub_1002502AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t sub_100250338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10025034C);
}

uint64_t sub_10025034C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 > 2) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_10025040C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100250420);
}

uint64_t sub_100250420(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  }
  return result;
}

uint64_t type metadata accessor for RemoteFollowerMessage()
{
  uint64_t result = qword_100370CF8;
  if (!qword_100370CF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10025052C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1002505C0(void *a1, uint64_t a2, int a3)
{
  int v26 = a3;
  uint64_t v25 = a2;
  uint64_t v4 = sub_10000A38C(&qword_100370DC0);
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  __chkstk_darwin(v4);
  uint64_t v22 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_100370DC8);
  uint64_t v21 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_100370DD0);
  uint64_t v20 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_100370DD8);
  uint64_t v27 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  int v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100252058();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (!(_BYTE)v26)
  {
    char v29 = 0;
    sub_1002521FC();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v9);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v14, v12);
  }
  if (v26 == 1)
  {
    char v35 = 2;
    sub_1002520AC();
    int v15 = v22;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v16 = BYTE1(v25);
    char v34 = v25;
    char v33 = 0;
    sub_1001CBE84();
    uint64_t v17 = v24;
    uint64_t v18 = v28;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (!v18)
    {
      char v32 = v16;
      char v31 = 1;
      sub_100252250();
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v14, v12);
  }
  char v30 = 1;
  sub_1002521A8();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v14, v12);
}

uint64_t sub_100250A10()
{
  uint64_t v1 = 0x6465646E65;
  if (*v0 != 1) {
    uint64_t v1 = 0x74757074756FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x64657472617473;
  }
}

uint64_t sub_100250A64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10025164C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100250A8C(uint64_t a1)
{
  unint64_t v2 = sub_100252058();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100250AC8(uint64_t a1)
{
  unint64_t v2 = sub_100252058();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100250B04(uint64_t a1)
{
  unint64_t v2 = sub_1002521A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100250B40(uint64_t a1)
{
  unint64_t v2 = sub_1002521A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100250B7C()
{
  if (*v0) {
    return 0xD000000000000011;
  }
  else {
    return 12383;
  }
}

uint64_t sub_100250BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100251794(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100250BD8(uint64_t a1)
{
  unint64_t v2 = sub_1002520AC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100250C14(uint64_t a1)
{
  unint64_t v2 = sub_1002520AC();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100250C50()
{
  return 0xD000000000000010;
}

uint64_t sub_100250C6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10025186C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100250C98(uint64_t a1)
{
  unint64_t v2 = sub_1002521FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100250CD4(uint64_t a1)
{
  unint64_t v2 = sub_1002521FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100250D10@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1002518F4(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_100250D40(void *a1)
{
  return sub_1002505C0(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

uint64_t sub_100250D60(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000A38C(&qword_100370D48);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D6E4(a1, a1[3]);
  sub_100251364();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  type metadata accessor for UUID();
  sub_1001B8344(&qword_100363E00);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (uint64_t *)(v3 + *(int *)(type metadata accessor for RemoteFollowerMessage() + 20));
    uint64_t v10 = *v9;
    LOBYTE(v9) = *((unsigned char *)v9 + 8);
    uint64_t v13 = v10;
    char v14 = (char)v9;
    v12[15] = 1;
    sub_1002514CC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100250F24@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000A38C(&qword_100370D30);
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RemoteFollowerMessage();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100251364();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000CC5C((uint64_t)a1);
  }
  uint64_t v11 = v10;
  uint64_t v12 = v22;
  char v29 = 0;
  sub_1001B8344(&qword_100363E18);
  uint64_t v13 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v14 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v20 = (uint64_t)v11;
  v14(v11, v5, v13);
  char v28 = 1;
  sub_1002513B8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v25);
  char v15 = v27;
  uint64_t v17 = v20;
  uint64_t v16 = v21;
  uint64_t v18 = v20 + *(int *)(v8 + 20);
  *(void *)uint64_t v18 = v26;
  *(unsigned char *)(v18 + 8) = v15;
  sub_10025140C(v17, v16);
  sub_10000CC5C((uint64_t)a1);
  return sub_100251470(v17);
}

uint64_t sub_10025126C()
{
  if (*v0) {
    return 1701869940;
  }
  else {
    return 25705;
  }
}

uint64_t sub_100251294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100251F8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002512BC(uint64_t a1)
{
  unint64_t v2 = sub_100251364();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002512F8(uint64_t a1)
{
  unint64_t v2 = sub_100251364();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100251334@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100250F24(a1, a2);
}

uint64_t sub_10025134C(void *a1)
{
  return sub_100250D60(a1);
}

unint64_t sub_100251364()
{
  unint64_t result = qword_100370D38;
  if (!qword_100370D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370D38);
  }
  return result;
}

unint64_t sub_1002513B8()
{
  unint64_t result = qword_100370D40;
  if (!qword_100370D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370D40);
  }
  return result;
}

uint64_t sub_10025140C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RemoteFollowerMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100251470(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RemoteFollowerMessage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1002514CC()
{
  unint64_t result = qword_100370D50;
  if (!qword_100370D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370D50);
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteFollowerMessage.CodingKeys()
{
  return &type metadata for RemoteFollowerMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for RemoteFollowerMessage.MessageType()
{
  return &type metadata for RemoteFollowerMessage.MessageType;
}

unint64_t sub_100251548()
{
  unint64_t result = qword_100370D58;
  if (!qword_100370D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370D58);
  }
  return result;
}

unint64_t sub_1002515A0()
{
  unint64_t result = qword_100370D60;
  if (!qword_100370D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370D60);
  }
  return result;
}

unint64_t sub_1002515F8()
{
  unint64_t result = qword_100370D68;
  if (!qword_100370D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370D68);
  }
  return result;
}

uint64_t sub_10025164C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64657472617473 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465646E65 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74757074756FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100251794(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001002C6E80)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10025186C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001002C0D10)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_1002518F4(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_100370D70);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  uint64_t v35 = v3;
  __chkstk_darwin(v2);
  uint64_t v36 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10000A38C(&qword_100370D78);
  uint64_t v31 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  char v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_100370D80);
  uint64_t v32 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_100370D88);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  uint64_t v37 = a1;
  unint64_t v15 = (unint64_t)sub_10000D6E4(a1, v14);
  sub_100252058();
  uint64_t v16 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    goto LABEL_9;
  }
  uint64_t v17 = v7;
  uint64_t v18 = v36;
  uint64_t v38 = v11;
  uint64_t v19 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v19 + 16) != 1)
  {
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v21;
    sub_10000A38C(&qword_10035FAC0);
    *uint64_t v22 = &type metadata for RemoteFollowerMessage.MessageType;
    unint64_t v15 = (unint64_t)v13;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, enum case for DecodingError.typeMismatch(_:), v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v10);
LABEL_9:
    sub_10000CC5C((uint64_t)v37);
    return v15;
  }
  if (*(unsigned char *)(v19 + 32))
  {
    if (*(unsigned char *)(v19 + 32) == 1)
    {
      char v40 = 1;
      sub_1002521A8();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v33);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v10);
      unint64_t v15 = 0;
    }
    else
    {
      char v45 = 2;
      sub_1002520AC();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v43 = 0;
      sub_100252100();
      uint64_t v26 = v34;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      char v27 = v18;
      uint64_t v28 = v44;
      char v41 = 1;
      sub_100252154();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      uint64_t v29 = v38;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v27, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v10);
      unint64_t v15 = v28 | ((unint64_t)v42 << 8);
    }
    goto LABEL_9;
  }
  char v39 = 0;
  sub_1002521FC();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v24 = v23;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v17);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v10);
  unint64_t v15 = v24;
  sub_10000CC5C((uint64_t)v37);
  return v15;
}

uint64_t sub_100251F8C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_100252058()
{
  unint64_t result = qword_100370D90;
  if (!qword_100370D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370D90);
  }
  return result;
}

unint64_t sub_1002520AC()
{
  unint64_t result = qword_100370D98;
  if (!qword_100370D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370D98);
  }
  return result;
}

unint64_t sub_100252100()
{
  unint64_t result = qword_100370DA0;
  if (!qword_100370DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370DA0);
  }
  return result;
}

unint64_t sub_100252154()
{
  unint64_t result = qword_100370DA8;
  if (!qword_100370DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370DA8);
  }
  return result;
}

unint64_t sub_1002521A8()
{
  unint64_t result = qword_100370DB0;
  if (!qword_100370DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370DB0);
  }
  return result;
}

unint64_t sub_1002521FC()
{
  unint64_t result = qword_100370DB8;
  if (!qword_100370DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370DB8);
  }
  return result;
}

unint64_t sub_100252250()
{
  unint64_t result = qword_100370DE0;
  if (!qword_100370DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370DE0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RemoteFollowerMessage.MessageType.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100252370);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteFollowerMessage.MessageType.CodingKeys()
{
  return &type metadata for RemoteFollowerMessage.MessageType.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for RemoteFollowerMessage.MessageType.StartedCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100252444);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteFollowerMessage.MessageType.StartedCodingKeys()
{
  return &type metadata for RemoteFollowerMessage.MessageType.StartedCodingKeys;
}

ValueMetadata *type metadata accessor for RemoteFollowerMessage.MessageType.EndedCodingKeys()
{
  return &type metadata for RemoteFollowerMessage.MessageType.EndedCodingKeys;
}

unsigned char *_s17proximitycontrold21RemoteFollowerMessageV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100252558);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteFollowerMessage.MessageType.OutputCodingKeys()
{
  return &type metadata for RemoteFollowerMessage.MessageType.OutputCodingKeys;
}

unint64_t sub_100252594()
{
  unint64_t result = qword_100370DE8;
  if (!qword_100370DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370DE8);
  }
  return result;
}

unint64_t sub_1002525EC()
{
  unint64_t result = qword_100370DF0;
  if (!qword_100370DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370DF0);
  }
  return result;
}

unint64_t sub_100252644()
{
  unint64_t result = qword_100370DF8;
  if (!qword_100370DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370DF8);
  }
  return result;
}

unint64_t sub_10025269C()
{
  unint64_t result = qword_100370E00;
  if (!qword_100370E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370E00);
  }
  return result;
}

unint64_t sub_1002526F4()
{
  unint64_t result = qword_100370E08;
  if (!qword_100370E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370E08);
  }
  return result;
}

unint64_t sub_10025274C()
{
  unint64_t result = qword_100370E10;
  if (!qword_100370E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370E10);
  }
  return result;
}

unint64_t sub_1002527A4()
{
  unint64_t result = qword_100370E18;
  if (!qword_100370E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370E18);
  }
  return result;
}

unint64_t sub_1002527FC()
{
  unint64_t result = qword_100370E20;
  if (!qword_100370E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370E20);
  }
  return result;
}

unint64_t sub_100252854()
{
  unint64_t result = qword_100370E28;
  if (!qword_100370E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370E28);
  }
  return result;
}

unint64_t sub_1002528AC()
{
  unint64_t result = qword_100370E30;
  if (!qword_100370E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370E30);
  }
  return result;
}

unint64_t sub_100252904()
{
  unint64_t result = qword_100370E38;
  if (!qword_100370E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370E38);
  }
  return result;
}

uint64_t sub_100252958()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100252A40(void *a1)
{
  uint64_t v26 = sub_10000A38C(&qword_100370F20);
  uint64_t v25 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  unint64_t v24 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000A38C(&qword_100370F28);
  uint64_t v22 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unsigned int v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000A38C(&qword_100370F30);
  uint64_t v20 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  unsigned int v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_100370F38);
  uint64_t v19 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_100370F40);
  uint64_t v27 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_100254728();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100045BD0(v40, (uint64_t)&v32);
  switch((void)v33)
  {
    case 2:
      LOBYTE(v28) = 2;
      sub_1002547D0();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v13 = *(void (**)(char *, void))(v22 + 8);
      uint64_t v14 = v4;
      unint64_t v15 = &v42;
LABEL_7:
      v13(v14, *(v15 - 32));
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v12, v10);
    case 1:
      LOBYTE(v28) = 1;
      sub_100254824();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v13 = *(void (**)(char *, void))(v20 + 8);
      uint64_t v14 = v6;
      unint64_t v15 = &v41;
      goto LABEL_7;
    case 0:
      LOBYTE(v28) = 0;
      sub_100254878();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v7);
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v12, v10);
  }
  long long v36 = v32;
  long long v37 = v33;
  long long v38 = v34;
  uint64_t v39 = v35;
  LOBYTE(v28) = 3;
  sub_10025477C();
  uint64_t v17 = v24;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  long long v28 = v36;
  long long v29 = v37;
  long long v30 = v38;
  uint64_t v31 = v39;
  sub_1000D9C6C();
  uint64_t v18 = v26;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v12, v10);
}

uint64_t sub_100252F6C()
{
  uint64_t result = 0x6574736575716572;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6572676F72506E69;
      break;
    case 2:
      uint64_t result = 0x6564656563637573;
      break;
    case 3:
      uint64_t result = 0x64656C696166;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100252FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100253DE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100253024(uint64_t a1)
{
  unint64_t v2 = sub_100254728();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100253060(uint64_t a1)
{
  unint64_t v2 = sub_100254728();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10025309C(uint64_t a1)
{
  unint64_t v2 = sub_10025477C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002530D8(uint64_t a1)
{
  unint64_t v2 = sub_10025477C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100253114(uint64_t a1)
{
  unint64_t v2 = sub_100254824();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100253150(uint64_t a1)
{
  unint64_t v2 = sub_100254824();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10025318C(uint64_t a1)
{
  unint64_t v2 = sub_100254878();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002531C8(uint64_t a1)
{
  unint64_t v2 = sub_100254878();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100253204(uint64_t a1)
{
  unint64_t v2 = sub_1002547D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100253240(uint64_t a1)
{
  unint64_t v2 = sub_1002547D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10025327C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100253FB8(a1, v5);
  if (!v2) {
    return sub_100045BD0((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_1002532C4(void *a1)
{
  sub_100045BD0(v1, (uint64_t)v4);
  return sub_100252A40(a1);
}

BOOL sub_100253314(uint64_t a1, uint64_t a2)
{
  sub_100045BD0(a1, (uint64_t)v4);
  sub_100045BD0(a2, (uint64_t)v5);
  return sub_100253C58((uint64_t)v4, (uint64_t)v5);
}

id sub_100253360@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = *(void *)a1;
  a2[1] = v2;
  return sub_100071130(v3);
}

uint64_t sub_100253370()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Handoff3Transfer();
  sub_10016ADD8(0x74696E696544, (void *)0xE600000000000000, 0, v2, (uint64_t)&off_100336550);
  uint64_t v3 = v0 + qword_1003ACB98;
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10025380C(*(void *)(v1 + qword_1003ACBD0), *(void *)(v1 + qword_1003ACBD0 + 8), *(void **)(v1 + qword_1003ACBD0 + 16), *(void **)(v1 + qword_1003ACBD0 + 24), *(unsigned char *)(v1 + qword_1003ACBD0 + 32));
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100253498()
{
  sub_100253370();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Handoff3Transfer()
{
  return sub_10000F2E4();
}

uint64_t sub_100253508()
{
  return 45;
}

uint64_t sub_1002535F8()
{
  uint64_t v1 = *v0;
  *(void *)&v15[0] = 0;
  *((void *)&v15[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  long long v14 = v15[0];
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  *(void *)&v15[0] = v0;
  uint64_t v3 = *(void *)(v1 + 80);
  type metadata accessor for Handoff3Transfer();
  swift_getWitnessTable();
  sub_100116D10();
  sub_100089A9C(8);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x3D65636976656420;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  *(void *)&v15[0] = *(uint64_t *)((char *)v0 + qword_1003ACBB8);
  v6._countAndFlagsBits = sub_100116CFC(v3, (uint64_t)&off_1003315F8);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x3D657461747320;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  uint64_t v8 = *(uint64_t *)((char *)v0 + qword_100370E40);
  uint64_t v9 = *(void *)(v8 + 72);
  long long v10 = *(_OWORD *)(v8 + 40);
  v15[0] = *(_OWORD *)(v8 + 24);
  v15[1] = v10;
  void v15[2] = *(_OWORD *)(v8 + 56);
  uint64_t v16 = v9;
  sub_100045BD0((uint64_t)v15, (uint64_t)v13);
  _print_unlocked<A, B>(_:_:)();
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return v14;
}

void destroy for TransferType(uint64_t a1)
{
}

void sub_10025380C(uint64_t a1, uint64_t a2, void *a3, void *a4, char a5)
{
  swift_bridgeObjectRelease();
  if (a5)
  {
  }
}

uint64_t initializeWithCopy for TransferType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  Swift::String v5 = *(void **)(a2 + 16);
  Swift::String v6 = *(void **)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_10021FBC4(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for TransferType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  Swift::String v5 = *(void **)(a2 + 16);
  Swift::String v6 = *(void **)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_10021FBC4(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  long long v10 = *(void **)(a1 + 16);
  Swift::String v11 = *(void **)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  sub_10025380C(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for TransferType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  Swift::String v5 = *(void **)(a1 + 16);
  char v7 = *(void **)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  sub_10025380C(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransferType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TransferType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100253A24(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TransferType()
{
  return &type metadata for TransferType;
}

uint64_t getEnumTagSinglePayload for TransferState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TransferState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransferState()
{
  return &type metadata for TransferState;
}

uint64_t sub_100253B08()
{
  return sub_1002535F8();
}

uint64_t sub_100253B2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + qword_1003ACB98;
  uint64_t v4 = type metadata accessor for UUID();
  unsigned int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100253BA4()
{
  return sub_100253508();
}

uint64_t sub_100253BC8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1000B4664(a1, WitnessTable);
}

uint64_t sub_100253C1C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

BOOL sub_100253C58(uint64_t a1, uint64_t a2)
{
  sub_100045BD0(a1, (uint64_t)v21);
  uint64_t v3 = v22;
  if (v22 == 2)
  {
    sub_100045BD0(a2, (uint64_t)v15);
    return v16 == 2;
  }
  if (v22 == 1)
  {
    sub_100045BD0(a2, (uint64_t)v15);
    return v16 == 1;
  }
  if (v22)
  {
    uint64_t v5 = v21[0];
    uint64_t v6 = v21[1];
    uint64_t v7 = v23;
    uint64_t v8 = v24;
    uint64_t v10 = v25;
    uint64_t v9 = v26;
    sub_100045BD0(a2, (uint64_t)v15);
    if (v16 < 3 || v5 != v15[0]) {
      return 0;
    }
    uint64_t v11 = v17;
    uint64_t v12 = v18;
    uint64_t v14 = v19;
    uint64_t v13 = v20;
    if ((v6 != v15[1] || v3 != v16) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return 0;
    }
    if ((v7 != v11 || v8 != v12) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return 0;
    }
    if (v9) {
      return v13 && (v10 == v14 && v9 == v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
    }
    return !v13;
  }
  sub_100045BD0(a2, (uint64_t)v15);
  return !v16;
}

uint64_t sub_100253DE0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574736575716572 && a2 == 0xE900000000000064;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6572676F72506E69 && a2 == 0xEA00000000007373 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6564656563637573 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64656C696166 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100253FB8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v3 = sub_10000A38C(&qword_100370ED0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  uint64_t v50 = v4;
  __chkstk_darwin(v3);
  uint64_t v54 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000A38C(&qword_100370ED8);
  uint64_t v45 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  unint64_t v53 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000A38C(&qword_100370EE0);
  uint64_t v52 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_100370EE8);
  uint64_t v46 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000A38C(&qword_100370EF0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1[3];
  unint64_t v55 = a1;
  sub_10000D6E4(a1, v16);
  sub_100254728();
  uint64_t v17 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17) {
    return sub_10000CC5C((uint64_t)v55);
  }
  uint64_t v18 = v11;
  uint64_t v43 = v9;
  uint64_t v44 = 0;
  uint64_t v19 = v8;
  uint64_t v21 = v52;
  uint64_t v20 = v53;
  uint64_t v22 = v54;
  uint64_t v63 = v13;
  uint64_t v23 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v23 + 16) != 1)
  {
    uint64_t v32 = type metadata accessor for DecodingError();
    swift_allocError();
    long long v34 = v33;
    sub_10000A38C(&qword_10035FAC0);
    void *v34 = &type metadata for TransferState;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, enum case for DecodingError.typeMismatch(_:), v32);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v15, v12);
    return sub_10000CC5C((uint64_t)v55);
  }
  switch(*(unsigned char *)(v23 + 32))
  {
    case 1:
      LOBYTE(v56) = 1;
      sub_100254824();
      uint64_t v35 = v44;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v25 = v35;
      if (v35) {
        goto LABEL_12;
      }
      uint64_t v44 = 0;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v48);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v15, v12);
      uint64_t v26 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v27 = 1;
      goto LABEL_15;
    case 2:
      LOBYTE(v56) = 2;
      sub_1002547D0();
      uint64_t v36 = v44;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v25 = v36;
      if (v36) {
        goto LABEL_12;
      }
      uint64_t v44 = 0;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v20, v47);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v15, v12);
      uint64_t v26 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v27 = 2;
      goto LABEL_15;
    case 3:
      LOBYTE(v56) = 3;
      sub_10025477C();
      uint64_t v37 = v44;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v37) {
        goto LABEL_12;
      }
      sub_1000D9A74();
      uint64_t v39 = v49;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v40 = v63;
      uint64_t v44 = 0;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v22, v39);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v12);
      uint64_t v26 = v56;
      uint64_t v25 = v57;
      uint64_t v27 = v58;
      uint64_t v28 = v59;
      uint64_t v29 = v60;
      uint64_t v30 = v61;
      uint64_t v31 = v62;
      goto LABEL_15;
    default:
      LOBYTE(v56) = 0;
      sub_100254878();
      uint64_t v24 = v44;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v25 = v24;
      if (v24)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v63 + 8))(v15, v12);
        return sub_10000CC5C((uint64_t)v55);
      }
      uint64_t v44 = 0;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v18, v43);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v15, v12);
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
LABEL_15:
      uint64_t result = sub_10000CC5C((uint64_t)v55);
      uint64_t v41 = v51;
      *uint64_t v51 = v26;
      v41[1] = v25;
      _OWORD v41[2] = v27;
      v41[3] = v28;
      v41[4] = v29;
      v41[5] = v30;
      v41[6] = v31;
      break;
  }
  return result;
}

unint64_t sub_100254728()
{
  unint64_t result = qword_100370EF8;
  if (!qword_100370EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370EF8);
  }
  return result;
}

unint64_t sub_10025477C()
{
  unint64_t result = qword_100370F00;
  if (!qword_100370F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370F00);
  }
  return result;
}

unint64_t sub_1002547D0()
{
  unint64_t result = qword_100370F08;
  if (!qword_100370F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370F08);
  }
  return result;
}

unint64_t sub_100254824()
{
  unint64_t result = qword_100370F10;
  if (!qword_100370F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370F10);
  }
  return result;
}

unint64_t sub_100254878()
{
  unint64_t result = qword_100370F18;
  if (!qword_100370F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370F18);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TransferState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100254998);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransferState.CodingKeys()
{
  return &type metadata for TransferState.CodingKeys;
}

ValueMetadata *type metadata accessor for TransferState.RequestedCodingKeys()
{
  return &type metadata for TransferState.RequestedCodingKeys;
}

ValueMetadata *type metadata accessor for TransferState.InProgressCodingKeys()
{
  return &type metadata for TransferState.InProgressCodingKeys;
}

ValueMetadata *type metadata accessor for TransferState.SucceededCodingKeys()
{
  return &type metadata for TransferState.SucceededCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for TransferState.FailedCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100254A9CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TransferState.FailedCodingKeys()
{
  return &type metadata for TransferState.FailedCodingKeys;
}

unint64_t sub_100254AD8()
{
  unint64_t result = qword_100370F48;
  if (!qword_100370F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370F48);
  }
  return result;
}

unint64_t sub_100254B30()
{
  unint64_t result = qword_100370F50;
  if (!qword_100370F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370F50);
  }
  return result;
}

unint64_t sub_100254B88()
{
  unint64_t result = qword_100370F58;
  if (!qword_100370F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370F58);
  }
  return result;
}

unint64_t sub_100254BE0()
{
  unint64_t result = qword_100370F60;
  if (!qword_100370F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370F60);
  }
  return result;
}

unint64_t sub_100254C38()
{
  unint64_t result = qword_100370F68;
  if (!qword_100370F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370F68);
  }
  return result;
}

unint64_t sub_100254C90()
{
  unint64_t result = qword_100370F70;
  if (!qword_100370F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370F70);
  }
  return result;
}

unint64_t sub_100254CE8()
{
  unint64_t result = qword_100370F78;
  if (!qword_100370F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370F78);
  }
  return result;
}

unint64_t sub_100254D40()
{
  unint64_t result = qword_100370F80;
  if (!qword_100370F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370F80);
  }
  return result;
}

unint64_t sub_100254D98()
{
  unint64_t result = qword_100370F88;
  if (!qword_100370F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370F88);
  }
  return result;
}

unint64_t sub_100254DF0()
{
  unint64_t result = qword_100370F90;
  if (!qword_100370F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370F90);
  }
  return result;
}

unint64_t sub_100254E48()
{
  unint64_t result = qword_100370F98;
  if (!qword_100370F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370F98);
  }
  return result;
}

unint64_t sub_100254EA0()
{
  unint64_t result = qword_100370FA0;
  if (!qword_100370FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100370FA0);
  }
  return result;
}

uint64_t destroy for SessionStartReason(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 6) {
    unsigned int v1 = *(_DWORD *)result + 6;
  }
  if (v1 != 5)
  {
    if (v1 != 2) {
      return result;
    }
    result += 8;
  }
  return sub_10000CC5C(result);
}

uint64_t initializeWithCopy for SessionStartReason(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 6) {
    unsigned int v3 = *(_DWORD *)a2 + 6;
  }
  switch(v3)
  {
    case 0u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(unsigned char *)(a1 + 40) = 0;
      return a1;
    case 1u:
      *(void *)a1 = *(void *)a2;
      char v5 = 1;
      goto LABEL_11;
    case 2u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v6 = *(void *)(a2 + 32);
      *(void *)(a1 + 32) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 8, a2 + 8);
      char v5 = 2;
      goto LABEL_11;
    case 3u:
      *(void *)a1 = *(void *)a2;
      char v5 = 3;
      goto LABEL_11;
    case 4u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      char v5 = 4;
      goto LABEL_11;
    case 5u:
      uint64_t v7 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v7;
      (**(void (***)(uint64_t))(v7 - 8))(a1);
      char v5 = 5;
LABEL_11:
      *(unsigned char *)(a1 + 40) = v5;
      break;
    default:
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for SessionStartReason(uint64_t a1, long long *a2)
{
  uint64_t v2 = a1;
  if ((long long *)a1 == a2) {
    return v2;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
  if (v4 >= 6) {
    unsigned int v4 = *(_DWORD *)a1 + 6;
  }
  if (v4 == 5) {
    goto LABEL_7;
  }
  if (v4 == 2)
  {
    a1 += 8;
LABEL_7:
    sub_10000CC5C(a1);
  }
  unsigned int v5 = *((unsigned __int8 *)a2 + 40);
  if (v5 >= 6) {
    unsigned int v5 = *(_DWORD *)a2 + 6;
  }
  switch(v5)
  {
    case 0u:
      *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
      *(unsigned char *)(v2 + 40) = 0;
      break;
    case 1u:
      *(void *)uint64_t v2 = *(void *)a2;
      *(unsigned char *)(v2 + 40) = 1;
      break;
    case 2u:
      *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
      uint64_t v6 = *((void *)a2 + 4);
      *(void *)(v2 + 32) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(v2 + 8, (uint64_t)a2 + 8);
      *(unsigned char *)(v2 + 40) = 2;
      break;
    case 3u:
      *(void *)uint64_t v2 = *(void *)a2;
      *(unsigned char *)(v2 + 40) = 3;
      break;
    case 4u:
      *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
      *(unsigned char *)(v2 + 40) = 4;
      break;
    case 5u:
      uint64_t v7 = *((void *)a2 + 3);
      *(void *)(v2 + 24) = v7;
      (**(void (***)(uint64_t, long long *))(v7 - 8))(v2, a2);
      *(unsigned char *)(v2 + 40) = 5;
      break;
    default:
      long long v8 = *a2;
      long long v9 = a2[1];
      *(_OWORD *)(v2 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)uint64_t v2 = v8;
      *(_OWORD *)(v2 + 16) = v9;
      break;
  }
  return v2;
}

uint64_t assignWithTake for SessionStartReason(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 == a2) {
    return v2;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
  if (v4 >= 6) {
    unsigned int v4 = *(_DWORD *)a1 + 6;
  }
  if (v4 == 5) {
    goto LABEL_7;
  }
  if (v4 == 2)
  {
    a1 += 8;
LABEL_7:
    sub_10000CC5C(a1);
  }
  unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
  if (v5 >= 6) {
    unsigned int v5 = *(_DWORD *)a2 + 6;
  }
  switch(v5)
  {
    case 0u:
      *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
      *(unsigned char *)(v2 + 40) = 0;
      break;
    case 1u:
      *(void *)uint64_t v2 = *(void *)a2;
      *(unsigned char *)(v2 + 40) = 1;
      break;
    case 2u:
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
      *(_OWORD *)(v2 + 16) = v6;
      *(void *)(v2 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(v2 + 40) = 2;
      break;
    case 3u:
      *(void *)uint64_t v2 = *(void *)a2;
      *(unsigned char *)(v2 + 40) = 3;
      break;
    case 4u:
      *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
      *(unsigned char *)(v2 + 40) = 4;
      break;
    case 5u:
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
      *(_OWORD *)(v2 + 16) = v7;
      *(unsigned char *)(v2 + 40) = 5;
      break;
    default:
      long long v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
      *(_OWORD *)(v2 + 16) = v8;
      *(_OWORD *)(v2 + 25) = *(_OWORD *)(a2 + 25);
      break;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for SessionStartReason(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 7) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SessionStartReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1002553FC(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 6) {
    return (*(_DWORD *)a1 + 6);
  }
  return result;
}

uint64_t sub_100255418(uint64_t result, unsigned int a2)
{
  if (a2 > 5)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 6;
    LOBYTE(a2) = 6;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SessionStartReason()
{
  return &type metadata for SessionStartReason;
}

uint64_t sub_100255450()
{
  sub_100071454(v0, (uint64_t)v40);
  uint64_t v1 = 0x7472617473;
  switch(v41)
  {
    case 1:
      uint64_t v5 = *(void *)v40;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      *(void *)&long long v36 = 0xD000000000000016;
      *((void *)&v36 + 1) = 0x80000001002C6F50;
      *(void *)&v39[0] = v5;
      uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
      goto LABEL_16;
    case 2:
      uint64_t v8 = v40[0];
      sub_100027B00(&v40[8], v39);
      sub_100027B10((uint64_t)v39, (uint64_t)&v34);
      sub_10000A38C(&qword_100363528);
      if (swift_dynamicCast())
      {
        uint64_t v9 = *((void *)&v37 + 1);
        uint64_t v10 = v38;
        sub_10000D6E4(&v36, *((uint64_t *)&v37 + 1));
        uint64_t v11 = sub_100116CFC(v9, v10);
        uint64_t v13 = v12;
        sub_10000CC5C((uint64_t)&v36);
        sub_100027B10((uint64_t)v39, (uint64_t)&v36);
        if (v13) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v38 = 0;
        long long v36 = 0u;
        long long v37 = 0u;
        sub_1002559C4((uint64_t)&v36);
        sub_100027B10((uint64_t)v39, (uint64_t)&v36);
      }
      uint64_t v34 = 0;
      unint64_t v35 = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)();
      uint64_t v11 = v34;
      uint64_t v13 = (void *)v35;
LABEL_23:
      sub_10000CC5C((uint64_t)&v36);
      *(void *)&long long v36 = 0;
      *((void *)&v36 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      *(void *)&long long v36 = 0xD000000000000017;
      *((void *)&v36 + 1) = 0x80000001002C6F30;
      unint64_t v26 = 0xE400000000000000;
      uint64_t v27 = 1701602409;
      switch(v8)
      {
        case 1:
          unint64_t v26 = 0xE90000000000006ELL;
          uint64_t v27 = 0x6F69746163756465;
          break;
        case 2:
          uint64_t v27 = 1953393000;
          break;
        case 3:
          uint64_t v27 = 1819047270;
          break;
        default:
          break;
      }
      unint64_t v29 = v26;
      String.append(_:)(*(Swift::String *)&v27);
      swift_bridgeObjectRelease();
      v30._countAndFlagsBits = 8236;
      v30._object = (void *)0xE200000000000000;
      String.append(_:)(v30);
      v31._countAndFlagsBits = v11;
      v31._object = v13;
      String.append(_:)(v31);
      goto LABEL_31;
    case 3:
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      *(void *)&long long v36 = 0xD000000000000020;
      *((void *)&v36 + 1) = 0x80000001002C6F00;
      id v14 = (id)BSInterfaceOrientationDescription();
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;

      v18._countAndFlagsBits = v15;
      v18._object = v17;
      String.append(_:)(v18);
      goto LABEL_17;
    case 4:
      int v2 = v40[0];
      *(void *)&long long v36 = 0;
      *((void *)&v36 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      unint64_t v3 = 0xD00000000000001ALL;
      unsigned int v4 = "ubject";
      goto LABEL_9;
    case 5:
      sub_100027B00(v40, v39);
      sub_100027B10((uint64_t)v39, (uint64_t)&v34);
      sub_10000A38C(&qword_100363528);
      if (swift_dynamicCast())
      {
        uint64_t v21 = *((void *)&v37 + 1);
        uint64_t v22 = v38;
        sub_10000D6E4(&v36, *((uint64_t *)&v37 + 1));
        uint64_t v23 = sub_100116CFC(v21, v22);
        uint64_t v25 = v24;
        sub_10000CC5C((uint64_t)&v36);
        sub_100027B10((uint64_t)v39, (uint64_t)&v36);
        if (v25) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v38 = 0;
        long long v36 = 0u;
        long long v37 = 0u;
        sub_1002559C4((uint64_t)&v36);
        sub_100027B10((uint64_t)v39, (uint64_t)&v36);
      }
      uint64_t v34 = 0;
      unint64_t v35 = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)();
      uint64_t v23 = v34;
      uint64_t v25 = (void *)v35;
LABEL_27:
      sub_10000CC5C((uint64_t)&v36);
      *(void *)&long long v36 = 0;
      *((void *)&v36 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      *(void *)&long long v36 = 0xD000000000000016;
      *((void *)&v36 + 1) = 0x80000001002C6EE0;
      v28._countAndFlagsBits = v23;
      v28._object = v25;
      String.append(_:)(v28);
LABEL_31:
      swift_bridgeObjectRelease();
      v32._countAndFlagsBits = 10528;
      v32._object = (void *)0xE200000000000000;
      String.append(_:)(v32);
      uint64_t v1 = v36;
      sub_10000CC5C((uint64_t)v39);
      return v1;
    case 6:
      return v1;
    default:
      int v2 = v40[0];
      *(void *)&long long v36 = 0;
      *((void *)&v36 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      unint64_t v3 = 0xD00000000000001FLL;
      unsigned int v4 = "eChanged( stationary=";
LABEL_9:
      *(void *)&long long v36 = v3;
      *((void *)&v36 + 1) = (unint64_t)v4 | 0x8000000000000000;
      if (v2) {
        uint64_t v6 = 1702195828;
      }
      else {
        uint64_t v6 = 0x65736C6166;
      }
      if (v2) {
        unint64_t v19 = 0xE400000000000000;
      }
      else {
        unint64_t v19 = 0xE500000000000000;
      }
      unint64_t v7 = v19;
LABEL_16:
      String.append(_:)(*(Swift::String *)&v6);
LABEL_17:
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 10528;
      v20._object = (void *)0xE200000000000000;
      String.append(_:)(v20);
      return v36;
  }
}

uint64_t sub_1002559C4(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_100363530);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100255A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10007E2AC(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100255BC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_100255BD4()
{
  id v1 = sub_1001E99C8();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  uint64_t v3 = v0 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_id;
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  sub_100024144(v0 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_delegate);

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_100255CEC()
{
  return type metadata accessor for XPCConnectionManager();
}

uint64_t type metadata accessor for XPCConnectionManager()
{
  uint64_t result = qword_100370FF0;
  if (!qword_100370FF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100255D40()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100255DFC()
{
  *(void *)(v1 + 56) = v0;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_100255E1C, 0, 0);
}

uint64_t sub_100255E1C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  _StringGuts.grow(_:)(35);
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0xE000000000000000;
  v2._object = (void *)0x80000001002C70D0;
  v2._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v2);
  double v4 = *(double *)(v1 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_retryPolicy);
  unint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_retryPolicy + 8);
  uint64_t v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_retryPolicy + 16);
  *(double *)(v0 + 16) = v4;
  *(void *)(v0 + 24) = v3;
  *(unsigned char *)(v0 + 32) = v5;
  _print_unlocked<A, B>(_:_:)();
  id v6 = sub_1001E99C8();
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 ulog:60 message:v7];
  swift_bridgeObjectRelease();

  switch(v5)
  {
    case 1:
      uint64_t v9 = *(void *)(v0 + 56);
      goto LABEL_6;
    case 2:
      uint64_t v9 = *(void *)(v0 + 56);
      unint64_t v12 = *(void *)(v9 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_retries);
      if ((v12 & 0x8000000000000000) == 0 && v12 >= v3) {
        goto LABEL_10;
      }
LABEL_6:
      uint64_t v10 = OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_delayedRetryTask;
      if (*(void *)(v9 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_delayedRetryTask))
      {
        char v11 = 1;
        goto LABEL_11;
      }
      *(void *)(v9 + v10) = sub_100256314(v4);
      swift_release();
      break;
    case 3:
      if (!(*(void *)&v4 | v3)) {
        goto LABEL_13;
      }
      break;
    default:
      unint64_t v8 = *(void *)(*(void *)(v0 + 56) + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_retries);
      if ((v8 & 0x8000000000000000) != 0 || v8 < *(void *)&v4)
      {
LABEL_13:
        sub_100256140();
      }
      else
      {
LABEL_10:
        char v11 = 2;
LABEL_11:
        sub_1002578C4();
        uint64_t v13 = swift_allocError();
        char *v14 = v11;
        swift_willThrow();
        _StringGuts.grow(_:)(35);
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0xE000000000000000;
        v15._object = (void *)0x80000001002C7100;
        v15._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v15);
        *(void *)(v0 + 40) = v13;
        sub_10000A38C((uint64_t *)&unk_100365D60);
        _print_unlocked<A, B>(_:_:)();
        id v16 = sub_1001E99C8();
        swift_bridgeObjectRetain();
        NSString v17 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v16 ulog:60 message:v17];

        swift_errorRelease();
        swift_bridgeObjectRelease();
      }
      break;
  }
  Swift::String v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

void sub_100256140()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  uint64_t v2 = OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_retries;
  if (__OFADD__(*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_retries), 1))
  {
    __break(1u);
  }
  else
  {
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 41;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    id v5 = sub_1001E99C8();
    swift_bridgeObjectRetain();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v5 ulog:40 message:v6];

    swift_bridgeObjectRelease();
    *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_delayedRetryTask) = 0;
    swift_release();
    uint64_t v7 = OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_internalCnx;
    unint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_internalCnx);
    if (v8)
    {
      id v9 = v8;
      id v10 = sub_1001E99C8();
      NSString v11 = String._bridgeToObjectiveC()();
      [v10 ulog:40 message:v11];

      [v9 invalidate];
      unint64_t v12 = *(void **)(v1 + v7);
      *(void *)(v1 + v7) = 0;
    }
    uint64_t v13 = *(void *)(v1 + v2);
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (!v14)
    {
      *(void *)(v1 + v2) = v15;
      sub_1002567FC();
      return;
    }
  }
  __break(1u);
}

uint64_t sub_100256314(double a1)
{
  uint64_t v2 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v2 - 8);
  Swift::String v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  v5._object = (void *)0x80000001002C7090;
  v5._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v5);
  Double.write<A>(to:)();
  v6._countAndFlagsBits = 0x73646E6F63657320;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  id v7 = sub_1001E99C8();
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 ulog:40 message:v8];

  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0;
  *(double *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = v10;
  return sub_10007CBF8((uint64_t)v4, (uint64_t)&unk_100371168, v11);
}

uint64_t sub_100256508(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 48) = a5;
  *(double *)(v5 + 40) = a1;
  return ((uint64_t (*)(uint64_t (*)(unint64_t), void, void))_swift_task_switch)(sub_10025652C, 0, 0);
}

uint64_t sub_10025652C(unint64_t a1)
{
  double v2 = *(double *)(v1 + 40) * 1000000000.0;
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v2 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return static Task<>.sleep(nanoseconds:)(a1);
  }
  unint64_t v3 = (unint64_t)v2;
  Swift::String v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 56) = v4;
  *Swift::String v4 = v1;
  v4[1] = sub_100256610;
  a1 = v3;
  return static Task<>.sleep(nanoseconds:)(a1);
}

uint64_t sub_100256610()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    __asm { BRAA            X1, X16 }
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_100256744, 0, 0);
}

uint64_t sub_100256744()
{
  uint64_t v1 = *(void *)(v0 + 64);
  static Task<>.checkCancellation()();
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_100256140();
      swift_release();
    }
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v2();
}

uint64_t sub_1002567FC()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  aBlock = (void **)0xD000000000000022;
  unint64_t v38 = 0x80000001002C6FE0;
  uint64_t v2 = OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_internalCnx;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_internalCnx);
  if (v3)
  {
    sub_1002575B4();
    id v4 = v3;
    uint64_t v5 = String.init<A>(describing:)();
    unint64_t v7 = v6;
  }
  else
  {
    unint64_t v7 = 0xE300000000000000;
    uint64_t v5 = 7104878;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  id v9 = sub_1001E99C8();
  swift_bridgeObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 ulog:40 message:v10];

  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(v1 + v2);
  id v12 = sub_1001E99C8();
  if (v11)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    [v12 ulog:40 message:v13];

    uint64_t v14 = 0;
LABEL_15:

    return v14;
  }
  NSString v15 = String._bridgeToObjectiveC()();
  [v12 ulog:40 message:v15];

  uint64_t v16 = v1 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_delegate;
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v17 = *(void *)(v16 + 8);
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(ObjectType, v17);
    id v20 = [v19 interruptionHandler];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v21;
      uint64_t v23 = sub_100257A74;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v22 = 0;
    }
    uint64_t v24 = (void *)swift_allocObject();
    v24[2] = v1;
    id v24[3] = v23;
    v24[4] = v22;
    char v41 = sub_1002574B8;
    uint64_t v42 = v24;
    aBlock = _NSConcreteStackBlock;
    unint64_t v38 = 1107296256;
    uint64_t v39 = sub_10007A0AC;
    uint64_t v40 = &unk_1003368E8;
    uint64_t v25 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v36 = (uint64_t)v23;
    sub_1000766BC((uint64_t)v23);
    swift_release();
    [v19 setInterruptionHandler:v25];
    _Block_release(v25);
    id v26 = [v19 invalidationHandler];
    if (v26)
    {
      id v27 = v26;
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = v27;
      unint64_t v29 = sub_1002575A4;
    }
    else
    {
      unint64_t v29 = 0;
      uint64_t v28 = 0;
    }
    uint64_t v30 = swift_allocObject();
    swift_weakInit();
    Swift::String v31 = (void *)swift_allocObject();
    _OWORD v31[2] = v30;
    v31[3] = v29;
    v31[4] = v28;
    char v41 = sub_100257560;
    uint64_t v42 = v31;
    aBlock = _NSConcreteStackBlock;
    unint64_t v38 = 1107296256;
    uint64_t v39 = sub_10007A0AC;
    uint64_t v40 = &unk_100336960;
    Swift::String v32 = _Block_copy(&aBlock);
    sub_1000766BC((uint64_t)v29);
    swift_release();
    [v19 setInvalidationHandler:v32];
    _Block_release(v32);
    [v19 activate];
    id v33 = sub_1001E99C8();
    NSString v34 = String._bridgeToObjectiveC()();
    [v33 ulog:40 message:v34];

    sub_10000F088(v36);
    sub_10000F088((uint64_t)v29);
    swift_unknownObjectRelease();
    NSString v13 = *(NSString *)(v1 + v2);
    *(void *)(v1 + v2) = v19;
    uint64_t v14 = 1;
    goto LABEL_15;
  }
  return 2;
}

ValueMetadata *type metadata accessor for XPCConnectionManager.ReconnectPolicy()
{
  return &type metadata for XPCConnectionManager.ReconnectPolicy;
}

uint64_t sub_100256CE8(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  unint64_t v8 = (void *)swift_allocObject();
  _OWORD v8[2] = 0;
  v8[3] = 0;
  v8[4] = v7;
  sub_100255A24((uint64_t)v5, (uint64_t)&unk_100371148, (uint64_t)v8);
  uint64_t result = swift_release();
  if (a2) {
    return a2(result);
  }
  return result;
}

uint64_t sub_100256E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 64) = a4;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_100256E3C, 0, 0);
}

uint64_t sub_100256E3C()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    id v1 = sub_1001E99C8();
    NSString v2 = String._bridgeToObjectiveC()();
    [v1 ulog:40 message:v2];
    swift_release();
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[9] = Strong;
  if (!Strong)
  {
    uint64_t v6 = v0[1];
    __asm { BRAA            X1, X16 }
  }
  uint64_t v4 = Strong;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[10] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100256FD0;
  void v5[7] = v4;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_100255E1C, 0, 0);
}

uint64_t sub_100256FD0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_1002570E0(uint64_t a1, void (*a2)(void))
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    id v3 = sub_1001E99C8();
    NSString v4 = String._bridgeToObjectiveC()();
    [v3 ulog:40 message:v4];
    swift_release();
  }
  if (a2) {
    a2();
  }
}

uint64_t sub_1002571A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC17proximitycontrold20XPCConnectionManager_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10025721C()
{
  return 45;
}

uint64_t sub_1002572E0(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1002573BC;
  return v6(a1);
}

uint64_t sub_1002573BC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1002574B8()
{
  return sub_100256CE8(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_1002574C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002574D4()
{
  return swift_release();
}

uint64_t sub_1002574DC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100257518()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100257560()
{
  sub_1002570E0(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_10025756C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002575A4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

unint64_t sub_1002575B4()
{
  unint64_t result = qword_100371138;
  if (!qword_100371138)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_100371138);
  }
  return result;
}

uint64_t sub_1002575F4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100257634()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100076840;
  v3[8] = v2;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_100256E3C, 0, 0);
}

uint64_t sub_1002576E0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100257718(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10007EB64;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100371150 + dword_100371150);
  return v6(a1, v4);
}

uint64_t sub_1002577D0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100257810()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100076840;
  v4[6] = v3;
  v4[5] = v2;
  return ((uint64_t (*)(uint64_t (*)(unint64_t), void, void))_swift_task_switch)(sub_10025652C, 0, 0);
}

unint64_t sub_1002578C4()
{
  unint64_t result = qword_100371170;
  if (!qword_100371170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100371170);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for XPCConnectionManager.ManagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002579E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCConnectionManager.ManagerError()
{
  return &type metadata for XPCConnectionManager.ManagerError;
}

unint64_t sub_100257A20()
{
  unint64_t result = qword_100371178;
  if (!qword_100371178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100371178);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CallServicesUIEffect(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100257B50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallServicesUIEffect()
{
  return &type metadata for CallServicesUIEffect;
}

unint64_t sub_100257B88(uint64_t a1)
{
  unint64_t result = sub_100257BB0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100257BB0()
{
  unint64_t result = qword_100371180;
  if (!qword_100371180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100371180);
  }
  return result;
}

unint64_t sub_100257C04()
{
  if (*v0) {
    return 0xD00000000000001DLL;
  }
  else {
    return 0xD000000000000019;
  }
}

ValueMetadata *type metadata accessor for CallServicesUIEvent()
{
  return &type metadata for CallServicesUIEvent;
}

unint64_t sub_100257C5C(uint64_t a1)
{
  unint64_t result = sub_100257C84();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100257C84()
{
  unint64_t result = qword_100371188;
  if (!qword_100371188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100371188);
  }
  return result;
}

unint64_t sub_100257CD8()
{
  if (*(void *)(v0 + 32))
  {
    unint64_t v1 = *(void *)(v0 + 32);
  }
  else
  {
    sub_10000A38C(&qword_100371260);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10028D430;
    *(unsigned char *)(inited + 32) = 3;
    uint64_t v3 = *(void *)(v0 + 16);
    *(void *)(inited + 64) = type metadata accessor for TelephonyProxyState();
    *(void *)(inited + 72) = &off_10032F590;
    *(void *)(inited + 40) = v3;
    unint64_t v1 = sub_10026A6F0(inited);
    swift_setDeallocating();
    swift_retain();
    sub_10000A38C(&qword_100371920);
    swift_arrayDestroy();
    *(void *)(v0 + 32) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100257DC4(uint64_t a1, char a2)
{
  unint64_t v4 = sub_100257CD8();
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_100269EA4(a1), (v6 & 1) != 0))
  {
    sub_1000291F4(*(void *)(v4 + 56) + 40 * v5, (uint64_t)&v17);
    swift_bridgeObjectRelease();
    if (*((void *)&v18 + 1))
    {
      sub_10000D7E8(&v17, (uint64_t)&v20);
      uint64_t v7 = v22;
      uint64_t v8 = v23;
      sub_10000D6E4(&v20, v22);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 8))(a1, a2 & 1, v7, v8);
      sub_10000CC5C((uint64_t)&v20);
      return v9;
    }
  }
  else
  {
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    swift_bridgeObjectRelease();
  }
  sub_1002580DC((uint64_t)&v17);
  uint64_t v20 = 0;
  unint64_t v21 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  uint64_t v20 = 0x66206D6165727453;
  unint64_t v21 = 0xEB0000000020726FLL;
  unint64_t v10 = 0xEC0000006D72616CLL;
  unint64_t v11 = 0x41746E6572727563;
  switch((char)a1)
  {
    case 1:
      unint64_t v10 = 0x80000001002C1820;
      unint64_t v11 = 0xD000000000000013;
      break;
    case 2:
      unint64_t v10 = 0xEC00000061696465;
      unint64_t v11 = 0x4D746E6572727563;
      break;
    case 3:
      unint64_t v10 = 0xEB000000006C6C61;
      unint64_t v11 = 0x43746E6572727563;
      break;
    case 4:
      unint64_t v10 = 0xEC00000072656D69;
      unint64_t v11 = 0x54746E6572727563;
      break;
    default:
      break;
  }
  unint64_t v12 = v10;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0xD000000000000021;
  v13._object = (void *)0x80000001002C7200;
  String.append(_:)(v13);
  id v14 = sub_1001F66A4();
  swift_bridgeObjectRetain();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 ulog:40 message:v15];
  swift_bridgeObjectRelease();

  return 0;
}

uint64_t sub_10025804C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DeviceActivityServer()
{
  return self;
}

uint64_t sub_1002580B8(uint64_t a1, char a2)
{
  return sub_100257DC4(a1, a2);
}

uint64_t sub_1002580DC(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_1003637B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_WORD *initializeBufferWithCopyOfBuffer for ExperienceState(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ExperienceState(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >> 2 < 0xFFF) {
    goto LABEL_17;
  }
  if (a2 + 49156 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 49156 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 49156;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 49156;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 49156;
    }
  }
LABEL_17:
  unsigned int v6 = ((*a1 >> 13) | (8 * ((*a1 >> 2) & 0x780 | (*a1 >> 1)))) ^ 0x3FFF;
  if (v6 >= 0x3FFB) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for ExperienceState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 49156 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 49156 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >> 2 >= 0xFFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 >> 2 > 0xFFE)
  {
    unsigned int v6 = ((a2 - 16380) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 16380;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002582E8);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2)
        {
LABEL_18:
          unsigned int v7 = ((-a2 >> 3) & 0x7FF) - (a2 << 11);
          *(_WORD *)unint64_t result = (4 * v7) & 0xFE00 | (2 * (v7 & 0x7F));
        }
        break;
    }
  }
  return result;
}

uint64_t sub_100258310(unsigned __int16 *a1)
{
  unsigned int v1 = *a1;
  int v2 = (__int16)v1;
  unsigned int v3 = v1 >> 13;
  unsigned int v4 = v1 & 1 | (2 * ((v1 >> 8) & 1)) | 4;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return v4;
  }
}

_WORD *sub_100258338(_WORD *result)
{
  *result &= 0x1FFFu;
  return result;
}

_WORD *sub_100258348(_WORD *result, unsigned int a2)
{
  if (a2 < 4) {
    *unint64_t result = *result & 0x101 | ((_WORD)a2 << 13);
  }
  else {
    *unint64_t result = ((_WORD)a2 << 7) & 0x100 | a2 & 1 | 0x8000;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExperienceState()
{
  return &type metadata for ExperienceState;
}

unint64_t sub_10025838C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = *(void *)a2;
        uint64_t v8 = *(void *)(a2 + 8);
        char v9 = *(unsigned char *)(a2 + 16);
        sub_10001F894(v7, v8, v9);
        *(void *)a1 = v7;
        *(void *)(a1 + 8) = v8;
        *(unsigned char *)(a1 + 16) = v9;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 3u:
        unint64_t v12 = *(void **)a2;
        char v13 = *(unsigned char *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = v13;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        id v14 = v12;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 6u:
        uint64_t v15 = type metadata accessor for NoticeEffect();
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          uint64_t v30 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v30;
          swift_bridgeObjectRetain();
        }
        else if (EnumCaseMultiPayload == 1)
        {
          uint64_t v31 = *(void *)(a2 + 16);
          if (v31 == 1)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(void *)(a1 + 16) = *(void *)(a2 + 16);
          }
          else
          {
            Swift::String v32 = *(void **)a2;
            char v33 = *(unsigned char *)(a2 + 8);
            *(void *)a1 = *(void *)a2;
            *(unsigned char *)(a1 + 8) = v33;
            *(void *)(a1 + 16) = v31;
            id v34 = v32;
            swift_retain();
          }
        }
        else
        {
          if (EnumCaseMultiPayload)
          {
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v15 - 8) + 64));
LABEL_31:
            swift_storeEnumTagMultiPayload();
            return a1;
          }
          uint64_t v17 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v17;
          *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
          long long v18 = (int *)type metadata accessor for NoticeContext(0);
          uint64_t v19 = v18[6];
          uint64_t v20 = (uint64_t *)(a1 + v19);
          unint64_t v21 = (uint64_t *)(a2 + v19);
          uint64_t v22 = type metadata accessor for NoticeTapAction(0);
          swift_bridgeObjectRetain();
          int v23 = swift_getEnumCaseMultiPayload();
          if (v23 == 1)
          {
            uint64_t v35 = type metadata accessor for URL();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v35 - 8) + 16))(v20, v21, v35);
            swift_storeEnumTagMultiPayload();
          }
          else if (v23)
          {
            memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
          }
          else
          {
            uint64_t v25 = *v21;
            unint64_t v24 = v21[1];
            sub_10001F8BC(v25, v24);
            *uint64_t v20 = v25;
            v20[1] = v24;
            swift_storeEnumTagMultiPayload();
          }
          *(unsigned char *)(a1 + v18[7]) = *(unsigned char *)(a2 + v18[7]);
          uint64_t v36 = v18[8];
          long long v37 = (void *)(a1 + v36);
          unint64_t v38 = (void *)(a2 + v36);
          type metadata accessor for NoticeContent(0);
          if (swift_getEnumCaseMultiPayload() == 3)
          {
            uint64_t v42 = v38[1];
            *long long v37 = *v38;
            v37[1] = v42;
            uint64_t v57 = type metadata accessor for ShareableContentExposedContext(0);
            uint64_t v43 = *(int *)(v57 + 20);
            uint64_t v44 = (void *)((char *)v37 + v43);
            uint64_t v45 = (char *)v38 + v43;
            uint64_t v46 = *(void *)((char *)v38 + v43 + 8);
            void *v44 = *(void *)((char *)v38 + v43);
            v44[1] = v46;
            uint64_t v47 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
            __dst = (char *)v44 + v47;
            uint64_t v56 = &v45[v47];
            uint64_t v48 = type metadata accessor for URL();
            uint64_t v54 = *(void *)(v48 - 8);
            unint64_t v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v55(v56, 1, v48))
            {
              uint64_t v49 = type metadata accessor for ShareableContentType(0);
              memcpy(__dst, v56, *(void *)(*(void *)(v49 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v54 + 16))(__dst, v56, v48);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(__dst, 0, 1, v48);
            }
            uint64_t v50 = *(int *)(v57 + 24);
            uint64_t v51 = (void *)((char *)v37 + v50);
            uint64_t v52 = (void *)((char *)v38 + v50);
            uint64_t v53 = v52[1];
            *uint64_t v51 = *v52;
            v51[1] = v53;
          }
          else
          {
            uint64_t v39 = v38[1];
            *long long v37 = *v38;
            v37[1] = v39;
            uint64_t v40 = v38[2];
            uint64_t v41 = v38[3];
            v37[2] = v40;
            v37[3] = v41;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_31;
      case 9u:
        id v26 = *(void **)a2;
        unint64_t v27 = *(void *)(a2 + 8);
        uint64_t v28 = *(void *)(a2 + 16);
        char v29 = *(unsigned char *)(a2 + 24);
        sub_10001F914(v26, v27, v28, v29);
        *(void *)a1 = v26;
        *(void *)(a1 + 8) = v27;
        *(void *)(a1 + 16) = v28;
        *(unsigned char *)(a1 + 24) = v29;
        swift_storeEnumTagMultiPayload();
        return a1;
      default:
        memcpy((void *)a1, (const void *)a2, *(void *)(v6 + 64));
        return a1;
    }
  }
  uint64_t v10 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

uint64_t sub_1002588F8(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      id v3 = *(id *)a1;
      uint64_t v4 = *(void *)(a1 + 8);
      char v5 = *(unsigned char *)(a1 + 16);
      uint64_t result = sub_100020330((uint64_t)v3, v4, v5);
      break;
    case 3:
      goto LABEL_16;
    case 6:
      type metadata accessor for NoticeEffect();
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch(result)
      {
        case 2:
LABEL_25:
          uint64_t result = swift_bridgeObjectRelease();
          break;
        case 1:
          if (*(void *)(a1 + 16) != 1)
          {
LABEL_16:

            uint64_t result = swift_release();
          }
          break;
        case 0:
          swift_bridgeObjectRelease();
          uint64_t v6 = type metadata accessor for NoticeContext(0);
          uint64_t v7 = a1 + *(int *)(v6 + 24);
          type metadata accessor for NoticeTapAction(0);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v13 = type metadata accessor for URL();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v7, v13);
          }
          else if (!EnumCaseMultiPayload)
          {
            sub_10000DBEC(*(void *)v7, *(void *)(v7 + 8));
          }
          uint64_t v14 = a1 + *(int *)(v6 + 32);
          type metadata accessor for NoticeContent(0);
          uint64_t result = swift_getEnumCaseMultiPayload();
          switch((int)result)
          {
            case 0:
            case 1:
            case 2:
              swift_bridgeObjectRelease();
              goto LABEL_25;
            case 3:
              swift_bridgeObjectRelease();
              uint64_t v15 = v14 + *(int *)(type metadata accessor for ShareableContentExposedContext(0) + 20);
              swift_bridgeObjectRelease();
              uint64_t v16 = v15 + *(int *)(type metadata accessor for ShareableContent(0) + 20);
              uint64_t v17 = type metadata accessor for URL();
              uint64_t v18 = *(void *)(v17 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
                (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
              }
              goto LABEL_25;
            default:
              return result;
          }
      }
      break;
    case 9:
      id v9 = *(id *)a1;
      unint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = *(void *)(a1 + 16);
      char v12 = *(unsigned char *)(a1 + 24);
      uint64_t result = (uint64_t)sub_100020358(v9, v10, v11, v12);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100258C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = *(void *)a2;
      uint64_t v7 = *(void *)(a2 + 8);
      char v8 = *(unsigned char *)(a2 + 16);
      sub_10001F894(v6, v7, v8);
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v7;
      *(unsigned char *)(a1 + 16) = v8;
      goto LABEL_28;
    case 3u:
      id v9 = *(void **)a2;
      char v10 = *(unsigned char *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = v10;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      id v11 = v9;
      swift_retain();
      goto LABEL_28;
    case 6u:
      uint64_t v12 = type metadata accessor for NoticeEffect();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v27 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v27;
        swift_bridgeObjectRetain();
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v28 = *(void *)(a2 + 16);
        if (v28 == 1)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
        }
        else
        {
          char v29 = *(void **)a2;
          char v30 = *(unsigned char *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(unsigned char *)(a1 + 8) = v30;
          *(void *)(a1 + 16) = v28;
          id v31 = v29;
          swift_retain();
        }
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v12 - 8) + 64));
          goto LABEL_28;
        }
        uint64_t v14 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v14;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        uint64_t v15 = (int *)type metadata accessor for NoticeContext(0);
        uint64_t v16 = v15[6];
        uint64_t v17 = (uint64_t *)(a1 + v16);
        uint64_t v18 = (uint64_t *)(a2 + v16);
        uint64_t v19 = type metadata accessor for NoticeTapAction(0);
        swift_bridgeObjectRetain();
        int v20 = swift_getEnumCaseMultiPayload();
        if (v20 == 1)
        {
          uint64_t v32 = type metadata accessor for URL();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v32 - 8) + 16))(v17, v18, v32);
          swift_storeEnumTagMultiPayload();
        }
        else if (v20)
        {
          memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
        }
        else
        {
          uint64_t v22 = *v18;
          unint64_t v21 = v18[1];
          sub_10001F8BC(v22, v21);
          *uint64_t v17 = v22;
          v17[1] = v21;
          swift_storeEnumTagMultiPayload();
        }
        *(unsigned char *)(a1 + v15[7]) = *(unsigned char *)(a2 + v15[7]);
        uint64_t v33 = v15[8];
        id v34 = (void *)(a1 + v33);
        uint64_t v35 = (void *)(a2 + v33);
        type metadata accessor for NoticeContent(0);
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          uint64_t v39 = v35[1];
          void *v34 = *v35;
          v34[1] = v39;
          uint64_t v55 = type metadata accessor for ShareableContentExposedContext(0);
          uint64_t v40 = *(int *)(v55 + 20);
          uint64_t v41 = (void *)((char *)v34 + v40);
          uint64_t v42 = (char *)v35 + v40;
          uint64_t v43 = *(void *)((char *)v35 + v40 + 8);
          *uint64_t v41 = *(void *)((char *)v35 + v40);
          v41[1] = v43;
          uint64_t v44 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
          __dst = (char *)v41 + v44;
          uint64_t v54 = &v42[v44];
          uint64_t v45 = type metadata accessor for URL();
          uint64_t v52 = *(void *)(v45 - 8);
          uint64_t v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v53(v54, 1, v45))
          {
            uint64_t v46 = type metadata accessor for ShareableContentType(0);
            memcpy(__dst, v54, *(void *)(*(void *)(v46 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v52 + 16))(__dst, v54, v45);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(__dst, 0, 1, v45);
          }
          uint64_t v47 = *(int *)(v55 + 24);
          uint64_t v48 = (void *)((char *)v34 + v47);
          uint64_t v49 = (void *)((char *)v35 + v47);
          uint64_t v50 = v49[1];
          *uint64_t v48 = *v49;
          v48[1] = v50;
        }
        else
        {
          uint64_t v36 = v35[1];
          void *v34 = *v35;
          v34[1] = v36;
          uint64_t v37 = v35[2];
          uint64_t v38 = v35[3];
          v34[2] = v37;
          v34[3] = v38;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
LABEL_28:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 9u:
      int v23 = *(void **)a2;
      unint64_t v24 = *(void *)(a2 + 8);
      uint64_t v25 = *(void *)(a2 + 16);
      char v26 = *(unsigned char *)(a2 + 24);
      sub_10001F914(v23, v24, v25, v26);
      *(void *)a1 = v23;
      *(void *)(a1 + 8) = v24;
      *(void *)(a1 + 16) = v25;
      *(unsigned char *)(a1 + 24) = v26;
      goto LABEL_28;
    default:
      memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
  }
}

uint64_t sub_100259124(uint64_t a1, long long *a2, uint64_t a3)
{
  if ((long long *)a1 != a2)
  {
    sub_10025AE54(a1, type metadata accessor for ExperienceEffect);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = *(void *)a2;
        uint64_t v7 = *((void *)a2 + 1);
        char v8 = *((unsigned char *)a2 + 16);
        sub_10001F894(v6, v7, v8);
        *(void *)a1 = v6;
        *(void *)(a1 + 8) = v7;
        *(unsigned char *)(a1 + 16) = v8;
        goto LABEL_29;
      case 3u:
        id v9 = *(void **)a2;
        char v10 = *((unsigned char *)a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = v10;
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        id v11 = v9;
        swift_retain();
        goto LABEL_29;
      case 6u:
        uint64_t v12 = type metadata accessor for NoticeEffect();
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *((void *)a2 + 1);
          swift_bridgeObjectRetain();
        }
        else if (EnumCaseMultiPayload == 1)
        {
          if (*((void *)a2 + 2) == 1)
          {
            long long v26 = *a2;
            *(void *)(a1 + 16) = *((void *)a2 + 2);
            *(_OWORD *)a1 = v26;
          }
          else
          {
            uint64_t v27 = *(void **)a2;
            char v28 = *((unsigned char *)a2 + 8);
            *(void *)a1 = *(void *)a2;
            *(unsigned char *)(a1 + 8) = v28;
            *(void *)(a1 + 16) = *((void *)a2 + 2);
            id v29 = v27;
            swift_retain();
          }
        }
        else
        {
          if (EnumCaseMultiPayload)
          {
            memcpy((void *)a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
            goto LABEL_29;
          }
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *((void *)a2 + 1);
          *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
          uint64_t v14 = (int *)type metadata accessor for NoticeContext(0);
          uint64_t v15 = v14[6];
          uint64_t v16 = (uint64_t *)(a1 + v15);
          uint64_t v17 = (uint64_t *)((char *)a2 + v15);
          uint64_t v18 = type metadata accessor for NoticeTapAction(0);
          swift_bridgeObjectRetain();
          int v19 = swift_getEnumCaseMultiPayload();
          if (v19 == 1)
          {
            uint64_t v30 = type metadata accessor for URL();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v30 - 8) + 16))(v16, v17, v30);
            swift_storeEnumTagMultiPayload();
          }
          else if (v19)
          {
            memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
          }
          else
          {
            uint64_t v21 = *v17;
            unint64_t v20 = v17[1];
            sub_10001F8BC(v21, v20);
            *uint64_t v16 = v21;
            v16[1] = v20;
            swift_storeEnumTagMultiPayload();
          }
          *(unsigned char *)(a1 + v14[7]) = *((unsigned char *)a2 + v14[7]);
          uint64_t v31 = v14[8];
          uint64_t v32 = (void *)(a1 + v31);
          uint64_t v33 = (void *)((char *)a2 + v31);
          type metadata accessor for NoticeContent(0);
          if (swift_getEnumCaseMultiPayload() == 3)
          {
            void *v32 = *v33;
            v32[1] = v33[1];
            uint64_t v47 = type metadata accessor for ShareableContentExposedContext(0);
            uint64_t v34 = *(int *)(v47 + 20);
            uint64_t v35 = (void *)((char *)v32 + v34);
            uint64_t v36 = (char *)v33 + v34;
            void *v35 = *(void *)((char *)v33 + v34);
            v35[1] = *(void *)((char *)v33 + v34 + 8);
            uint64_t v37 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
            __dst = (char *)v35 + v37;
            uint64_t v46 = &v36[v37];
            uint64_t v38 = type metadata accessor for URL();
            uint64_t v44 = *(void *)(v38 - 8);
            uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v45(v46, 1, v38))
            {
              uint64_t v39 = type metadata accessor for ShareableContentType(0);
              memcpy(__dst, v46, *(void *)(*(void *)(v39 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v44 + 16))(__dst, v46, v38);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(__dst, 0, 1, v38);
            }
            uint64_t v40 = *(int *)(v47 + 24);
            uint64_t v41 = (void *)((char *)v32 + v40);
            uint64_t v42 = (void *)((char *)v33 + v40);
            *uint64_t v41 = *v42;
            v41[1] = v42[1];
          }
          else
          {
            void *v32 = *v33;
            v32[1] = v33[1];
            _OWORD v32[2] = v33[2];
            v32[3] = v33[3];
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        swift_storeEnumTagMultiPayload();
LABEL_29:
        swift_storeEnumTagMultiPayload();
        break;
      case 9u:
        uint64_t v22 = *(void **)a2;
        unint64_t v23 = *((void *)a2 + 1);
        uint64_t v24 = *((void *)a2 + 2);
        char v25 = *((unsigned char *)a2 + 24);
        sub_10001F914(v22, v23, v24, v25);
        *(void *)a1 = v22;
        *(void *)(a1 + 8) = v23;
        *(void *)(a1 + 16) = v24;
        *(unsigned char *)(a1 + 24) = v25;
        goto LABEL_29;
      default:
        memcpy((void *)a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

uint64_t type metadata accessor for ExperienceEffect(uint64_t a1)
{
  return sub_100014F7C(a1, qword_1003712D8);
}

unsigned char *sub_1002596C0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    uint64_t v6 = type metadata accessor for NoticeEffect();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      uint64_t v7 = (int *)type metadata accessor for NoticeContext(0);
      uint64_t v8 = v7[6];
      id v9 = &a1[v8];
      char v10 = &a2[v8];
      uint64_t v11 = type metadata accessor for NoticeTapAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v12 = type metadata accessor for URL();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
      }
      a1[v7[7]] = a2[v7[7]];
      uint64_t v13 = v7[8];
      uint64_t v14 = &a1[v13];
      uint64_t v15 = &a2[v13];
      uint64_t v16 = type metadata accessor for NoticeContent(0);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        _OWORD *v14 = *v15;
        uint64_t v27 = type metadata accessor for ShareableContentExposedContext(0);
        uint64_t v17 = *(int *)(v27 + 20);
        uint64_t v18 = (char *)v14 + v17;
        int v19 = (char *)v15 + v17;
        *(_OWORD *)((char *)v14 + v17) = *(_OWORD *)((char *)v15 + v17);
        uint64_t v20 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
        uint64_t v21 = &v18[v20];
        uint64_t v22 = &v19[v20];
        uint64_t v23 = type metadata accessor for URL();
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          uint64_t v25 = type metadata accessor for ShareableContentType(0);
          memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        *(_OWORD *)((char *)v14 + *(int *)(v27 + 24)) = *(_OWORD *)((char *)v15 + *(int *)(v27 + 24));
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

unsigned char *sub_1002599E4(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10025AE54((uint64_t)a1, type metadata accessor for ExperienceEffect);
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      uint64_t v6 = type metadata accessor for NoticeEffect();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[16] = a2[16];
        uint64_t v7 = (int *)type metadata accessor for NoticeContext(0);
        uint64_t v8 = v7[6];
        id v9 = &a1[v8];
        char v10 = &a2[v8];
        uint64_t v11 = type metadata accessor for NoticeTapAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v12 = type metadata accessor for URL();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
        }
        a1[v7[7]] = a2[v7[7]];
        uint64_t v13 = v7[8];
        uint64_t v14 = &a1[v13];
        uint64_t v15 = &a2[v13];
        uint64_t v16 = type metadata accessor for NoticeContent(0);
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          _OWORD *v14 = *v15;
          uint64_t v27 = type metadata accessor for ShareableContentExposedContext(0);
          uint64_t v17 = *(int *)(v27 + 20);
          uint64_t v18 = (char *)v14 + v17;
          int v19 = (char *)v15 + v17;
          *(_OWORD *)((char *)v14 + v17) = *(_OWORD *)((char *)v15 + v17);
          uint64_t v20 = *(int *)(type metadata accessor for ShareableContent(0) + 20);
          uint64_t v21 = &v18[v20];
          uint64_t v22 = &v19[v20];
          uint64_t v23 = type metadata accessor for URL();
          uint64_t v24 = *(void *)(v23 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
          {
            uint64_t v25 = type metadata accessor for ShareableContentType(0);
            memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
          }
          *(_OWORD *)((char *)v14 + *(int *)(v27 + 24)) = *(_OWORD *)((char *)v15 + *(int *)(v27 + 24));
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
        }
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100259D2C()
{
  uint64_t result = type metadata accessor for NoticeEffect();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_100259E04(void *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = *(void *)a2;
        uint64_t v8 = *((void *)a2 + 1);
        char v9 = a2[16];
        sub_10001F9E8(v7, v8, v9);
        *a1 = v7;
        a1[1] = v8;
        *((unsigned char *)a1 + 16) = v9;
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v12 = *(void *)a2;
        uint64_t v13 = *((void *)a2 + 1);
        uint64_t v14 = *((void *)a2 + 2);
        uint64_t v15 = *((void *)a2 + 3);
        uint64_t v16 = *((void *)a2 + 4);
        uint64_t v17 = *((void *)a2 + 5);
        uint64_t v18 = *((void *)a2 + 6);
        unsigned __int8 v19 = a2[56];
        sub_10001FA00(v12, v13, v14, v15, v16, v17, v18, v19);
        *a1 = v12;
        a1[1] = v13;
        a1[2] = v14;
        a1[3] = v15;
        a1[4] = v16;
        a1[5] = v17;
        a1[6] = v18;
        *((unsigned char *)a1 + 56) = v19;
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        uint64_t v20 = *(void *)a2;
        unint64_t v21 = *((void *)a2 + 1);
        uint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *((void *)a2 + 3);
        uint64_t v24 = *((void *)a2 + 4);
        uint64_t v25 = *((void *)a2 + 5);
        uint64_t v26 = *((void *)a2 + 6);
        char v27 = a2[56];
        sub_10001FAFC(v20, v21, v22, v23, v24, v25, v26, v27);
        *a1 = v20;
        a1[1] = v21;
        a1[2] = v22;
        a1[3] = v23;
        a1[4] = v24;
        a1[5] = v25;
        a1[6] = v26;
        *((unsigned char *)a1 + 56) = v27;
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        uint64_t v28 = *(void *)a2;
        uint64_t v29 = *((void *)a2 + 1);
        uint64_t v30 = *((void *)a2 + 2);
        uint64_t v31 = *((void *)a2 + 3);
        uint64_t v32 = *((void *)a2 + 4);
        uint64_t v33 = *((void *)a2 + 5);
        uint64_t v34 = *((void *)a2 + 6);
        char v35 = a2[56];
        sub_10001FBD0(v28, v29, v30, v31, v32, v33, v34, v35);
        *a1 = v28;
        a1[1] = v29;
        a1[2] = v30;
        a1[3] = v31;
        a1[4] = v32;
        a1[5] = v33;
        a1[6] = v34;
        *((unsigned char *)a1 + 56) = v35;
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        uint64_t v36 = type metadata accessor for TransferEvent();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v37 = *(void *)a2;
            swift_errorRetain();
            *a1 = v37;
            goto LABEL_23;
          case 2u:
          case 3u:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            uint64_t v39 = *((void *)a2 + 3);
            a1[2] = *((void *)a2 + 2);
            a1[3] = v39;
            uint64_t v40 = *((void *)a2 + 5);
            a1[4] = *((void *)a2 + 4);
            a1[5] = v40;
            a1[6] = *((void *)a2 + 6);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_23;
          case 4u:
            unint64_t v42 = *((void *)a2 + 2);
            if (v42 - 7 >= 2 && v42 >= 7)
            {
              *(_OWORD *)a1 = *(_OWORD *)a2;
              uint64_t v44 = *((void *)a2 + 3);
              uint64_t v45 = *((void *)a2 + 4);
              a1[2] = v42;
              a1[3] = v44;
              uint64_t v46 = *((void *)a2 + 5);
              uint64_t v47 = *((void *)a2 + 6);
              a1[4] = v45;
              a1[5] = v46;
              a1[6] = v47;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v43 = *((_OWORD *)a2 + 1);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *((_OWORD *)a1 + 1) = v43;
              *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
              a1[6] = *((void *)a2 + 6);
            }
            uint64_t v48 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
            uint64_t v49 = (char *)a1 + v48;
            uint64_t v50 = &a2[v48];
            uint64_t v51 = type metadata accessor for Date();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16))(v49, v50, v51);
            goto LABEL_23;
          case 5u:
            unint64_t v41 = *(void *)a2;
            sub_10001FC30(v41);
            *a1 = v41;
LABEL_23:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v36 - 8) + 64));
            break;
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 9u:
        uint64_t v38 = *(void *)a2;
        if ((unint64_t)(*(void *)a2 - 1) >= 3) {
          swift_errorRetain();
        }
        *a1 = v38;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10025A2B4(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v3 = *(void *)a1;
      uint64_t v4 = *(void *)(a1 + 8);
      char v5 = *(unsigned char *)(a1 + 16);
      uint64_t result = sub_100020428(v3, v4, v5);
      break;
    case 1:
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(a1 + 48);
      unsigned __int8 v13 = *(unsigned char *)(a1 + 56);
      uint64_t result = sub_100020430(v6, v7, v8, v9, v10, v11, v12, v13);
      break;
    case 4:
      uint64_t v14 = *(void *)a1;
      unint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = *(void *)(a1 + 16);
      uint64_t v17 = *(void *)(a1 + 24);
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v20 = *(void *)(a1 + 48);
      char v21 = *(unsigned char *)(a1 + 56);
      uint64_t result = sub_10002052C(v14, v15, v16, v17, v18, v19, v20, v21);
      break;
    case 5:
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void *)(a1 + 8);
      uint64_t v24 = *(void *)(a1 + 16);
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v27 = *(void *)(a1 + 40);
      uint64_t v28 = *(void *)(a1 + 48);
      char v29 = *(unsigned char *)(a1 + 56);
      uint64_t result = sub_1000205C8(v22, v23, v24, v25, v26, v27, v28, v29);
      break;
    case 8:
      type metadata accessor for TransferEvent();
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 1:
          goto LABEL_19;
        case 2:
        case 3:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          break;
        case 4:
          if (*(void *)(a1 + 16) >= 9uLL)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          uint64_t v31 = a1 + *(int *)(type metadata accessor for PermissionToHandoff() + 20);
          uint64_t v32 = type metadata accessor for Date();
          uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8);
          uint64_t result = v33(v31, v32);
          break;
        case 5:
          unint64_t v30 = *(void *)a1;
          uint64_t result = sub_100020628(v30);
          break;
        default:
          return result;
      }
      break;
    case 9:
      uint64_t result = *(void *)a1;
      if ((unint64_t)(*(void *)a1 - 1) >= 3)
      {
LABEL_19:
        uint64_t result = swift_errorRelease();
      }
      break;
    default:
      return result;
  }
  return result;
}

void *sub_10025A534(void *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = *(void *)a2;
      uint64_t v7 = *((void *)a2 + 1);
      char v8 = a2[16];
      sub_10001F9E8(v6, v7, v8);
      *a1 = v6;
      a1[1] = v7;
      *((unsigned char *)a1 + 16) = v8;
      goto LABEL_21;
    case 1u:
      uint64_t v9 = *(void *)a2;
      uint64_t v10 = *((void *)a2 + 1);
      uint64_t v11 = *((void *)a2 + 2);
      uint64_t v12 = *((void *)a2 + 3);
      uint64_t v13 = *((void *)a2 + 4);
      uint64_t v14 = *((void *)a2 + 5);
      uint64_t v15 = *((void *)a2 + 6);
      unsigned __int8 v16 = a2[56];
      sub_10001FA00(v9, v10, v11, v12, v13, v14, v15, v16);
      *a1 = v9;
      a1[1] = v10;
      a1[2] = v11;
      a1[3] = v12;
      a1[4] = v13;
      a1[5] = v14;
      a1[6] = v15;
      *((unsigned char *)a1 + 56) = v16;
      goto LABEL_21;
    case 4u:
      uint64_t v17 = *(void *)a2;
      unint64_t v18 = *((void *)a2 + 1);
      uint64_t v19 = *((void *)a2 + 2);
      uint64_t v20 = *((void *)a2 + 3);
      uint64_t v21 = *((void *)a2 + 4);
      uint64_t v22 = *((void *)a2 + 5);
      uint64_t v23 = *((void *)a2 + 6);
      char v24 = a2[56];
      sub_10001FAFC(v17, v18, v19, v20, v21, v22, v23, v24);
      *a1 = v17;
      a1[1] = v18;
      a1[2] = v19;
      a1[3] = v20;
      a1[4] = v21;
      a1[5] = v22;
      a1[6] = v23;
      *((unsigned char *)a1 + 56) = v24;
      goto LABEL_21;
    case 5u:
      uint64_t v25 = *(void *)a2;
      uint64_t v26 = *((void *)a2 + 1);
      uint64_t v27 = *((void *)a2 + 2);
      uint64_t v28 = *((void *)a2 + 3);
      uint64_t v29 = *((void *)a2 + 4);
      uint64_t v30 = *((void *)a2 + 5);
      uint64_t v31 = *((void *)a2 + 6);
      char v32 = a2[56];
      sub_10001FBD0(v25, v26, v27, v28, v29, v30, v31, v32);
      *a1 = v25;
      a1[1] = v26;
      a1[2] = v27;
      a1[3] = v28;
      a1[4] = v29;
      a1[5] = v30;
      a1[6] = v31;
      *((unsigned char *)a1 + 56) = v32;
      goto LABEL_21;
    case 8u:
      uint64_t v33 = type metadata accessor for TransferEvent();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v34 = *(void *)a2;
          swift_errorRetain();
          *a1 = v34;
          goto LABEL_20;
        case 2u:
        case 3u:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          uint64_t v36 = *((void *)a2 + 3);
          a1[2] = *((void *)a2 + 2);
          a1[3] = v36;
          uint64_t v37 = *((void *)a2 + 5);
          a1[4] = *((void *)a2 + 4);
          a1[5] = v37;
          a1[6] = *((void *)a2 + 6);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_20;
        case 4u:
          unint64_t v39 = *((void *)a2 + 2);
          if (v39 - 7 >= 2 && v39 >= 7)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
            uint64_t v41 = *((void *)a2 + 3);
            uint64_t v42 = *((void *)a2 + 4);
            a1[2] = v39;
            a1[3] = v41;
            uint64_t v43 = *((void *)a2 + 5);
            uint64_t v44 = *((void *)a2 + 6);
            a1[4] = v42;
            a1[5] = v43;
            a1[6] = v44;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v40 = *((_OWORD *)a2 + 1);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *((_OWORD *)a1 + 1) = v40;
            *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
            a1[6] = *((void *)a2 + 6);
          }
          uint64_t v45 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
          uint64_t v46 = (char *)a1 + v45;
          uint64_t v47 = &a2[v45];
          uint64_t v48 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 16))(v46, v47, v48);
          goto LABEL_20;
        case 5u:
          unint64_t v38 = *(void *)a2;
          sub_10001FC30(v38);
          *a1 = v38;
LABEL_20:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v33 - 8) + 64));
          break;
      }
      goto LABEL_21;
    case 9u:
      uint64_t v35 = *(void *)a2;
      if ((unint64_t)(*(void *)a2 - 1) >= 3) {
        swift_errorRetain();
      }
      *a1 = v35;
LABEL_21:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_10025A98C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10025AE54((uint64_t)a1, type metadata accessor for ExperienceEvent);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = *(void *)a2;
        uint64_t v7 = *((void *)a2 + 1);
        char v8 = a2[16];
        sub_10001F9E8(v6, v7, v8);
        *(void *)a1 = v6;
        *((void *)a1 + 1) = v7;
        a1[16] = v8;
        goto LABEL_22;
      case 1u:
        uint64_t v9 = *(void *)a2;
        uint64_t v10 = *((void *)a2 + 1);
        uint64_t v11 = *((void *)a2 + 2);
        uint64_t v12 = *((void *)a2 + 3);
        uint64_t v13 = *((void *)a2 + 4);
        uint64_t v14 = *((void *)a2 + 5);
        uint64_t v15 = *((void *)a2 + 6);
        unsigned __int8 v16 = a2[56];
        sub_10001FA00(v9, v10, v11, v12, v13, v14, v15, v16);
        *(void *)a1 = v9;
        *((void *)a1 + 1) = v10;
        *((void *)a1 + 2) = v11;
        *((void *)a1 + 3) = v12;
        *((void *)a1 + 4) = v13;
        *((void *)a1 + 5) = v14;
        *((void *)a1 + 6) = v15;
        a1[56] = v16;
        goto LABEL_22;
      case 4u:
        uint64_t v17 = *(void *)a2;
        unint64_t v18 = *((void *)a2 + 1);
        uint64_t v19 = *((void *)a2 + 2);
        uint64_t v20 = *((void *)a2 + 3);
        uint64_t v21 = *((void *)a2 + 4);
        uint64_t v22 = *((void *)a2 + 5);
        uint64_t v23 = *((void *)a2 + 6);
        char v24 = a2[56];
        sub_10001FAFC(v17, v18, v19, v20, v21, v22, v23, v24);
        *(void *)a1 = v17;
        *((void *)a1 + 1) = v18;
        *((void *)a1 + 2) = v19;
        *((void *)a1 + 3) = v20;
        *((void *)a1 + 4) = v21;
        *((void *)a1 + 5) = v22;
        *((void *)a1 + 6) = v23;
        a1[56] = v24;
        goto LABEL_22;
      case 5u:
        uint64_t v25 = *(void *)a2;
        uint64_t v26 = *((void *)a2 + 1);
        uint64_t v27 = *((void *)a2 + 2);
        uint64_t v28 = *((void *)a2 + 3);
        uint64_t v29 = *((void *)a2 + 4);
        uint64_t v30 = *((void *)a2 + 5);
        uint64_t v31 = *((void *)a2 + 6);
        char v32 = a2[56];
        sub_10001FBD0(v25, v26, v27, v28, v29, v30, v31, v32);
        *(void *)a1 = v25;
        *((void *)a1 + 1) = v26;
        *((void *)a1 + 2) = v27;
        *((void *)a1 + 3) = v28;
        *((void *)a1 + 4) = v29;
        *((void *)a1 + 5) = v30;
        *((void *)a1 + 6) = v31;
        a1[56] = v32;
        goto LABEL_22;
      case 8u:
        uint64_t v33 = type metadata accessor for TransferEvent();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v34 = *(void *)a2;
            swift_errorRetain();
            *(void *)a1 = v34;
            goto LABEL_21;
          case 2u:
          case 3u:
            *(void *)a1 = *(void *)a2;
            *((void *)a1 + 1) = *((void *)a2 + 1);
            *((void *)a1 + 2) = *((void *)a2 + 2);
            *((void *)a1 + 3) = *((void *)a2 + 3);
            *((void *)a1 + 4) = *((void *)a2 + 4);
            *((void *)a1 + 5) = *((void *)a2 + 5);
            *((void *)a1 + 6) = *((void *)a2 + 6);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_21;
          case 4u:
            unint64_t v37 = *((void *)a2 + 2);
            if (v37 - 7 >= 2 && v37 >= 7)
            {
              *(void *)a1 = *(void *)a2;
              *((void *)a1 + 1) = *((void *)a2 + 1);
              *((void *)a1 + 2) = *((void *)a2 + 2);
              *((void *)a1 + 3) = *((void *)a2 + 3);
              *((void *)a1 + 4) = *((void *)a2 + 4);
              *((void *)a1 + 5) = *((void *)a2 + 5);
              *((void *)a1 + 6) = *((void *)a2 + 6);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v38 = *(_OWORD *)a2;
              long long v39 = *((_OWORD *)a2 + 1);
              long long v40 = *((_OWORD *)a2 + 2);
              *((void *)a1 + 6) = *((void *)a2 + 6);
              *((_OWORD *)a1 + 1) = v39;
              *((_OWORD *)a1 + 2) = v40;
              *(_OWORD *)a1 = v38;
            }
            uint64_t v41 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
            uint64_t v42 = &a1[v41];
            uint64_t v43 = &a2[v41];
            uint64_t v44 = type metadata accessor for Date();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16))(v42, v43, v44);
            goto LABEL_21;
          case 5u:
            unint64_t v36 = *(void *)a2;
            sub_10001FC30(v36);
            *(void *)a1 = v36;
LABEL_21:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v33 - 8) + 64));
            break;
        }
        goto LABEL_22;
      case 9u:
        uint64_t v35 = *(void *)a2;
        if ((unint64_t)(*(void *)a2 - 1) >= 3) {
          swift_errorRetain();
        }
        *(void *)a1 = v35;
LABEL_22:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10025AE54(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for ExperienceEvent(uint64_t a1)
{
  return sub_100014F7C(a1, qword_100371380);
}

_OWORD *sub_10025AED4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 8)
  {
    uint64_t v6 = type metadata accessor for TransferEvent();
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      long long v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      a1[2] = a2[2];
      *((void *)a1 + 6) = *((void *)a2 + 6);
      uint64_t v8 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *sub_10025B014(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10025AE54((uint64_t)a1, type metadata accessor for ExperienceEvent);
    if (swift_getEnumCaseMultiPayload() == 8)
    {
      uint64_t v6 = type metadata accessor for TransferEvent();
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        long long v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        a1[2] = a2[2];
        *((void *)a1 + 6) = *((void *)a2 + 6);
        uint64_t v8 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10025B178()
{
  uint64_t result = type metadata accessor for TransferEvent();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_10025B258(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_1000B5558(0, v2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v4 = (unsigned __int8 *)(a1 + 33);
    do
    {
      __int16 v5 = *(v4 - 1);
      int v6 = *v4;
      uint64_t v10 = result;
      unint64_t v8 = result[2];
      unint64_t v7 = result[3];
      if (v8 >= v7 >> 1)
      {
        sub_1000B5558(v7 > 1, v8 + 1, 1);
        uint64_t result = v10;
      }
      if (v6) {
        __int16 v9 = 256;
      }
      else {
        __int16 v9 = 0;
      }
      result[2] = v8 + 1;
      *((_WORD *)result + v8 + 16) = v9 | v5 | 0x2000;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_10025B33C(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_1000B5558(0, v2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v4 = (unsigned __int8 *)(a1 + 33);
    do
    {
      __int16 v5 = *(v4 - 1);
      int v6 = *v4;
      uint64_t v10 = result;
      unint64_t v8 = result[2];
      unint64_t v7 = result[3];
      if (v8 >= v7 >> 1)
      {
        sub_1000B5558(v7 > 1, v8 + 1, 1);
        uint64_t result = v10;
      }
      if (v6) {
        __int16 v9 = 256;
      }
      else {
        __int16 v9 = 0;
      }
      result[2] = v8 + 1;
      *((_WORD *)result + v8 + 16) = v9 | v5 | 0x4000;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_10025B420(unsigned __int16 a1)
{
  switch(a1 >> 13)
  {
    case 1:
      v14[8] = 0;
      _StringGuts.grow(_:)(22);
      v3._countAndFlagsBits = 0x28746E6968;
      v3._object = (void *)0xE500000000000000;
      String.append(_:)(v3);
      *(void *)uint64_t v14 = a1 & 1;
      _print_unlocked<A, B>(_:_:)();
      v4._countAndFlagsBits = 0x746163756465202CLL;
      v4._object = (void *)0xEC0000003D6E6F69;
      String.append(_:)(v4);
      if ((a1 & 0x100) != 0) {
        uint64_t v5 = 1702195828;
      }
      else {
        uint64_t v5 = 0x65736C6166;
      }
      if ((a1 & 0x100) != 0) {
        unint64_t v6 = 0xE400000000000000;
      }
      else {
        unint64_t v6 = 0xE500000000000000;
      }
      goto LABEL_16;
    case 2:
      v14[8] = 0;
      _StringGuts.grow(_:)(26);
      v7._countAndFlagsBits = 0x6465646E61707865;
      v7._object = (void *)0xE900000000000028;
      String.append(_:)(v7);
      *(void *)uint64_t v14 = a1 & 1;
      _print_unlocked<A, B>(_:_:)();
      v8._countAndFlagsBits = 0x746163756465202CLL;
      v8._object = (void *)0xEC0000003D6E6F69;
      String.append(_:)(v8);
      BOOL v2 = (a1 & 0x100) == 0;
      goto LABEL_10;
    case 3:
      v14[8] = 0;
      v10._countAndFlagsBits = 0x6465646E61707865;
      v10._object = (void *)0xEC0000002849534ELL;
      String.append(_:)(v10);
      *(void *)uint64_t v14 = a1 & 1;
      _print_unlocked<A, B>(_:_:)();
      goto LABEL_18;
    case 4:
      uint64_t v13 = 0x6572756C696166;
      if (a1 != 32769) {
        uint64_t v13 = 0x6873696E6966;
      }
      if (a1 == 0x8000) {
        return 0x6C6C657764;
      }
      else {
        return v13;
      }
    default:
      *(void *)&v14[1] = 0x61747328656C6469;
      BOOL v2 = (a1 & 1) == 0;
LABEL_10:
      if (v2) {
        uint64_t v5 = 0x65736C6166;
      }
      else {
        uint64_t v5 = 1702195828;
      }
      if (v2) {
        unint64_t v6 = 0xE500000000000000;
      }
      else {
        unint64_t v6 = 0xE400000000000000;
      }
LABEL_16:
      unint64_t v9 = v6;
      String.append(_:)(*(Swift::String *)&v5);
      swift_bridgeObjectRelease();
LABEL_18:
      v11._countAndFlagsBits = 41;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      return *(void *)&v14[1];
  }
}

uint64_t sub_10025B6EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TransferEvent();
  __chkstk_darwin(v2 - 8);
  Swift::String v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ExperienceEvent(0);
  __chkstk_darwin(v5);
  Swift::String v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006DDF4(v1, (uint64_t)v7, type metadata accessor for ExperienceEvent);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1000D84D4((long long *)v7, v45);
      uint64_t v15 = sub_1000D6F88();
      uint64_t v17 = v16;
      sub_10025D970((uint64_t)v45, (void (*)(void, void, void, void, void, void, void, void))sub_100020430);
      unint64_t v18 = 0x2E64726143;
      unint64_t v19 = 0xE500000000000000;
      goto LABEL_11;
    case 2u:
      unint64_t v20 = 0xE900000000000064;
      if (*v7)
      {
        if (*v7 == 1)
        {
          unint64_t v20 = 0xED00006465707061;
          unint64_t v21 = 0x546D7269666E6F63;
        }
        else
        {
          unint64_t v21 = 0x657373696D736964;
        }
      }
      else
      {
        unint64_t v21 = 0x65746E6573657270;
      }
      unint64_t v28 = 0xD000000000000018;
      unint64_t v35 = 0x80000001002C7250;
      goto LABEL_30;
    case 3u:
      unint64_t v21 = sub_10020F1D0(*v7);
      uint64_t v23 = 0x656369766544;
      goto LABEL_16;
    case 4u:
      sub_100174AE4((uint64_t)v7, (uint64_t)v45);
      v24._countAndFlagsBits = sub_1001AEA0C();
      uint64_t v43 = 0x2E656369746F4ELL;
      unint64_t v44 = 0xE700000000000000;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      sub_10025D970((uint64_t)v45, (void (*)(void, void, void, void, void, void, void, void))sub_10002052C);
      return v43;
    case 5u:
      sub_1000D84D4((long long *)v7, v45);
      uint64_t v15 = sub_10015ADA0();
      uint64_t v17 = v25;
      sub_10025D970((uint64_t)v45, (void (*)(void, void, void, void, void, void, void, void))sub_1000205C8);
      unint64_t v18 = 0xD00000000000001DLL;
      unint64_t v19 = 0x80000001002C7230;
LABEL_11:
      uint64_t v43 = v18;
      unint64_t v44 = v19;
      v26._countAndFlagsBits = v15;
      v26._object = v17;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      return v43;
    case 6u:
      unint64_t v28 = 0x7661776B636F6853;
      unint64_t v20 = 0xE600000000000000;
      unint64_t v21 = 0x6465746E6968;
      switch(*v7)
      {
        case 1:
          unint64_t v21 = 0x7661776B636F6873;
          unint64_t v20 = 0xEA00000000006465;
          break;
        case 2:
          unint64_t v20 = 0xE700000000000000;
          unint64_t v21 = 0x64656C74746573;
          break;
        case 3:
          unint64_t v21 = 0x657373696D736964;
          unint64_t v20 = 0xE900000000000064;
          break;
        default:
          break;
      }
      unint64_t v35 = 0xEA00000000002E65;
LABEL_30:
      *(void *)&v45[0] = v28;
      *((void *)&v45[0] + 1) = v35;
      unint64_t v22 = v20;
      goto LABEL_31;
    case 7u:
      unint64_t v21 = sub_10020F988(*v7);
      uint64_t v23 = 0x6D6574737953;
LABEL_16:
      *(void *)&v45[0] = v23 & 0xFFFFFFFFFFFFLL | 0x2E000000000000;
      *((void *)&v45[0] + 1) = 0xE700000000000000;
LABEL_31:
      String.append(_:)(*(Swift::String *)&v21);
      swift_bridgeObjectRelease();
      return *(void *)&v45[0];
    case 8u:
      sub_10025DAB8((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for TransferEvent);
      v29._countAndFlagsBits = sub_100271E94();
      strcpy((char *)v45, "Transfer.");
      WORD5(v45[0]) = 0;
      HIDWORD(v45[0]) = -385875968;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void *)&v45[0];
      sub_10025AE54((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for TransferEvent);
      return v27;
    case 9u:
      uint64_t v30 = *(void *)v7;
      if (*(void *)v7 == 1)
      {
        uint64_t v32 = 0x6574736575716572;
        unint64_t v31 = 0xE900000000000064;
      }
      else if (v30 == 3)
      {
        unint64_t v31 = 0xED00006574617669;
        uint64_t v32 = 0x7463616544646964;
      }
      else if (v30 == 2)
      {
        unint64_t v31 = 0xEB00000000657461;
        uint64_t v32 = 0x7669746341646964;
      }
      else
      {
        *(void *)&v45[0] = 0;
        *((void *)&v45[0] + 1) = 0xE000000000000000;
        swift_errorRetain();
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        *(void *)&v45[0] = 0xD000000000000015;
        *((void *)&v45[0] + 1) = 0x80000001002B1EB0;
        if (v30)
        {
          swift_getErrorValue();
          swift_errorRetain();
          uint64_t v37 = Error.localizedDescription.getter();
          long long v39 = v38;
          sub_10000BECC(v30);
        }
        else
        {
          long long v39 = (void *)0xE300000000000000;
          uint64_t v37 = 7104878;
        }
        v40._countAndFlagsBits = v37;
        v40._object = v39;
        String.append(_:)(v40);
        swift_bridgeObjectRelease();
        v41._countAndFlagsBits = 10528;
        v41._object = (void *)0xE200000000000000;
        String.append(_:)(v41);
        sub_10000BECC(v30);
        unint64_t v31 = *((void *)&v45[0] + 1);
        uint64_t v32 = *(void *)&v45[0];
      }
      strcpy((char *)v45, "ViewService.");
      BYTE13(v45[0]) = 0;
      HIWORD(v45[0]) = -5120;
      unint64_t v42 = v31;
      String.append(_:)(*(Swift::String *)&v32);
      swift_bridgeObjectRelease();
      sub_10000BECC(v30);
      return *(void *)&v45[0];
    default:
      uint64_t v8 = *(void *)v7;
      unint64_t v9 = (void *)*((void *)v7 + 1);
      int v10 = v7[16];
      if (v10 < 0)
      {
        sub_10000F318(*(void *)v7, *((void *)v7 + 1), v10 & 0x7F);
        uint64_t v11 = sub_10000F594(v8, v9, v10 & 0x7F);
        uint64_t v13 = 0x2E6C6C657744;
        unint64_t v14 = 0xE600000000000000;
      }
      else
      {
        sub_10000F318(*(void *)v7, *((void *)v7 + 1), v7[16]);
        uint64_t v11 = sub_10000F594(v8, v9, v10);
        uint64_t v13 = 0x2E63697373616C43;
        unint64_t v14 = 0xE800000000000000;
      }
      *(void *)&v45[0] = v13;
      *((void *)&v45[0] + 1) = v14;
      String.append(_:)(*(Swift::String *)&v11);
      sub_100020428(v8, (uint64_t)v9, v10);
      swift_bridgeObjectRelease();
      uint64_t v34 = (void *)*((void *)&v45[0] + 1);
      v33._countAndFlagsBits = *(void *)&v45[0];
      strcpy((char *)v45, "Banner.");
      *((void *)&v45[0] + 1) = 0xE700000000000000;
      v33._object = v34;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      sub_100020428(v8, (uint64_t)v9, v10);
      return *(void *)&v45[0];
  }
}

uint64_t sub_10025BDB8()
{
  sub_1000B5558(0, 2, 0);
  unint64_t v1 = _swiftEmptyArrayStorage[2];
  unint64_t v0 = _swiftEmptyArrayStorage[3];
  int64_t v2 = v0 >> 1;
  unint64_t v3 = v1 + 1;
  if (v0 >> 1 <= v1)
  {
    sub_1000B5558(v0 > 1, v1 + 1, 1);
    unint64_t v0 = _swiftEmptyArrayStorage[3];
    int64_t v2 = v0 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v3;
  *((_WORD *)&_swiftEmptyArrayStorage[4] + v1) = 1;
  int64_t v4 = v1 + 2;
  if (v2 < v4) {
    sub_1000B5558(v0 > 1, v4, 1);
  }
  _swiftEmptyArrayStorage[2] = v4;
  *((_WORD *)&_swiftEmptyArrayStorage[4] + v3) = 0;
  sub_1000B5578(0, 2, 0);
  unint64_t v6 = _swiftEmptyArrayStorage[2];
  unint64_t v5 = _swiftEmptyArrayStorage[3];
  unint64_t v7 = v5 >> 1;
  unint64_t v8 = v6 + 1;
  if (v5 >> 1 <= v6)
  {
    sub_1000B5578(v5 > 1, v6 + 1, 1);
    unint64_t v5 = _swiftEmptyArrayStorage[3];
    unint64_t v7 = v5 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v8;
  unint64_t v9 = (char *)_swiftEmptyArrayStorage + 2 * v6;
  v9[32] = 0;
  v9[33] = 1;
  int64_t v10 = v6 + 2;
  if (v7 <= v8) {
    sub_1000B5578(v5 > 1, v10, 1);
  }
  _swiftEmptyArrayStorage[2] = v10;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage + 2 * v8;
  v11[32] = 0;
  v11[33] = 0;
  sub_10008D8DC((uint64_t)_swiftEmptyArrayStorage);
  sub_1000B5578(0, 2, 0);
  unint64_t v13 = _swiftEmptyArrayStorage[2];
  unint64_t v12 = _swiftEmptyArrayStorage[3];
  unint64_t v14 = v12 >> 1;
  unint64_t v15 = v13 + 1;
  if (v12 >> 1 <= v13)
  {
    sub_1000B5578(v12 > 1, v13 + 1, 1);
    unint64_t v12 = _swiftEmptyArrayStorage[3];
    unint64_t v14 = v12 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v15;
  unsigned __int8 v16 = (char *)_swiftEmptyArrayStorage + 2 * v13;
  v16[32] = 1;
  v16[33] = 1;
  int64_t v17 = v13 + 2;
  if (v14 <= v15) {
    sub_1000B5578(v12 > 1, v17, 1);
  }
  _swiftEmptyArrayStorage[2] = v17;
  unint64_t v18 = (char *)_swiftEmptyArrayStorage + 2 * v15;
  v18[32] = 1;
  v18[33] = 0;
  sub_10008D8DC((uint64_t)_swiftEmptyArrayStorage);
  sub_10025B258((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  sub_1000B5578(0, 2, 0);
  unint64_t v20 = _swiftEmptyArrayStorage[2];
  unint64_t v19 = _swiftEmptyArrayStorage[3];
  unint64_t v21 = v19 >> 1;
  unint64_t v22 = v20 + 1;
  if (v19 >> 1 <= v20)
  {
    sub_1000B5578(v19 > 1, v20 + 1, 1);
    unint64_t v19 = _swiftEmptyArrayStorage[3];
    unint64_t v21 = v19 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v22;
  uint64_t v23 = (char *)_swiftEmptyArrayStorage + 2 * v20;
  v23[32] = 0;
  v23[33] = 1;
  int64_t v24 = v20 + 2;
  if (v21 <= v22) {
    sub_1000B5578(v19 > 1, v24, 1);
  }
  _swiftEmptyArrayStorage[2] = v24;
  uint64_t v25 = (char *)_swiftEmptyArrayStorage + 2 * v22;
  v25[32] = 0;
  v25[33] = 0;
  sub_10008D8DC((uint64_t)_swiftEmptyArrayStorage);
  sub_1000B5578(0, 2, 0);
  unint64_t v27 = _swiftEmptyArrayStorage[2];
  unint64_t v26 = _swiftEmptyArrayStorage[3];
  unint64_t v28 = v26 >> 1;
  unint64_t v29 = v27 + 1;
  if (v26 >> 1 <= v27)
  {
    sub_1000B5578(v26 > 1, v27 + 1, 1);
    unint64_t v26 = _swiftEmptyArrayStorage[3];
    unint64_t v28 = v26 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v29;
  uint64_t v30 = (char *)_swiftEmptyArrayStorage + 2 * v27;
  v30[32] = 1;
  v30[33] = 1;
  if (v28 <= v29) {
    sub_1000B5578(v26 > 1, v27 + 2, 1);
  }
  _swiftEmptyArrayStorage[2] = v27 + 2;
  unint64_t v31 = (char *)_swiftEmptyArrayStorage + 2 * v29;
  v31[32] = 1;
  v31[33] = 0;
  sub_10008D8DC((uint64_t)_swiftEmptyArrayStorage);
  sub_10025B33C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  sub_1000B5558(0, 2, 0);
  unint64_t v33 = _swiftEmptyArrayStorage[2];
  unint64_t v32 = _swiftEmptyArrayStorage[3];
  int64_t v34 = v32 >> 1;
  unint64_t v35 = v33 + 1;
  if (v32 >> 1 <= v33)
  {
    sub_1000B5558(v32 > 1, v33 + 1, 1);
    unint64_t v32 = _swiftEmptyArrayStorage[3];
    int64_t v34 = v32 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v35;
  *((_WORD *)&_swiftEmptyArrayStorage[4] + v33) = 24576;
  int64_t v36 = v33 + 2;
  if (v34 < v36) {
    sub_1000B5558(v32 > 1, v36, 1);
  }
  _swiftEmptyArrayStorage[2] = v36;
  *((_WORD *)&_swiftEmptyArrayStorage[4] + v35) = 24577;
  uint64_t v37 = swift_bridgeObjectRetain();
  sub_10008D794(v37);
  uint64_t v38 = swift_bridgeObjectRetain();
  sub_10008D794(v38);
  uint64_t v39 = swift_bridgeObjectRetain();
  sub_10008D794(v39);
  uint64_t v40 = swift_bridgeObjectRetain();
  sub_10008D794(v40);
  uint64_t v41 = swift_bridgeObjectRetain();
  sub_10008D794(v41);
  uint64_t v42 = swift_bridgeObjectRetain();
  sub_10008D794(v42);
  sub_10000A38C(&qword_1003713E0);
  uint64_t result = swift_arrayDestroy();
  qword_1003ACBE8 = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

void sub_10025C348(uint64_t a1, unsigned int a2)
{
  switch((unsigned __int16)a2 >> 13)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      Swift::UInt v4 = a2 & 1;
      goto LABEL_9;
    case 2:
      Hasher._combine(_:)(3uLL);
      Swift::UInt v4 = a2 & 1;
LABEL_9:
      Hasher._combine(_:)(v4);
      int v3 = (a2 >> 8) & 1;
      goto LABEL_10;
    case 3:
      Hasher._combine(_:)(4uLL);
      Hasher._combine(_:)(a2 & 1);
      return;
    case 4:
      if ((unsigned __int16)a2 == 0x8000)
      {
        Hasher._combine(_:)(2uLL);
      }
      else if ((unsigned __int16)a2 == 32769)
      {
        Hasher._combine(_:)(5uLL);
      }
      else
      {
        Hasher._combine(_:)(6uLL);
      }
      return;
    default:
      Hasher._combine(_:)(0);
      LOBYTE(v3) = a2 & 1;
LABEL_10:
      Hasher._combine(_:)(v3);
      return;
  }
}

uint64_t sub_10025C438@<X0>(void *a1@<X8>)
{
  if (qword_10035A660 != -1) {
    swift_once();
  }
  *a1 = qword_1003ACBE8;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10025C4A4()
{
  return sub_10025B420(*v0);
}

BOOL sub_10025C4AC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10025D9B4(*a1, *a2);
}

Swift::Int sub_10025C4B8()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)();
  sub_10025C348((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_10025C500(uint64_t a1)
{
  sub_10025C348(a1, *v1);
}

Swift::Int sub_10025C508()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)();
  sub_10025C348((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_10025C54C(void *a1@<X8>)
{
  *a1 = &off_10031E530;
}

uint64_t sub_10025C564(uint64_t a1)
{
  uint64_t result = sub_10025CC24(&qword_1003713B8, (void (*)(uint64_t))type metadata accessor for ExperienceEvent);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10025C5BC()
{
  uint64_t v1 = type metadata accessor for NoticeEffect();
  __chkstk_darwin(v1 - 8);
  int v3 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ExperienceEffect(0);
  __chkstk_darwin(v4);
  unint64_t v6 = (unsigned __int8 *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006DDF4(v0, (uint64_t)v6, type metadata accessor for ExperienceEffect);
  unint64_t v7 = 0xD000000000000020;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      int v12 = *v6;
      unint64_t v38 = 0;
      unint64_t v39 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      unint64_t v38 = 0x767265536C6C6143;
      unint64_t v39 = 0xEF2E495573656369;
      if (v12) {
        unint64_t v13 = 0xD00000000000001DLL;
      }
      else {
        unint64_t v13 = 0xD000000000000019;
      }
      if (v12) {
        unint64_t v14 = 0x80000001002C7130;
      }
      else {
        unint64_t v14 = 0x80000001002C7150;
      }
      goto LABEL_35;
    case 2u:
      char v15 = *v6;
      unint64_t v38 = 0;
      unint64_t v39 = 0xE000000000000000;
      v16._countAndFlagsBits = 0x2E64726143;
      v16._object = (void *)0xE500000000000000;
      String.append(_:)(v16);
      sub_100117E28(v15);
      return v38;
    case 3u:
      int64_t v17 = *(void **)v6;
      unsigned __int8 v18 = v6[8];
      uint64_t v19 = *((void *)v6 + 2);
      unint64_t v38 = 0;
      unint64_t v39 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      uint64_t v42 = v38;
      unint64_t v43 = v39;
      v20._countAndFlagsBits = 0x50746E65746E6F43;
      v20._object = (void *)0xEF2E776569766572;
      String.append(_:)(v20);
      unint64_t v38 = (unint64_t)v17;
      LOBYTE(v39) = v18;
      uint64_t v40 = v19;
      _print_unlocked<A, B>(_:_:)();

      swift_release();
      return v42;
    case 4u:
      int v21 = *v6;
      unint64_t v38 = 0x2E636974706148;
      unint64_t v39 = 0xE700000000000000;
      switch(v21)
      {
        case 2:
          unint64_t v14 = 0xEB000000006B6369;
          unint64_t v13 = 0x6C43656C62756F64;
          goto LABEL_35;
        case 3:
          unint64_t v14 = 0xE400000000000000;
          unint64_t v13 = 2036427888;
          goto LABEL_35;
        case 4:
          unint64_t v14 = 0xE400000000000000;
          goto LABEL_17;
      }
      uint64_t v42 = 0x2D6B63696C63;
      unint64_t v43 = 0xE600000000000000;
      char v41 = v21 & 1;
      v35._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      goto LABEL_34;
    case 5u:
      int v22 = *v6;
      unint64_t v14 = 0xE400000000000000;
      unint64_t v38 = 778331468;
      unint64_t v39 = 0xE400000000000000;
      if (v22 == 2)
      {
        unint64_t v14 = 0xE500000000000000;
        unint64_t v13 = 0x6D6F6F6C62;
      }
      else if (v22 == 3)
      {
LABEL_17:
        unint64_t v13 = 1886352499;
      }
      else
      {
        char v33 = v22 & 1;
        uint64_t v42 = 0;
        unint64_t v43 = 0xE000000000000000;
        v34._countAndFlagsBits = 0x2D776F6C67;
        v34._object = (void *)0xE500000000000000;
        String.append(_:)(v34);
        char v41 = v33;
        _print_unlocked<A, B>(_:_:)();
LABEL_34:
        unint64_t v13 = v42;
        unint64_t v14 = v43;
      }
LABEL_35:
      unint64_t v36 = v14;
      String.append(_:)(*(Swift::String *)&v13);
LABEL_36:
      swift_bridgeObjectRelease();
      return v38;
    case 6u:
      sub_10025DAB8((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
      unint64_t v38 = 0x2E656369746F4ELL;
      unint64_t v39 = 0xE700000000000000;
      v23._countAndFlagsBits = sub_1001AE5A0();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      unint64_t v7 = v38;
      sub_10025AE54((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
      return v7;
    case 7u:
      int v25 = *v6;
      unint64_t v38 = 0;
      unint64_t v39 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      unint64_t v38 = 0xD00000000000001DLL;
      unint64_t v39 = 0x80000001002C7230;
      if (v25) {
        uint64_t v26 = 0x7373696D736964;
      }
      else {
        uint64_t v26 = 0x746E6573657270;
      }
      unint64_t v27 = 0xE700000000000000;
      String.append(_:)(*(Swift::String *)&v26);
      goto LABEL_36;
    case 8u:
      int v24 = *v6;
      unint64_t v38 = 0x7661776B636F6853;
      unint64_t v39 = 0xEA00000000002E65;
      if (v24)
      {
        if (v24 == 1)
        {
          unint64_t v13 = 0x7661776B636F6873;
          unint64_t v14 = 0xE900000000000065;
        }
        else
        {
          unint64_t v14 = 0xE700000000000000;
          unint64_t v13 = 0x7373696D736964;
        }
      }
      else
      {
        unint64_t v14 = 0xE400000000000000;
        unint64_t v13 = 1953393000;
      }
      goto LABEL_35;
    case 9u:
      unint64_t v28 = *(void **)v6;
      unint64_t v29 = *((void *)v6 + 1);
      uint64_t v30 = *((void *)v6 + 2);
      char v31 = v6[24];
      unint64_t v38 = 0x726566736E617254;
      unint64_t v39 = 0xE90000000000002ELL;
      v32._countAndFlagsBits = sub_100272398((uint64_t)v28, v29, v30, v31);
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      sub_100020358(v28, v29, v30, v31);
      return v38;
    case 0xAu:
      return v7;
    default:
      uint64_t v8 = *(void *)v6;
      uint64_t v9 = *((void *)v6 + 1);
      char v10 = v6[16];
      unint64_t v38 = 0x2E72656E6E6142;
      unint64_t v39 = 0xE700000000000000;
      v11._countAndFlagsBits = sub_1000DF3C0(v8, v9, v10);
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      sub_100020330(v8, v9, v10);
      return v38;
  }
}

uint64_t sub_10025CBCC(uint64_t a1)
{
  uint64_t result = sub_10025CC24(&qword_1003713C0, (void (*)(uint64_t))type metadata accessor for ExperienceEffect);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10025CC24(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10025CC70()
{
  unint64_t result = qword_1003713C8;
  if (!qword_1003713C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003713C8);
  }
  return result;
}

unint64_t sub_10025CCC4(uint64_t a1)
{
  unint64_t result = sub_10025CC70();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10025CCEC(uint64_t a1)
{
  unint64_t result = sub_10025CD14();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10025CD14()
{
  unint64_t result = qword_1003713D0;
  if (!qword_1003713D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003713D0);
  }
  return result;
}

uint64_t sub_10025CD68()
{
  return sub_100047AD0(&qword_1003713D8, &qword_1003713E0);
}

uint64_t sub_10025CD90(uint64_t a1, uint64_t a2)
{
  v118 = (char *)a1;
  uint64_t v3 = type metadata accessor for TransferEvent();
  __chkstk_darwin(v3 - 8);
  uint64_t v112 = (uint64_t)&v112 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ExperienceEvent(0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v115 = (uint64_t *)((char *)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v116 = (uint64_t)&v112 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v114 = (unsigned __int8 *)&v112 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v117 = (unsigned __int8 *)&v112 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  Swift::String v16 = (char *)&v112 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v113 = (uint64_t)&v112 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  int v21 = (unsigned __int8 *)&v112 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  int v24 = (unsigned __int8 *)&v112 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  unint64_t v27 = (long long *)((char *)&v112 - v26);
  __chkstk_darwin(v25);
  unint64_t v29 = (char *)&v112 - v28;
  uint64_t v30 = sub_10000A38C(&qword_1003713E8);
  uint64_t v31 = __chkstk_darwin(v30 - 8);
  char v33 = (char *)&v112 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v34 = &v33[*(int *)(v31 + 56)];
  sub_10006DDF4((uint64_t)v118, (uint64_t)v33, type metadata accessor for ExperienceEvent);
  sub_10006DDF4(a2, (uint64_t)v34, type metadata accessor for ExperienceEvent);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10006DDF4((uint64_t)v33, (uint64_t)v27, type metadata accessor for ExperienceEvent);
      sub_1000D84D4(v27, v119);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        sub_1000D84D4((long long *)v34, v120);
        uint64_t v38 = (uint64_t)v33;
        char v39 = sub_1000D80F8(v119, v120);
        uint64_t v40 = sub_100020430;
        sub_10025D970((uint64_t)v119, (void (*)(void, void, void, void, void, void, void, void))sub_100020430);
        char v41 = v120;
        goto LABEL_14;
      }
      uint64_t v85 = sub_100020430;
      goto LABEL_38;
    case 2u:
      sub_10006DDF4((uint64_t)v33, (uint64_t)v24, type metadata accessor for ExperienceEvent);
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_42;
      }
      int v42 = *v24;
      goto LABEL_22;
    case 3u:
      sub_10006DDF4((uint64_t)v33, (uint64_t)v21, type metadata accessor for ExperienceEvent);
      int v43 = *v21;
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_42;
      }
      int v44 = *v34;
      switch(v43)
      {
        case 5:
          if (v44 != 5) {
            goto LABEL_101;
          }
          goto LABEL_82;
        case 6:
          if (v44 != 6) {
            goto LABEL_101;
          }
          goto LABEL_82;
        case 7:
          if (v44 != 7) {
            goto LABEL_101;
          }
          goto LABEL_82;
        case 8:
          if (v44 != 8) {
            goto LABEL_101;
          }
          goto LABEL_82;
        case 9:
          if (v44 != 9) {
            goto LABEL_101;
          }
          goto LABEL_82;
        default:
          if ((v44 - 5) < 5) {
            goto LABEL_101;
          }
          if (v43 == 4)
          {
            if (v44 == 4) {
              goto LABEL_82;
            }
          }
          else if (v44 != 4 && v43 == v44)
          {
            goto LABEL_82;
          }
          break;
      }
      goto LABEL_101;
    case 4u:
      uint64_t v45 = v113;
      sub_10006DDF4((uint64_t)v33, v113, type metadata accessor for ExperienceEvent);
      sub_100174AE4(v45, (uint64_t)v119);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        sub_100174AE4((uint64_t)v34, (uint64_t)v120);
        uint64_t v38 = (uint64_t)v33;
        char v39 = sub_1001B1004((uint64_t)v119, (uint64_t)v120);
        uint64_t v40 = sub_10002052C;
        sub_10025D970((uint64_t)v120, (void (*)(void, void, void, void, void, void, void, void))sub_10002052C);
        char v41 = v119;
LABEL_14:
        sub_10025D970((uint64_t)v41, (void (*)(void, void, void, void, void, void, void, void))v40);
        goto LABEL_29;
      }
      uint64_t v85 = sub_10002052C;
LABEL_38:
      sub_10025D970((uint64_t)v119, (void (*)(void, void, void, void, void, void, void, void))v85);
      goto LABEL_42;
    case 5u:
      sub_10006DDF4((uint64_t)v33, (uint64_t)v16, type metadata accessor for ExperienceEvent);
      uint64_t v46 = v34;
      uint64_t v48 = *(void *)v16;
      uint64_t v47 = *((void *)v16 + 1);
      uint64_t v50 = *((void *)v16 + 2);
      uint64_t v49 = *((void *)v16 + 3);
      uint64_t v52 = *((void *)v16 + 4);
      uint64_t v51 = *((void *)v16 + 5);
      uint64_t v53 = *((void *)v16 + 6);
      int v54 = v16[56];
      if (swift_getEnumCaseMultiPayload() != 5)
      {
        sub_1000205C8(v48, v47, v50, v49, v52, v51, v53, v54);
        goto LABEL_42;
      }
      v118 = v33;
      uint64_t v56 = *(void *)v46;
      uint64_t v55 = *((void *)v46 + 1);
      uint64_t v57 = *((void *)v46 + 2);
      uint64_t v58 = *((void *)v46 + 3);
      uint64_t v59 = *((void *)v46 + 4);
      uint64_t v60 = *((void *)v46 + 5);
      uint64_t v61 = *((void *)v46 + 6);
      int v62 = v46[56];
      if (!v54)
      {
        uint64_t v91 = v48;
        uint64_t v92 = v55;
        uint64_t v93 = v47;
        uint64_t v94 = v57;
        uint64_t v95 = v50;
        uint64_t v96 = v58;
        uint64_t v97 = v49;
        uint64_t v98 = v59;
        uint64_t v99 = v52;
        uint64_t v100 = v60;
        uint64_t v101 = v51;
        uint64_t v102 = v61;
        sub_1000205C8(v91, v93, v95, v97, v99, v101, v53, 0);
        uint64_t v61 = v102;
        uint64_t v60 = v100;
        uint64_t v59 = v98;
        uint64_t v58 = v96;
        uint64_t v57 = v94;
        uint64_t v55 = v92;
        if (v62) {
          goto LABEL_96;
        }
LABEL_47:
        sub_1000205C8(v56, v55, v57, v58, v59, v60, v61, v54);
        goto LABEL_94;
      }
      if (v54 == 1)
      {
        uint64_t v63 = v48;
        uint64_t v64 = v55;
        uint64_t v65 = v47;
        uint64_t v66 = v57;
        uint64_t v67 = v50;
        uint64_t v68 = v58;
        uint64_t v69 = v49;
        uint64_t v70 = v59;
        uint64_t v71 = v52;
        uint64_t v72 = v60;
        uint64_t v73 = v51;
        uint64_t v74 = v61;
        sub_1000205C8(v63, v65, v67, v69, v71, v73, v53, 1);
        uint64_t v61 = v74;
        uint64_t v60 = v72;
        uint64_t v59 = v70;
        uint64_t v58 = v68;
        uint64_t v57 = v66;
        uint64_t v55 = v64;
        if (v62 != 1) {
          goto LABEL_96;
        }
        goto LABEL_47;
      }
      uint64_t v103 = v52 | v51 | v53;
      if (!(v50 | v47 | v48 | v49 | v103))
      {
        if (v62 != 2) {
          goto LABEL_96;
        }
        uint64_t v109 = v57 | v55 | v56 | v58;
        uint64_t v110 = v59 | v60 | v61;
LABEL_93:
        if (v109 | v110) {
          goto LABEL_96;
        }
LABEL_94:
        uint64_t v108 = (uint64_t)v118;
        goto LABEL_95;
      }
      uint64_t v104 = v50 | v47 | v49 | v103;
      if (v48 == 1 && !v104)
      {
        if (v62 != 2 || v56 != 1) {
          goto LABEL_96;
        }
        goto LABEL_92;
      }
      if (v48 == 2 && !v104)
      {
        if (v62 != 2 || v56 != 2) {
          goto LABEL_96;
        }
LABEL_92:
        uint64_t v109 = v57 | v55 | v58 | v59;
        uint64_t v110 = v60 | v61;
        goto LABEL_93;
      }
      if (v62 == 2 && v56 == 3) {
        goto LABEL_92;
      }
LABEL_96:
      sub_1000205C8(v56, v55, v57, v58, v59, v60, v61, v62);
      sub_10025AE54((uint64_t)v118, type metadata accessor for ExperienceEvent);
LABEL_43:
      char v39 = 0;
      return v39 & 1;
    case 6u:
      sub_10006DDF4((uint64_t)v33, (uint64_t)v117, type metadata accessor for ExperienceEvent);
      if (swift_getEnumCaseMultiPayload() != 6) {
        goto LABEL_42;
      }
      int v42 = *v117;
LABEL_22:
      uint64_t v75 = (uint64_t)v33;
      char v39 = v42 == *v34;
      sub_10025AE54(v75, type metadata accessor for ExperienceEvent);
      return v39 & 1;
    case 7u:
      unint64_t v76 = v114;
      sub_10006DDF4((uint64_t)v33, (uint64_t)v114, type metadata accessor for ExperienceEvent);
      unsigned int v77 = *v76;
      if (swift_getEnumCaseMultiPayload() != 7) {
        goto LABEL_42;
      }
      unsigned int v78 = *v34;
      switch(v77 >> 5)
      {
        case 1u:
          BOOL v79 = (v77 & 1) == 0;
          if ((v78 & 0xE0) != 0x20) {
            goto LABEL_101;
          }
          break;
        case 2u:
          BOOL v79 = (v77 & 1) == 0;
          if ((v78 & 0xE0) != 0x40) {
            goto LABEL_101;
          }
          break;
        case 3u:
          BOOL v79 = (v77 & 1) == 0;
          if ((v78 & 0xE0) != 0x60) {
            goto LABEL_101;
          }
          break;
        case 4u:
          BOOL v79 = (v77 & 1) == 0;
          if ((v78 & 0xE0) != 0x80) {
            goto LABEL_101;
          }
          break;
        case 5u:
          BOOL v79 = (v77 & 1) == 0;
          if ((v78 & 0xE0) != 0xA0) {
            goto LABEL_101;
          }
          break;
        default:
          BOOL v79 = (v77 & 1) == 0;
          if (v78 > 0x1F) {
            goto LABEL_101;
          }
          break;
      }
      if ((v79 ^ v78)) {
        goto LABEL_82;
      }
      goto LABEL_101;
    case 8u:
      uint64_t v80 = v116;
      sub_10006DDF4((uint64_t)v33, v116, type metadata accessor for ExperienceEvent);
      if (swift_getEnumCaseMultiPayload() != 8)
      {
        sub_10025AE54(v80, (uint64_t (*)(void))type metadata accessor for TransferEvent);
        goto LABEL_42;
      }
      uint64_t v81 = v112;
      sub_10025DAB8((uint64_t)v34, v112, (uint64_t (*)(void))type metadata accessor for TransferEvent);
      uint64_t v38 = (uint64_t)v33;
      char v39 = sub_100272E5C(v80, v81);
      sub_10025AE54(v81, (uint64_t (*)(void))type metadata accessor for TransferEvent);
      sub_10025AE54(v80, (uint64_t (*)(void))type metadata accessor for TransferEvent);
LABEL_29:
      sub_10025AE54(v38, type metadata accessor for ExperienceEvent);
      return v39 & 1;
    case 9u:
      uint64_t v82 = v115;
      sub_10006DDF4((uint64_t)v33, (uint64_t)v115, type metadata accessor for ExperienceEvent);
      uint64_t v83 = *v82;
      if (swift_getEnumCaseMultiPayload() != 9)
      {
        sub_10000BECC(v83);
        goto LABEL_42;
      }
      uint64_t v84 = *(void *)v34;
      switch(v83)
      {
        case 3:
          if (v84 == 3)
          {
LABEL_82:
            uint64_t v108 = (uint64_t)v33;
LABEL_95:
            sub_10025AE54(v108, type metadata accessor for ExperienceEvent);
            char v39 = 1;
            return v39 & 1;
          }
          break;
        case 2:
          if (v84 == 2) {
            goto LABEL_82;
          }
          break;
        case 1:
          if (v84 == 1) {
            goto LABEL_82;
          }
          break;
        default:
          char v105 = v33;
          unint64_t v106 = v84 - 1;
          sub_10000BECC(v84);
          sub_10000BECC(v83);
          BOOL v107 = v106 >= 3;
          char v33 = v105;
          if (v107) {
            goto LABEL_82;
          }
LABEL_101:
          sub_10025AE54((uint64_t)v33, type metadata accessor for ExperienceEvent);
          goto LABEL_43;
      }
      sub_10000BECC(v84);
      goto LABEL_101;
    case 0xAu:
      goto LABEL_42;
    default:
      sub_10006DDF4((uint64_t)v33, (uint64_t)v29, type metadata accessor for ExperienceEvent);
      uint64_t v35 = *(void *)v29;
      uint64_t v36 = *((void *)v29 + 1);
      char v37 = v29[16];
      if (!swift_getEnumCaseMultiPayload())
      {
        uint64_t v87 = *(void *)v34;
        uint64_t v88 = *((void *)v34 + 1);
        char v89 = v34[16];
        uint64_t v90 = (uint64_t)v33;
        char v39 = sub_1000DF5E8(v35, v36, v37, *(void *)v34, v88, v89);
        sub_100020428(v87, v88, v89);
        sub_100020428(v35, v36, v37);
        sub_10025AE54(v90, type metadata accessor for ExperienceEvent);
        return v39 & 1;
      }
      sub_100020428(v35, v36, v37);
LABEL_42:
      sub_10000D78C((uint64_t)v33, &qword_1003713E8);
      goto LABEL_43;
  }
}

uint64_t sub_10025D970(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

BOOL sub_10025D9B4(unsigned __int16 a1, unsigned __int16 a2)
{
  switch(a1 >> 13)
  {
    case 1:
      if ((a2 & 0xE000) != 0x2000) {
        return 0;
      }
      goto LABEL_13;
    case 2:
      if ((a2 & 0xE000) != 0x4000) {
        return 0;
      }
LABEL_13:
      int v3 = ((a1 & 0x100) == 0) ^ ((unsigned __int16)(a2 & 0x100) >> 8);
      if ((a2 ^ a1)) {
        LOBYTE(v3) = 0;
      }
      return v3 & 1;
    case 3:
      if ((a2 & 0xE000) != 0x6000) {
        return 0;
      }
      return ((a2 ^ a1) & 1) == 0;
    case 4:
      if (a1 == 0x8000) {
        return a2 == 0x8000;
      }
      if (a1 != 32769) {
        return a2 == 33024;
      }
      return a2 == 32769;
    default:
      if (a2 >= 0x2000u) {
        return 0;
      }
      return (((a1 & 1) == 0) ^ a2) & 1;
  }
}

uint64_t sub_10025DAB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10025DB20(uint64_t a1, unsigned char *a2)
{
  uint64_t v105 = a1;
  unint64_t v106 = a2;
  uint64_t v2 = type metadata accessor for NoticeEffect();
  __chkstk_darwin(v2 - 8);
  uint64_t v100 = (uint64_t)&v99 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ExperienceEffect(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v103 = (uint64_t)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v102 = (unsigned __int8 *)&v99 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v101 = (char *)&v99 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v104 = (uint64_t)&v99 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (unsigned __int8 *)&v99 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (unsigned __int8 *)&v99 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  int v21 = (void **)((char *)&v99 - v20);
  uint64_t v22 = __chkstk_darwin(v19);
  int v24 = (unsigned __int8 *)&v99 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  unint64_t v27 = (char *)&v99 - v26;
  __chkstk_darwin(v25);
  unint64_t v29 = (char *)&v99 - v28;
  uint64_t v30 = sub_10000A38C(&qword_1003713F0);
  uint64_t v31 = __chkstk_darwin(v30 - 8);
  char v33 = (char *)&v99 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = (uint64_t)&v33[*(int *)(v31 + 56)];
  sub_10006DDF4(v105, (uint64_t)v33, type metadata accessor for ExperienceEffect);
  uint64_t v35 = (uint64_t)v106;
  unint64_t v106 = (unsigned char *)v34;
  sub_10006DDF4(v35, v34, type metadata accessor for ExperienceEffect);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10006DDF4((uint64_t)v33, (uint64_t)v27, type metadata accessor for ExperienceEffect);
      uint64_t v40 = v106;
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_60;
      }
      char v41 = *v27;
      goto LABEL_49;
    case 2u:
      sub_10006DDF4((uint64_t)v33, (uint64_t)v24, type metadata accessor for ExperienceEffect);
      int v42 = *v24;
      int v43 = v106;
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_60;
      }
      int v44 = *v43;
      if (v42 == 5)
      {
        if (v44 != 5) {
          goto LABEL_110;
        }
        goto LABEL_120;
      }
      if (v44 == 5) {
        goto LABEL_110;
      }
      if (v42 == 4)
      {
LABEL_74:
        if (v44 != 4) {
          goto LABEL_110;
        }
        goto LABEL_120;
      }
      if (v42 == 3) {
        goto LABEL_72;
      }
      if ((v44 - 5) <= 0xFFFFFFFD && v42 == v44) {
        goto LABEL_120;
      }
      goto LABEL_110;
    case 3u:
      sub_10006DDF4((uint64_t)v33, (uint64_t)v21, type metadata accessor for ExperienceEffect);
      uint64_t v45 = *v21;
      uint64_t v46 = v21[2];
      uint64_t v47 = v106;
      if (swift_getEnumCaseMultiPayload() != 3)
      {

        swift_release();
        goto LABEL_60;
      }
      uint64_t v48 = *(void **)v47;
      uint64_t v49 = *((void *)v47 + 2);
      swift_retain();
      id v50 = v45;
      swift_retain();
      id v51 = v48;
      if (![v50 isEqual:v51]) {
        goto LABEL_65;
      }
      if (v46)
      {
        if (v49)
        {
          swift_retain();
          swift_retain();
          char v52 = static UUID.== infix(_:_:)();

          swift_release();
          swift_release();
          if (v52)
          {
LABEL_79:

            swift_release_n();
            swift_release_n();
LABEL_120:
            sub_10025AE54((uint64_t)v33, type metadata accessor for ExperienceEffect);
            char v66 = 1;
            return v66 & 1;
          }
        }
        else
        {
LABEL_65:
        }
      }
      else
      {

        if (!v49) {
          goto LABEL_79;
        }
      }

      swift_release_n();
      swift_release_n();
      goto LABEL_110;
    case 4u:
      sub_10006DDF4((uint64_t)v33, (uint64_t)v18, type metadata accessor for ExperienceEffect);
      int v53 = *v18;
      int v54 = v106;
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_60;
      }
      int v44 = *v54;
      switch(v53)
      {
        case 2:
          goto LABEL_67;
        case 3:
          goto LABEL_72;
        case 4:
          goto LABEL_74;
      }
      if ((v44 - 2) >= 3 && ((v44 ^ v53) & 1) == 0) {
        goto LABEL_120;
      }
      goto LABEL_110;
    case 5u:
      sub_10006DDF4((uint64_t)v33, (uint64_t)v15, type metadata accessor for ExperienceEffect);
      int v55 = *v15;
      uint64_t v56 = v106;
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_60;
      }
      int v44 = *v56;
      if (v55 == 2)
      {
LABEL_67:
        if (v44 != 2) {
          goto LABEL_110;
        }
      }
      else if (v55 == 3)
      {
LABEL_72:
        if (v44 != 3) {
          goto LABEL_110;
        }
      }
      else
      {
        if ((v44 & 0xFE) == 2) {
          goto LABEL_110;
        }
        if (v55) {
          uint64_t v57 = 0x746C7561666564;
        }
        else {
          uint64_t v57 = 0x6F69746163756465;
        }
        if (v55) {
          unint64_t v58 = 0xE700000000000000;
        }
        else {
          unint64_t v58 = 0xE90000000000006ELL;
        }
        if (v44) {
          uint64_t v59 = 0x746C7561666564;
        }
        else {
          uint64_t v59 = 0x6F69746163756465;
        }
        if (v44) {
          unint64_t v60 = 0xE700000000000000;
        }
        else {
          unint64_t v60 = 0xE90000000000006ELL;
        }
        if (v57 == v59 && v58 == v60)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v62 & 1) == 0) {
            goto LABEL_110;
          }
        }
      }
      goto LABEL_120;
    case 6u:
      uint64_t v63 = v104;
      sub_10006DDF4((uint64_t)v33, v104, type metadata accessor for ExperienceEffect);
      uint64_t v64 = (uint64_t)v106;
      if (swift_getEnumCaseMultiPayload() != 6)
      {
        sub_10025AE54(v63, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
        goto LABEL_60;
      }
      uint64_t v65 = v100;
      sub_10025DAB8(v64, v100, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
      char v66 = sub_1001B1514(v63, v65);
      sub_10025AE54(v65, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
      sub_10025AE54(v63, (uint64_t (*)(void))type metadata accessor for NoticeEffect);
LABEL_52:
      sub_10025AE54((uint64_t)v33, type metadata accessor for ExperienceEffect);
      return v66 & 1;
    case 7u:
      uint64_t v67 = v101;
      sub_10006DDF4((uint64_t)v33, (uint64_t)v101, type metadata accessor for ExperienceEffect);
      uint64_t v40 = v106;
      if (swift_getEnumCaseMultiPayload() != 7) {
        goto LABEL_60;
      }
      char v41 = *v67;
LABEL_49:
      char v68 = v41 ^ *v40;
      sub_10025AE54((uint64_t)v33, type metadata accessor for ExperienceEffect);
      char v66 = v68 ^ 1;
      return v66 & 1;
    case 8u:
      uint64_t v69 = v102;
      sub_10006DDF4((uint64_t)v33, (uint64_t)v102, type metadata accessor for ExperienceEffect);
      uint64_t v70 = v106;
      if (swift_getEnumCaseMultiPayload() != 8) {
        goto LABEL_60;
      }
      char v66 = *v69 == *v70;
      goto LABEL_52;
    case 9u:
      uint64_t v71 = v103;
      sub_10006DDF4((uint64_t)v33, v103, type metadata accessor for ExperienceEffect);
      uint64_t v72 = *(void **)v71;
      unint64_t v73 = *(void *)(v71 + 8);
      uint64_t v74 = *(void *)(v71 + 16);
      char v75 = *(unsigned char *)(v71 + 24);
      unint64_t v76 = v106;
      if (swift_getEnumCaseMultiPayload() == 9)
      {
        unsigned int v77 = *(void **)v76;
        unint64_t v78 = *((void *)v76 + 1);
        uint64_t v79 = *((void *)v76 + 2);
        uint64_t v80 = v76;
        uint64_t v81 = (uint64_t)v33;
        char v82 = v80[24];
        char v66 = sub_1002732F0((uint64_t)v72, v73, v74, v75, (uint64_t)v77, v78, v79, v82);
        sub_100020358(v77, v78, v79, v82);
        sub_100020358(v72, v73, v74, v75);
        sub_10025AE54(v81, type metadata accessor for ExperienceEffect);
        return v66 & 1;
      }
      sub_100020358(v72, v73, v74, v75);
      goto LABEL_60;
    case 0xAu:
      if (swift_getEnumCaseMultiPayload() == 10) {
        goto LABEL_120;
      }
      goto LABEL_60;
    default:
      sub_10006DDF4((uint64_t)v33, (uint64_t)v29, type metadata accessor for ExperienceEffect);
      uint64_t v36 = *(uint64_t *)v29;
      uint64_t v37 = *((void *)v29 + 1);
      char v38 = v29[16];
      char v39 = v106;
      if (!swift_getEnumCaseMultiPayload())
      {
        uint64_t v83 = *(uint64_t *)v39;
        uint64_t v84 = *((void *)v39 + 1);
        int v85 = (char)v39[16];
        if (v38 < 0)
        {
          if (v85 < 0)
          {
            int v89 = v85 & 0x7F;
            switch(v38 & 0x7F)
            {
              case 1:
                if (v89 == 1) {
                  goto LABEL_103;
                }
                goto LABEL_105;
              case 2:
                if (v89 != 2) {
                  goto LABEL_105;
                }
                if (!v37)
                {
                  sub_100020330(v36, 0, v38);
                  if (!v84) {
                    goto LABEL_120;
                  }
                  uint64_t v93 = v36;
                  uint64_t v94 = 0;
                  goto LABEL_106;
                }
                if (!v84)
                {
                  sub_100020330(v36, v37, v38);
                  uint64_t v86 = v83;
                  uint64_t v87 = 0;
                  goto LABEL_108;
                }
                if (v36 == v83 && v37 == v84)
                {
                  sub_100020330(v36, v37, v38);
                  uint64_t v97 = v36;
                  uint64_t v98 = v37;
LABEL_119:
                  sub_100020330(v97, v98, v85);
                }
                else
                {
                  char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  sub_100020330(v36, v37, v38);
                  sub_100020330(v83, v84, v85);
                  if ((v92 & 1) == 0) {
                    goto LABEL_110;
                  }
                }
                goto LABEL_120;
              case 3:
                if (v89 != 3) {
                  goto LABEL_105;
                }
LABEL_103:
                sub_100020330(v36, v37, v38);
                sub_100020330(v83, v84, v85);
                if ((((v36 & 1) == 0) ^ v83)) {
                  goto LABEL_120;
                }
                goto LABEL_110;
              case 4:
                sub_100020330(v36, v37, v38);
                if (v89 != 4 || (v84 | v83) != 0) {
                  goto LABEL_107;
                }
                uint64_t v97 = 0;
                uint64_t v98 = 0;
                goto LABEL_119;
              default:
                if ((v85 & 0x7F) != 0)
                {
LABEL_105:
                  uint64_t v93 = v36;
                  uint64_t v94 = v37;
LABEL_106:
                  sub_100020330(v93, v94, v38);
                  goto LABEL_107;
                }
                sub_100020330(v36, v37, v38);
                sub_100020330(v83, v84, v85);
                if (*(double *)&v36 == *(double *)&v83) {
                  goto LABEL_120;
                }
                break;
            }
            goto LABEL_110;
          }
          uint64_t v86 = v36;
          uint64_t v87 = v37;
          char v88 = v38;
        }
        else
        {
          if ((v85 & 0x80000000) == 0)
          {
            if (v83 == v36) {
              goto LABEL_120;
            }
            goto LABEL_110;
          }
LABEL_107:
          uint64_t v86 = v83;
          uint64_t v87 = v84;
LABEL_108:
          char v88 = v85;
        }
        sub_100020330(v86, v87, v88);
LABEL_110:
        sub_10025AE54((uint64_t)v33, type metadata accessor for ExperienceEffect);
        goto LABEL_111;
      }
      sub_100020330(v36, v37, v38);
LABEL_60:
      sub_10000D78C((uint64_t)v33, &qword_1003713F0);
LABEL_111:
      char v66 = 0;
      return v66 & 1;
  }
}

unsigned char *storeEnumTagSinglePayload for PendingState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10025E794);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PendingState()
{
  return &type metadata for PendingState;
}

unint64_t sub_10025E7CC(uint64_t a1)
{
  unint64_t result = sub_10025E7F4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10025E7F4()
{
  unint64_t result = qword_1003713F8;
  if (!qword_1003713F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003713F8);
  }
  return result;
}

uint64_t sub_10025E848()
{
  return sub_100047AD0(&qword_100371400, &qword_100371408);
}

unint64_t sub_10025E874()
{
  unint64_t result = qword_100371410;
  if (!qword_100371410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100371410);
  }
  return result;
}

uint64_t sub_10025E8CC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001D790(v0, qword_100371418);
  sub_10001D758(v0, (uint64_t)qword_100371418);
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for ShareableContentResolverState()
{
  return self;
}

uint64_t sub_10025E974()
{
  uint64_t v0 = sub_10000A38C(&qword_100371588);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_100371590);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = 0;
  sub_10000A38C((uint64_t *)&unk_10036C080);
  Just.init(_:)();
  sub_10000A38C((uint64_t *)&unk_100365D60);
  Just.setFailureType<A>(to:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_10025EC54();
  uint64_t v8 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t sub_10025EB30()
{
  uint64_t v1 = v0;
  if (qword_10035A668 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10001D758(v2, (uint64_t)qword_100371418);
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deinit", v5, 2u);
    swift_slowDealloc();
  }

  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v1);
}

uint64_t type metadata accessor for ShareableContentResolver()
{
  return self;
}

unint64_t sub_10025EC54()
{
  unint64_t result = qword_100371598;
  if (!qword_100371598)
  {
    sub_10000A3D0(&qword_100371590);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100371598);
  }
  return result;
}

uint64_t sub_10025ECB0(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

void *sub_10025ECC0()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = &_swiftEmptyDictionarySingleton;
  uint64_t v16 = &_s31LockscreenControlsAppearedEventVN;
  uint64_t v5 = swift_allocObject();
  uint64_t v15 = v5;
  long long v6 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v5 + 96) = v6;
  *(void *)(v5 + 112) = *(void *)(v0 + 96);
  long long v7 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v5 + 32) = v7;
  long long v8 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v5 + 64) = v8;
  sub_1002102F4(v0);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v14 = &v17;
  uint64_t v11 = sub_100266B28;
  uint64_t v12 = &v13;
  dispatch thunk of _AnySequenceBox._forEach(_:)();
  swift_release();
  return v17;
}

void *sub_10025EE38()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v13 = &_swiftEmptyDictionarySingleton;
  uint64_t v12 = &_s13CardPresentedVN;
  uint64_t v11 = swift_allocObject();
  memcpy((void *)(v11 + 16), v0, 0x141uLL);
  sub_1002664D0((uint64_t)v0);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v10 = &v13;
  long long v7 = sub_1002665C8;
  long long v8 = &v9;
  dispatch thunk of _AnySequenceBox._forEach(_:)();
  swift_release();
  return v13;
}

void *sub_10025EFA4()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v13 = &_swiftEmptyDictionarySingleton;
  uint64_t v12 = &_s13HintPresentedVN;
  uint64_t v11 = swift_allocObject();
  memcpy((void *)(v11 + 16), v0, 0x139uLL);
  sub_100266190((uint64_t)v0);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v10 = &v13;
  long long v7 = sub_10026629C;
  long long v8 = &v9;
  dispatch thunk of _AnySequenceBox._forEach(_:)();
  swift_release();
  return v13;
}

void *sub_10025F110()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = &_swiftEmptyDictionarySingleton;
  uint64_t v18 = &_s17TransferCompletedVN;
  uint64_t v5 = swift_allocObject();
  uint64_t v17 = v5;
  long long v6 = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v5 + 144) = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v5 + 160) = v6;
  *(_OWORD *)(v5 + 176) = *(_OWORD *)(v0 + 160);
  *(unsigned char *)(v5 + 192) = *(unsigned char *)(v0 + 176);
  long long v7 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v5 + 96) = v7;
  long long v8 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v5 + 112) = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v5 + 128) = v8;
  long long v9 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v5 + 32) = v9;
  long long v10 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v5 + 64) = v10;
  sub_1002666AC(v0);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v16 = &v19;
  char v13 = sub_100266774;
  uint64_t v14 = &v15;
  dispatch thunk of _AnySequenceBox._forEach(_:)();
  swift_release();
  return v19;
}

void *sub_10025F2A0()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = &_swiftEmptyDictionarySingleton;
  uint64_t v18 = &_s18EducationPresentedVN;
  uint64_t v5 = (_OWORD *)swift_allocObject();
  uint64_t v17 = v5;
  long long v6 = v0[9];
  v5[9] = v0[8];
  v5[10] = v6;
  v5[11] = v0[10];
  long long v7 = v0[5];
  v5[5] = v0[4];
  v5[6] = v7;
  long long v8 = v0[7];
  void v5[7] = v0[6];
  v5[8] = v8;
  long long v9 = v0[1];
  v5[1] = *v0;
  uint64_t v5[2] = v9;
  long long v10 = v0[3];
  void v5[3] = v0[2];
  uint64_t v5[4] = v10;
  sub_100266368((uint64_t)v0);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v16 = &v19;
  char v13 = sub_100266460;
  uint64_t v14 = &v15;
  dispatch thunk of _AnySequenceBox._forEach(_:)();
  swift_release();
  return v19;
}

void *sub_10025F428()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = &_swiftEmptyDictionarySingleton;
  uint64_t v18 = &_s23HandoffSessionCompletedVN;
  uint64_t v5 = swift_allocObject();
  uint64_t v17 = v5;
  long long v6 = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v5 + 144) = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v5 + 160) = v6;
  *(_OWORD *)(v5 + 176) = *(_OWORD *)(v0 + 160);
  *(unsigned char *)(v5 + 192) = *(unsigned char *)(v0 + 176);
  long long v7 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v5 + 96) = v7;
  long long v8 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v5 + 112) = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v5 + 128) = v8;
  long long v9 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v5 + 32) = v9;
  long long v10 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v5 + 64) = v10;
  sub_10026680C(v0);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v16 = &v19;
  char v13 = sub_1002668A4;
  uint64_t v14 = &v15;
  dispatch thunk of _AnySequenceBox._forEach(_:)();
  swift_release();
  return v19;
}

void sub_10025F5B8()
{
  uint64_t v1 = v0;
  if (sub_100029958(0, (uint64_t)&off_10031D6B0))
  {
    v2._countAndFlagsBits = sub_100261628();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    id v3 = sub_1001E9D0C();
    swift_bridgeObjectRetain();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 ulog:v4 message:0x20676E69646E6553, 0xE800000000000000];
    swift_bridgeObjectRelease();

    NSString v5 = String._bridgeToObjectiveC()();
    uint64_t v6 = swift_allocObject();
    memcpy((void *)(v6 + 16), v1, 0x141uLL);
    v13[4] = sub_100266494;
    v13[5] = v6;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    void v13[2] = sub_1002642B0;
    v13[3] = &unk_100336F20;
    long long v7 = _Block_copy(v13);
    sub_1002664D0((uint64_t)v1);
    swift_release();
    char v8 = AnalyticsSendEventLazy();
    _Block_release(v7);

    if (v8) {
      return;
    }
    sub_10014ABC0();
    swift_allocError();
    uint64_t v10 = 2;
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    id v11 = sub_1001E9D0C();
    NSString v12 = String._bridgeToObjectiveC()();
    [v11 ulog:40 message:v12];

    sub_10014ABC0();
    swift_allocError();
    uint64_t v10 = 3;
  }
  *long long v9 = 0;
  v9[1] = v10;
  swift_willThrow();
}

void sub_10025F834()
{
  uint64_t v1 = v0;
  if (sub_100029958(0, (uint64_t)&off_10031D6D8))
  {
    v2._countAndFlagsBits = sub_1002613D0();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    id v3 = sub_1001EA0C0();
    swift_bridgeObjectRetain();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 ulog:v4 message:0x20676E69646E6553, 0xE800000000000000];
    swift_bridgeObjectRelease();

    NSString v5 = String._bridgeToObjectiveC()();
    uint64_t v6 = (_OWORD *)swift_allocObject();
    long long v7 = v1[9];
    v6[9] = v1[8];
    v6[10] = v7;
    v6[11] = v1[10];
    long long v8 = v1[5];
    v6[5] = v1[4];
    v6[6] = v8;
    long long v9 = v1[7];
    v6[7] = v1[6];
    v6[8] = v9;
    long long v10 = v1[1];
    v6[1] = *v1;
    v6[2] = v10;
    long long v11 = v1[3];
    v6[3] = v1[2];
    v6[4] = v11;
    void v18[4] = sub_10026630C;
    v18[5] = v6;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    void v18[2] = sub_1002642B0;
    v18[3] = &unk_100336EA8;
    NSString v12 = _Block_copy(v18);
    sub_100266368((uint64_t)v1);
    swift_release();
    char v13 = AnalyticsSendEventLazy();
    _Block_release(v12);

    if (v13) {
      return;
    }
    sub_10014ABC0();
    swift_allocError();
    uint64_t v15 = 2;
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    id v16 = sub_1001EA0C0();
    NSString v17 = String._bridgeToObjectiveC()();
    [v16 ulog:40 message:v17];

    sub_10014ABC0();
    swift_allocError();
    uint64_t v15 = 3;
  }
  void *v14 = 0;
  v14[1] = v15;
  swift_willThrow();
}

void sub_10025FACC()
{
  uint64_t v1 = v0;
  if (sub_100029958(0, (uint64_t)&off_10031D700))
  {
    v2._countAndFlagsBits = sub_100261570();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    id v3 = sub_1001E9E48();
    swift_bridgeObjectRetain();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 ulog:40 message:v4 string:@"Snide"];
    swift_bridgeObjectRelease();

    NSString v5 = String._bridgeToObjectiveC()();
    uint64_t v6 = swift_allocObject();
    memcpy((void *)(v6 + 16), v1, 0x139uLL);
    v13[4] = sub_10026613C;
    v13[5] = v6;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    void v13[2] = sub_1002642B0;
    v13[3] = &unk_100336E30;
    long long v7 = _Block_copy(v13);
    sub_100266190((uint64_t)v1);
    swift_release();
    char v8 = AnalyticsSendEventLazy();
    _Block_release(v7);

    if (v8) {
      return;
    }
    sub_10014ABC0();
    swift_allocError();
    uint64_t v10 = 2;
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    id v11 = sub_1001E9E48();
    NSString v12 = String._bridgeToObjectiveC()();
    [v11 ulog:40 message:v12];

    sub_10014ABC0();
    swift_allocError();
    uint64_t v10 = 3;
  }
  *long long v9 = 0;
  v9[1] = v10;
  swift_willThrow();
}

void sub_10025FD48()
{
  uint64_t v1 = v0;
  if (sub_100029958(0, (uint64_t)&off_10031D728))
  {
    v2._countAndFlagsBits = sub_1002614B8(0xD000000000000042, 0x80000001002C7810, (void (*)(uint64_t))sub_10025F428);
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    id v3 = sub_1001EA474();
    swift_bridgeObjectRetain();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 ulog:v4 message:0x20676E69646E6553 0xE800000000000000];
    swift_bridgeObjectRelease();

    NSString v5 = String._bridgeToObjectiveC()();
    uint64_t v6 = swift_allocObject();
    long long v7 = *(_OWORD *)(v1 + 144);
    *(_OWORD *)(v6 + 144) = *(_OWORD *)(v1 + 128);
    *(_OWORD *)(v6 + 160) = v7;
    *(_OWORD *)(v6 + 176) = *(_OWORD *)(v1 + 160);
    *(unsigned char *)(v6 + 192) = *(unsigned char *)(v1 + 176);
    long long v8 = *(_OWORD *)(v1 + 80);
    *(_OWORD *)(v6 + 80) = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v6 + 96) = v8;
    long long v9 = *(_OWORD *)(v1 + 112);
    *(_OWORD *)(v6 + 112) = *(_OWORD *)(v1 + 96);
    *(_OWORD *)(v6 + 128) = v9;
    long long v10 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v6 + 16) = *(_OWORD *)v1;
    *(_OWORD *)(v6 + 32) = v10;
    long long v11 = *(_OWORD *)(v1 + 48);
    *(_OWORD *)(v6 + 48) = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v6 + 64) = v11;
    void v18[4] = sub_1002667A8;
    v18[5] = v6;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    void v18[2] = sub_1002642B0;
    v18[3] = &unk_100337038;
    NSString v12 = _Block_copy(v18);
    sub_10026680C(v1);
    swift_release();
    char v13 = AnalyticsSendEventLazy();
    _Block_release(v12);

    if (v13) {
      return;
    }
    sub_10014ABC0();
    swift_allocError();
    uint64_t v15 = 2;
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    id v16 = sub_1001EA474();
    NSString v17 = String._bridgeToObjectiveC()();
    [v16 ulog:40 message:v17];

    sub_10014ABC0();
    swift_allocError();
    uint64_t v15 = 3;
  }
  void *v14 = 0;
  v14[1] = v15;
  swift_willThrow();
}

void sub_100260018(char a1)
{
  if (sub_100029958(0, (uint64_t)&off_10031DBA8))
  {
    v2._countAndFlagsBits = sub_100261024(a1);
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    id v3 = sub_1001EA338();
    swift_bridgeObjectRetain();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 ulog:v4 message:0x20676E69646E6553 0xE800000000000000];
    swift_bridgeObjectRelease();

    NSString v5 = String._bridgeToObjectiveC()();
    uint64_t v6 = swift_allocObject();
    *(unsigned char *)(v6 + 16) = a1;
    v13[4] = sub_1002668E4;
    v13[5] = v6;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    void v13[2] = sub_1002642B0;
    v13[3] = &unk_1003370B0;
    long long v7 = _Block_copy(v13);
    swift_release();
    char v8 = AnalyticsSendEventLazy();
    _Block_release(v7);

    if (v8) {
      return;
    }
    sub_10014ABC0();
    swift_allocError();
    uint64_t v10 = 2;
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    id v11 = sub_1001EA338();
    NSString v12 = String._bridgeToObjectiveC()();
    [v11 ulog:v12 message:0xE000000000000000];

    sub_10014ABC0();
    swift_allocError();
    uint64_t v10 = 3;
  }
  *long long v9 = 0;
  v9[1] = v10;
  swift_willThrow();
}

void sub_100260278()
{
  uint64_t v1 = v0;
  if (sub_100029958(0, (uint64_t)&off_10031DBD0))
  {
    v2._countAndFlagsBits = sub_1002611E8();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    id v3 = sub_1001EA1FC();
    swift_bridgeObjectRetain();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 ulog:v4 message:0x20676E69646E6553, 0xE800000000000000];
    swift_bridgeObjectRelease();

    NSString v5 = String._bridgeToObjectiveC()();
    uint64_t v6 = (_OWORD *)swift_allocObject();
    long long v7 = v1[1];
    v6[1] = *v1;
    v6[2] = v7;
    *(_OWORD *)((char *)v6 + 42) = *(_OWORD *)((char *)v1 + 26);
    v14[4] = sub_10026692C;
    void v14[5] = v6;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    void v14[2] = sub_1002642B0;
    v14[3] = &unk_100337100;
    char v8 = _Block_copy(v14);
    swift_release();
    char v9 = AnalyticsSendEventLazy();
    _Block_release(v8);

    if (v9) {
      return;
    }
    sub_10014ABC0();
    swift_allocError();
    uint64_t v11 = 2;
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    id v12 = sub_1001EA1FC();
    NSString v13 = String._bridgeToObjectiveC()();
    [v12 ulog:40 message:v13];

    sub_10014ABC0();
    swift_allocError();
    uint64_t v11 = 3;
  }
  *uint64_t v10 = 0;
  v10[1] = v11;
  swift_willThrow();
}

void sub_1002604E4()
{
  uint64_t v1 = v0;
  if (sub_100029958(0, (uint64_t)&off_10031DBF8))
  {
    v2._countAndFlagsBits = sub_1002614B8(0xD00000000000003BLL, 0x80000001002C7720, (void (*)(uint64_t))sub_10025F110);
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    id v3 = sub_1001E9F84();
    swift_bridgeObjectRetain();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 ulog:40 message:v4 string:@"Shutdown"];
    swift_bridgeObjectRelease();

    NSString v5 = String._bridgeToObjectiveC()();
    uint64_t v6 = swift_allocObject();
    long long v7 = *(_OWORD *)(v1 + 144);
    *(_OWORD *)(v6 + 144) = *(_OWORD *)(v1 + 128);
    *(_OWORD *)(v6 + 160) = v7;
    *(_OWORD *)(v6 + 176) = *(_OWORD *)(v1 + 160);
    *(unsigned char *)(v6 + 192) = *(unsigned char *)(v1 + 176);
    long long v8 = *(_OWORD *)(v1 + 80);
    *(_OWORD *)(v6 + 80) = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v6 + 96) = v8;
    long long v9 = *(_OWORD *)(v1 + 112);
    *(_OWORD *)(v6 + 112) = *(_OWORD *)(v1 + 96);
    *(_OWORD *)(v6 + 128) = v9;
    long long v10 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v6 + 16) = *(_OWORD *)v1;
    *(_OWORD *)(v6 + 32) = v10;
    long long v11 = *(_OWORD *)(v1 + 48);
    *(_OWORD *)(v6 + 48) = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v6 + 64) = v11;
    void v18[4] = sub_100266648;
    v18[5] = v6;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    void v18[2] = sub_1002642B0;
    v18[3] = &unk_100336FC0;
    id v12 = _Block_copy(v18);
    sub_1002666AC(v1);
    swift_release();
    char v13 = AnalyticsSendEventLazy();
    _Block_release(v12);

    if (v13) {
      return;
    }
    sub_10014ABC0();
    swift_allocError();
    uint64_t v15 = 2;
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    id v16 = sub_1001E9F84();
    NSString v17 = String._bridgeToObjectiveC()();
    [v16 ulog:40 message:v17];

    sub_10014ABC0();
    swift_allocError();
    uint64_t v15 = 3;
  }
  void *v14 = 0;
  v14[1] = v15;
  swift_willThrow();
}

void sub_1002607B4()
{
  uint64_t v1 = v0;
  if (qword_10035A5F8 != -1) {
    swift_once();
  }
  if (sub_100029958(0, qword_1003ACA80))
  {
    v2._countAndFlagsBits = sub_100260DEC();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    id v3 = sub_1001EABFC();
    swift_bridgeObjectRetain();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 ulog:40 message:v4 string:@"Snide"];
    swift_bridgeObjectRelease();

    NSString v5 = String._bridgeToObjectiveC()();
    v16[0] = *v1;
    *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)v1 + 9);
    v15[0] = v1[2];
    *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)((char *)v1 + 41);
    uint64_t v6 = (_OWORD *)swift_allocObject();
    long long v7 = v1[1];
    v6[1] = *v1;
    v6[2] = v7;
    v6[3] = v1[2];
    *(_OWORD *)((char *)v6 + 57) = *(_OWORD *)((char *)v1 + 41);
    v14[4] = sub_1002669E0;
    void v14[5] = v6;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    void v14[2] = sub_1002642B0;
    v14[3] = &unk_100337178;
    long long v8 = _Block_copy(v14);
    sub_100095C18((uint64_t)v16);
    sub_100095C18((uint64_t)v15);
    swift_release();
    char v9 = AnalyticsSendEventLazy();
    _Block_release(v8);

    if (v9) {
      return;
    }
    sub_10014ABC0();
    swift_allocError();
    uint64_t v11 = 2;
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    id v12 = sub_1001EABFC();
    NSString v13 = String._bridgeToObjectiveC()();
    [v12 ulog:v13 message:0, 0xE000000000000000];

    sub_10014ABC0();
    swift_allocError();
    uint64_t v11 = 3;
  }
  *long long v10 = 0;
  v10[1] = v11;
  swift_willThrow();
}

void sub_100260A8C()
{
  uint64_t v1 = v0;
  if (sub_100029958(0, (uint64_t)&off_10031DB30))
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
    sub_1002102F4(v0);
    Swift::String v2 = sub_10025ECC0();
    uint64_t v3 = sub_10014AC1C(v1);
    __chkstk_darwin(v3);
    sub_10014AA08((uint64_t)v2, (void (*)(uint64_t, uint64_t, id))sub_10014AC14);
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    void aBlock[6] = 0xD000000000000046;
    aBlock[7] = 0x80000001002C01D0;
    uint64_t v4 = v22;
    NSString v5 = (void *)v23;
    swift_bridgeObjectRetain();
    v6._countAndFlagsBits = v4;
    v6._object = v5;
    String.append(_:)(v6);
    swift_bridgeObjectRelease_n();
    v7._countAndFlagsBits = 0xD000000000000046;
    v7._object = (void *)0x80000001002C01D0;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    id v8 = sub_1001E9BD0();
    swift_bridgeObjectRetain();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v8 ulog:v9 message:@"Snippet" error:0xE800000000000000];
    swift_bridgeObjectRelease();

    NSString v10 = String._bridgeToObjectiveC()();
    uint64_t v11 = swift_allocObject();
    long long v12 = *(_OWORD *)(v1 + 80);
    *(_OWORD *)(v11 + 80) = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v11 + 96) = v12;
    *(void *)(v11 + 112) = *(void *)(v1 + 96);
    long long v13 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v11 + 16) = *(_OWORD *)v1;
    *(_OWORD *)(v11 + 32) = v13;
    long long v14 = *(_OWORD *)(v1 + 48);
    *(_OWORD *)(v11 + 48) = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v11 + 64) = v14;
    aBlock[4] = sub_100266A88;
    aBlock[5] = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002642B0;
    aBlock[3] = &unk_1003371C8;
    uint64_t v15 = _Block_copy(aBlock);
    sub_1002102F4(v1);
    swift_release();
    char v16 = AnalyticsSendEventLazy();
    _Block_release(v15);

    if (v16) {
      return;
    }
    sub_10014ABC0();
    swift_allocError();
    uint64_t v18 = 2;
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    id v19 = sub_1001E9BD0();
    NSString v20 = String._bridgeToObjectiveC()();
    [v19 ulog:40 message:v20];

    sub_10014ABC0();
    swift_allocError();
    uint64_t v18 = 3;
  }
  *NSString v17 = 0;
  v17[1] = v18;
  swift_willThrow();
}

unint64_t sub_100260DEC()
{
  *(_OWORD *)long long v14 = *v0;
  *(_OWORD *)&unsigned char v14[9] = *(_OWORD *)((char *)v0 + 9);
  *(_OWORD *)long long v12 = v0[2];
  *(_OWORD *)((char *)&v12[1] + 1) = *(_OWORD *)((char *)v0 + 41);
  long long v1 = *(_OWORD *)v14;
  sub_100266A1C((uint64_t)&v14[16], (uint64_t)v15);
  sub_100266A1C((uint64_t)&v12[2], (uint64_t)v13);
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  sub_100266A1C((uint64_t)v15, (uint64_t)&v16);
  if ((v17 & 1) == 0)
  {
    uint64_t v2 = v16;
    id v3 = objc_allocWithZone((Class)NSNumber);
    swift_bridgeObjectRetain();
    id v4 = [v3 initWithInteger:v2];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = &_swiftEmptyDictionarySingleton;
    sub_1002645A0((uint64_t)v4, v1, *((uint64_t *)&v1 + 1), isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    sub_10007661C((uint64_t)v14);
  }
  sub_100266A1C((uint64_t)v13, (uint64_t)&v18);
  if ((v19 & 1) == 0)
  {
    Swift::String v6 = v18;
    id v7 = objc_allocWithZone((Class)NSNumber);
    swift_bridgeObjectRetain();
    id v8 = [v7 initWithInteger:v6];
    char v9 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002645A0((uint64_t)v8, v12[0], v12[1], v9);
    swift_bridgeObjectRelease();
    sub_10007661C((uint64_t)v12);
  }
  sub_1000160DC();
  v10._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD00000000000003CLL;
}

uint64_t sub_100260FF4()
{
  return sub_1002614B8(0xD000000000000042, 0x80000001002C7810, (void (*)(uint64_t))sub_10025F428);
}

unint64_t sub_100261024(char a1)
{
  uint64_t v2 = type metadata accessor for Mirror();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  NSString v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = 0;
  unint64_t v14 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  unint64_t v17 = 0xD000000000000042;
  unint64_t v18 = 0x80000001002C7910;
  uint64_t v16 = &_swiftEmptyDictionarySingleton;
  uint64_t v15 = &_s23HandoffEnabledHeartbeatVN;
  LOBYTE(v13) = a1;
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  long long v12 = &v16;
  char v9 = sub_100266C1C;
  Swift::String v10 = &v11;
  dispatch thunk of _AnySequenceBox._forEach(_:)();
  swift_release();
  sub_1000160DC();
  v6._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17;
}

unint64_t sub_1002611E8()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  unint64_t v18 = 0xD000000000000040;
  unint64_t v19 = 0x80000001002C7A10;
  unint64_t v17 = &_swiftEmptyDictionarySingleton;
  uint64_t v16 = &_s21HandoffEnabledChangedVN;
  NSString v5 = (_OWORD *)swift_allocObject();
  unint64_t v14 = v5;
  long long v6 = v0[1];
  v5[1] = *v0;
  uint64_t v5[2] = v6;
  *(_OWORD *)((char *)v5 + 42) = *(_OWORD *)((char *)v0 + 26);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v13 = &v17;
  Swift::String v10 = sub_100266C20;
  char v11 = &v12;
  dispatch thunk of _AnySequenceBox._forEach(_:)();
  swift_release();
  sub_1000160DC();
  v7._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v18;
}

unint64_t sub_1002613D0()
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  sub_10025F2A0();
  sub_1000160DC();
  v0._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD00000000000003DLL;
}

uint64_t sub_100261488()
{
  return sub_1002614B8(0xD00000000000003BLL, 0x80000001002C7720, (void (*)(uint64_t))sub_10025F110);
}

uint64_t sub_1002614B8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  _StringGuts.grow(_:)(20);
  uint64_t v5 = swift_bridgeObjectRelease();
  a3(v5);
  sub_1000160DC();
  v6._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_100261570()
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  sub_10025EFA4();
  sub_1000160DC();
  v0._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000038;
}

unint64_t sub_100261628()
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  sub_10025EE38();
  sub_1000160DC();
  v0._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000038;
}

void sub_1002616E0()
{
  uint64_t v1 = v0;
  id v2 = sub_1001F59B8();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  uint64_t v4 = OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_published;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_published) & 1) == 0)
  {
    sub_100262A94((uint64_t)v8);
    sub_10025FACC();
    sub_1002660A0((uint64_t)v8);
    *(unsigned char *)(v1 + v4) = 1;
    Swift::String v7 = *(void (**)(uint64_t))(v1 + 16);
    if (!v7) {
      return;
    }
    goto LABEL_5;
  }
  id v5 = sub_1001F59B8();
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 ulog:60 message:v6];

  Swift::String v7 = *(void (**)(uint64_t))(v1 + 16);
  if (v7)
  {
LABEL_5:
    swift_retain();
    v7(v1);
    sub_10000F088((uint64_t)v7);
  }
}

uint64_t sub_10026181C()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  NSString v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v4 - 8);
  uint64_t v22 = v4;
  __chkstk_darwin(v4);
  NSString v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  char v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v19 - v12;
  id v14 = sub_1001F59B8();
  NSString v15 = String._bridgeToObjectiveC()();
  [v14 ulog:40 message:v15];

  if (qword_10035A628 != -1) {
    swift_once();
  }
  id v16 = (id)qword_1003ACB50;
  static DispatchTime.now()();
  + infix(_:_:)();
  NSString v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  aBlock[4] = sub_1002665F8;
  aBlock[5] = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007A0AC;
  aBlock[3] = &unk_100336F70;
  unint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  int v24 = _swiftEmptyArrayStorage;
  sub_1002665FC((unint64_t *)&qword_100363D50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A38C((uint64_t *)&unk_10035E800);
  sub_10001683C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v22);
  v20(v13, v7);
  return swift_release();
}

void sub_100261C0C()
{
  uint64_t v1 = type metadata accessor for ExperienceEvent(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v21 - v6;
  uint64_t v8 = sub_10000A38C(&qword_10035F278);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  char v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v21 - v12;
  v21[4] = 0xD000000000000016;
  v21[5] = 0x80000001002C3D40;
  uint64_t v14 = v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_dismissEffectTrigger;
  swift_beginAccess();
  sub_10000D728(v14, (uint64_t)v13, &qword_10035F278);
  sub_10000D728((uint64_t)v13, (uint64_t)v11, &qword_10035F278);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 1, v1) == 1)
  {
    NSString v15 = (void *)0xE300000000000000;
    uint64_t v16 = 7104878;
  }
  else
  {
    sub_1001DEB90((uint64_t)v11, (uint64_t)v7);
    sub_10004D310((uint64_t)v7, (uint64_t)v5);
    uint64_t v16 = String.init<A>(describing:)();
    NSString v15 = v17;
    sub_10004D374((uint64_t)v7);
  }
  sub_10000D78C((uint64_t)v13, &qword_10035F278);
  v18._countAndFlagsBits = v16;
  v18._object = v15;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  id v19 = sub_1001F59B8();
  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 ulog:40 message:v20];
  swift_bridgeObjectRelease();
}

uint64_t sub_100261E8C()
{
  uint64_t v1 = sub_10000A38C(&qword_1003653F8);
  __chkstk_darwin(v1 - 8);
  uint64_t v31 = (uint64_t)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000A38C(&qword_10035F278);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v31 - v8;
  __chkstk_darwin(v7);
  char v11 = (char *)&v31 - v10;
  uint64_t v12 = type metadata accessor for ExperienceEvent(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  id v19 = (char *)&v31 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v31 - v20;
  uint64_t v32 = v0;
  uint64_t v22 = v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_dismissEffectTrigger;
  swift_beginAccess();
  sub_10000D728(v22, (uint64_t)v11, &qword_10035F278);
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v23(v11, 1, v12) != 1)
  {
    sub_1001DEB90((uint64_t)v11, (uint64_t)v21);
    uint64_t v28 = sub_10025B6EC();
    uint64_t v29 = (uint64_t)v21;
LABEL_10:
    sub_10004D374(v29);
    return v28;
  }
  sub_10000D78C((uint64_t)v11, &qword_10035F278);
  uint64_t v24 = v32;
  sub_10000D728(v32 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_inactiveStateTrigger, (uint64_t)v9, &qword_10035F278);
  if (v23(v9, 1, v12) != 1)
  {
    sub_1001DEB90((uint64_t)v9, (uint64_t)v19);
    uint64_t v28 = sub_10025B6EC();
    uint64_t v29 = (uint64_t)v19;
    goto LABEL_10;
  }
  sub_10000D78C((uint64_t)v9, &qword_10035F278);
  sub_10000D728(v24 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_finishedStateTrigger, (uint64_t)v6, &qword_10035F278);
  if (v23(v6, 1, v12) != 1)
  {
    sub_1001DEB90((uint64_t)v6, (uint64_t)v16);
    uint64_t v28 = sub_10025B6EC();
    uint64_t v29 = (uint64_t)v16;
    goto LABEL_10;
  }
  sub_10000D78C((uint64_t)v6, &qword_10035F278);
  uint64_t v25 = v24 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_sessionEnded;
  swift_beginAccess();
  uint64_t v26 = v31;
  sub_10000D728(v25, v31, &qword_1003653F8);
  uint64_t v27 = sub_10000A38C(&qword_1003652D0);
  LODWORD(v25) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v26, 1, v27);
  sub_10000D78C(v26, &qword_1003653F8);
  if (v25 == 1) {
    return 0;
  }
  else {
    return 0x206E6F6973736553;
  }
}

uint64_t sub_10026228C()
{
  uint64_t v1 = sub_10000A38C(&qword_10035E158);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  int v43 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v46 = (char *)&v39 - v4;
  uint64_t v45 = type metadata accessor for Date();
  uint64_t v42 = *(void *)(v45 - 8);
  uint64_t v5 = __chkstk_darwin(v45);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v39 - v8;
  uint64_t v10 = sub_10000A38C(&qword_10036C980);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t v44 = v0;
  uint64_t v17 = v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_presented;
  swift_beginAccess();
  uint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v18(v17, 1, v10)) {
    return 0;
  }
  char v39 = v14;
  char v41 = v7;
  uint64_t v20 = (uint64_t)v43;
  sub_10000D728(v17, (uint64_t)v16, &qword_10036C980);
  uint64_t v21 = v42;
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
  uint64_t v40 = v9;
  uint64_t v23 = v9;
  uint64_t v24 = v45;
  uint64_t v25 = v22;
  v22((uint64_t)v23, (uint64_t)v16, v45);
  uint64_t v26 = v44 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_requested;
  swift_beginAccess();
  uint64_t v27 = 1;
  unsigned int v28 = v18(v26, 1, v10);
  uint64_t v29 = (uint64_t)v46;
  if (!v28)
  {
    uint64_t v30 = v26;
    uint64_t v31 = (uint64_t)v39;
    sub_10000D728(v30, (uint64_t)v39, &qword_10036C980);
    v25(v29, v31, v24);
    uint64_t v27 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v29, v27, 1, v24);
  sub_10000D728(v29, v20, &qword_10035E158);
  int v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v20, 1, v24);
  char v33 = v41;
  if (v32 == 1)
  {
    sub_10000D78C(v20, &qword_10035E158);
    uint64_t v19 = 0;
    uint64_t v37 = v21;
    uint64_t v34 = v40;
  }
  else
  {
    v25((uint64_t)v41, v20, v24);
    uint64_t v34 = v40;
    Date.timeIntervalSince(_:)();
    uint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v33, v24);
    uint64_t v19 = v36;
    uint64_t v37 = v21;
  }
  sub_10000D78C(v29, &qword_10035E158);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v24);
  return v19;
}

uint64_t sub_1002626A8()
{
  uint64_t v1 = sub_10000A38C(&qword_10036C980);
  uint64_t v32 = *(void *)(v1 - 8);
  uint64_t v33 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A38C(&qword_10035E158);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v30 = (char *)&v28 - v8;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_dismissed;
  swift_beginAccess();
  uint64_t v16 = sub_10000A38C((uint64_t *)&unk_1003715E8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16)) {
    return 0;
  }
  uint64_t v29 = v12;
  uint64_t v18 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v14, v15 + *(int *)(v16 + 28), v9);
  uint64_t v19 = v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_presenting;
  swift_beginAccess();
  uint64_t v20 = 1;
  int v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v19, 1, v33);
  uint64_t v22 = (uint64_t)v30;
  if (!v21)
  {
    sub_10000D728(v19, (uint64_t)v3, &qword_10036C980);
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v22, v3, v9);
    uint64_t v20 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v22, v20, 1, v9);
  sub_10000D728(v22, (uint64_t)v7, &qword_10035E158);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v7, 1, v9);
  uint64_t v24 = v29;
  if (v23 == 1)
  {
    sub_10000D78C((uint64_t)v7, &qword_10035E158);
    uint64_t v17 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v29, v7, v9);
    Date.timeIntervalSince(_:)();
    uint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v9);
    uint64_t v17 = v26;
  }
  sub_10000D78C(v22, &qword_10035E158);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v9);
  return v17;
}

void sub_100262A94(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = sub_10000A38C(&qword_10036CAC0);
  __chkstk_darwin(v5 - 8);
  uint64_t v109 = (uint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_10036CAD0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_10036C980);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v123 = 0xD000000000000015;
  unint64_t v124 = 0x80000001002BD810;
  v125[3] = v4;
  v125[0] = v2;
  swift_retain();
  uint64_t v14 = sub_100027F44(v125);
  uint64_t v16 = v15;
  sub_10000CC5C((uint64_t)v125);
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  id v18 = sub_1001F59B8();
  swift_bridgeObjectRetain();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v18 ulog:40 message:v19];
  swift_bridgeObjectRelease();

  uint64_t v20 = (uint64_t)v2 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_presented;
  swift_beginAccess();
  double v21 = 0.0;
  LODWORD(v107) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v20, 1, v10);
  if (!LODWORD(v107))
  {
    sub_10000D728(v20, (uint64_t)v13, &qword_10036C980);
    sub_10000A38C(&qword_10036CAB8);
    Date.timeIntervalSince(_:)();
    double v21 = v22;
    uint64_t v23 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8))(v13, v23);
  }
  double v110 = COERCE_DOUBLE(sub_10026228C());
  int v106 = v24;
  if (qword_10035A590 != -1) {
    swift_once();
  }
  sub_100141BC0();
  uint64_t v25 = sub_1001426E0(1);
  uint64_t v104 = 0;
  uint64_t v105 = v25;
  swift_release();
  sub_100141BC0();
  uint64_t v26 = sub_1001426E0(28);
  uint64_t v100 = 0;
  uint64_t v103 = v26;
  swift_release();
  uint64_t v102 = v2[4];
  sub_100141BC0();
  uint64_t v27 = sub_1001426E0(7);
  uint64_t v99 = 0;
  uint64_t v101 = v27;
  swift_release();
  uint64_t v28 = (void *)((char *)v2 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_denied);
  swift_beginAccess();
  sub_10000D728((uint64_t)v28, (uint64_t)v9, &qword_10036CAD0);
  uint64_t v29 = sub_10000A38C(&qword_10036C9A0);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48);
  int v94 = v30(v9, 1, v29);
  sub_10000D78C((uint64_t)v9, &qword_10036CAD0);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  if (!v30((char *)v28, 1, v29))
  {
    uint64_t v31 = *v28;
    uint64_t v32 = v28[1];
    swift_bridgeObjectRetain();
  }
  uint64_t v97 = v32;
  uint64_t v98 = v31;
  uint64_t v33 = sub_100261E8C();
  uint64_t v95 = v34;
  uint64_t v96 = v33;
  uint64_t v35 = (void *)((char *)v2 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_failed);
  swift_beginAccess();
  uint64_t v36 = v109;
  sub_10000D728((uint64_t)v35, v109, &qword_10036CAC0);
  uint64_t v37 = sub_10000A38C(&qword_10036C990);
  char v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48);
  int v93 = v38(v36, 1, v37);
  sub_10000D78C(v36, &qword_10036CAC0);
  int v39 = v38((uint64_t)v35, 1, v37);
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  if (!v39)
  {
    if (*v35)
    {
      swift_getErrorValue();
      uint64_t v40 = v113;
      uint64_t v109 = v112;
      swift_errorRetain();
      char v41 = (void *)sub_100117140(v40);
      id v42 = [v41 code];

      id v111 = v42;
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v108 = v44;
      uint64_t v109 = v43;
      swift_errorRelease();
    }
    else
    {
      uint64_t v108 = 0;
      uint64_t v109 = 0;
    }
  }
  if (v38((uint64_t)v35, 1, v37) || !*v35)
  {
    uint64_t v81 = 0;
    uint64_t v82 = 0;
  }
  else
  {
    swift_getErrorValue();
    uint64_t v45 = v115;
    uint64_t v92 = v114;
    swift_errorRetain();
    uint64_t v46 = (void *)sub_100117140(v45);
    swift_errorRelease();
    id v47 = [v46 domain];

    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v81 = v49;
    uint64_t v82 = v48;
  }
  if (v38((uint64_t)v35, 1, v37))
  {
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    id v50 = (void *)&unk_1003AC000;
  }
  else
  {
    id v50 = &unk_1003AC000;
    if (*v35)
    {
      swift_getErrorValue();
      swift_errorRetain();
      uint64_t v51 = Error.localizedDescription.getter();
      uint64_t v79 = v52;
      uint64_t v80 = v51;
      swift_errorRelease();
    }
    else
    {
      uint64_t v79 = 0;
      uint64_t v80 = 0;
    }
  }
  LODWORD(v92) = *((unsigned __int8 *)v2 + 56);
  if (qword_10035A4F0 != -1) {
    swift_once();
  }
  if (byte_1003AC688 != 1) {
    goto LABEL_27;
  }
  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v53 = *(id *)(qword_1003AC750 + 920);
  char v54 = sub_1000FF780();

  if (v54) {
LABEL_27:
  }
    uint64_t v91 = 0;
  else {
    uint64_t v91 = 1;
  }
  uint64_t v55 = v2[6];
  uint64_t v88 = v2[5];
  uint64_t v90 = v55;
  swift_bridgeObjectRetain();
  uint64_t v89 = sub_1002626A8();
  int v84 = v56;
  uint64_t v57 = (char *)v2 + v50[382];
  unint64_t v58 = &v57[*(int *)(sub_10000A38C(&qword_10036CAB8) + 32)];
  int v87 = *(_DWORD *)v58;
  int v83 = v58[4];
  uint64_t v59 = sub_10025B6EC();
  uint64_t v85 = v60;
  uint64_t v86 = v59;
  if (qword_10035A518 != -1) {
    swift_once();
  }
  BOOL v61 = v99 != 0;
  BOOL v62 = v100 != 0;
  BOOL v63 = v104 != 0;
  char v64 = v106;
  BOOL v65 = LODWORD(v107) != 0;
  char v66 = (LODWORD(v107) != 0) | v106 & 1;
  if (v66) {
    double v67 = 0.0;
  }
  else {
    double v67 = v21 - v110;
  }
  double v107 = v67;
  LODWORD(v100) = v93 != 1;
  LODWORD(v99) = v94 != 1;
  id v68 = *(id *)(qword_1003AC748 + 80);
  uint64_t v104 = sub_1001003AC();
  char v70 = v69;

  char v121 = v66;
  BOOL v119 = v65;
  char v117 = v83;
  *(void *)a1 = v105;
  *(void *)(a1 + 16) = v103;
  *(void *)(a1 + 32) = v102;
  char v122 = 0;
  char v120 = v64 & 1;
  char v118 = v84 & 1;
  char v116 = v70 & 1;
  *(unsigned char *)(a1 + 8) = v63;
  *(unsigned char *)(a1 + 24) = v62;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = v101;
  *(unsigned char *)(a1 + 56) = v61;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = v99;
  uint64_t v71 = v97;
  *(void *)(a1 + 88) = v98;
  *(void *)(a1 + 96) = v71;
  uint64_t v72 = v95;
  *(void *)(a1 + 104) = v96;
  *(void *)(a1 + 112) = v72;
  *(unsigned char *)(a1 + 120) = v100;
  uint64_t v73 = v108;
  *(void *)(a1 + 128) = v109;
  *(void *)(a1 + 136) = v73;
  uint64_t v74 = v81;
  *(void *)(a1 + 144) = v82;
  *(void *)(a1 + 152) = v74;
  uint64_t v75 = v79;
  *(void *)(a1 + 160) = v80;
  *(void *)(a1 + 168) = v75;
  *(unsigned char *)(a1 + 176) = v92;
  *(void *)(a1 + 184) = v91;
  *(unsigned char *)(a1 + 192) = v122;
  uint64_t v76 = v90;
  *(void *)(a1 + 200) = v88;
  *(void *)(a1 + 208) = v76;
  *(double *)(a1 + 216) = v107;
  *(unsigned char *)(a1 + 224) = v121;
  *(double *)(a1 + 232) = v110;
  *(unsigned char *)(a1 + 240) = v120;
  *(double *)(a1 + 248) = v21;
  *(unsigned char *)(a1 + 256) = v119;
  *(void *)(a1 + 264) = v89;
  *(unsigned char *)(a1 + 272) = v118;
  *(_DWORD *)(a1 + 276) = v87;
  *(unsigned char *)(a1 + 280) = v117;
  uint64_t v77 = v85;
  *(void *)(a1 + 288) = v86;
  *(void *)(a1 + 296) = v77;
  *(void *)(a1 + 304) = v104;
  *(unsigned char *)(a1 + 312) = v116;
}

uint64_t *sub_1002634B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v13 = *v7;
  _OWORD v7[2] = 0;
  v7[3] = 0;
  uint64_t v14 = (char *)v7 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_requested;
  uint64_t v15 = v13;
  uint64_t v16 = sub_10000A38C(&qword_10036C980);
  Swift::String v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  v17(v14, 1, 1, v16);
  v17((char *)v8 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_presenting, 1, 1, v16);
  v17((char *)v8 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_presented, 1, 1, v16);
  id v18 = (char *)v8 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_denied;
  uint64_t v19 = sub_10000A38C(&qword_10036C9A0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  uint64_t v20 = (char *)v8 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_failed;
  uint64_t v21 = sub_10000A38C(&qword_10036C990);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  double v22 = (char *)v8 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_dismissed;
  uint64_t v23 = sub_10000A38C((uint64_t *)&unk_1003715E8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  int v24 = (char *)v8 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_sessionEnded;
  uint64_t v25 = sub_10000A38C(&qword_1003652D0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  uint64_t v26 = (char *)v8 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_dismissEffectTrigger;
  uint64_t v27 = type metadata accessor for ExperienceEvent(0);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
  v28(v26, 1, 1, v27);
  v28((char *)v8 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_inactiveStateTrigger, 1, 1, v27);
  v28((char *)v8 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_finishedStateTrigger, 1, 1, v27);
  *((unsigned char *)v8 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_published) = 0;
  sub_10016ABE4(1953066569, (void *)0xE400000000000000, 0, v15, (uint64_t)&off_100336DD0);
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = a3;
  *((unsigned char *)v8 + 56) = a6;
  uint64_t v29 = (char *)v8 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_presentEffect;
  sub_10004D310(a7, (uint64_t)v8 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_presentEffect);
  uint64_t v30 = sub_10000A38C(&qword_10036CAB8);
  uint64_t v31 = &v29[*(int *)(v30 + 28)];
  uint64_t v32 = type metadata accessor for Date();
  uint64_t v33 = *(void *)(v32 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v31, a4, v32);
  uint64_t v34 = &v29[*(int *)(v30 + 32)];
  *(_DWORD *)uint64_t v34 = a5;
  v34[4] = BYTE4(a5) & 1;
  if (qword_10035A590 != -1) {
    swift_once();
  }
  sub_100141BC0();
  sub_10014215C();
  swift_release();
  sub_10004D374(a7);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(a4, v32);
  return v8;
}

uint64_t sub_100263900()
{
  id v1 = sub_1001F59B8();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  sub_10000F088(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_presentEffect, &qword_10036CAB8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_requested, &qword_10036CAC8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_presenting, &qword_10036CAC8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_presented, &qword_10036CAC8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_denied, &qword_10036CAD0);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_failed, &qword_10036CAC0);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_dismissed, &qword_1003716F8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_sessionEnded, &qword_1003653F8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_dismissEffectTrigger, &qword_10035F278);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_inactiveStateTrigger, &qword_10035F278);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_finishedStateTrigger, &qword_10035F278);
  return v0;
}

uint64_t sub_100263A78()
{
  sub_100263900();

  return swift_deallocClassInstance();
}

uint64_t sub_100263AD0()
{
  return type metadata accessor for HintPresentationRecord();
}

uint64_t type metadata accessor for HintPresentationRecord()
{
  uint64_t result = qword_1003715D0;
  if (!qword_1003715D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100263B24()
{
  sub_1001DEA54(319, &qword_10036C970, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StateUpdateWithDistance);
  if (v0 <= 0x3F)
  {
    sub_1000E4A6C(319, &qword_10036C978, &qword_10036C980);
    if (v1 <= 0x3F)
    {
      sub_1000E4A6C(319, &qword_10036C998, &qword_10036C9A0);
      if (v2 <= 0x3F)
      {
        sub_1000E4A6C(319, &qword_10036C988, &qword_10036C990);
        if (v3 <= 0x3F)
        {
          sub_1000E4A6C(319, &qword_1003715E0, (uint64_t *)&unk_1003715E8);
          if (v4 <= 0x3F)
          {
            sub_1000E4A6C(319, &qword_1003652C8, &qword_1003652D0);
            if (v5 <= 0x3F)
            {
              sub_1001DEA54(319, (unint64_t *)&unk_10036C9A8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
              if (v6 <= 0x3F) {
                swift_updateClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100263DCC(uint64_t a1)
{
  uint64_t v2 = *v1;
  void v5[3] = a1;
  v5[0] = v2;
  swift_retain();
  uint64_t v3 = sub_100027F44(v5);
  sub_10000CC5C((uint64_t)v5);
  return v3;
}

uint64_t sub_100263E24(uint64_t a1)
{
  uint64_t result = sub_1002665FC(&qword_1003716E0, (void (*)(uint64_t))type metadata accessor for HintPresentationRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

void *sub_100263E7C(char a1)
{
  uint64_t v2 = type metadata accessor for Mirror();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = &_swiftEmptyDictionarySingleton;
  uint64_t v13 = &_s23HandoffEnabledHeartbeatVN;
  char v12 = a1;
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v11 = &v14;
  uint64_t v8 = sub_1002668EC;
  uint64_t v9 = &v10;
  dispatch thunk of _AnySequenceBox._forEach(_:)();
  swift_release();
  return v14;
}

void *sub_100263FBC(_OWORD *a1)
{
  uint64_t v2 = type metadata accessor for Mirror();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = &_swiftEmptyDictionarySingleton;
  uint64_t v15 = &_s21HandoffEnabledChangedVN;
  unint64_t v6 = (_OWORD *)swift_allocObject();
  uint64_t v14 = v6;
  long long v7 = a1[1];
  v6[1] = *a1;
  v6[2] = v7;
  *(_OWORD *)((char *)v6 + 42) = *(_OWORD *)((char *)a1 + 26);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v13 = &v16;
  char v10 = sub_100266970;
  uint64_t v11 = &v12;
  dispatch thunk of _AnySequenceBox._forEach(_:)();
  swift_release();
  return v16;
}

void *sub_100264120(_OWORD *a1)
{
  *(_OWORD *)uint64_t v14 = *a1;
  *(_OWORD *)&unsigned char v14[9] = *(_OWORD *)((char *)a1 + 9);
  *(_OWORD *)char v12 = a1[2];
  *(_OWORD *)((char *)&v12[1] + 1) = *(_OWORD *)((char *)a1 + 41);
  long long v1 = *(_OWORD *)v14;
  sub_100266A1C((uint64_t)&v14[16], (uint64_t)v15);
  sub_100266A1C((uint64_t)&v12[2], (uint64_t)v13);
  sub_100266A1C((uint64_t)v15, (uint64_t)&v16);
  uint64_t v2 = &_swiftEmptyDictionarySingleton;
  if ((v17 & 1) == 0)
  {
    uint64_t v3 = v16;
    id v4 = objc_allocWithZone((Class)NSNumber);
    swift_bridgeObjectRetain();
    id v5 = [v4 initWithInteger:v3];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v18 = &_swiftEmptyDictionarySingleton;
    sub_1002645A0((uint64_t)v5, v1, *((uint64_t *)&v1 + 1), isUniquelyReferenced_nonNull_native);
    uint64_t v2 = v18;
    swift_bridgeObjectRelease();
    sub_10007661C((uint64_t)v14);
  }
  sub_100266A1C((uint64_t)v13, (uint64_t)&v18);
  if ((v19 & 1) == 0)
  {
    long long v7 = v18;
    id v8 = objc_allocWithZone((Class)NSNumber);
    swift_bridgeObjectRetain();
    id v9 = [v8 initWithInteger:v7];
    char v10 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002645A0((uint64_t)v9, v12[0], v12[1], v10);
    swift_bridgeObjectRelease();
    sub_10007661C((uint64_t)v12);
  }
  return v2;
}

Class sub_1002642B0(uint64_t a1)
{
  long long v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_1000160DC();
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

void sub_10026433C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  if (a2)
  {
    sub_100027B10(a3, (uint64_t)v21);
    swift_bridgeObjectRetain();
    sub_10000A38C(&qword_1003716E8);
    if (swift_dynamicCast())
    {
      sub_10000D7E8(v19, (uint64_t)&v22);
      uint64_t v9 = v24;
      uint64_t v10 = v25;
      sub_10000D6E4(&v22, v24);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v19[0] = *a4;
      *a4 = 0x8000000000000000;
      sub_1002645A0(v11, a1, (uint64_t)a2, isUniquelyReferenced_nonNull_native);
      *a4 = *(void *)&v19[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10000CC5C((uint64_t)&v22);
    }
    else
    {
      uint64_t v20 = 0;
      memset(v19, 0, sizeof(v19));
      sub_10000D78C((uint64_t)v19, &qword_1003716F0);
      unint64_t v22 = 0;
      unint64_t v23 = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      unint64_t v22 = 0xD000000000000012;
      unint64_t v23 = 0x80000001002C7490;
      v14._countAndFlagsBits = a1;
      v14._object = a2;
      String.append(_:)(v14);
      uint64_t v15 = swift_bridgeObjectRelease();
      uint64_t v16 = (void *)((uint64_t (*)(uint64_t))a5)(v15);
      swift_bridgeObjectRetain();
      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v16 ulog:40 message:v17];
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v13 = (void *)a5();
    NSString v18 = String._bridgeToObjectiveC()();
    [v13 ulog:60 message:v18];
  }
}

void sub_1002645A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100269CBC(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100057D8C();
      goto LABEL_7;
    }
    sub_10005348C(v15, a4 & 1);
    unint64_t v21 = sub_100269CBC(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      NSString v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
LABEL_7:
  NSString v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = *(void **)(v19 + 8 * v12);
    *(void *)(v19 + 8 * v12) = a1;

    return;
  }
LABEL_13:
  sub_100057870(v12, a2, a3, a1, v18);

  swift_bridgeObjectRetain();
}

uint64_t sub_1002646EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002647AC(a1, a2, a3, a4, (void (*)(void))sub_100057F28, (void (*)(void))sub_10005377C, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057870);
}

uint64_t sub_10026472C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002647AC(a1, a2, a3, a4, (void (*)(void))sub_100057F34, (void (*)(void))sub_100053788, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057870);
}

uint64_t sub_10026476C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002647AC(a1, a2, a3, a4, (void (*)(void))sub_100057F40, (void (*)(void))sub_100053794, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057870);
}

uint64_t sub_1002647AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = v7;
  uint64_t v15 = *v7;
  unint64_t v17 = sub_100269CBC(a2, a3);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 < v20 || (a4 & 1) == 0)
  {
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    unint64_t v25 = sub_100269CBC(a2, a3);
    if ((v21 & 1) == (v26 & 1))
    {
      unint64_t v17 = v25;
      uint64_t v23 = *v10;
      if (v21) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v23 = *v10;
  if (v21)
  {
LABEL_8:
    *(void *)(*(void *)(v23 + 56) + 8 * v17) = a1;
    return swift_release();
  }
LABEL_13:
  a7(v17, a2, a3, a1, v23);

  return swift_bridgeObjectRetain();
}

uint64_t sub_10026492C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100265CE4(a1, a2, a3, (void (*)(void))sub_1000580F4, (void (*)(void))sub_100053E20, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100057874);
}

uint64_t sub_10026496C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100265CE4(a1, a2, a3, (void (*)(void))sub_100058100, (void (*)(void))sub_100053E2C, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100057874);
}

unint64_t sub_1002649AC(uint64_t a1, uint64_t a2, char a3)
{
  NSDictionary v4 = (void **)v3;
  id v8 = (void *)*v3;
  unint64_t v10 = sub_10026A800(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1000582BC();
    goto LABEL_7;
  }
  sub_100054144(v13, a3 & 1);
  uint64_t v19 = sub_10026A800(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_1000578C0(v10, a2, a1, v16);
}

uint64_t sub_100264AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v6 = (void **)v5;
  BOOL v12 = (void *)*v5;
  unint64_t v14 = sub_100269CBC(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    char v20 = *v6;
    if (v18)
    {
LABEL_8:
      char v21 = (uint64_t *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *char v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1000582C8();
    goto LABEL_7;
  }
  sub_1000543FC(v17, a5 & 1);
  unint64_t v23 = sub_100269CBC(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1000578C4(v14, a3, a4, a1, a2, v20);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100264C28(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  BOOL v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)*v4;
  unint64_t v15 = sub_100269DA0(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    char v21 = *v5;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v24 = v28;
      *uint64_t v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_100058484();
    goto LABEL_7;
  }
  sub_100054724(v18, a4 & 1);
  unint64_t v25 = sub_100269DA0(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v25;
  char v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_100057914(v15, (uint64_t)v12, a1, v28, v21);
}

void sub_100264DE0(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_100264E20(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100264E60(a1, a2, a3, (void (*)(void))sub_100058768, (void (*)(void))sub_100054B3C, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_1000578C0);
}

uint64_t sub_100264E60(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = v6;
  uint64_t v13 = *v6;
  unint64_t v15 = sub_100269E24(a2);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v19 = v14;
  uint64_t v20 = *(void *)(v13 + 24);
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v9;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = *(void *)(v21 + 56);
      uint64_t result = swift_release();
      *(void *)(v22 + 8 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  a5();
  unint64_t v24 = sub_100269E24(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v24;
  uint64_t v21 = *v9;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:

  return a6(v15, a2, a1, v21);
}

uint64_t sub_100264FBC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100269CBC(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100058774();
    goto LABEL_7;
  }
  sub_100054B48(v15, a4 & 1);
  unint64_t v21 = sub_100269CBC(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100057878(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

_OWORD *sub_1002650FC(_OWORD *a1, uint64_t a2, char a3)
{
  NSDictionary v4 = (void **)v3;
  id v8 = (void *)*v3;
  unint64_t v10 = sub_100269E60(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10005892C();
      goto LABEL_7;
    }
    sub_100054E60(v13, a3 & 1);
    unint64_t v19 = sub_100269E60(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_10005C374(a2, (uint64_t)v21);
      return sub_1000579D4(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  sub_10000CC5C((uint64_t)v17);

  return sub_100027B00(a1, v17);
}

uint64_t sub_100265248(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100265EEC(a1, a2, a3, a4, (void (*)(void))sub_100058B14, (void (*)(void))sub_100055178, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057870);
}

uint64_t sub_100265288(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100265EEC(a1, a2, a3, a4, (void (*)(void))sub_100058B20, (void (*)(void))sub_100055184, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057870);
}

_OWORD *sub_1002652C8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100269CBC(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100058B38();
      goto LABEL_7;
    }
    sub_10005519C(v15, a4 & 1);
    unint64_t v21 = sub_100269CBC(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    unint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_10000CC5C((uint64_t)v19);
    return sub_100027B00(a1, v19);
  }
LABEL_13:
  sub_100057A50(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

void sub_10026541C(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_10026545C(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), void (*a6)(unint64_t, uint64_t, uint64_t, uint64_t))
{
  char v9 = v6;
  uint64_t v13 = *v6;
  unint64_t v15 = sub_100269E24(a2);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v19 = v14;
  uint64_t v20 = *(void *)(v13 + 24);
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v9;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = *(void *)(v21 + 56);

      *(void *)(v22 + 8 * v15) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  a5();
  unint64_t v23 = sub_100269E24(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v15 = v23;
  uint64_t v21 = *v9;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:

  a6(v15, a2, a1, v21);
}

uint64_t sub_1002655B8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100265CE4(a1, a2, a3, (void (*)(void))sub_100058ED4, (void (*)(void))sub_100055764, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100057874);
}

void sub_1002655F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100269CBC(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100058EE0();
    goto LABEL_7;
  }
  sub_100055770(v15, a4 & 1);
  unint64_t v20 = sub_100269CBC(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100057870(v12, a2, a3, a1, v18);

  swift_bridgeObjectRetain();
}

uint64_t sub_100265738(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100265EEC(a1, a2, a3, a4, (void (*)(void))sub_100058EEC, (void (*)(void))sub_10005577C, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057870);
}

uint64_t sub_100265778(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100269CBC(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100058EF8();
    goto LABEL_7;
  }
  sub_100055788(v15, a4 & 1);
  unint64_t v21 = sub_100269CBC(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100057878(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1002658B8(uint64_t a1, uint64_t a2, char a3)
{
  NSDictionary v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100269DA0(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100059280();
      goto LABEL_7;
    }
    sub_100055DD0(v17, a3 & 1);
    unint64_t v28 = sub_100269DA0(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100057ABC(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  char v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

uint64_t sub_100265ABC(uint64_t a1, uint64_t a2, char a3)
{
  NSDictionary v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100269DA0(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100059628();
      goto LABEL_7;
    }
    sub_1000562AC(v17, a3 & 1);
    unint64_t v24 = sub_100269DA0(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      unint64_t v14 = v24;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100057BB0(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = v21
      + *(void *)(*(void *)(type metadata accessor for PCUserAlertManager.ActiveAlertContext(0) - 8) + 72) * v14;

  return sub_100266B58(a1, v22);
}

uint64_t sub_100265CA4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100265CE4(a1, a2, a3, (void (*)(void))sub_100059DB8, (void (*)(void))sub_100056E90, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100057874);
}

uint64_t sub_100265CE4(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(unint64_t, char *, uint64_t, uint64_t))
{
  char v29 = a5;
  uint64_t v30 = a6;
  uint64_t v8 = v6;
  uint64_t v31 = a1;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v6;
  unint64_t v17 = sub_100269DA0(a2);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v8;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = *(void *)(v23 + 56);
      uint64_t result = swift_release();
      *(void *)(v24 + 8 * v17) = v31;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v29();
  unint64_t v26 = sub_100269DA0(a2);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v26;
  uint64_t v23 = *v8;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  return v30(v17, v14, v31, v23);
}

uint64_t sub_100265EAC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100265EEC(a1, a2, a3, a4, (void (*)(void))sub_10005A058, (void (*)(void))sub_100057290, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057870);
}

uint64_t sub_100265EEC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = v7;
  uint64_t v15 = *v7;
  unint64_t v17 = sub_100269CBC(a2, a3);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v10;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = *(void *)(v23 + 56);
      uint64_t result = swift_release();
      *(void *)(v24 + 8 * v17) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    a5();
    goto LABEL_7;
  }
  a6();
  unint64_t v26 = sub_100269CBC(a2, a3);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v26;
  uint64_t v23 = *v10;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  a7(v17, a2, a3, a1, v23);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100266060(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100264E60(a1, a2, a3, (void (*)(void))sub_10005A214, (void (*)(void))sub_1000575B0, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_10005C5D4);
}

uint64_t sub_1002660A0(uint64_t a1)
{
  return a1;
}

void *sub_10026613C()
{
  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  return sub_10025EFA4();
}

uint64_t sub_100266178(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100266188()
{
  return swift_release();
}

uint64_t sub_100266190(uint64_t a1)
{
  return a1;
}

uint64_t sub_10026622C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 329, 7);
}

void sub_10026629C(uint64_t a1, void *a2, uint64_t a3)
{
  sub_10026433C(a1, a2, a3, *(void **)(v3 + 16), (uint64_t (*)(void))sub_1001E9E48);
}

uint64_t sub_1002662CC(void *a1)
{
  return (*(uint64_t (**)(void, void, void *))(v1 + 16))(*a1, a1[1], a1 + 2);
}

void *sub_10026630C()
{
  return sub_10025F2A0();
}

uint64_t sub_100266368(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002663F8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 192, 7);
}

void sub_100266460(uint64_t a1, void *a2, uint64_t a3)
{
  sub_10026433C(a1, a2, a3, *(void **)(v3 + 16), (uint64_t (*)(void))sub_1001EA0C0);
}

void *sub_100266494()
{
  memcpy(__dst, (const void *)(v0 + 16), sizeof(__dst));
  return sub_10025EE38();
}

uint64_t sub_1002664D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100266560()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 337, 7);
}

void sub_1002665C8(uint64_t a1, void *a2, uint64_t a3)
{
  sub_10026433C(a1, a2, a3, *(void **)(v3 + 16), (uint64_t (*)(void))sub_1001E9D0C);
}

uint64_t sub_1002665FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100266648()
{
  return sub_10025F110();
}

uint64_t sub_1002666AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10026671C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 193, 7);
}

void sub_100266774(uint64_t a1, void *a2, uint64_t a3)
{
  sub_10026433C(a1, a2, a3, *(void **)(v3 + 16), (uint64_t (*)(void))sub_1001E9F84);
}

void *sub_1002667A8()
{
  return sub_10025F428();
}

uint64_t sub_10026680C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10026685C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 193, 7);
}

void sub_1002668A4(uint64_t a1, void *a2, uint64_t a3)
{
  sub_10026433C(a1, a2, a3, *(void **)(v3 + 16), (uint64_t (*)(void))sub_1001EA474);
}

uint64_t sub_1002668D4()
{
  return _swift_deallocObject(v0, 17, 7);
}

void *sub_1002668E4()
{
  return sub_100263E7C(*(unsigned char *)(v0 + 16));
}

void sub_1002668EC(uint64_t a1, void *a2, uint64_t a3)
{
  sub_10026433C(a1, a2, a3, *(void **)(v3 + 16), (uint64_t (*)(void))sub_1001EA338);
}

uint64_t sub_10026691C()
{
  return _swift_deallocObject(v0, 58, 7);
}

void *sub_10026692C()
{
  long long v1 = v0[2];
  long long v3 = v0[1];
  v4[0] = v1;
  *(_OWORD *)((char *)v4 + 10) = *(_OWORD *)((char *)v0 + 42);
  return sub_100263FBC(&v3);
}

uint64_t sub_100266960()
{
  return _swift_deallocObject(v0, 64, 7);
}

void sub_100266970(uint64_t a1, void *a2, uint64_t a3)
{
  sub_10026433C(a1, a2, a3, *(void **)(v3 + 16), (uint64_t (*)(void))sub_1001EA1FC);
}

uint64_t sub_1002669A0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 73, 7);
}

void *sub_1002669E0()
{
  long long v1 = v0[2];
  v3[0] = v0[1];
  v3[1] = v1;
  v4[0] = v0[3];
  *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)v0 + 57);
  return sub_100264120(v3);
}

uint64_t sub_100266A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_100366230);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_100266A88()
{
  return sub_10025ECC0();
}

uint64_t sub_100266AD8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 120, 7);
}

void sub_100266B28(uint64_t a1, void *a2, uint64_t a3)
{
  sub_10026433C(a1, a2, a3, *(void **)(v3 + 16), (uint64_t (*)(void))sub_1001E9BD0);
}

uint64_t sub_100266B58(uint64_t a1, uint64_t a2)
{
  uint64_t active = type metadata accessor for PCUserAlertManager.ActiveAlertContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(active - 8) + 40))(a2, a1, active);
  return a2;
}

uint64_t sub_100266BBC(void *a1)
{
  return sub_1002662CC(a1);
}

uint64_t sub_100266C24@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v64 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v63 = (uint64_t)&v61 - v8;
  type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0);
  type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
  uint64_t v9 = sub_10000A38C(qword_100371700);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v66 = (uint64_t)&v61 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v17 = (uint64_t *)((char *)&v61 - v16);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v69 = (uint64_t)&v61 - v19;
  __chkstk_darwin(v18);
  uint64_t v68 = (uint64_t)&v61 - v20;
  unint64_t v71 = 0;
  unint64_t v72 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  unint64_t v71 = 0xD00000000000001ELL;
  unint64_t v72 = 0x80000001002C7BE0;
  swift_retain();
  uint64_t v21 = sub_1001F7514();
  uint64_t v23 = v22;
  swift_release();
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0x697669746361202CLL;
  v25._object = (void *)0xEB000000003D7974;
  String.append(_:)(v25);
  if (a1)
  {
    char v70 = a1;
    swift_unknownObjectRetain();
    sub_10000A38C((uint64_t *)&unk_10036E690);
    uint64_t v26 = String.init<A>(describing:)();
    unint64_t v28 = v27;
  }
  else
  {
    unint64_t v28 = 0xE300000000000000;
    uint64_t v26 = 7104878;
  }
  unint64_t v29 = v28;
  String.append(_:)(*(Swift::String *)&v26);
  swift_bridgeObjectRelease();
  id v30 = sub_1001EA828();
  swift_bridgeObjectRetain();
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v30 ulog:40 message:v31];
  swift_bridgeObjectRelease();

  BOOL v62 = v12;
  if (a1 && [a1 pcactivityType] == (id)1 && (sub_10003CD08() & 1) != 0)
  {
    int v32 = 0;
    uint64_t v61 = 1;
  }
  else
  {
    uint64_t v61 = 0;
    int v32 = 1;
  }
  uint64_t v67 = v5;
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v33(v68, 1, 1, v4);
  v33(v69, 1, 1, v4);
  int v65 = v32;
  if ((v32 & 1) == 0 && a1)
  {
    id v34 = [(id)swift_unknownObjectRetain() activityString];
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = v36;

    uint64_t v38 = v68;
    sub_100267304(v68);
    *unint64_t v17 = v35;
    v17[1] = v37;
    swift_storeEnumTagMultiPayload();
    v33((uint64_t)v17, 0, 1, v4);
    sub_10026729C((uint64_t)v17, v38);
    id v39 = [a1 description];
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;
    swift_unknownObjectRelease();

    uint64_t v43 = v69;
    sub_100267304(v69);
    *unint64_t v17 = v40;
    v17[1] = v42;
    swift_storeEnumTagMultiPayload();
    v33((uint64_t)v17, 0, 1, v4);
    sub_10026729C((uint64_t)v17, v43);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v44 = sub_10009AE24();
  char v46 = v45;
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v47 = sub_100098144();
  uint64_t v49 = v48;
  swift_release();
  uint64_t v50 = sub_10002935C(v47, v49);
  uint64_t v52 = v51;
  swift_bridgeObjectRelease();
  uint64_t v53 = v66;
  sub_10026729C(v68, v66);
  char v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  if (v54(v53, 1, v4) == 1)
  {
    uint64_t v55 = v63;
    swift_storeEnumTagMultiPayload();
    sub_100267304(v53);
  }
  else
  {
    uint64_t v55 = v63;
    sub_100267364(v53, v63);
  }
  uint64_t v56 = (uint64_t)v62;
  sub_10026729C(v69, (uint64_t)v62);
  if (v54(v56, 1, v4) == 1)
  {
    uint64_t v57 = v64;
    swift_storeEnumTagMultiPayload();
    sub_100267304(v56);
  }
  else
  {
    uint64_t v57 = v64;
    sub_100267364(v56, v64);
  }
  *(void *)a2 = v61;
  if (v46) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = v44;
  }
  *(unsigned char *)(a2 + 8) = v65;
  *(void *)(a2 + 16) = v58;
  *(void *)(a2 + 24) = v50;
  *(void *)(a2 + 32) = v52;
  *(void *)(a2 + 40) = 0;
  uint64_t v59 = type metadata accessor for ActivityDisplayContext(0);
  sub_100267364(v55, a2 + *(int *)(v59 + 32));
  return sub_100267364(v57, a2 + *(int *)(v59 + 36));
}

uint64_t sub_10026729C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(qword_100371700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100267304(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(qword_100371700);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100267364(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1002673C8()
{
  id result = (id)swift_dynamicCastTypeToObjCProtocolConditional();
  if (result) {
    return [(id)swift_getObjCClassFromMetadata() supportsSecureCoding];
  }
  return result;
}

id sub_100267410(void *a1, id a2)
{
  sub_10000D6E4(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    sub_10000D6E4(v12, v12[3]);
    sub_10015531C();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    id v5 = objc_allocWithZone((Class)NSKeyedUnarchiver);
    sub_10001F8BC(v10, v11);
    id v6 = sub_100267B34();
    sub_10000DBEC(v10, v11);
    [v6 setRequiresSecureCoding:(unint64_t)sub_1002673C8() & 1];
    id v8 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithCoder:v6];
    if (v8)
    {
      a2 = v8;

      sub_10000DBEC(v10, v11);
      sub_10000CC5C((uint64_t)v12);
      sub_10000CC5C((uint64_t)a1);
      return a2;
    }
    sub_10001A050();
    swift_allocError();
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0xE000000000000000;
    *(unsigned char *)(v9 + 16) = 7;
    swift_willThrow();

    sub_10000DBEC(v10, v11);
    sub_10000CC5C((uint64_t)v12);
  }
  sub_10000CC5C((uint64_t)a1);
  return a2;
}

uint64_t sub_1002675D0(void *a1, void *a2)
{
  sub_10000D6E4(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  id v3 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:(unint64_t)sub_1002673C8() & 1];
  [a2 encodeWithCoder:v3];
  [v3 finishEncoding];
  id v4 = [v3 encodedData];
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  sub_100071968((uint64_t)v9, v10);
  sub_100155470();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();

  sub_10000DBEC(v5, v7);
  return sub_10000CC5C((uint64_t)v9);
}

uint64_t sub_100267710()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

id sub_10026774C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id result = sub_100267410(a1, *(id *)(a2 + 16));
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_10026777C(void *a1)
{
  return sub_1002675D0(a1, *v1);
}

uint64_t sub_1002677A0()
{
  return sub_100267710();
}

void *sub_1002677B4(void *a1, void *a2)
{
  uint64_t v5 = sub_10000D6E4(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
  {
    sub_10000CC5C((uint64_t)a1);
  }
  else
  {
    sub_10000D6E4(v8, v8[3]);
    if (dispatch thunk of SingleValueDecodingContainer.decodeNil()())
    {
      uint64_t v5 = 0;
    }
    else
    {
      sub_1000291F4((uint64_t)a1, (uint64_t)v7);
      uint64_t v5 = sub_100267410(v7, a2);
    }
    sub_10000CC5C((uint64_t)v8);
    sub_10000CC5C((uint64_t)a1);
  }
  return v5;
}

uint64_t sub_1002678A4(void *a1, void *a2)
{
  if (a2)
  {
    swift_unknownObjectRetain();
    sub_1002675D0(a1, a2);
    return swift_unknownObjectRelease();
  }
  else
  {
    sub_10000D6E4(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    sub_100071968((uint64_t)v5, v6);
    dispatch thunk of SingleValueEncodingContainer.encodeNil()();
    return sub_10000CC5C((uint64_t)v5);
  }
}

uint64_t sub_100267968(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      char v2 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (v2) {
        return 1;
      }
    }
  }
  else if (!a2)
  {
    return 1;
  }
  return 0;
}

void *sub_1002679FC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id result = sub_1002677B4(a1, *(void **)(a2 + 16));
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_100267A2C(void *a1)
{
  return sub_1002678A4(a1, *v1);
}

uint64_t sub_100267A50(uint64_t *a1, uint64_t *a2)
{
  return sub_100267968(*a1, *a2);
}

uint64_t type metadata accessor for NSCodingCodable()
{
  return sub_10000F2E4();
}

void *sub_100267A7C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

void *sub_100267AAC(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

void *sub_100267AE8(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

uint64_t type metadata accessor for NSCodingCodableOptional()
{
  return sub_10000F2E4();
}

id sub_100267B34()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = 0;
  id v2 = [v0 initForReadingFromData:isa error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

id sub_100267F0C()
{
  uint64_t v1 = OBJC_IVAR____TtC17proximitycontrold12TempProvider_dispatchQueue;
  uint64_t v2 = qword_10035A628;
  id v3 = v0;
  if (v2 != -1) {
    swift_once();
  }
  id v4 = (void *)qword_1003ACB50;
  *(void *)&v3[v1] = qword_1003ACB50;
  uint64_t v5 = &v3[OBJC_IVAR____TtC17proximitycontrold12TempProvider_displayContextHandler];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  id v6 = &v3[OBJC_IVAR____TtC17proximitycontrold12TempProvider_progressEventHandler];
  *(void *)id v6 = 0;
  *((void *)v6 + 1) = 0;
  unint64_t v7 = &v3[OBJC_IVAR____TtC17proximitycontrold12TempProvider_proximityEventHandler];
  *(void *)unint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *(void *)&v3[OBJC_IVAR____TtC17proximitycontrold12TempProvider_receivedEvents] = _swiftEmptyArrayStorage;
  id v8 = v4;

  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for TempProvider();
  return [super init];
}

id sub_100268030()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TempProvider();
  return [super dealloc];
}

uint64_t type metadata accessor for TempProvider()
{
  return self;
}

uint64_t sub_100268114(void *a1)
{
  uint64_t v2 = v1;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  id v4 = [a1 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  id v9 = sub_1001F6C4C();
  swift_bridgeObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 ulog:40 message:v10];
  swift_bridgeObjectRelease();

  unint64_t v11 = *(void (**)(void *))(v2 + OBJC_IVAR____TtC17proximitycontrold12TempProvider_proximityEventHandler);
  if (v11)
  {
    swift_retain();
    v11(a1);
    sub_10000F088((uint64_t)v11);
  }
  uint64_t v12 = (void *)(v2 + OBJC_IVAR____TtC17proximitycontrold12TempProvider_receivedEvents);
  swift_beginAccess();
  id v13 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t sub_100268338()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100268370()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_100268384(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100268394()
{
  return swift_release();
}

uint64_t AnyTransition.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = sub_100268420(a1);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1002683E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_100268420(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_100268420(uint64_t a1)
{
  uint64_t v2 = static AnyTransition.identity.getter();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return v2;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  do
  {
    ++v4;
    swift_retain();
    uint64_t v5 = AnyTransition.combined(with:)();
    swift_release();
    swift_release();
  }
  while (v3 != v4);
  swift_release();
  swift_bridgeObjectRelease();
  return v5;
}

id sub_1002684D8()
{
  uint64_t v1 = *v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return [v2 initWithBool:v1];
}

id sub_100268520()
{
  double v1 = *v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return [v2 initWithDouble:v1];
}

id sub_100268568()
{
  uint64_t v1 = *v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return [v2 initWithInteger:v1];
}

id sub_1002685B0()
{
  int v1 = *v0;
  id v2 = objc_allocWithZone((Class)NSNumber);
  LODWORD(v3) = v1;

  return [v2 initWithFloat:v3];
}

id sub_1002685F8()
{
  id v0 = objc_allocWithZone((Class)NSString);
  swift_bridgeObjectRetain();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithString:v1];

  return v2;
}

unint64_t sub_100268670(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_13;
  }
  sub_10000A38C(&qword_1003718F0);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unint64_t result = swift_retain();
  uint64_t v5 = 0;
  id v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    uint64_t v9 = *(v6 - 1);
    uint64_t v8 = *v6;
    if (!v9)
    {
      swift_retain();
LABEL_12:
      swift_release();
      goto LABEL_13;
    }
    uint64_t v10 = *(v6 - 2);
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_100269CBC(v10, v9);
    if (v11) {
      goto LABEL_15;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v12 = v10;
    v12[1] = v9;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_16;
    }
    v2[2] = v15;
    v6 += 3;
    ++v5;
    if (v7 == v3) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

unint64_t sub_1002687C0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_13;
  }
  sub_10000A38C(&qword_1003718F8);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unint64_t result = swift_retain();
  uint64_t v5 = 0;
  id v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    uint64_t v9 = *(v6 - 1);
    uint64_t v8 = *v6;
    if (!v9)
    {
      swift_unknownObjectRetain();
LABEL_12:
      swift_release();
      goto LABEL_13;
    }
    uint64_t v10 = *(v6 - 2);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t result = sub_100269CBC(v10, v9);
    if (v11) {
      goto LABEL_15;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v12 = v10;
    v12[1] = v9;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_16;
    }
    v2[2] = v15;
    v6 += 3;
    ++v5;
    if (v7 == v3) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

unint64_t sub_100268910(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_11;
  }
  sub_10000A38C(&qword_10035EE60);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unint64_t result = swift_retain();
  uint64_t v5 = 0;
  id v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    uint64_t v8 = *(v6 - 1);
    if (!v8) {
      goto LABEL_9;
    }
    uint64_t v9 = *(v6 - 2);
    uint64_t v10 = *v6;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100269CBC(v9, v8);
    if (v11) {
      goto LABEL_13;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v12 = v9;
    v12[1] = v8;
    *(void *)(v2[7] + 8 * result) = v10;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_14;
    }
    v6 += 3;
    v2[2] = v15;
    ++v5;
    if (v7 == v3)
    {
LABEL_9:
      swift_release();
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

unint64_t sub_100268A50(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A38C(&qword_100371938);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (id *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    id v7 = *v4;
    id v8 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100269CBC(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100268B68(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_100371928);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    id v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A38C(&qword_100371930);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000D728(v12, (uint64_t)v5, &qword_100371928);
    unint64_t result = sub_100269DA0((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    _OWORD v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100268D5C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A38C(&qword_100371940);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100269CBC(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100268E80(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A38C((uint64_t *)&unk_1003718E0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000D728(v6, (uint64_t)v15, &qword_10036C190);
    unint64_t result = sub_100269E60((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_100027B00(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    _OWORD v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100268FC4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A38C(&qword_100371980);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000D728(v6, (uint64_t)&v15, &qword_100371988);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100269CBC(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100027B00(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    _OWORD v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002690FC(uint64_t a1)
{
  return sub_100269494(a1, &qword_100371970);
}

unint64_t sub_100269108(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A38C((uint64_t *)&unk_100371900);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000D728(v6, (uint64_t)v15, &qword_10036DC90);
    unint64_t result = sub_100269E60((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = sub_1001FF0CC((uint64_t)&v17, v3[7] + 32 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    _OWORD v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10026924C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A38C(&qword_100371978);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    unint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    sub_10001F8BC(v7, v8);
    unint64_t result = sub_100269CBC(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (uint64_t *)(v2[7] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100269374(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A38C(&qword_100371948);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100269CBC(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100269488(uint64_t a1)
{
  return sub_100269494(a1, &qword_10035EE48);
}

unint64_t sub_100269494(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A38C(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100269CBC(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    _OWORD v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002695AC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A38C((uint64_t *)&unk_100371960);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 64);
  while (1)
  {
    uint64_t v5 = *(v4 - 4);
    uint64_t v6 = *(v4 - 3);
    uint64_t v7 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v9 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100269CBC(v5, v6);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v12 = v5;
    v12[1] = v6;
    BOOL v13 = (void *)(v2[7] + 24 * result);
    *BOOL v13 = v7;
    v13[1] = v8;
    void v13[2] = v9;
    uint64_t v14 = v2[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v2[2] = v16;
    v4 += 5;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002696F0(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_100371990);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A38C(&qword_10035EEC0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000D728(v12, (uint64_t)v5, &qword_100371990);
    unint64_t result = sub_100269DA0((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7];
    uint64_t active = type metadata accessor for PCUserAlertManager.ActiveAlertContext(0);
    unint64_t result = sub_10005C500(v9, v19 + *(void *)(*(void *)(active - 8) + 72) * v16);
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    _OWORD v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10026990C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A38C(&qword_100371950);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000D728(v6, (uint64_t)&v13, &qword_100371958);
    uint64_t v7 = v13;
    unint64_t result = sub_100269F10(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_100027B00(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    _OWORD v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t PCDisambiguationContext.description.getter()
{
  sub_10000A38C(&qword_1003718D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10028FDD0;
  *(void *)(inited + 32) = 0x4449656369766564;
  *(void *)(inited + 40) = 0xE800000000000000;
  id v2 = [v0 deviceIdentifier];
  unint64_t v3 = sub_100269C7C();
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 72) = v3;
  *(void *)(inited + 80) = 0x6F69746365726964;
  *(void *)(inited + 88) = 0xE90000000000006ELL;
  id v4 = [v0 interactionDirection];
  type metadata accessor for PCInteractionDirection(0);
  *(void *)(inited + 96) = v4;
  *(void *)(inited + 120) = v5;
  *(void *)(inited + 128) = 0x7974697669746361;
  *(void *)(inited + 136) = 0xE800000000000000;
  if ([v0 activity])
  {
    sub_10000A38C((uint64_t *)&unk_10036E690);
    uint64_t v6 = String.init<A>(describing:)();
  }
  else
  {
    unint64_t v7 = 0xE300000000000000;
    uint64_t v6 = 7104878;
  }
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v6;
  *(void *)(inited + 152) = v7;
  sub_100268FC4(inited);
  uint64_t v8 = Dictionary.description.getter();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return 0xD000000000000019;
}

unint64_t sub_100269C7C()
{
  unint64_t result = qword_1003718D8;
  if (!qword_1003718D8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003718D8);
  }
  return result;
}

unint64_t sub_100269CBC(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100269FA4(a1, a2, v4);
}

unint64_t sub_100269D34(unsigned int a1)
{
  Hasher.init(_seed:)();
  sub_10025C348((uint64_t)v4, a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_10026A088(a1, v2);
}

unint64_t sub_100269DA0(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_1001B8344((unint64_t *)&qword_10035CFF0);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_10026A1C8(a1, v2);
}

unint64_t sub_100269E24(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return sub_10026A374(a1, v2);
}

unint64_t sub_100269E60(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10026A410(a1, v4);
}

unint64_t sub_100269EA4(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_10026A4D8(a1, v2);
}

unint64_t sub_100269F10(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_10026A578(a1, v2);
}

unint64_t sub_100269FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10026A088(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = ~v4;
    int v7 = a1 & 0xE000;
    while (1)
    {
      unsigned int v8 = *(unsigned __int16 *)(*(void *)(v2 + 48) + 2 * result);
      switch(v8 >> 13)
      {
        case 1u:
          if (v7 != 0x2000) {
            goto LABEL_4;
          }
          goto LABEL_16;
        case 2u:
          if (v7 != 0x4000) {
            goto LABEL_4;
          }
LABEL_16:
          if ((v8 ^ a1) & 1) == 0 && ((((v8 & 0x100) == 0) ^ ((unsigned __int16)(a1 & 0x100) >> 8))) {
            return result;
          }
          goto LABEL_4;
        case 3u:
          if (v7 == 24576 && ((v8 ^ a1) & 1) == 0) {
            return result;
          }
          goto LABEL_4;
        case 4u:
          if (v8 == 0x8000)
          {
            if (a1 == 0x8000) {
              return result;
            }
          }
          else if (v8 == 32769)
          {
            if (a1 == 32769) {
              return result;
            }
          }
          else if (a1 == 33024)
          {
            return result;
          }
LABEL_4:
          unint64_t result = (result + 1) & v6;
          if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
            return result;
          }
          break;
        default:
          if (!(a1 >> 13) && ((a1 ^ ((v8 & 1) == 0)) & 1) != 0) {
            return result;
          }
          goto LABEL_4;
      }
    }
  }
  return result;
}

unint64_t sub_10026A1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    BOOL v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_1001B8344((unint64_t *)&qword_10036C0C0);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_10026A374(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10026A410(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10005C374(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_1000BA108((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10026A4D8(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10026A578(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_10026A6F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000A38C(&qword_100371918);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = a1 + 32; ; i += 48)
    {
      sub_10000D728(i, (uint64_t)v11, &qword_100371920);
      unsigned __int8 v5 = v11[0];
      unint64_t result = sub_100269EA4(v11[0]);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v3[6] + result) = v5;
      unint64_t result = sub_10000D7E8(&v12, v3[7] + 40 * result);
      uint64_t v8 = v3[2];
      BOOL v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      _OWORD v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t PCUserAlert.__allocating_init(definition:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  return sub_10026E054((uint64_t)v4, a1);
}

uint64_t PCUserAlert.run()(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10026A8D0, 0, 0);
}

uint64_t sub_10026A8D0()
{
  if (qword_10035A678 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  v0[2] = v0[4];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[6] = v2;
  uint64_t WitnessTable = swift_getWitnessTable();
  *uint64_t v2 = v0;
  v2[1] = sub_10026A9D8;
  uint64_t v4 = v0[3];
  return sub_10026B8B4(v4, (uint64_t)(v0 + 2), v1, WitnessTable);
}

uint64_t sub_10026A9D8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    __asm { BRAA            X1, X16 }
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10026AB0C, 0, 0);
}

uint64_t sub_10026AB0C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026AB24()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001D790(v0, qword_100371998);
  sub_10001D758(v0, (uint64_t)qword_100371998);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10026ABA4()
{
  type metadata accessor for PCUserAlertManager(0);
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_10026ABE4();
  qword_1003ACC48 = v0;
  return result;
}

uint64_t sub_10026ABE4()
{
  uint64_t v1 = sub_10000A38C(&qword_10035F870);
  __chkstk_darwin(v1 - 8);
  uint64_t v21 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000A38C(&qword_100371CD0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000A38C(&qword_100371C78);
  uint64_t v7 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  BOOL v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000A38C(&qword_100371C70);
  uint64_t v10 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  long long v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = sub_1002696F0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = v0 + OBJC_IVAR____TtC17proximitycontrold18PCUserAlertManager_eventStream;
  uint64_t v18 = v0 + OBJC_IVAR____TtC17proximitycontrold18PCUserAlertManager_eventContinuation;
  sub_10000A38C(&qword_100371A50);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v13, v12, v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v18, v9, v20);
  *(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold18PCUserAlertManager_eventTask) = 0;
  uint64_t v14 = type metadata accessor for TaskPriority();
  uint64_t v15 = (uint64_t)v21;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v21, 1, 1, v14);
  uint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = 0;
  v16[3] = 0;
  v16[4] = v0;
  swift_retain();
  sub_100255A24(v15, (uint64_t)&unk_100371CE0, (uint64_t)v16);
  swift_release();
  return v0;
}

uint64_t sub_10026AF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v4[2] = a4;
  uint64_t v6 = sub_10000A38C(&qword_100371C70);
  v4[3] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[4] = v7;
  v4[5] = *(void *)(v7 + 64);
  v4[6] = swift_task_alloc();
  sub_10000A38C(&qword_10035F870);
  v4[7] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_10026B05C, a4, 0);
}

uint64_t sub_10026B05C()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5 + OBJC_IVAR____TtC17proximitycontrold18PCUserAlertManager_eventStream, v6);
  uint64_t v8 = sub_10026F23C(&qword_100371CC0, (void (*)(uint64_t))type metadata accessor for PCUserAlertManager);
  unint64_t v9 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v10 = (v3 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = v8;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v9, v2, v6);
  *(void *)(v11 + v10) = v5;
  swift_retain_n();
  *(void *)(v5 + OBJC_IVAR____TtC17proximitycontrold18PCUserAlertManager_eventTask) = sub_100255A24(v1, (uint64_t)&unk_100371CF0, v11);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10026B228()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC17proximitycontrold18PCUserAlertManager_eventTask))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC17proximitycontrold18PCUserAlertManager_eventStream;
  uint64_t v2 = sub_10000A38C(&qword_100371C70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC17proximitycontrold18PCUserAlertManager_eventContinuation;
  uint64_t v4 = sub_10000A38C(&qword_100371C78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10026B348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5[2] = a4;
  void v5[3] = a5;
  uint64_t v7 = type metadata accessor for UUID();
  void v5[4] = v7;
  v5[5] = *(void *)(v7 - 8);
  v5[6] = swift_task_alloc();
  sub_10000A38C(&qword_100371CF8);
  void v5[7] = swift_task_alloc();
  uint64_t v8 = sub_10000A38C(&qword_100371D00);
  v5[8] = v8;
  v5[9] = *(void *)(v8 - 8);
  v5[10] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_10026B49C, a5, 0);
}

uint64_t sub_10026B49C()
{
  sub_10000A38C(&qword_100371C70);
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = sub_10026F23C(&qword_100371CC0, (void (*)(uint64_t))type metadata accessor for PCUserAlertManager);
  v0[11] = v1;
  uint64_t v2 = v0[3];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[12] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10026B5A4;
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  return AsyncStream.Iterator.next(isolation:)(v4, v2, v1, v5);
}

uint64_t sub_10026B5A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_10026B6B4, v1, 0);
}

uint64_t sub_10026B6B4()
{
  uint64_t v1 = (uint64_t *)v0[7];
  uint64_t v2 = sub_10000A38C(&qword_100371A50);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = *v1;
    (*(void (**)(void, char *, void))(v0[5] + 32))(v0[6], (char *)v1 + *(int *)(v2 + 48), v0[4]);
    if ((unint64_t)(v5 - 1) >= 2)
    {
      if (v5 == 3)
      {
        sub_10026D4A0(v0[6], 0);
      }
      else
      {
        uint64_t v6 = v0[6];
        swift_errorRetain();
        sub_10026D4A0(v6, v5);
        sub_10000BECC(v5);
        sub_10000BECC(v5);
      }
    }
    (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
    uint64_t v7 = v0[11];
    uint64_t v8 = v0[3];
    unint64_t v9 = (void *)swift_task_alloc();
    v0[12] = v9;
    *unint64_t v9 = v0;
    v9[1] = sub_10026B5A4;
    uint64_t v10 = v0[7];
    uint64_t v11 = v0[8];
    return AsyncStream.Iterator.next(isolation:)(v10, v8, v7, v11);
  }
}

uint64_t sub_10026B8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[27] = a4;
  v5[28] = v4;
  v5[25] = a2;
  v5[26] = a3;
  unsigned char v5[24] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[29] = AssociatedTypeWitness;
  uint64_t v7 = type metadata accessor for Optional();
  v5[30] = v7;
  v5[31] = *(void *)(v7 - 8);
  v5[32] = swift_task_alloc();
  v5[33] = *(void *)(AssociatedTypeWitness - 8);
  v5[34] = swift_task_alloc();
  v5[35] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0);
  v5[36] = v8;
  v5[37] = *(void *)(v8 - 8);
  v5[38] = swift_task_alloc();
  sub_10000A38C(&qword_100371C98);
  v5[39] = swift_task_alloc();
  uint64_t v9 = sub_10000A38C(&qword_100371CA0);
  v5[40] = v9;
  v5[41] = *(void *)(v9 - 8);
  v5[42] = swift_task_alloc();
  sub_10000A38C(&qword_100370238);
  v5[43] = swift_task_alloc();
  uint64_t v10 = sub_10000A38C(&qword_100371CA8);
  v5[44] = v10;
  v5[45] = *(void *)(v10 - 8);
  v5[46] = swift_task_alloc();
  uint64_t v11 = sub_10000A38C(&qword_100371BC8);
  v5[47] = v11;
  v5[48] = *(void *)(v11 - 8);
  v5[49] = swift_task_alloc();
  uint64_t v12 = sub_10000A38C(&qword_100371CB0);
  v5[50] = v12;
  v5[51] = *(void *)(v12 - 8);
  v5[52] = swift_task_alloc();
  uint64_t v13 = sub_10000A38C(&qword_100371C78);
  v5[53] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[54] = v14;
  v5[55] = *(void *)(v14 + 64);
  unsigned char v5[56] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for UUID();
  v5[57] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v5[58] = v16;
  v5[59] = *(void *)(v16 + 64);
  v5[60] = swift_task_alloc();
  v5[61] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_10026BD20, v4, 0);
}

uint64_t sub_10026BD20()
{
  uint64_t v1 = v0[58];
  uint64_t v2 = v0[56];
  uint64_t v24 = v0[57];
  uint64_t v25 = v0[60];
  uint64_t v22 = v0[61];
  uint64_t v3 = v0[54];
  uint64_t v26 = v0[55];
  uint64_t v23 = v0[53];
  uint64_t v33 = v0[49];
  uint64_t v34 = v0[48];
  uint64_t v35 = v0[47];
  uint64_t v29 = v0[45];
  uint64_t v30 = v0[44];
  uint64_t v31 = v0[46];
  unint64_t v27 = (uint64_t *)v0[43];
  uint64_t v5 = v0[27];
  uint64_t v4 = v0[28];
  uint64_t v6 = v0[26];
  int v32 = *(void (**)(uint64_t, uint64_t))(v5 + 24);
  uint64_t v28 = v0[25];
  v32(v6, v5);
  v0[16] = type metadata accessor for PCUserAlertPresentationContext();
  v0[17] = sub_10026F23C(&qword_100371CB8, (void (*)(uint64_t))type metadata accessor for PCUserAlertPresentationContext);
  uint64_t v7 = sub_10000D680(v0 + 13);
  PCUserAlertProtocol.presentationContext.getter(v6, v5, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v4 + OBJC_IVAR____TtC17proximitycontrold18PCUserAlertManager_eventContinuation, v23);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v25, v22, v24);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v9 = (v26 + *(unsigned __int8 *)(v1 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v8, v2, v23);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v1 + 32))(v10 + v9, v25, v24);
  id v11 = objc_allocWithZone((Class)type metadata accessor for PCViewServiceHandle());
  id v12 = sub_1000772F4(0xD000000000000019, 0x80000001002C7D70, (uint64_t)(v0 + 13), (uint64_t)sub_10026F49C, v10);
  v0[62] = (uint64_t)v12;
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v31, enum case for AsyncThrowingStream.Continuation.BufferingPolicy.unbounded<A, B>(_:), v30);
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
  v32(v6, v5);
  v27[3] = v6;
  v27[4] = v5;
  uint64_t v13 = sub_10000D680(v27);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v13, v28, v6);
  uint64_t active = type metadata accessor for PCUserAlertManager.ActiveAlertContext(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))((char *)v27 + *(int *)(active + 24), v33, v35);
  v27[5] = (uint64_t)v12;
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(active - 8) + 56))(v27, 0, 1, active);
  swift_beginAccess();
  id v15 = v12;
  sub_100245764((uint64_t)v27, v25);
  swift_endAccess();
  sub_100076E00();
  uint64_t v16 = v0[28];
  AsyncThrowingStream.makeAsyncIterator()();
  uint64_t v17 = sub_10026F23C(&qword_100371CC0, (void (*)(uint64_t))type metadata accessor for PCUserAlertManager);
  uint64_t v18 = (void *)swift_task_alloc();
  v0[63] = (uint64_t)v18;
  *uint64_t v18 = v0;
  v18[1] = sub_10026C400;
  uint64_t v19 = v0[39];
  uint64_t v20 = v0[40];
  return __sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v19, v16, v17, v20, v0 + 22);
}

uint64_t sub_10026C400()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 512) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 224);
  if (v0) {
    uint64_t v4 = sub_10026CAF4;
  }
  else {
    uint64_t v4 = sub_10026C518;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(v4, v3, 0);
}

uint64_t sub_10026C518()
{
  uint64_t v1 = v0[39];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[37] + 48))(v1, 1, v0[36]) == 1)
  {
    uint64_t v2 = v0[64];
    (*(void (**)(void, void))(v0[41] + 8))(v0[42], v0[40]);
    static Task<>.checkCancellation()();
    uint64_t v3 = (void *)v0[62];
    uint64_t v4 = v0[58];
    uint64_t v55 = v0[57];
    uint64_t v57 = v0[61];
    uint64_t v6 = v0[51];
    uint64_t v5 = v0[52];
    uint64_t v8 = v0[49];
    uint64_t v7 = v0[50];
    uint64_t v10 = v0[47];
    uint64_t v9 = v0[48];
    if (!v2)
    {
      sub_10001A050();
      swift_allocError();
      *(void *)uint64_t v24 = 0;
      *(void *)(v24 + 8) = 0xE000000000000000;
      *(unsigned char *)(v24 + 16) = 11;
      swift_willThrow();
    }

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    goto LABEL_8;
  }
  uint64_t v59 = v0[64];
  uint64_t v11 = v0[61];
  uint64_t v56 = v0[35];
  uint64_t v58 = v0[30];
  uint64_t v12 = v0[26];
  uint64_t v13 = v0[27];
  sub_10026F574(v1, v0[38], type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters);
  sub_10026D4A0(v11, 0);
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
  uint64_t v14 = v0[10];
  v0[21] = v14;
  swift_bridgeObjectRetain();
  sub_10026E10C((uint64_t)(v0 + 2));
  v0[23] = v14;
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.subscript.getter();
  sub_10026F5DC((uint64_t)(v0 + 21));
  sub_100116F98(0xD00000000000001BLL, 0x80000001002C7D90, v58, v56);
  id v15 = (void *)v0[62];
  uint64_t v57 = v0[61];
  if (v59)
  {
    uint64_t v4 = v0[58];
    uint64_t v16 = v0[51];
    uint64_t v54 = v0[52];
    uint64_t v55 = v0[57];
    uint64_t v17 = v0[48];
    uint64_t v52 = v0[49];
    uint64_t v53 = v0[50];
    uint64_t v18 = v0[41];
    uint64_t v50 = v0[42];
    uint64_t v51 = v0[47];
    uint64_t v19 = v0[40];
    uint64_t v20 = v0[38];
    uint64_t v22 = v0[31];
    uint64_t v21 = v0[32];
    uint64_t v23 = v0[30];

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    sub_10026F608(v20, type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v50, v19);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v52, v51);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v54, v53);
LABEL_8:
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v57, v55);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    goto LABEL_10;
  }
  uint64_t v26 = v0[58];
  uint64_t v48 = v0[57];
  uint64_t v27 = v0[51];
  uint64_t v43 = v0[50];
  uint64_t v44 = v0[52];
  uint64_t v28 = v0[48];
  uint64_t v39 = v0[47];
  uint64_t v40 = v0[49];
  uint64_t v29 = v0[41];
  uint64_t v60 = v0[42];
  uint64_t v30 = v0[40];
  uint64_t v46 = v0[36];
  uint64_t v47 = v0[38];
  uint64_t v45 = v0[35];
  uint64_t v31 = v0[33];
  uint64_t v32 = v0[31];
  uint64_t v33 = v0[32];
  uint64_t v34 = v0[30];
  uint64_t v41 = v0[29];
  uint64_t v42 = v0[34];
  uint64_t v49 = v0[24];

  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v60, v30);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v40, v39);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v44, v43);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v57, v48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v42, v45, v41);
  uint64_t v35 = (uint64_t *)(v47 + *(int *)(v46 + 24));
  uint64_t v36 = *v35;
  uint64_t v37 = v35[1];
  swift_bridgeObjectRetain();
  sub_10026F608(v47, type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters);
  sub_1000C3BC8(v42, v36, v37, v41, v49);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
LABEL_10:
  return v25();
}

uint64_t sub_10026CAF4()
{
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v13 = *(void *)(v0 + 456);
  uint64_t v14 = *(void *)(v0 + 488);
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v12 = *(void *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 400);
  uint64_t v6 = *(void *)(v0 + 376);
  uint64_t v5 = *(void *)(v0 + 384);
  uint64_t v7 = *(void *)(v0 + 328);
  uint64_t v8 = *(void *)(v0 + 336);
  uint64_t v9 = *(void *)(v0 + 320);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v12, v3);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v14, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t PCUserAlertProtocol.presentationContext.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void v23[8];
  void v24[11];
  void v25[2];
  uint64_t v26;
  void v27[4];
  uint64_t v28;
  void v29[6];
  uint64_t v30;
  void v31[7];
  unsigned __int8 v32;
  void v33[11];
  void v34[11];
  unsigned char v35[16];
  unsigned char v36[16];
  unsigned char v37[16];
  unsigned char v38[24];

  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 32);
  v9(v24, a1, a2);
  sub_10001639C((uint64_t)v24, (uint64_t)v38, &qword_10035F850);
  sub_100095C18((uint64_t)v38);
  sub_10026E10C((uint64_t)v24);
  v9(v25, a1, a2);
  sub_10001639C((uint64_t)&v26, (uint64_t)v37, &qword_10035F850);
  sub_100095C18((uint64_t)v37);
  sub_10026E10C((uint64_t)v25);
  v9(v27, a1, a2);
  sub_10001639C((uint64_t)&v28, (uint64_t)v36, &qword_10035F850);
  sub_100095C18((uint64_t)v36);
  sub_10026E10C((uint64_t)v27);
  v9(v29, a1, a2);
  sub_10026E10C((uint64_t)v29);
  sub_10001639C((uint64_t)&v30, (uint64_t)v35, &qword_1003719C0);
  v9(v31, a1, a2);
  sub_10026E10C((uint64_t)v31);
  uint64_t v20 = v32;
  v9(v33, a1, a2);
  uint64_t v10 = v33[8];
  swift_bridgeObjectRetain();
  sub_10026E10C((uint64_t)v33);
  v23[7] = v10;
  v9(v34, a1, a2);
  uint64_t v11 = v34[9];
  uint64_t v12 = v34[10];
  swift_retain();
  sub_10026E10C((uint64_t)v34);
  _OWORD v23[2] = a1;
  v23[3] = a2;
  v23[4] = v11;
  v23[5] = v12;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = sub_10004DDF8((void (*)(char *, char *))sub_10026E550, (uint64_t)v23, v13, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v15);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(a3, v8, v22);
  uint64_t v17 = (int *)type metadata accessor for PCUserAlertPresentationContext();
  sub_10001639C((uint64_t)v38, a3 + v17[5], &qword_10035F850);
  sub_10001639C((uint64_t)v37, a3 + v17[6], &qword_10035F850);
  sub_10001639C((uint64_t)v36, a3 + v17[7], &qword_10035F850);
  uint64_t result = sub_10001639C((uint64_t)v35, a3 + v17[8], &qword_1003719C0);
  *(unsigned char *)(a3 + v17[9]) = v20;
  *(void *)(a3 + v17[10]) = v16;
  return result;
}

uint64_t sub_10026D02C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = sub_10000A38C(&qword_100371A50);
  __chkstk_darwin(v31);
  uint64_t v7 = (void *)((char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10000A38C(&qword_100371CC8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10035A670 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10001D758(v12, (uint64_t)qword_100371998);
  sub_1000C7724(a1);
  sub_1000C7724(a1);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v28 = v8;
    uint64_t v30 = a2;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v29 = a3;
    switch(a1)
    {
      case 1:
        unint64_t v16 = 0xE900000000000064;
        uint64_t v17 = 0x6574736575716572;
        break;
      case 3:
        unint64_t v16 = 0xED00006574617669;
        uint64_t v17 = 0x7463616544646964;
        break;
      case 2:
        unint64_t v16 = 0xEB00000000657461;
        uint64_t v17 = 0x7669746341646964;
        break;
      default:
        uint64_t v34 = 0;
        unint64_t v35 = 0xE000000000000000;
        swift_errorRetain();
        swift_errorRetain();
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        uint64_t v34 = 0xD000000000000015;
        unint64_t v35 = 0x80000001002B1EB0;
        if (a1)
        {
          swift_getErrorValue();
          v26[1] = v33;
          unint64_t v27 = v32;
          swift_errorRetain();
          uint64_t v18 = Error.localizedDescription.getter();
          unint64_t v27 = v19;
          sub_10000BECC(a1);
          uint64_t v20 = v18;
        }
        else
        {
          unint64_t v27 = 0xE300000000000000;
          uint64_t v20 = 7104878;
        }
        unint64_t v21 = v27;
        String.append(_:)(*(Swift::String *)&v20);
        swift_bridgeObjectRelease();
        v22._countAndFlagsBits = 10528;
        v22._object = (void *)0xE200000000000000;
        String.append(_:)(v22);
        sub_10000BECC(a1);
        sub_10000BECC(a1);
        uint64_t v17 = v34;
        unint64_t v16 = v35;
        break;
    }
    uint64_t v34 = sub_100166E34(v17, v16, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000BECC(a1);
    sub_10000BECC(a1);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "PCViewService event: %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a3 = v29;
    uint64_t v8 = v28;
  }
  else
  {
    sub_10000BECC(a1);
    sub_10000BECC(a1);
  }
  uint64_t v23 = (char *)v7 + *(int *)(v31 + 48);
  uint64_t *v7 = a1;
  uint64_t v24 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v23, a3, v24);
  sub_1000C7724(a1);
  sub_10000A38C(&qword_100371C78);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10026D4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000A38C(&qword_100371BC8);
  uint64_t v50 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v49 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A38C(&qword_100370238);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v48 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v51 = (char *)&v43 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (id *)((char *)&v43 - v14);
  __chkstk_darwin(v13);
  uint64_t v52 = (char *)&v43 - v16;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10035A670 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_10001D758(v21, (uint64_t)qword_100371998);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, v17);
  swift_errorRetain();
  swift_errorRetain();
  Swift::String v22 = Logger.logObject.getter();
  int v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, (os_log_type_t)v23))
  {
    int v44 = v23;
    uint64_t v45 = v3;
    uint64_t v46 = a1;
    uint64_t v47 = v6;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    v54[0] = v43;
    *(_DWORD *)uint64_t v24 = 136315394;
    sub_10026F23C((unint64_t *)&qword_10035F778, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v53 = sub_100166E34(v25, v26, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    *(_WORD *)(v24 + 12) = 2080;
    if (a2)
    {
      uint64_t v53 = a2;
      swift_errorRetain();
      sub_10000A38C((uint64_t *)&unk_100365D60);
      uint64_t v27 = String.init<A>(describing:)();
      unint64_t v29 = v28;
    }
    else
    {
      unint64_t v29 = 0xE300000000000000;
      uint64_t v27 = 7104878;
    }
    uint64_t v31 = (uint64_t)v51;
    uint64_t v30 = (uint64_t)v52;
    uint64_t v53 = sub_100166E34(v27, v29, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v44, "Invalidating %s... error=%s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v46;
    uint64_t v6 = v47;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    swift_errorRelease();
    swift_errorRelease();

    uint64_t v31 = (uint64_t)v51;
    uint64_t v30 = (uint64_t)v52;
  }
  swift_beginAccess();
  sub_1001309A0(a1, v30);
  swift_endAccess();
  sub_10026F174(v30, (uint64_t)v15);
  uint64_t active = type metadata accessor for PCUserAlertManager.ActiveAlertContext(0);
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(active - 8) + 48);
  if (v33((uint64_t)v15, 1, active) == 1)
  {
    sub_10026F1DC((uint64_t)v15);
    uint64_t v34 = v30;
    if (a2) {
      goto LABEL_11;
    }
LABEL_14:
    uint64_t v37 = v48;
    sub_10026F174(v34, v48);
    if (v33(v37, 1, active) == 1)
    {
      sub_10026F1DC(v30);
      uint64_t v35 = v37;
      return sub_10026F1DC(v35);
    }
    uint64_t v41 = v37 + *(int *)(active + 24);
    uint64_t v40 = v49;
    uint64_t v39 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v41, v6);
    sub_10026F608(v37, type metadata accessor for PCUserAlertManager.ActiveAlertContext);
    v54[0] = 0;
LABEL_18:
    AsyncThrowingStream.Continuation.finish(throwing:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v6);
    uint64_t v35 = v30;
    return sub_10026F1DC(v35);
  }
  id v36 = v15[5];
  sub_10026F608((uint64_t)v15, type metadata accessor for PCUserAlertManager.ActiveAlertContext);
  sub_100076B64();

  uint64_t v34 = v30;
  if (!a2) {
    goto LABEL_14;
  }
LABEL_11:
  sub_10026F174(v34, v31);
  if (v33(v31, 1, active) != 1)
  {
    uint64_t v38 = v31 + *(int *)(active + 24);
    uint64_t v40 = v49;
    uint64_t v39 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v38, v6);
    swift_errorRetain();
    sub_10026F608(v31, type metadata accessor for PCUserAlertManager.ActiveAlertContext);
    v54[0] = a2;
    goto LABEL_18;
  }
  sub_10026F1DC(v30);
  uint64_t v35 = v31;
  return sub_10026F1DC(v35);
}

uint64_t sub_10026DB34(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_100371C80);
  uint64_t v25 = *(void *)(v6 - 8);
  uint64_t v26 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_100370238);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t active = type metadata accessor for PCUserAlertManager.ActiveAlertContext(0);
  uint64_t v16 = *(void *)(active - 8);
  __chkstk_darwin(active);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v19 = *(void *)(v1 + 112);
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v27 = a1;
  if (v20)
  {
    swift_bridgeObjectRetain();
    unint64_t v21 = sub_100269DA0(a1);
    if (v22)
    {
      sub_10026F2E0(*(void *)(v19 + 56) + *(void *)(v16 + 72) * v21, (uint64_t)v14, type metadata accessor for PCUserAlertManager.ActiveAlertContext);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, active);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, active);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, active);
  }
  sub_10026F174((uint64_t)v14, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, active) == 1)
  {
    sub_10000A38C(&qword_100371C88);
    sub_10026F284();
    swift_allocError();
    *int v23 = 0xD000000000000017;
    v23[1] = 0x80000001002C7D50;
    swift_willThrow();
    return sub_10026F1DC((uint64_t)v14);
  }
  else
  {
    sub_10026F574((uint64_t)v12, (uint64_t)v18, type metadata accessor for PCUserAlertManager.ActiveAlertContext);
    sub_10026F1DC((uint64_t)v14);
    sub_10026F2E0(v27, (uint64_t)v5, type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters);
    sub_10000A38C(&qword_100371BC8);
    AsyncThrowingStream.Continuation.yield(_:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v26);
    return sub_10026F608((uint64_t)v18, type metadata accessor for PCUserAlertManager.ActiveAlertContext);
  }
}

uint64_t sub_10026DF0C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for PCUserAlertManager(0);
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

uint64_t PCUserAlert.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for PCUserAlert.id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t PCUserAlert.definition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for PCUserAlert.definition;
  uint64_t v4 = type metadata accessor for PCUserAlertDefinition();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10026E054(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = v4 + direct field offset for PCUserAlert.id;
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5, a1, v6);
  uint64_t v7 = v4 + direct field offset for PCUserAlert.definition;
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v7 + 48) = v8;
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(v7 + 80) = *(void *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 16) = v9;
  return v4;
}

uint64_t sub_10026E10C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10026E178(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + direct field offset for PCUserAlert.id;
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5, a1, v6);
  uint64_t v7 = v2 + direct field offset for PCUserAlert.definition;
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v7 + 48) = v8;
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(v7 + 80) = *(void *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 16) = v9;
  return v2;
}

uint64_t PCUserAlert.invalidate()()
{
  *(void *)(v1 + 16) = v0;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10026E23C, 0, 0);
}

uint64_t sub_10026E23C()
{
  if (qword_10035A678 != -1) {
    swift_once();
  }
  uint64_t v1 = direct field offset for PCUserAlert.id;
  *(void *)(v0 + 24) = qword_1003ACC48;
  *(void *)(v0 + 32) = v1;
  return ((uint64_t (*)(uint64_t (*)()))_swift_task_switch)(sub_10026E2DC);
}

uint64_t sub_10026E2DC()
{
  sub_10026D4A0(v0[2] + v0[4], 0);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t PCUserAlert.deinit()
{
  uint64_t v1 = v0 + direct field offset for PCUserAlert.id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PCUserAlert.__deallocating_deinit()
{
  PCUserAlert.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_10026E45C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + direct field offset for PCUserAlert.definition;
  uint64_t v4 = type metadata accessor for PCUserAlertDefinition();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10026E4D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + direct field offset for PCUserAlert.id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10026E550@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10026E590(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10026E5CC()
{
  return sub_10026F23C((unint64_t *)&qword_10035CFF0, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_10026E614()
{
  return type metadata accessor for PCUserAlertManager(0);
}

uint64_t type metadata accessor for PCUserAlertManager(uint64_t a1)
{
  return sub_100014F7C(a1, (uint64_t *)&unk_100371A38);
}

void sub_10026E63C()
{
  sub_10026E75C(319, &qword_100371A48, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream);
  if (v0 <= 0x3F)
  {
    sub_10026E75C(319, (unint64_t *)&unk_100371A58, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream.Continuation);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10026E75C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_10000A3D0(&qword_100371A50);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_10026E7C0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for PCUserAlert()
{
  return sub_10000F2E4();
}

void *sub_10026E870(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = (void *)a2[5];
    v4[5] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    id v12 = v8;
    uint64_t v13 = sub_10000A38C(&qword_100371BC8);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v10, v11, v13);
  }
  return v4;
}

uint64_t sub_10026E988(uint64_t a1, uint64_t a2)
{
  sub_10000CC5C(a1);

  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_10000A38C(&qword_100371BC8);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_10026EA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  long long v7 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  id v11 = v7;
  uint64_t v12 = sub_10000A38C(&qword_100371BC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v9, v10, v12);
  return a1;
}

uint64_t *sub_10026EAC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  sub_10026EB60(a1, a2);
  long long v6 = (void *)a2[5];
  long long v7 = (void *)a1[5];
  a1[5] = (uint64_t)v6;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  id v11 = (char *)a2 + v9;
  uint64_t v12 = sub_10000A38C(&qword_100371BC8);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t *sub_10026EB60(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        id v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t sub_10026ED90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_10000A38C(&qword_100371BC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t sub_10026EE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000CC5C(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;

  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_10000A38C(&qword_100371BC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_10026EEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10026EEC8);
}

uint64_t sub_10026EEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000A38C(&qword_100371BC8);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10026EF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10026EF90);
}

uint64_t sub_10026EF90(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000A38C(&qword_100371BC8);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for PCUserAlertManager.ActiveAlertContext(uint64_t a1)
{
  return sub_100014F7C(a1, (uint64_t *)&unk_100371C28);
}

void sub_10026F05C()
{
  sub_10026F100();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10026F100()
{
  if (!qword_100371C38)
  {
    type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(255);
    sub_10000A3D0((uint64_t *)&unk_100365D60);
    unint64_t v0 = type metadata accessor for AsyncThrowingStream.Continuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100371C38);
    }
  }
}

uint64_t sub_10026F174(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_100370238);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10026F1DC(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_100370238);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10026F23C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10026F284()
{
  unint64_t result = qword_100371C90;
  if (!qword_100371C90)
  {
    sub_10000A3D0(&qword_100371C88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100371C90);
  }
  return result;
}

uint64_t sub_10026F2E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10026F348()
{
  uint64_t v1 = sub_10000A38C(&qword_100371C78);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10026F49C(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10000A38C(&qword_100371C78) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v7 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_10026D02C(a1, v1 + v4, v7);
}

uint64_t sub_10026F574(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10026F5DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10026F608(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10026F668()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10026F6A8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10007EB64;
  return sub_10026AF5C(a1, v4, v5, v6);
}

uint64_t sub_10026F75C()
{
  uint64_t v1 = sub_10000A38C(&qword_100371C70);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10026F848(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000A38C(&qword_100371C70) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100076840;
  return sub_10026B348(a1, v6, v7, v8, v9);
}

unint64_t sub_10026F970(uint64_t a1)
{
  unint64_t result = sub_10026F998();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10026F998()
{
  unint64_t result = qword_100371D08;
  if (!qword_100371D08)
  {
    type metadata accessor for RapportProxy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100371D08);
  }
  return result;
}

uint64_t sub_10026F9F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v7 = 0;
  if (a3) {
LABEL_3:
  }
    uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_4:
  swift_retain();
  id v8 = a4;
  v6(v7, v5, a4);
  swift_release();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10026FAD4(uint64_t a1)
{
  id v6 = 0;
  id v1 = [(id)swift_getObjCClassFromMetadata() archivedDataWithRootObject:a1 requiringSecureCoding:1 error:&v6];
  id v2 = v6;
  if (v1)
  {
    uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v4 = v2;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }
  return v3;
}

uint64_t sub_10026FBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t), uint64_t a9, uint64_t a10)
{
  return sub_10026FBC4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_10026FBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t), uint64_t a9, uint64_t a10)
{
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  sub_10016ABE4(0xD000000000000021, (void *)0x80000001002C7DB0, 0, a10, (uint64_t)&off_10032C040);
  swift_bridgeObjectRelease();
  return a8(a1, a2, a3);
}

uint64_t sub_10026FCD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t a7, uint64_t a8)
{
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  sub_10016ABE4(0xD00000000000001ALL, (void *)0x80000001002C7DE0, 0, a8, (uint64_t)&off_10032C040);
  uint64_t result = swift_bridgeObjectRelease();
  if (a6) {
    return a6(a1);
  }
  return result;
}

uint64_t sub_10026FDD0@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

void sub_10026FE50(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  sub_1001A5A38(v1);
}

uint64_t sub_10026FEA0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v81 = a4;
  uint64_t v78 = a3;
  uint64_t v82 = a5;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94[3] = a6;
  v94[4] = a7;
  int v83 = sub_10000D680(v94);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(v83, a1, a6);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v15 = sub_100089A9C(8);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  aBlock = 0;
  unint64_t v89 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v22._countAndFlagsBits = 0xD000000000000022;
  v22._object = (void *)0x80000001002C12A0;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x736575716572203ALL;
  v23._object = (void *)0xEA00000000003D74;
  String.append(_:)(v23);
  sub_10000A38C(&qword_100369DB8);
  _print_unlocked<A, B>(_:_:)();
  v24._countAndFlagsBits = 0x65444C437072202CLL;
  v24._object = (void *)0xED00003D65636976;
  String.append(_:)(v24);
  id v79 = a2;
  id v25 = [a2 description];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v28 = v27;

  v29._countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0x67617373656D202CLL;
  v30._object = (void *)0xEC0000003D444965;
  String.append(_:)(v30);
  uint64_t v31 = v15;
  uint64_t v32 = v17;
  uint64_t v33 = v19;
  v34._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  id v35 = sub_1001F5E20();
  swift_bridgeObjectRetain();
  NSString v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v35 ulog:40 message:v36];
  swift_bridgeObjectRelease();

  uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 16))(a6, a7);
  uint64_t v76 = a6;
  uint64_t v37 = v33;
  uint64_t v38 = v32;
  uint64_t v39 = v31;
  uint64_t v40 = v82;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_8;
  }
  uint64_t v42 = (void *)Strong;
  uint64_t v43 = *(void **)(*(void *)(Strong + OBJC_IVAR____TtC17proximitycontrold11NearbyAgent__rangingProxy) + 24);
  id v44 = v43;

  if (!v43) {
    goto LABEL_8;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v45 = aBlock;
  if (!aBlock
    || (id v46 = [aBlock discoveryToken], v45, !v46))
  {

LABEL_8:
    uint64_t v52 = v21;
    uint64_t v53 = v38;
    uint64_t v54 = v37;
    uint64_t v55 = a7;
    goto LABEL_9;
  }
  sub_10027087C();
  uint64_t v47 = sub_10026FAD4((uint64_t)v46);
  unint64_t v49 = v48;

  unint64_t v50 = v49;
  BOOL v51 = v49 >> 60 == 15;
  uint64_t v52 = v21;
  uint64_t v53 = v38;
  uint64_t v54 = v37;
  uint64_t v55 = a7;
  if (!v51)
  {
    strcpy((char *)&v86, "rangingToken");
    BYTE13(v86) = 0;
    HIWORD(v86) = -5120;
    AnyHashable.init<A>(_:)();
    int v87 = &type metadata for Data;
    *(void *)&long long v86 = v47;
    *((void *)&v86 + 1) = v50;
    unint64_t v56 = v50;
    sub_100027B00(&v86, v85);
    sub_10001F8BC(v47, v50);
    uint64_t v57 = v47;
    uint64_t v58 = v77;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v84 = v58;
    sub_1002650FC(v85, (uint64_t)&aBlock, isUniquelyReferenced_nonNull_native);
    uint64_t v77 = v84;
    swift_bridgeObjectRelease();
    sub_1000BA108((uint64_t)&aBlock);
    sub_10000DBD8(v57, v56);
  }
LABEL_9:
  uint64_t v60 = *(void **)(v40 + OBJC_IVAR____TtC17proximitycontrold12RapportProxy_rpCLClient);
  if (v60)
  {
    aBlock = 0;
    unint64_t v89 = 0xE000000000000000;
    id v61 = v60;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    aBlock = (void **)0xD000000000000020;
    unint64_t v89 = 0x80000001002C1210;
    v62._countAndFlagsBits = static String._fromSubstring(_:)();
    uint64_t v63 = v53;
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    uint64_t v64 = v52;
    id v65 = sub_1001F5E20();
    swift_bridgeObjectRetain();
    NSString v66 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v65 ulog:40 message:v66];
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v76, v55);
    NSString v67 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v68.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v69 = [v79 effectiveIdentifier];
    if (!v69)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v69 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    char v70 = (void *)swift_allocObject();
    v70[2] = v39;
    v70[3] = v63;
    v70[4] = v54;
    v70[5] = v64;
    uint64_t v71 = v81;
    v70[6] = v78;
    v70[7] = v71;
    v70[8] = ObjectType;
    uint64_t v92 = sub_100270830;
    int v93 = v70;
    aBlock = _NSConcreteStackBlock;
    unint64_t v89 = 1107296256;
    uint64_t v90 = sub_10026F9F0;
    uint64_t v91 = &unk_100337568;
    unint64_t v72 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v61 sendRequestID:v67 request:v68.super.isa destinationID:v69 options:0 responseHandler:v72];
    _Block_release(v72);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v73 = sub_1001F5E20();
    NSString v74 = String._bridgeToObjectiveC()();
    [v73 ulog:60 message:v74];
  }
  return sub_10000CC5C((uint64_t)v94);
}

void sub_1002707A0(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  sub_1001A5A38(v1);
}

uint64_t sub_1002707F0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100270830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026FBC4(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64));
}

uint64_t sub_100270864(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100270874()
{
  return swift_release();
}

unint64_t sub_10027087C()
{
  unint64_t result = qword_100369040;
  if (!qword_100369040)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100369040);
  }
  return result;
}

uint64_t sub_1002708BC()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MockHandoffDeviceServiceClient()
{
  return self;
}

void *sub_100270938()
{
  if (qword_10035A578 != -1) {
    swift_once();
  }
  id v1 = (void *)qword_1003AC848;
  uint64_t v2 = (objc_class *)sub_10000A38C(&qword_10035B600);
  uint64_t v3 = (char *)objc_allocWithZone(v2);
  *(void *)&v3[*(void *)((swift_isaMask & *(void *)v3) + 0x80)] = 0;
  uint64_t v4 = &v3[*(void *)((swift_isaMask & *(void *)v3) + 0x60)];
  *(void *)uint64_t v4 = 48;
  *((void *)v4 + 1) = 0xE100000000000000;
  uint64_t v5 = &v3[*(void *)((swift_isaMask & *(void *)v3) + 0x68)];
  *(void *)uint64_t v5 = 0xD000000000000022;
  *((void *)v5 + 1) = 0x80000001002C7E70;
  *(void *)&v3[*(void *)((swift_isaMask & *(void *)v3) + 0x70)] = v1;
  v3[*(void *)((swift_isaMask & *(void *)v3) + 0x78)] = 0;
  v28.receiver = v3;
  v28.super_class = v2;
  id v6 = v1;
  v0[2] = [super init];
  uint64_t v7 = (objc_class *)sub_10000A38C(&qword_10035B4C8);
  id v8 = (char *)objc_allocWithZone(v7);
  *(void *)&v8[*(void *)((swift_isaMask & *(void *)v8) + 0x80)] = 0;
  v8[*(void *)((swift_isaMask & *(void *)v8) + 0x60)] = 0;
  uint64_t v9 = &v8[*(void *)((swift_isaMask & *(void *)v8) + 0x68)];
  *(void *)uint64_t v9 = 0xD000000000000020;
  *((void *)v9 + 1) = 0x80000001002C7EA0;
  *(void *)&v8[*(void *)((swift_isaMask & *(void *)v8) + 0x70)] = v1;
  v8[*(void *)((swift_isaMask & *(void *)v8) + 0x78)] = 0;
  v27.receiver = v8;
  v27.super_class = v7;
  id v10 = v6;
  v0[3] = [super init];
  uint64_t v11 = (char *)objc_allocWithZone(v2);
  *(void *)&v11[*(void *)((swift_isaMask & *(void *)v11) + 0x80)] = 0;
  uint64_t v12 = &v11[*(void *)((swift_isaMask & *(void *)v11) + 0x60)];
  *(void *)uint64_t v12 = 0xD000000000000011;
  *((void *)v12 + 1) = 0x80000001002C2B70;
  uint64_t v13 = &v11[*(void *)((swift_isaMask & *(void *)v11) + 0x68)];
  *(void *)uint64_t v13 = 0xD00000000000001ELL;
  *((void *)v13 + 1) = 0x80000001002C7ED0;
  *(void *)&v11[*(void *)((swift_isaMask & *(void *)v11) + 0x70)] = v1;
  v11[*(void *)((swift_isaMask & *(void *)v11) + 0x78)] = 0;
  v26.receiver = v11;
  v26.super_class = v2;
  id v14 = v10;
  v0[4] = [super init];
  uint64_t v15 = (char *)objc_allocWithZone(v2);
  *(void *)&v15[*(void *)((swift_isaMask & *(void *)v15) + 0x80)] = 0;
  uint64_t v16 = &v15[*(void *)((swift_isaMask & *(void *)v15) + 0x60)];
  *(void *)uint64_t v16 = 0x697665446B636F4DLL;
  *((void *)v16 + 1) = 0xEA00000000006563;
  uint64_t v17 = &v15[*(void *)((swift_isaMask & *(void *)v15) + 0x68)];
  *(void *)uint64_t v17 = 0xD00000000000001DLL;
  *((void *)v17 + 1) = 0x80000001002C7EF0;
  *(void *)&v15[*(void *)((swift_isaMask & *(void *)v15) + 0x70)] = v1;
  v15[*(void *)((swift_isaMask & *(void *)v15) + 0x78)] = 0;
  v25.receiver = v15;
  v25.super_class = v2;
  id v18 = v14;
  v0[5] = [super init];
  uint64_t v19 = (objc_class *)sub_10000A38C(&qword_10035B5F0);
  uint64_t v20 = (char *)objc_allocWithZone(v19);
  *(void *)&v20[*(void *)((swift_isaMask & *(void *)v20) + 0x80)] = 0;
  v20[*(void *)((swift_isaMask & *(void *)v20) + 0x60)] = 5;
  uint64_t v21 = &v20[*(void *)((swift_isaMask & *(void *)v20) + 0x68)];
  *(void *)uint64_t v21 = 0xD00000000000001FLL;
  *((void *)v21 + 1) = 0x80000001002C7F10;
  *(void *)&v20[*(void *)((swift_isaMask & *(void *)v20) + 0x70)] = v1;
  v20[*(void *)((swift_isaMask & *(void *)v20) + 0x78)] = 0;
  v24.receiver = v20;
  v24.super_class = v19;
  id v22 = v18;
  v0[6] = [super init];
  return v0;
}

void *destroy for TransferEffect(uint64_t a1)
{
  return sub_100020358(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for TransferEffect(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_10001F914(*(id *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for TransferEffect(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_10001F914(*(id *)a2, v4, v5, v6);
  uint64_t v7 = *(void **)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_100020358(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for TransferEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void **)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_100020358(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransferEffect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TransferEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100271048(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 3u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_100271060(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 4;
  if (a2 >= 4)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 4;
    *(void *)unint64_t result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TransferEffect()
{
  return &type metadata for TransferEffect;
}

unint64_t *sub_10027108C(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    unint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (unint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        unint64_t v7 = *a2;
        swift_errorRetain();
        *a1 = v7;
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        unint64_t v10 = a2[3];
        a1[2] = a2[2];
        a1[3] = v10;
        unint64_t v11 = a2[5];
        a1[4] = a2[4];
        a1[5] = v11;
        a1[6] = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        unint64_t v13 = a2[2];
        if (v13 - 7 >= 2 && v13 >= 7)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
          unint64_t v15 = a2[3];
          unint64_t v16 = a2[4];
          a1[2] = v13;
          a1[3] = v15;
          unint64_t v17 = a2[5];
          unint64_t v18 = a2[6];
          a1[4] = v16;
          a1[5] = v17;
          a1[6] = v18;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v14 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1) = v14;
          *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
          a1[6] = a2[6];
        }
        uint64_t v19 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
        uint64_t v20 = (char *)a1 + v19;
        uint64_t v21 = (char *)a2 + v19;
        uint64_t v22 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        unint64_t v12 = *a2;
        sub_10001FC30(v12);
        *a1 = v12;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100271318(unint64_t *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t result = swift_errorRelease();
      break;
    case 2:
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 4:
      if (a1[2] >= 9)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      int v4 = (char *)a1 + *(int *)(type metadata accessor for PermissionToHandoff() + 20);
      uint64_t v5 = type metadata accessor for Date();
      uint64_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);
      uint64_t result = v6(v4, v5);
      break;
    case 5:
      unint64_t v3 = *a1;
      uint64_t result = sub_100020628(v3);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t *sub_10027146C(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      unint64_t v6 = *a2;
      swift_errorRetain();
      *a1 = v6;
      goto LABEL_11;
    case 2u:
    case 3u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      unint64_t v7 = a2[3];
      a1[2] = a2[2];
      a1[3] = v7;
      unint64_t v8 = a2[5];
      a1[4] = a2[4];
      a1[5] = v8;
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 4u:
      unint64_t v10 = a2[2];
      if (v10 - 7 >= 2 && v10 >= 7)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        unint64_t v12 = a2[3];
        unint64_t v13 = a2[4];
        a1[2] = v10;
        a1[3] = v12;
        unint64_t v14 = a2[5];
        unint64_t v15 = a2[6];
        a1[4] = v13;
        a1[5] = v14;
        a1[6] = v15;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v11 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v11;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        a1[6] = a2[6];
      }
      uint64_t v16 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
      unint64_t v17 = (char *)a1 + v16;
      unint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
      goto LABEL_11;
    case 5u:
      unint64_t v9 = *a2;
      sub_10001FC30(v9);
      *a1 = v9;
LABEL_11:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

unint64_t *sub_1002716A4(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100273290((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for TransferEvent);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        unint64_t v6 = *a2;
        swift_errorRetain();
        *a1 = v6;
        goto LABEL_12;
      case 2u:
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 4u:
        unint64_t v8 = a2[2];
        if (v8 - 7 >= 2 && v8 >= 7)
        {
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          a1[3] = a2[3];
          a1[4] = a2[4];
          a1[5] = a2[5];
          a1[6] = a2[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v9 = *(_OWORD *)a2;
          long long v10 = *((_OWORD *)a2 + 1);
          long long v11 = *((_OWORD *)a2 + 2);
          a1[6] = a2[6];
          *((_OWORD *)a1 + 1) = v10;
          *((_OWORD *)a1 + 2) = v11;
          *(_OWORD *)a1 = v9;
        }
        uint64_t v12 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
        unint64_t v13 = (char *)a1 + v12;
        unint64_t v14 = (char *)a2 + v12;
        uint64_t v15 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
        goto LABEL_12;
      case 5u:
        unint64_t v7 = *a2;
        sub_10001FC30(v7);
        *a1 = v7;
LABEL_12:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for TransferEvent()
{
  uint64_t result = qword_100371EE0;
  if (!qword_100371EE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

_OWORD *sub_100271998(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    long long v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    a1[2] = a2[2];
    *((void *)a1 + 6) = *((void *)a2 + 6);
    uint64_t v7 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
    unint64_t v8 = (char *)a1 + v7;
    long long v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *sub_100271A7C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100273290((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for TransferEvent);
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      long long v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      a1[2] = a2[2];
      *((void *)a1 + 6) = *((void *)a2 + 6);
      uint64_t v7 = *(int *)(type metadata accessor for PermissionToHandoff() + 20);
      unint64_t v8 = (char *)a1 + v7;
      long long v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100271B84()
{
  uint64_t result = type metadata accessor for PermissionToHandoff();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_100271C38(uint64_t a1)
{
  return sub_100271CA0(a1, sub_100028B98, (void (*)(void))type metadata accessor for PermissionToHandoff, &qword_1003699B8);
}

uint64_t sub_100271C6C(uint64_t a1)
{
  return sub_100271CA0(a1, sub_100028B98, (void (*)(void))type metadata accessor for ShareableContent, &qword_1003699C8);
}

uint64_t sub_100271CA0(uint64_t a1, uint64_t (*a2)(void), void (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = a2();
  int64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    sub_1000B54DC(0, v7, 0);
    unint64_t v8 = (void **)(v6 + 56);
    do
    {
      uint64_t v9 = (uint64_t)*(v8 - 1);
      uint64_t v10 = *v8;
      uint64_t v23 = (uint64_t)*(v8 - 3);
      uint64_t v25 = (uint64_t)*(v8 - 2);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v11._countAndFlagsBits = 8250;
      v11._object = (void *)0xE200000000000000;
      String.append(_:)(v11);
      v12._countAndFlagsBits = v9;
      v12._object = v10;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_1000B54DC(v13 > 1, v14 + 1, 1);
      }
      v8 += 4;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      uint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v23;
      void v15[5] = v25;
      --v7;
    }
    while (v7);
  }
  swift_bridgeObjectRelease();
  a3(0);
  sub_10000A38C(a4);
  uint64_t v24 = String.init<A>(describing:)();
  v16._countAndFlagsBits = 40;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_100089B9C();
  uint64_t v17 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 41;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  return v24;
}

uint64_t sub_100271E94()
{
  uint64_t v1 = type metadata accessor for PermissionToHandoff();
  __chkstk_darwin(v1);
  unint64_t v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TransferEvent();
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100273228(v0, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  uint64_t v7 = 0x6574736575716572;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      unint64_t v11 = *v6;
      unint64_t v35 = 0;
      unint64_t v36 = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      v12._countAndFlagsBits = 0x202864656C696166;
      v12._object = (void *)0xEE003D726F727265;
      String.append(_:)(v12);
      unint64_t v42 = v11;
      sub_10000A38C((uint64_t *)&unk_100365D60);
      _print_unlocked<A, B>(_:_:)();
      v13._countAndFlagsBits = 10528;
      v13._object = (void *)0xE200000000000000;
      String.append(_:)(v13);
      swift_errorRelease();
      return v35;
    case 2u:
      uint64_t v14 = *v6;
      unint64_t v15 = v6[1];
      uint64_t v16 = v6[2];
      uint64_t v17 = v6[3];
      uint64_t v18 = v6[4];
      uint64_t v19 = v6[5];
      uint64_t v20 = v6[6];
      unint64_t v35 = 0;
      unint64_t v36 = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      unint64_t v42 = v35;
      unint64_t v43 = v36;
      unint64_t v21 = 0xD00000000000001ELL;
      uint64_t v22 = "setMediaSystemEndpointFailed( ";
      goto LABEL_6;
    case 3u:
      uint64_t v14 = *v6;
      unint64_t v15 = v6[1];
      uint64_t v16 = v6[2];
      uint64_t v17 = v6[3];
      uint64_t v18 = v6[4];
      uint64_t v19 = v6[5];
      uint64_t v20 = v6[6];
      unint64_t v35 = 0;
      unint64_t v36 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      unint64_t v42 = v35;
      unint64_t v43 = v36;
      unint64_t v21 = 0xD000000000000017;
      uint64_t v22 = "launchRemoteAppFailed( ";
LABEL_6:
      unint64_t v23 = (unint64_t)(v22 - 32) | 0x8000000000000000;
      String.append(_:)(*(Swift::String *)&v21);
      unint64_t v35 = v14;
      unint64_t v36 = v15;
      uint64_t v37 = v16;
      uint64_t v38 = v17;
      uint64_t v39 = v18;
      uint64_t v40 = v19;
      uint64_t v41 = v20;
      _print_unlocked<A, B>(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 10528;
      v24._object = (void *)0xE200000000000000;
      String.append(_:)(v24);
      return v42;
    case 4u:
      sub_1001845F0((uint64_t)v6, (uint64_t)v3);
      unint64_t v35 = 0;
      unint64_t v36 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      unint64_t v42 = 0xD000000000000014;
      unint64_t v43 = 0x80000001002C7F50;
      uint64_t v38 = v1;
      uint64_t v25 = sub_10000D680((uint64_t *)&v35);
      sub_100273228((uint64_t)v3, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
      uint64_t v26 = sub_100271CA0((uint64_t)&v35, sub_100028B98, (void (*)(void))type metadata accessor for PermissionToHandoff, &qword_1003699B8);
      objc_super v28 = v27;
      sub_10000CC5C((uint64_t)&v35);
      v29._countAndFlagsBits = v26;
      v29._object = v28;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30._countAndFlagsBits = 10528;
      v30._object = (void *)0xE200000000000000;
      String.append(_:)(v30);
      uint64_t v7 = v42;
      sub_100273290((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for PermissionToHandoff);
      return v7;
    case 5u:
      unint64_t v31 = *v6;
      unint64_t v35 = 0;
      unint64_t v36 = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      unint64_t v35 = 0xD000000000000011;
      unint64_t v36 = 0x80000001002C7F30;
      v32._countAndFlagsBits = sub_100272934(v31);
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      sub_100020628(v31);
      return v35;
    case 6u:
      return v7;
    case 7u:
      return 0x64657472617473;
    case 8u:
      return 0xD00000000000001FLL;
    case 9u:
      return 0xD000000000000018;
    default:
      uint64_t v8 = *v6;
      unint64_t v35 = 0;
      unint64_t v36 = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      unint64_t v35 = 0xD000000000000015;
      unint64_t v36 = 0x80000001002C7FF0;
      v9._countAndFlagsBits = PCInteractionDirection.description.getter(v8);
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._countAndFlagsBits = 10528;
      v10._object = (void *)0xE200000000000000;
      String.append(_:)(v10);
      return v35;
  }
}

uint64_t sub_100272398(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 1:
      swift_retain();
      id v7 = (id)a1;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      unint64_t v8 = 0xD00000000000001BLL;
      goto LABEL_4;
    case 2:
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      unint64_t v18 = 0xD000000000000010;
      unint64_t v11 = (void *)0xE800000000000000;
      uint64_t v12 = 0x656D695465636146;
      switch(a2)
      {
        case 0uLL:
          break;
        case 1uLL:
          unint64_t v11 = (void *)0xE500000000000000;
          uint64_t v12 = 0x636973754DLL;
          break;
        case 2uLL:
          unint64_t v11 = (void *)0xEB00000000676E69;
          uint64_t v12 = 0x79616C5020776F4ELL;
          break;
        case 3uLL:
          unint64_t v11 = (void *)0xEF6F6D65446C6F72;
          uint64_t v12 = 0x746E6F43786F7250;
          break;
        case 4uLL:
          unint64_t v11 = (void *)0xE600000000000000;
          uint64_t v12 = 0x697261666153;
          break;
        default:
          uint64_t v12 = a1;
          unint64_t v11 = (void *)a2;
          break;
      }
      sub_10001F9D4(a1, a2);
      v16._countAndFlagsBits = v12;
      v16._object = v11;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 41;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      return v18;
    case 3:
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      unint64_t v18 = 0xD000000000000011;
      v13._countAndFlagsBits = sub_10027276C(a1);
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      return v18;
    case 4:
      unint64_t v14 = a3 | a2;
      if (!(a3 | a2 | a1)) {
        return 0x726566736E617274;
      }
      if (a1 == 1 && !v14) {
        return 0xD000000000000013;
      }
      if (a1 == 2 && !v14) {
        return 0xD000000000000014;
      }
      if (a1 == 3 && v14 == 0) {
        return 0xD000000000000016;
      }
      return 0xD000000000000011;
    default:
      swift_retain();
      id v7 = (id)a1;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      unint64_t v8 = 0xD000000000000011;
LABEL_4:
      unint64_t v18 = v8;
      v9._countAndFlagsBits = sub_100047CE4((void *)a1, a2 & 1, a3);
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._countAndFlagsBits = 41;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      swift_release();

      return v18;
  }
}

uint64_t sub_100272730()
{
  return sub_100272398(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_100272740(uint64_t a1, uint64_t a2)
{
  return sub_1002732F0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
}

uint64_t sub_10027276C(uint64_t a1)
{
  if (!a1) {
    return 0x6164696C61766E69;
  }
  int64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1000B54DC(0, v2, 0);
    uint64_t v3 = a1 + 32;
    do
    {
      uint64_t v4 = String.init<A>(describing:)();
      uint64_t v6 = v5;
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_1000B54DC(v7 > 1, v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      Swift::String v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v4;
      void v9[5] = v6;
      ++v3;
      --v2;
    }
    while (v2);
  }
  sub_10000A38C((uint64_t *)&unk_100367D40);
  sub_100089B9C();
  uint64_t v10 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 41;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return 0x2865766C6F736572;
}

uint64_t sub_100272900()
{
  return sub_10027276C(*v0);
}

BOOL sub_100272908(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sub_100272B14(v2, v3);
  }
}

unint64_t sub_100272934(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    swift_errorRetain();
    _StringGuts.grow(_:)(19);
    v3._countAndFlagsBits = 0x4665766C6F736572;
    v3._object = (void *)0xEF202864656C6961;
    String.append(_:)(v3);
    goto LABEL_5;
  }
  if (a1 >> 62 == 1)
  {
    swift_errorRetain();
    _StringGuts.grow(_:)(25);
    v2._countAndFlagsBits = 0xD000000000000015;
    v2._object = (void *)0x80000001002C8010;
    String.append(_:)(v2);
LABEL_5:
    sub_10000A38C((uint64_t *)&unk_100365D60);
    _print_unlocked<A, B>(_:_:)();
    v4._countAndFlagsBits = 10528;
    v4._object = (void *)0xE200000000000000;
    String.append(_:)(v4);
    sub_100020628(a1);
    return 0;
  }
  if (a1 == 0x8000000000000000) {
    return 0xD000000000000010;
  }
  else {
    return 0xD000000000000016;
  }
}

unint64_t sub_100272AA4()
{
  return sub_100272934(*v0);
}

uint64_t sub_100272AAC(void *a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *a1 >> 62;
  if (v3)
  {
    if (v3 == 1)
    {
      if (v2 >> 62 != 1) {
        return 0;
      }
    }
    else if (*a1 == 0x8000000000000000)
    {
      if (v2 != 0x8000000000000000) {
        return 0;
      }
    }
    else if (v2 != 0x8000000000000008)
    {
      return 0;
    }
  }
  else if (v2 >> 62)
  {
    return 0;
  }
  return 1;
}

BOOL sub_100272B14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
    return 0;
  }
  Swift::String v4 = (unsigned __int8 *)(a1 + 33);
  uint64_t v5 = (unsigned __int8 *)(a2 + 33);
  uint64_t v6 = v2 - 1;
  do
  {
    BOOL result = v6 == 0;
    if (!v6) {
      break;
    }
    int v8 = *v4++;
    int v7 = v8;
    int v9 = *v5++;
    --v6;
  }
  while (v7 == v9);
  return result;
}

id sub_100272B80(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v29) {
      goto LABEL_5;
    }
LABEL_49:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  if (v5 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_49;
  }
LABEL_5:
  if (!v5) {
    goto LABEL_38;
  }
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0) {
    uint64_t v6 = v3;
  }
  if (!v4) {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v8 = v9;
  }
  if (v6 == v8)
  {
LABEL_38:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_55;
  }
  unint64_t v30 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0) {
    goto LABEL_56;
  }
  for (id result = *(id *)(v3 + 32); ; id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
  {
    unint64_t v11 = result;
    if ((a2 & 0xC000000000000001) == 0) {
      break;
    }
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_22:
    Swift::String v13 = v12;
    sub_10027363C();
    char v14 = static NSObject.== infix(_:_:)();

    if ((v14 & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v15 = v5 - 1;
    if (v5 == 1) {
      return (id)(v5 & 1);
    }
    if (((a2 | v3) & 0xC000000000000001) != 0)
    {
      uint64_t v16 = 0;
      unint64_t v17 = v5 - 2;
      while (v15 != v16)
      {
        unint64_t v5 = v16 + 1;
        if (v30) {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v18 = *(id *)(v3 + 40 + 8 * v16);
        }
        uint64_t v19 = v18;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v5 >= *(void *)(v7 + 16)) {
            goto LABEL_54;
          }
          id v20 = *(id *)(a2 + 40 + 8 * v16);
        }
        unint64_t v21 = v20;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if ((v5 & 1) != 0 && v17 != v16++) {
          continue;
        }
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      unint64_t v23 = *(void *)(v7 + 16);
      if (v23 <= 1) {
        unint64_t v23 = 1;
      }
      unint64_t v24 = v23 - 1;
      uint64_t v25 = (void **)(v3 + 40);
      uint64_t v7 = a2 + 40;
      while (v15)
      {
        if (!v24) {
          goto LABEL_53;
        }
        objc_super v27 = *v25++;
        uint64_t v26 = v27;
        objc_super v28 = *(void **)v7;
        v7 += 8;
        a2 = v26;
        uint64_t v3 = v28;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if (v5)
        {
          --v24;
          if (--v15) {
            continue;
          }
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    ;
  }
  if (*(void *)(v7 + 16))
  {
    id v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_100272E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TransferEvent();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (unint64_t *)((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (uint64_t *)((char *)&v23 - v9);
  __chkstk_darwin(v8);
  id v12 = (char *)&v23 - v11;
  uint64_t v13 = sub_10000A38C(&qword_100371F18);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = (unint64_t *)&v16[*(int *)(v14 + 56)];
  sub_100273228(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  sub_100273228(a2, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for TransferEvent);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      sub_100273228((uint64_t)v16, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TransferEvent);
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_15;
      }
      BOOL v18 = *v10 == *v17;
      goto LABEL_23;
    case 1u:
      sub_100273228((uint64_t)v16, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TransferEvent);
      swift_errorRelease();
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_15;
      }
      swift_errorRelease();
LABEL_13:
      sub_100273290((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for TransferEvent);
      return 1;
    case 5u:
      sub_100273228((uint64_t)v16, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for TransferEvent);
      unint64_t v19 = *v7;
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        unint64_t v20 = *v17;
        if (!(v19 >> 62))
        {
          BOOL v21 = v20 >> 62 == 0;
          goto LABEL_18;
        }
        if (v19 >> 62 == 1)
        {
          BOOL v21 = v20 >> 62 == 1;
LABEL_18:
          BOOL v18 = v21;
          sub_100020628(v20);
          goto LABEL_22;
        }
        if (v19 == 0x8000000000000000)
        {
          if (v20 == 0x8000000000000000)
          {
LABEL_26:
            BOOL v18 = 1;
            goto LABEL_23;
          }
        }
        else if (v20 == 0x8000000000000008)
        {
          goto LABEL_26;
        }
        BOOL v18 = 0;
        unint64_t v19 = *v17;
LABEL_22:
        sub_100020628(v19);
LABEL_23:
        sub_100273290((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for TransferEvent);
        return v18;
      }
      sub_100020628(v19);
LABEL_15:
      sub_1002731C8((uint64_t)v16);
      return 0;
    case 6u:
      if (swift_getEnumCaseMultiPayload() != 6) {
        goto LABEL_15;
      }
      goto LABEL_13;
    case 7u:
      if (swift_getEnumCaseMultiPayload() == 7) {
        goto LABEL_13;
      }
      goto LABEL_15;
    default:
      goto LABEL_15;
  }
}

uint64_t sub_1002731C8(uint64_t a1)
{
  uint64_t v2 = sub_10000A38C(&qword_100371F18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100273228(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100273290(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002732F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8)
{
  switch(a4)
  {
    case 1:
      if (a8 != 1) {
        return 0;
      }
      swift_retain();
      id v12 = (id)a1;
      swift_retain();
      id v13 = (id)a5;
      if (![v12 isEqual:v13]) {
        goto LABEL_28;
      }
      if (!a3) {
        goto LABEL_41;
      }
      if (!a7) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 2:
      if (a8 == 2)
      {
        switch(a2)
        {
          case 0:
            return !a6;
          case 1:
            return a6 == 1;
          case 2:
            return a6 == 2;
          case 3:
            return a6 == 3;
          case 4:
            return a6 == 4;
          default:
            return a6 >= 5 && (a1 == a5 && a2 == a6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
        }
      }
      return 0;
    case 3:
      if (a8 != 3) {
        return 0;
      }
      if (!a1) {
        return !a5;
      }
      return a5 && sub_100272B14(a1, a5);
    case 4:
      uint64_t v14 = a3 | a2;
      if (a3 | a2 | a1)
      {
        if (a1 != 1 || v14)
        {
          if (a1 != 2 || v14)
          {
            if (a1 != 3 || v14)
            {
              if (a8 != 4 || a5 != 4) {
                return 0;
              }
            }
            else if (a8 != 4 || a5 != 3)
            {
              return 0;
            }
          }
          else if (a8 != 4 || a5 != 2)
          {
            return 0;
          }
        }
        else if (a8 != 4 || a5 != 1)
        {
          return 0;
        }
        if (a7 | a6) {
          return 0;
        }
      }
      else if (a8 != 4 || a7 | a6 | a5)
      {
        return 0;
      }
      return 1;
    default:
      if (a8) {
        return 0;
      }
      swift_retain();
      id v12 = (id)a1;
      swift_retain();
      id v13 = (id)a5;
      if (![v12 isEqual:v13])
      {
LABEL_28:
        swift_release();

        goto LABEL_29;
      }
      if (!a3)
      {
LABEL_41:

        if (!a7)
        {

          return 1;
        }
LABEL_29:
        swift_release();
        goto LABEL_30;
      }
      if (a7)
      {
LABEL_26:
        swift_retain();
        swift_retain();
        char v15 = static UUID.== infix(_:_:)();

        swift_release_n();
        swift_release_n();
        return (v15 & 1) != 0;
      }
LABEL_6:
      swift_release();

LABEL_30:
      return 0;
  }
}

unint64_t sub_10027363C()
{
  unint64_t result = qword_100360A50;
  if (!qword_100360A50)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100360A50);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ShareableContentEffect.Source(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100273748);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareableContentEffect.Source()
{
  return &type metadata for ShareableContentEffect.Source;
}

void *initializeBufferWithCopyOfBuffer for ShareableContentEffect(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ShareableContentEffect(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ShareableContentEffect(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ShareableContentEffect()
{
  return &type metadata for ShareableContentEffect;
}

unint64_t *initializeBufferWithCopyOfBuffer for ShareableContentEvent(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_10001FC30(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for ShareableContentEvent(unint64_t *a1)
{
  return sub_100020628(*a1);
}

unint64_t *assignWithCopy for ShareableContentEvent(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_10001FC30(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_100020628(v4);
  return a1;
}

unint64_t *assignWithTake for ShareableContentEvent(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_100020628(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareableContentEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ShareableContentEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_100273988(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

void *sub_1002739A4(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1002739B4(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  *unint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for ShareableContentEvent()
{
  return &type metadata for ShareableContentEvent;
}

unint64_t sub_1002739F0(uint64_t a1)
{
  unint64_t result = sub_100273A18();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100273A18()
{
  unint64_t result = qword_100371F20;
  if (!qword_100371F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100371F20);
  }
  return result;
}

unint64_t sub_100273A6C(uint64_t a1)
{
  unint64_t result = sub_100273A94();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100273A94()
{
  unint64_t result = qword_100371F28;
  if (!qword_100371F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100371F28);
  }
  return result;
}

unint64_t sub_100273AEC()
{
  unint64_t result = qword_100371F30;
  if (!qword_100371F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100371F30);
  }
  return result;
}

void sub_100273B48()
{
  uint64_t v1 = v0;
  id v2 = sub_1001F568C();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_card);
  if (v4)
  {
    unint64_t v34 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    uint64_t v35 = type metadata accessor for CardPresentationRecord();
    uint64_t v33 = v4;
    swift_retain();
    uint64_t v5 = sub_10002834C(&v33);
    uint64_t v7 = v6;
    sub_10000CC5C((uint64_t)&v33);
    v8._countAndFlagsBits = v5;
    v8._object = v7;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 0x69646E6573202D20;
    v9._object = (void *)0xEE00776F6E20676ELL;
    String.append(_:)(v9);
    id v10 = sub_1001F568C();
    swift_bridgeObjectRetain();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v10 ulog:60 message:v11];
    swift_bridgeObjectRelease();

    sub_1001DB94C();
    swift_release();
  }
  id v12 = (uint64_t *)(v1 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_education);
  swift_beginAccess();
  uint64_t v13 = *v12;
  if (*v12)
  {
    uint64_t v33 = 0;
    unint64_t v34 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    uint64_t v35 = type metadata accessor for EducationPresentationRecord();
    uint64_t v33 = v13;
    swift_retain();
    uint64_t v14 = sub_100027F24(&v33);
    uint64_t v16 = v15;
    sub_10000CC5C((uint64_t)&v33);
    v17._countAndFlagsBits = v14;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 0x69646E6573202D20;
    v18._object = (void *)0xEE00776F6E20676ELL;
    String.append(_:)(v18);
    id v19 = sub_1001F568C();
    swift_bridgeObjectRetain();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v19 ulog:60 message:v20];
    swift_bridgeObjectRelease();

    sub_1001DECE4();
    swift_release();
  }
  BOOL v21 = (uint64_t *)(v1 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_hint);
  swift_beginAccess();
  uint64_t v22 = *v21;
  if (*v21)
  {
    uint64_t v33 = 0;
    unint64_t v34 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    uint64_t v35 = type metadata accessor for HintPresentationRecord();
    uint64_t v33 = v22;
    swift_retain();
    uint64_t v23 = sub_100027F44(&v33);
    uint64_t v25 = v24;
    sub_10000CC5C((uint64_t)&v33);
    v26._countAndFlagsBits = v23;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0x69646E6573202D20;
    v27._object = (void *)0xEE00776F6E20676ELL;
    String.append(_:)(v27);
    id v28 = sub_1001F568C();
    swift_bridgeObjectRetain();
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v28 ulog:v29 message:0xD000000000000018, 0x80000001002C87C0];
    swift_bridgeObjectRelease();

    sub_1002616E0();
    swift_release();
  }
  uint64_t v30 = OBJC_IVAR____TtC17proximitycontrold14SessionHistory_published;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_published))
  {
    id v31 = sub_1001F568C();
    NSString v32 = String._bridgeToObjectiveC()();
    [v31 ulog:60 message:v32];
  }
  else
  {
    sub_1002794B8((uint64_t)&v33);
    sub_10025FD48();
    sub_10027BF00((uint64_t)&v33);
    *(unsigned char *)(v1 + v30) = 1;
  }
}

void *sub_100273FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v403 = a3;
  uint64_t v5 = sub_10000A38C(&qword_1003653F0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  v399 = (char *)&v370 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v375 = (uint64_t)&v370 - v9;
  __chkstk_darwin(v8);
  v398 = (uint64_t *)((char *)&v370 - v10);
  uint64_t v380 = type metadata accessor for TransferEvent();
  uint64_t v11 = __chkstk_darwin(v380);
  v381 = (unsigned __int8 *)&v370 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v382 = (uint64_t)&v370 - v13;
  uint64_t v14 = sub_10000A38C(&qword_1003716F8);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v372 = (uint64_t)&v370 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v371 = (uint64_t)&v370 - v18;
  __chkstk_darwin(v17);
  v370 = (uint64_t *)((char *)&v370 - v19);
  uint64_t v20 = sub_10000A38C(&qword_10036CAC0);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v23 = (char *)&v370 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v21);
  v402 = (char *)&v370 - v25;
  __chkstk_darwin(v24);
  v391 = (uint64_t *)((char *)&v370 - v26);
  uint64_t v27 = sub_10000A38C(&qword_10036CAC8);
  __chkstk_darwin(v27 - 8);
  v376 = (char *)&v370 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000A38C(&qword_10035F278);
  __chkstk_darwin(v29 - 8);
  uint64_t v378 = (uint64_t)&v370 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10000A38C(&qword_1003653F8);
  uint64_t v32 = __chkstk_darwin(v31 - 8);
  unint64_t v385 = (unint64_t)&v370 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  v384 = (char **)((char *)&v370 - v35);
  __chkstk_darwin(v34);
  v386 = (char *)&v370 - v36;
  uint64_t v37 = sub_10000A38C(&qword_10036CAD0);
  uint64_t v38 = __chkstk_darwin(v37 - 8);
  uint64_t v374 = (uint64_t)&v370 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v373 = (uint64_t)&v370 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v401 = (uint64_t)&v370 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  v393 = (char *)&v370 - v45;
  __chkstk_darwin(v44);
  v383 = (uint64_t *)((char *)&v370 - v46);
  uint64_t v392 = type metadata accessor for ExperienceEvent(0);
  uint64_t v377 = *(void *)(v392 - 8);
  uint64_t v47 = __chkstk_darwin(v392);
  v396 = (unsigned __int8 *)&v370 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __chkstk_darwin(v47);
  uint64_t v395 = (uint64_t)&v370 - v50;
  __chkstk_darwin(v49);
  uint64_t v394 = (uint64_t)&v370 - v51;
  uint64_t v389 = type metadata accessor for ExperienceEffect(0);
  uint64_t v52 = __chkstk_darwin(v389);
  v390 = (unsigned __int8 *)&v370 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  uint64_t v397 = (uint64_t)&v370 - v54;
  uint64_t v55 = type metadata accessor for SessionEvent();
  __chkstk_darwin(v55);
  uint64_t v57 = (unsigned __int16 *)((char *)&v370 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v58 = sub_10000A38C(&qword_1003724A8);
  __chkstk_darwin(v58);
  uint64_t v60 = (char *)&v370 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v407 = 0;
  *((void *)&v407 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  v61._countAndFlagsBits = 0xD000000000000029;
  v61._object = (void *)0x80000001002C8340;
  String.append(_:)(v61);
  v62._countAndFlagsBits = 0x3D746E657665203ALL;
  v62._object = (void *)0xE800000000000000;
  String.append(_:)(v62);
  uint64_t v63 = a1;
  _print_unlocked<A, B>(_:_:)();
  v64._countAndFlagsBits = 0x7473656D6974202CLL;
  v64._object = (void *)0xEC0000003D706D61;
  String.append(_:)(v64);
  uint64_t v65 = type metadata accessor for Date();
  sub_10014ACD4();
  uint64_t v405 = v65;
  v66._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v66);
  swift_bridgeObjectRelease();
  v67._countAndFlagsBits = 0x6E6174736964202CLL;
  v67._object = (void *)0xEB000000003D6563;
  String.append(_:)(v67);
  unint64_t v68 = v403;
  v400 = v23;
  if ((v403 & 0x100000000) != 0)
  {
    unint64_t v69 = 0xE300000000000000;
    uint64_t v70 = 7104878;
  }
  else
  {
    int v410 = v403;
    uint64_t v70 = String.init<A>(describing:)();
    unint64_t v69 = v71;
  }
  unint64_t v72 = v69;
  String.append(_:)(*(Swift::String *)&v70);
  swift_bridgeObjectRelease();
  id v73 = sub_1001F568C();
  swift_bridgeObjectRetain();
  NSString v74 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v73 ulog:40 message:v74];
  swift_bridgeObjectRelease();

  sub_10027BDB0(v63, (uint64_t)v60, (uint64_t (*)(void))type metadata accessor for SessionEvent);
  uint64_t v75 = &v60[*(int *)(v58 + 28)];
  uint64_t v76 = *(void *)(v405 - 8);
  v388 = *(void (**)(char *, uint64_t))(v76 + 16);
  uint64_t v387 = v76 + 16;
  v388(v75, a2);
  uint64_t v77 = &v60[*(int *)(v58 + 32)];
  *(_DWORD *)uint64_t v77 = v68;
  uint64_t v379 = HIDWORD(v68) & 1;
  v77[4] = BYTE4(v68) & 1;
  uint64_t v78 = v406;
  id v79 = (void *)(v406 + 64);
  swift_beginAccess();
  uint64_t v80 = *(void **)(v78 + 64);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v78 + 64) = v80;
  uint64_t v404 = a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v80 = sub_1000896C4(0, v80[2] + 1, 1, v80);
    *id v79 = v80;
  }
  uint64_t v82 = v398;
  unint64_t v84 = v80[2];
  unint64_t v83 = v80[3];
  if (v84 >= v83 >> 1)
  {
    uint64_t v80 = sub_1000896C4((void *)(v83 > 1), v84 + 1, 1, v80);
    *id v79 = v80;
  }
  uint64_t v408 = v58;
  unint64_t v409 = sub_10027BCEC();
  uint64_t v85 = sub_10000D680((uint64_t *)&v407);
  sub_10000D728((uint64_t)v60, (uint64_t)v85, &qword_1003724A8);
  v80[2] = v84 + 1;
  sub_10000D7E8(&v407, (uint64_t)&v80[5 * v84 + 4]);
  sub_10000D78C((uint64_t)v60, &qword_1003724A8);
  swift_endAccess();
  sub_10027BDB0(v63, (uint64_t)v57, (uint64_t (*)(void))type metadata accessor for SessionEvent);
  unint64_t result = (void *)swift_getEnumCaseMultiPayload();
  uint64_t v87 = v404;
  uint64_t v88 = v401;
  uint64_t v89 = (uint64_t)v402;
  uint64_t v90 = (uint64_t)v399;
  uint64_t v91 = (uint64_t)v400;
  switch((int)result)
  {
    case 1:
      uint64_t v106 = (uint64_t)v57;
      uint64_t v107 = v395;
      sub_10027BD48(v106, v395, type metadata accessor for ExperienceEvent);
      sub_10027BDB0(v107, (uint64_t)v396, type metadata accessor for ExperienceEvent);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v109 = v391;
      switch(EnumCaseMultiPayload)
      {
        case 1:
          uint64_t v127 = *(void *)v396;
          uint64_t v128 = *((void *)v396 + 1);
          uint64_t v130 = *((void *)v396 + 2);
          uint64_t v129 = *((void *)v396 + 3);
          uint64_t v131 = *((void *)v396 + 4);
          uint64_t v132 = *((void *)v396 + 5);
          uint64_t v133 = *((void *)v396 + 6);
          unsigned int v134 = v396[56];
          v399 = *(char **)(v406 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_card);
          if (!v399)
          {
            sub_100020430(v127, v128, v130, v129, v131, v132, v133, v134);
            id v212 = sub_1001F568C();
            NSString v213 = String._bridgeToObjectiveC()();
            [v212 ulog:60 message:v213];
LABEL_72:

            goto LABEL_97;
          }
          v135 = v383;
          switch(v134 >> 5)
          {
            case 1u:
              uint64_t v245 = v129;
              uint64_t v246 = v130;
              uint64_t v394 = v130;
              unint64_t v385 = sub_1000719B8();
              uint64_t v247 = swift_allocError();
              v396 = (unsigned __int8 *)v247;
              uint64_t *v248 = v127;
              v248[1] = v128;
              v248[2] = v246;
              v248[3] = v245;
              uint64_t v249 = v245;
              v248[4] = v131;
              v248[5] = v132;
              v248[6] = v133;
              uint64_t v250 = sub_10000A38C(&qword_10036C990);
              uint64_t v403 = v131;
              v251 = (char *)v250;
              uint64_t v252 = *(int *)(v250 + 28);
              LODWORD(v398) = v134;
              v253 = v391;
              v254 = v399;
              ((void (*)(char *, uint64_t, uint64_t))v388)((char *)v391 + v252, v404, v405);
              uint64_t *v253 = v247;
              uint64_t v255 = *((void *)v251 - 1);
              v256 = *(char ***)(v255 + 56);
              v386 = v251;
              v384 = v256;
              v383 = (uint64_t *)(v255 + 56);
              ((void (*)(uint64_t *, void, uint64_t, char *))v256)(v253, 0, 1, v251);
              uint64_t v257 = (uint64_t)v253;
              uint64_t v258 = (uint64_t)v402;
              sub_10001639C(v257, (uint64_t)v402, &qword_10036CAC0);
              uint64_t v259 = v258;
              uint64_t v260 = v91;
              uint64_t v261 = v249;
              uint64_t v262 = v394;
              sub_10000D728(v259, v260, &qword_10036CAC0);
              v393 = &v254[OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardFailed];
              swift_beginAccess();
              uint64_t v263 = v249;
              uint64_t v264 = v403;
              LOBYTE(v251) = (_BYTE)v398;
              sub_10001FA00(v127, v128, v262, v263, v403, v132, v133, v398);
              swift_retain();
              v390 = (unsigned __int8 *)v127;
              uint64_t v389 = v128;
              uint64_t v265 = v262;
              uint64_t v266 = v261;
              uint64_t v397 = v132;
              uint64_t v401 = v133;
              sub_10001FA00(v127, v128, v265, v261, v264, v132, v133, v251);
              swift_errorRetain();
              sub_1000E53AC(v260, (uint64_t)v393, &qword_10036CAC0);
              swift_endAccess();
              sub_1001DB94C();
              sub_10000D78C(v260, &qword_10036CAC0);
              sub_10000D78C((uint64_t)v402, &qword_10036CAC0);
              swift_errorRelease();
              v267 = (uint64_t *)(v406 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_education);
              swift_beginAccess();
              uint64_t v268 = *v267;
              if (v268)
              {
                swift_endAccess();
                uint64_t v269 = swift_allocError();
                uint64_t v270 = v389;
                void *v271 = v390;
                v271[1] = v270;
                uint64_t v272 = v394;
                v271[2] = v394;
                v271[3] = v266;
                uint64_t v392 = v266;
                uint64_t v273 = v403;
                uint64_t v274 = v397;
                v271[4] = v403;
                v271[5] = v274;
                v271[6] = v401;
                v275 = v386;
                v276 = v391;
                ((void (*)(char *, uint64_t, uint64_t))v388)((char *)v391 + *((int *)v386 + 7), v404, v405);
                uint64_t *v276 = v269;
                ((void (*)(uint64_t *, void, uint64_t, char *))v384)(v276, 0, 1, v275);
                uint64_t v277 = (uint64_t)v402;
                sub_10001639C((uint64_t)v276, (uint64_t)v402, &qword_10036CAC0);
                uint64_t v278 = (uint64_t)v400;
                sub_10000D728(v277, (uint64_t)v400, &qword_10036CAC0);
                uint64_t v279 = v268 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_cardFailed;
                swift_beginAccess();
                swift_retain();
                swift_errorRetain();
                sub_1000E53AC(v278, v279, &qword_10036CAC0);
                swift_endAccess();
                sub_1001DECE4();
                sub_10000D78C(v278, &qword_10036CAC0);
                sub_10000D78C(v277, &qword_10036CAC0);
                swift_release();
                sub_100020430((uint64_t)v390, v270, v272, v392, v273, v274, v401, v398);
                swift_errorRelease();
                goto LABEL_96;
              }
              sub_10027BE18(v395, type metadata accessor for ExperienceEvent);
              swift_endAccess();
              uint64_t v319 = (uint64_t)v390;
              uint64_t v320 = v389;
              uint64_t v321 = v394;
              uint64_t v322 = v403;
              uint64_t v323 = v397;
              uint64_t v324 = v401;
              unsigned __int8 v325 = v398;
              sub_100020430((uint64_t)v390, v389, v394, v261, v403, v397, v401, v398);
              swift_release();
              return (void *)sub_100020430(v319, v320, v321, v261, v322, v323, v324, v325);
            case 2u:
              if ((v134 & 0x1F) != 0)
              {
                if ((v134 & 0x1F) == 1)
                {
                  sub_100020430(v127, v128, v130, v129, v131, v132, v133, v134);
                  goto LABEL_97;
                }
                uint64_t v344 = v131 | v132 | v133;
                if (!(v130 | v128 | v127 | v129 | v344))
                {
                  uint64_t v365 = (uint64_t)v376;
                  uint64_t v392 = v129;
                  uint64_t v366 = v130;
                  ((void (*)(char *, uint64_t, uint64_t))v388)(v376, v404, v405);
                  uint64_t v367 = sub_10000A38C(&qword_10036C980);
                  uint64_t v368 = v365 + *(int *)(v367 + 32);
                  *(_DWORD *)uint64_t v368 = v403;
                  *(unsigned char *)(v368 + 4) = v379;
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v367 - 8) + 56))(v365, 0, 1, v367);
                  uint64_t v369 = (uint64_t)&v399[OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardRequested];
                  swift_beginAccess();
                  swift_retain();
                  sub_10000D78C(v369, &qword_10036CAC8);
                  sub_10001639C(v365, v369, &qword_10036CAC8);
                  swift_endAccess();
                  sub_100020430(0, 0, v366, v392, v131, v132, v133, v134);
                  goto LABEL_86;
                }
                uint64_t v345 = v131;
                uint64_t v346 = v130 | v128 | v129 | v344;
                uint64_t v347 = v395;
                if (v127 != 1 || v346)
                {
                  if (v127 != 2 || v346)
                  {
                    if (v127 != 3 || v346)
                    {
                      if (v127 != 4 || v346) {
                        uint64_t v353 = 5;
                      }
                      else {
                        uint64_t v353 = 4;
                      }
                    }
                    else
                    {
                      uint64_t v353 = 3;
                    }
                  }
                  else
                  {
                    uint64_t v353 = 2;
                  }
                  uint64_t v354 = v130;
                }
                else
                {
                  uint64_t v348 = (uint64_t)v386;
                  uint64_t v392 = v129;
                  uint64_t v394 = v130;
                  ((void (*)(char *, uint64_t, uint64_t))v388)(v386, v404, v405);
                  uint64_t v349 = sub_10000A38C(&qword_1003652D0);
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v349 - 8) + 56))(v348, 0, 1, v349);
                  uint64_t v350 = (uint64_t)&v399[OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardLoaded];
                  swift_beginAccess();
                  swift_retain();
                  sub_10000D78C(v350, &qword_1003653F8);
                  sub_10001639C(v348, v350, &qword_1003653F8);
                  swift_endAccess();
                  id v351 = sub_1001EA5B0();
                  NSString v352 = String._bridgeToObjectiveC()();
                  [v351 ulog:40 message:v352];
                  swift_release();

                  uint64_t v353 = 1;
                  uint64_t v354 = v394;
                  uint64_t v129 = v392;
                }
                sub_100020430(v353, 0, v354, v129, v345, v132, v133, v134);
                uint64_t v102 = type metadata accessor for ExperienceEvent;
                uint64_t v103 = v347;
                return (void *)sub_10027BE18(v103, v102);
              }
              uint64_t v326 = v129;
              uint64_t v392 = v129;
              uint64_t v327 = v130;
              uint64_t v394 = v130;
              sub_1000719B8();
              uint64_t v328 = swift_allocError();
              uint64_t v406 = v328;
              uint64_t *v329 = v127;
              v329[1] = v128;
              v329[2] = v327;
              v329[3] = v326;
              v329[4] = v131;
              v329[5] = v132;
              v329[6] = v133;
              uint64_t v330 = sub_10000A38C(&qword_10036C990);
              uint64_t v401 = v133;
              v390 = (unsigned __int8 *)v127;
              uint64_t v331 = v330;
              v332 = v391;
              ((void (*)(char *, uint64_t, uint64_t))v388)((char *)v391 + *(int *)(v330 + 28), v404, v405);
              uint64_t *v332 = v328;
              (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v331 - 8) + 56))(v332, 0, 1, v331);
              uint64_t v403 = v131;
              unsigned __int8 v333 = v134;
              LODWORD(v398) = v134;
              uint64_t v334 = v132;
              uint64_t v397 = v132;
              uint64_t v335 = (uint64_t)v332;
              uint64_t v336 = (uint64_t)v402;
              sub_10001639C(v335, (uint64_t)v402, &qword_10036CAC0);
              sub_10000D728(v336, v91, &qword_10036CAC0);
              uint64_t v337 = (uint64_t)&v399[OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardFailed];
              swift_beginAccess();
              swift_retain();
              uint64_t v338 = v127;
              uint64_t v339 = v394;
              uint64_t v340 = v392;
              uint64_t v341 = v403;
              uint64_t v342 = v334;
              uint64_t v343 = v401;
              sub_10001FA00(v338, v128, v394, v392, v403, v342, v401, v333);
              swift_errorRetain();
              sub_1000E53AC(v91, v337, &qword_10036CAC0);
              swift_endAccess();
              sub_1001DB94C();
              sub_10000D78C(v91, &qword_10036CAC0);
              sub_10000D78C(v336, &qword_10036CAC0);
              sub_100020430((uint64_t)v390, v128, v339, v340, v341, v397, v343, v398);
              swift_errorRelease();
              sub_10027BE18(v395, type metadata accessor for ExperienceEvent);
              return (void *)swift_release();
            case 3u:
              if (!(_BYTE)v127) {
                goto LABEL_97;
              }
              uint64_t v107 = v395;
              if (v127 == 1) {
                goto LABEL_18;
              }
              v280 = (uint64_t *)(v406 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_education);
              swift_beginAccess();
              uint64_t v281 = *v280;
              if (v281)
              {
                swift_endAccess();
                uint64_t v282 = (uint64_t)v386;
                ((void (*)(char *, uint64_t, uint64_t))v388)(v386, v404, v405);
                uint64_t v283 = sub_10000A38C(&qword_1003652D0);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v283 - 8) + 56))(v282, 0, 1, v283);
                uint64_t v284 = v281 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_subtitleSwipedBack;
                swift_beginAccess();
                swift_retain();
                swift_retain();
                sub_10000D78C(v284, &qword_1003653F8);
                sub_10001639C(v282, v284, &qword_1003653F8);
                swift_endAccess();
                swift_release();
                swift_release();
                goto LABEL_18;
              }
              swift_retain();
              sub_10027BE18(v107, type metadata accessor for ExperienceEvent);
              goto LABEL_141;
            case 4u:
              if (v130 | v128 | v127 | v129 | v131 | v132 | v133 || v134 != 128)
              {
                swift_retain();
                id v212 = sub_1001EA5B0();
                NSString v213 = String._bridgeToObjectiveC()();
                [v212 ulog:40 message:v213];
                swift_release();
                goto LABEL_72;
              }
              uint64_t v227 = (uint64_t)v376;
              ((void (*)(char *, uint64_t, uint64_t))v388)(v376, v404, v405);
              uint64_t v228 = sub_10000A38C(&qword_10036C980);
              uint64_t v229 = v227 + *(int *)(v228 + 32);
              *(_DWORD *)uint64_t v229 = v403;
              *(unsigned char *)(v229 + 4) = v379;
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v228 - 8) + 56))(v227, 0, 1, v228);
              uint64_t v230 = (uint64_t)&v399[OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_cardPresenting];
              swift_beginAccess();
              swift_retain();
              sub_10000D78C(v230, &qword_10036CAC8);
              sub_10001639C(v227, v230, &qword_10036CAC8);
              swift_endAccess();
LABEL_86:
              sub_10027BE18(v395, type metadata accessor for ExperienceEvent);
              return (void *)swift_release();
            default:
              uint64_t v392 = v129;
              uint64_t v136 = v130;
              uint64_t v137 = sub_10000A38C(&qword_10036C9A0);
              uint64_t v403 = v131;
              uint64_t v138 = v137;
              ((void (*)(char *, uint64_t, uint64_t))v388)((char *)v135 + *(int *)(v137 + 28), v404, v405);
              uint64_t *v135 = v127;
              v135[1] = v128;
              uint64_t v139 = *(void *)(v138 - 8);
              v140 = *(unsigned __int8 **)(v139 + 56);
              v400 = (char *)v138;
              v396 = v140;
              v391 = (uint64_t *)(v139 + 56);
              ((void (*)(uint64_t *, void, uint64_t, uint64_t))v140)(v135, 0, 1, v138);
              uint64_t v397 = v132;
              LODWORD(v398) = v134;
              v141 = v399;
              uint64_t v142 = (uint64_t)v393;
              sub_10001639C((uint64_t)v135, (uint64_t)v393, &qword_10036CAD0);
              sub_10000D728(v142, v88, &qword_10036CAD0);
              v402 = &v141[OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_dismissed];
              swift_beginAccess();
              uint64_t v143 = v392;
              uint64_t v144 = v403;
              sub_10001FA00(v127, v128, v136, v392, v403, v397, v133, v398);
              sub_10001FA00(v127, v128, v136, v143, v144, v397, v133, v398);
              swift_retain();
              sub_10001FA00(v127, v128, v136, v143, v144, v397, v133, v398);
              sub_1000E53AC(v88, (uint64_t)v402, &qword_10036CAD0);
              swift_endAccess();
              sub_1001DB94C();
              sub_10000D78C(v88, &qword_10036CAD0);
              uint64_t v145 = v128;
              uint64_t v146 = v144;
              uint64_t v147 = v397;
              sub_10000D78C(v142, &qword_10036CAD0);
              uint64_t v148 = v128;
              uint64_t v394 = v136;
              uint64_t v149 = v146;
              uint64_t v150 = v133;
              sub_100020430(v127, v148, v136, v143, v146, v147, v133, v398);
              v151 = (uint64_t *)(v406 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_education);
              swift_beginAccess();
              uint64_t v152 = *v151;
              if (v152)
              {
                swift_endAccess();
                uint64_t v153 = (uint64_t)v400;
                v154 = v383;
                ((void (*)(char *, uint64_t, uint64_t))v388)((char *)v383 + *((int *)v400 + 7), v404, v405);
                uint64_t v155 = v127;
                uint64_t *v154 = v127;
                v154[1] = v145;
                v390 = (unsigned __int8 *)v127;
                ((void (*)(uint64_t *, void, uint64_t, uint64_t))v396)(v154, 0, 1, v153);
                uint64_t v156 = v145;
                uint64_t v389 = v145;
                uint64_t v157 = (uint64_t)v393;
                sub_10001639C((uint64_t)v154, (uint64_t)v393, &qword_10036CAD0);
                uint64_t v158 = v401;
                sub_10000D728(v157, v401, &qword_10036CAD0);
                uint64_t v159 = v152 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_dismissed;
                swift_beginAccess();
                uint64_t v160 = v155;
                uint64_t v161 = v156;
                uint64_t v162 = v394;
                uint64_t v163 = v392;
                LOBYTE(v156) = (_BYTE)v398;
                sub_10001FA00(v160, v161, v394, v392, v149, v147, v150, v398);
                swift_retain();
                sub_1000E53AC(v158, v159, &qword_10036CAD0);
                swift_endAccess();
                sub_1001DECE4();
                sub_10000D78C(v158, &qword_10036CAD0);
                sub_10000D78C(v157, &qword_10036CAD0);
                swift_release();
                uint64_t v164 = (uint64_t)v390;
                uint64_t v165 = v389;
                sub_100020430((uint64_t)v390, v389, v162, v163, v149, v147, v150, v156);
                sub_100020430(v164, v165, v162, v163, v149, v147, v150, v156);
                goto LABEL_96;
              }
              sub_10027BE18(v395, type metadata accessor for ExperienceEvent);
              swift_endAccess();
              uint64_t v314 = v394;
              uint64_t v315 = v392;
              uint64_t v316 = v149;
              uint64_t v317 = v149;
              unsigned __int8 v318 = v398;
              sub_100020430(v127, v145, v394, v392, v317, v147, v133, v398);
              swift_release();
              unint64_t result = (void *)sub_100020430(v127, v145, v314, v315, v316, v147, v133, v318);
              break;
          }
          return result;
        case 2:
        case 6:
        case 7:
          goto LABEL_18;
        case 3:
          switch(*v396)
          {
            case 1u:
            case 2u:
            case 3u:
              id v294 = sub_1001EA5B0();
              NSString v295 = String._bridgeToObjectiveC()();
              [v294 ulog:40 message:v295];

              break;
            default:
              goto LABEL_18;
          }
          goto LABEL_18;
        case 4:
          sub_10027BE18(v107, type metadata accessor for ExperienceEvent);
          return (void *)sub_10002052C(*(void *)v396, *((void *)v396 + 1), *((void *)v396 + 2), *((void *)v396 + 3), *((void *)v396 + 4), *((void *)v396 + 5), *((void *)v396 + 6), v396[56]);
        case 5:
          sub_10027BE18(v107, type metadata accessor for ExperienceEvent);
          return (void *)sub_1000205C8(*(void *)v396, *((void *)v396 + 1), *((void *)v396 + 2), *((void *)v396 + 3), *((void *)v396 + 4), *((void *)v396 + 5), *((void *)v396 + 6), v396[56]);
        case 8:
          uint64_t v189 = v382;
          sub_10027BD48((uint64_t)v396, v382, (uint64_t (*)(void))type metadata accessor for TransferEvent);
          uint64_t v97 = v381;
          sub_10027BDB0(v189, (uint64_t)v381, (uint64_t (*)(void))type metadata accessor for TransferEvent);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              sub_10027BE18(v189, (uint64_t (*)(void))type metadata accessor for TransferEvent);
              sub_10027BE18(v107, type metadata accessor for ExperienceEvent);
              return (void *)swift_errorRelease();
            case 2u:
            case 3u:
              sub_10027BE18(v189, (uint64_t (*)(void))type metadata accessor for TransferEvent);
              sub_10027BE18(v107, type metadata accessor for ExperienceEvent);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return (void *)swift_bridgeObjectRelease();
            case 4u:
              v190 = (uint64_t (*)(uint64_t))type metadata accessor for TransferEvent;
              sub_10027BE18(v189, (uint64_t (*)(void))type metadata accessor for TransferEvent);
              v192 = type metadata accessor for ExperienceEvent;
              uint64_t v191 = v107;
              goto LABEL_46;
            case 5u:
              sub_10027BE18(v189, (uint64_t (*)(void))type metadata accessor for TransferEvent);
              sub_10027BE18(v107, type metadata accessor for ExperienceEvent);
              return (void *)sub_100020628(*(void *)v97);
            case 8u:
            case 9u:
              goto LABEL_114;
            default:
              id v296 = sub_1001EA5B0();
              NSString v297 = String._bridgeToObjectiveC()();
              [v296 ulog:40 message:v297];

LABEL_114:
              sub_10027BE18(v189, (uint64_t (*)(void))type metadata accessor for TransferEvent);
              break;
          }
          goto LABEL_18;
        case 9:
          uint64_t v166 = *(void *)v396;
          uint64_t v167 = *(void *)(v406 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_card);
          if (v167)
          {
            switch(v166)
            {
              case 0:
                uint64_t v168 = v167 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_dismissed;
                swift_beginAccess();
                uint64_t v169 = v374;
                sub_10000D728(v168, v374, &qword_10036CAD0);
                uint64_t v170 = sub_10000A38C(&qword_10036C9A0);
                uint64_t v171 = *(void *)(v170 - 8);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v171 + 48))(v169, 1, v170) != 1)
                {
                  sub_10000BECC(0);
                  goto LABEL_122;
                }
                swift_retain();
                sub_10000D78C(v169, &qword_10036CAD0);
                v172 = v383;
                ((void (*)(char *, uint64_t, uint64_t))v388)((char *)v383 + *(int *)(v170 + 28), v87, v405);
                void *v172 = 0xD000000000000017;
                v172[1] = 0x80000001002C8420;
                v173 = *(void (**)(void *, void, uint64_t, uint64_t))(v171 + 56);
                v402 = (char *)0xD000000000000017;
                uint64_t v403 = (uint64_t)v173;
                v173(v172, 0, 1, v170);
                uint64_t v174 = (uint64_t)v393;
                sub_10001639C((uint64_t)v172, (uint64_t)v393, &qword_10036CAD0);
                sub_10000D728(v174, v88, &qword_10036CAD0);
                swift_beginAccess();
                sub_1000E53AC(v88, v168, &qword_10036CAD0);
                swift_endAccess();
                sub_1001DB94C();
                sub_10000D78C(v88, &qword_10036CAD0);
                sub_10000D78C(v174, &qword_10036CAD0);
                v175 = (uint64_t *)(v406 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_education);
                swift_beginAccess();
                uint64_t v176 = *v175;
                if (v176)
                {
                  swift_endAccess();
                  ((void (*)(char *, uint64_t, uint64_t))v388)((char *)v172 + *(int *)(v170 + 28), v404, v405);
                  void *v172 = v402;
                  v172[1] = 0x80000001002C8420;
                  ((void (*)(void *, void, uint64_t, uint64_t))v403)(v172, 0, 1, v170);
                  sub_10001639C((uint64_t)v172, v174, &qword_10036CAD0);
                  sub_10000D728(v174, v88, &qword_10036CAD0);
                  uint64_t v177 = v176 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_dismissed;
                  swift_beginAccess();
                  swift_retain();
                  sub_1000E53AC(v88, v177, &qword_10036CAD0);
                  swift_endAccess();
                  sub_1001DECE4();
                  sub_10000D78C(v88, &qword_10036CAD0);
                  sub_10000D78C(v174, &qword_10036CAD0);
                  swift_release();
                  sub_10000BECC(0);
LABEL_96:
                  swift_release();
                  goto LABEL_97;
                }
                sub_10027BE18(v395, type metadata accessor for ExperienceEvent);
                swift_endAccess();
                swift_release();
                return (void *)sub_10000BECC(0);
              case 1:
                uint64_t v231 = (uint64_t)v386;
                ((void (*)(char *, uint64_t, uint64_t))v388)(v386, v87, v405);
                uint64_t v232 = sub_10000A38C(&qword_1003652D0);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v232 - 8) + 56))(v231, 0, 1, v232);
                v233 = &OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_remoteAlertRequested;
                goto LABEL_89;
              case 2:
                uint64_t v231 = (uint64_t)v386;
                ((void (*)(char *, uint64_t, uint64_t))v388)(v386, v87, v405);
                uint64_t v234 = sub_10000A38C(&qword_1003652D0);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v234 - 8) + 56))(v231, 0, 1, v234);
                v233 = &OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_remoteAlertActivated;
LABEL_89:
                uint64_t v235 = v167 + *v233;
                swift_beginAccess();
                swift_retain();
                sub_10000D78C(v235, &qword_1003653F8);
                sub_10001639C(v231, v235, &qword_1003653F8);
                swift_endAccess();
                sub_10027BE18(v107, type metadata accessor for ExperienceEvent);
                return (void *)swift_release();
              case 3:
                uint64_t v236 = v167 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_dismissed;
                swift_beginAccess();
                uint64_t v169 = v373;
                sub_10000D728(v236, v373, &qword_10036CAD0);
                uint64_t v237 = sub_10000A38C(&qword_10036C9A0);
                uint64_t v238 = *(void *)(v237 - 8);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v238 + 48))(v169, 1, v237) != 1)
                {
LABEL_122:
                  sub_10000D78C(v169, &qword_10036CAD0);
                  goto LABEL_18;
                }
                swift_retain();
                sub_10000D78C(v169, &qword_10036CAD0);
                v239 = v383;
                ((void (*)(char *, uint64_t, uint64_t))v388)((char *)v383 + *(int *)(v237 + 28), v87, v405);
                void *v239 = 0xD000000000000017;
                v239[1] = 0x80000001002C8440;
                v240 = *(void (**)(void *, void, uint64_t, uint64_t))(v238 + 56);
                v402 = (char *)0xD000000000000017;
                uint64_t v403 = (uint64_t)v240;
                v240(v239, 0, 1, v237);
                uint64_t v241 = (uint64_t)v393;
                sub_10001639C((uint64_t)v239, (uint64_t)v393, &qword_10036CAD0);
                sub_10000D728(v241, v88, &qword_10036CAD0);
                swift_beginAccess();
                sub_1000E53AC(v88, v236, &qword_10036CAD0);
                swift_endAccess();
                sub_1001DB94C();
                sub_10000D78C(v88, &qword_10036CAD0);
                sub_10000D78C(v241, &qword_10036CAD0);
                v242 = (uint64_t *)(v406 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_education);
                swift_beginAccess();
                uint64_t v243 = *v242;
                if (v243)
                {
                  swift_endAccess();
                  ((void (*)(char *, uint64_t, uint64_t))v388)((char *)v239 + *(int *)(v237 + 28), v404, v405);
                  void *v239 = v402;
                  v239[1] = 0x80000001002C8440;
                  ((void (*)(void *, void, uint64_t, uint64_t))v403)(v239, 0, 1, v237);
                  sub_10001639C((uint64_t)v239, v241, &qword_10036CAD0);
                  sub_10000D728(v241, v88, &qword_10036CAD0);
                  uint64_t v244 = v243 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_dismissed;
                  swift_beginAccess();
                  swift_retain();
                  sub_1000E53AC(v88, v244, &qword_10036CAD0);
                  swift_endAccess();
                  sub_1001DECE4();
                  sub_10000D78C(v88, &qword_10036CAD0);
                  sub_10000D78C(v241, &qword_10036CAD0);
                  swift_release();
                  swift_release();
                  goto LABEL_97;
                }
                sub_10027BE18(v395, type metadata accessor for ExperienceEvent);
LABEL_141:
                swift_endAccess();
                break;
              default:
                uint64_t v285 = sub_10000A38C((uint64_t *)&unk_1003652E0);
                ((void (*)(char *, uint64_t, uint64_t))v388)((char *)v82 + *(int *)(v285 + 28), v87, v405);
                *uint64_t v82 = v166;
                uint64_t v286 = *(void *)(v285 - 8);
                v287 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v286 + 56);
                v402 = (char *)(v286 + 56);
                uint64_t v403 = (uint64_t)v287;
                v287(v82, 0, 1, v285);
                uint64_t v288 = v375;
                sub_10001639C((uint64_t)v82, v375, &qword_1003653F0);
                sub_10000D728(v288, v90, &qword_1003653F0);
                uint64_t v289 = v90;
                uint64_t v290 = v167 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_remoteAlertFailed;
                swift_beginAccess();
                swift_errorRetain();
                sub_1000C7724(v166);
                swift_retain();
                sub_1000C7724(v166);
                sub_1000E53AC(v289, v290, &qword_1003653F0);
                swift_endAccess();
                sub_1001DB94C();
                sub_10000D78C(v289, &qword_1003653F0);
                sub_10000D78C(v288, &qword_1003653F0);
                v291 = (uint64_t *)(v406 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_education);
                swift_beginAccess();
                uint64_t v292 = *v291;
                if (v292)
                {
                  swift_endAccess();
                  ((void (*)(char *, uint64_t, uint64_t))v388)((char *)v82 + *(int *)(v285 + 28), v87, v405);
                  *uint64_t v82 = v166;
                  ((void (*)(uint64_t *, void, uint64_t, uint64_t))v403)(v82, 0, 1, v285);
                  sub_10001639C((uint64_t)v82, v288, &qword_1003653F0);
                  sub_10000D728(v288, v289, &qword_1003653F0);
                  uint64_t v293 = v292 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_remoteAlertFailed;
                  swift_beginAccess();
                  sub_1000C7724(v166);
                  swift_retain();
                  sub_1000E53AC(v289, v293, &qword_1003653F0);
                  swift_endAccess();
                  sub_1001DECE4();
                  sub_10000D78C(v289, &qword_1003653F0);
                  sub_10000D78C(v288, &qword_1003653F0);
                  swift_release();
                  sub_10000BECC(v166);
                  sub_10000BECC(v166);
                  swift_release();
                  sub_10027BE18(v395, type metadata accessor for ExperienceEvent);
                }
                else
                {
                  sub_10027BE18(v395, type metadata accessor for ExperienceEvent);
                  swift_endAccess();
                  sub_10000BECC(v166);
                  sub_10000BECC(v166);
                  swift_release();
                }
                return (void *)sub_10000BECC(v166);
            }
            return (void *)swift_release();
          }
          id v214 = sub_1001F568C();
          NSString v215 = String._bridgeToObjectiveC()();
          [v214 ulog:60 message:v215];

          sub_10000BECC(v166);
LABEL_18:
          uint64_t v102 = type metadata accessor for ExperienceEvent;
          uint64_t v103 = v107;
          return (void *)sub_10027BE18(v103, v102);
        case 10:
          _diagnoseUnexpectedEnumCase<A>(type:)();
          __break(1u);
          JUMPOUT(0x1002780A8);
        default:
          uint64_t v179 = *(void *)v396;
          uint64_t v178 = *((void *)v396 + 1);
          uint64_t v180 = v396[16];
          v181 = (uint64_t *)(v406 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_hint);
          swift_beginAccess();
          uint64_t v182 = *v181;
          if (v182)
          {
            if ((v180 & 0x80) == 0)
            {
              uint64_t v183 = (uint64_t)v393;
              switch(v180)
              {
                case 1:
                  uint64_t v302 = sub_10000A38C(&qword_10036C9A0);
                  v303 = v383;
                  ((void (*)(char *, uint64_t, uint64_t))v388)((char *)v383 + *(int *)(v302 + 28), v87, v405);
                  uint64_t *v303 = v179;
                  v303[1] = v178;
                  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v302 - 8) + 56))(v303, 0, 1, v302);
                  sub_10001639C((uint64_t)v303, v183, &qword_10036CAD0);
                  sub_10000D728(v183, v88, &qword_10036CAD0);
                  uint64_t v304 = v183;
                  uint64_t v305 = v182 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_denied;
                  swift_beginAccess();
                  swift_retain();
                  sub_10001F9E8(v179, v178, 1);
                  sub_1000E53AC(v88, v305, &qword_10036CAD0);
                  swift_endAccess();
                  sub_1002616E0();
                  sub_10000D78C(v88, &qword_10036CAD0);
                  sub_10000D78C(v304, &qword_10036CAD0);
                  uint64_t v186 = v179;
                  uint64_t v187 = v178;
                  char v188 = 1;
                  break;
                case 2:
                  uint64_t v218 = v179;
                  uint64_t v219 = v178;
                  char v220 = 2;
                  goto LABEL_76;
                case 3:
                  uint64_t v306 = sub_10000A38C((uint64_t *)&unk_1003715E8);
                  v307 = v370;
                  ((void (*)(char *, uint64_t, uint64_t))v388)((char *)v370 + *(int *)(v306 + 28), v87, v405);
                  uint64_t *v307 = v179;
                  v307[1] = v178;
                  v308 = (char *)v307 + *(int *)(v306 + 32);
                  *(_DWORD *)v308 = v403;
                  v308[4] = v379;
                  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v306 - 8) + 56))(v307, 0, 1, v306);
                  uint64_t v309 = v371;
                  sub_10001639C((uint64_t)v307, v371, &qword_1003716F8);
                  uint64_t v310 = v372;
                  sub_10000D728(v309, v372, &qword_1003716F8);
                  uint64_t v311 = v182 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_dismissed;
                  swift_beginAccess();
                  swift_retain();
                  sub_10001F9E8(v179, v178, 3);
                  sub_1000E53AC(v310, v311, &qword_1003716F8);
                  swift_endAccess();
                  sub_1002616E0();
                  sub_10000D78C(v310, &qword_1003716F8);
                  sub_10000D78C(v309, &qword_1003716F8);
                  sub_10027BE18(v395, type metadata accessor for ExperienceEvent);
                  sub_100020428(v179, v178, 3);
                  return (void *)swift_release();
                case 4:
                  switch(v179)
                  {
                    case 1:
                      uint64_t v355 = (uint64_t)v376;
                      ((void (*)(char *, uint64_t, uint64_t))v388)(v376, v87, v405);
                      uint64_t v356 = sub_10000A38C(&qword_10036C980);
                      uint64_t v357 = v355 + *(int *)(v356 + 32);
                      *(_DWORD *)uint64_t v357 = v403;
                      *(unsigned char *)(v357 + 4) = v379;
                      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v356 - 8) + 56))(v355, 0, 1, v356);
                      uint64_t v358 = v182 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_presenting;
                      swift_beginAccess();
                      swift_retain();
                      sub_10000D78C(v358, &qword_10036CAC8);
                      sub_10001639C(v355, v358, &qword_10036CAC8);
                      swift_endAccess();
                      id v359 = sub_1001EA5B0();
                      goto LABEL_144;
                    case 2:
                      uint64_t v360 = (uint64_t)v376;
                      ((void (*)(char *, uint64_t, uint64_t))v388)(v376, v87, v405);
                      uint64_t v361 = sub_10000A38C(&qword_10036C980);
                      uint64_t v362 = v360 + *(int *)(v361 + 32);
                      *(_DWORD *)uint64_t v362 = v403;
                      *(unsigned char *)(v362 + 4) = v379;
                      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v361 - 8) + 56))(v360, 0, 1, v361);
                      uint64_t v363 = v182 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_presented;
                      swift_beginAccess();
                      swift_retain();
                      sub_10000D78C(v363, &qword_10036CAC8);
                      sub_10001639C(v360, v363, &qword_10036CAC8);
                      swift_endAccess();
                      id v359 = sub_1001EA5B0();
LABEL_144:
                      NSString v364 = String._bridgeToObjectiveC()();
                      [v359 ulog:40 message:v364];
                      swift_release();

                      break;
                    case 3:
                    case 4:
                      break;
                    default:
                      uint64_t v298 = (uint64_t)v376;
                      ((void (*)(char *, uint64_t, uint64_t))v388)(v376, v87, v405);
                      uint64_t v299 = sub_10000A38C(&qword_10036C980);
                      uint64_t v300 = v298 + *(int *)(v299 + 32);
                      *(_DWORD *)uint64_t v300 = v403;
                      *(unsigned char *)(v300 + 4) = v379;
                      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v299 - 8) + 56))(v298, 0, 1, v299);
                      uint64_t v301 = v182 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_requested;
                      swift_beginAccess();
                      swift_retain();
                      sub_10000D78C(v301, &qword_10036CAC8);
                      sub_10001639C(v298, v301, &qword_10036CAC8);
                      swift_endAccess();
                      uint64_t v186 = v179;
                      uint64_t v187 = v178;
                      char v188 = 4;
                      goto LABEL_118;
                  }
                  uint64_t v218 = v179;
                  uint64_t v219 = v178;
                  char v220 = 4;
                  goto LABEL_76;
                default:
                  uint64_t v184 = sub_10000A38C(&qword_10036C990);
                  ((void (*)(char *, uint64_t, uint64_t))v388)((char *)v109 + *(int *)(v184 + 28), v87, v405);
                  *uint64_t v109 = v179;
                  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v184 - 8) + 56))(v109, 0, 1, v184);
                  sub_10001639C((uint64_t)v109, v89, &qword_10036CAC0);
                  sub_10000D728(v89, v91, &qword_10036CAC0);
                  uint64_t v185 = v182 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_failed;
                  swift_beginAccess();
                  swift_retain();
                  sub_10001F9E8(v179, v178, 0);
                  sub_1000E53AC(v91, v185, &qword_10036CAC0);
                  swift_endAccess();
                  sub_1002616E0();
                  sub_10000D78C(v91, &qword_10036CAC0);
                  sub_10000D78C(v89, &qword_10036CAC0);
                  uint64_t v186 = v179;
                  uint64_t v187 = v178;
                  char v188 = 0;
                  break;
              }
LABEL_118:
              sub_100020428(v186, v187, v188);
              sub_10027BE18(v395, type metadata accessor for ExperienceEvent);
              return (void *)swift_release();
            }
          }
          else
          {
            id v216 = sub_1001F568C();
            NSString v217 = String._bridgeToObjectiveC()();
            [v216 ulog:60 message:v217];
          }
          uint64_t v218 = v179;
          uint64_t v219 = v178;
          char v220 = v180;
LABEL_76:
          sub_100020428(v218, v219, v220);
LABEL_97:
          uint64_t v102 = type metadata accessor for ExperienceEvent;
          uint64_t v103 = v395;
          break;
      }
      return (void *)sub_10027BE18(v103, v102);
    case 2:
      unsigned int v104 = *v57;
      uint64_t v105 = v406;
      switch(v104 >> 13)
      {
        case 1u:
          if ((v104 & 0x100) == 0
            && *(unsigned char *)(v406 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_initialUIType) == 2)
          {
            *(unsigned char *)(v406 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_initialUIType) = 0;
          }
          break;
        case 2u:
          if ((v104 & 0x100) == 0) {
            goto LABEL_25;
          }
          break;
        case 3u:
LABEL_25:
          if (*(unsigned char *)(v406 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_initialUIType) == 2) {
            *(unsigned char *)(v406 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_initialUIType) = 1;
          }
          break;
        case 4u:
          if ((__int16)v104 >= -32766)
          {
            uint64_t v110 = (uint64_t)v386;
            uint64_t v111 = v405;
            uint64_t v112 = (void (*)(uint64_t, uint64_t, uint64_t))v388;
            ((void (*)(char *, uint64_t, uint64_t))v388)(v386, v404, v405);
            uint64_t v113 = sub_10000A38C(&qword_1003652D0);
            uint64_t v403 = *(void *)(*(void *)(v113 - 8) + 56);
            ((void (*)(uint64_t, void, uint64_t, uint64_t))v403)(v110, 0, 1, v113);
            uint64_t v114 = v105 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_sessionEnded;
            swift_beginAccess();
            sub_10000D78C(v114, &qword_1003653F8);
            sub_10001639C(v110, v114, &qword_1003653F8);
            swift_endAccess();
            uint64_t v115 = (uint64_t *)(v105 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_hint);
            unint64_t result = (void *)swift_beginAccess();
            uint64_t v116 = *v115;
            if (v116)
            {
              v112(v110, v87, v111);
              ((void (*)(uint64_t, void, uint64_t, uint64_t))v403)(v110, 0, 1, v113);
              char v117 = (void (*)(void, void, void, void))v384;
              sub_10001639C(v110, (uint64_t)v384, &qword_1003653F8);
              uint64_t v118 = v385;
              sub_10000D728((uint64_t)v117, v385, &qword_1003653F8);
              uint64_t v119 = v116 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_sessionEnded;
              swift_beginAccess();
              swift_retain();
              uint64_t v120 = v119;
              uint64_t v105 = v406;
              sub_1000E53AC(v118, v120, &qword_1003653F8);
              swift_endAccess();
              sub_10026181C();
              sub_10000D78C(v118, &qword_1003653F8);
              sub_10000D78C((uint64_t)v117, &qword_1003653F8);
              unint64_t result = (void *)swift_release();
            }
            char v121 = (void (*)(uint64_t, void, uint64_t, uint64_t))v403;
            uint64_t v122 = *(void *)(v105 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_card);
            if (v122)
            {
              uint64_t v123 = (uint64_t)v386;
              ((void (*)(char *, uint64_t, uint64_t))v388)(v386, v87, v405);
              v121(v123, 0, 1, v113);
              unint64_t v124 = (void (*)(void, void, void, void))v384;
              sub_10001639C(v123, (uint64_t)v384, &qword_1003653F8);
              uint64_t v125 = v385;
              sub_10000D728((uint64_t)v124, v385, &qword_1003653F8);
              uint64_t v126 = v122 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_sessionEnded;
              swift_beginAccess();
              swift_retain();
              sub_1000E53AC(v125, v126, &qword_1003653F8);
              swift_endAccess();
              sub_1001DBA88();
              sub_10000D78C(v125, &qword_1003653F8);
              sub_10000D78C((uint64_t)v124, &qword_1003653F8);
              return (void *)swift_release();
            }
          }
          break;
        default:
          return result;
      }
      return result;
    case 3:
      return (void *)swift_bridgeObjectRelease();
    default:
      uint64_t v92 = (char *)v57 + *(int *)(sub_10000A38C((uint64_t *)&unk_1003676C0) + 48);
      uint64_t v93 = v397;
      sub_10027BD48((uint64_t)v57, v397, type metadata accessor for ExperienceEffect);
      uint64_t v94 = (uint64_t)v92;
      uint64_t v95 = v394;
      sub_10027BD48(v94, v394, type metadata accessor for ExperienceEvent);
      uint64_t v96 = v93;
      uint64_t v97 = v390;
      sub_10027BDB0(v96, (uint64_t)v390, type metadata accessor for ExperienceEffect);
      int v98 = swift_getEnumCaseMultiPayload();
      uint64_t v99 = v406;
      uint64_t v100 = (uint64_t)v393;
      switch(v98)
      {
        case 1:
        case 5:
        case 7:
        case 8:
        case 10:
          goto LABEL_10;
        case 2:
          int v199 = *v97;
          uint64_t v200 = *(void *)(v406 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_card);
          if (v199 == 5)
          {
            uint64_t v197 = v378;
            uint64_t v201 = v377;
            if (v200)
            {
              sub_10027BDB0(v394, v378, type metadata accessor for ExperienceEvent);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v201 + 56))(v197, 0, 1, v392);
              uint64_t v202 = v200 + OBJC_IVAR____TtC17proximitycontrold22CardPresentationRecord_dismissEffectTrigger;
              swift_beginAccess();
              swift_retain();
              sub_1000E53AC(v197, v202, &qword_10035F278);
              swift_endAccess();
              sub_1001DBD8C();
              sub_10000D78C(v197, &qword_10035F278);
              swift_release();
            }
            v203 = (uint64_t *)(v99 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_education);
            swift_beginAccess();
            uint64_t v204 = *v203;
            if (*v203)
            {
              swift_endAccess();
              uint64_t v196 = v394;
              sub_10027BDB0(v394, v197, type metadata accessor for ExperienceEvent);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v201 + 56))(v197, 0, 1, v392);
              uint64_t v205 = v204 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_dismissEffectTrigger;
              swift_beginAccess();
              swift_retain();
              sub_1000E53AC(v197, v205, &qword_10035F278);
              swift_endAccess();
              sub_1001DEE20();
              goto LABEL_58;
            }
            goto LABEL_137;
          }
          if (!v200) {
            sub_1002787D0(v87, v403 | (unint64_t)(v379 << 32), v95);
          }
          if (v199 == 3)
          {
            v222 = (uint64_t *)(v99 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_education);
            swift_beginAccess();
            uint64_t v223 = *v222;
            if (*v222)
            {
              swift_endAccess();
              uint64_t v224 = sub_10000A38C(&qword_10036C9A0);
              v225 = v383;
              ((void (*)(char *, uint64_t, uint64_t))v388)((char *)v383 + *(int *)(v224 + 28), v87, v405);
              *(_OWORD *)v225 = xmmword_1002B0A40;
              (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v224 - 8) + 56))(v225, 0, 1, v224);
              sub_10001639C((uint64_t)v225, v100, &qword_10036CAD0);
              sub_10000D728(v100, v88, &qword_10036CAD0);
              uint64_t v226 = v223 + OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_dismissed;
              swift_beginAccess();
              swift_retain();
              sub_1000E53AC(v88, v226, &qword_10036CAD0);
              swift_endAccess();
              sub_1001DECE4();
              sub_10000D78C(v88, &qword_10036CAD0);
              sub_10000D78C(v100, &qword_10036CAD0);
LABEL_127:
              swift_release();
              goto LABEL_78;
            }
          }
          else
          {
            if (v199 == 4) {
              goto LABEL_10;
            }
            v207 = (uint64_t *)(v99 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_education);
            swift_beginAccess();
            if (!*v207) {
              sub_100278C50(v87, v403 | (unint64_t)(v379 << 32), v394);
            }
            if (v199)
            {
              uint64_t v208 = (uint64_t)v386;
              if (v199 == 1)
              {
LABEL_78:
                uint64_t v101 = v394;
                goto LABEL_11;
              }
              swift_beginAccess();
              uint64_t v209 = *v207;
              if (!v209) {
                goto LABEL_137;
              }
              swift_endAccess();
              ((void (*)(uint64_t, uint64_t, uint64_t))v388)(v208, v87, v405);
              uint64_t v210 = sub_10000A38C(&qword_1003652D0);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v210 - 8) + 56))(v208, 0, 1, v210);
              v211 = &OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_completedPresented;
              goto LABEL_126;
            }
            swift_beginAccess();
            uint64_t v209 = *v207;
            uint64_t v208 = (uint64_t)v386;
            if (v209)
            {
              swift_endAccess();
              ((void (*)(uint64_t, uint64_t, uint64_t))v388)(v208, v87, v405);
              uint64_t v312 = sub_10000A38C(&qword_1003652D0);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v312 - 8) + 56))(v208, 0, 1, v312);
              v211 = &OBJC_IVAR____TtC17proximitycontrold27EducationPresentationRecord_hintPresented;
LABEL_126:
              uint64_t v313 = v209 + *v211;
              swift_beginAccess();
              swift_retain();
              sub_10000D78C(v313, &qword_1003653F8);
              sub_10001639C(v208, v313, &qword_1003653F8);
              swift_endAccess();
              goto LABEL_127;
            }
          }
          goto LABEL_137;
        case 3:
          sub_10027BE18(v95, type metadata accessor for ExperienceEvent);
          sub_10027BE18(v397, type metadata accessor for ExperienceEffect);

          return (void *)swift_release();
        case 4:
          id v206 = sub_1001EA5B0();
          NSString v221 = String._bridgeToObjectiveC()();
          [v206 ulog:40 message:v221];

          goto LABEL_78;
        case 6:
          sub_10027BE18(v95, type metadata accessor for ExperienceEvent);
          v190 = type metadata accessor for ExperienceEffect;
          uint64_t v191 = v397;
          v192 = type metadata accessor for ExperienceEffect;
LABEL_46:
          sub_10027BE18(v191, v192);
          uint64_t v103 = (uint64_t)v97;
          uint64_t v102 = v190;
          return (void *)sub_10027BE18(v103, v102);
        case 9:
          sub_10027BE18(v95, type metadata accessor for ExperienceEvent);
          sub_10027BE18(v397, type metadata accessor for ExperienceEffect);
          return sub_100020358(*(void **)v97, *((void *)v97 + 1), *((void *)v97 + 2), v97[24]);
        default:
          int v193 = (char)v97[16];
          if (v193 < 0)
          {
            sub_100020330(*(void *)v97, *((void *)v97 + 1), v193);
            goto LABEL_10;
          }
          if (!*(void *)v97)
          {
            sub_100279028(v87, v403 | (unint64_t)(v379 << 32), v95);
            goto LABEL_10;
          }
          if (*(void *)v97 != 1)
          {
LABEL_10:
            uint64_t v101 = v95;
LABEL_11:
            sub_10027BE18(v101, type metadata accessor for ExperienceEvent);
            uint64_t v102 = type metadata accessor for ExperienceEffect;
            uint64_t v103 = v397;
            return (void *)sub_10027BE18(v103, v102);
          }
          v194 = (uint64_t *)(v406 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_hint);
          swift_beginAccess();
          uint64_t v195 = *v194;
          if (*v194)
          {
            swift_endAccess();
            uint64_t v196 = v394;
            uint64_t v197 = v378;
            sub_10027BDB0(v394, v378, type metadata accessor for ExperienceEvent);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v377 + 56))(v197, 0, 1, v392);
            uint64_t v198 = v195 + OBJC_IVAR____TtC17proximitycontrold22HintPresentationRecord_dismissEffectTrigger;
            swift_beginAccess();
            swift_retain();
            sub_1000E53AC(v197, v198, &qword_10035F278);
            swift_endAccess();
            sub_100261C0C();
LABEL_58:
            sub_10000D78C(v197, &qword_10035F278);
            swift_release();
            uint64_t v101 = v196;
            goto LABEL_11;
          }
LABEL_137:
          sub_10027BE18(v394, type metadata accessor for ExperienceEvent);
          sub_10027BE18(v397, type metadata accessor for ExperienceEffect);
          return (void *)swift_endAccess();
      }
  }
}

void sub_1002781C0(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000A38C(&qword_1003724C0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v35 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v33 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v34 = (uint64_t)&v33 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (unsigned __int8 *)&v33 - v14;
  uint64_t v39 = 0;
  unint64_t v40 = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  v16._object = (void *)0x80000001002C8800;
  v16._countAndFlagsBits = 0xD000000000000028;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x3D746E657665203ALL;
  v17._object = (void *)0xE800000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = sub_10020F1D0(a1);
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x7473656D6974202CLL;
  v19._object = (void *)0xEC0000003D706D61;
  String.append(_:)(v19);
  uint64_t v20 = type metadata accessor for Date();
  sub_10014ACD4();
  uint64_t v21 = a2;
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x6E6174736964202CLL;
  v23._object = (void *)0xEB000000003D6563;
  String.append(_:)(v23);
  int v37 = a3;
  char v38 = BYTE4(a3) & 1;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  id v24 = sub_1001F64A0();
  swift_bridgeObjectRetain();
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v24 ulog:40 message:v25];
  swift_bridgeObjectRelease();

  if ((a1 - 5) >= 5u)
  {
    uint64_t v26 = sub_10000A38C((uint64_t *)&unk_100367790);
    (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(&v15[*(int *)(v26 + 28)], v21, v20);
    *uint64_t v15 = a1;
    uint64_t v27 = &v15[*(int *)(v26 + 32)];
    *(_DWORD *)uint64_t v27 = a3;
    v27[4] = BYTE4(a3) & 1;
    (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v15, 0, 1, v26);
    uint64_t v28 = v34;
    sub_10001639C((uint64_t)v15, v34, &qword_1003724C0);
    sub_10000D728(v28, (uint64_t)v11, &qword_1003724C0);
    uint64_t v29 = v36;
    uint64_t v30 = v36 + OBJC_IVAR____TtC17proximitycontrold13DeviceHistory_uxRegion;
    swift_beginAccess();
    uint64_t v31 = v35;
    sub_10000D728(v30, v35, &qword_1003724C0);
    swift_beginAccess();
    swift_retain();
    sub_1000E53AC((uint64_t)v11, v30, &qword_1003724C0);
    swift_endAccess();
    uint64_t v32 = v29 + OBJC_IVAR____TtC17proximitycontrold13DeviceHistory_previousUXRegion;
    swift_beginAccess();
    sub_1000E53AC(v31, v32, &qword_1003724C0);
    swift_endAccess();
    sub_10000D78C((uint64_t)v11, &qword_1003724C0);
    sub_10000D78C(v31, &qword_1003724C0);
    sub_10000D78C(v28, &qword_1003724C0);
    swift_release();
  }
}

uint64_t sub_1002785BC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC17proximitycontrold13DeviceHistory_discoveryTime;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold13DeviceHistory_previousUXRegion, &qword_1003724C0);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold13DeviceHistory_uxRegion, &qword_1003724C0);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1002786AC()
{
  return type metadata accessor for DeviceHistory(0);
}

uint64_t type metadata accessor for DeviceHistory(uint64_t a1)
{
  return sub_100014F7C(a1, (uint64_t *)&unk_100371F68);
}

void sub_1002786D4()
{
  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    sub_1000E4A6C(319, (unint64_t *)&unk_100371F78, (uint64_t *)&unk_100367790);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1002787D0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v43 = a3;
  unint64_t v44 = a2;
  uint64_t v42 = a1;
  uint64_t v5 = type metadata accessor for ExperienceEvent(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = sub_1001F568C();
  NSString v12 = String._bridgeToObjectiveC()();
  [v11 ulog:40 message:v12];

  uint64_t v13 = OBJC_IVAR____TtC17proximitycontrold14SessionHistory_card;
  uint64_t v14 = *(void *)(v4 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_card);
  if (v14)
  {
    uint64_t v45 = 0;
    unint64_t v46 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(53);
    uint64_t v48 = v45;
    unint64_t v49 = v46;
    v15._object = (void *)0x80000001002C86C0;
    v15._countAndFlagsBits = 0xD000000000000025;
    String.append(_:)(v15);
    uint64_t v47 = type metadata accessor for CardPresentationRecord();
    uint64_t v45 = v14;
    swift_retain();
    uint64_t v16 = sub_10002834C(&v45);
    Swift::String v18 = v17;
    sub_10000CC5C((uint64_t)&v45);
    v19._countAndFlagsBits = v16;
    v19._object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0x69646E6573202D20;
    v20._object = (void *)0xEE00776F6E20676ELL;
    String.append(_:)(v20);
    id v21 = sub_1001F568C();
    swift_bridgeObjectRetain();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v21 ulog:60 message:v22];
    swift_bridgeObjectRelease();

    sub_1001DB94C();
    swift_release();
  }
  uint64_t v23 = OBJC_IVAR____TtC17proximitycontrold14SessionHistory_cardCount;
  uint64_t v24 = *(void *)(v4 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_cardCount);
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v4 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_cardCount) = v26;
    if (qword_10035A520 == -1) {
      goto LABEL_5;
    }
  }
  swift_once();
LABEL_5:
  uint64_t v27 = *(void **)(qword_1003AC750 + 552);
  uint64_t v28 = *(void **)((char *)v27 + *(void *)((swift_isaMask & *v27) + 0x70));
  if (v28)
  {
    uint64_t v29 = v27;
    id v30 = v28;
    NSString v31 = String._bridgeToObjectiveC()();
    [v30 setBool:1 forKey:v31];
  }
  uint64_t v32 = *(void *)(v4 + v23);
  uint64_t v33 = *(void *)(v4 + 48);
  uint64_t v34 = *(void *)(v4 + 56);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v42, v41);
  char v35 = (v32 == 1) & ~*(unsigned char *)(v4
                               + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_userHasDoneHandoffCardBeforeSession);
  sub_10027BDB0(v43, (uint64_t)v7, type metadata accessor for ExperienceEvent);
  type metadata accessor for CardPresentationRecord();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v36 = sub_1001DE0B4(v32, v33, v34, (uint64_t)v10, v35, v44 | ((HIDWORD(v44) & 1) << 32), (uint64_t)v7);
  *(void *)(v4 + v13) = v36;
  swift_retain();
  swift_release();
  uint64_t v37 = swift_allocObject();
  swift_weakInit();
  uint64_t v38 = *(void *)(v36 + 16);
  *(void *)(v36 + 16) = sub_10027BEB0;
  *(void *)(v36 + 24) = v37;
  sub_10000F088(v38);
  return swift_release();
}

uint64_t sub_100278C50(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v38 = a3;
  unint64_t v39 = a2;
  uint64_t v6 = type metadata accessor for ExperienceEvent(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  NSString v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = sub_1001F568C();
  NSString v14 = String._bridgeToObjectiveC()();
  [v13 ulog:40 message:v14];

  Swift::String v15 = (uint64_t **)(v4 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_education);
  swift_beginAccess();
  uint64_t v16 = *v15;
  if (*v15)
  {
    uint64_t v40 = 0;
    unint64_t v41 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(58);
    uint64_t v43 = v40;
    unint64_t v44 = v41;
    v17._object = (void *)0x80000001002C8730;
    v17._countAndFlagsBits = 0xD00000000000002ALL;
    String.append(_:)(v17);
    uint64_t v42 = type metadata accessor for EducationPresentationRecord();
    uint64_t v40 = v16;
    swift_retain();
    uint64_t v18 = sub_100027F24(&v40);
    uint64_t v37 = v12;
    Swift::String v19 = v8;
    uint64_t v20 = v9;
    uint64_t v21 = a1;
    uint64_t v23 = v22;
    sub_10000CC5C((uint64_t)&v40);
    v24._countAndFlagsBits = v18;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 0x69646E6573202D20;
    v25._object = (void *)0xEE00776F6E20676ELL;
    String.append(_:)(v25);
    id v26 = sub_1001F568C();
    swift_bridgeObjectRetain();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v26 ulog:60 message:v27];
    swift_bridgeObjectRelease();

    a1 = v21;
    uint64_t v9 = v20;
    uint64_t v8 = v19;
    NSString v12 = v37;

    sub_1001DECE4();
    swift_release();
  }
  uint64_t v28 = *(void *)(v4 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_hintCount);
  uint64_t v30 = *(void *)(v4 + 48);
  uint64_t v29 = *(void *)(v4 + 56);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  char v31 = (*(unsigned char *)(v4 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_userHasDoneHandoffCardBeforeSession) & 1) == 0
     && *(void *)(v4 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_cardCount) == 1;
  sub_10027BDB0(v38, (uint64_t)v8, type metadata accessor for ExperienceEvent);
  type metadata accessor for EducationPresentationRecord();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v32 = sub_1001E0650(v28, v30, v29, (uint64_t)v12, v39 | ((HIDWORD(v39) & 1) << 32), v31, (uint64_t)v8);
  *Swift::String v15 = v32;
  swift_retain();
  swift_release();
  uint64_t v33 = swift_allocObject();
  swift_weakInit();
  uint64_t v34 = v32[2];
  _OWORD v32[2] = (uint64_t)sub_10027BEB8;
  v32[3] = v33;
  sub_10000F088(v34);
  return swift_release();
}

uint64_t sub_100279028(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v42 = a3;
  unint64_t v43 = a2;
  uint64_t v41 = a1;
  uint64_t v5 = type metadata accessor for ExperienceEvent(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = sub_1001F568C();
  NSString v12 = String._bridgeToObjectiveC()();
  [v11 ulog:40 message:v12];

  id v13 = (uint64_t **)(v4 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_hint);
  swift_beginAccess();
  NSString v14 = *v13;
  if (*v13)
  {
    unint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(53);
    uint64_t v47 = v44;
    unint64_t v48 = v45;
    v15._object = (void *)0x80000001002C8790;
    v15._countAndFlagsBits = 0xD000000000000025;
    String.append(_:)(v15);
    uint64_t v46 = type metadata accessor for HintPresentationRecord();
    unint64_t v44 = v14;
    swift_retain();
    uint64_t v16 = sub_100027F44(&v44);
    uint64_t v18 = v17;
    sub_10000CC5C((uint64_t)&v44);
    v19._countAndFlagsBits = v16;
    v19._object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0x69646E6573202D20;
    v20._object = (void *)0xEE00776F6E20676ELL;
    String.append(_:)(v20);
    id v21 = sub_1001F568C();
    swift_bridgeObjectRetain();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v21 ulog:60 message:v22];
    swift_bridgeObjectRelease();

    sub_1002616E0();
    swift_release();
  }
  uint64_t v23 = OBJC_IVAR____TtC17proximitycontrold14SessionHistory_hintCount;
  uint64_t v24 = *(void *)(v4 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_hintCount);
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v4 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_hintCount) = v26;
    if (qword_10035A520 == -1) {
      goto LABEL_5;
    }
  }
  swift_once();
LABEL_5:
  NSString v27 = *(void **)(qword_1003AC750 + 560);
  uint64_t v28 = *(void **)((char *)v27 + *(void *)((swift_isaMask & *v27) + 0x70));
  if (v28)
  {
    uint64_t v29 = v27;
    id v30 = v28;
    NSString v31 = String._bridgeToObjectiveC()();
    [v30 setBool:1 forKey:v31];
  }
  uint64_t v32 = *(void *)(v4 + v23);
  uint64_t v33 = *(void *)(v4 + 48);
  uint64_t v34 = *(void *)(v4 + 56);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v41, v40);
  char v35 = *(unsigned char *)(v4 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_userHasDoneHandoffHintBeforeSession);
  sub_10027BDB0(v42, (uint64_t)v7, type metadata accessor for ExperienceEvent);
  type metadata accessor for HintPresentationRecord();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v36 = sub_1002634B0(v32, v33, v34, (uint64_t)v10, v43 | ((HIDWORD(v43) & 1) << 32), (v35 & 1) == 0, (uint64_t)v7);
  *id v13 = v36;
  swift_retain();
  swift_release();
  uint64_t v37 = swift_allocObject();
  swift_weakInit();
  uint64_t v38 = v36[2];
  _OWORD v36[2] = (uint64_t)sub_10027BEDC;
  v36[3] = v37;
  sub_10000F088(v38);
  return swift_release();
}

uint64_t sub_1002794B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000A38C(&qword_1003652D0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v33 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = 0;
  unint64_t v45 = 0xE000000000000000;
  v7._countAndFlagsBits = 0x636974796C616E61;
  v7._object = (void *)0xEE00746E65764573;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0x3D666C6573203ALL;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  uint64_t v46 = v1;
  _print_unlocked<A, B>(_:_:)();
  id v9 = sub_1001F568C();
  swift_bridgeObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 ulog:40 message:v10];
  swift_bridgeObjectRelease();

  if (qword_10035A520 != -1) {
    swift_once();
  }
  id v11 = *(id *)(qword_1003AC750 + 568);
  int v12 = sub_1000FD938();

  int v36 = v12;
  if ((v12 & 1) == 0)
  {
    id v13 = *(void **)(qword_1003AC750 + 568);
    NSString v14 = *(void **)((char *)v13 + *(void *)((swift_isaMask & *v13) + 0x70));
    if (v14)
    {
      Swift::String v15 = v13;
      id v16 = v14;
      NSString v17 = String._bridgeToObjectiveC()();
      [v16 setBool:1 forKey:v17];
    }
  }
  uint64_t v35 = *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_cardCount);
  if (qword_10035A590 != -1) {
    swift_once();
  }
  sub_100141A0C();
  uint64_t v34 = sub_1001426E0(1);
  swift_release();
  sub_100141A0C();
  uint64_t v18 = sub_1001426E0(28);
  swift_release();
  sub_100141A0C();
  uint64_t v19 = sub_1001426E0(7);
  swift_release();
  uint64_t v20 = v2 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_sessionEnded;
  swift_beginAccess();
  int v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v20, 1, v4);
  uint64_t v22 = 0;
  if (!v21)
  {
    uint64_t v23 = v20;
    uint64_t v24 = v33;
    sub_10000D728(v23, v33, &qword_1003652D0);
    sub_10000A38C(&qword_1003677A0);
    Date.timeIntervalSince(_:)();
    uint64_t v22 = v25;
    uint64_t v26 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v24, v26);
  }
  uint64_t v27 = *(void *)(v2 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_hintCount);
  int v28 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_initialUIType);
  uint64_t v30 = *(void *)(v2 + 48);
  uint64_t v29 = *(void *)(v2 + 56);
  LOBYTE(v46) = 0;
  char v43 = 0;
  BOOL v31 = (v36 & 1) == 0;
  char v42 = 0;
  char v41 = 0;
  BOOL v40 = v21 != 0;
  char v39 = 0;
  BOOL v38 = v28 == 2;
  char v37 = 1;
  *(void *)a1 = v35;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v34;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v18;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = v19;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v22;
  *(unsigned char *)(a1 + 72) = v40;
  *(unsigned char *)(a1 + 73) = 2;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(unsigned char *)(a1 + 112) = v31;
  *(void *)(a1 + 120) = v27;
  *(unsigned char *)(a1 + 128) = v39;
  *(void *)(a1 + 136) = v30;
  *(void *)(a1 + 144) = v29;
  *(void *)(a1 + 152) = v28 & 1;
  *(unsigned char *)(a1 + 160) = v38;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = v37;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100279A20(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = *(void *)(result + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_card);
    swift_retain();
    uint64_t result = swift_release();
    if (v3)
    {
      uint64_t result = swift_release();
      if (v3 == a1)
      {
        swift_beginAccess();
        uint64_t result = swift_weakLoadStrong();
        if (result)
        {
          *(void *)(result + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_card) = 0;
          swift_release();
          return swift_release();
        }
      }
    }
  }
  return result;
}

uint64_t sub_100279AE8(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = (uint64_t *)(result + *a3);
    swift_beginAccess();
    uint64_t v7 = *v6;
    swift_retain();
    uint64_t result = swift_release();
    if (v7)
    {
      uint64_t result = swift_release();
      if (v7 == a1)
      {
        swift_beginAccess();
        uint64_t result = swift_weakLoadStrong();
        if (result)
        {
          Swift::String v8 = (void *)(result + *a3);
          swift_beginAccess();
          *Swift::String v8 = 0;
          swift_release();
          return swift_release();
        }
      }
    }
  }
  return result;
}

uint64_t sub_100279BE8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_sessionStarted, &qword_1003677A0);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_initialDeviceUXRegion, &qword_1003724C0);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_sessionEnded, &qword_1003653F8);
  sub_10000CC5C(v0 + OBJC_IVAR____TtC17proximitycontrold14SessionHistory_educationFlowPolicy);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100279CA8()
{
  sub_100279BE8();

  return swift_deallocClassInstance();
}

uint64_t sub_100279D00()
{
  return type metadata accessor for SessionHistory(0);
}

uint64_t type metadata accessor for SessionHistory(uint64_t a1)
{
  return sub_100014F7C(a1, (uint64_t *)&unk_100372100);
}

void sub_100279D28()
{
  sub_100279EAC();
  if (v0 <= 0x3F)
  {
    sub_1000E4A6C(319, (unint64_t *)&unk_100371F78, (uint64_t *)&unk_100367790);
    if (v1 <= 0x3F)
    {
      sub_1000E4A6C(319, &qword_1003652C8, &qword_1003652D0);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_100279EAC()
{
  if (!qword_100372110)
  {
    unint64_t v0 = type metadata accessor for StateUpdateWithDistance();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100372110);
    }
  }
}

uint64_t type metadata accessor for StateUpdateWithDistance()
{
  return sub_10000F2E4();
}

uint64_t sub_100279F1C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v5 = sub_10000A38C(&qword_1003724B8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  Swift::String v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  id v11 = (char *)&v40 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  NSString v14 = (char *)&v40 - v13;
  uint64_t result = __chkstk_darwin(v12);
  NSString v17 = (char *)&v40 - v16;
  switch(a1 >> 5)
  {
    case 1:
      char v23 = a1 & 1;
      uint64_t v24 = sub_10000A38C((uint64_t *)&unk_100367450);
      uint64_t v25 = &v17[*(int *)(v24 + 28)];
      uint64_t v26 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v25, a2, v26);
      *NSString v17 = v23;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v17, 0, 1, v24);
      sub_10001639C((uint64_t)v17, (uint64_t)v14, &qword_1003724B8);
      sub_10000D728((uint64_t)v14, (uint64_t)v11, &qword_1003724B8);
      sub_10001639C((uint64_t)v11, (uint64_t)v8, &qword_1003724B8);
      uint64_t v22 = OBJC_IVAR____TtC17proximitycontrold13SystemHistory_deviceMotionStationary;
      goto LABEL_7;
    case 2:
      return result;
    case 3:
      char v27 = a1 & 1;
      uint64_t v28 = sub_10000A38C((uint64_t *)&unk_100367450);
      uint64_t v29 = &v17[*(int *)(v28 + 28)];
      uint64_t v30 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v29, a2, v30);
      *NSString v17 = v27;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v17, 0, 1, v28);
      sub_10001639C((uint64_t)v17, (uint64_t)v14, &qword_1003724B8);
      sub_10000D728((uint64_t)v14, (uint64_t)v11, &qword_1003724B8);
      sub_10001639C((uint64_t)v11, (uint64_t)v8, &qword_1003724B8);
      uint64_t v22 = OBJC_IVAR____TtC17proximitycontrold13SystemHistory_orientationIsValid;
      goto LABEL_7;
    case 4:
      char v31 = a1 & 1;
      uint64_t v32 = sub_10000A38C((uint64_t *)&unk_100367450);
      uint64_t v33 = &v17[*(int *)(v32 + 28)];
      uint64_t v34 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(v33, a2, v34);
      *NSString v17 = v31;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v17, 0, 1, v32);
      sub_10001639C((uint64_t)v17, (uint64_t)v14, &qword_1003724B8);
      sub_10000D728((uint64_t)v14, (uint64_t)v11, &qword_1003724B8);
      sub_10001639C((uint64_t)v11, (uint64_t)v8, &qword_1003724B8);
      uint64_t v22 = OBJC_IVAR____TtC17proximitycontrold13SystemHistory_ranging;
      goto LABEL_7;
    case 5:
      char v35 = a1 & 1;
      uint64_t v36 = sub_10000A38C((uint64_t *)&unk_100367450);
      char v37 = &v17[*(int *)(v36 + 28)];
      uint64_t v38 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(v37, a2, v38);
      *NSString v17 = v35;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v17, 0, 1, v36);
      sub_10001639C((uint64_t)v17, (uint64_t)v14, &qword_1003724B8);
      sub_10000D728((uint64_t)v14, (uint64_t)v11, &qword_1003724B8);
      sub_10001639C((uint64_t)v11, (uint64_t)v8, &qword_1003724B8);
      uint64_t v22 = OBJC_IVAR____TtC17proximitycontrold13SystemHistory_screenOn;
      goto LABEL_7;
    default:
      char v18 = a1 & 1;
      uint64_t v19 = sub_10000A38C((uint64_t *)&unk_100367450);
      uint64_t v20 = &v17[*(int *)(v19 + 28)];
      uint64_t v21 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v20, a2, v21);
      *NSString v17 = v18;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v17, 0, 1, v19);
      sub_10001639C((uint64_t)v17, (uint64_t)v14, &qword_1003724B8);
      sub_10000D728((uint64_t)v14, (uint64_t)v11, &qword_1003724B8);
      sub_10001639C((uint64_t)v11, (uint64_t)v8, &qword_1003724B8);
      uint64_t v22 = OBJC_IVAR____TtC17proximitycontrold13SystemHistory_charging;
LABEL_7:
      uint64_t v39 = v2 + v22;
      swift_beginAccess();
      swift_retain();
      sub_10027BF4C((uint64_t)v8, v39);
      swift_endAccess();
      sub_10000D78C((uint64_t)v14, &qword_1003724B8);
      return swift_release();
  }
}

uint64_t sub_10027A4CC()
{
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold13SystemHistory_charging, &qword_1003724B8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold13SystemHistory_deviceMotionStationary, &qword_1003724B8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold13SystemHistory_orientationIsValid, &qword_1003724B8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold13SystemHistory_screenOn, &qword_1003724B8);
  sub_10000D78C(v0 + OBJC_IVAR____TtC17proximitycontrold13SystemHistory_ranging, &qword_1003724B8);

  return swift_deallocClassInstance();
}

uint64_t sub_10027A594()
{
  return type metadata accessor for SystemHistory(0);
}

uint64_t type metadata accessor for SystemHistory(uint64_t a1)
{
  return sub_100014F7C(a1, (uint64_t *)&unk_100372238);
}

void sub_10027A5BC()
{
  sub_1000E4A6C(319, (unint64_t *)&unk_100372248, (uint64_t *)&unk_100367450);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_10027A664()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_10027A738(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v7 + v10) & ~v10;
  uint64_t v13 = *(void *)(v9 + 64) + 3;
  unint64_t v14 = ((v13 + v12) & 0xFFFFFFFFFFFFFFFCLL) + 5;
  uint64_t v15 = v10 | *(_DWORD *)(v6 + 80) & 0xFC | 3;
  if (v15 > 7 || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v14 > 0x18)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  else
  {
    uint64_t v19 = v8;
    uint64_t v20 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    unint64_t v21 = ((unint64_t)a2 + v11) & v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v20, v21, v19);
    unint64_t v22 = (v13 + v21) & 0xFFFFFFFFFFFFFFFCLL;
    char v23 = *(unsigned char *)(v22 + 4);
    unint64_t v24 = (v13 + (((unint64_t)a1 + v11) & v20)) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)unint64_t v24 = *(_DWORD *)v22;
    *(unsigned char *)(v24 + 4) = v23;
  }
  return a1;
}

uint64_t sub_10027A8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 48) + 3;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFFCLL;
  char v17 = *(unsigned char *)(v16 + 4);
  *(_DWORD *)unint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = v17;
  return a1;
}

uint64_t sub_10027A9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 40) + 3;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFFCLL;
  char v17 = *(unsigned char *)(v16 + 4);
  *(_DWORD *)unint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = v17;
  return a1;
}

uint64_t sub_10027AAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 32) + 3;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFFCLL;
  char v17 = *(unsigned char *)(v16 + 4);
  *(_DWORD *)unint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = v17;
  return a1;
}

uint64_t sub_10027AB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 24) + 3;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFFCLL;
  char v17 = *(unsigned char *)(v16 + 4);
  *(_DWORD *)unint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = v17;
  return a1;
}

uint64_t sub_10027AC5C(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v7) {
    unsigned int v11 = v7;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(v6 + 64) + v12;
  if (v11 < a2)
  {
    unint64_t v14 = ((*(void *)(*(void *)(v8 - 8) + 64) + (v13 & ~v12) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 5;
    if (v14 < 4) {
      unsigned int v15 = ((a2 - v11 + 255) >> (8 * v14)) + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      unsigned int v16 = 4;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v15 < 0x100) {
      unsigned int v16 = 1;
    }
    if (v15 >= 2) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int v18 = a1[v14];
        if (!a1[v14]) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v18 = *(unsigned __int16 *)&a1[v14];
        if (*(_WORD *)&a1[v14]) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10027AEA8);
      case 4:
        int v18 = *(_DWORD *)&a1[v14];
        if (!v18) {
          break;
        }
LABEL_21:
        int v19 = (v18 - 1) << (8 * v14);
        if (v14 >= 4) {
          int v19 = 0;
        }
        if (v14 == 1) {
          int v20 = *a1;
        }
        else {
          int v20 = *(_DWORD *)a1;
        }
        return v11 + (v20 | v19) + 1;
      default:
        break;
    }
  }
  if (!v11) {
    return 0;
  }
  if (v7 >= v10)
  {
    char v23 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48);
    return v23(a1, v7, v5);
  }
  else
  {
    unint64_t v21 = *(uint64_t (**)(unint64_t))(v9 + 48);
    return v21((unint64_t)&a1[v13] & ~v12);
  }
}

void sub_10027AEBC(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v28 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v8 + 64) + v14;
  size_t v16 = ((*(void *)(v10 + 64) + (v15 & ~v14) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 5;
  char v17 = 8 * v16;
  if (v13 >= a3)
  {
    int v20 = 0;
    if (v13 >= a2)
    {
LABEL_17:
      switch(v20)
      {
        case 1:
          a1[v16] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v16] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_45;
        case 4:
          *(_DWORD *)&a1[v16] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v9 >= v12)
            {
              char v27 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
              v27(a1, a2, v9, v7);
            }
            else
            {
              uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
              v26((unint64_t)&a1[v15] & ~v14, a2);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (v16 <= 3) {
      unsigned int v18 = ((a3 - v13 + 255) >> v17) + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    if (v13 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v21 = ~v13 + a2;
  unsigned int v22 = v21 >> v17;
  unsigned int v23 = (~(_BYTE)v13 + a2);
  if (v16 < 4) {
    int v24 = v22 + 1;
  }
  else {
    int v24 = 1;
  }
  if (v16 >= 4) {
    unsigned int v25 = v21;
  }
  else {
    unsigned int v25 = v23;
  }
  bzero(a1, v16);
  if (v16 == 1) {
    *a1 = v25;
  }
  else {
    *(_DWORD *)a1 = v25;
  }
  switch(v20)
  {
    case 1:
      a1[v16] = v24;
      break;
    case 2:
      *(_WORD *)&a1[v16] = v24;
      break;
    case 3:
LABEL_45:
      __break(1u);
      JUMPOUT(0x10027B178);
    case 4:
      *(_DWORD *)&a1[v16] = v24;
      break;
    default:
      return;
  }
}

uint64_t sub_10027B1A0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_10027B26C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (*(unsigned char *)(v6 + 80) | *(unsigned char *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(void *)(*(void *)(v8 - 8) + 64) > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = v8;
    uint64_t v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t sub_10027B3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = v5;
  unint64_t v9 = (v4 + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v9, v8);
}

uint64_t sub_10027B47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_10027B528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_10027B5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_10027B680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_10027B72C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v7) {
    unsigned int v11 = v7;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(v6 + 64) + v12;
  if (a2 <= v11) {
    goto LABEL_24;
  }
  uint64_t v14 = (v13 & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v11)
      {
        if (v7 >= v10)
        {
          unsigned int v23 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
          return v23(a1, v7, v5);
        }
        else
        {
          unsigned int v21 = *(uint64_t (**)(unint64_t))(v9 + 48);
          return v21(((unint64_t)a1 + v13) & ~v12);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_24;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = v14;
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v11 + (v20 | v18) + 1;
}

void sub_10027B9AC(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v24 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v8 + 64) + v14;
  size_t v16 = (v15 & ~v14) + *(void *)(v10 + 64);
  if (a3 <= v13)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v13 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v18 = ~v13 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x10027BCACLL);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v9 >= v12)
        {
          unsigned int v23 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
          v23(a1, a2, v9, v7);
        }
        else
        {
          unsigned int v22 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
          v22((unint64_t)&a1[v15] & ~v14, a2);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for StateUpdate()
{
  return sub_10000F2E4();
}

unint64_t sub_10027BCEC()
{
  unint64_t result = qword_1003724B0;
  if (!qword_1003724B0)
  {
    sub_10000A3D0(&qword_1003724A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003724B0);
  }
  return result;
}

uint64_t sub_10027BD48(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10027BDB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10027BE18(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10027BE78()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10027BEB0(uint64_t a1)
{
  return sub_100279A20(a1);
}

uint64_t sub_10027BEB8(uint64_t a1)
{
  return sub_100279AE8(a1, v1, &OBJC_IVAR____TtC17proximitycontrold14SessionHistory_education);
}

uint64_t sub_10027BEDC(uint64_t a1)
{
  return sub_100279AE8(a1, v1, &OBJC_IVAR____TtC17proximitycontrold14SessionHistory_hint);
}

uint64_t sub_10027BF00(uint64_t a1)
{
  return a1;
}

uint64_t sub_10027BF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A38C(&qword_1003724B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10027BFB4()
{
  if (*v0) {
    return 0x726568746FLL;
  }
  else {
    return 0x6553776569566370;
  }
}

uint64_t sub_10027BFF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10027D9C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10027C020(uint64_t a1)
{
  unint64_t v2 = sub_10027C470();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10027C05C(uint64_t a1)
{
  unint64_t v2 = sub_10027C470();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10027C098(uint64_t a1)
{
  unint64_t v2 = sub_10027C4C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10027C0D4(uint64_t a1)
{
  unint64_t v2 = sub_10027C4C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10027C110(uint64_t a1)
{
  unint64_t v2 = sub_10027C518();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10027C14C(uint64_t a1)
{
  unint64_t v2 = sub_10027C518();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PCProximityHandoffClient.Identifier.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a3;
  uint64_t v18 = a2;
  uint64_t v4 = sub_10000A38C(&qword_1003724C8);
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A38C(&qword_1003724D0);
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A38C(&qword_1003724D8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unsigned int v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_10027C470();
  uint64_t v14 = v20;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v14)
  {
    char v22 = 1;
    sub_10027C4C4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  }
  else
  {
    char v21 = 0;
    sub_10027C518();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

unint64_t sub_10027C470()
{
  unint64_t result = qword_1003AB6D0;
  if (!qword_1003AB6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003AB6D0);
  }
  return result;
}

unint64_t sub_10027C4C4()
{
  unint64_t result = qword_1003AB6D8;
  if (!qword_1003AB6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003AB6D8);
  }
  return result;
}

unint64_t sub_10027C518()
{
  unint64_t result = qword_1003AB6E0;
  if (!qword_1003AB6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003AB6E0);
  }
  return result;
}

uint64_t PCProximityHandoffClient.Identifier.init(from:)(void *a1)
{
  return sub_10027DAD0(a1);
}

uint64_t sub_10027C584@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10027DAD0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10027C5B0(void *a1)
{
  return PCProximityHandoffClient.Identifier.encode(to:)(a1, *v1, v1[1]);
}

uint64_t PCProximityHandoffClient.clientIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t variable initialization expression of PCProximityHandoffClient.queue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_10000A34C();
  static DispatchQoS.default.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_10027E004(&qword_10035A688, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000A38C(&qword_10035A690);
  sub_10027DF64();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

id PCProximityHandoffClient.__allocating_init(identifier:)(uint64_t a1, uint64_t a2)
{
  return PCProximityHandoffClient.init(identifier:)(a1, a2);
}

id PCProximityHandoffClient.init(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  swift_defaultActor_initialize();
  sub_10000A34C();
  swift_retain();
  static DispatchQoS.default.getter();
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_10027E004(&qword_10035A688, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000A38C(&qword_10035A690);
  sub_10027DF64();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v4);
  uint64_t v10 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v3[15] = v16;
  v3[16] = v17;
  v3[17] = v10;
  type metadata accessor for SFXPCConnection();
  SFProximityHandoffMachServiceName.getter();
  id v11 = v10;
  v3[14] = SFXPCConnection.__allocating_init(machServiceName:queue:)();
  swift_release();
  uint64_t v12 = (objc_class *)type metadata accessor for PCProximityHandoffClient();
  v18.receiver = v3;
  v18.super_class = v12;
  id v13 = [super init];
  swift_retain();
  SFXPCConnection.activate()();
  swift_release();

  return v13;
}

uint64_t PCProximityHandoffClient.deinit()
{
  SFXPCConnection.invalidate()();
  swift_release();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();
  return v0;
}

uint64_t PCProximityHandoffClient.__deallocating_deinit()
{
  SFXPCConnection.invalidate()();
  swift_release();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t PCProximityHandoffClient.userAlertAction(params:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for VoidResponse();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(sub_10027CCA8, v1, 0);
}

uint64_t sub_10027CCA8()
{
  uint64_t v1 = type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction(0);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[7] = v2;
  uint64_t v3 = sub_10027E004(qword_10036D398, (void (*)(uint64_t))type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction);
  *uint64_t v2 = v0;
  v2[1] = sub_10027CDA0;
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[2];
  return SFXPCConnection.asyncInvoke<A>(_:parameters:)(v4, v1, v5, v1, v3);
}

uint64_t sub_10027CDA0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[3];
    uint64_t v4 = sub_10027CF38;
  }
  else
  {
    uint64_t v5 = v2[3];
    (*(void (**)(void, void))(v2[5] + 8))(v2[6], v2[4]);
    uint64_t v4 = sub_10027CED4;
    uint64_t v3 = v5;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, void))_swift_task_switch)(v4, v3, 0);
}

uint64_t sub_10027CED4()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10027CF38()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void PCProximityHandoffClient.__allocating_init()()
{
}

void PCProximityHandoffClient.init()()
{
}

uint64_t sub_10027D04C()
{
  return 1;
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.actionIndex.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0)
                            + 20));
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.textResponse.getter()
{
  uint64_t v1 = *(void *)(v0
                 + *(int *)(type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0)
                          + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.init(id:actionIndex:textResponse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t result = type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0);
  *(void *)(a5 + *(int *)(result + 20)) = a2;
  uint64_t v12 = (void *)(a5 + *(int *)(result + 24));
  *uint64_t v12 = a3;
  v12[1] = a4;
  return result;
}

uint64_t sub_10027D1B8()
{
  uint64_t v1 = 0x6E496E6F69746361;
  if (*v0 != 1) {
    uint64_t v1 = 0x7073655274786574;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 25705;
  }
}

uint64_t sub_10027D218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10027F0D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10027D240(uint64_t a1)
{
  unint64_t v2 = sub_10027E06C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10027D27C(uint64_t a1)
{
  unint64_t v2 = sub_10027E06C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.encode(to:)(void *a1)
{
  uint64_t v3 = sub_10000A38C(&qword_1003724E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D6E4(a1, a1[3]);
  sub_10027E06C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  sub_10027E004(&qword_100363E00, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v26 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000A38C(&qword_1003724F0);
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D6E4(a1, a1[3]);
  sub_10027E06C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000CC5C((uint64_t)a1);
  }
  char v21 = v10;
  uint64_t v12 = v23;
  uint64_t v11 = v24;
  char v29 = 0;
  sub_10027E004(&qword_100363E18, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v21, v26, v4);
  char v28 = 1;
  *(void *)&v21[*(int *)(v8 + 20)] = KeyedDecodingContainer.decode(_:forKey:)();
  char v27 = 2;
  uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v13);
  uint64_t v18 = (uint64_t)v21;
  uint64_t v17 = v22;
  uint64_t v19 = (uint64_t *)&v21[*(int *)(v8 + 24)];
  *uint64_t v19 = v14;
  v19[1] = v16;
  sub_10027E0C0(v18, v17);
  sub_10000CC5C((uint64_t)a1);
  return sub_10027E124(v18);
}

uint64_t sub_10027D804@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.init(from:)(a1, a2);
}

uint64_t sub_10027D81C(void *a1)
{
  return PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.encode(to:)(a1);
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.__allocating_init(name:)()
{
  id v1 = objc_allocWithZone(v0);
  return SFXPCInvocation.init(name:)();
}

id PCProximityHandoffServiceInvocations.UserAlertAction.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id PCProximityHandoffServiceInvocations.UserAlertAction.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super init];
}

id sub_10027D8E8(void *a1)
{
  v2.receiver = a1;
  v2.super_class = (Class)swift_getObjectType();
  return [super init];
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.__allocating_init(coder:)()
{
  id v1 = objc_allocWithZone(v0);
  return SFXPCInvocation.init(coder:)();
}

uint64_t sub_10027D960(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  return SFXPCInvocation.init(coder:)();
}

id PCProximityHandoffServiceInvocations.UserAlertAction.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_10027D9C0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6553776569566370 && a2 == 0xED00006563697672;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726568746FLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10027DAD0(void *a1)
{
  uint64_t v2 = sub_10000A38C(&qword_100372610);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v24 = v2;
  uint64_t v25 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A38C(&qword_100372618);
  uint64_t v27 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A38C(&qword_100372620);
  uint64_t v26 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t)sub_10000D6E4(a1, a1[3]);
  sub_10027C470();
  uint64_t v13 = (uint64_t)v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    goto LABEL_9;
  }
  uint64_t v14 = v27;
  uint64_t v23 = v6;
  char v28 = a1;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v19 = type metadata accessor for DecodingError();
    swift_allocError();
    char v21 = v20;
    sub_10000A38C(&qword_10035FAC0);
    *char v21 = &type metadata for PCProximityHandoffClient.Identifier;
    uint64_t v12 = (uint64_t)v11;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, enum case for DecodingError.typeMismatch(_:), v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
    a1 = v28;
LABEL_9:
    sub_10000CC5C((uint64_t)a1);
    return v12;
  }
  if (*(unsigned char *)(v15 + 32))
  {
    char v30 = 1;
    sub_10027C4C4();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v16 = v24;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v17 = v5;
    uint64_t v18 = v26;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v16);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v11, v9);
  }
  else
  {
    char v29 = 0;
    sub_10027C518();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v23);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
    uint64_t v12 = 0;
  }
  sub_10000CC5C((uint64_t)v28);
  return v12;
}

unint64_t sub_10027DF64()
{
  unint64_t result = qword_10035A698;
  if (!qword_10035A698)
  {
    sub_10000A3D0(&qword_10035A690);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10035A698);
  }
  return result;
}

uint64_t type metadata accessor for PCProximityHandoffClient()
{
  return self;
}

uint64_t type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction(uint64_t a1)
{
  return sub_100014F7C(a1, (uint64_t *)&unk_1003ABB70);
}

uint64_t sub_10027E004(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(uint64_t a1)
{
  return sub_100014F7C(a1, qword_1003ABB80);
}

unint64_t sub_10027E06C()
{
  unint64_t result = qword_1003AB6E8[0];
  if (!qword_1003AB6E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1003AB6E8);
  }
  return result;
}

uint64_t sub_10027E0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10027E124(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10027E184()
{
  unint64_t result = qword_1003724F8;
  if (!qword_1003724F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003724F8);
  }
  return result;
}

uint64_t sub_10027E1D8()
{
  return sub_10027E004(&qword_100372500, (void (*)(uint64_t))type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters);
}

uint64_t sub_10027E220()
{
  return sub_10027E004(&qword_100372508, (void (*)(uint64_t))type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters);
}

uint64_t sub_10027E268()
{
  return sub_10027E004(&qword_100372510, (void (*)(uint64_t))&type metadata accessor for VoidResponse);
}

uint64_t sub_10027E2B0()
{
  return sub_10027E004(&qword_100372518, (void (*)(uint64_t))&type metadata accessor for VoidResponse);
}

ValueMetadata *type metadata accessor for PCProximityHandoffClientError()
{
  return &type metadata for PCProximityHandoffClientError;
}

uint64_t getEnumTagSinglePayload for PCProximityHandoffClient.Identifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PCProximityHandoffClient.Identifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PCProximityHandoffClient.Identifier()
{
  return &type metadata for PCProximityHandoffClient.Identifier;
}

ValueMetadata *type metadata accessor for PCProximityHandoffServiceInvocations()
{
  return &type metadata for PCProximityHandoffServiceInvocations;
}

uint64_t sub_10027E3D0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10027E410()
{
  return type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction(0);
}

uint64_t *initializeBufferWithCopyOfBuffer for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027E7D4);
}

uint64_t sub_10027E7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027E8B8);
}

uint64_t sub_10027E8B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  }
  return result;
}

uint64_t sub_10027E978()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10027EAE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.CodingKeys()
{
  return &type metadata for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for PCProximityHandoffClient.Identifier.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10027EBECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PCProximityHandoffClient.Identifier.CodingKeys()
{
  return &type metadata for PCProximityHandoffClient.Identifier.CodingKeys;
}

ValueMetadata *type metadata accessor for PCProximityHandoffClient.Identifier.PcViewServiceCodingKeys()
{
  return &type metadata for PCProximityHandoffClient.Identifier.PcViewServiceCodingKeys;
}

unsigned char *_s21ProximityControlSwift29PCProximityHandoffClientErrorOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10027ECD0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PCProximityHandoffClient.Identifier.OtherCodingKeys()
{
  return &type metadata for PCProximityHandoffClient.Identifier.OtherCodingKeys;
}

unint64_t sub_10027ED0C()
{
  unint64_t result = qword_1003ABC90[0];
  if (!qword_1003ABC90[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1003ABC90);
  }
  return result;
}

unint64_t sub_10027ED64()
{
  unint64_t result = qword_1003ABFA0[0];
  if (!qword_1003ABFA0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1003ABFA0);
  }
  return result;
}

unint64_t sub_10027EDBC()
{
  unint64_t result = qword_1003AC1B0[0];
  if (!qword_1003AC1B0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1003AC1B0);
  }
  return result;
}

unint64_t sub_10027EE14()
{
  unint64_t result = qword_1003AC2C0;
  if (!qword_1003AC2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003AC2C0);
  }
  return result;
}

unint64_t sub_10027EE6C()
{
  unint64_t result = qword_1003AC2C8[0];
  if (!qword_1003AC2C8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1003AC2C8);
  }
  return result;
}

unint64_t sub_10027EEC4()
{
  unint64_t result = qword_1003AC350;
  if (!qword_1003AC350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003AC350);
  }
  return result;
}

unint64_t sub_10027EF1C()
{
  unint64_t result = qword_1003AC358[0];
  if (!qword_1003AC358[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1003AC358);
  }
  return result;
}

unint64_t sub_10027EF74()
{
  unint64_t result = qword_1003AC3E0;
  if (!qword_1003AC3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003AC3E0);
  }
  return result;
}

unint64_t sub_10027EFCC()
{
  unint64_t result = qword_1003AC3E8[0];
  if (!qword_1003AC3E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1003AC3E8);
  }
  return result;
}

unint64_t sub_10027F024()
{
  unint64_t result = qword_1003AC470;
  if (!qword_1003AC470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003AC470);
  }
  return result;
}

unint64_t sub_10027F07C()
{
  unint64_t result = qword_1003AC478;
  if (!qword_1003AC478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003AC478);
  }
  return result;
}

uint64_t sub_10027F0D0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E496E6F69746361 && a2 == 0xEB00000000786564 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7073655274786574 && a2 == 0xEC00000065736E6FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t Measurement.init(value:unit:)()
{
  return Measurement.init(value:unit:)();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t URLQueryItem.init(name:value:)()
{
  return URLQueryItem.init(name:value:)();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return type metadata accessor for URLQueryItem();
}

uint64_t static CustomNSError.errorDomain.getter()
{
  return static CustomNSError.errorDomain.getter();
}

uint64_t CustomNSError.errorUserInfo.getter()
{
  return CustomNSError.errorUserInfo.getter();
}

uint64_t static ParseStrategy<>.iso8601.getter()
{
  return static ParseStrategy<>.iso8601.getter();
}

uint64_t URLComponents.queryItems.setter()
{
  return URLComponents.queryItems.setter();
}

uint64_t URLComponents.url.getter()
{
  return URLComponents.url.getter();
}

uint64_t URLComponents.init(string:)()
{
  return URLComponents.init(string:)();
}

uint64_t type metadata accessor for URLComponents()
{
  return type metadata accessor for URLComponents();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t dispatch thunk of LocalizedError.failureReason.getter()
{
  return dispatch thunk of LocalizedError.failureReason.getter();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t LocalizedError.failureReason.getter()
{
  return LocalizedError.failureReason.getter();
}

uint64_t LocalizedError.errorDescription.getter()
{
  return LocalizedError.errorDescription.getter();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)()
{
  return _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL.== infix(_:_:)()
{
  return static URL.== infix(_:_:)();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.description.getter()
{
  return Data.description.getter();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.copyBytes(to:count:)()
{
  return Data.copyBytes(to:count:)();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle()
{
  return type metadata accessor for Date.ISO8601FormatStyle();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.> infix(_:_:)()
{
  return static Date.> infix(_:_:)();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t static Date.+ infix(_:_:)()
{
  return static Date.+ infix(_:_:)();
}

uint64_t static Date.- infix(_:_:)()
{
  return static Date.- infix(_:_:)();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return Date.timeIntervalSinceNow.getter();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.advanced(by:)()
{
  return Date.advanced(by:)();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t Date.init<A>(_:strategy:)()
{
  return Date.init<A>(_:strategy:)();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.uuid.getter()
{
  return UUID.uuid.getter();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t NSLog(_:_:)()
{
  return NSLog(_:_:)();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t ObservationRegistrar.access<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t type metadata accessor for ObservationRegistrar()
{
  return type metadata accessor for ObservationRegistrar();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

Swift::Double __swiftcall UpTicksToSecondsF(_:)(Swift::UInt64 a1)
{
  UpTicksToSecondsF(_:)(a1);
  return result;
}

Swift::UInt64 __swiftcall UpTicks()()
{
  return UpTicks()();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t os_signpost(_:dso:log:name:signpostID:_:_:)()
{
  return os_signpost(_:dso:log:name:signpostID:_:_:)();
}

uint64_t OSSignpostID.init(log:)()
{
  return OSSignpostID.init(log:)();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t OSSignpostID.init(_:)()
{
  return OSSignpostID.init(_:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t Publishers.CombineLatest.init(_:_:)()
{
  return Publishers.CombineLatest.init(_:_:)();
}

uint64_t Publishers.CombineLatest3.init(_:_:_:)()
{
  return Publishers.CombineLatest3.init(_:_:_:)();
}

uint64_t Publishers.CombineLatest4.init(_:_:_:_:)()
{
  return Publishers.CombineLatest4.init(_:_:_:_:)();
}

uint64_t Publishers.CompactMap.map<A>(_:)()
{
  return Publishers.CompactMap.map<A>(_:)();
}

uint64_t type metadata accessor for Publishers.SetFailureType()
{
  return type metadata accessor for Publishers.SetFailureType();
}

uint64_t type metadata accessor for Publishers.SwitchToLatest()
{
  return type metadata accessor for Publishers.SwitchToLatest();
}

uint64_t type metadata accessor for Publishers.Map()
{
  return type metadata accessor for Publishers.Map();
}

uint64_t Publishers.Zip3.init(_:_:_:)()
{
  return Publishers.Zip3.init(_:_:_:)();
}

uint64_t type metadata accessor for Publishers.Delay()
{
  return type metadata accessor for Publishers.Delay();
}

uint64_t Publishers.Merge.merge<A>(with:)()
{
  return Publishers.Merge.merge<A>(with:)();
}

uint64_t Publishers.Merge.init(_:_:)()
{
  return Publishers.Merge.init(_:_:)();
}

uint64_t Publishers.Merge3.merge<A>(with:)()
{
  return Publishers.Merge3.merge<A>(with:)();
}

uint64_t Publishers.Merge3.init(_:_:_:)()
{
  return Publishers.Merge3.init(_:_:_:)();
}

uint64_t Publishers.Sequence.collect()()
{
  return Publishers.Sequence.collect()();
}

uint64_t Publishers.MergeMany.init<A>(_:)()
{
  return Publishers.MergeMany.init<A>(_:)();
}

uint64_t Publishers.MergeMany.init(_:)()
{
  return Publishers.MergeMany.init(_:)();
}

uint64_t dispatch thunk of Cancellable.cancel()()
{
  return dispatch thunk of Cancellable.cancel()();
}

uint64_t type metadata accessor for AnyPublisher()
{
  return type metadata accessor for AnyPublisher();
}

uint64_t AnyCancellable.store(in:)()
{
  return AnyCancellable.store(in:)();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
}

uint64_t type metadata accessor for AnyCancellable()
{
  return type metadata accessor for AnyCancellable();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return ObservableObject<>.objectWillChange.getter();
}

uint64_t PassthroughSubject.send(completion:)()
{
  return PassthroughSubject.send(completion:)();
}

uint64_t PassthroughSubject.send(_:)()
{
  return PassthroughSubject.send(_:)();
}

uint64_t PassthroughSubject.__allocating_init()()
{
  return PassthroughSubject.__allocating_init()();
}

uint64_t PassthroughSubject.init()()
{
  return PassthroughSubject.init()();
}

uint64_t type metadata accessor for PassthroughSubject()
{
  return type metadata accessor for PassthroughSubject();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t CurrentValueSubject.value.getter()
{
  return CurrentValueSubject.value.getter();
}

uint64_t type metadata accessor for CurrentValueSubject()
{
  return type metadata accessor for CurrentValueSubject();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return CurrentValueSubject.init(_:)();
}

uint64_t ConnectablePublisher.autoconnect()()
{
  return ConnectablePublisher.autoconnect()();
}

uint64_t Just.setFailureType<A>(to:)()
{
  return Just.setFailureType<A>(to:)();
}

uint64_t type metadata accessor for Just()
{
  return type metadata accessor for Just();
}

uint64_t Just.init(_:)()
{
  return Just.init(_:)();
}

uint64_t Future.init(_:)()
{
  return Future.init(_:)();
}

uint64_t Published.init(initialValue:)()
{
  return Published.init(initialValue:)();
}

uint64_t Published.projectedValue.getter()
{
  return Published.projectedValue.getter();
}

uint64_t static Published.subscript.getter()
{
  return static Published.subscript.getter();
}

uint64_t static Published.subscript.setter()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for Published()
{
  return type metadata accessor for Published();
}

uint64_t dispatch thunk of Publisher.receive<A>(subscriber:)()
{
  return dispatch thunk of Publisher.receive<A>(subscriber:)();
}

uint64_t Publisher<>.switchToLatest()()
{
  return Publisher<>.switchToLatest()();
}

{
  return Publisher<>.switchToLatest()();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t Publisher.compactMap<A>(_:)()
{
  return Publisher.compactMap<A>(_:)();
}

uint64_t Publisher.removeDuplicates(by:)()
{
  return Publisher.removeDuplicates(by:)();
}

uint64_t Publisher.map<A>(_:)()
{
  return Publisher.map<A>(_:)();
}

{
  return Publisher.map<A>(_:)();
}

uint64_t Publisher.scan<A>(_:_:)()
{
  return Publisher.scan<A>(_:_:)();
}

uint64_t Publisher.sink(receiveCompletion:receiveValue:)()
{
  return Publisher.sink(receiveCompletion:receiveValue:)();
}

uint64_t Publisher.delay<A>(for:tolerance:scheduler:options:)()
{
  return Publisher.delay<A>(for:tolerance:scheduler:options:)();
}

uint64_t Publisher.merge<A>(with:)()
{
  return Publisher.merge<A>(with:)();
}

uint64_t Publisher.share()()
{
  return Publisher.share()();
}

uint64_t Publisher.filter(_:)()
{
  return Publisher.filter(_:)();
}

uint64_t Publisher.tryMap<A>(_:)()
{
  return Publisher.tryMap<A>(_:)();
}

uint64_t Publisher.prepend(_:)()
{
  return Publisher.prepend(_:)();
}

uint64_t Publisher.prepend<A>(_:)()
{
  return Publisher.prepend<A>(_:)();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return Publisher.receive<A>(on:options:)();
}

uint64_t Publisher.timeout<A>(_:scheduler:options:customError:)()
{
  return Publisher.timeout<A>(_:scheduler:options:customError:)();
}

uint64_t Publisher.debounce<A>(for:scheduler:options:)()
{
  return Publisher.debounce<A>(for:scheduler:options:)();
}

uint64_t Publisher.throttle<A>(for:scheduler:latest:)()
{
  return Publisher.throttle<A>(for:scheduler:latest:)();
}

uint64_t Publisher.dropFirst(_:)()
{
  return Publisher.dropFirst(_:)();
}

uint64_t Publisher.subscribe<A>(_:)()
{
  return Publisher.subscribe<A>(_:)();
}

uint64_t Publisher<>.removeDuplicates()()
{
  return Publisher<>.removeDuplicates()();
}

uint64_t Publisher<>.setFailureType<A>(to:)()
{
  return Publisher<>.setFailureType<A>(to:)();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return Publisher<>.sink(receiveValue:)();
}

uint64_t type metadata accessor for SFNearbySharingInteractionViewState()
{
  return type metadata accessor for SFNearbySharingInteractionViewState();
}

uint64_t VoidResponse.init()()
{
  return VoidResponse.init()();
}

uint64_t type metadata accessor for VoidResponse()
{
  return type metadata accessor for VoidResponse();
}

uint64_t SFXPCListener.contextProvider.setter()
{
  return SFXPCListener.contextProvider.setter();
}

uint64_t SFXPCListener.__allocating_init(machServiceName:queue:)()
{
  return SFXPCListener.__allocating_init(machServiceName:queue:)();
}

uint64_t SFXPCListener.didAddConnectionHandler.setter()
{
  return SFXPCListener.didAddConnectionHandler.setter();
}

uint64_t SFXPCListener.didRemoveConnectionHandler.setter()
{
  return SFXPCListener.didRemoveConnectionHandler.setter();
}

Swift::Void __swiftcall SFXPCListener.resume()()
{
}

uint64_t type metadata accessor for VoidParameters()
{
  return type metadata accessor for VoidParameters();
}

Swift::Void __swiftcall SFXPCConnection.invalidate()()
{
}

uint64_t SFXPCConnection.__allocating_init(machServiceName:queue:)()
{
  return SFXPCConnection.__allocating_init(machServiceName:queue:)();
}

Swift::Void __swiftcall SFXPCConnection.activate()()
{
}

uint64_t type metadata accessor for SFXPCConnection()
{
  return type metadata accessor for SFXPCConnection();
}

uint64_t SFXPCInvocation.init(name:)()
{
  return SFXPCInvocation.init(name:)();
}

uint64_t SFXPCInvocation.init(coder:)()
{
  return SFXPCInvocation.init(coder:)();
}

uint64_t type metadata accessor for SFClientIdentity()
{
  return type metadata accessor for SFClientIdentity();
}

uint64_t SFProximityHandoff.Interaction.id.getter()
{
  return SFProximityHandoff.Interaction.id.getter();
}

uint64_t type metadata accessor for SFProximityHandoff.Interaction()
{
  return type metadata accessor for SFProximityHandoff.Interaction();
}

uint64_t SFProximityHandoff.Content.interactionID.getter()
{
  return SFProximityHandoff.Content.interactionID.getter();
}

uint64_t type metadata accessor for SFProximityHandoff.Content.Action()
{
  return type metadata accessor for SFProximityHandoff.Content.Action();
}

uint64_t type metadata accessor for SFProximityHandoff.Content()
{
  return type metadata accessor for SFProximityHandoff.Content();
}

uint64_t type metadata accessor for SFShockwaveEffectState()
{
  return type metadata accessor for SFShockwaveEffectState();
}

uint64_t SFProximityHandoffUIClient.registerForProximityHandoffInteractionUpdates(completion:)()
{
  return SFProximityHandoffUIClient.registerForProximityHandoffInteractionUpdates(completion:)();
}

uint64_t SFProximityHandoffUIClient.invalidationHandler.setter()
{
  return SFProximityHandoffUIClient.invalidationHandler.setter();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SFProximityHandoffUIClient.activate()()
{
}

uint64_t type metadata accessor for SFProximityHandoffUIClient()
{
  return type metadata accessor for SFProximityHandoffUIClient();
}

uint64_t SFProximityHandoffInvocations.NearbySharingInteractionViewUpdate.Parameters.interactionID.getter()
{
  return SFProximityHandoffInvocations.NearbySharingInteractionViewUpdate.Parameters.interactionID.getter();
}

uint64_t SFProximityHandoffInvocations.NearbySharingInteractionViewUpdate.Parameters.viewState.getter()
{
  return SFProximityHandoffInvocations.NearbySharingInteractionViewUpdate.Parameters.viewState.getter();
}

uint64_t type metadata accessor for SFProximityHandoffInvocations.NearbySharingInteractionViewUpdate.Parameters()
{
  return type metadata accessor for SFProximityHandoffInvocations.NearbySharingInteractionViewUpdate.Parameters();
}

uint64_t SFProximityHandoffInvocations.PerformHandoffContentAction.Parameters.action.getter()
{
  return SFProximityHandoffInvocations.PerformHandoffContentAction.Parameters.action.getter();
}

uint64_t SFProximityHandoffInvocations.PerformHandoffContentAction.Parameters.content.getter()
{
  return SFProximityHandoffInvocations.PerformHandoffContentAction.Parameters.content.getter();
}

uint64_t type metadata accessor for SFProximityHandoffInvocations.PerformHandoffContentAction.Parameters()
{
  return type metadata accessor for SFProximityHandoffInvocations.PerformHandoffContentAction.Parameters();
}

uint64_t SFProximityHandoffMachServiceName.getter()
{
  return SFProximityHandoffMachServiceName.getter();
}

uint64_t SFAirDrop.NearbySharingInteraction.PresenceContext.init()()
{
  return SFAirDrop.NearbySharingInteraction.PresenceContext.init()();
}

uint64_t type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType()
{
  return type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType();
}

uint64_t SFAirDrop.NearbySharingInteraction.ConnectionContext.init(type:transactionIdentifier:endpointIdentifier:contactIdentifier:deviceName:deviceModel:accountID:isSameAccount:)()
{
  return SFAirDrop.NearbySharingInteraction.ConnectionContext.init(type:transactionIdentifier:endpointIdentifier:contactIdentifier:deviceName:deviceModel:accountID:isSameAccount:)();
}

uint64_t type metadata accessor for SFAirDrop.NearbySharingInteraction.State()
{
  return type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
}

uint64_t SFAirDrop.NearbySharingInteraction.init(state:id:)()
{
  return SFAirDrop.NearbySharingInteraction.init(state:id:)();
}

uint64_t type metadata accessor for SFAirDrop.NearbySharingInteraction()
{
  return type metadata accessor for SFAirDrop.NearbySharingInteraction();
}

uint64_t StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)()
{
  return StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
}

uint64_t Transaction.init(animation:)()
{
  return Transaction.init(animation:)();
}

uint64_t AnyTransition.combined(with:)()
{
  return AnyTransition.combined(with:)();
}

uint64_t static AnyTransition.identity.getter()
{
  return static AnyTransition.identity.getter();
}

uint64_t withAnimation<A>(_:_:)()
{
  return withAnimation<A>(_:_:)();
}

uint64_t withTransaction<A>(_:_:)()
{
  return withTransaction<A>(_:_:)();
}

uint64_t _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t static VerticalAlignment.center.getter()
{
  return static VerticalAlignment.center.getter();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t type metadata accessor for RoundedCornerStyle()
{
  return type metadata accessor for RoundedCornerStyle();
}

uint64_t UIHostingController.init(coder:rootView:)()
{
  return UIHostingController.init(coder:rootView:)();
}

uint64_t UIHostingController.init(rootView:)()
{
  return UIHostingController.init(rootView:)();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t static View._makeView(view:inputs:)()
{
  return static View._makeView(view:inputs:)();
}

uint64_t static View._makeViewList(view:inputs:)()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t static View._viewListCount(inputs:)()
{
  return static View._viewListCount(inputs:)();
}

uint64_t static Color.black.getter()
{
  return static Color.black.getter();
}

uint64_t Button.init(action:label:)()
{
  return Button.init(action:label:)();
}

uint64_t type metadata accessor for Capsule()
{
  return type metadata accessor for Capsule();
}

uint64_t static Alignment.center.getter()
{
  return static Alignment.center.getter();
}

uint64_t static Animation.timingCurve(_:_:_:_:duration:)()
{
  return static Animation.timingCurve(_:_:_:_:duration:)();
}

uint64_t static DispatchTimeInterval.== infix(_:_:)()
{
  return static DispatchTimeInterval.== infix(_:_:)();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.default.getter()
{
  return static DispatchQoS.default.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return DispatchWorkItem.init(flags:block:)();
}

uint64_t dispatch thunk of DispatchWorkItem.cancel()()
{
  return dispatch thunk of DispatchWorkItem.cancel()();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return type metadata accessor for DispatchWorkItem();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

{
  return + infix(_:_:)();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

uint64_t Dictionary.init()()
{
  return Dictionary.init()();
}

uint64_t Array.init()()
{
  return Array.init()();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.count.getter()
{
  return Dictionary.count.getter();
}

uint64_t type metadata accessor for Dictionary.Values()
{
  return type metadata accessor for Dictionary.Values();
}

uint64_t type metadata accessor for Dictionary()
{
  return type metadata accessor for Dictionary();
}

uint64_t Dictionary.subscript.getter()
{
  return Dictionary.subscript.getter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t dispatch thunk of Hashable.hashValue.getter()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t type metadata accessor for ClosedRange()
{
  return type metadata accessor for ClosedRange();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(data:encoding:)()
{
  return String.init(data:encoding:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.ascii.getter()
{
  return static String.Encoding.ascii.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t static String._fromUTF8Repairing(_:)()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(after:)()
{
  return String.index(after:)();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

uint64_t String.append<A>(contentsOf:)()
{
  return String.append<A>(contentsOf:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return String.UTF8View._foreignDistance(from:to:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return String.hasSuffix(_:)(a1._countAndFlagsBits, a1._object);
}

Swift::String __swiftcall String.init(repeating:count:)(Swift::String repeating, Swift::Int count)
{
  uint64_t v2 = String.init(repeating:count:)(repeating._countAndFlagsBits, repeating._object, count);
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

{
  return String.subscript.getter();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t Sequence.publisher.getter()
{
  return Sequence.publisher.getter();
}

uint64_t Sequence.allSatisfy(_:)()
{
  return Sequence.allSatisfy(_:)();
}

uint64_t Sequence.reduce<A>(into:_:)()
{
  return Sequence.reduce<A>(into:_:)();
}

uint64_t Sequence.flatMap<A>(_:)()
{
  return Sequence.flatMap<A>(_:)();
}

{
  return Sequence.flatMap<A>(_:)();
}

uint64_t Sequence.forEach(_:)()
{
  return Sequence.forEach(_:)();
}

uint64_t Sequence<>.contains(_:)()
{
  return Sequence<>.contains(_:)();
}

uint64_t Sequence<>.joined(separator:)()
{
  return Sequence<>.joined(separator:)();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t static Array._adoptStorage(_:count:)()
{
  return static Array._adoptStorage(_:count:)();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array.+ infix(_:_:)()
{
  return static Array.+ infix(_:_:)();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t static Array.+= infix(_:_:)()
{
  return static Array.+= infix(_:_:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Array.count.getter()
{
  return Array.count.getter();
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

uint64_t Array.init<A>(_:)()
{
  return Array.init<A>(_:)();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t static AsyncStream.makeStream(of:bufferingPolicy:)()
{
  return static AsyncStream.makeStream(of:bufferingPolicy:)();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return AsyncStream.Continuation.yield(_:)();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return AsyncStream.makeAsyncIterator()();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.checkCancellation()()
{
  return static Task<>.checkCancellation()();
}

uint64_t AsyncSequence<>.xpc.getter()
{
  return AsyncSequence<>.xpc.getter();
}

uint64_t static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)()
{
  return static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
}

uint64_t AsyncThrowingStream.Continuation.onTermination.setter()
{
  return AsyncThrowingStream.Continuation.onTermination.setter();
}

uint64_t AsyncThrowingStream.Continuation.yield(_:)()
{
  return AsyncThrowingStream.Continuation.yield(_:)();
}

uint64_t AsyncThrowingStream.Continuation.finish(throwing:)()
{
  return AsyncThrowingStream.Continuation.finish(throwing:)();
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation()
{
  return type metadata accessor for AsyncThrowingStream.Continuation();
}

uint64_t AsyncThrowingStream.makeAsyncIterator()()
{
  return AsyncThrowingStream.makeAsyncIterator()();
}

uint64_t AsyncThrowingStream.init<>(_:bufferingPolicy:_:)()
{
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
}

uint64_t Double.description.getter()
{
  return Double.description.getter();
}

uint64_t Double.significandWidth.getter()
{
  return Double.significandWidth.getter();
}

uint64_t Double.write<A>(to:)()
{
  return Double.write<A>(to:)();
}

uint64_t Double.exponent.getter()
{
  return Double.exponent.getter();
}

uint64_t Float.description.getter()
{
  return Float.description.getter();
}

uint64_t Float.write<A>(to:)()
{
  return Float.write<A>(to:)();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Index._asCocoa.modify()
{
  return Set.Index._asCocoa.modify();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t Collection.subscript.getter()
{
  return Collection.subscript.getter();
}

uint64_t Collection<>.trimmingPrefix<A>(_:)()
{
  return Collection<>.trimmingPrefix<A>(_:)();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t Collection.first.getter()
{
  return Collection.first.getter();
}

uint64_t Collection.isEmpty.getter()
{
  return Collection.isEmpty.getter();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)()
{
  return RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
}

uint64_t CULogHandle.ulog(_:_:)()
{
  return CULogHandle.ulog(_:_:)();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t NINearbyObject.distance.getter()
{
  return NINearbyObject.distance.getter();
}

uint64_t NINearbyObject.direction.getter()
{
  return NINearbyObject.direction.getter();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return type metadata accessor for OS_dispatch_queue.SchedulerOptions();
}

uint64_t OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)()
{
  return OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)();
}

uint64_t OS_dispatch_queue.SchedulerTimeType.Stride.init(integerLiteral:)()
{
  return OS_dispatch_queue.SchedulerTimeType.Stride.init(integerLiteral:)();
}

uint64_t static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)()
{
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
}

{
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride()
{
  return type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

Swift::Void __swiftcall OS_dispatch_source.suspend()()
{
}

uint64_t static os_signpost_type_t.end.getter()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return static os_signpost_type_t.event.getter();
}

uint64_t type metadata accessor for NSNotificationCenter.Publisher()
{
  return type metadata accessor for NSNotificationCenter.Publisher();
}

uint64_t NSNotificationCenter.publisher(for:object:)()
{
  return NSNotificationCenter.publisher(for:object:)();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t NSMeasurementFormatter.string<A>(from:)()
{
  return NSMeasurementFormatter.string<A>(from:)();
}

uint64_t type metadata accessor for OS_dispatch_queue_serial.Attributes()
{
  return type metadata accessor for OS_dispatch_queue_serial.Attributes();
}

uint64_t OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)()
{
  return OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
}

uint64_t OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()()
{
  return OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()();
}

uint64_t type metadata accessor for NSTimer.TimerPublisher()
{
  return type metadata accessor for NSTimer.TimerPublisher();
}

uint64_t static NSTimer.publish(every:tolerance:on:in:options:)()
{
  return static NSTimer.publish(every:tolerance:on:in:options:)();
}

NSNumber __swiftcall NSNumber.init(floatLiteral:)(Swift::Double floatLiteral)
{
  return (NSNumber)NSNumber.init(floatLiteral:)(floatLiteral);
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hash(into:)()
{
  return NSObject.hash(into:)();
}

uint64_t type metadata accessor for NSRunLoop.SchedulerOptions()
{
  return type metadata accessor for NSRunLoop.SchedulerOptions();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t Optional.unwrap(_:file:line:)()
{
  return Optional.unwrap(_:file:line:)();
}

uint64_t Optional.debugDescription.getter()
{
  return Optional.debugDescription.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t Substring.index(_:offsetBy:limitedBy:)()
{
  return Substring.index(_:offsetBy:limitedBy:)();
}

uint64_t Substring.index(_:offsetBy:)()
{
  return Substring.index(_:offsetBy:)();
}

uint64_t Substring.distance(from:to:)()
{
  return Substring.distance(from:to:)();
}

uint64_t Substring.init(_:)()
{
  return Substring.init(_:)();
}

uint64_t Substring.subscript.getter()
{
  return Substring.subscript.getter();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.appendingFormat<A>(_:_:)()
{
  return StringProtocol.appendingFormat<A>(_:_:)();
}

uint64_t StringProtocol.compare<A>(_:options:range:locale:)()
{
  return StringProtocol.compare<A>(_:options:range:locale:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
}

uint64_t BinaryInteger.description.getter()
{
  return BinaryInteger.description.getter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return __CocoaSet.startIndex.getter();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return __CocoaSet.Index.handleBitPattern.getter();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return __CocoaSet.Index.age.getter();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return __CocoaSet.Index.element.getter();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.element(at:)()
{
  return __CocoaSet.element(at:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return __CocoaSet.formIndex(after:isUnique:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return _StringGuts._slowWithCString<A>(_:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t dispatch thunk of static CaseIterable.allCases.getter()
{
  return dispatch thunk of static CaseIterable.allCases.getter();
}

uint64_t dispatch thunk of Identifiable.id.getter()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t Identifiable<>.id.getter()
{
  return Identifiable<>.id.getter();
}

uint64_t StaticString.description.getter()
{
  return StaticString.description.getter();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _ArrayProtocol.filter(_:)()
{
  return _ArrayProtocol.filter(_:)();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t ContiguousArray.append(_:)()
{
  return ContiguousArray.append(_:)();
}

uint64_t ContiguousArray.init()()
{
  return ContiguousArray.init()();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return type metadata accessor for ContiguousArray();
}

uint64_t static ContinuousClock.Instant.now.getter()
{
  return static ContinuousClock.Instant.now.getter();
}

uint64_t ContinuousClock.Instant.advanced(by:)()
{
  return ContinuousClock.Instant.advanced(by:)();
}

uint64_t ContinuousClock.Instant.duration(to:)()
{
  return ContinuousClock.Instant.duration(to:)();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return type metadata accessor for ContinuousClock.Instant();
}

uint64_t ContinuousClock.init()()
{
  return ContinuousClock.init()();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return type metadata accessor for ContinuousClock();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return dispatch thunk of InstantProtocol.advanced(by:)();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return dispatch thunk of _AnySequenceBox._makeIterator()();
}

uint64_t dispatch thunk of _AnySequenceBox._forEach(_:)()
{
  return dispatch thunk of _AnySequenceBox._forEach(_:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
}

uint64_t _NativeDictionary._insert(at:key:value:)()
{
  return _NativeDictionary._insert(at:key:value:)();
}

uint64_t type metadata accessor for _NativeDictionary()
{
  return type metadata accessor for _NativeDictionary();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return _CocoaArrayWrapper.subscript.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return dispatch thunk of _AnyIteratorBoxBase.next()();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t type metadata accessor for _ContiguousArrayStorage()
{
  return type metadata accessor for _ContiguousArrayStorage();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return DefaultStringInterpolation.appendInterpolation<A>(_:)();
}

{
  return DefaultStringInterpolation.appendInterpolation<A>(_:)();
}

{
  return DefaultStringInterpolation.appendInterpolation<A>(_:)();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return _diagnoseUnexpectedEnumCase<A>(type:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)()
{
  return dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decodeNil()()
{
  return dispatch thunk of SingleValueDecodingContainer.decodeNil()();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)()
{
  return dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encodeNil()()
{
  return dispatch thunk of SingleValueEncodingContainer.encodeNil()();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return dispatch thunk of Clock.now.getter();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t Mirror.init(reflecting:)()
{
  return Mirror.init(reflecting:)();
}

uint64_t Mirror.children.getter()
{
  return Mirror.children.getter();
}

uint64_t type metadata accessor for Mirror()
{
  return type metadata accessor for Mirror();
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  return (NSNumber)UInt32._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return dispatch thunk of Decoder.singleValueContainer()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return dispatch thunk of Encoder.singleValueContainer()();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t Duration.seconds.getter()
{
  return Duration.seconds.getter();
}

uint64_t static Duration.seconds(_:)()
{
  return static Duration.seconds(_:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

uint64_t BSInterfaceOrientationDescription()
{
  return _BSInterfaceOrientationDescription();
}

CFTimeInterval CACurrentMediaTime(void)
{
  return _CACurrentMediaTime();
}

CATransform3D *__cdecl CATransform3DScale(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return _CATransform3DScale(retstr, t, sx, sy, sz);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformMakeScale(retstr, sx, sy);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

uint64_t GestaltCopyAnswer()
{
  return _GestaltCopyAnswer();
}

uint64_t GestaltGetBoolean()
{
  return _GestaltGetBoolean();
}

uint64_t GestaltGetDeviceClass()
{
  return _GestaltGetDeviceClass();
}

uint64_t IsAppleInternalBuild()
{
  return _IsAppleInternalBuild();
}

uint64_t LogPrintF()
{
  return _LogPrintF();
}

uint64_t MRMediaRemotePlaybackStateIsAdvancing()
{
  return _MRMediaRemotePlaybackStateIsAdvancing();
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

uint64_t SBUIIsSystemApertureEnabled()
{
  return _SBUIIsSystemApertureEnabled();
}

int UIApplicationMain(int argc, char **argv, NSString *principalClassName, NSString *delegateClassName)
{
  return _UIApplicationMain(argc, argv, principalClassName, delegateClassName);
}

uint64_t WiFiCopyCurrentNetworkInfoEx()
{
  return _WiFiCopyCurrentNetworkInfoEx();
}

uint64_t WiFiCopyNetworkInfo()
{
  return _WiFiCopyNetworkInfo();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return __CFXPCCreateCFObjectFromXPCObject();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return __CFXPCCreateXPCObjectFromCFObject();
}

uint64_t _LogCategory_Initialize()
{
  return __LogCategory_Initialize();
}

__double2 __sincos_stret(double a1)
{
  __double2 v3 = ___sincos_stret(a1);
  double cosval = v3.__cosval;
  double sinval = v3.__sinval;
  result.__double cosval = cosval;
  result.__double sinval = sinval;
  return result;
}

{
}

{
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return __os_activity_create(dso, description, activity, flags);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return __swift_stdlib_strtod_clocale();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return __swift_stdlib_strtof_clocale();
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return _calloc(__count, __size);
}

long double cosh(long double __x)
{
  return _cosh(__x);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

long double exp(long double __x)
{
  return _exp(__x);
}

void free(void *a1)
{
}

uint64_t mach_continuous_time(void)
{
  return _mach_continuous_time();
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_state_add_handler()
{
  return _os_state_add_handler();
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

long double sinh(long double __x)
{
  return _sinh(__x);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_conformsToProtocol2()
{
  return _swift_conformsToProtocol2();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return _swift_dynamicCastObjCProtocolConditional();
}

uint64_t swift_dynamicCastTypeToObjCProtocolConditional()
{
  return _swift_dynamicCastTypeToObjCProtocolConditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return _swift_getFunctionTypeMetadata1();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getMetatypeMetadata()
{
  return _swift_getMetatypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTupleTypeLayout3()
{
  return _swift_getTupleTypeLayout3();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return _swift_getTupleTypeMetadata3();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isClassType()
{
  return _swift_isClassType();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_readAtKeyPath()
{
  return _swift_readAtKeyPath();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setAtReferenceWritableKeyPath()
{
  return _swift_setAtReferenceWritableKeyPath();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectUnownedDestroy()
{
  return _swift_unknownObjectUnownedDestroy();
}

uint64_t swift_unknownObjectUnownedLoadStrong()
{
  return _swift_unknownObjectUnownedLoadStrong();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return _swift_unknownObjectWeakCopyAssign();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return _swift_unknownObjectWeakCopyInit();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return _swift_unknownObjectWeakTakeAssign();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return _swift_unknownObjectWeakTakeInit();
}

uint64_t swift_unownedRelease()
{
  return _swift_unownedRelease();
}

uint64_t swift_unownedRetain()
{
  return _swift_unownedRetain();
}

uint64_t swift_unownedRetainStrong()
{
  return _swift_unownedRetainStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakAssign()
{
  return _swift_weakAssign();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t xpc_connection_set_non_launching()
{
  return _xpc_connection_set_non_launching();
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

uint64_t xpc_event_publisher_create()
{
  return _xpc_event_publisher_create();
}

uint64_t xpc_event_publisher_fire()
{
  return _xpc_event_publisher_fire();
}

uint64_t xpc_event_publisher_set_error_handler()
{
  return _xpc_event_publisher_set_error_handler();
}

uint64_t xpc_event_publisher_set_handler()
{
  return _xpc_event_publisher_set_handler();
}

uint64_t xpc_event_publisher_set_subscriber_keepalive()
{
  return _xpc_event_publisher_set_subscriber_keepalive();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

uint64_t xpc_strerror()
{
  return _xpc_strerror();
}

id objc_msgSend__effectiveParameters(void *a1, const char *a2, ...)
{
  return _[a1 _effectiveParameters];
}

id objc_msgSend__projectedTargetForVelocity_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_projectedTargetForVelocity:");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return [a1 hasPrefix:];
}

id objc_msgSend_initWithValue_(void *a1, const char *a2, ...)
{
  return [a1 initWithValue:];
}

id objc_msgSend_resetImmediatelyToValue_(void *a1, const char *a2, ...)
{
  return [a1 resetImmediatelyToValue:];
}

id objc_msgSend_setPreferredLevel_(void *a1, const char *a2, ...)
{
  return [a1 setPreferredLevel:];
}

id objc_msgSend_setRetargetImpulse_(void *a1, const char *a2, ...)
{
  return [a1 setRetargetImpulse:];
}

id objc_msgSend_setTarget_(void *a1, const char *a2, ...)
{
  return [a1 setTarget:];
}

id objc_msgSend_setTracking_(void *a1, const char *a2, ...)
{
  return [a1 setTracking:];
}

id objc_msgSend_setTrackingParameters_(void *a1, const char *a2, ...)
{
  return [a1 setTrackingParameters:];
}

id objc_msgSend_settings(void *a1, const char *a2, ...)
{
  return _[a1 settings];
}

id objc_msgSend_step_(void *a1, const char *a2, ...)
{
  return [a1 step:];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 stringWithFormat:];
}

id objc_msgSend_target(void *a1, const char *a2, ...)
{
  return _[a1 target];
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}