id static PHFetchOptions.npto_defaultAssetFetchOptions(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  void *v14;
  Class v15;
  id v16;
  Class isa;
  unsigned int v18;
  uint64_t v19;
  Class v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  Class v24;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v26 = a1;
  v1 = type metadata accessor for UUID();
  v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = [objc_allocWithZone((Class)PHFetchOptions) init];
  sub_100006250();
  v28 = 0;
  v29 = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  v6._countAndFlagsBits = 0x7954616964656D28;
  v6._object = (void *)0xED0000203D206570;
  String.append(_:)(v6);
  v27 = 1;
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0xD000000000000017;
  v8._object = (void *)0x8000000100080B50;
  String.append(_:)(v8);
  v27 = 1;
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x8000000100080B70;
  v10._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v10);
  v27 = 3;
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 10537;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  v13 = NSPredicate.init(format:_:)();
  swift_bridgeObjectRelease();
  v14 = self;
  v15 = v13;
  v16 = [v14 npto_photosGIFSupportCapability];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v18 = [v26 supportsCapability:isa];

  if (v18)
  {
    sub_100006290((uint64_t *)&unk_1000A0E40);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_100079C20;
    *(void *)(v19 + 32) = v15;
    *(void *)(v19 + 40) = sub_1000062D4();
    v28 = v19;
    specialized Array._endMutation()();
    v20 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v21 = (Class)[self orPredicateWithSubpredicates:v20];

    v15 = v20;
  }
  else
  {
    v21 = v15;
  }

  [v5 setPredicate:v21];
  sub_100006290(&qword_1000A0E00);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_100079C30;
  *(void *)(v22 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v22 + 40) = v23;
  v24 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v5 addFetchPropertySets:v24];

  return v5;
}

unint64_t sub_100006250()
{
  unint64_t result = qword_1000A0E50;
  if (!qword_1000A0E50)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A0E50);
  }
  return result;
}

uint64_t sub_100006290(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000062D4()
{
  sub_100006250();
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000100080B90;
  v1._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  uint64_t v4 = NSPredicate.init(format:_:)();
  swift_bridgeObjectRelease();
  return v4;
}

char *sub_100006414(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = objc_allocWithZone(v4);
  return sub_100006470(a1, a2, a3, a4);
}

char *sub_100006470(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&v4[OBJC_IVAR____TtC14nptocompaniond22DevicePropertyObserver_device] = a1;
  *(void *)&v4[OBJC_IVAR____TtC14nptocompaniond22DevicePropertyObserver_properties] = a2;
  v7 = &v4[OBJC_IVAR____TtC14nptocompaniond22DevicePropertyObserver_updateHandler];
  *(void *)v7 = a3;
  *((void *)v7 + 1) = a4;
  v15.receiver = v4;
  v15.super_class = (Class)type metadata accessor for DevicePropertyObserver();
  id v8 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  id v9 = (char *)[super init];
  v10 = *(void **)&v9[OBJC_IVAR____TtC14nptocompaniond22DevicePropertyObserver_device];
  v11 = v9;
  id v12 = v10;
  sub_1000065B8(a2);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v12 addPropertyObserver:v11 forPropertyChanges:isa, v15.receiver, v15.super_class];

  swift_release();
  return v11;
}

uint64_t type metadata accessor for DevicePropertyObserver()
{
  return self;
}

void *sub_1000065B8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  Swift::String v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    id v9 = &_swiftEmptyArrayStorage;
    sub_100006B44(0, v1, 0);
    Swift::String v2 = &_swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100006B44(0, v2[2] + 1, 1);
        Swift::String v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_100006B44((char *)(v5 > 1), v6 + 1, 1);
        Swift::String v2 = v9;
      }
      v4 += 16;
      v2[2] = v6 + 1;
      sub_100006B64(&v8, &v2[4 * v6 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

id sub_1000066E0()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC14nptocompaniond22DevicePropertyObserver_properties];
  id v2 = *(id *)&v0[OBJC_IVAR____TtC14nptocompaniond22DevicePropertyObserver_device];
  Swift::String v3 = v0;
  sub_1000065B8(v1);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 removePropertyObserver:v3 forPropertyChanges:isa];

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for DevicePropertyObserver();
  return [super dealloc];
}

void sub_100006850(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = v3;
    v7 = a1;
    long long v8 = *(void **)(v4 + OBJC_IVAR____TtC14nptocompaniond22DevicePropertyObserver_device);
    sub_100006918();
    id v9 = v8;
    id v10 = v7;
    LOBYTE(v7) = static NSObject.== infix(_:_:)();

    if (v7)
    {
      if (a3)
      {
        if (sub_100006958(a2, a3, *(void **)(v4 + OBJC_IVAR____TtC14nptocompaniond22DevicePropertyObserver_properties)))(*(void (**)(void))(v4 + OBJC_IVAR____TtC14nptocompaniond22DevicePropertyObserver_updateHandler))(); {
      }
        }
      else
      {
        __break(1u);
      }
    }
  }
}

unint64_t sub_100006918()
{
  unint64_t result = qword_1000A0848;
  if (!qword_1000A0848)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A0848);
  }
  return result;
}

uint64_t sub_100006958(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  id v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100006AE4(uint64_t a1)
{
  uint64_t v2 = sub_100006290((uint64_t *)&unk_1000A0BC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_100006B44(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100006B74(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

_OWORD *sub_100006B64(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

char *sub_100006B74(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006290((uint64_t *)&unk_1000A08E0);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    id v10 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_100006C80()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100006DC0(v0, qword_1000A4F00);
  sub_100006D88(v0, (uint64_t)qword_1000A4F00);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100006D24()
{
  if (qword_1000A24C0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_100006D88(v0, (uint64_t)qword_1000A4F00);
}

uint64_t sub_100006D88(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *sub_100006DC0(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100006E24()
{
  return swift_unknownObjectWeakLoadStrong();
}

void sub_100006E74(void *a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_delegate;
  swift_beginAccess();
  *(void *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign();
}

void (*sub_100006EDC(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return sub_100006F64;
}

void sub_100006F64(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  *(void *)((char *)(*a1)[6] + (void)(*a1)[5] + 8) = (*a1)[4];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }

  free(v3);
}

char *sub_100006FE8(void *a1, uint64_t a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return sub_100007034(a1, a2, a3);
}

char *sub_100007034(void *a1, uint64_t a2, void *a3)
{
  v36 = a1;
  id v37 = a3;
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  __chkstk_darwin(v5);
  v38 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  *(void *)&v3[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v3[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_updateTimer] = 0;
  uint64_t v9 = &v3[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_appLastOpenDatePreferenceObserver];
  *(_OWORD *)uint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  uint64_t v10 = OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_powerInfo;
  id v11 = objc_allocWithZone((Class)NPTOPowerSourceInfo);
  uint64_t v12 = v3;
  *(void *)&v3[v10] = [v11 init];
  uint64_t v13 = OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_networkMonitor;
  sub_100006290(&qword_1000A0968);
  uint64_t v14 = type metadata accessor for NWInterface.InterfaceType();
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_100079C30;
  (*(void (**)(unint64_t, void, uint64_t))(v15 + 104))(v17 + v16, enum case for NWInterface.InterfaceType.cellular(_:), v14);
  type metadata accessor for NWPathMonitor();
  swift_allocObject();
  *(void *)&v12[v13] = NWPathMonitor.init(prohibitedInterfaceTypes:)();
  v18 = v36;
  id v19 = v37;
  *(void *)&v12[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_preferenceAccessor] = v36;
  v20 = (uint64_t *)&v12[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier];
  uint64_t *v20 = a2;
  v20[1] = (uint64_t)v19;
  sub_10000BE18(0, (unint64_t *)&qword_1000A09A0);
  aBlock = (void **)0xD000000000000019;
  unint64_t v42 = 0x8000000100080C70;
  v21._countAndFlagsBits = a2;
  v21._object = v19;
  String.append(_:)(v21);
  id v37 = v18;
  static DispatchQoS.unspecified.getter();
  aBlock = (void **)&_swiftEmptyArrayStorage;
  sub_10000BE54((unint64_t *)&qword_1000A15F0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100006290((uint64_t *)&unk_1000A09B0);
  sub_10000BE9C(&qword_1000A1600, (uint64_t *)&unk_1000A09B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v39 + 104))(v38, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v40);
  *(void *)&v12[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_updateQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  updated = (objc_class *)type metadata accessor for SyncContentUpdateScheduler();
  v47.receiver = v12;
  v47.super_class = updated;
  v23 = (char *)[super init];
  v24 = *(void **)&v23[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_powerInfo];
  v25 = v23;
  [v24 setDelegate:v25];
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  swift_retain();
  sub_100007AB4((uint64_t)sub_100007AAC);
  NWPathMonitor.pathUpdateHandler.setter();
  swift_release();
  swift_release_n();
  v26 = *(void **)&v25[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_updateQueue];
  swift_retain();
  id v27 = v26;
  NWPathMonitor.start(queue:)();
  swift_release();

  v28 = (void *)NPTOPreferencesAppLastOpenDateKey;
  uint64_t v29 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v45 = sub_100007D5C;
  uint64_t v46 = v29;
  aBlock = _NSConcreteStackBlock;
  unint64_t v42 = 1107296256;
  v43 = sub_100007D64;
  v44 = &unk_100091990;
  v30 = _Block_copy(&aBlock);
  id v31 = v28;
  swift_release();
  id v32 = v37;
  id v33 = [v37 changeObserverForKey:v31 queue:0 block:v30];
  _Block_release(v30);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();

  uint64_t v34 = (uint64_t)&v25[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_appLastOpenDatePreferenceObserver];
  swift_beginAccess();
  sub_100007D80((uint64_t)&aBlock, v34);
  swift_endAccess();
  return v25;
}

uint64_t sub_100007650(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for SyncContentUpdateScheduler()
{
  return self;
}

uint64_t sub_1000076BC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000076F4()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for NWPath.Status();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v23 - v9;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v12 = (void *)Strong;
    NWPath.status.getter();
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for NWPath.Status.satisfied(_:), v4);
    char v13 = static NWPath.Status.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
    if (v13)
    {
      uint64_t v15 = sub_100006D24();
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v15, v0);
      unint64_t v16 = v12;
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        id v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        uint64_t v27 = v24;
        *(_DWORD *)id v19 = 136315138;
        v23 = v19 + 4;
        uint64_t v25 = v1;
        uint64_t v21 = *(void *)((char *)v16 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier);
        unint64_t v20 = *(void *)((char *)v16 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier + 8);
        swift_bridgeObjectRetain();
        uint64_t v26 = sub_10000B6D8(v21, v20, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s network condition is now satisfied. Rescheduling update.", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v3, v0);
      }
      else
      {

        uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      }
      (*(void (**)(uint64_t))((swift_isaMask & *v16) + 0xE0))(v22);
    }
  }
}

void sub_100007AAC()
{
}

uint64_t sub_100007AB4(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

void sub_100007AC4()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    uint64_t v6 = sub_100006D24();
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v6, v0);
    uint64_t v7 = v5;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v17 = v0;
      id v11 = (uint8_t *)v10;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v19 = v16;
      *(_DWORD *)id v11 = 136315138;
      uint64_t v15 = v11 + 4;
      uint64_t v13 = *(void *)((char *)v7 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier);
      unint64_t v12 = *(void *)((char *)v7 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier + 8);
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_10000B6D8(v13, v12, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s scheduling updates because NanoPhotos last open date is updated.", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v14 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v17);
    }
    else
    {

      uint64_t v14 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    }
    (*(void (**)(uint64_t))((swift_isaMask & *v7) + 0xE0))(v14);
  }
}

void sub_100007D5C()
{
}

uint64_t sub_100007D68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100007D78()
{
  return swift_release();
}

uint64_t sub_100007D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006290((uint64_t *)&unk_1000A0BC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100007DE8()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = *(void *)&v0[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_updateQueue];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = sub_1000080CC;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007D64;
  aBlock[3] = &unk_1000919E0;
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = v0;
  static DispatchQoS.unspecified.getter();
  v13[1] = &_swiftEmptyArrayStorage;
  sub_10000BE54(&qword_1000A09D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100006290(&qword_1000A09D8);
  sub_10000BE9C(&qword_1000A09E0, &qword_1000A09D8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t sub_100008094()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000080CC()
{
}

uint64_t sub_1000080F0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_100008134@<X0>(uint64_t a1@<X8>)
{
  return sub_1000083BC(0x646574616470552DLL, (void *)0xEC00000065746144, a1);
}

uint64_t sub_100008154(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_100006290(&qword_1000A0AD0) - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin();
  uint64_t v5 = *(void **)&v1[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_preferenceAccessor];
  sub_10000BF94(a1, (uint64_t)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  sub_10000C054((uint64_t)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, &qword_1000A0AD0);
  *(void *)(v7 + ((v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8)) = v1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10000C1F8;
  *(void *)(v8 + 24) = v7;
  aBlock[4] = sub_10000C378;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100008378;
  aBlock[3] = &unk_100091AF8;
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = v1;
  swift_retain();
  swift_release();
  [v5 performBatchUpdates:v9 synchronizeToRemoteDevice:0];
  _Block_release(v9);
  sub_10000BD30(a1, &qword_1000A0AD0);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100008378(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1000083A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000083BC(0xD000000000000015, (void *)0x8000000100080D80, a1);
}

uint64_t sub_1000083BC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void **)(v3 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_preferenceAccessor);
  uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier + 8);
  *(void *)&v16[0] = *(void *)(v3 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier);
  *((void *)&v16[0] + 1) = v8;
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v7 objectForKey:v10, v16[0]];

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  sub_10000C054((uint64_t)v16, (uint64_t)v17, (uint64_t *)&unk_1000A0BC0);
  if (v18)
  {
    uint64_t v12 = type metadata accessor for Date();
    int v13 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a3, v13 ^ 1u, 1, v12);
  }
  else
  {
    sub_10000BD30((uint64_t)v17, (uint64_t *)&unk_1000A0BC0);
    uint64_t v15 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a3, 1, 1, v15);
  }
}

uint64_t sub_100008558(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_100006290(&qword_1000A0AD0) - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin();
  uint64_t v5 = *(void **)&v1[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_preferenceAccessor];
  sub_10000BF94(a1, (uint64_t)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  sub_10000C054((uint64_t)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, &qword_1000A0AD0);
  *(void *)(v7 + ((v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8)) = v1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10000C000;
  *(void *)(v8 + 24) = v7;
  aBlock[4] = sub_10000C02C;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100008378;
  aBlock[3] = &unk_100091A80;
  Swift::String v9 = _Block_copy(aBlock);
  NSString v10 = v1;
  swift_retain();
  swift_release();
  [v5 performBatchUpdates:v9 synchronizeToRemoteDevice:0];
  _Block_release(v9);
  sub_10000BD30(a1, &qword_1000A0AD0);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a1) {
    __break(1u);
  }
  return result;
}

void sub_10000877C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_100006290(&qword_1000A0AD0);
  __chkstk_darwin();
  Swift::String v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  int v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000BF94(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10000BD30((uint64_t)v9, &qword_1000A0AD0);
    uint64_t v14 = *(void **)(a2 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_preferenceAccessor);
    uint64_t v15 = *(void *)(a2 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier + 8);
    uint64_t v23 = *(void *)(a2 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier);
    uint64_t v24 = v15;
    swift_bridgeObjectRetain();
    v16._countAndFlagsBits = a3;
    v16._object = a4;
    String.append(_:)(v16);
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 removeObjectForKey:v17];
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    uint64_t v18 = *(void **)(a2 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_preferenceAccessor);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v20 = *(void *)(a2 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier + 8);
    uint64_t v23 = *(void *)(a2 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier);
    uint64_t v24 = v20;
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = a3;
    v21._object = a4;
    String.append(_:)(v21);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 setObject:isa forKey:v22];

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t sub_1000089EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v62 = *(void *)(v2 - 8);
  uint64_t v63 = v2;
  uint64_t v3 = ((uint64_t (*)(void))__chkstk_darwin)();
  v61 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v58 = (char *)&v56 - v5;
  uint64_t v6 = sub_100006290(&qword_1000A0AD0);
  __chkstk_darwin(v6 - 8);
  v57 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for NWPath.Status();
  uint64_t v8 = *(void *)(v60 - 8);
  uint64_t v9 = __chkstk_darwin(v60);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  int v13 = (char *)&v56 - v12;
  uint64_t v59 = type metadata accessor for NWPath();
  uint64_t v14 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  Swift::String v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  Swift::String v21 = *(void **)((char *)v0 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_updateQueue);
  void *v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if (v21)
  {
    if ([*(id *)((char *)v1 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_powerInfo) hasExternalPowerSourceConnected])
    {
      NWPathMonitor.currentPath.getter();
      NWPath.status.getter();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v59);
      uint64_t v24 = v60;
      (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, enum case for NWPath.Status.satisfied(_:), v60);
      char v25 = static NWPath.Status.== infix(_:_:)();
      uint64_t v26 = *(void (**)(char *, uint64_t))(v8 + 8);
      v26(v11, v24);
      uint64_t v27 = ((uint64_t (*)(char *, uint64_t))v26)(v13, v24);
      if (v25)
      {
        uint64_t v28 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x90))(v27);
        if (v28)
        {
          v30 = (void *)v28;
          uint64_t v31 = v29;
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t))(v31 + 24))(ObjectType, v31);
        }
        uint64_t v33 = (uint64_t)v57;
        static Date.now.getter();
        uint64_t v34 = type metadata accessor for Date();
        v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56);
        v35(v33, 0, 1, v34);
        sub_100008154(v33);
        v35(v33, 1, 1, v34);
        return sub_100008558(v33);
      }
      else
      {
        uint64_t v46 = sub_100006D24();
        uint64_t v48 = v62;
        uint64_t v47 = v63;
        v49 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v58, v46, v63);
        v50 = v1;
        v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v51, v52))
        {
          v53 = (uint8_t *)swift_slowAlloc();
          uint64_t v65 = swift_slowAlloc();
          *(_DWORD *)v53 = 136315138;
          uint64_t v54 = *(void *)((char *)v50 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier);
          unint64_t v55 = *(void *)((char *)v50 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier + 8);
          swift_bridgeObjectRetain();
          uint64_t v64 = sub_10000B6D8(v54, v55, &v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "%s skipped updating because netork condition is NOT satisfied", v53, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v58, v63);
        }
        else
        {

          return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v49, v47);
        }
      }
    }
    else
    {
      uint64_t v36 = sub_100006D24();
      id v37 = v61;
      uint64_t v38 = v62;
      uint64_t v39 = v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, v36, v63);
      uint64_t v40 = v1;
      v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc();
        uint64_t v65 = swift_slowAlloc();
        *(_DWORD *)v43 = 136315138;
        uint64_t v44 = *(void *)((char *)v40 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier);
        unint64_t v45 = *(void *)((char *)v40 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier + 8);
        swift_bridgeObjectRetain();
        uint64_t v64 = sub_10000B6D8(v44, v45, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s skipped updating because device is NOT charging", v43, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v61, v63);
      }
      else
      {

        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v37, v39);
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100009194()
{
  uint64_t v1 = v0;
  uint64_t v240 = type metadata accessor for DispatchTimeInterval();
  uint64_t v239 = *(void *)(v240 - 8);
  uint64_t v2 = __chkstk_darwin(v240);
  v238 = (char *)&v214 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v237 = (char *)&v214 - v4;
  uint64_t v243 = type metadata accessor for DispatchWallTime();
  uint64_t v236 = *(void *)(v243 - 8);
  uint64_t v5 = __chkstk_darwin(v243);
  v234 = (char *)&v214 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v235 = (char *)&v214 - v7;
  uint64_t v233 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v232 = *(void *)(v233 - 8);
  __chkstk_darwin(v233);
  v230 = (char *)&v214 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v231 = type metadata accessor for DispatchQoS();
  uint64_t v229 = *(void *)(v231 - 8);
  __chkstk_darwin(v231);
  v228 = (char *)&v214 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v227 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v226 = *(void *)(v227 - 8);
  __chkstk_darwin(v227);
  v225 = (char *)&v214 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v254 = type metadata accessor for Calendar.Component();
  uint64_t v253 = *(void *)(v254 - 8);
  __chkstk_darwin(v254);
  v251 = (char *)&v214 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v252 = type metadata accessor for Calendar();
  uint64_t v250 = *(void *)(v252 - 8);
  __chkstk_darwin(v252);
  v249 = (char *)&v214 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v263 = *(void *)(v13 - 8);
  uint64_t v264 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  Swift::String v16 = (char *)&v214 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  v244 = (char *)&v214 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v247 = (char *)&v214 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v255 = (char *)&v214 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v248 = (char *)&v214 - v24;
  __chkstk_darwin(v23);
  v259 = (char *)&v214 - v25;
  uint64_t v26 = sub_100006290(&qword_1000A0AD0);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  v223 = (char *)&v214 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v242 = (uint64_t)&v214 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v214 - v32;
  __chkstk_darwin(v31);
  v35 = (char *)&v214 - v34;
  uint64_t v36 = type metadata accessor for Date();
  uint64_t v265 = *(void *)(v36 - 8);
  uint64_t v37 = __chkstk_darwin(v36);
  v241 = (char *)&v214 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v37);
  v245 = (char *)&v214 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v246 = (char *)&v214 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v256 = (char *)&v214 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v257 = (char *)&v214 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  v258 = (char *)&v214 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v51 = (char *)&v214 - v50;
  uint64_t v52 = __chkstk_darwin(v49);
  v261 = (char *)&v214 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  v266 = (char *)&v214 - v55;
  __chkstk_darwin(v54);
  v262 = (char *)&v214 - v56;
  uint64_t v57 = type metadata accessor for DispatchPredicate();
  uint64_t v58 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v60 = (uint64_t *)((char *)&v214 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0));
  v61 = *(void **)&v1[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_updateQueue];
  *uint64_t v60 = v61;
  (*(void (**)(void *, void, uint64_t))(v58 + 104))(v60, enum case for DispatchPredicate.onQueue(_:), v57);
  id v224 = v61;
  LOBYTE(v61) = _dispatchPreconditionTest(_:)();
  uint64_t v62 = (*(uint64_t (**)(void *, uint64_t))(v58 + 8))(v60, v57);
  if ((v61 & 1) == 0)
  {
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v63 = v1;
  uint64_t v64 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)v1) + 0x90))(v62);
  if (!v64) {
    return;
  }
  uint64_t v66 = v65;
  id v260 = v64;
  sub_100008134((uint64_t)v35);
  uint64_t v67 = v265;
  v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v265 + 48);
  uint64_t v267 = v36;
  if (v68(v35, 1, v36) == 1)
  {
    sub_10000BD30((uint64_t)v35, &qword_1000A0AD0);
    uint64_t v69 = sub_100006D24();
    uint64_t v70 = v263;
    uint64_t v71 = v264;
    (*(void (**)(char *, uint64_t, uint64_t))(v263 + 16))(v16, v69, v264);
    v72 = v63;
    v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)v75 = 136315138;
      uint64_t v76 = *(void *)&v72[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier];
      unint64_t v77 = *(void *)&v72[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v269 = sub_10000B6D8(v76, v77, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "%s never updated before. Updating immediately.", v75, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v263 + 8))(v16, v264);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v70 + 8))(v16, v71);
    }
    id v85 = v260;
    sub_1000089EC();

    return;
  }
  uint64_t v220 = v66;
  v78 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
  v79 = v262;
  v78(v262, v35, v267);
  static Date.now.getter();
  v218 = v63;
  id v80 = [[*(id *)&v63[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_preferenceAccessor] npto_appLastOpenDate];
  v217 = (void (*)(char *, uint64_t, uint64_t))v78;
  if (v80)
  {
    v81 = v80;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v82 = v267;
    v78(v33, v51, v267);
    v83 = *(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56);
    v83(v33, 0, 1, v82);
    if (v68(v33, 1, v82) != 1)
    {
      v84 = v261;
      v78(v261, v33, v267);
      goto LABEL_13;
    }
  }
  else
  {
    v83 = *(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56);
    v83(v33, 1, 1, v267);
  }
  v84 = v261;
  static Date.distantPast.getter();
  sub_10000BD30((uint64_t)v33, &qword_1000A0AD0);
LABEL_13:
  uint64_t v86 = v220;
  sub_1000112AC(1.0);
  Date.addingTimeInterval(_:)();
  v87 = v84;
  char v88 = static Date.< infix(_:_:)();
  uint64_t v89 = v265 + 8;
  v222 = *(void (**)(char *, uint64_t))(v265 + 8);
  v222(v51, v267);
  uint64_t v221 = v89;
  v219 = (void (**)(char *, char *, uint64_t))(v89 + 8);
  if (v88)
  {
    uint64_t v90 = sub_100006D24();
    uint64_t v92 = v263;
    uint64_t v91 = v264;
    v93 = v259;
    (*(void (**)(char *, uint64_t, uint64_t))(v263 + 16))(v259, v90, v264);
    v94 = v258;
    (*v219)(v258, v87, v267);
    v95 = v218;
    v96 = Logger.logObject.getter();
    os_log_type_t v97 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v96, v97))
    {
      uint64_t v98 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v98 = 136315394;
      uint64_t v99 = *(void *)&v95[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier];
      unint64_t v100 = *(void *)&v95[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v269 = sub_10000B6D8(v99, v100, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v98 + 12) = 2080;
      sub_10000BE54(&qword_1000A0AD8, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v101 = v267;
      uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v269 = sub_10000B6D8(v102, v103, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v104 = v222;
      v222(v94, v101);
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "%s skipped updating because NanoPhotos hasn't been launched for over a week (%s).", (uint8_t *)v98, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v92 + 8))(v259, v264);
      v104(v261, v101);
      v104(v266, v101);
      v105 = v262;
      goto LABEL_22;
    }

    uint64_t v116 = v267;
    v117 = v222;
    v222(v94, v267);

    (*(void (**)(char *, uint64_t))(v92 + 8))(v93, v91);
    v118 = v261;
    uint64_t v119 = v116;
LABEL_38:
    v117(v118, v119);
    v117(v266, v116);
    v117(v262, v116);
    return;
  }
  v216 = v83;
  uint64_t ObjectType = swift_getObjectType();
  v107 = *(uint64_t (**)(uint64_t, uint64_t))(v86 + 8);
  v259 = (char *)ObjectType;
  char v108 = v107(ObjectType, v86);
  v109 = *v219;
  v110 = v257;
  uint64_t v111 = v267;
  (*v219)(v257, v79, v267);
  v112 = v256;
  v258 = (char *)v109;
  v109(v256, v266, v111);
  if (v108)
  {
    uint64_t v113 = v267;
    v114 = v222;
    v222(v112, v267);
    v114(v110, v113);
    v115 = v217;
  }
  else
  {
    v120 = v249;
    static Calendar.current.getter();
    v215 = v68;
    v121 = v110;
    uint64_t v122 = v253;
    v123 = v112;
    v124 = v251;
    uint64_t v125 = v254;
    (*(void (**)(char *, void, uint64_t))(v253 + 104))(v251, enum case for Calendar.Component.day(_:), v254);
    uint64_t v126 = Calendar.compare(_:to:toGranularity:)();
    uint64_t v127 = v267;
    (*(void (**)(char *, uint64_t))(v122 + 8))(v124, v125);
    (*(void (**)(char *, uint64_t))(v250 + 8))(v120, v252);
    v128 = v222;
    v222(v123, v127);
    v129 = v121;
    v68 = v215;
    v128(v129, v127);
    v115 = v217;
    if (v126 != -1)
    {
      uint64_t v130 = sub_100006D24();
      uint64_t v132 = v263;
      uint64_t v131 = v264;
      v133 = v248;
      (*(void (**)(char *, uint64_t, uint64_t))(v263 + 16))(v248, v130, v264);
      v134 = v246;
      v135 = v262;
      ((void (*)(char *, char *, uint64_t))v258)(v246, v262, v267);
      v136 = v218;
      v137 = Logger.logObject.getter();
      os_log_type_t v138 = static os_log_type_t.default.getter();
      int v139 = v138;
      if (!os_log_type_enabled(v137, v138))
      {

        uint64_t v171 = v267;
        v172 = v222;
        v222(v134, v267);

        (*(void (**)(char *, uint64_t))(v132 + 8))(v133, v131);
        v172(v261, v171);
        v172(v266, v171);
        v172(v135, v171);
        return;
      }
      uint64_t v140 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v140 = 136315394;
      LODWORD(v265) = v139;
      uint64_t v141 = v132;
      uint64_t v142 = *(void *)&v136[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier];
      unint64_t v143 = *(void *)&v136[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v269 = sub_10000B6D8(v142, v143, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v140 + 12) = 2080;
      sub_10000BE54(&qword_1000A0AD8, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v101 = v267;
      uint64_t v144 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v269 = sub_10000B6D8(v144, v145, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v104 = v222;
      v222(v134, v101);
      _os_log_impl((void *)&_mh_execute_header, v137, (os_log_type_t)v265, "%s skipped updating because it has already been updated within one day at %s.", (uint8_t *)v140, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v141 + 8))(v248, v264);
      v104(v261, v101);
      v104(v266, v101);
      v105 = v135;
LABEL_22:
      v104(v105, v101);
      return;
    }
  }
  if ((*(uint64_t (**)(char *))(v220 + 16))(v259))
  {
    uint64_t v146 = OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_updateTimer;
    id v147 = v218;
    uint64_t v148 = v264;
    if (*(void *)&v218[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_updateTimer])
    {
      uint64_t v149 = sub_100006D24();
      uint64_t v150 = v263;
      v151 = v247;
      (*(void (**)(char *, uint64_t, uint64_t))(v263 + 16))(v247, v149, v148);
      v152 = (char *)v147;
      v153 = Logger.logObject.getter();
      os_log_type_t v154 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v153, v154))
      {
        v155 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)v155 = 136315138;
        uint64_t v156 = *(void *)&v152[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier];
        unint64_t v157 = *(void *)&v152[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier + 8];
        swift_bridgeObjectRetain();
        uint64_t v269 = sub_10000B6D8(v156, v157, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v153, v154, "%s skipped updating because there is already a scheduled timer.", v155, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v150 + 8))(v247, v264);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v150 + 8))(v151, v148);
      }
      v118 = v261;
      uint64_t v116 = v267;
      uint64_t v119 = v267;
      v117 = v222;
      goto LABEL_38;
    }
    uint64_t v173 = v242;
    sub_1000083A0(v242);
    if (v68((char *)v173, 1, v267) != 1)
    {
      uint64_t v183 = v173;
      v175 = v245;
      v115(v245, v183, v267);
      Date.timeIntervalSince(_:)();
      uint64_t v176 = v263;
      id v182 = v218;
      v177 = v241;
      v180 = v258;
      goto LABEL_41;
    }
    sub_10000BD30(v173, &qword_1000A0AD0);
    double v174 = sub_100011298(1.0);
    v175 = v245;
    if (v174 >= 1.0)
    {
      uint64_t v176 = v263;
      v177 = v241;
      if ((~COERCE__INT64(v174 + -1.0) & 0x7FF0000000000000) != 0)
      {
        sub_10000BD8C(0x20000000000001uLL);
        Date.addingTimeInterval(_:)();
        v178 = v223;
        uint64_t v179 = v267;
        v180 = v258;
        ((void (*)(char *, char *, uint64_t))v258)(v223, v175, v267);
        v216(v178, 0, 1, v179);
        uint64_t v181 = (uint64_t)v178;
        id v182 = v218;
        sub_100008558(v181);
LABEL_41:
        uint64_t v265 = v146;
        uint64_t v184 = sub_100006D24();
        (*(void (**)(char *, uint64_t, uint64_t))(v176 + 16))(v244, v184, v148);
        ((void (*)(char *, char *, uint64_t))v180)(v177, v175, v267);
        v185 = (char *)v182;
        v186 = Logger.logObject.getter();
        os_log_type_t v187 = static os_log_type_t.default.getter();
        BOOL v188 = os_log_type_enabled(v186, v187);
        v259 = v185;
        if (v188)
        {
          uint64_t v189 = swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v189 = 136315394;
          uint64_t v190 = *(void *)&v185[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier];
          unint64_t v191 = *(void *)&v185[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier + 8];
          swift_bridgeObjectRetain();
          uint64_t v269 = sub_10000B6D8(v190, v191, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v189 + 12) = 2080;
          sub_10000BE54(&qword_1000A0AD8, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v192 = v267;
          uint64_t v193 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v269 = sub_10000B6D8(v193, v194, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v222(v177, v192);
          _os_log_impl((void *)&_mh_execute_header, v186, v187, "%s scheduled to update at %s.", (uint8_t *)v189, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v263 + 8))(v244, v264);
        }
        else
        {

          v222(v177, v267);
          (*(void (**)(char *, uint64_t))(v176 + 8))(v244, v148);
        }
        sub_10000BE18(0, &qword_1000A0AE0);
        aBlock[0] = (uint64_t)&_swiftEmptyArrayStorage;
        sub_10000BE54(&qword_1000A0AE8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
        sub_100006290(&qword_1000A0AF0);
        sub_10000BE9C(&qword_1000A0AF8, &qword_1000A0AF0);
        v195 = v225;
        uint64_t v196 = v227;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v197 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
        (*(void (**)(char *, uint64_t))(v226 + 8))(v195, v196);
        uint64_t v198 = swift_getObjectType();
        uint64_t v199 = swift_allocObject();
        swift_unknownObjectWeakInit();
        aBlock[4] = (uint64_t)sub_10000BEEC;
        aBlock[5] = v199;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100007D64;
        aBlock[3] = (uint64_t)&unk_100091A08;
        v200 = _Block_copy(aBlock);
        swift_retain();
        v201 = v228;
        static DispatchQoS.unspecified.getter();
        v202 = v230;
        uint64_t v264 = v198;
        sub_10000B1F0();
        OS_dispatch_source.setEventHandler(qos:flags:handler:)();
        _Block_release(v200);
        (*(void (**)(char *, uint64_t))(v232 + 8))(v202, v233);
        (*(void (**)(char *, uint64_t))(v229 + 8))(v201, v231);
        swift_release();
        swift_release();
        v203 = v234;
        static DispatchWallTime.now()();
        v204 = v235;
        + infix(_:_:)();
        v205 = *(void (**)(char *, uint64_t))(v236 + 8);
        v205(v203, v243);
        uint64_t v206 = v239;
        v207 = *(void (**)(char *, void, uint64_t))(v239 + 104);
        v208 = v237;
        uint64_t v209 = v240;
        v207(v237, enum case for DispatchTimeInterval.never(_:), v240);
        v210 = v238;
        *(void *)v238 = 0;
        v207(v210, enum case for DispatchTimeInterval.nanoseconds(_:), v209);
        OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)();
        v211 = *(void (**)(void *, uint64_t))(v206 + 8);
        v211(v210, v209);
        v211(v208, v209);
        v205(v204, v243);
        OS_dispatch_source.resume()();
        *(void *)&v218[v265] = v197;

        swift_unknownObjectRelease();
        uint64_t v212 = v267;
        v213 = v222;
        v222(v245, v267);
        v213(v261, v212);
        v213(v266, v212);
        v213(v262, v212);
        return;
      }
LABEL_47:
      __break(1u);
      return;
    }
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v158 = sub_100006D24();
  uint64_t v160 = v263;
  uint64_t v159 = v264;
  v161 = v255;
  (*(void (**)(char *, uint64_t, uint64_t))(v263 + 16))(v255, v158, v264);
  v162 = v218;
  v163 = Logger.logObject.getter();
  os_log_type_t v164 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v163, v164))
  {
    v165 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)v165 = 136315138;
    uint64_t v166 = *(void *)&v162[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier];
    unint64_t v167 = *(void *)&v162[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v269 = sub_10000B6D8(v166, v167, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v168 = v262;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v163, v164, "%s doesn't require randomized updates. Updating immediately.", v165, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v160 + 8))(v255, v264);
    v169 = v222;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v160 + 8))(v161, v159);
    v169 = v222;
    v168 = v262;
  }
  sub_1000089EC();

  uint64_t v170 = v267;
  v169(v261, v267);
  v169(v266, v170);
  v169(v168, v170);
}

uint64_t sub_10000B1F0()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

id sub_10000B2E8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SyncContentUpdateScheduler();
  return [super dealloc];
}

uint64_t sub_10000B3D4(uint64_t a1)
{
  return a1;
}

id sub_10000B3FC(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [a1 hasExternalPowerSourceConnected];
  if (result)
  {
    uint64_t v8 = sub_100006D24();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
    uint64_t v9 = v1;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v19 = v17;
      *(_DWORD *)uint64_t v12 = 136315138;
      Swift::String v16 = v12 + 4;
      uint64_t v14 = *(void *)((char *)v9 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier);
      unint64_t v13 = *(void *)((char *)v9 + OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_identifier + 8);
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_10000B6D8(v14, v13, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s device is now charging. Rescheduling update.", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v15 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return (id)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v9) + 0xE0))(v15);
  }
  return result;
}

uint64_t sub_10000B6D8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10000B7AC(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10000C31C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10000C31C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000C2CC((uint64_t)v12);
  return v7;
}

uint64_t sub_10000B7AC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10000B968(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10000B968(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10000BA00(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10000BBE0(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10000BBE0(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10000BA00(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10000BB78(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10000BB78(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100006290((uint64_t *)&unk_1000A0B00);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_10000BBE0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006290((uint64_t *)&unk_1000A0B00);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10000BD30(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100006290(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10000BD8C(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    uint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000BE18(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10000BE54(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000BE9C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100007650(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10000BEEC()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v1 = (char *)Strong;
    sub_1000089EC();
    uint64_t v2 = OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_updateTimer;
    if (*(void *)&v1[OBJC_IVAR____TtC14nptocompaniond26SyncContentUpdateScheduler_updateTimer])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease();
    }
    *(void *)&v1[v2] = 0;
    swift_unknownObjectRelease();
  }
}

uint64_t sub_10000BF94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006290(&qword_1000A0AD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10000C000()
{
}

uint64_t sub_10000C01C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000C02C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10000C054(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100006290(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000C0BC()
{
  uint64_t v1 = *(void *)(sub_100006290(&qword_1000A0AD0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  unint64_t v7 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = v7 + 8;

  return _swift_deallocObject(v0, v8, v2 | 7);
}

void sub_10000C1F8()
{
}

void sub_10000C218(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(sub_100006290(&qword_1000A0AD0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_10000877C(v2 + v6, *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8)), a1, a2);
}

uint64_t sub_10000C2BC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000C2CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10000C31C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_10000C39C()
{
  unint64_t result = qword_1000A15F0;
  if (!qword_1000A15F0)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A15F0);
  }
  return result;
}

uint64_t sub_10000C3F4()
{
  uint64_t v10 = 0;
  uint64_t v1 = *(NSObject **)&v0[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_internalQueue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v10;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_100011070;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_10000C378;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100008378;
  aBlock[3] = &unk_100091C30;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v10;
    swift_release();
    return v8;
  }
  return result;
}

uint64_t sub_10000C5B4()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_10000C654()
{
  return swift_unknownObjectRelease();
}

void (*sub_10000C6B0(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_delegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return sub_10000C734;
}

void sub_10000C734(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

char *sub_10000C7B4(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_10000C7E8(a1);
}

char *sub_10000C7E8(void *a1)
{
  id v85 = a1;
  uint64_t v2 = (uint8_t *)type metadata accessor for UUID();
  uint64_t v72 = *((void *)v2 - 1);
  v73 = v2;
  __chkstk_darwin(v2);
  uint64_t v71 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v76 = v4;
  uint64_t v77 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  v75 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  os_log_type_t v74 = (char *)&v70 - v8;
  int64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  Class isa = (char *)v9[-1].isa;
  v84 = v9;
  __chkstk_darwin(v9);
  uint64_t v82 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8);
  unint64_t v13 = &v1[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_photosSyncingPreferenceObserver];
  *(_OWORD *)unint64_t v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  v81 = v13;
  uint64_t v14 = &v1[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_featuredPhotosSyncingPreferenceObserver];
  *(_OWORD *)uint64_t v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  id v80 = v14;
  uint64_t v15 = &v1[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_photosPreferenceObserver];
  *(_OWORD *)uint64_t v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  v79 = v15;
  uint64_t v78 = OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_devicePropertyObserver;
  *(void *)&v1[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_devicePropertyObserver] = 0;
  uint64_t v16 = OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_internalQueue;
  sub_10000BE18(0, (unint64_t *)&qword_1000A09A0);
  uint64_t v17 = v1;
  static DispatchQoS.unspecified.getter();
  v87[0] = &_swiftEmptyArrayStorage;
  sub_10000C39C();
  sub_100006290((uint64_t *)&unk_1000A09B0);
  uint64_t v18 = v17;
  sub_100011134(&qword_1000A1600, (uint64_t *)&unk_1000A09B0);
  uint64_t v19 = (char *)v16;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*((void (**)(char *, void, NSObject *))isa + 13))(v82, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v84);
  uint64_t v20 = v1;
  *(void *)&v1[v16] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v21 = OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_latestSuggestionsObserver;
  static OS_dispatch_queue.main.getter();
  id v22 = objc_allocWithZone((Class)sub_100006290(&qword_1000A0B70));
  *(void *)&v17[v21] = FetchResultObserver.init(_:)();
  *(void *)&v17[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_subscriptions] = &_swiftEmptySetSingleton;
  uint64_t v23 = (uint64_t)&v17[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_delegate];
  swift_unknownObjectWeakInit();
  v87[3] = &type metadata for NanoPhotosCoreFeatures;
  v87[4] = sub_10000D24C();
  LOBYTE(v87[0]) = 1;
  char v24 = isFeatureEnabled(_:)();
  sub_10000C2CC((uint64_t)v87);
  if ((v24 & 1) == 0)
  {

LABEL_11:
    uint64_t v57 = (uint64_t)v80;
    uint64_t v56 = (uint64_t)v81;
    goto LABEL_12;
  }
  id v25 = v85;
  if (([v85 relationship] & 2) != 0)
  {
    uint64_t v51 = sub_100006D24();
    uint64_t v52 = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v75, v51, v76);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "FeaturedPhotos is disabled on Tinker watch.", v55, 2u);
      id v25 = v85;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v77 + 8))(v75, v52);
    goto LABEL_11;
  }
  uint64_t result = (char *)[self sharedInstance];
  uint64_t v27 = v76;
  if (result)
  {
    uint64_t v28 = result;
    id v29 = [result deviceForIDSDevice:v25];

    if (v29)
    {
      *(void *)&v18[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_nrDevice] = v29;
      id v30 = objc_allocWithZone((Class)NPTOPreferencesAccessor);
      id v31 = v29;
      id v32 = [v30 initWithDevice:v31];
      *(void *)&v18[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_preferenceAccessor] = v32;
      type metadata accessor for SyncContentUpdateScheduler();
      *(void *)&v18[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_updateScheduler] = sub_100006FE8(v32, 0xD000000000000026, (void *)0x8000000100079CE0);
      uint64_t v33 = *(void **)&v19[(void)v20];
      id v34 = objc_allocWithZone((Class)sub_100006290(&qword_1000A0DD0));
      id v35 = v33;
      *(void *)&v18[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_currentFeaturedPhotosObserver] = FetchResultObserver.init(_:)();

      uint64_t v36 = (objc_class *)type metadata accessor for PhotosAppFeaturedPhotosContentProvider();
      v86.receiver = v18;
      v86.super_class = v36;
      uint64_t v37 = (char *)[super init];
      uint64_t v38 = OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_updateScheduler;
      uint64_t v39 = *(void **)&v37[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_updateScheduler];
      uint64_t v40 = *(void (**)(char *, _UNKNOWN **))((swift_isaMask & *v39) + 0x98);
      uint64_t v41 = v37;
      uint64_t v42 = v39;
      v40(v37, &off_100091B48);

      sub_10000E2DC();
      sub_10000DD20();
      uint64_t v43 = OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_nrDevice;
      uint64_t v44 = *(void **)&v41[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_nrDevice];
      id v45 = [self npto_photosMemoriesSyncCapability];
      uint64_t v46 = v71;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      Class v47 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint8_t *))(v72 + 8))(v46, v73);
      LOBYTE(v44) = [v44 supportsCapability:v47];

      if (v44)
      {
        uint64_t v48 = *(void **)&v37[v38];
        uint64_t v49 = *(void (**)(void))((swift_isaMask & *v48) + 0xE0);
        uint64_t v50 = v48;
        v49();
      }
      else
      {
        type metadata accessor for DevicePropertyObserver();
        uint64_t v64 = *(void **)&v41[v43];
        sub_100006290(&qword_1000A0E00);
        uint64_t v65 = swift_allocObject();
        *(_OWORD *)(v65 + 16) = xmmword_100079C30;
        *(void *)(v65 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v65 + 40) = v66;
        uint64_t v67 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v68 = sub_100006414(v64, v65, (uint64_t)sub_10000FF74, v67);
        uint64_t v69 = *(void **)&v41[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_devicePropertyObserver];
        *(void *)&v41[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_devicePropertyObserver] = v68;
      }
      return v37;
    }
    Class isa = v18;
    uint64_t v58 = sub_100006D24();
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v74, v58, v27);
    v84 = v25;
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      uint64_t v82 = v20;
      v73 = v61;
      *(_DWORD *)v61 = 138412290;
      v87[0] = v84;
      uint64_t v62 = v84;
      v75 = v19;
      uint64_t v63 = v62;
      uint64_t v20 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v72 = v25;
      uint64_t v27 = v76;

      uint64_t v19 = v75;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "FeaturedPhotos is stopped because no valid NRDevice for %@.", v73, 0xCu);
      sub_100006290((uint64_t *)&unk_1000A1120);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v59 = v84;
    }
    uint64_t v57 = (uint64_t)v80;
    uint64_t v56 = (uint64_t)v81;

    (*(void (**)(char *, uint64_t))(v77 + 8))(v74, v27);
    uint64_t v18 = isa;
LABEL_12:
    sub_10000BD30(v56, (uint64_t *)&unk_1000A0BC0);
    sub_10000BD30(v57, (uint64_t *)&unk_1000A0BC0);
    sub_10000BD30((uint64_t)v79, (uint64_t *)&unk_1000A0BC0);

    swift_bridgeObjectRelease();
    sub_10000B3D4(v23);

    type metadata accessor for PhotosAppFeaturedPhotosContentProvider();
    swift_deallocPartialClassInstance();
    return 0;
  }
  __break(1u);
  return result;
}

unint64_t sub_10000D24C()
{
  unint64_t result = qword_1000A0BB8;
  if (!qword_1000A0BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A0BB8);
  }
  return result;
}

uint64_t type metadata accessor for PhotosAppFeaturedPhotosContentProvider()
{
  return self;
}

uint64_t sub_10000D2EC()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v88 = v1;
  uint64_t v89 = v2;
  uint64_t v3 = __chkstk_darwin(v1);
  objc_super v86 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  id v85 = (char *)&v81 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  v83 = (char *)&v81 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v84 = (char *)&v81 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v81 - v11;
  uint64_t v13 = sub_100006290(&qword_1000A0C00);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v22 = (char *)&v81 - v21;
  v87 = v0;
  uint64_t v23 = *(void **)&v0[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_nrDevice];
  id v24 = [self npto_photosMemoriesSyncCapability];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v26 = v22;
  uint64_t v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v26, v16);
  unsigned int v28 = [v23 supportsCapability:isa];

  if (!v28)
  {
    id v45 = v23;
    uint64_t v46 = sub_100006D24();
    uint64_t v48 = v88;
    uint64_t v47 = v89;
    uint64_t v49 = v86;
    (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v86, v46, v88);
    uint64_t v50 = v87;
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v54 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v53 = 138412290;
      id v91 = v45;
      id v55 = v45;
      uint64_t v47 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v54 = v45;

      _os_log_impl((void *)&_mh_execute_header, v51, v52, "FeaturedPhotos is not a valid capability on %@.", v53, 0xCu);
      sub_100006290((uint64_t *)&unk_1000A1120);
      swift_arrayDestroy();
      uint64_t v49 = v86;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v51 = v50;
    }

    (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v48);
    return 0;
  }
  v81 = (void (*)(char *, char *))v27;
  uint64_t v82 = v20;
  id v29 = v84;
  id v30 = v85;
  objc_super v86 = (char *)v16;
  uint64_t v31 = (uint64_t)v15;
  uint64_t v33 = v88;
  uint64_t v32 = v89;
  id v34 = *(void **)&v87[OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_preferenceAccessor];
  if (!objc_msgSend(v34, "npto_appPhotosSyncingEnabled"))
  {
    uint64_t v56 = sub_100006D24();
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v30, v56, v33);
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "FeaturedPhotos is stopped because photos syncing setting is disabled.", v59, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v33);
    return 0;
  }
  if (!PLIsFeaturedContentAllowed())
  {
    uint64_t v60 = sub_100006D24();
    uint64_t v61 = v32;
    uint64_t v62 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v83, v60, v33);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      uint64_t v66 = "FeaturedPhotos is disabled because Show Featured Content is off in iOS Photos settings.";
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v63, v64, v66, v65, 2u);
LABEL_21:
      swift_slowDealloc();
    }
LABEL_22:

    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v33);
    return 0;
  }
  if (!objc_msgSend(v34, "npto_featuredPhotosSyncingEnabled"))
  {
    uint64_t v67 = sub_100006D24();
    uint64_t v61 = v32;
    uint64_t v62 = v29;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v29, v67, v33);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      uint64_t v66 = "FeaturedPhotos is disabled.";
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  id v35 = (void *)sub_10000C3F4();
  if (!v35)
  {
LABEL_26:
    uint64_t v69 = sub_100006D24();
    uint64_t v61 = v32;
    uint64_t v62 = v12;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v12, v69, v33);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v63, v70)) {
      goto LABEL_22;
    }
    uint64_t v71 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v71 = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, v70, "No assets in FeaturedPhotos.", v71, 2u);
    uint64_t v61 = v32;
    goto LABEL_21;
  }
  uint64_t v36 = v35;
  if ((uint64_t)[v35 count] < 1)
  {

    goto LABEL_26;
  }
  uint64_t v37 = v36;
  uint64_t v38 = self;
  sub_10000BE18(0, (unint64_t *)&unk_1000A0C08);
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v38 transientAssetCollectionWithAssets:v39 title:0];

  uint64_t v41 = v31;
  UUID.init(uuidString:)();
  uint64_t v42 = v17;
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, char *))(v17 + 48);
  uint64_t v44 = v86;
  if (v43(v31, 1, v86) == 1)
  {
    sub_10000BD30(v31, &qword_1000A0C00);
  }
  else
  {
    uint64_t v72 = v82;
    (*(void (**)(char *, uint64_t, char *))(v42 + 32))(v82, v41, v44);
    Class v73 = UUID._bridgeToObjectiveC()().super.isa;
    [v40 npto_setUUID:v73];

    v81(v72, v44);
  }
  sub_100006290((uint64_t *)&unk_1000A08E0);
  uint64_t v74 = swift_allocObject();
  *(_OWORD *)(v74 + 16) = xmmword_100079C30;
  *(void *)(v74 + 56) = sub_10000BE18(0, &qword_1000A0C18);
  *(void *)(v74 + 32) = v40;
  v75 = self;
  id v76 = v40;
  id v77 = [v75 sharedPhotoLibrary];
  id v78 = objc_allocWithZone((Class)PHManualFetchResult);
  Class v79 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v80 = [v78 initWithObjects:v79 photoLibrary:v77 fetchType:0 fetchPropertySets:0 identifier:0 registerIfNeeded:0];

  uint64_t v92 = sub_10000BE18(0, &qword_1000A0C20);
  id v91 = v80;

  sub_100006290(&qword_1000A0C28);
  if (swift_dynamicCast()) {
    return v90;
  }
  else {
    return 0;
  }
}

uint64_t sub_10000DD00()
{
  return 0;
}

uint64_t sub_10000DD10()
{
  return 6;
}

uint64_t sub_10000DD20()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_preferenceAccessor);
  uint64_t v2 = (void *)NPTOPreferencesAppPhotosSyncingEnabledKey;
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v27 = sub_100011110;
  uint64_t v28 = v3;
  aBlock = _NSConcreteStackBlock;
  uint64_t v24 = 1107296256;
  id v25 = sub_100007D64;
  uint64_t v26 = &unk_100091C58;
  uint64_t v4 = _Block_copy(&aBlock);
  id v5 = v2;
  swift_release();
  id v6 = [v1 changeObserverForKey:v5 queue:0 block:v4];
  _Block_release(v4);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  uint64_t v7 = v0 + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_photosSyncingPreferenceObserver;
  swift_beginAccess();
  sub_100007D80((uint64_t)&aBlock, v7);
  swift_endAccess();
  uint64_t v8 = (void *)NPTOPreferencesFeaturedPhotosSyncingEnabledKey;
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v27 = sub_100011110;
  uint64_t v28 = v9;
  aBlock = _NSConcreteStackBlock;
  uint64_t v24 = 1107296256;
  id v25 = sub_100007D64;
  uint64_t v26 = &unk_100091C80;
  uint64_t v10 = _Block_copy(&aBlock);
  id v11 = v8;
  swift_release();
  id v12 = [v1 changeObserverForKey:v11 queue:0 block:v10];
  _Block_release(v10);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  uint64_t v13 = v0 + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_featuredPhotosSyncingPreferenceObserver;
  swift_beginAccess();
  sub_100007D80((uint64_t)&aBlock, v13);
  swift_endAccess();
  uint64_t v14 = *(void **)(v0 + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_internalQueue);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v16 = objc_allocWithZone((Class)NPTODarwinNotificationObserver);
  id v17 = v14;
  swift_retain();
  NSString v18 = String._bridgeToObjectiveC()();
  uint64_t v27 = sub_100011110;
  uint64_t v28 = v15;
  aBlock = _NSConcreteStackBlock;
  uint64_t v24 = 1107296256;
  id v25 = sub_100007D64;
  uint64_t v26 = &unk_100091CA8;
  uint64_t v19 = _Block_copy(&aBlock);
  uint64_t v20 = (void **)[v16 initWithNotificationName:v18 queue:v17 block:v19];

  _Block_release(v19);
  swift_release();
  swift_release();
  uint64_t v26 = (void *)sub_10000BE18(0, (unint64_t *)&unk_1000A0D40);
  aBlock = v20;
  uint64_t v21 = v0 + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_photosPreferenceObserver;
  swift_beginAccess();
  sub_100007D80((uint64_t)&aBlock, v21);
  return swift_endAccess();
}

void sub_10000E10C()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = (void *)Strong;
    id v6 = *(void **)(Strong + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_nrDevice);
    id v7 = [self npto_photosMemoriesSyncCapability];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    unsigned int v9 = [v6 supportsCapability:isa];

    if (v9 && (uint64_t v10 = (*(uint64_t (**)(void))((swift_isaMask & *v5) + 0x150))()) != 0)
    {
      id v11 = (void *)v10;
      id v12 = v5;
      [v11 contentProviderDidInvalidateContent:v12];

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void sub_10000E2DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006290(&qword_1000A0E60);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006290(&qword_1000A0D50);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *(void **)(v0 + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_latestSuggestionsObserver);
  (*(void (**)(uint64_t))((swift_isaMask & *v11) + 0x88))(v8);
  sub_100006290(&qword_1000A0C28);
  sub_100011134(&qword_1000A0D58, &qword_1000A0E60);
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100011134(&qword_1000A0D60, &qword_1000A0D50);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v12 = self;
  sub_10000BE18(0, &qword_1000A0C30);
  id v13 = sub_100010B98();
  id v14 = [v12 fetchSuggestionsWithOptions:v13];

  (*(void (**)(id))((swift_isaMask & *v11) + 0xA8))(v14);
  uint64_t v15 = *(void **)(v1 + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_preferenceAccessor);
  id v16 = self;
  sub_10000ECC0();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v18 = [v15 device];
  id v19 = static PHFetchOptions.npto_defaultAssetFetchOptions(for:)(v18);

  id v20 = [v16 fetchAssetsWithLocalIdentifiers:isa options:v19];
  if (v20)
  {
    uint64_t v21 = *(void **)(v1 + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_currentFeaturedPhotosObserver);
    id v22 = *(void (**)(id))((swift_isaMask & *v21) + 0xA8);
    uint64_t v23 = v21;
    id v24 = v20;
    v22(v20);
  }
}

id sub_10000E740@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = v2;
  return v2;
}

void sub_10000E74C(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v55 = v5;
    uint64_t v56 = v3;
    uint64_t v12 = OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_nrDevice;
    id v13 = *(void **)(Strong + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_nrDevice);
    id v14 = (char *)Strong;
    id v15 = [self npto_photosMemoriesSyncCapability];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    LODWORD(v13) = [v13 supportsCapability:isa];

    if (!v13)
    {
      id v20 = v14;
LABEL_27:

      return;
    }
    id v17 = self;
    sub_10000BE18(0, &qword_1000A0C30);
    os_log_type_t v54 = v14;
    id v18 = *(id *)&v14[v12];
    id v19 = static PHFetchOptions.npto_defaultAssetFetchOptions(for:)(v18);

    id v20 = [v17 fetchKeyAssetForEachSuggestion:v10 options:v19];
    if (v20)
    {
      id v21 = [v20 fetchedObjects];
      id v22 = (unint64_t *)&_swiftEmptyArrayStorage;
      if (v21)
      {
        uint64_t v23 = v21;
        id v53 = v20;
        sub_10000BE18(0, (unint64_t *)&unk_1000A0C08);
        unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v24 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v25) {
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v25)
          {
LABEL_7:
            uint64_t v52 = v2;
            uint64_t v57 = (unint64_t *)&_swiftEmptyArrayStorage;
            sub_100010A0C(0, v25 & ~(v25 >> 63), 0);
            if (v25 < 0)
            {
              __break(1u);
              return;
            }
            uint64_t v26 = 0;
            id v22 = v57;
            do
            {
              if ((v24 & 0xC000000000000001) != 0) {
                id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v27 = *(id *)(v24 + 8 * v26 + 32);
              }
              uint64_t v28 = v27;
              id v29 = [v27 localIdentifier];
              uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v32 = v31;

              uint64_t v57 = v22;
              unint64_t v34 = v22[2];
              unint64_t v33 = v22[3];
              if (v34 >= v33 >> 1)
              {
                sub_100010A0C(v33 > 1, v34 + 1, 1);
                id v22 = v57;
              }
              ++v26;
              v22[2] = v34 + 1;
              id v35 = &v22[2 * v34];
              v35[4] = v30;
              v35[5] = v32;
            }
            while (v25 != v26);
            swift_bridgeObjectRelease();
            uint64_t v2 = v52;
            goto LABEL_20;
          }
        }
        swift_bridgeObjectRelease();
LABEL_20:
        id v20 = v53;
      }
    }
    else
    {
      id v22 = (unint64_t *)&_swiftEmptyArrayStorage;
    }
    id v36 = *(id *)((char *)v54 + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_preferenceAccessor);
    uint64_t v37 = sub_10000ECC0();

    uint64_t v38 = sub_1000111E0((uint64_t)v37);
    swift_bridgeObjectRelease();
    uint64_t v39 = sub_1000111E0((uint64_t)v22);
    swift_bridgeObjectRelease();
    char v40 = sub_10000FC98(v38, v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v42 = v55;
    uint64_t v41 = v56;
    if (v40)
    {
      uint64_t v43 = v54;
    }
    else
    {
      uint64_t v44 = sub_100006D24();
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v42, v44, v2);
      id v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Latest FeaturedPhotos has been updated. Scheduling FeaturedPhotos updates.", v47, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v2);
      uint64_t v48 = v54;
      uint64_t v49 = *(void **)((char *)v54 + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_updateScheduler);
      uint64_t v50 = *(void (**)(void))((swift_isaMask & *v49) + 0xE0);
      uint64_t v43 = v49;
      v50();
    }
    goto LABEL_27;
  }
}

void *sub_10000ECC0()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100011178((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_100006290(&qword_1000A0D68);
    if (swift_dynamicCast()) {
      return (void *)v4;
    }
  }
  else
  {
    sub_10000BD30((uint64_t)v6, (uint64_t *)&unk_1000A0BC0);
  }
  return &_swiftEmptyArrayStorage;
}

void sub_10000EDB8()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - v5;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v12 = Strong;
    id v13 = *(void **)(Strong + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_nrDevice);
    id v14 = [self npto_photosMemoriesSyncCapability];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    unsigned int v16 = [v13 supportsCapability:isa];

    uint64_t v17 = sub_100006D24();
    id v18 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
    if (v16)
    {
      v18(v6, v17, v0);
      id v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        id v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "NRDevice capabilities did change. Scheduling FeaturedPhotos updates.", v21, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
      id v22 = *(Class *)((char *)&v12->isa + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_updateScheduler);
      uint64_t v23 = *(void (**)(void))((swift_isaMask & *v22) + 0xE0);
      unint64_t v24 = v22;
      v23();

      uint64_t v25 = *(Class *)((char *)&v12->isa + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_devicePropertyObserver);
      *(Class *)((char *)&v12->isa + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_devicePropertyObserver) = 0;
    }
    else
    {
      v18(v4, v17, v0);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "NRDevice capabilities did change, but still not support FeaturedPhotos .", v28, 2u);
        swift_slowDealloc();
        id v29 = v12;
      }
      else
      {
        id v29 = v26;
        uint64_t v26 = v12;
      }

      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    }
  }
}

id sub_10000F1A8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PhotosAppFeaturedPhotosContentProvider();
  return [super dealloc];
}

void sub_10000F2DC()
{
  uint64_t v1 = v0;
  objc_super v2 = self;
  sub_10000BE18(0, &qword_1000A0C30);
  id v3 = sub_100010B98();
  id v4 = [v2 fetchSuggestionsWithOptions:v3];

  uint64_t v5 = self;
  uint64_t v6 = *(void **)((char *)v1 + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_nrDevice);
  id v7 = v4;
  id v8 = static PHFetchOptions.npto_defaultAssetFetchOptions(for:)(v6);
  id v9 = [v5 fetchKeyAssetForEachSuggestion:v7 options:v8];

  uint64_t v10 = *(void **)((char *)v1 + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_preferenceAccessor);
  id v11 = v9;
  uint64_t ObjectType = swift_getObjectType();
  id v13 = (void *)swift_allocObject();
  void v13[2] = v9;
  v13[3] = v10;
  v13[4] = ObjectType;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_100011008;
  *(void *)(v14 + 24) = v13;
  v24[4] = sub_10000C02C;
  v24[5] = v14;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 1107296256;
  v24[2] = sub_100008378;
  v24[3] = &unk_100091BB8;
  id v15 = _Block_copy(v24);
  id v16 = v11;
  id v17 = v10;
  swift_retain();
  swift_release();
  [v17 performBatchUpdates:v15 synchronizeToRemoteDevice:0];

  _Block_release(v15);
  LODWORD(v17) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t v18 = swift_release();
  if (v17)
  {
    __break(1u);
  }
  else
  {
    if (v16)
    {
      id v19 = *(void **)((char *)v1
                       + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_currentFeaturedPhotosObserver);
      os_log_type_t v20 = *(void (**)(id))((swift_isaMask & *v19) + 0xA8);
      id v21 = v16;
      id v22 = v19;
      v20(v9);
    }
    uint64_t v23 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x150))(v18);
    if (v23)
    {
      [v23 contentProviderDidInvalidateContent:v1];
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_10000F5F4()
{
  return 1;
}

uint64_t sub_10000F5FC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_nrDevice);
  id v6 = [self npto_photosSyncV2Capability];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  LODWORD(v1) = [v5 supportsCapability:isa];

  return v1 ^ 1;
}

void sub_10000F728(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - v9;
  if (!a1) {
    goto LABEL_20;
  }
  id v11 = [a1 fetchedObjects];
  if (!v11) {
    goto LABEL_20;
  }
  uint64_t v12 = v11;
  uint64_t v44 = v5;
  sub_10000BE18(0, (unint64_t *)&unk_1000A0C08);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v42 = v10;
  uint64_t v43 = v4;
  uint64_t v41 = v8;
  if (!v14)
  {
    swift_bridgeObjectRelease();
    id v16 = &_swiftEmptyArrayStorage;
LABEL_16:
    uint64_t v5 = v44;
    if (v16[2])
    {
      uint64_t v26 = sub_100006D24();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v26, v4);
      swift_bridgeObjectRetain_n();
      os_log_type_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        id v29 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v46 = (void *)swift_slowAlloc();
        *(_DWORD *)id v29 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v30 = Array.description.getter();
        unint64_t v32 = v31;
        swift_bridgeObjectRelease();
        uint64_t v45 = sub_10000B6D8(v30, v32, (uint64_t *)&v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Setting FeaturedPhotos identifiers to %s", v29, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v43);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      }
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      NSString v37 = String._bridgeToObjectiveC()();
      [a2 setObject:isa forKey:v37];

LABEL_25:
      return;
    }
    swift_bridgeObjectRelease();
    id v8 = v41;
LABEL_20:
    uint64_t v33 = sub_100006D24();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v33, v4);
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      id v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Removing FeaturedPhotos identifiers", v36, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    NSString v37 = String._bridgeToObjectiveC()();
    [a2 removeObjectForKey:v37];
    goto LABEL_25;
  }
  os_log_type_t v46 = &_swiftEmptyArrayStorage;
  sub_100010A0C(0, v14 & ~(v14 >> 63), 0);
  if ((v14 & 0x8000000000000000) == 0)
  {
    char v40 = a2;
    uint64_t v15 = 0;
    id v16 = v46;
    do
    {
      if ((v13 & 0xC000000000000001) != 0) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v17 = *(id *)(v13 + 8 * v15 + 32);
      }
      uint64_t v18 = v17;
      id v19 = [v17 localIdentifier];
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = v21;

      os_log_type_t v46 = v16;
      unint64_t v24 = v16[2];
      unint64_t v23 = v16[3];
      if (v24 >= v23 >> 1)
      {
        sub_100010A0C(v23 > 1, v24 + 1, 1);
        id v16 = v46;
      }
      ++v15;
      _OWORD v16[2] = v24 + 1;
      uint64_t v25 = (char *)&v16[2 * v24];
      *((void *)v25 + 4) = v20;
      *((void *)v25 + 5) = v22;
    }
    while (v14 != v15);
    swift_bridgeObjectRelease();
    a2 = v40;
    uint64_t v10 = v42;
    uint64_t v4 = v43;
    goto LABEL_16;
  }
  __break(1u);
}

uint64_t sub_10000FC98(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v3 + 4;
          if (v3 + 4 >= v30) {
            return 1;
          }
          unint64_t v11 = *(void *)(v29 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_25:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    uint64_t v14 = result;
    uint64_t v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        os_log_type_t v27 = (void *)(v21 + 16 * v26);
        BOOL v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    unint64_t result = v14;
    int64_t v3 = v31;
  }
  uint64_t v13 = v3 + 5;
  if (v3 + 5 >= v30) {
    return 1;
  }
  unint64_t v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_25;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_10000FF3C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10000FF74()
{
}

uint64_t sub_10000FF7C(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    int64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      Swift::Int v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *int64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10001040C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *int64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10001012C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100006290((uint64_t *)&unk_1000A0D70);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int sub_10001040C(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10001012C();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1000105A8();
      goto LABEL_22;
    }
    sub_10001075C();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_1000105A8()
{
  uint64_t v1 = v0;
  sub_100006290((uint64_t *)&unk_1000A0D70);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10001075C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100006290((uint64_t *)&unk_1000A0D70);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100010A0C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100010A2C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100010A2C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006290(&qword_1000A0E00);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_100010B98()
{
  id v0 = [objc_allocWithZone((Class)PHFetchOptions) init];
  sub_100006290((uint64_t *)&unk_1000A0E40);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100079CF0;
  id v2 = objc_allocWithZone((Class)NSSortDescriptor);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 initWithKey:v3 ascending:0];

  *(void *)(v1 + 32) = v4;
  specialized Array._endMutation()();
  sub_10000BE18(0, (unint64_t *)&unk_1000A0D20);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v0 setSortDescriptors:isa];

  sub_10000BE18(0, (unint64_t *)&qword_1000A0E50);
  sub_100006290(&qword_1000A0D30);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100079C30;
  *(void *)(v6 + 56) = &type metadata for UInt16;
  *(void *)(v6 + 64) = &protocol witness table for UInt16;
  *(_WORD *)(v6 + 32) = 1;
  int64_t v7 = NSPredicate.init(format:_:)();
  [v0 setPredicate:v7];

  [v0 setFetchLimit:10];
  return v0;
}

void *sub_100010D70()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  NSString v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = (void *)sub_10000C3F4();
  uint64_t v5 = sub_100006D24();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  id v6 = v4;
  int64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v17 = v14;
    *(_DWORD *)uint64_t v9 = 136315138;
    if (v4) {
      id v10 = [v6 count:v14];
    }
    else {
      id v10 = 0;
    }
    uint64_t v15 = (uint64_t)v10;
    BOOL v16 = v4 == 0;
    sub_100006290(&qword_1000A0D38);
    uint64_t v11 = String.init<A>(describing:)();
    uint64_t v15 = sub_10000B6D8(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "FeaturedPhotos selected %s assets.", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_100010FC8()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_100011008()
{
  sub_10000F728(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100011010()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100011020(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100011030()
{
  return swift_release();
}

uint64_t sub_100011038()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100011070()
{
  uint64_t v1 = *(void ***)(v0 + 16);
  uint64_t v2 = *(void **)(*(void *)(v0 + 24)
                  + OBJC_IVAR___NPTOPhotosAppFeaturedPhotosContentProvider_currentFeaturedPhotosObserver);
  NSString v3 = *(uint64_t (**)(void))((swift_isaMask & *v2) + 0x70);
  id v4 = v2;
  uint64_t v5 = v3();

  id v6 = *v1;
  *uint64_t v1 = (void *)v5;
}

uint64_t sub_100011100()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100011110()
{
}

void sub_10001112C(uint64_t *a1)
{
}

uint64_t sub_100011134(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100007650(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100011178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006290((uint64_t *)&unk_1000A0BC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000111E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_10000FF7C(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

double sub_100011298(double a1)
{
  return a1 * 3600.0;
}

double sub_1000112AC(double a1)
{
  return a1 * 604800.0;
}

uint64_t sub_1000112C0()
{
  uint64_t v10 = 0;
  uint64_t v1 = *(NSObject **)&v0[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_internalQueue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v10;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_100015D10;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_10000C378;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100008378;
  aBlock[3] = &unk_100091E58;
  uint64_t v4 = _Block_copy(aBlock);
  Swift::Int v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v10;
    swift_release();
    return v8;
  }
  return result;
}

uint64_t sub_100011424()
{
  uint64_t v10 = 0;
  uint64_t v1 = *(NSObject **)&v0[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_internalQueue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v10;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_100015C84;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_10000C02C;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100008378;
  aBlock[3] = &unk_100091D68;
  uint64_t v4 = _Block_copy(aBlock);
  Swift::Int v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v10;
    swift_release();
    return v8;
  }
  return result;
}

uint64_t sub_1000115E4()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_100011684()
{
  return swift_unknownObjectRelease();
}

void (*sub_1000116E0(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_delegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return sub_10000C734;
}

char *sub_100011764(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_100011798(a1);
}

char *sub_100011798(void *a1)
{
  id v88 = a1;
  uint64_t v2 = (uint8_t *)type metadata accessor for UUID();
  id v76 = (uint8_t *)*((void *)v2 - 1);
  id v77 = v2;
  __chkstk_darwin(v2);
  v75 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v80 = *(void *)(v4 - 8);
  uint64_t v81 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  Class v79 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v78 = (char *)&v74 - v7;
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  objc_super v86 = *(void (***)(void, void, void))(v8 - 8);
  uint64_t v87 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8);
  int64_t v13 = &v1[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_photosSyncingPreferenceObserver];
  *(_OWORD *)int64_t v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  id v85 = v13;
  uint64_t v14 = &v1[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_memoriesSyncingPreferenceObserver];
  *(_OWORD *)uint64_t v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  v84 = v14;
  uint64_t v15 = &v1[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_photosPreferenceObserver];
  *(_OWORD *)uint64_t v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  v83 = v15;
  uint64_t v82 = OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_devicePropertyObserver;
  *(void *)&v1[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_devicePropertyObserver] = 0;
  uint64_t v16 = OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_internalQueue;
  sub_10000BE18(0, (unint64_t *)&qword_1000A09A0);
  uint64_t v89 = v1;
  static DispatchQoS.unspecified.getter();
  v91[0] = &_swiftEmptyArrayStorage;
  sub_10000C39C();
  sub_100006290((uint64_t *)&unk_1000A09B0);
  uint64_t v17 = v16;
  sub_100011134(&qword_1000A1600, (uint64_t *)&unk_1000A09B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  ((void (**)(char *, void, uint64_t))v86)[13](v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v87);
  int64_t v18 = v1;
  BOOL v19 = v89;
  *(void *)&v1[v17] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v20 = OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_latestMemoryObserver;
  static OS_dispatch_queue.main.getter();
  id v21 = objc_allocWithZone((Class)sub_100006290(&qword_1000A0D80));
  *(void *)&v19[v20] = FetchResultObserver.init(_:)();
  *(void *)&v19[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_subscriptions] = &_swiftEmptySetSingleton;
  uint64_t v22 = (uint64_t)&v19[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_delegate];
  swift_unknownObjectWeakInit();
  v91[3] = &type metadata for NanoPhotosCoreFeatures;
  v91[4] = sub_10000D24C();
  LOBYTE(v91[0]) = 1;
  char v23 = isFeatureEnabled(_:)();
  sub_10000C2CC((uint64_t)v91);
  if ((v23 & 1) == 0)
  {

LABEL_11:
    uint64_t v58 = (uint64_t)v84;
    uint64_t v57 = (uint64_t)v85;
    uint64_t v59 = (uint64_t)v83;
    goto LABEL_12;
  }
  id v24 = v88;
  if (([v88 relationship] & 2) != 0)
  {
    uint64_t v52 = sub_100006D24();
    id v53 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v79, v52, v81);
    os_log_type_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "SyncedMemory is disabled on Tinker watch.", v56, 2u);
      id v53 = v79;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v80 + 8))(v53, v81);
    goto LABEL_11;
  }
  uint64_t result = (char *)[self sharedInstance];
  if (result)
  {
    unint64_t v26 = result;
    id v27 = [result deviceForIDSDevice:v24];

    if (v27)
    {
      uint64_t v28 = *(void **)&v18[v17];
      int64_t v29 = (objc_class *)sub_100006290(&qword_1000A0DD0);
      id v30 = objc_allocWithZone(v29);
      id v31 = v28;
      *(void *)&v19[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_currentMemoryAssetsObserver] = FetchResultObserver.init(_:)();
      id v32 = objc_allocWithZone(v29);
      id v33 = v31;
      *(void *)&v19[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_currentMemoryKeyAssetsObserver] = FetchResultObserver.init(_:)();
      *(void *)&v19[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_nrDevice] = v27;
      id v34 = objc_allocWithZone((Class)NPTOPreferencesAccessor);
      id v35 = v27;
      id v36 = [v34 initWithDevice:v35];
      *(void *)&v19[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_preferenceAccessor] = v36;
      type metadata accessor for SyncContentUpdateScheduler();
      *(void *)&v19[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_updateScheduler] = sub_100006FE8(v36, 0xD000000000000020, (void *)0x8000000100079D30);

      NSString v37 = (objc_class *)type metadata accessor for PhotosAppMemoriesContentProvider();
      v90.receiver = v19;
      v90.super_class = v37;
      uint64_t v38 = (char *)[v90 init];
      uint64_t v39 = OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_updateScheduler;
      char v40 = *(void **)&v38[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_updateScheduler];
      uint64_t v41 = *(void (**)(char *, _UNKNOWN **))((swift_isaMask & *v40) + 0x98);
      uint64_t v42 = v38;
      uint64_t v43 = v40;
      v41(v38, &off_100091CF8);

      sub_100013540();
      sub_100012F84();
      uint64_t v44 = OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_nrDevice;
      uint64_t v45 = *(void **)&v42[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_nrDevice];
      id v46 = [self npto_photosMemoriesSyncCapability];
      uint64_t v47 = v75;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*((void (**)(char *, uint8_t *))v76 + 1))(v47, v77);
      LOBYTE(v45) = [v45 supportsCapability:isa];

      if (v45)
      {
        uint64_t v49 = *(void **)&v38[v39];
        uint64_t v50 = *(void (**)(void))((swift_isaMask & *v49) + 0xE0);
        uint64_t v51 = v49;
        v50();
      }
      else
      {
        type metadata accessor for DevicePropertyObserver();
        v68 = *(void **)&v42[v44];
        sub_100006290(&qword_1000A0E00);
        uint64_t v69 = swift_allocObject();
        *(_OWORD *)(v69 + 16) = xmmword_100079C30;
        *(void *)(v69 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v69 + 40) = v70;
        uint64_t v71 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v72 = sub_100006414(v68, v69, (uint64_t)sub_1000156DC, v71);
        Class v73 = *(void **)&v42[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_devicePropertyObserver];
        *(void *)&v42[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_devicePropertyObserver] = v72;
      }
      return v38;
    }
    uint64_t v87 = v17;
    uint64_t v60 = sub_100006D24();
    (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v78, v60, v81);
    id v61 = v24;
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    BOOL v64 = os_log_type_enabled(v62, v63);
    objc_super v86 = (void (**)(void, void, void))v61;
    if (v64)
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = (void *)swift_slowAlloc();
      id v77 = v65;
      *(_DWORD *)uint64_t v65 = 138412290;
      id v76 = v65 + 4;
      v91[0] = v61;
      Class v79 = v18;
      id v67 = v61;
      BOOL v19 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v66 = v24;
      int64_t v18 = v79;

      _os_log_impl((void *)&_mh_execute_header, v62, v63, "SyncedMemory is stopped because no valid NRDevice for %@.", v77, 0xCu);
      sub_100006290((uint64_t *)&unk_1000A1120);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v62 = v61;
    }
    uint64_t v58 = (uint64_t)v84;
    uint64_t v57 = (uint64_t)v85;
    uint64_t v59 = (uint64_t)v83;

    (*(void (**)(char *, uint64_t))(v80 + 8))(v78, v81);
    uint64_t v17 = v87;
LABEL_12:
    sub_100006AE4(v57);
    sub_100006AE4(v58);
    sub_100006AE4(v59);

    swift_bridgeObjectRelease();
    sub_10000B3D4(v22);

    type metadata accessor for PhotosAppMemoriesContentProvider();
    swift_deallocPartialClassInstance();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PhotosAppMemoriesContentProvider()
{
  return self;
}

NSObject *sub_100012238()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void (***)(char *, uint64_t, uint64_t))(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v78 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  v83 = (char *)&v78 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v82 = (void (**)(char *, char *))((char *)&v78 - v13);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v81 = (char *)&v78 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  Class v79 = (char *)&v78 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v80 = (char *)&v78 - v19;
  __chkstk_darwin(v18);
  id v78 = (char *)&v78 - v20;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  id v24 = (char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v25 = *(void **)&v1[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_nrDevice];
  id v26 = [self npto_photosMemoriesSyncCapability];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  LODWORD(v24) = [v25 supportsCapability:isa];

  if (!v24)
  {
    uint64_t v50 = sub_100006D24();
    v3[2](v6, v50, v2);
    uint64_t v51 = v1;
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    int64_t v29 = v3;
    if (!os_log_type_enabled(v52, v53))
    {

      uint64_t v52 = v51;
      goto LABEL_19;
    }
    os_log_type_t v54 = (uint8_t *)swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    uint64_t v82 = (void (**)(char *, char *))v6;
    uint64_t v56 = (void *)v55;
    v83 = (char *)v2;
    *(_DWORD *)os_log_type_t v54 = 138412290;
    uint64_t v85 = (uint64_t)v25;
    id v57 = v25;
    uint64_t v2 = (uint64_t)v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v56 = v25;

    _os_log_impl((void *)&_mh_execute_header, v52, v53, "SyncedMemory is not a valid capability on %@.", v54, 0xCu);
    sub_100006290((uint64_t *)&unk_1000A1120);
    swift_arrayDestroy();
    uint64_t v6 = (char *)v82;
    swift_slowDealloc();
    goto LABEL_14;
  }
  uint64_t v28 = *(void **)&v1[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_preferenceAccessor];
  if (!objc_msgSend(v28, "npto_appPhotosSyncingEnabled"))
  {
    uint64_t v58 = sub_100006D24();
    v3[2](v9, v58, v2);
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      id v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "SyncedMemory is stopped because photos syncing setting is disabled.", v61, 2u);
      swift_slowDealloc();
    }

    ((void (*)(char *, uint64_t))v3[1])(v9, v2);
    return 0;
  }
  int64_t v29 = v3;
  if (!PLIsFeaturedContentAllowed())
  {
    uint64_t v62 = sub_100006D24();
    os_log_type_t v63 = v83;
    v3[2](v83, v62, v2);
    BOOL v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "SyncedMemory is disabled because Show Featured Content is off in iOS Photos settings.", v66, 2u);
      swift_slowDealloc();
    }

    ((void (*)(char *, uint64_t))v3[1])(v63, v2);
    return 0;
  }
  if (!objc_msgSend(v28, "npto_memoriesSyncingEnabled"))
  {
    uint64_t v67 = sub_100006D24();
    uint64_t v6 = (char *)v82;
    v3[2]((char *)v82, v67, v2);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v52, v68)) {
      goto LABEL_19;
    }
    uint64_t v69 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v69 = 0;
    uint64_t v70 = "SyncedMemory is disabled.";
LABEL_31:
    _os_log_impl((void *)&_mh_execute_header, v52, v68, v70, v69, 2u);
LABEL_14:
    swift_slowDealloc();
    goto LABEL_19;
  }
  uint64_t result = [self defaultWorkspace];
  if (result)
  {
    id v31 = result;
    NSString v32 = String._bridgeToObjectiveC()();
    unsigned int v33 = [v31 applicationIsInstalled:v32];

    if (v33)
    {
      id v34 = sub_100012C68();
      if (v34)
      {
        id v35 = v34;
        id v36 = (void *)sub_1000112C0();
        NSString v37 = v80;
        if (v36)
        {
          uint64_t v38 = v36;
          if ((uint64_t)[v36 count] >= 1)
          {
            uint64_t v39 = v35;
            uint64_t v40 = sub_100006D24();
            uint64_t v41 = v78;
            v3[2](v78, v40, v2);
            uint64_t v42 = v39;
            uint64_t v43 = Logger.logObject.getter();
            os_log_type_t v44 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v43, v44))
            {
              uint64_t v45 = (uint8_t *)swift_slowAlloc();
              uint64_t v46 = swift_slowAlloc();
              v83 = (char *)v2;
              uint64_t v84 = (uint64_t)v35;
              uint64_t v85 = v46;
              uint64_t v82 = (void (**)(char *, char *))v3;
              *(_DWORD *)uint64_t v45 = 136315138;
              uint64_t v47 = v42;
              sub_100006290(&qword_1000A0E08);
              uint64_t v48 = String.init<A>(describing:)();
              uint64_t v84 = sub_10000B6D8(v48, v49, &v85);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v43, v44, "SyncedMemory selected collection %s.", v45, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              v82[1](v78, v83);
            }
            else
            {

              ((void (*)(char *, uint64_t))v3[1])(v41, v2);
            }
            return v35;
          }
        }
        uint64_t v73 = sub_100006D24();
        v3[2](v37, v73, v2);
        uint64_t v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v74, v75))
        {
          id v76 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v76 = 0;
          _os_log_impl((void *)&_mh_execute_header, v74, v75, "No assets in SyncedMemory.", v76, 2u);
          swift_slowDealloc();
          id v77 = v35;
        }
        else
        {
          id v77 = v74;
          uint64_t v74 = v35;
        }

        ((void (*)(char *, uint64_t))v3[1])(v37, v2);
        return 0;
      }
      uint64_t v72 = sub_100006D24();
      uint64_t v6 = v79;
      v3[2](v79, v72, v2);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v52, v68))
      {
LABEL_19:

        ((void (*)(char *, uint64_t))v29[1])(v6, v2);
        return 0;
      }
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v69 = 0;
      uint64_t v70 = "No SyncedMemory available for the day.";
    }
    else
    {
      uint64_t v71 = sub_100006D24();
      uint64_t v6 = v81;
      v3[2](v81, v71, v2);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v52, v68)) {
        goto LABEL_19;
      }
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v69 = 0;
      uint64_t v70 = "SyncedMemory is disabled because Photos app is not installed.";
    }
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

id sub_100012C68()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  sub_100011178((uint64_t)v11, (uint64_t)v12);
  if (!v13)
  {
    sub_100006AE4((uint64_t)v12);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v3 = self;
  sub_100006290(&qword_1000A0E00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100079C30;
  *(void *)(v4 + 32) = v9;
  *(void *)(v4 + 40) = v10;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = sub_1000156E4();
  id v7 = [v3 npto_fetchMemoriesWithLocalIdentifiers:isa, v6];

  return v7;
}

void *sub_100012E1C()
{
  return sub_1000159E8((uint64_t (*)(uint64_t))sub_1000112C0, "SyncedMemory selected %s assets.");
}

void *sub_100012EC8()
{
  return sub_1000159E8((uint64_t (*)(uint64_t))sub_100011424, "SyncedMemory selected %s key assets.");
}

uint64_t variable initialization expression of SyncCollectionTargetItem._subtype()
{
  return 5;
}

uint64_t sub_100012F84()
{
  NSString v1 = *(void **)(v0 + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_preferenceAccessor);
  id v2 = (void *)NPTOPreferencesAppPhotosSyncingEnabledKey;
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v27 = sub_100015DA0;
  uint64_t v28 = v3;
  aBlock = _NSConcreteStackBlock;
  uint64_t v24 = 1107296256;
  char v25 = sub_100007D64;
  id v26 = &unk_100091E80;
  uint64_t v4 = _Block_copy(&aBlock);
  id v5 = v2;
  swift_release();
  id v6 = [v1 changeObserverForKey:v5 queue:0 block:v4];
  _Block_release(v4);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  uint64_t v7 = v0 + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_photosSyncingPreferenceObserver;
  swift_beginAccess();
  sub_100007D80((uint64_t)&aBlock, v7);
  swift_endAccess();
  uint64_t v8 = (void *)NPTOPreferencesMemoriesSyncingEnabledKey;
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v27 = sub_100015DA0;
  uint64_t v28 = v9;
  aBlock = _NSConcreteStackBlock;
  uint64_t v24 = 1107296256;
  char v25 = sub_100007D64;
  id v26 = &unk_100091EA8;
  uint64_t v10 = _Block_copy(&aBlock);
  id v11 = v8;
  swift_release();
  id v12 = [v1 changeObserverForKey:v11 queue:0 block:v10];
  _Block_release(v10);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  uint64_t v13 = v0 + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_memoriesSyncingPreferenceObserver;
  swift_beginAccess();
  sub_100007D80((uint64_t)&aBlock, v13);
  swift_endAccess();
  uint64_t v14 = *(void **)(v0 + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_internalQueue);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v16 = objc_allocWithZone((Class)NPTODarwinNotificationObserver);
  id v17 = v14;
  swift_retain();
  NSString v18 = String._bridgeToObjectiveC()();
  id v27 = sub_100015DA0;
  uint64_t v28 = v15;
  aBlock = _NSConcreteStackBlock;
  uint64_t v24 = 1107296256;
  char v25 = sub_100007D64;
  id v26 = &unk_100091ED0;
  uint64_t v19 = _Block_copy(&aBlock);
  uint64_t v20 = (void **)[v16 initWithNotificationName:v18 queue:v17 block:v19];

  _Block_release(v19);
  swift_release();
  swift_release();
  id v26 = (void *)sub_10000BE18(0, (unint64_t *)&unk_1000A0D40);
  aBlock = v20;
  uint64_t v21 = v0 + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_photosPreferenceObserver;
  swift_beginAccess();
  sub_100007D80((uint64_t)&aBlock, v21);
  return swift_endAccess();
}

void sub_100013370()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = (void *)Strong;
    id v6 = *(void **)(Strong + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_nrDevice);
    id v7 = [self npto_photosMemoriesSyncCapability];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    unsigned int v9 = [v6 supportsCapability:isa];

    if (v9 && (uint64_t v10 = (*(uint64_t (**)(void))((swift_isaMask & *v5) + 0x148))()) != 0)
    {
      id v11 = (void *)v10;
      id v12 = v5;
      [v11 contentProviderDidInvalidateContent:v12];

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void sub_100013540()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006290(&qword_1000A0E60);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = __chkstk_darwin(v2);
  unint64_t v6 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v24[2] = (char *)v24 - v6;
  __chkstk_darwin(v5);
  v24[1] = (char *)v24 - v6;
  uint64_t v7 = sub_100006290(&qword_1000A0E68);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  uint64_t v26 = v8;
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v12 = (char *)v24 - v6;
  uint64_t v13 = sub_100006290(&qword_1000A0D50);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  id v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v18 = *(void **)(v1 + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_latestMemoryObserver);
  (*(void (**)(uint64_t))((swift_isaMask & *v18) + 0x88))(v15);
  sub_100006290(&qword_1000A0C28);
  v24[0] = &protocol conformance descriptor for Published<A>.Publisher;
  sub_100011134(&qword_1000A0E70, &qword_1000A0E60);
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100011134(&qword_1000A0E78, &qword_1000A0D50);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v19 = self;
  id v20 = sub_1000156E4();
  id v21 = [v19 npto_fetchMemoriesWithOptions:v20];

  (*(void (**)(id))((swift_isaMask & *v18) + 0xA8))(v21);
  uint64_t v22 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v1
                                                            + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_currentMemoryAssetsObserver))
                             + 0x88))();
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v1
                                                                 + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_currentMemoryKeyAssetsObserver))
                                  + 0x88))(v22);
  sub_100011134(&qword_1000A0E80, &qword_1000A0E60);
  Publishers.Merge.init(_:_:)();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100011134(&qword_1000A0E88, &qword_1000A0E68);
  uint64_t v23 = v25;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v23);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  sub_1000146A0();
}

void sub_100013AE4(void **a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  id v12 = (char *)Strong;
  uint64_t v13 = *(void **)(Strong + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_nrDevice);
  id v14 = [self npto_photosMemoriesSyncCapability];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  unsigned int v16 = [v13 supportsCapability:isa];

  if (!v16) {
    goto LABEL_30;
  }
  id v17 = [v10 fetchedObjects];
  if (!v17) {
    goto LABEL_12;
  }
  sub_10000BE18(0, (unint64_t *)&unk_1000A0E90);
  unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    id v17 = (id)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  id v17 = *(id *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v17)
  {
LABEL_11:
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v22 = 0;
    goto LABEL_13;
  }
LABEL_6:
  if ((v18 & 0xC000000000000001) != 0)
  {
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v19 = *(id *)(v18 + 32);
  }
  id v20 = v19;
  swift_bridgeObjectRelease();
  id v21 = [v20 localIdentifier];

  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v17 = v23;

LABEL_13:
  id v24 = sub_100012C68();
  uint64_t v25 = v24;
  if (v24)
  {
    id v26 = [v24 firstObject];

    if (v26)
    {
      id v27 = [v26 localIdentifier];

      uint64_t v25 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v26 = v28;

      if (v17) {
        goto LABEL_16;
      }
      goto LABEL_21;
    }
    uint64_t v25 = 0;
    if (!v17)
    {
LABEL_21:
      if (v26) {
        goto LABEL_25;
      }
LABEL_30:

      return;
    }
  }
  else
  {
    id v26 = 0;
    if (!v17) {
      goto LABEL_21;
    }
  }
LABEL_16:
  if (v26)
  {
    if ((void *)v22 == v25 && v17 == v26)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v36) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
LABEL_25:
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v29 = sub_100006D24();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v29, v2);
  id v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    NSString v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Latest memory has been updated. Scheduling SyncedMemory updates.", v32, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  unsigned int v33 = *(void **)&v12[OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_updateScheduler];
  id v34 = *(void (**)(void))((swift_isaMask & *v33) + 0xE0);
  id v35 = v33;
  v34();
}

void sub_100013FD0()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = (void *)Strong;
    uint64_t v10 = *(void **)(Strong + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_nrDevice);
    id v11 = [self npto_photosMemoriesSyncCapability];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    unsigned int v13 = [v10 supportsCapability:isa];

    if (!v13) {
      goto LABEL_7;
    }
    uint64_t v14 = sub_100006D24();
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v14, v0);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "SyncedMemory assets have been updated. Invalidating content.", v17, 2u);
      swift_slowDealloc();
    }

    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v9) + 0x148))(v18);
    if (v19)
    {
      id v20 = (void *)v19;
      id v21 = v9;
      [v20 contentProviderDidInvalidateContent:v21];

      swift_unknownObjectRelease();
    }
    else
    {
LABEL_7:
    }
  }
}

void sub_1000142E0()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - v5;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v12 = Strong;
    unsigned int v13 = *(void **)(Strong + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_nrDevice);
    id v14 = [self npto_photosMemoriesSyncCapability];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    unsigned int v16 = [v13 supportsCapability:isa];

    uint64_t v17 = sub_100006D24();
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
    if (v16)
    {
      v18(v6, v17, v0);
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        id v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "NRDevice capabilities did change. Scheduling SyncedMemory updates.", v21, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
      uint64_t v22 = *(Class *)((char *)&v12->isa + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_updateScheduler);
      uint64_t v23 = *(void (**)(void))((swift_isaMask & *v22) + 0xE0);
      id v24 = v22;
      v23();

      uint64_t v25 = *(Class *)((char *)&v12->isa + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_devicePropertyObserver);
      *(Class *)((char *)&v12->isa + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_devicePropertyObserver) = 0;
    }
    else
    {
      v18(v4, v17, v0);
      id v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "NRDevice capabilities did change, but still not support SyncedMemory .", v28, 2u);
        swift_slowDealloc();
        uint64_t v29 = v12;
      }
      else
      {
        uint64_t v29 = v26;
        id v26 = v12;
      }

      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    }
  }
}

void sub_1000146A0()
{
  uint64_t v1 = v0;
  id v2 = sub_100012C68();
  if (!v2) {
    return;
  }
  uint64_t v3 = v2;
  id v4 = [v2 firstObject];

  if (!v4) {
    return;
  }
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_currentMemoryAssetsObserver);
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_nrDevice);
  id v7 = [self standardUserDefaults];
  NSString v8 = String._bridgeToObjectiveC()();
  unsigned int v9 = [v7 BOOLForKey:v8];

  if (v9)
  {
    uint64_t v10 = self;
    id v11 = sub_100015898(v6);
    id v12 = [v10 fetchExtendedCuratedAssetsInAssetCollection:v4 options:v11];

    if (!v12)
    {
      __break(1u);
      return;
    }
  }
  else
  {
    self;
    uint64_t v13 = swift_dynamicCastObjCClass();
    id v14 = self;
    id v15 = sub_100015898(v6);
    id v12 = [v14 fetchReducedCuratedAssetsInMemory:v13 options:v15];

    if (!v12)
    {
LABEL_13:
      __break(1u);
      return;
    }
  }
  (*(void (**)(id))((swift_isaMask & *v5) + 0xA8))(v12);

  unsigned int v16 = *(void **)(v1 + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_currentMemoryKeyAssetsObserver);
  uint64_t v17 = self;
  sub_10000BE18(0, &qword_1000A0C30);
  id v18 = static PHFetchOptions.npto_defaultAssetFetchOptions(for:)(v6);
  sub_100006290((uint64_t *)&unk_1000A0E40);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_100079CF0;
  id v20 = objc_allocWithZone((Class)NSSortDescriptor);
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 initWithKey:v21 ascending:1];

  *(void *)(v19 + 32) = v22;
  specialized Array._endMutation()();
  sub_10000BE18(0, (unint64_t *)&unk_1000A0D20);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v18 setSortDescriptors:isa];

  [v18 setFetchLimit:1];
  id v24 = [v17 fetchKeyCuratedAssetInAssetCollection:v4 referenceAsset:0 options:v18];

  if (!v24)
  {
    __break(1u);
    goto LABEL_13;
  }
  (*(void (**)(id))((swift_isaMask & *v16) + 0xA8))(v24);
}

id sub_100014A8C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PhotosAppMemoriesContentProvider();
  return [super dealloc];
}

void sub_100014BBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v37 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = self;
  id v6 = sub_1000156E4();
  id v7 = [v5 npto_fetchMemoriesWithOptions:v6];

  NSString v8 = *(void **)((char *)v1 + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_preferenceAccessor);
  id v9 = sub_100012C68();
  id v38 = v9;
  if (v9)
  {
    id v10 = [v9 firstObject];
    id v11 = v10;
    if (v10)
    {
      id v12 = [v10 localIdentifier];

      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v11 = v14;
    }
    else
    {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
    id v11 = 0;
  }
  id v15 = [v7 firstObject];
  if (!v15)
  {
    if (v11) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  unsigned int v16 = v15;
  id v17 = [v15 localIdentifier];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v20 = v19;

  if (!v11)
  {
    if (v20)
    {
LABEL_18:
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
LABEL_24:
    uint64_t v31 = sub_100006D24();
    uint64_t v32 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v4, v31, v2);
    unsigned int v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      id v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Skipped updating SyncedMemory because there is no change.", v35, 2u);
      swift_slowDealloc();
      char v36 = v7;
    }
    else
    {
      char v36 = v33;
      unsigned int v33 = v7;
    }

    (*(void (**)(char *, uint64_t))(v32 + 8))(v4, v2);
    return;
  }
  if (!v20) {
    goto LABEL_18;
  }
  if (v13 == v18 && v11 == v20)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v22) {
    goto LABEL_24;
  }
LABEL_19:
  uint64_t v23 = v7;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = v7;
  v25[3] = v8;
  v25[4] = ObjectType;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = sub_100015CF8;
  *(void *)(v26 + 24) = v25;
  aBlock[4] = sub_10000C378;
  aBlock[5] = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100008378;
  aBlock[3] = &unk_100091DE0;
  os_log_type_t v27 = _Block_copy(aBlock);
  uint64_t v28 = v23;
  id v29 = v8;
  swift_retain();
  swift_release();
  [v29 performBatchUpdates:v27 synchronizeToRemoteDevice:0];

  _Block_release(v27);
  LODWORD(v27) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v27)
  {
    __break(1u);
  }
  else
  {
    sub_1000146A0();
    uint64_t v30 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x148))();
    if (v30)
    {
      [v30 contentProviderDidInvalidateContent:v1];
      swift_unknownObjectRelease();
    }
  }
}

id sub_100015074()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_nrDevice);
  id v6 = [self npto_photosSyncV2Capability];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  id v8 = [v5 supportsCapability:isa];

  return v8;
}

uint64_t sub_10001519C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_nrDevice);
  id v6 = [self npto_photosSyncV2Capability];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  LODWORD(v1) = [v5 supportsCapability:isa];

  return v1 ^ 1;
}

void sub_1000152C8(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v28 - v9;
  if (a1 && (id v11 = [a1 firstObject]) != 0)
  {
    id v12 = v11;
    id v13 = [v11 localIdentifier];

    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    uint64_t v17 = sub_100006D24();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v17, v4);
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v29 = v14;
      uint64_t v20 = swift_slowAlloc();
      uint64_t v28 = a2;
      NSString v21 = (uint8_t *)v20;
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)NSString v21 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_10000B6D8(v29, v16, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Setting SyncedMemory identifier to %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v28;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v26 = String._bridgeToObjectiveC()();
    [a2 setObject:v27 forKey:v26];
  }
  else
  {
    uint64_t v22 = sub_100006D24();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v22, v4);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Removing SyncedMemory identifier", v25, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    NSString v26 = String._bridgeToObjectiveC()();
    [a2 removeObjectForKey:v26];
  }
}

uint64_t sub_1000156A4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000156DC()
{
}

id sub_1000156E4()
{
  id v0 = [objc_allocWithZone((Class)PHFetchOptions) init];
  [v0 setFetchLimit:1];
  [v0 setIncludePendingMemories:1];
  sub_100006290((uint64_t *)&unk_1000A0E40);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100079CF0;
  id v2 = objc_allocWithZone((Class)NSSortDescriptor);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 initWithKey:v3 ascending:0];

  *(void *)(v1 + 32) = v4;
  specialized Array._endMutation()();
  sub_10000BE18(0, (unint64_t *)&unk_1000A0D20);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v0 setSortDescriptors:isa];

  sub_10000BE18(0, (unint64_t *)&qword_1000A0E50);
  uint64_t v6 = NSPredicate.init(format:_:)();
  [v0 setPredicate:v6];

  return v0;
}

id sub_100015898(void *a1)
{
  sub_10000BE18(0, &qword_1000A0C30);
  id v2 = static PHFetchOptions.npto_defaultAssetFetchOptions(for:)(a1);
  sub_100006290((uint64_t *)&unk_1000A0E40);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100079CF0;
  id v4 = objc_allocWithZone((Class)NSSortDescriptor);
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 initWithKey:v5 ascending:1];

  *(void *)(v3 + 32) = v6;
  specialized Array._endMutation()();
  sub_10000BE18(0, (unint64_t *)&unk_1000A0D20);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 setSortDescriptors:isa];

  [v2 setFetchLimit:50];
  return v2;
}

void *sub_1000159E8(uint64_t (*a1)(uint64_t), const char *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void *)a1(v6);
  uint64_t v10 = sub_100006D24();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
  id v11 = v9;
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v24 = v20;
    *(_DWORD *)uint64_t v14 = 136315138;
    NSString v21 = a2;
    if (v9) {
      id v15 = [v11 count];
    }
    else {
      id v15 = 0;
    }
    uint64_t v22 = (uint64_t)v15;
    BOOL v23 = v9 == 0;
    sub_100006290(&qword_1000A0D38);
    uint64_t v16 = String.init<A>(describing:)();
    uint64_t v22 = sub_10000B6D8(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v21, v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v9;
}

uint64_t sub_100015C4C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100015C84()
{
  return sub_100015D1C(&OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_currentMemoryKeyAssetsObserver);
}

uint64_t sub_100015C90()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100015CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100015CB0()
{
  return swift_release();
}

uint64_t sub_100015CB8()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_100015CF8()
{
  sub_1000152C8(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100015D00()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100015D10()
{
  return sub_100015D1C(&OBJC_IVAR___NPTOPhotosAppMemoriesContentProvider_currentMemoryAssetsObserver);
}

uint64_t sub_100015D1C(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  *uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v1 + 24) + *a1)) + 0x70))();

  return _objc_release_x1();
}

uint64_t sub_100015D90()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100015DA0()
{
}

void sub_100015DBC(void **a1)
{
}

void sub_100015DC4()
{
}

uint64_t variable initialization expression of ErrorResponse._domain()
{
  return 0;
}

uint64_t variable initialization expression of SyncLibraryInfoResponse._library@<X0>(uint64_t a1@<X8>)
{
  return sub_100015E38(type metadata accessor for SyncLibrary, a1);
}

uint64_t variable initialization expression of SyncLibraryInfoResponse._collectionTargetList@<X0>(uint64_t a1@<X8>)
{
  return sub_100015E38(type metadata accessor for SyncCollectionTargetList, a1);
}

uint64_t sub_100015E38@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t variable initialization expression of SyncAsset._uuidData()
{
  return 0;
}

uint64_t variable initialization expression of SyncAssetResourceRequest._isUserInitiated()
{
  return 2;
}

uint64_t variable initialization expression of SyncAsset._date()
{
  return 0;
}

void *variable initialization expression of SyncLibrary.asset()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of SyncCollectionTargetItem._collectionTarget()
{
  return 0x100000000;
}

uint64_t variable initialization expression of SyncCollectionTargetItem._type()
{
  return 4;
}

void type metadata accessor for IDSPushMessagePriority(uint64_t a1)
{
}

void type metadata accessor for IDSMessagePriority(uint64_t a1)
{
}

void sub_100015F24(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

BOOL sub_100015F70(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100015F84()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100015FCC()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100015FF8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *sub_10001604C(void *a1, void *a2)
{
  uint64_t v3 = v2;
  swift_defaultActor_initialize();
  v3[17] = 0;
  v3[18] = 0;
  v3[19] = 0;
  v3[22] = 0;
  v3[23] = 0;
  v3[21] = 0;
  v3[14] = a1;
  v3[15] = a2;
  uint64_t v6 = type metadata accessor for IDSMessagingService();
  swift_allocObject();
  id v7 = a1;
  id v8 = a2;
  swift_retain();
  id v9 = sub_100033454(v8, v7);
  v25[3] = v6;
  v25[4] = &off_1000925F0;
  v25[0] = v9;
  type metadata accessor for InitialSyncServerController();
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = sub_10001FE68((uint64_t)v25, v6);
  __chkstk_darwin(v11);
  os_log_type_t v13 = (uint64_t *)((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = *v13;
  id v16 = v7;
  swift_retain();
  id v17 = sub_10001F3B0(v16, v15, v10);
  sub_10000C2CC((uint64_t)v25);
  v3[16] = v9;
  v3[20] = v17;
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v18 = (objc_class *)type metadata accessor for ServerDeviceController();
  v24.receiver = v3;
  v24.super_class = v18;
  id v19 = [super init];
  sub_10000BE18(0, &qword_1000A1108);
  uint64_t v20 = v19;
  uint64_t v21 = sub_10004B800((uint64_t)&unk_1000A1118, (uint64_t)v20);
  swift_release();
  swift_release();

  swift_release();
  v20[22] = v21;
  swift_release();
  return v20;
}

uint64_t sub_1000162A0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001634C;
  v3[5] = a1;
  return _swift_task_switch(sub_100016948, a1, 0);
}

uint64_t sub_10001634C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100016488()
{
  return sub_1000165EC((uint64_t)&unk_100092308, (uint64_t)&unk_100092330, (uint64_t)&unk_1000A1298);
}

uint64_t sub_1000164C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_1000164E4, a4, 0);
}

uint64_t sub_1000164E4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_10000BE18(0, &qword_1000A1108);
  swift_retain();
  uint64_t v2 = sub_10004B800((uint64_t)&unk_1000A12B0, v1);
  swift_release();
  *(void *)(v1 + 184) = v2;
  swift_release();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1000165B0()
{
  return sub_1000165EC((uint64_t)&unk_1000922B8, (uint64_t)&unk_1000922E0, (uint64_t)&unk_1000A1280);
}

uint64_t sub_1000165EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v6 = sub_100006290(&qword_1000A1380);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  uint64_t v11 = (void *)swift_allocObject();
  _OWORD v11[2] = 0;
  v11[3] = 0;
  v11[4] = v5;
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  swift_retain();
  if (v12 == 1)
  {
    sub_10000BD30((uint64_t)v8, &qword_1000A1380);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (v11[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v15;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
  }
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = v11;
  if (v14 | v13)
  {
    v18[0] = 0;
    v18[1] = 0;
    v18[2] = v13;
    v18[3] = v14;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_100016820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_100021434;
  v6[3] = a4;
  return _swift_task_switch(sub_10001824C, a4, 0);
}

uint64_t sub_1000168E4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = swift_retain();
  a3(v4);

  return swift_release();
}

uint64_t sub_100016928()
{
  *(void *)(v1 + 40) = v0;
  return _swift_task_switch(sub_100016948, v0, 0);
}

uint64_t sub_100016948()
{
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006D88(v1, (uint64_t)qword_1000A4F48);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[DeviceController] Finishing setup work after first unlock.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[5];

  uint64_t v6 = *(void **)(v5 + 112);
  v0[6] = v6;
  id v7 = [objc_allocWithZone((Class)NPTOCompanionSyncDeviceContentController) initWithDevice:v6];
  v0[7] = v7;
  [v7 setDelegate:v5];
  type metadata accessor for SyncSessionMessageHandler();
  uint64_t v8 = swift_allocObject();
  v0[8] = v8;
  *(void *)(v8 + 16) = v6;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = *(void *)(v5 + 128);
  v0[9] = v9;
  uint64_t v10 = swift_allocObject();
  v0[10] = v10;
  *(void *)(v10 + 16) = &unk_1000A1200;
  *(void *)(v10 + 24) = v8;
  id v11 = v6;
  id v12 = v7;
  swift_retain();
  return _swift_task_switch(sub_100016B14, v9, 0);
}

uint64_t sub_100016B14()
{
  uint64_t v5 = v0;
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 40);
  v4[3] = sub_100006290(&qword_1000A1218);
  v4[4] = &off_100092868;
  v4[0] = &unk_1000A1210;
  v4[1] = v1;
  swift_beginAccess();
  swift_retain();
  sub_10001D2B0((uint64_t)v4, 2);
  swift_endAccess();
  swift_release();
  return _swift_task_switch(sub_100016BF8, v2, 0);
}

uint64_t sub_100016BF8()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = swift_allocObject();
  v0[11] = v3;
  *(void *)(v3 + 16) = &unk_1000A1228;
  *(void *)(v3 + 24) = v1;
  swift_retain();
  return _swift_task_switch(sub_100016C9C, v2, 0);
}

uint64_t sub_100016C9C()
{
  uint64_t v5 = v0;
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 40);
  v4[3] = sub_100006290(&qword_1000A1240);
  v4[4] = &off_100092868;
  v4[0] = &unk_1000A1238;
  v4[1] = v1;
  swift_beginAccess();
  swift_retain();
  sub_10001D2B0((uint64_t)v4, 3);
  swift_endAccess();
  swift_release();
  return _swift_task_switch(sub_100016D84, v2, 0);
}

uint64_t sub_100016D84()
{
  if ([*(id *)(v0 + 48) isTinkerPaired])
  {
    uint64_t v1 = *(void **)(v0 + 56);
    uint64_t v2 = *(void *)(v0 + 64);
    uint64_t v3 = *(void **)(v0 + 40);
    uint64_t v4 = (void *)v3[17];
    v3[17] = v1;
    id v5 = v1;

    v3[18] = v2;
    swift_retain();
    swift_release();
    if (v3[20]) {
      sub_100026BE4();
    }
    uint64_t v6 = *(void **)(v0 + 56);
    *(void *)(*(void *)(v0 + 40) + 176) = 0;
    swift_release();

    swift_release();
    id v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 72);
    id v10 = [objc_allocWithZone((Class)type metadata accessor for WatchAssetsImportController()) init];
    *(void *)(v0 + 96) = v10;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v10;
    uint64_t v12 = swift_allocObject();
    *(void *)(v0 + 104) = v12;
    *(void *)(v12 + 16) = &unk_1000A1250;
    *(void *)(v12 + 24) = v11;
    id v13 = v10;
    return _swift_task_switch(sub_100016F04, v9, 0);
  }
}

uint64_t sub_100016F04()
{
  uint64_t v5 = v0;
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 40);
  v4[3] = sub_100006290(&qword_1000A1268);
  v4[4] = &off_100092858;
  v4[0] = &unk_1000A1260;
  v4[1] = v1;
  swift_beginAccess();
  swift_retain();
  sub_10001D2B0((uint64_t)v4, 4);
  swift_endAccess();
  swift_release();
  return _swift_task_switch(sub_100016FEC, v2, 0);
}

uint64_t sub_100016FEC()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = *(void **)(v1 + 152);
  *(void *)(v1 + 152) = v0[12];

  uint64_t v3 = (void *)v0[7];
  uint64_t v4 = v0[8];
  uint64_t v5 = (void *)v0[5];
  uint64_t v6 = (void *)v5[17];
  v5[17] = v3;
  id v7 = v3;

  v5[18] = v4;
  swift_retain();
  swift_release();
  if (v5[20]) {
    sub_100026BE4();
  }
  uint64_t v8 = (void *)v0[7];
  *(void *)(v0[5] + 176) = 0;
  swift_release();

  swift_release();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000170BC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 128) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000213B4;
  return sub_10001B078(v2 + 16, a2);
}

uint64_t sub_10001716C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)(v3 + 120) = a1;
  id v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 128) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_100017258;
  return v7(v3 + 16, a2);
}

uint64_t sub_100017258()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (!v0)
  {
    uint64_t v4 = *(void *)(v2 + 120);
    long long v5 = *(_OWORD *)(v2 + 16);
    long long v6 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v4 + 32) = v6;
    *(_OWORD *)uint64_t v4 = v5;
    long long v7 = *(_OWORD *)(v2 + 64);
    long long v8 = *(_OWORD *)(v2 + 80);
    long long v9 = *(_OWORD *)(v2 + 96);
    *(void *)(v4 + 96) = *(void *)(v2 + 112);
    *(_OWORD *)(v4 + 64) = v8;
    *(_OWORD *)(v4 + 80) = v9;
    *(_OWORD *)(v4 + 48) = v7;
  }
  id v10 = *(uint64_t (**)(void))(v3 + 8);
  return v10();
}

uint64_t sub_100017380(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 128) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000213B4;
  return sub_10001BC04(v2 + 16, a2);
}

uint64_t sub_100017430(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)(v3 + 120) = a1;
  long long v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 128) = v5;
  *long long v5 = v3;
  v5[1] = sub_1000213B4;
  return v7(v3 + 16, a2);
}

uint64_t sub_10001751C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100021434;
  return sub_10004F6C0(a1);
}

uint64_t sub_1000175B4(uint64_t *a1, int *a2)
{
  uint64_t v3 = *a1;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10001768C;
  return v6(v3);
}

uint64_t sub_10001768C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100017780(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_1000177A0, a1, 0);
}

uint64_t sub_1000177A0()
{
  uint64_t v1 = *(void *)(v0[2] + 176);
  v0[3] = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[4] = v2;
    uint64_t v3 = sub_100006290((uint64_t *)&unk_1000A1150);
    *uint64_t v2 = v0;
    v2[1] = sub_1000178F8;
    return Task.value.getter(v3, v1, (char *)&type metadata for () + 8, v3, &protocol self-conformance witness table for Error);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v0[5] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100017ADC;
    uint64_t v5 = v0[2];
    v4[3] = v5;
    return _swift_task_switch(sub_100017C9C, v5, 0);
  }
}

uint64_t sub_1000178F8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    swift_errorRelease();
    swift_release();
    uint64_t v4 = sub_100017BD4;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 16);
    uint64_t v4 = sub_100017A2C;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100017A2C()
{
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100017ADC;
  uint64_t v2 = *(void *)(v0 + 16);
  v1[3] = v2;
  return _swift_task_switch(sub_100017C9C, v2, 0);
}

uint64_t sub_100017ADC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100017BD4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100017ADC;
  uint64_t v2 = *(void *)(v0 + 16);
  v1[3] = v2;
  return _swift_task_switch(sub_100017C9C, v2, 0);
}

uint64_t sub_100017C7C()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_100017C9C, v0, 0);
}

uint64_t sub_100017C9C()
{
  id v1 = objc_allocWithZone((Class)NPTOTransaction);
  NSString v2 = String._bridgeToObjectiveC()();
  v0[4] = [v1 initWithDescription:v2];

  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100006D88(v3, (uint64_t)qword_1000A4F48);
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[3];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    long long v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    v0[2] = v7;
    swift_retain();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v9 = v7;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[DeviceController] Resuming device controller: %@.", v8, 0xCu);
    sub_100006290((uint64_t *)&unk_1000A1120);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v10 = *(void *)(v0[3] + 128);
  v0[5] = v10;
  return _swift_task_switch(sub_100017ED4, v10, 0);
}

uint64_t sub_100017ED4()
{
  sub_100027280();
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *id v1 = v0;
  v1[1] = sub_100017F6C;
  return sub_1000185F0();
}

uint64_t sub_100017F6C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 56) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000180AC;
  return sub_100019690();
}

uint64_t sub_1000180AC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000181BC, v1, 0);
}

uint64_t sub_1000181BC()
{
  uint64_t v1 = (void *)v0[4];
  *(void *)(v0[3] + 184) = 0;

  swift_release();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_10001822C()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_10001824C, v0, 0);
}

uint64_t sub_10001824C()
{
  uint64_t v1 = v0[3];
  id v2 = objc_allocWithZone((Class)NPTOTransaction);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 initWithDescription:v3];
  v0[4] = v4;

  if (*(void *)(v1 + 184))
  {
    swift_retain();
    sub_100006290((uint64_t *)&unk_1000A1150);
    Task.cancel()();
    swift_release();
    *(void *)(v1 + 184) = 0;

    swift_release();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100006D88(v7, (uint64_t)qword_1000A4F48);
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[3];
    if (v10)
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      id v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      v0[2] = v11;
      swift_retain();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v13 = v11;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[DeviceController] Pausing device controller: %@.", v12, 0xCu);
      sub_100006290((uint64_t *)&unk_1000A1120);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v14 = *(void *)(v0[3] + 128);
    v0[5] = v14;
    return _swift_task_switch(sub_100018524, v14, 0);
  }
}

uint64_t sub_100018524()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_100027434();
  return _swift_task_switch(sub_100018590, v1, 0);
}

uint64_t sub_100018590()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000185F0()
{
  v1[34] = v0;
  v1[35] = type metadata accessor for SyncSignal(0);
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  v1[38] = type metadata accessor for SyncLibraryInfoResponse(0);
  v1[39] = swift_task_alloc();
  return _swift_task_switch(sub_1000186C4, v0, 0);
}

uint64_t sub_1000186C4()
{
  uint64_t v1 = *(void **)(v0[34] + 136);
  v0[40] = v1;
  if (!v1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  v1;
  id v2 = (void *)swift_task_alloc();
  v0[41] = v2;
  *id v2 = v0;
  v2[1] = sub_1000187DC;
  uint64_t v3 = v0[39];
  return sub_100021D40(v3);
}

uint64_t sub_1000187DC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 272);
  if (v0) {
    id v4 = sub_10001944C;
  }
  else {
    id v4 = sub_100018908;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100018908()
{
  uint64_t v28 = v0;
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 280);
  UnknownStorage.init()();
  uint64_t v5 = (void *)(v3 + *(int *)(v4 + 20));
  *uint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v6 = (uint64_t *)(v1 + *(int *)(v2 + 28));
  unint64_t v7 = v6[1];
  if (v7)
  {
    uint64_t v8 = *v6;
    unint64_t v9 = v7;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  uint64_t v10 = *(void *)(v0 + 336);
  uint64_t v12 = *(void *)(v0 + 288);
  uint64_t v11 = *(void *)(v0 + 296);
  *uint64_t v5 = v8;
  v5[1] = v9;
  sub_100020328(v11, v12, type metadata accessor for SyncSignal);
  swift_bridgeObjectRetain();
  sub_1000357CC(v12, v0 + 16);
  if (v10)
  {
    id v13 = *(void **)(v0 + 320);
    uint64_t v14 = *(void *)(v0 + 296);
    sub_100020390(*(void *)(v0 + 312), type metadata accessor for SyncLibraryInfoResponse);

    sub_100020390(v14, type metadata accessor for SyncSignal);
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100006D88(v15, (uint64_t)qword_1000A4F48);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)(v0 + 248) = v10;
      swift_errorRetain();
      sub_100006290((uint64_t *)&unk_1000A1150);
      uint64_t v19 = String.init<A>(describing:)();
      *(void *)(v0 + 256) = sub_10000B6D8(v19, v20, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[DeviceController] Failed to send sync signal to watch due to %s.", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  else
  {
    uint64_t v21 = *(void *)(*(void *)(v0 + 272) + 128);
    long long v22 = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 168) = *(_OWORD *)(v0 + 64);
    long long v23 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 200) = v23;
    long long v24 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v0 + 136) = v24;
    *(void *)(v0 + 344) = v21;
    *(void *)(v0 + 216) = *(void *)(v0 + 112);
    *(_OWORD *)(v0 + 152) = v22;
    return _swift_task_switch(sub_100018C84, v21, 0);
  }
}

uint64_t sub_100018C84()
{
  uint64_t v1 = v0[43];
  uint64_t v2 = swift_task_alloc();
  v0[44] = v2;
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = v0 + 15;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[45] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100018D74;
  return withCancellationHandlingContinuation<A>(timeout:_:)();
}

uint64_t sub_100018D74()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 368) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 344);
    uint64_t v4 = sub_100018E9C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 272);
    swift_task_dealloc();
    uint64_t v4 = sub_100019194;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100018E9C()
{
  uint64_t v1 = *(void *)(v0 + 272);
  swift_task_dealloc();
  return _swift_task_switch(sub_100018F08, v1, 0);
}

uint64_t sub_100018F08()
{
  uint64_t v13 = v0;
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 296);

  sub_100020390(v1, type metadata accessor for SyncLibraryInfoResponse);
  sub_100021260((id *)(v0 + 16));
  sub_100020390(v2, type metadata accessor for SyncSignal);
  uint64_t v3 = *(void *)(v0 + 368);
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100006D88(v4, (uint64_t)qword_1000A4F48);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v0 + 248) = v3;
    swift_errorRetain();
    sub_100006290((uint64_t *)&unk_1000A1150);
    uint64_t v8 = String.init<A>(describing:)();
    *(void *)(v0 + 256) = sub_10000B6D8(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[DeviceController] Failed to send sync signal to watch due to %s.", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_100019194()
{
  uint64_t v20 = v0;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006D88(v1, (uint64_t)qword_1000A4F48);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 296);
    uint64_t v5 = *(void *)(v0 + 280);
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v6 = 136315138;
    swift_beginAccess();
    uint64_t v7 = (uint64_t *)(v4 + *(int *)(v5 + 20));
    if (v7[1])
    {
      uint64_t v8 = *v7;
      unint64_t v9 = v7[1];
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0xE000000000000000;
    }
    uint64_t v15 = *(void *)(v0 + 312);
    uint64_t v14 = *(void **)(v0 + 320);
    uint64_t v18 = *(void *)(v0 + 296);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 264) = sub_10000B6D8(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[DeviceController] Sent sync signal with hash %s to watch.", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_100021260((id *)(v0 + 16));

    sub_100020390(v15, type metadata accessor for SyncLibraryInfoResponse);
    uint64_t v13 = v18;
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 312);
    uint64_t v10 = *(void **)(v0 + 320);
    uint64_t v12 = *(void *)(v0 + 296);
    sub_100021260((id *)(v0 + 16));

    sub_100020390(v11, type metadata accessor for SyncLibraryInfoResponse);
    uint64_t v13 = v12;
  }
  sub_100020390(v13, type metadata accessor for SyncSignal);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_10001944C()
{
  uint64_t v11 = v0;

  uint64_t v1 = *(void *)(v0 + 336);
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100006D88(v2, (uint64_t)qword_1000A4F48);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    *(void *)(v0 + 248) = v1;
    swift_errorRetain();
    sub_100006290((uint64_t *)&unk_1000A1150);
    uint64_t v6 = String.init<A>(describing:)();
    *(void *)(v0 + 256) = sub_10000B6D8(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[DeviceController] Failed to send sync signal to watch due to %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100019690()
{
  *(void *)(v1 + 56) = v0;
  type metadata accessor for SyncLibraryInfoResponse(0);
  *(void *)(v1 + 64) = swift_task_alloc();
  return _swift_task_switch(sub_100019720, v0, 0);
}

uint64_t sub_100019720()
{
  uint64_t v1 = *(void **)(v0[7] + 136);
  v0[9] = v1;
  if (!v1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[10] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100019838;
  uint64_t v3 = v0[8];
  return sub_100021D40(v3);
}

uint64_t sub_100019838()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0) {
    os_log_type_t v4 = sub_10001A8F0;
  }
  else {
    os_log_type_t v4 = sub_100019964;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100019964()
{
  uint64_t v1 = v0[11];
  sub_10004CF54();
  v0[12] = v2;
  if (v1)
  {
    uint64_t v3 = (void *)v0[9];
    sub_100020390(v0[8], type metadata accessor for SyncLibraryInfoResponse);

    v0[2] = v1;
    sub_100006290((uint64_t *)&unk_1000A1150);
    sub_10000BE18(0, &qword_1000A1850);
    uint64_t result = swift_dynamicCast();
    if (!result) {
      return result;
    }
    unint64_t v7 = (void *)v0[3];
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100006D88(v8, (uint64_t)qword_1000A4F48);
    unint64_t v9 = v7;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      v0[4] = v9;
      uint64_t v13 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v9;

      _os_log_impl((void *)&_mh_execute_header, v10, v11, "[DeviceController] Failed to persist collectionTargetMap to %@.", v12, 0xCu);
      sub_100006290((uint64_t *)&unk_1000A1120);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v10 = v9;
    }

    swift_errorRelease();
    goto LABEL_12;
  }
  os_log_type_t v4 = v2;
  sub_10004D1D0();
  v0[13] = v5;
  uint64_t v15 = v0[7];
  id v16 = [v4 collectionTargetMapWithLibrary:v5];
  v0[14] = sub_10000BE18(0, &qword_1000A1180);
  v0[15] = sub_100006290(&qword_1000A1188);
  v0[16] = sub_1000202C0();
  v0[17] = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  os_log_type_t v17 = *(void **)(v15 + 168);
  if (v17)
  {
    id v18 = v17;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v18 setCollectionTargetMap:isa];

    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100006D88(v20, (uint64_t)qword_1000A4F48);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      long long v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[DeviceController] Persisted collectionTargetMap.", v23, 2u);
      swift_slowDealloc();
    }
    uint64_t v25 = (void *)v0[12];
    long long v24 = (void *)v0[13];
    uint64_t v26 = v0[8];
    uint64_t v27 = (void *)v0[9];

    sub_100020390(v26, type metadata accessor for SyncLibraryInfoResponse);
LABEL_12:
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  v0[18] = sub_10000BE18(0, &qword_1000A1140);
  return _swift_task_switch(sub_100019E4C, 0, 0);
}

uint64_t sub_100019E4C()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = swift_task_alloc();
  v0[19] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[20] = v3;
  uint64_t v4 = sub_100006290(&qword_1000A1148);
  *uint64_t v3 = v0;
  v3[1] = sub_100019F54;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0x6168735F6F74706ELL, 0xEB00000000646572, sub_10002142C, v2, v4);
}

uint64_t sub_100019F54()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10001A06C, 0, 0);
}

uint64_t sub_10001A06C()
{
  uint64_t v1 = v0[7];
  v0[21] = v0[5];
  return _swift_task_switch(sub_10001A090, v1, 0);
}

uint64_t sub_10001A090()
{
  if (v0[21])
  {
    uint64_t v1 = *(void *)(v0[7] + 112);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[22] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10001A454;
    return sub_10004D494(v1);
  }
  else
  {
    p_vtable = &OBJC_METACLASS___NPTOCompanionSyncDeviceContentController.vtable;
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100006D88(v5, (uint64_t)qword_1000A4F48);
    swift_retain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[7];
    if (v8)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      long long v24 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412290;
      uint64_t v25 = v5;
      os_log_type_t v11 = *(void **)(v9 + 112);
      v0[6] = v11;
      id v12 = v11;
      p_vtable = (void **)(&OBJC_METACLASS___NPTOCompanionSyncDeviceContentController + 24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v24 = v11;
      uint64_t v5 = v25;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[DeviceController] Failed to create libraryInfo because no NRDevice is found for %@.", v10, 0xCu);
      sub_100006290((uint64_t *)&unk_1000A1120);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v13 = *(void **)(v0[7] + 168);
    if (v13)
    {
      id v14 = v13;
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v14 setCollectionTargetMap:isa];
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (p_vtable[470] != (void *)-1) {
      swift_once();
    }
    sub_100006D88(v5, (uint64_t)qword_1000A4F48);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[DeviceController] Persisted collectionTargetMap.", v18, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = (void *)v0[12];
    uint64_t v19 = (void *)v0[13];
    uint64_t v21 = v0[8];
    os_log_type_t v22 = (void *)v0[9];

    sub_100020390(v21, type metadata accessor for SyncLibraryInfoResponse);
    swift_task_dealloc();
    long long v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
}

uint64_t sub_10001A454(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)v1 + 168);
  uint64_t v3 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();

  return _swift_task_switch(sub_10001A584, v3, 0);
}

uint64_t sub_10001A584()
{
  uint64_t v1 = (void *)v0[23];
  p_vtable = &OBJC_METACLASS___NPTOCompanionSyncDeviceContentController.vtable;
  if (v1)
  {
    uint64_t v3 = v0[7];
    id v4 = [objc_allocWithZone((Class)NPTOLibraryInfo) initWithDevice:v1];
    uint64_t v5 = *(NSObject **)(v3 + 168);
    *(void *)(v3 + 168) = v4;
  }
  else
  {
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100006D88(v6, (uint64_t)qword_1000A4F48);
    swift_retain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v5, v7);
    uint64_t v9 = v0[7];
    if (v8)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412290;
      os_log_type_t v11 = *(void **)(v9 + 112);
      v0[6] = v11;
      id v12 = v11;
      p_vtable = (void **)(&OBJC_METACLASS___NPTOCompanionSyncDeviceContentController + 24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v26 = v11;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v5, v7, "[DeviceController] Failed to create libraryInfo because no NRDevice is found for %@.", v10, 0xCu);
      sub_100006290((uint64_t *)&unk_1000A1120);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
  }

  uint64_t v13 = *(void **)(v0[7] + 168);
  if (v13)
  {
    id v14 = v13;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v14 setCollectionTargetMap:isa];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (p_vtable[470] != (void *)-1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100006D88(v16, (uint64_t)qword_1000A4F48);
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "[DeviceController] Persisted collectionTargetMap.", v19, 2u);
    swift_slowDealloc();
  }
  uint64_t v21 = (void *)v0[12];
  uint64_t v20 = (void *)v0[13];
  uint64_t v22 = v0[8];
  long long v23 = (void *)v0[9];

  sub_100020390(v22, type metadata accessor for SyncLibraryInfoResponse);
  swift_task_dealloc();
  long long v24 = (uint64_t (*)(void))v0[1];
  return v24();
}

uint64_t sub_10001A8F0()
{
  *(void *)(v0 + 16) = *(void *)(v0 + 88);
  sub_100006290((uint64_t *)&unk_1000A1150);
  sub_10000BE18(0, &qword_1000A1850);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v2 = *(void **)(v0 + 24);
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100006D88(v3, (uint64_t)qword_1000A4F48);
    id v4 = v2;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
      BOOL v8 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v7 = 138412290;
      *(void *)(v0 + 32) = v4;
      uint64_t v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v8 = v4;

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[DeviceController] Failed to persist collectionTargetMap to %@.", v7, 0xCu);
      sub_100006290((uint64_t *)&unk_1000A1120);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v5 = v4;
    }

    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  return result;
}

id *sub_10001AB88()
{
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10001ABF8()
{
  sub_10001AB88();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ServerDeviceController()
{
  return self;
}

uint64_t sub_10001AC48()
{
  return v0;
}

uint64_t sub_10001AC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_10001AC74, 0, 0);
}

uint64_t sub_10001AC74()
{
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006D88(v1, (uint64_t)qword_1000A4F48);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[DeviceController] Sync content was invalidated, sending sync signal to watch.", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10001ADC0;
  return sub_1000185F0();
}

uint64_t sub_10001ADC0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 32) = v3;
  *os_log_type_t v3 = v2;
  v3[1] = sub_10001AF00;
  return sub_100019690();
}

uint64_t sub_10001AF00()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10001B078(uint64_t a1, uint64_t a2)
{
  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  v3[24] = type metadata accessor for SyncLibraryInfoResponse(0);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[28] = type metadata accessor for SyncLibraryInfoRequest(0);
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  return _swift_task_switch(sub_10001B178, 0, 0);
}

uint64_t sub_10001B178()
{
  os_log_type_t v18 = v0;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[22];
  uint64_t v3 = type metadata accessor for Logger();
  v0[32] = sub_100006D88(v3, (uint64_t)qword_1000A4F48);
  sub_100020328(v2, v1, type metadata accessor for SyncLibraryInfoRequest);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[31];
  if (v6)
  {
    uint64_t v8 = v0[30];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    sub_100020328(v7, v8, type metadata accessor for SyncLibraryInfoRequest);
    uint64_t v10 = String.init<A>(describing:)();
    v0[20] = sub_10000B6D8(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100020390(v7, type metadata accessor for SyncLibraryInfoRequest);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[DeviceController] Handling request: %s.", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100020390(v0[31], type metadata accessor for SyncLibraryInfoRequest);
  }

  id v12 = objc_allocWithZone((Class)NPTOTransaction);
  NSString v13 = String._bridgeToObjectiveC()();
  v0[33] = [v12 initWithDescription:v13];

  id v14 = (void *)swift_task_alloc();
  v0[34] = v14;
  void *v14 = v0;
  v14[1] = sub_10001B450;
  uint64_t v15 = v0[27];
  return sub_100021D40(v15);
}

uint64_t sub_10001B450()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10001BB54;
  }
  else {
    uint64_t v2 = sub_10001B564;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001B564()
{
  uint64_t v50 = v0;
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 176) + *(int *)(*(void *)(v0 + 224) + 20));
  if (v1[1])
  {
    uint64_t v2 = *v1;
    unint64_t v3 = v1[1];
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0xE000000000000000;
  }
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(int *)(v5 + 28);
  uint64_t v7 = (uint64_t *)(v4 + v6);
  if (*(void *)(v4 + v6 + 8))
  {
    uint64_t v8 = *v7;
    unint64_t v9 = *(void *)(v4 + v6 + 8);
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  if (v2 == v8 && v3 == v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      goto LABEL_17;
    }
  }
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    NSString v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[DeviceController] LibraryInfoResponse has the same syncHash with request, so responding with empty response with hash.", v13, 2u);
    swift_slowDealloc();
  }
  uint64_t v15 = *(void *)(v0 + 208);
  uint64_t v14 = *(void *)(v0 + 216);
  uint64_t v16 = *(void *)(v0 + 192);

  UnknownStorage.init()();
  uint64_t v17 = v15 + *(int *)(v16 + 20);
  uint64_t v18 = type metadata accessor for SyncLibrary(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v19 = v15 + *(int *)(v16 + 24);
  uint64_t v20 = type metadata accessor for SyncCollectionTargetList(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  uint64_t v21 = (void *)(v15 + *(int *)(v5 + 28));
  *uint64_t v21 = 0;
  v21[1] = 0;
  sub_1000200D0(v15, v14);
  if (v1[1])
  {
    uint64_t v22 = *v1;
    unint64_t v23 = v1[1];
  }
  else
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t *v7 = v22;
  v7[1] = v23;
LABEL_17:
  uint64_t v24 = *(void *)(v0 + 280);
  uint64_t v25 = *(void *)(v0 + 200);
  sub_100020328(*(void *)(v0 + 216), v25, type metadata accessor for SyncLibraryInfoResponse);
  sub_10004B608(v25, v0 + 16);
  if (v24)
  {
    uint64_t v26 = *(void **)(v0 + 264);
    sub_100020390(*(void *)(v0 + 216), type metadata accessor for SyncLibraryInfoResponse);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    sub_100020328(*(void *)(v0 + 176), *(void *)(v0 + 232), type metadata accessor for SyncLibraryInfoRequest);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v46 = *(void *)(v0 + 232);
      uint64_t v47 = *(void *)(v0 + 240);
      uint64_t v30 = *(void *)(v0 + 216);
      uint64_t v31 = *(void *)(v0 + 208);
      uint64_t v32 = swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315394;
      v49[0] = v48;
      swift_beginAccess();
      sub_100020328(v30, v31, type metadata accessor for SyncLibraryInfoResponse);
      uint64_t v33 = String.init<A>(describing:)();
      *(void *)(v0 + 144) = sub_10000B6D8(v33, v34, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      sub_100020328(v46, v47, type metadata accessor for SyncLibraryInfoRequest);
      uint64_t v35 = String.init<A>(describing:)();
      *(void *)(v0 + 152) = sub_10000B6D8(v35, v36, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100020390(v46, type metadata accessor for SyncLibraryInfoRequest);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "[DeviceController] Composed response %s for request %s.", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v37 = v30;
    }
    else
    {
      uint64_t v38 = *(void *)(v0 + 216);
      sub_100020390(*(void *)(v0 + 232), type metadata accessor for SyncLibraryInfoRequest);

      uint64_t v37 = v38;
    }
    sub_100020390(v37, type metadata accessor for SyncLibraryInfoResponse);
    uint64_t v39 = *(void *)(v0 + 168);

    long long v40 = *(_OWORD *)(v0 + 16);
    long long v41 = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v39 + 16) = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v39 + 32) = v41;
    *(_OWORD *)uint64_t v39 = v40;
    long long v42 = *(_OWORD *)(v0 + 64);
    long long v43 = *(_OWORD *)(v0 + 80);
    long long v44 = *(_OWORD *)(v0 + 96);
    *(void *)(v39 + 96) = *(void *)(v0 + 112);
    *(_OWORD *)(v39 + 64) = v43;
    *(_OWORD *)(v39 + 80) = v44;
    *(_OWORD *)(v39 + 48) = v42;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v27();
}

uint64_t sub_10001BB54()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001BC04(uint64_t a1, uint64_t a2)
{
  v3[25] = a2;
  v3[26] = v2;
  v3[24] = a1;
  type metadata accessor for URL();
  v3[27] = swift_task_alloc();
  sub_100006290(&qword_1000A0C00);
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v3[30] = type metadata accessor for SyncAssetResourceRequest(0);
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  return _swift_task_switch(sub_10001BD30, 0, 0);
}

uint64_t sub_10001BD30()
{
  long long v41 = v0;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[25];
  uint64_t v3 = type metadata accessor for Logger();
  v0[35] = sub_100006D88(v3, (uint64_t)qword_1000A4F48);
  sub_100020328(v2, v1, type metadata accessor for SyncAssetResourceRequest);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[34];
  if (v6)
  {
    uint64_t v8 = v0[33];
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)unint64_t v9 = 136315138;
    sub_100020328(v7, v8, type metadata accessor for SyncAssetResourceRequest);
    uint64_t v10 = String.init<A>(describing:)();
    v0[23] = sub_10000B6D8(v10, v11, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100020390(v7, type metadata accessor for SyncAssetResourceRequest);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[DeviceController] Handling request: %s.", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100020390(v0[34], type metadata accessor for SyncAssetResourceRequest);
  }

  uint64_t v12 = v0[30];
  uint64_t v13 = v0[25];
  id v14 = objc_allocWithZone((Class)NPTOTransaction);
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v14 initWithDescription:v15];
  v0[36] = v16;

  uint64_t v17 = (uint64_t *)(v13 + *(int *)(v12 + 20));
  unint64_t v18 = v17[1];
  if (v18 >> 60 == 15) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *v17;
  }
  if (v18 >> 60 == 15) {
    unint64_t v20 = 0xC000000000000000;
  }
  else {
    unint64_t v20 = v17[1];
  }
  sub_10001FF48(*v17, v18);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v22 = [(objc_class *)isa npto_uuid];

  uint64_t v23 = v0[28];
  if (v22)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 0, 1, v24);
  }
  else
  {
    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  }
  uint64_t v25 = v0[29];
  sub_10001FFB4(v0[28], v25);
  sub_10002001C(v19, v20);
  type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v24 - 8);
  int v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v25, 1, v24);
  uint64_t v28 = v0[29];
  if (v27 == 1)
  {
    sub_10000BD30(v0[29], &qword_1000A0C00);
LABEL_21:
    sub_100020074();
    swift_allocError();
    *uint64_t v37 = 0;
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v38 = (uint64_t (*)(void))v0[1];
    return v38();
  }
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v24);
  sub_10000BE18(0, (unint64_t *)&unk_1000A0C08);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v31 = [ObjCClassFromMetadata localIdentifierWithUUID:v30];
  v0[37] = v31;

  if (!v31) {
    goto LABEL_21;
  }
  v0[38] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v0[39] = v32;
  uint64_t v33 = sub_10000BE18(0, &qword_1000A1140);
  uint64_t v34 = swift_task_alloc();
  v0[40] = v34;
  *(void *)(v34 + 16) = v33;
  uint64_t v35 = (void *)swift_task_alloc();
  v0[41] = v35;
  uint64_t v36 = sub_100006290(&qword_1000A1148);
  void *v35 = v0;
  v35[1] = sub_10001C340;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 17, 0, 0, 0x6168735F6F74706ELL, 0xEB00000000646572, sub_1000200C8, v34, v36);
}

uint64_t sub_10001C340()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10001C458, 0, 0);
}

uint64_t sub_10001C458()
{
  uint64_t v1 = v0[17];
  v0[42] = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0[26] + 16);
    uint64_t v3 = (void *)swift_task_alloc();
    v0[43] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10001C5D8;
    return sub_10004D494(v2);
  }
  else
  {
    os_log_type_t v5 = (void *)v0[36];
    BOOL v6 = (void *)v0[37];
    swift_bridgeObjectRelease();

    sub_100020074();
    swift_allocError();
    unsigned char *v7 = 1;
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_10001C5D8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)v1 + 336);
  *(void *)(*(void *)v1 + 352) = a1;
  swift_task_dealloc();

  return _swift_task_switch(sub_10001C6F4, 0, 0);
}

uint64_t sub_10001C6F4()
{
  uint64_t v26 = v0;
  uint64_t v1 = *(void **)(v0 + 352);
  if (v1)
  {
    sub_100020328(*(void *)(v0 + 200), *(void *)(v0 + 256), type metadata accessor for SyncAssetResourceRequest);
    swift_bridgeObjectRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    unint64_t v5 = *(void *)(v0 + 312);
    if (v4)
    {
      uint64_t v6 = *(void *)(v0 + 304);
      uint64_t v7 = *(void *)(v0 + 264);
      uint64_t v24 = *(void *)(v0 + 256);
      uint64_t v8 = swift_slowAlloc();
      v25[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 168) = sub_10000B6D8(v6, v5, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      sub_100020328(v24, v7, type metadata accessor for SyncAssetResourceRequest);
      uint64_t v9 = String.init<A>(describing:)();
      *(void *)(v0 + 176) = sub_10000B6D8(v9, v10, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100020390(v24, type metadata accessor for SyncAssetResourceRequest);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[DeviceController] Fetching asset resource for %s for request %s.", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v14 = *(void *)(v0 + 256);
      swift_bridgeObjectRelease_n();
      sub_100020390(v14, type metadata accessor for SyncAssetResourceRequest);
    }

    NSString v15 = *(void **)(v0 + 296);
    id v16 = [*(id *)(*(void *)(v0 + 208) + 24) assetForLocalIdentifier:v15];
    *(void *)(v0 + 360) = v16;

    if (v16)
    {
      uint64_t v17 = *(void *)(v0 + 200);
      uint64_t v18 = *(int *)(*(void *)(v0 + 240) + 24);
      *(_DWORD *)(v0 + 376) = v18;
      uint64_t v19 = *(unsigned char *)(v17 + v18) & 1;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 120;
      *(void *)(v0 + 24) = sub_10001CB50;
      uint64_t v20 = swift_continuation_init();
      *(void *)(v0 + 80) = _NSConcreteStackBlock;
      *(void *)(v0 + 88) = 0x40000000;
      *(void *)(v0 + 96) = sub_10001D160;
      *(void *)(v0 + 104) = &unk_1000920D8;
      *(void *)(v0 + 112) = v20;
      [v16 npto_exportForDevice:v1 isUserInitiated:v19 completionHandler:v0 + 80];
      return _swift_continuation_await(v0 + 16);
    }
    unint64_t v11 = *(void **)(v0 + 288);
    sub_100020074();
    swift_allocError();
    *uint64_t v21 = 2;
    swift_willThrow();
  }
  else
  {
    unint64_t v11 = *(void **)(v0 + 288);
    uint64_t v12 = *(void **)(v0 + 296);
    swift_bridgeObjectRelease();

    sub_100020074();
    swift_allocError();
    unsigned char *v13 = 1;
    swift_willThrow();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_10001CB50()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 368) = v1;
  if (v1) {
    uint64_t v2 = sub_10001D08C;
  }
  else {
    uint64_t v2 = sub_10001CC60;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001CC60()
{
  uint64_t v26 = v0;
  uint64_t v1 = *(void **)(v0 + 120);
  type metadata accessor for TemporaryResourceFile();
  id v2 = [v1 URL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = TemporaryResourceFile.__allocating_init(localResourceURL:metadata:)();
  sub_100020328(*(void *)(v0 + 200), *(void *)(v0 + 248), type metadata accessor for SyncAssetResourceRequest);
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, (os_log_type_t)v5);
  uint64_t v7 = *(void **)(v0 + 352);
  uint64_t v8 = *(void **)(v0 + 360);
  if (v6)
  {
    uint64_t v23 = *(void **)(v0 + 360);
    uint64_t v9 = *(void *)(v0 + 264);
    uint64_t v21 = *(void *)(v0 + 248);
    log = v4;
    uint64_t v10 = swift_slowAlloc();
    v25[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    *(void *)(v0 + 144) = v3;
    swift_retain();
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)(v0 + 152) = sub_10000B6D8(v11, v12, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 12) = 2080;
    sub_100020328(v21, v9, type metadata accessor for SyncAssetResourceRequest);
    uint64_t v13 = String.init<A>(describing:)();
    *(void *)(v0 + 160) = sub_10000B6D8(v13, v14, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100020390(v21, type metadata accessor for SyncAssetResourceRequest);
    _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)v5, "[DeviceController] Composed resourceFile %s for request %s.", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 248);
    swift_release_n();
    sub_100020390(v15, type metadata accessor for SyncAssetResourceRequest);
  }
  uint64_t v16 = *(void *)(v0 + 192);
  uint64_t v24 = v3;
  char v17 = *(unsigned char *)(*(void *)(v0 + 200) + *(int *)(v0 + 376));

  if (v17) {
    uint64_t v18 = 0x404E000000000000;
  }
  else {
    uint64_t v18 = 0x4082C00000000000;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *(void *)uint64_t v16 = v24;
  *(unsigned char *)(v16 + 8) = 2;
  *(void *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 24) = 513;
  *(void *)(v16 + 32) = v18;
  *(unsigned char *)(v16 + 40) = 0;
  *(void *)(v16 + 48) = 0;
  *(void *)(v16 + 56) = 0;
  *(unsigned char *)(v16 + 64) = 2;
  *(void *)(v16 + 72) = 0;
  *(void *)(v16 + 80) = 0;
  *(_WORD *)(v16 + 88) = 770;
  *(void *)(v16 + 96) = 200;
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_10001D08C()
{
  uint64_t v1 = (void *)v0[45];
  id v2 = (void *)v0[44];
  uint64_t v3 = (void *)v0[36];
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10001D160(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a4)
  {
    sub_100006290((uint64_t *)&unk_1000A1150);
    uint64_t v6 = swift_allocError();
    void *v7 = a4;
    id v8 = a4;
    return _swift_continuation_throwingResumeWithError(v4, v6);
  }
  else
  {
    if (a2)
    {
      uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = *(void **)(*(void *)(v4 + 64) + 40);
      void *v11 = a2;
      v11[1] = v10;
      id v12 = a2;
      a1 = v4;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

uint64_t sub_10001D24C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SyncSessionMessageHandler()
{
  return self;
}

uint64_t sub_10001D2B0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    sub_100020D08((long long *)a1, (uint64_t)v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *id v2 = 0x8000000000000000;
    sub_10004A104(v14, a2, isUniquelyReferenced_nonNull_native);
    *id v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000BD30(a1, &qword_1000A1270);
    unint64_t v7 = sub_1000516A8(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_10004A898();
        uint64_t v11 = v13;
      }
      sub_100020D08((long long *)(*(void *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      sub_10001EFFC(v9, v11);
      *uint64_t v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return sub_10000BD30((uint64_t)v14, &qword_1000A1270);
  }
}

uint64_t sub_10001D3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_100020D08((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10004A244(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000BD30(a1, &qword_1000A11D0);
    sub_10001EEF0(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return sub_10000BD30((uint64_t)v9, &qword_1000A11D0);
  }
}

uint64_t sub_10001D4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[29] = a5;
  v6[30] = a6;
  v6[28] = a4;
  return _swift_task_switch(sub_10001D4C8, a4, 0);
}

uint64_t sub_10001D4C8()
{
  uint64_t v34 = v0;
  unsigned __int8 v1 = [*(id *)(*(void *)(v0 + 224) + 112) isTinkerPaired];
  uint64_t v2 = *(void *)(v0 + 232);
  if (v1) {
    uint64_t v3 = 300;
  }
  else {
    uint64_t v3 = *(void *)(v2 + 96);
  }
  uint64_t v4 = *(void **)v2;
  long long v5 = *(_OWORD *)(v2 + 24);
  *(_OWORD *)(v0 + 120) = *(_OWORD *)(v2 + 8);
  *(_OWORD *)(v0 + 136) = v5;
  long long v6 = *(_OWORD *)(v2 + 56);
  long long v7 = *(_OWORD *)(v2 + 72);
  long long v8 = *(_OWORD *)(v2 + 40);
  *(unsigned char *)(v0 + 200) = *(unsigned char *)(v2 + 88);
  *(_OWORD *)(v0 + 168) = v6;
  *(_OWORD *)(v0 + 184) = v7;
  *(_OWORD *)(v0 + 152) = v8;
  id v9 = v4;
  sub_100020590(v0 + 120);
  id v10 = sub_10002B128((uint64_t)v9, v3);
  unint64_t v12 = v11;
  *(void *)(v0 + 248) = v10;
  *(void *)(v0 + 256) = v11;
  sub_1000205C8(v0 + 120);

  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v13 = *(void ***)(v0 + 232);
  uint64_t v14 = type metadata accessor for Logger();
  sub_100006D88(v14, (uint64_t)qword_1000A4F48);
  swift_bridgeObjectRetain();
  sub_100021218(v13);
  swift_bridgeObjectRetain();
  sub_100021218(v13);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = *(long long **)(v0 + 232);
  if (v17)
  {
    uint64_t v19 = swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 208) = sub_10000B6D8((uint64_t)v10, v12, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    long long v20 = *v18;
    long long v21 = v18[2];
    *(_OWORD *)(v0 + 32) = v18[1];
    *(_OWORD *)(v0 + 48) = v21;
    *(_OWORD *)(v0 + 16) = v20;
    long long v22 = v18[3];
    long long v23 = v18[4];
    long long v24 = v18[5];
    *(void *)(v0 + 112) = *((void *)v18 + 12);
    *(_OWORD *)(v0 + 80) = v23;
    *(_OWORD *)(v0 + 96) = v24;
    *(_OWORD *)(v0 + 64) = v22;
    sub_100021218((void **)v18);
    uint64_t v25 = String.init<A>(describing:)();
    *(void *)(v0 + 216) = sub_10000B6D8(v25, v26, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100021260((id *)v18);
    sub_100021260((id *)v18);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[Messaging] Sent message with %s for %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100021260((id *)v18);
    sub_100021260((id *)v18);
  }

  uint64_t v27 = *(void *)(v0 + 240);
  uint64_t v28 = swift_allocObject();
  *(void *)(v0 + 264) = v28;
  swift_unknownObjectWeakInit();
  os_log_type_t v29 = (void *)swift_allocObject();
  *(void *)(v0 + 272) = v29;
  v29[2] = v10;
  v29[3] = v12;
  v29[4] = v28;
  uint64_t v32 = (uint64_t (*)(void *, void *))(*(void *)(*(void *)v27 + 168)
                                                 + **(int **)(*(void *)v27 + 168));
  swift_bridgeObjectRetain();
  swift_retain();
  NSString v30 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v30;
  void *v30 = v0;
  v30[1] = sub_10001D96C;
  return v32(&unk_1000A11C0, v29);
}

uint64_t sub_10001D96C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 232);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  char v4 = *(unsigned char *)(v2 + 89);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v1 + 288) = v5;
  *(void *)uint64_t v5 = v3;
  *(void *)(v5 + 8) = sub_100021430;
  long long v6 = *(_OWORD *)(v1 + 248);
  uint64_t v7 = *(void *)(v1 + 224);
  *(void *)(v5 + 128) = *(void *)(v1 + 240);
  *(void *)(v5 + 136) = v7;
  *(unsigned char *)(v5 + 168) = v4;
  *(_OWORD *)(v5 + 112) = v6;
  return _swift_task_switch(sub_10001E854, v7, 0);
}

uint64_t sub_10001DB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[29] = a5;
  v6[30] = a6;
  v6[28] = a4;
  return _swift_task_switch(sub_10001DB60, a4, 0);
}

uint64_t sub_10001DB60()
{
  uint64_t v34 = v0;
  unsigned __int8 v1 = [*(id *)(*(void *)(v0 + 224) + 112) isTinkerPaired];
  uint64_t v2 = *(void *)(v0 + 232);
  if (v1) {
    uint64_t v3 = 300;
  }
  else {
    uint64_t v3 = *(void *)(v2 + 96);
  }
  char v4 = *(void **)v2;
  long long v5 = *(_OWORD *)(v2 + 24);
  *(_OWORD *)(v0 + 120) = *(_OWORD *)(v2 + 8);
  *(_OWORD *)(v0 + 136) = v5;
  long long v6 = *(_OWORD *)(v2 + 56);
  long long v7 = *(_OWORD *)(v2 + 72);
  long long v8 = *(_OWORD *)(v2 + 40);
  *(unsigned char *)(v0 + 200) = *(unsigned char *)(v2 + 88);
  *(_OWORD *)(v0 + 168) = v6;
  *(_OWORD *)(v0 + 184) = v7;
  *(_OWORD *)(v0 + 152) = v8;
  id v9 = v4;
  sub_100020590(v0 + 120);
  id v10 = sub_10002B128((uint64_t)v9, v3);
  unint64_t v12 = v11;
  *(void *)(v0 + 248) = v10;
  *(void *)(v0 + 256) = v11;
  sub_1000205C8(v0 + 120);

  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v13 = *(void ***)(v0 + 232);
  uint64_t v14 = type metadata accessor for Logger();
  sub_100006D88(v14, (uint64_t)qword_1000A4F48);
  swift_bridgeObjectRetain();
  sub_100021218(v13);
  swift_bridgeObjectRetain();
  sub_100021218(v13);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = *(long long **)(v0 + 232);
  if (v17)
  {
    uint64_t v19 = swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 208) = sub_10000B6D8((uint64_t)v10, v12, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    long long v20 = *v18;
    long long v21 = v18[2];
    *(_OWORD *)(v0 + 32) = v18[1];
    *(_OWORD *)(v0 + 48) = v21;
    *(_OWORD *)(v0 + 16) = v20;
    long long v22 = v18[3];
    long long v23 = v18[4];
    long long v24 = v18[5];
    *(void *)(v0 + 112) = *((void *)v18 + 12);
    *(_OWORD *)(v0 + 80) = v23;
    *(_OWORD *)(v0 + 96) = v24;
    *(_OWORD *)(v0 + 64) = v22;
    sub_100021218((void **)v18);
    uint64_t v25 = String.init<A>(describing:)();
    *(void *)(v0 + 216) = sub_10000B6D8(v25, v26, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100021260((id *)v18);
    sub_100021260((id *)v18);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[Messaging] Sent message with %s for %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100021260((id *)v18);
    sub_100021260((id *)v18);
  }

  uint64_t v27 = *(void *)(v0 + 240);
  uint64_t v28 = swift_allocObject();
  *(void *)(v0 + 264) = v28;
  swift_unknownObjectWeakInit();
  os_log_type_t v29 = (void *)swift_allocObject();
  *(void *)(v0 + 272) = v29;
  v29[2] = v10;
  v29[3] = v12;
  v29[4] = v28;
  uint64_t v32 = (uint64_t (*)(void *, void *))(*(void *)(*(void *)v27 + 168)
                                                 + **(int **)(*(void *)v27 + 168));
  swift_bridgeObjectRetain();
  swift_retain();
  NSString v30 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v30;
  void *v30 = v0;
  v30[1] = sub_10001E004;
  return v32(&unk_1000A12D0, v29);
}

uint64_t sub_10001E004()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 232);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  char v4 = *(unsigned char *)(v2 + 89);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v1 + 288) = v5;
  *(void *)uint64_t v5 = v3;
  *(void *)(v5 + 8) = sub_10001E1D4;
  long long v6 = *(_OWORD *)(v1 + 248);
  uint64_t v7 = *(void *)(v1 + 224);
  *(void *)(v5 + 128) = *(void *)(v1 + 240);
  *(void *)(v5 + 136) = v7;
  *(unsigned char *)(v5 + 168) = v4;
  *(_OWORD *)(v5 + 112) = v6;
  return _swift_task_switch(sub_10001E854, v7, 0);
}

uint64_t sub_10001E1D4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10001E2E8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 80) = a4;
  *(void *)(v5 + 88) = a5;
  *(unsigned char *)(v5 + 120) = a2;
  *(void *)(v5 + 64) = a1;
  *(void *)(v5 + 72) = a3;
  uint64_t v6 = type metadata accessor for CancellationError();
  *(void *)(v5 + 96) = v6;
  *(void *)(v5 + 104) = *(void *)(v6 - 8);
  *(void *)(v5 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_10001E3DC, 0, 0);
}

uint64_t sub_10001E3DC()
{
  uint64_t v20 = v0;
  if (*(unsigned char *)(v0 + 120))
  {
    *(void *)(v0 + 40) = *(void *)(v0 + 64);
    swift_errorRetain();
    swift_errorRetain();
    sub_100006290((uint64_t *)&unk_1000A1150);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_11;
    }
    (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100006D88(v1, (uint64_t)qword_1000A4F48);
    swift_bridgeObjectRetain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    unint64_t v5 = *(void *)(v0 + 80);
    if (v4)
    {
      uint64_t v6 = *(void *)(v0 + 72);
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 56) = sub_10000B6D8(v6, v5, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[Messaging] Message with %s is cancelled.", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong)
    {
LABEL_11:
      uint64_t v15 = *(void *)(v0 + 64);
      goto LABEL_12;
    }
    uint64_t v9 = (void *)Strong;
    NSString v10 = String._bridgeToObjectiveC()();
    *(void *)(v0 + 48) = 0;
    unsigned __int8 v11 = [v9 cancelIdentifier:v10 error:v0 + 48];

    unint64_t v12 = *(void **)(v0 + 48);
    uint64_t v13 = *(void *)(v0 + 64);
    if (v11)
    {
      id v14 = v12;
      uint64_t v15 = v13;
LABEL_12:
      sub_10002088C(v15, 1);
      goto LABEL_13;
    }
    id v18 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10002088C(v13, 1);
    swift_errorRelease();
  }
LABEL_13:
  swift_task_dealloc();
  os_log_type_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_10001E738(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 80) = a4;
  *(void *)(v5 + 88) = a5;
  *(unsigned char *)(v5 + 120) = a2;
  *(void *)(v5 + 64) = a1;
  *(void *)(v5 + 72) = a3;
  uint64_t v6 = type metadata accessor for CancellationError();
  *(void *)(v5 + 96) = v6;
  *(void *)(v5 + 104) = *(void *)(v6 - 8);
  *(void *)(v5 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_1000213B8, 0, 0);
}

uint64_t sub_10001E82C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v5 + 128) = a4;
  *(void *)(v5 + 136) = v4;
  *(unsigned char *)(v5 + 168) = a3;
  *(void *)(v5 + 112) = a1;
  *(void *)(v5 + 120) = a2;
  return _swift_task_switch(sub_10001E854, v4, 0);
}

uint64_t sub_10001E854()
{
  uint64_t v33 = v0;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006D88(v1, (uint64_t)qword_1000A4F48);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 120);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 104) = sub_10000B6D8(v6, v5, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[Messaging] Creating response handler for: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (_OWORD *)(v0 + 16);
  uint64_t v9 = *(void *)(v0 + 136) + 136;
  swift_beginAccess();
  uint64_t v10 = *(void *)v9;
  if (*(void *)(*(void *)v9 + 16))
  {
    uint64_t v12 = *(void *)(v0 + 112);
    uint64_t v11 = *(void *)(v0 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v13 = sub_100051718(v12, v11);
    if (v14)
    {
      sub_100020828(*(void *)(v10 + 56) + 40 * v13, v0 + 16);
    }
    else
    {
      *(void *)(v0 + 48) = 0;
      *uint64_t v8 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 40))
    {
      uint64_t v17 = v0 + 112;
      uint64_t v16 = *(void *)(v0 + 112);
      uint64_t v15 = *(void **)(v17 + 8);
      sub_10000BD30((uint64_t)v8, &qword_1000A11D0);
      uint64_t v29 = 0;
      unint64_t v30 = 0xE000000000000000;
      _StringGuts.grow(_:)(67);
      v18._object = (void *)0x8000000100081810;
      v18._countAndFlagsBits = 0xD000000000000041;
      String.append(_:)(v18);
      v19._countAndFlagsBits = v16;
      v19._object = v15;
      String.append(_:)(v19);
      return _assertionFailure(_:_:file:line:flags:)();
    }
  }
  else
  {
    *(void *)(v0 + 48) = 0;
    *uint64_t v8 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }
  unint64_t v21 = *(void *)(v0 + 128);
  char v22 = *(unsigned char *)(v0 + 168);
  uint64_t v24 = *(void *)(v0 + 112);
  uint64_t v23 = *(void *)(v0 + 120);
  sub_10000BD30(v0 + 16, &qword_1000A11D0);
  uint64_t v31 = sub_100006290(&qword_1000A11D8);
  uint64_t v32 = &off_100092878;
  LOBYTE(v29) = v22;
  unint64_t v30 = v21;
  swift_beginAccess();
  swift_retain_n();
  swift_bridgeObjectRetain();
  sub_10001D3CC((uint64_t)&v29, v24, v23);
  swift_endAccess();
  uint64_t v25 = swift_allocObject();
  *(void *)(v0 + 144) = v25;
  swift_weakInit();
  unint64_t v26 = (void *)swift_allocObject();
  *(void *)(v0 + 152) = v26;
  v26[2] = v25;
  v26[3] = v24;
  v26[4] = v23;
  uint64_t v28 = (uint64_t (*)(void *, void *))(*(void *)(*(void *)v21 + 168)
                                                 + **(int **)(*(void *)v21 + 168));
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_10001ED40;
  return v28(&unk_1000A11E8, v26);
}

uint64_t sub_10001ED40()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_10001EE90, v1, 0);
}

uint64_t sub_10001EE90()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

double sub_10001EEF0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100051718(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *BOOL v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10004AA5C();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_100020D08((long long *)(*(void *)(v11 + 56) + 40 * v8), a3);
    sub_10001F1C4(v8, v11);
    *BOOL v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

unint64_t sub_10001EFFC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        __int16 v11 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11 + 100);
        double result = Hasher._finalize()();
        unint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          char v14 = (unsigned char *)(v13 + v3);
          uint64_t v15 = (unsigned char *)(v13 + v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            unsigned char *v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 40 * v3;
          Swift::String v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            long long v9 = *v18;
            long long v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    Swift::String v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    Swift::String v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *Swift::String v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10001F1C4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          char v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            _OWORD *v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 40 * v3;
          Swift::String v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            long long v9 = *v18;
            long long v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    Swift::String v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    Swift::String v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *Swift::String v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

id sub_10001F3B0(void *a1, uint64_t a2, void *a3)
{
  swift_defaultActor_initialize();
  swift_retain();
  if (([a1 relationship] & 1) != 0
    && (NSString v5 = String._bridgeToObjectiveC()(),
        id v6 = [self syncCoordinatorWithServiceName:v5],
        v5,
        v6))
  {
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100006D88(v7, (uint64_t)qword_1000A4F48);
    id v8 = v6;
    long long v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      Swift::Int v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      buf = v11;
      *(_DWORD *)Swift::Int v11 = 138412290;
      id v23 = v8;
      id v12 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v6;

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "[InitialSync] Created sync coordinator %@.", buf, 0xCu);
      sub_100006290((uint64_t *)&unk_1000A1120);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    a3[14] = v8;
    swift_release();
    v22.receiver = a3;
    v22.super_class = (Class)type metadata accessor for InitialSyncServerController();
    id v18 = [super init];
    swift_release();
  }
  else
  {
    swift_release();
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100006D88(v13, (uint64_t)qword_1000A4F48);
    id v14 = a1;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v17 = 134217984;
      id v23 = [v14 relationship];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "[InitialSync] Skipped creating sync coordinator for device relationship %ld.", v17, 0xCu);
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();
    }
    type metadata accessor for InitialSyncServerController();
    swift_defaultActor_destroy();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v18;
}

uint64_t sub_10001F770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a1;
  uint64_t v5 = sub_100006290(&qword_1000A1380);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = *(void **)a3;
  char v9 = *(unsigned char *)(a3 + 8);
  uint64_t v10 = *(void *)(a3 + 16);
  char v11 = *(unsigned char *)(a3 + 24);
  int v22 = *(unsigned __int8 *)(a3 + 25);
  uint64_t v21 = *(void *)(a3 + 32);
  char v12 = *(unsigned char *)(a3 + 40);
  uint64_t v13 = *(void *)(a3 + 56);
  uint64_t v27 = *(void *)(a3 + 48);
  int v26 = *(unsigned __int8 *)(a3 + 64);
  uint64_t v14 = *(void *)(a3 + 80);
  uint64_t v25 = *(void *)(a3 + 72);
  int v24 = *(unsigned __int16 *)(a3 + 88);
  uint64_t v23 = *(void *)(a3 + 96);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 1, 1, v15);
  char v30 = v11;
  char v29 = v12;
  unint64_t v16 = sub_1000203F8();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = v16;
  *(void *)(v17 + 32) = a2;
  *(void *)(v17 + 40) = v8;
  *(unsigned char *)(v17 + 48) = v9;
  *(void *)(v17 + 56) = v10;
  *(unsigned char *)(v17 + 64) = v30;
  *(unsigned char *)(v17 + 65) = v22;
  *(void *)(v17 + 72) = v21;
  *(unsigned char *)(v17 + 80) = v29;
  uint64_t v18 = v28;
  *(void *)(v17 + 88) = v27;
  *(void *)(v17 + 96) = v13;
  *(unsigned char *)(v17 + 104) = v26;
  *(void *)(v17 + 112) = v25;
  *(void *)(v17 + 120) = v14;
  *(_WORD *)(v17 + 128) = v24;
  *(void *)(v17 + 136) = v23;
  *(void *)(v17 + 144) = v18;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain_n();
  id v19 = v8;
  swift_bridgeObjectRetain();
  sub_10004BA30((uint64_t)v7, (uint64_t)&unk_1000A11A8, v17);
  return swift_release();
}

uint64_t sub_10001F960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v9 = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(v6 + 96) = v9;
  *(void *)(v6 + 112) = *(void *)(a5 + 96);
  long long v10 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a5;
  *(_OWORD *)(v6 + 32) = v10;
  long long v11 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(v6 + 64) = v11;
  char v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 120) = v12;
  *char v12 = v6;
  v12[1] = sub_10001FA40;
  v12[29] = v6 + 16;
  v12[30] = a6;
  v12[28] = a4;
  return _swift_task_switch(sub_10001D4C8, a4, 0);
}

uint64_t sub_10001FA40()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10001FB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  long long v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  void *v10 = v4;
  v10[1] = sub_100021434;
  return sub_10001E2E8(v8, v9, a2, a3, a4);
}

uint64_t sub_10001FBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a3;
  v4[7] = a4;
  void v4[5] = a2;
  return _swift_task_switch(sub_10001FC1C, 0, 0);
}

uint64_t sub_10001FC1C()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 64) = Strong;
  if (Strong)
  {
    return _swift_task_switch(sub_10001FCD8, Strong, 0);
  }
  else
  {
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_10001FCD8()
{
  sub_10002B374(*(void *)(v0 + 48), *(void *)(v0 + 56));
  return _swift_task_switch(sub_10001FD44, 0, 0);
}

uint64_t sub_10001FD44()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001FDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  long long v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  void *v10 = v4;
  v10[1] = sub_100021434;
  return sub_10001E738(v8, v9, a2, a3, a4);
}

uint64_t sub_10001FE68(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10001FEB8()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100021434;
  return sub_1000162A0(v0);
}

uint64_t sub_10001FF48(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10001FF5C(a1, a2);
  }
  return a1;
}

uint64_t sub_10001FF5C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_10001FFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006290(&qword_1000A0C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002001C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

unint64_t sub_100020074()
{
  unint64_t result = qword_1000A1130;
  if (!qword_1000A1130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1130);
  }
  return result;
}

uint64_t sub_1000200C8(uint64_t a1)
{
  return sub_10004D984(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000200D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SyncLibraryInfoResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100020134()
{
  return sub_100020E64((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_100020160()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100021434;
  v3[2] = v2;
  return _swift_task_switch(sub_10001AC74, 0, 0);
}

uint64_t sub_100020208(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100021434;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1000A2178 + dword_1000A2178);
  return v6(a1, v4);
}

unint64_t sub_1000202C0()
{
  unint64_t result = qword_1000A1190;
  if (!qword_1000A1190)
  {
    sub_10000BE18(255, &qword_1000A1180);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1190);
  }
  return result;
}

uint64_t sub_100020328(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100020390(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000203F0(uint64_t a1)
{
  return sub_10001F770(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_1000203F8()
{
  unint64_t result = qword_1000A1650;
  if (!qword_1000A1650)
  {
    type metadata accessor for IDSMessagingService();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1650);
  }
  return result;
}

uint64_t sub_100020450()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 152, 7);
}

uint64_t sub_1000204B0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)(v1 + 5);
  uint64_t v8 = v1[18];
  char v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *char v9 = v2;
  v9[1] = sub_100021434;
  long long v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A11A0
                                                                                     + dword_1000A11A0);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100020590(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000205C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100020600()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002063C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10001768C;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A11B8 + dword_1000A11B8);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100020700()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100020738()
{
  return sub_100020E64((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100020764(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100021434;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A11E0 + dword_1000A11E0);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100020828(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10002088C(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100020898(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100021434;
  return sub_1000170BC(a1, a2);
}

uint64_t sub_100020944(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_100021434;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1000A1208 + dword_1000A1208);
  return v8(a1, a2, v6);
}

uint64_t sub_100020A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100021434;
  return sub_100017380(a1, a2);
}

uint64_t sub_100020AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_100021434;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1000A1230 + dword_1000A1230);
  return v8(a1, a2, v6);
}

uint64_t sub_100020B80()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100020BB8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100021434;
  return sub_10001751C(a1);
}

uint64_t sub_100020C54(uint64_t *a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001768C;
  uint64_t v6 = (uint64_t (*)(uint64_t *, int *))((char *)&dword_1000A1258 + dword_1000A1258);
  return v6(a1, v4);
}

uint64_t sub_100020D08(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100020D20()
{
  return sub_100020E64((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_100020D4C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100021434;
  return sub_100016820(a1, v4, v5, v6);
}

uint64_t sub_100020E00()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100020E38()
{
  return sub_100020E64((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_100020E64(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 32));

  return _swift_deallocObject(v2, 40, 7);
}

uint64_t sub_100020EBC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  long long v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *long long v3 = v1;
  v3[1] = sub_100021434;
  v3[2] = v2;
  return _swift_task_switch(sub_1000164E4, v2, 0);
}

uint64_t sub_100020F64()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100021434;
  v2[2] = v0;
  return _swift_task_switch(sub_1000177A0, v0, 0);
}

unsigned char *initializeBufferWithCopyOfBuffer for MessageType(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NanoPhotosSyncServerError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NanoPhotosSyncServerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100021174);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_10002119C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1000211A8(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NanoPhotosSyncServerError()
{
  return &type metadata for NanoPhotosSyncServerError;
}

unint64_t sub_1000211C4()
{
  unint64_t result = qword_1000A12B8;
  if (!qword_1000A12B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1000A12B8);
  }
  return result;
}

void **sub_100021218(void **a1)
{
  int v2 = *a1;
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_bridgeObjectRetain();
  return a1;
}

id *sub_100021260(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000212B0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000212F0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  BOOL v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100021434;
  int v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A12C8 + dword_1000A12C8);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1000213B8()
{
  return sub_10001E3DC();
}

void *sub_10002144C()
{
  uint64_t v1 = (void *)v0;
  sub_10000C054(v0, (uint64_t)&v39, &qword_1000A12E0);
  sub_10000C054((uint64_t)&v39, (uint64_t)&v40, &qword_1000A12E0);
  char v2 = v40;
  id v3 = &_swiftEmptyDictionarySingleton;
  if (v40 != 2)
  {
    *(void *)&long long v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v31 + 1) = v4;
    AnyHashable.init<A>(_:)();
    uint64_t v32 = &type metadata for Bool;
    LOBYTE(v31) = v2;
    sub_100006B64(&v31, v30);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    long long v44 = &_swiftEmptyDictionarySingleton;
    sub_10004A39C(v30, (uint64_t)v33, isUniquelyReferenced_nonNull_native);
    id v3 = v44;
    swift_bridgeObjectRelease();
    sub_1000219D8((uint64_t)v33);
  }
  sub_10000C054((uint64_t)(v1 + 1), (uint64_t)v38, &qword_1000A12E8);
  sub_10000C054((uint64_t)v38, (uint64_t)&v41, &qword_1000A12E8);
  if ((v42 & 1) == 0)
  {
    uint64_t v6 = v41;
    *(void *)&long long v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v31 + 1) = v7;
    AnyHashable.init<A>(_:)();
    uint64_t v32 = &type metadata for Int;
    *(void *)&long long v31 = v6;
    sub_100006B64(&v31, v30);
    char v8 = swift_isUniquelyReferenced_nonNull_native();
    long long v44 = v3;
    sub_10004A39C(v30, (uint64_t)v33, v8);
    id v3 = v44;
    swift_bridgeObjectRelease();
    sub_1000219D8((uint64_t)v33);
  }
  sub_10000C054((uint64_t)v1 + 17, (uint64_t)&v37, &qword_1000A12E0);
  sub_10000C054((uint64_t)&v37, (uint64_t)&v43, &qword_1000A12E0);
  char v9 = v43;
  if (v43 != 2)
  {
    *(void *)&long long v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v31 + 1) = v10;
    AnyHashable.init<A>(_:)();
    uint64_t v32 = &type metadata for Bool;
    LOBYTE(v31) = v9;
    sub_100006B64(&v31, v30);
    char v11 = swift_isUniquelyReferenced_nonNull_native();
    long long v44 = v3;
    sub_10004A39C(v30, (uint64_t)v33, v11);
    id v3 = v44;
    swift_bridgeObjectRelease();
    sub_1000219D8((uint64_t)v33);
  }
  sub_10000C054((uint64_t)(v1 + 3), (uint64_t)v36, &qword_1000A12F0);
  sub_10000C054((uint64_t)v36, (uint64_t)&v44, &qword_1000A12F0);
  if ((v45 & 1) == 0)
  {
    uint64_t v12 = v44;
    *(void *)&long long v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v31 + 1) = v13;
    AnyHashable.init<A>(_:)();
    uint64_t v32 = &type metadata for Double;
    *(void *)&long long v31 = v12;
    sub_100006B64(&v31, v30);
    char v14 = swift_isUniquelyReferenced_nonNull_native();
    sub_10004A39C(v30, (uint64_t)v33, v14);
    swift_bridgeObjectRelease();
    sub_1000219D8((uint64_t)v33);
  }
  uint64_t v15 = v1[6];
  if (v15)
  {
    uint64_t v16 = v1[5];
    *(void *)&long long v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v31 + 1) = v17;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    uint64_t v32 = &type metadata for String;
    *(void *)&long long v31 = v16;
    *((void *)&v31 + 1) = v15;
    sub_100006B64(&v31, v30);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    sub_10004A39C(v30, (uint64_t)v33, v18);
    swift_bridgeObjectRelease();
    sub_1000219D8((uint64_t)v33);
  }
  sub_10000C054((uint64_t)(v1 + 7), (uint64_t)&v35, &qword_1000A12E0);
  sub_10000C054((uint64_t)&v35, (uint64_t)&v46, &qword_1000A12E0);
  char v19 = v46;
  if (v46 != 2)
  {
    *(void *)&long long v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v31 + 1) = v20;
    AnyHashable.init<A>(_:)();
    uint64_t v32 = &type metadata for Bool;
    LOBYTE(v31) = v19;
    sub_100006B64(&v31, v30);
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    sub_10004A39C(v30, (uint64_t)v33, v21);
    swift_bridgeObjectRelease();
    sub_1000219D8((uint64_t)v33);
  }
  uint64_t v22 = v1[9];
  if (v22)
  {
    uint64_t v23 = v1[8];
    *(void *)&long long v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v31 + 1) = v24;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    uint64_t v32 = &type metadata for String;
    *(void *)&long long v31 = v23;
    *((void *)&v31 + 1) = v22;
    sub_100006B64(&v31, v30);
    char v25 = swift_isUniquelyReferenced_nonNull_native();
    sub_10004A39C(v30, (uint64_t)v33, v25);
    swift_bridgeObjectRelease();
    sub_1000219D8((uint64_t)v33);
  }
  sub_10000C054((uint64_t)(v1 + 10), (uint64_t)&v34, &qword_1000A12E0);
  sub_10000C054((uint64_t)&v34, (uint64_t)&v47, &qword_1000A12E0);
  char v26 = v47;
  if (v47 != 2)
  {
    *(void *)&long long v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v31 + 1) = v27;
    AnyHashable.init<A>(_:)();
    uint64_t v32 = &type metadata for Bool;
    LOBYTE(v31) = v26;
    sub_100006B64(&v31, v30);
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    sub_10004A39C(v30, (uint64_t)v33, v28);
    swift_bridgeObjectRelease();
    sub_1000219D8((uint64_t)v33);
  }
  return v3;
}

uint64_t sub_1000219D8(uint64_t a1)
{
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for MessageOptions(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for MessageOptions()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MessageOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MessageOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v5 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

__n128 initializeWithTake for MessageOptions(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for MessageOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MessageOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageOptions()
{
  return &type metadata for MessageOptions;
}

uint64_t sub_100021D40(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  uint64_t v3 = type metadata accessor for SHA256Digest();
  v2[18] = v3;
  v2[19] = *(void *)(v3 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SHA256();
  v2[21] = v4;
  v2[22] = *(void *)(v4 - 8);
  v2[23] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SyncCollectionTargetList(0);
  v2[24] = v5;
  v2[25] = *(void *)(v5 - 8);
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SyncLibrary(0);
  v2[30] = v6;
  v2[31] = *(void *)(v6 - 8);
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  return _swift_task_switch(sub_100021F9C, 0, 0);
}

uint64_t sub_100021F9C()
{
  uint64_t v1 = (void *)v0[17];
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000220C4;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100022CE4;
  v0[13] = &unk_100092498;
  v0[14] = v2;
  [v1 composeSyncRequestWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000220C4()
{
  return _swift_task_switch(sub_1000221D0, 0, 0);
}

uint64_t sub_1000221D0()
{
  uint64_t v1 = *(void **)(v0 + 120);
  id v2 = [v1 library];
  if (!v2)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  uint64_t v3 = v2;
  id v4 = [v2 data];

  if (!v4) {
    goto LABEL_28;
  }
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  BinaryDecodingOptions.init()();
  sub_1000231E0(&qword_1000A1300, (void (*)(uint64_t))type metadata accessor for SyncLibrary);
  Message.init(serializedData:extensions:partial:options:)();
  id v5 = [v1 collectionTargetList];
  if (!v5)
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v6 = v5;
  uint64_t v50 = v1;
  id v7 = [v5 data];

  if (!v7)
  {
LABEL_30:
    __break(1u);
    JUMPOUT(0x100022CC4);
  }
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  BinaryDecodingOptions.init()();
  sub_1000231E0(&qword_1000A1308, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetList);
  Message.init(serializedData:extensions:partial:options:)();
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v45 = *(void *)(v0 + 256);
  uint64_t v9 = *(void *)(v0 + 240);
  uint64_t v43 = *(void *)(v0 + 264);
  uint64_t v44 = v9;
  uint64_t v10 = *(void *)(v0 + 200);
  uint64_t v47 = *(void *)(v0 + 208);
  uint64_t v48 = *(void *)(v0 + 216);
  uint64_t v49 = *(void *)(v0 + 192);
  uint64_t v11 = *(void *)(v0 + 128);
  UnknownStorage.init()();
  uint64_t v12 = (int *)type metadata accessor for SyncLibraryInfoResponse(0);
  uint64_t v13 = v11 + v12[5];
  char v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v14(v13, 1, 1, v9);
  uint64_t v15 = v11 + v12[6];
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v16(v15, 1, 1, v49);
  uint64_t v17 = (uint64_t *)(v11 + v12[7]);
  *uint64_t v17 = 0;
  v17[1] = 0;
  char v42 = v17;
  sub_100022D38(v43, v45, type metadata accessor for SyncLibrary);
  sub_10000BD30(v13, &qword_1000A1310);
  sub_100022DA0(v45, v13, type metadata accessor for SyncLibrary);
  v14(v13, 0, 1, v44);
  sub_100022D38(v48, v47, type metadata accessor for SyncCollectionTargetList);
  sub_10000BD30(v15, &qword_1000A1318);
  sub_100022DA0(v47, v15, type metadata accessor for SyncCollectionTargetList);
  v16(v15, 0, 1, v49);
  SHA256.init()();
  uint64_t v18 = Message.serializedData(partial:)();
  unint64_t v20 = v19;
  uint64_t v21 = v18;
  switch(v19 >> 62)
  {
    case 1uLL:
      if (v18 >> 32 < (int)v18)
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      sub_10001FF5C(v18, v19);
      sub_100023100((int)v21, v21 >> 32);
LABEL_10:
      sub_10002001C(v21, v20);
      sub_10002001C(v21, v20);
LABEL_13:
      sub_1000231E0((unint64_t *)&qword_1000A1320, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoResponse);
      uint64_t v24 = Message.serializedData(partial:)();
      unint64_t v27 = v25;
      uint64_t v28 = v24;
      switch(v25 >> 62)
      {
        case 1uLL:
          if (v24 >> 32 < (int)v24) {
            goto LABEL_26;
          }
          sub_10001FF5C(v24, v25);
          sub_100023100((int)v28, v28 >> 32);
          break;
        case 2uLL:
          uint64_t v29 = *(void *)(v24 + 16);
          uint64_t v30 = *(void *)(v24 + 24);
          sub_10001FF5C(v24, v25);
          swift_retain();
          swift_retain();
          sub_100023100(v29, v30);
          swift_release();
          swift_release();
          break;
        case 3uLL:
          sub_1000231E0(&qword_1000A1328, (void (*)(uint64_t))&type metadata accessor for SHA256);
          *(void *)(v0 + 300) = 0;
          *(void *)(v0 + 306) = 0;
          goto LABEL_23;
        default:
          *(void *)(v0 + 272) = v24;
          *(_WORD *)(v0 + 280) = v25;
          *(unsigned char *)(v0 + 282) = BYTE2(v25);
          *(unsigned char *)(v0 + 283) = BYTE3(v25);
          *(unsigned char *)(v0 + 284) = BYTE4(v25);
          *(unsigned char *)(v0 + 285) = BYTE5(v25);
          sub_1000231E0(&qword_1000A1328, (void (*)(uint64_t))&type metadata accessor for SHA256);
LABEL_23:
          dispatch thunk of HashFunction.update(bufferPointer:)();
          break;
      }
      sub_10002001C(v28, v27);
      sub_10002001C(v28, v27);
      uint64_t v31 = *(void *)(v0 + 264);
      uint64_t v46 = *(void *)(v0 + 216);
      uint64_t v33 = *(void *)(v0 + 176);
      uint64_t v32 = *(void *)(v0 + 184);
      uint64_t v35 = *(void *)(v0 + 160);
      uint64_t v34 = *(void *)(v0 + 168);
      uint64_t v37 = *(void *)(v0 + 144);
      uint64_t v36 = *(void *)(v0 + 152);
      SHA256.finalize()();
      uint64_t v38 = sub_100022E68();
      uint64_t v40 = v39;
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);

      swift_bridgeObjectRelease();
      *char v42 = v38;
      v42[1] = v40;
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
      sub_100022E08(v46, type metadata accessor for SyncCollectionTargetList);
      sub_100022E08(v31, type metadata accessor for SyncLibrary);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
      return v41();
    case 2uLL:
      uint64_t v22 = *(void *)(v18 + 16);
      uint64_t v23 = *(void *)(v18 + 24);
      sub_10001FF5C(v18, v19);
      swift_retain();
      swift_retain();
      sub_100023100(v22, v23);
      swift_release();
      swift_release();
      goto LABEL_10;
    case 3uLL:
      sub_1000231E0(&qword_1000A1328, (void (*)(uint64_t))&type metadata accessor for SHA256);
      *(void *)(v0 + 286) = 0;
      *(void *)(v0 + 292) = 0;
      goto LABEL_12;
    default:
      *(void *)(v0 + 314) = v18;
      *(_WORD *)(v0 + 322) = v19;
      *(unsigned char *)(v0 + 324) = BYTE2(v19);
      *(unsigned char *)(v0 + 325) = BYTE3(v19);
      *(unsigned char *)(v0 + 326) = BYTE4(v19);
      *(unsigned char *)(v0 + 327) = BYTE5(v19);
      sub_1000231E0(&qword_1000A1328, (void (*)(uint64_t))&type metadata accessor for SHA256);
LABEL_12:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      sub_10002001C(v21, v20);
      sub_10002001C(v21, v20);
      goto LABEL_13;
  }
}

uint64_t sub_100022CE4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  **(void **)(*(void *)(v2 + 64) + 40) = a2;
  id v3 = a2;

  return _swift_continuation_resume(v2);
}

uint64_t sub_100022D38(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100022DA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100022E08(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100022E68()
{
  uint64_t v1 = type metadata accessor for SHA256Digest();
  __chkstk_darwin(v1);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v0, v1);
  sub_1000231E0(&qword_1000A1330, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  uint64_t v5 = v20;
  uint64_t v6 = v21;
  uint64_t v7 = v20[2];
  if (v21 == v7)
  {
    uint64_t v8 = &_swiftEmptyArrayStorage;
LABEL_3:
    swift_bridgeObjectRelease();
    unint64_t v20 = v8;
    sub_100006290(&qword_1000A0D68);
    sub_100023228();
    uint64_t v9 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    if (v21 < v7)
    {
      uint64_t v8 = &_swiftEmptyArrayStorage;
      long long v19 = xmmword_100079C30;
      unint64_t v10 = v21;
      while ((v6 & 0x8000000000000000) == 0)
      {
        if (v10 >= v5[2]) {
          goto LABEL_15;
        }
        char v11 = *((unsigned char *)v5 + v10 + 32);
        sub_100006290(&qword_1000A0D30);
        uint64_t v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = v19;
        *(void *)(v12 + 56) = &type metadata for UInt8;
        *(void *)(v12 + 64) = &protocol witness table for UInt8;
        *(unsigned char *)(v12 + 32) = v11;
        uint64_t v13 = String.init(format:_:)();
        uint64_t v15 = v14;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1000511A0(0, v8[2] + 1, 1, (char *)v8);
          uint64_t v8 = (void *)result;
        }
        unint64_t v17 = v8[2];
        unint64_t v16 = v8[3];
        if (v17 >= v16 >> 1)
        {
          uint64_t result = (uint64_t)sub_1000511A0((char *)(v16 > 1), v17 + 1, 1, (char *)v8);
          uint64_t v8 = (void *)result;
        }
        ++v10;
        v8[2] = v17 + 1;
        uint64_t v18 = (char *)&v8[2 * v17];
        *((void *)v18 + 4) = v13;
        *((void *)v18 + 5) = v15;
        if (v7 == v10) {
          goto LABEL_3;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100023100(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      sub_1000231E0(&qword_1000A1328, (void (*)(uint64_t))&type metadata accessor for SHA256);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000231E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100023228()
{
  unint64_t result = qword_1000A1338;
  if (!qword_1000A1338)
  {
    sub_100007650(&qword_1000A0D68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1338);
  }
  return result;
}

id sub_100023284(void *a1, void *a2)
{
  uint64_t v5 = sub_100006290(&qword_1000A1380);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  *(void *)(v2 + 120) = a2;
  *(void *)(v2 + 128) = 0;
  *(unsigned char *)(v2 + 136) = 0;
  *(void *)(v2 + 152) = 0;
  *(void *)(v2 + 160) = 0;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 112) = a1;
  uint64_t v8 = (objc_class *)type metadata accessor for MiddlewareDeviceController();
  v16.receiver = (id)v2;
  v16.super_class = v8;
  id v9 = a1;
  id v10 = a2;
  id v11 = [super init];
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = 0;
  v13[3] = 0;
  v13[4] = v11;
  id v14 = v11;
  sub_100048120((uint64_t)v7, (uint64_t)&unk_1000A1408, (uint64_t)v13);

  swift_release();
  return v14;
}

uint64_t sub_1000233FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  sub_100006290(&qword_1000A1380);
  v4[3] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v4[4] = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_1000234FC;
  v6[7] = a4;
  v6[8] = sub_10000BE18(0, &qword_1000A1140);
  return _swift_task_switch(sub_100024518, 0, 0);
}

uint64_t sub_1000234FC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_10002360C, v1, 0);
}

uint64_t sub_10002360C()
{
  uint64_t v1 = v0[2];
  if (*(void *)(v1 + 144))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  uint64_t v2 = v0[3];
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  uint64_t v5 = (void *)swift_allocObject();
  _OWORD v5[2] = 0;
  v5[3] = 0;
  v5[4] = v4;
  *(void *)(v1 + 144) = sub_100048120(v2, (uint64_t)&unk_1000A1418, (uint64_t)v5);
  swift_release();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000237B0()
{
  if (*(void *)(v0 + 144))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  if (*(void *)(v0 + 152))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100023878()
{
  sub_1000237B0();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000238A4()
{
  return sub_1000239D4((uint64_t)&unk_100092560, (uint64_t)&unk_100092588, (uint64_t)&unk_1000A13F0);
}

uint64_t sub_1000238E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100023900, a4, 0);
}

uint64_t sub_100023900()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if ((*(unsigned char *)(v1 + 136) & 1) == 0)
  {
    *(unsigned char *)(v1 + 136) = 1;
    uint64_t v2 = *(void **)(v1 + 160);
    if (v2) {
      [v2 resume];
    }
  }
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100023998()
{
  return sub_1000239D4((uint64_t)&unk_100092510, (uint64_t)&unk_100092538, (uint64_t)&unk_1000A13D8);
}

uint64_t sub_1000239D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v6 = sub_100006290(&qword_1000A1380);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  id v11 = (void *)swift_allocObject();
  _OWORD v11[2] = 0;
  v11[3] = 0;
  v11[4] = v5;
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  swift_retain();
  if (v12 == 1)
  {
    sub_10000BD30((uint64_t)v8, &qword_1000A1380);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (v11[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v15;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
  }
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = v11;
  if (v14 | v13)
  {
    v18[0] = 0;
    v18[1] = 0;
    v18[2] = v13;
    v18[3] = v14;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_100023C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100023C28, a4, 0);
}

uint64_t sub_100023C28()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v1 + 136) == 1)
  {
    *(unsigned char *)(v1 + 136) = 0;
    uint64_t v2 = *(void **)(v1 + 160);
    if (v2) {
      [v2 pause];
    }
  }
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100023CC0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = swift_retain();
  a3(v4);

  return swift_release();
}

uint64_t sub_100023D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  sub_100006290(&qword_1000A1420);
  v4[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  return _swift_task_switch(sub_100023DF4, 0, 0);
}

uint64_t sub_100023DF4()
{
  id v1 = [self defaultCenter];
  NSNotificationCenter.notifications(named:object:)();

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  swift_beginAccess();
  unint64_t v2 = sub_100026B88();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100023F1C;
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  return dispatch thunk of AsyncIteratorProtocol.next()(v4, v5, v2);
}

uint64_t sub_100023F1C()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_100024244;
  }
  else {
    unint64_t v2 = sub_100024030;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100024030()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = type metadata accessor for Notification();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t Strong = swift_weakLoadStrong();
    v0[13] = Strong;
    if (Strong)
    {
      uint64_t v6 = Strong;
      uint64_t v7 = (void *)swift_task_alloc();
      v0[14] = v7;
      void *v7 = v0;
      v7[1] = sub_1000242C8;
      v7[7] = v6;
      v7[8] = sub_10000BE18(0, &qword_1000A1140);
      return _swift_task_switch(sub_100024518, 0, 0);
    }
    else
    {
      sub_10000BD30(v0[7], &qword_1000A1420);
      unint64_t v8 = sub_100026B88();
      uint64_t v9 = (void *)swift_task_alloc();
      v0[11] = v9;
      *uint64_t v9 = v0;
      v9[1] = sub_100023F1C;
      uint64_t v10 = v0[7];
      uint64_t v11 = v0[8];
      return dispatch thunk of AsyncIteratorProtocol.next()(v10, v11, v8);
    }
  }
}

uint64_t sub_100024244()
{
  *(void *)(v0 + 40) = *(void *)(v0 + 96);
  sub_100006290((uint64_t *)&unk_1000A1150);
  uint64_t v1 = swift_dynamicCast();
  return _swift_willThrowTypedImpl(v1, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_1000242C8()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1000243E0, 0, 0);
}

uint64_t sub_1000243E0()
{
  sub_10000BD30(v0[7], &qword_1000A1420);
  unint64_t v1 = sub_100026B88();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[11] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100023F1C;
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  return dispatch thunk of AsyncIteratorProtocol.next()(v3, v4, v1);
}

uint64_t sub_100024498()
{
  *(void *)(v1 + 56) = v0;
  *(void *)(v1 + 64) = sub_10000BE18(0, &qword_1000A1140);
  return _swift_task_switch(sub_100024518, 0, 0);
}

uint64_t sub_100024518()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = swift_task_alloc();
  v0[9] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[10] = v3;
  uint64_t v4 = sub_100006290(&qword_1000A1148);
  *uint64_t v3 = v0;
  v3[1] = sub_100024620;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0x6168735F6F74706ELL, 0xEB00000000646572, sub_1000200C8, v2, v4);
}

uint64_t sub_100024620()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100024738, 0, 0);
}

uint64_t sub_100024738()
{
  uint64_t v1 = v0[7];
  v0[11] = v0[2];
  return _swift_task_switch(sub_10002475C, v1, 0);
}

uint64_t sub_10002475C()
{
  long long v19 = v0;
  uint64_t v1 = v0[7];
  if (v0[11])
  {
    uint64_t v2 = *(void *)(v1 + 112);
    uint64_t v3 = (void *)swift_task_alloc();
    v0[12] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100024AEC;
    return sub_10004D494(v2);
  }
  else if (*(void *)(v1 + 128))
  {
    v0[14] = 0;
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100006D88(v5, (uint64_t)qword_1000A4F48);
    swift_retain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315394;
      uint64_t v9 = *(void **)(v1 + 128);
      v0[3] = v9;
      id v10 = v9;
      sub_100006290((uint64_t *)&unk_1000A13C0);
      uint64_t v11 = String.init<A>(describing:)();
      v0[4] = sub_10000B6D8(v11, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      v0[5] = 0;
      uint64_t v13 = String.init<A>(describing:)();
      v0[6] = sub_10000B6D8(v13, v14, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[DeviceController] NRDevice has been updated from %s to %s!", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v16 = *(void **)(v1 + 128);
    *(void *)(v1 + 128) = 0;

    sub_100025140();
    unint64_t v17 = (void *)swift_task_alloc();
    v0[15] = v17;
    *unint64_t v17 = v0;
    v17[1] = sub_100024FD0;
    return sub_100025CF8();
  }
  else
  {
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
}

uint64_t sub_100024AEC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)v1 + 88);
  uint64_t v3 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 104) = a1;
  swift_task_dealloc();

  return _swift_task_switch(sub_100024C1C, v3, 0);
}

uint64_t sub_100024C1C()
{
  unint64_t v27 = v0;
  uint64_t v1 = v0[7];
  uint64_t v2 = (void *)v0[13];
  uint64_t v3 = *(void **)(v1 + 128);
  if (v2)
  {
    if (v3)
    {
      sub_10000BE18(0, (unint64_t *)&qword_1000A0848);
      id v4 = v3;
      id v5 = v2;
      char v6 = static NSObject.== infix(_:_:)();

      if (v6)
      {

LABEL_7:
        os_log_type_t v7 = (uint64_t (*)(void))v0[1];
        return v7();
      }
      uint64_t v2 = (void *)v0[13];
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_7;
    }
    uint64_t v2 = 0;
  }
  v0[14] = v2;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100006D88(v9, (uint64_t)qword_1000A4F48);
  id v10 = v2;
  swift_retain_n();
  id v11 = v10;
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v25 = v1;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v15 = *(void **)(v25 + 128);
    v0[3] = v15;
    id v16 = v15;
    sub_100006290((uint64_t *)&unk_1000A13C0);
    uint64_t v17 = String.init<A>(describing:)();
    v0[4] = sub_10000B6D8(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    v0[5] = v2;
    id v19 = v11;
    uint64_t v20 = String.init<A>(describing:)();
    v0[6] = sub_10000B6D8(v20, v21, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "[DeviceController] NRDevice has been updated from %s to %s!", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = v25;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v22 = *(void **)(v1 + 128);
  *(void *)(v1 + 128) = v2;
  id v23 = v11;

  sub_100025140();
  uint64_t v24 = (void *)swift_task_alloc();
  v0[15] = v24;
  void *v24 = v0;
  v24[1] = sub_100024FD0;
  return sub_100025CF8();
}

uint64_t sub_100024FD0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000250E0, v1, 0);
}

uint64_t sub_1000250E0()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100025140()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006290(&qword_1000A1380);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + 152))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  id v5 = *(void **)(v0 + 128);
  if (v5)
  {
    uint64_t v6 = qword_1000A0EB0;
    id v7 = v5;
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100006D88(v8, (uint64_t)qword_1000A4F48);
    id v9 = v7;
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v13 = (void *)swift_slowAlloc();
      uint64_t v22 = v4;
      id v23 = v9;
      *(_DWORD *)unint64_t v12 = 138412290;
      os_log_t v21 = v10;
      id v14 = v9;
      id v4 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v13 = v5;

      id v10 = v21;
      _os_log_impl((void *)&_mh_execute_header, v21, v11, "[DeviceController] Observing device capability updates for %@.", v12, 0xCu);
      sub_100006290((uint64_t *)&unk_1000A1120);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v16 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v4, 1, 1, v16);
    uint64_t v17 = swift_allocObject();
    swift_weakInit();
    unint64_t v18 = (void *)swift_allocObject();
    v18[2] = 0;
    v18[3] = 0;
    void v18[4] = v9;
    v18[5] = v17;
    id v19 = v9;
    *(void *)(v1 + 152) = sub_100048120((uint64_t)v4, (uint64_t)&unk_1000A1390, (uint64_t)v18);

    return swift_release();
  }
  else
  {
    *(void *)(v0 + 152) = 0;
    return swift_release();
  }
}

uint64_t sub_100025470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v6 = sub_100006290(&qword_1000A13A0);
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v8 = sub_100006290(&qword_1000A13A8);
  v5[13] = v8;
  v5[14] = *(void *)(v8 - 8);
  v5[15] = swift_task_alloc();
  uint64_t v9 = sub_100006290(&qword_1000A13B0);
  v5[16] = v9;
  v5[17] = *(void *)(v9 - 8);
  v5[18] = swift_task_alloc();
  return _swift_task_switch(sub_100025650, 0, 0);
}

uint64_t sub_100025650()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v17 = v0[13];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[8];
  uint64_t v6 = (void *)v0[9];
  uint64_t v14 = v0[10];
  uint64_t v15 = v0[7];
  uint64_t v16 = v0[5];
  sub_100006290(&qword_1000A13B8);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100079C30;
  id v9 = [self npto_photosSyncV2Capability];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v3, v14);
  *uint64_t v6 = 1;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v6, enum case for AsyncStream.Continuation.BufferingPolicy.bufferingNewest<A>(_:), v15);
  uint64_t v10 = swift_task_alloc();
  *(void *)(v10 + 16) = v16;
  *(void *)(v10 + 24) = v8;
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_task_dealloc();
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v17);
  swift_beginAccess();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[19] = v11;
  void *v11 = v0;
  v11[1] = sub_1000258B8;
  uint64_t v12 = v0[16];
  return AsyncStream.Iterator.next(isolation:)(v0 + 22, 0, 0, v12);
}

uint64_t sub_1000258B8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000259B4, 0, 0);
}

uint64_t sub_1000259B4()
{
  if (*(unsigned char *)(v0 + 176))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 128));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    uint64_t Strong = swift_weakLoadStrong();
    *(void *)(v0 + 160) = Strong;
    if (Strong)
    {
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 168) = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_100025B68;
      return sub_100025CF8();
    }
    else
    {
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 152) = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_1000258B8;
      uint64_t v6 = *(void *)(v0 + 128);
      return AsyncStream.Iterator.next(isolation:)(v0 + 176, 0, 0, v6);
    }
  }
}

uint64_t sub_100025B68()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 152) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000258B8;
  uint64_t v4 = *(void *)(v1 + 128);
  return AsyncStream.Iterator.next(isolation:)(v1 + 176, 0, 0, v4);
}

uint64_t sub_100025CF8()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  return _swift_task_switch(sub_100025DB8, v0, 0);
}

uint64_t sub_100025DB8()
{
  uint64_t v20 = v0;
  uint64_t v2 = v0 + 4;
  uint64_t v1 = v0[4];
  uint64_t v3 = *(void **)(v1 + 128);
  v0[8] = v3;
  if (v3)
  {
    uint64_t v4 = self;
    id v5 = v3;
    id v6 = [v4 npto_photosSyncV2Capability];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    return _swift_task_switch(sub_100026094, 0, 0);
  }
  else
  {
    *(void *)(v1 + 160) = 0;
    swift_unknownObjectRelease();
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100006D88(v7, (uint64_t)qword_1000A4F48);
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *v2;
    if (v10)
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v19 = v13;
      v0[2] = *(void *)(v11 + 160);
      swift_unknownObjectRetain();
      sub_100006290(&qword_1000A1378);
      uint64_t v14 = String.init<A>(describing:)();
      v0[3] = sub_10000B6D8(v14, v15, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[DeviceController] Concrete device controller has been updated to %s.", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    if (*(unsigned char *)(*v2 + 136) == 1)
    {
      uint64_t v16 = *(void **)(*v2 + 160);
      if (v16) {
        [v16 resume];
      }
    }
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_100026094()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = swift_task_alloc();
  v0[9] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[10] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100026190;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 11, 0, 0, 0xD00000000000001BLL, 0x80000001000819A0, sub_100026640, v3, &type metadata for Bool);
}

uint64_t sub_100026190()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000262A8, 0, 0);
}

uint64_t sub_1000262A8()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  *(unsigned char *)(v0 + 89) = *(unsigned char *)(v0 + 88);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100026328, v4, 0);
}

uint64_t sub_100026328()
{
  uint64_t v19 = v0;
  uint64_t v1 = (uint64_t *)(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 32);
  uint64_t v4 = (void *)v2[14];
  uint64_t v3 = (void *)v2[15];
  id v5 = *(void **)(v0 + 64);
  if (*(unsigned char *)(v0 + 89) == 1)
  {
    type metadata accessor for ServerDeviceController();
    swift_allocObject();
    uint64_t v6 = sub_10001604C(v4, v3);
  }
  else
  {
    uint64_t v6 = [objc_allocWithZone((Class)NPTOLegacyCompanionSyncDeviceController) initWithDevice:v4 service:v3];
  }
  v2[20] = v6;

  swift_unknownObjectRelease();
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100006D88(v7, (uint64_t)qword_1000A4F48);
  swift_retain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *v1;
  if (v10)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    *(void *)(v0 + 16) = *(void *)(v11 + 160);
    swift_unknownObjectRetain();
    sub_100006290(&qword_1000A1378);
    uint64_t v13 = String.init<A>(describing:)();
    *(void *)(v0 + 24) = sub_10000B6D8(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[DeviceController] Concrete device controller has been updated to %s.", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  if (*(unsigned char *)(*v1 + 136) == 1)
  {
    unint64_t v15 = *(void **)(*v1 + 160);
    if (v15) {
      [v15 resume];
    }
  }
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t type metadata accessor for MiddlewareDeviceController()
{
  return self;
}

uint64_t sub_100026640(uint64_t a1)
{
  return sub_10004E1A4(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100026648()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100026680()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000266C8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100021434;
  return sub_100025470(a1, v4, v5, v7, v6);
}

uint64_t sub_100026788(uint64_t a1)
{
  return sub_100048904(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100026794()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100021434;
  v3[2] = v2;
  return _swift_task_switch(sub_100023C28, v2, 0);
}

uint64_t sub_10002683C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100026878()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100021434;
  v3[2] = v2;
  return _swift_task_switch(sub_100023900, v2, 0);
}

uint64_t sub_100026920(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001768C;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1000A2178 + dword_1000A2178);
  return v6(a1, v4);
}

uint64_t sub_1000269DC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100021434;
  return sub_1000233FC(a1, v4, v5, v6);
}

uint64_t sub_100026A94()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100026AD4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10001768C;
  return sub_100023D04(a1, v4, v5, v6);
}

unint64_t sub_100026B88()
{
  unint64_t result = qword_1000A1428;
  if (!qword_1000A1428)
  {
    type metadata accessor for NSNotificationCenter.Notifications.Iterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1428);
  }
  return result;
}

id sub_100026BE4()
{
  uint64_t v1 = v0;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100006D88(v2, (uint64_t)qword_1000A4F48);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    uint64_t v9 = *(void **)(v1 + 112);
    id v7 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v9;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[InitialSync] Configured sync coordinator %@.", v5, 0xCu);
    sub_100006290((uint64_t *)&unk_1000A1120);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return [*(id *)(v1 + 112) setDelegate:v1];
}

uint64_t sub_100026DD0()
{
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for InitialSyncServerController()
{
  return self;
}

uint64_t sub_100026F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[16] = a4;
  v5[17] = v4;
  v5[14] = a2;
  v5[15] = a3;
  v5[13] = a1;
  return _swift_task_switch(sub_100026F88, v4, 0);
}

uint64_t sub_100026F88()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  long long v10 = *(_OWORD *)(v0 + 128);
  (*(void (**)(uint64_t, void))(v10 + 40))(v2, *(void *)(v0 + 128));
  sub_1000205C8(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 48);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 144) = v5;
  *(void *)(v5 + 16) = v2;
  *(_OWORD *)(v5 + 24) = v10;
  *(void *)(v5 + 40) = v1;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *uint64_t v6 = v0;
  v6[1] = sub_1000270E0;
  uint64_t v8 = *(void *)(v0 + 104);
  return withCancellationHandlingContinuation<A>(timeout:_:)(v8, v3, v4, sub_100034C50, v5, AssociatedTypeWitness);
}

uint64_t sub_1000270E0()
{
  uint64_t v2 = (void *)*v1;
  v2[20] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[17];
    return _swift_task_switch(sub_10002721C, v3, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_10002721C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_100027280()
{
  uint64_t v1 = v0;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100006D88(v2, (uint64_t)qword_1000A4F48);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_retain();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v1;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[Messaging] Resuming messaging service %@", v5, 0xCu);
    sub_100006290((uint64_t *)&unk_1000A1120);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return [*(id *)(v1 + 120) addDelegate:v1 queue:*(void *)(v1 + 144)];
}

id sub_100027434()
{
  uint64_t v1 = v0;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100006D88(v2, (uint64_t)qword_1000A4F48);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_retain();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v1;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[Messaging] Pausing messaging service %@", v5, 0xCu);
    sub_100006290((uint64_t *)&unk_1000A1120);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return [*(id *)(v1 + 120) removeDelegate:v1];
}

uint64_t sub_1000275E4(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 208) = a2;
  *(void *)(v3 + 184) = a1;
  *(void *)(v3 + 192) = v2;
  *(void *)(v3 + 160) = a1;
  return _swift_task_switch(sub_10002760C, v2, 0);
}

uint64_t sub_10002760C()
{
  uint64_t v22 = v0;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006D88(v1, (uint64_t)qword_1000A4F48);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 184);
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v0 + 168) = v5;
    type metadata accessor for TemporaryResourceFile();
    swift_retain();
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 176) = sub_10000B6D8(v7, v8, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[Messaging] Handling request %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v9 = *(void *)(v0 + 192);
  swift_beginAccess();
  uint64_t v10 = *(void *)(v9 + 128);
  if (*(void *)(v10 + 16) && (unint64_t v11 = sub_1000516A8(*(unsigned char *)(v0 + 208)), (v12 & 1) != 0))
  {
    sub_100020828(*(void *)(v10 + 56) + 40 * v11, v0 + 56);
    if (*(void *)(v0 + 80))
    {
      uint64_t v13 = *(void *)(v0 + 192);
      sub_100020828(v0 + 56, v0 + 16);
      sub_10000BD30(v0 + 56, &qword_1000A1270);
      uint64_t v14 = *(void *)(v0 + 40);
      uint64_t v15 = *(void *)(v0 + 48);
      sub_1000346CC((void *)(v0 + 16), v14);
      *(void *)(v0 + 120) = type metadata accessor for IDSMessagingService();
      *(void *)(v0 + 128) = &off_1000925F0;
      *(void *)(v0 + 96) = v13;
      uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 8)
                                                                                + **(int **)(v15 + 8));
      swift_retain();
      uint64_t v16 = (void *)swift_task_alloc();
      *(void *)(v0 + 200) = v16;
      uint64_t v17 = type metadata accessor for TemporaryResourceFile();
      *uint64_t v16 = v0;
      v16[1] = sub_1000279E0;
      return v20(v0 + 160, v0 + 96, v17, v14, v15);
    }
  }
  else
  {
    *(void *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  sub_10000BD30(v0 + 56, &qword_1000A1270);
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_1000279E0()
{
  uint64_t v1 = *(void *)v0 + 96;
  uint64_t v2 = *(void *)(*(void *)v0 + 192);
  swift_task_dealloc();
  sub_10000C2CC(v1);
  return _swift_task_switch(sub_100027AFC, v2, 0);
}

uint64_t sub_100027AFC()
{
  sub_10000C2CC(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100027B5C(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 208) = a2;
  *(void *)(v3 + 184) = a1;
  *(void *)(v3 + 192) = v2;
  *(void *)(v3 + 160) = a1;
  return _swift_task_switch(sub_100027B84, v2, 0);
}

uint64_t sub_100027B84()
{
  uint64_t v24 = v0;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v2 = type metadata accessor for Logger();
  sub_100006D88(v2, (uint64_t)qword_1000A4F48);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 184);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v0 + 168) = v6;
    id v8 = v3;
    sub_100006290((uint64_t *)&unk_1000A15A0);
    uint64_t v9 = String.init<A>(describing:)();
    *(void *)(v0 + 176) = sub_10000B6D8(v9, v10, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Messaging] Handling request %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v11 = *(void *)(v0 + 192);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v11 + 128);
  if (*(void *)(v12 + 16) && (unint64_t v13 = sub_1000516A8(*(unsigned char *)(v0 + 208)), (v14 & 1) != 0))
  {
    sub_100020828(*(void *)(v12 + 56) + 40 * v13, v0 + 56);
    if (*(void *)(v0 + 80))
    {
      uint64_t v15 = *(void *)(v0 + 192);
      sub_100020828(v0 + 56, v0 + 16);
      sub_10000BD30(v0 + 56, &qword_1000A1270);
      uint64_t v16 = *(void *)(v0 + 40);
      uint64_t v17 = *(void *)(v0 + 48);
      sub_1000346CC((void *)(v0 + 16), v16);
      *(void *)(v0 + 120) = type metadata accessor for IDSMessagingService();
      *(void *)(v0 + 128) = &off_1000925F0;
      *(void *)(v0 + 96) = v15;
      uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 8)
                                                                                + **(int **)(v17 + 8));
      swift_retain();
      uint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 200) = v18;
      uint64_t v19 = sub_100006290((uint64_t *)&unk_1000A15A0);
      void *v18 = v0;
      v18[1] = sub_1000279E0;
      return v22(v0 + 160, v0 + 96, v19, v16, v17);
    }
  }
  else
  {
    *(void *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  sub_10000BD30(v0 + 56, &qword_1000A1270);
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t sub_100027F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[20] = a3;
  v4[21] = v3;
  v4[18] = a1;
  v4[19] = a2;
  v4[15] = a1;
  return _swift_task_switch(sub_100027F74, v3, 0);
}

uint64_t sub_100027F74()
{
  uint64_t v24 = v0;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006D88(v1, (uint64_t)qword_1000A4F48);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 144);
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v0 + 128) = v5;
    type metadata accessor for TemporaryResourceFile();
    swift_retain();
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 136) = sub_10000B6D8(v7, v8, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[Messaging] Handling response %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v9 = (_OWORD *)(v0 + 16);
  uint64_t v10 = *(void *)(v0 + 168);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v10 + 136);
  if (*(void *)(v11 + 16))
  {
    uint64_t v13 = *(void *)(v0 + 152);
    uint64_t v12 = *(void *)(v0 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v14 = sub_100051718(v13, v12);
    if (v15)
    {
      sub_100020828(*(void *)(v11 + 56) + 40 * v14, v0 + 16);
    }
    else
    {
      *(void *)(v0 + 48) = 0;
      *uint64_t v9 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    *(void *)(v0 + 48) = 0;
    *uint64_t v9 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    if (*(void *)(v0 + 40))
    {
LABEL_15:
      sub_100020828(v0 + 16, v0 + 56);
      sub_10000BD30(v0 + 16, &qword_1000A11D0);
      uint64_t v18 = *(void *)(v0 + 80);
      uint64_t v19 = *(void *)(v0 + 88);
      sub_1000346CC((void *)(v0 + 56), v18);
      uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 + 8) + **(int **)(v19 + 8));
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 176) = v20;
      uint64_t v21 = type metadata accessor for TemporaryResourceFile();
      void *v20 = v0;
      v20[1] = sub_100028360;
      return v22(v0 + 120, v21, v18, v19);
    }
  }
  sub_10000BD30(v0 + 16, &qword_1000A11D0);
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_100028360()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 168);
  swift_task_dealloc();
  return _swift_task_switch(sub_100028470, v1, 0);
}

uint64_t sub_100028470()
{
  sub_10000C2CC(v0 + 56);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000284D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[20] = a3;
  v4[21] = v3;
  v4[18] = a1;
  v4[19] = a2;
  v4[15] = a1;
  return _swift_task_switch(sub_1000284F8, v3, 0);
}

uint64_t sub_1000284F8()
{
  uint64_t v26 = v0;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v2 = type metadata accessor for Logger();
  sub_100006D88(v2, (uint64_t)qword_1000A4F48);
  id v3 = v1;
  BOOL v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 144);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v0 + 128) = v6;
    id v8 = v3;
    sub_100006290((uint64_t *)&unk_1000A15A0);
    uint64_t v9 = String.init<A>(describing:)();
    *(void *)(v0 + 136) = sub_10000B6D8(v9, v10, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Messaging] Handling response %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v11 = (_OWORD *)(v0 + 16);
  uint64_t v12 = *(void *)(v0 + 168);
  swift_beginAccess();
  uint64_t v13 = *(void *)(v12 + 136);
  if (*(void *)(v13 + 16))
  {
    uint64_t v15 = *(void *)(v0 + 152);
    uint64_t v14 = *(void *)(v0 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v16 = sub_100051718(v15, v14);
    if (v17)
    {
      sub_100020828(*(void *)(v13 + 56) + 40 * v16, v0 + 16);
    }
    else
    {
      *(void *)(v0 + 48) = 0;
      _OWORD *v11 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    *(void *)(v0 + 48) = 0;
    _OWORD *v11 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    if (*(void *)(v0 + 40))
    {
LABEL_15:
      sub_100020828(v0 + 16, v0 + 56);
      sub_10000BD30(v0 + 16, &qword_1000A11D0);
      uint64_t v20 = *(void *)(v0 + 80);
      uint64_t v21 = *(void *)(v0 + 88);
      sub_1000346CC((void *)(v0 + 56), v20);
      uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 + 8) + **(int **)(v21 + 8));
      uint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 176) = v22;
      uint64_t v23 = sub_100006290((uint64_t *)&unk_1000A15A0);
      *uint64_t v22 = v0;
      v22[1] = sub_100028360;
      return v24(v0 + 120, v23, v20, v21);
    }
  }
  sub_10000BD30(v0 + 16, &qword_1000A11D0);
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_1000288D8(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return _swift_task_switch(sub_1000288FC, v2, 0);
}

uint64_t sub_1000288FC()
{
  uint64_t v20 = v0;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006D88(v1, (uint64_t)qword_1000A4F48);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    BOOL v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)BOOL v4 = 136315138;
    uint64_t v5 = String.init<A>(describing:)();
    *(void *)(v0 + 120) = sub_10000B6D8(v5, v6, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[Messaging] Handling response %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v7 = (_OWORD *)(v0 + 16);
  uint64_t v8 = *(void *)(v0 + 144);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v8 + 136);
  if (*(void *)(v9 + 16))
  {
    uint64_t v11 = *(void *)(v0 + 128);
    uint64_t v10 = *(void *)(v0 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_100051718(v11, v10);
    if (v13)
    {
      sub_100020828(*(void *)(v9 + 56) + 40 * v12, v0 + 16);
    }
    else
    {
      *(void *)(v0 + 48) = 0;
      _OWORD *v7 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 40)) {
      goto LABEL_14;
    }
  }
  else
  {
    *(void *)(v0 + 48) = 0;
    _OWORD *v7 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    if (*(void *)(v0 + 40))
    {
LABEL_14:
      sub_100020828(v0 + 16, v0 + 56);
      sub_10000BD30(v0 + 16, &qword_1000A11D0);
      uint64_t v16 = *(void *)(v0 + 88);
      sub_1000346CC((void *)(v0 + 56), *(void *)(v0 + 80));
      uint64_t v18 = (uint64_t (*)(void))(*(void *)(v16 + 8) + **(int **)(v16 + 8));
      char v17 = (void *)swift_task_alloc();
      *(void *)(v0 + 152) = v17;
      *char v17 = v0;
      v17[1] = sub_100028C78;
      return v18();
    }
  }
  sub_10000BD30(v0 + 16, &qword_1000A11D0);
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100028C78()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  swift_task_dealloc();
  return _swift_task_switch(sub_100028470, v1, 0);
}

uint64_t sub_100028D88(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 160) = a4;
  *(void *)(v5 + 168) = v4;
  *(unsigned char *)(v5 + 129) = a2;
  *(void *)(v5 + 144) = a1;
  *(void *)(v5 + 152) = a3;
  return _swift_task_switch(sub_100028DB0, v4, 0);
}

uint64_t sub_100028DB0()
{
  uint64_t v31 = v0;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 144);
  unsigned __int8 v2 = *(unsigned char *)(v0 + 129);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100006D88(v3, (uint64_t)qword_1000A4F48);
  sub_100034978(v1, v2);
  sub_100034978(v1, v2);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unsigned __int8 v7 = *(unsigned char *)(v0 + 129);
  uint64_t v8 = *(void *)(v0 + 144);
  if (v6)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v0 + 120) = v8;
    *(unsigned char *)(v0 + 128) = v7;
    sub_100034978(v8, v7);
    uint64_t v10 = String.init<A>(describing:)();
    *(void *)(v0 + 136) = sub_10000B6D8(v10, v11, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100034890(v8, v7);
    sub_100034890(v8, v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Messaging] Handling error %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100034890(*(void *)(v0 + 144), *(unsigned char *)(v0 + 129));
    sub_100034890(v8, v7);
  }

  unint64_t v12 = (_OWORD *)(v0 + 16);
  uint64_t v13 = *(void *)(v0 + 168);
  swift_beginAccess();
  uint64_t v14 = *(void *)(v13 + 136);
  if (*(void *)(v14 + 16))
  {
    uint64_t v16 = *(void *)(v0 + 152);
    uint64_t v15 = *(void *)(v0 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_100051718(v16, v15);
    if (v18)
    {
      sub_100020828(*(void *)(v14 + 56) + 40 * v17, v0 + 16);
    }
    else
    {
      *(void *)(v0 + 48) = 0;
      *unint64_t v12 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    *(void *)(v0 + 48) = 0;
    *unint64_t v12 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    if (*(void *)(v0 + 40))
    {
LABEL_15:
      uint64_t v21 = *(void *)(v0 + 144);
      unsigned __int8 v22 = *(unsigned char *)(v0 + 129);
      sub_100020828(v0 + 16, v0 + 56);
      sub_10000BD30(v0 + 16, &qword_1000A11D0);
      uint64_t v23 = *(void *)(v0 + 80);
      uint64_t v24 = *(void *)(v0 + 88);
      sub_1000346CC((void *)(v0 + 56), v23);
      sub_10003498C();
      uint64_t v25 = swift_allocError();
      *(void *)(v0 + 176) = v25;
      *(void *)uint64_t v26 = v21;
      *(unsigned char *)(v26 + 8) = v22;
      uint64_t v27 = *(int **)(v24 + 16);
      sub_100034978(v21, v22);
      uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v27 + *v27);
      uint64_t v28 = (void *)swift_task_alloc();
      *(void *)(v0 + 184) = v28;
      void *v28 = v0;
      v28[1] = sub_1000291FC;
      return v29(v25, v23, v24);
    }
  }
  sub_10000BD30(v0 + 16, &qword_1000A11D0);
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_1000291FC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 168);
  swift_task_dealloc();
  swift_errorRelease();
  return _swift_task_switch(sub_100028470, v1, 0);
}

uint64_t sub_10002935C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for IDSMessagingService()
{
  return self;
}

uint64_t sub_1000293D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a5;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(a1);
  unint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006290(&qword_1000A1380);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, a4);
  uint64_t v17 = sub_100034C5C((unint64_t *)&qword_1000A1650, v16, (void (*)(uint64_t))type metadata accessor for IDSMessagingService);
  unint64_t v18 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v19 = (v10 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = a2;
  *((void *)v20 + 3) = v17;
  uint64_t v21 = v24;
  *((void *)v20 + 4) = a4;
  *((void *)v20 + 5) = v21;
  *((void *)v20 + 6) = a2;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v20[v18], v11, a4);
  *(void *)&v20[v19] = a1;
  swift_retain_n();
  swift_retain();
  sub_10004BA30((uint64_t)v14, (uint64_t)&unk_1000A1658, (uint64_t)v20);
  return swift_release();
}

uint64_t sub_100029614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[18] = a7;
  v8[19] = a8;
  v8[16] = a5;
  v8[17] = a6;
  v8[15] = a4;
  v8[20] = *(void *)(a7 - 8);
  v8[21] = swift_task_alloc();
  v8[22] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[23] = AssociatedTypeWitness;
  v8[24] = *(void *)(AssociatedTypeWitness - 8);
  v8[25] = swift_task_alloc();
  return _swift_task_switch(sub_10002976C, a4, 0);
}

uint64_t sub_10002976C()
{
  uint64_t v37 = v0;
  if ([*(id *)(v0[15] + 112) isTinkerPaired]) {
    uint64_t v1 = 300;
  }
  else {
    uint64_t v1 = (*(uint64_t (**)(void))(v0[19] + 64))(v0[18]);
  }
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[23];
  uint64_t v5 = v0[18];
  uint64_t v4 = v0[19];
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v5, v4);
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v5, v4);
  id v6 = sub_10002A094(v2, v1, (uint64_t)(v0 + 2), v3);
  unint64_t v8 = v7;
  v0[26] = v6;
  v0[27] = v7;
  uint64_t v9 = (uint64_t)v6;
  (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
  sub_1000205C8((uint64_t)(v0 + 2));
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v10 = v0[22];
  uint64_t v11 = v0[20];
  uint64_t v12 = v0[18];
  uint64_t v13 = v0[16];
  uint64_t v14 = type metadata accessor for Logger();
  sub_100006D88(v14, (uint64_t)qword_1000A4F48);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v15(v10, v13, v12);
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v19 = v0[22];
  if (v18)
  {
    uint64_t v31 = v0[21];
    uint64_t v32 = v0[20];
    os_log_type_t type = v17;
    uint64_t v20 = v0[18];
    uint64_t v21 = swift_slowAlloc();
    v36[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315394;
    swift_bridgeObjectRetain();
    v0[13] = sub_10000B6D8(v9, v8, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 12) = 2080;
    v15(v31, v19, v20);
    uint64_t v22 = String.init<A>(describing:)();
    v0[14] = sub_10000B6D8(v22, v23, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v19, v20);
    _os_log_impl((void *)&_mh_execute_header, v16, type, "[Messaging] Sent message with %s for %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v24 = v0[20];
    uint64_t v25 = v0[18];
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v19, v25);
  }

  uint64_t v26 = v0[17];
  uint64_t v27 = swift_allocObject();
  v0[28] = v27;
  *(_OWORD *)typea = *((_OWORD *)v0 + 9);
  swift_unknownObjectWeakInit();
  uint64_t v28 = swift_allocObject();
  v0[29] = v28;
  *(_OWORD *)(v28 + 16) = *(_OWORD *)typea;
  *(void *)(v28 + 32) = v9;
  *(void *)(v28 + 40) = v8;
  *(void *)(v28 + 48) = v27;
  uint64_t v33 = (uint64_t (*)(void *, uint64_t))(*(void *)(*(void *)v26 + 168)
                                                + **(int **)(*(void *)v26 + 168));
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v29 = (void *)swift_task_alloc();
  v0[30] = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_100029CD4;
  return v33(&unk_1000A1668, v28);
}

uint64_t sub_100029CD4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_100029E24, v1, 0);
}

uint64_t sub_100029E24()
{
  char v1 = (*(uint64_t (**)(void))(v0[19] + 32))(v0[18]);
  uint64_t v2 = swift_task_alloc();
  v0[31] = v2;
  *(void *)uint64_t v2 = v0;
  *(void *)(v2 + 8) = sub_100029F24;
  uint64_t v4 = v0[26];
  uint64_t v3 = v0[27];
  uint64_t v5 = (void *)v0[17];
  uint64_t v6 = v0[15];
  *(void *)(v2 + 128) = v5;
  *(void *)(v2 + 136) = v6;
  *(unsigned char *)(v2 + 176) = v1;
  *(void *)(v2 + 112) = v4;
  *(void *)(v2 + 120) = v3;
  *(void *)(v2 + 144) = *v5;
  return _swift_task_switch(sub_10002A830, v6, 0);
}

uint64_t sub_100029F24()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

id sub_10002A094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v12((char *)&v18 - v13, a1, v14);
  type metadata accessor for TemporaryResourceFile();
  if (swift_dynamicCast())
  {
    id v4 = sub_10002AE74((uint64_t)v19, a2);
    swift_release();
  }
  else
  {
    v12(v11, a1, a4);
    sub_10000BE18(0, qword_1000A1678);
    if (swift_dynamicCast())
    {
      uint64_t v15 = v19;
      id v4 = sub_10002B128((uint64_t)v19, a2);
    }
    else
    {
      sub_10003498C();
      swift_allocError();
      *(void *)uint64_t v16 = 1;
      *(unsigned char *)(v16 + 8) = 3;
      swift_willThrow();
    }
  }
  return v4;
}

uint64_t sub_10002A2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  uint64_t v5 = type metadata accessor for CancellationError();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  swift_getAssociatedTypeWitness();
  v4[15] = sub_100007650((uint64_t *)&unk_1000A1150);
  uint64_t v6 = type metadata accessor for Result();
  v4[16] = v6;
  v4[17] = *(void *)(v6 - 8);
  v4[18] = swift_task_alloc();
  return _swift_task_switch(sub_10002A454, 0, 0);
}

uint64_t sub_10002A454()
{
  uint64_t v20 = v0;
  (*(void (**)(void, void, void))(v0[17] + 16))(v0[18], v0[8], v0[16]);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v2 = (void *)v0[18];
  if (EnumCaseMultiPayload == 1)
  {
    v0[5] = *v2;
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
      if (qword_1000A0EB0 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_100006D88(v3, (uint64_t)qword_1000A4F48);
      swift_bridgeObjectRetain_n();
      id v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      BOOL v6 = os_log_type_enabled(v4, v5);
      unint64_t v7 = v0[10];
      if (v6)
      {
        uint64_t v18 = v0[9];
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 136315138;
        swift_bridgeObjectRetain();
        v0[7] = sub_10000B6D8(v18, v7, &v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Messaging] Message with %s is cancelled.", v8, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      swift_beginAccess();
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        uint64_t v10 = (void *)Strong;
        NSString v11 = String._bridgeToObjectiveC()();
        v0[6] = 0;
        unsigned __int8 v12 = [v10 cancelIdentifier:v11 error:v0 + 6];

        uint64_t v13 = (void *)v0[6];
        if (v12)
        {
          id v14 = v13;
        }
        else
        {
          id v17 = v13;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_errorRelease();
        }
      }
    }
    swift_errorRelease();
  }
  else
  {
    (*(void (**)(void *, void))(v0[17] + 8))(v2, v0[16]);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_10002A7E0(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  *(void *)(v5 + 128) = a4;
  *(void *)(v5 + 136) = v4;
  *(unsigned char *)(v5 + 176) = a3;
  *(void *)(v5 + 112) = a1;
  *(void *)(v5 + 120) = a2;
  *(void *)(v5 + 144) = *a4;
  return _swift_task_switch(sub_10002A830, v4, 0);
}

uint64_t sub_10002A830()
{
  uint64_t v35 = v0;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006D88(v1, (uint64_t)qword_1000A4F48);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 120);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 112);
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)unint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 104) = sub_10000B6D8(v6, v5, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[Messaging] Creating response handler for: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (_OWORD *)(v0 + 16);
  uint64_t v9 = *(void *)(v0 + 136) + 136;
  swift_beginAccess();
  uint64_t v10 = *(void *)v9;
  if (*(void *)(*(void *)v9 + 16))
  {
    uint64_t v12 = *(void *)(v0 + 112);
    uint64_t v11 = *(void *)(v0 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v13 = sub_100051718(v12, v11);
    if (v14)
    {
      sub_100020828(*(void *)(v10 + 56) + 40 * v13, v0 + 16);
    }
    else
    {
      *(void *)(v0 + 48) = 0;
      *uint64_t v8 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 40))
    {
      uint64_t v17 = v0 + 112;
      uint64_t v16 = *(void *)(v0 + 112);
      uint64_t v15 = *(void **)(v17 + 8);
      sub_10000BD30((uint64_t)v8, &qword_1000A11D0);
      uint64_t v31 = 0;
      unint64_t v32 = 0xE000000000000000;
      _StringGuts.grow(_:)(67);
      v18._object = (void *)0x8000000100081810;
      v18._countAndFlagsBits = 0xD000000000000041;
      String.append(_:)(v18);
      v19._countAndFlagsBits = v16;
      v19._object = v15;
      String.append(_:)(v19);
      return _assertionFailure(_:_:file:line:flags:)();
    }
  }
  else
  {
    *(void *)(v0 + 48) = 0;
    *uint64_t v8 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }
  uint64_t v21 = *(void *)(v0 + 144);
  uint64_t v22 = *(void *)(v0 + 120);
  unint64_t v23 = *(void *)(v0 + 128);
  char v24 = *(unsigned char *)(v0 + 176);
  uint64_t v25 = *(void *)(v0 + 112);
  sub_10000BD30(v0 + 16, &qword_1000A11D0);
  uint64_t v26 = *(void *)(v21 + 80);
  uint64_t v33 = type metadata accessor for IDSMessagingService.ResponseHandler();
  uint64_t v34 = &off_100092878;
  LOBYTE(v31) = v24;
  unint64_t v32 = v23;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain_n();
  sub_10001D3CC((uint64_t)&v31, v25, v22);
  swift_endAccess();
  uint64_t v27 = swift_allocObject();
  *(void *)(v0 + 152) = v27;
  swift_weakInit();
  uint64_t v28 = (void *)swift_allocObject();
  *(void *)(v0 + 160) = v28;
  v28[2] = v26;
  v28[3] = v27;
  v28[4] = v25;
  v28[5] = v22;
  uint64_t v30 = (uint64_t (*)(void *, void *))(*(void *)(*(void *)v23 + 168)
                                                 + **(int **)(*(void *)v23 + 168));
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_10002AD24;
  return v30(&unk_1000A1618, v28);
}

uint64_t sub_10002AD24()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_10001EE90, v1, 0);
}

id sub_10002AE74(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *(void **)(v2 + 120);
  URL._bridgeToObjectiveC()(direct field offset for TemporaryResourceFile.url);
  BOOL v4 = v3;
  v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_100006290(&qword_1000A1620);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100079C30;
  uint64_t v7 = IDSCopyIDForDevice();
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = 0;
  }
  v24[1] = v10;
  sub_100006290(&qword_1000A1628);
  sub_100034B88();
  AnyHashable.init<A>(_:)();
  sub_1000336E8(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10002144C();
  Class v12 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v23 = 0;
  v24[0] = 0;
  unsigned int v13 = [v21 sendResourceAtURL:v4 metadata:v5.super.isa toDestinations:isa priority:a2 options:v12 identifier:v24 error:&v23];

  id v14 = v23;
  id v15 = (id)v24[0];
  if (v13)
  {
    if (v24[0])
    {
      id v15 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v16 = v14;
    }
    else
    {
      sub_10003498C();
      swift_allocError();
      *(void *)uint64_t v18 = 0;
      *(unsigned char *)(v18 + 8) = 3;
      id v19 = v14;
      swift_willThrow();
    }
  }
  else
  {
    id v17 = v23;
    id v15 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v15;
}

id sub_10002B128(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 120);
  sub_100006290(&qword_1000A1620);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100079C30;
  uint64_t v5 = IDSCopyIDForDevice();
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = 0;
  }
  v22[1] = v8;
  sub_100006290(&qword_1000A1628);
  sub_100034B88();
  AnyHashable.init<A>(_:)();
  sub_1000336E8(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10002144C();
  Class v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v21 = 0;
  v22[0] = 0;
  unsigned int v11 = [v3 sendProtobuf:a1 toDestinations:isa priority:a2 options:v10 identifier:v22 error:&v21];

  id v12 = v21;
  id v13 = (id)v22[0];
  if (v11)
  {
    if (v22[0])
    {
      id v13 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v14 = v12;
    }
    else
    {
      sub_10003498C();
      swift_allocError();
      *(void *)uint64_t v16 = 0;
      *(unsigned char *)(v16 + 8) = 3;
      id v17 = v12;
      swift_willThrow();
    }
  }
  else
  {
    id v15 = v21;
    id v13 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v13;
}

uint64_t sub_10002B374(uint64_t a1, unint64_t a2)
{
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100006D88(v4, (uint64_t)qword_1000A4F48);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(void *)&v9[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    sub_10000B6D8(a1, a2, (uint64_t *)v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[Messaging] Removing response handler for: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_10001D3CC((uint64_t)v9, a1, a2);
  return swift_endAccess();
}

uint64_t sub_10002B56C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7, uint64_t a8)
{
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 40) = a8;
  *(_WORD *)(v8 + 80) = a7;
  *(void *)(v8 + 24) = a5;
  return _swift_task_switch(sub_10002B594, 0, 0);
}

uint64_t sub_10002B594()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    id v2 = [v1 incomingResponseIdentifier];
    if (v2)
    {
      uint64_t v3 = v2;
      __int16 v4 = *(_WORD *)(v0 + 80);
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;

      *(void *)(v0 + 48) = v7;
      if ((v4 & 0x100) != 0)
      {
        unsigned __int8 v27 = *(unsigned char *)(v0 + 80);
        sub_100034978(*(void *)(v0 + 32), v27);
        uint64_t v28 = swift_task_alloc();
        *(void *)(v0 + 72) = v28;
        *(void *)uint64_t v28 = v0;
        *(void *)(v28 + 8) = sub_10002BC60;
        uint64_t v29 = *(void *)(v0 + 32);
        uint64_t v10 = *(void *)(v0 + 40);
        *(void *)(v28 + 160) = v7;
        *(void *)(v28 + 168) = v10;
        *(unsigned char *)(v28 + 129) = v27;
        *(void *)(v28 + 144) = v29;
        *(void *)(v28 + 152) = v5;
        unsigned int v11 = sub_100028DB0;
      }
      else
      {
        uint64_t v8 = *(void *)(v0 + 32);
        swift_retain();
        uint64_t v9 = (void *)swift_task_alloc();
        *(void *)(v0 + 56) = v9;
        *uint64_t v9 = v0;
        v9[1] = sub_10002B9E4;
        uint64_t v10 = *(void *)(v0 + 40);
        v9[20] = v7;
        v9[21] = v10;
        v9[18] = v8;
        v9[19] = v5;
        v9[15] = v8;
        unsigned int v11 = sub_100027F74;
      }
LABEL_12:
      return _swift_task_switch(v11, v10, 0);
    }
  }
  __int16 v12 = *(_WORD *)(v0 + 80);
  uint64_t v13 = *(void *)(v0 + 32);
  if ((v12 & 0x100) == 0)
  {
    swift_retain();
    uint64_t v14 = swift_task_alloc();
    *(void *)(v0 + 64) = v14;
    *(void *)uint64_t v14 = v0;
    *(void *)(v14 + 8) = sub_10002BB64;
    uint64_t v10 = *(void *)(v0 + 40);
    *(unsigned char *)(v14 + 208) = 4;
    *(void *)(v14 + 184) = v13;
    *(void *)(v14 + 192) = v10;
    *(void *)(v14 + 160) = v13;
    unsigned int v11 = sub_10002760C;
    goto LABEL_12;
  }
  sub_100034978(*(void *)(v0 + 32), v12);
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v15 = *(void *)(v0 + 32);
  unsigned __int8 v16 = *(unsigned char *)(v0 + 80);
  uint64_t v17 = type metadata accessor for Logger();
  sub_100006D88(v17, (uint64_t)qword_1000A4F48);
  sub_100034978(v15, v16);
  sub_100034978(v15, v16);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  __int16 v21 = *(_WORD *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 32);
  if (v20)
  {
    id v23 = (uint8_t *)swift_slowAlloc();
    char v24 = (void *)swift_slowAlloc();
    *(_DWORD *)id v23 = 138412290;
    sub_10003498C();
    swift_allocError();
    *(void *)uint64_t v25 = v22;
    *(unsigned char *)(v25 + 8) = v21;
    sub_100034978(v22, v21);
    uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v24 = v26;
    sub_100034884(v22, v21, 1);
    sub_100034884(v22, v21, 1);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "[Messaging] Failed to handle the incoming request with error: %@", v23, 0xCu);
    sub_100006290((uint64_t *)&unk_1000A1120);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_100034884(v22, v21, 1);
  }
  else
  {
    sub_100034884(*(void *)(v0 + 32), *(_WORD *)(v0 + 80), 1);
    sub_100034884(v22, v21, 1);
    sub_100034890(v22, v21);
  }
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_10002B9E4()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10002BAFC, 0, 0);
}

uint64_t sub_10002BAFC()
{
  sub_100034884(*(void *)(v0 + 32), *(unsigned char *)(v0 + 80), 0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10002BB64()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100035724, 0, 0);
}

uint64_t sub_10002BC60()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10002BD78, 0, 0);
}

uint64_t sub_10002BD78()
{
  sub_100034884(*(void *)(v0 + 32), *(unsigned char *)(v0 + 80), 1);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10002BFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[3] = a6;
  v7[4] = a7;
  v7[2] = a5;
  return _swift_task_switch(sub_10002BFE4, 0, 0);
}

uint64_t sub_10002BFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v4 = *(uint64_t (**)())(v3 + 16);
  if (v4)
  {
    __int16 v4 = (uint64_t (*)())[v4 incomingResponseIdentifier];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;

      *(void *)(v3 + 40) = v8;
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v3 + 48) = v9;
      *uint64_t v9 = v3;
      v9[1] = sub_10002C2B8;
      a2 = *(void *)(v3 + 24);
      uint64_t v10 = *(void *)(v3 + 32);
      v9[20] = v8;
      v9[21] = a2;
      v9[18] = v10;
      v9[19] = v6;
      v9[15] = v10;
      unsigned int v11 = sub_1000284F8;
      goto LABEL_11;
    }
  }
  __int16 v12 = *(void **)(v3 + 32);
  if (!v12)
  {
    __break(1u);
    return _swift_task_switch(v4, a2, a3);
  }
  char v13 = sub_10003764C((__int16)[*(id *)(v3 + 32) type]);
  if (v13 != 5)
  {
    char v19 = v13;
    uint64_t v20 = swift_task_alloc();
    *(void *)(v3 + 56) = v20;
    *(void *)uint64_t v20 = v3;
    *(void *)(v20 + 8) = sub_10002C3E4;
    a2 = *(void *)(v3 + 24);
    uint64_t v21 = *(void *)(v3 + 32);
    *(unsigned char *)(v20 + 208) = v19;
    *(void *)(v20 + 184) = v21;
    *(void *)(v20 + 192) = a2;
    *(void *)(v20 + 160) = v21;
    unsigned int v11 = sub_100027B84;
LABEL_11:
    __int16 v4 = v11;
    a3 = 0;
    return _swift_task_switch(v4, a2, a3);
  }
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100006D88(v14, (uint64_t)qword_1000A4F48);
  id v15 = v12;
  unsigned __int8 v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 33554688;
    *(_WORD *)(v3 + 64) = (unsigned __int16)[v15 type];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[Messaging] Unrecognized request type: %hu", v18, 6u);
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v22 = *(uint64_t (**)(void))(v3 + 8);
  return v22();
}

uint64_t sub_10002C2B8()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10002C3D0, 0, 0);
}

uint64_t sub_10002C3D0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002C3E4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100035720, 0, 0);
}

uint64_t sub_10002C5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5)
  {
    __int16 v12 = (void *)swift_task_alloc();
    *(void *)(v8 + 16) = v12;
    *__int16 v12 = v8;
    v12[1] = sub_10002C6C8;
    v12[17] = a8;
    v12[18] = a6;
    v12[16] = a7;
    char v13 = sub_1000288FC;
  }
  else
  {
    uint64_t v14 = swift_task_alloc();
    *(void *)(v8 + 24) = v14;
    *(void *)uint64_t v14 = v8;
    *(void *)(v14 + 8) = sub_10002C7C4;
    *(void *)(v14 + 160) = a8;
    *(void *)(v14 + 168) = a6;
    *(unsigned char *)(v14 + 129) = 0;
    *(void *)(v14 + 144) = v17;
    *(void *)(v14 + 152) = a7;
    char v13 = sub_100028DB0;
  }
  return _swift_task_switch(v13, a6, 0);
}

uint64_t sub_10002C6C8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10002C3D0, 0, 0);
}

uint64_t sub_10002C7C4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100035720, 0, 0);
}

uint64_t sub_10002C984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[67] = a8;
  v8[66] = a7;
  v8[65] = a6;
  v8[63] = a4;
  v8[64] = a5;
  v8[61] = a2;
  v8[62] = a3;
  v8[60] = a1;
  v8[68] = type metadata accessor for ErrorResponse();
  v8[69] = swift_task_alloc();
  v8[70] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[71] = AssociatedTypeWitness;
  v8[72] = *(void *)(AssociatedTypeWitness - 8);
  v8[73] = swift_task_alloc();
  v8[74] = *(void *)(a6 - 8);
  v8[75] = swift_task_alloc();
  v8[76] = swift_task_alloc();
  v8[77] = swift_task_alloc();
  v8[78] = swift_task_alloc();
  v8[79] = sub_10000BE18(255, &qword_1000A1850);
  sub_100035438();
  uint64_t v13 = type metadata accessor for Result();
  v8[80] = v13;
  v8[81] = *(void *)(v13 - 8);
  v8[82] = swift_task_alloc();
  v8[83] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v8[84] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Optional();
  v8[85] = v14;
  v8[86] = *(void *)(v14 - 8);
  v8[87] = swift_task_alloc();
  v8[88] = *(void *)(a5 - 8);
  v8[89] = swift_task_alloc();
  v8[90] = *(void *)(a7 - 8);
  v8[91] = swift_task_alloc();
  return _swift_task_switch(sub_10002CD14, 0, 0);
}

id sub_10002CD14()
{
  uint64_t v44 = v0;
  (*(void (**)(void, void, void))(v0[90] + 16))(v0[91], v0[60], v0[66]);
  sub_10000BE18(0, qword_1000A1678);
  if (!swift_dynamicCast())
  {
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100006D88(v10, (uint64_t)qword_1000A4F48);
    unsigned int v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(void *)&v42[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v14 = _typeName(_:qualified:)();
      v0[55] = sub_10000B6D8(v14, v15, (uint64_t *)v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "[Messaging] Failed to handle message request with type %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    goto LABEL_21;
  }
  uint64_t v1 = v0[64];
  id v2 = (void *)v0[56];
  v0[92] = v2;
  uint64_t v3 = swift_conformsToProtocol2();
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!v3) {
    uint64_t v1 = 0;
  }
  if (!v1)
  {
LABEL_16:
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100006D88(v18, (uint64_t)qword_1000A4F48);
    unsigned int v11 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(void *)&v42[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v21 = _typeName(_:qualified:)();
      v0[50] = sub_10000B6D8(v21, v22, (uint64_t *)v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v19, "[Messaging] Failed to decode protobuf request to expected type %s ", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

LABEL_21:
LABEL_22:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v23 = (uint64_t (*)(void))v0[1];
    return (id)v23();
  }
  id result = [v2 data];
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v43 = 0;
  memset(v42, 0, sizeof(v42));
  BinaryDecodingOptions.init()();
  v0[42] = v1;
  v0[43] = v4;
  sub_100035380(v0 + 39);
  Message.init(serializedData:extensions:partial:options:)();
  uint64_t v7 = v0[88];
  uint64_t v8 = v0[87];
  uint64_t v9 = v0[64];
  sub_100006290(&qword_1000A1840);
  int v16 = swift_dynamicCast();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v8, v16 ^ 1u, 1, v9);
  int v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v9);
  if (v17 == 1)
  {
    (*(void (**)(void, void))(v0[86] + 8))(v0[87], v0[85]);
    goto LABEL_16;
  }
  (*(void (**)(void, void, void))(v0[88] + 32))(v0[89], v0[87], v0[64]);
  id v24 = [v2 context];
  if (!v24
    || (uint64_t v25 = v24,
        id v26 = [v24 outgoingResponseIdentifier],
        v25,
        !v26))
  {
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100006D88(v34, (uint64_t)qword_1000A4F48);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "[Messaging] Failed to handle request message because messageID is nil", v37, 2u);
      swift_slowDealloc();
    }
    uint64_t v38 = v0[89];
    uint64_t v39 = v0[88];
    uint64_t v40 = v0[64];

    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    goto LABEL_22;
  }
  unsigned __int8 v27 = (int *)v0[62];
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  v0[93] = v28;
  v0[94] = v30;
  uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t))((char *)v27 + *v27);
  uint64_t v31 = (void *)swift_task_alloc();
  v0[95] = v31;
  *uint64_t v31 = v0;
  v31[1] = sub_10002D4C0;
  uint64_t v32 = v0[89];
  uint64_t v33 = v0[78];
  return (id)v41(v33, v32);
}

uint64_t sub_10002D4C0()
{
  *(void *)(*(void *)v1 + 768) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = sub_10002EDBC;
  }
  else {
    id v2 = sub_10002D5D4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10002D5D4()
{
  uint64_t v89 = v0;
  (*(void (**)(void, void, void))(*(void *)(v0 + 592) + 16))(*(void *)(v0 + 664), *(void *)(v0 + 624), *(void *)(v0 + 520));
  swift_storeEnumTagMultiPayload();
  p_vtable = &OBJC_METACLASS___NPTOCompanionSyncDeviceContentController.vtable;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100006D88(v2, (uint64_t)qword_1000A4F48);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  unint64_t v6 = *(void *)(v0 + 752);
  if (v5)
  {
    uint64_t v84 = v2;
    uint64_t v7 = *(void *)(v0 + 744);
    uint64_t v80 = *(void *)(v0 + 624);
    uint64_t v8 = *(void *)(v0 + 592);
    uint64_t v78 = *(void *)(v0 + 520);
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    v88[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v10 = v7;
    uint64_t v2 = v84;
    *(void *)(v0 + 472) = sub_10000B6D8(v10, v6, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[Messaging] Finished handling request %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v80, v78);
    p_vtable = (void **)(&OBJC_METACLASS___NPTOCompanionSyncDeviceContentController + 24);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 624);
    uint64_t v12 = *(void *)(v0 + 592);
    uint64_t v13 = *(void *)(v0 + 520);

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  uint64_t v14 = *(void *)(v0 + 768);
  (*(void (**)(void, void, void))(*(void *)(v0 + 648) + 16))(*(void *)(v0 + 656), *(void *)(v0 + 664), *(void *)(v0 + 640));
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v39 = *(void *)(v0 + 744);
    uint64_t v40 = *(void *)(v0 + 616);
    uint64_t v41 = *(void *)(v0 + 608);
    uint64_t v82 = *(void *)(v0 + 752);
    uint64_t v86 = *(void *)(v0 + 600);
    uint64_t v42 = *(void *)(v0 + 592);
    uint64_t v43 = *(void *)(v0 + 536);
    uint64_t v44 = *(void *)(v0 + 520);
    uint64_t v45 = *(void **)(v0 + 488);
    (*(void (**)(uint64_t, void, uint64_t))(v42 + 32))(v40, *(void *)(v0 + 656), v44);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
    v46(v41, v40, v44);
    uint64_t v47 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 56))(v0 + 352, v44, v43);
    *(void *)(v48 + 64) = v39;
    *(void *)(v48 + 72) = v82;
    swift_bridgeObjectRelease();
    v47(v0 + 352, 0);
    uint64_t v49 = sub_1000346CC(v45, v45[3]);
    v46(v86, v41, v44);
    uint64_t v50 = *v49;
    uint64_t v51 = (void *)swift_task_alloc();
    *(void *)(v0 + 776) = v51;
    void *v51 = v0;
    v51[1] = sub_10002DF08;
    uint64_t v52 = *(void *)(v0 + 600);
    uint64_t v53 = *(void *)(v0 + 584);
    uint64_t v54 = *(void *)(v0 + 520);
    v51[16] = *(void *)(v0 + 536);
    v51[17] = v50;
    v51[14] = v52;
    v51[15] = v54;
    v51[13] = v53;
    uint64_t v55 = sub_100026F88;
    uint64_t v56 = v50;
    goto LABEL_15;
  }
  uint64_t v15 = *(void *)(v0 + 560);
  uint64_t v16 = *(void *)(v0 + 544);
  int v17 = **(void ***)(v0 + 656);
  *(void *)(v0 + 824) = v17;
  UnknownStorage.init()();
  uint64_t v18 = (uint64_t *)(v15 + *(int *)(v16 + 20));
  uint64_t *v18 = 0;
  v18[1] = 0;
  uint64_t v19 = v15 + *(int *)(v16 + 24);
  *(_DWORD *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 4) = 1;
  id v20 = [v17 domain];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  uint64_t *v18 = v21;
  v18[1] = v23;
  uint64_t v24 = (uint64_t)[v17 code];
  if (v24 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v24 > 0x7FFFFFFF)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v25 = *(void *)(v0 + 560);
  uint64_t v26 = *(void *)(v0 + 552);
  *(_DWORD *)uint64_t v19 = v24;
  *(unsigned char *)(v19 + 4) = 0;
  sub_1000354A0(v25, v26);
  sub_10004B470(v26, v0 + 16);
  if (v14)
  {
    sub_100035324(*(void *)(v0 + 560));

    swift_bridgeObjectRelease();
    if (p_vtable[470] == (void *)-1)
    {
LABEL_11:
      sub_100006D88(v2, (uint64_t)qword_1000A4F48);
      swift_errorRetain();
      swift_errorRetain();
      unsigned __int8 v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      BOOL v29 = os_log_type_enabled(v27, v28);
      uint64_t v30 = *(void *)(v0 + 712);
      uint64_t v31 = *(void *)(v0 + 704);
      uint64_t v32 = *(void *)(v0 + 664);
      uint64_t v33 = *(void *)(v0 + 648);
      uint64_t v34 = *(void *)(v0 + 640);
      uint64_t v35 = *(void *)(v0 + 512);
      if (v29)
      {
        uint64_t v85 = *(void *)(v0 + 712);
        id v76 = *(void **)(v0 + 736);
        uint64_t v81 = *(void *)(v0 + 512);
        os_log_type_t v36 = (uint8_t *)swift_slowAlloc();
        v88[0] = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v36 = 136315138;
        *(void *)(v0 + 424) = v14;
        swift_errorRetain();
        sub_100006290((uint64_t *)&unk_1000A1150);
        uint64_t v37 = String.init<A>(describing:)();
        *(void *)(v0 + 432) = sub_10000B6D8(v37, v38, v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "[Messaging] Failed to send response message due to %s ", v36, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v85, v81);
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v35);
      }
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v70 = *(uint64_t (**)(void))(v0 + 8);
      return v70();
    }
LABEL_24:
    swift_once();
    goto LABEL_11;
  }
  uint64_t v57 = *(void *)(v0 + 752);
  uint64_t v87 = *(void *)(v0 + 744);
  uint64_t v58 = *(void **)(v0 + 488);
  uint64_t v59 = *(void **)(v0 + 16);
  *(void *)(v0 + 832) = v59;
  long long v60 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v0 + 224) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v0 + 240) = v60;
  *(unsigned char *)(v0 + 304) = *(unsigned char *)(v0 + 104);
  long long v61 = *(_OWORD *)(v0 + 88);
  long long v62 = *(_OWORD *)(v0 + 56);
  *(_OWORD *)(v0 + 272) = *(_OWORD *)(v0 + 72);
  *(_OWORD *)(v0 + 288) = v61;
  *(_OWORD *)(v0 + 256) = v62;
  char v77 = *(unsigned char *)(v0 + 224);
  uint64_t v63 = *(void *)(v0 + 232);
  char v64 = *(unsigned char *)(v0 + 240);
  char v75 = *(unsigned char *)(v0 + 241);
  uint64_t v74 = *(void *)(v0 + 248);
  char v73 = *(unsigned char *)(v0 + 256);
  uint64_t v65 = *(void *)(v0 + 272);
  uint64_t v72 = *(void *)(v0 + 264);
  *(void *)(v0 + 840) = v65;
  char v66 = *(unsigned char *)(v0 + 280);
  char v83 = *(unsigned char *)(v0 + 304);
  char v79 = *(unsigned char *)(v0 + 105);
  uint64_t v67 = *(void *)(v0 + 112);
  sub_100035504(v0 + 288, v0 + 384);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v68 = v59;
  sub_10003556C(v0 + 384);
  uint64_t v69 = sub_1000346CC(v58, v58[3]);
  uint64_t v56 = *v69;
  *(void *)(v0 + 848) = *v69;
  *(void *)(v0 + 120) = v68;
  *(unsigned char *)(v0 + 128) = v77;
  *(void *)(v0 + 136) = v63;
  *(unsigned char *)(v0 + 144) = v64;
  *(unsigned char *)(v0 + 145) = v75;
  *(void *)(v0 + 152) = v74;
  *(unsigned char *)(v0 + 160) = v73;
  *(void *)(v0 + 168) = v72;
  *(void *)(v0 + 176) = v65;
  *(unsigned char *)(v0 + 184) = v66;
  *(void *)(v0 + 192) = v87;
  *(void *)(v0 + 200) = v57;
  *(unsigned char *)(v0 + 208) = v83;
  *(unsigned char *)(v0 + 209) = v79;
  *(void *)(v0 + 216) = v67;
  uint64_t v55 = sub_10002E5C4;
LABEL_15:
  return _swift_task_switch(v55, v56, 0);
}

uint64_t sub_10002DF08()
{
  uint64_t v2 = (void *)*v1;
  v2[98] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[75];
  uint64_t v4 = v2[74];
  if (v0)
  {
    uint64_t v5 = v2[65];
    unint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v2[101] = v6;
    v2[102] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v6(v3, v5);
    uint64_t v7 = sub_10002E24C;
  }
  else
  {
    uint64_t v8 = v2[73];
    uint64_t v9 = v2[72];
    uint64_t v10 = v2[71];
    uint64_t v11 = v2[65];
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v2[99] = v12;
    v2[100] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v12(v3, v11);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    uint64_t v7 = sub_10002E0B8;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10002E0B8()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 792);
  uint64_t v2 = *(void *)(v0 + 704);
  uint64_t v3 = *(void *)(v0 + 664);
  uint64_t v4 = *(void *)(v0 + 648);
  uint64_t v5 = *(void *)(v0 + 640);
  uint64_t v6 = *(void *)(v0 + 616);
  uint64_t v7 = *(void *)(v0 + 608);
  uint64_t v8 = *(void *)(v0 + 520);
  uint64_t v11 = *(void *)(v0 + 512);
  uint64_t v12 = *(void *)(v0 + 712);

  v1(v7, v8);
  v1(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v12, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10002E24C()
{
  uint64_t v24 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 808);
  uint64_t v2 = *(void *)(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 520);
  v1(*(void *)(v0 + 608), v3);
  v1(v2, v3);
  uint64_t v4 = *(void *)(v0 + 784);
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100006D88(v5, (uint64_t)qword_1000A4F48);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 712);
  uint64_t v10 = *(void *)(v0 + 704);
  uint64_t v11 = *(void *)(v0 + 664);
  uint64_t v12 = *(void *)(v0 + 648);
  uint64_t v13 = *(void *)(v0 + 640);
  uint64_t v14 = *(void *)(v0 + 512);
  if (v8)
  {
    uint64_t v22 = *(void *)(v0 + 712);
    id v20 = *(void **)(v0 + 736);
    uint64_t v21 = *(void *)(v0 + 512);
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    *(void *)(v0 + 424) = v4;
    swift_errorRetain();
    sub_100006290((uint64_t *)&unk_1000A1150);
    uint64_t v16 = String.init<A>(describing:)();
    *(void *)(v0 + 432) = sub_10000B6D8(v16, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[Messaging] Failed to send response message due to %s ", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v22, v21);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v14);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_10002E5C4()
{
  uint64_t v1 = *(void *)(v0 + 848);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 160);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 856) = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v0 + 120;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 864) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10002E6B4;
  return withCancellationHandlingContinuation<A>(timeout:_:)(v5, v2, v3, sub_100035598, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_10002E6B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 872) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 848);
    uint64_t v4 = sub_10002E9A4;
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v4 = sub_10002E804;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10002E804()
{
  uint64_t v1 = *(void **)(v0 + 832);
  uint64_t v2 = *(void **)(v0 + 824);
  uint64_t v3 = *(void *)(v0 + 712);
  uint64_t v4 = *(void *)(v0 + 704);
  uint64_t v5 = *(void *)(v0 + 664);
  uint64_t v6 = *(void *)(v0 + 648);
  uint64_t v7 = *(void *)(v0 + 640);
  uint64_t v8 = *(void *)(v0 + 560);
  uint64_t v9 = *(void *)(v0 + 512);

  sub_100035324(v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v9);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10002E9A4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002EA38, 0, 0);
}

uint64_t sub_10002EA38()
{
  uint64_t v23 = v0;
  uint64_t v1 = *(void **)(v0 + 832);
  uint64_t v2 = *(void *)(v0 + 560);

  sub_100035324(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v0 + 872);
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100006D88(v4, (uint64_t)qword_1000A4F48);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 712);
  uint64_t v9 = *(void *)(v0 + 704);
  uint64_t v10 = *(void *)(v0 + 664);
  uint64_t v11 = *(void *)(v0 + 648);
  uint64_t v12 = *(void *)(v0 + 640);
  uint64_t v13 = *(void *)(v0 + 512);
  if (v7)
  {
    uint64_t v21 = *(void *)(v0 + 712);
    uint64_t v19 = *(void **)(v0 + 736);
    uint64_t v20 = *(void *)(v0 + 512);
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    *(void *)(v0 + 424) = v3;
    swift_errorRetain();
    sub_100006290((uint64_t *)&unk_1000A1150);
    uint64_t v15 = String.init<A>(describing:)();
    *(void *)(v0 + 432) = sub_10000B6D8(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[Messaging] Failed to send response message due to %s ", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v21, v20);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v13);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_10002EDBC()
{
  uint64_t v86 = v0;
  *(void *)(v0 + 408) = *(void *)(v0 + 768);
  sub_100006290((uint64_t *)&unk_1000A1150);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t v2 = *(void **)(v0 + 416);
  **(void **)(v0 + 664) = v2;
  swift_storeEnumTagMultiPayload();
  uint64_t v3 = qword_1000A0EB0;
  id v4 = v2;
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100006D88(v5, (uint64_t)qword_1000A4F48);
  swift_bridgeObjectRetain_n();
  id v6 = v4;
  BOOL v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  unint64_t v10 = *(void *)(v0 + 752);
  if (v9)
  {
    uint64_t v11 = *(void *)(v0 + 744);
    uint64_t v12 = swift_slowAlloc();
    char v75 = (void *)swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    v85[0] = v78;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 456) = sub_10000B6D8(v11, v10, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2112;
    *(void *)(v0 + 464) = v6;
    id v13 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v75 = v6;

    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[Messaging] Failed to handle request %s due to %@", (uint8_t *)v12, 0x16u);
    sub_100006290((uint64_t *)&unk_1000A1120);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_errorRelease();
  (*(void (**)(void, void, void))(*(void *)(v0 + 648) + 16))(*(void *)(v0 + 656), *(void *)(v0 + 664), *(void *)(v0 + 640));
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v38 = *(void *)(v0 + 744);
    uint64_t v39 = *(void *)(v0 + 616);
    uint64_t v40 = *(void *)(v0 + 608);
    uint64_t v80 = *(void *)(v0 + 752);
    uint64_t v83 = *(void *)(v0 + 600);
    uint64_t v41 = *(void *)(v0 + 592);
    uint64_t v42 = *(void *)(v0 + 536);
    uint64_t v43 = *(void *)(v0 + 520);
    uint64_t v44 = *(void **)(v0 + 488);
    (*(void (**)(uint64_t, void, uint64_t))(v41 + 32))(v39, *(void *)(v0 + 656), v43);
    uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
    v45(v40, v39, v43);
    uint64_t v46 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 56))(v0 + 352, v43, v42);
    *(void *)(v47 + 64) = v38;
    *(void *)(v47 + 72) = v80;
    swift_bridgeObjectRelease();
    v46(v0 + 352, 0);
    uint64_t v48 = sub_1000346CC(v44, v44[3]);
    v45(v83, v40, v43);
    uint64_t v49 = *v48;
    uint64_t v50 = (void *)swift_task_alloc();
    *(void *)(v0 + 776) = v50;
    void *v50 = v0;
    v50[1] = sub_10002DF08;
    uint64_t v51 = *(void *)(v0 + 600);
    uint64_t v52 = *(void *)(v0 + 584);
    uint64_t v53 = *(void *)(v0 + 520);
    v50[16] = *(void *)(v0 + 536);
    v50[17] = v49;
    v50[14] = v51;
    v50[15] = v53;
    v50[13] = v52;
    id v68 = sub_100026F88;
    uint64_t v67 = v49;
    goto LABEL_15;
  }
  uint64_t v14 = *(void *)(v0 + 560);
  uint64_t v15 = *(void *)(v0 + 544);
  unint64_t v16 = **(void ***)(v0 + 656);
  *(void *)(v0 + 824) = v16;
  UnknownStorage.init()();
  unint64_t v17 = (uint64_t *)(v14 + *(int *)(v15 + 20));
  *unint64_t v17 = 0;
  v17[1] = 0;
  uint64_t v18 = v14 + *(int *)(v15 + 24);
  *(_DWORD *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 4) = 1;
  id v19 = [v16 domain];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  *unint64_t v17 = v20;
  v17[1] = v22;
  uint64_t v23 = (uint64_t)[v16 code];
  if (v23 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v23 <= 0x7FFFFFFF)
  {
    uint64_t v24 = *(void *)(v0 + 560);
    uint64_t v25 = *(void *)(v0 + 552);
    *(_DWORD *)uint64_t v18 = v23;
    *(unsigned char *)(v18 + 4) = 0;
    sub_1000354A0(v24, v25);
    sub_10004B470(v25, v0 + 16);
    uint64_t v54 = *(void *)(v0 + 752);
    uint64_t v84 = *(void *)(v0 + 744);
    uint64_t v55 = *(void **)(v0 + 488);
    uint64_t v56 = *(void **)(v0 + 16);
    *(void *)(v0 + 832) = v56;
    long long v57 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v0 + 224) = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v0 + 240) = v57;
    *(unsigned char *)(v0 + 304) = *(unsigned char *)(v0 + 104);
    long long v58 = *(_OWORD *)(v0 + 88);
    long long v59 = *(_OWORD *)(v0 + 56);
    *(_OWORD *)(v0 + 272) = *(_OWORD *)(v0 + 72);
    *(_OWORD *)(v0 + 288) = v58;
    *(_OWORD *)(v0 + 256) = v59;
    char v74 = *(unsigned char *)(v0 + 224);
    uint64_t v60 = *(void *)(v0 + 232);
    char v61 = *(unsigned char *)(v0 + 240);
    char v73 = *(unsigned char *)(v0 + 241);
    uint64_t v72 = *(void *)(v0 + 248);
    char v71 = *(unsigned char *)(v0 + 256);
    uint64_t v62 = *(void *)(v0 + 272);
    uint64_t v70 = *(void *)(v0 + 264);
    *(void *)(v0 + 840) = v62;
    char v63 = *(unsigned char *)(v0 + 280);
    char v81 = *(unsigned char *)(v0 + 304);
    char v77 = *(unsigned char *)(v0 + 105);
    uint64_t v64 = *(void *)(v0 + 112);
    sub_100035504(v0 + 288, v0 + 384);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v65 = v56;
    sub_10003556C(v0 + 384);
    char v66 = sub_1000346CC(v55, v55[3]);
    uint64_t v67 = *v66;
    *(void *)(v0 + 848) = *v66;
    *(void *)(v0 + 120) = v65;
    *(unsigned char *)(v0 + 128) = v74;
    *(void *)(v0 + 136) = v60;
    *(unsigned char *)(v0 + 144) = v61;
    *(unsigned char *)(v0 + 145) = v73;
    *(void *)(v0 + 152) = v72;
    *(unsigned char *)(v0 + 160) = v71;
    *(void *)(v0 + 168) = v70;
    *(void *)(v0 + 176) = v62;
    *(unsigned char *)(v0 + 184) = v63;
    *(void *)(v0 + 192) = v84;
    *(void *)(v0 + 200) = v54;
    *(unsigned char *)(v0 + 208) = v81;
    *(unsigned char *)(v0 + 209) = v77;
    *(void *)(v0 + 216) = v64;
    id v68 = sub_10002E5C4;
LABEL_15:
    return _swift_task_switch(v68, v67, 0);
  }
  __break(1u);
  swift_once();
  sub_100006D88(v5, (uint64_t)qword_1000A4F48);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v82 = *(void **)(v0 + 736);
  uint64_t v29 = *(void *)(v0 + 712);
  uint64_t v30 = *(void *)(v0 + 704);
  uint64_t v31 = *(void *)(v0 + 664);
  uint64_t v32 = *(void *)(v0 + 648);
  uint64_t v33 = *(void *)(v0 + 640);
  uint64_t v34 = *(void *)(v0 + 512);
  if (v28)
  {
    uint64_t v79 = *(void *)(v0 + 712);
    uint64_t v76 = *(void *)(v0 + 512);
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    v85[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315138;
    *(void *)(v0 + 424) = v19;
    swift_errorRetain();
    sub_100006290((uint64_t *)&unk_1000A1150);
    uint64_t v36 = String.init<A>(describing:)();
    *(void *)(v0 + 432) = sub_10000B6D8(v36, v37, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "[Messaging] Failed to send response message due to %s ", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v79, v76);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v34);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v69 = *(uint64_t (**)(void))(v0 + 8);
  return v69();
}

uint64_t sub_10002F78C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v11 = *v4;
  uint64_t v10 = v4[1];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v12;
  uint64_t v13 = a4[2];
  uint64_t v14 = a4[3];
  uint64_t v15 = a4[4];
  *uint64_t v12 = v5;
  v12[1] = sub_100021434;
  return sub_10002C984(a1, a2, v11, v10, v13, v14, a3, v15);
}

uint64_t sub_10002F858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[8] = a3;
  v6[9] = a4;
  v6[7] = a1;
  v6[12] = *(void *)(a6 - 8);
  v6[13] = swift_task_alloc();
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  v6[16] = *(void *)(a5 - 8);
  v6[17] = swift_task_alloc();
  return _swift_task_switch(sub_10002F984, 0, 0);
}

uint64_t sub_10002F984()
{
  sub_100030568(v0[7], v0[10], v0[11], v0[17]);
  id v4 = (uint64_t (*)(uint64_t))(v0[8] + *(int *)v0[8]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[18] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10002FDEC;
  uint64_t v2 = v0[17];
  return v4(v2);
}

uint64_t sub_10002FDEC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[16] + 8))(v2[17], v2[10]);
  if (v0) {
    uint64_t v3 = sub_1000301D4;
  }
  else {
    uint64_t v3 = sub_10002FF54;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10002FF54()
{
  uint64_t v22 = v0;
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100006D88(v5, (uint64_t)qword_1000A4F48);
  id v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6(v2, v1, v3);
  BOOL v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[15];
  if (v9)
  {
    uint64_t v11 = v0[14];
    os_log_type_t type = v8;
    uint64_t v13 = v0[11];
    uint64_t v12 = v0[12];
    log = v7;
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    v6(v11, v10, v13);
    uint64_t v15 = String.init<A>(describing:)();
    v0[6] = sub_10000B6D8(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v13);
    _os_log_impl((void *)&_mh_execute_header, log, type, "[Messaging] Finished handling message %s ", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0[12] + 8))(v0[15], v0[11]);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_1000301D4()
{
  os_log_type_t v27 = v0;
  v0[2] = v0[19];
  sub_100006290((uint64_t *)&unk_1000A1150);
  sub_10000BE18(0, &qword_1000A1850);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v2 = (void *)v0[3];
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v4 = v0[12];
    uint64_t v3 = v0[13];
    uint64_t v5 = v0[11];
    uint64_t v6 = v0[7];
    uint64_t v7 = type metadata accessor for Logger();
    sub_100006D88(v7, (uint64_t)qword_1000A4F48);
    os_log_type_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v8(v3, v6, v5);
    id v9 = v2;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = v0[13];
      uint64_t v13 = v0[14];
      os_log_type_t type = v11;
      uint64_t v15 = v0[11];
      uint64_t v14 = v0[12];
      uint64_t v16 = swift_slowAlloc();
      uint64_t v25 = (void *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      v8(v13, v12, v15);
      uint64_t v17 = String.init<A>(describing:)();
      v0[4] = sub_10000B6D8(v17, v18, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v15);
      *(_WORD *)(v16 + 12) = 2112;
      v0[5] = v9;
      id v19 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v25 = v9;

      _os_log_impl((void *)&_mh_execute_header, v10, type, "[Messaging] Failed to handle message %s due to %@", (uint8_t *)v16, 0x16u);
      sub_100006290((uint64_t *)&unk_1000A1120);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v20 = v0[12];
      uint64_t v21 = v0[13];
      uint64_t v22 = v0[11];

      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
    }
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
  return result;
}

id sub_100030568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v43 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v41 = (char *)v38 - v14;
  uint64_t v15 = *(void *)(a3 - 8);
  uint64_t v16 = __chkstk_darwin(v13);
  unint64_t v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v45 = a1;
  v44((char *)v38 - v19, a1, a3);
  sub_10000BE18(0, qword_1000A1678);
  if (swift_dynamicCast())
  {
    uint64_t v40 = a4;
    uint64_t v20 = (void *)v49[0];
    uint64_t v21 = swift_conformsToProtocol2();
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    if (v21) {
      uint64_t v23 = a2;
    }
    else {
      uint64_t v23 = 0;
    }
    if (v23)
    {
      id v39 = v20;
      id result = [v20 data];
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t v25 = result;
      uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v38[1] = v27;
      v38[2] = v26;

      uint64_t v48 = 0;
      long long v46 = 0u;
      long long v47 = 0u;
      BinaryDecodingOptions.init()();
      v49[3] = v23;
      v49[4] = v22;
      sub_100035380(v49);
      uint64_t v28 = v50;
      Message.init(serializedData:extensions:partial:options:)();
      uint64_t v50 = v28;
      if (v28)
      {
        swift_errorRelease();

        sub_1000353E4((uint64_t)v49);
        uint64_t v29 = v41;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(v41, 1, 1, a2);
        uint64_t v50 = 0;
        a4 = v40;
      }
      else
      {

        sub_100006290(&qword_1000A1840);
        uint64_t v29 = v41;
        int v30 = swift_dynamicCast();
        uint64_t v31 = *(void *)(a2 - 8);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v29, v30 ^ 1u, 1, a2);
        int v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, a2);
        a4 = v40;
        if (v32 != 1) {
          return (id)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v40, v29, a2);
        }
      }
      (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v43);
    }
    else
    {

      a4 = v40;
    }
  }
  v44(v18, v45, a3);
  int v33 = swift_dynamicCast();
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);
  if (v33)
  {
    uint64_t v35 = *(void *)(a2 - 8);
    v34(v12, 0, 1, a2);
    return (id)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 32))(a4, v12, a2);
  }
  else
  {
    v34(v12, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v43);
    sub_10003498C();
    uint64_t v36 = swift_allocError();
    *(void *)uint64_t v37 = 1;
    *(unsigned char *)(v37 + 8) = 3;
    uint64_t v50 = v36;
    return (id)swift_willThrow();
  }
}

uint64_t sub_100030A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *v4;
  uint64_t v10 = v4[1];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v12;
  uint64_t v13 = *(void *)(a4 + 16);
  *uint64_t v12 = v5;
  v12[1] = sub_100021434;
  return sub_10002F858(a1, a2, v11, v10, v13, a3);
}

uint64_t sub_100030B50(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 96) = a4;
  *(void *)(v5 + 104) = a5;
  *(unsigned char *)(v5 + 328) = a2;
  *(void *)(v5 + 80) = a1;
  *(void *)(v5 + 88) = a3;
  sub_100006290(&qword_1000A1830);
  *(void *)(v5 + 112) = swift_task_alloc();
  *(void *)(v5 + 120) = swift_task_alloc();
  *(void *)(v5 + 128) = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  *(void *)(v5 + 136) = swift_task_alloc();
  *(void *)(v5 + 144) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Optional();
  *(void *)(v5 + 152) = v9;
  *(void *)(v5 + 160) = *(void *)(v9 - 8);
  *(void *)(v5 + 168) = swift_task_alloc();
  *(void *)(v5 + 176) = swift_task_alloc();
  *(void *)(v5 + 184) = *(void *)(a5 - 8);
  *(void *)(v5 + 192) = swift_task_alloc();
  *(void *)(v5 + 200) = swift_task_alloc();
  *(void *)(v5 + 208) = swift_task_alloc();
  *(void *)(v5 + 216) = swift_task_alloc();
  *(void *)(v5 + 224) = *(void *)(a4 - 8);
  *(void *)(v5 + 232) = swift_task_alloc();
  *(void *)(v5 + 240) = swift_task_alloc();
  sub_100007650((uint64_t *)&unk_1000A1150);
  uint64_t v10 = type metadata accessor for Result();
  *(void *)(v5 + 248) = v10;
  *(void *)(v5 + 256) = *(void *)(v10 - 8);
  *(void *)(v5 + 264) = swift_task_alloc();
  *(void *)(v5 + 272) = swift_task_alloc();
  *(void *)(v5 + 280) = swift_task_alloc();
  unint64_t v11 = (*(void *)a3 + 160) & 0xFFFFFFFFFFFFLL | 0xCAE8000000000000;
  *(void *)(v5 + 288) = *(void *)(*(void *)a3 + 160);
  *(void *)(v5 + 296) = v11;
  return _swift_task_switch(sub_100030E54, a3, 0);
}

uint64_t sub_100030E54()
{
  *(unsigned char *)(v0 + 329) = (*(uint64_t (**)(void))(v0 + 288))() & 1;
  return _swift_task_switch(sub_100030EC8, 0, 0);
}

id sub_100030EC8()
{
  uint64_t v130 = v0;
  if (*((unsigned char *)v0 + 329))
  {
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v1 = v0[10];
    uint64_t v2 = v0[25];
    uint64_t v3 = v0[23];
    uint64_t v4 = v0[13];
    uint64_t v5 = type metadata accessor for Logger();
    sub_100006D88(v5, (uint64_t)qword_1000A4F48);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v6(v2, v1, v4);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[25];
    if (!v9)
    {
      (*(void (**)(void, void))(v0[23] + 8))(v0[25], v0[13]);
LABEL_19:

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      int v33 = (uint64_t (*)(void))v0[1];
      return (id)v33();
    }
    uint64_t v11 = v0[24];
    uint64_t v120 = v0[23];
    logb = v7;
    uint64_t v12 = v0;
    uint64_t v13 = v0[13];
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v127 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    v6(v11, v10, v13);
    uint64_t v15 = String.init<A>(describing:)();
    v12[9] = sub_10000B6D8(v15, v16, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = v13;
    uint64_t v0 = v12;
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v10, v17);
    uint64_t v7 = logb;
    _os_log_impl((void *)&_mh_execute_header, logb, v8, "[Messaging][Response] Message was already completed, ignoring response: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_18:
    swift_slowDealloc();
    goto LABEL_19;
  }
  uint64_t v18 = v0[13];
  if (v18 != v0[12] && v18 == (void)&type metadata for () + 8)
  {
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100006D88(v30, (uint64_t)qword_1000A4F48);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v7, v31)) {
      goto LABEL_19;
    }
    int v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v31, "[Messaging][Response] Ignoring response due to type mismatch.", v32, 2u);
    goto LABEL_18;
  }
  uint64_t v20 = v0[28];
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[23] + 16);
  v21(v0[27], v0[10], v18);
  int v22 = swift_dynamicCast();
  uint64_t v23 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56);
  uint64_t v24 = v0[12];
  if (!v22)
  {
    uint64_t v35 = v0[26];
    uint64_t v36 = v0[22];
    uint64_t v37 = v0[19];
    uint64_t v38 = v0[20];
    uint64_t v39 = v0[13];
    uint64_t v40 = v0[10];
    v121 = v23;
    v23(v36, 1, 1, v24);
    uint64_t v41 = *(NSObject **)(v38 + 8);
    uint64_t v42 = v37;
    uint64_t v43 = (id *)(v0 + 7);
    ((void (*)(uint64_t, uint64_t))v41)(v36, v42);
    v21(v35, v40, v39);
    sub_10000BE18(0, qword_1000A1678);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_25:
      uint64_t v48 = (uint64_t *)v0[34];
      uint64_t v47 = v0[35];
      uint64_t v50 = v0[31];
      uint64_t v49 = v0[32];
      sub_10003498C();
      uint64_t v51 = swift_allocError();
      *(void *)uint64_t v52 = 2;
      *(unsigned char *)(v52 + 8) = 3;
      *uint64_t v48 = v51;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v49 + 32))(v47, v48, v50);
      goto LABEL_26;
    }
    uint64_t v44 = v0;
    id v45 = *v43;
    unsigned __int8 v46 = sub_10003764C((__int16)[*v43 type]);
    if (v46 == 5)
    {

      goto LABEL_25;
    }
    unsigned __int8 v75 = v46;
    os_log_t loga = v41;
    if (*((unsigned __int8 *)v0 + 328) == v46)
    {
      uint64_t v76 = v0[12];
      uint64_t v77 = swift_conformsToProtocol2();
      if (v77) {
        uint64_t v78 = v77;
      }
      else {
        uint64_t v78 = 0;
      }
      if (!v77) {
        uint64_t v76 = 0;
      }
      if (v76)
      {
        id result = [v45 data];
        if (!result) {
          goto LABEL_58;
        }
        uint64_t v79 = result;
        static Data._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v129 = 0;
        long long v127 = 0u;
        long long v128 = 0u;
        BinaryDecodingOptions.init()();
        v0[5] = v76;
        v0[6] = v78;
        sub_100035380(v0 + 2);
        Message.init(serializedData:extensions:partial:options:)();
        uint64_t v80 = v0[28];
        uint64_t v81 = v0[21];
        uint64_t v82 = v0[12];
        sub_100006290(&qword_1000A1840);
        int v83 = swift_dynamicCast();
        v121(v81, v83 ^ 1u, 1, v82);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v81, 1, v82) != 1)
        {
          uint64_t v114 = v0[35];
          uint64_t v116 = v0[28];
          uint64_t v115 = v0[29];
          uint64_t v117 = v0[21];
          uint64_t v118 = v0[12];

          uint64_t v119 = *(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 32);
          v119(v115, v117, v118);
          v119(v114, v115, v118);
          goto LABEL_12;
        }
        ((void (*)(void, void))loga)(v0[21], v0[19]);
      }
    }
    if (v75)
    {
      uint64_t v85 = (uint64_t *)v0[34];
      uint64_t v84 = v0[35];
      uint64_t v87 = v0[31];
      uint64_t v86 = v0[32];
      sub_10003498C();
      uint64_t v88 = swift_allocError();
      *(void *)uint64_t v89 = 2;
      *(unsigned char *)(v89 + 8) = 3;

      *uint64_t v85 = v88;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v86 + 32))(v84, v85, v87);
      goto LABEL_26;
    }
    id result = [v45 data];
    if (result)
    {
      uint64_t v90 = result;
      uint64_t v91 = type metadata accessor for ErrorResponse();
      static Data._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v129 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      BinaryDecodingOptions.init()();
      sub_100034C5C((unint64_t *)&qword_1000A1838, 255, (void (*)(uint64_t))type metadata accessor for ErrorResponse);
      Message.init(serializedData:extensions:partial:options:)();
      uint64_t v92 = *(void *)(v91 - 8);
      uint64_t v94 = v0[15];
      uint64_t v93 = v0[16];
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v92 + 56))(v93, 0, 1, v91);
      sub_1000352C0(v93, v94, &qword_1000A1830);
      v95 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v92 + 48);
      int v96 = v95(v94, 1, v91);
      uint64_t v97 = v44[15];
      if (v96 == 1)
      {
        sub_10000BD30(v44[15], &qword_1000A1830);
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_100035324(v97);
      }
      uint64_t v98 = v44[14];
      sub_1000352C0(v44[16], v98, &qword_1000A1830);
      int v99 = v95(v98, 1, v91);
      uint64_t v100 = v44[14];
      if (v99 == 1)
      {
        sub_10000BD30(v100, &qword_1000A1830);
        uint64_t v101 = 0;
      }
      else
      {
        uint64_t v102 = (int *)(v100 + *(int *)(v91 + 24));
        uint64_t v103 = *v102;
        int v104 = *((unsigned __int8 *)v102 + 4);
        sub_100035324(v100);
        if (v104) {
          uint64_t v101 = 0;
        }
        else {
          uint64_t v101 = v103;
        }
      }
      uint64_t v0 = v44;
      v105 = (uint64_t *)v44[34];
      os_log_t logd = (os_log_t)v44[35];
      uint64_t v107 = v44[31];
      uint64_t v106 = v44[32];
      uint64_t v108 = v44[16];
      id v109 = objc_allocWithZone((Class)NSError);
      NSString v110 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v111 = [v109 initWithDomain:v110 code:v101 userInfo:0];

      sub_10003498C();
      uint64_t v112 = swift_allocError();
      *(void *)uint64_t v113 = v111;
      *(unsigned char *)(v113 + 8) = 1;

      sub_10000BD30(v108, &qword_1000A1830);
      uint64_t *v105 = v112;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(os_log_t, uint64_t *, uint64_t))(v106 + 32))(logd, v105, v107);
      goto LABEL_26;
    }
    __break(1u);
LABEL_58:
    __break(1u);
    return result;
  }
  uint64_t v25 = v0[35];
  uint64_t v26 = v0[30];
  uint64_t v27 = v0[28];
  uint64_t v28 = v0[22];
  v23(v28, 0, 1, v0[12]);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32);
  v29(v26, v28, v24);
  v29(v25, v26, v24);
LABEL_12:
  swift_storeEnumTagMultiPayload();
LABEL_26:
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v53 = v0[35];
  uint64_t v55 = v0[32];
  uint64_t v54 = v0[33];
  uint64_t v56 = v0[31];
  uint64_t v57 = type metadata accessor for Logger();
  sub_100006D88(v57, (uint64_t)qword_1000A4F48);
  long long v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16);
  v58(v54, v53, v56);
  long long v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v59, v60))
  {
    logc = v59;
    uint64_t v61 = v0[33];
    uint64_t v62 = v0[34];
    uint64_t v64 = v0[31];
    uint64_t v63 = v0[32];
    id v65 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v127 = swift_slowAlloc();
    *(_DWORD *)id v65 = 136315138;
    v58(v62, v61, v64);
    uint64_t v66 = String.init<A>(describing:)();
    v0[8] = sub_10000B6D8(v66, v67, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v70 = *(void (**)(void, void))(v63 + 8);
    uint64_t v69 = v63 + 8;
    id v68 = v70;
    v70(v61, v64);
    long long v59 = logc;
    _os_log_impl((void *)&_mh_execute_header, logc, v60, "[Messaging][Response] Resuming continuation with result %s", v65, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v71 = v0[32];
    uint64_t v72 = *(void (**)(void, void))(v71 + 8);
    uint64_t v69 = v71 + 8;
    id v68 = v72;
    v72(v0[33], v0[31]);
  }

  v0[38] = v69;
  v0[39] = v68;
  os_log_t log = (os_log_t)(*(void *)(*(void *)v0[11] + 192) + **(int **)(*(void *)v0[11] + 192));
  char v73 = (void *)swift_task_alloc();
  v0[40] = v73;
  void *v73 = v0;
  v73[1] = sub_100031D14;
  uint64_t v74 = v0[35];
  return (id)((uint64_t (*)(uint64_t))log)(v74);
}

uint64_t sub_100031D14()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100031E10, 0, 0);
}

uint64_t sub_100031E10()
{
  (*(void (**)(void, void))(v0 + 312))(*(void *)(v0 + 280), *(void *)(v0 + 248));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100031F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a1;
  v3[7] = a3;
  unint64_t v4 = (*(void *)a3 + 160) & 0xFFFFFFFFFFFFLL | 0xCAE8000000000000;
  v3[8] = *(void *)(*(void *)a3 + 160);
  v3[9] = v4;
  return _swift_task_switch(sub_100031F90, a3, 0);
}

uint64_t sub_100031F90()
{
  *(unsigned char *)(v0 + 88) = (*(uint64_t (**)(void))(v0 + 64))() & 1;
  return _swift_task_switch(sub_100032004, 0, 0);
}

uint64_t sub_100032004()
{
  uint64_t v24 = v0;
  if (*(unsigned char *)(v0 + 88))
  {
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100006D88(v1, (uint64_t)qword_1000A4F48);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void *)(v0 + 48);
    if (v4)
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      uint64_t v23 = v7;
      *(void *)(v0 + 32) = v5;
      swift_errorRetain();
      sub_100006290((uint64_t *)&unk_1000A1150);
      uint64_t v8 = String.init<A>(describing:)();
      *(void *)(v0 + 40) = sub_10000B6D8(v8, v9, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[Messaging][Response] Message was already completed, ignoring error: %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  else
  {
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100006D88(v10, (uint64_t)qword_1000A4F48);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void *)(v0 + 48);
    if (v13)
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      *(void *)(v0 + 16) = v14;
      swift_errorRetain();
      sub_100006290((uint64_t *)&unk_1000A1150);
      uint64_t v16 = String.init<A>(describing:)();
      *(void *)(v0 + 24) = sub_10000B6D8(v16, v17, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "[Messaging][Response] Resuming continuation with error %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    int v22 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)(v0 + 56) + 184)
                                          + **(int **)(**(void **)(v0 + 56) + 184));
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v20;
    void *v20 = v0;
    v20[1] = sub_1000324A0;
    uint64_t v21 = *(void *)(v0 + 48);
    return v22(v21);
  }
}

uint64_t sub_1000324A0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100032594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + 8);
  char v9 = *(unsigned char *)v3;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  uint64_t v11 = *(void *)(a3 + 16);
  void *v10 = v4;
  v10[1] = sub_100021434;
  return sub_100030B50(a1, v9, v8, v11, a2);
}

uint64_t sub_100032658(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100021434;
  v5[6] = a1;
  v5[7] = v4;
  unint64_t v6 = (*(void *)v4 + 160) & 0xFFFFFFFFFFFFLL | 0xCAE8000000000000;
  v5[8] = *(void *)(*(void *)v4 + 160);
  v5[9] = v6;
  return _swift_task_switch(sub_100031F90, v4, 0);
}

uint64_t sub_100032724(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Swift::Int v7 = *(void *)(*v2 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v8 = AnyHashable._rawHashValue(seed:)(v7);
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    while (1)
    {
      sub_100034BF4(*(void *)(v6 + 48) + 40 * v10, (uint64_t)v17);
      char v12 = static AnyHashable.== infix(_:_:)();
      sub_1000219D8((uint64_t)v17);
      if (v12) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    sub_1000219D8(a2);
    sub_100034BF4(*(void *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100034BF4(a2, (uint64_t)v17);
    uint64_t v16 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100032B6C((Swift::Int)v17, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v16;
    swift_bridgeObjectRelease();
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return 1;
  }
}

uint64_t sub_1000328A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100006290(&qword_1000A1638);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9) {
          goto LABEL_33;
        }
        unint64_t v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v18 = v6[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v18 = v6[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v6[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      uint64_t v20 = *(void *)(v2 + 48) + 40 * v16;
      long long v29 = *(_OWORD *)v20;
      long long v30 = *(_OWORD *)(v20 + 16);
      uint64_t v31 = *(void *)(v20 + 32);
      uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
      *(_OWORD *)uint64_t v14 = v29;
      *(_OWORD *)(v14 + 16) = v30;
      *(void *)(v14 + 32) = v31;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int sub_100032B6C(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000328A0();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (Swift::Int)sub_100032CD8();
      goto LABEL_12;
    }
    sub_100032EA8();
  }
  uint64_t v9 = *v3;
  uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    do
    {
      sub_100034BF4(*(void *)(v9 + 48) + 40 * a2, (uint64_t)v19);
      char v12 = static AnyHashable.== infix(_:_:)();
      uint64_t result = sub_1000219D8((uint64_t)v19);
      if (v12) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v11;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v13 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v14 = *(void *)(v13 + 48) + 40 * a2;
  long long v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v6;
  *(_OWORD *)(v14 + 16) = v15;
  *(void *)(v14 + 32) = *(void *)(v6 + 32);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v13 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_100032CD8()
{
  uint64_t v1 = v0;
  sub_100006290(&qword_1000A1638);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t result = (void *)sub_100034BF4(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v17 = *(void *)(v4 + 48) + v16;
    long long v18 = v23[0];
    long long v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100032EA8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100006290(&qword_1000A1638);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_24:
    sub_100034BF4(*(void *)(v2 + 48) + 40 * v18, (uint64_t)v29);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
    long long v15 = v29[0];
    long long v16 = v29[1];
    *(void *)(v14 + 32) = v30;
    *(_OWORD *)uint64_t v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
    ++*(void *)(v4 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10003313C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100006290(&qword_1000A1380);
  __chkstk_darwin(v6 - 8);
  unint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void **)a3;
  HIDWORD(v21) = *(unsigned __int8 *)(a3 + 8);
  uint64_t v10 = *(void *)(a3 + 16);
  char v11 = *(unsigned char *)(a3 + 24);
  int v23 = *(unsigned __int8 *)(a3 + 25);
  uint64_t v22 = *(void *)(a3 + 32);
  char v12 = *(unsigned char *)(a3 + 40);
  uint64_t v13 = *(void *)(a3 + 56);
  uint64_t v28 = *(void *)(a3 + 48);
  int v27 = *(unsigned __int8 *)(a3 + 64);
  uint64_t v14 = *(void *)(a3 + 80);
  uint64_t v26 = *(void *)(a3 + 72);
  int v25 = *(unsigned __int16 *)(a3 + 88);
  uint64_t v24 = *(void *)(a3 + 96);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v8, 1, 1, v15);
  char v30 = v11;
  char v29 = v12;
  uint64_t v17 = sub_100034C5C((unint64_t *)&qword_1000A1650, v16, (void (*)(uint64_t))type metadata accessor for IDSMessagingService);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = v17;
  *(void *)(v18 + 32) = a2;
  *(void *)(v18 + 40) = v9;
  *(unsigned char *)(v18 + 48) = BYTE4(v21);
  *(void *)(v18 + 56) = v10;
  *(unsigned char *)(v18 + 64) = v30;
  *(unsigned char *)(v18 + 65) = v23;
  *(void *)(v18 + 72) = v22;
  *(unsigned char *)(v18 + 80) = v29;
  *(void *)(v18 + 88) = v28;
  *(void *)(v18 + 96) = v13;
  *(unsigned char *)(v18 + 104) = v27;
  *(void *)(v18 + 112) = v26;
  *(void *)(v18 + 120) = v14;
  *(_WORD *)(v18 + 128) = v25;
  *(void *)(v18 + 136) = v24;
  *(void *)(v18 + 144) = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain_n();
  id v19 = v9;
  swift_bridgeObjectRetain();
  sub_10004BA30((uint64_t)v8, (uint64_t)&unk_1000A1868, v18);
  return swift_release();
}

uint64_t sub_100033364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v12 = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(v6 + 96) = v12;
  *(void *)(v6 + 112) = *(void *)(a5 + 96);
  long long v13 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a5;
  *(_OWORD *)(v6 + 32) = v13;
  long long v14 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(v6 + 64) = v14;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v6 + 120) = v15;
  *uint64_t v15 = v6;
  v15[1] = sub_10001FA40;
  return sub_10001DB3C(a1, a2, a3, a4, v6 + 16, a6);
}

id sub_100033454(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v17 = a2;
  uint64_t v18 = a1;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  swift_defaultActor_initialize();
  v2[16] = &_swiftEmptyDictionarySingleton;
  v2[17] = &_swiftEmptyDictionarySingleton;
  sub_10000BE18(0, (unint64_t *)&qword_1000A09A0);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v20 = &_swiftEmptyArrayStorage;
  sub_100034C5C((unint64_t *)&qword_1000A15F0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100006290((uint64_t *)&unk_1000A09B0);
  sub_1000349E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v4);
  v2[18] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v10 = v17;
  char v11 = v18;
  v3[14] = v17;
  v3[15] = v11;
  id v12 = v10;
  id v13 = v11;
  swift_release();
  long long v14 = (objc_class *)type metadata accessor for IDSMessagingService();
  v19.receiver = v3;
  v19.super_class = v14;
  return [super init];
}

uint64_t sub_1000336E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      sub_100034BF4(v4, (uint64_t)v5);
      sub_100032724((uint64_t)v6, (uint64_t)v5);
      sub_1000219D8((uint64_t)v6);
      v4 += 40;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

void sub_100033774(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  uint64_t v47 = a3;
  uint64_t v48 = a2;
  uint64_t v11 = sub_100006290(&qword_1000A1380);
  __chkstk_darwin(v11 - 8);
  id v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006290(&qword_1000A15B0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  unint64_t v20 = (char *)&v45 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v45 - v21;
  if (!a1)
  {
    __break(1u);
    goto LABEL_20;
  }
  id v49 = *(id *)(v7 + 112);
  id v23 = v49;
  if (a5) {
    NSString v24 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v24 = 0;
  }
  id v25 = [a1 linkedDeviceForFromID:v24 withRelationship:[v49 relationship]];

  if (v25)
  {
    sub_10000BE18(0, &qword_1000A15B8);
    id v26 = v49;
    char v27 = static NSObject.== infix(_:_:)();

    if ((v27 & 1) == 0) {
      return;
    }
    id v49 = a6;
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100006D88(v28, (uint64_t)qword_1000A4F48);
    sub_1000352C0(v48, (uint64_t)v22, &qword_1000A15B0);
    char v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v46 = v7;
    if (v31)
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      v51[0] = v45;
      *(_DWORD *)uint64_t v32 = 136315394;
      uint64_t v50 = sub_10000B6D8(0xD00000000000003ELL, 0x8000000100081CA0, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 12) = 2080;
      sub_1000352C0((uint64_t)v22, (uint64_t)v20, &qword_1000A15B0);
      uint64_t v33 = String.init<A>(describing:)();
      uint64_t v50 = sub_10000B6D8(v33, v34, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000BD30((uint64_t)v22, &qword_1000A15B0);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "[Messaging] %s resourceURL: %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10000BD30((uint64_t)v22, &qword_1000A15B0);
    }

    id v36 = v49;
    sub_1000352C0(v48, (uint64_t)v17, &qword_1000A15B0);
    uint64_t v37 = type metadata accessor for URL();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v17, 1, v37) != 1)
    {
      if (v47)
      {
        type metadata accessor for TemporaryResourceFile();
        swift_bridgeObjectRetain();
        uint64_t v38 = TemporaryResourceFile.__allocating_init(idsResourceURL:metadata:)();
        id v39 = objc_allocWithZone((Class)NPTOTransaction);
        NSString v40 = String._bridgeToObjectiveC()();
        id v41 = [v39 initWithDescription:v40];

        uint64_t v42 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v13, 1, 1, v42);
        uint64_t v43 = swift_allocObject();
        *(void *)(v43 + 16) = 0;
        *(void *)(v43 + 24) = 0;
        *(void *)(v43 + 32) = v41;
        *(void *)(v43 + 40) = v36;
        *(void *)(v43 + 48) = v38;
        *(unsigned char *)(v43 + 56) = 0;
        *(unsigned char *)(v43 + 57) = 0;
        *(void *)(v43 + 64) = v46;
        id v44 = v36;
        swift_retain();
        sub_100048120((uint64_t)v13, (uint64_t)&unk_1000A15C8, v43);
        swift_release();
        return;
      }
LABEL_21:
      __break(1u);
      return;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v35 = v49;
}

uint64_t sub_100033D00(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100006290(&qword_1000A1380);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A0EB0 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100006D88(v9, (uint64_t)qword_1000A4F48);
  id v10 = a1;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    id v26 = v8;
    char v27 = a2;
    uint64_t v28 = v3;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v30 = v25;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v29 = sub_10000B6D8(0xD00000000000003CLL, 0x8000000100081C20, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2112;
    if (a1)
    {
      uint64_t v29 = (uint64_t)v10;
      id v15 = v10;
    }
    else
    {
      uint64_t v29 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v14 = a1;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[Messaging] %s protobuf: %@", (uint8_t *)v13, 0x16u);
    sub_100006290((uint64_t *)&unk_1000A1120);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a2 = v27;
    uint64_t v3 = v28;
    uint64_t v8 = v26;
  }
  else
  {
  }
  id v16 = objc_allocWithZone((Class)NPTOTransaction);
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v16 initWithDescription:v17];

  uint64_t v19 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, 1, 1, v19);
  unint64_t v20 = (void *)swift_allocObject();
  v20[2] = 0;
  v20[3] = 0;
  v20[4] = v18;
  v20[5] = a2;
  v20[6] = v3;
  v20[7] = a1;
  id v21 = a2;
  swift_retain();
  id v22 = v10;
  sub_100048120((uint64_t)v8, (uint64_t)&unk_1000A1580, (uint64_t)v20);
  return swift_release();
}

void sub_1000340A0(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = v4;
  LODWORD(v7) = a3;
  uint64_t v10 = sub_100006290(&qword_1000A1380);
  __chkstk_darwin(v10 - 8);
  os_log_type_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v13 = qword_1000A0EB0;
    swift_bridgeObjectRetain();
    if (v13 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100006D88(v14, (uint64_t)qword_1000A4F48);
    swift_bridgeObjectRetain_n();
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      HIDWORD(v27) = v7;
      uint64_t v7 = v17;
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315394;
      uint64_t v28 = v5;
      uint64_t v29 = sub_10000B6D8(0xD000000000000037, 0x8000000100081B60, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v29 = sub_10000B6D8(a1, a2, &v30);
      uint64_t v5 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "[Messaging] %s identifier: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      LOBYTE(v7) = BYTE4(v27);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v21 = objc_allocWithZone((Class)NPTOTransaction);
    NSString v22 = String._bridgeToObjectiveC()();
    id v23 = [v21 initWithDescription:v22];

    uint64_t v24 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v12, 1, 1, v24);
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = 0;
    *(void *)(v25 + 24) = 0;
    *(void *)(v25 + 32) = v23;
    *(unsigned char *)(v25 + 40) = v7 & 1;
    *(void *)(v25 + 48) = v5;
    *(void *)(v25 + 56) = a1;
    *(void *)(v25 + 64) = a2;
    *(void *)(v25 + 72) = a4;
    swift_retain();
    swift_errorRetain();
    sub_100048120((uint64_t)v12, (uint64_t)&unk_1000A1560, v25);
    swift_release();
  }
  else
  {
    if (qword_1000A0EB0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100006D88(v18, (uint64_t)qword_1000A4F48);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)unint64_t v20 = 136315138;
      uint64_t v29 = sub_10000B6D8(0xD000000000000037, 0x8000000100081B60, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v28, v19, "[Messaging] %s received nil identifier", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v26 = v28;
    }
  }
}

uint64_t sub_100034584()
{
  swift_unknownObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_errorRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1000345DC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_100021434;
  return sub_10002C5A0(a1, v4, v5, v6, v7, v8, v9, v10);
}

void *sub_1000346CC(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100034710()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100034768()
{
  long long v5 = *(_OWORD *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100021434;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  return _swift_task_switch(sub_10002BFE4, 0, 0);
}

uint64_t sub_100034824()
{
  swift_unknownObjectRelease();

  sub_100034884(*(void *)(v0 + 48), *(unsigned char *)(v0 + 56), *(unsigned char *)(v0 + 57));
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100034884(uint64_t a1, unsigned __int8 a2, char a3)
{
  if (a3) {
    return sub_100034890(a1, a2);
  }
  else {
    return swift_release();
  }
}

uint64_t sub_100034890(uint64_t a1, unsigned __int8 a2)
{
  if (a2 <= 2u) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1000348A4()
{
  long long v6 = *(_OWORD *)(v0 + 40);
  __int16 v2 = *(unsigned __int8 *)(v0 + 56) | (*(unsigned __int8 *)(v0 + 57) << 8);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100021434;
  *(void *)(v4 + 40) = v3;
  *(_WORD *)(v4 + 80) = v2;
  *(_OWORD *)(v4 + 24) = v6;
  return _swift_task_switch(sub_10002B594, 0, 0);
}

uint64_t sub_100034978(uint64_t a1, unsigned __int8 a2)
{
  if (a2 <= 2u) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t sub_10003498C()
{
  unint64_t result = qword_1000A15D0;
  if (!qword_1000A15D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1000A15D0);
  }
  return result;
}

unint64_t sub_1000349E0()
{
  unint64_t result = qword_1000A1600;
  if (!qword_1000A1600)
  {
    sub_100007650((uint64_t *)&unk_1000A09B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1000A1600);
  }
  return result;
}

uint64_t type metadata accessor for IDSMessagingService.ResponseHandler()
{
  return sub_1000356E0();
}

uint64_t sub_100034A54()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100034A8C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100034ACC()
{
  long long v5 = *(_OWORD *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100021434;
  *(void *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v5;
  return _swift_task_switch(sub_10001FC1C, 0, 0);
}

unint64_t sub_100034B88()
{
  unint64_t result = qword_1000A1630;
  if (!qword_1000A1630)
  {
    sub_100007650(&qword_1000A1628);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1630);
  }
  return result;
}

uint64_t sub_100034BF4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100034C50(uint64_t a1)
{
  return sub_1000293D8(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t sub_100034C5C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100034CA4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100034D8C(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[6];
  uint64_t v10 = (uint64_t)v1 + v6;
  uint64_t v11 = *(void *)((char *)v1 + ((*(void *)(*(void *)(v4 - 8) + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  os_log_type_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *os_log_type_t v12 = v2;
  v12[1] = sub_100021434;
  return sub_100029614(a1, v7, v8, v9, v10, v11, v4, v5);
}

uint64_t sub_100034EC4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100034EFC()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100034F3C(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10001768C;
  return sub_10002A2B4(a1, v4, v5, v6);
}

uint64_t sub_100035000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

void *sub_100035008(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

__n128 sub_10003503C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *sub_100035048(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for IDSMessagingService.VoidResponseRequestHandler()
{
  return sub_1000356E0();
}

uint64_t sub_10003509C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

void *sub_1000350A4(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000350E0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100035128(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for IDSMessagingService.MessageResponseRequestHandler()
{
  return sub_1000356E0();
}

uint64_t sub_10003517C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t sub_1000351B4()
{
  return swift_release();
}

uint64_t sub_1000351BC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100035200(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t sub_10003523C(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100035284(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1000352C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100006290(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100035324(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ErrorResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_100035380(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1000353E4(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

unint64_t sub_100035438()
{
  unint64_t result = qword_1000A1858;
  if (!qword_1000A1858)
  {
    sub_10000BE18(255, &qword_1000A1850);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1858);
  }
  return result;
}

uint64_t sub_1000354A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ErrorResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100035504(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006290(&qword_1000A1628);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003556C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100035598(uint64_t a1)
{
  return sub_10003313C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000355A0()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 152, 7);
}

uint64_t sub_100035600(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)(v1 + 5);
  uint64_t v8 = v1[18];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10001768C;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A1860
                                                                                     + dword_1000A1860);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000356E0()
{
  return swift_getGenericMetadata();
}

id sub_100035728@<X0>(void **a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  return v2;
}

uint64_t sub_100035734()
{
  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t sub_10003573C@<X0>(uint64_t a1@<X8>)
{
  return sub_100035770(v1 + 8, a1);
}

uint64_t (*SyncLibrary.assetCollection.modify())()
{
  return nullsub_1;
}

uint64_t sub_100035768()
{
  return *(void *)(v0 + 96);
}

uint64_t sub_100035770(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1000357CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for SyncSignal(0);
  sub_100035938();
  uint64_t v5 = Message.serializedData(partial:)();
  if (v2)
  {
    sub_100035990(a1);
  }
  else
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    id v9 = objc_allocWithZone((Class)IDSProtobuf);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v11 = [v9 initWithProtobufData:isa type:101 isResponse:0];

    if (v11)
    {
      sub_10002001C(v7, v8);
      uint64_t v12 = IDSMaxMessageTimeout;
      id v13 = v11;
      sub_100035990(a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      *(void *)a2 = v13;
      *(unsigned char *)(a2 + 8) = 1;
      *(void *)(a2 + 16) = 5;
      *(_WORD *)(a2 + 24) = 512;
      *(void *)(a2 + 32) = v12;
      *(unsigned char *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0xD000000000000019;
      *(void *)(a2 + 56) = 0x8000000100081D60;
      *(unsigned char *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 80) = 0;
      *(_WORD *)(a2 + 88) = 258;
      *(void *)(a2 + 96) = 200;
    }
    else
    {
      __break(1u);
    }
  }
}

unint64_t sub_100035938()
{
  unint64_t result = qword_1000A1880;
  if (!qword_1000A1880)
  {
    type metadata accessor for SyncSignal(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1880);
  }
  return result;
}

uint64_t sub_100035990(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SyncSignal(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for SyncSignalMessage(id *a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SyncSignalMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SyncSignalMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  uint64_t v8 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

__n128 initializeWithTake for SyncSignalMessage(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for SyncSignalMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncSignalMessage(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SyncSignalMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SyncSignalMessage()
{
  return &type metadata for SyncSignalMessage;
}

uint64_t ErrorResponse.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for ErrorResponse();
  long long v3 = (void *)(a1 + *(int *)(result + 20));
  *long long v3 = 0;
  v3[1] = 0;
  uint64_t v4 = a1 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  return result;
}

uint64_t type metadata accessor for ErrorResponse()
{
  uint64_t result = qword_1000A1940;
  if (!qword_1000A1940) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ErrorResponse.domain.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for ErrorResponse() + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t ErrorResponse.code.setter(int a1)
{
  uint64_t result = type metadata accessor for ErrorResponse();
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t ErrorResponse.domain.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ErrorResponse() + 20));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ErrorResponse.code.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for ErrorResponse() + 24));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t (*ErrorResponse.domain.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for ErrorResponse() + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_100035F2C;
}

uint64_t sub_100035F2C(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)(a1[2] + *((int *)a1 + 6));
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
  }
  return result;
}

BOOL ErrorResponse.hasDomain.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ErrorResponse() + 20) + 8) != 0;
}

Swift::Void __swiftcall ErrorResponse.clearDomain()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for ErrorResponse() + 20));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t (*ErrorResponse.code.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for ErrorResponse() + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_10003607C;
}

uint64_t sub_10003607C(uint64_t result)
{
  uint64_t v1 = *(void *)result + *(int *)(result + 12);
  *(_DWORD *)uint64_t v1 = *(_DWORD *)(result + 8);
  *(unsigned char *)(v1 + 4) = 0;
  return result;
}

BOOL ErrorResponse.hasCode.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for ErrorResponse() + 24) + 4) & 1) == 0;
}

Swift::Void __swiftcall ErrorResponse.clearCode()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for ErrorResponse() + 24);
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 4) = 1;
}

uint64_t ErrorResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t ErrorResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*ErrorResponse.unknownFields.modify())()
{
  return nullsub_1;
}

const char *ErrorResponse.protoMessageName.unsafeMutableAddressor()
{
  return "ErrorResponse";
}

uint64_t static ErrorResponse.protoMessageName.getter()
{
  return 0x736552726F727245;
}

uint64_t sub_100036218()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100006DC0(v0, static ErrorResponse._protobuf_nameMap);
  sub_100006D88(v0, (uint64_t)static ErrorResponse._protobuf_nameMap);
  sub_100006290(&qword_1000A1990);
  uint64_t v1 = (int *)(sub_100006290(&qword_1000A1998) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10007A280;
  int v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *int v5 = 1;
  *(void *)unint64_t v6 = "domain";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  id v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "code";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t ErrorResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  if (qword_1000A0EA0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for _NameMap();

  return sub_100006D88(v0, (uint64_t)static ErrorResponse._protobuf_nameMap);
}

uint64_t static ErrorResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000A0EA0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for _NameMap();
  uint64_t v3 = sub_100006D88(v2, (uint64_t)static ErrorResponse._protobuf_nameMap);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t ErrorResponse.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      type metadata accessor for ErrorResponse();
      dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for ErrorResponse();
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t ErrorResponse.traverse<A>(visitor:)()
{
  uint64_t v2 = type metadata accessor for ErrorResponse();
  if (!*(void *)(v0 + *(int *)(v2 + 20) + 8)
    || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (*(unsigned char *)(v0 + *(int *)(v2 + 24) + 4)) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (!v1) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int ErrorResponse.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t sub_100036704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 24);
  unint64_t v6 = (void *)(a2 + *(int *)(a1 + 20));
  *unint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_10003674C()
{
  return ErrorResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_100036764()
{
  return ErrorResponse.traverse<A>(visitor:)();
}

uint64_t sub_100036780(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100037320(&qword_1000A1980, (void (*)(uint64_t))type metadata accessor for ErrorResponse);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100036800(uint64_t a1)
{
  uint64_t v2 = sub_100037320((unint64_t *)&qword_1000A1838, (void (*)(uint64_t))type metadata accessor for ErrorResponse);

  return Message.debugDescription.getter(a1, v2);
}

Swift::Int sub_10003686C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000368C4()
{
  sub_100037320((unint64_t *)&qword_1000A1838, (void (*)(uint64_t))type metadata accessor for ErrorResponse);

  return Message.hash(into:)();
}

Swift::Int sub_100036940()
{
  return Hasher._finalize()();
}

uint64_t _s14NanoPhotosSync13ErrorResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = type metadata accessor for ErrorResponse();
  uint64_t v12 = *(int *)(v11 + 20);
  id v13 = (void *)(a1 + v12);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  id v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  if (!v14)
  {
    if (!v16) {
      goto LABEL_10;
    }
LABEL_12:
    char v18 = 0;
    return v18 & 1;
  }
  if (!v16) {
    goto LABEL_12;
  }
  BOOL v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (char v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    uint64_t v19 = *(int *)(v11 + 24);
    unint64_t v20 = (_DWORD *)(a1 + v19);
    char v21 = *(unsigned char *)(a1 + v19 + 4);
    NSString v22 = (_DWORD *)(a2 + v19);
    int v23 = *(unsigned __int8 *)(a2 + v19 + 4);
    if (v21)
    {
      if (!v23) {
        goto LABEL_12;
      }
    }
    else
    {
      if (*v20 != *v22) {
        LOBYTE(v23) = 1;
      }
      if (v23) {
        goto LABEL_12;
      }
    }
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v24(v10, a1, v4);
    v24(v8, a2, v4);
    sub_100037320(&qword_1000A1988, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v25(v8, v4);
    v25(v10, v4);
  }
  return v18 & 1;
}

uint64_t sub_100036BAC()
{
  return sub_100037320(&qword_1000A18D8, (void (*)(uint64_t))type metadata accessor for ErrorResponse);
}

uint64_t sub_100036BF4()
{
  return sub_100037320((unint64_t *)&qword_1000A1838, (void (*)(uint64_t))type metadata accessor for ErrorResponse);
}

uint64_t sub_100036C3C()
{
  return sub_100037320(&qword_1000A18D0, (void (*)(uint64_t))type metadata accessor for ErrorResponse);
}

uint64_t sub_100036C84()
{
  return sub_100037320(&qword_1000A18E0, (void (*)(uint64_t))type metadata accessor for ErrorResponse);
}

uint64_t *initializeBufferWithCopyOfBuffer for ErrorResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    id v13 = (char *)a1 + v9;
    uint64_t v14 = (char *)a2 + v9;
    v13[4] = v14[4];
    *(_DWORD *)id v13 = *(_DWORD *)v14;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ErrorResponse(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ErrorResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ErrorResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (int *)(a2 + v10);
  int v13 = *v12;
  *(unsigned char *)(v11 + 4) = *((unsigned char *)v12 + 4);
  *(_DWORD *)uint64_t v11 = v13;
  return a1;
}

uint64_t initializeWithTake for ErrorResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  return a1;
}

uint64_t assignWithTake for ErrorResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  *(unsigned char *)(v13 + 4) = *(unsigned char *)(v14 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ErrorResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000370DC);
}

uint64_t sub_1000370DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ErrorResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000371C0);
}

uint64_t sub_1000371C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t sub_100037280()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100037320(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MessageType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MessageType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000374C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageType()
{
  return &type metadata for MessageType;
}

Swift::Int sub_1000374FC()
{
  __int16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 100);
  return Hasher._finalize()();
}

void sub_100037544()
{
  Hasher._combine(_:)(*v0 + 100);
}

Swift::Int sub_100037574()
{
  __int16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 100);
  return Hasher._finalize()();
}

uint64_t sub_1000375B8@<X0>(__int16 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10003764C(*a1);
  *a2 = result;
  return result;
}

void sub_1000375E4(_WORD *a1@<X8>)
{
  *a1 = *v1 + 100;
}

unint64_t sub_1000375F8()
{
  unint64_t result = qword_1000A19A0;
  if (!qword_1000A19A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A19A0);
  }
  return result;
}

uint64_t sub_10003764C(__int16 a1)
{
  if ((unsigned __int16)(a1 - 100) >= 5u) {
    return 5;
  }
  else {
    return (unsigned __int16)(a1 - 100);
  }
}

uint64_t destroy for AssetResourceResponseMessage()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AssetResourceResponseMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AssetResourceResponseMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for AssetResourceResponseMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

ValueMetadata *type metadata accessor for AssetResourceResponseMessage()
{
  return &type metadata for AssetResourceResponseMessage;
}

uint64_t sub_1000378C0@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t sub_1000378CC(uint64_t a1)
{
  return sub_100037910(a1, qword_1000A4F30);
}

uint64_t sub_1000378F8(uint64_t a1)
{
  return sub_100037910(a1, qword_1000A4F48);
}

uint64_t sub_100037910(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_100006DC0(v3, a2);
  sub_100006D88(v3, (uint64_t)a2);
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t SyncSignal.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100037F80(type metadata accessor for SyncSignal, a1);
}

uint64_t type metadata accessor for SyncSignal(uint64_t a1)
{
  return sub_100037C94(a1, qword_1000A1C98);
}

uint64_t SyncLibraryInfoResponse.syncHash.getter()
{
  __int16 v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SyncLibraryInfoResponse(0) + 28));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for SyncLibraryInfoResponse(uint64_t a1)
{
  return sub_100037C94(a1, (uint64_t *)&unk_1000A1B58);
}

uint64_t SyncSignal.syncHash.setter(uint64_t a1, uint64_t a2)
{
  return sub_100037E64(a1, a2, type metadata accessor for SyncSignal);
}

uint64_t SyncSignal.syncHash.getter()
{
  return sub_100037A8C(type metadata accessor for SyncSignal);
}

uint64_t SyncLibraryInfoRequest.syncHash.getter()
{
  return sub_100037A8C(type metadata accessor for SyncLibraryInfoRequest);
}

uint64_t sub_100037A8C(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 20));
  if (v2[1]) {
    uint64_t v3 = *v2;
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t type metadata accessor for SyncLibraryInfoRequest(uint64_t a1)
{
  return sub_100037C94(a1, qword_1000A1AC8);
}

uint64_t SyncLibraryInfoResponse.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for SyncLibraryInfoResponse(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for SyncLibrary(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + v2[6];
  uint64_t v6 = type metadata accessor for SyncCollectionTargetList(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  int v8 = (void *)(a1 + v2[7]);
  *int v8 = 0;
  v8[1] = 0;
  return result;
}

uint64_t SyncLibraryInfoResponse.syncHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SyncLibraryInfoResponse(0) + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t SyncAssetResourceRequest.uuidData.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SyncAssetResourceRequest(0) + 20));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  sub_10001FF48(*v1, v2);
  return v3;
}

uint64_t type metadata accessor for SyncAssetResourceRequest(uint64_t a1)
{
  return sub_100037C94(a1, qword_1000A1C00);
}

uint64_t sub_100037C94(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SyncAssetResourceRequest.isUserInitiated.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for SyncAssetResourceRequest(0) + 24)) & 1;
}

uint64_t SyncLibraryInfoResponse.library.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SyncLibraryInfoResponse(0) + 20);
  sub_10000BD30(v3, &qword_1000A1310);
  sub_100022DA0(a1, v3, type metadata accessor for SyncLibrary);
  uint64_t v4 = type metadata accessor for SyncLibrary(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

uint64_t SyncLibraryInfoResponse.collectionTargetList.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SyncLibraryInfoResponse(0) + 24);
  sub_10000BD30(v3, &qword_1000A1318);
  sub_100022DA0(a1, v3, type metadata accessor for SyncCollectionTargetList);
  uint64_t v4 = type metadata accessor for SyncCollectionTargetList(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

uint64_t SyncLibraryInfoRequest.syncHash.setter(uint64_t a1, uint64_t a2)
{
  return sub_100037E64(a1, a2, type metadata accessor for SyncLibraryInfoRequest);
}

uint64_t sub_100037E64(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3(0) + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*SyncLibraryInfoRequest.syncHash.modify(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncLibraryInfoRequest(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_100037F2C;
}

BOOL SyncLibraryInfoRequest.hasSyncHash.getter()
{
  return sub_100038E78(type metadata accessor for SyncLibraryInfoRequest);
}

Swift::Void __swiftcall SyncLibraryInfoRequest.clearSyncHash()()
{
}

uint64_t SyncLibraryInfoRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100037F80(type metadata accessor for SyncLibraryInfoRequest, a1);
}

uint64_t sub_100037F80@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = a1(0);
  unint64_t v5 = (void *)(a2 + *(int *)(result + 20));
  *unint64_t v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t SyncLibraryInfoResponse.library.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100006290(&qword_1000A1310);
  __chkstk_darwin(v3 - 8);
  unint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SyncLibraryInfoResponse(0);
  sub_1000352C0(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_1000A1310);
  uint64_t v7 = type metadata accessor for SyncLibrary(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_100022DA0((uint64_t)v5, (uint64_t)a1, type metadata accessor for SyncLibrary);
  }
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  return sub_10000BD30((uint64_t)v5, &qword_1000A1310);
}

void (*SyncLibraryInfoResponse.library.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100006290(&qword_1000A1310);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for SyncLibrary(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  unint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for SyncLibraryInfoResponse(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000352C0(v1 + v11, (uint64_t)v5, &qword_1000A1310);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = &_swiftEmptyArrayStorage;
    v10[1] = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    sub_10000BD30((uint64_t)v5, &qword_1000A1310);
  }
  else
  {
    sub_100022DA0((uint64_t)v5, (uint64_t)v10, type metadata accessor for SyncLibrary);
  }
  return sub_100038284;
}

void sub_100038284(uint64_t a1, char a2)
{
}

BOOL SyncLibraryInfoResponse.hasLibrary.getter()
{
  uint64_t v1 = sub_100006290(&qword_1000A1310);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SyncLibraryInfoResponse(0);
  sub_1000352C0(v0 + *(int *)(v4 + 20), (uint64_t)v3, &qword_1000A1310);
  uint64_t v5 = type metadata accessor for SyncLibrary(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_10000BD30((uint64_t)v3, &qword_1000A1310);
  return v6;
}

Swift::Void __swiftcall SyncLibraryInfoResponse.clearLibrary()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SyncLibraryInfoResponse(0) + 20);
  sub_10000BD30(v1, &qword_1000A1310);
  uint64_t v2 = type metadata accessor for SyncLibrary(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  v3(v1, 1, 1, v2);
}

uint64_t SyncLibraryInfoResponse.collectionTargetList.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100006290(&qword_1000A1318);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SyncLibraryInfoResponse(0);
  sub_1000352C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_1000A1318);
  uint64_t v7 = type metadata accessor for SyncCollectionTargetList(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_100022DA0((uint64_t)v5, (uint64_t)a1, type metadata accessor for SyncCollectionTargetList);
  }
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  return sub_10000BD30((uint64_t)v5, &qword_1000A1318);
}

void (*SyncLibraryInfoResponse.collectionTargetList.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100006290(&qword_1000A1318);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for SyncCollectionTargetList(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  unint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for SyncLibraryInfoResponse(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000352C0(v1 + v11, (uint64_t)v5, &qword_1000A1318);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    sub_10000BD30((uint64_t)v5, &qword_1000A1318);
  }
  else
  {
    sub_100022DA0((uint64_t)v5, (uint64_t)v10, type metadata accessor for SyncCollectionTargetList);
  }
  return sub_1000386D4;
}

void sub_1000386D4(uint64_t a1, char a2)
{
}

void sub_1000386F4(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(int *)(*(void *)a1 + 48);
  uint64_t v8 = *(void **)(*(void *)a1 + 32);
  size_t v9 = *(void **)(*(void *)a1 + 40);
  uint64_t v10 = *(void *)(*(void *)a1 + 16);
  uint64_t v11 = *(void *)(*(void *)a1 + 24);
  uint64_t v12 = *(void **)(*(void *)a1 + 8);
  uint64_t v13 = **(void **)a1 + v7;
  if (a2)
  {
    sub_100022D38(*(void *)(*(void *)a1 + 40), (uint64_t)v8, a4);
    sub_10000BD30(v13, a3);
    sub_100022DA0((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
    sub_100038818((uint64_t)v9, a4);
  }
  else
  {
    sub_10000BD30(**(void **)a1 + v7, a3);
    sub_100022DA0((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  free(v9);
  free(v8);
  free(v12);

  free(v6);
}

uint64_t sub_100038818(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL SyncLibraryInfoResponse.hasCollectionTargetList.getter()
{
  uint64_t v1 = sub_100006290(&qword_1000A1318);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SyncLibraryInfoResponse(0);
  sub_1000352C0(v0 + *(int *)(v4 + 24), (uint64_t)v3, &qword_1000A1318);
  uint64_t v5 = type metadata accessor for SyncCollectionTargetList(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_10000BD30((uint64_t)v3, &qword_1000A1318);
  return v6;
}

Swift::Void __swiftcall SyncLibraryInfoResponse.clearCollectionTargetList()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SyncLibraryInfoResponse(0) + 24);
  sub_10000BD30(v1, &qword_1000A1318);
  uint64_t v2 = type metadata accessor for SyncCollectionTargetList(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  v3(v1, 1, 1, v2);
}

uint64_t (*SyncLibraryInfoResponse.syncHash.modify(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncLibraryInfoResponse(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_100037F2C;
}

BOOL SyncLibraryInfoResponse.hasSyncHash.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for SyncLibraryInfoResponse(0) + 28) + 8) != 0;
}

Swift::Void __swiftcall SyncLibraryInfoResponse.clearSyncHash()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for SyncLibraryInfoResponse(0) + 28));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t SyncAssetResourceRequest.uuidData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for SyncAssetResourceRequest(0) + 20);
  uint64_t result = sub_100038B10(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t sub_100038B10(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10002001C(a1, a2);
  }
  return a1;
}

uint64_t (*SyncAssetResourceRequest.uuidData.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncAssetResourceRequest(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  sub_10001FF48(v5, v6);
  return sub_100038B98;
}

uint64_t sub_100038B98(uint64_t a1, char a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16) + *(int *)(a1 + 24);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)v3;
  unint64_t v6 = *(void *)(v3 + 8);
  if (a2)
  {
    sub_10001FF5C(*(void *)a1, v2);
    sub_100038B10(v5, v6);
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
    return sub_10002001C(v4, v2);
  }
  else
  {
    uint64_t result = sub_100038B10(*(void *)v3, *(void *)(v3 + 8));
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
  }
  return result;
}

BOOL SyncAssetResourceRequest.hasUuidData.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for SyncAssetResourceRequest(0) + 20) + 8) >> 60 != 15;
}

Swift::Void __swiftcall SyncAssetResourceRequest.clearUuidData()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SyncAssetResourceRequest(0) + 20);
  sub_100038B10(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_10007A540;
}

uint64_t SyncAssetResourceRequest.isUserInitiated.setter(char a1)
{
  uint64_t result = type metadata accessor for SyncAssetResourceRequest(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*SyncAssetResourceRequest.isUserInitiated.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncAssetResourceRequest(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100038D34;
}

uint64_t sub_100038D34(uint64_t result)
{
  *(unsigned char *)(*(void *)result + *(int *)(result + 8)) = *(unsigned char *)(result + 12);
  return result;
}

BOOL SyncAssetResourceRequest.hasIsUserInitiated.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for SyncAssetResourceRequest(0) + 24)) != 2;
}

Swift::Void __swiftcall SyncAssetResourceRequest.clearIsUserInitiated()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for SyncAssetResourceRequest(0) + 24)) = 2;
}

double SyncAssetResourceRequest.init()@<D0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for SyncAssetResourceRequest(0);
  double result = 0.0;
  *(_OWORD *)(a1 + *(int *)(v2 + 20)) = xmmword_10007A540;
  *(unsigned char *)(a1 + *(int *)(v2 + 24)) = 2;
  return result;
}

uint64_t (*SyncSignal.syncHash.modify(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncSignal(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_100037F2C;
}

BOOL SyncSignal.hasSyncHash.getter()
{
  return sub_100038E78(type metadata accessor for SyncSignal);
}

BOOL sub_100038E78(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 20) + 8) != 0;
}

Swift::Void __swiftcall SyncSignal.clearSyncHash()()
{
}

uint64_t sub_100038EC8(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)(v1 + *(int *)(a1(0) + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

void *SyncLibraryInfoRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static SyncLibraryInfoRequest.protoMessageName;
}

unint64_t static SyncLibraryInfoRequest.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t sub_100038F30(uint64_t a1)
{
  return sub_10003A468(a1, static SyncLibraryInfoRequest._protobuf_nameMap);
}

uint64_t SyncLibraryInfoRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10003A5E4(&qword_1000A0EB8, (uint64_t)static SyncLibraryInfoRequest._protobuf_nameMap);
}

uint64_t static SyncLibraryInfoRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003A65C(&qword_1000A0EB8, (uint64_t)static SyncLibraryInfoRequest._protobuf_nameMap, a1);
}

uint64_t SyncLibraryInfoRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A720(a1, a2, a3, (void (*)(void))type metadata accessor for SyncLibraryInfoRequest);
}

uint64_t SyncLibraryInfoRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A7EC(a1, a2, a3, type metadata accessor for SyncLibraryInfoRequest);
}

uint64_t static SyncLibraryInfoRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_10003B8B0(a1, a2, type metadata accessor for SyncLibraryInfoRequest) & 1;
}

Swift::Int SyncLibraryInfoRequest.hashValue.getter()
{
  return sub_10003A900((void (*)(void))type metadata accessor for SyncLibraryInfoRequest, &qword_1000A1A00, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoRequest);
}

uint64_t sub_100039054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  unint64_t v5 = (void *)(a2 + *(int *)(a1 + 20));
  *unint64_t v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t sub_100039088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SyncLibraryInfoRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000390A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SyncLibraryInfoRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000390B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10003BA9C(&qword_1000A1CE8, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoRequest);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100039134@<X0>(uint64_t a1@<X8>)
{
  return sub_10003AA58(&qword_1000A0EB8, (uint64_t)static SyncLibraryInfoRequest._protobuf_nameMap, a1);
}

uint64_t sub_100039158(uint64_t a1)
{
  uint64_t v2 = sub_10003BA9C(&qword_1000A1A28, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoRequest);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000391C8()
{
  sub_10003BA9C(&qword_1000A1A28, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoRequest);

  return Message.hash(into:)();
}

void *SyncLibraryInfoResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static SyncLibraryInfoResponse.protoMessageName;
}

unint64_t static SyncLibraryInfoResponse.protoMessageName.getter()
{
  return 0xD000000000000018;
}

uint64_t sub_100039270()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100006DC0(v0, static SyncLibraryInfoResponse._protobuf_nameMap);
  sub_100006D88(v0, (uint64_t)static SyncLibraryInfoResponse._protobuf_nameMap);
  sub_100006290(&qword_1000A1990);
  uint64_t v1 = (int *)(sub_100006290(&qword_1000A1998) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10007A550;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "library";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "collectionTargetList";
  *((void *)v10 + 1) = 20;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "syncHash";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t SyncLibraryInfoResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10003A5E4(&qword_1000A0EC0, (uint64_t)static SyncLibraryInfoResponse._protobuf_nameMap);
}

uint64_t static SyncLibraryInfoResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003A65C(&qword_1000A0EC0, (uint64_t)static SyncLibraryInfoResponse._protobuf_nameMap, a1);
}

uint64_t SyncLibraryInfoResponse.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v1 = v0;
    if (v0 || (v3 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 3:
        type metadata accessor for SyncLibraryInfoResponse(0);
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_3:
        uint64_t v1 = 0;
        break;
      case 2:
        sub_10003964C();
        goto LABEL_3;
      case 1:
        sub_10003959C();
        goto LABEL_3;
    }
    uint64_t v0 = v1;
  }
}

uint64_t sub_10003959C()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_10003964C()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t SyncLibraryInfoResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v29 = a3;
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v6 = sub_100006290(&qword_1000A1318);
  __chkstk_darwin(v6 - 8);
  uint64_t v25 = (uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for SyncCollectionTargetList(0);
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v23 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006290(&qword_1000A1310);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SyncLibrary(0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for SyncLibraryInfoResponse(0);
  sub_1000352C0(v5 + *(int *)(v16 + 20), (uint64_t)v11, &qword_1000A1310);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_10000BD30((uint64_t)v11, &qword_1000A1310);
    uint64_t v17 = v5;
    uint64_t v18 = v16;
  }
  else
  {
    sub_100022DA0((uint64_t)v11, (uint64_t)v15, type metadata accessor for SyncLibrary);
    sub_10003BA9C(&qword_1000A1300, (void (*)(uint64_t))type metadata accessor for SyncLibrary);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = sub_100038818((uint64_t)v15, type metadata accessor for SyncLibrary);
    uint64_t v17 = v5;
    uint64_t v18 = v16;
    if (v4) {
      return result;
    }
  }
  uint64_t v20 = v25;
  sub_1000352C0(v17 + *(int *)(v18 + 24), v25, &qword_1000A1318);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v20, 1, v26) == 1)
  {
    sub_10000BD30(v20, &qword_1000A1318);
  }
  else
  {
    uint64_t v21 = v20;
    uint64_t v22 = v23;
    sub_100022DA0(v21, v23, type metadata accessor for SyncCollectionTargetList);
    sub_10003BA9C(&qword_1000A1308, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetList);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = sub_100038818(v22, type metadata accessor for SyncCollectionTargetList);
    if (v4) {
      return result;
    }
  }
  if (!*(void *)(v17 + *(int *)(v18 + 28) + 8)) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  if (!v4) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int SyncLibraryInfoResponse.hashValue.getter()
{
  return sub_10003A900((void (*)(void))type metadata accessor for SyncLibraryInfoResponse, &qword_1000A1A08, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoResponse);
}

uint64_t sub_100039B74@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for SyncLibrary(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + a1[6];
  uint64_t v7 = type metadata accessor for SyncCollectionTargetList(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v9 = (void *)(a2 + a1[7]);
  *uint64_t v9 = 0;
  v9[1] = 0;
  return result;
}

uint64_t sub_100039C40()
{
  return SyncLibraryInfoResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_100039C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SyncLibraryInfoResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100039C70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10003BA9C(&qword_1000A1CE0, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoResponse);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100039CEC@<X0>(uint64_t a1@<X8>)
{
  return sub_10003AA58(&qword_1000A0EC0, (uint64_t)static SyncLibraryInfoResponse._protobuf_nameMap, a1);
}

uint64_t sub_100039D10(uint64_t a1)
{
  uint64_t v2 = sub_10003BA9C((unint64_t *)&qword_1000A1320, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoResponse);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100039D7C()
{
  sub_10003BA9C((unint64_t *)&qword_1000A1320, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoResponse);

  return Message.hash(into:)();
}

void *SyncAssetResourceRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static SyncAssetResourceRequest.protoMessageName;
}

unint64_t static SyncAssetResourceRequest.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t sub_100039E20()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100006DC0(v0, static SyncAssetResourceRequest._protobuf_nameMap);
  sub_100006D88(v0, (uint64_t)static SyncAssetResourceRequest._protobuf_nameMap);
  sub_100006290(&qword_1000A1990);
  uint64_t v1 = (int *)(sub_100006290(&qword_1000A1998) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10007A280;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "uuidData";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "isUserInitiated";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t SyncAssetResourceRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10003A5E4(&qword_1000A0EC8, (uint64_t)static SyncAssetResourceRequest._protobuf_nameMap);
}

uint64_t static SyncAssetResourceRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003A65C(&qword_1000A0EC8, (uint64_t)static SyncAssetResourceRequest._protobuf_nameMap, a1);
}

uint64_t SyncAssetResourceRequest.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      type metadata accessor for SyncAssetResourceRequest(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for SyncAssetResourceRequest(0);
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t SyncAssetResourceRequest.traverse<A>(visitor:)()
{
  uint64_t v2 = type metadata accessor for SyncAssetResourceRequest(0);
  uint64_t v3 = v0 + *(int *)(v2 + 20);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 == 15
    || (uint64_t v5 = *(void *)v3,
        sub_10001FF5C(*(void *)v3, *(void *)(v3 + 8)),
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(),
        uint64_t result = sub_100038B10(v5, v4),
        !v1))
  {
    if (*(unsigned char *)(v0 + *(int *)(v2 + 24)) == 2) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (!v1) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int SyncAssetResourceRequest.hashValue.getter()
{
  return sub_10003A900((void (*)(void))type metadata accessor for SyncAssetResourceRequest, &qword_1000A1A10, (void (*)(uint64_t))type metadata accessor for SyncAssetResourceRequest);
}

double sub_10003A238@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  double result = 0.0;
  uint64_t v5 = *(int *)(a1 + 24);
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_10007A540;
  *(unsigned char *)(a2 + v5) = 2;
  return result;
}

uint64_t sub_10003A278()
{
  return SyncAssetResourceRequest.decodeMessage<A>(decoder:)();
}

uint64_t sub_10003A290()
{
  return SyncAssetResourceRequest.traverse<A>(visitor:)();
}

uint64_t sub_10003A2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10003BA9C(&qword_1000A1CD8, (void (*)(uint64_t))type metadata accessor for SyncAssetResourceRequest);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003A324@<X0>(uint64_t a1@<X8>)
{
  return sub_10003AA58(&qword_1000A0EC8, (uint64_t)static SyncAssetResourceRequest._protobuf_nameMap, a1);
}

uint64_t sub_10003A348(uint64_t a1)
{
  uint64_t v2 = sub_10003BA9C(&qword_1000A1A50, (void (*)(uint64_t))type metadata accessor for SyncAssetResourceRequest);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003A3B4()
{
  sub_10003BA9C(&qword_1000A1A50, (void (*)(uint64_t))type metadata accessor for SyncAssetResourceRequest);

  return Message.hash(into:)();
}

const char *SyncSignal.protoMessageName.unsafeMutableAddressor()
{
  return "NPTO.Signal";
}

uint64_t static SyncSignal.protoMessageName.getter()
{
  return 0x6769532E4F54504ELL;
}

uint64_t sub_10003A45C(uint64_t a1)
{
  return sub_10003A468(a1, static SyncSignal._protobuf_nameMap);
}

uint64_t sub_10003A468(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap();
  sub_100006DC0(v3, a2);
  sub_100006D88(v3, (uint64_t)a2);
  sub_100006290(&qword_1000A1990);
  uint64_t v4 = (int *)(sub_100006290(&qword_1000A1998) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100079C30;
  unint64_t v7 = v6 + v5 + v4[14];
  *(void *)(v6 + v5) = 1;
  *(void *)unint64_t v7 = "syncHash";
  *(void *)(v7 + 8) = 8;
  *(unsigned char *)(v7 + 16) = 2;
  uint64_t v8 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v9 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v7, v8, v9);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t SyncSignal._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10003A5E4(&qword_1000A0ED0, (uint64_t)static SyncSignal._protobuf_nameMap);
}

uint64_t sub_10003A5E4(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for _NameMap();

  return sub_100006D88(v3, a2);
}

uint64_t static SyncSignal._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003A65C(&qword_1000A0ED0, (uint64_t)static SyncSignal._protobuf_nameMap, a1);
}

uint64_t sub_10003A65C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = sub_100006D88(v5, a2);
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t SyncSignal.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A720(a1, a2, a3, (void (*)(void))type metadata accessor for SyncSignal);
}

uint64_t sub_10003A720(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0) {
      break;
    }
    if (result == 1)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    uint64_t v4 = 0;
  }
  return result;
}

uint64_t SyncSignal.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A7EC(a1, a2, a3, type metadata accessor for SyncSignal);
}

uint64_t sub_10003A7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (!*(void *)(v4 + *(int *)(a4(0) + 20) + 8)) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  if (!v5) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static SyncSignal.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_10003B8B0(a1, a2, type metadata accessor for SyncSignal) & 1;
}

Swift::Int SyncSignal.hashValue.getter()
{
  return sub_10003A900((void (*)(void))type metadata accessor for SyncSignal, &qword_1000A1A18, (void (*)(uint64_t))type metadata accessor for SyncSignal);
}

Swift::Int sub_10003A900(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_10003A988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SyncSignal.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10003A9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SyncSignal.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10003A9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10003BA9C(&qword_1000A1CD0, (void (*)(uint64_t))type metadata accessor for SyncSignal);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003AA34@<X0>(uint64_t a1@<X8>)
{
  return sub_10003AA58(&qword_1000A0ED0, (uint64_t)static SyncSignal._protobuf_nameMap, a1);
}

uint64_t sub_10003AA58@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = sub_100006D88(v5, a2);
  char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t sub_10003AAF4(uint64_t a1)
{
  uint64_t v2 = sub_10003BA9C((unint64_t *)&qword_1000A1880, (void (*)(uint64_t))type metadata accessor for SyncSignal);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003AB60()
{
  sub_10003BA9C((unint64_t *)&qword_1000A1880, (void (*)(uint64_t))type metadata accessor for SyncSignal);

  return Message.hash(into:)();
}

uint64_t _s14NanoPhotosSync0C20AssetResourceRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  char v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  uint64_t v9 = &v25[-v8];
  uint64_t v10 = type metadata accessor for SyncAssetResourceRequest(0);
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  uint64_t v14 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  if (v13 >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      sub_10001FF48(v12, v13);
      sub_10001FF48(v15, v16);
      int v26 = sub_100043D5C(v12, v13, v15, v16);
      sub_100038B10(v15, v16);
      sub_100038B10(v12, v13);
      if ((v26 & 1) == 0) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
LABEL_5:
    sub_10001FF48(v12, v13);
    sub_10001FF48(v15, v16);
    sub_100038B10(v12, v13);
    sub_100038B10(v15, v16);
    goto LABEL_6;
  }
  if (v16 >> 60 != 15) {
    goto LABEL_5;
  }
LABEL_9:
  uint64_t v19 = *(int *)(v10 + 24);
  int v20 = *(unsigned __int8 *)(a1 + v19);
  int v21 = *(unsigned __int8 *)(a2 + v19);
  if (v20 == 2)
  {
    if (v21 == 2)
    {
LABEL_14:
      uint64_t v22 = v27;
      uint64_t v23 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v27 + 16);
      v23(v9, a1, v4);
      v23(v7, a2, v4);
      sub_10003BA9C(&qword_1000A1988, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v24 = *(void (**)(unsigned char *, uint64_t))(v22 + 8);
      v24(v7, v4);
      v24(v9, v4);
      return v17 & 1;
    }
  }
  else if (v21 != 2 && ((((v21 & 1) == 0) ^ v20) & 1) != 0)
  {
    goto LABEL_14;
  }
LABEL_6:
  char v17 = 0;
  return v17 & 1;
}

uint64_t _s14NanoPhotosSync0C19LibraryInfoResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v79 = a2;
  uint64_t v69 = type metadata accessor for UnknownStorage();
  uint64_t v67 = *(void *)(v69 - 8);
  uint64_t v3 = __chkstk_darwin(v69);
  uint64_t v66 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  id v65 = (char *)&v64 - v5;
  uint64_t v76 = type metadata accessor for SyncCollectionTargetList(0);
  uint64_t v73 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  id v68 = (uint64_t *)((char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v72 = sub_100006290(&qword_1000A1CF0);
  __chkstk_darwin(v72);
  uint64_t v77 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006290(&qword_1000A1318);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v70 = (uint64_t *)((char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v74 = (uint64_t)&v64 - v12;
  __chkstk_darwin(v11);
  uint64_t v75 = (uint64_t)&v64 - v13;
  uint64_t v14 = type metadata accessor for SyncLibrary(0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v71 = (uint64_t *)((char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = sub_100006290(&qword_1000A1CF8);
  uint64_t v18 = v17 - 8;
  __chkstk_darwin(v17);
  int v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100006290(&qword_1000A1310);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v24 = (uint64_t *)((char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v64 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v64 - v28;
  uint64_t v30 = type metadata accessor for SyncLibraryInfoResponse(0);
  uint64_t v31 = *(int *)(v30 + 20);
  uint64_t v78 = a1;
  sub_1000352C0(a1 + v31, (uint64_t)v29, &qword_1000A1310);
  uint64_t v32 = v30;
  sub_1000352C0(v79 + *(int *)(v30 + 20), (uint64_t)v27, &qword_1000A1310);
  uint64_t v33 = (uint64_t)&v20[*(int *)(v18 + 56)];
  sub_1000352C0((uint64_t)v29, (uint64_t)v20, &qword_1000A1310);
  sub_1000352C0((uint64_t)v27, v33, &qword_1000A1310);
  unint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v34((uint64_t)v20, 1, v14) == 1)
  {
    sub_10000BD30((uint64_t)v27, &qword_1000A1310);
    sub_10000BD30((uint64_t)v29, &qword_1000A1310);
    if (v34(v33, 1, v14) == 1)
    {
      sub_10000BD30((uint64_t)v20, &qword_1000A1310);
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  sub_1000352C0((uint64_t)v20, (uint64_t)v24, &qword_1000A1310);
  if (v34(v33, 1, v14) == 1)
  {
    sub_10000BD30((uint64_t)v27, &qword_1000A1310);
    sub_10000BD30((uint64_t)v29, &qword_1000A1310);
    sub_100038818((uint64_t)v24, type metadata accessor for SyncLibrary);
LABEL_9:
    uint64_t v42 = &qword_1000A1CF8;
    uint64_t v43 = (uint64_t)v20;
LABEL_18:
    sub_10000BD30(v43, v42);
    goto LABEL_19;
  }
  id v44 = v71;
  sub_100022DA0(v33, (uint64_t)v71, type metadata accessor for SyncLibrary);
  if ((sub_100043354(*v24, *v44) & 1) == 0 || (sub_100043A04(v24[1], v44[1]) & 1) == 0)
  {
    sub_100038818((uint64_t)v44, type metadata accessor for SyncLibrary);
    sub_10000BD30((uint64_t)v27, &qword_1000A1310);
    sub_10000BD30((uint64_t)v29, &qword_1000A1310);
    sub_100038818((uint64_t)v24, type metadata accessor for SyncLibrary);
    uint64_t v43 = (uint64_t)v20;
    uint64_t v42 = &qword_1000A1310;
    goto LABEL_18;
  }
  sub_10003BA9C(&qword_1000A1988, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  sub_100038818((uint64_t)v44, type metadata accessor for SyncLibrary);
  sub_10000BD30((uint64_t)v27, &qword_1000A1310);
  sub_10000BD30((uint64_t)v29, &qword_1000A1310);
  sub_100038818((uint64_t)v24, type metadata accessor for SyncLibrary);
  sub_10000BD30((uint64_t)v20, &qword_1000A1310);
  if ((v45 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_4:
  uint64_t v35 = v78;
  uint64_t v36 = v75;
  sub_1000352C0(v78 + *(int *)(v32 + 24), v75, &qword_1000A1318);
  uint64_t v37 = v74;
  sub_1000352C0(v79 + *(int *)(v32 + 24), v74, &qword_1000A1318);
  uint64_t v38 = v77;
  uint64_t v39 = v77 + *(int *)(v72 + 48);
  sub_1000352C0(v36, v77, &qword_1000A1318);
  sub_1000352C0(v37, v39, &qword_1000A1318);
  NSString v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  uint64_t v41 = v76;
  if (v40(v38, 1, v76) == 1)
  {
    sub_10000BD30(v37, &qword_1000A1318);
    sub_10000BD30(v36, &qword_1000A1318);
    if (v40(v39, 1, v41) == 1)
    {
      sub_10000BD30(v38, &qword_1000A1318);
      goto LABEL_23;
    }
    goto LABEL_17;
  }
  uint64_t v46 = v70;
  sub_1000352C0(v38, (uint64_t)v70, &qword_1000A1318);
  if (v40(v39, 1, v41) == 1)
  {
    sub_10000BD30(v37, &qword_1000A1318);
    sub_10000BD30(v36, &qword_1000A1318);
    sub_100038818((uint64_t)v46, type metadata accessor for SyncCollectionTargetList);
LABEL_17:
    uint64_t v42 = &qword_1000A1CF0;
    uint64_t v43 = v38;
    goto LABEL_18;
  }
  id v49 = v68;
  sub_100022DA0(v39, (uint64_t)v68, type metadata accessor for SyncCollectionTargetList);
  if ((sub_1000432A8(*v46, *v49) & 1) == 0)
  {
    sub_100038818((uint64_t)v49, type metadata accessor for SyncCollectionTargetList);
    sub_10000BD30(v37, &qword_1000A1318);
    sub_10000BD30(v36, &qword_1000A1318);
    sub_100038818((uint64_t)v46, type metadata accessor for SyncCollectionTargetList);
    uint64_t v43 = v38;
    uint64_t v42 = &qword_1000A1318;
    goto LABEL_18;
  }
  sub_10003BA9C(&qword_1000A1988, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  sub_100038818((uint64_t)v49, type metadata accessor for SyncCollectionTargetList);
  sub_10000BD30(v37, &qword_1000A1318);
  sub_10000BD30(v36, &qword_1000A1318);
  sub_100038818((uint64_t)v46, type metadata accessor for SyncCollectionTargetList);
  sub_10000BD30(v38, &qword_1000A1318);
  if ((v50 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_23:
  uint64_t v51 = *(int *)(v32 + 28);
  uint64_t v52 = (void *)(v35 + v51);
  uint64_t v53 = *(void *)(v35 + v51 + 8);
  uint64_t v54 = v79;
  uint64_t v55 = (void *)(v79 + v51);
  uint64_t v56 = v55[1];
  if (!v53)
  {
    if (!v56)
    {
LABEL_31:
      uint64_t v57 = v67;
      long long v58 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
      long long v59 = v65;
      uint64_t v60 = v35;
      uint64_t v61 = v69;
      v58(v65, v60, v69);
      uint64_t v62 = v66;
      v58(v66, v54, v61);
      sub_10003BA9C(&qword_1000A1988, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v63 = *(void (**)(char *, uint64_t))(v57 + 8);
      v63(v62, v61);
      v63(v59, v61);
      return v47 & 1;
    }
    goto LABEL_19;
  }
  if (!v56)
  {
LABEL_19:
    char v47 = 0;
    return v47 & 1;
  }
  if (*v52 == *v55 && v53 == v56) {
    goto LABEL_31;
  }
  char v47 = 0;
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_31;
  }
  return v47 & 1;
}

uint64_t sub_10003B8B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = *(int *)(a3(0) + 20);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = *(void *)(a1 + v13 + 8);
  uint64_t v16 = (void *)(a2 + v13);
  uint64_t v17 = v16[1];
  if (!v15)
  {
    if (!v17)
    {
LABEL_11:
      int v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v20(v12, a1, v6);
      v20(v10, a2, v6);
      sub_10003BA9C(&qword_1000A1988, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v21 = *(void (**)(char *, uint64_t))(v7 + 8);
      v21(v10, v6);
      v21(v12, v6);
      return v19 & 1;
    }
LABEL_10:
    char v19 = 0;
    return v19 & 1;
  }
  if (!v17) {
    goto LABEL_10;
  }
  if (*v14 == *v16 && v15 == v17) {
    goto LABEL_11;
  }
  char v19 = 0;
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_11;
  }
  return v19 & 1;
}

uint64_t sub_10003BA9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003BAE4()
{
  return sub_10003BA9C(&qword_1000A1A20, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoRequest);
}

uint64_t sub_10003BB2C()
{
  return sub_10003BA9C(&qword_1000A1A28, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoRequest);
}

uint64_t sub_10003BB74()
{
  return sub_10003BA9C(&qword_1000A1A00, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoRequest);
}

uint64_t sub_10003BBBC()
{
  return sub_10003BA9C(&qword_1000A1A30, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoRequest);
}

uint64_t sub_10003BC04()
{
  return sub_10003BA9C(&qword_1000A1A38, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoResponse);
}

uint64_t sub_10003BC4C()
{
  return sub_10003BA9C((unint64_t *)&qword_1000A1320, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoResponse);
}

uint64_t sub_10003BC94()
{
  return sub_10003BA9C(&qword_1000A1A08, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoResponse);
}

uint64_t sub_10003BCDC()
{
  return sub_10003BA9C(&qword_1000A1A40, (void (*)(uint64_t))type metadata accessor for SyncLibraryInfoResponse);
}

uint64_t sub_10003BD24()
{
  return sub_10003BA9C(&qword_1000A1A48, (void (*)(uint64_t))type metadata accessor for SyncAssetResourceRequest);
}

uint64_t sub_10003BD6C()
{
  return sub_10003BA9C(&qword_1000A1A50, (void (*)(uint64_t))type metadata accessor for SyncAssetResourceRequest);
}

uint64_t sub_10003BDB4()
{
  return sub_10003BA9C(&qword_1000A1A10, (void (*)(uint64_t))type metadata accessor for SyncAssetResourceRequest);
}

uint64_t sub_10003BDFC()
{
  return sub_10003BA9C(&qword_1000A1A58, (void (*)(uint64_t))type metadata accessor for SyncAssetResourceRequest);
}

uint64_t sub_10003BE44()
{
  return sub_10003BA9C(&qword_1000A1A60, (void (*)(uint64_t))type metadata accessor for SyncSignal);
}

uint64_t sub_10003BE8C()
{
  return sub_10003BA9C((unint64_t *)&qword_1000A1880, (void (*)(uint64_t))type metadata accessor for SyncSignal);
}

uint64_t sub_10003BED4()
{
  return sub_10003BA9C(&qword_1000A1A18, (void (*)(uint64_t))type metadata accessor for SyncSignal);
}

uint64_t sub_10003BF1C()
{
  return sub_10003BA9C(&qword_1000A1A68, (void (*)(uint64_t))type metadata accessor for SyncSignal);
}

uint64_t getEnumTagSinglePayload for SyncLibraryInfoRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003BF90);
}

uint64_t storeEnumTagSinglePayload for SyncLibraryInfoRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003BFA8);
}

uint64_t *initializeBufferWithCopyOfBuffer for SyncLibraryInfoResponse(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = type metadata accessor for SyncLibrary(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_100006290(&qword_1000A1310);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v35 = v8;
      uint64_t v16 = v11[1];
      void *v10 = *v11;
      v10[1] = v16;
      uint64_t v17 = *(int *)(v12 + 24);
      unint64_t v34 = (char *)v10 + v17;
      uint64_t v18 = (char *)v11 + v17;
      swift_bridgeObjectRetain();
      uint64_t v8 = v35;
      swift_bridgeObjectRetain();
      v35((uint64_t *)v34, (uint64_t *)v18, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v19 = a3[6];
    int v20 = (uint64_t *)((char *)a1 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = type metadata accessor for SyncCollectionTargetList(0);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = sub_100006290(&qword_1000A1318);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      void *v20 = *v21;
      uint64_t v25 = *(int *)(v22 + 20);
      uint64_t v26 = (void (*)(char *, char *, uint64_t))v8;
      uint64_t v27 = (char *)v20 + v25;
      uint64_t v28 = (char *)v21 + v25;
      swift_bridgeObjectRetain();
      v26(v27, v28, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    uint64_t v29 = a3[7];
    uint64_t v30 = (uint64_t *)((char *)a1 + v29);
    uint64_t v31 = (uint64_t *)((char *)a2 + v29);
    uint64_t v32 = v31[1];
    void *v30 = *v31;
    v30[1] = v32;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SyncLibraryInfoResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = type metadata accessor for SyncLibrary(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5(v6 + *(int *)(v7 + 24), v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  uint64_t v9 = type metadata accessor for SyncCollectionTargetList(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    swift_bridgeObjectRelease();
    v5(v8 + *(int *)(v9 + 20), v4);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SyncLibraryInfoResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for SyncLibrary(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100006290(&qword_1000A1310);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v35 = a3;
    uint64_t v14 = v7;
    uint64_t v15 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v15;
    uint64_t v16 = *(int *)(v11 + 24);
    unint64_t v34 = (char *)v9 + v16;
    uint64_t v17 = (char *)v10 + v16;
    swift_bridgeObjectRetain();
    uint64_t v7 = v14;
    a3 = v35;
    swift_bridgeObjectRetain();
    v7((uint64_t)v34, (uint64_t)v17, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v18 = a3[6];
  uint64_t v19 = (void *)(a1 + v18);
  int v20 = (void *)(a2 + v18);
  uint64_t v21 = type metadata accessor for SyncCollectionTargetList(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = sub_100006290(&qword_1000A1318);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    *uint64_t v19 = *v20;
    uint64_t v24 = *(int *)(v21 + 20);
    uint64_t v25 = a3;
    uint64_t v26 = (void (*)(char *, char *, uint64_t))v7;
    uint64_t v27 = (char *)v19 + v24;
    uint64_t v28 = (char *)v20 + v24;
    swift_bridgeObjectRetain();
    v26(v27, v28, v6);
    a3 = v25;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v29 = a3[7];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  uint64_t v32 = v31[1];
  void *v30 = *v31;
  v30[1] = v32;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SyncLibraryInfoResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 24);
  v37(a1, a2, v6);
  uint64_t v39 = a3;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for SyncLibrary(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      *uint64_t v8 = *v9;
      v8[1] = v9[1];
      uint64_t v15 = *(int *)(v10 + 24);
      uint64_t v16 = (char *)v8 + v15;
      uint64_t v17 = (char *)v9 + v15;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v16, v17, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100038818((uint64_t)v8, type metadata accessor for SyncLibrary);
LABEL_6:
    uint64_t v18 = sub_100006290(&qword_1000A1310);
    memcpy(v8, v9, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *uint64_t v8 = *v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37((uint64_t)v8 + *(int *)(v10 + 24), (uint64_t)v9 + *(int *)(v10 + 24), v6);
LABEL_7:
  uint64_t v19 = *(int *)(v39 + 24);
  int v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  uint64_t v22 = type metadata accessor for SyncCollectionTargetList(0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      void *v20 = *v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v37((uint64_t)v20 + *(int *)(v22 + 20), (uint64_t)v21 + *(int *)(v22 + 20), v6);
      goto LABEL_13;
    }
    sub_100038818((uint64_t)v20, type metadata accessor for SyncCollectionTargetList);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    uint64_t v31 = sub_100006290(&qword_1000A1318);
    memcpy(v20, v21, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  void *v20 = *v21;
  uint64_t v27 = *(int *)(v22 + 20);
  uint64_t v28 = (char *)v20 + v27;
  uint64_t v29 = (char *)v21 + v27;
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  swift_bridgeObjectRetain();
  v30(v28, v29, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_13:
  uint64_t v32 = *(int *)(v39 + 28);
  uint64_t v33 = (void *)(a1 + v32);
  unint64_t v34 = (void *)(a2 + v32);
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for SyncLibraryInfoResponse(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for SyncLibrary(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100006290(&qword_1000A1310);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    v7(&v9[*(int *)(v11 + 24)], &v10[*(int *)(v11 + 24)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = type metadata accessor for SyncCollectionTargetList(0);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = sub_100006290(&qword_1000A1318);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v15 = *(void *)v16;
    v7(&v15[*(int *)(v17 + 20)], &v16[*(int *)(v17 + 20)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

uint64_t assignWithTake for SyncLibraryInfoResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 40);
  v31(a1, a2, v6);
  uint64_t v33 = a3;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for SyncLibrary(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v8[*(int *)(v10 + 24)], &v9[*(int *)(v10 + 24)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100038818((uint64_t)v8, type metadata accessor for SyncLibrary);
LABEL_6:
    uint64_t v15 = sub_100006290(&qword_1000A1310);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v8 = *(void *)v9;
  swift_bridgeObjectRelease();
  *((void *)v8 + 1) = *((void *)v9 + 1);
  swift_bridgeObjectRelease();
  v31((uint64_t)&v8[*(int *)(v10 + 24)], (uint64_t)&v9[*(int *)(v10 + 24)], v6);
LABEL_7:
  uint64_t v16 = *(int *)(v33 + 24);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for SyncCollectionTargetList(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      *uint64_t v17 = *v18;
      swift_bridgeObjectRelease();
      v31((uint64_t)v17 + *(int *)(v19 + 20), (uint64_t)v18 + *(int *)(v19 + 20), v6);
      goto LABEL_13;
    }
    sub_100038818((uint64_t)v17, type metadata accessor for SyncCollectionTargetList);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v24 = sub_100006290(&qword_1000A1318);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  *uint64_t v17 = *v18;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))((char *)v17 + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_13:
  uint64_t v25 = *(int *)(v33 + 28);
  int v26 = (void *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  void *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncLibraryInfoResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003D134);
}

uint64_t sub_10003D134(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100006290(&qword_1000A1310);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = sub_100006290(&qword_1000A1318);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[7] + 8);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  int v17 = v16 - 1;
  if (v17 < 0) {
    int v17 = -1;
  }
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for SyncLibraryInfoResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003D2C0);
}

uint64_t sub_10003D2C0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = sub_100006290(&qword_1000A1310);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t result = sub_100006290(&qword_1000A1318);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[7] + 8) = a2;
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[6];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10003D428()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10003D56C(319, &qword_1000A1B68, (void (*)(uint64_t))type metadata accessor for SyncLibrary);
    if (v1 <= 0x3F)
    {
      sub_10003D56C(319, (unint64_t *)&unk_1000A1B70, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetList);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_10003D56C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *initializeBufferWithCopyOfBuffer for SyncAssetResourceRequest(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      sub_10001FF5C(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
    *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t destroy for SyncAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15)
  {
    uint64_t v8 = *v6;
    return sub_10002001C(v8, v7);
  }
  return result;
}

uint64_t initializeWithCopy for SyncAssetResourceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_10001FF5C(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithCopy for SyncAssetResourceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      sub_10001FF5C(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      *uint64_t v8 = v12;
      v8[1] = v10;
      sub_10002001C(v13, v14);
      goto LABEL_8;
    }
    sub_10003D928((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v11 = *v9;
  sub_10001FF5C(v11, v10);
  *uint64_t v8 = v11;
  v8[1] = v10;
LABEL_8:
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10003D928(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for SyncAssetResourceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for SyncAssetResourceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      *uint64_t v8 = *v9;
      v8[1] = v11;
      sub_10002001C(v12, v10);
      goto LABEL_6;
    }
    sub_10003D928((uint64_t)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
LABEL_6:
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncAssetResourceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003DAE8);
}

uint64_t sub_10003DAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SyncAssetResourceRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003DBD8);
}

uint64_t sub_10003DBD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 2;
  }
  return result;
}

uint64_t sub_10003DC94()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *_s14NanoPhotosSync22SyncLibraryInfoRequestVwCP_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    unsigned int v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t _s14NanoPhotosSync22SyncLibraryInfoRequestVwcp_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s14NanoPhotosSync22SyncLibraryInfoRequestVwca_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s14NanoPhotosSync22SyncLibraryInfoRequestVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t _s14NanoPhotosSync22SyncLibraryInfoRequestVwta_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncSignal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003E04C);
}

uint64_t sub_10003E050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SyncSignal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003E134);
}

uint64_t sub_10003E138(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t sub_10003E1F8()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MessagingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_100034978(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for MessagingError(uint64_t a1)
{
  return sub_100034890(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for MessagingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_100034978(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_100034890(v5, v6);
  return a1;
}

uint64_t initializeWithTake for WatchAssetsImportController.FileType(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for MessagingError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_100034890(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10003E41C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_10003E434(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MessagingError()
{
  return &type metadata for MessagingError;
}

uint64_t SyncLibrary.init()@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  type metadata accessor for SyncLibrary(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for SyncLibrary(uint64_t a1)
{
  return sub_100037C94(a1, qword_1000A1F80);
}

uint64_t SyncCollectionTargetList.init()@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  type metadata accessor for SyncCollectionTargetList(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for SyncCollectionTargetList(uint64_t a1)
{
  return sub_100037C94(a1, qword_1000A20C8);
}

uint64_t SyncAsset.uuidData.getter()
{
  unint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SyncAsset(0) + 20));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  sub_10001FF48(*v1, v2);
  return v3;
}

uint64_t type metadata accessor for SyncAsset(uint64_t a1)
{
  return sub_100037C94(a1, qword_1000A1E48);
}

uint64_t SyncAsset.uuidData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for SyncAsset(0) + 20);
  uint64_t result = sub_100038B10(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*SyncAsset.uuidData.modify(uint64_t a1))(uint64_t, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncAsset(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  sub_10001FF48(v5, v6);
  return sub_10003E64C;
}

BOOL SyncAsset.hasUuidData.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for SyncAsset(0) + 20) + 8) >> 60 != 15;
}

Swift::Void __swiftcall SyncAsset.clearUuidData()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SyncAsset(0) + 20);
  sub_100038B10(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_10007A540;
}

uint64_t SyncAsset.date.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for SyncAsset(0) + 24));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t SyncAsset.date.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for SyncAsset(0);
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*SyncAsset.date.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncAsset(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10003E798;
}

uint64_t sub_10003E798(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8) + *(int *)(result + 16);
  *(void *)uint64_t v1 = *(void *)result;
  *(unsigned char *)(v1 + 8) = 0;
  return result;
}

BOOL SyncAsset.hasDate.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for SyncAsset(0) + 24) + 8) & 1) == 0;
}

Swift::Void __swiftcall SyncAsset.clearDate()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SyncAsset(0) + 24);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

double SyncAsset.init()@<D0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for SyncAsset(0);
  double result = 0.0;
  *(_OWORD *)(a1 + *(int *)(v2 + 20)) = xmmword_10007A540;
  uint64_t v4 = a1 + *(int *)(v2 + 24);
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  return result;
}

uint64_t SyncAssetCollection.uuidData.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 24));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  sub_10001FF48(*v1, v2);
  return v3;
}

uint64_t type metadata accessor for SyncAssetCollection(uint64_t a1)
{
  return sub_100037C94(a1, qword_1000A1EE0);
}

uint64_t SyncAssetCollection.uuidData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 24);
  uint64_t result = sub_100038B10(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*SyncAssetCollection.uuidData.modify(uint64_t a1))(uint64_t, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncAssetCollection(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  sub_10001FF48(v5, v6);
  return sub_10003E64C;
}

BOOL SyncAssetCollection.hasUuidData.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 24) + 8) >> 60 != 15;
}

Swift::Void __swiftcall SyncAssetCollection.clearUuidData()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 24);
  sub_100038B10(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_10007A540;
}

uint64_t SyncAssetCollection.assetIndex.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SyncAssetCollection.assetIndex.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t SyncAssetCollection.title.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 28));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t SyncAssetCollection.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SyncAssetCollection.title.modify(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncAssetCollection(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_100037F2C;
}

BOOL SyncAssetCollection.hasTitle.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 28) + 8) != 0;
}

Swift::Void __swiftcall SyncAssetCollection.clearTitle()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 28));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t SyncAssetCollection.deprecatedSubtitle.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 32));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t SyncAssetCollection.deprecatedSubtitle.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SyncAssetCollection.deprecatedSubtitle.modify(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncAssetCollection(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_100037F2C;
}

BOOL SyncAssetCollection.hasDeprecatedSubtitle.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 32) + 8) != 0;
}

Swift::Void __swiftcall SyncAssetCollection.clearDeprecatedSubtitle()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 32));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t SyncAssetCollection.deprecatedKeyAssetUuiddata.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 36));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  sub_10001FF48(*v1, v2);
  return v3;
}

uint64_t SyncAssetCollection.deprecatedKeyAssetUuiddata.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 36);
  uint64_t result = sub_100038B10(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*SyncAssetCollection.deprecatedKeyAssetUuiddata.modify(uint64_t a1))(uint64_t, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncAssetCollection(0) + 36);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  sub_10001FF48(v5, v6);
  return sub_10003E64C;
}

BOOL SyncAssetCollection.hasDeprecatedKeyAssetUuiddata.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 36) + 8) >> 60 != 15;
}

Swift::Void __swiftcall SyncAssetCollection.clearDeprecatedKeyAssetUuiddata()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SyncAssetCollection(0) + 36);
  sub_100038B10(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_10007A540;
}

uint64_t SyncAssetCollection.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003FEC8(type metadata accessor for SyncAssetCollection, a1);
}

uint64_t SyncAssetCollection.unknownFields.setter(uint64_t a1)
{
  return sub_10003FF60(a1, type metadata accessor for SyncAssetCollection);
}

uint64_t (*SyncAssetCollection.unknownFields.modify())()
{
  return nullsub_1;
}

double SyncAssetCollection.init()@<D0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for SyncAssetCollection(0);
  UnknownStorage.init()();
  double result = 0.0;
  *(_OWORD *)((char *)a1 + v2[6]) = xmmword_10007A540;
  uint64_t v4 = (void *)((char *)a1 + v2[7]);
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v5 = (void *)((char *)a1 + v2[8]);
  *uint64_t v5 = 0;
  v5[1] = 0;
  *(_OWORD *)((char *)a1 + v2[9]) = xmmword_10007A540;
  return result;
}

uint64_t SyncLibrary.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003F9D8(type metadata accessor for SyncLibrary, a1);
}

uint64_t SyncLibrary.unknownFields.setter(uint64_t a1)
{
  return sub_10003FA70(a1, type metadata accessor for SyncLibrary);
}

uint64_t (*SyncLibrary.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t SyncCollectionTargetItem.uuidData.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 28));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  sub_10001FF48(*v1, v2);
  return v3;
}

uint64_t type metadata accessor for SyncCollectionTargetItem(uint64_t a1)
{
  return sub_100037C94(a1, qword_1000A2018);
}

uint64_t SyncCollectionTargetItem.uuidData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 28);
  uint64_t result = sub_100038B10(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*SyncCollectionTargetItem.uuidData.modify(uint64_t a1))(uint64_t, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  sub_10001FF48(v5, v6);
  return sub_10003E64C;
}

BOOL SyncCollectionTargetItem.hasUuidData.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 28) + 8) >> 60 != 15;
}

Swift::Void __swiftcall SyncCollectionTargetItem.clearUuidData()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 28);
  sub_100038B10(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_10007A540;
}

uint64_t SyncCollectionTargetItem.collectionTarget.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 32));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t SyncCollectionTargetItem.collectionTarget.setter(int a1)
{
  uint64_t result = type metadata accessor for SyncCollectionTargetItem(0);
  uint64_t v4 = v1 + *(int *)(result + 32);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*SyncCollectionTargetItem.collectionTarget.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_10003607C;
}

BOOL SyncCollectionTargetItem.hasCollectionTarget.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 32) + 4) & 1) == 0;
}

Swift::Void __swiftcall SyncCollectionTargetItem.clearCollectionTarget()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 32);
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 4) = 1;
}

uint64_t SyncCollectionTargetItem.keyAssetIndex.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SyncCollectionTargetItem.keyAssetIndex.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t SyncCollectionTargetItem.title.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 36));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t SyncCollectionTargetItem.title.setter(uint64_t a1, uint64_t a2)
{
  int v5 = (void *)(v2 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 36));
  uint64_t result = swift_bridgeObjectRelease();
  *int v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SyncCollectionTargetItem.title.modify(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 36);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_100037F2C;
}

BOOL SyncCollectionTargetItem.hasTitle.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 36) + 8) != 0;
}

Swift::Void __swiftcall SyncCollectionTargetItem.clearTitle()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 36));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t SyncCollectionTargetItem.subtitle.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 40));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t SyncCollectionTargetItem.subtitle.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 40));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SyncCollectionTargetItem.subtitle.modify(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 40);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_100037F2C;
}

BOOL SyncCollectionTargetItem.hasSubtitle.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 40) + 8) != 0;
}

Swift::Void __swiftcall SyncCollectionTargetItem.clearSubtitle()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 40));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t SyncCollectionTargetItem.collectionMetadata.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 44));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  sub_10001FF48(*v1, v2);
  return v3;
}

uint64_t SyncCollectionTargetItem.collectionMetadata.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 44);
  uint64_t result = sub_100038B10(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*SyncCollectionTargetItem.collectionMetadata.modify(uint64_t a1))(uint64_t, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 44);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  sub_10001FF48(v5, v6);
  return sub_10003E64C;
}

BOOL SyncCollectionTargetItem.hasCollectionMetadata.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 44) + 8) >> 60 != 15;
}

Swift::Void __swiftcall SyncCollectionTargetItem.clearCollectionMetadata()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 44);
  sub_100038B10(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_10007A540;
}

uint64_t SyncCollectionTargetItem.type.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 48));
  if (v1 == 4) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t SyncCollectionTargetItem.type.setter(char a1)
{
  uint64_t result = type metadata accessor for SyncCollectionTargetItem(0);
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*SyncCollectionTargetItem.type.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 48);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100038D34;
}

BOOL SyncCollectionTargetItem.hasType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 48)) != 4;
}

Swift::Void __swiftcall SyncCollectionTargetItem.clearType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 48)) = 4;
}

uint64_t SyncCollectionTargetItem.subtype.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 52));
  if (v1 == 5) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t SyncCollectionTargetItem.subtype.setter(char a1)
{
  uint64_t result = type metadata accessor for SyncCollectionTargetItem(0);
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*SyncCollectionTargetItem.subtype.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 52);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_10004811C;
}

BOOL SyncCollectionTargetItem.hasSubtype.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 52)) != 5;
}

Swift::Void __swiftcall SyncCollectionTargetItem.clearSubtype()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for SyncCollectionTargetItem(0) + 52)) = 5;
}

uint64_t SyncCollectionTargetItem.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003F9D8(type metadata accessor for SyncCollectionTargetItem, a1);
}

uint64_t sub_10003F9D8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t SyncCollectionTargetItem.unknownFields.setter(uint64_t a1)
{
  return sub_10003FA70(a1, type metadata accessor for SyncCollectionTargetItem);
}

uint64_t sub_10003FA70(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*SyncCollectionTargetItem.unknownFields.modify())()
{
  return nullsub_1;
}

NanoPhotosSync::SyncCollectionTargetItem::AssetCollectionSubtype __swiftcall SyncCollectionTargetItem.AssetCollectionSubtype.init()()
{
  return 0;
}

uint64_t SyncCollectionTargetItem.AssetCollectionType.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t sub_10003FB4C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100044F80();

  return Enum.hash(into:)(a1, a2, v4);
}

void sub_10003FB9C(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

unint64_t sub_10003FBA4@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s14NanoPhotosSync0C20CollectionTargetItemV05AssetD4TypeO8rawValueAESgSi_tcfC_0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003FBCC()
{
  return *v0;
}

unint64_t sub_10003FBD4@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s14NanoPhotosSync0C20CollectionTargetItemV05AssetD4TypeO8rawValueAESgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_10003FC00(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t SyncCollectionTargetItem.AssetCollectionSubtype.rawValue.getter(char a1)
{
  return qword_10007B780[a1];
}

BOOL sub_10003FC24(char *a1, char *a2)
{
  return qword_10007B780[*a1] == qword_10007B780[*a2];
}

Swift::Int sub_10003FC48()
{
  return Hasher._finalize()();
}

uint64_t sub_10003FCAC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100044F2C();

  return Enum.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10003FCF8()
{
  return Hasher._finalize()();
}

uint64_t sub_10003FD58@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s14NanoPhotosSync0C20CollectionTargetItemV05AssetD7SubtypeO8rawValueAESgSi_tcfC_0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003FD80()
{
  return qword_10007B780[*v0];
}

uint64_t sub_10003FD94@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s14NanoPhotosSync0C20CollectionTargetItemV05AssetD7SubtypeO8rawValueAESgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_10003FDC0(void *a1@<X8>)
{
  *a1 = qword_10007B780[*v1];
}

double SyncCollectionTargetItem.init()@<D0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for SyncCollectionTargetItem(0);
  UnknownStorage.init()();
  double result = 0.0;
  *(_OWORD *)((char *)a1 + v2[7]) = xmmword_10007A540;
  unint64_t v4 = (char *)a1 + v2[8];
  *(_DWORD *)unint64_t v4 = 0;
  v4[4] = 1;
  uint64_t v5 = (void *)((char *)a1 + v2[9]);
  *uint64_t v5 = 0;
  v5[1] = 0;
  unint64_t v6 = (void *)((char *)a1 + v2[10]);
  *unint64_t v6 = 0;
  v6[1] = 0;
  *(_OWORD *)((char *)a1 + v2[11]) = xmmword_10007A540;
  *((unsigned char *)a1 + v2[12]) = 4;
  *((unsigned char *)a1 + v2[13]) = 5;
  return result;
}

_UNKNOWN **static SyncCollectionTargetItem.AssetCollectionType.allCases.getter()
{
  return &off_100091FF8;
}

void sub_10003FE84(void *a1@<X8>)
{
  *a1 = &off_100092020;
}

_UNKNOWN **static SyncCollectionTargetItem.AssetCollectionSubtype.allCases.getter()
{
  return &off_100092048;
}

void sub_10003FEA0(void *a1@<X8>)
{
  *a1 = &off_100092070;
}

uint64_t SyncCollectionTargetList.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003FEC8(type metadata accessor for SyncCollectionTargetList, a1);
}

uint64_t sub_10003FEC8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t SyncCollectionTargetList.unknownFields.setter(uint64_t a1)
{
  return sub_10003FF60(a1, type metadata accessor for SyncCollectionTargetList);
}

uint64_t sub_10003FF60(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*SyncCollectionTargetList.unknownFields.modify())()
{
  return nullsub_1;
}

const char *SyncAsset.protoMessageName.unsafeMutableAddressor()
{
  return "NPTO.Asset";
}

uint64_t static SyncAsset.protoMessageName.getter()
{
  return 0x7373412E4F54504ELL;
}

uint64_t sub_10004004C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100006DC0(v0, static SyncAsset._protobuf_nameMap);
  sub_100006D88(v0, (uint64_t)static SyncAsset._protobuf_nameMap);
  sub_100006290(&qword_1000A1990);
  uint64_t v1 = (int *)(sub_100006290(&qword_1000A1998) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10007A280;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "uuidData";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "date";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t SyncAsset._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10003A5E4(&qword_1000A0ED8, (uint64_t)static SyncAsset._protobuf_nameMap);
}

uint64_t static SyncAsset._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003A65C(&qword_1000A0ED8, (uint64_t)static SyncAsset._protobuf_nameMap, a1);
}

uint64_t SyncAsset.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      type metadata accessor for SyncAsset(0);
      dispatch thunk of Decoder.decodeSingularSFixed64Field(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for SyncAsset(0);
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t SyncAsset.traverse<A>(visitor:)()
{
  uint64_t result = sub_10004038C(v0);
  if (!v1)
  {
    sub_10004042C(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10004038C(uint64_t a1)
{
  uint64_t result = type metadata accessor for SyncAsset(0);
  uint64_t v3 = a1 + *(int *)(result + 20);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    sub_10001FF5C(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return sub_100038B10(v5, v4);
  }
  return result;
}

uint64_t sub_10004042C(uint64_t a1)
{
  uint64_t result = type metadata accessor for SyncAsset(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 24) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularSFixed64Field(value:fieldNumber:)();
  }
  return result;
}

Swift::Int SyncAsset.hashValue.getter()
{
  return sub_100042CE8((void (*)(void))type metadata accessor for SyncAsset, &qword_1000A1D00, (void (*)(uint64_t))type metadata accessor for SyncAsset);
}

double sub_1000404F0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  double result = 0.0;
  uint64_t v5 = *(int *)(a1 + 24);
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_10007A540;
  uint64_t v6 = a2 + v5;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  return result;
}

uint64_t sub_100040538()
{
  return SyncAsset.decodeMessage<A>(decoder:)();
}

uint64_t sub_100040550()
{
  return SyncAsset.traverse<A>(visitor:)();
}

uint64_t sub_100040568(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044EE4((unint64_t *)&unk_1000A2120, (void (*)(uint64_t))type metadata accessor for SyncAsset);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000405E4@<X0>(uint64_t a1@<X8>)
{
  return sub_10003AA58(&qword_1000A0ED8, (uint64_t)static SyncAsset._protobuf_nameMap, a1);
}

uint64_t sub_100040608(uint64_t a1)
{
  uint64_t v2 = sub_100044EE4(&qword_1000A1D10, (void (*)(uint64_t))type metadata accessor for SyncAsset);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100040674()
{
  sub_100044EE4(&qword_1000A1D10, (void (*)(uint64_t))type metadata accessor for SyncAsset);

  return Message.hash(into:)();
}

void *SyncAssetCollection.protoMessageName.unsafeMutableAddressor()
{
  return &static SyncAssetCollection.protoMessageName;
}

unint64_t static SyncAssetCollection.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t sub_100040718()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100006DC0(v0, static SyncAssetCollection._protobuf_nameMap);
  sub_100006D88(v0, (uint64_t)static SyncAssetCollection._protobuf_nameMap);
  sub_100006290(&qword_1000A1990);
  uint64_t v1 = (int *)(sub_100006290(&qword_1000A1998) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10007AC30;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "uuidData";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "assetIndex";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  int v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "title";
  *((void *)v12 + 1) = 5;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  unint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)unint64_t v14 = "deprecated_subtitle";
  *((void *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "deprecated_keyAssetUUIDData";
  *(void *)(v15 + 8) = 27;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t SyncAssetCollection._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10003A5E4(&qword_1000A0EE0, (uint64_t)static SyncAssetCollection._protobuf_nameMap);
}

uint64_t static SyncAssetCollection._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003A65C(&qword_1000A0EE0, (uint64_t)static SyncAssetCollection._protobuf_nameMap, a1);
}

uint64_t SyncAssetCollection.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 5:
        type metadata accessor for SyncAssetCollection(0);
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        break;
      case 2:
        dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)();
        break;
      case 3:
      case 4:
        type metadata accessor for SyncAssetCollection(0);
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t SyncAssetCollection.traverse<A>(visitor:)()
{
  char v2 = (int *)type metadata accessor for SyncAssetCollection(0);
  uint64_t v3 = v0 + v2[6];
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 == 15
    || (uint64_t v5 = *(void *)v3,
        sub_10001FF5C(*(void *)v3, *(void *)(v3 + 8)),
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(),
        uint64_t result = sub_100038B10(v5, v4),
        !v1))
  {
    if (!*(void *)(*(void *)v0 + 16)
      || (uint64_t result = dispatch thunk of Visitor.visitRepeatedInt32Field(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0 + v2[7] + 8)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(v0 + v2[8] + 8)
          || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          uint64_t v7 = v0 + v2[9];
          unint64_t v8 = *(void *)(v7 + 8);
          if (v8 >> 60 == 15) {
            return UnknownStorage.traverse<A>(visitor:)();
          }
          uint64_t v9 = *(void *)v7;
          sub_10001FF5C(*(void *)v7, *(void *)(v7 + 8));
          dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
          uint64_t result = sub_100038B10(v9, v8);
          if (!v1) {
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

Swift::Int SyncAssetCollection.hashValue.getter()
{
  return sub_100042CE8((void (*)(void))type metadata accessor for SyncAssetCollection, &qword_1000A1D08, (void (*)(uint64_t))type metadata accessor for SyncAssetCollection);
}

double sub_100040D2C@<D0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  double result = 0.0;
  uint64_t v5 = a1[7];
  *(_OWORD *)((char *)a2 + a1[6]) = xmmword_10007A540;
  unint64_t v6 = (void *)((char *)a2 + v5);
  *unint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v7 = a1[9];
  unint64_t v8 = (void *)((char *)a2 + a1[8]);
  *unint64_t v8 = 0;
  v8[1] = 0;
  *(_OWORD *)((char *)a2 + v7) = xmmword_10007A540;
  return result;
}

uint64_t (*sub_100040D98())()
{
  return nullsub_1;
}

uint64_t sub_100040DBC()
{
  return SyncAssetCollection.decodeMessage<A>(decoder:)();
}

uint64_t sub_100040DD4()
{
  return SyncAssetCollection.traverse<A>(visitor:)();
}

uint64_t sub_100040DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044EE4(&qword_1000A2118, (void (*)(uint64_t))type metadata accessor for SyncAssetCollection);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100040E68@<X0>(uint64_t a1@<X8>)
{
  return sub_10003AA58(&qword_1000A0EE0, (uint64_t)static SyncAssetCollection._protobuf_nameMap, a1);
}

uint64_t sub_100040E8C(uint64_t a1)
{
  uint64_t v2 = sub_100044EE4(&qword_1000A1D18, (void (*)(uint64_t))type metadata accessor for SyncAssetCollection);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100040EF8()
{
  sub_100044EE4(&qword_1000A1D18, (void (*)(uint64_t))type metadata accessor for SyncAssetCollection);

  return Message.hash(into:)();
}

const char *SyncLibrary.protoMessageName.unsafeMutableAddressor()
{
  return "NPTO.Library";
}

uint64_t static SyncLibrary.protoMessageName.getter()
{
  return 0x62694C2E4F54504ELL;
}

uint64_t sub_100040FA0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100006DC0(v0, static SyncLibrary._protobuf_nameMap);
  sub_100006D88(v0, (uint64_t)static SyncLibrary._protobuf_nameMap);
  sub_100006290(&qword_1000A1990);
  uint64_t v1 = (int *)(sub_100006290(&qword_1000A1998) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10007A280;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "asset";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "assetCollection";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t SyncLibrary._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10003A5E4(&qword_1000A0EE8, (uint64_t)static SyncLibrary._protobuf_nameMap);
}

uint64_t static SyncLibrary._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003A65C(&qword_1000A0EE8, (uint64_t)static SyncLibrary._protobuf_nameMap, a1);
}

uint64_t SyncLibrary.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 2) {
        break;
      }
      if (result == 1)
      {
        type metadata accessor for SyncAsset(0);
        sub_100044EE4(&qword_1000A1D10, (void (*)(uint64_t))type metadata accessor for SyncAsset);
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for SyncAssetCollection(0);
    sub_100044EE4(&qword_1000A1D18, (void (*)(uint64_t))type metadata accessor for SyncAssetCollection);
LABEL_5:
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
    goto LABEL_6;
  }
  return result;
}

uint64_t SyncLibrary.traverse<A>(visitor:)()
{
  if (!*(void *)(*v0 + 16)
    || (type metadata accessor for SyncAsset(0),
        sub_100044EE4(&qword_1000A1D10, (void (*)(uint64_t))type metadata accessor for SyncAsset),
        uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(void *)(v0[1] + 16)
      || (type metadata accessor for SyncAssetCollection(0),
          sub_100044EE4(&qword_1000A1D18, (void (*)(uint64_t))type metadata accessor for SyncAssetCollection),
          uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
          !v1))
    {
      type metadata accessor for SyncLibrary(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int SyncLibrary.hashValue.getter()
{
  return sub_100042CE8((void (*)(void))type metadata accessor for SyncLibrary, &qword_1000A1D20, (void (*)(uint64_t))type metadata accessor for SyncLibrary);
}

uint64_t sub_1000414A0@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t (*sub_1000414D4())()
{
  return nullsub_1;
}

uint64_t sub_1000414F8()
{
  return SyncLibrary.decodeMessage<A>(decoder:)();
}

uint64_t sub_100041510()
{
  return SyncLibrary.traverse<A>(visitor:)();
}

uint64_t sub_100041528(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044EE4(&qword_1000A2110, (void (*)(uint64_t))type metadata accessor for SyncLibrary);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000415A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10003AA58(&qword_1000A0EE8, (uint64_t)static SyncLibrary._protobuf_nameMap, a1);
}

uint64_t sub_1000415C8(uint64_t a1)
{
  uint64_t v2 = sub_100044EE4(&qword_1000A1300, (void (*)(uint64_t))type metadata accessor for SyncLibrary);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100041634()
{
  sub_100044EE4(&qword_1000A1300, (void (*)(uint64_t))type metadata accessor for SyncLibrary);

  return Message.hash(into:)();
}

void *SyncCollectionTargetItem.protoMessageName.unsafeMutableAddressor()
{
  return &static SyncCollectionTargetItem.protoMessageName;
}

unint64_t static SyncCollectionTargetItem.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t sub_1000416D8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100006DC0(v0, static SyncCollectionTargetItem._protobuf_nameMap);
  sub_100006D88(v0, (uint64_t)static SyncCollectionTargetItem._protobuf_nameMap);
  sub_100006290(&qword_1000A1990);
  uint64_t v1 = (int *)(sub_100006290(&qword_1000A1998) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_10007AC40;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "uuidData";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "collectionTarget";
  *(void *)(v9 + 8) = 16;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  int v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)int v11 = "assetIndex";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "keyAssetIndex";
  *((void *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  unint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "title";
  *((void *)v15 + 1) = 5;
  v15[16] = 2;
  v8();
  unint64_t v16 = (void *)(v4 + 5 * v2);
  int v17 = (char *)v16 + v1[14];
  *unint64_t v16 = 6;
  *(void *)int v17 = "subtitle";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  void *v18 = 7;
  *(void *)uint64_t v19 = "collectionMetadata";
  *((void *)v19 + 1) = 18;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  void *v20 = 8;
  *(void *)uint64_t v21 = "type";
  *((void *)v21 + 1) = 4;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "subtype";
  *(void *)(v22 + 8) = 7;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t SyncCollectionTargetItem._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10003A5E4(&qword_1000A0EF0, (uint64_t)static SyncCollectionTargetItem._protobuf_nameMap);
}

uint64_t static SyncCollectionTargetItem._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003A65C(&qword_1000A0EF0, (uint64_t)static SyncCollectionTargetItem._protobuf_nameMap, a1);
}

uint64_t SyncCollectionTargetItem.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 7:
          type metadata accessor for SyncCollectionTargetItem(0);
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 2:
          type metadata accessor for SyncCollectionTargetItem(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)();
          break;
        case 5:
        case 6:
          type metadata accessor for SyncCollectionTargetItem(0);
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 8:
          sub_100041C6C();
          break;
        case 9:
          sub_100041CE4();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100041C6C()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t sub_100041CE4()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t SyncCollectionTargetItem.traverse<A>(visitor:)()
{
  char v2 = (int *)type metadata accessor for SyncCollectionTargetItem(0);
  unint64_t v3 = (char *)v0 + v2[7];
  unint64_t v4 = *((void *)v3 + 1);
  if (v4 >> 60 == 15
    || (uint64_t v5 = *(void *)v3,
        sub_10001FF5C(*(void *)v3, *((void *)v3 + 1)),
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(),
        uint64_t result = sub_100038B10(v5, v4),
        !v1))
  {
    if ((*((unsigned char *)v0 + v2[8] + 4) & 1) != 0
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(*v0 + 16)
        || (uint64_t result = dispatch thunk of Visitor.visitRepeatedInt32Field(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(v0[1] + 16)
          || (uint64_t result = dispatch thunk of Visitor.visitRepeatedInt32Field(value:fieldNumber:)(), !v1))
        {
          if (!*(void *)((char *)v0 + v2[9] + 8)
            || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
          {
            if (!*(void *)((char *)v0 + v2[10] + 8)
              || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
            {
              uint64_t v7 = (char *)v0 + v2[11];
              unint64_t v8 = *((void *)v7 + 1);
              if (v8 >> 60 == 15
                || (uint64_t v9 = *(void *)v7,
                    sub_10001FF5C(*(void *)v7, *((void *)v7 + 1)),
                    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(),
                    uint64_t result = sub_100038B10(v9, v8),
                    !v1))
              {
                if (*((unsigned char *)v0 + v2[12]) == 4
                  || (sub_100044F80(),
                      uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                      !v1))
                {
                  if (*((unsigned char *)v0 + v2[13]) == 5) {
                    return UnknownStorage.traverse<A>(visitor:)();
                  }
                  sub_100044F2C();
                  uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
                  if (!v1) {
                    return UnknownStorage.traverse<A>(visitor:)();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int SyncCollectionTargetItem.hashValue.getter()
{
  return sub_100042CE8((void (*)(void))type metadata accessor for SyncCollectionTargetItem, &qword_1000A1D38, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetItem);
}

double sub_100042044@<D0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  double result = 0.0;
  uint64_t v5 = a1[8];
  *(_OWORD *)((char *)a2 + a1[7]) = xmmword_10007A540;
  uint64_t v6 = (char *)a2 + v5;
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  uint64_t v7 = a1[10];
  unint64_t v8 = (void *)((char *)a2 + a1[9]);
  *unint64_t v8 = 0;
  v8[1] = 0;
  uint64_t v9 = (void *)((char *)a2 + v7);
  *uint64_t v9 = 0;
  v9[1] = 0;
  uint64_t v10 = a1[12];
  *(_OWORD *)((char *)a2 + a1[11]) = xmmword_10007A540;
  *((unsigned char *)a2 + v10) = 4;
  *((unsigned char *)a2 + a1[13]) = 5;
  return result;
}

uint64_t sub_1000420D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_100042140(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_1000421B0()
{
  return SyncCollectionTargetItem.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000421C8()
{
  return SyncCollectionTargetItem.traverse<A>(visitor:)();
}

uint64_t sub_1000421E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044EE4(&qword_1000A2108, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetItem);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004225C@<X0>(uint64_t a1@<X8>)
{
  return sub_10003AA58(&qword_1000A0EF0, (uint64_t)static SyncCollectionTargetItem._protobuf_nameMap, a1);
}

uint64_t sub_100042280(uint64_t a1)
{
  uint64_t v2 = sub_100044EE4(&qword_1000A1D40, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetItem);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000422EC()
{
  sub_100044EE4(&qword_1000A1D40, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetItem);

  return Message.hash(into:)();
}

uint64_t sub_100042368()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100006DC0(v0, static SyncCollectionTargetItem.AssetCollectionType._protobuf_nameMap);
  sub_100006D88(v0, (uint64_t)static SyncCollectionTargetItem.AssetCollectionType._protobuf_nameMap);
  sub_100006290(&qword_1000A1990);
  uint64_t v1 = (int *)(sub_100006290(&qword_1000A1998) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10007AC50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "Unknown";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "Album";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  int v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "SmartAlbum";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  unint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)unint64_t v14 = "Moment";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t SyncCollectionTargetItem.AssetCollectionType._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10003A5E4(&qword_1000A0EF8, (uint64_t)static SyncCollectionTargetItem.AssetCollectionType._protobuf_nameMap);
}

uint64_t static SyncCollectionTargetItem.AssetCollectionType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003A65C(&qword_1000A0EF8, (uint64_t)static SyncCollectionTargetItem.AssetCollectionType._protobuf_nameMap, a1);
}

uint64_t sub_1000425E4@<X0>(uint64_t a1@<X8>)
{
  return sub_10003AA58(&qword_1000A0EF8, (uint64_t)static SyncCollectionTargetItem.AssetCollectionType._protobuf_nameMap, a1);
}

uint64_t sub_100042608()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100006DC0(v0, static SyncCollectionTargetItem.AssetCollectionSubtype._protobuf_nameMap);
  sub_100006D88(v0, (uint64_t)static SyncCollectionTargetItem.AssetCollectionSubtype._protobuf_nameMap);
  sub_100006290(&qword_1000A1990);
  uint64_t v1 = (int *)(sub_100006290(&qword_1000A1998) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10007AC30;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "AlbumAny";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "AlbumRegular";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  int v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 100;
  *(void *)uint64_t v12 = "AlbumMyPhotoStream";
  *((void *)v12 + 1) = 18;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  unint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 101;
  *(void *)unint64_t v14 = "AlbumCloudShared";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 203;
  *(void *)uint64_t v15 = "SmartAlbumFavorites";
  *(void *)(v15 + 8) = 19;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t SyncCollectionTargetItem.AssetCollectionSubtype._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10003A5E4(&qword_1000A0F00, (uint64_t)static SyncCollectionTargetItem.AssetCollectionSubtype._protobuf_nameMap);
}

uint64_t static SyncCollectionTargetItem.AssetCollectionSubtype._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003A65C(&qword_1000A0F00, (uint64_t)static SyncCollectionTargetItem.AssetCollectionSubtype._protobuf_nameMap, a1);
}

uint64_t sub_1000428D0@<X0>(uint64_t a1@<X8>)
{
  return sub_10003AA58(&qword_1000A0F00, (uint64_t)static SyncCollectionTargetItem.AssetCollectionSubtype._protobuf_nameMap, a1);
}

void *SyncCollectionTargetList.protoMessageName.unsafeMutableAddressor()
{
  return &static SyncCollectionTargetList.protoMessageName;
}

unint64_t static SyncCollectionTargetList.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t sub_10004291C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100006DC0(v0, static SyncCollectionTargetList._protobuf_nameMap);
  sub_100006D88(v0, (uint64_t)static SyncCollectionTargetList._protobuf_nameMap);
  sub_100006290(&qword_1000A1990);
  uint64_t v1 = (int *)(sub_100006290(&qword_1000A1998) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100079C30;
  unint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 1;
  *(void *)unint64_t v4 = "collectionTargetItem";
  *(void *)(v4 + 8) = 20;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t SyncCollectionTargetList._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10003A5E4(&qword_1000A0F08, (uint64_t)static SyncCollectionTargetList._protobuf_nameMap);
}

uint64_t static SyncCollectionTargetList._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003A65C(&qword_1000A0F08, (uint64_t)static SyncCollectionTargetList._protobuf_nameMap, a1);
}

uint64_t SyncCollectionTargetList.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for SyncCollectionTargetItem(0);
        sub_100044EE4(&qword_1000A1D40, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetItem);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t SyncCollectionTargetList.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for SyncCollectionTargetItem(0),
        sub_100044EE4(&qword_1000A1D40, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetItem), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for SyncCollectionTargetList(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int SyncCollectionTargetList.hashValue.getter()
{
  return sub_100042CE8((void (*)(void))type metadata accessor for SyncCollectionTargetList, &qword_1000A1D48, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetList);
}

Swift::Int sub_100042CE8(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_100042D70@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_100042D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_100042E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_100042E7C()
{
  return SyncCollectionTargetList.decodeMessage<A>(decoder:)();
}

uint64_t sub_100042E94()
{
  return SyncCollectionTargetList.traverse<A>(visitor:)();
}

uint64_t sub_100042EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044EE4(&qword_1000A2100, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetList);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100042F28@<X0>(uint64_t a1@<X8>)
{
  return sub_10003AA58(&qword_1000A0F08, (uint64_t)static SyncCollectionTargetList._protobuf_nameMap, a1);
}

uint64_t sub_100042F4C(uint64_t a1)
{
  uint64_t v2 = sub_100044EE4(&qword_1000A1308, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetList);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100042FB8()
{
  sub_100044EE4(&qword_1000A1308, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetList);

  return Message.hash(into:)();
}

uint64_t sub_100043034@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_10001FF5C(a2, a3);
      unint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x100043298);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_10002001C(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      int v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_1000432A8(uint64_t a1, uint64_t a2)
{
  return sub_100043A44(a1, a2, type metadata accessor for SyncCollectionTargetItem, type metadata accessor for SyncCollectionTargetItem, (uint64_t (*)(char *, char *))_s14NanoPhotosSync0C20CollectionTargetItemV2eeoiySbAC_ACtFZ_0);
}

BOOL sub_1000432E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (int *)(a1 + 36);
  uint64_t v4 = (int *)(a2 + 36);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_100043354(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SyncAsset(0);
  uint64_t v5 = __chkstk_darwin(v4);
  int v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v10 = (char *)&v51 - v9;
  uint64_t v59 = a1;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 != *(void *)(a2 + 16)) {
    goto LABEL_59;
  }
  if (!v11 || v59 == a2)
  {
    char v45 = 1;
    return v45 & 1;
  }
  uint64_t v55 = 0;
  uint64_t v56 = a2;
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v57 = *(void *)(v8 + 72);
  uint64_t v58 = v4;
  uint64_t v13 = v11 - 1;
  while (1)
  {
    sub_10004803C(v59 + v12, (uint64_t)v10, type metadata accessor for SyncAsset);
    sub_10004803C(a2 + v12, (uint64_t)v7, type metadata accessor for SyncAsset);
    uint64_t v14 = *(int *)(v4 + 20);
    uint64_t v16 = *(void *)&v10[v14];
    unint64_t v15 = *(void *)&v10[v14 + 8];
    int v17 = (uint64_t *)&v7[v14];
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    if (v15 >> 60 == 15)
    {
      if (v19 >> 60 != 15) {
        break;
      }
      goto LABEL_42;
    }
    if (v19 >> 60 == 15) {
      break;
    }
    uint64_t v20 = 0;
    switch(v15 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v16), v16))
        {
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
        }
        uint64_t v20 = HIDWORD(v16) - (int)v16;
LABEL_14:
        sub_10001FF5C(v16, v15);
        break;
      case 2uLL:
        uint64_t v22 = *(void *)(v16 + 16);
        uint64_t v21 = *(void *)(v16 + 24);
        uint64_t v20 = v21 - v22;
        if (!__OFSUB__(v21, v22)) {
          goto LABEL_14;
        }
        goto LABEL_62;
      case 3uLL:
        break;
      default:
        uint64_t v20 = BYTE6(v15);
        break;
    }
    switch(v19 >> 62)
    {
      case 1uLL:
        LODWORD(v23) = HIDWORD(v18) - v18;
        if (__OFSUB__(HIDWORD(v18), v18)) {
          goto LABEL_63;
        }
        uint64_t v23 = (int)v23;
LABEL_20:
        if (v20 != v23)
        {
LABEL_56:
          uint64_t v48 = v16;
          unint64_t v49 = v15;
          goto LABEL_57;
        }
        if (v20 >= 1)
        {
          switch(v15 >> 62)
          {
            case 1uLL:
              uint64_t v54 = (v16 >> 32) - (int)v16;
              if (v16 >> 32 < (int)v16) {
                goto LABEL_65;
              }
              sub_10001FF48(v16, v15);
              sub_10001FF48(v18, v19);
              uint64_t v27 = __DataStorage._bytes.getter();
              if (v27)
              {
                uint64_t v53 = v27;
                uint64_t v28 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v16, v28)) {
                  goto LABEL_67;
                }
                uint64_t v29 = v53 + (int)v16 - v28;
              }
              else
              {
                uint64_t v29 = 0;
              }
              __DataStorage._length.getter();
              uint64_t v38 = v29;
              uint64_t v39 = v55;
              sub_100043034(v38, v18, v19, (char *)__s1);
              uint64_t v55 = v39;
              sub_100038B10(v16, v15);
              goto LABEL_40;
            case 2uLL:
              uint64_t v30 = *(void *)(v16 + 16);
              uint64_t v53 = *(void *)(v16 + 24);
              uint64_t v54 = v30;
              sub_10001FF48(v18, v19);
              swift_retain();
              swift_retain();
              uint64_t v31 = __DataStorage._bytes.getter();
              if (v31)
              {
                uint64_t v32 = v31;
                uint64_t v33 = __DataStorage._offset.getter();
                uint64_t v34 = v54;
                if (__OFSUB__(v54, v33)) {
                  goto LABEL_68;
                }
                uint64_t v52 = v32 + v54 - v33;
              }
              else
              {
                uint64_t v52 = 0;
                uint64_t v34 = v54;
              }
              if (__OFSUB__(v53, v34)) {
                goto LABEL_66;
              }
              __DataStorage._length.getter();
              uint64_t v37 = v55;
              sub_100043034(v52, v18, v19, (char *)__s1);
              uint64_t v55 = v37;
              swift_release();
              swift_release();
LABEL_40:
              sub_100038B10(v18, v19);
              sub_100038B10(v16, v15);
              char v36 = __s1[0];
LABEL_41:
              a2 = v56;
              if (v36) {
                goto LABEL_42;
              }
              goto LABEL_58;
            case 3uLL:
              memset(__s1, 0, 14);
              sub_10001FF5C(v18, v19);
              goto LABEL_34;
            default:
              __s1[0] = v16;
              LOWORD(__s1[1]) = v15;
              BYTE2(__s1[1]) = BYTE2(v15);
              BYTE3(__s1[1]) = BYTE3(v15);
              BYTE4(__s1[1]) = BYTE4(v15);
              BYTE5(__s1[1]) = BYTE5(v15);
              sub_10001FF5C(v18, v19);
LABEL_34:
              uint64_t v35 = v55;
              sub_100043034((uint64_t)__s1, v18, v19, &v60);
              uint64_t v55 = v35;
              sub_100038B10(v18, v19);
              sub_100038B10(v16, v15);
              char v36 = v60;
              goto LABEL_41;
          }
        }
LABEL_25:
        sub_100038B10(v16, v15);
        a2 = v56;
        break;
      case 2uLL:
        uint64_t v25 = *(void *)(v18 + 16);
        uint64_t v24 = *(void *)(v18 + 24);
        BOOL v26 = __OFSUB__(v24, v25);
        uint64_t v23 = v24 - v25;
        if (!v26) {
          goto LABEL_20;
        }
        goto LABEL_64;
      case 3uLL:
        if (!v20) {
          goto LABEL_25;
        }
        goto LABEL_56;
      default:
        uint64_t v23 = BYTE6(v19);
        goto LABEL_20;
    }
LABEL_42:
    uint64_t v4 = v58;
    uint64_t v40 = *(int *)(v58 + 24);
    uint64_t v41 = &v10[v40];
    char v42 = v10[v40 + 8];
    uint64_t v43 = &v7[v40];
    int v44 = v7[v40 + 8];
    if (v42)
    {
      if (!v44) {
        goto LABEL_58;
      }
    }
    else
    {
      if (*(void *)v41 != *(void *)v43) {
        LOBYTE(v44) = 1;
      }
      if (v44) {
        goto LABEL_58;
      }
    }
    type metadata accessor for UnknownStorage();
    sub_100044EE4(&qword_1000A1988, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
    sub_1000480A4((uint64_t)v7, type metadata accessor for SyncAsset);
    sub_1000480A4((uint64_t)v10, type metadata accessor for SyncAsset);
    BOOL v47 = v13-- != 0;
    if (v45)
    {
      v12 += v57;
      if (v47) {
        continue;
      }
    }
    return v45 & 1;
  }
  sub_10001FF48(v16, v15);
  sub_10001FF48(v18, v19);
  sub_100038B10(v16, v15);
  uint64_t v48 = v18;
  unint64_t v49 = v19;
LABEL_57:
  sub_100038B10(v48, v49);
LABEL_58:
  sub_1000480A4((uint64_t)v7, type metadata accessor for SyncAsset);
  sub_1000480A4((uint64_t)v10, type metadata accessor for SyncAsset);
LABEL_59:
  char v45 = 0;
  return v45 & 1;
}

uint64_t sub_100043A04(uint64_t a1, uint64_t a2)
{
  return sub_100043A44(a1, a2, type metadata accessor for SyncAssetCollection, type metadata accessor for SyncAssetCollection, (uint64_t (*)(char *, char *))_s14NanoPhotosSync0C15AssetCollectionV2eeoiySbAC_ACtFZ_0);
}

uint64_t sub_100043A44(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(char *, char *))
{
  uint64_t v9 = a3(0) - 8;
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16 == *(void *)(a2 + 16))
  {
    if (!v16 || a1 == a2)
    {
      char v20 = 1;
    }
    else
    {
      unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v18 = *(void *)(v13 + 72);
      uint64_t v19 = v16 - 1;
      do
      {
        sub_10004803C(a1 + v17, (uint64_t)v15, a4);
        sub_10004803C(a2 + v17, (uint64_t)v12, a4);
        char v20 = a5(v15, v12);
        sub_1000480A4((uint64_t)v12, a4);
        sub_1000480A4((uint64_t)v15, a4);
        BOOL v22 = v19-- != 0;
        if ((v20 & 1) == 0) {
          break;
        }
        v17 += v18;
      }
      while (v22);
    }
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t sub_100043BCC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_100043034((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_100043CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_100043034(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_100043D5C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x100043FC4);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_10001FF5C(a3, a4);
                  sub_10001FF5C(a1, a2);
                  char v17 = sub_100043CA4((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_10002001C(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_10001FF5C(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_100043CA4(v21, v22, v20, a3, a4);
                  sub_10002001C(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_10001FF5C(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_10001FF5C(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_100043BCC(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_10002001C(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t _s14NanoPhotosSync0C7LibraryV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((sub_100043354(*a1, *a2) & 1) != 0
    && (sub_100043A44(a1[1], a2[1], type metadata accessor for SyncAssetCollection, type metadata accessor for SyncAssetCollection, (uint64_t (*)(char *, char *))_s14NanoPhotosSync0C15AssetCollectionV2eeoiySbAC_ACtFZ_0) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for SyncLibrary(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 24), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 24), v4);
    sub_100044EE4(&qword_1000A1988, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s14NanoPhotosSync0C5AssetV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  uint64_t v9 = &v27[-v8];
  uint64_t v10 = type metadata accessor for SyncAsset(0);
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  uint64_t v14 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  if (v13 >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      sub_10001FF48(v12, v13);
      sub_10001FF48(v15, v16);
      int v28 = sub_100043D5C(v12, v13, v15, v16);
      sub_100038B10(v15, v16);
      sub_100038B10(v12, v13);
      if ((v28 & 1) == 0) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
LABEL_5:
    sub_10001FF48(v12, v13);
    sub_10001FF48(v15, v16);
    sub_100038B10(v12, v13);
    sub_100038B10(v15, v16);
    goto LABEL_6;
  }
  if (v16 >> 60 != 15) {
    goto LABEL_5;
  }
LABEL_9:
  uint64_t v19 = *(int *)(v10 + 24);
  uint64_t v20 = (void *)(a1 + v19);
  char v21 = *(unsigned char *)(a1 + v19 + 8);
  uint64_t v22 = (void *)(a2 + v19);
  int v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if (v21)
  {
    if (v23)
    {
LABEL_15:
      uint64_t v24 = v29;
      uint64_t v25 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v29 + 16);
      v25(v9, a1, v4);
      v25(v7, a2, v4);
      sub_100044EE4(&qword_1000A1988, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      BOOL v26 = *(void (**)(unsigned char *, uint64_t))(v24 + 8);
      v26(v7, v4);
      v26(v9, v4);
      return v17 & 1;
    }
  }
  else
  {
    if (*v20 != *v22) {
      LOBYTE(v23) = 1;
    }
    if ((v23 & 1) == 0) {
      goto LABEL_15;
    }
  }
LABEL_6:
  char v17 = 0;
  return v17 & 1;
}

uint64_t _s14NanoPhotosSync0C20CollectionTargetListV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (sub_100043A44(*a1, *a2, type metadata accessor for SyncCollectionTargetItem, type metadata accessor for SyncCollectionTargetItem, (uint64_t (*)(char *, char *))_s14NanoPhotosSync0C20CollectionTargetItemV2eeoiySbAC_ACtFZ_0))
  {
    uint64_t v11 = type metadata accessor for SyncCollectionTargetList(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 20), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 20), v4);
    sub_100044EE4(&qword_1000A1988, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s14NanoPhotosSync0C20CollectionTargetItemV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v49 - v8;
  uint64_t v10 = (int *)type metadata accessor for SyncCollectionTargetItem(0);
  uint64_t v11 = v10[7];
  uint64_t v12 = *(uint64_t *)((char *)a1 + v11);
  unint64_t v13 = *(uint64_t *)((char *)a1 + v11 + 8);
  uint64_t v14 = (uint64_t *)((char *)a2 + v11);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 != 15) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v16 >> 60 == 15) {
      goto LABEL_5;
    }
    sub_10001FF48(v12, v13);
    sub_10001FF48(v15, v16);
    char v19 = sub_100043D5C(v12, v13, v15, v16);
    sub_100038B10(v15, v16);
    sub_100038B10(v12, v13);
    if ((v19 & 1) == 0) {
      goto LABEL_6;
    }
  }
  uint64_t v20 = v10[8];
  char v21 = (_DWORD *)((char *)a1 + v20);
  char v22 = *((unsigned char *)a1 + v20 + 4);
  int v23 = (_DWORD *)((char *)a2 + v20);
  int v24 = *((unsigned __int8 *)a2 + v20 + 4);
  if (v22)
  {
    if (!v24) {
      goto LABEL_6;
    }
  }
  else
  {
    if (*v21 != *v23) {
      LOBYTE(v24) = 1;
    }
    if (v24) {
      goto LABEL_6;
    }
  }
  if (!sub_1000432E8(*a1, *a2) || !sub_1000432E8(a1[1], a2[1])) {
    goto LABEL_6;
  }
  uint64_t v25 = v10[9];
  BOOL v26 = (uint64_t *)((char *)a1 + v25);
  uint64_t v27 = *(uint64_t *)((char *)a1 + v25 + 8);
  int v28 = (uint64_t *)((char *)a2 + v25);
  uint64_t v29 = v28[1];
  if (v27)
  {
    if (!v29) {
      goto LABEL_6;
    }
    if (*v26 != *v28 || v27 != v29)
    {
      char v17 = 0;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return v17 & 1;
      }
    }
  }
  else if (v29)
  {
    goto LABEL_6;
  }
  uint64_t v30 = v10[10];
  uint64_t v31 = (uint64_t *)((char *)a1 + v30);
  uint64_t v32 = *(uint64_t *)((char *)a1 + v30 + 8);
  uint64_t v33 = (uint64_t *)((char *)a2 + v30);
  uint64_t v34 = v33[1];
  if (v32)
  {
    if (!v34) {
      goto LABEL_6;
    }
    if (*v31 != *v33 || v32 != v34)
    {
      char v17 = 0;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return v17 & 1;
      }
    }
  }
  else if (v34)
  {
    goto LABEL_6;
  }
  uint64_t v35 = v10[11];
  uint64_t v12 = *(uint64_t *)((char *)a1 + v35);
  unint64_t v13 = *(uint64_t *)((char *)a1 + v35 + 8);
  char v36 = (uint64_t *)((char *)a2 + v35);
  uint64_t v15 = *v36;
  unint64_t v16 = v36[1];
  if (v13 >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      sub_10001FF48(v12, v13);
      sub_10001FF48(v15, v16);
      char v37 = sub_100043D5C(v12, v13, v15, v16);
      sub_100038B10(v15, v16);
      sub_100038B10(v12, v13);
      if ((v37 & 1) == 0) {
        goto LABEL_6;
      }
      goto LABEL_36;
    }
LABEL_5:
    sub_10001FF48(v12, v13);
    sub_10001FF48(v15, v16);
    sub_100038B10(v12, v13);
    sub_100038B10(v15, v16);
    goto LABEL_6;
  }
  if (v16 >> 60 != 15) {
    goto LABEL_5;
  }
LABEL_36:
  uint64_t v38 = v10[12];
  int v39 = *((unsigned __int8 *)a1 + v38);
  int v40 = *((unsigned __int8 *)a2 + v38);
  if (v39 == 4)
  {
    if (v40 == 4) {
      goto LABEL_41;
    }
LABEL_6:
    char v17 = 0;
    return v17 & 1;
  }
  char v17 = 0;
  if (v40 != 4 && v39 == v40)
  {
LABEL_41:
    uint64_t v41 = v10[13];
    uint64_t v42 = *((char *)a1 + v41);
    uint64_t v43 = *((char *)a2 + v41);
    if (v42 == 5)
    {
      if (v43 == 5)
      {
LABEL_46:
        int v44 = (char *)a1 + v10[6];
        uint64_t v46 = v49;
        uint64_t v45 = v50;
        BOOL v47 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
        v47(v9, v44, v50);
        v47(v7, (char *)a2 + v10[6], v45);
        sub_100044EE4(&qword_1000A1988, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v48 = *(void (**)(char *, uint64_t))(v46 + 8);
        v48(v7, v45);
        v48(v9, v45);
        return v17 & 1;
      }
    }
    else if (v43 != 5 && qword_10007B780[v42] == qword_10007B780[v43])
    {
      goto LABEL_46;
    }
    goto LABEL_6;
  }
  return v17 & 1;
}

uint64_t _s14NanoPhotosSync0C15AssetCollectionV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v40 - v8;
  uint64_t v10 = (int *)type metadata accessor for SyncAssetCollection(0);
  uint64_t v11 = v10[6];
  uint64_t v12 = *(uint64_t *)((char *)a1 + v11);
  unint64_t v13 = *(uint64_t *)((char *)a1 + v11 + 8);
  uint64_t v14 = (uint64_t *)((char *)a2 + v11);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  uint64_t v41 = v4;
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 != 15) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v16 >> 60 == 15) {
      goto LABEL_5;
    }
    sub_10001FF48(v12, v13);
    sub_10001FF48(v15, v16);
    char v17 = sub_100043D5C(v12, v13, v15, v16);
    sub_100038B10(v15, v16);
    sub_100038B10(v12, v13);
    if ((v17 & 1) == 0) {
      goto LABEL_26;
    }
  }
  if (!sub_1000432E8(*a1, *a2)) {
    goto LABEL_26;
  }
  uint64_t v18 = v10[7];
  char v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = *(uint64_t *)((char *)a1 + v18 + 8);
  char v21 = (uint64_t *)((char *)a2 + v18);
  uint64_t v22 = v21[1];
  if (!v20)
  {
    if (v22) {
      goto LABEL_26;
    }
    goto LABEL_17;
  }
  if (!v22) {
    goto LABEL_26;
  }
  BOOL v23 = *v19 == *v21 && v20 == v22;
  if (v23 || (char v24 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_17:
    uint64_t v25 = v10[8];
    BOOL v26 = (uint64_t *)((char *)a1 + v25);
    uint64_t v27 = *(uint64_t *)((char *)a1 + v25 + 8);
    int v28 = (uint64_t *)((char *)a2 + v25);
    uint64_t v29 = v28[1];
    if (v27)
    {
      if (!v29) {
        goto LABEL_26;
      }
      if (*v26 != *v28 || v27 != v29)
      {
        char v24 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return v24 & 1;
        }
      }
    }
    else if (v29)
    {
      goto LABEL_26;
    }
    uint64_t v32 = v10[9];
    uint64_t v12 = *(uint64_t *)((char *)a1 + v32);
    unint64_t v13 = *(uint64_t *)((char *)a1 + v32 + 8);
    uint64_t v33 = (uint64_t *)((char *)a2 + v32);
    uint64_t v15 = *v33;
    unint64_t v16 = v33[1];
    if (v13 >> 60 == 15)
    {
      if (v16 >> 60 == 15) {
        goto LABEL_33;
      }
    }
    else if (v16 >> 60 != 15)
    {
      sub_10001FF48(v12, v13);
      sub_10001FF48(v15, v16);
      char v34 = sub_100043D5C(v12, v13, v15, v16);
      sub_100038B10(v15, v16);
      sub_100038B10(v12, v13);
      if (v34)
      {
LABEL_33:
        uint64_t v35 = (char *)a1 + v10[5];
        uint64_t v37 = v40;
        uint64_t v36 = v41;
        uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
        v38(v9, v35, v41);
        v38(v7, (char *)a2 + v10[5], v36);
        sub_100044EE4(&qword_1000A1988, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
        int v39 = *(void (**)(char *, uint64_t))(v37 + 8);
        v39(v7, v36);
        v39(v9, v36);
        return v24 & 1;
      }
LABEL_26:
      char v24 = 0;
      return v24 & 1;
    }
LABEL_5:
    sub_10001FF48(v12, v13);
    sub_10001FF48(v15, v16);
    sub_100038B10(v12, v13);
    sub_100038B10(v15, v16);
    goto LABEL_26;
  }
  return v24 & 1;
}

unint64_t _s14NanoPhotosSync0C20CollectionTargetItemV05AssetD4TypeO8rawValueAESgSi_tcfC_0(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

uint64_t _s14NanoPhotosSync0C20CollectionTargetItemV05AssetD7SubtypeO8rawValueAESgSi_tcfC_0(uint64_t result)
{
  if (result <= 99)
  {
    if (!result) {
      return result;
    }
    if (result == 2) {
      return 1;
    }
  }
  else
  {
    switch(result)
    {
      case 100:
        return 2;
      case 101:
        return 3;
      case 203:
        return 4;
    }
  }
  return 5;
}

uint64_t sub_100044EE4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100044F2C()
{
  unint64_t result = qword_1000A1D28;
  if (!qword_1000A1D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1D28);
  }
  return result;
}

unint64_t sub_100044F80()
{
  unint64_t result = qword_1000A1D30;
  if (!qword_1000A1D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1D30);
  }
  return result;
}

unint64_t sub_100044FD8()
{
  unint64_t result = qword_1000A1D50;
  if (!qword_1000A1D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1D50);
  }
  return result;
}

unint64_t sub_100045030()
{
  unint64_t result = qword_1000A1D58;
  if (!qword_1000A1D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1D58);
  }
  return result;
}

unint64_t sub_100045088()
{
  unint64_t result = qword_1000A1D60;
  if (!qword_1000A1D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1D60);
  }
  return result;
}

unint64_t sub_1000450E0()
{
  unint64_t result = qword_1000A1D68;
  if (!qword_1000A1D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1D68);
  }
  return result;
}

unint64_t sub_100045138()
{
  unint64_t result = qword_1000A1D70;
  if (!qword_1000A1D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1D70);
  }
  return result;
}

unint64_t sub_100045190()
{
  unint64_t result = qword_1000A1D78;
  if (!qword_1000A1D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1D78);
  }
  return result;
}

uint64_t sub_1000451E4()
{
  return sub_100045234(&qword_1000A1D80, &qword_1000A1D88);
}

uint64_t sub_10004520C()
{
  return sub_100045234(&qword_1000A1D90, &qword_1000A1D98);
}

uint64_t sub_100045234(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100007650(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100045284()
{
  return sub_100044EE4(&qword_1000A1DA0, (void (*)(uint64_t))type metadata accessor for SyncAsset);
}

uint64_t sub_1000452CC()
{
  return sub_100044EE4(&qword_1000A1D10, (void (*)(uint64_t))type metadata accessor for SyncAsset);
}

uint64_t sub_100045314()
{
  return sub_100044EE4(&qword_1000A1D00, (void (*)(uint64_t))type metadata accessor for SyncAsset);
}

uint64_t sub_10004535C()
{
  return sub_100044EE4(&qword_1000A1DA8, (void (*)(uint64_t))type metadata accessor for SyncAsset);
}

uint64_t sub_1000453A4()
{
  return sub_100044EE4(&qword_1000A1DB0, (void (*)(uint64_t))type metadata accessor for SyncAssetCollection);
}

uint64_t sub_1000453EC()
{
  return sub_100044EE4(&qword_1000A1D18, (void (*)(uint64_t))type metadata accessor for SyncAssetCollection);
}

uint64_t sub_100045434()
{
  return sub_100044EE4(&qword_1000A1D08, (void (*)(uint64_t))type metadata accessor for SyncAssetCollection);
}

uint64_t sub_10004547C()
{
  return sub_100044EE4(&qword_1000A1DB8, (void (*)(uint64_t))type metadata accessor for SyncAssetCollection);
}

uint64_t sub_1000454C4()
{
  return sub_100044EE4(&qword_1000A1DC0, (void (*)(uint64_t))type metadata accessor for SyncLibrary);
}

uint64_t sub_10004550C()
{
  return sub_100044EE4(&qword_1000A1300, (void (*)(uint64_t))type metadata accessor for SyncLibrary);
}

uint64_t sub_100045554()
{
  return sub_100044EE4(&qword_1000A1D20, (void (*)(uint64_t))type metadata accessor for SyncLibrary);
}

uint64_t sub_10004559C()
{
  return sub_100044EE4(&qword_1000A1DC8, (void (*)(uint64_t))type metadata accessor for SyncLibrary);
}

uint64_t sub_1000455E4()
{
  return sub_100044EE4(&qword_1000A1DD0, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetItem);
}

uint64_t sub_10004562C()
{
  return sub_100044EE4(&qword_1000A1D40, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetItem);
}

uint64_t sub_100045674()
{
  return sub_100044EE4(&qword_1000A1D38, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetItem);
}

uint64_t sub_1000456BC()
{
  return sub_100044EE4(&qword_1000A1DD8, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetItem);
}

uint64_t sub_100045704()
{
  return sub_100044EE4(&qword_1000A1DE0, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetList);
}

uint64_t sub_10004574C()
{
  return sub_100044EE4(&qword_1000A1308, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetList);
}

uint64_t sub_100045794()
{
  return sub_100044EE4(&qword_1000A1D48, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetList);
}

uint64_t sub_1000457DC()
{
  return sub_100044EE4(&qword_1000A1DE8, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetList);
}

uint64_t *initializeBufferWithCopyOfBuffer for SyncAsset(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      sub_10001FF5C(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (char *)a1 + v14;
    unint64_t v16 = (char *)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
  }
  return a1;
}

uint64_t initializeWithCopy for SyncAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_10001FF5C(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  return a1;
}

uint64_t assignWithCopy for SyncAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      sub_10001FF5C(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      *uint64_t v8 = v12;
      v8[1] = v10;
      sub_10002001C(v13, v14);
      goto LABEL_8;
    }
    sub_10003D928((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v11 = *v9;
  sub_10001FF5C(v11, v10);
  *uint64_t v8 = v11;
  v8[1] = v10;
LABEL_8:
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = a1 + v15;
  char v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  *(unsigned char *)(v16 + 8) = *((unsigned char *)v17 + 8);
  *(void *)uint64_t v16 = v18;
  return a1;
}

uint64_t initializeWithTake for SyncAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  return a1;
}

uint64_t assignWithTake for SyncAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      *uint64_t v8 = *v9;
      v8[1] = v11;
      sub_10002001C(v12, v10);
      goto LABEL_6;
    }
    sub_10003D928((uint64_t)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
LABEL_6:
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100045CB4);
}

uint64_t sub_100045CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    BOOL v11 = ((4 * v10) & 0xC) == 0;
    unsigned int v12 = ((4 * v10) & 0xC | (v10 >> 2)) ^ 0xF;
    if (v11) {
      return 0;
    }
    else {
      return v12;
    }
  }
}

uint64_t storeEnumTagSinglePayload for SyncAsset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100045D94);
}

uint64_t sub_100045D94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    BOOL v11 = (void *)(a1 + *(int *)(a4 + 20));
    void *v11 = 0;
    v11[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  return result;
}

uint64_t sub_100045E60()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SyncAssetCollection(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    unsigned int v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    unint64_t v16 = *((void *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    }
    else
    {
      uint64_t v17 = *(void *)v15;
      sub_10001FF5C(*(void *)v15, *((void *)v15 + 1));
      *(void *)uint64_t v14 = v17;
      *((void *)v14 + 1) = v16;
    }
    uint64_t v18 = a3[7];
    uint64_t v19 = a3[8];
    uint64_t v20 = (uint64_t *)((char *)v7 + v18);
    char v21 = (uint64_t *)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    void *v20 = *v21;
    v20[1] = v22;
    BOOL v23 = (uint64_t *)((char *)v7 + v19);
    char v24 = (uint64_t *)((char *)a2 + v19);
    uint64_t v25 = v24[1];
    void *v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = a3[9];
    uint64_t v27 = (char *)v7 + v26;
    int v28 = (_OWORD *)((char *)a2 + v26);
    unint64_t v29 = *(uint64_t *)((char *)a2 + v26 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v27 = *v28;
    }
    else
    {
      uint64_t v30 = *(void *)v28;
      sub_10001FF5C(v30, v29);
      *(void *)uint64_t v27 = v30;
      *((void *)v27 + 1) = v29;
    }
  }
  return v7;
}

uint64_t destroy for SyncAssetCollection(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = (uint64_t *)(a1 + a2[6]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10002001C(*v6, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(a1 + a2[9]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15)
  {
    uint64_t v11 = *v9;
    return sub_10002001C(v11, v10);
  }
  return result;
}

void *initializeWithCopy for SyncAssetCollection(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  unint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  unsigned int v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  unint64_t v14 = *((void *)v13 + 1);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)unsigned int v12 = *(_OWORD *)v13;
  }
  else
  {
    uint64_t v15 = *(void *)v13;
    sub_10001FF5C(*(void *)v13, *((void *)v13 + 1));
    *(void *)unsigned int v12 = v15;
    *((void *)v12 + 1) = v14;
  }
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)((char *)a1 + v16);
  uint64_t v19 = (void *)((char *)a2 + v16);
  uint64_t v20 = v19[1];
  void *v18 = *v19;
  v18[1] = v20;
  char v21 = (void *)((char *)a1 + v17);
  uint64_t v22 = (void *)((char *)a2 + v17);
  uint64_t v23 = v22[1];
  *char v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = a3[9];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (_OWORD *)((char *)a2 + v24);
  unint64_t v27 = *(void *)((char *)a2 + v24 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v25 = *v26;
  }
  else
  {
    uint64_t v28 = *(void *)v26;
    sub_10001FF5C(v28, v27);
    *(void *)uint64_t v25 = v28;
    *((void *)v25 + 1) = v27;
  }
  return a1;
}

void *assignWithCopy for SyncAssetCollection(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  unsigned int v12 = (void *)((char *)a2 + v10);
  unint64_t v13 = *(void *)((char *)a2 + v10 + 8);
  if (*(void *)((char *)a1 + v10 + 8) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v14 = *v12;
      sub_10001FF5C(v14, v13);
      uint64_t *v11 = v14;
      v11[1] = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    sub_10003D928((uint64_t)v11);
LABEL_6:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }
  uint64_t v15 = *v12;
  sub_10001FF5C(v15, v13);
  uint64_t v16 = *v11;
  unint64_t v17 = v11[1];
  uint64_t *v11 = v15;
  v11[1] = v13;
  sub_10002001C(v16, v17);
LABEL_8:
  uint64_t v18 = a3[7];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[8];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[9];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  unint64_t v27 = *(void *)((char *)a2 + v24 + 8);
  if (*(void *)((char *)a1 + v24 + 8) >> 60 != 15)
  {
    if (v27 >> 60 != 15)
    {
      uint64_t v29 = *v26;
      sub_10001FF5C(v29, v27);
      uint64_t v30 = *v25;
      unint64_t v31 = v25[1];
      uint64_t *v25 = v29;
      v25[1] = v27;
      sub_10002001C(v30, v31);
      return a1;
    }
    sub_10003D928((uint64_t)v25);
    goto LABEL_13;
  }
  if (v27 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    return a1;
  }
  uint64_t v28 = *v26;
  sub_10001FF5C(v28, v27);
  uint64_t *v25 = v28;
  v25[1] = v27;
  return a1;
}

void *initializeWithTake for SyncAssetCollection(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

void *assignWithTake for SyncAssetCollection(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (uint64_t)a1 + v10;
  unsigned int v12 = (char *)a2 + v10;
  unint64_t v13 = *(void *)((char *)a1 + v10 + 8);
  if (v13 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v14 = *((void *)v12 + 1);
  if (v14 >> 60 == 15)
  {
    sub_10003D928(v11);
LABEL_4:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)v11;
  *(void *)uint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = v14;
  sub_10002001C(v15, v13);
LABEL_6:
  uint64_t v16 = a3[7];
  unint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *unint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[8];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[9];
  unint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = (void *)((char *)a2 + v26);
  unint64_t v29 = *(void *)((char *)a1 + v26 + 8);
  if (v29 >> 60 != 15)
  {
    unint64_t v30 = v28[1];
    if (v30 >> 60 != 15)
    {
      uint64_t v31 = *v27;
      *unint64_t v27 = *v28;
      v27[1] = v30;
      sub_10002001C(v31, v29);
      return a1;
    }
    sub_10003D928((uint64_t)v27);
  }
  *(_OWORD *)unint64_t v27 = *(_OWORD *)v28;
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncAssetCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100046704);
}

uint64_t storeEnumTagSinglePayload for SyncAssetCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004671C);
}

uint64_t sub_100046720()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SyncLibrary(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    a1[1] = a2[1];
    uint64_t v6 = *(int *)(a3 + 24);
    unint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for SyncLibrary(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for SyncLibrary(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for SyncLibrary(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for SyncLibrary(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for SyncLibrary(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncLibrary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100046BC0);
}

uint64_t storeEnumTagSinglePayload for SyncLibrary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100046BD8);
}

uint64_t sub_100046BDC()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for SyncCollectionTargetItem(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    unsigned int v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    unint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    unint64_t v16 = *((void *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    }
    else
    {
      uint64_t v17 = *(void *)v15;
      sub_10001FF5C(*(void *)v15, *((void *)v15 + 1));
      *(void *)unint64_t v14 = v17;
      *((void *)v14 + 1) = v16;
    }
    uint64_t v18 = a3[8];
    uint64_t v19 = a3[9];
    uint64_t v20 = (char *)v7 + v18;
    uint64_t v21 = (char *)a2 + v18;
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
    v20[4] = v21[4];
    uint64_t v22 = (void *)((char *)v7 + v19);
    uint64_t v23 = (void *)((char *)a2 + v19);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = a3[10];
    uint64_t v26 = a3[11];
    unint64_t v27 = (void *)((char *)v7 + v25);
    uint64_t v28 = (void *)((char *)a2 + v25);
    uint64_t v29 = v28[1];
    *unint64_t v27 = *v28;
    v27[1] = v29;
    unint64_t v30 = (char *)v7 + v26;
    uint64_t v31 = (void *)((char *)a2 + v26);
    unint64_t v32 = *(void *)((char *)a2 + v26 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
    }
    else
    {
      uint64_t v33 = *v31;
      sub_10001FF5C(*v31, v32);
      *(void *)unint64_t v30 = v33;
      *((void *)v30 + 1) = v32;
    }
    uint64_t v34 = a3[13];
    *((unsigned char *)v7 + a3[12]) = *((unsigned char *)a2 + a3[12]);
    *((unsigned char *)v7 + v34) = *((unsigned char *)a2 + v34);
  }
  return v7;
}

uint64_t destroy for SyncCollectionTargetItem(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = (uint64_t *)(a1 + a2[7]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10002001C(*v6, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(a1 + a2[11]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15)
  {
    uint64_t v11 = *v9;
    return sub_10002001C(v11, v10);
  }
  return result;
}

void *initializeWithCopy for SyncCollectionTargetItem(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  unint64_t v14 = (char *)a2 + v12;
  unint64_t v15 = *((void *)v14 + 1);
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v16 = *(void *)v14;
    sub_10001FF5C(*(void *)v14, *((void *)v14 + 1));
    *(void *)uint64_t v13 = v16;
    *((void *)v13 + 1) = v15;
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = (char *)a1 + v17;
  uint64_t v20 = (char *)a2 + v17;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  v19[4] = v20[4];
  uint64_t v21 = (void *)((char *)a1 + v18);
  uint64_t v22 = (void *)((char *)a2 + v18);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = a3[10];
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)((char *)a1 + v24);
  unint64_t v27 = (void *)((char *)a2 + v24);
  uint64_t v28 = v27[1];
  void *v26 = *v27;
  v26[1] = v28;
  uint64_t v29 = (char *)a1 + v25;
  unint64_t v30 = (void *)((char *)a2 + v25);
  unint64_t v31 = *(void *)((char *)a2 + v25 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  }
  else
  {
    uint64_t v32 = *v30;
    sub_10001FF5C(*v30, v31);
    *(void *)uint64_t v29 = v32;
    *((void *)v29 + 1) = v31;
  }
  uint64_t v33 = a3[13];
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  *((unsigned char *)a1 + v33) = *((unsigned char *)a2 + v33);
  return a1;
}

void *assignWithCopy for SyncCollectionTargetItem(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  unint64_t v13 = *(void *)((char *)a2 + v10 + 8);
  if (*(void *)((char *)a1 + v10 + 8) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v14 = *v12;
      sub_10001FF5C(v14, v13);
      uint64_t *v11 = v14;
      v11[1] = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    sub_10003D928((uint64_t)v11);
LABEL_6:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }
  uint64_t v15 = *v12;
  sub_10001FF5C(v15, v13);
  uint64_t v16 = *v11;
  unint64_t v17 = v11[1];
  uint64_t *v11 = v15;
  v11[1] = v13;
  sub_10002001C(v16, v17);
LABEL_8:
  uint64_t v18 = a3[8];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  int v21 = *(_DWORD *)v20;
  v19[4] = v20[4];
  *(_DWORD *)uint64_t v19 = v21;
  uint64_t v22 = a3[9];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  void *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[10];
  uint64_t v26 = (void *)((char *)a1 + v25);
  unint64_t v27 = (void *)((char *)a2 + v25);
  void *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[11];
  uint64_t v29 = (void *)((char *)a1 + v28);
  unint64_t v30 = (void *)((char *)a2 + v28);
  unint64_t v31 = *(void *)((char *)a2 + v28 + 8);
  if (*(void *)((char *)a1 + v28 + 8) >> 60 != 15)
  {
    if (v31 >> 60 != 15)
    {
      uint64_t v33 = *v30;
      sub_10001FF5C(v33, v31);
      uint64_t v34 = *v29;
      unint64_t v35 = v29[1];
      *uint64_t v29 = v33;
      v29[1] = v31;
      sub_10002001C(v34, v35);
      goto LABEL_15;
    }
    sub_10003D928((uint64_t)v29);
    goto LABEL_13;
  }
  if (v31 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    goto LABEL_15;
  }
  uint64_t v32 = *v30;
  sub_10001FF5C(v32, v31);
  *uint64_t v29 = v32;
  v29[1] = v31;
LABEL_15:
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  return a1;
}

_OWORD *initializeWithTake for SyncCollectionTargetItem(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  v11[4] = v12[4];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  uint64_t v13 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  uint64_t v14 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  return a1;
}

void *assignWithTake for SyncCollectionTargetItem(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  unint64_t v13 = *(void *)((char *)a1 + v10 + 8);
  if (v13 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v14 = *((void *)v12 + 1);
  if (v14 >> 60 == 15)
  {
    sub_10003D928(v11);
LABEL_4:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)v11;
  *(void *)uint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = v14;
  sub_10002001C(v15, v13);
LABEL_6:
  uint64_t v16 = a3[8];
  uint64_t v17 = a3[9];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  void v18[4] = v19[4];
  uint64_t v20 = (void *)((char *)a1 + v17);
  int v21 = (void *)((char *)a2 + v17);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  void *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[10];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  void *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[11];
  unint64_t v30 = (void *)((char *)a1 + v29);
  unint64_t v31 = (void *)((char *)a2 + v29);
  unint64_t v32 = *(void *)((char *)a1 + v29 + 8);
  if (v32 >> 60 != 15)
  {
    unint64_t v33 = v31[1];
    if (v33 >> 60 != 15)
    {
      uint64_t v34 = *v30;
      uint64_t *v30 = *v31;
      v30[1] = v33;
      sub_10002001C(v34, v32);
      goto LABEL_11;
    }
    sub_10003D928((uint64_t)v30);
  }
  *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
LABEL_11:
  uint64_t v35 = a3[13];
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  *((unsigned char *)a1 + v35) = *((unsigned char *)a2 + v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncCollectionTargetItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000475AC);
}

uint64_t sub_1000475B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SyncCollectionTargetItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100047674);
}

void *sub_100047678(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100047720()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SyncCollectionTargetItem.AssetCollectionType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SyncCollectionTargetItem.AssetCollectionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004794CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SyncCollectionTargetItem.AssetCollectionType()
{
  return &type metadata for SyncCollectionTargetItem.AssetCollectionType;
}

unsigned char *storeEnumTagSinglePayload for SyncCollectionTargetItem.AssetCollectionSubtype(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100047A50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SyncCollectionTargetItem.AssetCollectionSubtype()
{
  return &type metadata for SyncCollectionTargetItem.AssetCollectionSubtype;
}

uint64_t *initializeBufferWithCopyOfBuffer for SyncCollectionTargetList(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    BOOL v7 = (char *)a1 + v6;
    int v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for SyncCollectionTargetList(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for SyncCollectionTargetList(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  int v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *assignWithCopy for SyncCollectionTargetList(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  int v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *initializeWithTake for SyncCollectionTargetList(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for SyncCollectionTargetList(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  int v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncCollectionTargetList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100047E2C);
}

uint64_t sub_100047E30(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SyncCollectionTargetList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100047EF4);
}

void *sub_100047EF8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100047FA0()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10004803C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000480A4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100048120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000BD30(a1, &qword_1000A1380);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000482CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v64 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v71 = (char *)&v56 - v13;
  uint64_t v14 = sub_100006290(&qword_1000A0C00);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[16] = v18;
  v4[17] = &_swiftEmptyDictionarySingleton;
  v4[14] = a1;
  v4[15] = v17;
  v4[18] = a3;
  v4[19] = a4;
  uint64_t v19 = (objc_class *)type metadata accessor for DeviceCapabilityObserver();
  v73.receiver = v4;
  v73.super_class = v19;
  id v20 = a1;
  uint64_t v58 = a4;
  swift_retain();
  int v21 = [super init];
  sub_100006290((uint64_t *)&unk_1000A08E0);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_100079C30;
  uint64_t v23 = v21[15];
  uint64_t v24 = v21[16];
  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 32) = v23;
  *(void *)(v22 + 40) = v24;
  uint64_t v25 = v21;
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v66 = v20;
  [v20 addPropertyObserver:v25 forPropertyChanges:isa];
  uint64_t v57 = v25;

  uint64_t v27 = *(void *)(a2 + 16);
  uint64_t v59 = a2;
  if (v27)
  {
    unint64_t v30 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    uint64_t v29 = v10 + 16;
    uint64_t v28 = v30;
    unint64_t v31 = (char *)(a2 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64)));
    uint64_t v67 = *(void *)(v29 + 56);
    id v65 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 40);
    uint64_t v62 = (void (**)(char *, char *, uint64_t))(v29 + 16);
    uint64_t v63 = (unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 32);
    uint64_t v70 = (void (**)(char *, uint64_t))(v29 - 8);
    unint64_t v32 = &_swiftEmptyDictionarySingleton;
    uint64_t v61 = v16;
    id v68 = (void (*)(unint64_t, char *, uint64_t))v30;
    v30(v16, v31, v9);
    while (1)
    {
      unint64_t v33 = *v65;
      (*v65)(v16, 0, 1, v9);
      if ((*v63)(v16, 1, v9) == 1) {
        break;
      }
      char v60 = v33;
      uint64_t v69 = v27;
      uint64_t v34 = (uint64_t)v71;
      uint64_t v35 = v29;
      v28(v71, v16, v9);
      uint64_t v36 = v64;
      (*v62)(v64, v16, v9);
      Class v37 = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v38 = *v70;
      uint64_t v39 = v9;
      (*v70)(v36, v9);
      unsigned __int8 v40 = [v66 supportsCapability:v37];

      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v72 = v32;
      unint64_t v43 = sub_1000517D4(v34);
      uint64_t v44 = v32[2];
      BOOL v45 = (v42 & 1) == 0;
      uint64_t v46 = v44 + v45;
      if (__OFADD__(v44, v45))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      char v47 = v42;
      if (v32[3] >= v46)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_10004AE30();
        }
      }
      else
      {
        sub_100049D10(v46, isUniquelyReferenced_nonNull_native);
        unint64_t v48 = sub_1000517D4((uint64_t)v71);
        if ((v47 & 1) != (v49 & 1)) {
          goto LABEL_21;
        }
        unint64_t v43 = v48;
      }
      uint64_t v9 = v39;
      unint64_t v32 = v72;
      if (v47)
      {
        *(unsigned char *)(v72[7] + v43) = v40;
        uint64_t v29 = v35;
      }
      else
      {
        v72[(v43 >> 6) + 8] |= 1 << v43;
        uint64_t v50 = v39;
        uint64_t v29 = v35;
        v68(v32[6] + v43 * v67, v71, v50);
        *(unsigned char *)(v32[7] + v43) = v40;
        uint64_t v51 = v32[2];
        BOOL v52 = __OFADD__(v51, 1);
        uint64_t v53 = v51 + 1;
        if (v52) {
          goto LABEL_20;
        }
        v32[2] = v53;
      }
      swift_bridgeObjectRelease();
      v38(v71, v9);
      uint64_t v28 = (void (*)(char *, char *, uint64_t))v68;
      v31 += v67;
      uint64_t v27 = v69 - 1;
      uint64_t v16 = v61;
      if (v69 == 1)
      {
        v60(v61, 1, 1, v9);
        break;
      }
      v68((unint64_t)v61, v31, v9);
    }
  }
  else
  {
    unint64_t v32 = &_swiftEmptyDictionarySingleton;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v16, 1, 1, v9);
  }
  swift_release();
  uint64_t v54 = v57;

  swift_bridgeObjectRelease();
  swift_beginAccess();
  v54[17] = v32;
  swift_bridgeObjectRelease();
  return (uint64_t)v54;
}

uint64_t sub_100048808()
{
  unint64_t v1 = *(void **)(v0 + 112);
  sub_100006290((uint64_t *)&unk_1000A08E0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100079C30;
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 40) = v3;
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v1 removePropertyObserver:v0 forPropertyChanges:isa];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000488D8()
{
  sub_100048808();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100048904(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100006290((uint64_t *)&unk_1000A21B0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, v6);
  type metadata accessor for DeviceCapabilityObserver();
  swift_allocObject();
  id v12 = a2;
  swift_bridgeObjectRetain();
  sub_1000482CC(v12, a3, (uint64_t)sub_10004B40C, v11);
  return AsyncStream.Continuation.onTermination.setter();
}

uint64_t sub_100048A94()
{
  uint64_t v0 = sub_100006290(&qword_1000A21C0);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  AsyncStream.Continuation.yield<A>()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

void sub_100048B5C(uint64_t a1, char a2, void *a3, unsigned char *a4, uint64_t a5)
{
  int v9 = a2 & 1;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  unsigned int v15 = [a3 supportsCapability:isa];

  if (v15 != v9)
  {
    *a4 = 1;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *(void *)(a5 + 136);
    *(void *)(a5 + 136) = 0x8000000000000000;
    sub_10004A4E8(v15, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
    *(void *)(a5 + 136) = v17;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_endAccess();
  }
}

uint64_t type metadata accessor for DeviceCapabilityObserver()
{
  return self;
}

uint64_t sub_100048D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  return _swift_task_switch(sub_100048D6C, 0, 0);
}

uint64_t sub_100048D6C()
{
  uint64_t v1 = (void *)v0[5];
  if (v1)
  {
    sub_1000493A4();
    id v2 = v1;
    if (static NSObject.== infix(_:_:)())
    {
      uint64_t v3 = v0[8];
      if (v3)
      {
        uint64_t v4 = v0[6];
        if (*(void *)(v4 + 120) == v0[7] && v3 == *(void *)(v4 + 128)) {
          goto LABEL_10;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)())
        {
          uint64_t v4 = v0[6];
LABEL_10:
          return _swift_task_switch(sub_100048E68, v4, 0);
        }
      }
    }
  }
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100048E68()
{
  *(unsigned char *)(v0 + 72) = 0;
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  swift_beginAccess();
  uint64_t v3 = (void *)swift_task_alloc();
  v3[2] = v2;
  v3[3] = v0 + 72;
  v3[4] = v1;
  uint64_t v4 = swift_bridgeObjectRetain();
  sub_10004B0C0(v4, (void (*)(char *))sub_1000493E4);
  swift_bridgeObjectRelease();
  uint64_t v5 = swift_task_dealloc();
  if (*(unsigned char *)(v0 + 72) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v0 + 48) + 144))(v5);
  }
  return _swift_task_switch(sub_100048F64, 0, 0);
}

uint64_t sub_100048F64()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004917C()
{
  swift_unknownObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000491CC()
{
  long long v6 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10001768C;
  *(void *)(v4 + 56) = v2;
  *(void *)(v4 + 64) = v3;
  *(_OWORD *)(v4 + 40) = v6;
  return _swift_task_switch(sub_100048D6C, 0, 0);
}

uint64_t sub_100049290(uint64_t a1, int *a2)
{
  long long v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10001634C;
  return v6(a1);
}

uint64_t sub_10004936C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000493A4()
{
  unint64_t result = qword_1000A2188;
  if (!qword_1000A2188)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A2188);
  }
  return result;
}

void sub_1000493E4(uint64_t a1, char a2)
{
  sub_100048B5C(a1, a2, *(void **)(v2 + 16), *(unsigned char **)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_1000493F0(uint64_t a1, char a2)
{
  uint64_t v4 = *v2;
  sub_100006290(&qword_1000A21D8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (*(void *)(v4 + 16))
  {
    int64_t v7 = 0;
    uint64_t v29 = (void *)(v4 + 64);
    uint64_t v8 = 1 << *(unsigned char *)(v4 + 32);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 64);
    int64_t v28 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = result + 64;
    while (1)
    {
      if (v10)
      {
        unint64_t v13 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v14 = v13 | (v7 << 6);
      }
      else
      {
        int64_t v15 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v4 + 64;
        if (v15 >= v28) {
          goto LABEL_34;
        }
        unint64_t v16 = v29[v15];
        ++v7;
        if (!v16)
        {
          int64_t v7 = v15 + 1;
          if (v15 + 1 >= v28) {
            goto LABEL_34;
          }
          unint64_t v16 = v29[v7];
          if (!v16)
          {
            int64_t v17 = v15 + 2;
            if (v17 >= v28)
            {
LABEL_34:
              if (a2)
              {
                uint64_t v27 = 1 << *(unsigned char *)(v4 + 32);
                if (v27 >= 64) {
                  bzero(v29, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v29 = -1 << v27;
                }
                *(void *)(v4 + 16) = 0;
              }
              break;
            }
            unint64_t v16 = v29[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v7 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_42;
                }
                if (v7 >= v28) {
                  goto LABEL_34;
                }
                unint64_t v16 = v29[v7];
                ++v17;
                if (v16) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v7 = v17;
          }
        }
LABEL_21:
        unint64_t v10 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
      }
      __int16 v18 = *(unsigned __int8 *)(*(void *)(v4 + 48) + v14);
      uint64_t v19 = (long long *)(*(void *)(v4 + 56) + 40 * v14);
      if (a2) {
        sub_100020D08(v19, (uint64_t)v30);
      }
      else {
        sub_100020828((uint64_t)v19, (uint64_t)v30);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18 + 100);
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v11 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v6 + 48) + v12) = v18;
      uint64_t result = sub_100020D08(v30, *(void *)(v6 + 56) + 40 * v12);
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v2 = v6;
  return result;
}

uint64_t sub_1000496D0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100006290(&qword_1000A21C8);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    uint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    unint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    BOOL v25 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
    if (v37)
    {
      sub_100020D08(v25, (uint64_t)v38);
    }
    else
    {
      sub_100020828((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    int64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *int64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = sub_100020D08(v38, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000499F8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100006290(&qword_1000A21D0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_100006B64((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_100034BF4(v25, (uint64_t)&v38);
      sub_10000C31C(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_100006B64(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100049D10(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100006290(&qword_1000A2198);
  int v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    char v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    long long v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    unint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      char v28 = *(unsigned char *)(*(void *)(v9 + 56) + v21);
      sub_10004B320();
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(unsigned char *)(*(void *)(v11 + 56) + v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_10004A104(long long *a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1000516A8(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10004A898();
      goto LABEL_7;
    }
    sub_1000493F0(v13, a3 & 1);
    unint64_t v19 = sub_1000516A8(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 40 * v10;
    sub_10000C2CC(v17);
    return sub_100020D08(a1, v17);
  }
LABEL_13:

  return sub_10004A688(v10, a2, a1, v16);
}

uint64_t sub_10004A244(long long *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100051718(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10004AA5C();
      goto LABEL_7;
    }
    sub_1000496D0(v15, a4 & 1);
    unint64_t v21 = sub_100051718(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      int64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  int64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 40 * v12;
    sub_10000C2CC(v19);
    return sub_100020D08(a1, v19);
  }
LABEL_13:
  sub_10004A6F4(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

_OWORD *sub_10004A39C(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100051790(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10004AC48();
      goto LABEL_7;
    }
    sub_1000499F8(v13, a3 & 1);
    unint64_t v19 = sub_100051790(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_100034BF4(a2, (uint64_t)v21);
      return sub_10004A764(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  sub_10000C2CC((uint64_t)v17);

  return sub_100006B64(a1, v17);
}

uint64_t sub_10004A4E8(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_1000517D4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(unsigned char *)(v20[7] + v14) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10004AE30();
    goto LABEL_7;
  }
  sub_100049D10(result, a3 & 1);
  uint64_t result = sub_1000517D4(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  char v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10004A7E0(v14, (uint64_t)v11, a1 & 1, v20);
}

uint64_t sub_10004A688(unint64_t a1, char a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t result = sub_100020D08(a3, a4[7] + 40 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_10004A6F4(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100020D08(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

_OWORD *sub_10004A764(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_100006B64(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_10004A7E0(unint64_t a1, uint64_t a2, char a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(unsigned char *)(a4[7] + a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

void *sub_10004A898()
{
  uint64_t v1 = v0;
  sub_100006290(&qword_1000A21D8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    sub_100020828(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v20);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = v16;
    uint64_t result = (void *)sub_100020D08(v20, *(void *)(v4 + 56) + 40 * v15);
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10004AA5C()
{
  uint64_t v1 = v0;
  sub_100006290(&qword_1000A21C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_100020828(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    char v21 = (void *)(*(void *)(v4 + 48) + v16);
    *char v21 = v19;
    v21[1] = v18;
    sub_100020D08(v26, *(void *)(v4 + 56) + v20);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10004AC48()
{
  uint64_t v1 = v0;
  sub_100006290(&qword_1000A21D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_100034BF4(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_10000C31C(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = sub_100006B64(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10004AE30()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006290(&qword_1000A2198);
  unint64_t v22 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *unint64_t v22 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v23 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v26 = v2 + 16;
  int64_t v24 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v25 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    char v17 = *(unsigned char *)(*(void *)(v5 + 56) + v15);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(unsigned char *)(*(void *)(v7 + 56) + v15) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v24) {
    goto LABEL_23;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10004B0C0(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = sub_100006290(&qword_1000A2190);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v21 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v22 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v22) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v21 + 8 * v17);
    ++v12;
    if (!v18)
    {
      int64_t v12 = v17 + 1;
      if (v17 + 1 >= v22) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v21 + 8 * v12);
      if (!v18)
      {
        int64_t v12 = v17 + 2;
        if (v17 + 2 >= v22) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v21 + 8 * v12);
        if (!v18)
        {
          int64_t v12 = v17 + 3;
          if (v17 + 3 >= v22) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v21 + 8 * v12);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v10 = (v18 - 1) & v18;
    unint64_t v14 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v6, v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v16);
    v6[*(int *)(v4 + 48)] = *(unsigned char *)(*(void *)(a1 + 56) + v14);
    a2(v6);
    uint64_t result = sub_10000BD30((uint64_t)v6, &qword_1000A2190);
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v22) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v21 + 8 * v19);
  if (v18)
  {
    int64_t v12 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v12 >= v22) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v21 + 8 * v12);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_10004B320()
{
  unint64_t result = qword_1000A21A0;
  if (!qword_1000A21A0)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A21A0);
  }
  return result;
}

uint64_t sub_10004B378()
{
  uint64_t v1 = sub_100006290((uint64_t *)&unk_1000A21B0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004B40C()
{
  sub_100006290((uint64_t *)&unk_1000A21B0);

  return sub_100048A94();
}

void sub_10004B470(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ErrorResponse();
  sub_10004B5A0();
  uint64_t v5 = Message.serializedData(partial:)();
  if (v2)
  {
    sub_100035324(a1);
  }
  else
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    id v9 = objc_allocWithZone((Class)IDSProtobuf);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v11 = [v9 initWithProtobufData:isa type:100 isResponse:1];

    if (v11)
    {
      sub_10002001C(v7, v8);
      sub_100035324(a1);
      swift_bridgeObjectRelease_n();
      *(void *)a2 = v11;
      *(unsigned char *)(a2 + 8) = 2;
      *(void *)(a2 + 16) = 0;
      *(_WORD *)(a2 + 24) = 513;
      *(void *)(a2 + 32) = 0x404E000000000000;
      *(unsigned char *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 64) = 2;
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 80) = 0;
      *(_WORD *)(a2 + 88) = 2;
      *(void *)(a2 + 96) = 200;
    }
    else
    {
      __break(1u);
    }
  }
}

unint64_t sub_10004B5A0()
{
  unint64_t result = qword_1000A1838;
  if (!qword_1000A1838)
  {
    type metadata accessor for ErrorResponse();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1838);
  }
  return result;
}

ValueMetadata *type metadata accessor for ErrorResponseMessage()
{
  return &type metadata for ErrorResponseMessage;
}

void sub_10004B608(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for SyncLibraryInfoResponse(0);
  sub_10004B73C();
  uint64_t v5 = Message.serializedData(partial:)();
  if (v2)
  {
    sub_10004B794(a1);
  }
  else
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    id v9 = objc_allocWithZone((Class)IDSProtobuf);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v11 = [v9 initWithProtobufData:isa type:102 isResponse:1];

    if (v11)
    {
      sub_10002001C(v7, v8);
      sub_10004B794(a1);
      swift_bridgeObjectRelease_n();
      *(void *)a2 = v11;
      *(unsigned char *)(a2 + 8) = 2;
      *(void *)(a2 + 16) = 0;
      *(_WORD *)(a2 + 24) = 513;
      *(void *)(a2 + 32) = 0x404E000000000000;
      *(unsigned char *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 64) = 2;
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 80) = 0;
      *(_WORD *)(a2 + 88) = 514;
      *(void *)(a2 + 96) = 200;
    }
    else
    {
      __break(1u);
    }
  }
}

unint64_t sub_10004B73C()
{
  unint64_t result = qword_1000A1320;
  if (!qword_1000A1320)
  {
    type metadata accessor for SyncLibraryInfoResponse(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1320);
  }
  return result;
}

uint64_t sub_10004B794(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SyncLibraryInfoResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for LibraryInfoResponseMessage()
{
  return &type metadata for LibraryInfoResponseMessage;
}

uint64_t sub_10004B800(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100006290(&qword_1000A1380);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  unint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v2;
  v10[5] = a1;
  v10[6] = a2;
  int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  swift_retain();
  if (v11 == 1)
  {
    sub_10000BD30((uint64_t)v7, &qword_1000A1380);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (v10[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      if (v14 | v12)
      {
        v16[0] = 0;
        v16[1] = 0;
        _OWORD v16[2] = v12;
        v16[3] = v14;
      }
    }
  }
  return swift_task_create();
}

uint64_t sub_10004BA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_10000BD30(a1, &qword_1000A1380);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_10004BBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  return _swift_task_switch(sub_10004BBDC, 0, 0);
}

uint64_t sub_10004BBDC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 32) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10004BCC0;
  uint64_t v4 = *(void *)(v0 + 16);
  return withCancellationHandlingContinuation<A>(timeout:_:)(v4, 0, 1, sub_10004C1A4, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_10004BCC0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10004BDFC, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10004BDFC()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004BE60()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10004BEA0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 32);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_10001768C;
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return _swift_task_switch(sub_10004BBDC, 0, 0);
}

uint64_t sub_10004BF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100006290(&qword_1000A1380);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  int v11 = (void *)swift_allocObject();
  _OWORD v11[2] = a3;
  v11[3] = a4;
  v11[4] = a1;
  aBlock[4] = sub_10004C30C;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007D64;
  aBlock[3] = &unk_100092E40;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id v13 = [ObjCClassFromMetadata performBlockAfterFirstUnlock:v12];
  _Block_release(v12);
  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_100011178((uint64_t)v17, (uint64_t)aBlock);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  sub_10004CB7C((uint64_t)aBlock, (uint64_t)v17);
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = a1;
  sub_100011178((uint64_t)v17, (uint64_t)(v15 + 5));
  swift_retain();
  sub_100048120((uint64_t)v9, (uint64_t)&unk_1000A2288, (uint64_t)v15);
  swift_release();
  return sub_10000BD30((uint64_t)aBlock, (uint64_t *)&unk_1000A0BC0);
}

uint64_t sub_10004C1A4(uint64_t a1)
{
  return sub_10004BF64(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10004C1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100006290(&qword_1000A1380);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  unint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = a1;
  v10[5] = a2;
  v10[6] = a3;
  swift_retain();
  swift_retain();
  sub_100048120((uint64_t)v8, (uint64_t)&unk_1000A22A8, (uint64_t)v10);
  return swift_release();
}

uint64_t sub_10004C2CC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10004C30C()
{
  return sub_10004C1B0(v0[2], v0[3], v0[4]);
}

uint64_t sub_10004C318(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 32) = a6;
  uint64_t v9 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 40) = v7;
  void *v7 = v6;
  v7[1] = sub_10004C3E8;
  return v9();
}

uint64_t sub_10004C3E8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10004C64C, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v2 + 56) = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_10004C558;
    return CancellationHandlingContinuation<>.resume()();
  }
}

uint64_t sub_10004C558()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10004C64C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  *(void *)(v0 + 16) = *(void *)(v0 + 48);
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v2 = *(int **)(*(void *)v1 + 192);
  swift_errorRetain();
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10004C76C;
  return v5(v0 + 16);
}

uint64_t sub_10004C76C()
{
  swift_task_dealloc();
  swift_errorRelease();
  return _swift_task_switch(sub_10004C884, 0, 0);
}

uint64_t sub_10004C884()
{
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004C8E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004C8F4()
{
  return swift_release();
}

uint64_t sub_10004C8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 48) = a4;
  *(void *)(v5 + 56) = a5;
  return _swift_task_switch(sub_10004C91C, 0, 0);
}

uint64_t sub_10004C91C()
{
  uint64_t v1 = v0[6];
  sub_10004CB7C(v0[7], (uint64_t)(v0 + 2));
  uint64_t v2 = swift_allocObject();
  v0[8] = v2;
  sub_100011178((uint64_t)(v0 + 2), v2 + 16);
  uint64_t v5 = (uint64_t (*)(void *, uint64_t))(*(void *)(*(void *)v1 + 168) + **(int **)(*(void *)v1 + 168));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[9] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10004CA6C;
  return v5(&unk_1000A2298, v2);
}

uint64_t sub_10004CA6C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10004CB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006290((uint64_t *)&unk_1000A0BC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004CBE4()
{
  swift_unknownObjectRelease();
  swift_release();
  if (*(void *)(v0 + 64)) {
    sub_10000C2CC(v0 + 40);
  }

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10004CC34()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001768C;
  v3[6] = v2;
  v3[7] = v0 + 40;
  return _swift_task_switch(sub_10004C91C, 0, 0);
}

uint64_t sub_10004CCE4()
{
  return _swift_task_switch(sub_10002C3D0, 0, 0);
}

uint64_t sub_10004CD00()
{
  if (*(void *)(v0 + 40)) {
    sub_10000C2CC(v0 + 16);
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004CD40()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100021434;
  return _swift_task_switch(sub_10002C3D0, 0, 0);
}

uint64_t sub_10004CDE4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10004CE2C()
{
  uint64_t v2 = *(int **)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100021434;
  v4[4] = v3;
  uint64_t v7 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v5 = (void *)swift_task_alloc();
  void v4[5] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10004C3E8;
  return v7();
}

void sub_10004CF54()
{
  uint64_t v2 = sub_100006290(&qword_1000A1318);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SyncCollectionTargetList(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (void *)((char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for SyncLibraryInfoResponse(0);
  sub_1000352C0(v0 + *(int *)(v9 + 24), (uint64_t)v4, &qword_1000A1318);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    *uint64_t v8 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    sub_10000BD30((uint64_t)v4, &qword_1000A1318);
  }
  else
  {
    sub_100022DA0((uint64_t)v4, (uint64_t)v8, type metadata accessor for SyncCollectionTargetList);
  }
  sub_10004D44C(&qword_1000A1308, (void (*)(uint64_t))type metadata accessor for SyncCollectionTargetList);
  uint64_t v10 = Message.serializedData(partial:)();
  if (v1)
  {
    sub_100038818((uint64_t)v8, type metadata accessor for SyncCollectionTargetList);
  }
  else
  {
    uint64_t v12 = v10;
    unint64_t v13 = v11;
    sub_100038818((uint64_t)v8, type metadata accessor for SyncCollectionTargetList);
    id v14 = objc_allocWithZone((Class)NPTOCollectionTargetList);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10002001C(v12, v13);
    id v16 = [v14 initWithData:isa];

    if (!v16) {
      __break(1u);
    }
  }
}

void sub_10004D1D0()
{
  uint64_t v2 = sub_100006290(&qword_1000A1310);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SyncLibrary(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (void *)((char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for SyncLibraryInfoResponse(0);
  sub_1000352C0(v0 + *(int *)(v9 + 20), (uint64_t)v4, &qword_1000A1310);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    *uint64_t v8 = &_swiftEmptyArrayStorage;
    v8[1] = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    sub_10000BD30((uint64_t)v4, &qword_1000A1310);
  }
  else
  {
    sub_100022DA0((uint64_t)v4, (uint64_t)v8, type metadata accessor for SyncLibrary);
  }
  sub_10004D44C(&qword_1000A1300, (void (*)(uint64_t))type metadata accessor for SyncLibrary);
  uint64_t v10 = Message.serializedData(partial:)();
  if (v1)
  {
    sub_100038818((uint64_t)v8, type metadata accessor for SyncLibrary);
  }
  else
  {
    uint64_t v12 = v10;
    unint64_t v13 = v11;
    sub_100038818((uint64_t)v8, type metadata accessor for SyncLibrary);
    id v14 = objc_allocWithZone((Class)NPTOLibrary);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10002001C(v12, v13);
    id v16 = [v14 initWithData:isa];

    if (!v16) {
      __break(1u);
    }
  }
}

uint64_t sub_10004D44C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004D494(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = swift_getObjectType();
  return _swift_task_switch(sub_10004D504, 0, 0);
}

uint64_t sub_10004D504()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  v2[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v2[2].i64[0] = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  uint64_t v4 = sub_100006290((uint64_t *)&unk_1000A13C0);
  *uint64_t v3 = v0;
  v3[1] = sub_10004D614;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000011, 0x8000000100082110, sub_10004E978, v2, v4);
}

uint64_t sub_10004D614()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10004D72C, 0, 0);
}

uint64_t sub_10004D72C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_10004D744()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_10004E8F0();
  static DispatchQoS.unspecified.getter();
  v7[1] = &_swiftEmptyArrayStorage;
  sub_10004E930((unint64_t *)&qword_1000A15F0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100006290((uint64_t *)&unk_1000A09B0);
  sub_10000BE9C(&qword_1000A1600, (uint64_t *)&unk_1000A09B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_1000A22B0 = result;
  return result;
}

uint64_t sub_10004D984(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006290(&qword_1000A22D0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  if (qword_1000A0F10 != -1) {
    swift_once();
  }
  v16[1] = qword_1000A22B0;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v17;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v13 + v12, (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_10004EB58;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007D64;
  aBlock[3] = &unk_100092FA8;
  id v14 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  uint64_t v20 = &_swiftEmptyArrayStorage;
  sub_10004E930(&qword_1000A09D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100006290(&qword_1000A09D8);
  sub_10000BE9C(&qword_1000A09E0, &qword_1000A09D8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v18);
  return swift_release();
}

uint64_t sub_10004DD30()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10004DD8C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v23 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006290(&qword_1000A22C8);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A0F10 != -1) {
    swift_once();
  }
  uint64_t v21 = qword_1000A22B0;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = swift_allocObject();
  id v16 = v23;
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, v13, v10);
  aBlock[4] = sub_10004EA5C;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007D64;
  aBlock[3] = &unk_100092F58;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = a2;
  id v19 = v16;
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = &_swiftEmptyArrayStorage;
  sub_10004E930(&qword_1000A09D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100006290(&qword_1000A09D8);
  sub_10000BE9C(&qword_1000A09E0, &qword_1000A09D8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v24);
  return swift_release();
}

uint64_t sub_10004E148(void *a1, uint64_t a2)
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10004E1A4(uint64_t a1, void *a2, uint64_t a3)
{
  char v28 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  __chkstk_darwin(v5);
  char v32 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v7 - 8);
  uint64_t v31 = v7;
  __chkstk_darwin(v7);
  uint64_t v29 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006290(&qword_1000A22B8);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  id v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A0F10 != -1) {
    swift_once();
  }
  v27[1] = qword_1000A22B0;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + *(unsigned __int8 *)(v10 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v28;
  *(void *)(v19 + 16) = v28;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v19 + v17, v16, v13);
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v19 + v18, v12, v9);
  aBlock[4] = sub_10004E804;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007D64;
  aBlock[3] = &unk_100092F08;
  uint64_t v21 = _Block_copy(aBlock);
  id v22 = v20;
  uint64_t v23 = v29;
  static DispatchQoS.unspecified.getter();
  uint64_t v35 = &_swiftEmptyArrayStorage;
  sub_10004E930(&qword_1000A09D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100006290(&qword_1000A09D8);
  sub_10000BE9C(&qword_1000A09E0, &qword_1000A09D8);
  uint64_t v24 = v32;
  uint64_t v25 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v25);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v31);
  return swift_release();
}

uint64_t sub_10004E62C(void *a1)
{
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [a1 supportsCapability:isa];

  sub_100006290(&qword_1000A22B8);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10004E6A8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = sub_100006290(&qword_1000A22B8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10004E804()
{
  type metadata accessor for UUID();
  sub_100006290(&qword_1000A22B8);
  uint64_t v1 = *(void **)(v0 + 16);

  return sub_10004E62C(v1);
}

uint64_t sub_10004E8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004E8E8()
{
  return swift_release();
}

unint64_t sub_10004E8F0()
{
  unint64_t result = qword_1000A09A0;
  if (!qword_1000A09A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A09A0);
  }
  return result;
}

uint64_t sub_10004E930(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004E978(uint64_t a1)
{
  return sub_10004DD8C(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10004E984()
{
  uint64_t v1 = sub_100006290(&qword_1000A22C8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004EA5C()
{
  sub_100006290(&qword_1000A22C8);
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);

  return sub_10004E148(v1, v2);
}

uint64_t sub_10004EAC4()
{
  uint64_t v1 = sub_100006290(&qword_1000A22D0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004EB58()
{
  sub_100006290(&qword_1000A22D0);

  return sub_10004DD30();
}

void sub_10004EBD0(void *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v55 = v2;
  uint64_t v56 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v58 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v57 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v59 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006290(&qword_1000A15B0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A0EA8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_100006D88(v14, (uint64_t)qword_1000A4F30);
  id v16 = a1;
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v50 = v9;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v51 = v15;
    uint64_t v20 = (uint8_t *)v19;
    unint64_t v48 = (void *)swift_slowAlloc();
    uint64_t v52 = v8;
    *(_DWORD *)uint64_t v20 = 138412290;
    char v49 = v13;
    aBlock[0] = v16;
    id v21 = v16;
    uint64_t v53 = v5;
    id v22 = v21;
    uint64_t v13 = v49;
    uint64_t v9 = v50;
    uint64_t v8 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v48 = v16;

    uint64_t v5 = v53;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Got incoming file: %@", v20, 0xCu);
    sub_100006290((uint64_t *)&unk_1000A1120);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v23 = [v16 URL];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = v59;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v25, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8) != 1)
    {
      sub_10000BD30((uint64_t)v13, &qword_1000A15B0);
      uint64_t v26 = (char *)sub_10004F3F4();
      if ((v27 & 1) == 0 && (unint64_t)(v26 - 1) <= 1)
      {
        id v28 = objc_allocWithZone((Class)NPTOTransaction);
        NSString v29 = String._bridgeToObjectiveC()();
        id v30 = [v28 initWithDescription:v29];

        uint64_t v31 = v54;
        char v32 = (void *)swift_allocObject();
        v32[2] = v31;
        v32[3] = v16;
        v32[4] = v30;
        aBlock[4] = sub_1000520CC;
        aBlock[5] = v32;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100007D64;
        aBlock[3] = &unk_100093178;
        uint64_t v33 = _Block_copy(aBlock);
        id v34 = v16;
        id v35 = v31;
        id v36 = v30;
        char v37 = v57;
        static DispatchQoS.unspecified.getter();
        char v60 = &_swiftEmptyArrayStorage;
        sub_1000520D8(&qword_1000A09D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100006290(&qword_1000A09D8);
        sub_10000BE9C(&qword_1000A09E0, &qword_1000A09D8);
        uint64_t v38 = v55;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v33);

        (*(void (**)(char *, uint64_t))(v56 + 8))(v5, v38);
        (*(void (**)(char *, uint64_t))(v58 + 8))(v37, v6);
        swift_release();
        return;
      }
      id v39 = v16;
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        int v42 = (uint8_t *)swift_slowAlloc();
        uint64_t v46 = (void *)swift_slowAlloc();
        *(_DWORD *)int v42 = 138412290;
        aBlock[0] = v39;
        id v47 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v46 = v39;

        BOOL v45 = "Incoming file: %@ media type not supported.";
        goto LABEL_14;
      }
      goto LABEL_17;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v13, 1, 1, v8);
  }
  sub_10000BD30((uint64_t)v13, &qword_1000A15B0);
  id v39 = v16;
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    int v42 = (uint8_t *)swift_slowAlloc();
    unint64_t v43 = (void *)swift_slowAlloc();
    *(_DWORD *)int v42 = 138412290;
    aBlock[0] = v39;
    id v44 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v43 = v39;

    BOOL v45 = "Incoming file: %@ doesn't have valid URL.";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v40, v41, v45, v42, 0xCu);
    sub_100006290((uint64_t *)&unk_1000A1120);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return;
  }
LABEL_17:
}

id sub_10004F3F4()
{
  id result = [v0 metadata];
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    AnyHashable.init<A>(_:)();
    if (*(void *)(v3 + 16) && (unint64_t v4 = sub_100051790((uint64_t)v7), (v5 & 1) != 0))
    {
      sub_10000C31C(*(void *)(v3 + 56) + 32 * v4, (uint64_t)&v8);
    }
    else
    {
      long long v8 = 0u;
      long long v9 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1000219D8((uint64_t)v7);
    if (*((void *)&v9 + 1))
    {
      sub_10000BE18(0, &qword_1000A1180);
      if (swift_dynamicCast())
      {
        id v6 = [(id)0x746D integerValue];

        return v6;
      }
    }
    else
    {
      sub_10000BD30((uint64_t)&v8, (uint64_t *)&unk_1000A0BC0);
    }
    return 0;
  }
  __break(1u);
  return result;
}

void sub_10004F550(uint64_t a1, void *a2, void *a3)
{
  char v5 = (char **)(a1 + OBJC_IVAR___NPTOWatchAssetsImportController_pendingImportTasks);
  swift_beginAccess();
  id v6 = *v5;
  id v7 = a3;
  id v8 = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *char v5 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v6 = sub_100051518(0, *((void *)v6 + 2) + 1, 1, v6);
    *char v5 = v6;
  }
  unint64_t v11 = *((void *)v6 + 2);
  unint64_t v10 = *((void *)v6 + 3);
  if (v11 >= v10 >> 1)
  {
    id v6 = sub_100051518((char *)(v10 > 1), v11 + 1, 1, v6);
    *char v5 = v6;
  }
  *((void *)v6 + 2) = v11 + 1;
  uint64_t v12 = &v6[24 * v11];
  *((void *)v12 + 4) = v8;
  v12[40] = 0;
  *((void *)v12 + 6) = v7;
  swift_endAccess();
  sub_10004FD40();
}

uint64_t sub_10004F6C0(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DispatchQoS();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  return _swift_task_switch(sub_10004F7DC, 0, 0);
}

uint64_t sub_10004F7DC()
{
  uint64_t v26 = v0;
  if (qword_1000A0EA8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100006D88(v1, (uint64_t)qword_1000A4F30);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v25 = v5;
    type metadata accessor for URL();
    sub_1000520D8(&qword_1000A2320, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[9] = sub_10000B6D8(v6, v7, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Got incoming file: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v8 = v0[17];
  uint64_t v9 = v0[14];
  uint64_t v23 = v0[16];
  uint64_t v24 = v0[15];
  uint64_t v10 = v0[12];
  uint64_t v22 = v0[13];
  uint64_t v12 = v0[10];
  unint64_t v11 = (void *)v0[11];
  id v13 = objc_allocWithZone((Class)NPTOTransaction);
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 initWithDescription:v14];

  id v16 = (void *)swift_allocObject();
  void v16[2] = v11;
  v16[3] = v12;
  void v16[4] = v15;
  v0[6] = sub_100052078;
  v0[7] = v16;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100007D64;
  v0[5] = &unk_100093128;
  unint64_t v17 = _Block_copy(v0 + 2);
  swift_retain();
  id v18 = v11;
  id v19 = v15;
  static DispatchQoS.unspecified.getter();
  v0[8] = &_swiftEmptyArrayStorage;
  sub_1000520D8(&qword_1000A09D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100006290(&qword_1000A09D8);
  sub_10000BE9C(&qword_1000A09E0, &qword_1000A09D8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v8, v24);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

void sub_10004FC34(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (char **)(a1 + OBJC_IVAR___NPTOWatchAssetsImportController_pendingImportTasks);
  swift_beginAccess();
  uint64_t v6 = *v5;
  id v7 = a3;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v5 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v6 = sub_100051518(0, *((void *)v6 + 2) + 1, 1, v6);
    *uint64_t v5 = v6;
  }
  unint64_t v10 = *((void *)v6 + 2);
  unint64_t v9 = *((void *)v6 + 3);
  if (v10 >= v9 >> 1)
  {
    uint64_t v6 = sub_100051518((char *)(v9 > 1), v10 + 1, 1, v6);
    *uint64_t v5 = v6;
  }
  *((void *)v6 + 2) = v10 + 1;
  unint64_t v11 = &v6[24 * v10];
  *((void *)v11 + 4) = a2;
  v11[40] = 1;
  *((void *)v11 + 6) = v7;
  swift_endAccess();
  sub_10004FD40();
}

void sub_10004FD40()
{
  uint64_t v1 = sub_100006290(&qword_1000A15B0);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v60 - v5;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v67 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v66 = (char *)&v60 - v11;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (void **)((char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v16 = *(void **)&v0[OBJC_IVAR___NPTOWatchAssetsImportController_internalQueue];
  *id v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_35:
    swift_once();
    goto LABEL_10;
  }
  id v18 = &v0[OBJC_IVAR___NPTOWatchAssetsImportController_pendingImportTasks];
  swift_beginAccess();
  uint64_t v19 = *(void *)v18;
  uint64_t v20 = *(void *)(*(void *)v18 + 16);
  if (v20)
  {
    id v21 = self;
    swift_bridgeObjectRetain();
    uint64_t v22 = [v21 sharedInstance];
    if ([v22 importInProgress])
    {
      swift_bridgeObjectRelease();
      if (qword_1000A0EA8 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_100006D88(v23, (uint64_t)qword_1000A4F30);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Waiting for existing import session to finish.", v26, 2u);
        swift_slowDealloc();
      }

      goto LABEL_33;
    }
    id v65 = v4;
    char v60 = v0;
    uint64_t v61 = v22;
    id v30 = &_swiftEmptyArrayStorage;
    *(void *)id v18 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    id v68 = (unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
    uint64_t v69 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56);
    uint64_t v64 = (void (**)(char *, char *, uint64_t))(v67 + 16);
    uint64_t v31 = (void (**)(char *, char *, uint64_t))(v67 + 32);
    swift_bridgeObjectRetain();
    uint64_t v62 = v19;
    uint64_t v63 = v31;
    char v32 = (void **)(v19 + 48);
    while (1)
    {
      uint64_t v33 = (char *)*(v32 - 2);
      if (*(unsigned char *)(v32 - 1))
      {
        (*v64)(v6, &v33[direct field offset for TemporaryResourceFile.url], v7);
        (*v69)(v6, 0, 1, v7);
        if ((*v68)(v6, 1, v7) != 1) {
          goto LABEL_22;
        }
      }
      else
      {
        id v34 = v10;
        id v35 = v30;
        id v36 = *v32;
        sub_100050FAC(*(v32 - 2), 0);
        sub_100050FAC(v33, 0);
        id v37 = v36;
        id v38 = [v33 URL];
        if (v38)
        {
          id v39 = v38;
          uint64_t v40 = (uint64_t)v65;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v41 = 0;
        }
        else
        {
          uint64_t v41 = 1;
          uint64_t v40 = (uint64_t)v65;
        }
        sub_100050FC8(v33, 0);
        (*v69)((char *)v40, v41, 1, v7);
        sub_100051640(v40, (uint64_t)v6);
        sub_100050FC8(v33, 0);

        unsigned int v42 = (*v68)(v6, 1, v7);
        id v30 = v35;
        unint64_t v10 = v34;
        uint64_t v31 = v63;
        if (v42 != 1)
        {
LABEL_22:
          unint64_t v43 = *v31;
          id v44 = v66;
          (*v31)(v66, v6, v7);
          v43(v10, v44, v7);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v30 = (void *)sub_1000512B0(0, v30[2] + 1, 1, (unint64_t)v30);
          }
          unint64_t v46 = v30[2];
          unint64_t v45 = v30[3];
          if (v46 >= v45 >> 1) {
            id v30 = (void *)sub_1000512B0(v45 > 1, v46 + 1, 1, (unint64_t)v30);
          }
          long long v30[2] = v46 + 1;
          v43((char *)v30+ ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))+ *(void *)(v67 + 72) * v46, v10, v7);
          goto LABEL_14;
        }
      }
      sub_10000BD30((uint64_t)v6, &qword_1000A15B0);
LABEL_14:
      v32 += 3;
      if (!--v20)
      {
        swift_bridgeObjectRelease();
        if (qword_1000A0EA8 != -1) {
          swift_once();
        }
        uint64_t v47 = type metadata accessor for Logger();
        sub_100006D88(v47, (uint64_t)qword_1000A4F30);
        swift_bridgeObjectRetain();
        unint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.default.getter();
        BOOL v50 = os_log_type_enabled(v48, v49);
        uint64_t v52 = v60;
        uint64_t v51 = v61;
        if (v50)
        {
          uint64_t v53 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v53 = 134217984;
          aBlock[0] = v30[2];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "Import started for %ld assets.", v53, 0xCu);
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        id v54 = [objc_allocWithZone((Class)PHImportOptions) init];
        [v54 setAllowDuplicates:0];
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v56 = swift_allocObject();
        *(void *)(v56 + 16) = v62;
        *(void *)(v56 + 24) = v52;
        aBlock[4] = sub_100051158;
        aBlock[5] = v56;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100050E34;
        aBlock[3] = &unk_100093088;
        uint64_t v57 = _Block_copy(aBlock);
        uint64_t v22 = v54;
        id v58 = v52;
        swift_release();
        id v59 = [v51 importUrls:isa withOptions:v22 delegate:0 atEnd:v57];
        _Block_release(v57);

        goto LABEL_33;
      }
    }
  }
  if (qword_1000A0EA8 != -1) {
    goto LABEL_35;
  }
LABEL_10:
  uint64_t v27 = type metadata accessor for Logger();
  sub_100006D88(v27, (uint64_t)qword_1000A4F30);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v28))
  {
    NSString v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v28, "No pending incoming files to import.", v29, 2u);
    swift_slowDealloc();
  }
LABEL_33:
}

uint64_t sub_100050624(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v35 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v33 = v7;
  uint64_t v34 = v8;
  __chkstk_darwin(v7);
  char v32 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A0EA8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100006D88(v10, (uint64_t)qword_1000A4F30);
  id v11 = a1;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134218240;
    uint64_t v31 = a2;
    aBlock[0] = (uint64_t)[v11 importedCount];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2048;
    aBlock[0] = (uint64_t)[v11 failedToImportCount];
    a2 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Import finished! %ld assets succeeded, %ld assets failed.", (uint8_t *)v14, 0x16u);
    swift_slowDealloc();
  }
  else
  {
  }
  id v15 = [v11 error];
  if (v15)
  {
    id v16 = v15;
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v30 = v5;
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v31 = (void *)v4;
      id v37 = v16;
      id v20 = v16;
      sub_100006290((uint64_t *)&unk_1000A1150);
      uint64_t v21 = String.init<A>(describing:)();
      id v37 = (void *)sub_10000B6D8(v21, v22, aBlock);
      uint64_t v4 = (uint64_t)v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v5 = v30;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Import encountered error: %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a2;
  aBlock[4] = (uint64_t)sub_10005200C;
  aBlock[5] = v23;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100007D64;
  aBlock[3] = (uint64_t)&unk_1000930D8;
  uint64_t v24 = _Block_copy(aBlock);
  id v25 = a2;
  uint64_t v26 = v32;
  static DispatchQoS.unspecified.getter();
  id v37 = &_swiftEmptyArrayStorage;
  sub_1000520D8(&qword_1000A09D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100006290(&qword_1000A09D8);
  sub_10000BE9C(&qword_1000A09E0, &qword_1000A09D8);
  uint64_t v27 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v27, v4);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v33);
  return swift_release();
}

id sub_100050BA4()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v0[OBJC_IVAR___NPTOWatchAssetsImportController_pendingImportTasks] = &_swiftEmptyArrayStorage;
  uint64_t v10 = OBJC_IVAR___NPTOWatchAssetsImportController_internalQueue;
  sub_10000BE18(0, (unint64_t *)&qword_1000A09A0);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  uint64_t v7 = v0;
  static DispatchQoS.unspecified.getter();
  uint64_t v12 = &_swiftEmptyArrayStorage;
  sub_1000520D8((unint64_t *)&qword_1000A15F0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100006290((uint64_t *)&unk_1000A09B0);
  sub_10000BE9C(&qword_1000A1600, (uint64_t *)&unk_1000A09B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v0[v10] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  uint64_t v8 = (objc_class *)type metadata accessor for WatchAssetsImportController();
  v11.receiver = v7;
  v11.super_class = v8;
  return [super init];
}

void sub_100050E34(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

id sub_100050EC0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WatchAssetsImportController();
  return [super dealloc];
}

uint64_t type metadata accessor for WatchAssetsImportController()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for WatchAssetsImportController.FileType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100050FAC(*(void **)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

id sub_100050FAC(void *a1, char a2)
{
  if (a2) {
    return (id)swift_retain();
  }
  else {
    return a1;
  }
}

void destroy for WatchAssetsImportController.FileType(uint64_t a1)
{
}

void sub_100050FC8(void *a1, char a2)
{
  if (a2) {
    swift_release();
  }
  else {
}
  }

uint64_t assignWithCopy for WatchAssetsImportController.FileType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100050FAC(*(void **)a2, v4);
  uint64_t v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_100050FC8(v5, v6);
  return a1;
}

uint64_t assignWithTake for WatchAssetsImportController.FileType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_100050FC8(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for WatchAssetsImportController.FileType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WatchAssetsImportController.FileType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)id result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000510F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1000510FC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for WatchAssetsImportController.FileType()
{
  return &type metadata for WatchAssetsImportController.FileType;
}

uint64_t sub_100051118()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100051158(void *a1)
{
  return sub_100050624(a1, *(void **)(v1 + 24));
}

uint64_t sub_100051188(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100051198()
{
  return swift_release();
}

char *sub_1000511A0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100006290(&qword_1000A0E00);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      os_log_type_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      os_log_type_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100051C78(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000512B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    os_log_type_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100006290(&qword_1000A2318);
  uint64_t v10 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  os_log_type_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100051E7C(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

char *sub_100051518(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100006290(&qword_1000A2328);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
      unint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[24 * v8 + 32]) {
          memmove(v12, a4 + 32, 24 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      unint64_t v12 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100051D6C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100051640(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006290(&qword_1000A15B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000516A8(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 + 100);
  Swift::Int v2 = Hasher._finalize()();

  return sub_10005186C(a1, v2);
}

unint64_t sub_100051718(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10005190C(a1, a2, v4);
}

unint64_t sub_100051790(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1000519F0(a1, v4);
}

unint64_t sub_1000517D4(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_1000520D8((unint64_t *)&qword_1000A21A0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_100051AB8(a1, v2);
}

unint64_t sub_10005186C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10005190C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        os_log_type_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000519F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100034BF4(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_1000219D8((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100051AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    os_log_type_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    BOOL v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_1000520D8(&qword_1000A2338, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

uint64_t sub_100051C78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100051D6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_100006290(&qword_1000A2330);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100051E7C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for URL() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100051FD4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005200C()
{
  return sub_10004FD40();
}

uint64_t sub_100052030()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100052078()
{
  sub_10004FC34(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100052084()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000520CC()
{
  sub_10004F550(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000520D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100052414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100052454(uint64_t a1)
{
  uint64_t v2 = sub_10005CDAC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Photos syncing enabled changed.", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _invalidateContent];
}

void sub_1000524D4(uint64_t a1)
{
  uint64_t v2 = sub_10005CDAC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Synced album identifier changed.", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _invalidateContent];
}

void sub_100052554(uint64_t a1)
{
  uint64_t v2 = sub_10005CDAC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Synced photos limit changed.", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _invalidateContent];
}

void sub_100052938(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 16))
  {
    uint64_t v2 = [*(id *)(a1 + 40) changeDetailsForFetchResult:];
    uint64_t v3 = v2;
    if (v2)
    {
      uint64_t v4 = [v2 fetchResultAfterChanges];
      id v5 = [v4 count];

      if (!v5)
      {
        unint64_t v6 = sub_10005CDAC();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = [[*(id *)(*(void *)(a1 + 32) + 32) npto_syncedAlbumIdentifier];
          int v8 = 138412290;
          uint64_t v9 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Synced album is missing: %@", (uint8_t *)&v8, 0xCu);
        }
        [*(id *)(*(void *)(a1 + 32) + 32) removeObjectForKey:NPTOPreferencesSyncedAlbumIdentifierKey];
      }
    }
  }
}

void sub_100052E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100052E48(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  unint64_t v6 = [*(id *)(a1 + 32) fetchResultBeforeChanges];
  id v8 = [v6 objectAtIndex:a2];

  uint64_t v7 = [*(id *)(a1 + 40) changeDetailsForObject:v8];
  if ([v7 assetContentChanged])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    *a3 = 1;
  }
}

void sub_1000533BC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _invalidateContentIfNeeded];
}

void sub_10005499C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000549C8(uint64_t a1)
{
  uint64_t v2 = sub_10005CDAC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fetch counts changed.", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _invalidateContent];
}

void sub_100054A48(uint64_t a1)
{
  uint64_t v2 = sub_10005CDAC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Always updating albums changed.", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _invalidateContent];
}

void sub_100055244(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _invalidateContentIfNeeded];
}

void sub_100055A9C(CGImageMetadata *a1, void *a2, void *a3, void *a4)
{
  id v11 = a2;
  uint64_t v7 = a3;
  id v8 = a4;
  id v9 = [v11 length];
  CFStringRef v10 = v7;
  if (v9) {
    CFStringRef v10 = +[NSString stringWithFormat:@"%@.%@", v11, v7];
  }
  CGImageMetadataSetValueWithPath(a1, 0, v10, v8);
}

id sub_100055EB0(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  unint64_t v6 = +[NSMutableDictionary dictionary];
  uint64_t v7 = [*(id *)(a1 + 32) uuid];
  [v6 setObject:v7 forKeyedSubscript:@"uuid"];

  id v8 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 32) mediaType]);
  [v6 setObject:v8 forKeyedSubscript:@"mt"];

  id v9 = [*(id *)(a1 + 32) creationDate];
  [v6 setObject:v9 forKeyedSubscript:@"cd"];

  CFStringRef v10 = [*(id *)(a1 + 32) modificationDate];
  [v6 setObject:v10 forKeyedSubscript:@"md"];

  [v6 setObject:v5 forKeyedSubscript:@"ext"];
  id v11 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 32) isFavorite]);
  [v6 setObject:v11 forKeyedSubscript:@"fav"];

  unint64_t v12 = (unint64_t)[*(id *)(a1 + 32) mediaSubtypes];
  if (a3)
  {
    os_log_type_t v13 = +[NSNumber numberWithUnsignedInteger:v12 & 0xFFFFFFFFFFFFFFF7];
    [v6 setObject:v13 forKeyedSubscript:@"ms"];
  }
  else
  {
    uint64_t v14 = +[NSNumber numberWithUnsignedInteger:v12];
    [v6 setObject:v14 forKeyedSubscript:@"ms"];

    char v15 = [*(id *)(a1 + 32) photoIrisProperties];
    uint64_t v16 = v15;
    if (v15) {
      [v15 photoIrisStillDisplayTime];
    }
    else {
      memset(&time, 0, sizeof(time));
    }
    uint64_t v17 = +[NSNumber numberWithDouble:CMTimeGetSeconds(&time)];
    [v6 setObject:v17 forKeyedSubscript:@"sdt"];

    uint64_t v18 = [*(id *)(a1 + 32) photoIrisProperties];
    uint64_t v19 = v18;
    if (v18) {
      [v18 photoIrisVideoDuration];
    }
    else {
      memset(&v26, 0, sizeof(v26));
    }
    uint64_t v20 = +[NSNumber numberWithDouble:CMTimeGetSeconds(&v26)];
    [v6 setObject:v20 forKeyedSubscript:@"vd"];

    uint64_t v21 = [*(id *)(a1 + 32) photoIrisProperties];
    [v21 photoIrisVisibilityState];
    [*(id *)(a1 + 32) hasAdjustments];
    unint64_t v22 = +[NSNumber numberWithBool:PHVideoComplementVisibilityStateIsPlayable()];
    [v6 setObject:v22 forKeyedSubscript:@"ivp"];
  }
  [*(id *)(a1 + 32) preferredCropRect:v26.value timescale:v26.timescale epoch:v26.epoch time:time.value timescale:time.timescale epoch:time.epoch];
  CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v29);
  [v6 setObject:DictionaryRepresentation forKeyedSubscript:@"pcr"];

  [*(id *)(a1 + 32) acceptableCropRect];
  CFDictionaryRef v24 = CGRectCreateDictionaryRepresentation(v30);
  [v6 setObject:v24 forKeyedSubscript:@"acr"];

  return v6;
}

void sub_100056208(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6) {
    goto LABEL_14;
  }
  uint64_t v7 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v5 count]);
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v8 = [v5 allValues];
  id v9 = [v8 countByEnumeratingWithState:&v37 objects:v45 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v38;
    do
    {
      unint64_t v12 = 0;
      do
      {
        if (*(void *)v38 != v11) {
          objc_enumerationMutation(v8);
        }
        os_log_type_t v13 = [*(id *)(*((void *)&v37 + 1) + 8 * (void)v12) URL];
        [v7 addObject:v13];

        unint64_t v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v37 objects:v45 count:16];
    }
    while (v10);
  }

  id v14 = objc_alloc_init((Class)PHValidator);
  id v15 = [v7 copy];
  id v36 = 0;
  unsigned __int8 v16 = [v14 validateURLs:v15 withOptions:64 error:&v36];
  id v6 = v36;

  if ((v16 & 1) == 0)
  {
    uint64_t v17 = sub_10005CDAC();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v42 = v28;
      __int16 v43 = 2112;
      id v44 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to validate exported asset resources for live photo asset %@: %@", buf, 0x16u);
    }
  }
  if (v6)
  {
LABEL_14:
    uint64_t v18 = sub_10005CDAC();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v42 = v26;
      __int16 v43 = 2112;
      id v44 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to export asset resources for live photo asset %@: %@", buf, 0x16u);
    }

    uint64_t v19 = sub_10005CDAC();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v42 = v27;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Will re-export live photo as regular photo for asset %@", buf, 0xCu);
    }

    uint64_t v20 = *(void **)(a1 + 32);
    double v21 = *(double *)(a1 + 56);
    uint64_t v22 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v23 = *(unsigned __int8 *)(a1 + 65);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    uint64_t v33[2] = sub_100056628;
    v33[3] = &unk_100093248;
    v33[4] = v20;
    id v34 = *(id *)(a1 + 40);
    id v35 = *(id *)(a1 + 48);
    [v20 _npto_requestPhotoAssetResourceFilesWithMaxPixelSize:v22 isLegacyDevice:v23 isUserInitiated:v33 completionHandler:v21];
  }
  else
  {
    CFDictionaryRef v24 = objc_opt_class();
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    _OWORD v29[2] = sub_1000567A0;
    v29[3] = &unk_100093270;
    id v25 = *(void **)(a1 + 40);
    v29[4] = *(void *)(a1 + 32);
    id v31 = v25;
    id v30 = v5;
    id v32 = *(id *)(a1 + 48);
    [v24 _npto_archiveLivePhotoAssetResourceFiles:v30 completionHandler:v29];
  }
}

void sub_100056628(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = sub_10005CDAC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = a1[4];
      int v14 = 138412546;
      uint64_t v15 = v13;
      __int16 v16 = 2112;
      id v17 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to re-export photo for asset %@: %@", (uint8_t *)&v14, 0x16u);
    }
  }
  if (a1[5])
  {
    id v8 = [v5 objectForKeyedSubscript:&off_1000950E8];
    uint64_t v9 = a1[6];
    id v10 = [v8 URL];
    uint64_t v11 = [v10 pathExtension];
    unint64_t v12 = (*(void (**)(uint64_t, void *, uint64_t))(v9 + 16))(v9, v11, 1);

    (*(void (**)(void))(a1[5] + 16))();
  }
}

void sub_1000567A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = sub_10005CDAC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      int v14 = 138412546;
      uint64_t v15 = v13;
      __int16 v16 = 2112;
      id v17 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to archive live photo asset %@: %@", (uint8_t *)&v14, 0x16u);
    }
  }
  if (*(void *)(a1 + 48))
  {
    id v8 = [*(id *)(a1 + 40) objectForKeyedSubscript:&off_1000950E8];
    uint64_t v9 = *(void *)(a1 + 56);
    id v10 = [v8 URL];
    uint64_t v11 = [v10 pathExtension];
    unint64_t v12 = (*(void (**)(uint64_t, void *, void))(v9 + 16))(v9, v11, 0);

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_100056918(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = sub_10005CDAC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = a1[4];
      int v14 = 138412546;
      uint64_t v15 = v13;
      __int16 v16 = 2112;
      id v17 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to export asset resources for photo asset %@: %@", (uint8_t *)&v14, 0x16u);
    }
  }
  if (a1[5])
  {
    id v8 = [v5 objectForKeyedSubscript:&off_1000950E8];
    uint64_t v9 = a1[6];
    id v10 = [v8 URL];
    uint64_t v11 = [v10 pathExtension];
    unint64_t v12 = (*(void (**)(uint64_t, void *, uint64_t))(v9 + 16))(v9, v11, 1);

    (*(void (**)(void))(a1[5] + 16))();
  }
}

void sub_100056CE4(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  id v6 = sub_10005CDAC();
  uint64_t v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v10 = 138412802;
      uint64_t v11 = v8;
      __int16 v12 = 2048;
      double v13 = a3 * 100.0;
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to download image for asset %@, progress: %.0f%%, error: %@", (uint8_t *)&v10, 0x20u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138412546;
    uint64_t v11 = v9;
    __int16 v12 = 2048;
    double v13 = a3 * 100.0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Downloading image for asset %@, progress: %.0f%%", (uint8_t *)&v10, 0x16u);
  }
}

void sub_100056E34(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [v4 objectForKeyedSubscript:PHImageErrorKey];
  if (v5)
  {
    id v6 = sub_10005CDAC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v36 = v27;
      __int16 v37 = 2112;
      long long v38 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to request image for asset %@, error %@", buf, 0x16u);
    }

    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      (*(void (**)(uint64_t, void, NPTOTemporaryFile *))(v7 + 16))(v7, 0, v5);
    }
  }
  else
  {
    uint64_t v8 = [v4 objectForKeyedSubscript:PHImageFileURLKey];
    if (v8)
    {
      uint64_t v9 = [NPTOTemporaryFile alloc];
      int v10 = [v8 pathExtension];
      uint64_t v11 = [(NPTOTemporaryFile *)v9 initWithPathExtension:v10];

      __int16 v12 = +[NSFileManager defaultManager];
      double v13 = [(NPTOTemporaryFile *)v11 URL];
      id v30 = 0;
      unsigned __int8 v14 = [v12 copyItemAtURL:v8 toURL:v13 error:&v30];
      id v15 = (NPTOTemporaryFile *)v30;

      __int16 v16 = sub_10005CDAC();
      id v17 = v16;
      if (v14)
      {
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = *(void *)(a1 + 32);
          uint64_t v19 = [(NPTOTemporaryFile *)v11 URL];
          *(_DWORD *)buf = 138412546;
          uint64_t v36 = v18;
          __int16 v37 = 2112;
          long long v38 = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Done requesting image for asset %@, url: %@", buf, 0x16u);
        }
        uint64_t v20 = *(void **)(a1 + 40);
        id v31 = &off_1000950E8;
        id v32 = v11;
        double v21 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
        [v20 _npto_processAssetResourceFiles:v21 isLegacyDevice:*(unsigned __int8 *)(a1 + 64) maxPixelSize:*(void *)(a1 + 48) completionHandler:*(double *)(a1 + 56)];
      }
      else
      {
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412546;
          uint64_t v36 = v29;
          __int16 v37 = 2112;
          long long v38 = v15;
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to copy file for asset %@, error %@", buf, 0x16u);
        }

        uint64_t v26 = *(void *)(a1 + 48);
        if (v26) {
          (*(void (**)(uint64_t, void, NPTOTemporaryFile *))(v26 + 16))(v26, 0, v15);
        }
      }
    }
    else
    {
      NSErrorUserInfoKey v33 = NSLocalizedDescriptionKey;
      uint64_t v22 = +[NSString stringWithFormat:@"No image URL returned for asset %@", *(void *)(a1 + 32)];
      id v34 = v22;
      uint64_t v23 = +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
      uint64_t v11 = +[NSError errorWithDomain:@"NanoPhotosErrorDomain" code:3 userInfo:v23];

      CFDictionaryRef v24 = sub_10005CDAC();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        uint64_t v36 = v28;
        __int16 v37 = 2112;
        long long v38 = v11;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Failed to request image for asset %@, error %@", buf, 0x16u);
      }

      uint64_t v25 = *(void *)(a1 + 48);
      if (v25) {
        (*(void (**)(uint64_t, void, NPTOTemporaryFile *))(v25 + 16))(v25, 0, v11);
      }
    }
  }
}

void sub_100057A80(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v15 = a3;
  id v7 = a4;
  if (v7)
  {
    id v8 = *(id *)(a1 + 32);
    objc_sync_enter(v8);
    [*(id *)(a1 + 32) addObject:v7];
    if ([*(id *)(a1 + 32) count] == (id)1)
    {
      uint64_t v9 = *(void *)(a1 + 64);
      if (v9) {
        (*(void (**)(uint64_t, void, id))(v9 + 16))(v9, 0, v7);
      }
    }
  }
  else
  {
    id v8 = *(id *)(a1 + 40);
    objc_sync_enter(v8);
    int v10 = *(void **)(a1 + 40);
    uint64_t v11 = +[NSNumber numberWithInteger:a2];
    [v10 setObject:v15 forKeyedSubscript:v11];

    id v12 = [*(id *)(a1 + 40) count];
    if (v12 == [*(id *)(a1 + 48) count])
    {
      double v13 = *(void **)(a1 + 56);
      id v14 = [*(id *)(a1 + 40) copy];
      [v13 _npto_processAssetResourceFiles:v14 isLegacyDevice:*(unsigned __int8 *)(a1 + 80) maxPixelSize:*(void *)(a1 + 64) completionHandler:*(double *)(a1 + 72)];
    }
  }
  objc_sync_exit(v8);
}

void sub_100057BCC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100057BE4(uint64_t a1, double a2)
{
  id v4 = sub_10005CDAC();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 138412802;
    uint64_t v8 = v5;
    __int16 v9 = 2048;
    uint64_t v10 = v6;
    __int16 v11 = 2048;
    double v12 = a2 * 100.0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Downloading live photo for asset %@ resource type %ld, progress: %.0f%%", (uint8_t *)&v7, 0x20u);
  }
}

void sub_100057CB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10005CDAC();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 56);
      int v11 = 138412802;
      uint64_t v12 = v9;
      __int16 v13 = 2048;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      id v16 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to request live photo for asset %@ resource type %ld, error %@", (uint8_t *)&v11, 0x20u);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = [*(id *)(a1 + 40) URL];
    int v11 = 138412802;
    uint64_t v12 = v7;
    __int16 v13 = 2048;
    uint64_t v14 = v6;
    __int16 v15 = 2112;
    id v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Done requesting live photo for asset %@ resource type %ld, url: %@", (uint8_t *)&v11, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100057FFC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v15 = a3;
  id v7 = a4;
  if (v7)
  {
    id v8 = *(id *)(a1 + 32);
    objc_sync_enter(v8);
    [*(id *)(a1 + 32) addObject:v7];
    if ([*(id *)(a1 + 32) count] == (id)1)
    {
      uint64_t v9 = *(void *)(a1 + 56);
      if (v9) {
        (*(void (**)(uint64_t, void, id))(v9 + 16))(v9, 0, v7);
      }
    }
  }
  else
  {
    id v8 = *(id *)(a1 + 40);
    objc_sync_enter(v8);
    uint64_t v10 = *(void **)(a1 + 40);
    int v11 = +[NSNumber numberWithInteger:a2];
    [v10 setObject:v15 forKeyedSubscript:v11];

    id v12 = [*(id *)(a1 + 40) count];
    if (v12 == [*(id *)(a1 + 48) count])
    {
      uint64_t v13 = *(void *)(a1 + 56);
      if (v13)
      {
        id v14 = [*(id *)(a1 + 40) copy];
        (*(void (**)(uint64_t, id, void))(v13 + 16))(v13, v14, 0);
      }
    }
  }
  objc_sync_exit(v8);
}

void sub_10005814C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100058164(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  unint64_t v6 = (unint64_t)[a2 integerValue];
  if ((v6 & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 56);
    double v8 = *(double *)(a1 + 48);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1000583FC;
    v19[3] = &unk_1000933B0;
    uint64_t v9 = *(void **)(a1 + 32);
    id v20 = *(id *)(a1 + 40);
    [v9 _npto_processPhotoAssetResource:v5 isLegacyDevice:v7 maxPixelSize:v19 completionHandler:v8];
    uint64_t v10 = v20;
  }
  else if (v6 - 9 > 1)
  {
    NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
    uint64_t v13 = +[NSString stringWithFormat:@"Unsupported asset resource type %ld %@", v6, *(void *)(a1 + 32)];
    CFDictionaryRef v24 = v13;
    id v14 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
    uint64_t v10 = +[NSError errorWithDomain:@"NanoPhotosErrorDomain" code:5 userInfo:v14];

    id v15 = sub_10005CDAC();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = [v10 localizedDescription];
      *(_DWORD *)buf = 138412290;
      uint64_t v22 = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    double v11 = *(double *)(a1 + 48);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_100058418;
    v17[3] = &unk_1000933B0;
    id v12 = *(void **)(a1 + 32);
    id v18 = *(id *)(a1 + 40);
    [v12 _npto_processPairedVideoAssetResource:v5 maxPixelSize:v17 completionHandler:v11];
    uint64_t v10 = v18;
  }
}

uint64_t sub_1000583FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100058418(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100059AA0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) error];

  if (v2)
  {
    id v3 = sub_10005CDAC();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = [*(id *)(a1 + 32) error];
      int v10 = 138412546;
      uint64_t v11 = v8;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to export video asset %@: %@", (uint8_t *)&v10, 0x16u);
    }
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4)
    {
      id v5 = [*(id *)(a1 + 32) error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      uint64_t v7 = *(void (**)(void))(v6 + 16);
      v7();
    }
  }
}

void sub_100059EF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = [a3 URL];
  uint64_t v6 = +[NSData dataWithContentsOfURL:v7];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
}

id sub_10005A21C(uint64_t a1, void *a2)
{
  id v3 = [a2 mutableCopy];
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = v3;
  }
  else
  {
    id v5 = +[NSMutableDictionary dictionary];
  }
  uint64_t v6 = v5;

  [v6 setObject:&off_100095118 forKeyedSubscript:kCGImageDestinationLossyCompressionQuality];
  [v6 setObject:&__kCFBooleanTrue forKeyedSubscript:kCGImageDestinationMergeMetadata];
  double v7 = *(double *)(a1 + 40);
  if (v7 < (double)*(unint64_t *)(a1 + 32) || v7 < (double)*(unint64_t *)(a1 + 48))
  {
    uint64_t v8 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [v6 setObject:v8 forKeyedSubscript:kCGImageDestinationImageMaxPixelSize];
  }
  id v9 = [v6 copy];

  return v9;
}

uint64_t sub_10005A818(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005A828(uint64_t a1)
{
}

uint64_t sub_10005A830(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(a1 + 32) _composeSyncRequest];

  return _objc_release_x1();
}

void sub_10005A914(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    id v2 = [*(id *)(a1 + 32) _composeSyncRequest];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_10005AA9C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [*(id *)(a1 + 32) _assetForLocalIdentifier:*(void *)(a1 + 40)];

  return _objc_release_x1();
}

id sub_10005B654(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addRequiringExternalPowerSourceConnectedAssetIndex:a2];
}

void sub_10005B778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005B790(uint64_t a1, void *a2, unsigned char *a3)
{
  id v9 = a2;
  uint64_t v6 = [v9 assets];
  double v7 = [v6 npto_objectForLocalIdentifier:*(void *)(a1 + 32)];
  uint64_t v8 = v7;
  if (!v7)
  {
    id v3 = [v9 keyAssets];
    uint64_t v8 = [v3 npto_objectForLocalIdentifier:*(void *)(a1 + 32)];
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v8);
  if (!v7)
  {
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) {
    *a3 = 1;
  }
}

void sub_10005B9F4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 keyAssets];
  [v2 npto_addAssets:v3];
}

void sub_10005BA4C(uint64_t a1, void *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 40);
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = v4;
  if (v2)
  {
    id v8 = [v4 assetCollection];
    uint64_t v6 = [v5 assets];
    double v7 = [v5 keyAssets];

    [v3 npto_addAssetCollection:v8 assets:v6 keyAssets:v7];
  }
  else
  {
    id v8 = [v4 assets];

    [v3 npto_addAssets:v8];
  }
}

void sub_10005BBE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(NPTOCollectionTargetItem);
  id v5 = [v3 assetCollection];
  uint64_t v6 = [v5 npto_uuid];
  double v7 = [v6 npto_data];
  [(NPTOCollectionTargetItem *)v4 setUuidData:v7];

  id v8 = [v3 contentProvider];
  id v9 = [v3 assetCollection];
  -[NPTOCollectionTargetItem setCollectionTarget:](v4, "setCollectionTarget:", [v8 targetForAssetCollection:v9]);

  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  int v10 = [v3 assets];
  id v11 = [v10 countByEnumeratingWithState:&v41 objects:v46 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v42;
    do
    {
      id v14 = 0;
      do
      {
        if (*(void *)v42 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void *)(*((void *)&v41 + 1) + 8 * (void)v14);
        -[NPTOCollectionTargetItem addAssetIndex:](v4, "addAssetIndex:", [*(id *)(a1 + 32) npto_indexOfAsset:v15]);
        id v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      id v12 = [v10 countByEnumeratingWithState:&v41 objects:v46 count:16];
    }
    while (v12);
  }

  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v17 = [v3 keyAssets];
  id v18 = [v17 countByEnumeratingWithState:&v37 objects:v45 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(void *)v38;
    do
    {
      double v21 = 0;
      do
      {
        if (*(void *)v38 != v20) {
          objc_enumerationMutation(v17);
        }
        uint64_t v22 = *(void *)(*((void *)&v37 + 1) + 8 * (void)v21);
        id v24 = [[*(id *)(a1 + 32) npto_indexOfAsset:v22];
        [(NPTOCollectionTargetItem *)v4 addAssetIndex:v24];
        [(NPTOCollectionTargetItem *)v4 addKeyAssetIndex:v24];
        double v21 = (char *)v21 + 1;
      }
      while (v19 != v21);
      id v19 = [v17 countByEnumeratingWithState:&v37 objects:v45 count:16];
    }
    while (v19);
  }

  uint64_t v25 = [v3 assetCollection];
  uint64_t v26 = [v25 localizedTitle];
  [(NPTOCollectionTargetItem *)v4 setTitle:v26];

  uint64_t v27 = [v3 assetCollection];
  uint64_t v28 = [v27 localizedSubtitle];
  [(NPTOCollectionTargetItem *)v4 setSubtitle:v28];

  uint64_t v29 = *(void **)(a1 + 40);
  id v30 = [v3 assetCollection];
  -[NPTOCollectionTargetItem setType:](v4, "setType:", [v29 _assetCollectionType:[v30 assetCollectionType]]);

  id v31 = *(void **)(a1 + 40);
  uint64_t v32 = [v3 assetCollection];
  -[NPTOCollectionTargetItem setSubtype:](v4, "setSubtype:", [v31 _assetCollectionSubtype:[v32 assetCollectionSubtype]]);

  [(NPTOCollectionTargetItem *)v4 setCollectionMetadata:0];
  NSErrorUserInfoKey v33 = [v3 contentProvider];
  LOBYTE(v32) = objc_opt_respondsToSelector();

  if (v32)
  {
    id v34 = [v3 contentProvider];
    id v35 = [v3 assetCollection];
    uint64_t v36 = [v34 metadataForAssetCollection:v35];
    [(NPTOCollectionTargetItem *)v4 setCollectionMetadata:v36];
  }
  [*(id *)(a1 + 48) addCollectionTargetItem:v4];
}

void sub_10005C184(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 assetsRequireExternalPowerSourceConnected])
  {
    id v4 = [v3 assets];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _OWORD v5[2] = sub_10005C254;
    v5[3] = &unk_1000935B0;
    id v6 = *(id *)(a1 + 32);
    id v7 = *(id *)(a1 + 40);
    [v4 enumerateObjectsUsingBlock:v5];
  }
}

id sub_10005C254(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = [[*(id *)(a1 + 40) npto_indexOfAsset:a2];

  return _[v2 addIndex:v3];
}

void sub_10005C294(uint64_t a1, void *a2)
{
  id v3 = [a2 keyAssets];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10005C348;
  v4[3] = &unk_1000935B0;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  [v3 enumerateObjectsUsingBlock:v4];
}

id sub_10005C348(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = [[*(id *)(a1 + 40) npto_indexOfAsset:a2];

  return _[v2 removeIndex:v3];
}

void sub_10005CAF0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handleContentProviderDidInvalidateContent:*(void *)(a1 + 32)];
}

void sub_10005CCB8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handlePhotoLibraryDidChange:*(void *)(a1 + 32)];
}

id sub_10005CDAC()
{
  if (qword_1000A5070 != -1) {
    dispatch_once(&qword_1000A5070, &stru_100093640);
  }
  uint64_t v0 = (void *)qword_1000A5068;

  return v0;
}

void sub_10005CE00(id a1)
{
  qword_1000A5068 = (uint64_t)os_log_create("com.apple.NanoPhotos", "sync");

  _objc_release_x1();
}

id sub_10005CE44()
{
  if (qword_1000A5080 != -1) {
    dispatch_once(&qword_1000A5080, &stru_100093660);
  }
  uint64_t v0 = (void *)qword_1000A5078;

  return v0;
}

void sub_10005CE98(id a1)
{
  qword_1000A5078 = (uint64_t)os_log_create("com.apple.NanoPhotos", "sync_oversize");

  _objc_release_x1();
}

uint64_t start()
{
  _set_user_dir_suffix();
  int v2 = [[NPTOSyncDaemonController alloc] initWithDeviceControllerClass:objc_opt_class()];
  [(NPTOSyncDaemonController *)v2 run];

  return 0;
}

uint64_t NPTOCollectionTargetItemReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        char v4 = 0;
        unsigned int v5 = 0;
        unint64_t v6 = 0;
        while (1)
        {
          unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
          v6 |= (unint64_t)(v8 & 0x7F) << v4;
          if ((v8 & 0x80) == 0) {
            goto LABEL_11;
          }
          v4 += 7;
          BOOL v9 = v5++ >= 9;
          if (v9)
          {
            unint64_t v6 = 0;
            int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          unint64_t v6 = 0;
        }
LABEL_13:
        int v11 = v6 & 7;
        if (!v10 && v11 != 4)
        {
          switch((v6 >> 3))
          {
            case 1u:
              uint64_t v13 = PBReaderReadData();
              uint64_t v14 = 104;
              goto LABEL_57;
            case 2u:
              char v15 = 0;
              unsigned int v16 = 0;
              uint64_t v17 = 0;
              *(unsigned char *)(a1 + 112) |= 1u;
              while (2)
              {
                unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v18 == -1 || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
                  v17 |= (unint64_t)(v19 & 0x7F) << v15;
                  if (v19 < 0)
                  {
                    v15 += 7;
                    BOOL v9 = v16++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_76;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_76:
              uint64_t v39 = 64;
              goto LABEL_85;
            case 3u:
              if (v11 != 2)
              {
                char v40 = 0;
                unsigned int v41 = 0;
                uint64_t v42 = 0;
                while (1)
                {
                  unint64_t v43 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  if (v43 == -1 || v43 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                    goto LABEL_100;
                  }
                  char v44 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43 + 1;
                  v42 |= (unint64_t)(v44 & 0x7F) << v40;
                  if (v44 < 0)
                  {
                    v40 += 7;
                    BOOL v9 = v41++ >= 9;
                    if (!v9) {
                      continue;
                    }
                  }
                  goto LABEL_101;
                }
              }
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
                   && !*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
              {
                char v20 = 0;
                unsigned int v21 = 0;
                uint64_t v22 = 0;
                while (1)
                {
                  unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                    break;
                  }
                  char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
                  v22 |= (unint64_t)(v24 & 0x7F) << v20;
                  if (v24 < 0)
                  {
                    v20 += 7;
                    BOOL v9 = v21++ >= 9;
                    if (!v9) {
                      continue;
                    }
                  }
                  goto LABEL_40;
                }
                *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
                PBRepeatedInt32Add();
              }
              goto LABEL_72;
            case 4u:
              if (v11 == 2)
              {
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2
                                                                                    + OBJC_IVAR___PBDataReader__length)
                     && !*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
                {
                  char v25 = 0;
                  unsigned int v26 = 0;
                  uint64_t v27 = 0;
                  while (1)
                  {
                    unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                    if (v28 == -1 || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                      break;
                    }
                    char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
                    *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
                    v27 |= (unint64_t)(v29 & 0x7F) << v25;
                    if (v29 < 0)
                    {
                      v25 += 7;
                      BOOL v9 = v26++ >= 9;
                      if (!v9) {
                        continue;
                      }
                    }
                    goto LABEL_53;
                  }
                  *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_53:
                  PBRepeatedInt32Add();
                }
LABEL_72:
                PBReaderRecallMark();
              }
              else
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v47 = 0;
                while (1)
                {
                  unint64_t v48 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  if (v48 == -1 || v48 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                    break;
                  }
                  char v49 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48 + 1;
                  v47 |= (unint64_t)(v49 & 0x7F) << v45;
                  if (v49 < 0)
                  {
                    v45 += 7;
                    BOOL v9 = v46++ >= 9;
                    if (!v9) {
                      continue;
                    }
                  }
                  goto LABEL_101;
                }
LABEL_100:
                *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_101:
                PBRepeatedInt32Add();
              }
LABEL_102:
              if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              }
              continue;
            case 5u:
              uint64_t v13 = PBReaderReadString();
              uint64_t v14 = 88;
              goto LABEL_57;
            case 6u:
              uint64_t v13 = PBReaderReadString();
              uint64_t v14 = 72;
              goto LABEL_57;
            case 7u:
              uint64_t v13 = PBReaderReadData();
              uint64_t v14 = 56;
LABEL_57:
              id v30 = *(void **)(a1 + v14);
              *(void *)(a1 + v14) = v13;

              goto LABEL_102;
            case 8u:
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v17 = 0;
              *(unsigned char *)(a1 + 112) |= 4u;
              while (2)
              {
                unint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v33 == -1 || v33 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  char v34 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
                  v17 |= (unint64_t)(v34 & 0x7F) << v31;
                  if (v34 < 0)
                  {
                    v31 += 7;
                    BOOL v9 = v32++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_80;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_80:
              uint64_t v39 = 96;
              goto LABEL_85;
            case 9u:
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v17 = 0;
              *(unsigned char *)(a1 + 112) |= 2u;
              while (2)
              {
                unint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v37 == -1 || v37 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  char v38 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
                  v17 |= (unint64_t)(v38 & 0x7F) << v35;
                  if (v38 < 0)
                  {
                    v35 += 7;
                    BOOL v9 = v36++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_84;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_84:
              uint64_t v39 = 80;
LABEL_85:
              *(_DWORD *)(a1 + v39) = v17;
              goto LABEL_102;
            default:
              if (PBReaderSkipValueWithTag()) {
                goto LABEL_102;
              }
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t NPTOAssetReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      *(unsigned char *)(a1 + 24) |= 1u;
      unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v15 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v16 = v15 + 8, v15 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)))
      {
        uint64_t v17 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16;
      }
      else
      {
        uint64_t v17 = 0;
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
      }
      *(void *)(a1 + 8) = v17;
    }
    else if ((v6 >> 3) == 1)
    {
      uint64_t v13 = PBReaderReadData();
      uint64_t v14 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100060580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000605A4(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    char v4 = WeakRetained;
    [WeakRetained[9] setDelegate:*(void *)(a1 + 32) queue:WeakRetained[1]];
    [v4[10] resume];
    id v3 = v4[13];
    v4[13] = 0;

    id WeakRetained = v4;
  }
}

void sub_100060790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000607B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained _scheduleSync];
    int v2 = (void *)v3[14];
    v3[14] = 0;

    id WeakRetained = v3;
  }
}

void *sub_100060B24(uint64_t a1)
{
  [*(id *)(a1 + 32) _cancelPendingExportAndSendAssets];
  uint64_t result = *(void **)(a1 + 32);
  if (*(void *)(a1 + 40) == result[2])
  {
    return _[result _beginSync];
  }
  return result;
}

void sub_100061054(uint64_t a1)
{
  uint64_t v3 = [*(id *)(a1 + 40) pbResponse];
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  unint64_t v6 = [*(id *)(*(void *)(a1 + 32) + 32) library];
  uint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 40) library];
  if ([*(id *)(*(void *)(a1 + 32) + 40) hasExternalPowerSourceConnected])
  {
    unint64_t v8 = [v6 npto_changesFromLibrary:v7 excludingAssets:0];
  }
  else
  {
    char v9 = [*(id *)(*(void *)(a1 + 32) + 32) npto_assetsRequiringExternalPowerSourceConnected];
    unint64_t v8 = [v6 npto_changesFromLibrary:v7 excludingAssets:v9];
  }
  int v10 = [v8 updatedAssets];
  int v11 = [v8 insertedAssets];
  id v12 = [v10 arrayByAddingObjectsFromArray:v11];

  if ([v12 count] && !objc_msgSend(*(id *)(*(void *)(a1 + 32) + 40), "status"))
  {
    unint64_t v18 = *(void **)(a1 + 32);
    char v19 = [*(id *)(a1 + 40) context];
    [v18 _scheduleExportAndSendAssets:v12 context:v19];
  }
  else
  {
    uint64_t v13 = sub_10005CDAC();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = [v8 updatedAssets];
      id v15 = [v14 count];
      if (v15
        || ([v8 insertedAssets],
            uint64_t v1 = objc_claimAutoreleasedReturnValue(),
            [v1 count]))
      {
        id v16 = [*(id *)(*(void *)(a1 + 32) + 40) status];
        if (v16 >= 3)
        {
          uint64_t v17 = +[NSString stringWithFormat:@"(unknown: %i)", v16];
        }
        else
        {
          uint64_t v17 = off_1000937F8[(int)v16];
        }
        int v20 = 1;
      }
      else
      {
        int v20 = 0;
        uint64_t v17 = @"no assets to send";
      }
      *(_DWORD *)buf = 138412290;
      char v25 = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Reporting sync complete (%@)", buf, 0xCu);
      if (v20) {

      }
      if (!v15) {
    }
      }

    unsigned int v21 = [*(id *)(*(void *)(a1 + 32) + 72) activeSyncSession];
    [v21 syncDidComplete];

    uint64_t v22 = *(void *)(a1 + 32);
    unint64_t v23 = *(void **)(v22 + 48);
    *(void *)(v22 + 48) = 0;
  }
}

id sub_1000614C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _scheduleSync];
}

void sub_100061A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_100061A24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100061A34(uint64_t a1)
{
}

void sub_100061A3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  long long v14[2] = sub_100061B60;
  v14[3] = &unk_100093710;
  id v15 = *(id *)(a1 + 40);
  id v16 = v5;
  id v17 = v6;
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 72);
  id v18 = v8;
  uint64_t v22 = v9;
  id v19 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 32);
  id v20 = v10;
  uint64_t v21 = v11;
  id v12 = v6;
  id v13 = v5;
  dispatch_async(v7, v14);
}

void sub_100061B60(uint64_t a1)
{
  [*(id *)(a1 + 32) removeObject:*(void *)(a1 + 40)];
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 48))
  {
    [*(id *)(a1 + 56) addObject:v2];
    uint64_t v3 = *(void *)(*(void *)(a1 + 88) + 8);
    uint64_t v5 = *(void *)(v3 + 40);
    uint64_t v4 = (id *)(v3 + 40);
    if (!v5) {
      objc_storeStrong(v4, *(id *)(a1 + 48));
    }
  }
  else
  {
    [*(id *)(a1 + 64) addObject:v2];
  }
  double v6 = (double)(unint64_t)[*(id *)(a1 + 64) count];
  double v7 = v6 / (double)(unint64_t)[*(id *)(a1 + 72) count];
  id v8 = sub_10005CDAC();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 134217984;
    double v21 = v7 * 100.0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Reporting sync progress %.0f%%", (uint8_t *)&v20, 0xCu);
  }

  uint64_t v9 = [*(id *)(*(void *)(a1 + 80) + 72) activeSyncSession];
  [v9 reportProgress:v7];

  id v10 = [*(id *)(a1 + 64) count];
  if (v10 == [*(id *)(a1 + 72) count])
  {
    uint64_t v11 = sub_10005CDAC();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v20) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Reporting sync complete sending", (uint8_t *)&v20, 2u);
    }

    id v12 = [*(id *)(*(void *)(a1 + 80) + 72) activeSyncSession];
    [v12 syncDidCompleteSending];
  }
  if (![*(id *)(a1 + 32) count])
  {
    id v13 = [*(id *)(a1 + 56) count];
    uint64_t v14 = sub_10005CDAC();
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      if (v15)
      {
        double v16 = *(double *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
        int v20 = 138412290;
        double v21 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Reporting sync failed with error: %@", (uint8_t *)&v20, 0xCu);
      }

      id v17 = [*(id *)(*(void *)(a1 + 80) + 72) activeSyncSession];
      [v17 syncDidFailWithError:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)];
    }
    else
    {
      if (v15)
      {
        LOWORD(v20) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Reporting sync complete", (uint8_t *)&v20, 2u);
      }

      id v18 = [*(id *)(*(void *)(a1 + 80) + 72) activeSyncSession];
      [v18 syncDidComplete];

      uint64_t v19 = *(void *)(a1 + 80);
      id v17 = *(void **)(v19 + 48);
      *(void *)(v19 + 48) = 0;
    }
  }
}

void sub_100061E14(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  double v6 = [NPTOTransaction alloc];
  CFStringRef v22 = @"localIdentifier";
  double v7 = [v5 localIdentifier];
  unint64_t v23 = v7;
  id v8 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
  uint64_t v9 = [(NPTOTransaction *)v6 initWithDescription:@"com.apple.nptocompaniond.export-asset" userInfo:v8 context:a1[4]];

  id v10 = [a1[5] exportAssetsQueue];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_100061FE8;
  v13[3] = &unk_1000937B0;
  uint64_t v21 = a3;
  id v14 = a1[6];
  id v15 = v5;
  id v16 = a1[5];
  id v17 = a1[7];
  id v20 = a1[8];
  id v18 = a1[4];
  uint64_t v19 = v9;
  uint64_t v11 = v9;
  id v12 = v5;
  [v10 addOperationWithBlock:v13];
}

void sub_100061FE8(uint64_t a1)
{
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  uint64_t v3 = sub_10005CDAC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 88) + 1;
    id v5 = [*(id *)(a1 + 32) count];
    double v6 = [*(id *)(a1 + 40) localIdentifier];
    *(_DWORD *)buf = 134218498;
    uint64_t v22 = v4;
    __int16 v23 = 2048;
    id v24 = v5;
    __int16 v25 = 2112;
    unsigned int v26 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Exporting asset %lu/%lu %@", buf, 0x20u);
  }
  double v7 = *(void **)(a1 + 40);
  id v8 = *(void **)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1000621C4;
  v13[3] = &unk_100093788;
  id v14 = v7;
  id v19 = *(id *)(a1 + 80);
  id v10 = *(id *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 48);
  id v15 = v10;
  uint64_t v16 = v11;
  uint64_t v20 = *(void *)(a1 + 88);
  id v17 = *(id *)(a1 + 32);
  dispatch_semaphore_t v18 = v2;
  id v12 = v2;
  [v8 _exportAsset:v14 forDevice:v9 completionHandler:v13];
  dispatch_semaphore_wait(v12, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_1000621C4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = sub_10005CDAC();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = [*(id *)(a1 + 32) localIdentifier];
      *(_DWORD *)buf = 138412546;
      unint64_t v33 = v20;
      __int16 v34 = 2112;
      id v35 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to export asset %@: %@", buf, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    uint64_t v11 = [NPTOTransaction alloc];
    CFStringRef v30 = @"localIdentifier";
    id v12 = [*(id *)(a1 + 32) localIdentifier];
    char v31 = v12;
    id v13 = +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
    id v14 = [(NPTOTransaction *)v11 initWithDescription:@"com.apple.nptocompaniond.send-asset" userInfo:v13 context:*(void *)(a1 + 40)];

    id v15 = [*(id *)(a1 + 48) sendAssetsQueue];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10006244C;
    v21[3] = &unk_1000937B0;
    uint64_t v29 = *(void *)(a1 + 80);
    id v22 = *(id *)(a1 + 56);
    id v16 = *(id *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 48);
    id v23 = v16;
    uint64_t v24 = v17;
    id v25 = v7;
    id v26 = v8;
    id v18 = *(id *)(a1 + 72);
    uint64_t v27 = v14;
    id v28 = v18;
    id v19 = v14;
    [v15 addOperationWithBlock:v21];
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));
}

void sub_10006244C(uint64_t a1)
{
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  uint64_t v3 = sub_10005CDAC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 88) + 1;
    id v5 = [*(id *)(a1 + 32) count];
    double v6 = [*(id *)(a1 + 40) localIdentifier];
    *(_DWORD *)buf = 134218498;
    uint64_t v18 = v4;
    __int16 v19 = 2048;
    id v20 = v5;
    __int16 v21 = 2112;
    id v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Sending asset %lu/%lu %@", buf, 0x20u);
  }
  id v7 = *(void **)(a1 + 48);
  id v8 = [*(id *)(a1 + 56) URL];
  uint64_t v9 = *(void *)(a1 + 64);
  id v10 = [*(id *)(a1 + 40) localIdentifier];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_10006261C;
  v13[3] = &unk_100093760;
  id v14 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 80);
  dispatch_semaphore_t v15 = v2;
  id v16 = v11;
  id v12 = v2;
  [v7 _sendAssetResourceAtURL:v8 metadata:v9 identifier:v10 completionHandler:v13];

  dispatch_semaphore_wait(v12, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_10006261C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = sub_10005CDAC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      double v6 = [*(id *)(a1 + 32) localIdentifier];
      int v7 = 138412546;
      id v8 = v6;
      __int16 v9 = 2112;
      id v10 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to send asset %@: %@", (uint8_t *)&v7, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100063058(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10006306C(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v7 = +[NSNumber numberWithUnsignedInteger:a3];
  double v6 = [v5 localIdentifier];

  [v4 setObject:v7 forKey:v6];
}

BOOL NPTOLibraryReadFrom(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        id v12 = objc_alloc_init(NPTOAsset);
        [a1 addAsset:v12];
        if (!PBReaderPlaceMark() || (NPTOAssetReadFrom((uint64_t)v12, a2) & 1) == 0) {
          goto LABEL_28;
        }
LABEL_24:
        PBReaderRecallMark();

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    id v12 = objc_alloc_init(NPTOAssetCollection);
    [a1 addAssetCollection:v12];
    if (!PBReaderPlaceMark() || (NPTOAssetCollectionReadFrom((uint64_t)v12, a2) & 1) == 0)
    {
LABEL_28:

      return 0;
    }
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t NPTOAssetCollectionReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        char v4 = 0;
        unsigned int v5 = 0;
        unint64_t v6 = 0;
        while (1)
        {
          unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
          v6 |= (unint64_t)(v8 & 0x7F) << v4;
          if ((v8 & 0x80) == 0) {
            goto LABEL_11;
          }
          v4 += 7;
          BOOL v9 = v5++ >= 9;
          if (v9)
          {
            unint64_t v6 = 0;
            int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          unint64_t v6 = 0;
        }
LABEL_13:
        int v11 = v6 & 7;
        if (!v10 && v11 != 4)
        {
          switch((v6 >> 3))
          {
            case 1u:
              uint64_t v13 = PBReaderReadData();
              uint64_t v14 = 56;
              goto LABEL_37;
            case 2u:
              if (v11 == 2)
              {
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2
                                                                                    + OBJC_IVAR___PBDataReader__length)
                     && !*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
                {
                  char v15 = 0;
                  unsigned int v16 = 0;
                  uint64_t v17 = 0;
                  while (1)
                  {
                    unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                    if (v18 == -1 || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                      break;
                    }
                    char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
                    *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
                    v17 |= (unint64_t)(v19 & 0x7F) << v15;
                    if (v19 < 0)
                    {
                      v15 += 7;
                      BOOL v9 = v16++ >= 9;
                      if (!v9) {
                        continue;
                      }
                    }
                    goto LABEL_33;
                  }
                  *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_33:
                  PBRepeatedInt32Add();
                }
                PBReaderRecallMark();
              }
              else
              {
                char v21 = 0;
                unsigned int v22 = 0;
                uint64_t v23 = 0;
                while (1)
                {
                  unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                    break;
                  }
                  char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
                  v23 |= (unint64_t)(v25 & 0x7F) << v21;
                  if (v25 < 0)
                  {
                    v21 += 7;
                    BOOL v9 = v22++ >= 9;
                    if (!v9) {
                      continue;
                    }
                  }
                  goto LABEL_49;
                }
                *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_49:
                PBRepeatedInt32Add();
              }
LABEL_38:
              if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              }
              continue;
            case 3u:
              uint64_t v13 = PBReaderReadString();
              uint64_t v14 = 48;
              goto LABEL_37;
            case 4u:
              uint64_t v13 = PBReaderReadString();
              uint64_t v14 = 40;
              goto LABEL_37;
            case 5u:
              uint64_t v13 = PBReaderReadData();
              uint64_t v14 = 32;
LABEL_37:
              id v20 = *(void **)(a1 + v14);
              *(void *)(a1 + v14) = v13;

              goto LABEL_38;
            default:
              if (PBReaderSkipValueWithTag()) {
                goto LABEL_38;
              }
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000656C0(sqlite3 *a1, char *a2, ...)
{
  va_start(va, a2);
  if (a1)
  {
    errmsg = 0;
    uint64_t v3 = sqlite3_vmprintf(a2, va);
    if (sqlite3_exec(a1, v3, 0, 0, &errmsg))
    {
      if (errmsg)
      {
        fprintf(__stderrp, "execute() Error: %s\n", errmsg);
        sqlite3_free(errmsg);
      }
    }
    sqlite3_free(v3);
  }
}

uint64_t sub_1000658F8(sqlite3_stmt *a1, id a2)
{
  uint64_t v3 = (const char *)[a2 UTF8String];
  int v4 = strlen(v3);

  return sqlite3_bind_text(a1, 1, v3, v4, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

id sub_100065C90(sqlite3_stmt *a1, int a2)
{
  int v4 = sqlite3_column_bytes(a1, a2);
  unsigned int v5 = sqlite3_column_blob(a1, a2);
  if (v4 < 1)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = +[NSData dataWithBytes:v5 length:v4];
  }

  return v6;
}

void sub_100067BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100067BD0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handlePowerSourceNotification];
}

void sub_100069D94(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [v3 uuidData];
  [v4 npto_uuid];
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  [*(id *)(a1 + 32) setObject:v3 forKeyedSubscript:v5];
}

void sub_100069E10(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [v3 uuidData];
  [v4 npto_uuid];
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  [*(id *)(a1 + 32) setObject:v3 forKeyedSubscript:v5];
}

void sub_100069E8C(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 uuidData];
  int v4 = [v3 npto_uuid];

  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];

  if (!v5) {
    [*(id *)(a1 + 40) addObject:v6];
  }
}

void sub_100069F20(uint64_t a1, void *a2)
{
  id v10 = a2;
  id v3 = [v10 uuidData];
  int v4 = [v3 npto_uuid];

  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];
  id v6 = v5;
  if (v5)
  {
    unint64_t v7 = [v5 dateAsDate];
    char v8 = [v10 dateAsDate];
    id v9 = [v7 compare:v8];

    if (v9 == (id)-1
      && ([*(id *)(*(void *)(a1 + 40) + 24) containsObject:v10] & 1) == 0)
    {
      [*(id *)(a1 + 48) addObject:v10];
    }
  }
}

void sub_10006A010(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 uuidData];
  int v4 = [v3 npto_uuid];

  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];
  if (!v5 && ([*(id *)(*(void *)(a1 + 40) + 24) containsObject:v6] & 1) == 0) {
    [*(id *)(a1 + 48) addObject:v6];
  }
}

void sub_10006A0B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [v3 uuidData];
  [v4 npto_uuid];
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  [*(id *)(a1 + 32) setObject:v3 forKeyedSubscript:v5];
}

void sub_10006A134(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [v3 uuidData];
  [v4 npto_uuid];
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  [*(id *)(a1 + 32) setObject:v3 forKeyedSubscript:v5];
}

void sub_10006A1B0(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 uuidData];
  int v4 = [v3 npto_uuid];

  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];

  if (!v5) {
    [*(id *)(a1 + 40) addObject:v6];
  }
}

void sub_10006A244(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [v3 uuidData];
  id v5 = [v4 npto_uuid];

  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  if (v6)
  {
    char v40 = v5;
    unsigned int v41 = v3;
    unint64_t v7 = [*(id *)(*(void *)(a1 + 40) + 8) _npto_assetUUIDsInAssetCollection:v3];
    uint64_t v42 = v6;
    char v8 = [*(id *)(*(void *)(a1 + 40) + 16) _npto_assetUUIDsInAssetCollection:v6];
    id v9 = [v8 mutableCopy];
    [v9 removeObjectsInArray:v7];
    id v10 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v9 count]);
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    id v11 = v9;
    id v12 = [v11 countByEnumeratingWithState:&v47 objects:v52 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v48;
      do
      {
        for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v48 != v14) {
            objc_enumerationMutation(v11);
          }
          unsigned int v16 = [*(id *)(a1 + 48) objectForKeyedSubscript:*(void *)(*((void *)&v47 + 1) + 8 * i)];
          [v10 addObject:v16];
        }
        id v13 = [v11 countByEnumeratingWithState:&v47 objects:v52 count:16];
      }
      while (v13);
    }

    uint64_t v39 = v7;
    id v17 = [v7 mutableCopy];
    char v38 = v8;
    [v17 removeObjectsInArray:v8];
    unint64_t v18 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v17 count]);
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    id v19 = v17;
    id v20 = [v19 countByEnumeratingWithState:&v43 objects:v51 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v44;
      do
      {
        for (j = 0; j != v21; j = (char *)j + 1)
        {
          if (*(void *)v44 != v22) {
            objc_enumerationMutation(v19);
          }
          uint64_t v24 = *(void *)(*((void *)&v43 + 1) + 8 * (void)j);
          char v25 = [*(id *)(a1 + 48) objectForKeyedSubscript:v24];

          if (v25)
          {
            id v26 = [*(id *)(a1 + 56) objectForKeyedSubscript:v24];
            [v18 addObject:v26];
          }
        }
        id v21 = [v19 countByEnumeratingWithState:&v43 objects:v51 count:16];
      }
      while (v21);
    }

    uint64_t v27 = [v42 title];
    id v3 = v41;
    uint64_t v28 = [v41 title];
    if (v27 == (void *)v28)
    {
      uint64_t v29 = v27;
      if (![v10 count])
      {
        id v36 = [v18 count];

        if (!v36) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v29 = (void *)v28;
      CFStringRef v30 = [v42 title];
      char v31 = [v41 title];
      if (([v30 isEqualToString:v31] & 1) != 0 && !objc_msgSend(v10, "count"))
      {
        id v37 = [v18 count];

        if (!v37) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
    }
LABEL_24:
    [*(id *)(a1 + 64) addObject:v41, v37];
    unsigned int v32 = *(void **)(a1 + 72);
    id v33 = [v10 copy];
    [v32 setObject:v33 forKey:v41];

    __int16 v34 = *(void **)(a1 + 80);
    id v35 = [v18 copy];
    [v34 setObject:v35 forKey:v41];

LABEL_25:
    id v5 = v40;
    id v6 = v42;
  }
}

void sub_10006A660(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [v3 uuidData];
  id v5 = [v4 npto_uuid];

  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  if (!v6)
  {
    id v19 = v5;
    [*(id *)(a1 + 40) addObject:v3];
    unint64_t v7 = [*(id *)(*(void *)(a1 + 48) + 8) _npto_assetUUIDsInAssetCollection:v3];
    char v8 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v7 count]);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v9 = v7;
    id v10 = [v9 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v21;
      do
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v21 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void *)(*((void *)&v20 + 1) + 8 * i);
          char v15 = [*(id *)(a1 + 56) objectForKeyedSubscript:v14];

          if (v15)
          {
            unsigned int v16 = [*(id *)(a1 + 64) objectForKeyedSubscript:v14];
            [v8 addObject:v16];
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v11);
    }

    id v17 = *(void **)(a1 + 72);
    id v18 = [v8 copy];
    [v17 setObject:v18 forKey:v3];

    id v5 = v19;
  }
}

void sub_10006B840(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  id v2 = *(id *)(a1 + 32);
  [v1 _updateDeviceControllers];
}

void sub_10006C0A8(id a1, OS_xpc_object *a2)
{
  xpc_activity_state_t state = xpc_activity_get_state(a2);
  id v3 = sub_10005CDAC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 134217984;
    xpc_activity_state_t v5 = state;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Activity state: %ld", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10006C154(id a1, OS_xpc_object *a2)
{
  id v2 = a2;
  id v3 = sub_10005CDAC();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    xpc_activity_state_t v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received unexpected object on com.apple.notifyd.matching: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10006CB98(uint64_t a1, uint64_t a2, void *a3, void *a4, unsigned char *a5)
{
  id v9 = a3;
  id v8 = a4;
  if ([v8 compare:*(void *)(a1 + 32)] == (id)-1)
  {
    [*(id *)(a1 + 40) addObject:v9];
  }
  else
  {
    [*(id *)(a1 + 48) _updateExpireTimerWithDate:v8];
    *a5 = 1;
  }
}

void sub_10006CDA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(void *)(v1 + 72))
  {
    dispatch_source_t v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v1 + 104));
    uint64_t v4 = *(void *)(a1 + 32);
    xpc_activity_state_t v5 = *(void **)(v4 + 72);
    *(void *)(v4 + 72) = v3;

    id v6 = *(NSObject **)(*(void *)(a1 + 32) + 72);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10006CF10;
    handler[3] = &unk_1000931A8;
    objc_copyWeak(&v15, (id *)(a1 + 40));
    dispatch_source_set_event_handler(v6, handler);
    unint64_t v7 = *(void **)(*(void *)(a1 + 32) + 64);
    if (v7)
    {
      id v8 = v7;
    }
    else
    {
      id v8 = +[NSDate date];
    }
    id v9 = v8;
    id v10 = *(NSObject **)(*(void *)(a1 + 32) + 72);
    [v8 timeIntervalSinceNow];
    if (v11 >= 0.0) {
      int64_t v12 = (uint64_t)(v11 * 1000.0 * 1000000.0);
    }
    else {
      int64_t v12 = 0;
    }
    dispatch_time_t v13 = dispatch_time(0, v12);
    dispatch_source_set_timer(v10, v13, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
    dispatch_activate(*(dispatch_object_t *)(*(void *)(a1 + 32) + 72));

    objc_destroyWeak(&v15);
  }
}

void sub_10006CEFC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10006CF10(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _expireMessages];
    id WeakRetained = v2;
  }
}

void sub_10006CFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10006D0A8(uint64_t a1)
{
  unsigned __int16 v35 = (unsigned __int16)[*(id *)(a1 + 32) messageID];
  unsigned __int8 v36 = [*(id *)(a1 + 32) priority];
  id v2 = [*(id *)(a1 + 32) data];
  dispatch_source_t v3 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", (char *)[v2 length] + 3);

  [v3 appendBytes:&v35 length:3];
  uint64_t v4 = [*(id *)(a1 + 32) data];
  id v5 = [v4 length];

  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) data];
    [v3 appendData:v6];
  }
  id v7 = [*(id *)(a1 + 40) _messagePriorityWithPriority:[*(id *)(a1 + 32) priority]];
  id v8 = +[NSMutableDictionary dictionary];
  [v8 setObject:&__kCFBooleanTrue forKeyedSubscript:IDSSendMessageOptionNonWakingKey];
  [v8 setObject:&off_100095100 forKeyedSubscript:IDSSendMessageOptionPushPriorityKey];
  [*(id *)(a1 + 32) sendTimeout];
  if (v9 > 0.0)
  {
    [*(id *)(a1 + 32) sendTimeout];
    id v10 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [v8 setObject:v10 forKeyedSubscript:IDSSendMessageOptionTimeoutKey];
  }
  if ([*(id *)(a1 + 32) doNotCompress]) {
    [v8 setObject:&__kCFBooleanFalse forKeyedSubscript:IDSSendMessageOptionCompressPayloadKey];
  }
  double v11 = [*(id *)(a1 + 32) queueOneIdentifier];

  if (v11)
  {
    int64_t v12 = [*(id *)(a1 + 32) queueOneIdentifier];
    [v8 setObject:v12 forKeyedSubscript:IDSSendMessageOptionQueueOneIdentifierKey];
  }
  dispatch_time_t v13 = *(void **)(*(void *)(a1 + 40) + 24);
  uint64_t v14 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", [*(id *)(a1 + 32) messageID]);
  uint64_t v15 = [v13 objectForKey:v14];

  unsigned int v16 = *(void **)(*(void *)(a1 + 40) + 16);
  id v17 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", [*(id *)(a1 + 32) messageID]);
  uint64_t v18 = [v16 objectForKey:v17];

  if (v15) {
    [v8 setObject:&__kCFBooleanTrue forKeyedSubscript:IDSSendMessageOptionExpectsPeerResponseKey];
  }
  id v19 = *(void **)(*(void *)(a1 + 40) + 88);
  long long v20 = (void *)IDSCopyIDForDevice();
  long long v21 = +[NSSet setWithObject:v20];
  id v33 = 0;
  id v34 = 0;
  [v19 sendData:v3 fromAccount:0 toDestinations:v21 priority:v7 options:v8 identifier:&v34 error:&v33];
  id v22 = v34;
  id v23 = v33;

  uint64_t v24 = sub_10005CDAC();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v25 = [*(id *)(a1 + 32) messageID];
    id v26 = [v3 length];
    *(_DWORD *)buf = 67109890;
    unsigned int v38 = v25;
    __int16 v39 = 2048;
    id v40 = v26;
    __int16 v41 = 2112;
    id v42 = v22;
    __int16 v43 = 2112;
    id v44 = v23;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "For message: %hu sending data of length: %tu. Got identifier %@, error %@", buf, 0x26u);
  }

  uint64_t v27 = objc_alloc_init(NMSMessagePersistentContext);
  -[NMSMessagePersistentContext setMessageID:](v27, "setMessageID:", [*(id *)(a1 + 32) messageID]);
  [(NMSMessagePersistentContext *)v27 setIdsIdentifier:v22];
  uint64_t v28 = [*(id *)(a1 + 32) persistentUserInfo];
  [(NMSMessagePersistentContext *)v27 setUserInfo:v28];

  uint64_t v29 = +[NSDate date];
  [(NMSMessagePersistentContext *)v27 setDate:v29];

  [(NMSMessagePersistentContext *)v27 setFromRequest:1];
  [*(id *)(a1 + 32) setMessageCenter:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setIdsIdentifier:v22];
  if (v23)
  {
    [*(id *)(a1 + 40) _handleError:v23 context:v27];
  }
  else if (v22 && v15 | v18)
  {
    [*(id *)(a1 + 32) responseTimeout];
    if (v30 > 0.0) {
      [*(id *)(a1 + 32) responseTimeout];
    }
    else {
      double v31 = 3600.0;
    }
    unsigned int v32 = +[NSDate dateWithTimeIntervalSinceNow:v31];
    [*(id *)(*(void *)(a1 + 40) + 48) setObject:v27 forKey:v22 expires:v32];
    [*(id *)(a1 + 40) _updateExpireTimerWithDate:v32];
  }
}

void sub_10006D6A0(id *a1)
{
  unsigned __int16 v31 = (unsigned __int16)[a1[4] messageID];
  id v2 = [a1[5] data];
  dispatch_source_t v3 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", (char *)[v2 length] + 2);

  [v3 appendBytes:&v31 length:2];
  uint64_t v4 = [a1[5] data];
  id v5 = [v4 length];

  if (v5)
  {
    id v6 = [a1[5] data];
    [v3 appendData:v6];
  }
  id v7 = [a1[6] _messagePriorityWithPriority:[a1[5] priority]];
  id v8 = +[NSMutableDictionary dictionary];
  [v8 setObject:&__kCFBooleanTrue forKeyedSubscript:IDSSendMessageOptionNonWakingKey];
  [v8 setObject:&off_100095100 forKeyedSubscript:IDSSendMessageOptionPushPriorityKey];
  [a1[5] sendTimeout];
  if (v9 > 0.0)
  {
    [a1[5] sendTimeout];
    id v10 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [v8 setObject:v10 forKeyedSubscript:IDSSendMessageOptionTimeoutKey];
  }
  double v11 = [a1[4] idsIdentifier];
  [v8 setObject:v11 forKeyedSubscript:IDSSendMessageOptionPeerResponseIdentifierKey];

  if ([a1[5] doNotCompress]) {
    [v8 setObject:&__kCFBooleanFalse forKeyedSubscript:IDSSendMessageOptionCompressPayloadKey];
  }
  int64_t v12 = (void *)*((void *)a1[6] + 2);
  dispatch_time_t v13 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", [a1[4] messageID]);
  uint64_t v14 = [v12 objectForKey:v13];

  uint64_t v15 = (void *)*((void *)a1[6] + 11);
  unsigned int v16 = (void *)IDSCopyIDForDevice();
  id v17 = +[NSSet setWithObject:v16];
  id v29 = 0;
  id v30 = 0;
  [v15 sendData:v3 fromAccount:0 toDestinations:v17 priority:v7 options:v8 identifier:&v30 error:&v29];
  id v18 = v30;
  id v19 = v29;

  long long v20 = sub_10005CDAC();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v21 = [a1[4] messageID];
    id v22 = [v3 length];
    *(_DWORD *)buf = 67109890;
    unsigned int v33 = v21;
    __int16 v34 = 2048;
    id v35 = v22;
    __int16 v36 = 2112;
    id v37 = v18;
    __int16 v38 = 2112;
    id v39 = v19;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "For response to: %hu sending data of length: %tu. Got identifier %@, error %@", buf, 0x26u);
  }

  [a1[5] setIdsIdentifier:v18];
  id v23 = objc_alloc_init(NMSMessagePersistentContext);
  -[NMSMessagePersistentContext setMessageID:](v23, "setMessageID:", [a1[4] messageID]);
  [(NMSMessagePersistentContext *)v23 setIdsIdentifier:v18];
  uint64_t v24 = [a1[5] persistentUserInfo];
  [(NMSMessagePersistentContext *)v23 setUserInfo:v24];

  unsigned int v25 = +[NSDate date];
  [(NMSMessagePersistentContext *)v23 setDate:v25];

  [(NMSMessagePersistentContext *)v23 setFromRequest:0];
  if (v19)
  {
    [a1[6] _handleError:v19 context:v23];
  }
  else if (v18 && v14)
  {
    [a1[5] sendTimeout];
    if (v26 > 0.0) {
      [a1[5] sendTimeout];
    }
    else {
      double v27 = 3600.0;
    }
    uint64_t v28 = +[NSDate dateWithTimeIntervalSinceNow:v27];
    [*((id *)a1[6] + 6) setObject:v23 forKey:v18 expires:v28];
    [a1[6] _updateExpireTimerWithDate:v28];
  }
}

void sub_10006E81C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) metadata];
  id v3 = [v2 mutableCopy];

  if (!v3)
  {
    id v3 = +[NSMutableDictionary dictionary];
  }
  uint64_t v4 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", [*(id *)(a1 + 32) messageID]);
  [v3 setObject:v4 forKeyedSubscript:@"_id"];

  id v5 = [*(id *)(a1 + 40) _messagePriorityWithPriority:[*(id *)(a1 + 32) priority]];
  id v6 = +[NSMutableDictionary dictionary];
  [v6 setObject:&__kCFBooleanTrue forKeyedSubscript:IDSSendMessageOptionNonWakingKey];
  [v6 setObject:&off_100095100 forKeyedSubscript:IDSSendMessageOptionPushPriorityKey];
  [*(id *)(a1 + 32) timeout];
  id v7 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  [v6 setObject:v7 forKeyedSubscript:IDSSendMessageOptionTimeoutKey];

  [v6 setObject:&__kCFBooleanTrue forKeyedSubscript:IDSSendMessageOptionWantsClientAcknowledgementKey];
  id v8 = [*(id *)(a1 + 32) queueOneIdentifier];

  if (v8)
  {
    double v9 = [*(id *)(a1 + 32) queueOneIdentifier];
    [v6 setObject:v9 forKeyedSubscript:IDSSendMessageOptionQueueOneIdentifierKey];
  }
  id v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 32) bypassDuet]);
  [v6 setObject:v10 forKeyedSubscript:IDSSendMessageOptionBypassDuetKey];

  double v11 = *(void **)(*(void *)(a1 + 40) + 88);
  int64_t v12 = [*(id *)(a1 + 32) URL];
  dispatch_time_t v13 = (void *)IDSCopyIDForDevice();
  uint64_t v14 = +[NSSet setWithObject:v13];
  id v29 = 0;
  id v30 = 0;
  [v11 sendResourceAtURL:v12 metadata:v3 toDestinations:v14 priority:v5 options:v6 identifier:&v30 error:&v29];
  id v15 = v30;
  id v16 = v29;

  id v17 = sub_10005CDAC();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v18 = [*(id *)(a1 + 32) messageID];
    *(_DWORD *)buf = 67109634;
    unsigned int v32 = v18;
    __int16 v33 = 2112;
    id v34 = v15;
    __int16 v35 = 2112;
    id v36 = v16;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "For resource: %hu. Got identifier %@, error %@", buf, 0x1Cu);
  }

  id v19 = objc_alloc_init(NMSMessagePersistentContext);
  -[NMSMessagePersistentContext setMessageID:](v19, "setMessageID:", [*(id *)(a1 + 32) messageID]);
  [(NMSMessagePersistentContext *)v19 setIdsIdentifier:v15];
  long long v20 = [*(id *)(a1 + 32) persistentUserInfo];
  [(NMSMessagePersistentContext *)v19 setUserInfo:v20];

  unsigned int v21 = +[NSDate date];
  [(NMSMessagePersistentContext *)v19 setDate:v21];

  [(NMSMessagePersistentContext *)v19 setFromFile:1];
  id v22 = [*(id *)(a1 + 32) URL];
  id v23 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", [v22 fileSystemRepresentation]);
  [(NMSMessagePersistentContext *)v19 setFilePath:v23];

  -[NMSMessagePersistentContext setShouldUnlinkFile:](v19, "setShouldUnlinkFile:", [*(id *)(a1 + 32) unlinkWhenSent]);
  if (v16)
  {
    [*(id *)(a1 + 40) _handleError:v16 context:v19];
    uint64_t v24 = *(void *)(a1 + 56);
    if (v24) {
      (*(void (**)(uint64_t, id, id))(v24 + 16))(v24, v15, v16);
    }
  }
  else
  {
    [*(id *)(a1 + 32) timeout];
    unsigned int v25 = +[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:");
    [*(id *)(*(void *)(a1 + 40) + 48) setObject:v19 forKey:v15 expires:v25];
    double v26 = *(void **)(a1 + 56);
    if (v26)
    {
      double v27 = *(void **)(*(void *)(a1 + 40) + 56);
      id v28 = objc_retainBlock(v26);
      [v27 setObject:v28 forKey:v15];
    }
    [*(id *)(a1 + 40) _updateExpireTimerWithDate:v25];
  }
}

void sub_100070BF0(id a1)
{
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  qword_1000A4EE0 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v1, v2, v3, v4, v5, v6, v7, v8, v9, objc_opt_class(), 0);

  _objc_release_x1();
}

uint64_t NPTOCollectionTargetListReadFrom(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      int64_t v12 = objc_alloc_init(NPTOCollectionTargetItem);
      [a1 addCollectionTargetItem:v12];
      if (!PBReaderPlaceMark() || (NPTOCollectionTargetItemReadFrom((uint64_t)v12, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100071768(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007177C(id a1)
{
  uint64_t v1 = +[NSMutableOrderedSet orderedSet];
  uint64_t v2 = (void *)qword_1000A4EE8;
  qword_1000A4EE8 = v1;

  qword_1000A4EF0 = (uint64_t)[objc_alloc((Class)NPTODarwinNotificationObserver) initWithNotificationName:@"com.apple.mobile.keybagd.first_unlock" queue:&_dispatch_main_q block:&stru_100093A90];

  _objc_release_x1();
}

void sub_1000717FC(id a1)
{
  uint64_t v1 = sub_10005CDAC();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Received first unlock notification.", buf, 2u);
  }

  id v2 = (id)qword_1000A4EE8;
  objc_sync_enter(v2);
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = (id)qword_1000A4EE8;
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v10;
    do
    {
      unint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v3);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v9 + 1) + 8 * (void)v6) + 16))(*(void *)(*((void *)&v9 + 1) + 8 * (void)v6));
        unint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v3 countByEnumeratingWithState:&v9 objects:v14 count:16];
    }
    while (v4);
  }

  unint64_t v7 = (void *)qword_1000A4EE8;
  qword_1000A4EE8 = 0;

  char v8 = (void *)qword_1000A4EF0;
  qword_1000A4EF0 = 0;

  objc_sync_exit(v2);
}

void sub_100071978(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100071A28(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.distantPast.getter()
{
  return static Date.distantPast.getter();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return Date.addingTimeInterval(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t Calendar.compare(_:to:toGranularity:)()
{
  return Calendar.compare(_:to:toGranularity:)();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t FetchResultObserver.init(_:)()
{
  return FetchResultObserver.init(_:)();
}

uint64_t TemporaryResourceFile.__allocating_init(idsResourceURL:metadata:)()
{
  return TemporaryResourceFile.__allocating_init(idsResourceURL:metadata:)();
}

uint64_t TemporaryResourceFile.__allocating_init(localResourceURL:metadata:)()
{
  return TemporaryResourceFile.__allocating_init(localResourceURL:metadata:)();
}

uint64_t type metadata accessor for TemporaryResourceFile()
{
  return type metadata accessor for TemporaryResourceFile();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t UnknownStorage.init()()
{
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t BinaryDecodingOptions.init()()
{
  return BinaryDecodingOptions.init()();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return type metadata accessor for BinaryDecodingOptions();
}

uint64_t _MessageImplementationBase._protobuf_generated_isEqualTo(other:)()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

uint64_t dispatch thunk of Decoder.decodeSingularBoolField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularBoolField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt32Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularStringField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularSFixed64Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularSFixed64Field(value:)();
}

uint64_t Message.isInitialized.getter()
{
  return Message.isInitialized.getter();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return Message.init(serializedData:extensions:partial:options:)();
}

uint64_t Message.serializedData(partial:)()
{
  return Message.serializedData(partial:)();
}

uint64_t Message.hash(into:)()
{
  return Message.hash(into:)();
}

uint64_t dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitRepeatedInt32Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitRepeatedInt32Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularSFixed64Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularSFixed64Field(value:fieldNumber:)();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return type metadata accessor for _NameMap.NameDescription();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t type metadata accessor for _NameMap()
{
  return type metadata accessor for _NameMap();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t Publishers.Merge.init(_:_:)()
{
  return Publishers.Merge.init(_:_:)();
}

uint64_t AnyCancellable.store(in:)()
{
  return AnyCancellable.store(in:)();
}

uint64_t Publisher.compactMap<A>(_:)()
{
  return Publisher.compactMap<A>(_:)();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return Publisher<>.sink(receiveValue:)();
}

uint64_t type metadata accessor for NWInterface.InterfaceType()
{
  return type metadata accessor for NWInterface.InterfaceType();
}

uint64_t NWPathMonitor.currentPath.getter()
{
  return NWPathMonitor.currentPath.getter();
}

uint64_t NWPathMonitor.pathUpdateHandler.setter()
{
  return NWPathMonitor.pathUpdateHandler.setter();
}

uint64_t NWPathMonitor.init(prohibitedInterfaceTypes:)()
{
  return NWPathMonitor.init(prohibitedInterfaceTypes:)();
}

uint64_t NWPathMonitor.start(queue:)()
{
  return NWPathMonitor.start(queue:)();
}

uint64_t type metadata accessor for NWPathMonitor()
{
  return type metadata accessor for NWPathMonitor();
}

uint64_t static NWPath.Status.== infix(_:_:)()
{
  return static NWPath.Status.== infix(_:_:)();
}

uint64_t type metadata accessor for NWPath.Status()
{
  return type metadata accessor for NWPath.Status();
}

uint64_t NWPath.status.getter()
{
  return NWPath.status.getter();
}

uint64_t type metadata accessor for NWPath()
{
  return type metadata accessor for NWPath();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchWallTime.now()()
{
  return static DispatchWallTime.now()();
}

uint64_t type metadata accessor for DispatchWallTime()
{
  return type metadata accessor for DispatchWallTime();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return type metadata accessor for SHA256Digest();
}

uint64_t SHA256.finalize()()
{
  return SHA256.finalize()();
}

uint64_t SHA256.init()()
{
  return SHA256.init()();
}

uint64_t type metadata accessor for SHA256()
{
  return type metadata accessor for SHA256();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t type metadata accessor for CancellationError()
{
  return type metadata accessor for CancellationError();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t AsyncStream.Continuation.onTermination.setter()
{
  return AsyncStream.Continuation.onTermination.setter();
}

uint64_t AsyncStream.Continuation.yield<A>()()
{
  return AsyncStream.Continuation.yield<A>()();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return AsyncStream.makeAsyncIterator()();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

Swift::Void __swiftcall Task.cancel()()
{
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t NSPredicate.init(format:_:)()
{
  return NSPredicate.init(format:_:)();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

uint64_t NSNotificationCenter.Notifications.makeAsyncIterator()()
{
  return NSNotificationCenter.Notifications.makeAsyncIterator()();
}

uint64_t type metadata accessor for NSNotificationCenter.Notifications.Iterator()
{
  return type metadata accessor for NSNotificationCenter.Notifications.Iterator();
}

uint64_t NSNotificationCenter.notifications(named:object:)()
{
  return NSNotificationCenter.notifications(named:object:)();
}

uint64_t OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)()
{
  return OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)();
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt16 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t type metadata accessor for Result()
{
  return type metadata accessor for Result();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return _CFPreferencesAppSynchronize(applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFRelease(CFTypeRef cf)
{
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return _CGAffineTransformInvert(retstr, t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformMakeScale(retstr, sx, sy);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

BOOL CGImageDestinationCopyImageSource(CGImageDestinationRef idst, CGImageSourceRef isrc, CFDictionaryRef options, CFErrorRef *err)
{
  return _CGImageDestinationCopyImageSource(idst, isrc, options, err);
}

CFArrayRef CGImageDestinationCopyTypeIdentifiers(void)
{
  return _CGImageDestinationCopyTypeIdentifiers();
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return _CGImageDestinationCreateWithURL(url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return _CGImageDestinationFinalize(idst);
}

void CGImageDestinationSetProperties(CGImageDestinationRef idst, CFDictionaryRef properties)
{
}

size_t CGImageGetHeight(CGImageRef image)
{
  return _CGImageGetHeight(image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return _CGImageGetWidth(image);
}

CGMutableImageMetadataRef CGImageMetadataCreateMutable(void)
{
  return _CGImageMetadataCreateMutable();
}

BOOL CGImageMetadataSetValueWithPath(CGMutableImageMetadataRef metadata, CGImageMetadataTagRef parent, CFStringRef path, CFTypeRef value)
{
  return _CGImageMetadataSetValueWithPath(metadata, parent, path, value);
}

void CGImageRelease(CGImageRef image)
{
}

CFDictionaryRef CGImageSourceCopyProperties(CGImageSourceRef isrc, CFDictionaryRef options)
{
  return _CGImageSourceCopyProperties(isrc, options);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return _CGImageSourceCopyPropertiesAtIndex(isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return _CGImageSourceCreateImageAtIndex(isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return _CGImageSourceCreateWithURL(url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return _CGImageSourceGetCount(isrc);
}

CFStringRef CGImageSourceGetType(CGImageSourceRef isrc)
{
  return _CGImageSourceGetType(isrc);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  return _CGRectApplyAffineTransform(rect, t);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return _CGRectCreateDictionaryRepresentation(a1);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  return _CGRectGetMidX(rect);
}

CGFloat CGRectGetMidY(CGRect rect)
{
  return _CGRectGetMidY(rect);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  return _CMTimeGetSeconds(time);
}

uint64_t IDSCopyIDForDevice()
{
  return _IDSCopyIDForDevice();
}

uint64_t IOPSCopyPowerSourcesByType()
{
  return _IOPSCopyPowerSourcesByType();
}

CFArrayRef IOPSCopyPowerSourcesList(CFTypeRef blob)
{
  return _IOPSCopyPowerSourcesList(blob);
}

CFDictionaryRef IOPSGetPowerSourceDescription(CFTypeRef blob, CFTypeRef ps)
{
  return _IOPSGetPowerSourceDescription(blob, ps);
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return _NSSearchPathForDirectoriesInDomains(directory, domainMask, expandTilde);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromRect(NSRect aRect)
{
  return _NSStringFromRect(aRect);
}

uint64_t NSStringfromPSYSyncSessionType()
{
  return _NSStringfromPSYSyncSessionType();
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return _PBDataWriterWriteBOOLField();
}

uint64_t PBDataWriterWriteDataField()
{
  return _PBDataWriterWriteDataField();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return _PBDataWriterWriteInt32Field();
}

uint64_t PBDataWriterWriteSfixed64Field()
{
  return _PBDataWriterWriteSfixed64Field();
}

uint64_t PBDataWriterWriteStringField()
{
  return _PBDataWriterWriteStringField();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return _PBDataWriterWriteSubmessage();
}

uint64_t PBReaderPlaceMark()
{
  return _PBReaderPlaceMark();
}

uint64_t PBReaderReadData()
{
  return _PBReaderReadData();
}

uint64_t PBReaderReadString()
{
  return _PBReaderReadString();
}

uint64_t PBReaderRecallMark()
{
  return _PBReaderRecallMark();
}

uint64_t PBReaderSkipValueWithTag()
{
  return _PBReaderSkipValueWithTag();
}

uint64_t PBRepeatedInt32Add()
{
  return _PBRepeatedInt32Add();
}

uint64_t PBRepeatedInt32Clear()
{
  return _PBRepeatedInt32Clear();
}

uint64_t PBRepeatedInt32Copy()
{
  return _PBRepeatedInt32Copy();
}

uint64_t PBRepeatedInt32Hash()
{
  return _PBRepeatedInt32Hash();
}

uint64_t PBRepeatedInt32IsEqual()
{
  return _PBRepeatedInt32IsEqual();
}

uint64_t PBRepeatedInt32NSArray()
{
  return _PBRepeatedInt32NSArray();
}

uint64_t PHVideoComplementVisibilityStateIsPlayable()
{
  return _PHVideoComplementVisibilityStateIsPlayable();
}

uint64_t PLIsFeaturedContentAllowed()
{
  return _PLIsFeaturedContentAllowed();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int *__error(void)
{
  return ___error();
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return _copyfile(from, to, state, flags);
}

copyfile_state_t copyfile_state_alloc(void)
{
  return _copyfile_state_alloc();
}

int copyfile_state_free(copyfile_state_t a1)
{
  return _copyfile_state_free(a1);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return _objc_getAssociatedObject(object, key);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_blob(a1, a2, a3, n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return _sqlite3_bind_double(a1, a2, a3);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_text(a1, a2, a3, a4, a5);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return _sqlite3_busy_timeout(a1, ms);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return _sqlite3_clear_bindings(a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return _sqlite3_close(a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_blob(a1, iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_bytes(a1, iCol);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_double(a1, iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_text(a1, iCol);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return _sqlite3_errmsg(a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return _sqlite3_exec(a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return _sqlite3_finalize(pStmt);
}

void sqlite3_free(void *a1)
{
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return _sqlite3_open_v2(filename, ppDb, flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return _sqlite3_prepare_v2(db, zSql, nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return _sqlite3_reset(pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return _sqlite3_step(a1);
}

char *__cdecl sqlite3_vmprintf(const char *a1, va_list a2)
{
  return _sqlite3_vmprintf(a1, a2);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_conformsToProtocol2()
{
  return _swift_conformsToProtocol2();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

int unlink(const char *a1)
{
  return _unlink(a1);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLAssetWithURL_options_(void *a1, const char *a2, ...)
{
  return [a1 URLAssetWithURL:options:];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__GENERIC_ERROR_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_GENERIC_ERROR:");
}

id objc_msgSend__SQLITE_ABORT_(void *a1, const char *a2, ...)
{
  return [a1 _SQLITE_ABORT:];
}

id objc_msgSend__SQLITE_AUTH_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_AUTH:");
}

id objc_msgSend__SQLITE_BUSY_(void *a1, const char *a2, ...)
{
  return [a1 _SQLITE_BUSY:];
}

id objc_msgSend__SQLITE_CANTOPEN_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_CANTOPEN:");
}

id objc_msgSend__SQLITE_CONSTRAINT_(void *a1, const char *a2, ...)
{
  return [a1 _SQLITE_CONSTRAINT:];
}

id objc_msgSend__SQLITE_CORRUPT_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_CORRUPT:");
}

id objc_msgSend__SQLITE_DONE_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_DONE:");
}

id objc_msgSend__SQLITE_EMPTY_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_EMPTY:)
}

id objc_msgSend__SQLITE_ERROR_(void *a1, const char *a2, ...)
{
  return [a1 _SQLITE_ERROR:];
}

id objc_msgSend__SQLITE_FORMAT_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_FORMAT:)];
}

id objc_msgSend__SQLITE_FULL_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_FULL:");
}

id objc_msgSend__SQLITE_INTERNAL_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_INTERNAL:");
}

id objc_msgSend__SQLITE_INTERRUPT_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_INTERRUPT:)
}

id objc_msgSend__SQLITE_IOERR_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_IOERR:)];
}

id objc_msgSend__SQLITE_LOCKED_(void *a1, const char *a2, ...)
{
  return [a1 _SQLITE_LOCKED:];
}

id objc_msgSend__SQLITE_MISMATCH_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_MISMATCH:");
}

id objc_msgSend__SQLITE_MISUSE_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_MISUSE:");
}

id objc_msgSend__SQLITE_NOLFS_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_NOLFS:)];
}

id objc_msgSend__SQLITE_NOMEM_(void *a1, const char *a2, ...)
{
  return [a1 _SQLITE_NOMEM:];
}

id objc_msgSend__SQLITE_NOTADB_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_NOTADB:)
}

id objc_msgSend__SQLITE_NOTFOUND_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_NOTFOUND:)];
}

id objc_msgSend__SQLITE_NOTICE_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_NOTICE:)
}

id objc_msgSend__SQLITE_PERM_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_PERM:)
}

id objc_msgSend__SQLITE_PROTOCOL_(void *a1, const char *a2, ...)
{
  return [a1 _SQLITE_PROTOCOL:];
}

id objc_msgSend__SQLITE_RANGE_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_RANGE:)
}

id objc_msgSend__SQLITE_READONLY_(void *a1, const char *a2, ...)
{
  return [a1 _SQLITE_READONLY:];
}

id objc_msgSend__SQLITE_ROW_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_ROW:");
}

id objc_msgSend__SQLITE_SCHEMA_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_SCHEMA:");
}

id objc_msgSend__SQLITE_TOOBIG_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_TOOBIG:)];
}

id objc_msgSend__SQLITE_WARNING_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_SQLITE_WARNING:)];
}

id objc_msgSend__assetCollectionSubtype_(void *a1, const char *a2, ...)
{
  return [a1 _assetCollectionSubtype:];
}

id objc_msgSend__assetCollectionType_(void *a1, const char *a2, ...)
{
  return [a1 _assetCollectionType:];
}

id objc_msgSend__assetCollections(void *a1, const char *a2, ...)
{
  return _[a1 _assetCollections];
}

id objc_msgSend__assetForLocalIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 _assetForLocalIdentifier:];
}

id objc_msgSend__cancelPendingExportAndSendAssets(void *a1, const char *a2, ...)
{
  return _[a1 _cancelPendingExportAndSendAssets];
}

id objc_msgSend__collectionGroups(void *a1, const char *a2, ...)
{
  return _[a1 _collectionGroups];
}

id objc_msgSend__collectionTargetListWithLibrary_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_collectionTargetListWithLibrary:");
}

id objc_msgSend__composeSyncRequest(void *a1, const char *a2, ...)
{
  return _[a1 _composeSyncRequest];
}

id objc_msgSend__contentProviderClasses(void *a1, const char *a2, ...)
{
  return _[a1 _contentProviderClasses];
}

id objc_msgSend__contentProviders(void *a1, const char *a2, ...)
{
  return _[a1 _contentProviders];
}

id objc_msgSend__dataFromObj_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_dataFromObj:");
}

id objc_msgSend__defaultAssetFetchOptions(void *a1, const char *a2, ...)
{
  return _[a1 _defaultAssetFetchOptions];
}

id objc_msgSend__deleteKeepAliveFile(void *a1, const char *a2, ...)
{
  return _[a1 _deleteKeepAliveFile];
}

id objc_msgSend__endSync(void *a1, const char *a2, ...)
{
  return _[a1 _endSync];
}

id objc_msgSend__enumerateCollectionsUsingBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_enumerateCollectionsUsingBlock:");
}

id objc_msgSend__expireMessages(void *a1, const char *a2, ...)
{
  return _[a1 _expireMessages];
}

id objc_msgSend__exportAsset_forDevice_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_exportAsset:forDevice:completionHandler:");
}

id objc_msgSend__handleContentProviderDidInvalidateContent_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleContentProviderDidInvalidateContent:");
}

id objc_msgSend__handleError_context_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleError:context:");
}

id objc_msgSend__handlePhotoLibraryDidChange_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handlePhotoLibraryDidChange:");
}

id objc_msgSend__handlePowerSourceNotification(void *a1, const char *a2, ...)
{
  return _[a1 _handlePowerSourceNotification];
}

id objc_msgSend__hasExternalPowerSourceConnected(void *a1, const char *a2, ...)
{
  return _[a1 _hasExternalPowerSourceConnected];
}

id objc_msgSend__indexesOfAssetsRequiringExternalPowerSourceConnectedWithLibrary_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_indexesOfAssetsRequiringExternalPowerSourceConnectedWithLibrary:");
}

id objc_msgSend__initWithMasterLibrary_clientLibrary_excludedAssets_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_initWithMasterLibrary:clientLibrary:excludedAssets:");
}

id objc_msgSend__invalidateContent(void *a1, const char *a2, ...)
{
  return _[a1 _invalidateContent];
}

id objc_msgSend__invalidateContentIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _invalidateContentIfNeeded];
}

id objc_msgSend__libraryInfo(void *a1, const char *a2, ...)
{
  return _[a1 _libraryInfo];
}

id objc_msgSend__libraryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 _libraryRepresentation];
}

id objc_msgSend__messagePriorityWithPriority_(void *a1, const char *a2, ...)
{
  return [a1 _messagePriorityWithPriority:];
}

id objc_msgSend__npto_addAsset_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_npto_addAsset:");
}

id objc_msgSend__npto_archiveLivePhotoAssetResourceFiles_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_npto_archiveLivePhotoAssetResourceFiles:completionHandler:");
}

id objc_msgSend__npto_assetCollections(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_npto_assetCollections");
}

id objc_msgSend__npto_assetIndices(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_npto_assetIndices");
}

id objc_msgSend__npto_assetUUIDsInAssetCollection_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_npto_assetUUIDsInAssetCollection:");
}

id objc_msgSend__npto_findInterestingAssetResourcesFrom_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_npto_findInterestingAssetResourcesFrom:");
}

id objc_msgSend__npto_maxPixelSizeForDevice_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_npto_maxPixelSizeForDevice:");
}

id objc_msgSend__npto_processAssetResourceFiles_isLegacyDevice_maxPixelSize_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_npto_processAssetResourceFiles:isLegacyDevice:maxPixelSize:completionHandler:)
}

id objc_msgSend__npto_processPairedVideoAssetResource_maxPixelSize_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_npto_processPairedVideoAssetResource:maxPixelSize:completionHandler:");
}

id objc_msgSend__npto_processPhotoAssetResource_isLegacyDevice_maxPixelSize_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_npto_processPhotoAssetResource:isLegacyDevice:maxPixelSize:completionHandler:");
}

id objc_msgSend__npto_requestLivePhotoAssetResourceFilesWithMaxPixelSize_isLegacyDevice_isUserInitiated_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_npto_requestLivePhotoAssetResourceFilesWithMaxPixelSize:isLegacyDevice:isUserInitiated:completionHandler:")
}

id objc_msgSend__npto_requestPhotoAssetResourceFilesWithMaxPixelSize_isLegacyDevice_isUserInitiated_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_npto_requestPhotoAssetResourceFilesWithMaxPixelSize:isLegacyDevice:isUserInitiated:completionHandler:");
}

id objc_msgSend__objectFromData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_objectFromData:");
}

id objc_msgSend__openDBForceRecreate_(void *a1, const char *a2, ...)
{
  return [a1 _openDBForceRecreate:];
}

id objc_msgSend__pbMappingForMessageID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_pbMappingForMessageID:");
}

id objc_msgSend__raiseExceptionWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_raiseExceptionWithError:");
}

id objc_msgSend__registerNotifydServices(void *a1, const char *a2, ...)
{
  return _[a1 _registerNotifydServices];
}

id objc_msgSend__scheduleExportAndSendAssets_context_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_scheduleExportAndSendAssets:context:");
}

id objc_msgSend__scheduleSync(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleSync];
}

id objc_msgSend__sendAssetResourceAtURL_metadata_identifier_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendAssetResourceAtURL:metadata:identifier:completionHandler:");
}

id objc_msgSend__sendResponse_(void *a1, const char *a2, ...)
{
  return [a1 _sendResponse:];
}

id objc_msgSend__updateDeviceControllers(void *a1, const char *a2, ...)
{
  return _[a1 _updateDeviceControllers];
}

id objc_msgSend__updateExpireTimerWithDate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_updateExpireTimerWithDate:");
}

id objc_msgSend__wantsProxyServiceController(void *a1, const char *a2, ...)
{
  return _[a1 _wantsProxyServiceController];
}

id objc_msgSend__wantsTinkerServiceController(void *a1, const char *a2, ...)
{
  return _[a1 _wantsTinkerServiceController];
}

id objc_msgSend_acceptableCropRect(void *a1, const char *a2, ...)
{
  return _[a1 acceptableCropRect];
}

id objc_msgSend_actionQ(void *a1, const char *a2, ...)
{
  return _[a1 actionQ];
}

id objc_msgSend_activeSyncSession(void *a1, const char *a2, ...)
{
  return _[a1 activeSyncSession];
}

id objc_msgSend_addAsset_(void *a1, const char *a2, ...)
{
  return [a1 addAsset:];
}

id objc_msgSend_addAssetCollection_(void *a1, const char *a2, ...)
{
  return [a1 addAssetCollection:];
}

id objc_msgSend_addAssetIndex_(void *a1, const char *a2, ...)
{
  return [a1 addAssetIndex:];
}

id objc_msgSend_addCollectionTargetItem_(void *a1, const char *a2, ...)
{
  return [a1 addCollectionTargetItem:];
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return [a1 addDelegate:queue:];
}

id objc_msgSend_addFetchPropertySets_(void *a1, const char *a2, ...)
{
  return [a1 addFetchPropertySets:];
}

id objc_msgSend_addIncomingFileHandler_forMessageID_(void *a1, const char *a2, ...)
{
  return [a1 addIncomingFileHandler:forMessageID:];
}

id objc_msgSend_addKeyAssetIndex_(void *a1, const char *a2, ...)
{
  return [a1 addKeyAssetIndex:];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return [a1 addObject:];
}

id objc_msgSend_addOperationWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 addOperationWithBlock:];
}

id objc_msgSend_addRequestHandler_forMessageID_(void *a1, const char *a2, ...)
{
  return [a1 addRequestHandler:forMessageID:];
}

id objc_msgSend_addRequiringExternalPowerSourceConnectedAssetIndex_(void *a1, const char *a2, ...)
{
  return [a1 addRequiringExternalPowerSourceConnectedAssetIndex:];
}

id objc_msgSend_addResponseHandler_forMessageID_(void *a1, const char *a2, ...)
{
  return [a1 addResponseHandler:forMessageID:];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return [a1 allocWithZone:];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 appendBytes:length:];
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return [a1 appendData:];
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:")
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return [a1 arrayByAddingObjectsFromArray:];
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithCapacity:];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:count:];
}

id objc_msgSend_asDictionary(void *a1, const char *a2, ...)
{
  return _[a1 asDictionary];
}

id objc_msgSend_assetAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 assetAtIndex:];
}

id objc_msgSend_assetCollection(void *a1, const char *a2, ...)
{
  return _[a1 assetCollection];
}

id objc_msgSend_assetCollectionAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 assetCollectionAtIndex:];
}

id objc_msgSend_assetCollectionSubtype(void *a1, const char *a2, ...)
{
  return _[a1 assetCollectionSubtype];
}

id objc_msgSend_assetCollectionType(void *a1, const char *a2, ...)
{
  return _[a1 assetCollectionType];
}

id objc_msgSend_assetCollections(void *a1, const char *a2, ...)
{
  return _[a1 assetCollections];
}

id objc_msgSend_assetCollectionsCount(void *a1, const char *a2, ...)
{
  return _[a1 assetCollectionsCount];
}

id objc_msgSend_assetContentChanged(void *a1, const char *a2, ...)
{
  return _[a1 assetContentChanged];
}

id objc_msgSend_assetForLocalIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 assetForLocalIdentifier:];
}

id objc_msgSend_assetIndexAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 assetIndexAtIndex:];
}

id objc_msgSend_assetIndexsCount(void *a1, const char *a2, ...)
{
  return _[a1 assetIndexsCount];
}

id objc_msgSend_assetResourcesForAsset_(void *a1, const char *a2, ...)
{
  return [a1 assetResourcesForAsset:];
}

id objc_msgSend_assets(void *a1, const char *a2, ...)
{
  return _[a1 assets];
}

id objc_msgSend_assetsCount(void *a1, const char *a2, ...)
{
  return _[a1 assetsCount];
}

id objc_msgSend_assetsForAssetCollection_(void *a1, const char *a2, ...)
{
  return [a1 assetsForAssetCollection:];
}

id objc_msgSend_assetsRequireExternalPowerSourceConnected(void *a1, const char *a2, ...)
{
  return _[a1 assetsRequireExternalPowerSourceConnected];
}

id objc_msgSend_assetsRequireExternalPowerSourceConnectedForAssetCollection_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "assetsRequireExternalPowerSourceConnectedForAssetCollection:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_bypassDuet(void *a1, const char *a2, ...)
{
  return _[a1 bypassDuet];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 cancelAllOperations];
}

id objc_msgSend_centerX(void *a1, const char *a2, ...)
{
  return _[a1 centerX];
}

id objc_msgSend_centerY(void *a1, const char *a2, ...)
{
  return _[a1 centerY];
}

id objc_msgSend_changeDetailsForFetchResult_(void *a1, const char *a2, ...)
{
  return [a1 changeDetailsForFetchResult:];
}

id objc_msgSend_changeDetailsForObject_(void *a1, const char *a2, ...)
{
  return [a1 changeDetailsForObject:];
}

id objc_msgSend_changeObserverForKey_queue_block_(void *a1, const char *a2, ...)
{
  return [a1 changeObserverForKey:queue:block:];
}

id objc_msgSend_changedIndexes(void *a1, const char *a2, ...)
{
  return _[a1 changedIndexes];
}

id objc_msgSend_clearAssetCollections(void *a1, const char *a2, ...)
{
  return _[a1 clearAssetCollections];
}

id objc_msgSend_clearAssetIndexs(void *a1, const char *a2, ...)
{
  return _[a1 clearAssetIndexs];
}

id objc_msgSend_clearAssets(void *a1, const char *a2, ...)
{
  return _[a1 clearAssets];
}

id objc_msgSend_clearCollectionTargetItems(void *a1, const char *a2, ...)
{
  return _[a1 clearCollectionTargetItems];
}

id objc_msgSend_clearKeyAssetIndexs(void *a1, const char *a2, ...)
{
  return _[a1 clearKeyAssetIndexs];
}

id objc_msgSend_clearRequiringExternalPowerSourceConnectedAssetIndexs(void *a1, const char *a2, ...)
{
  return _[a1 clearRequiringExternalPowerSourceConnectedAssetIndexs];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_collectionMetadata(void *a1, const char *a2, ...)
{
  return _[a1 collectionMetadata];
}

id objc_msgSend_collectionTarget(void *a1, const char *a2, ...)
{
  return _[a1 collectionTarget];
}

id objc_msgSend_collectionTargetItemAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 collectionTargetItemAtIndex:];
}

id objc_msgSend_collectionTargetItems(void *a1, const char *a2, ...)
{
  return _[a1 collectionTargetItems];
}

id objc_msgSend_collectionTargetItemsCount(void *a1, const char *a2, ...)
{
  return _[a1 collectionTargetItemsCount];
}

id objc_msgSend_collectionTargetList(void *a1, const char *a2, ...)
{
  return _[a1 collectionTargetList];
}

id objc_msgSend_collectionTargetMapWithLibrary_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "collectionTargetMapWithLibrary:");
}

id objc_msgSend_collections(void *a1, const char *a2, ...)
{
  return _[a1 collections];
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return [a1 compare:];
}

id objc_msgSend_composeSyncRequest(void *a1, const char *a2, ...)
{
  return _[a1 composeSyncRequest];
}

id objc_msgSend_configureResponse(void *a1, const char *a2, ...)
{
  return _[a1 configureResponse];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return [a1 containsObject:];
}

id objc_msgSend_contentProvider(void *a1, const char *a2, ...)
{
  return _[a1 contentProvider];
}

id objc_msgSend_contentProviderDidInvalidateContent_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "contentProviderDidInvalidateContent:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _[a1 context];
}

id objc_msgSend_controllerDidInvalidateContent_(void *a1, const char *a2, ...)
{
  return [a1 controllerDidInvalidateContent:];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "copyItemAtURL:toURL:error:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return [a1 copyWithZone:];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return [a1 countByEnumeratingWithState:x0 objects:x1 count:x2];
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return [a1 createDirectoryAtPath:withIntermediateDirectories:attributes:error:];
}

id objc_msgSend_creationDate(void *a1, const char *a2, ...)
{
  return _[a1 creationDate];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 dataWithBytes:];
}

id objc_msgSend_dataWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 dataWithCapacity:];
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return [a1 dataWithContentsOfURL:];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateAsDate(void *a1, const char *a2, ...)
{
  return _[a1 dateAsDate];
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return [a1 dateWithTimeIntervalSince1970:];
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return [a1 dateWithTimeIntervalSinceNow:];
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return [a1 dateWithTimeIntervalSinceReferenceDate:];
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeBoolForKey:];
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeIntegerForKey:];
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deviceForIDSDevice_(void *a1, const char *a2, ...)
{
  return [a1 deviceForIDSDevice:];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithCapacity:];
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithObjects:forKeys:count:];
}

id objc_msgSend_doNotCompress(void *a1, const char *a2, ...)
{
  return _[a1 doNotCompress];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeBool:x0 forKey:x1];
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeInteger:x0 forKey:x1];
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeObject:forKey:];
}

id objc_msgSend_enumerateIndexesUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateIndexesUsingBlock:];
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeysAndObjectsUsingBlock:];
}

id objc_msgSend_enumerateObjectsSortedByExpirationDate_(void *a1, const char *a2, ...)
{
  return [a1 enumerateObjectsSortedByExpirationDate:];
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateObjectsUsingBlock:];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 errorWithDomain:code:userInfo:];
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 exceptionWithName:reason:userInfo:];
}

id objc_msgSend_expectsPeerResponse(void *a1, const char *a2, ...)
{
  return _[a1 expectsPeerResponse];
}

id objc_msgSend_exportAssetsQueue(void *a1, const char *a2, ...)
{
  return _[a1 exportAssetsQueue];
}

id objc_msgSend_exportAsynchronouslyWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 exportAsynchronouslyWithCompletionHandler:];
}

id objc_msgSend_exportSessionWithAsset_presetName_(void *a1, const char *a2, ...)
{
  return [a1 exportSessionWithAsset:x0 presetName:x1];
}

id objc_msgSend_fetchAssetCollectionsWithLocalIdentifiers_options_(void *a1, const char *a2, ...)
{
  return [a1 fetchAssetCollectionsWithLocalIdentifiers:x0 options:x1];
}

id objc_msgSend_fetchAssetCollectionsWithType_subtype_options_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchAssetCollectionsWithType:subtype:options:");
}

id objc_msgSend_fetchAssetsInAssetCollection_options_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchAssetsInAssetCollection:options:");
}

id objc_msgSend_fetchBestRecentMemoryWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 fetchBestRecentMemoryWithOptions:];
}

id objc_msgSend_fetchFacesInAsset_options_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchFacesInAsset:options:");
}

id objc_msgSend_fetchKeyAssetsInAssetCollection_options_(void *a1, const char *a2, ...)
{
  return [a1 fetchKeyAssetsInAssetCollection:options:];
}

id objc_msgSend_fetchKeyCuratedAssetInAssetCollection_referenceAsset_options_(void *a1, const char *a2, ...)
{
  return [a1 fetchKeyCuratedAssetInAssetCollection:referenceAsset:options:];
}

id objc_msgSend_fetchReducedCuratedAssetsInMemory_options_(void *a1, const char *a2, ...)
{
  return [a1 fetchReducedCuratedAssetsInMemory:options:];
}

id objc_msgSend_fetchResultAfterChanges(void *a1, const char *a2, ...)
{
  return _[a1 fetchResultAfterChanges];
}

id objc_msgSend_fetchResultBeforeChanges(void *a1, const char *a2, ...)
{
  return _[a1 fetchResultBeforeChanges];
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return [a1 fileExistsAtPath:];
}

id objc_msgSend_filePath(void *a1, const char *a2, ...)
{
  return _[a1 filePath];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithPath:];
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithPath:x0 isDirectory:x1];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return [a1 getUUIDBytes:];
}

id objc_msgSend_getValue_(void *a1, const char *a2, ...)
{
  return [a1 getValue:];
}

id objc_msgSend_hasAdjustments(void *a1, const char *a2, ...)
{
  return _[a1 hasAdjustments];
}

id objc_msgSend_hasDate(void *a1, const char *a2, ...)
{
  return _[a1 hasDate];
}

id objc_msgSend_hasExternalPowerSourceConnected(void *a1, const char *a2, ...)
{
  return _[a1 hasExternalPowerSourceConnected];
}

id objc_msgSend_hasIncrementalChanges(void *a1, const char *a2, ...)
{
  return _[a1 hasIncrementalChanges];
}

id objc_msgSend_hasMoves(void *a1, const char *a2, ...)
{
  return _[a1 hasMoves];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_idsIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 idsIdentifier];
}

id objc_msgSend_includeAssetSourceTypes(void *a1, const char *a2, ...)
{
  return _[a1 includeAssetSourceTypes];
}

id objc_msgSend_incomingResponseIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 incomingResponseIdentifier];
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return _[a1 indexSet];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 initWithBlock:];
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 initWithCapacity:];
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return [a1 initWithData:];
}

id objc_msgSend_initWithDescription_(void *a1, const char *a2, ...)
{
  return [a1 initWithDescription:];
}

id objc_msgSend_initWithDescription_userInfo_context_(void *a1, const char *a2, ...)
{
  return [a1 initWithDescription:x0 userInfo:x1 context:x2];
}

id objc_msgSend_initWithDevice_(void *a1, const char *a2, ...)
{
  return [a1 initWithDevice:];
}

id objc_msgSend_initWithDevice_service_(void *a1, const char *a2, ...)
{
  return [a1 initWithDevice:service:];
}

id objc_msgSend_initWithDeviceControllerClass_(void *a1, const char *a2, ...)
{
  return [a1 initWithDeviceControllerClass:];
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return [a1 initWithDictionary:];
}

id objc_msgSend_initWithIDSURL_extensionOverride_(void *a1, const char *a2, ...)
{
  return [a1 initWithIDSURL:x0 extensionOverride:x1];
}

id objc_msgSend_initWithNotificationName_queue_block_(void *a1, const char *a2, ...)
{
  return [a1 initWithNotificationName:x0 queue:x1 block:x2];
}

id objc_msgSend_initWithPath_objectClass_(void *a1, const char *a2, ...)
{
  return [a1 initWithPath:objectClass:];
}

id objc_msgSend_initWithPathExtension_(void *a1, const char *a2, ...)
{
  return [a1 initWithPathExtension:];
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return [a1 initWithService:];
}

id objc_msgSend_initWithService_relationship_requiresConnectedDevice_deviceControllerClass_(void *a1, const char *a2, ...)
{
  return [a1 initWithService:x0 relationship:x1 requiresConnectedDevice:x2 deviceControllerClass:x3];
}

id objc_msgSend_initWithUUID_objectID_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUID:objectID:];
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUIDBytes:];
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUIDString:];
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 insertObject:atIndex:];
}

id objc_msgSend_insertedAssets(void *a1, const char *a2, ...)
{
  return _[a1 insertedAssets];
}

id objc_msgSend_insertedIndexes(void *a1, const char *a2, ...)
{
  return _[a1 insertedIndexes];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _[a1 isConnected];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return [a1 isEqual:];
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToString:];
}

id objc_msgSend_isFavorite(void *a1, const char *a2, ...)
{
  return _[a1 isFavorite];
}

id objc_msgSend_isFromFile(void *a1, const char *a2, ...)
{
  return _[a1 isFromFile];
}

id objc_msgSend_isFromRequest(void *a1, const char *a2, ...)
{
  return _[a1 isFromRequest];
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return [a1 isMemberOfClass:];
}

id objc_msgSend_isPlaceholderAssetCollection_(void *a1, const char *a2, ...)
{
  return [a1 isPlaceholderAssetCollection:];
}

id objc_msgSend_isTinkerPaired(void *a1, const char *a2, ...)
{
  return _[a1 isTinkerPaired];
}

id objc_msgSend_keyAssetIndexAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 keyAssetIndexAtIndex:];
}

id objc_msgSend_keyAssetIndexsCount(void *a1, const char *a2, ...)
{
  return _[a1 keyAssetIndexsCount];
}

id objc_msgSend_keyAssets(void *a1, const char *a2, ...)
{
  return _[a1 keyAssets];
}

id objc_msgSend_keyAssetsForAssetCollection_(void *a1, const char *a2, ...)
{
  return [a1 keyAssetsForAssetCollection:];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_library(void *a1, const char *a2, ...)
{
  return _[a1 library];
}

id objc_msgSend_linkedDeviceForFromID_withRelationship_(void *a1, const char *a2, ...)
{
  return [a1 linkedDeviceForFromID:withRelationship:];
}

id objc_msgSend_linkedDevicesWithRelationship_(void *a1, const char *a2, ...)
{
  return [a1 linkedDevicesWithRelationship:];
}

id objc_msgSend_localIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 localIdentifier];
}

id objc_msgSend_localIdentifierWithUUID_(void *a1, const char *a2, ...)
{
  return [a1 localIdentifierWithUUID:];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_localizedSubtitle(void *a1, const char *a2, ...)
{
  return _[a1 localizedSubtitle];
}

id objc_msgSend_localizedTitle(void *a1, const char *a2, ...)
{
  return _[a1 localizedTitle];
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 mainRunLoop];
}

id objc_msgSend_mapPBRequest_toResponse_messageID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "mapPBRequest:toResponse:messageID:");
}

id objc_msgSend_mediaSubtypes(void *a1, const char *a2, ...)
{
  return _[a1 mediaSubtypes];
}

id objc_msgSend_mediaType(void *a1, const char *a2, ...)
{
  return _[a1 mediaType];
}

id objc_msgSend_mergeFrom_(void *a1, const char *a2, ...)
{
  return [a1 mergeFrom:];
}

id objc_msgSend_messageCenter(void *a1, const char *a2, ...)
{
  return _[a1 messageCenter];
}

id objc_msgSend_messageID(void *a1, const char *a2, ...)
{
  return _[a1 messageID];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}

id objc_msgSend_metadataForAssetCollection_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "metadataForAssetCollection:");
}

id objc_msgSend_modificationDate(void *a1, const char *a2, ...)
{
  return _[a1 modificationDate];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_npto_addAssetCollection_assets_keyAssets_(void *a1, const char *a2, ...)
{
  return [a1 npto_addAssetCollection:x0 assets:x1 keyAssets:x2];
}

id objc_msgSend_npto_addAssets_(void *a1, const char *a2, ...)
{
  return [a1 npto_addAssets:];
}

id objc_msgSend_npto_appPhotosSyncingEnabled(void *a1, const char *a2, ...)
{
  return [a1 npto_appPhotosSyncingEnabled];
}

id objc_msgSend_npto_assetsRequiringExternalPowerSourceConnected(void *a1, const char *a2, ...)
{
  return [a1 npto_assetsRequiringExternalPowerSourceConnected];
}

id objc_msgSend_npto_changesFromLibrary_excludingAssets_(void *a1, const char *a2, ...)
{
  return [a1 npto_changesFromLibrary:excludingAssets:];
}

id objc_msgSend_npto_data(void *a1, const char *a2, ...)
{
  return [a1 npto_data];
}

id objc_msgSend_npto_exportForDevice_isUserInitiated_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "npto_exportForDevice:isUserInitiated:completionHandler:");
}

id objc_msgSend_npto_fetchCountForAssetCollection_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "npto_fetchCountForAssetCollection:");
}

id objc_msgSend_npto_fetchSyncedAlbum(void *a1, const char *a2, ...)
{
  return [a1 npto_fetchSyncedAlbum];
}

id objc_msgSend_npto_indexOfAsset_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "npto_indexOfAsset:");
}

id objc_msgSend_npto_isAlwaysUpdatingEnabledForAssetCollection_(void *a1, const char *a2, ...)
{
  return [a1 npto_isAlwaysUpdatingEnabledForAssetCollection:];
}

id objc_msgSend_npto_libraryCollectionTargetMap(void *a1, const char *a2, ...)
{
  return [a1 npto_libraryCollectionTargetMap];
}

id objc_msgSend_npto_objectForLocalIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 npto_objectForLocalIdentifier:];
}

id objc_msgSend_npto_relevantChangeDetailsForFetchResult_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "npto_relevantChangeDetailsForFetchResult:");
}

id objc_msgSend_npto_syncedAlbumIdentifier(void *a1, const char *a2, ...)
{
  return [a1 npto_syncedAlbumIdentifier];
}

id objc_msgSend_npto_syncedPhotosLimit(void *a1, const char *a2, ...)
{
  return [a1 npto_syncedPhotosLimit];
}

id objc_msgSend_npto_uuid(void *a1, const char *a2, ...)
{
  return [a1 npto_uuid];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return [a1 numberWithBool:];
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return [a1 numberWithDouble:];
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return [a1 numberWithInt:];
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return [a1 numberWithInteger:];
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return [a1 numberWithLongLong:];
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedInteger:];
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedShort:];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndex:];
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return [a1 objectForKey:];
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectForKeyedSubscript:];
}

id objc_msgSend_orderedSet(void *a1, const char *a2, ...)
{
  return _[a1 orderedSet];
}

id objc_msgSend_originalFilename(void *a1, const char *a2, ...)
{
  return _[a1 originalFilename];
}

id objc_msgSend_outgoingResponseIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 outgoingResponseIdentifier];
}

id objc_msgSend_pairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 pairedDevice];
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _[a1 pathExtension];
}

id objc_msgSend_pause(void *a1, const char *a2, ...)
{
  return _[a1 pause];
}

id objc_msgSend_pbResponse(void *a1, const char *a2, ...)
{
  return _[a1 pbResponse];
}

id objc_msgSend_performBlockAfterFirstUnlock_(void *a1, const char *a2, ...)
{
  return [a1 performBlockAfterFirstUnlock:];
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return [a1 performSelector:];
}

id objc_msgSend_persistentUserInfo(void *a1, const char *a2, ...)
{
  return _[a1 persistentUserInfo];
}

id objc_msgSend_photoIrisProperties(void *a1, const char *a2, ...)
{
  return _[a1 photoIrisProperties];
}

id objc_msgSend_photoIrisStillDisplayTime(void *a1, const char *a2, ...)
{
  return _[a1 photoIrisStillDisplayTime];
}

id objc_msgSend_photoIrisVideoDuration(void *a1, const char *a2, ...)
{
  return _[a1 photoIrisVideoDuration];
}

id objc_msgSend_photoIrisVisibilityState(void *a1, const char *a2, ...)
{
  return _[a1 photoIrisVisibilityState];
}

id objc_msgSend_playbackStyle(void *a1, const char *a2, ...)
{
  return _[a1 playbackStyle];
}

id objc_msgSend_powerSourceInfoHasExternalPowerSourceConnectedDidChange_(void *a1, const char *a2, ...)
{
  return [a1 powerSourceInfoHasExternalPowerSourceConnectedDidChange:];
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 predicateWithFormat:];
}

id objc_msgSend_preferredCropRect(void *a1, const char *a2, ...)
{
  return _[a1 preferredCropRect];
}

id objc_msgSend_preferredOrFallbackFilenameExtensionForType_(void *a1, const char *a2, ...)
{
  return [a1 preferredOrFallbackFilenameExtensionForType:];
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _[a1 priority];
}

id objc_msgSend_queueOneIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 queueOneIdentifier];
}

id objc_msgSend_raise(void *a1, const char *a2, ...)
{
  return _[a1 raise];
}

id objc_msgSend_registerChangeObserver_(void *a1, const char *a2, ...)
{
  return [a1 registerChangeObserver:];
}

id objc_msgSend_relationship(void *a1, const char *a2, ...)
{
  return _[a1 relationship];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return [a1 removeItemAtPath:error:];
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return [a1 removeItemAtURL:error:];
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _[a1 removeLastObject];
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return [a1 removeObject:];
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectForKey:];
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectsInArray:];
}

id objc_msgSend_removedIndexes(void *a1, const char *a2, ...)
{
  return _[a1 removedIndexes];
}

id objc_msgSend_reportProgress_(void *a1, const char *a2, ...)
{
  return [a1 reportProgress:];
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _[a1 request];
}

id objc_msgSend_requestClass(void *a1, const char *a2, ...)
{
  return _[a1 requestClass];
}

id objc_msgSend_requestImageForAsset_targetSize_contentMode_options_resultHandler_(void *a1, const char *a2, ...)
{
  return [a1 requestImageForAsset:x0 targetSize:x1 contentMode:x2 options:x3 resultHandler:x4];
}

id objc_msgSend_requestWithMessageID_(void *a1, const char *a2, ...)
{
  return [a1 requestWithMessageID:];
}

id objc_msgSend_requiringExternalPowerSourceConnectedAssetIndexAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 requiringExternalPowerSourceConnectedAssetIndexAtIndex:];
}

id objc_msgSend_requiringExternalPowerSourceConnectedAssetIndexsCount(void *a1, const char *a2, ...)
{
  return _[a1 requiringExternalPowerSourceConnectedAssetIndexsCount];
}

id objc_msgSend_responseClass(void *a1, const char *a2, ...)
{
  return _[a1 responseClass];
}

id objc_msgSend_responseTimeout(void *a1, const char *a2, ...)
{
  return _[a1 responseTimeout];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_sendAssetsQueue(void *a1, const char *a2, ...)
{
  return _[a1 sendAssetsQueue];
}

id objc_msgSend_sendData_fromAccount_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return [a1 sendData:x0 fromAccount:x1 toDestinations:x2 priority:x3 options:x4 identifier:x5 error:x6];
}

id objc_msgSend_sendFile_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 sendFile:completionHandler:];
}

id objc_msgSend_sendRequest_(void *a1, const char *a2, ...)
{
  return [a1 sendRequest:];
}

id objc_msgSend_sendResourceAtURL_metadata_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return [a1 sendResourceAtURL:x0 metadata:x1 toDestinations:x2 priority:x3 options:x4 identifier:x5 error:x6];
}

id objc_msgSend_sendTimeout(void *a1, const char *a2, ...)
{
  return _[a1 sendTimeout];
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return _[a1 serviceName];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAssetCollection_(void *a1, const char *a2, ...)
{
  return [a1 setAssetCollection:];
}

id objc_msgSend_setAssetCollections_(void *a1, const char *a2, ...)
{
  return [a1 setAssetCollections:];
}

id objc_msgSend_setAssets_(void *a1, const char *a2, ...)
{
  return [a1 setAssets:];
}

id objc_msgSend_setAssetsRequireExternalPowerSourceConnected_(void *a1, const char *a2, ...)
{
  return [a1 setAssetsRequireExternalPowerSourceConnected:];
}

id objc_msgSend_setCollectionMetadata_(void *a1, const char *a2, ...)
{
  return [a1 setCollectionMetadata:];
}

id objc_msgSend_setCollectionTarget_(void *a1, const char *a2, ...)
{
  return [a1 setCollectionTarget:];
}

id objc_msgSend_setCollectionTargetList_(void *a1, const char *a2, ...)
{
  return [a1 setCollectionTargetList:];
}

id objc_msgSend_setCollectionTargetMap_(void *a1, const char *a2, ...)
{
  return [a1 setCollectionTargetMap:];
}

id objc_msgSend_setCollections_(void *a1, const char *a2, ...)
{
  return [a1 setCollections:];
}

id objc_msgSend_setContentProvider_(void *a1, const char *a2, ...)
{
  return [a1 setContentProvider:];
}

id objc_msgSend_setContext_(void *a1, const char *a2, ...)
{
  return [a1 setContext:];
}

id objc_msgSend_setData_(void *a1, const char *a2, ...)
{
  return [a1 setData:];
}

id objc_msgSend_setDate_(void *a1, const char *a2, ...)
{
  return [a1 setDate:];
}

id objc_msgSend_setDateAsDate_(void *a1, const char *a2, ...)
{
  return [a1 setDateAsDate:];
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setDelegate:];
}

id objc_msgSend_setDelegate_queue_(void *a1, const char *a2, ...)
{
  return [a1 setDelegate:queue:];
}

id objc_msgSend_setDeliveryMode_(void *a1, const char *a2, ...)
{
  return [a1 setDeliveryMode:];
}

id objc_msgSend_setDeprecatedKeyAssetUUIDData_(void *a1, const char *a2, ...)
{
  return [a1 setDeprecatedKeyAssetUUIDData:];
}

id objc_msgSend_setDeprecatedSubtitle_(void *a1, const char *a2, ...)
{
  return [a1 setDeprecatedSubtitle:];
}

id objc_msgSend_setDownloadIntent_(void *a1, const char *a2, ...)
{
  return [a1 setDownloadIntent:];
}

id objc_msgSend_setExpectsResponse_(void *a1, const char *a2, ...)
{
  return [a1 setExpectsResponse:];
}

id objc_msgSend_setFetchLimit_(void *a1, const char *a2, ...)
{
  return [a1 setFetchLimit:];
}

id objc_msgSend_setFilePath_(void *a1, const char *a2, ...)
{
  return [a1 setFilePath:];
}

id objc_msgSend_setFromFile_(void *a1, const char *a2, ...)
{
  return [a1 setFromFile:];
}

id objc_msgSend_setFromRequest_(void *a1, const char *a2, ...)
{
  return [a1 setFromRequest:];
}

id objc_msgSend_setIdsIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setIdsIdentifier:];
}

id objc_msgSend_setKeyAssets_(void *a1, const char *a2, ...)
{
  return [a1 setKeyAssets:];
}

id objc_msgSend_setLibrary_(void *a1, const char *a2, ...)
{
  return [a1 setLibrary:];
}

id objc_msgSend_setLoadingMode_(void *a1, const char *a2, ...)
{
  return [a1 setLoadingMode:];
}

id objc_msgSend_setLocalIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setLocalIdentifier:];
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return [a1 setMaxConcurrentOperationCount:];
}

id objc_msgSend_setMessageCenter_(void *a1, const char *a2, ...)
{
  return [a1 setMessageCenter:];
}

id objc_msgSend_setMessageID_(void *a1, const char *a2, ...)
{
  return [a1 setMessageID:];
}

id objc_msgSend_setMetadata_(void *a1, const char *a2, ...)
{
  return [a1 setMetadata:];
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return [a1 setName:];
}

id objc_msgSend_setNetworkAccessAllowed_(void *a1, const char *a2, ...)
{
  return [a1 setNetworkAccessAllowed:];
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKey:];
}

id objc_msgSend_setObject_forKey_expires_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKey:expires:];
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKeyedSubscript:];
}

id objc_msgSend_setOutputFileType_(void *a1, const char *a2, ...)
{
  return [a1 setOutputFileType:];
}

id objc_msgSend_setOutputURL_(void *a1, const char *a2, ...)
{
  return [a1 setOutputURL:];
}

id objc_msgSend_setPbRequest_(void *a1, const char *a2, ...)
{
  return [a1 setPbRequest:];
}

id objc_msgSend_setPbResponse_(void *a1, const char *a2, ...)
{
  return [a1 setPbResponse:];
}

id objc_msgSend_setPlaceholder_(void *a1, const char *a2, ...)
{
  return [a1 setPlaceholder:];
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return [a1 setPredicate:];
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return [a1 setPriority:];
}

id objc_msgSend_setProgressHandler_(void *a1, const char *a2, ...)
{
  return [a1 setProgressHandler:];
}

id objc_msgSend_setQueueOneIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setQueueOneIdentifier:];
}

id objc_msgSend_setRequest_(void *a1, const char *a2, ...)
{
  return [a1 setRequest:];
}

id objc_msgSend_setRequestClass_(void *a1, const char *a2, ...)
{
  return [a1 setRequestClass:];
}

id objc_msgSend_setRequestIDSIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setRequestIDSIdentifier:];
}

id objc_msgSend_setRequestPersistentUserInfo_(void *a1, const char *a2, ...)
{
  return [a1 setRequestPersistentUserInfo:];
}

id objc_msgSend_setRequestSent_(void *a1, const char *a2, ...)
{
  return [a1 setRequestSent:];
}

id objc_msgSend_setResponseClass_(void *a1, const char *a2, ...)
{
  return [a1 setResponseClass:];
}

id objc_msgSend_setResponseTimeout_(void *a1, const char *a2, ...)
{
  return [a1 setResponseTimeout:];
}

id objc_msgSend_setSendTimeout_(void *a1, const char *a2, ...)
{
  return [a1 setSendTimeout:];
}

id objc_msgSend_setSent_(void *a1, const char *a2, ...)
{
  return [a1 setSent:];
}

id objc_msgSend_setShouldUnlinkFile_(void *a1, const char *a2, ...)
{
  return [a1 setShouldUnlinkFile:];
}

id objc_msgSend_setSortDescriptors_(void *a1, const char *a2, ...)
{
  return [a1 setSortDescriptors:];
}

id objc_msgSend_setSubtitle_(void *a1, const char *a2, ...)
{
  return [a1 setSubtitle:];
}

id objc_msgSend_setSubtype_(void *a1, const char *a2, ...)
{
  return [a1 setSubtype:];
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 setTimestamp:];
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return [a1 setTitle:];
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return [a1 setType:];
}

id objc_msgSend_setURL_(void *a1, const char *a2, ...)
{
  return [a1 setURL:];
}

id objc_msgSend_setUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return [a1 setUnderlyingQueue:];
}

id objc_msgSend_setUnlinkWhenSent_(void *a1, const char *a2, ...)
{
  return [a1 setUnlinkWhenSent:];
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return [a1 setUserInfo:];
}

id objc_msgSend_setUuidData_(void *a1, const char *a2, ...)
{
  return [a1 setUuidData:];
}

id objc_msgSend_setVersion_(void *a1, const char *a2, ...)
{
  return [a1 setVersion:];
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return [a1 setWithArray:];
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 setWithCapacity:];
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return [a1 setWithObject:];
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return [a1 setWithObjects:];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedPhotoLibrary(void *a1, const char *a2, ...)
{
  return _[a1 sharedPhotoLibrary];
}

id objc_msgSend_shouldUnlinkFile(void *a1, const char *a2, ...)
{
  return _[a1 shouldUnlinkFile];
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _[a1 size];
}

id objc_msgSend_sortDescriptorWithKey_ascending_(void *a1, const char *a2, ...)
{
  return [a1 sortDescriptorWithKey:ascending:];
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingFormat:];
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingPathComponent:];
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingPathExtension:];
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingLastPathComponent];
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingPathExtension];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 stringWithFormat:];
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return [a1 stringWithUTF8String:];
}

id objc_msgSend_strongToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 strongToStrongObjectsMapTable];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return [a1 subarrayWithRange:];
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return [a1 subdataWithRange:];
}

id objc_msgSend_subtitle(void *a1, const char *a2, ...)
{
  return _[a1 subtitle];
}

id objc_msgSend_subtype(void *a1, const char *a2, ...)
{
  return _[a1 subtype];
}

id objc_msgSend_supportedFileTypes(void *a1, const char *a2, ...)
{
  return _[a1 supportedFileTypes];
}

id objc_msgSend_supportsCapability_(void *a1, const char *a2, ...)
{
  return [a1 supportsCapability:];
}

id objc_msgSend_syncCoordinatorWithServiceName_(void *a1, const char *a2, ...)
{
  return [a1 syncCoordinatorWithServiceName:];
}

id objc_msgSend_syncDidComplete(void *a1, const char *a2, ...)
{
  return _[a1 syncDidComplete];
}

id objc_msgSend_syncDidCompleteSending(void *a1, const char *a2, ...)
{
  return _[a1 syncDidCompleteSending];
}

id objc_msgSend_syncDidFailWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "syncDidFailWithError:");
}

id objc_msgSend_syncRestriction(void *a1, const char *a2, ...)
{
  return _[a1 syncRestriction];
}

id objc_msgSend_syncSessionType(void *a1, const char *a2, ...)
{
  return _[a1 syncSessionType];
}

id objc_msgSend_targetForAssetCollection_(void *a1, const char *a2, ...)
{
  return [a1 targetForAssetCollection:];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timeout(void *a1, const char *a2, ...)
{
  return _[a1 timeout];
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _[a1 timestamp];
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _[a1 title];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_typeWithFilenameExtension_(void *a1, const char *a2, ...)
{
  return [a1 typeWithFilenameExtension:];
}

id objc_msgSend_typeWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 typeWithIdentifier:];
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_uniformTypeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uniformTypeIdentifier];
}

id objc_msgSend_uniqueID(void *a1, const char *a2, ...)
{
  return _[a1 uniqueID];
}

id objc_msgSend_uniqueIDOverride(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIDOverride];
}

id objc_msgSend_unlinkURL(void *a1, const char *a2, ...)
{
  return _[a1 unlinkURL];
}

id objc_msgSend_unlinkWhenSent(void *a1, const char *a2, ...)
{
  return _[a1 unlinkWhenSent];
}

id objc_msgSend_unregisterChangeObserver_(void *a1, const char *a2, ...)
{
  return [a1 unregisterChangeObserver:];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_updatedAssets(void *a1, const char *a2, ...)
{
  return _[a1 updatedAssets];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return _[a1 uuid];
}

id objc_msgSend_uuidData(void *a1, const char *a2, ...)
{
  return _[a1 uuidData];
}

id objc_msgSend_validateURLs_withOptions_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "validateURLs:withOptions:error:");
}

id objc_msgSend_valueForKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 valueForKeyPath:];
}

id objc_msgSend_valueForProperty_(void *a1, const char *a2, ...)
{
  return [a1 valueForProperty:];
}

id objc_msgSend_valueWithBytes_objCType_(void *a1, const char *a2, ...)
{
  return [a1 valueWithBytes:x0 objCType:x1];
}

id objc_msgSend_waitUntilAllOperationsAreFinished(void *a1, const char *a2, ...)
{
  return _[a1 waitUntilAllOperationsAreFinished];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsHashTable];
}

id objc_msgSend_weakToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 weakToStrongObjectsMapTable];
}

id objc_msgSend_writeDataForAssetResource_toFile_options_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 writeDataForAssetResource:x0 toFile:x1 options:x2 completionHandler:x3];
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return [a1 writeToURL:x0 options:x1 error:x2];
}